---

title: Method and system for management protocol-based data streaming
abstract: A method for performing data streaming using a management protocol. In one embodiment, the method includes receiving a request of contents of a file at a first system from a second system, the file is associated with the first system, reading contents of the file at the first system, in response to the request, and streaming the contents of the file to the second system, wherein the streaming of the contents is based on a management protocol.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07620727&OS=07620727&RS=07620727
owner: SAP (AG)
number: 07620727
owner_city: Walldorf
owner_country: DE
publication_date: 20060929
---
Embodiments of the invention generally relate to the field of data transferring. More particularly the embodiments of the invention relate to performing data streaming using a management protocol.

As application development projects are growing larger transferring of data is becoming increasingly important. Transferring of large data from large files is particularly cumbersome. Furthermore none of the conventional data transfer tools provide for transferring of data using management protocols. Management protocols e.g. Java Management Extensions JMX protocol are primarily to provide providers with the ability to add monitoring and management functions to their applications e.g. Java applications . For example a JMX application programming interface API allow local and remote management of Java enabled properties such as web servers network devices web phones etc.

When using JMX technology any application device or service residing at a machine can be controlled remotely though the use of custom JavaBeans such as Managed Beans MBeans . An MBean is registered in a core management object server e.g. MBean server . An MBean server acts as a management agent to any remote managers that are to access the machine. There several types of MBeans are defined by JMX such MBeans include standard MBean dynamic MBean model MBean and open MBean. Standard MBeans provide management interfaces that are described by their method names. A dynamic MBean implements its management interface programmatically with the javax.management. A model MBean is a generic configurable MBean that applications can use to instrument any machine dynamically. An open MBean is a dynamic MBean with specific constraints on its data types to allow management applications and their administrators to know and use new managed objects as they are discovered at runtime.

According to one embodiment a method for performing data streaming using a management protocol. The method includes receiving a request of contents of a file at a first system from a second system the file is associated with the first system reading contents of the file at the first system in response to the request and streaming the contents of the file to the second system wherein the streaming of the contents is based on a management protocol.

Other embodiments are also disclosed. Further the above attributes may be implemented using a computer program a system or an apparatus or any combination thereof. These and other details of one or more embodiments of the present invention are set forth in the accompanying drawings and in the description below.

As used herein references to one or more embodiments are understood as describing a particular feature structure or characteristic included in at least one implementation of the invention. Thus phrases such as in one embodiment or in an alternate embodiment appearing herein describe various embodiments and implementations of the invention and do not necessarily all refer to the same embodiment. However they are also not necessarily mutually exclusive. Descriptions of certain details and implementations follow including a description of the figures which may depict some or all of the embodiments described below as well as discussing other potential embodiments or implementations of the inventive concepts presented herein.

File which may reside at system or at another system is accessed and read by system via input file stream . As the contents of file are read they are transmitted via MBean to system over a network e.g. Internet . Bytes e.g. 1 2 MB of the contents of file e.g. having 10 GB of contents are streamed to system where they are received via management protocol stream e.g. JMX stream that is generated via a management protocol stream module that is employed at system . Management protocol stream module is management protocol based e.g. JMX based and may be part of a client application at system . Having this management protocol stream allows system to receive and read the contents of file being streamed from system .

In one embodiment the management protocol stream module using the management protocol e.g. JMX to act as a data carrier to provide management protocol stream to receive large data files . For example large data transfer are to be transferred via a JMX protocol as WebDynpro models are JMX based and can be used over HyerText Transfer Protocol HTTP with Simple Object Access Protocol SOAP as in Web services. It is convenient and practical to use the same basic technology e.g. JMX when transferring data particularly large data.

System registers an MBean such as MBean or another MBean which provides functionalities that can be used to open a stream of contents on system and then MBean helps transfer the streaming data using a byte array . A library at system may provide access to that data via an API that extents the input stream class which allows standard access to the streaming data from system . This technique allows for opening of streams to remote file systems and transferring data from such systems to local systems using a management protocol as a carrier of data stream. For example a JMX protocol can be serialized into Web services which allows safe access e.g. penetrating firewalls to streaming data of remote systems .

Referring now to it illustrates an embodiment of a management protocol stream module . The illustrated management stream module includes a management protocol and a stream protocol that further includes various components and modules. As illustrated the stream module includes a transportation module translation module communication module input stream module etc. These modules and components are to perform various functionalities to perform management protocol based streaming of data between systems.

At processing block the file contents are received at the first system via a management protocol stream e.g. JMX stream using a management protocol stream module e.g. JMX stream module that is management protocol based as it uses the management protocol e.g. JMX as a data carrier to carry the file contents. At decision block a determination is made as to whether the file contents are to be unzipped. If previously zipped at the second system the contents are unzipped at the first system using an unzipping module residing at the first system at processing block . If the contents are not to be unzipped or once the unzipping is performed the process continues with decision block with determining whether the file contents are to be decrypted. If yes the contents are decrypted at processing block using a decrypting module. If not or if the decryption is already performed the process continues with reading of the file at the first system using a reading module residing at the first module at processing block .

In one embodiment to perform various embodiments of the present invention a server or node e.g. J2EE server is employed which supports Enterprise Java Bean EJB components and EJB containers at the business layer and Servlets and Java Server Pages JSP at the presentation layer . A virtual machine VM including a Java virtual machine JVM may be employed to host the server or server node. It is understood that processes taught by the discussion above can be practiced within various software environments such as for example object oriented and non object oriented programming environments Java based environments such as a J2EE environment or environments defined by other releases of the Java standard other environments e.g. a .NET environment a Windows NT environment each provided by Microsoft Corporation and the like.

Processes taught by the discussion above may be performed with program code such as machine executable instructions which can cause a machine such as a virtual machine a general purpose processor disposed on a semiconductor chip a special purpose processor disposed on a semiconductor chip etc. to perform certain functions. Alternatively these functions may be performed by specific hardware components that contain hardwired logic for performing the functions or by any combination of programmed computer components and custom hardware components.

One or more modules within or associated with an enhanced configuration architecture such as management protocol based data streaming mechanism of and its sub architectures and systems e.g. systems APIs e.g. CPT API and its modules models components and other elements may include hardware software and a combination thereof. In a case where a module includes software the software data instructions and or configuration may be provided via an article of manufacture by a machine electronic device hardware. An article of manufacture may include a machine accessible readable medium having content to provide instructions data etc. The content may result in an electronic device for example a filer a disk or a disk controller as described herein performing various operations or executions described. A machine accessible medium includes any mechanism that provides i.e. stores and or transmits information content in a form accessible by a machine e.g. computing device electronic device electronic system subsystem etc. . For example a machine accessible medium includes recordable non recordable media e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. as well as electrical optical acoustical or other form of propagated signals e.g. carrier waves infrared signals digital signals etc. etc. The machine accessible medium may further include an electronic device having code loaded on a storage that may be executed when the electronic device is in operation. Thus delivering an electronic device with such code may be understood as providing the article of manufacture with such content described above. Furthermore storing code on a database or other memory location and offering the code for download over a communication medium via a propagated signal may be understood as providing the article of manufacture with such content described above. The code may also be downloaded from a remote computer e.g. a server to a requesting computer e.g. a client by way of data signals embodied in a propagation medium e.g. via a communication link e.g. a network connection .

Client systems may execute multiple application or application interfaces. Each instance or application or application interface may constitute a user session. Each user session may generate one or more requests to be processed by server . The requests may include instructions or code to be executed on a runtime system such as VM on server and its components and modules as described throughout this document.

In addition to what is described herein various modifications may be made to the disclosed embodiments and implementations of the invention without departing from their scope. Therefore the illustrations and examples herein should be construed in an illustrative and not a restrictive sense. The scope of the invention should be measured solely by reference to the claims that follow.

