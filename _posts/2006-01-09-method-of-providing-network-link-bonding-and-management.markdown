---

title: Method of providing network link bonding and management
abstract: A method, apparatus and computer program product for providing network link bonding and management is presented. At least one physical link is established between a first endpoint and a second endpoint. A logical link is established at an application server level between the first endpoint and the second endpoint, the logical link including said at least one physical link. At least one physical link is used to provide communications between the first endpoint and the second endpoint. Messages are distributed among the physical links and the received messages are ordered into a single stream for the higher layer application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08566471&OS=08566471&RS=08566471
owner: Avaya Inc.
number: 08566471
owner_city: Basking Ridge
owner_country: US
publication_date: 20060109
---
Channel bonding involves multiple physical connections which are bonded into a single logical connection. Channel bonding is a method where the data in each message gets striped across multiple network cards installed in each machine. In a particular method channel bonding doubles the communication rate while only adding about ten percent to the overall cost. One way to perform channel bonding is to use multiple transceivers working in parallel. For example data words in a transmitter can be split into bytes with each byte sent over a separate transceiver. The bytes are received in parallel by separate transceivers in a receiver. The received bytes are then combined in the correct sequence to recover the original words. The communication path of each transceiver pair one in the transmitter and one in the receiver is called a channel . These methods depend on parallel communication channels to achieve adequate sustained message transfer rates.

Conventional mechanisms such as those explained above suffer from a variety of deficiencies. One such deficiency is that in conventional systems most channel bonding is done below the Transmission Control Protocol TCP level and therefore TCP is used to handle reordering of messages. Thus channel bonding is not used at an application server level which would require ordering of the received messages.

Embodiments of the invention significantly overcome such deficiencies and provide mechanisms and techniques that provide efficient network link bonding and management to higher layer applications. This includes the provision of dynamic bandwidth management link redundancy and flow control. Applications need to manage multiple physical links while treating them as a single logical link. When bonding multiple physical links e.g. sockets into a single logical link there should be an efficient technique to distribute messages among the links on the near end and on the far end to order the messages into a single stream to be presented to the higher layer application. Applications may require the ability to add and remove bandwidth dynamically and transparently. For example applications may require the ability to increase bandwidth when the current bandwidth capacities have been exceeded. Applications may further require the ability to continue to function seamlessly under partial network failures or short complete failures that recover. An IT manager needs to be able to control resources used e.g. application links servers etc. based on business needs.

The present method of providing network link bonding and management provides a logical connection between communication endpoints and allows for one or more physical socket connections wherein the more connections the more available bandwidth. Connections can be dynamically added or removed to active sessions. The method of providing network link bonding and management provides what can be thought of as one big pipe between the communication endpoints such that within the pipe applications on each end can establish links with each other and can establish logical links within the pipe. Communication behavior remains unchanged for applications. This method of providing network link bonding and management multiplexes application data messages over those connections manages distribution of messages across all connections including overall and per application flow control re orders messages for applications automatically recovers failed connections and retransmits lost messages.

In a particular embodiment of a method for providing network link bonding and management the method includes establishing at least one physical link between a first endpoint and a second endpoint. A logical link is established at an application server level between the first endpoint and the second endpoint. The method further includes using at least one physical link to provide communications between the first endpoint and the second endpoint.

Other embodiments include a computer readable medium having computer readable code thereon for providing network link bonding and management. The medium includes instructions for establishing at least one physical link between a first endpoint and a second endpoint. The medium also includes instructions for establishing a logical link at an application server level between the first endpoint and the second endpoint the logical link including at least one physical link. The medium additionally includes instructions for using at least one physical link to provide communications between the first endpoint and the second endpoint.

Still other embodiments include a computerized device configured to process all the method operations disclosed herein as embodiments of the invention. In such embodiments the computerized device includes a memory system a processor and a communications interface in an interconnection mechanism connecting these components. The memory system is encoded with a process that provides network link bonding and management as explained herein that when performed e.g. when executing on the processor operates as explained herein within the computerized device to perform all of the method embodiments and operations explained herein as embodiments of the invention. Thus any computerized device that performs or is programmed to perform up processing explained herein is an embodiment of the invention.

Other arrangements of embodiments of the invention that are disclosed herein include software programs to perform the method embodiment steps and operations summarized above and disclosed in detail below. More particularly a computer program product is one embodiment that has a computer readable medium including computer program logic encoded thereon that when performed in a computerized device provides associated operations providing network link bonding and management as explained herein. The computer program logic when executed on at least one processor with a computing system causes the processor to perform the operations e.g. the methods indicated herein as embodiments of the invention. Such arrangements of the invention are typically provided as software code and or other data structures arranged or encoded on a computer readable medium such as an optical medium e.g. CD ROM floppy or hard disk or other a medium such as firmware or microcode in one or more ROM or RAM or PROM chips or as an Application Specific Integrated Circuit ASIC or as downloadable software images in one or more modules shared libraries etc. The software or firmware or other such configurations can be installed onto a computerized device to cause one or more processors in the computerized device to perform the techniques explained herein as embodiments of the invention. Software processes that operate in a collection of computerized devices such as in a group of data communications devices or other entities can also provide the system of the invention. The system of the invention can be distributed between many software processes on several data communications devices or all processes could run on a small set of dedicated computers or on one computer alone.

It is to be understood that the embodiments of the invention can be embodied strictly as a software program as software and hardware or as hardware and or circuitry alone such as within a data communications device. The features of the invention as explained herein may be employed in data communications devices and or software systems for such devices such as those manufactured by Avaya Inc. of Lincroft N.J.

A method and computer readable medium for providing network link bonding and management is disclosed. At least one physical link is established between a first endpoint and a second endpoint. A logical link is established at an application server level between the first endpoint and the second endpoint the logical link including at least one physical link. At least one physical link is used to provide communications between the first endpoint and the second endpoint. The use of at least one physical link includes distributing messages among a plurality of the physical links. The received messages from the plurality of the physical links are ordered into a single stream.

Bandwidth management is provided within the logical link by using the physical links to increase bandwidth for an application and to remove bandwidth for an application. The physical links can also be used to provide link redundancy and or flow control. Flow control can be accomplished by using the physical links to limit a message rate from client applications through the Terminal Control Interface TCI limit a rate per physical link and limit a rate per a collection of physical links. The logical link may be secured using Transport Layer Security TLS . The logical links can further be used as part of a scheme to recover failed connections between the first endpoint and the second endpoint. The logical links may also be used for retransmitting lost messages between the first endpoint and the second endpoint.

One example of where this might be useful is if one of the entities in a system has multiple network interfaces possibly on different Local Area Network LAN segments. The present method of providing network link bonding and management could then be used to send more data across the bonded link than could be supported by a single network interface. This also provides added robustness since one of the sockets could go down and be removed from the pool of sockets while the traffic is redistributed to the remaining sockets.

A particular embodiment of providing network link bonding and management is shown in . The environment of includes a first endpoint in communication with a second endpoint . Communication between the first endpoint and second endpoint is accomplished via a logical link which includes a plurality of physical links . While a particular embodiment the logical link comprises sixteen physical links it should be appreciated that the logical link may include any number of physical links .

The communication between endpoint and endpoint in a particular example is a Local Area Network LAN Gateway connection. The LAN gateway is a pure transport and tunnels messages over Transmission Control Protocol Internet Protocol TCP IP . The endpoint initiates client connections and has a one to one relationship between client connections and links in the endpoint servers. Since the LAN gateway is a pure transport it can be used to tunnel any data. Therefore it can be extended to allow data from different sources in the endpoint e.g. source and source to be tunneled over the same pipe also referred to as a tunnel between endpoint and endpoint . Furthermore it will be extended to support a set of pipes i.e. TCP IP connections for the tunnel between those endpoints which will allow load balancing. The set of pipes also provides for redundancy wherein if one pipe is lost data flows over the remaining pipes. In a particular embodiment endpoint is a Communication Manager CM endpoint is an Application Enablement Services AES device and the extended protocol is referred to as the Application Enablement Protocol AEP . A TCP IP connection utilizing the AEP between a CM and an AE Services server is called an AEP connection.

A CM AEP session is the collection of TCP IP connections between the CM server and an AE Services server over which the AEP is utilized. The TCP IP connections are made over secure sockets. In this embodiment there can be up to 16 AEP connections between the CM server and an AE Services server although other embodiments may include any number of connections between the two endpoints. Each CM server can support AEP connections . Each AE Services server can support up to 16 AEP connections also. This allows for a single CM server to support multiple AE Services servers and for a single AE Services server to connect to multiple CM servers . A CM AEP session is established when the first AEP connection is established and is ended when the last AEP connection is torn down.

The Transport Service on the AE Services server is implemented as a both a startable service i.e. a process and as a shared library. Communication between AE Services and the transport layer is via a Transport Client Interface TCI . shows the high level architecture of the transport service.

Referring now to the AE Services transport layer includes a process known as the transport server and a library which implements the TCI. The transport server is a daemon process started as a service on the AE Services server when the server is booted. Transport server is responsible for creating and managing CM AEP sessions and and also for creating and managing AEP connections. For each CM AEP session the transport server starts a read thread and a write thread . The transport server will also start a connection thread. The session thread is responsible for starting sequentially and managing the AEP connections.

Data is exchanged through the transport layer with the TCI. Each connection into the transport layer for a given CM AEP session is given a unique ID. Each ID has it s own read queue and write queue in the transport layer. These queues and are maintained in a shared memory segment managed by the transport layer.

Referring now to a particular embodiment wherein the Communication Manager Application Program Interface CMAPI and Telephony Services Application Programming Interface TSAPI are running on a single machine is shown. The AE Services transport layer which is based on the LAN gateway client is now part of the interface process and handles the transport level messaging with the CM server for both Avaya Computer Telephony and Communications Manager API. The AE Services connection to CM comprises up to 16 sockets that carry the messages for all 16 Adjunct Switch Application Interface ASAI links and all 7 Developer Application Programming Interface DAPI links CMAPI only uses 3 of the 7 . Each socket is identical in functionality and they may be used for redundancy. The sockets are secured via TLS. On the Communication Manager a new process has MUX DEMUX functionality to distribute messages to from the proper ASAI link or DAPI link.

The Application Enablement Protocol AEP is a derivation of the TCP Tunnel Protocol. This protocol is used to communicate between the CM server and the AE Services server for call control and signaling information currently ASAI and DAPI links . For an AEP connection the CM server is considered the server and the AE Services server is considered the client since the CM server is the one listening for AEP connections . The AEP includes a ten byte header followed by optional additional data. All data in the header is in network byte order and the protocol makes no assumptions about the optional data supplied.

Three fields have been added to the original TCP Tunnel Protocol header to form the ten byte header to allow messages to be multiplexed over multiple TCP connections between the CM server and the AE Services server . The three fields include an ID field a Send sequence number field and a Reserved field. The ID field identifies the logical link for which the message is intended. An ID of 0 indicates that the message is for the Transport layer directly. The Send sequence number is used to re order the messages received over multiple TCP connections. The sequence number is sequential within a CM AEP session. The Reserved field can be used for a receive sequence number if in the future re transmission of lost messages is supported.

Since CM AEP sessions can contain multiple AEP connections and any AEP message can be sent over any available AEP connection in that session the transport layer on either side of the AEP connections includes a mechanism for re ordering received messages.

The transport write mechanism is essentially the same for both CM and AE Services. The transport layer favors a single AEP connection for writing. When there is data to write the transport layer will write to the same AEP connection as long as there is available bandwidth on that connection. If the current AEP connection runs out of bandwidth the transport layer will move to the next AEP connection in its list. If all AEP connections have no available bandwidth the transport layer will either wait until there is available bandwidth if it can or it will drop the message.

As shown in the transport read mechanism is essentially the same for both CM and AE Services. The transport layer has a mailbox associated with each AEP connection. If the mailbox for a particular AEP connection is empty and data is waiting on that AEP connection it will be read into the mailbox. The AEP header is always read first. When an AEP header is received it is checked for valid syntax and context before any optional additional data is read. Any error detected with the AEP header will result in an Error Notification message being sent and termination of the AEP connection. When a complete AEP message is read into a mailbox the transport layer will determine if it is a control message i.e. peer to peer transport AEP message or a data message i.e. AEP message is destined for an upstream application . Control messages are processed immediately. Data messages are processed within the order of the sequence numbers. The original sequence numbers are seeded with the sequence number received in the first Connection Request and Connection Accepted AEP messages in a CM AEP session and are unidirectional i.e. each side maintains it s own send sequence numbers .

The reader process has an expectation of the next expected sequence number. If a message is in a mailbox with that sequence number it is sent upstream and the sequence number is bumped. If the expected message is not in a mailbox but there is at least one message in a mailbox i.e. the expected message has not arrived but subsequent messages have a timer will be set if not already set . If the expected message is received before the timer expires the message is sent upstream and the timer is reset. If the timer expires before the expected message is received that message is presumed dropped. The transport layer will then examine the existing messages in the mailboxes and re seed its expected sequence number sending up the next corresponding message. If a data message is received after it has been presumed dropped the transport layer will discard it. This is determined by examining the relative delta between the sequence number in the received message and the expected sequence number.

Referring now to an example of message transport and ordering is shown. Messages A A B B and C C are shown in AE Services server . The messages arrive on logical links on the AE services and the order of the messages is preserved within the logical link. The messages are distributed freely across the transport connections. In this example two physical links and are shown which are both part of a single logical link. A first physical connection is used to transport messages A B B C and C. A second physical connection also part of the single logical connection is used to transport messages C A A and C. The messages are then reordered on the CM server .

A flow chart of a particular embodiment of the presently disclosed method of providing network link bonding and management is depicted in . The rectangular elements are herein denoted processing blocks and represent computer software instructions or groups of instructions. Alternatively the processing blocks represent steps performed by functionally equivalent circuits such as a digital signal processor circuit or an application specific integrated circuit ASIC . The flow diagrams do not depict the syntax of any particular programming language. Rather the flow diagrams illustrate the functional information one of ordinary skill in the art requires to fabricate circuits or to generate computer software to perform the processing required in accordance with the present invention. It should be noted that many routine program elements such as initialization of loops and variables and the use of temporary variables are not shown. It will be appreciated by those of ordinary skill in the art that unless otherwise indicated herein the particular sequence of steps described is illustrative only and can be varied without departing from the spirit of the invention. Thus unless otherwise stated the steps described below are unordered meaning that when possible the steps can be performed in any convenient or desirable order.

Referring now to a particular embodiment of a method of providing network link bonding and management is shown. Method begins with processing block which discloses establishing at least one physical link between the first endpoint and the second endpoint within the logical link. The physical links may realized as TCP IP socket connections or the like.

Processing block states establishing a logical link at an application server level between a first endpoint and a second endpoint. As shown in processing block the logical link may be secured using TLS. The logical link may be thought of as a pipe between the first and second endpoints.

Processing block states using at least one physical link to provide communications between the first endpoint and the second endpoint. As shown in processing block using at least one physical link can include distributing messages among a plurality of the physical links.

Processing block discloses ordering received messages from the plurality of the physical links into a single stream. This is performed to provide a single ordered stream for higher layer applications. As stated in processing block bandwidth management can be accomplished by using the physical links within the logical link to increase bandwidth for an application and to remove bandwidth for an application.

Processing block discloses using the physical links to provide link redundancy while processing block recites using the physical links to provide flow control. As disclosed in processing block the use of the physical links to provide flow control can include using the physical links to limit a number of physical links limit a message rate limit a rate per link or limit a rate per a collection of links.

Processing block recites recovering failed connections between the first endpoint and the second endpoint. Processing block states retransmitting lost messages between the first endpoint and the second endpoint.

The above described method of providing network link bonding and management incorporates a logical connection between communication endpoints and allows for one or more physical socket connections wherein the more connections the more available bandwidth. Connections can be dynamically added or removed from active sessions. The present method of providing network link bonding and management provides one big pipe between the communication endpoints such that within that pipe applications on each end can establish links with each other and can establish logical links within the pipe. Communication behavior remains unchanged for applications. This invention multiplexes application data messages over those connections manages distribution of messages across all connections including overall and per application flow control re orders messages for applications and automatically recovers failed connections and retransmits lost messages.

Having described preferred embodiments of the invention it will now become apparent to those of ordinary skill in the art that other embodiments incorporating these concepts may be used. Additionally the software included as part of the invention may be embodied in a computer program product that includes a computer useable medium. For example such a computer usable medium can include a readable memory device such as a hard drive device a CD ROM a DVD ROM or a computer diskette having computer readable program code segments stored thereon. The computer readable medium can also include a communications link either optical wired or wireless having program code segments carried thereon as digital or analog signals. Accordingly it is submitted that that the invention should not be limited to the described embodiments but rather should be limited only by the spirit and scope of the appended claims.

