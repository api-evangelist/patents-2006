---

title: Renewable conditional access
abstract: Included are systems and methods for providing access. At least one embodiment of a system includes a host configured to receive at least one tool for providing conditional access and a secure processor configured to receive conditional access logic. Some embodiments of the conditional access logic are configured to send at least one configuration message for configuring the at least one tool at the host component for operation with the received access logic.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08127009&OS=08127009&RS=08127009
owner: 
number: 08127009
owner_city: 
owner_country: 
publication_date: 20060630
---
The present disclosure is related to renewable conditional access in a Set top Terminal STT . More specifically the present disclosure is related to providing conditional access in any of a plurality of formats.

Users of a media network such as a cable network have access to a plurality of programming options. Depending on the particular arrangement between the user and a network operator the user may purchase various programming channels and options. A set top terminal STT may be utilized to communicate with the media network to provide programming and options that the user has purchased. As the network operator generally tries to prevent unauthorized access to unpurchased channels and options the STT may be configured with various authentication and or encryption capabilities. As a nonlimiting example many STTs may be configured with a secure processor which may act as a physically secure environment for facilitating access to the purchased channels and options.

While historically the secure processor has been configured with conditional access logic that is unchangeable subsequent to manufacture many STTs are now being configured with one or more secure processors that are configured to receive conditional access logic updates and or different conditional access logic from the logic currently stored. When such changes are made to the secure processor however other components such as a host may also have logic that communicates with secure processor. As various components of the conditional access logic in the secure processor have changed logic in the host may also change in order to communicate with the new conditional access logic. Since updating the host may involve knowledge of the new conditional access logic as well as the capabilities of the particular system utilizing the new conditional access logic many problems can arise in utilizing the new conditional access logic in this manner.

More specifically at least one current approach includes host software and one or more secure processor client designed for a specific network and conditional access. This approach may reduce ability to produce a generic set top box that can be configured to operate on an arbitrary network. One solution to this dilemma has been to divide set top functionality between two separable modules. However this solution can be more expensive because interface hardware and software are generally connected to these separable modules.

Generally speaking there may be three components in a set top terminal that may be network specific the code inside the secure processor non time critical host code which may be utilized for configuring network access and or other advanced features and time critical host code which can be configured to communicate with the secure processor to obtain the control words necessary to decrypt content streams in real time. All of these elements may be part of the conditional access system CAS code on the host device. Downloading network specific or CAS specific host logic may not be desired. Since there are many different possible host platforms each CAS provider would need to write code tailored to each specific host which is in the general case intractable. One current solution involves an interpreter such as a JAVA interpreter and the network specific portions can be written in JAVA or some other agreed upon host independent language. This solution may not be suitable for time critical functions however.

Thus a heretofore unaddressed need exists in the industry to address the aforementioned deficiencies and inadequacies.

Media network can be configured to provide programming signals as digitally formatted signals in addition to delivering analog programming signals. Further media network can also be configured to support one way broadcast services as well as both one way data services and two way media and data services. The two way operation of media network can allow for user interactivity with services such as Pay Per View programming Near Video On Demand NVOD programming according to any of several NVOD implementation methods View On Demand VOD programming according to any of several known VOD implementation methods and interactive applications such as Internet connections and Interactive Media Guide IMG applications among others.

Media network may also be configured to provide interfaces network control transport control session control and servers to access content and services and may be configured to distribute content and services to STT users from headend via satellite PSTN and or Internet . As shown in at least one embodiment of media network includes a headend and a plurality of hubs coupled to a transmission medium . The transmission medium can include any configuration of networking logic for providing communication capabilities between components in media network . Additionally included in the nonlimiting example of is a node coupled to hub . Coupled to the node are trunks and . Trunks can facilitate the communication of programming data to the plurality of digital set top terminals STTs and a plurality of analog STTs . Display of the received data can be provided by display devices 

One can appreciate that although a single headend is illustrated in media network can include any number of headends . Similarly other components may be added to media network and or removed from media network depending on the desired functionality. Similarly while media network includes a plurality of hubs nodes and trunks depending on the particular network infrastructure these as well as other components illustrated in are nonlimiting examples.

STT may also include a data storage infrastructure such as Random Access Memory RAM which may include Dynamic RAM DRAM Video RAM VRAM Static RAM SRAM and or other components and flash memory . RAM may include one or more software programs including a Digital Video Recorder DVR client for receiving and storing received programming data a graphics engine a test application and a browser . Similarly flash memory can include test application store a watchTV component and an operating system which may include a resource manager component . Some embodiments may also include a hard drive .

An encryptor decryptor component may also be included for facilitating encryption and or decryption of signals within the STT . One should note that while encryptor decryptor is illustrated as a separate component within STT this is a nonlimiting example as one or more encryptors and or decryptors may be associated with a transport processor not shown secure processor and or other component within STT .

As one of ordinary skill in the art will realize while certain components of are illustrated as being stored in flash memory and other components are illustrated as being stored in RAM this is a nonlimiting example. Depending on the particular configuration any of these components may reside in flash memory RAM and or hard drive . Additionally other storage devices volatile and or nonvolatile storage may also be included in the STT for storing and providing access to these and other components. Additionally while a single secure processor is depicted in practice one or more secure processors may be included in an STT .

STT may also include a host such as a host processor and or other components for performing one or more actions to facilitate conditional access of data received from media network . A decoder not shown may be included for decoding received data and a Quadrature Amplitude Modulator QAM demodulator for demodulating the received data. A secure processor a tuner system and a digital encoder may also be included. Secure processor may be viewed as a physically secure environment such that physical access to the inner workings of secure processor are generally unobservable subsequent to manufacture and may include logic such as a Conditional Access System CAS client . CAS client may be configured to provide a user with access to programming and or options provided by media network .

One should note that while various components are illustrated in STT this is a nonlimiting example. As one of ordinary skill in the art will realize more or fewer components may be included to provide functionality for a particular configuration. Additionally while the components of STT are arranged in a particular manner this is also a nonlimiting example as other configurations are also considered.

As illustrated the setup process in this particular configuration may include the host sending data to hardware resources . As the secure processor in this nonlimiting example may be unchangeable there is generally no software setup process between the host and secure processor because during manufacture the host was specifically designed to operate with secure processor and logic included therein. During manufacture the host can be configured to communicate with secure processor and CAS client . As the CAS client does not change there may be no desire to setup software residing on host with secure processor .

Additionally in many current implementations of STT secure processor and or CAS client may be configured for update and or change. In many cases the new logic can be downloaded from media network and or from other locations to the secure processor . However in order to operate properly many of these configurations also provide that host also receive logic for communicating with the new logic received at secure processor . As the logic received at secure processor may have a specific protocol the logic at host may be configured according to this specific protocol. While such a configuration can provide flexibility in the logic utilized by secure processor specific host logic may be created for each new version of secure processor logic.

As also illustrated in once host completes setup with hardware resources host can receive messages from hardware resources and send messages to secure processor . In such a configuration secure processor is implemented as a passive component slave to the active component master host . More specifically in such a configuration secure processor sends data to host in response to receiving a request from host . Secure processor may be configured to otherwise remain passive.

One should note that in at least one embodiment the host may be configured to communicate with the secure processor at a low hardware level since the details of this level may not be network specific. In addition some of the commands sent from the host to the secure processor may be intrinsically network nonspecific. As such one may expect the host to understand these commands without relying on downloaded modules. As a nonlimiting example the commands used to download a new conditional access client to the secure processor is likely not CA specific. Likewise in the context of the present disclosure the commands that the host issues to learn how to adapt itself to the loaded conditional access client would likely also not be CAS specific.

The subsequently received CAS client may include among other things parameters for configuring the generic tools received by the host . More specifically in at least one embodiment during or after manufacture STT may receive a CAS client at secure processor . CAS client may include one or more parameters for configuring any of a plurality of tools that may be located at host or otherwise on STT . During setup the secure processor can send one or more parameters for configuring the tools on host for the specific CAS client on secure processor . Upon completion of the setup process secure processor and host may send and receive messages for providing conditional access for various programming and or options to a user of STT . Additionally as discussed with regard to host can send and receive keys from encryptor decryptor as well as receive messages from and perform setup functions with hardware resources .

One should note that while in the configuration from the secure processor acts as a passive slave component in the nonlimiting example of secure processor acts an active component even though the hardware may still be configured as a passive device . More specifically as illustrated in secure processor can be configured as a master component to instruct host for adapting tools of the host to match the secure processor resident conditional access client.

Additionally host can include one or more MPEG section filters that may be configured to receive in band Entitlement Control Messages ECM and or other conditional access messages. Upon receiving the ECMs and or other conditional access messages the MPEG section filter s can determine which messages to pass to CAS message Cache . In operation MPEG section filter s can upon receiving a message determine the start of a message according to a an indication in the MPEG transport packet. The MPEG section filter s can additionally utilize a mask and a compare value for determining whether the received message can pass to the CAS Message Cache . After determining the offset the MPEG section filter s can apply a mask to the received message. In applying the mask the MPEG section filter s can logically and the mask with data in the received massage. The MPEG section filter s can then compare this result with a compare value. If the compare value matches the result the message may pass to the CAS message cache . The MPEG section filter s can additionally specify a message size message rate as well as other data.

As described above during the setup process of the host with a new CAS client secure processor sends a mask value an offset value a mode pass on match versus drop on match toggle filter mode etc. and or a compare value to MPEG section filter s . The MPEG section filter s can then utilize this data as described above for filtering received messages according to the CAS client being executed on secure processor .

Also included in the nonlimiting example of is a CAS message cache . The CAS message cache may be coupled to the MPEG section filter s and may be configured to hold CAS messages received from the MPEG section filter s . The CAS message cache may also be configured to record a time when a message is received record the filter from which the message was received and hold the received message in an addressed slot for delivery to the secure processor .

Additionally the CAS message cache can be configured to receive messages from CAS client . More specifically depending on the particular configuration the CAS client can be configured to instruct the CAS message cache to send at least one message stored on CAS message cache . The CAS client can also instruct the CAS message cache to delete a message stored on CAS message cache .

Also included in host is an incoming message storage component . Incoming message storage component can be configured to receive data from an Open Cable Application Platform OCAP plug in for CAS and or Authorized Service Domain ASD application . More specifically OCAP data can be received from media network for automatically updating an Interactive Programming Guide IPG for display to a user. More specifically in at least one embodiment a different IPG may be utilized depending on the particular media network to which the STT is coupled. As the STT may not be configured to store an IPG for every possible media network upon the STT being coupled to media network the media network can download an IPG to the STT . Similarly depending on the particular configuration a new message for CAS client may be received from media network via OCAP plug in and stored at incoming host message storage . The CAS client can access messages from message store via Secure Processor SP command processor . Additionally new message notify signal can be configured to signal to OCAP plug in that a message from message store is waiting.

Also included in host is a Transport Scrambling Control TSC bit filter . TSC filter can be configured to receive the transport scrambling control bits from MPEG transport packets processed by the stream decryptors . More specifically TSC filter can be configured to monitor the state of the TSC bits record the time the bits change and from those bits determine whether a received stream of MPEG transport packets is encrypted. Control word s can also be sent from SP command processor to stream decryptor via an encrypted tunnel.

Additionally included in the nonlimiting example of is an off chip storage component . Off chip storage component can be configured as volatile and or nonvolatile memory and can be configured to receive a Binary Large Object BLOB which can be accessed by CAS client . More specifically off chip storage component can be configured to securely store data for access by the CAS client . As the CAS client desires at least a portion of the data the CAS client can access off chip storage components for the desired data.

Host in also includes a timer . Timer can be configured to for any of a plurality of timing tasks. Additionally during setup the CAS client can configure the length of timer period granularity and or other features specific to this particular CAS client .

Also included in the nonlimiting example of is a host state collector . In at least one embodiment host state collector can be configured to receive an indication of an event and to send in response to receipt of the indication an abbreviated message to the secure processor related to the event. More specifically host state collector can be coupled to TSC filter CAS message cache timer message storage component and or other components. Upon occurrence of an event such as the arrival of a message or the change of TSC bits one or more components involved in the event can send a message regarding the details of that event to host state collector . Host state collector can then determine the important portion s of the received message. Host state collector can then send an abbreviated message indicating at least one important portion of the received message.

Upon receiving the abbreviated message from host state collector secure processor can determine whether and when to utilize information related to the event. If secure processor determines that information related to the event is to be utilized secure processor can contact the relevant component s for access to the desired information. The host state collector utilizes abbreviated messages in order to save communications bandwidth between host and CAS client .

In a nonlimiting example involving communication of an ECM host can send a new program notification signal to SP command processor . SP command processor can receive this signal and send a host state new program signal to secure processor . Secure processor can then send a setup ECM section filter to SP command processor . SP command processor can then send a setup ECM section filter to MPEG section filter . As discussed above the setup signal for an MPEG section filter can include a mask offset compare value and or other data. Upon receiving the setup ECM section filter the MPEG section filter can receive one or more ECM signals . The MPEG section filter can then filter out ECMs that do not match the criteria sent by the secure processor . MPEG section filter can then send the matching ECM signal s to CAS message cache . CAS message cache can then send a notification signal to host state collector indicating that an ECM was received. The notification signal may also include a time of arrival an address within CAS message cache and or other data. The host state collector can then send an abbreviated notification to SP command processor indicating that an event has occurred with the CAS message cache . The SP command processor can then send a host state new message to secure processor to indicate that an event has occurred. Secure processor can then send a read message to SP command processor which can send a read message to CAS message cache . CAS message cache can then send a message including the ECM to SP command processor which can send a message to secure processor .

One should note that the arrow may indicate a step that is completed in any of a number of ways. More specifically in at least one nonlimiting example this might in fact be completed by passing a message from one module to another and receiving the data as a return message. In other configurations this can be completed via a simple Application Programming Interface API call. Similar configurations can apply to arrows and or .

Upon receiving the message including ECM the secure processor can send a control word CW via a tunnel to SP command processor . SP command processor can then send the control word via tunnel to stream decryptors e.g. encryptor decryptor . SP command processor can then send a host state signal indicating no changes to secure processor . Secure processor can respond with a null response with a desired time out .

If no other events occur after the time out has occurred the SP command processor can again send a host state signal indicating that there are no changes. The secure processor can then provide a null response with desired time out time to SP command processor . If on the other hand an ECM is received at MPEG section filter prior to the time out the MPEG section filter can filter out undesired ECMs and send desired ECM s to CAS message cache . CAS message cache can then send an event notification to host state collector which can send an abbreviated notification to SP command processor . SP command processor can send a host state new message signal to secure processor . Secure processor can respond with a read message signal to SP command processor . SP command processor can send a read message signal to CAS message cache which can respond with a message that includes an ECM to SP command processor . SP command processor can send the message including ECM to secure processor . The secure processor can then send a control word via a tunnel to SP command processor . SP command processor can then send the control word via a tunnel to stream decryptors. SP command processor can then send a host state signal indicating no changes since the last event. Secure processor can then send a null response with desired time out to SP command processor. One should note that while illustrates host state signals etc. are illustrated as originating from SP command processor one should note that in at least one embodiment one or more of these signals can originate from host state collector . Similarly while illustrates null response signals etc. as terminating at SP command processor this is also a nonlimiting example as one or more of these signals may terminate at host state collector . Other configurations are also possible. As illustrated in this nonlimiting example since the secure processor may be configured to send data only upon receiving a request the logic associated with the host may be configured to periodically query the secure processor for data the secure processor might desire to send.

One should note that the flowcharts included herein show the architecture functionality and operation of a possible implementation of software. In this regard each block can be interpreted to represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the blocks may occur out of the order. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order or not at all depending upon the functionality involved.

One should note that any of the programs listed herein which can include an ordered listing of executable instructions for implementing logical functions can be embodied in any computer readable medium for use by or in connection with an instruction execution system apparatus or device such as a computer based system processor containing system or other system that can fetch the instructions from the instruction execution system apparatus or device and execute the instructions. In the context of this document a computer readable medium can be any means that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer readable medium can be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device. More specific examples a nonexhaustive list of the computer readable medium could include an electrical connection electronic having one or more wires a portable computer diskette magnetic a random access memory RAM electronic a read only memory ROM electronic an erasable programmable read only memory EPROM or Flash memory electronic an optical fiber optical and a portable compact disc read only memory CDROM optical . In addition the scope of the certain embodiments of this disclosure can include embodying the functionality described in logic embodied in hardware or software configured mediums.

One should also note that conditional language such as among others can could might or may unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements and or steps. Thus such conditional language is not generally intended to imply that features elements and or steps are in any way required for one or more particular embodiments or that one or more particular embodiments necessarily include logic for deciding with or without user input or prompting whether these features elements and or steps are included or are to be performed in any particular embodiment.

It should be emphasized that the above described embodiments are merely possible examples of implementations merely set forth for a clear understanding of the principles of this disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure.

