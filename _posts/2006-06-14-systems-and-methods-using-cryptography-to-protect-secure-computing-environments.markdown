---

title: Systems and methods using cryptography to protect secure computing environments
abstract: Secure computation environments are protected from bogus or rogue load modules, executables and other data elements through use of digital signatures, seals and certificates issued by a verifying authority. A verifying authority—which may be a trusted independent third party—tests the load modules or other executables to verify that their corresponding specifications are accurate and complete, and then digitally signs the load module or other executable based on tamper resistance work factor classification. Secure computation environments with different tamper resistance work factors use different verification digital signature authentication techniques (e.g., different signature algorithms and/or signature verification keys)—allowing one tamper resistance work factor environment to protect itself against load modules from another, different tamper resistance work factor environment. Several dissimilar digital signature algorithms may be used to reduce vulnerability from algorithm compromise, and subsets of multiple digital signatures may be used to reduce the scope of any specific compromise.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07925898&OS=07925898&RS=07925898
owner: Intertrust Technologies Corp.
number: 07925898
owner_city: Sunnyvale
owner_country: US
publication_date: 20060614
---
This application is a continuation of application Ser. No. 09 925 072 filed on Aug. 6 2001 Publication No. US 2002 0023214 A1 now U.S. Pat. No. 7 120 802 which is a continuation of application Ser. No. 09 678 830 filed on Oct. 4 2000 now U.S. Pat. No. 6 292 569 which is a continuation of application Ser. No. 08 689 754 filed on Aug. 12 1996 now U.S. Pat. No. 6 157 721 all of which are incorporated herein by reference.

This application is related to application Ser. No. 08 388 107 of Ginter et al. Ginter et al. filed 13 Feb. 1995 abandoned now via file wrapper continuation U.S. Pat. No. 5 982 891 incorporated herein by reference 

This invention relates to computer security and more particularly to secure and or protected computer execution environments. Still more specifically the present invention relates to computer security techniques based at least in part on cryptography that protect a computer processing environment against potentially harmful computer executables programs and or data and to techniques for certifying load modules such as executable computer programs or fragments thereof as being authorized for use by a protected or secure processing environment.

Computers have become increasingly central to business finance and other important aspects of our lives. It is now more important than ever to protect computers from bad or harmful computer programs. Unfortunately since many of our most critical business financial and governmental tasks now rely heavily on computers dishonest people have a great incentive to use increasingly sophisticated and ingenious computer attacks.

Imagine for example if a dishonest customer of a major bank could reprogram the bank s computer so it adds to instead of subtracts from the customer s account or diverts a penny to the customer s account from anyone else s bank deposit in excess of 10 000. If successful such attacks would not only allow dishonest people to steal but could also undermine society s confidence in the integrity and reliability of the banking system.

Terrorists can also try to attack us through our computers. We cannot afford to have harmful computer programs destroy the computers driving the greater San Francisco metropolitan air traffic controller network the New York Stock Exchange the life support systems of a major hospital or the Northern Virginia metropolitan area fire and paramedic emergency dispatch service.

There are many different kinds of bad computer programs which in general are termed Trojan horses programs that cause a computer to act in a manner not intended by its operator named after the famous wooden horse of Troy that delivered an attacking army disguised as an attractive gift. One of the most notorious kinds is so called computer viruses diseases that a computer can catch from another computer. A computer virus is a computer program that instructs the computer to do harmful or spurious things instead of useful things and can also replicate itself to spread from one computer to another. Since the computer does whatever its instructions tell it to do it will carry out the bad intent of a malicious human programmer who wrote the computer virus program unless the computer is protected from the computer virus program. Special anti virus protection software exists but it unfortunately is only partially effective for example because new viruses can escape detection until they become widely known and recognized and because sophisticated viruses can escape detection by masquerading as tasks the computer is supposed to be performing.

Computer security risks of all sorts including the risks from computer viruses have increased dramatically as computers have become increasingly connected to one another over the Internet and by other means. Increased computer connectivity provides increased capabilities but also creates a host of computer security problems that haven t been fully solved. For example electronic networks are an obvious path for spreading computer viruses. In October 1988 a university student used the Internet a network of computer networks connected to millions of computers worldwide to infect thousands of university and business computers with a self replicating worm virus that took over the infected computers and caused them to execute the computer virus instead of performing the tasks they were supposed to perform. This computer virus outbreak which resulted in a criminal prosecution caused widespread panic throughout the electronic community.

Computer viruses are by no means the only computer security risk made even more significant by increased computer connectivity. For example a significant percentage of the online electronic community has recently become committed to a new portable computer language called Java developed by Sun Microsystems of Mountain View Calif. Java was designed to allow computers to interactively and dynamically download computer program code fragments called applets over an electronic network such as the internet and execute the downloaded code fragments locally. Java s download and execute capability is valuable because it allows certain tasks to be performed locally on local equipment using local resources. For example a user s computer could run a particularly computationally or data intensive routine relieving the provider s computer from having to run the task and or eliminating the need to transmit large amounts of data over the communications path.

While Java s download and execute capability has great potential it raises significant computer security concerns. For example Java applets could be written to damage hardware software or information on the recipient computer make the computer unstable by depleting its resources and or access confidential information on the computer and send it to someone else without first getting the computer owner s permission. People have expended lots of time and effort trying to solve Java s security problems. To alleviate some of these concerns Sun Microsystems has developed a Java interpreter providing certain built in security features such as 

Numerous security flaws have been found despite these techniques. Moreover a philosophy underlying this overall security design is that a user will have no incentive to compromise the security of her own locally installed Java interpreter and that any such compromise is inconsequential from a system security standpoint because only the user s own computer and its contents are at risk. This philosophy which is typical of many security system designs is seriously flawed in many useful electronic commerce contexts for reasons described below in connection with the above referenced Ginter et al. patent specification.

The Ginter et al. specification describes a virtual distribution environment comprehensively providing overall systems and wide arrays of methods techniques structures and arrangements that enable secure efficient electronic commerce and rights management including on the Internet or other Information Super Highway. 

The Ginter et al. patent disclosure describes among other things techniques for providing a secure tamper resistant execution spaces within a protected processing environment for computer programs and data. The protected processing environment described in Ginter et al. may be hardware based software based or a hybrid. It can execute computer code the Ginter et al. disclosure refers to as load modules. See for example Ginter et al. and corresponding text. These load modules which can be transmitted from remote locations within secure cryptographic wrappers or containers are used to perform the basic operations of the virtual distribution environment. Load modules may contain algorithms data cryptographic keys shared secrets and or other information that permits a load module to interact with other system components e.g. other load modules and or computer programs operating in the same or different protected processing environment . For a load module to operate and interact as intended it must execute without unauthorized modification and its contents may need to be protected from disclosure.

Unlike many other computer security scenarios there may be a significant incentive for an owner of a Ginter et al. type protected processing environment to attack his or her own protected processing environment. For example 

Security experts can often be heard to say that to competently do their job they must think like an attacker. For example a successful home security system installer must try to put herself in the place of a burglar trying to break in. Only by anticipating how a burglar might try to break into a house can the installer successfully defend the house against burglary. Similarly computer security experts must try to anticipate the sorts of attacks that might be brought against a presumably secure computer system.

From this think like an attacker viewpoint introducing a bogus load module is one of the strongest possible forms of attack by a protected processing environment user or anyone else on the virtual distribution environment disclosed in the Ginter et al. patent specification. Because load modules have access to internal protected data structures within protected processing environments and also at least to an extent control the results brought about by those protected processing environments bogus load modules can putting aside for the moment additional possible local protections such as addressing and or ring protection and also putting aside system level fraud and other security related checks perform almost any action possible in the virtual distribution environment without being subject to intended electronic controls. Especially likely attacks may range from straightforward changes to protected data for example adding budget billing for nothing instead of the desired amount etc. to wholesale compromise for example using a load module to expose a protected processing environment s cryptographic keys . For at least these reasons the methods for validating the origin and soundness of a load module are critically important.

The Ginter et al. patent specification discloses important techniques for securing protected processing environments against inauthentic load modules introduced by the computer owner user or any other party including for example 

Although the Ginter et al. patent specification comprehensively solves a host of load module and other security related problems any computer system no matter how secure can be cracked if enough time money and effort is devoted to the project. Therefore even a very secure system such as that disclosed in Ginter et al. can be improved to provide even greater security and protection against attack.

The present invention provides improved techniques for protecting secure computation and or execution spaces as one important but non limiting example the protected processing environments as disclosed in Ginter et al from unauthorized and potentially harmful load modules or other executables or associated data. In one particular preferred embodiment these techniques build upon enhance and or extend in certain respects the load module security techniques arrangements and systems provided in the Ginter et al. specification.

In accordance with one aspect provided by the present invention one or more trusted verifying authorities validate load modules or other executables by analyzing and or testing them. A verifying authority digitally signs and certifies those load modules or other executables it has verified using a public key based digital signature and or certificate based thereon for example .

Protected execution spaces such as protected processing environments can be programmed or otherwise conditioned to accept only those load modules or other executables bearing a digital signature certificate of an accredited or particular verifying authority. Tamper resistant barriers may be used to protect this programming or other conditioning. The assurance levels described below are a measure or assessment of the effectiveness with which this programming or other conditioning is protected.

A web of trust may stand behind a verifying authority. For example a verifying authority may be an independent organization that can be trusted by all electronic value chain participants not to collaborate with any particular participant to the disadvantage of other participants. A given load module or other executable may be independently certified by any number of authorized verifying authority participants. If a load module or other executable is signed for example by five different verifying authority participants a user will have potentially a higher likelihood of finding one that they trust. General commercial users may insist on several different certifiers and government users large corporations and international trading partners may each have their own unique web of trust requirements. This web of trust prevents value chain participants from conspiring to defraud other value chain participants.

In accordance with another aspect provided by this invention each load module or other executable has specifications associated with it describing the executable its operations content and functions. Such specifications could be represented by any combination of specifications formal mathematical descriptions that can be verified in an automated or other well defined manner or any other forms of description that can be processed verified and or tested in an automated or other well defined manner. The load module or other executable is preferably constructed using a programming language e.g. languages such as Java and Python and or design implementation methodology e.g. Gypsy FDM that can facilitate automated analysis validation verification inspection and or testing.

A verifying authority analyzes validates verifies inspects and or tests the load module or other executable and compares its results with the specifications associated with the load module or other executable. A verifying authority may digitally sign or certify only those load modules or other executables having proper specifications and may include the specifications as part of the material being signed or certified 

A verifying authority may instead or in addition selectively be given the responsibility for analyzing the load module and generating a specification for it. Such a specification could be reviewed by the load module s originator and or any potential users of the load module.

A verifying authority may selectively be given the authority to generate an additional specification for the load module for example by translating a formal mathematical specification to other kinds of specifications. This authority could be granted for example by a load module originator wishing to have a more accessible but verified certified description of the load module for purposes of informing other potential users of the load module.

Additionally a verifying authority may selectively be empowered to modify the specifications to make it accurate but may refuse to sign or certify load modules or other executables that are harmful or dangerous irrespective of the accuracy of their associated specifications. The specifications may in some instances be viewable by ultimate users or other value chain participants providing a high degree of assurance that load modules or other executables are not subverting the system and or the legitimate interest of any participant in an electronic value chain the system supports.

In accordance with another aspect provided by the present invention an execution environment protects itself by deciding based on digital signatures for example which load modules or other executables it is willing to execute. A digital signature allows the execution environment to test both the authenticity and the integrity of the load module or other executables as well permitting a user of such executables to determine their correctness with respect to their associated specifications or other description of their behavior if such descriptions are included in the verification process.

A hierarchy of assurance levels may be provided for different protected processing environment security levels. Load modules or other executables can be provided with digital signatures associated with particular assurance levels. Appliances assigned to particular assurance levels can protect themselves from executing load modules or other executables associated with different assurance levels. Different digital signatures and or certificates may be used to distinguish between load modules or other executables intended for different assurance levels. This strict assurance level hierarchy provides a framework to help ensure that a more trusted environment can protect itself from load modules or other executables exposed to environments with different work factors e.g. less trusted or tamper resistant environments . This can be used to provide a high degree of security compartmentalization that helps protect the remainder of the system should parts of the system become compromised.

For example protected processing environments or other secure execution spaces that are more impervious to tampering such as those providing a higher degree of physical security may use an assurance level that isolates it from protected processing environments or other secure execution spaces that are relatively more susceptible to tampering such as those constructed solely by software executing on a general purpose digital computer in a non secure location .

A verifying authority may digitally sign load modules or other executables with a digital signature that indicates or implies assurance level. A verifying authority can use digital signature techniques to distinguish between assurance levels. As one example each different digital signature may be encrypted using a different verification key and or fundamentally different encryption one way hash and or other techniques. A protected processing environment or other secure execution space protects itself by executing only those load modules or other executables that have been digitally signed for its corresponding assurance level.

The present invention may use a verifying authority and the digital signatures it provides to compartmentalize the different electronic appliances depending on their level of security e.g. work factor or relative tamper resistance . In particular a verifying authority and the digital signatures it provides isolate appliances with significantly different work factors preventing the security of high work factor appliances from collapsing into the security of low work factor appliances due to free exchange of load modules or other executables.

Encryption can be used in combination with the assurance level scheme discussed above to ensure that load modules or other executables can be executed only in specific environments or types of environments. The secure way to ensure that a load module or other executable can t execute in a particular environment is to ensure that the environment doesn t have the key s necessary to decrypt it. Encryption can rely on multiple public keys and or algorithms to transport basic key s . Such encryption protects the load module or other executable from disclosure to environments or assurance levels of environments other than the one it is intended to execute in.

In accordance with another aspect provided by this invention a verifying authority can digitally sign a load module or other executable with several different digital signatures and or signature schemes. A protected processing environment or other secure execution space may require a load module or other executable to present multiple digital signatures before accepting it. An attacker would have to break each all of the several digital signatures and or signature schemes to create an unauthorized load module or other executable that would be accepted by the protected processing environment or other secure execution space. Different protected processing environments secure execution spaces might examine different subsets of the multiple digital signatures so that compromising one protected processing environment secure execution space will not compromise all of them. As an optimization a protected processing environment or other secure execution space might verify only one of the several digital signatures for example chosen at random each time an executable is used thereby speeding up the digital signature verification while still maintaining a high degree of security.

Protected processing environments can use this digital seal of approval which may comprise one or more digital signatures to distinguish between authorized and unauthorized load modules . illustrates how an electronic protected processing environment can use and rely on a verifying authority s digital seal of approval . In this example the protected processing environment can distinguish between authorized and unauthorized load modules by examining the load module to see whether it bears the seal of verifying authority . Protected processing environment will execute the load module with its processor only if the load module bears a verifying authority s seal . Protected processing environment discards and does not use any load module that does not bear this seal . In this way protected processing environment securely protects itself against unauthorized load modules such as for example the defective load module made by disreputable load module provider .

Verifying authority uses an analyzing tool s to analyze and test load module and determine whether it performs as specified by its associated specifications that is whether the specifications are both accurate and complete. illustrates an analysis tool as a magnifying glass verifying authority may not rely on visual inspection only but instead preferably uses one or more computer based software testing techniques and or tools to verify that the load module performs as expected matches specifications is not a virus and includes no significant detectable bugs or other harmful functionality. See for example Pressman 3d Ed. McGraw Hill 1992 at chapters 18 and 19 Software Testing Techniques pages 595 661 and the various books and papers referenced there. Although it has been said that testing can show only the presence of bugs not their absence such testing in addition to ensuring that the load module satisfies its specifications can provide added degrees of assurance that the load module isn t harmful and will work as it is supposed to.

Verifying authority is preferably a trusted independent third party such as an impartial well respected independent testing laboratory. Therefore all participants in an electronic transaction involving load module can trust a verifying authority as performing its testing and analysis functions competently and completely objectively and impartially. As described above there may be several different verifying authorities that together provide a web of trust . Several different verifying authorities may each verify and digitally sign the same load module increasing the likelihood that a particular value chain participant will trust one of them and decreasing the likelihood of collusion or fraud. Electronic value chain participants may rely upon different verifying authorities to certify different types of load modules. For example one verifying authority trusted by and known to financial participants might verify load modules relating to financial aspects of a transaction e.g. billing whereas another verifying authority trusted by and known to participants involved in using the information exhaust provided by an electronic transaction might be used to verify load modules relating to usage metering aspects of the same transaction.

Once verifying authority is satisfied with load module it affixes its digital seal of approval to the load module. illustrates the digital sealing process as being performed by a stamp but in the preferred embodiment the digital sealing process is actually performed by creating a digital signature using a well known process. See Schneier 2d Ed. John Wiley Sons 1996 at Chapter 20 pages 483 502 . This digital signature certificate or seal creation process is illustrated in .

In the process load module along with specifications if desired is processed to yield a message digest using a conventional one way hash function selected to provide an appropriate resistance to algorithmic attack. See for example the transformation processes discussed in the Schneier text at Chapter 18 pages 429 455. A one way hash function provides a fingerprint message digest that is unique to load module . The one way hash function transforms the contents of load module into message digest based on a mathematical function. This one way hash mathematical function has the characteristic that it is easy to calculate message digest from load module but it is hard computationally infeasible to calculate load module starting from message digest and it is also hard computationally infeasible to find another load module that will transform to the same message digest . There are many potential candidate functions e.g. MD5 SHA families of functions e.g. MD5 or SHA with different internal constants and keyed functions e.g. message authentication codes based on block ciphers such as DES that may be employed as one way hash functions in this scheme. Different functions may have different cryptographic strengths and weaknesses so that techniques which may be developed to defeat one of them are not necessarily applicable to others.

Message digest may then be encrypted using asymmetric key cryptography. illustrates this encryption operation using the metaphor of a strong box . The message digest is placed into strong box and the strongbox is locked with a lock having two key slots opened by different asymmetrical keys. A first key sometimes called the private key is used to lock the lock. A second different key sometimes called the public key must be used to open the lock once the lock has been locked with the first key. The encryption algorithm and key length is selected so that it is computationally infeasible to calculate first key given access to second key the public key encryption algorithm the clear text message digest and the encrypted digital signature . There are many potential candidate algorithms for this type of asymmetric key cryptography e.g. RSA DSA El Gamal Elliptic Curve Encryption . Different algorithms may have different cryptographic strengths and weaknesses so that techniques which may be developed to defeat one of them are not necessarily applicable to others.

In this case the first key is owned by verifying authority and is kept highly secure for example using standard physical and procedural measures typically employed to keep an important private key secret while preventing it from being lost . Once message digest is locked into strong box using the first key the strong box can be opened only by using the corresponding second key . Note that other items e.g. further identification information a time date stamp etc. can also be placed within strong box .

Maintaining public verification key as a secret within tamper resistant protected processing environment greatly complicates the job of generating bogus digital signatures . If the attacker does not possess second key the difficulty of an algorithmic attack or cryptanalytic attack on the verification digital signature algorithm is significantly increased and the attacker might be reduced to exhaustive search brute force type attacks which would be even less practical because the search trials would require attempting to present a bogus load module to protected processing environment which after a few such attempts is likely to refuse all further attempts. Keeping second key secret also requires a multi disciplinary attack an attacker must both A extract the secret from protected processing environment and B attack the algorithm. It may be substantially less likely that a single attacker may have expertise in each of these two specialized disciplines.

In addition maintaining the public key within a tamper resistant environment forecloses the significant threat that the owner of protected processing environment may himself attack the environment. For example if the owner could replace the appropriate public key with his own substitute public key the owner could force the protected processing environment to execute load modules of his own design thereby compromising the interests of others in enforcing their own controls within the owner s protected processing environment. For example the owner could turn off the control that required him to pay for watching or prohibited him from copying content. Since protected processing environment can support a virtual business presence by parties other than the owner it is important for the protected processing environment to be protected against attacks from the owner.

The load module and its associated digital signature is then delivered to the protected processing environment . These items can be provided together at the same time independently or at different times. Protected processing environment applies the same one way hash transformation on load module that a verifying authority applied. Since protected processing environment starts with the same load module and uses the same one way hash function it should generate the same message digest .

Protected processing environment then decrypts digital signature using the second key i.e. it opens strongbox to retrieve the message digest a verifying authority placed in there. Protected processing environment compares the version of message digest it obtains from the digital signature with the version of message digest it calculates itself from load module using the one way hash transformation . The message digests should be identical. If they do not match digital signature is not authentic or load module has been changed and protected processing environment rejects load module .

The public key corresponding to private key acts only to decrypt authenticate digital signature . Similarly digital signature can only be decrypted authenticated using public key corresponding to the private . Public key will not unlock digital signature and public key will not unlock digital signature .

Different digital signatures N can also be made by using different one way hash functions and or different encryption algorithms. As shown in a load module may have multiple different types of digital signatures associated with it. Requiring a load module to present to a protected processing environment multiple digital signatures generated using fundamentally different techniques decreases the risk that an attacker can successfully manufacture a bogus load module .

For example as shown in the same load module might be digitally signed using three different private keys cryptographic algorithms and or hash algorithms. If a given load module has multiple distinct digital signatures each computed using a fundamentally different technique the risk of compromise is substantially lowered. A single algorithmic advance is unlikely to result in simultaneous success against both or multiple cryptographic algorithms. The two digital signature algorithms in widespread use today RSA and DSA are based on distinct mathematical problems factoring in the case of RSA discrete logs for DSA . The most currently popular one way hash functions MD4 MD5 and SHA have similar internal structures possibly increasing the likelihood that a successful attack against one would lead to a success against another. However hash functions can be derived from any number of different block ciphers e.g. SEAL IDEA triple DES with different internal structures one of these might be a good candidate to complement MD5 or SHA.

Multiple signatures as shown in impose a cost of additional storage for the signatures in each protected load module additional code in the protected processing environment to implement additional algorithms and additional time to verify the digital signatures as well as to generate them at verification time . As an optimization to the use of multiple keys or algorithms an appliance might verify only a subset of several signatures associated with a load module chosen at random each time the load module is used. This would speed up signature verification while maintaining a high probability of detection. For example suppose there are one hundred private verification keys and each load module carries one hundred digital signatures. Suppose each protected processing environment on the other hand knows only a few e.g. ten of these corresponding public verification keys randomly selected from the set. A successful attack on that particular protected processing environment would permit it to be compromised and would also compromise any other protected processing environment possessing and using precisely that same set of ten keys. However it would not compromise most other protected processing environments since they would employ a different subset of the keys used by verifying authority .

These three signatures could all be affixed by the same verifying authority or they could be affixed by three different verifying authorities providing a web of trust . In another model a load module is verified in its entirety by multiple parties if a user trusts any of them she can trust the load module. A protected processing environment would need to have all three corresponding public keys to authenticate the entire load module or the different load module segments could be used by different protected processing environments possessing the corresponding different keys . Different signatures could be calculated using different signature and or one way hash algorithms to increase the difficulty of defeating them by cryptanalytic attack.

Verifying authority can use different digital signing techniques to provide different assurance levels for different kinds of electronic appliances having different work factors or levels of tamper resistance. show an example assurance level hierarchy providing three different assurance levels for different electronic appliance types 

In this example verifying authority digitally signs load modules using different digital signature techniques for example different private keys based on assurance level. The digital signatures applied by verifying authority thus securely encode the same or different load module for use by appropriate corresponding assurance level electronic appliances .

Assurance level in this example may be assigned to a particular protected processing environment at initialization e.g. at the factory in the case of hardware based secure processing units . Assigning assurance level at initialization time facilitates the use of key management e.g. secure key exchange protocols to enforce isolation based on assurance level. For example since establishment of assurance level is done at initialization time rather than in the field in this example the key exchange mechanism can be used to provide new keys assuming an assurance level has been established correctly .

Within a protected processing environment as shown in different assurance levels may be assigned to each separate instance of a channel see Ginter et al. contained therein. In this way each secure processing environment and host event processing environment see Ginter et al. and associated description contained within an instance of a PPE may contain multiple instances of a channel each with independent and different assurance levels. The nature of this feature of the invention permits the separation of different channels within a PPE from each other each channel possibly having identical shared or independent sets of load modules for each specific channel limited solely to the resources and services authorized for use by that specific channel. In this way the security of the entire PPE is enhanced and the effect of security breaches within each channel is compartmentalized solely to that channel.

As shown in different digital signatures and or signature algorithms corresponding to different assurance levels may be used to allow a particular execution environment to protect itself from particular load modules that are accessible to other classes or assurance levels of electronic appliances. As shown in 

In this example electronic appliances of different assurance levels can communicate with one another and pass load modules between one another an important feature providing a scaleable virtual distribution environment involving all sorts of different appliances e.g. personal computers laptop computers handheld computers television sets media players set top boxes internet browser appliances smart cards mainframe computers etc. The present invention uses verifying authority and the digital signatures it provides to compartmentalize the different electronic appliances depending on their level of security e.g. work factor or relative tamper resistance . In particular verifying authority and the digital signatures it provides isolate appliances with significantly different work factors preventing the security of high work factor appliances from collapsing into the security of low work factor appliances due to free exchange of load modules .

In one example verifying authority may digitally sign identical copies of load module for use by different classes or assurance levels of electronic appliances . If the sharing of a load module between different electronic appliances is regarded as an open communications channel between the protected processing environments of the two appliances it becomes apparent that there is a high degree of risk in permitting such sharing to occur. In particular the extra security assurances and precautions of the more trusted environment are collapsed into the those of the less trusted environment because an attacker who compromises a load module within a less trusted environment is then be able to launch the same load module to attack the more trusted environment. Hence although compartmentalization based on encryption and key management can be used to restrict certain kinds of load modules to execute only on certain types of electronic appliances a significant application in this context is to compartmentalize the different types of electronic appliances and thereby allow an electronic appliance to protect itself against load modules of different assurance levels.

In accordance with this feature of the invention verifying authority supports all of these various categories of digital signatures and system uses key management to distribute the appropriate verification keys to different assurance level devices. For example verifying authority may digitally sign a particular load module such that only hardware only based server s at assurance level XI may authenticate it. This compartmentalization prevents any load module executable on hardware only servers from executing on any other assurance level appliance for example software only protected processing environment based support service .

To simplify key management and distribution execution environments having significantly similar work factors can be classified in the same assurance level. shows one example hierarchical assurance level arrangement. In this example less secure software only protected processing environment devices are categorized as assurance level I somewhat more secure software and hardware hybrid protected processing environment appliances are categorized as assurance level II and more trusted hardware only protected processing environment devices are categorized as assurance level III.

To show this type of isolation shows three example corresponding desert islands. Desert island I is inhabited by personal computers A providing a software only protected processing environment. The software only protected processing environment based personal computers inhabit desert island I are all of the same assurance level and thus will each authenticate and may thus each use an assurance level I load module . Desert island II is inhabited by assurance level II hybrid software and hardware protected processing environment personal computers B. These assurance level II personal computers will each authenticate and may thus each execute an assurance level II load module . Similarly a desert island III is inhabited by assurance level III personal computers C providing hardware only protected processing environments. These assurance level III devices C may each authenticate and execute an assurance level III load module

The desert islands are created by the use of different digital signatures on each of load modules . In this example all of the appliances may freely communicate with one another as indicated by the barges which represent electronic or other communications between the various devices. However because particular assurance level load modules will be authenticated only by appliances having corresponding assurance levels the load modules cannot leave their associated desert island providing isolation between the different assurance level execution environments. More specifically a particular assurance level appliance thus protects itself from using a load module of a different assurance level. Digital signatures and or signature algorithms in this sense create the isolated desert islands shown since they allow execution environments to protect themselves from off island load modules of different assurance levels.

A load module or other executable may be certified for multiple assurance levels. Different digital signatures may be used to certify the same load module or other executable for different respective assurance levels. The load module or other executable could also be encrypted differently e.g. using different keys to encrypt the load module based on assurance level. If a load module is encrypted differently for different assurance levels and the keys and or algorithms that are used to decrypt such load modules are only distributed to environments of the same assurance level an additional measure of security is provided. The risk associated with disclosing the load module or other executable contents e.g. by decrypting encrypted code before execution in a lower assurance environment does not compromise the security of higher assurance level systems directly but it may help the attacker learn how the load module or other executable works and how to encrypt them which can be important in making bogus load modules or other executables although not in certifying them since certification requires keys that would only become available to an attacker who has compromised the keys of a corresponding appropriate assurance level environment . Commercially it may be important for administrative ease and consistency to take this risk. In other cases it will not be e.g. provider sensitivities government uses custom functions etc. 

If the load module is found to satisfy its specifications a verifying authority determines whether it is authorized to generate one or more new specifications for the load module block . If it is authorized and this function has been requested Y exit to decision block a verifying authority generates specifications and associates them with the load module block .

If the load module fails the test N exit to decision block verifying authority determines whether it is authorized and able to create new specifications corresponding to the actual load module performance and whether it is desirable to create the conforming specifications decision block . If verifying authority decides not to make new specifications N exit to decision block verifying authority returns the load module to provider block and the process ends. On the other hand if verifying authority determines that it is desirable to make new specifications and it is able and authorized to do so a verifying authority may make new specifications that conform to the load module Y exit to decision block block .

A verifying authority may then digitally sign the load module to indicate approval block . This step may involve applying multiple digital signatures and or a selection of the appropriate digital signatures to use in order to restrict the load module to particular assurance levels of electronic appliances as discussed above. Verifying authority may then determine the distribution of the load module block . This determine distribution step may involve for example determining who the load module should be distributed to e.g. provider support services a load module repository operated by a verifying authority etc. and or what should be distributed e.g. the load module plus corresponding digital signatures digital signatures only digital signatures and associated description etc. . Verifying authority may then distribute the appropriate information to a value chain using the appropriate distribution techniques block .

