---

title: Time business process validations within data context
abstract: Validating executable data for interactions among a plurality of process artifacts at design time. A data context is created to include the plurality of process artifacts. The data context carries interaction rules among the plurality of process artifacts. The executable data from a data source is associated with the plurality of process artifacts in the created data context. A subset of the interaction rules is selected corresponding to at least one of the plurality of process artifacts. The associated executable data is validated when the associated executable data is in accordance with the selected subset of the interaction rules.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07945891&OS=07945891&RS=07945891
owner: Microsoft Corporation
number: 07945891
owner_city: Redmond
owner_country: US
publication_date: 20060412
---
Business Process Design BPD targets the structuring of activities or tasks within a business with the goal of producing an intended outcome of value to its users or customers. BPD can be performed on various different levels of abstraction targeting a spectrum different of users spanning from roles such as business analysts business subject matter experts business data managers developers testers administrators IT professionals etc.

For example from a business perspective defining process steps roles assigned to these steps and the order of these can be the focus of one point of view. Defining specifically the connection of the process and its activities to sources of data required data transformations detailed control and data flow output data or the like may be the focus of another such as an IT oriented view of the process definition. Each presentation caters to a different target audience or persona.

In current BPD practices the common problem is that business analysts today often perform the process design in a vacuum i.e. disconnected from actually executing process and the existing IT artifacts that enable their execution. This main problem lies in the missing common vocabulary between the business users and IT developers. These typical practices limit their ability to trace process designs from a business level concept down to code and deployment artifacts. They also prevent business users from directly affecting changes to existing process designs be it on process instance or process type level.

For example typical problems that frequently occur but need to be prevented through appropriate guidance of the process design are 1 . missing data or process artifact 2 . a required entity for the implementation of a task is not available in its data context 3 . an ambiguous entity 4 . a required entity is available but with multiple instances 5 . the appropriate instance needs to be selected or disambiguated 6 . a conflicting entity 7 . a specific instance is available in the data context but violates a certain constraint against the availability of another entity 8 . only conditionally or optionally available entity 9 . if a certain entity can only be acquired into the data context by performing a task on a conditional path of the workflow then subsequent tasks operating on the respective entity need to be flagged as potentially incomplete or 10 . authorization and access levels constraints.

Using a simple illustration suppose a user assigns an order from a customer in region B to a managerin region A after the order is received. In order for the managerin region A to handle and process the order from region B the managerneeds to obtain an authorization from a managerat the sales department in region B. However when the user assigns this order to manager the user failed to include an activity such as obtaining authorization from manager in the workflow context. Without any alert or error message the user would assume what he has done would seamlessly be executed. However during the execution and when the managerreceives such task the managercould not proceed further without the authorization. As such the entire workflow would require additional exception handling and reconfiguration.

While the existing application programs facilitate the creation of such workflow context these programs usually fail to indicate if there is anything wrong or incomplete among the different tasks or the individuals involved during design time. The existing implementations of process oriented programs typically fail to indicate whether the tasks may be performed until when the workflow is in execution. Typically the existing application programs permit the users to design such workflow activities and the users would only find that parts of the workflow could not be completed because of missing information during execution time. In addition in order to accomplish such validations the user is required to model the data flow on top of the control flow. Typically this leads to a level of technical complexity that goes beyond the typical business user expectation. Other systems or application programs would merely attempt to ensure that the data used is always consistent during the manipulation of data.

Embodiments of the invention overcome the shortfalls of existing implementations by validating data used in a given data context during design time of the process. Embodiments of the invention enhance the design of process oriented activities by evaluating the data needed for execution among a plurality of process artifacts during design time such that the users may construct the process oriented activities without the fear of encountering missing data at later stages. Aspects of the invention promote efficient design and construction of data aware processes while providing users with complete and comprehensive view of the data context during the design stage.

In addition aspects of the invention monitor or keep track of how various process artifacts such as tasks events roles and forms output or bring in data into a data context. Alternative embodiments of the invention also determine whether a particular process artifact needs additional data more than available in the current data context in order to complete its operation. Implementations of the invention check the validity of process models on a business level.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Referring first to a block diagram illustrates a system for validating data for interactions among a plurality of process artifacts. The system includes a computing device which may be a computer or a server computer capable of serving one or more client computers connected via a communications network not shown . In one embodiment the computing device may include a collection of computers in a distributed computing configuration where one or more computers collectively and or individually serve one or more client computers connected via wire or wireless means. In one example the computing device may be a computer of .

The computing device includes a processor which may be a processing unit a collection of processing units or the like for execute computer executable instructions codes and routines. In one example the processor may be processing units in . The computing device also includes a memory area for storing data.

Initially the processor executes an application program embodying aspects of the invention and permits a user to create or generate a data context defined by a set of process oriented instructions and activities. In creating such data context the user may wish to input data via an interface e.g. a user interface UI or a communications interface associated with the data context in order to accomplish the tasks for the user . In one embodiment the scope of the data context changes depending on the set of process oriented instructions activities or artifacts that the user created. In another embodiment the interface may present to the user a form which includes a set of various operations functions or other artifacts that the user may operate or interact to command the processor in creating the data context .

As such the processor creates the data context including a plurality of process artifacts according to the configuration or specification from the user . For example the data context may include a data from a workflow diagram relating to a purchase order processing. The data context may also include data from a flow chart listing a sequence of tasks explaining accounting procedures or the like.

The plurality of process artifacts defines what goes in the data context . For example data context based on a workflow may include process artifacts such as tasks e.g. a logical unit of work entities a class of information with a business meaning e.g. customer ID a role e.g. an individual who performs a task or the like. On the other hand data context based on accounting may include process artifacts such as regular provisions calculation algorithms accounting rules or the like. As such within the created or generated data context the process artifacts carry include or incorporate a set of interactions rules or expressions among the process artifacts. For example in the workflow a sales department clerk must receive an approval from a manager in the same region before accepting a purchase order with a quantity over 1 000 units of goods. Similarly in accounting an accountant must retrieve an instance of regulatory legal provisions before proceeding to perform calculation algorithms. Those skilled in the art would appreciate other types of interaction rules or expressions may be defined or included in the data context without departing from the scope of the invention.

In one embodiment the processor receives input or instructions via the interface from the user for defining the data context . In an alternative embodiment the processor defines the data context according to a pre defined set of data stored in the memory area a data store or other storage device coupled to the computing device .

Still referring to the processor associates data from the data source with a plurality of process artifacts in the data context . In the example of the workflow data context above the processor may associate data such as a collection of customer ID numbers from a database a spreadsheet listing purchase orders electronic data interchange EDI documents a list of emergency suppliers or the like with a number of process artifacts . In another embodiment the data may include executable data e.g. information to be used as input entities or arguments to an executable expression or executable expressions. For example the executable data or expression may be computer executable instructions or functions scripts or the like. In an alternative embodiment the data may include metadata exposed or presented to the plurality of process artifacts the data context such that the processor evaluates and or processes the metadata within the data context .

The processor also selects a set or subset of interaction rules corresponding to at least one of the plurality of process artifacts. Using the workflow data context as an example the processor associates or identifies data or executable data relating to managers in region A instead of region B for handling purchase orders in region A based on the selected interaction rules e.g. managers in region A handles purchase orders in region A . Once the data is associated and the interaction is selected the processor validates the associated executable data for the process artifacts when the associated executable data is in accordance with the selected interaction rules. depict an exemplary data context to illustrate this implementation.

Referring now to a series of diagrams illustrates validating data for process artifacts e.g. process artifacts in a data context according to an embodiment of the invention. In particular shows a purchase order workflow data context in its design stage. In this example the user may design the process to include three tasks a receive order task an approve order task and a send email to regional manager task .

In an interaction rule between the receive order task and the approve order task is defined. For example the receiver order task includes a set of associated or collected data or entity order quantity customer information shipping date or the like. On the other hand to complete the approve order task a set of data or entities is required order quantity customer information shipping date etc. As such the interaction rule indicates that in order to perform and complete the approve order task such artifact needs entities or data such as order quantity customer information shipping date or the like. In this instance because the receive order task outputs or includes the required data entity for approve order task the processor validates the collected data for the two tasks and as a function of the interaction rule. Also as the associated data is in accordance with the interaction rules the data is validated.

Referring now to the user continues this workflow and designs the next task send email to regional manager task . From the data context indicates that the approve order task includes data relating to order quantity customer information shipping date approver s name and the like. However the send email to regional manager task requires entity or data such as approver s region approver s title in order to complete the task . As such an interaction rule or expression between tasks and indicates that the data relating to approver s region approver s title is required to complete the task . However the associated data with the approve order task is not in accordance with or insufficient for such data or entities because it includes order quantity customer information shipping date approver s name and the like. Therefore in validating the data the processor notifies the user such as by using an alert icon or other audible or visual notification or alert that there is insufficient or inaccurate information to complete the task or that the data is not in accordance with the interaction rules.

By validating and notifying the user of such error during design time instead of during execution time embodiments of the invention provide the user with a comprehensive set of information and pictures of what is necessary in order to complete a given set of tasks in a workflow or process based on the available data context. In one embodiment the processor performs a set of static check routines to determine whether the associated executable data is in accordance with the selected interaction rules. For example the static check routines may include validation of general structural design constraints such as specific inconsistent workflow patterns indefinite loop structures defining the minimum set of properties that have to be specified on the various design artifacts such as a human task must always be assigned at minimum to a role as an owner of the task completion .

In yet another embodiment the static check routines include a process validation which focuses on the availability of required resources specifically of data resources entities . For example the static check routines may verify monitor track or determine whether all the required entities that an assigned action assumes as input have been made available for the data context of the respective task or process artifact that the action has been assigned to. Similarly when designing a branching decision within a workflow the condition implementing the decision requires the availability of specific entities in order to evaluate the condition expression.

Even though a given process artifact has been accumulated in the data context the assigned role for performing the task relating to the process artifact may not have appropriate access privileges to access or update the process artifact as required. Aspects of the invention also provide a warning or notification about missing access rights.

Based on the problem classification appropriate user guidance with recommendations or suggestions for resolving the detected difficulties can be provided to the user during design time to complete all the necessary tasks or activities in the process.

In yet another alternative embodiment the processor provides a suggestion or a recommendation to supplement the associated executable data or data as a function of the selected interaction rules. For example in after it is determined that given the state of the workflow i.e. the user has completed up to the task the user could not proceed to complete the task due to insufficient or missing data or information. This missing information or entity however may be found in a database including all information relating to employees. As such the processor makes the suggestion to query for employee information data e.g. employee database and identifies another set of data or executable data employee database for all regions for solving the current situation. For example the processor is able to retrieve or collect the approver s region that is associated with the approver and the approver s title because the processor is able to use the approver s name data provided by the approve order task . In another embodiment the processor may collect or identify another set of data as a function of validating and without first presenting or providing the suggestion to the user .

In an alternative embodiment the suggestion from the processor may include adding a task with a particular kind of input changing or altering a form to allow certain inputs from the data source or the user choosing and pre correlating a particular entity or entity instance or the like.

After adding the entity in the user shown in now has the necessary data as an input for the task . As such the alert icon shown in is removed in . In the user is now enabled to proceed to execute the workflow context at .

It is to be understood that the exemplary workflow data context information illustrated in is used for demonstration purpose only and not limiting aspects of the invention. By validating a more comprehensive application process model for data availability embodiments of the invention efficiently provide a rich user experience in designing and constructing a process oriented or process centric activities and tasks while knowing the designed activities and tasks will be executed according to design. Aspects of the invention also provide meaningful suggestions and or corrective steps that are understandable to a business level modeler rather than a programmer or a software developer who understands programming logics and construct.

At if the validation module determines that data or executable data is validated in accordance with the selected subset of the interactions the process proceeds to for continued process according to the data context or user design. If the validation module cannot validate the data i.e. the executable is not in accordance with the selected subset of the interaction rules the association module identifies a set of missing executable data or another set of data at . At the validation module provides suggestions or proposes changes to a user via a UI component to the process artifacts in the data context . In one embodiment the validation module may further suggest changes to the interaction rules to the user . Alternatively the validation module may receive input from the user to make changes to the process artifacts or the interaction rules based on the provided suggestion or the proposed changes at .

In yet another alternative embodiment the computer readable medium also includes the UI component for providing the suggestion to the user and wherein the UI component receives input from the user in response to the provided suggestion. The UI component may also receive input from the user in creating the data context .

The computer typically has at least some form of computer readable media. Computer readable media which include both volatile and nonvolatile media removable and non removable media may be any available medium that may be accessed by computer . By way of example and not limitation computer readable media comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer storage media include RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that may be used to store the desired information and that may be accessed by computer . Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. Those skilled in the art are familiar with the modulated data signal which has one or more of its characteristics set or changed in such a manner as to encode information in the signal. Wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media are examples of communication media. Combinations of any of the above are also included within the scope of computer readable media.

The system memory includes computer storage media in the form of removable and or non removable volatile and or nonvolatile memory. In the illustrated embodiment system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. For example illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media. also shows a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that may be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive and magnetic disk drive and optical disk drive are typically connected to the system bus by a non volatile memory interface such as interface .

The drives or other mass storage devices and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components may either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies.

A user may enter commands and information into computer through input devices or user interface selection devices such as a keyboard and a pointing device e.g. a mouse trackball pen or touch pad . Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are connected to processing unit through a user input interface that is coupled to system bus but may be connected by other interface and bus structures such as a parallel port game port or a Universal Serial Bus USB . A monitor or other type of display device is also connected to system bus via an interface such as a video interface . In addition to the monitor computers often include other peripheral output devices not shown such as a printer and speakers which may be connected through an output peripheral interface not shown .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to computer . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. LAN and or WAN may be a wired network a wireless network a combination thereof and so on. Such networking environments are commonplace in offices enterprise wide computer networks intranets and global computer networks e.g. the Internet .

When used in a local area networking environment computer is connected to the LAN through a network interface or adapter . When used in a wide area networking environment computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external is connected to system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to computer or portions thereof may be stored in a remote memory storage device not shown . By way of example and not limitation illustrates remote application programs as residing on the memory device. The network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Generally the data processors of computer are programmed by means of instructions stored at different times in the various computer readable storage media of the computer. Programs and operating systems are typically distributed for example on floppy disks or CD ROMs. From there they are installed or loaded into the secondary memory of a computer. At execution they are loaded at least partially into the computer s primary electronic memory. Aspects of the invention described herein includes these and other various types of computer readable storage media when such media contain instructions or programs for implementing the steps described below in conjunction with a microprocessor or other data processor. Further aspects of the invention include the computer itself when programmed according to the methods and techniques described herein.

For purposes of illustration programs and other executable program components such as the operating system are illustrated herein as discrete blocks. It is recognized however that such programs and components reside at various times in different storage components of the computer and are executed by the data processor s of the computer.

Although described in connection with an exemplary computing system environment including computer embodiments of the invention are operational with numerous other general purpose or special purpose computing system environments or configurations. The computing system environment is not intended to suggest any limitation as to the scope of use or functionality of any aspect of the invention. Moreover the computing system environment should not be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment. Examples of well known computing systems environments and or configurations that may be suitable for use with aspects of the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics mobile telephones network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

Embodiments of the invention may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include but are not limited to routines programs objects components and data structures that perform particular tasks or implement particular abstract data types. Aspects of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

An interface in the context of a software architecture includes a software module component code portion or other sequence of computer executable instructions. The interface includes for example a first module accessing a second module to perform computing tasks on behalf of the first module. The first and second modules include in one example application programming interfaces APIs such as provided by operating systems component object model COM interfaces e.g. for peer to peer application communication and extensible markup language metadata interchange format XMI interfaces e.g. for communication between web services .

The interface may be a tightly coupled synchronous implementation such as in Java 2 Platform Enterprise Edition J2EE COM or distributed COM DCOM examples. Alternatively or in addition the interface may be a loosely coupled asynchronous implementation such as in a web service e.g. using the simple object access protocol . In general the interface includes any combination of the following characteristics tightly coupled loosely coupled synchronous and asynchronous. Further the interface may conform to a standard protocol a proprietary protocol or any combination of standard and proprietary protocols.

The interfaces described herein may all be part of a single interface or may be implemented as separate interfaces or any combination therein. The interfaces may execute locally or remotely to provide functionality. Further the interfaces may include additional or less functionality than illustrated or described herein.

In operation computer executes computer executable instructions such as those illustrated in the figures e.g. to implement aspects of the invention.

The order of execution or performance of the operations in embodiments of the invention illustrated and described herein is not essential unless otherwise specified. That is the operations may be performed in any order unless otherwise specified and embodiments of the invention may include additional or fewer operations than those disclosed herein. For example it is contemplated that executing or performing a particular operation before contemporaneously with or after another operation is within the scope of aspects of the invention.

Embodiments of the invention may be implemented with computer executable instructions. The computer executable instructions may be organized into one or more computer executable components or modules. Aspects of the invention may be implemented with any number and organization of such components or modules. For example aspects of the invention are not limited to the specific computer executable instructions or the specific components or modules illustrated in the figures and described herein. Other embodiments of the invention may include different computer executable instructions or components having more or less functionality than illustrated and described herein.

When introducing elements of aspects of the invention or the embodiments thereof the articles a an the and said are intended to mean that there are one or more of the elements. The terms comprising including and having are intended to be inclusive and mean that there may be additional elements other than the listed elements.

Having described aspects of the invention in detail it will be apparent that modifications and variations are possible without departing from the scope of aspects of the invention as defined in the appended claims. As various changes could be made in the above constructions products and methods without departing from the scope of aspects of the invention it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.

