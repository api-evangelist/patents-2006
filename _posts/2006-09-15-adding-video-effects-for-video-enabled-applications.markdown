---

title: Adding video effects for video enabled applications
abstract: A streaming video interface component receives video frames from a streaming driver before the frames are received by a consuming application. The streaming video interface component provides the video frames to a video effect rendering component which renders video effects selected by a user. The video frames with the rendered video effects are then provided back to the streaming interface component which thereafter provides them to the consuming application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08954851&OS=08954851&RS=08954851
owner: Microsoft Corporation
number: 08954851
owner_city: Redmond
owner_country: US
publication_date: 20060915
---
Video cameras are currently in wide use. Similarly video cameras are currently being widely used as peripheral devices to computers and especially personal computers.

While there are a wide variety of applications which make use of cameras on computers some include simply capturing live video images. Others include conducting surveillance. Still others use the camera for messaging such as for conducting video instant messaging or video calls from a computer. In fact it is becoming increasingly popular for users of cameras connected to computers to use those systems to talk to people with both video and audio capability around the world.

In each of these applications it may be desirable to provide an enhanced user experience whereby a user can quickly and easily add video effects to an outgoing video stream so that the video effects appear as if they are being provided from the camera driver itself. It may also be desirable for the video effects to be displayed as if they are part of the original video stream no matter what application they are eventually consumed by.

In some prior techniques video effects were added to video frames by a consuming application. However this requires generation and rendering of the video effects to be updated at each application if the video effects are desired in that application. Processing video effects in this way can be undesirably expensive.

The discussion above is merely provided for general background information and is not intended to be used as an aid in determining the scope of the claimed subject matter.

A streaming video interface component receives video frames from a stream driver before the frames are received by a consuming application. The streaming interface component provides the video frames to a video effect rendering component which renders video effects selected by a user. The video frames with the rendered video effects are then provided back to the streaming interface component which thereafter provides them to the consuming application.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter. The claimed subject matter is not limited to implementations that solve any or all disadvantages noted in the background.

A large majority of applications that use video cameras as peripherals for computing devices rely on a streaming mode architecture for transmitting data from the camera to the user environment and a user mode architecture that processes and consumes the video signal. Therefore before describing the present invention in detail one illustrative embodiment of a user mode architecture and a streaming mode architecture will be described. It will be noted that the invention is not limited to the particular streaming and user mode architectures described but they are described for the sake of example only.

One exemplary embodiment of a streaming architecture is referred to as a kernel streaming architecture KSA . As is known a streaming subsystem in the kernel streaming architecture provides a high bandwidth and low latency communication mechanism between device drivers.

One illustrative user mode architecture divides the processing of multimedia tasks into a set of steps known as filters. Filters have a number of input and output pins which connect them together to form a filter graph. A capture filter in the filter graph captures streaming data from a device such as a camera or camera driver.

The kernel mode components of the kernel streaming devices communicate directly without transitions to and from the kernel mode thereby achieving high bandwidth and low latency. Thus the user mode architecture includes a user mode streaming proxy that uses device input output I O control commands to the kernel streaming subsystem to interact with the kernel streaming subsystem in order to stream data to and from the kernel streaming architecture.

User mode environment includes application with multimedia processing system . In one embodiment multimedia processing system is the DirectShow multimedia processing system and API available from Microsoft Corporation of Redmond Wash. although other processing systems can be used as well.

User mode environment also includes kernel streaming proxy video effect engine VEE kernel streaming interface handler video effect rendering component user selection component and effects data store .

Application can include any of a wide variety of applications. Examples include for instance a video capture application a video surveillance application an instant messaging application a video calling application etc.

Application receives video data taken by camera . The video data is transmitted using high bandwidth low latency kernel streaming techniques in kernel streaming environment through camera driver and kernel streaming driver to user mode environment . The streaming video data is received by the VEE kernel streaming interface handler . Interface handler can be part of kernel streaming proxy as indicated by dashed box or separate therefrom. In any case interface handler receives the video frames and provides them to a video effect rendering component that renders video effects on video frames . The video effects that are rendered were previously selected by user through a user interface representation of user selection component .

User selection component is illustratively a video effects manager that manages and enumerates video effect renderers available on the system and provides application programming interfaces that can be used by a user interface to help user select and apply video effects. User selection component can illustratively be a separate application such as a system tray application or it can be a portion of application . This is indicated by block shown in phantom in .

Effects data store illustratively stores a plurality of different types of video effects that can be applied to the video frames received. Effects data store can illustratively be accessed by component and component . Data store can store the visual effects in any desired way. Examples of some video effects that can be stored include foreground rendered effects background substitution effects fading etc.

VEE kernel streaming interface handler taps into the video pipeline and provides application programming interfaces to user selection component so that user selection component can indicate the effects which the user desires to apply.

Once the selected effects are rendered in the video frames by rendering component the video frames with rendered video effects are then provided back to interface handler where they are provided up through user mode environment through kernel streaming proxy and to the multimedia processing system in application . The video frames with the rendered video effects are processed by system .

Application then begins playing the filter graph generated by multimedia processing system . This is indicated by block in .

User then selects video effects to be applied through user selection component . As briefly described above component illustratively provides a user interface which allows a user to search through and select various types of video effects that the user wishes to apply to the incoming video stream. An indication of which video effects have been selected is then communicated from user selection component to VEE kernel streaming interface handler such as through appropriate application programming interfaces. Selecting the video effects is indicated by block in .

Kernel streaming proxy then calls kernel streaming driver to obtain video frames. The video frames are illustratively first generated by camera and then provided through camera driver to kernel streaming driver . Having kernel streaming proxy request video frames from kernel streaming driver is indicated by block in .

In one embodiment the call from kernel streaming proxy to kernel streaming driver is an asynchronous call. In that embodiment kernel streaming proxy can then go on to perform any other desired functions performed by the particular filter that embodies kernel streaming proxy without waiting for a return on the call. Of course synchronous calls could be used as well.

Kernel streaming driver then waits until a sufficient number of video frames are available to be transmitted to the user mode environment . Once a video frame is ready to be transmitted kernel streaming driver signals an event following which the kernel streaming proxy calls kernel streaming interface handler . This is indicated by block in .

Kernel streaming interface handler then receives either by pulling or by kernel streaming driver pushing the frames. This is indicated by block in .

Before the video frames are provided to application they are provided as indicated by video frames in to video effect rendering component . An indication as to which video effects have been selected for rendering by the user is also provided to rendering component . This is indicated by block in .

Video effect rendering component then renders the selected video effects on frames such as by accessing effects data in data store and returns frames with the video effects rendered therein to interface handler . This is indicated by block in .

Having thus had the video effects rendered to the video frames interface handler then continues by passing the frames with the rendered effects down the filter graph. Interface handler illustratively passes them to kernel streaming proxy for further video processing and on along to other filters in the filter graph generated by multimedia processing system . Passing the frames with the rendered effects down the filter graph is indicated by block in .

It will be noted of course that interface handler can add any desired additional information other than the video effects to frames before passing them down the filter graph. For instance interface handler can add time stamp information motion information object tracking information such as face tracking information indicating a location of a face within a frame etc.

It can also be seen that because interface handler has the video effects rendered as soon as the frames are received from kernel mode environment the video effects will be present in substantially real time as if they originated at the camera driver for all video enabled applications that consume those frames. This is true whether the consuming application is application illustrated in or a different application that consumes the frames at a different location.

First when multimedia processing system begins to generate the filter graph it creates a capture filter which in the embodiment discussed herein is the kernel streaming proxy . This is indicated by block in .

Kernel streaming proxy then creates kernel streaming interface handler . This is indicated by block . In one illustrative embodiment kernel streaming proxy is a dynamic link library DLL and it creates interface handler by referencing a globally unique identifier GUID in the system registry. Thus in one embodiment the GUID referenced by kernel streaming proxy to create interface handler is simply replaced such that proxy creates the particular interface handler that performs the video effect functions described herein.

In any case once kernel streaming interface handler is created as indicated by block in FIG. kernel streaming interface handler may optionally launch user selection component . This is indicated by optional block in . This may be done for example where user selection component is a separate application separate from application . For instance where user selection component is a system tray application that is used by the user to select video effects for application to the video frames that system tray application is launched by interface handler once interface handler is created by multimedia processing system . However where user selection component is part of consuming application for instance then its functionality is launched by consuming application instead of interface handler .

Embodiments are operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with various embodiments include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers telephony systems distributed computing environments that include any of the above systems or devices and the like.

Embodiments may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Some embodiments are designed to be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules are located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing some embodiments includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs which may include application other program modules which may include all or parts of architectures and and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies.

A user may enter commands and information into the computer through input devices such as a keyboard a microphone and a pointing device such as a mouse trackball or touch pad. Other input devices not shown may include a joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or camera or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer is operated in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a hand held device a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on remote computer . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

