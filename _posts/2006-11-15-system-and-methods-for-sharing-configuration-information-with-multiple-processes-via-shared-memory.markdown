---

title: System and methods for sharing configuration information with multiple processes via shared memory
abstract: A system and methods for sharing configuration information with multiple services, or processes, via shared memory. The configuration information, typically, comprises runtime information utilized by processes during operation, including without limitation, information describing data communication connections between the local computer and other computing resources (i.e., port and wire information), and information defining numeric values or character string values (i.e., genre and record information). The system architecture includes a plurality of APIs which: reside at the local computer; populate, manage, and control access to a shared memory containing the configuration information; and, are executable only by processes executing at the local computer, thereby limiting access to the shared memory. Access to the configuration information is further limited to only those processes identified as having appropriate permission. The methods enable the configuration information of the shared memory to be modified during local computer operation and without impeding access to the configuration information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07302531&OS=07302531&RS=07302531
owner: Microsoft Corporation
number: 07302531
owner_city: Redmond
owner_country: US
publication_date: 20061115
---
This application is a continuation of U.S. application Ser. No. 10 661 721 entitled System and Methods for Sharing Configuration Information with Multiple Processes Via Shared Memory filed Sep. 12 2003 now U.S. Pat. No. 7 139 894 which is incorporated herein by reference.

The present invention relates generally to shared memory systems and methods and more particularly to shared memory systems and methods for storing configuration information for server side services.

In computing systems computer processes and services commonly require configuration values and connection strings for operation. Computer services are often dispersed in various configuration files registry values web pages or data source name DSN entries. Computer processes and services commonly require configuration files to store process and service settings. When processes and services are installed onto a computer a configuration file is created to define values of certain parameters necessary for the process and service to function correctly. During execution the process or service accesses the configuration file to retrieve the appropriate parameters. Such configuration files commonly include initialization files management information format files and the registry. The registry for example is a central database that stores information in a hierarchy in order to allow the system to accommodate one or more users processes or hardware devices. Processes and services constantly access the registry to reference for example user profiles a list of processes installed on the system and the document types each process can utilize property sheet settings a list of hardware connected to the system and a list of accessible ports.

While storing configuration values and connection strings in registry values data files web pages and data source name entries satisfies the needs for such information computer systems typically depend on configuration files that are designed specifically for processes or services and that may reside on remote systems. The specifically designed configuration files do not allow for real time updates thereof without service interruption do not allow immediate access to configuration values and do not enable uniformity between different services. Computing systems particularly server systems require immediate access to configuration values and connection strings in order to provide acceptable response times to client side requests.

Computer systems that share memory between multiple processes or services require a mechanism to protect the integrity of the shared resources. Computer systems often lock files being accessed or updated to ensure mutually exclusive access to the files. The locking of files prevents two services from modifying a file at the same time which might lead to corrupted data in the files. A downside of locking files is that when another service needs to access the file the service may have to wait until the file has been unlocked by the first service. Additionally multiple users on the same computer system present security problems with shared memory and the data stored therein. The shared memory must not allow unauthorized users to access sensitive data.

Accordingly there is a need in the art for a unified system and method for storing server side configuration data for multiple computer services.

There is also a need in the art for a unified system and method for updating server side configuration data for multiple computer services while ensuring that data updates do not interrupt services accessing the configuration data.

Additionally there is a need in the art for a system and method to manage non locked shared memory to store settings for multiple processes.

Further there is a need in the art for a system and method for controlling access to portions of shared memory data to particular computer accounts.

Broadly described the present invention comprises a system for facilitating configuration information sharing with a plurality of processes or services via non locked shared memory. More particularly the present invention comprises a system for creating accessing updating securing and managing non locked shared memory and methods which 1 allocate a region of computer memory for storing configuration information potentially accessible to a plurality of processes or services 2 receive and store initial configuration information in the allocated memory 3 insert or update configuration information without impeding access to the configuration information by the plurality of processes or services 4 provide configuration information to the plurality of processes or services and 5 secure the allocated memory so that only certain processes or services have access to certain configuration information.

Advantageously the present system provides secure shared memory because the system architecture allows access to shared memory only by processes or services actually running on the computer system where the shared memory resides. Generally configuration information persists on a database protected from outside systems via a secured communication link and firewall. Only the operator may update or add information to the database which is then propagated to the shared memory on the target computer systems. Additionally the system provides read only application processing interfaces thus protecting the integrity of configuration information in shared memory. The present invention further protects configuration information by creating memory sections that are accessible only by certain processes or applications identified in an access control list.

The present invention also provides real time updating of shared memory without interrupting or impeding access to the shared memory by processes and services. During the real time updating processes and services use original configuration information until the updated configuration information is identified as being usable. Thereafter processes and services access the updated configuration information from shared memory. Using a bottom up approach shared memory may be modified in real time while providing a seamless transition between the original configuration information and the updated configuration information.

The configuration information accessible in shared memory generally includes runtime information utilized by processes or services during operation including but not limited to data communication connection information between the computer system in which the shared memory is present i.e. the local computer system and other computing resources i.e. port and wire information and numeric or character string information specific to a particular service or process i.e. genre and record information . Therefore the present invention eliminates the scattering of configuration information for services and processes throughout various registry values data files web pages or DSN entries.

Other features and advantages of the present invention will become apparent upon reading and understanding the present specification when taken in conjunction with the appended drawings.

Referring now to the drawings in which like numerals represent like components or steps throughout the several views displays a block diagram representation of a network environment on which the invention is implemented in accordance with an exemplary embodiment of the present invention. The network environment comprises an operator system residing at a first location. The operator system is configured with hardware and software see appropriate to perform tasks and provide capabilities and functionality as described herein. The operator system comprises a configuration data communication generator a configuration data user interface and an operation controller .

The configuration data user interface provides an operator or administrator with a user interface to add or modify data such as configuration data which is stored in a database described below. In the exemplary embodiment of the present invention the configuration data user interface comprises program modules or machine instructions that perform the above described tasks when executed on the operator system s central processing unit CPU .

The configuration data user interface connects communicatively to the configuration data communication generator . The configuration data communication generator is adapted to receive data such as configuration data from the configuration data user interface . In the exemplary embodiment of the present invention the configuration data communication generator comprises program modules or machine instructions that perform certain tasks when executed by the CPU. Additionally the configuration data communication generator creates executable machine instructions or code which incorporates the configuration data received from the configuration data user interface . The generated code is then sent to target systems described below for configuration data updates. The configuration data communication generator connects communicatively to target systems . Preferably the configuration data communication generator connects to the target systems via a secure communication link and through a firewall described below. Such connection is generally established via a typical network protocol. For example and not limitation the configuration data communication generator connects to the target systems using the simple object access protocol SOAP to exchange structured and type information via the network environment . In the exemplary embodiment of the present invention the executable machine instructions or code generated by the configuration data communication generator described above is implemented in extensible markup language XML .

The operation controller connects communicatively to the database and the configuration data communication generator . The operation controller is adapted to receive data from the database and provide data to the configuration data communication generator . In the exemplary embodiment of the present invention the operation controller comprises program modules or machine instructions that perform certain tasks when executed by the CPU. For example and not limitation the operation controller determines whether a target system s shared memory described below is empty i.e. because the target system just entered the network after reboot or because the target system is a newly added system . If such a determination is made the operation controller retrieves data from the database to provide to the configuration data communication generator which in turn provides the data to the appropriate target system . The method of determining whether a target system is empty and then providing appropriate data accordingly is described below with reference to .

The operator system connects communicatively to a database which stores data. The database is a memory device capable of storing and retrieving data including but not limited to random access memory RAM flash memory magnetic memory devices optical memory devices hard disk drives removable volatile or non volatile memory devices optical storage mediums magnetic storage mediums or RAM memory cards. Alternatively the database may be a remote storage facility accessible through a wired and or wireless network system. Additionally the database may be a memory system comprising a multi stage system of primary and secondary memory devices as described above. The primary memory device and secondary memory device may operate as a cache for the other or the second memory device may serve as a backup to the primary memory device. In yet another example the database may be a memory device configured as a simple database file. The database is preferably implemented as a searchable relational database using a structured query language SQL . Typically the database stores the persisted configuration data and connection strings for the services located on the target system 

In the exemplary embodiment of the present invention the network environment comprises a plurality of target systems residing at multiple locations. The target systems are configured with hardware and software see appropriate to perform tasks and provide capabilities and functionality as described herein. Each target system comprises a web server such as Internet Information Server IIS shared memory a shared memory manager a configuration data interface agent and a plurality of services . The ellipsis between target system A and target system Z illustrates that a plurality of target systems may exist in the network environment and therefore the network environment is not limited to two target systems as shown in .

The IIS connects communicatively to a remote network such as but not limited to the Internet or a local area network LAN . One skilled in the art will recognize that the IIS is a web server designed to deliver web documents to remote clients that request such web documents. IIS is a web server designed to run on WINDOWS NT platforms available from Microsoft Corporation of Redmond Wash. Additionally the IIS connects communicatively to the shared memory 

The shared memory manager connects communicatively to the shared memory which contains data such as configuration data. The shared memory manager comprises program modules or machine instructions that perform certain tasks when executed by the CPU. In the exemplary embodiment of the present invention the shared memory manager handles all requests for data residing in shared memory . Additionally the shared memory manager updates and adds data to the shared memory . In the exemplary embodiment of the present invention the shared memory manager only updates and adds data to the shared memory if requested by the configuration data interface agent described below otherwise the shared memory manager only provides read access to the shared memory 

The shared memory stores data and provides data to the shared memory manager . In the exemplary embodiment of the present invention the shared memory is a volatile memory device often called main memory capable of storing and retrieving data including but not limited to random access memory RAM or any other memory device that provides rapid storing and retrieving of data. The data residing in shared memory includes but is not limited to configuration data ports wires genres records or permission schemas. Additionally the shared memory maintains configuration data ports and wires relevant to the local target system . Therefore the content of shared memory across the network environment differs for each target system 

The plurality of services include but are not limited to program modules applications machine instructions software code or any combination thereof. Generally services perform tasks and provide desirable capabilities in order to reach a specific result. Services typically require system resources and configuration data to perform properly. In addition services may require access to back end functionality provided on various server systems also called resources . The services connect communicatively to the shared memory . For example and not limitation if a service needs configuration data or a connection to a server system the service sends a request to the shared memory for such data. The target system may contain a plurality of services and therefore should not be limited to the number of services shown in .

Server systems may be configured with hardware and software see appropriate to perform tasks and provide capabilities and functionality as described herein. Server systems typically provide back end support to the services running on the target systems . Each server system may contain differing support program modules applications software or hardware. For example one server system may contain billing software while another server system contains authentication software. In the exemplary embodiment of the present invention services connect to server systems for support and functionality.

The configuration data interface agent connects communicatively to the shared memory manager . The configuration data interface agent provides data such as configuration data to the shared memory manager which then updates shared memory . Additionally the configuration data interface agent connects communicatively to the operator system via a secured communication link. A secure communication link can be established by encrypting any communication through the secure communication link using secure sockets layer SSL . In the exemplary embodiment of the present invention the operator system provides a communication comprising configuration data from the database to the configuration data interface agent which then interprets the communication and provides the configuration data to the shared memory manager for storing into shared memory . Generally only the configuration data interface agent has access to the write enabled APIs used to write data to shared memory 

The target system and the operator system are separated by a firewall . Typically a firewall is a system designed to prevent unauthorized access to a computer system or network and may be implemented by hardware software or a combination thereof. A firewall assists in making a connection between two systems secure.

One skilled in the art will recognize that connecting communicatively may include any appropriate type of connection including but not limited to analog digital wireless and wired communication channels. Such communication channels include but are not limited to copper wire optical fiber radio frequency infrared satellite or other media.

In an alternative embodiment of the present invention the target systems may not be in communication with an operator system . In such a configuration the configuration data interface agent does not receive configuration data from the database via the configuration data communication generator . Instead configuration data is retrieved from the local registry of the target system . To change data in the shared memory the values in the registry of the target system may be modified by an operator.

The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components or data structures that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

In the exemplary embodiment of the present invention the target system illustrated by IIS in comprise at least one port . The ports comprise at least one wire that facilitates a connection to an outside resource such as a server system . A single port can comprise multiple wires . As illustrated in the server systems may be systems comprising SQL systems . The SQL systems comprise databases providing access to various data. Like the target systems the server systems illustrated by SQL systems in comprise at least one port . The IIS ports connect to the SQL ports via a connection string or wire . For example if IIS A wishes to retrieve data in database Z then IIS A must create a wire between IIS port and SQL port . A wire is created by utilizing the correct connection string. Boxes in provide a description of the connection strings associated with the wires . In the previous example wire must use the connection string for database Z as described in box to create a connection between IIS A and SQL Z 

Generally ports and wires store connection information between available resources within the network environment . Ports are abstract concepts of connection ports between two systems and are stored in shared memory . Through a virtual topology ports provide a conceptual model for storing relevant information between systems. A port may comprise of a plurality of wires that are used with an appropriate protocol to make a connection to another port. Ports allow global or local wire updates. Global wire updates affect all systems within the network environment that use the updated port . Local wire updates allow a particular port on one system to be updated while not updating other systems using the same port. For example it may be necessary for a new target system to use a test server system for debugging. Accordingly a local wire update can be used to change the port configuration of the new target system without affecting the similar port used by other systems. As described above ports are stored in shared memory therefore ports can only be added or updated via the configuration data interface agent 

Ports contain various data elements including but not limited to port name appropriate protocol state port type and revision number. In the exemplary embodiment of the present invention port names have a character limit such as thirty one characters for increasing lookup speeds. Generally there are two types of ports client and server. Client ports belong to any system that acts as a client with regard to the resource wire to be connected. Likewise server ports belong to any system that acts as a server or is the destination with regard to a resource wire to be connected. Client ports comprise wires that the client system can use to connect. Server ports comprise wires that the server system permits to connect. Preferably the services residing on the target systems request resources on other systems and therefore utilize client ports. The state or hint of a port include but are not limited to read write and dead. Read ports indicate that the associated wires are read only. Write ports indicate that the associated wires are write enabled. Dead ports indicate that all associated wires do not respond and cannot be used to create a successful connection. The appropriate protocol of a port designates the type of protocol used by the port to make a connection. Appropriate protocols include but are not limited to hypertext transfer protocol HTTP tabular data stream protocol TDS server message block protocol SMB and remote procedure call protocol RPC . Each port has only one port type and generally uses one appropriate protocol. The revision number changes when a wire within a port is added or updated. The revision number provides an immediate determination whether the port has been changed.

Wires connect two ports together. The wires contain allowable connection strings used by the ports . Wires contain various data elements including but not limited to wire id wire value and wire state. Generally the wire id is an indexed integer value and the wire value is a string. Wire ids are only unique within a particular port and therefore are not unique within the network environment . The states of a wire include but are not limited to read write and dead. Read wires indicate that the target resource is read only. Write wires indicate that the target resource is write enabled. Dead wires indicate that the wire does not respond and cannot be used to create a successful connection. Wires are designated as dead when services cannot connect to a server system via the connection string. For example the operator of the operator system may designate a wire as dead in the database which then propagates to the target systems the method described below.

In an alternative embodiment of the present invention the target systems further comprise a local service that periodically checks all of the local ports and tests all of the wires. Then the local service may update the port and wire types automatically through the configuration data interface agent . In yet another embodiment the operator system further comprises of a service that remotely checks all of the ports and tests all of the wires associated with the target systems and server systems . Accordingly the service may then update the port and wire types in the database while the information propagates to the target systems and server systems 

In the exemplary embodiment of the present invention the shared memory includes but is not limited to an access control list service memory maps c control memory and memory tables . The access control list includes but is not limited to service identifier information which verifies whether the service requesting information has permission to receive the requested data. For each service with access to the shared memory there exists a service memory map . The service memory maps include but are not limited to a list of memory tables accessible to the requesting service . The control memory includes but is not limited the physical location in memory that the memory tables reside. The memory tables include but are not limited to configuration data ports wires genres and records. The access control list is connected communicatively with the service memory maps . The service memory maps include the memory tables in a contiguous memory space. Additionally the control memory is connected communicatively with the service memory maps and memory tables and is only used when the memory section is marked dirty and a service needs to find its updated memory section. In the exemplary embodiment of the present invention the memory tables are broken into sections where each section can be controlled by the access control list separately.

For example and not limitation service A may request port information for the printer . Using the getport API available through the shared memory manager via the DLL service A sends a request to the shared memory . Generally the shared memory manager ensures that the access control list is associated with the correct memory sections. The operating system associated with the shared memory manager checks the identifier for service A and compares the identifier with a list of identifiers within the access control list . Once a match has been determined the operating system via the access control list permits access to the shared memory manager which creates or accesses the service A memory map . If service A memory map does not list access to the requested port information the shared memory manager refuses connection and returns a permission denied message. Otherwise service A memory map accesses the appropriate memory table C for the requested port information. Finally the shared memory returns the requested information retrieved from memory table C . If the memory section has been marked dirty then a request from service A will access the control memory which provides the location of the newly updated memory section.

The memory table control memory comprises multiple data elements including but not limited to keys maxkeys values maxvalues stringpool and revision number. The offset table provides offset data for relative memory addressing. Generally the offset data provides a number that determines the starting point in memory of a particular element. Preferably the offset table assists in determining the appropriate starting address of certain keys in the key table . The key table comprises keys used as identifiers for a value or group of values. The keys are associated with particular values present in the value table . The value table comprises data type values or pointers to appropriate strings in the string pool . Generally pointers comprise the memory location of certain data instead of the actual data. The string pool comprises a contiguous sequence of strings such as alpha numeric characters with a pointer to the beginning of the string pool and a pointer at the end of the string pool . The accessing of data in the memory table is described below with regard to .

After starting at step the method proceeds to step where the operation controller determines if the shared memory of each target system is populated with data. At step the operation controller verifies whether the particular shared memory is populated. If so the method ends at step for the currently accessed shared memory . The operation controller then repeats the method of initializing shared memory for the shared memory of the next target system . If the operation controller determines at step that the shared memory is not populated the method continues to step . At step the operation controller retrieves all appropriate data for the services residing on the current target system from the database . Next at step the operation controller provides the retrieved data to the configuration data communication generator . Then at step the configuration data communication generator converts the data into an appropriate communication for transfer to the target system . Preferably the configuration data communication generator converts the data into appropriate XML code. Next at step the configuration data communication generator provides the communication to the configuration data interface agent . The communication is sent by the configuration data communication generator to the configuration data interface agent via a secure communication link protected by a firewall . A secure communication link can be established by encrypting any communication through the secure communication link using secure sockets layer SSL . Using the communication provided by the configuration data communication generator the configuration data interface agent at step interprets the communication and updates the shared memory via the shared memory manager . The configuration data interface agent provides the received data to the shared memory manager which then updates the shared memory accordingly. Once the shared memory has been initialized with data from the database the method ends at step . The shared memory initialization method may then be repeated until all of the target systems have populated shared memory 

The XML tag indicates the beginning of XML code. Generally tags are paired and include a beginning tag and an ending tag. The beginning tag is often represented by a tag name between a less than symbol. The ending tag is usually identical to the beginning tag except that after the less than symbol 

After starting at step the shared memory manager at step checks the current memory allocation for the shared memory and determines whether additional memory space is needed. If so at step the shared memory manager allocates the appropriately sized memory space in shared memory . In the exemplary embodiment of the present invention the shared memory manager creates a log entry when additional memory is allocated not shown . The shared memory manager copies all of the memory tables from the old memory space to the new memory space in a bottom up approach. The bottom up approach entails copying the lowest level of the memory table first before moving on to the higher levels. This approach assists in memory management by allowing updates and additions without having to lock the original memory table . Therefore services will not be waiting for updates during runtime. Next at step the shared memory manager copies data from the string pool in the old memory space to the newly allocated memory space if necessary. Additionally at step the shared memory manager may add or update the string pool with new data received from the configuration data interface agent . Then at step the shared memory manager copies data from the value table in the old memory space to the newly allocated memory space if necessary. Also at step the shared memory manager may add or update the value table with new data received from the configuration data interface agent or may add or update pointers to the string pool . Next at step the shared memory manager copies data from the key table in the old memory space to the newly allocated memory space if necessary. Additionally at step the shared memory manager may add or update the key table with new data received from the configuration data interface agent . Then at step the shared memory manager copies data from the offset table in the old memory space to the newly allocated memory space if necessary. Also at step the shared memory manager may add or update the offset table with new data received from the configuration data interface agent . Next at step the shared memory manager copies data from the memory table control memory in the old memory space to the newly allocated memory space if necessary. Additionally at step the shared memory manager may add or update the memory table control memory with new data received from the configuration data interface agent . At step the revision number for the memory table in the new allocation space is incremented. Incrementing the revision number of a memory table notifies services that use the memory table that a change has occurred and it will be necessary to re cache the memory table into the service s memory space. Once the memory table has been copied to the newly allocated memory at step the invalid bit of the memory table in the old memory space is marked. Marking the invalid bit in the old memory space notifies services that the data at the old memory location has moved to a new memory allocation. Therefore the services will need to access the data from the new memory space. Steps may be repeated by the shared memory manager as necessary to copy all of the memory tables into the new memory allocation. After the shared memory manager copies all of the appropriate memory tables into the new memory space the method ends at step .

If at step additional memory space is not needed then the method continues to step where the shared memory manager determines the position in memory to update or add the data. As noted above the shared memory manager updates and adds data to the memory table in a bottom up approach. At step the shared memory manager updates or adds data received from the configuration data interface agent in the string pool if necessary. As mentioned above the string pool is a collection of strings containing pointers at the beginning and end of the string pool . Therefore at step the shared memory manager may update the string pointers if necessary to facilitate an addition to the string pool . Next at step the shared memory manager updates or adds data received from the configuration data interface agent in the value table if necessary. Then at step the shared memory manager updates or adds data received from the configuration data interface agent in the key table if necessary. The method then moves to step where the shared memory manager updates or adds data received from the configuration data interface agent in the offset table if necessary. Next at step the shared memory manager updates or adds data received from the configuration data interface agent in the memory table control memory if necessary. Finally at step the revision number of the memory table is incremented by the shared memory manager to alert services that the memory table has changed contents. The method ends at step . If the shared memory manager adds a new memory table instead of adding or updating data in a memory table then the shared memory manager may update the control memory in the memory space to indicate a new memory table has been created not shown . Using the bottom up approach the control memory in the memory space would be updated after the new memory table had been created.

If however at step the operating system determines that the service does have access to the requested data then the shared memory manager determines whether the requested port or genre exists at step . If no memory table exists for the requested port or genre then at step the shared memory manager sends a message to the error log that the requested port or genre was not found. Next at step the shared memory manager returns an error message to the service requesting the data. The method would then end at step .

If at step the shared memory manager determines that the port or genre exists then the method continues to step . At step the service determines whether it is caching the wire and record data. The service comprises information including but not limited to the request data such as the port genre wire or record the service identifier caching status and cached revision number. The caching status identifies whether the requesting service is caching wires or records 

If at step the service determines that it is not caching the wire and record data then the service at step attempts to read the requested data from shared memory . The method then continues to step discussed below.

Otherwise if at step the service determines that it is caching the wire and record data then the service at step compares its cached revision number with the appropriate revision number in shared memory . As discussed above the revision number in shared memory is stored in the port or genre memory table . Next at step the service determines whether the appropriate revision number read from shared memory is greater than its cached revision number. If so at step the service attempts to retrieve the requested data from shared memory and if successful the service refreshes its cache. Next the method continues to step discussed below.

If however at step the service determines that the appropriate revision number is not greater than its cached revision number then the method continues to step discussed below.

When the method reaches step the service determines whether the requested wire or record is dead. Records do not typically have a status and thus would never be dead. Therefore if the service was requesting record data the method would continue to step . As discussed above wires contain a wire status that can be read write or dead. If the service determines that the wire status is dead the method continues to step . At step the service errors out without waiting for a time out from the requested resource. The method then ends at step . If however at step the service determines that the wire is not dead the method continues to step .

When the method reaches step the service determines whether the requested data is wire data or record data. If the requested data is not wire data then the service retrieves the record data from the service cache. The method then ends at step . Otherwise if at step the service determines that the requested data is wire data then the service connects using the cached wire data at step .

Next at step the service will either make a successful connection or the connection will fail. If the connection fails the method continues to step where the service logs the connection error and logs the wire as dead in the error log. Then at step the service returns an error message to the client making the service request. The method then ends at step . If however at step the connection is successful then a connection is established at step for the service . Then at step the service returns a connection success message to the client making the service request. The method then ends at step .

Whereas the present invention has been described in detail it is understood that variations and modifications can be effected within the spirit and scope of the invention as described herein before and as defined in the appended claims. The corresponding structures materials acts and equivalents of all means plus function elements if any in the claims below are intended to include any structure material or acts for performing the functions in combination with other claimed elements as specifically claimed.

