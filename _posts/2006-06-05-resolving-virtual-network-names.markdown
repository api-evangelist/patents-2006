---

title: Resolving virtual network names
abstract: An apparatus and method is provided for resolving virtual network names using one or more name routers. A conventional Uniform Resource Locator (URL) naming scheme is extended by allowing any component to be mapped to an address. The resolution process occurs recursively through a plurality of name routers. Resolution can be contextual, such that the same virtual network name may be resolved differently depending on the identity of the client or other parameters.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07653747&OS=07653747&RS=07653747
owner: Microsoft Corporation
number: 07653747
owner_city: Redmond
owner_country: US
publication_date: 20060605
---
This application is continuation of U.S. application Ser. No. 09 983 539 filed Oct. 24 2001 which claims priority to U.S. provisional application Ser. No. 60 329 796 filed on Oct. 16 2001 and U.S. provisional application Ser. No. 60 346 370 filed on Oct. 19 2001 each of which is herein incorporated by reference in their entirety.

The invention relates generally to computer networks. More particularly the invention allows messages to be routed to one or more virtual communication endpoints using a name resolution process.

For many years the Internet has provided a vast network of linked computers that route messages using the well known Internet Protocol IP . Special devices known as routers determine where each data packet should be sent such that a given data packet or datagram arrives at its intended destination even though the specific path may not be known to the originator of the message. Each computer or router is assigned one or more IP addresses which are at present a 32 bit number represented in so called dot notation such as 12.152.34.61. Each packet generally includes a source IP address a destination IP address and other fields in a header that collectively determine where and how the packet is routed among the network. Routers in the network maintain knowledge regarding other routers to which they are connected such that packets are eventually routed to a final endpoint represented by the destination IP address.

Web pages and other resources can be stored on computers that have one or more assigned IP addresses. However because IP addresses are difficult for humans to remember a text based hierarchical name known as a Uniform Resource Locator URL is frequently used to uniquely identify a Web page or other resource e.g. www.foo.com . When a computer user enters such a URL into a Web browser the browser transmits the URL to a Domain Name Server DNS which translates the URL into an IP address representing a computer on which the Web page can be found. The Web browser then sends a retrieval command to that computer.

Referring to suppose that a Web browser operating on a client computer allows a user to enter an arbitrary URL such as http foo.microsoft.com foo bar bing.htm. The first component http is a scheme identifier that specifies which Internet protocol is to be used to communicate with the machine holding the document or providing the service.

The second component foo.microsoft.com is called a host name and is used to identify a particular computer or set of computers connected to the Internet.

The third component foo bar bing.htm is a machine local identifier for finding the desired document or service on the machine.

First Web browser issues a DNS request to the Internet s Domain Name Service represented by DNS server . DNS server includes a table that maps each URL to a corresponding IP address. In response to request DNS server resolves foo.microsoft.com into an IP address e.g. 1.2.3.4 at step which is then returned to client computer . Although several different servers may be contacted during the resolution of this portion of the URL only the complete resolution from foo.microsoft.com to 1.2.3.4 can be cached. In order to resolve a related name such as foo.microsoft.com the resolution process must be started from scratch.

Second Web browser contacts Web server e.g. the machine bound to IP address 1.2.3.4 using HTTP HyperText Transport Protocol and requests resource http foo.microsoft.com foo bar bing.htm as indicated by request in . Handing in the full URL is necessary as a given machine may be pointed to by several different host names e.g. http microsoft.com and http foo.microsoft.com may both resolve to 1.2.3.4. Machine then responds in step with the resource which is displayed as a Web page on browser .

This resolution mechanism presents various administrative problems since different machines providing different services must provide different host names.

For example suppose that www.foo.com is used to host a World Wide Web service while mail.foo.com is used to host a mail service. Management burdens include the necessity of creating and maintaining all these names and the inability of conventional systems to allow the application of resolution policy across machines that share domain components. Moreover the DNS resolution scheme is inflexible in that if a host computer is moved a file must be changed on the DNS server to reflect the new physical location of the computer.

What is needed is a system and method that allows services and resources to be named and addressed with much greater control and flexibility and that provides mechanisms to increase the efficiency of the resolution process.

The invention allows messages to be routed to virtual network endpoints using a name resolution process. A message service which may be implemented in conjunction with a name resolution proxy routes a message to a name router using a virtual network name. The name router resolves part of the virtual network name and forwards the message to a destination corresponding to the resolved part of the virtual network name. The destination if it is another name router resolves a next part of the virtual network name and the process continues until the destination endpoint is reached. Embodiments of the invention include one or more of the following features 

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

One embodiment of the invention extends the conventional URL naming scheme by allowing any component of the URL to be mapped to a physical machine address. This means for example that one might expose a World Wide Web service as http www.foo.com web and a mail service as http www.foo.com mail and have each of these URLs map to different machines because the web and mail components now can become resolved independently instead of both of them necessarily pointing to the same physical machine as in conventional DNS name resolution practice.

In addition the resolution can be contextual that is the resolution process can consider the identity of the client resolving the address or it can consider the network location of the client and resolve to the service nearest the client or apply some other policy based on additional information.

Another aspect of the invention further enhances conventional Internet naming by allowing a client to send a message to a particular VNN through a construct referred to as a name router. This allows clients to offload VNN resolution and message handling. The term virtual network name or VNN will be used to refer to a name that identifies a communication endpoint in a network wherein the name may not have a static association with a physical machine address i.e. the physical machine address may change or differ even when the same VNN is used .

Certain embodiments of the system include one or more name resolution routing servers described in more detail below. Virtual name routers may include a name resolution function i.e. conversion of a name or portions of a name into an address a routing function e.g. the ability to forward a message to an address and other functions as described below. It should be appreciated that these functions can be split among different computers such that a name server function resides on one machine whereas the routing function resides on a different machine. For example the name resolution function could reside on one machine while the routing function resides on the client machine . Other implementations are of course possible with the location and structure of a particular function being dictated by design concerns. The term virtual name server should be understood to include at least a name resolution function and

the term virtual name router should be understood to include at least a message routing function and the term virtual name resolution router should be understood to include both functions. Elsewhere herein the particular functions to be ascribed to an element will be apparent from the context in which the element is used.

Implied by the use of this system are components such as a client that is requesting the message delivery and the existing Domain Name Service DNS although the inventive principles can be applied without requiring DNS. The generic term name server should be understood to refer to any server that performs a resolution function including but not limited to the conventional Domain Name Service DNS .

Aspects of the invention can be grouped into four categories each of which is discussed separately below 

A first feature of the present invention includes the ability to send a message to a given communication endpoint identified by a VNN such as a URL through a series of name routers. As a subset of this feature a VNN can be assigned to a communications endpoint no matter what network protocol is used to communicate with that endpoint.

A second feature includes the ability to resolve URL components beyond the domain name to specific name routers.

A third feature includes the ability to return intermediate results to be cached thus accelerating the name resolution and routing process.

A fourth feature provides the ability to route a given message to multiple endpoints or to one of a set of potential endpoints that is the ability to identify a set of endpoints with a single VNN and state whether a given message should be sent to one some or all of the endpoints .

Name router which may comprise a software function residing on a computer maintains a virtual name table including an entry that maps the virtual name for communications endpoint C to a specific physical address used to directly access endpoint C e.g. it maps an arbitrary name to an IP address . Client sends the message destined for endpoint having name C to name router which uses mapping entry to forward the message to the physical address for endpoint C. It should be appreciated that although name router is shown as a separate physical computer the name router could be resident on the same computer as client .

In one variation client may also request acceleration information from name router . If client has done so and client has the appropriate permissions to acquire that information name router will return to client a message indicating that the virtual name for endpoint C maps to the particular physical address for endpoint C. Thus after client has received and cached this information as indicated at it can then use the physical address for C to directly contact endpoint C thus accelerating the process of delivering the message. As is conventional cached entries can be automatically purged after a certain time period to remove stale entries.

In certain embodiments communication endpoints can be specified using an extended URL syntax wherein each of a plurality of name servers routers is responsible for mapping a portion of the entire URL. In contrast to conventional DNS technology where a DNS server always maps a fixed and known portion of a given URL to a single physical address the URL is viewed as a set of discrete name components each component of which is resolved by a separate name router in a system. A URL of the form http aaa.com bbb ccc ddd.htm might for example be resolved by several different name routers the aaa component would be resolved by the conventional DNS server which would resolve to a name router for the bbb component. The message would be sent to the name router for bbb which would then resolve the next component ccc and so forth until the final endpoint was determined. Alternatively communication endpoints can be identified by an arbitrary name e.g. Bob or Bob at Company X and a default name router can be used to resolve such arbitrary names.

Suppose that client needs to send a message to a virtual name endpoint name e.g. an extended URL as set forth above or an arbitrary name such as Bob or Corporate Database. Client sends the message to the virtual name endpoint through virtual name resolution proxy machine . In one embodiment proxy sends a message to conventional domain name service to obtain a physical machine address corresponding to a first level of name resolution. In another embodiment such as where an arbitrary endpoint name is used that is not in the modified URL format this step can be eliminated and name resolution can proceed directly using for example a default name resolution service which maps to a physical machine that contains a first level of name mappings e.g. one of the virtual name routers shown in subsystem .

Upon determining the virtual name router to which the first level resolution should be sent virtual name resolution proxy transmits a message to the indicated virtual name router requesting resolution of the name. The name router receives the request resolves a portion of or all of the name using an internal mapping table and returns the resolved name or portion of the name. The process continues recursively until the entire name is resolved and the final endpoint is determined.

First as indicated at step the client sends the message to name resolution proxy including the virtual name that must be resolved in this case http foo.com a b c. Proxy first sends a request to conventional domain name server to locate the IP address for the first component foo.com which is returned at step . As in the conventional DNS scheme this IP address e.g. 1.2.3.5 is cached by the client so that the client can more rapidly resolve URLs starting with http foo.comn. However the IP address returned by the DNS server is actually the IP address for the virtual name server element responsible for resolving names beginning with foo.com rather than a final destination.

Next in step proxy sends the message addressed to http foo.com a b c to the name router at 1.2.3.5 element and requests acceleration information.

Third recalling the assumption that each component of the virtual name can be resolved and routed by a different name router the name router at address 1.2.3.5 element looks up the a component in its routing table and sees that it must route the message to the name router at 1.2.3.6 element . Name router forwards the message to the name router at 1.2.3.6 and sends the client acceleration information that foo.com a should be resolved to 1.2.3.6 back to element step which returns this information to the client at step . The client caches this intermediate resolution for future use.

The name router at 1.2.3.6 element looks up the b component and sees that it must route the message to name router at IP address 1.2.3.7. Name router forwards the message to name router at 1.2.3.7 and returns acceleration information that foo.com a b should be resolved to 1.2.3.7. Additionally partial name resolution information is sent back along the reverse path to the client as before and each name router in the path can cache the partial resolution results.

Name router at address 1.2.3.7 looks up the c component and obtains the physical address for the endpoint e.g. 1.3.5.7 . Name router forwards the message to the communications endpoint and returns to the client acceleration information that foo.com a b c should be resolved to 1.3.5.7.

Consequently both the client and one or more intermediate nodes can cache partial resolution results for future use. Note again that this final routing or indeed any intermediate routing could have resulted in the message being sent to more than one endpoint depending on the contents of the resolution table and any applicable policy see discussion below for more details on policy .

Although the virtual network name example described above uses an http scheme indicating the use of the HTTP network protocol any of the intermediate communications endpoints could have used a different protocol to forward the message. For example the physical address for the b component could have been soap 1.3.5.7 indicating the use of the SOAP network protocol for final delivery of the message. This ability to switch protocols midstream and to access any communications endpoint accessible over any network protocol is a major advance in the art. In this regard each name router may include one or more protocol converters such that messages received using one protocol e.g. HTTP can be converted to another protocol during the routing process all without action by the originating client.

The routing information and decision making process can be implemented in hardware or software allowing routing of messages to VNNs at wire speed.

In one embodiment each name router such as name router includes a virtual name table which may be stored in a database such as a relational database a cache which stores resolved name prefixes a mapping policy function discussed below one or more protocol converters a change notifier function and a name generator function . Virtual name table and cache operate as explained above. Mapping policy optionally applies a policy to each name resolution process as described in more detail below. Protocol converter converts protocols when forwarding messages if required. Change notifier function transmits notices of changes to virtual name table mappings among name routers as described in more detail below. This function may comprise an API a user interface and or a message interface that permits remote changes to mappings. As explained in more detail below changes to mappings can be made to move processing functions and to perform other operations.

In general each name router receives a message directed to a virtual endpoint resolves some or all of the name forwards the message to the next name router corresponding to the partially resolved name and optionally returns acceleration information to the originating client. Arbitrarily long and complex URL extended names can be resolved piecemeal by a plurality of name routers instead of a forced single level name resolution scheme as conventionally implemented in DNS.

A second group of features involves the ability to apply policy at any step of the routing process. A policy may specify any routing behavior that involves some knowledge of the client sending to the VNN or some knowledge of the contents of the message itself. Policy conditions include but are not limited to resolutions based on 

Routing can be made to different communications endpoints depending on the domain from which the message has been sent. For example a client sending a message to http foo.com a b c from a computer inside the blip.com domain might get a resolution as above where the endpoint is identified with the physical address 1.3.5.7 whereas a client resolving the same address from the from the baz.uk DNS domain might be routed as 

Note that these policies can also include a refusal to resolve a given component at all allowing administrators for example to provide VNNs that are only reachable from within a given organization. Acceleration data can be selectively returned on the basis of any of the above criteria or based on other criteria. When the policy is applied in this way the vulnerability of given resources to various forms of hacking can be greatly reduced as there may be an unknowable number of name routers between the domain name and the protected resource. The examples of policy application above show that a hacker cannot even guess where the resource might be as the only necessarily public portion of the routing is the resolution of the domain name to the virtual name server associated with that domain name.

In step the message is sent to the address of the name router obtained in either step or step . In step the result of any name resolution provided by downstream name routers is cached. Although not explicitly shown in this cache can be consulted to resolve all or part of a virtual network name rather than sending the message to the name router e.g. so called acceleration data as illustrated by cache in .

In step any policies are applied to modify the routing decisions if necessary using the principles outlined above. This may include for example routing the message to a different location based on the identity of the client. In step protocol conversions are performed if necessary. Finally in step the message is sent to the name router corresponding to the partially resolved address and acceleration data is returned to the client if applicable.

In one embodiment the system also includes the ability to generate and disseminate notifications on changes to VNNs. Each administrative function on a name router adding a new name component deleting an old name component changing an existing name component can generate a notification that can be disseminated to other name routers.

For example suppose that an online magazine makes all its content freely available 6 months after publication but requires a subscription for content newer than 6 months. This online magazine can take advantage of this inventive principle by holding all the current content under www.onlinemagazine.com subscription and all the free content under www.onlinemagazine.com free. As a given month s content becomes free say www.onlinemagazine.com subscription may2001 the magazine renames www.onlinemagazine.com subscription may2001 to www.onlinemagazine.com free may2001. A client subscribing to changes to www.onlinemagazine.com free will then be informed that the May 2001 content is now available.

Name routers can automatically generate unique VNN components when demanded. Such unique components may make use of random number generators time of day parameters hashed values or the like.

For example suppose that an administrator is exposing a new communications endpoint reachable through a VNN in the www.foo.com a namespace. The administrator can request a unique and unused name from the name router serving the www.foo.com a VNN the administrator makes a request to the server and the server returns www.foo.com a uniquename12345. The administrator then informs the name router of the physical address to which the new name maps.

Name routers can also generate unique VNN components based on a key. For example suppose that an administrator wants to provide a VNN component based on a unique ID assigned to a user so that the name router can provide a security policy based on the user s ID to a given name. The administrator therefore requests a unique name based on the user s ID and then informs the name router of the physical address to which the new name maps. When messages are sent to that new name the name router can use the sender s ID to determine whether that sender has access to the new name.

Name routers can also provide a default route for a VNN. For example suppose that an administrator wants www.foo.com a specialname to be routed to physical address 2.3.4.5 for special handling but wants all other components under a to be routed to physical address 2.4.6.8 for regular handling. The administrator sets a default route for a to 2.4.6.8 and sets a specific route for a specialname to 2.3.4.5. Thus no matter what names are created under a they will be routed to 2.4.6.8.

While the invention has been described with respect to specific examples including presently preferred modes of carrying out the invention those skilled in the art will appreciate that there are numerous variations and permutations of the above described systems and techniques that fall within the spirit and scope of the invention as set forth in the appended claims. Any of the method steps described herein and any of the functions depicted in the figures can be implemented in computer software and stored on computer readable medium for execution in a general purpose or special purpose computer. All of the functions and method steps can be implemented on one or more computers that include a processor memory network connections and appropriate input output devices. It will be appreciated that the various delimeters e.g. and used herein are exemplary only and references to such delimeters in the claims are not intended to be limited to the specific syntax illustrated.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims. Numerous other embodiments modifications and variations within the scope and spirit of the appended claims will occur to persons of ordinary skill in the art from a review of this disclosure.

