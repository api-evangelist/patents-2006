---

title: Providing independent clock failover for scalable blade servers
abstract: Methods and systems are disclosed for providing independent clock failover for scalable blade servers that include assigning a server blade to one of a plurality of clock failover groups, providing a plurality of independent clock signals to the clock generator of the server blade, wherein one of the plurality of independent clock signals is an active clock signal, detecting a failover condition for the clock failover group assigned to the server blade, and switching the active clock signal, in response to the detected failover condition, from one independent clock signal to another independent clock signal.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07562247&OS=07562247&RS=07562247
owner: International Business Machines Corporation
number: 07562247
owner_city: Armonk
owner_country: US
publication_date: 20060516
---
The field of the invention is methods and systems for providing independent clock failover for scalable blade servers and blade server chassis having independent clock failover capability.

In today s scalable computer systems such as for example the IBM eServer xSeries the clock domains between server blades are typically asynchronous. Asynchronous clock domains often create a problem for software running on multiple server blades because timestamp information derived from clock signals in different clock domains is often inconsistent. Consider the following two examples that explain the problems created by asynchronous clock domains.

The first example includes a scenario in which a task of a computer software application migrates between two server blades for execution. While the task executes on one server blade the task may read the time counter. After migrating to the other server blade for execution task may read the time counter again. Based on the elapsed time between reading the time counter while executing on the first server blade and reading the time counter while executing on the second server blade the task may perform some action. Because the server blades may be operating in asynchronous clock domains the task s second reading of the time counter may appear to the task to have occurred before the task s first reading of the time counter. The task therefore may generate an error. Such errors may be costly to debug and waste computer resources.

The second example includes a scenario in which an application log keeps track of the events of a software application executing on server blades in different clock domains. Because the local clock signals of each server blade may operate at slightly different frequencies the system clocks that track the time of day for each server blade will not remain synchronized. Logging events using such unsynchronized system clocks has the potential to cause confusion because events may not be ordered correctly in the application log.

One current solution to these two problems above is for software developers to obtain the time from a system call to an operating system application programming interface API that utilizes a global clock signal fanned out to all the server blades instead of using the local counter provided by the server blade s processor. Such a global clock signal allows the server blades to operate in the same clock domain. The drawback to this solution is that all software applications must be recoded to utilize the system call. A further disadvantage is that the system call to an operating system API may have a lower resolution than the local performance counter.

Another solution to the problems described above places all the server blades of a blade server chassis into a single clock domain governed by one global clock signal. In the event that a clock input fails for one of the server blades a redundant global clock signal would provide a second clock domain into which all the server blades of the chassis could be switched. The current solution therefore allows all of the server blades to remain synchronized but the current solution forces all of the server blades of a chassis to switch clock domains regardless of which server blade experienced the clock failure. Because all the server blades typically do not execute the same software application this current solution often forces some server blade to switch clock domains unnecessarily.

Methods and systems are disclosed for providing independent clock failover for scalable blade servers that include assigning a server blade to one of a plurality of clock failover groups providing a plurality of independent clock signals to the clock generator of the server blade wherein one of the plurality of independent clock signals is an active clock signal detecting a failover condition for the clock failover group assigned to the server blade and switching the active clock signal in response to the detected failover condition from one independent clock signal to another independent clock signal.

A blade server chassis having independent clock failover capability is also disclosed that includes a plurality of server blades a management module that assigns each server blade to one of a plurality of clock failover groups and a plurality of independent clocks each independent clock providing an independent clock signal to each server blade wherein one of the independent clock signals is an active clock signal and wherein each server blade includes a clock generator that detects a failover condition for the clock failover group assigned to the server blade of the clock generator and switches the active clock signal in response to the detected failover condition from one independent clock signal to another independent clock signal.

A system of blade server chassis having independent clock failover capabilities is also disclosed that includes a plurality of blade server chassis each blade server chassis having a plurality of server blades each server blade having a clock generator each blade server assigned to a clock failover group and a plurality of independent clocks each independent clock providing an independent clock signal to the clock generator of each server blade wherein the clock generator of each server blade selects the same independent clock signal for use by each server blade assigned to the same clock failover group.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods systems and apparatus for providing independent clock failover for scalable blade servers according to embodiments of the present invention are described with reference to the accompanying drawings beginning with . sets forth a network diagram illustrating an exemplary system for providing independent clock failover for scalable blade servers according to embodiments of the present invention. The system of operates generally to provide independent clock failover for scalable blade servers according to embodiments of the present invention by assigning a server blade to one of a plurality of clock failover groups providing a plurality of independent clock signals to the clock generator of the server blade wherein one of the plurality of independent clock signals is an active clock signal detecting a failover condition for the clock failover group assigned to the server blade and switching the active clock signal in response to the detected failover condition from one independent clock signal to another independent clock signal.

The system of includes independent clocks . Each independent clock is computer hardware that generates an independent clock signal for each server blade installed in the blade server chassis of . Although the clocks provide two independent clock signals to each blade server each blade server only utilizes one of the independent clock signals at a time because a server blade must typically synchronize all timing operations on the server blade. The independent clock signal utilized for timing operations on the server blade at any particular time is referred to in this specification as the active clock signal for a server blade. The clocks and their respective independent clock signals are referred to as independent because the clock signals generated by each of the clocks are not synchronized and are completely redundant. That is a failure of one independent clock does not affect the operation of the other independent clock. Although depicts the clocks as external modules outside of the chassis of such a depiction is for explanation and not for limitation. Readers of skill in the art will recognize that independent clocks may also be implemented as modules that plug into the mid plane of a chassis.

The system of includes blade server chassis . Blade server chassis is installed in a cabinet with several other blade server chassis . Each blade server chassis is computer hardware that houses and provides common power cooling network storage and media peripheral resources to one or more server blades. Each blade server chassis in the example of includes multiple power supplies for providing power to server blades that includes load balancing and failover capabilities such as for example a hot swappable power supply with 1400 watt or greater direct current output. The redundant power supply configuration ensures that the blade server chassis will continue to provide electrical power to the server blades if one power supply fails. Examples of blade server chassis that may be improved according to embodiments of the present invention include the IBM eServer BladeCenter Chassis the Intel Blade Server Chassis SBCE the Dell PowerEdge 1855 Enclosure and so on.

In the system of each blade server chassis includes an embedded management module having installed upon it a clock assignment module . The embedded management module is an embedded computer system for controlling resources provided by each blade server chassis to one or more server blades and for managing the server blades installed in the chassis . The resources controlled by the embedded blade server management module may include for example power resources cooling resources network resources storage resources media peripheral resources and so on. An example of an embedded management module that may be improved for providing independent clock failover for scalable blade servers according to embodiments of the present invention includes the IBM eServer BladeCenter Management Module.

The clock assignment module of is a set of computer program instructions for providing independent clock failover for scalable blade servers according to embodiments of the present invention. In the example of the clock assignment module operates generally for providing independent clock failover for scalable blade servers according to embodiments of the present invention by assigning a server blade to one of a plurality of clock failover groups. A clock failover group is a group of server blades that utilizes the same independent clock signal as the active clock signal for each server blade and that switches the active clock signal from one independent clock signal to another independent clock signal in response to a failover condition occurring on any of the server blades in the group. A failover condition is a condition that occurs on a server blade when the server blade generates a failover signal. A failover signal is a signal generated by a server blade when an error condition occurs for the active clock signal. An error condition is a condition in which the active clock signal for a server blade is no longer suitable for timing operations on the server blade. An error condition may result for example when one of the independent clocks fail a hardware malfunction occurs on the blade server a connection to an independent clock is severed and so on.

The blade server chassis in the system of includes server blades that execute computer software applications. A computer software application is computer program instructions for user level data processing implementing threads of execution. Server blades are minimally packaged computer motherboards that include one or more computer processors computer memory and network interface modules. The server blades are hot swappable and connect to a backplane of a blade server chassis through a hot plug connector. Blade server maintenance personnel insert and remove server blades into slots of a blade server chassis to provide scalable computer resources in a computer network environment. Each of the server blades of chassis include computer hardware for providing independent clock failover for scalable blade servers according to embodiments of the present invention by assigning a server blade to one of a plurality of clock failover groups providing a plurality of independent clock signals to the clock generator of the server blade wherein one of the plurality of independent clock signals is an active clock signal detecting a failover condition for the clock failover group assigned to the server blade and switching the active clock signal in response to the detected failover condition from one independent clock signal to another independent clock signal. In the system of server blades connect to network through wireline connection and a network switch installed in a blade server chassis. Examples of server blades that may be improved according to embodiments of the present invention include the IBM eServer BladeCenter HS20 the Intel Server Compute Blade SBX82 the Dell PowerEdge 1855 Blade and so on.

The system of includes server connected to network through wireline connection . Server has installed upon it application provisioning software . The application provisioning software is a set of computer program instructions that manages the execution of computer software applications on a plurality of server blades and provides independent clock failover for scalable blade servers according to embodiments of the present invention. In the system of the application provisioning software assigns computer software applications for execution on server blades by assigning a blade server to a scalable group and assigning a computer software application to the scalable group for execution by the server blades of the group. A scalable group is a group of computer resources available to the application provisioning software for execution of a software application. The group is referred to as scalable because computer resources may be added or removed from the group as computing needs and computing environments change. In the example of the application provisioning software operates generally to provide independent clock failover for scalable blade servers according to embodiments of the present invention by assigning a server blade to one of a plurality of clock failover groups. The application provisioning software typically assigns all the server blades in a scalable group to the same clock failover group because such an assignment advantageously allows operational timing synchronization of all the server blades executing the threads from the same software application.

In the example of the application provisioning software assigns computer software applications for execution on server blades in response to receiving distributed application requests for processing from other devices. Distributed application requests may include for example an HTTP server requesting data from a database to populate a dynamic server page or a remote application requesting an interface to access a legacy application.

The system of includes a number of devices operating as sources for distributed application requests each device connected for data communications in networks . The server connects to the network through the wireline connection . The personal computer connects to the network through the wireline connection . The Personal Digital Assistant PDA connects to the network through the wireless connection . The workstation connects to the network through the wireline connection . The laptop connects to the network through the wireless connection . The network enabled mobile phone connects to the network through the wireless connection .

In the example of the server operates as a gateway between the network and the network . The network connection aspect of the architecture of is only for explanation not for limitation. In fact systems for controlling the allocation of power to a plurality of computers whose supply of power is managed by a common power manager according to embodiments of the present invention may be connected as LANs WANs intranets internets the Internet webs the World Wide Web itself or other connections as will occur to those of skill in the art. Such networks are media that may be used to provide data communications connections between various devices and computers connected together within an overall data processing system.

The arrangement of servers and other devices making up the exemplary system illustrated in are for explanation not for limitation. Data processing systems useful according to various embodiments of the present invention may include additional servers routers other devices and peer to peer architectures not shown in as will occur to those of skill in the art. Networks in such data processing systems may support many data communications protocols including for example the Transmission Control Protocol TCP the Internet Protocol IP the HyperText Transfer Protocol HTTP the Wireless Access Protocol WAP the Handheld Device Transport Protocol HDTP and others as will occur to those of skill in the art. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

Providing independent clock failover for scalable blade servers in accordance with the present invention is generally implemented using a combination of computer software and computer hardware. For further explanation therefore sets forth a block diagram of computer software and computer hardware useful in providing independent clock failover for scalable blade servers according to embodiments of the present invention. The exemplary system of includes independent clock and independent clock . Each exemplary independent clock of is computer hardware that provide an independent clock signal for the server blades installed in the blade server chassis and the server blades not shown installed in other blade server chassis . In the exemplary system of the active clock signal for each server blade defaults at power on to the independent clock signal from the independent clock . The management module of each blade server chassis however may set the active clock signal to any of the independent clock signal available.

The exemplary system of includes a blade server chassis having an embedded management module and other blade server chassis having embedded management modules . In the exemplary system of blade server chassis includes a server blade and a server blade . The blade server includes a clock generator that provides a blade clock for timing operations of the other components of the server blade . The blade clock supplies the server blade with a system clock signal generated by the clock generator from the active clock signal selected from the independent clock signals provided by clocks . In a similar manner the blade server includes a clock generator that provides a blade clock for timing operations of the other components of the server blade . The blade clock supplies the server blade with a system clock signal generated by the clock generator from the active clock signal selected from the independent clock signals provided by clocks .

In the exemplary system of the embedded management module has installed upon it a clock assignment module . The clock assignment module is a set of computer program instructions for assigning a server blade to one of a plurality of clock failover groups according to embodiments of the present invention. The clock assignment module may assign a server blade to one of a plurality of clock failover groups by assigning a server blade to one of the plurality of clock failover groups in dependence upon membership to a scalable group or by receiving from application provisioning software an assignment to one of the plurality of clock failover groups.

The exemplary system of also includes server having installed upon it application provisioning software . The application provisioning software is a set of computer program instructions for assigning a server blade to one of a plurality of clock failover groups according to embodiments of the present invention. In the example of the application provisioning software connects to the clock assignment modules of the embedded management modules through a network connection such as for example a TCP IP connection.

As mentioned above the clock assignment module assigns a server blade to one of a plurality of clock failover groups. In the exemplary system of the clock failover groups are clock group clock group through clock group N . Each clock failover group of is implemented as an electrical conductor that connects to a multiplexer MUX on each server blade installed in the blade server chassis and other blade server chassis . Server blade of includes control logic that assigns server blade to a clock failover group by providing a selection signal to a multiplexer of the server blade . The multiplexer connects the clock generator to any one of the clock groups in dependence upon a selection signal provided by control logic . In a similar manner server blade of includes control logic that assigns server blade to a clock failover group by providing a selection signal to a multiplexer of the server blade . The multiplexer connects the clock generator to any one of the clock groups in dependence upon a selection signal provided by control logic . Although depicts the control logic and the multiplexers installed on each server blade such is for explanation and not for limitation. In fact the control logic and the multiplexers may be installed on a mid plane of each blade server chassis.

In the example of the clock assignment module controls the selection signal provided by control logic through a data connection . The data connection may be implemented using for example the Inter Integrated Circuit IC Bus Protocol. The IC Bus Protocol is a serial computer bus protocol for connecting electronic components inside a computer that was first published in 1982 by Philips. IC is a simple low bandwidth short distance protocol. Most available IC devices operate at speeds up to 400 Kbps although some IC devices are capable of operating up at speeds up to 3.4 Mbps. IC is easy to use to link multiple devices together since it has a built in addressing scheme. Current versions of the IC have a 10 bit addressing mode with the capacity to connect up to 1008 nodes. Although the data connection between the clock assignment module and the control logic may be implemented using IC such an implementation is for explanation and not for limitation. Implementing the data connection using the IC Protocol is for explanation only and not for limitation. The data connection may also be implemented using other protocols such as the Serial Peripheral Interface SPI Bus Protocol the Microwire Protocol the System Management Bus SMBus Protocol and so on.

As mentioned above the clock generators select the active clock signal for each server blade from the independent clock signals provided by clocks . In the example of the clock generator includes an error detector . The error detector is a sub component of the clock generator that detects an error condition for the active clock signal. As mentioned above an error condition is a condition in which the active clock signal for a server blade is no longer suitable for timing operations on the server blade. The clock generator also includes a clock failure signal generator . The clock failure signal generator is a sub component of the clock generator that generates a failover signal in response to an error condition detected by the clock generator . The clock generator also includes a clock failure detector . The clock failure detector is a sub component of the clock generator that detects a failover signal generated by another clock generator in the same clock failover group such as for example clock generator . In addition the clock failure detector operates as a toggle switch to control which independent clock signal is the active clock signal at any point in time. For example each time the clock failure detector receives an electric pulse the clock generator may switch to the next independent clock signal in the plurality of independent clock signal provided by the independent clocks to the server blade . In the example of clock generator of the server blade also includes such sub components as an error detector a clock failure signal generator and a clock failure detector that are the same as the sub components of clock generator .

In the exemplary system of the clock assignment module assigns server blade and server blade to clock group using control logic and multiplexers . For explanation and clarity the electrical conductor connecting the multiplexer to the multiplexer that implements clock group is depicted using a solid line while the other electrical conductors implementing other clock groups are depicted as dotted lines. The solid line indicates that the clock generator of server blade and the clock generator of server blade is connected through multiplexers based on the selection signal provided by control logic . Because the clock generators are connected a failover signal generated by either clock generator in response to detecting an error condition for their active clock signal will be detected by the clock failover detector of other clock generator. In addition because the clock failover signal generator of each clock generator loops back and connects to the clock failure detector of same clock generator a failover signal generated by one clock generator will be detected by the clock failover detector of the same clock generator. When such a failure signal is generated by either clock generator therefore both clock generators switch the active clock signal to the next independent clock signal in the plurality of independent clock signal at the same time. The system of that operates generally for providing independent clock failover for scalable blade servers therefore advantageously allows continuous operational timing synchronization of all the server blades assigned to the same clock failover group before and after a clock failure.

Readers will note that the clock assignment module and the application provisioning software in the example of are software modules executing on the embedded management module and the server respectively. The embedded management module and the server used in aspects of the invention are generally implemented with computers that is with automated computing machinery. Furthermore all the nodes servers and communications devices in the exemplary system of are implemented to some extent at least as computers. For further explanation therefore sets forth a block diagram of automated computing machinery comprising an exemplary computer useful in providing independent clock failover for scalable blade servers according to the present invention. The computer of includes at least one computer processor or CPU as well as random access memory RAM which is connected through a system bus to processor and to other components of the computer.

Stored in RAM is application provisioning software . The application provisioning software is a set of computer program instructions for managing the execution of computer software applications on a plurality of server blades and improved for providing independent clock failover for scalable blade servers according to embodiments of the present invention. The application provisioning software operates generally for providing independent clock failover for scalable blade servers according to embodiments of the present invention by assigning a server blade to one of a plurality of clock failover groups. Also stored in RAM is a clock assignment module . The clock assignment module is a set of computer program instructions improved for providing independent clock failover for scalable blade servers according to embodiments of the present invention. The clock assignment module operates generally for providing independent clock failover for scalable blade servers according to embodiments of the present invention by assigning a server blade to one of a plurality of clock failover groups.

Also stored in RAM is an operating system . Operating systems useful in computers according to embodiments of the present invention include UNIX Linux Microsoft XP AIX IBM s i5 OS and others as will occur to those of skill in the art. A typical operating system may be used to control the execution of threads by the processor in the exemplary computer . The operating system the application provisioning software and the clock assignment module in the example of are shown in RAM but many components of such software typically are stored in non volatile memory also.

Computer of includes non volatile computer memory coupled through a system bus to processor and to other components of the computer . Non volatile computer memory may be implemented as a hard disk drive optical disk drive electrically erasable programmable read only memory space so called EEPROM or Flash memory RAM drives not shown or as any other kind of computer memory as will occur to those of skill in the art.

The example computer of includes one or more input output interface adapters . Input output interface adapters in computers implement user oriented input output through for example software drivers and computer hardware for controlling output to display devices such as computer display screens as well as user input from user input devices such as keyboards and mice.

The exemplary computer of includes a communications adapter for implementing data communications with other computers . Such data communications may be carried out serially through RS 232 connections through external buses such as the Universal Serial Bus USB through data communications networks such as IP networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a network. Examples of communications adapters useful for providing independent clock failover for scalable blade servers according to embodiments of the present invention include modems for wired dial up communications Ethernet IEEE 802.3 adapters for wired network communications and 802.11b adapters for wireless network communications.

For further explanation sets forth a flow chart illustrating an exemplary method for providing independent clock failover for scalable blade servers according to embodiments of the present invention. The method of includes assigning a server blade to one clock failover group of a plurality of clock failover groups . As mentioned above a clock failover group is a group of server blades utilizing the same independent clock signal as the active clock signal for each server blade. Server blades assigned to the same clock failover group also switch the active clock signal from one independent clock signal to another independent clock signal in response to a failover condition occurring on any of the server blades in the group. Assigning a server blade to one of a plurality of clock failover groups according to the method of may be carried out by assigning by a management module control logic and a multiplexer a server blade to one of the plurality of clock failover groups in dependence upon membership to a scalable group or by receiving by a management module from application provisioning software an assignment to one of the plurality of clock failover groups as discussed below with reference to .

The method of also includes providing a plurality of independent clock signals to the clock generator of the server blade wherein one of the plurality of independent clock signals is an active clock signal . Providing a plurality of independent clock signals to the clock generator of the server blade according to the method of may be carried out by transmitting the independent clock signals by a plurality of independent clocks connected to the server blade and selecting by the server blade the active clock signal for use in timing operations on the server blade .

The method of also includes detecting a failover condition for the clock failover group assigned to the server blade . Readers will recall from above that a failover condition is a condition that occurs on a server blade when the server blade generates a failover signal. Detecting a failover condition for the clock failover group assigned to the server blade may be carried out by receiving by the clock generator of the server blade a failover signal from the clock generator of the same server blade or the clock generator of the other server blades assigned to the same clock failover group . For further explanation detecting a failover condition for the clock failover group assigned to the server blade according to the method of may also be carried out by detecting by the clock generator an error condition for the active clock signal generating by the clock generator in response to the detected error condition a failover signal or detecting a failover signal generated by another clock generator as discussed below with reference to .

The method of also includes switching the active clock signal in response to the detected failover condition from one independent clock signal to another independent clock signal. Switching the active clock signal in response to the detected failover condition from one independent clock signal to another independent clock signal may be carried out by switching by the clock generator of the server blade from one independent clock signal to another independent clock signal in a round robin fashion or in some other predetermined order programmed into a state machine of the clock generator. Regardless of the order in which switching the active clock signal from one independent clock signal to another independent clock signal occurs all of the clock generators of all the server blades in the same failover group switch clock signals in the same order. That is all the server blade in a clock failover group are synchronized to the same clock signal both before and after the switch from one independent clock signal to another independent clock signal occurs.

As mentioned above assigning a server blade to one of a plurality of clock failover groups may be carried out by receiving from application provisioning software an assignment to one of the plurality of clock failover groups. For further explanation sets forth a flow chart illustrating a further exemplary method for providing independent clock failover for scalable blade servers according to embodiments of the present invention that includes receiving from application provisioning software an assignment to one of the plurality of clock failover groups.

The method of is similar to the method of . That is the method of is similar to the method of in that the method of also includes assigning a server blade to one of a plurality of clock failover groups providing a plurality of independent clock signals to the clock generator of the server blade wherein one of the plurality of independent clock signals is an active clock signal detecting a failover condition for the clock failover group assigned to the server blade and switching the active clock signal in response to the detected failover condition from one independent clock signal to another independent clock signal. In addition the example of is similar to the example of in that the example of also includes clock failover groups server blade clock failover group independent clock signals active clock signal other server blades and detected failover condition .

In the method of assigning a server blade to one of a plurality of clock failover groups includes assigning a server blade to one of the plurality of clock failover groups in dependence upon membership to a scalable group. Assigning a server blade to one of the plurality of clock failover groups in dependence upon membership to a scalable group may be carried out in application provisioning software . As discussed above the application provisioning software is computer software that manages the execution of computer software applications on a plurality of server blades. The application provisioning software manages execution of software applications by assigning a blade server to a scalable group and assigning a computer software application to the scalable group for execution by the server blades of the group. To synchronize the execution of the software application the application provisioning software may assign server blades in the same scalable group to the same clock failover group.

In the example of the application provisioning software includes a scalable group table and a server blade table . The scalable group table associates a scalable group identifier with a clock failover group identifier . The scalable group identifier represents the scalable group to which applications are assigned for execution. The clock failover group identifier represents the clock failover group to which the server blades of a scalable group represented by the associated scalable group identifier are assigned. The server blade table associates a blade identifier with a clock failover group identifier . The blade identifier represents a server blade managed by the application provisioning software . The clock failover group identifyer represents the clock failover group to which a server blade represented by the associated server blade identifier is assigned.

In the method of assigning a server blade to one of the plurality of clock failover groups in dependence upon membership to a scalable group may be carried out by retrieving by application provisioning software the failover group identifier associated with the identifier for the scalable group to which the server blade is assigned from the scalable group table . Assigning a server blade to one of the plurality of clock failover groups in dependence upon membership to a scalable group may further be carried out by associating by application provisioning software the retrieved failover group identifier with the identifier for the server blade in the server blade table .

In the method of assigning a server blade to one of a plurality of clock failover groups includes receiving from application provisioning software an assignment to one of the plurality of clock failover groups. Receiving from application provisioning software an assignment to one of the plurality of clock failover groups may be carried out by a management module embedded in a blade server chassis. Receiving from application provisioning software an assignment to one of the plurality of clock failover groups may be carried out through a data communication connection between a management module and the application provisioning software such as for example a TCP IP connection. The remainder of the method of may then continue to be carried out as discussed above with reference to .

As mentioned above detecting a failover condition for the clock failover group assigned to the server blade may be carried out by detecting by the clock generator an error condition for the active clock signal and generating by the clock generator in response to the detected error condition a failover signal. For further explanation sets forth a flow chart illustrating a further exemplary method for providing independent clock failover for scalable blade servers according to embodiments of the present invention that includes detecting by the clock generator an error condition for the active clock signal and generating by the clock generator in response to the detected error condition a failover signal.

The method of is similar to the method of . That is the method of is similar to the method of in that the method of also includes assigning a server blade to one of a plurality of clock failover groups providing a plurality of independent clock signals to the clock generator of the server blade wherein one of the plurality of independent clock signals is an active clock signal detecting a failover condition for the clock failover group assigned to the server blade and switching the active clock signal in response to the detected failover condition from one independent clock signal to another independent clock signal. In addition the example of is similar to the example of in that the example of also includes clock failover groups server blade clock failover group independent clock signals active clock signal other server blades and detected failover condition .

In the example of detecting a failover condition for the clock failover group assigned to the server blade includes detecting by the clock generator an error condition for the active clock signal . As mentioned above an error condition is a condition in which the active clock signal for a server blade is no longer suitable for timing operations on the server blade. Readers will recall from above that the active clock signal is the particular independent clock signal among the plurality of independent clock signals utilized for timing operations on the server blade at a particular point in time. Detecting by the clock generator an error condition for the active clock signal may be carried out by comparing metrics of the active clock signal to operational clock signal parameters. Operational clock signal parameters are parameters that specify the operational range for a clock signal usable by a clock generator to generate a system clock for a server blade. An error condition may therefore exist when the metrics of the active clock signal are outside the operational range specified by the operational clock signal parameters.

In the example of detecting a failover condition for the clock failover group assigned to the server blade includes generating by the clock generator in response to the detected error condition a failover signal. Generating by the clock generator in response to the detected error condition a failover signal may be carried out by transmitting an electric signal on an electric conductor that connects together all of the clock generators of the server blades assigned to the same clock failover group as described above with reference to . The remainder of the method of may then continue to be carried out as discussed above with reference to .

As mentioned above detecting a failover condition for the clock failover group assigned to the server blade may be carried out by detecting a failover signal generated by another clock generator. For further explanation sets forth a flow chart illustrating a further exemplary method for providing independent clock failover for scalable blade servers according to embodiments of the present invention that includes detecting a failover signal generated by another clock generator.

The method of is similar to the method of . That is the method of is similar to the method of in that the method of also includes assigning a server blade to one of a plurality of clock failover groups providing a plurality of independent clock signals to the clock generator of the server blade wherein one of the plurality of independent clock signals is an active clock signal detecting a failover condition for the clock failover group assigned to the server blade and switching the active clock signal in response to the detected failover condition from one independent clock signal to another independent clock signal. In addition the example of is similar to the example of in that the example of also includes clock failover groups server blade clock failover group independent clock signals active clock signal other server blades and detected failover condition .

In the example of detecting a failover condition for the clock failover group assigned to the server blade includes detecting a failover signal generated by another clock generator. Readers will recall from above that a failover signal is a signal generated by a server blade when an error condition occurs for the active clock signal. In the example of other server blades includes failover signal that represents a failover signal generated by the clock generator of one of the other server blades represented by other server blades . Detecting a failover signal generated by another clock generator according to the method of may be carried out by receiving an electric signal on an electric conductor that connects together all of the clock generators of the server blades assigned to the same clock failover group as described above with reference to . The remainder of the method of may then continue to be carried out as discussed above with reference to .

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for providing independent clock failover for scalable blade servers. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on signal bearing media for use with any suitable data processing system. Such signal bearing media may be transmission media or recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as for example Ethernets and networks that communicate with the Internet Protocol and the World Wide Web. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

