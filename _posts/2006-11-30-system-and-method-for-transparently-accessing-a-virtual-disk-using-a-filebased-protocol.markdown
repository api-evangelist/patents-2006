---

title: System and method for transparently accessing a virtual disk using a file-based protocol
abstract: A system and method enabling transparent access to blocks, such as virtual disks, stored on a storage system using a file-based protocol. The system and method traps in-coming file-based protocol open commands to check for a predetermined modification to the file name. If the system and method detects the predetermined modification, then the virtual disk associated with the file name is exported to the client issuing the open command and the client receives a response from the storage system. The client, in response to receiving the response to the open command, creates a new device instantiation for reading and writing raw data to the virtual disk.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07904482&OS=07904482&RS=07904482
owner: NetApp, Inc.
number: 07904482
owner_city: Sunnyvale
owner_country: US
publication_date: 20061130
---
This application is a Continuation of U.S. Ser. No. 10 423 600 filed on Apr. 25 2003 now U.S. Pat. No. 7 181 439 by Arthur F. Lent et al. entitled SYSTEM AND METHOD FOR TRANSPARENTLY ACCESSING A VIRTUAL DISK USING A FILE BASED PROTOCOL now issued as U.S. Pat. No. 7 181 439 on Feb. 20 2007.

The present invention relates to storage systems and in particular to accessing virtual disks on a storage system using a file based protocol.

A storage system is a computer that provides storage service relating to the organization of information on writable persistent storage devices such as memories tapes or disks. The storage system is commonly deployed within a storage area network SAN or a network attached storage NAS environment. When used within a NAS environment the storage system may be embodied as a file server including an operating system that implements a file system to logically organize the information as a hierarchical structure of directories and files on e.g. the disks. Each on disk file may be implemented as a set of data structures e.g. disk blocks configured to store information such as the actual data for the file. A directory on the other hand may be implemented as a specially formatted file in which information about other files and directories are stored.

The file server or filer may be further configured to operate according to a client server model of information delivery to thereby allow many client systems clients to access shared resources such as files stored on the filer. Sharing of files is a hallmark of a NAS system which is enabled because of its semantic level of access to files and file systems. Storage of information on a NAS system is typically deployed over a computer network comprising a geographically distributed collection of interconnected communication links such as Ethernet that allow clients to remotely access the information files on the filer. The clients typically communicate with the filer by exchanging discrete frames or packets of data according to pre defined protocols such as the Transmission Control Protocol Internet Protocol TCP IP .

In the client server model the client may comprise an application executing on a computer that connects to the filer over a computer network such as a point to point link shared local area network wide area network or virtual private network implemented over a public network such as the Internet. NAS systems generally utilize file based access protocols therefore each client may request the services of the filer by issuing file system protocol messages in the form of packets to the file system over the network identifying one or more files to be accessed without regard to specific locations e.g. blocks in which the data are stored on disk. By supporting a plurality of file system protocols such as the conventional Common Internet File System CIFS the Network File System NFS and the Direct Access File System DAFS protocols the utility of the filer may be enhanced for networking clients.

A SAN is a high speed network that enables establishment of direct connections between a storage system and its storage devices. The SAN may thus be viewed as an extension to a storage bus and as such an operating system of the storage system enables access to stored information using block based access protocols over the extended bus . In this context the extended bus is typically embodied as Fibre Channel FC or Ethernet media adapted to operate with block access protocols such as Small Computer Systems Interface SCSI protocol encapsulation over FC or TCP IP Ethernet.

A SAN arrangement or deployment allows decoupling of storage from the storage system such as an application server and some level of information storage sharing at the application server level. There are however environments wherein a SAN is dedicated to a single server. In some SAN deployments the information is organized in the form of databases while in others a file based organization is employed. Where the information is organized as files the client requesting the information maintains file mappings and manages file semantics while its requests and server responses address the information in terms of block addressing on disk using e.g. a logical unit number lun .

Some SAN arrangements utilize storage appliances that implement virtual disks vdisks which are encapsulated data containers stored within a file system. An example of such a storage appliance is further described in U.S. patent application Ser. No. 10 215 917 entitled MULTI PROTOCOL STORAGE APPLIANCE THAT PROVIDES INTEGRATED SUPPORT FOR FILE AND BLOCK ACCESS PROTOCOLS by Brian Pawlowski et al. now published as U.S. Patent Publication No. 2004 0030668 A1 on Feb. 12 2004 the contents of which are hereby incorporated by reference. Similarly vdisks are further described in U.S. patent application Ser. No. 10 216 453 entitled STORAGE VIRTUALIZATION BY LAYERING VIRTUAL DISK OBJECTS ON A FILE SYSTEM by Vijayan Rajan et al. now issued as U.S. Pat. No. 7 107 385 on Sep. 12 2006 the contents of which are hereby incorporated by reference.

In multi protocol storage systems that utilize both block based and file protocols typically the block based protocol utilizes a high speed transport mechanism such as Fibre Channel FC or InfiniBand IB . Conversely file based protocol connections often utilize for example the NFS protocol operating over TCP IP. The file based systems typically include additional network overhead due to the nature of the file based protocols e.g. NFS or User Datagram Protocol UDP involved. This additional network overhead from for example file mapping and management of file semantics significantly reduces the data throughput available over the file based protocol network connection.

Clients typically desire the ease of use of a file based protocol especially the use of the file based protocol namespace wherein the files are referenced through a conventional drive volume path file name mechanism. In contrast in a SAN or other block based environment data is accessed by reference to a set number of blocks spread among the disks storing the data for the data set which imposes a greater administrative burden on a user for using SAN based systems. However a noted disadvantage of the use of the file based protocols is the above mentioned additional network overhead required for the use of such protocols. This additional network overhead makes the use of these file based protocols impractical for certain high performance and data intensive transfer operations such as database management systems DBMS . Many users thus desire the ease of use of a file based protocol namespace while needing the high speed data throughput available from a block based protocol.

Thus it is a object of the present invention to enable a client to transparently use a file based protocol namespace while permitting the performance advantages of block based protocol access to data stored on a storage system.

The disadvantages of the prior art are overcome by providing a system and method for transparently accessing blocks such as virtual disks vdisks stored on a storage system using a file based protocol. The present invention enables transparent access to a vdisk via a file based protocol namespace. Thus applications and users of clients served by the storage system may utilize the namespace available from the file based protocol while benefiting from the high speed data connection provided by an underlying transport media such as Fibre Channel connected to the vdisk. The system and method enable an application executing on a client of the storage system to issue an Open command to access the vdisk using a conventional file based protocol such as the NFS protocol. The application may invoke the use of a transparent access process executing on the storage system by prepending a predetermined and special prefix to the filename in the Open command. A NFS proxy layer of a storage operating system executing on the storage system checks the filename sent in the filename field of the Open command. If the filename does not include the special prefix then the storage operating system processes the request using the conventional file based protocol.

However if the file name includes the predetermined and special prefix then the NFS proxy layer maps the vdisk associated with the file to be opened to the client that issued the Open command. A logical unit number lun associated with this vdisk is also mapped to the client by the NFS proxy layer. The NFS proxy layer also via a remote procedure call RPC or similar application to application communication method communicates with a novel mount daemon executing on the client. The mount daemon communicates to the storage system a set of major and minor device numbers to be associated with a newly created character device instance. A character device is a block level interface that permits an arbitrary number of bytes to be written to a device. Typically the number of bytes written is a multiple of the size of the data blocks on the storage device. Using the returned major minor numbers the NFS proxy layer generates a response to the Open command and returns that response to the client. The client upon receiving the response generates a new instance of a character device using the major minor device numbers. The client then returns a file descriptor to the issuing application.

Thus to the issuing application and users thereof the file has been opened using conventional NFS or other file based protocol commands and its associated namespace. However the NFS proxy layer in conjunction with the novel mount daemon has generated a new character device on the client that enables the client to read and write raw data over the Fibre Channel or other block based network infrastructure. Thus a client experiences the ease of use of the file based namespace while benefiting from the performance of the block based network infrastructure.

Whereas clients of a NAS based network environment have a storage viewpoint of files the clients of a SAN based network environment have a storage viewpoint of blocks or disks. To that end the multi protocol storage appliance presents exports disks to SAN clients through the creation of logical unit numbers luns or vdisk objects. A vdisk object hereinafter vdisk is a special file type that is implemented by the virtualization system and translated into an emulated disk as viewed by the SAN clients. The multi protocol storage appliance thereafter makes these emulated disks accessible to the SAN clients through controlled exports as described further herein.

In the illustrative embodiment the memory comprises storage locations that are addressable by the processor and adapters for storing software program code and data structures. The processor and adapters may in turn comprise processing elements and or logic circuitry configured to execute the software code and manipulate the various data structures. The storage operating system portions of which are typically resident in memory and executed by the processing elements functionally organizes the storage appliance by inter alia invoking storage operations in support of the storage service implemented by the appliance. It will be apparent to those skilled in the art that other processing and memory implementations including various computer readable media may be used for storing and executing program instructions pertaining to the inventive system and method described herein.

The network adapter couples the storage appliance to a plurality of clients over point to point links wide area networks virtual private networks implemented over a public network Internet or a shared local area network hereinafter referred to as an illustrative Ethernet network . Therefore the network adapter may comprise a network interface card NIC having the mechanical electrical and signaling circuitry needed to connect the appliance to a network switch such as a conventional Ethernet switch . For this NAS based network environment the clients are configured to access information stored on the multi protocol appliance as files. The clients communicate with the storage appliance over network by exchanging discrete frames or packets of data according to pre defined protocols such as the Transmission Control Protocol Internet Protocol TCP IP .

The clients may be general purpose computers configured to execute applications over a variety of operating systems including the UNIX and Microsoft Windows operating systems. Client systems generally utilize file based access protocols when accessing information in the form of files and directories over a NAS based network. Therefore each client may request the services of the storage appliance by issuing file access protocol messages in the form of packets to the appliance over the network . For example a client running the Windows operating system may communicate with the storage appliance using the Common Internet File System CIFS protocol. On the other hand a client running the UNIX operating system may communicate with the multi protocol appliance using the Network File System NFS protocol over TCP IP . It will be apparent to those skilled in the art that other clients running other types of operating systems may also communicate with the integrated multi protocol storage appliance using other file access protocols.

The storage network target adapter also couples the multi protocol storage appliance to clients that may be further configured to access the stored information as blocks or disks. For this SAN based network environment the storage appliance is coupled to an illustrative Fibre Channel FC network . FC is a networking standard describing a suite of protocols and media that is primarily found in SAN deployments. The network target adapter may comprise a FC host bus adapter HBA having the mechanical electrical and signaling circuitry needed to connect the appliance to a SAN network switch such as a conventional FC switch . In addition to providing FC access the FC HBA may offload fibre channel network processing operations for the storage appliance.

The clients generally utilize block based access protocols such as the Small Computer Systems Interface SCSI protocol when accessing information in the form of blocks disks or vdisks over a SAN based network. SCSI is an input output I O interface with a standard device independent protocol that allows different peripheral devices such as disks to attach to the storage appliance . In SCSI terminology clients operating in a SAN environment are initiators that initiate requests and commands for data. The multi protocol storage appliance is thus a target configured to respond to the requests issued by the initiators in accordance with a request response protocol. The initiators and targets have endpoint addresses that in accordance with the FC protocol comprise worldwide names WWN . A WWN is a unique identifier e.g. a node name or a port name consisting of an 8 byte number.

The multi protocol storage appliance supports various SCSI based protocols used in SAN deployments including SCSI encapsulated over TCP iSCSI and SCSI encapsulated over FC FCP . The initiators hereinafter clients may thus request the services of the target hereinafter storage appliance by issuing iSCSI and FCP messages over the network to access information stored on the disks. It will be apparent to those skilled in the art that the clients may also request the services of the integrated multi protocol storage appliance using other block access protocols. By supporting a plurality of block access protocols the multi protocol storage appliance provides a unified and coherent access solution to vdisks luns in a heterogeneous SAN environment.

The storage adapter cooperates with the storage operating system executing on the storage appliance to access information requested by the clients. The information may be stored on the disks or other similar media adapted to store information. The storage adapter includes I O interface circuitry that couples to the disks over an I O interconnect arrangement such as a conventional high performance FC serial link topology. The information is retrieved by the storage adapter and if necessary processed by the processor or the adapter itself prior to being forwarded over the system bus to the network adapters where the information is formatted into packets or messages and returned to the clients.

Storage of information on the appliance is preferably implemented as one or more storage volumes that comprise a cluster of physical storage disks defining an overall logical arrangement of disk space. The disks within a volume are typically organized as one or more groups of Redundant Array of Independent or Inexpensive Disks RAID . RAID implementations enhance the reliability integrity of data storage through the writing of data stripes across a given number of physical disks in the RAID group and the appropriate storing of redundant information with respect to the striped data. The redundant information enables recovery of data lost when a storage device fails. It will be apparent to those skilled in the art that other redundancy techniques such as mirroring may be used in accordance with the present invention.

In accordance with an illustrative embodiment of the present invention a client includes various software layers or modules executing thereon. For example the client may be executing a Network File System NFS layer that implements the NFS protocol and cooperates with a TCP IP layer to enable the client to access files stored on the storage appliance using the NFS protocol. The client may also include a Fibre Channel FC driver for communicating with the storage appliance utilizing the Fibre Channel protocol. A client utilizing the teachings of the present invention also executes in an illustrative embodiment a novel mount daemon which interacts with the storage operating system of the storage system to enable transparent access to vdisks using a file based protocol such as NFS. The mount daemon operates in conjunction with the NFS Proxy layer described further below to provide appropriate device addresses to the storage system. The mount daemon may be implemented as a background process thread or may be a remotely callable library of procedures that performs the various functionality described below. It should be noted that the software layers that are shown for client are exemplary only and that they may be varied without departing from the spirit and scope of the invention. Additionally it should be noted that the NFS layer is shown for exemplary purposes only. Any file based protocol may be utilized in accordance with the teachings of the present invention including for example CIFS.

To facilitate access to the disks the storage operating system implements a write anywhere file system of a virtualization system that virtualizes the storage space provided by disks . The file system logically organizes the information as a hierarchical structure of named directory and file objects hereinafter directories and files on the disks. Each on disk file may be implemented as set of disk blocks configured to store information such as data whereas the directory may be implemented as a specially formatted file in which names and links to other files and directories are stored. The virtualization system allows the file system to further logically organize information as a hierarchical structure of named vdisks on the disks thereby providing an integrated NAS and SAN appliance approach to storage by enabling file based NAS access to the named files and directories while further enabling block based SAN access to the named vdisks on a file system based storage platform. The file system simplifies the complexity of management of the underlying physical storage in SAN deployments.

As noted a vdisk is a special file type in a volume that derives from a plain regular file but that has associated export controls and operation restrictions that support emulation of a disk. Unlike a file that can be created by a client using e.g. the NFS or CIFS protocol a vdisk is created on the multi protocol storage appliance via e.g. a user interface UI as a special typed file object . Illustratively the vdisk is a multi inode object comprising a special file inode that holds data and at least one associated stream inode that holds attributes including security information. The special file inode functions as a main container for storing data such as application data associated with the emulated disk. The stream inode stores attributes that allow luns and exports to persist over e.g. reboot operations while also enabling management of the vdisk as a single disk object in relation to NAS clients. An example of a vdisk and its associated inodes is further described in U.S. Pat. No. 7 107 385 entitled STORAGE VIRTUALIZATION BY LAYERING VDISKS ON A FILE SYSTEM by Vijayan Rajan et al. the contents of which are hereby incorporated by reference.

In the illustrative embodiment the storage operating system is preferably the NetApp Data ONTAP operating system available from Network Appliance Inc. Sunnyvale Calif. that implements a Write Anywhere File Layout WAFL file system. However it is expressly contemplated that any appropriate storage operating system including a write in place file system may be enhanced for use in accordance with the inventive principles described herein. As such where the term WAFL is employed it should be taken broadly to refer to any storage operating system that is otherwise adaptable to the teachings of this invention.

As used herein the term storage operating system generally refers to the computer executable code operable on a computer that manages data access and may in the case of a multi protocol storage appliance implement data access semantics such as the Data ONTAP storage operating system which is implemented as a microkernel. The storage operating system can also be implemented as an application program operating over a general purpose operating system such as UNIX or Windows NT or as a general purpose operating system with configurable functionality which is configured for storage applications as described herein.

In addition it will be understood to those skilled in the art that the inventive system and method described herein may apply to any type of special purpose e.g. storage serving appliance or general purpose computer including a standalone computer or portion thereof embodied as or including a storage system. Moreover the teachings of this invention can be adapted to a variety of storage system architectures including but not limited to a network attached storage environment a storage area network and disk assembly directly attached to a client or host computer. The term storage system should therefore be taken broadly to include such arrangements in addition to any subsystems configured to perform a storage function and associated with other equipment or systems.

The file system protocol layer also includes in the illustrative embodiment a NFS proxy layer . The NFS proxy layer examines each NFS Open or look up commands issued by a client of the storage system to determine if the command is to utilize the novel transparent Open command in accordance with the teachings of the present invention. The NFS proxy layer performs this function by examining the filename field of the appropriate Open command described further below. It should be noted that an NFS proxy layer is shown for exemplary purposes only. The teachings of the present invention may be utilized with any file based protocol including for example CIFS or HTTP. In such alternate embodiments an appropriate proxy layer would be implemented within the storage operating system.

An iSCSI driver layer provides block protocol access over the TCP IP network protocol layers while a FC driver layer operates with the FC HBA to receive and transmit block access requests and responses to and from the integrated storage appliance. The FC and iSCSI drivers provide FC specific and iSCSI specific access control to the luns vdisks and thus manage exports of vdisks to either iSCSI or FCP or alternatively to both iSCSI and FCP when accessing a vdisk on the multi protocol storage appliance. In addition the storage operating system includes a disk storage layer that implements a disk storage protocol such as a RAID protocol and a disk driver layer that implements a disk access protocol such as e.g. a SCSI protocol.

Bridging the disk software layers with the integrated network protocol stack layers is a virtualization system . The virtualization system is implemented in the illustrative embodiment by a file system cooperating with virtualization modules illustratively embodied as e.g. vdisk module and SCSI target module . It should be noted that the vdisk module file system and SCSI target module can be implemented in software hardware firmware or a combination thereof. The vdisk module interacts with the file system to provide a data path from the block based SCSI target module to blocks managed by the file system. In essence the vdisk module manages SAN deployments by among other things implementing a comprehensive set of vdisk lun commands that are converted to primitive file system operations primitives and that interact with the file system and the SCSI target module to implement the vdisks.

The SCSI target module in turn initiates emulation of a disk or lun by providing a mapping procedure that translates logical block access to luns specified in access requests into virtual block access to the special vdisk file types and for responses to the requests vdisks into luns. The SCSI target module is illustratively disposed between the iSCSI and FC drivers and the file system to thereby provide a translation layer of the virtualization system between the SAN block lun space and the file system space where luns are represented as vdisks.

In addition the SCSI target module includes one or more transparent access processes . The transparent access processes described further below enable clients to transparently access a vdisk by utilizing a file based protocol. These transparent processes cooperate with the mount daemon in executing on the client to implement the novel system and method for transparently accessing vdisks using a file based protocol.

The file system illustratively implements the WAFL file system having an on disk format representation that is block based using e.g. 4 kilobyte kB blocks and using inodes to describe the files. The WAFL file system uses files to store metadata describing the layout of its file system these metadata files include among others an inode file. A file handle i.e. an identifier that includes an inode number is used to retrieve an inode from disk. A description of the structure of the file system including the inode file is provided in U.S. Pat. No. 5 819 292 entitled METHOD FOR MAINTAINING CONSISTENT STATES OF A FILE SYSTEM AND FOR CREATING USER ACCESSIBLE READ ONLY COPIES OF A FILE SYSTEM by David Hitz et al. issued Oct. 6 1998 which patent is hereby incorporated by reference as though fully set forth herein.

Broadly stated all inodes of the file system are organized into the inode file. A file system FS info block specifies the layout of information in the file system and includes an inode of a file that includes all other inodes of the file system. Each volume has an FS info block that is preferably stored at a fixed location within e.g. a RAID group of the file system. The inode of the root FS info block may directly reference point to blocks of the inode file or may reference indirect blocks of the inode file that in turn reference direct blocks of the inode file. Within each direct block of the inode file are embedded inodes each of which may reference indirect blocks that in turn reference data blocks of a file or vdisk.

Users of certain files may desire high speed access to the files however the users may also desire the ease of use of utilizing a file based protocol namespace such as the namespace available through the NFS protocol. By implementing the teachings of the present invention users and application software executing on a client may transparently access a file by issuing a file based protocol command that utilize the protocol s namespace but that performs actual data transfers over a block based protocol transport mechanism. By transparently access it is meant that the application or other process executing on the client utilizes a conventional Application Programming Interface API to send a file open command and that the application may use conventional input output I O commands to perform data access operations to the specified file. In accordance with an embodiment of the present invention subsequent I O requests are transparently directed to a newly created device instantiation that permits data to be directly written to a vdisk containing the requested file.

An exemplary procedure for permitting the transparent access to a vdisk using a file based protocol in accordance with an illustrative embodiment of the invention is shown in . The procedure initially begins in step and then proceeds to step where an application executing on the client issues a NFS Lookup i.e. an Open command to the storage system serving the vdisk. In the illustrative example the NFS protocol is illustrated however it will be understood that the teachings of the present invention may be implemented using any file based protocol in conjunction with the teachings of the present invention. Additionally it should be noted that the term open command should be taken to include the full sequence of lookup commands for each component of the full pathname. This Open command is passed through the various software layers of the storage operating system executing on the storage system until the NFS proxy layer receives the command.

The NFS proxy layer then checks the filename stored in the Open command in step and determines if the filename begins with a predetermined and special prefix step . The special prefix is used to denote that the Open command should utilize the novel transparent access open command described herein. It should be noted that the use of a special prefix is illustrative only and that any form of modification to the file name including for example suffixes prefixes and the like may be implemented while remaining within the spirit and scope of the present invention. Additionally in an alternate embodiment a user may set a certain bit in the file based Open command to alert the storage operating system executing on the storage system that the client desires to utilize the transparent access open command. In the illustrative embodiment the file name portion of the path to a file is preceded by a prefix DB . Thus if the file name was for example vol0 dir file the modified file name containing the special prefix would be vol0 dir DB file. In an alternate embodiment a special directory name may be inserted into the pathname. Thus if the file name was for example vol0 dir file the modified file name containing the special directory name may be vol .iscsi dir file. In this example the .iscsi would comprise a psuedo directory that would alert the NFS proxy layer to use the teachings of the present invention.

The prefix identifies to the NFS proxy layer that the file to be opened should be opened for transparent use as a vdisk in accordance with the teachings of the present invention. The client or user of the storage system would in issuing its Open command insert the appropriate prefix to alert the storage system that it desires to utilize the teachings of the present invention. Thus a database administrator that desires to utilize the namespace of for example the NFS protocol but desires the high speed throughput of a SAN environment may configure the database management system DBMS to utilize the special prefix e.g. DB for those databases that require high speed data access available through the teachings of the present invention.

If in step the NFS proxy layer determines that the file name does not begin with the predefined special prefix the procedure then branches to step where the NFS proxy layer passes the Open command to the NFS layer of the storage operating system for processing. This processing will be performed in accordance with the conventional NFS protocol i.e. without the benefit of the advantages of the present invention. However if the file name does begin with the appropriate prefix the procedure then maps a vdisk for the file to be opened to the client that issued the Open command in step . This step described further below ensures that if the file to be opened is not already a vdisk on the storage system that it is converted into a vdisk using known storage operating system procedures. Next in step the lun is mapped to the client. The step of mapping the lun to the client ensures that the client has identified the specified lun associated with the file to be opened and properly recognizes it as a lun that is accessible for I O operations.

After the lun has been mapped to the client the client then sends a set of major minor device numbers to the storage system in step . This transmission is originated by the novel mount daemon executing on the client using a conventional data transport protocol such as TCP IP. Major minor device numbers uniquely identify a device operatively connected to a Unix based operating system for I O operations. Major and minor numbers are associated with the device files in the dev directory that are used by the operating system to determine the actual driver and device to be accessed by a user level level request with a special device file. Typically each hardware controller has its own unique major number. Each device connected to a given controller then has its own unique minor number. Thus any single device may be uniquely identified using a major minor number combination. In alternate embodiments the client may be executing a non Unix based operating system. In those embodiments the major minor device numbers would be replaced by an operating system specific identification of a unique device on the client for reading and writing of raw data to a vdisk. Such a raw device also termed a character device interface permits an arbitrary number of bytes to be written to an arbitrary offset within the device. Typically to achieve high performance operations writes are conducted in multiples of the block size of the underlying storage device and are typically aligned to coincide with the blocks of the device.

After receiving the major minor numbers the NFS proxy layer creates in step a response to the Open command containing the major minor numbers and sends the generated response to the client. This generated response comprises a conventional NFS response to an Open command. Upon receipt of the NFS response the client creates a new instance of a character device using the returned major minor device numbers in step . In accordance with conventional file protocol implementations the major minor pair is read by the client upon receipt of a file system response to an Open command. The client s operating system then creates an instantiation of a device identified by the major minor pair. Typically the major minor pair is identified with the file based protocol device that is sending the protocol packets over the network however the created NFS response includes a major minor pair that identifies a character device that may be utilized to access the vdisk over the block based protocol network paths.

Once this new instantiation has been generated the client has created a device that is accessible by applications and that utilizes the Fibre Channel or other high speed data connection to the vdisk associated with the specified file. The client s file protocol layer then in step returns a file descriptor to the issuing application and the sequence completes in step . From the application s point of view it issued an Open command using a file based protocol namespace and that file was successfully opened. However the mount daemon has transparently generated a new instantiation of a character device for reading and writing raw data to the vdisk that embodies the requested file. The new character device permits the client to directly read and write data to the vdisk. From the client s perspective it is issuing read and write requests to the already opened file which was opened using the file based protocol. Thus the client can utilize the high speed access available over the block based transport medium while being able to reference data using a file based protocol s namespace.

Once the client has rescanned the SCSI devices to locate the new lun the procedure then creates a major minor device number to be associated with the lun step . These major minor device numbers described further above are utilized to uniquely identify the instantiation of the raw character device to be associated with the vidisk lun. The procedure then completes in step .

To again summarize the present invention is directed to a system and method for enabling a client application to issue a file based protocol Open command and transparently access a virtual disk stored on a storage system using a block based protocol. The client may utilize the convenient namespace of the file based protocol while obtaining the performance benefits of the high speed data access path associated with the vdisk. In accordance with an illustrative embodiment of the present invention the client executes a novel mount daemon that interacts with a NFS or other file based protocol proxy layer executing on the storage system. The transparent access is achieved by prepending a predetermined and special prefix to a filename contained in an Open command sent through the file based protocol. The NFS proxy layer executing within the storage operating system of the storage system identifies that the Open command is directed to a file name that contains the predetermined prefix and initiates the system and method of the present invention. The NFS proxy layer in conjunction with the SCSI target module of the storage operating system ensures that the file to be opened is represented as a vdisk and is exported to the requesting client. If the file to be opened is not already a vdisk the procedure also converts it to one using conventional file to vdisk conversion routines. The storage system then communicates with the mount daemon executing on the client. The mount daemon ensures that the exported vdisk is mapped to the client and if it is not already causes the client to rescan the SCSI devices connected thereto to identify the newly mounted vdisk. Thus the present invention enables a client to open a vdisk utilizing a file based protocol and its associated namespace but perform later data access operations using a block based protocol data path.

The foregoing description has been directed to specific embodiments of this invention. It will be apparent however that other variations and modifications may be made to the described embodiments with the attainment of some or all of their advantages. For example it is expressly contemplated that the teachings of this invention can be implemented as software including a computer readable medium having program instructions executing on a computer hardware firmware or a combination thereof. Additionally it should be noted that while this description is written with reference to the NFS protocol any file based protocol may be utilized in accordance with the teachings of the present invention. Accordingly this description is to be taken only by way of example and not to otherwise limit the scope of the invention. It is thus the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the invention.

