---

title: Global anchor text processing
abstract: Provided are techniques for building a search index. While building the search index and using the search index to respond to one or more search requests, an anchor information store is maintained, wherein each entry of the anchor information store identifies a referring document, a target document, and anchor text associated with a link from the referring document to the target document; a document is received for processing; one or more entries in the anchor information store for which the document to be processed is identified as the target document are located; anchor text is retrieved from each of the identified entries; and the retrieved anchor text is stored in an entry of the search index for the document.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07788253&OS=07788253&RS=07788253
owner: International Business Machines Corporation
number: 07788253
owner_city: Armonk
owner_country: US
publication_date: 20061228
---
The World Wide Web also known as WWW or the Web is a collection of some Internet servers that support Web pages that may include links to other Web pages. A Uniform Resource Locator URL indicates a location of a Web page. Also each Web page may contain for example text graphics audio and or video content. For example a first Web page may contain a link to a second Web page. When the link is selected in the first Web page the second Web page is typically displayed.

A Web browser is a software application that is used to locate and display Web pages. Currently there are billions of Web pages on the Web.

Web search engines are used to retrieve Web pages on the Web based on some criteria e.g. entered via the Web browser . That is Web search engines are designed to return relevant Web pages given a keyword query. For example the query HR issued against a company intranet search engine is expected to return relevant pages in the intranet that are related to Human Resources HR . The Web search engine uses indexing techniques that relate search terms e.g. keywords to Web pages.

An anchor may be described as a link or path to a document e.g. a URL . Anchor text may be described as text associated with a path or link e.g. a URL that points to a document. For example anchor text may be text that labels or encloses hypertext text links in Web documents. Anchor text is collected by Web search engines and is associated with target documents. Also the anchor text and target documents are indexed together.

Anchor text may also be described as content found in one HyperText Markup Language HTML document the referring document that annotates a link to another document the target document . Anchor text is contained lexically inside an anchor tag . . . . Anchor text can improve search quality because it encodes a human editor s judgment about the area of relevance of the target document. To make anchor text searchable though the anchor text has to be indexed as if the anchor text were part of the target document s content even though the anchor text actually enters the search system as part of other referring documents.

When Web search engines process documents in a corpus e.g. retrieve and index documents it is not possible to keep all the documents in memory until all cross links are known. Thus the traditional solution is to catalog document content and anchor text separately and then run an offline global integration process to combine anchor text and document content for indexing.

If integration is postponed until all of the corpus s content has been crawled i.e. retrieved then all the anchor text is available and the combined index only needs to be constructed once. But if this is done the content only index can not be created until the whole corpus has been crawled. Alternatively the content only index can be written and be made available but no anchor text searching will be possible until after the integration phase which requires updating the index.

Provided are a method computer program product and system for building a search index. While building the search index and using the search index to respond to one or more search requests an anchor information store is maintained wherein each entry of the anchor information store identifies a referring document a target document and anchor text associated with a link from the referring document to the target document a document is received for processing one or more entries in the anchor information store for which the document to be processed is identified as the target document are located and anchor text is retrieved from each of the identified entries. The retrieved anchor text is stored in an entry of the search index for the document.

In the following description reference is made to the accompanying drawings which form a part hereof and which illustrate several embodiments of the invention. It is understood that other embodiments may be utilized and structural and operational changes may be made without departing from the scope of the invention.

The server computer includes system memory which may be implemented in volatile and or non volatile devices. A search engine executes in the system memory . In certain embodiments the search engine includes a crawler component a static rank component a document analysis component a duplicate detection component an anchor text component and an indexing component . Although components and are illustrated as separate components the functionality of components and may be implemented in fewer or more or different components than illustrated. Additionally the functionality of the components and may be implemented at a Web application server computer or other server computer that is connected to the server computer . Additionally one or more server applications execute in system memory .

In certain embodiments global anchor text processing is implemented using the document analysis component the anchor text component and an indexing component .

The server computer provides the client computer with access to data in at least one data store e.g. a database . Although a single data store is illustrated for ease of understanding data in data store may be stored in data stores at other computers connected to server computer . The one or more data stores include an anchor information store a rebuild agenda and a search index .

In certain embodiments each entry in the anchor information store includes at least a set of triples D Ti anchor text where D is a referring document Ti is a target document and anchor text is the text contained in a link tag for the link from the referring document to the target document. Each entry in the anchor information store may contain additional information such as a static score a language of the referring document or a fingerprint checksum of the referring document which would help avoid using links from identical duplicates of the same referring document.

In certain embodiments each entry of the rebuild agenda contains an identifier of a document e.g. a URL of that document whose anchor text is to be updated in the search index with asynchronous processing. For each identified document there is at least one new or updated link pointing to that document.

In certain embodiments the search index contains both document content and anchor text associated with links pointing to the document. In such embodiments the document content and anchor text may be updated independently. In certain embodiments anchor text is not updated independently e.g. systems in which anchor text update requires re indexing of an entire document . In certain embodiments the search index is available for searching at all times but newly indexed documents may appear in search results after a slight delay because writes to disk are buffered for better performance.

Also an operator console executes one or more applications and is used to access the server computer and the data store .

The data store may comprise an array of storage devices such as Direct Access Storage Devices DASDs Just a Bunch of Disks JBOD Redundant Array of Independent Disks RAID virtualization device etc. The data store includes data that is used with certain embodiments of the invention.

In block documents that are to be indexed by the search engine are obtained. In certain embodiments the documents are published or pushed e.g. as may be the case with newspaper articles to the indexing component . In certain embodiments the crawler component discovers fetches and stores the documents. In certain embodiments the crawler component may discover documents based on for example certain criteria e.g. documents were accessed within the last month . Additionally the crawler component may discover documents in one or more data stores connected directly e.g. data store or indirectly e.g. connected to server computer via another computing device not shown . In certain embodiments the crawler component discovers fetches and stores tokens and URLs in data store . The crawled documents may be referred to as a collection of documents .

In block the document analysis component performs per document analysis. In particular the document analysis component parses and tokenizes the documents and determines for each document the language in which each document was written extracts anchor text and performs other tasks such as categorization and classification of the documents. The language information is stored for later use. For example the document analysis component determines whether the primary language used in the document is English Japanese German etc. As part of extracting the anchor text the document analysis component also associates a proximity class with each anchor. A proximity class may be described as specifying how close a source document is to a target document e.g. whether they are on the same server and if so whether they are in the same directory . Also the extracted anchor text is ready to be processed by the anchor text component .

In block the static rank component reviews the stored documents and assigns a rank to the documents. The rank may be described as the importance of the source document relative to other documents that have been stored by the crawler component . Any type of ranking technique may be used. For example documents that are accessed more frequently may receive a higher rank. In block the anchor text component processes anchor text.

With certain embodiments the search index is updated incrementally and continuously. Anchor text processing occurs in two contexts synchronous and asynchronous.

In certain embodiments that include duplicate detection whenever a new anchor from a referring document R to a target document T R T is added the anchor text component recomputes anchor text for the target document T as well as for any duplicates. In certain embodiments when computing the target anchor text for target document T links pointing to duplicates of T may be included too.

In certain embodiments that include static ranking static ranking information may be used to prioritize anchor text if a page has a large number of links pointing to it so that rather than incorporating all of the anchor text from the links into the target anchor text anchor text from a configurable number of the most meaningful referring documents is incorporated into the target anchor text.

In certain embodiments that include language identification the language identification for referring documents may help decide the language for the target document. That is if a target document has mainly links from documents in one language the target document is most likely in the same language.

In block for links in the document that point to other documents data is added to a rebuild agenda . For example if the document includes three outgoing links each pointing to a target document the rebuild agenda is updated with the URLs of these three target documents.

In block for links that point from referring documents to the document being processed in the anchor information store anchor text is retrieved from the anchor information store and added to the search index . In particular the document analysis component locates entries in the anchor information store for which the document being processed is listed as the target document retrieves anchor text from those entries from the anchor information store and forwards the anchor text to the indexing component to add to the search index .

For a document D unless that document is a seed URL document D is being crawled because document D was referred to by a link in a document processed earlier. A seed URL may be described as one that is entered manually by an administrator rather than being discovered by the crawler component as a link in another document. At the beginning of a crawl the crawler component has no links and has to be seeded with some URLs with which to start crawling. When these documents are first crawled no other documents refer to them but as the crawl progresses the crawler component is likely to find other documents that do point at the seed URLs. Thus there may be anchor text from several such documents referring to document D by the time document D is processed. So before indexing document D for the first time the anchor text anchor information store is consulted and any already known anchor text for document D is included when document D is first indexed in the search index .

In block the anchor text component selects the next document in the rebuild agenda i.e. by selecting the URL representing that document starting with a first document. In block the anchor text component determines whether all documents in the rebuild agenda have been selected or if the allotted time slice has expired. If so processing continues to block otherwise processing continues to block . Thus the asynchronous anchor text rebuilding cycle stops if there are no more targets needing rebuilding or if the time slice allotted by the search engine has expired even if there are more URLs in the rebuild agenda .

If all documents have been selected in block the search engine waits until it has determined that the system load permits spending some time to rebuild some anchor text at which time processing continues to block .

In block the anchor text component uses the anchor information store to find anchor text for the selected document. In particular the anchor text component identifies entries in the anchor information store in which the selected document is a target and retrieves the anchor text in these entries. In block the anchor text component updates anchor text in the search index for the selected document. In certain embodiments the anchor text is updated independently of document content in the search index . In certain embodiments anchor text is not updated independently e.g. systems in which anchor text update requires re indexing of an entire document . From block processing continues to block .

Thus in the asynchronous context when a document D e.g. an HTML document is indexed document D s outgoing links are added to the anchor information store . Each entry added to the anchor information store contains a fragment of anchor text that belongs in the indexed content for some target document T. Each new anchor information store entry therefore makes the currently indexed content for document T out of date. Thus embodiments periodically rebuild anchor text for index entries. Also because the rebuild agenda maintains a list of target documents known to need updating efficiency is gained by just updating the anchor text for these target documents.

With certain embodiments in background processing in parallel with searching the anchor text component pulls target documents in turn from the rebuild agenda consults the anchor information store to find all anchor text references to each target document and updates each target document s index entry in the search index to reflect the anchor text. Each time a target document s index entry is updated in the search index search quality for that target document and the indexed terms improves resulting in a continuous improvement in search quality.

In certain embodiments the anchor information store is implemented as a relational table with three columns and maps naturally to a relational database. In some cases this table is searched for all entries belonging to a given referring document and in some cases this table is searched for those entries belonging to a given target document and so two indices are used.

In certain embodiments the anchor information store is implemented as an index that may be configured to store an intact copy of data i.e. the anchor text that may be used again and not to store a copy of indexed tokenized strings whose original form is not needed at retrieval time i.e. for the referring URLs . Both the relational table and index embodiments perform well in terms of speed.

In certain embodiments the anchor information store is implemented as one or more flat files. With such embodiments insertion is very fast as entries may be appended to the end of a flat file. Also with such embodiments retrieval may require disk sorting to reduce the data to unique entries and the order of iteration over the referring and target URLs is dictated by the sort order.

In certain embodiments an abstract store Application Programming Interface API hides the index and the relational database embodiments behind a common set of operations required by the higher level anchor text component . The store API handles deletions of documents by removing anchor information store entries containing the removed document and flagging the affected target documents for updating.

When a referring document is not deleted but rather updated with a new version the old entries containing that document as the referring document in the anchor information store are removed and the anchors in the new version of the document are added to the anchor information store . This is equivalent to delete and insert operations of that referring document s anchor text.

That is when the document has been updated with new content existing entries in the anchor information store for which the document is a referring document are compared with a current set of anchors in the document. Each entry that no longer matches the document content e.g. an entry that includes an anchor that does not exist in the updated document is deleted from the anchor information store . A new entry is added to the anchor information store for each new anchor in the document i.e. any new entry that stems from the current state of the document content is added to the anchor information store . A target document of any entry that was either deleted from or added to the anchor information store is added to the rebuild agenda .

In certain embodiments the rebuild agenda may be described as a list combining First In First Out FIFO semantics and set semantics i.e. no duplicates and is used to keep track of which target documents need updating.

In certain embodiments during intensive indexing the anchor text component may need to remember a large number of pending updates for some time larger and longer than would be desirable with an in memory solution. Thus the rebuild agenda may be implemented as an order preserving hash set backed by a hierarchical disk store scalable to millions of entries. Entries e.g. URLs are added to an in memory table until a configurable limit is reached at which point the table is flushed to disk. Fetches return from the oldest disk file first as if from a persistent ring buffer. Duplicates do not occur in the table or within one saved batch but two separate batches may contain entries in common. These embodiments accept some duplication in return for memory savings and performance is good.

Embodiments enable support of other forms of link analysis. That is the anchor information store and rebuild agenda in any embodiment as integrated into a search system may support other types of link analysis in document e.g. HTML document collections. For example embodiments support searches for pages containing broken links e.g. references to missing or unavailable documents . In particular for embodiments in which documents are crawled the search index may be scanned to find documents for which download status is error while for embodiments in which documents are pushed pushed delete document commands may be processed. In any embodiments in which there are references to missing or unavailable documents then the anchor information store is searched to find and report e.g. to a search engine administrator or to a content owner such as a website owner referring documents that point to the missing or unavailable document i.e. it is the referring document that has the broken link . As an example the website owner then is able to update the referring document. In particular when a document is missing or unavailable e.g. its download status is error or there is a pushed delete document command for the document one or more entries in the anchor information store for which the document is the target document are located and the referring document in each of the identified entries is reported to a search engine administrator and or a content owner of the referring document. Also when a document is missing or unavailable e.g. its download status is error or there is a pushed delete document command for the document the entries in the anchor information store for which that document is the referring document are located and deleted and the target documents of those entries are registered in the rebuild agenda .

As another example embodiments support studies of site connectedness i.e. which sites are most significant best connected by generating a graph that shows connections of nodes using the anchor information store . Also embodiments support adjusting search result weight according to the significance popularity of a page or site based on in link count by counting the number of referring documents i.e. in links for a document in the anchor information store . Embodiments also support a form of tagging and social bookmarking with different tags. Tags in this context are a different form of anchor text. Instead of being embedded in the content of a document the tags are attached to a document externally e.g. users can annotate documents with keywords which are tags in an environment that supports making such attachments. Thus a tag is similar to anchor text because the tag represents a user s summary of the subject of the document. Therefore the anchor information store may store tags instead of or in addition to anchor text. With such tags embodiments enable finding documents using the keywords in those attachments a social network environment .

In addition embodiments are applicable to any kind of feedback that can be attached to a document including votes that indicate that users like that page or clickthrough data e.g. the fact that a user clicks on a search result may be considered a vote for that page . Any of this information may be included in the anchor information store .

Some of these analyses improve the functioning of the search system itself while others benefit content administrators and users.

Thus embodiments add anchor text into the search index early in the processing of documents in a corpus rather than making the user wait for an offline integration process for the anchor text to be added to the search index. Thus with certain embodiments anchor text processing occurs continuously in parallel with searching. This provides incremental anchor text processing. In certain embodiments a document s content and anchor text may sometimes be indexed more than once as newer anchor text becomes available. However with certain embodiments there is a gain in search quality and early availability of anchor text in the search index .

JAVA is a registered trademark or common law mark of Sun Microsystems in the United States and or other countries.

The described operations may be implemented as a method computer program product or apparatus using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof.

Each of the embodiments may take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. The embodiments may be implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the embodiments may take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium may be any apparatus that may contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The described operations may be implemented as code maintained in a computer usable or computer readable medium where a processor may read and execute the code from the computer readable medium. The medium may be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a rigid magnetic disk an optical disk magnetic storage medium e.g. hard disk drives floppy disks tape etc. volatile and non volatile memory devices e.g. a random access memory RAM DRAMs SRAMs a read only memory ROM PROMs EEPROMs Flash Memory firmware programmable logic array PLA etc. . Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

The code implementing the described operations may further be implemented in hardware logic e.g. an integrated circuit chip Programmable Gate Array PGA Application Specific Integrated Circuit ASIC etc. . Still further the code implementing the described operations may be implemented in transmission signals where transmission signals may propagate through space or through a transmission media such as an optical fiber copper wire etc. The transmission signals in which the code or logic is encoded may further comprise a wireless signal satellite transmission radio waves infrared signals Bluetooth etc. The transmission signals in which the code or logic is encoded is capable of being transmitted by a transmitting station and received by a receiving station where the code or logic encoded in the transmission signal may be decoded and stored in hardware or a computer readable medium at the receiving and transmitting stations or devices.

A computer program product may comprise computer useable or computer readable media hardware logic and or transmission signals in which code may be implemented. Of course those skilled in the art will recognize that many modifications may be made to this configuration without departing from the scope of the embodiments and that the computer program product may comprise any suitable information bearing medium known in the art.

The term logic may include by way of example software hardware firmware and or combinations of software and hardware.

Certain embodiments may be directed to a method for deploying computing infrastructure by a person or automated processing integrating computer readable code into a computing system wherein the code in combination with the computing system is enabled to perform the operations of the described embodiments.

The logic of and describes specific operations occurring in a particular order. In alternative embodiments certain of the logic operations may be performed in a different order modified or removed. Moreover operations may be added to the above described logic and still conform to the described embodiments. Further operations described herein may occur sequentially or certain operations may be processed in parallel or operations described as performed by a single process may be performed by distributed processes.

The illustrated logic of and may be implemented in software hardware programmable and non programmable gate array logic or in some combination of hardware software or gate array logic.

Input Output I O devices including but not limited to keyboards displays pointing devices etc. may be coupled to the system either directly or through intervening I O controllers .

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters .

The system architecture may be coupled to storage e.g. a non volatile storage area such as magnetic disk drives optical disk drives a tape drive etc. . The storage may comprise an internal storage device or an attached or network accessible storage. Computer programs in storage may be loaded into the memory elements and executed by a processor in a manner known in the art.

The system architecture may include fewer components than illustrated additional components not illustrated herein or some combination of the components illustrated and additional components. The system architecture may comprise any computing device known in the art such as a mainframe server personal computer workstation laptop handheld computer telephony device network appliance virtualization device storage controller etc.

The foregoing description of embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the embodiments to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the embodiments be limited not by this detailed description but rather by the claims appended hereto. The above specification examples and data provide a complete description of the manufacture and use of the composition of the embodiments. Since many embodiments may be made without departing from the spirit and scope of the embodiments the embodiments reside in the claims hereinafter appended or any subsequently filed claims and their equivalents.

