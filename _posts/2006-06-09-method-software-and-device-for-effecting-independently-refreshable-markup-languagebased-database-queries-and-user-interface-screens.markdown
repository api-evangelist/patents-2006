---

title: Method, software and device for effecting independently refreshable, markup language-based database queries and user interface screens
abstract: To effect database queries and user interface screens that are independently refreshable and markup language-based, a machine-readable medium contains object-oriented code for defining a database query, including instructions for storing the result of the database query, based on a markup language element representation of the query, and object-oriented code for displaying a user interface screen based on a markup language element representations of the screen which has a display element that is based at least in part upon the result of the database query. The machine-readable medium also contains object-oriented code for refreshing the database query and object-oriented code for refreshing the screen that are capable of mutually exclusive instantiation based upon a user specification of one of a markup language element representing a refreshing of the database query and a markup language element representing a screen refresh. The markup language may be Extensible Markup Language (XML).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07779029&OS=07779029&RS=07779029
owner: Research In Motion Limited
number: 07779029
owner_city: Waterloo, Ontario
owner_country: CA
publication_date: 20060609
---
The present disclosure relates to software and a device for effecting database queries and user interface screens that are independently refreshable and are markup language based.

A software application may use a database for the purpose of storing or accessing application data. Executable code within the application may compose and submit queries to a database management system which retrieves application data matching specified search parameters from the database as required by the application. The purpose of a database query may be to obtain application data for populating the textual fields or other display elements of a graphical user interface GUI screen. In this case the executable code that composes and submits a database query may be automatically executed every time the GUI screen is presented by the application to ensure the currency of the application data to be displayed on the screen. If a user navigates to the same GUI screen more than once the database query may be re executed refreshed each time the screen is redisplayed. This approach may be inefficient in some situations however such as when the database is not updated frequently.

When a software application that performs database queries and displays user interface screens is to be executed by a wireless communication device the application may initially be downloaded to the device via a wireless network. Because the cost of data transmission over a wireless network may be based upon the amount of data transmitted it may be desirable to download the application with a minimal amount of data transmission.

The present description generally pertains to an approach for effecting a refreshable database query based on a markup language representation thereof. Some embodiments such as the one described hereinafter may be implemented in the context of a system for presenting data from a server based application at a wireless communication device as described in U.S. patent Publication No. 2003 0060896 for example which is incorporated by reference hereinto.

In one aspect of the below described embodiment there is provided a machine readable medium comprising object oriented code for defining a database query based on at least one markup language element representing the database query the object oriented code including instructions for causing the database query to be performed and instructions for storing a result of the database query object oriented code for displaying a user interface screen having a display element that is based at least in part upon the result of the database query the user interface screen being based on at least one markup language element representing the user interface screen object oriented code for refreshing the user interface screen based on a markup language element representing the refreshing of the user interface screen and object oriented code for refreshing the database query based on a markup language element representing the refreshing of the database query wherein the object oriented code for refreshing the user interface screen and the object oriented code for refreshing the database query are capable of mutually exclusive instantiation based upon a user specification of one of the markup language element representing the refreshing of the user interface screen and the markup language element representing the refreshing of the database query.

In another aspect of the below described embodiment there is provided a wireless communication device comprising a processor and a memory coupled to the at least one processor storing object oriented code for defining a database query based on at least one markup language element representing the database query the object oriented code including instructions for causing the database query to be performed and instructions for storing a result of the database query object oriented code for displaying a user interface screen having a display element that is based at least in part upon the result of the database query the user interface screen being based on at least one markup language element representing the user interface screen object oriented code for refreshing the user interface screen based on a markup language element representing the refreshing of the user interface screen and object oriented code for refreshing the database query based on a markup language element representing the refreshing of the database query wherein the object oriented code for refreshing the user interface screen and the object oriented code for refreshing the database query are capable of mutually exclusive instantiation based upon a user specification of one of the markup language element representing the refreshing of the user interface screen and the markup language element representing the refreshing of the database query.

The system of includes an application server a transaction server a network gateway a pair of exemplary wireless communication devices also referred to as mobile devices herein and in U.S. patent Publication No. 2003 0060896 and and a Rapid Application Development RAD tool . The application server transaction server network gateway and wireless communication devices and are analogous to the application server 70 middleware server 44 network gateway 40 and mobile devices 10 and 30 respectively of U.S. patent Publication No. 2003 0060896 and will thus not be described in great detail except to the degree that these components are modified from their implementation as described in the above noted publication.

Application server is a server which hosts at least one conventional software application to which wireless communication device access is desired. The application receives and generates data. The role of system is to present data generated by the application at wireless communication devices and or and to send data generated at wireless communication devices and or e.g. responsive to user interaction with the devices back to the application . The application server sends and receives this data to and from transaction server over a data network which may be the Internet or a private data network for example e.g. using HTTP running on top of a standard TCP IP stack. In the present embodiment the application is an electronic mail email application however in alternative embodiments application could be another type of application.

Transaction server corresponds to middleware server 44 of U.S. patent Publication No. 2003 0060896. As described in that publication the role of transaction server is essentially twofold. First the term serve stores application specific markup language documents referred to as application definition files in the above noted U.S. patent publication and hereinafter for downloading by wireless communication devices desirous of presenting data from an application executing at application server . The application definition files dictate the behavior and user interface GUI of the wireless communication devices. Second once presentation of data from application at a wireless communication device or has begun the transaction server acts as an intermediary for communications between the application server and the wireless communication device or .

Network gateway is a gateway between data network which may be the Internet or a private data network for example and a wireless network . In combination data network network gateway and wireless network facilitate communication of application data between the transaction server and wireless communication devices and .

Wireless communication devices and may for example be two way paging devices WinCE based devices e.g. Pocket PC devices PalmOS devices WAP enabled mobile telephones or the like which are capable of presenting data from remote applications as described in detail in the above referenced U.S. Patent Publication. Specifically memory at devices and stores virtual machine software which interprets a textual application definition file downloaded from transaction server describing a GUI format for an application including control flow between GUI screens the format of data to be exchanged over the wireless network for the application and the format of data to be stored in a database at the wireless communication devices and . These aspects are described by markup language elements within the application definition file. The GUI screens and screen components presented at the wireless communication device or may emulate the GUI screens and components that a user would see when executing the full application at a desktop computer or workstation. In the illustrated embodiment wireless communication device is of a different type than device i.e. it executes a different operating system and may have different physical characteristics such as differently sized display screen or different processor.

RAD tool is a computing device such as an Intel Processor based personal computer PC for example executing software that allows a developer to create master definition files for uploading to transaction server . A master definition file is a markup language document similar to an application definition file except that its contents may dictate user interface appearance and control flow for more than one type of wireless communication device. Application definition files are created from master definition files at transaction server as described in the above referenced U.S. patent Publication No. 2003 0060896. Application definition files are downloaded to wireless communication devices and where they are interpreted by virtual machine software. Uploading of the master definition file to from the RAD tool to the application server may be performed over a data network which may be the Internet or a private data network for example.

Memory is volatile memory such as static random access memory SRAM . At run time memory stores an operating system virtual machine software and a database management system .

Operating system is software representing a mobile operating system such as the Palm OS or WinCE operating system. Operating system typically includes graphical user interface and network interface software having suitable application programmer interfaces APIs for use by applications executing at device .

Virtual machine software is software that enables wireless communication device to present a user interface for server side applications such as application . The virtual machine software may be downloaded over wireless network to the device from transaction server where it may be stored as machine executable code on a machine readable medium such as a hard disk drive or a removable optical disk for example. The operation of virtual machine software is governed by the application definition file . The software is described below in greater detail.

Database management system DBMS is a conventional DBMS which facilitates storage of data to and manipulation of data from database which is resident in secondary storage of device . DBMS may be a commercially available database management system such as Sybase Microsoft Pocket Access Microsoft SQLCE Oracle or J2ME MIDP storage for example capable of execution at a wireless communication device. DBMS is capable of executing queries such as structured query language SQL type queries for extracting desired data from the database . DBMS provides an Application Programming Interface API for query execution.

User interface provides a mechanism for entering data at wireless communication device and for viewing a displayed graphical user interface. The interface typically includes a keypad and a display such as a touch screen.

Secondary storage is non volatile memory such as flash memory for example which stores an application definition file and a database described below.

Application definition file is an application specific markup language document which governs the operation of the wireless communication device . In the present embodiment the application definition file is an Extensible Markup Language XML document. The XML may for example be formed in accordance with the Extensible Markup Language XML 1.0 Third Edition W3C Recommendation dated 4 Feb. 2004 which is provided at www.w3.org TR 2004 REC xml 20040204 and is hereby incorporated by reference hereinto. The XML document contains markup language elements i.e. XML elements including at least one XML element describing a refreshable database query. Based on the XML elements including any attributes thereof contained in the application definition file the virtual machine software instantiates corresponding objects at run time to present data from the server side application and to accept user input for transmission back to the application at application server as will be described.

Database comprises one or more electronic files storing data related to application for access by the virtual machine software via DBMS . In the present embodiment the data is stored in at least one table within the database containing records rows with user defined fields columns . The database may for example be a relational database but this is not required.

The structure of wireless communication device is similar to that of wireless communication device with the exception of its operating system and certain physical characteristics.

Object classes are precompiled classes object code authored in an object oriented language such as Java or C . Each class corresponds to an XML element that may be defined within the application definition file . A description of some of the XML elements which may appear within the file is provided in the AIRIX markup language ARML specification of Appendix A attached hereto other XML elements are described namely new refreshable database query elements which may be defined at a global mobile application level as well as a new type for the ACTION element which permits global queries to be refreshed and are described in the remainder of the description. A person of ordinary skill will readily appreciate that these cumulative XML entities are exemplary only and may be extended or shortened as desired. At run time the virtual machine software instantiates one or more instances of at least some of object classes in memory of wireless communication device based on XML elements appearing within application definition file and their attributes the objects of are examples of such instances . Each object class defines methods which capture certain behaviours that are performed by all instances of the class e.g. a button class may include a highlights method which if invoked for any instance of the button class executes the same code to cause the relevant button to become highlighted as well as data members which are set upon instantiation of a class instance in order to customize the characteristics or behavior of the instance e.g. the button class may also include X and Y coordinate data members which are set to unique values for each button class instance to define a unique location for the represented button on an encompassing GUI screen . In object classes include a database query class a screen class an edit box class a button class an event class and an action class . These classes are described below in the context of operation of system of . Other classes not illustrated may be included within classes . The classes may be loaded from machine readable medium along with the rest of the virtual machine software .

Objects are instances of object classes that are created dynamically when the virtual machine software is executed. The instantiation of objects from classes is indicated by dashed lines in . Each of objects corresponds to an XML element defined within the application definition file . A more detailed description of the exemplary set of objects of is provided below in conjunction with the description of operation of the present embodiment.

General purpose routines constitute a managing environment for the objects . The routines encompass functionality which is useful for presenting a mobile application at the wireless communication device but does not logically form part of a particular type of object . The routines effectively consolidate certain functionality for convenient invocation from any of objects as required. As shown in the routines include an XML parser routine a RefreshScreen routine an ExecuteQuery routine a RefreshQuery routine and a GetQueryField routine . These routines are described below in conjunction with the description of operation of the present embodiment.

The application development software provides a graphical user interface which facilitates drag and drop development of mobile applications. As a user develops a mobile application using UIM the RAD tool automatically generates a dynamically accessible representation of the corresponding hierarchy of XML elements e.g. in accordance with Appendix A within memory and the below description in the form of a master definition DOM tree data structure. A DOM tree is essentially a dynamically accessible representation of an XML document that is well understood in the art DOM trees are described at www.w3.org DOM . The RAD software may be implemented as a set of plug ins to a generic integrated design environment IDE framework such as the Eclipse framework. As is known in the art the Eclipse platform is designed for building integrated development environments that can be used to create various applications such as web sites embedded Java programs C programs and Enterprise JavaBeans for example. The platform exposes mechanisms to use and rules to follow to tool providers via well defined APIs classes and methods. Application development software may be written in Delphi using an SQL Server database for example and may be loaded into PC from a machine readable medium such as an optical disk .

The master definition file in secondary storage is a serialized representation of the master definition DOM tree . The master definition file is created by the application development software when the user indicates that development of the mobile application is complete. The file is stored in secondary storage pending its transmission to the transaction server where it is used to create an application definition file that is downloaded to the wireless communication device .

In operation a developer uses the RAD tool to develop a mobile application for the wireless communication device . To develop a mobile application the developer designs one or more graphical user interface screens along with the screen to screen control flow for the mobile application specifies a format of data e.g. XML packages to be exchanged with the server side application via wireless network and specifies a format of data e.g. a database table for storing application data in database .

The procedure for developing a mobile application consists of creating a visual hierarchy or tree of icons which correlates to a logical hierarchy of XML elements e.g. as defined in Appendix A and as further defined below using application development software . Each icon represents a building block of the application e.g. a GUI screen a database table a database query etc. and corresponds to a defined XML element having in most cases associated attributes. As a user creates icons and assigns properties to them the RAD tool automatically generates a dynamically accessible representation of the corresponding hierarchy of XML elements and attributes within memory within the master definition DOM tree data structure. When the user of tool has completed development of the mobile application the application is published i.e. the master definition DOM tree is serialized to form a master definition file .

The RAD software presents a GUI as shown in to facilitate mobile application development. The GUI includes various components such as a toolbar a project explorer and a main design area .

The toolbar provides a menu list and icons for performing various development activities during mobile application development such as creating or opening a project which corresponds to a mobile application or serializing a master definition file DOM tree to create a master definition file .

The project explorer contains a visual hierarchy of icons that is created by the developer to represent the mobile application. A detailed view of an exemplary project explorer is provided in .

The main design area is for displaying an application component such as a GUI screen or GUI screen component whose icon is currently selected in the project explorer . This area may include a screen designer window and a properties window . When an icon is selected in the visual hierarchy a graphical representation of the relevant component a GUI screen in the case of icon is displayed in the screen designer window and its properties are displayed in the properties window . The screen designer is a screen painter which displays a graphical representation of the relevant wireless communication device type a virtual device for which GUI screens are being created. In a virtual Pocket PC device is show in the screen designer . The screen designer permits a developer to design a GUI screen by dragging and dropping display elements such as textual components buttons edit boxes or other widgets to the virtual device screen in the window offering a what you see is what you get WYSIWYG view of the GUI screen under development. The properties window displays the properties of a currently selected GUI component and allows them to be modified. The properties of a selected component generally correspond to attributes of an XML element within the master definition file DOM tree corresponding to the selected component.

Platform independent components are application building blocks which are present in each platform s version of the mobile application. Put another way all application definition files which will ultimately represent the mobile application at a wireless computing device will contain components regardless of the platform of the device. Platform specific components on the other hand may differ between wireless communication devices of different types such as devices and . Typically it is the GUI screens of a wireless communication device application which will differ in some measure between wireless communication device types due to differences in the capabilities of the devices e.g. screen size and supported display elements .

As shown in the platform independent components which comprises the Device Independent branch of the visual hierarchy include application events data rules database tables and database queries .

Application events are definitions of occurrences which trigger processing within the mobile application regardless of the application s status e.g. regardless of which GUI screen is presently displayed . For example the receipt of an XML package message at the wireless communication device or can be defined as an application level event. Beyond application level events a developer may also define screen level events arrival of an XML package when a specific GUI screen is displayed and control level events user manipulation of a GUI control such as a button press however these are defined in the platform specific constructs branch . It is noted that at least one action is normally defined in conjunction with each event to define the processing that will occur upon the occurrence of the event.

Data rules dictate how XML packages received from enterprise applications such as application affect data stored in database tables associated with an application. A rule typically defines which field s of a table will be impacted by incoming data and the nature of the impact. Because rules make reference to database tables logically they are defined after the tables described below have been defined. Like application level events data rules are wireless computing device type independent. Rules also dictate how to apply changes to database tables from XML created in an outgoing XML transaction in the context of an ARML action.

Database tables are defined for the purpose of storing application related data at run time for use by the mobile application executing at the wireless communication device or . The definition of database tables in this section results in the run time creation of comparable database tables in the database of wireless communication device .

Database queries section contains definitions of refreshable database queries which are a focus of the present description. A refreshable database query or simply database query is defined for the purpose of retrieving application data from the database at run time. The retrieved data is stored by the query and may be accessed by other application components such as user interface components e.g. in order to populate a GUI screen or actions which cause XML packages to be constructed e.g. in order to populate fields within the XML packages . The query is a snapshot of data from the database . A query defined in section is considered to be global in the sense that any application component whether defined in the platform independent branch of the visual hierarchy or defined in the context of a particular platform within the platform specific constructs branch may access its stored results. This may relieve a developer using RAD tool from the burden of implementing the same database query for each platform represented in each platform specific constructs branch as may be required if database queries were not global. Database queries defined in section are not automatically refreshed e.g. when a screen referencing the query is redisplayed but rather are capable of being instructed to refresh themselves by other application components including application components within either of platform independent components branch the platform specific components branch in response to application level a screen level or control level events. This control over the frequency and circumstances of database query refreshing gives the developer the power to refresh queries only when necessary which may avoid unnecessary refreshing. Generally the use of database queries facilitates development of complex mobile applications because queries permit application data to be accessed and possibly combined with other extracted data in numerous ways.

The procedure for defining a database query in the database queries branch may be as follows. The icon corresponding to the database queries section may initially be selected with a mouse or similar user input mechanism of the RAD tool . A right click or similar user action may cause a pop up menu to be displayed. The pop up menu may present a list of options in the context of the selected database queries section . An Add Query option may permit the user to define a new database query. Selection of that menu options may cause a new database query icon to be created below icon as shown in and a Query Properties window as shown in to be displayed in the main design area .

Referring to the Query Properties window permits the user to enter properties of the newly defined database query. The Query Properties window includes a Query Name field for entering a unique query name that is not already in use by any other query. The name uniqueness constraint ensures that each database query may be uniquely referenced from other areas of the visual hierarchy . In the present example it is assumed that the name Query1 has been entered. That name is displayed as part of the icon at . A Table Name field allows the developer to select the name of the database table against which the query is to be performed. The field is a drop down list enumerating the database tables defined under the database tables section of . In the example a table SENTITEMS has been selected from that list. The Order By field specifies that the query results i.e. the records from table SENTITEMS which match the query s search criteria should be automatically sorted by a field in the SENTITEMS table named VARTO . The drop down list is automatically populated with the fields defined in the table selected in field i.e. the SENTITEMS table. Field can be left blank if the query is designed to return a single record or if the results do not require sorting. When the Order By field has been specified the Sort Order field can be set to either ASC ascending or DESC descending to control the ordering of query results.

Selection of the Add button of permits a where clause to be defined. As is known in the art a where clause specifies the search parameters for a database query. An exemplary where clause is illustrated in . The where clause specifies a Field Name an Operator and a Value. The Field Name indicates which field of the table specified in field is to be examined. The Operator indicates the nature of the operation to be performed Equals Not Equal To Less Than Greater Than or in the case of string fields Begins With in respect of that field which is generally a comparison of the field value against another value. The Value is the value against which the named field is to be compared. Thus the where clause of causes records to be returned in which the VARTO field begins with the letter J . To define additional where clauses the Add button may be selected again. A new query which would appear as another entry row below clause in the Where Clauses field may be similarly defined. For each where clause defined in addition to the first the AND OR field is also specified to indicate whether the overall set of where clauses is conjunctive or disjunctive. A where clause may be removed using the Remove button . The user can also specify a temporary named scratchpad value stored at the device to effect a dynamic comparison.

Referring back to the Operating Systems branch comprises the platform specific components section of visual hierarchy . This branch permits the definition of platform specific aspects of a mobile application which primarily comprise the displayable GUI screens and control flow of a mobile application. In only one exemplary GUI screen definition is illustrated. This screen appears within the Pocket PC branch indicating the screen is a Pocket PC screen. Other GUI screen definitions are omitted for brevity.

Screen definition defines the GUI screen of . Referring to it can be seen that GUI screen has an edit box and a REFRESH button . In the present embodiment it is desired that the edit box a form of display element be populated with the value of a field entitled VARTO of the database table SENTITEMS also shown in when the screen is displayed. More specifically the value should be taken from the first row of table which represents a single email message from the SENTITEMS table in which the value of the VARTO field which represents a destination email address value begins with the letter J . Moreover upon user selection of the REFRESH button it is desired for the screen to be redrawn with the email address in edit box being refreshed. If the value of the VARTO field in the first row of the SENTITEMS table in which the VARTO field value begins with the letter J has changed since the last time the query was executed the changed value should be reflected within edit box as shown in in which the screen has been redrawn.

Referring back to below screen definition within the hierarchy two icons and are created. The first icon represents the edit box of . The second icon represents the REFRESH button of . Each of these application components may be created by right clicking the icon choosing the appropriate new display element from a pop up menu or a toolbar for example and defining the new element s properties in properties window .

A ButtonClick event is defined below the button icon . This event represents the selection of the REFRESH button of by a user of wireless communication device . Right clicking of the event icon in project explorer causes another pop up menu to be displayed. The options that are presented on the displayed pop up menu include an Add Action option. This option is used to add two actions icons and .

The first icon Action 1 represents a refresh query action which causes a specified database query namely database query Query 1 to be to be refreshed at run time. The definition of properties for this action in the properties window is illustrated in inset of . A name field allows the developer to enter a name Action 1 that will be displayed in the project explorer as part of the icon . A Type field provides a drop down list which lists each type of action that may be performed by a Pocket PC wireless communication device. In the list is illustrated in a dropped down state with one entry namely REFRESHQUERY being selected as indicated by reverse video to indicate that the action is a refresh query action. Selection of the REFRESHQUERY action type results in the further display of a Query field in properties window . The Query field also provides a drop down list in this case listing by unique name each global database query which has been defined under the Queries branch of . The drop down list of is illustrated in a dropped down state with only one entry namely Query1 corresponding to the sole query defined present embodiment being selected.

The second action icon Action2 represents a REFRESH action that causes the GUI screen of to be refreshed at run time. The REFRESH action is described in Appendix A section 6.3.10 .

When development of the mobile application using RAD tool is complete the developer may select a Save button or similar GUI construct of the application development software . When this is done the application definition DOM tree of is serialized to form a textual XML markup language document i.e. master definition file as shown in . This document is stored in the secondary storage of RAD tool .

The master definition file of contains XML elements representing all of the application constructs defined within the project explorer of . Some XML elements are omitted from for brevity as indicated by colons . Most of the defined XML entities are detailed in Appendix A attached hereto. The defined XML entities are interpreted by the virtual machine software and serve as building blocks for software which presents server side applications at mobile device .

It will be appreciated that lines with the prefix such as lines and of are comments that are intended to facilitate comprehension of . They are not valid markup language elements and are not actually present in the generated document .

Lines of contain a TDEF markup language element and subordinate FIELDS and FLD elements which cumulatively define the SENTITEMS database table of . The FLD elements at lines cumulatively specify that a single row in the table which represents a single sent email message has four fields namely an integer field LGMESSAGEID for storing an email message ID a string field VARTO for storing a destination email address a string field VARSUBJECT for storing an email subject line and a memo field MEMBODY for storing an email message body . The XML element and attribute names at lines are as described in the table definitions section 3.2 of Appendix A .

Lines of contain a QUERY element and subordinate W element which correspond to query of . The values of the NAME TABLE ORDERBY and ORDERDIR attributes at line are taken from the Query Name field Table Name field Order By field and Sort Order field of respectively as set by the developer. The W element at line represents where clause of .

Lines of contain a SCREEN element and various subordinate XML elements which cumulatively define the screen of or . Notably the EB element at lines of includes a DATASRC attribute which specifies that the edit box is to be populated with the value of the VARTO field of the query QUERY1 declared at lines when the edit box is initially displayed. If the query returns multiple records the value of the VARTO field of the first record is used other display elements such as list boxes or grids may be capable of displaying the value of the VARTO field for each returned record . Also the ACTION element at line represents a refreshing of the database query defined at lines of and corresponds to the REFRESHQUERY action defined in .

The master definition file of is uploaded to transaction server via network using conventional mechanisms and stored in secondary storage of transaction server until it is needed by a wireless communication device . At that stage an application definition file is created for the requesting device as described in U.S. patent Publication No. 2003 0060896 and the file is transmitted to the device . Advantageously the application definition file is relatively small in size compared to a typical software application. This may limit the amount of data transmission necessary between the transaction server and device .

Upon receipt of the application definition file the XML parser at wireless communication device parses the XML text of application definition file . XML Parser converts the XML document into a DOM tree representation. The DOM tree is used to facilitate the instantiation of objects from classes and the population of their data members with element and attribute values from the document as described below . For each XML element that is encountered during the traversal a corresponding object may be instantiated from one of object classes . Instantiation of each object may be facilitated by a fromXML constructor method within the corresponding class which populates the object s data members based on XML element attribute values. For example the constructor method may receive the XML fragment which defines the XML element in the application definition file and based on element and attribute values within the fragment automatically populate the newly instantiated object s data members with like values. It is noted that the constructor method may or may not meet the strict definition the term constructor as it is understood in the context of certain object oriented programming languages e.g. the method may not have the same name as the class . Once the objects have been instantiated and so populated the DOM tree may be deallocated.

With reference to parsing of the QUERY element at lines accordingly results in the instantiation of the query object from Query class which is illustrated in pseudocode form in and in the invocation of its fromXML method shown at lines . In text following a delimiter denotes a comment this is also true in and A B . The fromXML method causes local data members name and table lines of to be set to the attribute values of the same name from the QUERY element XML that is passed as an input parameter. The whereparams data member line is populated by parsing the subordinate W element s and populating a WhereParam object for each W element. The WhereParams class is illustrates in . Thereafter the runQuery method lines of is invoked to cause the query to be executed. The query is executed at this stage so that a snapshot of desired table data will be available during instantiation of GUI screen objects whose textual aspects may be initialized based on the retrieved table data. The runQuery method in turn invokes the general purpose routine executeQuery . Matching records are returned in the records parameter.

The executeQuery method is illustrated at lines of which illustrates various general purpose routines . The executeQuery method accepts a query object as a parameter. Instructions within the method cause the query to be performed. The supplied query string is passed to the DBMS at the mobile device . The instructions may interact with an Application Programming Interface API of DBMS e.g. may invoke API functions routines procedures or methods . The instructions may be DBMS specific and will be known to those skilled in the art. An exemplary set of instructions is described at www.w3schools.com ado ado reference connection.asp which is hereby incorporated by reference hereinto. The records array data member of the query object is populated with database records matching the search parameters. It will be appreciated that the body of method could alternatively be included within the runQuery method of the query object .

XML elements that are nested within application definition file may result in the instantiation of corresponding objects in a cascade fashion. For example parsing of the SCREEN element at lines of results in the instantiation of the screen object from Screen class illustrated in pseudocode form in and in the invocation of its fromXML method shown at lines . The fromXML method initially causes local data members name and title lines of to be set to the attribute values of the same name from the SCREEN element XML that is passed as an input parameter.

Thereafter for each EB edit box element subordinate to the SCREEN element the fromXML method 1 instantiates a new Editbox object from Editbox class and adds it to its editboxes array declared at lines of and 2 passes the XML for the EB element to the fromXML method of the newly declared Edit Box object.

In the illustrated example only one EB element is declared in the application definition file corresponding to lines of the master definition file of therefore only one editbox object is instantiated from class . The Editbox class is illustrated in pseudocode form in . The fromXML method lines of which is invoked immediately following instantiation of the editbox object causes local data members in this case name text index caption and datasource see lines of to be set to the attribute values of the same names from the XML that is passed as an input parameter. When the datasource attribute is specified to a non null value as it is in the exemplary application definition see line of the value of the text element which is the text that the wireless communication device user sees within the edit box upon initial display of the screen is overwritten with the value of the specified field of the specified query. A general purpose routine getQueryField is invoked see lines of to obtain the desired text. The queryname and fieldname parameters are obtained by parsing them from the datasource data member.

The getQueryField routine which is illustrated in pseudocode form at lines of searches for a global query object within objects whose name matches the specified queryname input parameter and then invokes the getField method of that object. The latter method which is illustrated at lines of returns the value of field fieldname of the query s currently indexed record. The index current line is initialized to index the first returned record when query results are returned. In this example the value of the VARTO field of the QUERY1 query is returned which based on the QUERY XML element at lines of will be a string beginning with J .

When the instantiation of the edit box object is complete a similar approach is taken to instantiate other display elements comprising the GUI screen . Referring back to the fromXML method at lines for each additional subordinate display element of the encompassing GUI screen 1 the relevant subordinate object is instantiated from the appropriate one of object classes and added to an appropriate array within the data members of the screen object line and 2 the XML for the subordinate element is passed to the fromXML method of the newly declared subordinate object so that the object may populate its data members and instantiate any further subordinate objects appropriately.

As GUI screen is relatively simple the only other display element for which the above steps are taken is the button . Button object is instantiated from Button class which is illustrated in pseudocode form in and its fromXML method lines of is invoked. This method causes local data members in this case name index and caption to be set to the attribute values of the same names from the XML that is passed as an input parameter i.e. lines of .

Pseudocode at lines of causes the subordinate event object which is declared at lines of details omitted for brevity and is representative of a run time selection of the button of to be instantiated. In turn the event object instantiates two subordinate action objects and from Action class which is illustrated in pseudocode form in based on the ACTION elements at lines and of and invokes the fromXML method of each object. The latter method simply sets the type data member to the value of the type attribute. In the case of object the type is set to REFRESHQUERY and the queryname data member is set to QUERY1 . In the case of object the type is set to REFRESH i.e. screen refresh and the name data member is set to SCREEN1 indicating screen .

Once the above described cascade of invocations of fromXML methods through the various instances of object classes has successfully completed the result is a hierarchical set of objects and as shown in . For certainty illustration of an object within the border of another object in connotes the latter object s containment of the former. Assuming that the first record in the SENTITEMS table in which the VARTO field begins with J contains the value Jeff XYZ.com the appearance of the screen when it is first displayed will be as shown in .

Subsequent to the initial display of the screen at wireless communication device operation of system causes the SENTITEMS table to be updated in memory at the device such that the first record in the SENTITEMS table in which the VARTO field begins with J now contains the value Jan XYZ.com as shown in even while screen continues to display Jeff XYZ.com . To refresh the screen the REFRESH button may be selected by the wireless communication device user. Selection of the button triggers by way of operating system callback the invocation of a method which may be named onEvent for example not expressly illustrated of the button object . The role of the onEvent method is to execute a method which may be named doAction for example for each of its subordinate action objects in sequence to effect the actions associated with the event.

In the present example the doAction method of the first subordinate action object is invoked first. This method is illustrated in pseudocode form at lines of . The purpose of the method is to perform the action represented by the action object. The body of the method contains a large switch statement which causes different instructions to be executed based on the action type data member declared at line . In the case of object the type is REFRESHQUERY thus the doAction method invokes the RefreshQuery queryname general purpose routine line .

The RefreshQuery queryname general purpose routine is illustrated in pseudocode form at lines . This routine searches within objects for a Query object whose name matches the value of the queryname parameter then invokes the runQuery method of that object to cause the query to be re executed. In the present embodiment it is assumed that execution of the runQuery method of the matching query object retrieves one or more records from the SENTITEMS table with the VARTO field value of the first record now being Jan XYZ.com . Notably the developer may elect to refresh the query via a REFRESHQUERY action without redisplaying the screen via a REFRESH action e.g. to ensure the currency of data for use in composing an XML package by only specifying a REFRESHQUERY action. In other words depending upon the XML elements specified by the developer the runQuery method may instantiated and executed mutually exclusively to any instantiation and execution of code which causes the user interface screen to be refreshed.

In the present embodiment the doAction method of the second subordinate action object is subsequently executed however as refreshing of the user interface screen is in fact desired. This invocation in turn causes the RefreshScreen name general purpose routine screen as shown in pseudocode at lines to be invoked see invocation at line . This routine searches within objects for a screen object whose name matches the value of the screenname parameter then invokes refreshScreen method of that object to cause the screen to be refreshed see lines . In the result the screen will appear as shown in .

If in another part of the mobile application it were desired to display in a user interface screen the results obtained upon the initial performance of the database query without first causing the query to be refreshed e.g. in order to conserve processing resources in the case where the database is known not to have changed then this could be done by simply referencing the query QUERY1 without executing a REFRESHQUERY action first. In other words depending upon the XML elements specified by the developer the refreshScreen method may instantiated and executed mutually exclusively to any instantiation and execution of code which causes the database query to be refreshed.

In another example if an application had drop down lists of static data populated from a database then these lists would not have to be refreshed each time when the user refreshes the screen. On a wireless communication device accessing persistent data can be time consuming. By populating static drop down lists from an application level query the screens need not refresh the contents of these dropdown lists upon screen display. As can be seen from the RefreshScreen method of only screen queries need be refreshed on a refreshscreen call. Global queries need not be refreshed. As well if the data source of a GUI control is a global query and it is determined that the query has not been refreshed since the last time the control was populated logic may be executed that refrains from any re population of the control due to the absence of any recent query refreshes. This can result in a significant processing savings when displaying screens.

As will be appreciated by those skilled in the art modifications to the above described embodiment can be made without departing from the essence of the invention. For example markup language documents need not be written using XML. Alternative markup languages e.g. Standard Generalized Markup Language of which XML is a subset could be employed. Moreover the choice of markup language element and attribute names may differ from those described above.

In the above described embodiment the exemplary query is a platform independent query which is referenced from a platform specific display element namely an edit box within a Pocket PC GUI screen which uses the referenced query s results for the purpose of setting its initial textual content. Although not expressly disclosed above an edit box may be defined using the RAD tool in an analogous GUI screen for another type of wireless communication device e.g. a RIM wireless communication device . Such an edit box may similarly reference the platform independent query so that the query results may similarly be used to set the initial textual content of the edit box for that platform. Thus references to a single platform independent query may exist in a number of different platform specific display elements. This may conveniently relieve a user of RAD tool from having to define the query once for each platform. When a platform specific application definition file is generated from the master definition file at transaction server however only the GUI screen definitions for the platform of interest are included in the file . Accordingly any analogous display elements for other platforms referencing the same global query will not appear within the application definition file that is downloaded to the wireless communication device. As a result the number of instantiated objects referencing a common global query object may typically not exceed one at any given device in the context of the above described embodiment.

Nevertheless it will be appreciated that a query may be referenced by more than one display element or other construct of a mobile application in alternative embodiments. For example it is possible that two or more GUI screens in a mobile application for a given platform may have an edit box that references the same query. In this case the referencing of a commonly defined query object may result in improved efficiency in comparison with an alternative approach in which queries must be defined on a per screen basis and in which multiple similar or identical query objects are therefore instantiated at run time.

Some embodiments may only support singular versus compound where clauses. In such embodiments QUERY markup language elements may not have subordinate W where clause elements. Rather where clause attributes may be incorporated directly into the QUERY markup language element.

In alternative embodiments the DBMS may not support structured query language. Another form of query language may be supported instead.

Other modifications will be apparent to those skilled in the art and therefore the invention is defined in the claims.

