---

title: Shortcut IP communications between software entities in a single operating system
abstract: A method, computer program product, and data processing system for performing efficient communication between software entities residing in the same operating system using conventional network communications APIs are disclosed. According to a preferred embodiment, when a software entity (e.g., a process) attempts to communicate through a networking API, the operating system determines whether the other end of the communication refers to the same hardware node. If so, the operating system replaces the network protocol connection (socket connection) with a direct interprocess communication construct. The operating system provides additional code to simulate the appearance of an actual network (socket) connection at the API level while performing all actual I/O using the interprocess communication construct.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08056089&OS=08056089&RS=08056089
owner: International Business Machines Corporation
number: 08056089
owner_city: Armonk
owner_country: US
publication_date: 20061107
---
The present invention relates generally to networked computer programming and specifically to the improvement of execution performance of network applications communicating with each other in a single operating system.

Modern telecommunications depends on networks. A network is a set of interconnected machines network elements that allow data to be relayed across the set of machines from a source to a destination. Networks may be classified according to the geographic area they occupy. A local area network LAN is usually defined as a network that is physically limited to a relatively small area such as a building or group of buildings. A wide area network WAN is a general term for a network of larger size.

Networking protocols which define the rules for communication between network elements are typically designed to work in layers where each layer performs a slightly different role in data transmission. TCP IP Transmission Control Protocol Internet Protocol is a collection of protocols called a protocol suite that forms the basis for the Internet and many other networks. TCP IP is generally considered to follow a four layer protocol model.

An application programmer needing to write networking enabled software typically uses an application programming interface API that allows the programmer to program network communications in an abstract way without explicitly addressing the specifics of each protocol layer. Perhaps the most widely utilized of such APIs is the sockets API commonly provided in UNIX POSIX based operating systems similar sockets and sockets like APIs are provided in other operating systems and programming environments such as the JAVA programming environment for example. The sockets approach to network communication is to model a connection between two network entities as a stream or abstract file which is called a socket . In the usual POSIX sockets library for use in programming in the C programming language opening a socket generates a socket descriptor number which is analogous to a file descriptor. Subsequent input output I O from to the socket is performed by passing the socket descriptor to I O routines just as in the case of a file descriptor.

Although it is arguable that the ultimate aim of network programming is to allow various computers in a network to communicate with one another it often occurs that two communicating network applications will actually reside on the same computer and same operating system instance. For example an application server process may communicate with a database server process on the same operating system instance. In such cases a modern operating system will generally avoid using the computer s networking hardware to enable the communication but will still process the communication through the usual protocol layers e.g. the layers of the TCP IP protocol suite . The usefulness of the processing performed by these layers however is of less value for communication between software entities on the same system. For instance encryption of data being transmitted between two processes on the same system is superfluous.

In existing technology however there is no way to bypass this additional network processing without including additional non standard code in each application to enable this type of bypass when applicable. Moreover this type of bypass cannot be used in a partitioned system i.e. a system that is divided into two or more software partitions. Software partitions are virtual operating system instances residing on the same physical system and sharing the same operating system kernel code. A software partition cannot see certain aspects the global environment and other software partitions including network related information except as they would be visible from a physically separate system. Thus in the event that communicating applications resided in separate software partitions on one global system the applications would not be capable of determining that they existed on the same system and would therefore not be able to bypass the full network protocol processing using the technique described above.

What is needed therefore is a method of bypassing full protocol stack processing for communications between two processes residing on the same system even in the event that the two processes reside in different software partitions or under other circumstances that prevent the applications themselves from determining whether they reside on the same system. The present invention provides a solution to this and other problems and offers other advantages over previous solutions.

Accordingly the present invention provides a method computer program product and data processing system for performing efficient communication between software entities residing in the same operating system using conventional network communications APIs. According to a preferred embodiment when a software entity e.g. a process attempts to communicate through a networking API the operating system determines whether the other end of the communication refers to the same hardware node. If so the operating system replaces the network protocol connection socket connection with a direct interprocess communication construct. The operating system provides additional code to simulate the appearance of an actual network socket connection at the API level while performing all actual I O using the interprocess communication construct.

The foregoing is a summary and thus contains by necessity simplifications generalizations and omissions of detail consequently those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting. Other aspects inventive features and advantages of the present invention as defined solely by the claims will become apparent in the non limiting detailed description set forth below.

The following is intended to provide a detailed description of an example of the invention and should not be taken to be limiting of the invention itself. Rather any number of variations may fall within the scope of the invention which is defined in the claims following the description.

Next however a determination is made as to whether the address on the other end of the connection the destination node is actually a local address i.e. that the connection is to a software entity residing in the same operating system on the same hardware node block . This determination is made by consulting the operating system s internal routing table which indicates which network interface is used to transmit packets to the destination node. If the destination node is a local address a physical network interface is not used transmit receive packets to from the destination node rather a fictitious or virtual interface known as the loopback interface is used instead. The loopback interface is a software defined construct that simply sends packets to itself rather than through a hardware network adapter. In a typical TCP IP networking system the loopback interface is assigned the IP address 127.0.0.1 by convention.

In a preferred embodiment of the present invention the operating system kernel provides a service for determining the route taken by packets through a given network connection and returning that route to the calling routine. Thus the destination node for a given network connection is determined to be local by first querying this route lookup kernel service then determining if the returned route is a route through the loopback interface. If the route goes through the loopback interface then the destination node is a local address.

If the destination node is not local block No then the process of opening the connection simply terminates. If the destination node is local however block Yes then the operating system generates an interprocess communication IPC construct to replace the conventional network connection socket connection block .

It should be noted that in this context the terms interprocess communication and IPC are used in a broad sense to incorporate any of a number of different operating system constructs used for facilitating communication between software entities e.g. processes and threads in a multitasking operating system notwithstanding the fact that some operating systems most notably UNIX System V and related operating systems use the term IPC to refer to a specific type of interprocess communication construct. The terms interprocess communication and IPC as used here encompass other types of operating system constructs such as pipes FIFOs First In First Out and the like. Indeed these other types of constructs many of which follow a stream like model input output are actually preferred over the messaging and shared memory communications constructs provided by System V IPC .

In particular a preferred embodiment of the present invention replaces the local network connection with a stream like interprocess communication construct. A number of such constructs are widely known in the art. POSIX compliant operating systems define a bidirectional FIFO construct which provides stream based I O between processes. POSIX based operating systems also provide a feature called pipes which provide similar stream based I O. The POSIX standard defines only half duplex pipes however so it is necessary in some operating systems to utilize a pair of pipes for full duplex communications although some operating systems such as UNIX System V Release 4 support bidirectional pipes or as in the case of the open source Linux operating system paired half duplex pipes .

Another form of interprocess communication construct that may be utilized is that of operating system domain sockets or local domain sockets commonly referred to as UNIX domain sockets in the UNIX POSIX community . These are interprocess communication constructs i.e. they do not allow for communication over a network interface that utilize the same API as network sockets but that are bound to a pathname i.e. filename rather than to a network address.

Once the interprocess communication construct has been created an entry is made in a mapping table to denote a mapping from the original network connection to the new interprocess communication construct block . In a preferred embodiment implemented in a POSIX like operating system both network sockets and stream based IPC constructs are assigned to numerical descriptor values which function like file descriptors. Thus a mapping table to map network connections to associated IPC constructs may be constructed in the form of table in where numerical socket descriptors sockfd are mapped into IPC construct descriptors which in this example are bidirectional FIFOs fifofd . Once this mapping is complete all input output can be performed through the IPC construct in the manner shown in . At this point it is actually possible to close or destroy the original network connection generated at block as long as this is done in a manner that is undetectable by the applications on either end of the connection. In any case the process of responding to the connection request is complete and control may be returned to the calling application.

One skilled in the art will recognize that in an alternative embodiment of the present invention the original socket connection need not actually be established before creating the interprocess communication construct. If it can be determined initially that the destination node is local without creating a socket connection then the interprocess communication construct can be created to begin with without opening a socket connection at all.

As can be seen the processes of provide an application independent method of improving the performance of network applications in a single operating system that must communicate with one another. This method is completely transparent to the applications as it is performed by the operating system through normal network system calls.

PCI bus provides an interface for a variety of devices that are shared by host processor s and Service Processor including for example flash memory . PCI to ISA bridge provides bus control to handle transfers between PCI bus and ISA bus universal serial bus USB functionality power management functionality and can include other functional elements not shown such as a real time clock RTC DMA control interrupt support and system management bus support. Nonvolatile RAM is attached to ISA Bus . Service Processor includes JTAG and IC buses for communication with processor s during initialization steps. JTAG IC buses are also coupled to L cache Host to PCI bridge and main memory providing a communications path between the processor the Service Processor the L cache the Host to PCI bridge and the main memory. Service Processor also has access to system power resources for powering down information handling device .

Peripheral devices and input output I O devices can be attached to various interfaces e.g. parallel interface serial interface keyboard interface and mouse interface coupled to ISA bus . Alternatively many I O devices can be accommodated by a super I O controller not shown attached to ISA bus .

In order to attach computer system to another computer system to copy files over a network LAN card is coupled to PCI bus . Similarly to connect computer system to an ISP to connect to the Internet using a telephone line connection modem is connected to serial port and PCI to ISA Bridge .

While the computer system described in is capable of executing the processes described herein this computer system is simply one example of a computer system. Those skilled in the art will appreciate that many other computer system designs are capable of performing the processes described herein.

One of the preferred implementations of the invention is a client application namely a set of instructions program code or other functional descriptive material in a code module that may for example be resident in the random access memory of the computer. Until required by the computer the set of instructions may be stored in another computer memory for example in a hard disk drive or in a removable memory such as an optical disk for eventual use in a CD ROM or floppy disk for eventual use in a floppy disk drive or downloaded via the Internet or other computer network. Thus the present invention may be implemented as a computer program product for use in a computer. In addition although the various methods described are conveniently implemented in a general purpose computer selectively activated or reconfigured by software one of ordinary skill in the art would also recognize that such methods may be carried out in hardware in firmware or in more specialized apparatus constructed to perform the required method steps. Functional descriptive material is information that imparts functionality to a machine. Functional descriptive material includes but is not limited to computer programs instructions rules facts definitions of computable functions objects and data structures.

While particular embodiments of the present invention have been shown and described it will be obvious to those skilled in the art that based upon the teachings herein changes and modifications may be made without departing from this invention and its broader aspects. Therefore the appended claims are to encompass within their scope all such changes and modifications as are within the true spirit and scope of this invention. Furthermore it is to be understood that the invention is solely defined by the appended claims. It will be understood by those with skill in the art that if a specific number of an introduced claim element is intended such intent will be explicitly recited in the claim and in the absence of such recitation no such limitation is present. For non limiting example as an aid to understanding the following appended claims contain usage of the introductory phrases at least one and one or more to introduce claim elements. However the use of such phrases should not be construed to imply that the introduction of a claim element by the indefinite articles a or an limits any particular claim containing such introduced claim element to inventions containing only one such element even when the same claim includes the introductory phrases one or more or at least one and indefinite articles such as a or an the same holds true for the use in the claims of definite articles. Where the word or is used in the claims it is used in an inclusive sense i.e. A and or B as opposed to either A or B .

