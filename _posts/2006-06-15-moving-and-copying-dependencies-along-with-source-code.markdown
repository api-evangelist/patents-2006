---

title: Moving and copying dependencies along with source code
abstract: Moving dependencies along with source code is provided. A set of dependencies are identified for the source code in response to a user moving the source code from an origin project to a destination project. A determination is made whether a number of dependencies from the set of dependencies are present in the destination project. The number of dependencies are added to the destination project in response to the number of dependencies being absent in the destination project.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08302073&OS=08302073&RS=08302073
owner: International Business Machines Corporation
number: 08302073
owner_city: Armonk
owner_country: US
publication_date: 20060615
---
The present invention relates generally to data processing and more particularly to a computer implemented method apparatus and computer usable program code for moving dependencies along with source code.

An integrated development environment IDE is a set of software tools such as source editors compilers and debuggers that are commonly accessible from a single user interface. Many integrated development environments help developers manage the source code of applications using an artifact called a project. Common integrated development environments include Eclipse JBuilder and Visual Studio .

A project defines a compilation unit in which source code files are stored and may be compiled to produce an executable program. Typically source files are not self contained because the source files use code elements such as types operators or both that are declared in an external software component such as a file project or library. In each case a project also includes a reference to the location of the external components to allow the compiler to work properly. The relationship between a project that refers to an external component and the external component itself is called a dependency.

Integrated development environments like Eclipse allow a developer to work with several projects at the same time providing the developer the ability to move and or copy files from one project to another. The project from which the files are moved is called the origin project. The project to which the files are moved is called the destination project. Move and copy operations may be performed via the user interface. For example the developer may use drag and drop or cut copy and paste operations as needed. In some instances the developer may implement the operations using an application programming interface API . An application programming interface is an interface that allows an application program that is written in a high level language to use specific data or functions of the operating system or another program.

Current development environments have an important limitation. They do not take into account the dependencies created by the moved copied files. Consequently if a file requires an external reference to be added to the project for it to compile then the developer will also have to move copy the external reference to the destination project. Otherwise the project will not compile. As a result when a developer uses a current integrated development environment the developer must manually determine which libraries or projects the moved copied files depend on and manually recreate these dependencies in the destination project. Manually moving dependencies is time consuming but necessary using current development environments.

Illustrative embodiments provide a computer implemented method apparatus and computer usable program code for moving dependencies along with source code. A set of dependencies are identified for the source code in response to a user moving the source code from an origin project to a destination project. A determination is made whether a number of dependencies from the set of dependencies are present in the destination project. The number of dependencies are added to the destination project in response to the number of dependencies being absent in the destination project.

With reference now to the figures and in particular with reference to exemplary diagrams of data processing environments are provided in which illustrative embodiments may be implemented. It should be appreciated that are only exemplary and are not intended to assert or imply any limitation with regard to the environments in which different embodiments may be implemented. Many modifications to the depicted environments may be made.

With reference now to the figures depicts a pictorial representation of a network of data processing systems in which illustrative embodiments may be implemented. Network data processing system is a network of computers in which embodiments may be implemented. Network data processing system contains network which is the medium used to provide communications links between various devices and computers connected together within network data processing system . Network may include connections such as wire wireless communication links or fiber optic cables.

In the depicted example server and server connect to network along with storage unit . In addition clients and connect to network . These clients and may be for example personal computers or network computers. In the depicted example server provides data such as boot files operating system images and applications to clients and . Clients and are clients to server in this example. Network data processing system may include additional servers clients and other devices not shown.

In the depicted example network data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages. Of course network data processing system also may be implemented as a number of different types of networks such as for example an intranet a local area network LAN or a wide area network WAN . is intended as an example and not as an architectural limitation for different embodiments.

With reference now to a block diagram of a data processing system is shown in which illustrative embodiments may be implemented. Data processing system is an example of a computer such as server or client in in which computer usable code or instructions implementing the processes may be located for the illustrative embodiments.

In the depicted example data processing system employs a hub architecture including a north bridge and memory controller hub MCH and a south bridge and input output I O controller hub ICH . Processor main memory and graphics processor are coupled to north bridge and memory controller hub . Graphics processor may be coupled to the MCH through an accelerated graphics port AGP for example.

In the depicted example local area network LAN adapter is coupled to south bridge and I O controller hub and audio adapter keyboard and mouse adapter modem read only memory ROM universal serial bus USB ports and other communications ports and PCI PCIe devices are coupled to south bridge and I O controller hub through bus and hard disk drive HDD and CD ROM drive are coupled to south bridge and I O controller hub through bus . PCI PCIe devices may include for example Ethernet adapters add in cards and PC cards for notebook computers. PCI uses a card bus controller while PCIe does not. ROM may be for example a flash binary input output system BIOS . Hard disk drive and CD ROM drive may use for example an integrated drive electronics IDE or serial advanced technology attachment SATA interface. A super I O SIO device may be coupled to south bridge and I O controller hub .

An operating system runs on processor and coordinates and provides control of various components within data processing system in . The operating system may be a commercially available operating system such as Microsoft Windows XP Microsoft and Windows are trademarks of Microsoft Corporation in the United States other countries or both . An object oriented programming system such as the Java programming system may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system Java and all Java based trademarks are trademarks of Sun Microsystems Inc. in the United States other countries or both .

Instructions for the operating system the object oriented programming system and applications or programs are located on storage devices such as hard disk drive and may be loaded into main memory for execution by processor . The processes of the illustrative embodiments may be performed by processor using computer implemented instructions which may be located in a memory such as for example main memory read only memory or in one or more peripheral devices.

The hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the illustrative embodiments may be applied to a multiprocessor data processing system.

In some illustrative examples data processing system may be a personal digital assistant PDA which is generally configured with flash memory to provide non volatile memory for storing operating system files and or user generated data. A bus system may be comprised of one or more buses such as a system bus an I O bus and a PCI bus. Of course the bus system may be implemented using any type of communications fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture. A communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. A memory may be for example main memory or a cache such as found in north bridge and memory controller hub . A processing unit may include one or more processors or CPUs. The depicted examples in and above described examples are not meant to imply architectural limitations. For example data processing system also may be a tablet computer laptop computer or telephone device in addition to taking the form of a PDA.

Illustrative embodiments provide a computer implemented method apparatus and computer usable program code for automatically moving or copying dependencies along with source code. The developer may instead focus on moving source code as well as other development issues without having to manage the external references that may need to be added to the destination project.

A dependency is a reference in a source code or file of a project indicating an external component is necessary for the compiler to perform properly. The relationship between a project that refers to an external component and the external component itself is called a dependency. For example a source file for a banking application may be dependent on an external library supplying standard accounting procedures.

Integrated development environment is a programming environment that has been packaged as an application program. Integrated development environment may include a code editor a compiler a debugger and a graphical user interface builder. Integrated development environment may be a standalone application or may be part of one or more existing compatible applications.

In this example integrated development environment includes user interface and back end . User interface is software for allowing a developer to edit source code and otherwise control the overall development environment to create executable programs . User interface may include an editor for working with source code and an explorer program to manipulate projects and resources. Back end allows integrated development environment to create executable programs . For example back end may include a compiler for compiling the source code and a linker for linking multiple software components into a single executable program.

In one example integrated development environment is used to manage project resources and project metadata for project 1 and project 2 through project N . A developer may use integrated development environment to manage any number of projects.

A project defines a compilation unit in which source code files from project resources are stored and may be compiled to produce an executable program. Typically source files are not self contained because the source files use code elements such as types operators or both that are declared in an external software component such as a file project or library. For example project 1 includes a reference to the location of the external components in project metadata for allowing the compiler in back end to work properly. The relationship between project 1 that refers to an external component in project resources and the external component is called a dependency.

Project resources are the resources used to create project 1 and project 2 through project N . Project resources include folders and files that contain source code. Project metadata is information about a particular project such as a list of the folders and files comprising the project and a list of dependencies on libraries and other projects.

Source file S uses code elements such as types operators or both that are declared in external software components. In source file S includes direct dependencies declared in external component C and external component D . External components are external software components including type and operators used by a source file. External components may include for example a file project library or similar module for organizing types and operators.

External component D does not depend on other external components. External component C is further dependent on external component E and external component F . As a result a single source file such as source file S may be dependent on external components not directly linked to source file S such as external component E and external component F . Dependency tree is relatively simple in these examples but one may easily envision a dependency tree with complex dependencies on external components so that moving and copying the required dependencies along with even a single source file may create significant amounts of painstaking manual work for the developer.

Source file F in origin project P depends on external component C thus requiring origin project P to contain reference R to external component C . Source file X may also depend on external component C requiring destination project Q to include reference R to external component C in . A reference may take the form of the name of a project containing source code or the name of a file containing a library of pre compiled source code. References R and may be shown by a dependency tree such as dependency tree of .

In order to automatically move dependencies along with source code program code within the integrated development environment examines the source code to be moved copied to determine which dependencies are contributed examines the destination project to determine what dependencies are already there adds any missing dependencies to the destination project and moves copies the source code to the destination.

In an illustrative embodiment automatically adds reference R to destination project Q when the developer moves source file F from origin project P to destination project Q without an additional action from the developer. As a result source file F will still compile in destination project Q after being moved. AS previously mentioned reference R and may refer to a file project or library in external component C .

In contrast to the copy operation after the move operation is performed reference R is deleted from the origin project. Reference R is deleted without additional action by the developer.

The process begins with the integrated development environment extracting dependencies created by the source file step . For example during step the integrated development environment analyzes the source file contained in the file such as source file F of to detect or identify a set of dependencies to external components such as external component C of . The set of dependencies is one or more dependencies. The process of step may be performed by direct text analysis of the source code or by accessing the abstract syntax tree or dependency tree such as dependency tree of if available.

Next the integrated development environment determines whether there are dependencies left to process step . The determination of step is performed so that a number of dependencies absent from the destination project may be added as needed to the destination project. The number of dependencies are one or more dependencies of the set of dependencies. If there are no dependencies left to process the process terminates. If the integrated development environment determines there are dependencies left to process in step the integrated development environment looks for a dependency in the context of the destination project . The destination project may be a project such as destination project Q of . Step may be performed in a manner similar to step for the destination project.

Next the integrated development environment determines whether the destination project already has the dependency step . Step is performed to determine what dependencies are already present. If the integrated development environment determines the destination project already has the dependency the integrated development environment finds the dependency in the context of the origin project step . If the integrated development environment determines the destination project does not already have the dependency in step the integrated development environment adds the dependency to the destination project step before finding the dependency in the context of the origin project step . Step is performed to add the number of dependencies identified as missing from the destination project. As a result each missing dependency is added to the destination project so that the project may properly compile.

Next the integrated development environment determines whether the origin project still needs the dependency step . The determination of step ensures that even if a file is moved or copied the reference such as reference R of is not deleted because the reference is still needed.

If the integrated development environment determines the project does not still need the dependency the integrated development environment removes the dependency from the origin project step . Next the process returns again to the determination of step . If the integrated development environment determines the origin project still needs the dependency in step the process returns directly to the determination of step .

Re summarizing the process of is used to examine the source context to determine what dependences are contributed by the source file to be moved copied examine the destination project to determine what dependencies are already there add any missing dependencies to the destination project and move or copy the source file to the destination project. The result of the process of is that the source code is automatically moved and compiles to create the executable program without any additional action by the developer.

Many third generation programming languages define constructs that allow referencing types and operations defined in other source files. The Java programming language provides two of them using an import statement at the beginning of the file such as import java.util.List or using a fully qualified type name embedded in other statements such as java.util.List.isEmpty . Other languages rely on the same concept with different syntaxes the with and use keywords in Ada or the include directive in C C . In addition integrated development environments such as Eclipse provide an application programming interface for accessing project data such as source files and project metadata such as references to external components the project depends on.

Thus the illustrative embodiments provide for automatically moving and or copying dependencies along with source code. The illustrative embodiments increase developer productivity. The developer is able to focus on moving and or copying source code without having to manage the external references that may need to be added to the destination project saving time and money and increasing developer efficiency.

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any tangible apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

