---

title: Dynamic threat event management system and method
abstract: According to various illustrative embodiments of the present invention, a method for a content-driven threat management system includes creating a threat detection primary object with threat mitigation data using at least one researcher of at least one of software and malicious code, encoding the threat detection primary object with threat mitigation data within an object capable of being transmitted to a personal computer system using a transmission vector update function, and transmitting the threat detection primary object with threat mitigation data to a threat agent using the transmission vector update function. The method also includes updating at least one threat function using the threat agent to update at least one threat functional description of the at least one threat function to include the threat detection primary object with threat mitigation data, and using the threat detection primary object with threat mitigation data to be capable of recognizing at least one threat event based upon the threat detection primary object with threat mitigation data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09167000&OS=09167000&RS=09167000
owner: CA, Inc.
number: 09167000
owner_city: New York
owner_country: US
publication_date: 20060214
---
The present invention relates generally to information processing and more particularly to systems and methods for regulating access and maintaining security of individual computer systems and local area networks LANs connected to larger open networks wide area networks or WANs including the Internet.

The first personal computers PCs were largely stand alone devices with no direct connection to other computers or computer networks. Data exchanges between computers were mainly accomplished by exchanging magnetic or optical media such as floppy disks. Over time more and more computers were connected to each other using Local Area Networks or LANs. In both cases maintaining security and controlling what information a user of a personal computer could access was relatively simple because the overall computing environment was limited and clearly defined.

With the ever increasing popularity of the Internet particularly the World Wide Web Web portion of the Internet however more and more personal computers are connected to larger networks. Providing access to vast stores of information the Internet is typically accessed by users through Web browsers e.g. Microsoft Internet Explorer or Netscape Navigator browser software or other Internet applications. Browsers and other Internet applications include the ability to access an URL Universal Resource Locator or Web site. The explosive growth of the Internet had a dramatic effect on the LANs of many businesses and other organizations. More and more employees need direct access through their corporate LAN to the Internet in order to facilitate research business transactions consumer transactions and communications between branch offices and to send and receive e mail messages to name just a few common applications.

As a result corporate IS Information Systems departments and connected device users now face unprecedented challenges. Specifically such departments which have until recently operated largely in a clearly defined controlled and friendly environment are now confronted with a far more complicated and hostile connection situation. As more and more computers are connected to the Internet either directly e.g. over a dial up connection with an Internet Service Provider or ISP or through a gateway between a LAN and the Internet a whole new set of challenges face LAN administrators and individual users alike these previously closed computing environments are now opened to a worldwide network of computer systems. Specific challenges for example include the following 1 attacks by perpetrators hackers capable of damaging the local computer systems 2 unauthorized access to external data e.g. pornographic and or other unsuitable Web sites 3 infiltration by viruses and or worms and or spyware and or Trojan Horse programs as well as surreptitious installation of spyware applications and other types of malicious code that leak device organizational and personal information to unknown sources 4 use of the local computer system for unauthorized personal activities e.g. extensive Web browsing or game playing with subsequent loss of productivity and 5 hording available network bandwidth through use of bandwidth intensive applications e.g. real time audio programs .

To mitigate system security issues the software industry has introduced a myriad of products and technologies to address and minimize these events including firewalls proxy servers and similar technologies all designed to keep outside hackers from penetrating the corporate network. Corporate firewalls are applications that intercept the data traffic at the gateway to a wide area network WAN and try to check the data packets i.e. Internet Protocol packets or IP packets being exchanged for suspicious or unwanted activities. Initially firewalls have been used primarily to keep intruders from the LAN by filtering data packets. More recently the concept has been expanded to include Stateful Inspection. Here a firewall not only looks at the IP packets but also inspects the data packets transport protocol e.g. transmission control protocol or TCP header and even the application level protocols in an attempt to understand better the exact nature of the data exchange. These technologies are now beginning to appear on the end user devices as well.

Proxy server or Application Gateways on the other hand are LAN server based applications that act on behalf of the client application. Accessing the Internet directly the application first submits a request to the proxy server that inspects the request for unsafe or unwanted traffic. Only after this inspection will the proxy server consider forwarding the request to the destination on the Internet.

Both strategies are based on a centralized filter mechanism with most of the filtering work being performed on a remote system or server as opposed to the individual client PCs . Such an approach is problematic however. Because of the centralized nature of firewalls and proxy servers each approach extracts significant performance penalties. During operation of a typical system employing either approach a single server might have to do the filtering work for hundreds or even thousands of PCs or workstations creating a problem called latency. Latency represents a major bottleneck to overall system performance from the perspective of both the end user and the network systems designer. As emerging technologies on the Internet require still faster data delivery e.g. real time audio and video feeds and use more complex protocols this problem will likely be exacerbated. In the case of firewalls employing Stateful Inspection technology performance problems are aggravated by the fact that the firewall software needs to duplicate much of the protocol implementation of the client application as well as the transport protocol e.g. TCP and or user datagram protocol or UDP in order to understand the data flow.

As another problem centralized filter architectures are missing vital information to correctly interpret the data packets because the underlying protocols were designed for effective data transfer and not for data monitoring and interception. For instance monitoring based on an individual client application or versions thereof is not supported all despite the fact that two identical data packets or series of data packets can have completely different meanings based on the underlying context i.e. how the client application actually interprets the data packets. As a result computer viruses and or Trojan Horse applications can camouflage data transmissions as legitimate traffic.

The base of computer users has become increasingly mobile. This mobilility has created markets for devices that are sometimes part of the centralized computing architecture and at other times outside the organizational network and the domain of policies of the organizational network. This mobililty pits the extreme utility of such devices and their relationship to productivity against the need to manage access to services and transactions on the Internet.

There are still other disadvantages to centralized filtering. The approach is difficult to configure and administer. The task of setting up different rights for different users workstations and or workgroups for instance is particularly difficult. No facilities are provided for delegating certain access and monitoring authority for example in order to allow a workgroup supervisor to manage less critical aspects of the Internet access for his or her group without going through a central authority. Also a centralized filter cannot distinguish between active use of the Internet i.e. when user interaction with the PC causes the Internet access and background use i.e. when an application accesses the Internet without user interaction . Still further a centralized filter is easily circumvented for example by a user employing a modem for establishing a dial up connection to an ISP Internet Service Provider . Similarly the proxy server approach is unattractive. Special versions and or specialized configurations of client applications are required thus complicating system administration. Internet setup for portable computers employed at remote locations is especially complicated.

Providing a client based filter e.g. SurfWatch and CyberPatrol for preventing users from accessing undesirable World Wide Web sites does not adequately overcome the disadvantages of centralized filtering. Designed largely as parental control tools for individual PCs these programs are easily disabled by uninstalling accidentally or intentionally the filter. A Windows user can for example simply reinstall Windows replacing certain driver files of the filter. This disables the filter and provides the user with unrestricted access to the Internet.

Current threat management technologies typically utilize a one off functional approach such as spyware a firewall anti virus AV software a spam filter a universal resource locator URL filter and the like. The technical limitations of such an approach are numerous and the challenges of threat mitigation can not meaningfully be met by such piecemeal approaches that are neither contentdriven nor specific. For example an intrusion is seen by current threat management technologies as a firewall event even though the intrusion might be connected to a Trojan Horse that is part of a virus and or a worm and or a spyware event. Similarly an URL filtering product is aware of a known bad website where Trojan Horses and or other damaging code are known to exist but the URL filtering product has no way to communicate with the firewall product and or the firewall product has no way to communicate with the URL filtering product. Likewise a conventional Security Advisor SA becomes aware of and publishes specific content regarding a type of threat event but this specific content is not connected to other functional conventional threat management technologies.

The nature of Internet threats is constantly changing. The authors of these threat are now combining threats into coordinated attacks. For example an author might create and or use an off the shelf virus and combine that virus with a worm and or a Trojan Horse and then design those malicious software malware applications to send information to another Internet device and or download spyware keyloggers Trojan Horses rootkits and or other malicious software malware to the end user device. Whole nefarious networks of infected devices now exist.

U.S. Pat. No. 5 987 611 to Freund for example discloses an administrator creating rules that are then sent to a desktop and or a server. These rules are then used to configure the software firewall installed on the system. However this configuration does not account for the case where the threat driven content such as an anti virus AV signature file directs the creation and or distribution of a rule since the administrator is necessarily involved in the creation and or distribution of all the rules.

According to various illustrative embodiments of the present invention a method for a content driven threat management system includes creating a threat detection primary object with threat mitigation data using at least one researcher of at least one of software and malicious code encoding the threat detection primary object with threat mitigation data within an object capable of being transmitted to a personal computer system using a transmission vector update function and transmitting the threat detection primary object with threat mitigation data to a threat agent using the transmission vector update function. The method also includes updating at least one threat function using the threat agent to update at least one threat functional description of the at least one threat function to include the threat detection primary object with threat mitigation data and using the threat detection primary object with threat mitigation data to be capable of recognizing at least one threat event based upon the threat detection primary object with threat mitigation data.

The system and method disclosed herein are advantageous in providing a mechanism for relaying content driven information to the various functions that are enabled in a threat management system. In various illustrative embodiments information created by content such as the detection of a specific threat and its associated mitigation settings may be enabled to be transmitted to another threat management function allowing that other threat management function to reconfigure itself to respond to the new information. In various illustrative embodiments the researcher s of software and or malicious code which may include one or more automated researcher s and or automated research system s built to develop threat information may encode the threat detection primary object with threat mitigation data role information and or generalized threat migration settings which can determine firewall AV spyware and or policy configuration s and any and all other threat mitigation settings that might be positively operative within the computer system within the object capable of being transmitted to a personal computer system using a transmission vector update function. The system and method disclosed herein are still further advantageous in improving the performance and security of business critical applications and hence in improving the user and or customer experience. Other technical advantages will be apparent to those of ordinary skill in the art having the benefit of the present disclosure and in view of the following specification claims and drawings.

It is to be noted however that the appended drawings illustrate only typical embodiments of the present invention and are therefore not to be considered limiting of the scope of the present invention as the present invention may admit to other equally effective embodiments.

Illustrative embodiments of the present invention are described in detail below. In the interest of clarity not all features of an actual implementation are described in this specification. It will of course be appreciated that in the development of any such actual embodiment numerous implementation specific decisions must be made to achieve the developers specific goals such as compliance with system related and business related constraints which will vary from one implementation to another. Moreover it will be appreciated that such a development effort might be complex and time consuming but would nevertheless be a routine undertaking for those of ordinary skill in the art having the benefit of the present disclosure.

The following description will focus on various illustrative embodiments which may be operative in an Internet connected environment including for instance client machines running under the Microsoft Windows environment and connected to an open network such as a wide area network WAN and or the Internet. The present invention however is not limited to any particular one application or any particular environment. Instead those skilled in the art having the benefit of the present disclosure will find that the system and methods of the present invention may be advantageously applied to a variety of system and application software including database management systems word processors spreadsheets and the like operating on a variety of different platforms including the Macintosh operating system the UNIX operating system the NextStep operating system and the like. Therefore the description of the exemplary embodiments that follows is for purposes of illustration and not limitation.

Various illustrative embodiments may generally be embodied on an information processing system including one or more computer systems such as a computer system of operating on a network. The computer system may comprise a central processor a main memory an input output controller a keyboard a pointing device e.g. a mouse a track ball a pen device and or the like a display and or screen device and a mass storage e.g. a hard disk or a fixed disk a removable floppy disk an optical disk a magneto optical disk a flash memory and or the like a network interface card or controller e.g. Ethernet Firewire and or the like and a modem e.g. a 56 K baud modem an ISDN modem and or the like . Although not shown separately a real time system clock may be included with the computer system in a conventional manner. The computer processor may include and or be coupled to a cache memory for storing frequently accessed information. The cache memory may be an on chip cache and or an external cache as shown . One or more input output I O device s such as a printing device and or a slide output device may be included in the computer system as desired. As shown the various components of the computer system may communicate through a system bus and or a similar architecture. The computer system itself may communicate with other computer systems via the network interface card e.g. available from 3Com and or the modem e.g. available from U.S. Robotics . In various particular embodiments the computer system may include an IBM PC compatible personal computer available from a variety of vendors including IBM of Armonk N.Y. for example . The I O device may include a laser printer such as an HP LaserJet printer which is available from Hewlett Packard of Palo Alto Calif. for example.

As schematically illustrated in a computer software system may be provided for directing the operation of the computer system . The software system which may be stored in the computer system main memory and on the mass storage e.g. the disk memory may include a kernel or operating system OS and a windows shell . One or more application programs such as client application software or programs may be loaded i.e. transferred from the mass storage into the main memory for execution by the computer system . In various particular embodiments the client application software may include a Web browser e.g. Netscape Navigator and or Microsoft Internet Explorer and or Mozilla Firefox browser software that may communicate through a communication layer and or driver e.g. Winsock with the Internet.

The computer software system may include a user interface UI preferably a Graphical User Interface GUI for receiving user commands and data although this system might also be embedded and not exhibit a traditional interface. These inputs in turn may be acted upon by the computer system in accordance with instructions from the operating system module the windows shell and or the client application module s . The UI may also serve to display the results of operation s from the OS the windows shell and or one or more of the application s whereupon the user may supply additional inputs and or terminate the session. The OS and the windows shell may be provided by Microsoft Windows XP Microsoft Windows 2000 Microsoft Windows 95 Microsoft Windows NT and or Microsoft Windows 3.x operating in conjunction with MS DOS some or all of which may be available from Microsoft Corporation of Redmond Wash. for example. Alternatively the OS and the windows shell may be provided by IBM OS 2 available from IBM of Armonk N.Y. and or Macintosh OS available from Apple Computers of Cupertino Calif for example. Although shown conceptually as a separate module the UI may alternatively be provided by interaction of the application modules with the windows shell both operating under the OS .

In various illustrative embodiments the computer software system may include a client side Internet access monitoring module . The Internet access monitoring module may interface directly with the Winsock driver via a Windows VxD driver interface surfaced by the Winsock driver as shown at . Construction and operation of the client side Internet access monitoring module including its interaction with server based components may be as described in further detail in U.S. Pat. No. 5 987 611 to Freund for example incorporated by reference herein.

In order to facilitate understanding of various illustrative embodiments it may be helpful to review the basic architecture of the Internet and techniques for providing Internet access. For clarity the following description of the Internet architecture focuses on those aspects which are relevant to various illustrative embodiments.

The Internet is essentially an open network of computers and local area networks LANs . Computers within this open network communicate using multiple protocol layers. Each of the layers addresses a distinct concern of the communication process. As a core protocol of the Internet Internet Protocol IP provides a layer for exchanging data packets between computers connected to the Internet including providing data encapsulation and header formatting data routing across the Internet and fragmentation and reassembly. According to the protocol data may be transmitted by attaching a header with a destination address IP address and then transmitting the data packet from one computer to another until the data packet arrives at the desired destination. Along this journey each computer uses an implementation of the IP Protocol to route the data packet to the next destination until the data packet reaches its final destination. Except for checking the integrity of the IP header no error detection and or recovery capabilities are performed. When the data packet arrives at its ultimate destination any necessary integrity checks are carried out.

Another protocol the transport protocol serves as a layer responsible for guaranteeing the integrity of application data. The transport protocol is therefore used only at the original source and final destination of the data. The Internet currently uses two different transport protocols. One protocol the User Datagram Protocol UDP does not offer reliable connectionless services. In practice therefore it is up to the target application to check data integrity. In contrast the Transmission Control Protocol TCP another transport protocol provides reliable connection oriented service which establishes a connection with a remote computer and guarantees data integrity and delivery or notifies the application in case of an error .

Both TCP and UDP data transmissions each provide specific headers in addition to the IP header. In order to simplify forwarding the data packets to a target application these headers include a port number. The port number functions to identify an application level protocol. Port number 80 for instance is normally used for the World Wide Web protocol Hypertext Transport Protocol or HTTP .

TCP IP and UDP IP refers to the IP Protocol combined with the TCP and the UDP respectively. Normally application programs communicate with an available TCP IP implementation e.g. Windows WinSock through an Application Programming Interface API . For Windows computers the WinSock API simply encapsulates the TCP IP architecture. WinSock is patterned after the popular Berkeley Sockets programming model which is generally considered the de facto standard for TCP IP networking.

Internet applications generally implement more specialized protocols on top of TCP IP. For example a Web browser implements the client portions of the HyperText Transfer Protocol HTTP in order to communicate with Web servers. A Web browser also might implement other protocols such as the older File Transfer Protocol FTP for downloading data. Electronic mail applications i.e. E mail clients implement the client portion of the Simple Mail Transfer Protocol SMTP and the Post Office Protocol POP . Still other protocols exist for use in the Internet many of which are documented in the technical trade and patent literature. See for example the Internet Engineering Task Force IETF RFCs Requests For Comments publications available from the Internet Network Information Center NIC via FTP access to the NIC archive nic.ddn.mil. Due to the accelerated development of the Internet many more protocols are unpublished and or are. in developmental stages. As long as a client application and a corresponding server application understand how to interpret the data packets they exchange this generally does not pose a major problem. For applications that monitor the Internet traffic in order to detect security or other problems however this does pose an additional challenge. Accordingly various illustrative embodiments of the present invention may be constructed to facilitate accommodation of new protocols.

The local area network LAN itself may be a server based network e.g. a Windows NT Server providing services to network clients or alternatively a peer to peer network. Communications to the outside e.g. the Internet may be achieved using TCP IP. The local area network LAN may communicate with the Internet shown at through a firewall for example. The firewall itself may be implemented in a conventional manner such as by employing a router based and or server based firewall process for monitoring communications with various Web servers connected to the Internet .

With reference to client side operation of the Internet based client server system is shown in further detail. As shown in for client a given client generally may include one or more applications e.g. application and or application that require Internet access. A Web browser e.g. Netscape Navigator and or Microsoft Internet Explorer and or Mozilla Firefox browser software is but one of a multitude of such applications. Each application in turn may communicate directly with a client side communication driver such as a Winsock driver a Windows implementation and encapsulation of TCP IP.

The client may include a client side monitor such as a data acquisition module that hooks into the client side communication driver . In the instance of a Windows Winsock client side communication driver for example a process may hook into the Windows Winsock client side communication driver using Winsock VxD extensions. As the various applications submit requests to the client side communication driver the data acquisition module may intercept the communications for determining whether the request is permitted under the rules. For instance when a request for access is received from an application the data acquisition module may first verify that according to the rules in place such an application is permitted to access the Internet. Rules currently in force might specify that only particular applications or particular versions of those applications may access the Internet with all other applications being denied access for example. For a Winsock based implementation the data acquisition module may in effect trap the request at the VxD driver level thereby effectively blocking the request at the level of the Winsock client side communication driver .

In addition to checking whether the application itself should have access the data acquisition module may monitor the individual messages that are exchanged between the applications e.g. the application and or the applications and the client side communication driver . For instance the data acquisition module may trap an HTTP SEND command generated by an application. By analyzing the message and any accompanying context information the data acquisition module may determine whether the command is permitted under the rules in place. By examining port address context information provided with the command for example the data acquisition module may readily determine the underlying protocol. For Web server access the data acquisition module may identify HTTP the underlying protocol used to communicate with the Web. Having determined the protocol the data acquisition module may verify that the protocol is permitted for the application and or for the client . As an example of a typical rule that might be in place one or more researchers of software and or malicious code might establish a rule blocking FTP file transfer protocol by Web browsers for preventing users from tying up the network with large FTP file transfers.

For determining whether the requested access of the client s application is accessing a permitted Web site the data acquisition module may examine the IP address for the Web site with which the application seeks to communicate and may compare that address against a list of allowed addresses or conversely against a list of disallowed addresses . Certain Web sites may have multiple IP addresses. Accordingly the Internet based client server system may store the IP addresses with the respective Web sites so that a particular Web site may be resolved at the level of its individual IP addresses. In this manner the Internet based client server system may permit access based either on a Web site name e.g. www.ca.com or based on a particular IP address.

As shown in the client side monitor such as the data acquisition module that may be implemented as a Windows VxD driver for example may include the following subcomponents. A Winsock hook may include functionality for connecting or hooking into the Winsock client side communication driver . A file hook in a similar manner may include functionality allowing the data acquisition module to hook into the file subsystem provided by the underlying operating system OS . A process hook another subcomponent that may hook into the underlying operating system OS may track all currently executing applications e.g. the application and or the application and or processes. All of these hooks as implemented in a Windows VxD may be capable of executing at ring that is execution at the highest privileged level of the operating system OS .

Also shown the data acquisition module may include a buffer interface manager that may interface directly with a client system maintained FIFO first in first out message buffer . The FIFO message buffer may comprise an array of messages maintained in a fixed size i.e. pre allocated block of client memory. The FIFO message buffer itself may be shared between the data acquisition module and the various other executing applications e.g. the application and or the application and or processes. In various illustrative embodiments the data acquisition module may utilize the shared FIFO message buffer so that the data acquisition module itself need not undertake various allocation deallocation operations that might degrade performance for example.

Actual access to individual messages within the FIFO message buffer may be achieved by mapping globally accessible selectors thus permitting the data acquisition module to have the ability to access individual messages and or the content thereof within the FIFO message buffer . With direct access to the underlying messages themselves the data acquisition module may patch i.e. modify dynamically at runtime the content of various messages. For instance a request to access a particular Web site may be patched instead to redirect that request to another site. More generally since the data acquisition module may trap individual messages individual messages may be modified in an arbitrary manner according to the rules in place including disallowing i.e. blocking specific messages for example.

Actual interpretation of individual messages may be performed by a data interpretation module that co exists with the data acquisition module . The data interpretation module which may communicate directly with the data acquisition module may keep track of all currently executing processes. To determine intelligently the action that should be undertaken for a given message the data interpretation module may refer to a rules database and or a rules knowledgebase . Here the various rules that define permitted activity in the Internet based system may be stored in a format that is readily accessible by the data interpretation module . Contained within the rules database may be individual databases fully characterizing the rules for the Internet based client server system that are not administrator specified but rather specified as described in more detail below in reference to by one or more researchers of software and or malicious code. When the data interpretation module is first loaded at a given client machine the given client machine may attempt to download a copy of those Internet based client server system rules pertinent to the given client from the supervisor component for example into the local knowledgebase of the given client machine . In the event that such a copy is not available or has not changed since the last download the data interpretation module may employ the last downloaded local copy.

Finally the data interpretation module may maintain log information including an audit transaction log and or an exception log . The audit transaction log may provide a time sequence log of messages processed by the Internet based client server system whereas the exception log may provide a time sequence log of exceptions e.g. access violations attempted by users that have occurred in the system.

Referring to an exemplary embodiment of a method and system for a content driven threat management system is schematically illustrated according to teachings of the present disclosure. In various illustrative embodiments the content driven threat management system may comprise at least six objects a threat detection primary object P n with threat mitigation data as indicated at where n may be any appropriate integer a transmission vector update function U n as indicated at a threat agent A n as indicated at and one or more threat functions N m such as a plurality of threat functions N N . . . N m as indicated at . . . where m may be any appropriate non zero integer a command and control monitor function M n as indicated at and a secondary object S n as indicated at . . . . The total number of objects used and or the number of relationships between those objects may be effectively unlimited as would be apparent to those of ordinary skill in the art having the benefit of the present disclosure.

In various illustrative embodiments the threat detection primary object P n with threat mitigation data as indicated at may be created by one or more researchers of software and or malicious code which may include one or more automated researcher and or automated research systems built to develop threat information and may include code and data than can be run on the computing system as described above with reference to the rules knowledgebase but may be at least one functional threat migitation mechanism and or functional threat description mechanism. In various particular exemplary illustrative embodiments the at least one functional threat migitation mechanism and or functional threat description mechanism may include one or more of spyware a firewall anti virus AV software spam filter information Trojan Horse information universal resource locator URL filtering universal resource locator URL management policy configuration threat posture information and the like and any other computer security threat detection and or mitigation software applications that may arise and or be developed as appropriate. For example a threat might comprise a Trojan Horse that is downloaded through a graphics file that is present on the whole page of a commercial website. The Trojan Horse once installed and run on the system might use a certain port on a firewall to contact another device on the inrernet which then downloads and installs a rootkit or keylogger or other such spyware code. The functional threat mitigation mechanism in this case would be a detection for the rootkit and keylogger a deactivation object to disable and remove the rootkit and keylogger an instruction to deactivate the port in use by the Trojan Horse and a dectection and removal of the worm the Trojan Horse the graphics file and then a disabling of the ability of the user to connect to that website and or download graphics from that website again. The system might also communicate back to the researchers to deepen the research information. In various illustrative embodiments the threat detection primary object P n with threat mitigation data created by one or more researchers of software and or malicious code may be one of a set of Z threat detection primary objects P P . . . P Z where Z may be any appropriate integer each with their particular threat mitigation data for example. Primary objects may also be combined into a global object as necessary to mitigate the threat.

The one or more researchers of software and or malicious code which may include one or more automated researcher and or automated research systems built to develop threat information may develop the threat detection primary object P n with threat rmitigation data as indicated at and encode the threat detection primary object P n with threat mitigation data within an object such as one or more specific databases of threat objects that may be transmitted to the threat agent A n of a personal computer PC syster such as the Internet based client server system as described above using the transmission vector update fuinction U n as indicated at . The transmission vector update function U n may be defined in various illustrative embodiments as the method used to manage the distribution of the threat detection primary object P n with threat mitigation data. Other transmisstion methods may also be employed as would be apparent to those of ordinary skill in the art having the benefit of the present disclosure.

The threat detection primary object P n with threat mitigation data may be received by the threat agent A n . The threat agent A n may then update the available threat functional descriptions of one or more threat functions N m such as the plurality of threat functions N N . . . N m as indicated at . . . to include the new threat detection primary object P n with threat mitigation data as indicated at . In various illustrative embodiments the threat agent A n may be 1 resident on a single system such as the Internet based client server system as described above in a non distributed framework 2 found in a trusted relationship with a different system such as the Internet based client server system as described above on a network in a distributed framework and or 3 found in a trusted relationship with a different system such as the Internet based client server system as described above on a set of networks and or systems in a distributed framework.

The one or more threat functions N m such as the plurality of threat functions N N . . . N m as indicated at . . . may utilize the information in the threat detection primary object P n with threat mitigation data as appropriate. For example in the event that the threat function N recognizes a threat event based upon the threat detection primary object P n with threat mitigation data the threat function N may respond as directed by the threat detection primary object P n with threat mitigation data and may execute one or more of the functions of the threat function N one of which may be to communicate to either the threat agent A n another threat function such as N and or the command and control monitor function M n as indicated schematically at .

Primary and secondary objects may be held for a time so that their effects might be considered by a user and or a manager and or a participator of a system. That manager may deploy substantially all or only a part of the threat mitigation data.

These subsequent objects either the threat agent A n another threat function such as N and or the command and control monitor function M n may then execute one or more of their function appropriate responses which may include creating and or developing the secondary object S n as indicated at . . . which may then be communicated to all appropriate objects such as the threat agent A n one or more threat functions N m such as the plurality of threat functions N N . . . N m as indicated at . . . and or the command and control monitor function M n as indicated schematically also at . For example the threat mitiation data may add a detection for a certain example of spyware. The spyware agent may instruct a firewall such as the firewall as described above to shut a certain port. The firewall may then create an additional secondary object S n that is then communicated to the appropriate applications that might be able to use that certain port to tell these appropriate applications that that certain port has been closed. Similarly should a primary object contain a threat mitigation for a rootkit the primary object may disable access to certain web sites with URL filtering and or look in a list of e mail messages for a particular item of spam and or contact the researcher s which may include one or more automated researcher s and or automated research system s built to develop threat information and or the manager s to inform them of the presence of the rootkit and or other type of malicious code.

Similarly and more generally in the event that the threat function N m where m may be any appropriate non zero integer recognizes a threat event based upon the threat detection primary object P n with threat mitigation data the threat function N m may respond as directed by the threat detection primary object P n with threat mitigation data and may execute one or more of the functions of the threat function N m one of which may be to communicate to either the threat agent A n another threat function such as one or more of the threat functions N k of the plurality of the threat functions N N . . . N m where k m and or the command and control monitor function M n as indicated schematically at .

These subsequent objects either the threat agent A n another threat function such as one or more of the threat functions N k of the plurality of the threat functions N N . . . N m where k m and or the command and control monitor function M n may then execute one or more of their function appropriate responses which may include creating and or developing the secondary object S n as indicated at . . . which may then be communicated to all appropriate objects such as the threat agent A n one or more threat functions N m such as the plurality of threat functions N N . . . N m as indicated at . . . and or the command and control monitor function M n as indicated schematically also at . In various illustrative embodiments a manager and or a user and or a participator may review the information found at a command and control console having the command and control monitor function M n and may determine one or more other appropriate secondary objects S n that may need to be created and distributed and or communicated to all appropriate objects such as the threat agent A n and or one or more threat functions N m such as the plurality of threat functions N N . . . N m as indicated at . . . as described above.

In various illustrative embodiments as shown in a method for a content driven threat management system may be provided. The method may comprise creating a threat detection primary object with threat mitigation data using at least one researcher of at least one of software and malicious code as indicated at and encoding the threat detection primary object with threat mitigation data within an object capable of being transmitted to a personal computer system using a transmission vector update function as indicated at . In various illustrative embodiments the at least one researcher of at least one of software and malicious code may include one or more automated researcher and or automated research systems built to develop threat information.

The method may also comprise transmitting the threat detection primary object with threat mitigation data to a threat agent using the transmission vector update function as indicated at and updating at least one threat function using the threat agent to update at least one threat functional description of the at least one threat function to include the threat detection primary object with threat mitigation data as indicated at . The method may also comprise using the threat detection primary object with threat mitigation data to be capable of recognizing at least one threat event based upon the threat detection primary object with threat mitigation data as indicated at .

As described above the system and method disclosed herein are advantageous in providing a mechanism for relaying content driven threat information to the various functions that are enabled in a threat management system. In various illustrative embodiments information created by content such as the detection of a specific threat is enabled to be transmitted to another threat management function allowing that other threat management function to reconfigure itself to respond to the new information. The system and method disclosed herein are still further advantageous in providing a flexible and extensible framework for the conception transmission configuration and management of cross function threat mitigation and management events thereby meeting the challenge of threat mitigation which can only be met by a combination of threat management technologies operating in a meaningful orchestration that is content driven and specific. The system and method disclosed herein are yet further advantageous in improving the performance and security of business critical applications and hence in improving the user and or customer experience.

The particular embodiments disclosed above are illustrative only as the present invention may be modified and practiced in different but equivalent manners apparent to those skilled in the art having the benefit of the teachings herein. Furthermore no limitations are intended to the details of construction or design herein shown other than as described in the claims below. It is therefore evident that the particular illustrative embodiments disclosed above may be altered or modified and all such variations are considered within the scope and spirit of the present invention. In particular every range of values of the form from about a to about b or equivalently from approximately a to b or equivalently from approximately a b disclosed herein is to be understood as referring to the power set the set of all subsets of the respective range of values in the sense of Georg Cantor. Accordingly the protection sought herein is as set forth in the claims below.

Although various illustrative embodiments of the present invention and their advantages are described in detail a person skilled in the art having the benefit of the present disclosure could make various alterations additions and or omissions without departing from the spirit and scope of the present invention as defined by the appended claims.

