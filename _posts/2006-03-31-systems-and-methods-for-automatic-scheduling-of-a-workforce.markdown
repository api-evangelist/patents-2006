---

title: Systems and methods for automatic scheduling of a workforce
abstract: Systems and methods are disclosed for scheduling overtime and time-off for a workforce. In one embodiment, the method comprises: receiving a workforce schedule including assignments of workers to shifts; receiving a template describing alterations to shifts; and applying schedulable objects to the workforce schedule in accordance with a workload forecast and schedule constraints. In one embodiment, the system comprises: a user interface and a scheduler. The user interface allows creation of shift alteration templates and associating templates with workers. The scheduler uses the shift alteration templates to modify an existing schedule of assignments of workers to shifts.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07672746&OS=07672746&RS=07672746
owner: Verint Americas Inc.
number: 07672746
owner_city: Melville
owner_country: US
publication_date: 20060331
---
The present disclosure relates to contact centers and more specifically to automatic scheduling of a workforce.

A manager in a contact center also known as a call center typically uses workforce scheduling software to create a schedule which assigns workers agents to shifts throughout the workday. The scheduler chooses an optimal schedule that meets constraints while optimizing goals. Inputs such as predicted workload e.g. call volume in 15 minute intervals average call duration and work rules e.g. maximum shift length possible shift start time break requirements are treated as constraints. Inputs such as expected level of service e.g. call hold time are treated as goals. The scheduler generates many possible schedules and examines the possibilities to find a schedule that optimizes goals while remaining within the constraint boundaries.

In general existing workforce schedulers accurately schedule an appropriate number of agents to handle the expected workload during each time interval. It is common however for workload and or agent availability to vary from predicted values once a workday has begun. To keep the contact center running at peak performance the schedule should then be adjusted by giving some agents overtime or giving some agents time off. Existing schedulers do not support automatically scheduling of overtime or time off after a schedule has been created and the day has started. Therefore a contact center manager typically responds by manually creating overtime or time off events through which a particular shift for a particular agent is extended or truncated. The process by which a manager manually determines which agents should be assigned overtime or time off and where the overtime or time off should be placed on a schedule can be time consuming tedious and difficult.

Systems and methods are disclosed for scheduling a workforce. In one embodiment the method comprises receiving a workforce schedule including assignments of workers to shifts receiving a template describing alterations to shifts and applying schedulable objects to the workforce schedule in accordance with a workload forecast and schedule constraints. In one embodiment the system comprises a user interface and a scheduler. The user interface allows creation of shift alteration templates and associating templates with workers. The scheduler uses the shift alteration templates to modify an existing schedule of assignments of workers to shifts.

A contact router distributes or routes contacts incoming or outgoing to an agent position. Voice over Internet Protocol VoIP calls and computer based contacts e.g. chat email are routed over one or more data networks and distributed over network to one of the agent workstations . Contact router may include an automatic call distributor ACD to route phone contacts. The embodiments described herein will refer to ACD instead of contact router but analogous contact router actions and operations are intended to be captured by this disclosure. Note that a predictive dialer not shown could be used for directing outbound calls to agents for handling.

If an agent is not available to handle a particular call ACD puts the call into a queue which effectively places the caller on hold. When an agent is available ACD connects the outside trunk line carrying the phone call to one of the agents. More specifically ACD connects the outside trunk line to the trunk line of the selected agent.

When an agent is ready to handle contacts the agent first logs into ACD . This login notifies ACD that the agent is available to take calls. An agent s ACD state changes throughout the workday as the agent performs work activities such as handling calls performing after call work and taking breaks. An example list of states includes available busy after call work and unavailable.

While handling a contact the agent interacts with one or more applications running on workstation . By way of example workstation applications could provide the agent with access to customer records product information ordering status and transaction history. The applications may access one or more business databases not shown via the network .

Call center also includes a work force management system WFMS . WFMS performs many functions. One such function is providing a contact center supervisor or manager with information about agents and contacts both historical and real time. Another function is supplying the supervisor with information on how well each agent complies with contact center policies. Yet another function is calculating staffing levels and creating agent schedules based on historical patterns of incoming contacts. The functionality of the entire work force management system WFMS is typically divided among several applications some of which have a user interface component and WFMS comprises the suite of applications.

In the environment described above the workers assigned to shifts are contact center agents. However the scheduling methods and systems described herein are also applicable to scheduling other kinds of workers in other types of work environments. Therefore the remaining embodiments will refer to workers rather than agents.

Two different types of templates can be created in the embodiment in . Voluntary time off VTO templates V describe an alteration that truncates an already scheduled shift and adds a new time off activity located adjacent to that shift. Overtime OT templates describe an alteration that extends an already scheduled shift to include a new work activity where the extension may allow a gap between the original shift and the overtime.

Schedule alteration templates are provided as input to a scheduler component along with an existing schedule . Scheduler produces an updated schedule that attempts to optimize goals while meeting a workload forecast and a set of work rule constraints .

Processing then continues at block where a selection of an existing schedule is received. Next block options specific to the selected schedule are received. In one embodiment these schedule specific options include maximum OT VTO per day and or per week Add OT Placement Before After shift and Add VTO Placement Start Of End Of shift . Block is optional. At block an updated schedule is produced based on the received templates and options if present . Updated schedule is produced in accordance with constraints and goals . As will be described in further detail in connection with and A D updated schedule is calculated by generating schedulable objects and then applying the objects to existing schedule .

A schedule alteration template describes possible alterations to any already scheduled shift but is not associated with any particular shift . Scheduler creates one or more schedulable objects based on each schedule alteration template such that attributes in a schedulable object are initialized from corresponding attributes in the template . Each schedulable object is associated with a shift and represents a possible change in the schedule adjacent to that shift .

Scheduler also creates a set or domain of bindings for each shift . A binding represents a time slot in or adjacent to an employee shift. As can be seen in a schedulable object can possibly be bound to more than one binding . Scheduler chooses one optimal binding for each schedulable object . By selecting a binding for a schedulable object scheduler in effect assigns the work activity for that one object derived from a template to the time slot specified in the binding. The process of creating schedulable objects creating bindings and choosing optimal bindings will now be discussed in connection with .

For templates with a placement value of either BeginningOfShift or EndOfShift scheduler creates a set of schedulable objects associated with those templates. As the name suggests these values specify where the object is scheduled in relation to the shift see the discussion of for more discussion of these placement values. Specifically one object is created for each worker shift associated with the template . In the example scenario of template B is associated with two shifts John M9 5 and John T10 6 so two objects A and B are created from template B. In this example the template shift association is indirect through a template worker relationship and a worker shift relationship however another embodiment using a direct association between template and shift is contemplated. One of ordinary skill in the art should understand by viewing how the remaining objects C G are created from the other two templates in a similar manner.

If the template has a placement value of Either then the above process is repeated to create two such sets of objects. One of the sets gets a placement value of BeginningOfShift and the other corresponding set gets a placement value of EndOfShift . In the simple example scenario of none of the three templates OB VB VA has a placement value of Either .

Returning to the flowchart in after schedulable objects are created in block processing continues at block where a set or domain of potential bindings is created for schedulable objects based on attributes such as start time end time gap and duration. Values for these schedulable object attributes are derived from corresponding attributes in template . Creation of bindings will now be discussed in connection with .

A schedulable object is associated with a worker shift which has a start time and an end time. Bindings also have a start time and an end time. Bindings are created for a particular shift starting with the time slot adjacent to the shift start or end depending on whether the Action attribute in object is Beginning or End . The number of bindings depends on the Duration attribute in the object enough bindings are created to span the time specified by the Duration attribute. However these bindings are also constrained by work rules which may limit the start or end time of a shift e.g. a particular shift cannot starts before 6 AM or end after 9 PM .

In the example of the object A John M9 5 OT Before has a Duration of 2 hours and is associated with shift M. Therefore three bindings are created A is a one hour slot from 8 9 AM B is a one hour slot from 7 8 AM and C is a single two hour slot from 7 9 AM. In addition a no time binding is created D representing the possibility that no object will be scheduled in this slot. The time slot granularity chosen in is merely an example and the time slot granularity of the bindings can be a larger or a smaller value.

Viewing one of ordinary skill in the art should understand how bindings for remaining objects B G are created in a similar manner binding A D for object B John T10 6 OT Begin binding A B for object C John M9 5 VTO Begin binding A B for object D John T10 6 VTO Begin binding A B for object E John M9 5 VTO End binding A B for object F John T10 6 VTO End and binding A D for object G Fred T 11 7 VTO End .

In this example the domain of bindings for a schedulable object includes at least one binding with a time slot adjacent to the shift because the Gap field in each object is zero. The Gap field in a schedulable object is set from the template. In contrast the bindings created for objects that have a non zero Gap field do not include a time slot adjacent to the shift. Instead the closest time slot is separated from the shift by the value specified by Gap. In this example the Gaps are fixed values but in other embodiments Gap is a range which results in the creation of additional bindings.

Returning to the flowchart in after schedulable objects are created in block processing continues at block where OT objects are ordered according to worker specific scheduling preferences. As described earlier in connection with scheduler receives OT and VTO preferences e.g. Prefer Don t Want Any set by workers. Thus schedulable objects associated with workers that prefer OT are first and schedulable objects associated with workers that do not want OT are last with schedulable objects associated with workers with no preference in the middle.

Next at block the optimal binding for each OT object is selected. The techniques that schedulers use to produce an optimal schedule for a given set of inputs workload constraints and goals should be understood by a person of ordinary skill in the art. Such techniques include but are not limited to local search simulated annealing and heuristics. The use of schedulable objects and bindings should also be understood by such a person.

Since the previous step was ordered by worker the effect is to choose bindings for all the OT objects of the same type Begin or End for one worker before moving to the next worker. When bindings for all objects have been chosen the ordering and selection blocks and are repeated for VTO objects. This process can be extended to support schedulable objects of other types as well.

The systems and methods for automatic scheduling of a workforce can be implemented in software hardware or a combination thereof. In some embodiments the system and or method is implemented in software that is stored in a memory and that is executed by a suitable microprocessor P situated in a computing device. However the systems and methods can be embodied in any computer readable medium for use by or in connection with an instruction execution system apparatus or device. Such instruction execution systems include any computer based system processor containing system or other system that can fetch and execute the instructions from the instruction execution system. In the context of this disclosure a computer readable medium can be any means that can contain or store the program for use by or in connection with the instruction execution system. The computer readable medium can be for example but not limited to a system that is based on electronic magnetic optical electromagnetic or semiconductor technology.

Specific examples of a computer readable medium using electronic technology would include but are not limited to the following an electrical connection electronic having one or more wires a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory . A specific example using magnetic technology includes but is not limited to a portable computer diskette. Specific examples using optical technology includes but are not limited to a portable compact disk read only memory CD ROM . In addition the functionality could be implemented in logic embodied in hardware or software configured media.

Any process descriptions or blocks in flowcharts should be understood as representing modules segments or portions of code which include one or more executable instructions for implementing specific logical functions or steps in the process. As would be understood by those of ordinary skill in the art of the software development alternate embodiments are also included within the scope of the disclosure. In these alternate embodiments functions may be executed out of order from that shown or discussed including substantially concurrently or in reverse order depending on the functionality involved.

This description has been presented for purposes of illustration and description. It is not intended to be exhaustive or to limit the disclosure to the precise forms disclosed. Obvious modifications or variations are possible in light of the above teachings. The embodiments discussed however were chosen to illustrate the principles of the disclosure and its practical application. The disclosure is thus intended to enable one of ordinary skill in the art to use the disclosure in various embodiments and with various modifications as are suited to the particular use contemplated. All such modifications and variation are within the scope of this disclosure as determined by the appended claims when interpreted in accordance with the breadth to which they are fairly and legally entitled.

