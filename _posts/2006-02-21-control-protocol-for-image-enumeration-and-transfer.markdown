---

title: Control protocol for image enumeration and transfer
abstract: A control protocol is used to deploy and install an operating system image to a client. The data structure of the protocol includes an operation code corresponding to an operation associated with the deployment and installation of an operating system image to a client. When the server receives a request packet, the server parses the request and sends the parsed request to the provider. The provider then executes the operation associated with the operation code and generates a return value. The return value is sent to the server. The server then composes a rely packet including the return value and transmits the reply packet to the client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07631175&OS=07631175&RS=07631175
owner: Microsoft Corporation
number: 07631175
owner_city: Redmond
owner_country: US
publication_date: 20060221
---
When deploying an operating system to multiple computing devices it is beneficial to utilize tools to automate the deployment process. For example in a computing device manufacturing process an original equipment manufacturer OEM typically installs an operating system OS with standard configurations or a standard OS to the computing device before customers purchase them at retail stores or over the Internet. In a corporate setting a business may need to upgrade a number of identically configured machines simultaneously and efficiently using such automated process.

Typically the standard OS is deployed and installed automatically to the computing devices by copying or duplicating a pre determined OS image to the computing device for booting the computing device. For example the automated deployment and installation process would install the OS with standard configurations on a memory storage area of each of the computing devices via a wired or a wireless connection. Upgrades to OS or other applications may be installed in a similar fashion.

However with the ongoing advancements and developments in storage medium and computing device processing powers installing a standard set of OS image to a number of computing devices no longer accounts for proper configuration of the computing devices.

One available system Pre Boot Execution Environment PXE protocol allows a client to obtain an OS image from a PXE server in a networked environment. The client initiates the PXE process by broadcasting a PXE request in the networked environment. However any PXE server listening for a request can read and choose to respond to the client. A disadvantage results if more than one PXE server exists in the networked environment because the client will be serviced by whichever PXE server responds the quickest to the client request. For example if two PXE servers are in the networked environment the first configured with application logic to service any type of device e.g. personal computers point of sale devices and network servers and a second configured to service point of sale devices it is not possible to determine which PXE server will be the first to respond to the request from a point of sale device client. Therefore using the PXE protocol it is possible that the point of sale device may incorrectly receive a boot image for a personal computer.

In addition not only does an entity needs to deploy an OS on a number of different classes of computing devices from personal digital assistant PDA to server computers to point of sale terminals the entity also needs to consider that each class of the computing devices may require particular configurations due to hardware components. For example a PDA X with a chip having a processing power of 500 MHz and a storage memory capacity of 5 GB may require a different OS image from another PDA Y in the same production line with a chip having a processing power of 733 MHz and a storage memory capacity of 10 GB. As such the existing OS image deployment systems of installing an OS with standard configuration or a standard OS image would not properly configure the PDA Y because both PDA X and PDA Y would receive the same OS image for booting the devices. In addition current OS image deployment systems lack the ability to properly detect differences in hardware components in the computing devices to efficiently deploy and install appropriate OS images to the computing devices.

Embodiments of the invention include methods for a control protocol used to deploy and install an operating system image to a client. When the server receives a request packet associated with deploying and installing the operating system image from the client the server parses the request packet and sends the parsed request to a provider. The request packet includes an operation code corresponding to an operation associated with deploying and installing the operating system image. The provider executes the operation associated with an operation code included in the parsed request. Once the provider generates a response to the request the response is sent to the server. The server then composes a reply packet and sends the reply packet to the client.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Referring to the system illustrates an exemplary embodiment in which aspects of the invention may be implemented. A server which may be one of a plurality of servers includes components that enable the deployment of an operating system OS to a plurality of clients via a networked environment . In one embodiment the server deploys the OS such as MAC OS X UNIX Linux or Windows Vista operating system to the clients . The server and the clients may communicate via a number of underlying network transport mechanisms available in the networked environment . In one embodiment the transport mechanisms include Transmission Control Protocol TCP Trivial File Transfer Protocol TFTP User Datagram Protocol UDP Remote Procedure Call RPC File Transfer Protocol FTP HyperText Transfer Protocol HTTP multicast over any of these protocols or the like. In one example server in system includes a server described in .

The clients include one or more computing devices such as a desktop computer a laptop computer a personal digital assistant PDA or other devices. In another embodiment server and each of the clients implement at least a part of a computer depicted in .

In one example system may be used in a pre boot execution environment PXE . For example server may be a PXE server which watches for dynamic host configuration protocol DHCP discovery requests that include a special tag identifying the client as a PXE client. If the discovery request includes the tag the PXE server replies to the client with configuration information including the name of a boot image file which may include an OS boot image pre OS image file pre boot agents e.g. computer executable instructions for scanning clients for viruses before installing an OS . The boot image file may transferred to clients using TFTP and the transferred file may be used to boot the clients .

Referring now to an exemplary embodiment of the server of the invention is shown. The server includes one or more components such as a transport layer a PXE server and a Control Protocol Server . The transport layer handles the details associated with communicating with clients and provides a transport independent communication mechanism to the PXE Server and the Control Protocol Server . In one embodiment the transport layer may communicate with the clients utilizing a variety of network protocols including Transmission Control Protocol TCP User Datagram Protocol UDP Remote Procedure Call RPC and HyperText Transfer Protocol HTTP and multicast over any of theses protocols.

The PXE server accepts PXE requests from the clients . PXE is one of the components of the Wired for Management WfM specification that allows the clients to boot from the PXE server on a network prior to booting an operating system from a hard drive local to the clients . After receiving the PXE request from the client the PXE server passes the request to a PXE provider . The PXE provider is a component containing the application logic to formulate a response to the clients . In one embodiment the PXE provider is Boot Information Negotiation Layer A BINL . The responsibilities of the BINL service include answering the request querying a directory service on behalf of the clients as well ensuring that the correct policy and configuration settings are applied to the clients during the operating system installation. In another embodiment the PXE provider includes two or more PXE providers each with distinct application logic.

The Control Protocol Server accepts requests from a reduced operating system environment. The reduced operating system aids in the deployment of the operating system. In one embodiment the Control Protocol Server accepts Microsoft Windows Preinstallation Environment WinPE requests. After receiving the request from the clients the Control Protocol Server passes the request to a Control Protocol Provider . The Control Protocol Provider is a component containing the application logic to formulate a response to the clients . In one embodiment the Control Protocol Provider includes a plurality of providers such as A and B.

It is also to be understood that additional components connected wired or wirelessly to the server may be added to perform operations of the transport layer the PXE server and the control protocol server .

Initially a client e.g. client attempts to request to be booted by a server e.g. PXE server . The request is received by the server which may be coupled with one or more other servers e.g. a Control Protocol Server or PXE providers for responding to the request.

In existing OS boot image file deployment systems the server responds to the request by sending a standard or a predetermined OS boot image file to the client. For example suppose the clients sending the requests include computing devices with 32 bit architecture and computing devices with 64 bit architecture. Current deployment systems would regardless of the different computing architecture configurations respond the request by sending a generic or standard OS boot image file. As such all clients either with 32 bit or 64 bit architecture will receive the same boot image file e.g. 32 bit boot image file . As such under current deployment systems the computing devices with 64 bit architecture need to perform additional evaluation and detection before sending another request to the server for a more appropriate OS boot image file the 64 bit OS image before the computing devices can boot accordingly.

In the server is configured to deploy an operating system image to the client via a control protocol. In one embodiment the server deploys a Windows operating system. The server receives a request packet from the client . The request packet includes an operation code corresponding to an operation that server is to perform. Operations are related to selecting and installing an operating system image on the client . The server parses the request packet and sends the parsed request to a provider . The provider executes the operation and formulates a response. The provider then sends the response to the server . The server composes a reply packet including the received response and sends the reply packet to the client .

The client receives a library of functions from the server . The library of functions allow the client to communicate with the server via the control protocol. In one embodiment the library includes functions to initialize the data structure create the data structure parse the received data structure release the data structure add a variable to the data structure and delete a variable from the data structure.

In one embodiment the control protocol allows for the transportation of data related to all facets of the operating system image deployment including image metadata the image data itself and unattended information. For example it is common for organizations to place operating system images on a network share on a server. To install these images the client machines boot to gain network access via PXE or other bootable media e.g. CDROM DVD or floppy to connect to the network share containing the operating system image. Once connected the client machine may discover what operating system images are available on the share select an appropriate operating system image to install and install the appropriate operating system image via the control protocol. The data transmitted over the control protocol may include the types of operating system images that are available on the share image enumeration the properties of the operating system images image metadata adjunct files to the operating system image like an unattended setup files and the operating system image itself.

In one embodiment the control protocol is independent of the underlying transport layer so that there is flexibility in the type of solution that one could implement. For example suppose the underlying transport is HTTP HyperText Transfer Protocol . Utilizing the control protocol a web application may be developed that directs boot clients on the Internet via a web page to a centrally located server. From there the operating system image enumeration and transport could occur via HTTP. In another example suppose a datacenter contains a thousand machines that need to install operating system images concurrently. The underlying transport protocol of the control protocol is implemented in unicast. The control protocol can be used to drive a multicast transport protocol to transfer the operating system image. Thus the multicast transport protocol such as multicast over TFTP Trivial File Transfer Protocol may be used to transfer the operating system image to save available bandwidth while installing the operating system image files on the machines.

An application programming interface API is built on the control protocol. The control protocol is session less session management is built on top of the control protocol. Additionally the control protocol is built on a client driven request response model. The control protocol abstracts a transport layer from the API layer . Thus if a new network protocol is implemented in the transport layer no changes will need to be made to the API layer . Excerpts from an exemplary API for the control protocol is shown in Appendix A.

The transport layer is responsible for handling details associated with communicating a client and provides transport independent communication mechanism to control protocol server . In one embodiment the transport layer can support one or more network protocols including TFTP Trivial File Transfer Protocol Transmission Control Protocol TCP User Datagram Protocol UDP remote procedure call RPC HyperText Transfer Protocol HTTP .

In one embodiment the library of functions provides functions to client to construct control protocol request packets to send control protocol packets to the server and to parse control protocol reply packets received form the server . Because the control protocol is session less the library does not include functions for session management. The library of functions provides functions to server to parse control protocol request packets received form the client to construct control protocol reply packets and to send control protocol reply packets to the client . Excerpts from an exemplary API for the control protocol is shown in Appendix A.

In an exemplary data structure of a packet of the control protocol is shown. The packet includes fixed fields and variable fields . The fixed fields are included with every packet . The variable fields are associated with zero or more parameters required to execute the operation indicated by the operation code represented by the code value stored in the packet at . A set of variable fields is included in the packet for each required parameter.

At a total size of the packet in bytes is stored. At a version number of the control protocol is stored. At an indicator is stored indicating if the packet is a request packet or a reply packet. If the request packet is indicated at then a code value representing an operation code corresponding to an operation to be performed by server is stored at . If the reply packet is indicated at then a return value of the operation performed by the server is stored at . Below is one example of operation codes being defined in a provider that utilizes the control protocol 

The packet may contain variable fields associated with zero or more parameters. The number of parameters contained in the packet is stored at . The parameters are the arguments required by the operation. A value representing the name of the parameter is stored at . A value representing the type of the parameter is stored at . In one embodiment a parameter may be one of the following types C type unsigned long integer C type unsigned short integer C type byte C type long unsigned 64 bit integer C type pointer to NULL terminated ANSI string C type pointer to a NULL terminated Unicode string and a C type pointer to memory location which contains raw data.

A value representing the type of the length of the parameter is stored at . A value representing the size of the array if the parameter is an array is stored at . A value representing the value of the parameter is stored at

The fields associated with a parameter are repeated in order for each parameter included the packet . For example if the number of parameters in the packet is two then the fields associated with the first parameter will added in order to the packet . The fields associated with the second parameter will be added to the packet after the fields associated with the first parameter.

In an embodiment of the control protocol server is shown. In operation at the server receives a request packet from the client. At the server parses the request packet. At the server sends the parsed request to the provider. The provider performs the operation requested by the client and formulates a response. The server receives the provider response at . At the server composes a reply packet including the received response. At the reply packet is sent to the client.

In an embodiment of the control protocol client is shown. In operation at the client identifies an operation code corresponding to an operation to be performed on the control protocol server. At the client composes a request packet including the identified operation code. At the client sends the request packet to the server. The client receives the reply packet at the reply packet including a return value indicating the result of the requested operation. At the client parses the reply packet.

Referring now to one embodiment of a general purpose computing device in the form of a computer is illustrated. A computer such as the computer is suitable for use in the other figures illustrated and described herein such as . Computer has one or more processors or processing units and a system memory . In the illustrated embodiment a system bus couples various system components including the system memory to the processors . The bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

The computer typically has at least some form of computer readable media. Computer readable media which include both volatile and nonvolatile media removable and non removable media may be any available medium that may be accessed by computer . By way of example and not limitation computer readable media comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer storage media include RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that may be used to store the desired information and that may be accessed by computer . Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. Those skilled in the art are familiar with the modulated data signal which has one or more of its characteristics set or changed in such a manner as to encode information in the signal. Wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media are examples of communication media. Combinations of any of the above are also included within the scope of computer readable media.

The system memory includes computer storage media in the form of removable and or non removable volatile and or nonvolatile memory. In the illustrated embodiment system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. For example illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media. also shows a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that may be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive and magnetic disk drive and optical disk drive are typically connected to the system bus by a non volatile memory interface such as interface .

The drives or other mass storage devices and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components may either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies.

A user may enter commands and information into computer through input devices or user interface selection devices such as a keyboard and a pointing device e.g. a mouse trackball pen or touch pad . Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are connected to processing unit through a user input interface that is coupled to system bus but may be connected by other interface and bus structures such as a parallel port game port or a Universal Serial Bus USB . A monitor or other type of display device is also connected to system bus via an interface such as a video interface . In addition to the monitor computers often include other peripheral output devices not shown such as a printer and speakers which may be connected through an output peripheral interface not shown .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to computer . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. LAN and or WAN may be a wired network a wireless network a combination thereof and so on. Such networking environments are commonplace in offices enterprise wide computer networks intranets and global computer networks e.g. the Internet .

When used in a local area networking environment computer is connected to the LAN through a network interface or adapter . When used in a wide area networking environment computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external is connected to system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to computer or portions thereof may be stored in a remote memory storage device not shown . By way of example and not limitation illustrates remote application programs as residing on the memory device. The network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Generally the data processors of computer are programmed by means of instructions stored at different times in the various computer readable storage media of the computer. Programs and operating systems are typically distributed for example on floppy disks or CD ROMs. From there they are installed or loaded into the secondary memory of a computer. At execution they are loaded at least partially into the computer s primary electronic memory. Aspects of the invention described herein includes these and other various types of computer readable storage media when such media contain instructions or programs for implementing the steps described below in conjunction with a microprocessor or other data processor. Further aspects of the invention include the computer itself when programmed according to the methods and techniques described herein.

For purposes of illustration programs and other executable program components such as the operating system are illustrated herein as discrete blocks. It is recognized however that such programs and components reside at various times in different storage components of the computer and are executed by the data processor s of the computer.

Although described in connection with an exemplary computing system environment including computer embodiments of the invention are operational with numerous other general purpose or special purpose computing system environments or configurations. The computing system environment is not intended to suggest any limitation as to the scope of use or functionality of any aspect of the invention. Moreover the computing system environment should not be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment. Examples of well known computing systems environments and or configurations that may be suitable for use with aspects of the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics mobile telephones network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

Embodiments of the invention may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include but are not limited to routines programs objects components and data structures that perform particular tasks or implement particular abstract data types. Aspects of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

An interface in the context of a software architecture includes a software module component code portion or other sequence of computer executable instructions. The interface includes for example a first module accessing a second module to perform computing tasks on behalf of the first module. The first and second modules include in one example application programming interfaces APIs such as provided by operating systems component object model COM interfaces e.g. for peer to peer application communication and extensible markup language metadata interchange format XMI interfaces e.g. for communication between web services .

The interface may be a tightly coupled synchronous implementation such as in Java 2 Platform Enterprise Edition J2EE COM or distributed COM DCOM examples. Alternatively or in addition the interface may be a loosely coupled asynchronous implementation such as in a web service e.g. using the simple object access protocol . In general the interface includes any combination of the following characteristics tightly coupled loosely coupled synchronous and asynchronous. Further the interface may conform to a standard protocol a proprietary protocol or any combination of standard and proprietary protocols.

The interfaces described herein may all be part of a single interface or may be implemented as separate interfaces or any combination therein. The interfaces may execute locally or remotely to provide functionality. Further the interfaces may include additional or less functionality than illustrated or described herein.

In operation computer executes computer executable instructions such as those illustrated in the figures to implement aspects of the invention.

The order of execution or performance of the operations in embodiments of the invention illustrated and described herein is not essential unless otherwise specified. That is the operations may be performed in any order unless otherwise specified and embodiments of the invention may include additional or fewer operations than those disclosed herein. For example it is contemplated that executing or performing a particular operation before contemporaneously with or after another operation is within the scope of aspects of the invention.

Embodiments of the invention may be implemented with computer executable instructions. The computer executable instructions may be organized into one or more computer executable components or modules. Aspects of the invention may be implemented with any number and organization of such components or modules. For example aspects of the invention are not limited to the specific computer executable instructions or the specific components or modules illustrated in the figures and described herein. Other embodiments of the invention may include different computer executable instructions or components having more or less functionality than illustrated and described herein.

When introducing elements of aspects of the invention or the embodiments thereof the articles a an the and said are intended to mean that there are one or more of the elements. The terms comprising including and having are intended to be inclusive and mean that there may be additional elements other than the listed elements.

As various changes could be made in the above constructions products and methods without departing from the scope of aspects of the invention it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.

Excerpts from an exemplary application programming interface for the control protocol is shown below.

If function success it should return ERROR SUCCESS. On failure appropriate Win32 Error Code as defined in winerror.h should be returned.

pLocalEndpoint is always set to NULL and pRemoteEndpoint is used to specify the remote address of server.

pOp parameter is used to specify retry count and timeout value of the request. If this parameter is NULL request is sent to server once and waits for INFINITE time for reply.

On success returns non NULL pointer to allocate memory. On failure NULL is returned use GetLastError to get extended error information.

If function success it should return ERROR SUCCESS. On failure appropriate Win32 Error Code as defined in winerror.h should be returned.

WDS Control Protocol Library WDSCPL provides functions to construct request packets send it to server and parse reply. WDSCSL uses WDSCSL to communicate with server and requires users to initialize WDSCSL before using WDSCPL. WDSCPL should be used on server end as well to parse the received packets.

WDSCPL provides functions to prepare a request and to parse a response. Clients should use these functions and never create the packet by hand or parse the response directly.

If function success it should return ERROR SUCCESS. On failure appropriate Win32 Error Code as defined in winerror.h should be returned.

WDSCPL validates the received packet and returns a handle which is used to parse out the variables stored in packet. If the packet is not valid i.e. invalid header or data then ERROR INVALID DATA is returned.

This function is used by both client and server. Server uses this function to parse the received request from client and client uses it to parse the reply received from server. When done using the packet the handle must be released using WdsCpPacketRelease.

If function success it should return ERROR SUCCESS. On failure appropriate Win32 Error Code as defined in winerror.h should be returned.

If the handle was returned by WdsCpRecvPacketInitialize then the function only releases the handle caller is still responsible for releasing the memory of the received packet.

For WdsCpPacketInitialize only the handle is released callers are still required to release any packets returned by WdsCpPacketGetBuffer.

This function is used to construct a Control Protocol packet which can be sent to sever for execution.

If function success it should return ERROR SUCCESS. On failure appropriate Win32 Error Code as defined in winerror.h should be returned.

Callers use this function when they have added all the required parameters and want to send the require to server.

If function success it returns a pointer to allocated memory where the value can be stored by using the returned pointer. In case of an error NULL is returned callers should use GetLastError to determine the cause of failure.

If function success it should return ERROR SUCCESS. On failure appropriate Win32 Error Code as defined in winerror.h should be returned.

If all checks are validated ERROR SUCCESS is returned. ERROR INVALID DATA is returned if specified checks fail.

This function is used by developers to verify a variable type length and array size using just one function call.

If function success it should return ERROR SUCCESS. On failure appropriate Win32 Error Code as defined in winerror.h should be returned.

