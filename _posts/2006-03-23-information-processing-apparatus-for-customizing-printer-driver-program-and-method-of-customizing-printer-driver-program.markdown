---

title: Information processing apparatus for customizing printer driver program, and method of customizing printer driver program
abstract: According to this invention, an information processing apparatus which customizes a device driver for controlling an image forming apparatus includes an issuing unit which issues identification information for specifying a customized driver, and a storage unit which stores, in association with the customized driver, the identification information issued by the issuing unit.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08656416&OS=08656416&RS=08656416
owner: Canon Kabushiki Kaisha
number: 08656416
owner_city: Tokyo
owner_country: JP
publication_date: 20060323
---
The present invention relates to an information processing technique of customizing a device driver such as a printer driver.

There has conventionally been a demand to customize in accordance with the installation environment of a printing system a printer driver program to be referred to as a printer driver hereinafter which controls a printer for use. Particularly in recent years the use mode of the printer is diversified depending on the customer and the demand to customize the printer driver is increasing.

In order to meet this demand the vendor of a printer driver provides the user with a customization system even for a conventional printer driver. An example of an item customizable by the customization system is a limitation on changing print settings by the user. In general the user can change print setting values from the user interface to be simply referred to as a UI hereinafter of the printer driver. However the printer driver can be customized to limit a change of a designated item so as to inhibit the user from changing print setting values. In this specification the limitation on changing print settings will be called input control. Print setting items subjected to input control can be designated when the printer driver is customized.

A printer driver customized by a conventional customization system is assigned a unique code custom driver code for identifying the printer driver as a customized one. The custom driver code cannot be referred to from another program module or the like. It cannot be externally determined whether the computer uses the customized driver.

Assume that there is a network system which obliges a connected computer to use a customized printer driver. Even if the customized printer driver is used it is difficult for the system administrator to know the use of the customized printer driver i.e. it is difficult to manage the system. In some cases an installed driver is overwritten by installing a driver of a new version using an installer. Also at this time the installer cannot grasp that the installed driver is a customized one. For this reason the new driver cannot inherit information to be referred to as customization information unique to customized items.

The following problem also occurs. Patent reference 3 proposes a driver installer which prompts the user to select limitations on functions of a driver in installing the driver and interactively sets functions under the selected limitations.

Patent reference 2 proposes a method of simplifying customization operation. More specifically the user registers as a parameter file in a server the values of various parameters used for functions of a printer driver. After the end of printer driver install processing by the install processing unit of the installer a parameter request unit requests parameter values of the server. A parameter receiving unit receives the parameter values from the server and transfers them to the parameter change unit of the printer driver to change the parameter values.

The installer in patent reference 3 must change information on print settings to be also referred to action settings for each computer to values suitable for the configuration or environment. This installer is not suited to installation of many computers or centralized management by the system administrator or the like. According to the method in patent reference 3 the print function of a printer driver installed in the PC of each user cannot be limited at the discretion of the system administrator IT manager .

According to the method in patent reference 2 no driver can be installed unless a complicated parameter file is prepared in advance. There must be provided an environment in which a server and client can communicate with each other via a network. The system environment is limited.

The present invention has been made in consideration of the conventional situation and has as its object to provide an information processing technique capable of referring to a registry from an external program and determining whether an installed printer driver is a customized one.

It is another object of the present invention to provide an information processing technique of when updating a printer driver by an installer allowing the installer to determine whether the driver to be updated is a customized one and accurately inheriting customization information.

It is still another object of the present invention to easily customize a device driver especially a printer driver to be installed in a plurality of computers in accordance with the environment or the configuration of a device for use.

It is still another object of the present invention to limit a change of detailed settings related to a stamp to be overlaid on a print image among action settings. This object is to limit a change of default settings of a stamp such as a setting of whether to enable or disable overlay of a stamp image and the setting of a stamp list a list of character strings and images such as eyes only confidential draft and copy .

A so called favorite also called a profile is sometimes prepared in action setting information of a device driver by registering the values of the action setting information at once. The favorite is prepared as a file of parameters which form the action setting information. By designating a favorite file to be applied parameter values contained in the action setting information are replaced at once. The favorite may also be contained in defaults of the action setting information.

However the favorite prepared as a default is limited to only one set. If default action settings are replaced with action settings registered in the favorite even limitations which are posed on some device functions by default settings may be changed. That is the aim of functional limitations may not be achieved.

It is therefore still another object of the present invention to easily customize a set of action setting information of a device driver i.e. a so called favorite or profile and implement a strict application of limitations on available functions.

In order to achieve the above objects an information processing technique according to the present invention comprises the following arrangement.

That is an information processing apparatus which customizes a device driver for controlling an image forming apparatus comprises issuing means for issuing identification information for specifying a customized driver and storage means for storing the identification information issued by the issuing means in association with the customized driver.

According to the present invention whether an installed printer driver is a customized one can be determined by referring to a registry from an external application tool.

Even when the installer updates a driver it can be determined from the driver information whether the driver is a customized one and customization information can be accurately inherited.

According to the present invention a device driver especially a printer driver to be installed in a plurality of computers can be quickly easily customized in accordance with the environment or the configuration of a device for use.

Editing of default settings associated with a stamp to be overlaid on a print image and the like can be done in accordance with a user s request.

Further the profile of action setting information of a device driver can be easily customized and loopholes in functional limitations through the profile can be prevented.

Other features and advantages of the present invention will be apparent from the following description taken in conjunction with the accompanying drawings in which like reference characters designate the same or similar parts throughout the figures thereof.

A preferred embodiment of the present invention will be described below with reference to the accompanying drawings. The first embodiment will exemplify a method of customizing a printer driver for Windows which is a PC OS Operating System available from Microsoft .

In the host computer a CPU comprehensively controls each device connected to a system bus in accordance with programs stored in a RAM . The RAM also functions as a main memory work area and the like for the CPU . A ROM stores various programs and data. The ROM stores various programs and data and is divided into a font ROM for storing various fonts a program ROM for storing a boot program BIOS and the like and a data ROM for storing various data.

A keyboard controller KBC controls a key input from a keyboard KB or a pointing device mouse not shown . A CRT controller CRTC controls display on a CRT display CRT . A disk controller DKC controls access to an external memory such as a hard disk. A printer controller PRTC is connected to the printer via a bidirectional interface and executes communication control processing with the printer .

The external memory is a hard disk HD MO flexible disk FD or the like. As shown in the external memory stores an operating system program to be referred to as an OS hereinafter various applications e.g. a document processing application program which processes a document containing a figure image text table and the like and a print processing related program . In addition the external memory stores a user file edit file and the like. The print processing related program generates print data described using a page description language and can be utilized commonly by a plurality of printers of the same series. The print processing related program contains a printer control command generation module to be referred to as a printer driver hereinafter and a printer driver UI control module . The hard disk also saves an install set containing a program file and data file for installing a printer driver. The printer driver install set in the first embodiment is information for installing a printer driver in a computer. The printer driver install set may be formed from an install definition file called an inf file for installing a printer driver by using an install program provided by the OS a printer driver information file also called a UPD User interface Printer Description file and a program file such as a printer driver. Alternatively the printer driver install set may be formed from an installer containing a file of the execution form exe file . A set of files prepared by excluding the install definition file from the install set will be called a driver set. The default values initial values of print settings and control display setting information that are designated via a control setting UI to be described later are saved in a printer driver information file UPD file . Parameters for driving control of the printer driver for example print setting information which defines print settings such as the paper size and whether to perform double sided printing are also saved in the external memory and referred to by the printer driver. Information e.g. print settings and control display settings which can be set from a driver UI and customization tool will be called printer properties or simply properties . In particular printer setting information customized by a customization tool according to the first embodiment will be called customization information.

The application which is stored in the external memory and contains a customization tool program to be simply referred to as a customization tool hereinafter according to the first embodiment is loaded into the RAM and executed by the CPU . The CPU executes e.g. outline font rasterization processing to the RAM and enables WYSIWYG What You See Is What You Get on the CRT . The CPU opens various registered windows and executes various data processes on the basis of commands designated with a mouse cursor not shown on the CRT or the like. When the user executes printing he opens a print setting window controlled by the printer driver UI control module and can make settings of a printer and settings of print processing to the printer driver including selection of the print mode. Note that the customization tool is not always executed in a computer in which a printer driver to be customized is installed. It is also possible to execute the customization tool in a computer other than the computer customize the printer driver generate an install set and install it in the computer . In the first embodiment settings in a UI shown in and the like provided by the printer driver will be called print settings and settable items will be called print setting items. Thus print setting items are not always directly associated with printing.

The arrangement of the printer will be explained. A CPU controls the overall action of the printer . A RAM functions as a main memory work area and the like for the CPU and is also used as an output information rasterization area and environment data storing area. The RAM also comprises an NVRAM Non Volatile RAM area and is so constructed as to increase the memory capacity by an optional RAM which is connected to an expansion port not shown . A ROM comprises a font ROM storing various fonts a program ROM storing a control program and the like which are executed by the CPU and a data ROM storing various data. An input unit exchanges data with the host computer . A printing unit interface I F controls an interface with a printing unit serving as a printer engine.

Access to an external memory is controlled by a memory controller MC . The external memory includes a hard disk HD magneto optical disk MO Floppy disk FD and IC card which are connected as options. The external memory stores font data an emulation program form data and the like. When no external memory such as a hard disk is connected the data ROM of the ROM stores information and the like which are used by the host computer . Note that the number of external memories is not limited to one and a plurality of external memories may also be adopted. For example a plurality of external memories which store an optional font card and a program for interpreting the printer control languages of different language systems in addition to built in fonts may be connected. The host computer also referred to as a client PC and a server computer also referred to as a server computer have the same hardware configuration as that of the host computer. Although not shown N host computers may be connected to a network.

An operation unit has an operation panel which accepts a user operation and the operation panel is equipped with an operation switch LED display and the like not shown . The operation unit has an NVRAM Non Volatile RAM not shown and stores printer mode setting information from the operation panel.

The CPU outputs an image signal as output information to the printing unit printer engine via the printing unit interface on the basis of a control program stored in the program ROM of the ROM . The CPU can communicate with the host computer via the input unit . The CPU can receive print data transmitted from the host computer and notify the host computer of information or the like in the printer .

As shown in the application the print processing related program and related data . are loaded into the RAM in addition to a BIOS and the OS . A program to be referred to as a customization tool hereinafter for customizing a driver is also loaded into the RAM . A free memory area is also ensured in the RAM . In this state the application and print processing related program can be executed. Note that the printer driver UI control module in the print processing related program displays a print setting window on the CRT in accordance with a print setting instruction from the user and allows setting by the user using the KB or the like.

In when the user designates open from a menu a dialog not shown for designating the folder of a driver set to be customized is displayed. Through this dialog the user can designate the store destination of the driver to be customized. The designated folder is displayed in a display field and an OS which supports the designated driver set is displayed in a display field . Note that the driver set is saved as an install set together with an inf file which describes install information of the driver. Hence designation of a driver set means designation of an install set.

A list view displays a model name corresponding to a printer driver to be customized. The list view also displays an identification display On for a customized setting. When a check box is checked a button is enabled. When the button is clicked a customization printer driver UI is displayed. On this UI initial values such as the initial values of print settings document properties and the settings printer properties of a device can be set. Note that the document properties and device properties are sometimes called properties at once. Also the properties are sometimes called print settings or print setting information.

When a check box is checked a button is enabled. When the button is clicked a UI for customizing a control display method on the printer driver UI is displayed. Through this UI the control display method on the customization printer driver UI can be set.

When a button is clicked a dialog not shown for designating the creation destination of a customized driver is displayed to allow designating the creation destination of the customized driver.

When a spin box is operated or a value is input the input value is held in a driver information file as specifying information to be referred to as customization code hereinafter for uniquely specifying a customized driver. Note that the specifying information is also called identification information.

When a button is clicked after various settings are made a printer driver which is customized in accordance with the settings is created.

The customization tool functions as the setting unit of the information processing apparatus under the control of the CPU . The setting unit displays on the CRT a setting window for setting document properties and device properties as shown in the UI window in .

Installed printer drivers for Windows NT4.0 and Windows 2000 XP Server 2003 do not simultaneously display in one UI window a document property UI for setting a document and a printer property UI for setting a device. To the contrary a printer driver UI which is displayed by the customization tool according to the embodiment of the present invention is displayed by the customization tool using the module of a printer driver. In this UI the document property UI for setting a document and the printer property UI for setting a device are simultaneously displayed in one UI window . In four UIs i.e. a page setup UI finishing UI paper source UI and print quality UI can be displayed as document property UIs. A device setting UI can be displayed as a printer property UI. Through the UIs to the system administrator or the like can set the initial values of document properties and those of printer properties.

As for a setting not to be customized no setting input from the user is accepted in the UI shown in . Setting items not to be customized are grayed out like a button in so that the user can recognize that these items are not subjected to customization.

A display field concretely represents the setting of the control of a print setting item Job Operations . In the first embodiment one of Enabled normal display Disabled and Hidden can be designated as the control setting. Similarly Enabled Disabled or Hidden can be individually set for the controls of the remaining print setting items thereby controlling display of the document property UI. When the user inputs these settings the customization tool writes information corresponding to the input in a UPD file. When Disabled or Hidden is designated for a given control the control cannot be operated. Hence a print setting using this control cannot be changed. To the contrary when Enabled is designated for a given control a print setting using the control can be changed.

The customization tool functions as the display control unit of the information processing apparatus under the control of the CPU . The display control unit can control on the basis of set document properties including control items whether to enable disable or hide an item in the user interface UI .

The basic action of the customization tool will be explained with reference to the flowchart of . In executing the basic action the CPU of the host computer serves as an operation entity to execute the customization tool. In the following description the customization tool sometimes serves as an execution entity to execute processing. In practice the CPU executes processing.

In step S the user activates the customization tool to perform initialization processing for the customization tool. In step S the customization tool displays the UI window shown in on the CRT . In step S the user designates the install set of a printer driver to be customized from the UI window of . In step S the customization tool checks the designated install set. In the install set check processing the customization tool opens a file inf file which corresponds to the designated driver set and describes install information of the printer driver. From the description contents e.g. the values of signatures and of the opened inf file the customization tool determines whether the OS can support the designated install set and whether the designated printer driver supports customization by the customization tool.

If the Signature setting in a referred inf file represents a character string resource Windows NT the customization tool determines that the driver set is intended for Windows NT4.0 or Windows 2000 XP Server 2003. For a driver set which is determined from the signature to be intended for Windows NT4.0 or Windows 2000 XP Server 2003 the customization tool refers to DISK1 s and in the inf files and in order to narrow down driver sets. If the set character string resource of DISK1 contains NT the customization tool determines that the driver set is intended for Windows NT4.0 and if no NT is contained determines that the driver set is intended for Windows 2000 XP Server 2003.

The inf file of a printer driver which supports customization contains a specific character string resource in order to represent that the printer driver supports customization. The customization tool determines whether the specific character string resource is contained in the inf file of the printer driver and thereby can determine whether the corresponding printer driver supports customization.

Referring back to if the customization tool determines in step S that the printer driver does not support customization NO in S the processing advances to step S to perform error processing and then returns to the install set designation step S . In error processing for example a message which notifies the user that the designated driver set does not support customization is displayed.

If the customization tool determines in step S that the printer driver supports customization YES in S the processing advances to step S. In step S the customization tool controls the CRTC to display the UI windows shown in on the CRT and allow customized settings of the printer driver. The UIs in are displayed by the customization tool using a printer driver UI module. Settings input via the UIs in are customized data. The customized data are saved in a UPD file serving as a file readable by the printer driver. Upon installation the printer driver loads setting values from the UPD file. The printer driver reflects the customized setting values of the UPD file on the print setting items of the printer driver. For example preset print setting values double sided in and the like which are often used are reflected in the printer driver in advance. The control of the print setting item is displayed in accordance with designation in the UI of . By only installing a customized driver often used print setting values and customized default values are set in the printer driver. Not only the values of print setting items but also controls for operating print setting items are customized.

Through the UI windows in settings associated with customization of the printer driver are made to designate customization S . Then the customization tool creates a customized driver set on the basis of the contents customized data designated in the UI windows. Note that the customized driver set is also called a customized driver. In the customized driver no program code of the driver is changed but the default values of print setting items and whether to enable or disable changing the default values are customized. In step S setting information the default values of print settings display designation of each control and the like of the customized printer driver is saved in the UPD file. An install set containing the UPD file printer driver program printer driver UI control program and the like is created.

The customization tool is executed by the CPU and functions as a customized driver generation unit. The customized driver generation unit generates a customized driver by writing set document properties or device properties in the printer driver information file UPD file of the printer driver device driver .

More specifically in customized driver creation processing the customization tool copies an install set to be customized to a location creation destination where the customized driver is to be saved. After that the customization tool writes customized data in the printer driver information file UPD file contained in the install set which is copied to the creation destination. As a result the customized driver is created. Note that the customized data are setting values input by the user via the UIs in that are provided by the customization tool.

A UPD file exists for each device driver printer driver for each model and can be customized in a different way for each model. For example a customized driver set corresponding to a given model can be used to customize a driver of another model. Since the ID definition uses a customization ID a printer driver of a new version can inherit the settings of a previously customized printer driver.

Upon installation or initial activation a customized printer driver loads a UPD file which describes customized data and loads the data which is stored in correspondence with a predetermined ID of the ID definition of the UPD file. Assume that a UPD file created by the customization tool stores in the ID definition an ID CUSTOMIZED and an address X representing the storage location of the data.

When the ID information CUSTOMIZED is stored in the ID definition of an open UPD file upon the completion of installation or upon initial activation the customization compatible printer driver reads out the address X corresponding to the information. Subsequently the printer driver further reads out the data structure of a device mode serving as actual driver setting data from the data stored at the address X. In this case the address X may be an absolute address. Alternatively the start address of the data may be stored in the header and an offset address from the start address of the data may be set as the address X.

The customization tool is executed by the CPU and functions as a display control unit for displaying a customization UI. The display control unit can display a user interface on the CRT by referring to the information file of the printer driver upon activation of the customization tool.

In the first embodiment the customization tool writes as customized data in the UPD file i default value data data set from the UIs to in associated with document properties for setting a document ii default value data set from the UI in associated with printer properties for setting a device and iii data data set from the UI window on associated with the control display method on the document property UI. Upon the completion of installation or upon the activation the customized printer driver loads the UPD file created by the customization tool and acts on the basis of the customization information. Accordingly the action environment of the customized printer driver can be easily constructed.

Referring back to if the user designates the end of processing S after the customized driver is created S the action of the customization tool ends.

Processing of displaying a printer driver customization UI by the customization tool which is executed by the CPU will be explained with reference to the flowchart of . In executing this processing the customization tool executed by the CPU of the host computer serves as an operation entity. The processing in is executed in step S of .

When the button in is clicked the customization tool specifies on the basis of module description information contained in an inf file a module which performs printer driver UI processing. The customization tool loads the specified UI module to the memory so that the UI module can be called from the customization tool S . For example the printer driver UI control module in is loaded into the memory.

In step S the customization tool acquires the address of the export function of the printer driver S . Note that the export function is a call port for calling a function provided by a module from outside the module. For example the printer driver UI control module defines an export function for externally calling a function of displaying a property sheet. After that the customization tool initializes a CSPL structure not shown used to exchange information between the customization tool and a customization compatible printer driver S . The CSPL structure is used to save print setting information including control display designation of the printer driver and option setting information related to optional devices such as a finisher. The CSPL structure is data for reading out by the customization tool print setting values and the like which are input via the printer driver UI control module. The CSPL structure is configured to allow the customization tool to read out data. The CSPL structure can save information which is saved in a DeviceOption structure and Devmode structure for saving printer driver setting information. The CSPL structure can therefore be implemented by defining for example a data structure obtained by concatenating the DeviceOption structure and Devmode structure. The CSPL structure saves various types of information such as the control settings of the printer driver UI and default values. The CSPL structure can save information input by the customization tool even when no corresponding printer driver is installed.

In step S the customization tool displays the property sheet customization driver UI . An outline of processing in step S is shown in . At this time a property sheet display function is called so that the property pages of document properties and printer properties are displayed in one UI window to simultaneously customize the document properties and printer properties. The function can be called from the address acquired in step S as an entry. The called function may also be determined in advance and described in an inf file. Alternatively a name or the like may be assigned to a function under a predetermined rule to determine the display function of a property sheet from the name. Note that the property sheet of each item in can be displayed by the printer driver UI control module but the UI in may not be displayed by the printer driver. In this case the UI in prepares a function of displaying this UI for the customization tool. In the first embodiment each sheet of the UI in is also displayed by the printer driver UI control module. The customization tool implements the display by calling a corresponding function.

When the customization driver UI is closed by the user information set on the customization driver UI is held by the CSPL structure. The customization tool acquires input printer driver information from the CSPL structure including the DeviceOption structure and Devmode structure S . Note that customization information means information on customization such as default values control display designation and the like which are saved by the customization tool via the UIs in . Customization information acquired by the customization tool is saved in a UPD file in step S of .

Under the control of the CPU the customization tool functions as an acquisition unit which acquires printer driver data i.e. customization information corresponding to document properties or device properties. The acquisition unit can acquire printer driver information i.e. customization information by exchanging data with a data holding unit CSPL structure which holds data on the settings of the printer driver. At this time the acquisition unit causes the data holding unit CSPL structure to hold data corresponding to document properties or device properties which are set in the UI windows . Also the acquisition unit acquires printer driver information corresponding to these properties as customization setting information from the data holding unit CSPL structure . The customization tool writes the contents of the data holding unit in a GPD file to be described later . Upon a call the printer driver determines whether a customized GPD file exists. If the printer driver determines that the customized GPD file exists it reads out customized print settings UI control data and the like in the customized GPD file. The printer driver is then customized. The printer driver which functions as a display control unit on the basis of the customization setting information i.e. customization information uses a pseudo API to be described later to display on the CRT a user interface which is customized on the basis of customization information e.g. display control designation of the control and the default values of print setting information set via the UIs in .

In step S the module which has been loaded into the memory in step S is unloaded and display of the customization driver UI ends S .

The processing flow slightly changes depending on the printer driver compatible OS. For example Windows NT4.0 and Windows 2000 XP Server 2003 exploit an OS mechanism called Common Property Sheet UI for display of a driver UI. Thus in step S of necessary pre processing is performed to call the Common Property Sheet UI function. For Windows 98 ME necessary pre processing is performed in step S of to call the Property Sheet function and display a UI. However the basic processing flow is the same as that shown in .

A table shown in is an example of a table representing the relationship between the Windows API and a corresponding pseudo API name. In the Windows API is represented by an API and a pseudo API corresponding to the Windows API is represented by a pseudo API name . This correspondence and pseudo API can be created in advance and saved as the configuration file of a printer driver set. Note that the pseudo API forms part of the customization tool. Simultaneously when the customization tool is installed in a computer the pseudo API is also installed. In the first embodiment the customization tool sometimes includes the pseudo API.

When the printer driver UI module is called from the customization tool the pseudo Windows API simulates Windows API processing and sends back the processing to the printer driver UI processing . When the printer driver UI module is called as a normal driver UI after the printer driver is installed in the OS a normal Windows API is called to send back the processing to the printer driver UI processing .

In step S the customization tool determines whether a printer handle argument contained in the arguments of the pseudo Windows API is address information of the CSPL structure to be also simply referred to as address information hereinafter that is transferred upon a call from the customization tool. Since the start member of the CSPL structure represents the size of the CSPL structure the transferred printer handle argument is processed and referred to as the start address of the CSPL structure. If the size of the printer handle coincides with that of the CSPL structure the customization tool determines that the printer handle of the argument represents the address of the CSPL structure YES in S . The size of the CSPL structure serving as the determination criterion is given and saved in advance together with e.g. the table in . In step S the value of the CSPL structure is compared with data represented by the address given as the argument. If this value coincides with the data it can be determined that the printer handle coincides with the address of the CSPL structure.

If the printer handle of the argument does not represent the address of the CSPL structure NO in S normal printer driver action is performed. Hence the Windows API simply represented as an API in is called S and the processing ends.

If it is determined in step S that the printer handle of the argument coincides with the address of the CSPL structure YES in S the processing advances to step S.

A program which controls the user interface of the printer driver generally calls the Windows API in accordance with an input to the driver. In the first embodiment when no printer driver is installed no Windows API can be called but a pseudo API can be called.

In step S the pseudo Windows API is called. The called Windows API pseudo API performs the same processing as that of the Windows API and returns the processing result to the printer driver UI processing . Then the processing ends. The printer driver UI module saves in a structure designated by the handle processing results such as the values of print setting items and control display designation that are input through the UI. Then the processing ends.

By the above processing the customization tool functions as the selection unit of the information processing apparatus under the control of the CPU . The selection unit selects an application programming interface Windows API or pseudo Windows API for use on the basis of address information start address held in the data holding unit CSPL structure .

In step S the CSPL GetVersionEx function determines whether a printer handle serving as an argument of the function represents the address of a CSPL structure that is transferred upon a call. This determination method is the same as that described in step S of . If the argument does not represent the address of the CSPL structure NO in S the processing advances to step S. In step S a GetVersionEx function serving as a Windows API which runs as a general printer driver is called S and then the processing ends.

If it is determined in step S that the argument of the function coincides with the address of the CSPL structure YES in S the processing advances to step S. In step S the GetVersionEx function is pseudo processed on the basis of information on a printer driver compatible OS that is held in the CSPL structure the same processing as processing of the GetVersionEx function is executed S .

For example a pseudo Windows API which is called in correspondence with document properties or device properties selected from the UI windows in simulates processing of a corresponding Windows API. Also in step S the CSPL GetVersionEx function sends back the same processing result as that of the GetVersionEx function to the printer driver UI module. This also applies to the remaining functions.

A case wherein a printer driver UI control module for Windows 98 ME is executed in response to a call from the customization tool will be explained. A customization target is a Windows 98 ME printer driver. In the first embodiment the customization tool supports Windows 2000 XP Server 2003 and the environment in which the customization tool is executed is controlled by one of these OSs. The CSPL structure is initialized in step S of . At this time for example information representing that the OS is Windows 98 ME is written in the CSPL structure as data representing the version of the OS. As a result the CSPL structure contains the information OS version information representing that a driver module compatible OS is Windows 98 ME. In step S the CSPL GetVersionEx function accesses the OS version information of the CSPL structure and sends back the value Windows ME to the calling printer driver UI module. This can prevent generation of any error in UI control processing of the Windows 98 ME driver module.

This also applies to another pseudo Windows API. Since no printer driver is actually installed an error may occur in driver module UI control upon a call for the Windows API. Even in this case the action of the Windows API can be virtually reflected in UI control by simulating processing of the Windows API in the pseudo function pseudo API .

The Windows 98 ME printer driver is a module which originally acts in a 16 bit environment and thus UI processing for the printer driver is performed in the 16 bit environment. However the Windows 98 ME printer driver which is a target in the first embodiment utilizes an OS mechanism thunk up to perform in a 32 bit environment UI processing which is transferred from the 16 bit environment. The printer driver UI module is described by a 32 bit code and configured to process 32 bit data. With this structure the customization tool according to the first embodiment can call the processing function of the Windows 98 ME printer driver UI module and relatively easily display and control the Windows 98 ME UI.

In the above way the customization tool acquires properties including print settings i.e. saves information set by the user . The customization tool can save the acquired properties including print settings so that they can be read out by the device driver without registering or executing the device driver in the operating system. Executable registration of the device driver in the operating system means to register the device driver in a registry area managed by the operating system and install the device driver by using the authority of the administrator of the operating system. The properties include control display designation in addition to print settings. In setting the properties the device driver is stored in the user area of the file system managed by the operating system. The properties are saved in a UPD file by the customization tool. The created UPD file forms an install set together with a printer driver to be customized a printer driver UI module and an inf file. The created install set is distributed to a client computer via a recording medium or communication medium. The installer executes installation in accordance with the description of the inf file. The installer copies a value which is loaded from the UPD file and corresponds to each setting item as the value of a corresponding item in the devmode structure or deviceOption structure. The printer driver and printer driver UI module act by referring to the values of items saved in the devmode structure or deviceOption structure.

The above described processing is executed by the customization tool which is an example of the application program. As a proxy of the operating system the customization tool responds to the device driver upon input of information via the device driver.

With a pseudo proxy response of the customization tool the device driver does not shift to error processing but recognizes the response from the application as a response from the operating system and continues subsequent setting processing based on an input from the user.

The customization tool includes a pseudo API for the printer driver. Further the customization tool can set properties including the print settings for device drivers intended for a plurality of types of operating systems e.g. Windows NT and Windows 95 .

Note that the customization tool can set in a plurality of device drivers information on print settings which are acquired by the customization tool by one instruction.

As described above the pseudo API according to the first embodiment is a program which simulates an operating API and executes a device driver similarly to a case wherein the device driver is installed in the operating system. If the customization tool pseudo API does not pseudo respond to the device driver the device driver shifts to error processing. The pseudo API can continue customization processing by the customization tool without installing any device driver.

In step S the customization tool is activated in response to input of a UI control instruction. In step S the customization tool performs UI initialization processing. In step S the customization tool determines whether the printer driver information file shown in exists. If the printer driver information file exists YES in step S the processing advances to step S to display controls in the UI in accordance with customization information saved in the printer driver information file. In this example display of each control can be controlled to three values Enabled Disabled and Hidden . After the UI is displayed the processing changes to the user operation standby state S . If no printer driver information file exists NO in S processing in step S is skipped and the processing changes to the user operation standby state S . Even if the printer driver information file exists but does not contain any data no customization information exists and the processing branches from step S to step S.

The processing waits until a user operation is done S . If an operation to close the UI is performed YES in S UI processing ends S . If another operation is performed NO in S UI control corresponding to the user operation is executed S and the processing returns to step S. Input property information is saved in the printer driver information file UPD file again via the CSPL structure. At this time the customization code in is saved in the printer driver information file together with a predetermined identification code.

Customization data associated with the control display method shown in is held in the printer driver information file shown in . In accordance with the customization data UI controls can be displayed.

Note that the customization tool may enable the controls of all setting items regardless of the customization information. In this case the UI is displayed while control display designation in the customization information contained in the printer driver information file is regarded as enabled for all controls.

In the first embodiment customization information is written into a driver information file called a UPD file. However the form of customization information is not limited to the UPD file as far as the file can be referred to by the printer driver and can be analyzed. In Longhorn which is a next generation Windows OS a GPD file is a standard printer driver information file and customization information may be assembled in the GPD file.

An information processing apparatus which customizes in accordance with the settings of properties initial value data of document properties for setting a document and initial value data of printer properties for setting a device a device driver printer driver for controlling a printing apparatus comprises 1 a specifying information setting unit which sets specifying information customization code for specifying a device driver customized in accordance with the document property settings and device property settings 2 a determination unit which determines whether the specifying information customization code corresponding to the device driver is set by the specifying information setting unit when the device driver is installed and 3 a registration unit which registers the specifying information customization code in the registry when the determination unit determines that the specifying information customization code corresponding to the device driver is set. In the information processing apparatus the processes of these units are executed by executing the customization tool under the control of the CPU .

The customization tool functions as the determination unit of the information processing apparatus under the control of the CPU . When a device driver is to be installed the determination unit can determine whether an installed device driver has been customized on the basis of specifying information customization code registered in the registry. The customization tool also functions as the property setting unit of the information processing apparatus under the control of the CPU . When the determination unit determines that the device driver printer driver has been customized the property setting unit can write in the information file of the device driver to be installed document property settings or device property settings which are written in an information file. By this processing customization information can be more accurately inherited.

According to the first embodiment a customization code is registered in a specific registry related to settings of a device driver printer driver and can be referred to from an external application tool. By referring to the customization code in the registry the external application tool can determine whether an installed printer driver is a customized one. When an uncustomized printer driver is installed no customization code field is registered in the registry. Hence whether a printer driver has been customized can be determined from whether a customization code exists and the version can be specified by the contents of the customization code.

Also when the installer updates a printer driver it is determined from the customization code whether the printer driver has been customized. Customization information contained in a driver information file UPD file is written in the UPD file of another printer driver to be newly installed thereby accurately inheriting the customization information set by the user.

On the basis of the registration contents of the registry the system administrator can determine whether a printer driver used by the user has been customized.

According to the first embodiment the install set of a customized driver is created by reflecting customization desired by the user without installing any printer driver. Since a printer driver corresponding to an individual OS need not be installed the working efficiency can increase.

Even if the printer driver is intended for an OS which does not support customization a customized driver which reflects customization desired by the user can be created.

In customization of the initial setting values of a printer driver work can be done using a UI identical to that of the printer driver which facilitates initial setting work in customization. The work efficiency and operation convenience of the user can be increased by reflecting customization contents set through the UI and controlling enabled display disabled display and hidden display of display items.

A customized driver has the same structure as that of the install set of an uncustomized driver. Such a driver can run as a customized driver in the Windows operating system available from Microsoft or even in a so called Point Print environment of Longhorn which is a next generation Windows OS. The versatility of the customized driver can improve.

The customization code is saved in a specific registry storage area managed by the OS. The registry is stored with a tree structure and the customization code can be referred to by tracking the tree structure from a subtree at the top of the tree to a subkey.

The customization tool is made up of a UI control unit which accepts an input from the user a driver access unit which exchanges customization information with a driver an inf change unit which updates application information and a UPD change unit which updates device dependency information.

As pre processing of the administrator user who operates a server PC defines the contents of an install task by using user interfaces in .

The user uses the user interface in to select a client PC in which a driver is to be installed. Then the user uses the user interface in to select a driver including a customization code to be installed. The server generates a driver install task on the basis of information designated or select by the series of processes. This processing is pre processing. Details of the pre processing will be described in detail below.

The driver install task generated by the server PC instructs an agent which has been installed in advance from the server to a client to request a task inquiry in accordance with scheduling set in . Upon reception of the request instruction the client agent requests a task of the server . Upon reception of the task request the server transfers the task to client agents selected in of and performs queuing . Upon reception of the task the client agents execute the queued task and notify the server of their task results . In response to the notification of the install result from each client the server PC displays a window as shown in to be described later . The window in can be operated and switched to a window in to be also described later . Note that the agent in the first embodiment is a control program. The control program is loaded into the RAM and causes the CPU to execute the processes in and . In the server the CPU executes the install program to perform the processes in and .

The field of represents that area includes team A team B and team C. As clients belonging to team A of area Client PC to Client PCn are listed . By searching the client database the fields and are displayed. The field displays the type of operating system in the first embodiment two types W2K and W9x that is installed in each client.

The client database may be collected by searching a client PC from the server PC via the network. A cancel button is clicked to end the program.

It is also possible to only register task contents without setting the processing time when the user issues an instruction to this effect . When the Register button is clicked while install processing to be executed immediately or at a designated time is selected task registration processing starts at the designated time. More specifically contents designated in are combined as a driver install task. The driver install task is transmitted from the server PC to the agent of the client PC at the time designated in .

In the driver install task designated through these UIs the driver compatible OS registered in the driver database is checked. At the date and time designated by the task scheduler a driver can be installed in a client PC in which the OS is installed.

For example there are Client PC to Client PC in which a Win 2K driver is installed. In these clients all Win 2K compatible drivers a b d and e are installed. This also applies to Win 95.

Task execution results sent to the server are listed and displayed in the UI on the server as shown in and the status can be confirmed.

Client PC sends back OK as a status. As installed drivers serial symbols a b d and e are displayed and correspond to the serial symbols in the field of . These symbols in represent that installation of drivers corresponding to these serial symbols is completed. For Client PC NG is displayed. This means that an error occurs and driver installation fails. In the window of a b d and e are successfully installed in Client PC a c and d in Client PC and a c and d in Client PCn.

In install results in Client PC are displayed. The window represents that drivers corresponding to a c and d are installed. The driver name and customization code of each driver are also displayed. NONE is displayed for an uncustomized driver. Even when a plurality of drivers are installed the server administrator can identifiably display customized drivers and uncustomized drivers on the basis of notifications from a client.

The first embodiment discloses a client PC which customizes a device driver for controlling a printer.

The first embodiment also discloses the customization tool which issues a customization code serving as an example of specifying information for specifying a customized driver. The client PC has an external memory in which a customization code issued by the customization tool is stored in association with a customized driver.

When a customized driver which is stored in the external memory is installed the customization tool determines whether specifying information corresponding to the customized driver is set.

If the customization tool determines that the customization code is set the specifying information is registered in the registry which is an example of a storage area managed by the operating system.

The customization tool writes the values set by it in the information file of the device driver. The customization tool generates a customized driver from the device driver.

When the customized driver is installed the customization tool uses the customization code to determine whether an installed device driver has been customized.

If the customization tool determines that the device driver has been customized it executes the following processing. More specifically the setting values written in the information file are written by the customization tool in the information file of the device driver to be installed.

The customized settings include favorite settings serving as an example of multi functional print settings corresponding to a plurality of print setting values and settings which are written in a UPD file and used to change the user interface of the printer driver. The customized settings include setting values which are set via the user interface of the printer driver when the printer driver is operated.

An install program which is built into the server PC acquires a customized driver. The install program further designates installation of the customized driver.

The install program specifies the customized driver whose installation is designated by the install program.

The install program can install a plurality of device drivers. The install program identifiably displays customized drivers and uncustomized drivers as install results on the CRT display of the server PC.

The install program instructs a client PC on installation by transmitting an installation instruction to the client PC via the network. By using information which is transmitted from the client PC and represents install results and a customization code acquired by the install program the CRT displays whether the customized driver has successfully been installed.

As described above according to the first embodiment printer setting information can be customized using the customization tool. The customization code is saved in the printer driver information file together with the printer setting information. The customization code allows another program and another user to recognize that the printer driver has been customized when or after the driver is installed. The server can recognize that a driver installed in each client has been customized. Also when a driver is updated the installer can refer to the customization code and recognize whether a driver to be overwritten is a customized one.

The second embodiment will be described below with reference to the accompanying drawings. is a block diagram showing the configuration of a print processing system according to the second embodiment of the present invention. The print processing system comprises a host computer information processing apparatus and a printer printing apparatus which prints upon reception of print data from the host computer .

In the host computer a CPU comprehensively controls each device connected to a system bus in accordance with programs stored in a RAM . The RAM also functions as a main memory work area and the like for the CPU. . A ROM stores various programs and data. The ROM stores various programs and data and is divided into a font ROM for storing various fonts a program ROM for storing a boot program BIOS and the like and a data ROM for storing various data.

A keyboard controller KBC controls a key input from a keyboard KB or a pointing device mouse not shown . A CRT controller CRTC controls display on a CRT display CRT . A disk controller DKC controls access to an external memory such as a hard disk. A printer controller PRTC is connected to the printer via a bidirectional interface and executes communication control processing with the printer .

The external memory is a hard disk HD MO flexible disk FD or the like. As shown in the external memory stores an operating system program to be referred to as an OS hereinafter various applications e.g. a document processing application program which processes a document containing a figure image text table and the like and a print processing related program . In addition the external memory stores a user file edit file and the like. The print processing related program generates print data described using a page description language and can be utilized commonly by a plurality of printers of the same series. The print processing related program contains a printer control command generation module to be referred to as a printer driver hereinafter and a printer driver UI control module . The hard disk also saves an install set containing a program file and data file for installing a printer driver. The printer driver install set in the second embodiment is information for installing a printer driver in a computer. The printer driver install set may be formed from an install definition file called an inf file for installing a printer driver by using an install program serving as an OS function in a computer a printer driver information file also called a UPD User interface Printer Description file and a program file such as a printer driver. Alternatively the printer driver install set may be formed from an installer containing a file of the execution form exe file . The UPD file is setting definition information of the printer driver. Parameters for driving control of the printer driver for example print setting information which defines print settings such as the paper size and whether to perform double sided printing are also saved in the external memory and referred to by the printer driver.

The application which contains a customization tool program to be simply referred to as a customization tool hereinafter according to the second embodiment is loaded into the RAM and executed by the CPU . The CPU executes e.g. outline font rasterization processing to the RAM and enables WYSIWYG What You See Is What You Get on the CRT . The CPU opens various registered windows and executes various data processes on the basis of commands designated with a mouse cursor not shown on the CRT or the like. When the user executes printing he opens a print setting window controlled by the printer driver UI control module and can make settings of a printer and settings of print processing to the printer driver including selection of the print mode. Note that the customization tool is not always executed in a computer in which a printer driver to be customized is installed. It is also possible to execute the customization tool in a computer other than the computer customize the printer driver generate an install set and install it in the computer .

The arrangement of the printer will be explained. A CPU controls the overall action of the printer . A RAM functions as a main memory work area and the like for the CPU and is also used as an output information rasterization area and environment data storing area. The RAM also comprises an NVRAM Non Volatile RAM area and is so constructed as to increase the memory capacity by an optional RAM which is connected to an expansion port not shown . A ROM comprises a font ROM storing various fonts a program ROM storing a control program and the like which are executed by the CPU and a data ROM storing various data. An input unit exchanges data with the host computer . A printing unit interface controls an interface with a printing unit serving as a printer engine.

Access to an external memory is controlled by a memory controller MC . The external memory includes a hard disk HD MO flexible disk FD and IC card which are connected as options. The external memory stores font data an emulation program form data and the like. When no external memory such as a hard disk is connected the data ROM of the ROM stores information and the like which are used by the host computer . Note that the number of external memories is not limited to one and a plurality of external memories may also be adopted. For example a plurality of external memories which store an optional font card and a program for interpreting the printer control languages of different language systems in addition to built in fonts may be connected.

An operation unit has an operation panel which accepts a user operation and the operation panel is equipped with an operation switch LED display and the like not shown . The operation unit has an NVRAM not shown and stores printer mode setting information from the operation panel.

The CPU outputs an image signal as output information to the printing unit printer engine via the printing unit interface on the basis of a control program stored in the program ROM of the ROM . The CPU can communicate with the host computer via the input unit . The CPU can receive print data transmitted from the host computer and notify the host computer of information or the like in the printer .

The UPD file contains a header ID definition field and data field . The ID definition stores paired data of the ID of UPD data stored in the UPD data and the storage location address of the UPD data. The ID definition field stores paired data by the number of IDs. The UPD file exists for each printer driver i.e. each printer model. The driver set install set holds printer drivers for a plurality of models and UPD files corresponding to the number of printer drivers. It is therefore possible to perform different customization for each model by one install set and install a printer driver in a computer.

The UPD file customized by the customization tool stores in the ID definition a predetermined ID e.g. CUSTOMIZED representing a customized default value and an address X serving as the storage location of the data. For an uncustomized UPD file no ID representing customization is contained in the ID definition field . By referring to the ID definition field it can be determined whether a UPD file has been customized. The ID representing customization corresponds to the customization code according to the first embodiment.

Since the ID definition uses a customization ID a printer driver of a new version can inherit the settings of a previously customized printer driver.

The UPD file is formed from the header ID definition and UPD data . The ID definition stores a pair of the ID of data stored in the UPD data and the storage location address of the UPD data. A set of pairs by the number of IDs is stored. The customization tool according to the second embodiment changes a data value corresponding to an ID defined for customization. When the ID definition does not define the ID of customized data for use a new ID corresponding to the customized data is added to the ID definition . A UPD file exists for each device driver and can be customized even in the following case. That is a customized driver set corresponding to a given model can be used to further customize another model. For example the setting contents of a customized driver set corresponding to a given model can be used to customize a device of another model. Since the ID definition uses a customization ID a printer driver of a new version can inherit the settings of a previously customized printer driver. Note that a customization compatible printer driver is customized by the customization tool. The printer driver is configured to load the UPD file upon installation or initial activation and load the UPD data which is stored in correspondence with a predetermined ID in the ID definition of the UPD file . Assume that the UPD file created by the customization tool stores in the ID definition an ID CUSTOMIZED and an address X serving as the storage location of the data. The customization compatible printer driver is configured in advance to when the ID information CUSTOMIZED is stored in the ID definition read out an address corresponding to the information upon the completion of installation or upon initial activation. Hence when the ID definition of the UPD file contains the ID CUSTOMIZED the printer driver reads out the address X of corresponding data from the ID definition upon the completion of installation or upon initial activation. Subsequently the printer driver further reads out the data structure of a device mode serving as actual driver setting data from the data at the address X. In this case the address X may be an absolute address. Alternatively the start address of the data may be stored in the header and an offset address from the start address of the data may be set as the address X. By preparing the UPD file in this manner a customized printer driver can automatically load a UPD file created by the customization tool and automatically preset the default setting values of the printer driver as a device mode upon the completion of installation or upon initial activation. Consequently the action environment of the customized printer driver can be easily constructed.

The updated UPD data contains UPD data of a base driver and customized data . The UPD data base UPD data contains print setting data DEVMODE displayed as default setting values on a printer driver UI profile data representing the profile favorite settings of print setting data and stamp data. Similarly the customized data contains print setting data DEVMODE which is customized to default settings customized profile favorite data and customized stamp data which will be described in the second embodiment. The customized profile data is a set of print setting parameters which are given values set by customization operation for items settable in the printer driver. Profile data is given a name for each set and a plurality of names sometimes exist. The stamp data is used for one or all of the profile data. The customized DEVMODE data includes print settings used by a printer driver in a computer in which the printer driver is installed. The customized DEVMODE data can be utilized as print setting information of a printer without changing the format of the customized DEVMODE data

In the second embodiment customized print setting data is saved in a UPD file in the device mode DEVMODE format. The device mode is the name of a data structure for storing print setting data defined by popular OSs. In the data structure of the device mode various print settings are stored in a registry area managed by the OS of the HD or the data area of the UPD file similarly stored in the HD .

The printer driver implements print settings corresponding to values which are read out from the registry area and set in action. The printer driver reads out the device mode generates PDL data having print settings corresponding to the device mode and transfers the data to a printer to print. The printer executes print processing in accordance with the print settings of the PDL format that are transferred from the printer driver.

Processing of changing a UPD file setting definition information by the customization tool application according to the second embodiment will be explained. The customization tool loads a customization compatible driver set serving as a customization base. The customization tool corrects the UI related data file UPD file of the base device driver and creates a driver set containing the customized UPD file. The customization tool outputs as a customized driver set the driver set whose UPD file has been changed. The driver set has the .inf format compatible with installation by Add Printer so as not to contain any installer. Add Printer is a procedure which is provided by a Windows operating system and used to add a printer. However a driver set may be packaged with an installer.

The lower half represents a state transition in update. Update is to inherit the settings of a previously customized driver to a driver of a new version. The customization tool uses an updated base customizable driver set and an updated customized driver set of an old version. The customization tool inputs customized data of the customized driver set of an old version into the updated customizable driver set creating an updated customized driver set . The customization tool is necessary when the newly customized driver set is to be created and when the settings of a previously customized driver are inherited to a driver of a new version.

When a button is clicked a common dialog is opened to allow designating a folder for storing a driver set install set to be customized. The tool analyzes the UPD file of a driver set designated with the button and analyzes OSs and drivers supported by the driver set as described above a UPD file is held for each printer model . Upon the completion of the analysis a list of compatible drivers is displayed in a list view . The user selects an arbitrary driver name from the list view and performs customization. When a check box is set ON a button is enabled operable . Further the button is clicked to display the property dialog of the selected driver allowing the user to designate the default values of various controls UI components of the printer driver. When the check box is set OFF the button is disabled inoperable and the property dialog window of the selected driver cannot be opened. By the same operation the favorite settings of the printer driver can be customized using a check box and button . The stamp settings of the printer driver can be customized using a check box and button . For example when the check box is set ON the button is enabled operable . Further the button is clicked to display a stamp property dialog shown in allowing the user to edit the default values of detailed settings of the stamp. When the check box is set OFF the button is disabled inoperable and the stamp property dialog window cannot be opened. Stamp information which is newly added or edited in the stamp property dialog shown in is created and saved in the customized stamp data in the customized UPD data .

The customization tool according to the second embodiment also provides a function of customizing the display hide attributes of controls UI components in the driver dialog window. When a check box is set ON and a button is clicked a control setting window shown in is displayed. The window in allows setting the default values of the display hide and enable disable attributes of controls in the driver dialog window for example the default value of the display hide attribute of the stamp property button .

When a button is clicked the setting contents of the driver UI favorite stamp and control display hide attribute that are set by the above operation are reflected in creating a customized driver. In other words the customized default setting information is saved in a UPD file. If no button is clicked the settings are not reflected and are discarded. When a button is clicked the setting contents are not reflected and are discarded.

To save a customized printer driver a reference button must be clicked to designate a storage location in a common folder designation dialog. Further a creation button is clicked to save the customized driver set in the external memory of . How to save customization contents in a driver configuration file UPD file when a customized driver set is created will be described in detail later with reference to .

A method of customizing the detailed stamp window shown in will be explained in detail. Default contents before customization of a list box are a list of stamps set in shipping a printer driver from the factory. To delete a given stamp from defaults the stamp to be deleted is selected from the list and a deletion button is clicked. In the second embodiment one or more stamps must be prepared. When stamps in the stamp list are deleted to one the deletion button is grayed out displayed not to select it to inhibit deletion of the stamp.

To add a new stamp a new stamp addition button is clicked. Details of the newly added stamp can also be designated. A stamp name can be designated in a text box . The display text of the stamp can be designated in a text box . The display font of the stamp can be designated in a combo box . The style normal bold italic bold italic of the display font of the stamp can be designated in a combo box . The display font size of the stamp can be designated in a spin control . The display color of the stamp can be selected from a list in a combo box .

When a button is set ON the frame around a stamp text can be designated. A circular frame can be designated with a radio button and a rectangular frame can be designated with a radio button . The relationship between the stamp text and the print contents of a base page can be designated by the printing method. Watermark printing can be designated with a radio button and overlay printing can be designated with a radio button . Two methods are prepared to designate the print position of the stamp. The position may be adjusted with a horizontal slide bar and vertical slide bar while a preview display is checked. Alternatively the position can be set by directly inputting relative coordinates in text boxes and . When a button is clicked the stamp is moved to the center of the page. The default direction in which the stamp text is drawn is the horizontal direction left to right of the print page . When a radio button is selected the drawing direction changes to a diagonal direction from the lower left to upper right of the page. When a radio button is selected the drawing direction changes to a diagonal direction from the upper left to lower right of the page. When a radio button is selected the angle of the drawing direction can be freely set. The numerical value of the angle can be directly input to a text box or adjusted with a slide bar . If a check box is OFF the stamp is printed on each print page. When the check box is set ON the stamp is printed on only the first page. The second embodiment does not explicitly set the stamp order change control but a control capable of changing the stamp order is generally provided as another embodiment.

A method of customizing the control setting window shown in will be explained. This window is made up of a plurality of tab sheets and settable control display attributes e.g. display hide and enable disable are categorized on the basis of the sheet of a print setting UI to be referred to as a driver UI hereinafter and illustrated in provided by a printer driver. A tab sheet is selected and a control display attribute to be set is displayed in a control list tree view . A tab sheet is currently selected and items displayed in the tree view are controls on the page setup sheet of the driver UI. A stamp control has a focus and represents a currently selected item. When the display attribute of the control having the focus is set enabled the stamp check box of the driver UI is enabled to allow detailed settings of the stamp in the customized driver UI. To the contrary when the control is set disabled the stamp check box is grayed out to inhibit detailed settings of the stamp in the customized driver UI.

When display is designated as the display attribute of a stamp edit control the stamp edit button is always displayed in the customized driver UI. When hidden is designated as the display attribute of the stamp edit control the stamp edit button is not displayed and cannot be seen from the user. When a button is clicked all controls on the tab sheet of the driver UI are enabled. When a button is clicked all controls on the tab sheet of the driver UI are disabled and cannot be set by the user. When a button is clicked all controls on the tab sheet of the driver UI are hidden.

When an OK button is clicked contents set by the user are temporarily saved in the storage device of the customization utility and the control setting dialog is closed. When a cancel button is clicked the dialog is closed without saving the setting contents. When a help button is clicked help information on a target control is displayed.

If the creation button in is designated in step S the customization tool changes the UPD file serving as setting definition information containing UI related data of the printer driver . In step S a customized printer driver is created in a location designated with the reference button .

If it is determined not to perform stamp settings it is determined in step S whether to edit controls. If it is determined to edit controls the control setting UI window shown in is displayed S . The parameters of controls are set in accordance with an operation on the UI window S . The parameters of set controls include a stamp enable control representing whether to enable disable the stamp and a stamp edit control representing whether to display hide the stamp edit button in the printer driver UI i.e. whether to permit inhibit editing of the stamp. If the OK button is clicked the flow branches to step S.

 7 the relationship watermark printing or overlay printing of the stamp between the stamp text and the print contents of a base page on which the stamp text is overlaid 

 11 the display attribute of the stamp whether to enable or disable stamp settings in the printer driver UI and

 12 the display attribute of stamp editing whether to display or hide the stamp edit button in the printer driver UI .

For example when the display attribute of the stamp control in is set enabled the stamp check box of the printer driver window in is enabled to permit detailed stamp settings on the customized driver UI. To the contrary when the control is disabled the stamp check box is grayed out to inhibit detailed stamp settings on the customized driver UI. When display is designated as the display attribute of the stamp edit control the button is always displayed. In contrast when hide is designated as the display attribute of the stamp edit control the button is hidden and cannot be seen by the user or edited. When the button in is clicked all controls on the current tab sheet of the driver UI are enabled. When the button is clicked all controls on the current tab sheet of the driver UI are disabled i.e. cannot be set by the user. When the button is clicked all controls on the current tab sheet of the driver UI are hidden.

By the above processing the default values of stamp settings can be customized. For example the IT manager customizes the print options of a device driver and easily distributes many drivers having the default settings of the print options desired by the user. The print setting load on the user can be reduced to increase the print setting efficiency.

Note that the second embodiment has described a printer driver. However the present invention can also be applied to e.g. a scanner or a digital multi functional peripheral built by integrating a scanner and printer. When the present invention is applied to a general device driver the print settings of the printer driver can be translated into the action settings of the general device driver.

A preferred embodiment of the present invention will be described in detail below with reference to the accompanying drawings. The third embodiment will describe a customization tool capable of customizing a favorite which is a profile of print settings. A description of a part common to the first embodiment will be omitted. The configuration of the third embodiment is common to that of the second embodiment in . In the third embodiment a plurality of print setting profiles can be prepared in the UPD file of an installed driver set. One profile saved at a predetermined address of the profiles is registered as default values in a registry when the driver is installed. The remaining profiles are loaded into a computer and saved as part of print setting information when the driver is installed. These profiles can be selected from the printer driver as selectable profile choices depending on settings .

When a favorite acquisition request is received in step S the flow advances to step S. The favorite means a group of print settings of a printer driver . The user can obtain a desired action environment by designating a favorite formed from a group of settings through the user interface of the printer driver . For example a user who often uses the stamp and staple can set a plurality of settings to desired values and print by only registering a pair of staple and stamp settings as a favorite and selecting this favorite . In the third embodiment profile data of the favorite will be called favorite data. In step S it is confirmed whether favorite data designated by the user has been stored. If the favorite data designated by the user has been stored the flow advances to step S to acquire the favorite data designated by the user and display it in step S. If the favorite data designated by the user has not been stored in step S the flow advances to step S to acquire favorite data designated in advance and display it in step S. In the third embodiment the favorite data designated by the user is stored in the UI related data file UPD file of the printer driver. Default favorite data which is initially installed is named e.g. standard settings and the favorite data is saved with this name in the data field of the UPD file. In step S for example IDs in the definition field of the UPD file are searched for an ID representing customized data. If a corresponding ID is detected it can be determined that customized default favorite data exists.

One feature of the customization tool is that no printer driver to be customized need be installed and default values can be easily set. More specifically when a print setting Apply Driver settings check box is checked and a print setting property button is designated clicked a printer driver UI as shown in is displayed.

In default print settings are displayed in which the paper size is A4 the output size is match document size the number of copies is 1 and one image is laid out on one page. The customization tool is implemented using a mechanism of reading out the printer driver by an OS of the host computer. The conflict of the printer driver is also reproduced and the default values of the customized printer driver can be reliably known. The conflict of the printer driver means a state in which print settings do not match the printer arrangement. For example a conflict occurs when double sided printing is set though the printer does not have any double sided printing function. The default values of print setting information are given regardless of an environment where the printer driver is installed. If the default values are directly applied to an actual computer a conflict may occur.

In reference numeral denotes a name of a printer used for printing a path to the basic driver and a path to a folder which stores a customized driver. An input box is a custom code input field for specifying customized contents and allows inputting an arbitrary value. This value is displayed at a portion see where version information of the printer driver is displayed or a portion where a list of settings is displayed. From this display the user can determine whether the installed printer driver is a customized one. The control selection button is used to select a control when the check box is checked to enable the selected control.

The UI related UPD file of the printer driver is changed to create a customized UPD file when the creation button is designated clicked . When the creation button is designated a customized driver set except a UPD file to be changed is copied to a storage location and the UPD file is stored after change processing. This processing is the same as that described in the first embodiment.

A case wherein a printer driver is updated using the display window in will be explained. This update processing is to update a customized printer driver and is executed when the Update radio button of Make Style is checked. The path to the folder of a customized driver set is input to the input area the path to the folder of a driver set to be updated is input to an input area and then the creation button is designated. In response to this the customized driver set except a UPD file to be changed is copied to a location designated in the input area and the UPD file is stored at an address corresponding to the driver after change processing is done. For example when a customized driver compatible with PDLX version . is updated to one for PDLX . a PDLX . driver which inherits customization made for PDLS . is created.

In the third embodiment a favorite using customized print setting data device mode DEVMODE is created. The device mode is the name of a data structure for storing print setting data defined by popular OSs. In the data structure of the device mode various print settings are stored in a registry area managed by the OS of the HD or a data area of the UPD file similarly stored in the HD . The UPD file has the structure shown in . When printer setting information is stored in the UPD file it is saved in a format with which the structure can be reproduced.

The printer driver implements print settings corresponding to values which are read out from the registry area and set in action. The printer driver reads out the device mode generates PDL data having print settings corresponding to the device mode and transfers the data to a printer to print. The printer executes print processing in accordance with the print settings of the PDL format that are transferred from the printer driver.

By using the customization tool according to the third embodiment favorite data corresponding to standard settings provided as preset values by the manufacturer is created. For example when the print settings of the staple and stamp are input using the customization tool they are written with the device mode DEVMODE structure at a predetermined address in data of the UPD file. A customized printer driver is set in advance so as to read out a predetermined address. When the predetermined address is read out the values of print setting data of the readout device mode DEVMODE format are set as default settings in the printer driver i.e. copied to the print setting information area of the registry. Further a favorite having the values in the device mode DEVMODE as setting values is assembled. The driver installed in this manner is sometimes called a customization compatible driver. Note that the name of the favorite corresponding to standard settings is a name input to a profile name edit box in in the customization tool.

 Favorites added deleted by the customization tool are reflected in a favorite combo box and arrangement of their order can also be inhibited. Favorite data edited by customization is not saved in the registry storage area unlike a favorite held by a general device driver and cannot be edited from the driver UI red circle representing that editing is impossible is displayed . Hence it is possible not to display a favorite edited by customization in the favorite add edit dialog. Moreover a favorite edited by customization is displayed with a mark representing that the settings have been customized for example a finger icon in . A favorite added by customization is exploited when the user operates the driver UI changes print setting data and then wants to restore it to customized print settings.

As an example of print settings which can be stored in the device mode there are the following items in addition to the example in . That is the document size output paper size page layout how many logical pages are formed on one physical paper sheet stamp page frame noborder whether to print the date and time whether to print a user name whether to print a page number and whether to set overlay printing can be defined as print settings of the page setup. Further there can also be set double sided printing binding location long short edge binding margin delivery destination whether to change the delivery destination for each copy whether to change the True Type font with the printer font whether to print in the toner saving mode whether to use the Type Wing function whether to perform image acceleration processing and whether to always print a PDF file in the image mode. All these settings can be stored in the device mode and treated as a favorite by a customization compatible printer driver or the customization tool according to the third embodiment.

A UPD file exists for each device driver and can also be customized in the following case. That is a customized driver set corresponding to a given model can be used to customize a driver set of another model. For example the setting contents of a customized driver set for a given model can be used to customize a device of another model. Since the ID definition uses a customization ID a printer driver of a new version can inherit the settings of a previously customized printer driver.

Note that a customization compatible printer driver is customized by the customization tool. The printer driver is configured to load a UPD file upon installation or initial activation and load the data which is stored in correspondence with a predetermined ID in the ID definition of the UPD file. Assume that a UPD file created by the customization tool stores in the ID definition an ID CUSTOMIZED and an address X serving as the storage location of the data.

The customization compatible printer driver is configured in advance to when the ID information. CUSTOMIZED is stored in the ID definition read out an address corresponding to the information upon the completion of installation or upon initial activation. Hence when the ID definition of the UPD file contains the ID CUSTOMIZED the printer driver reads out the address X of corresponding data from the ID definition upon the completion of installation or upon initial activation. Subsequently the printer driver further reads out the data structure of a device mode serving as actual driver setting data from the data at the address X. In this case the address X may be an absolute address. Alternatively the start address of the data may be stored in the header and an offset address from the start address of the data may be set as the address X.

By preparing the UPD file in this way a customized printer driver can automatically load a UPD file created by the customization tool and automatically preset the default setting values of the printer driver as a device mode. As a result the action environment of the customized printer driver can be easily constructed.

Processing of changing a UPD file by the customization tool according to the third embodiment will be explained. The customization tool creates a customized driver set by the following procedures. First the customization tool loads a customization compatible driver set serving as a customization base. The customization tool corrects the UI related data file UPD file of the base device driver and creates a driver set containing the customized UPD file. The customization tool outputs as a customized driver set the driver set whose UPD file has been changed. The driver set has the .inf format compatible with installation by Add Printer so as not to contain any installer. However a driver set may be packaged with an installer.

When the customization tool is activated it displays the UI window in S . The customization tool permits the operator to input an operation and waits for an input S . In response to an input the customization tool determines its contents S . If the creation button is operated the customization tool saves customized data in a customized UPD file S . For example when favorite data is customized the customized favorite data is saved in the UPD file. In this case an ID representing that the favorite data has been customized is recorded as the ID of the UPD file.

If the input is favorite editing the customization tool loads a list of favorite data from the UPD file S and displays a favorite list window as shown in S . Then the customization tool waits for an operation S and determines an input S . If the input represents deletion the customization tool deletes selected favorite data S . In this stage the customization tool does hot apply this operation to the UPD file but saves information representing that the name of the favorite data to be deleted is subjected to deletion. If the input represents edit or add the customization tool edits the target file in accordance with the operation S . If the check boxes and are operated the customization tool sets or resets a corresponding flag in accordance with the operation S . If the OK button is operated the flow returns to step S.

 1 a favorite selection permission flag the printer driver refers to this flag to permit or inhibit selection of a favorite 

 2 a setting editing permission flag the printer driver refers to this flag to permit or inhibit a change of the setting values of applied favorite data and

In this fashion the device driver customization program according to the third embodiment can simplify editing of favorite data profile data . Choices other than default print setting information can be prepared.

The object of the present invention is achieved even by providing a system or apparatus with a storage medium which records software program codes to implement the functions of the above described embodiments and causing the computer or CPU or MPU of the system or apparatus to read out and execute the program codes stored in the storage medium. In this case the program codes read out from the storage medium implement the functions of the above described embodiments by themselves and the storage medium which stores the program codes constitutes the present invention. As the storage medium to supply the program codes for example a flexible disk hard disk optical disk magnetooptical disk CD ROM CD R magnetic tape nonvolatile memory card or ROM can be used.

The functions of the above described embodiments are implemented not only when the readout program codes are executed by the computer but also when the OS Operating System or the like running on the computer performs part or all of actual processing on the basis of the instructions of the program codes.

The functions of the above described embodiments are also implemented when the program codes read out from the storage medium are written in the memory of a function expansion board inserted into the computer or a function expansion unit connected to the computer and the CPU of the function expansion board or function expansion unit performs part or all of actual processing on the basis of the instructions of the program codes.

As many apparently widely different embodiments of the present invention can be made without departing from the spirit and scope thereof it is to be understood that the invention is not limited to the specific embodiments thereof except as defined in the appended claims.

This application claims the benefit of Japanese Applications No. 2005 095692 filed Mar. 29 2005 No. 2005 095695 filed Mar. 29 2005 and No. 2006 074412 filed Mar. 17 2006 which are hereby incorporated by reference herein in their entirety.

