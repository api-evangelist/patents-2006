---

title: System and method for fraud monitoring, detection, and tiered user authentication
abstract: The present invention provides systems and methods for authenticating access requests from user devices by presenting one of a plurality of graphical user interfaces selected depending on a perceived risk of fraud associated with the devices. User devices are identified with fingerprinting information, and their associated risks of fraud are determined from past experience with the device or with similar devices and from third party information. In preferred embodiments, different graphical user interfaces are presented based on both fraud risk and, in the case of a known user, usability. In preferred embodiments, this invention is implemented as a number of communicating modules that identify user devices, assess their risk of fraud, present selected user interfaces, and maintain databases of fraud experiences. This invention also includes systems providing these authentication services.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07908645&OS=07908645&RS=07908645
owner: Oracle International Corporation
number: 07908645
owner_city: Redwood Shores
owner_country: US
publication_date: 20060428
---
This application claims the benefit of U.S. provisional application Ser. No. 60 676 141 filed Apr. 29 2005 and which is incorporated herein by reference in its entirety for all purposes.

The invention relates generally to systems and methods for providing protection against identity theft over a computer network.

The growth in the volume of online transactions conducted by businesses and individuals over the Internet has been staggering. Sensitive private identity information is typically used for authenticating a user for conducting online transactions. The increased use of identity information for Internet transactions has been accompanied by an increased danger of interception and theft of that information. Identity theft occurs when someone uses the password username Social Security number credit card number or other identifying personal information of another without consent to commit fraud. According to a September 2003 Federal Trade Commission FTC survey 27.3 million Americans have been victims of identity theft in the last five years including 9.9 million people in the year 2002 alone. Identity theft losses to businesses and financial institutions in 2002 totaled nearly 48 billion and consumer victims reported 5 billion in out of pocket expenses according to the FTC survey.

To enter into a transaction with an E commerce server a user typically needs to provide sensitive and confidential data including authentication data data describing the transaction and the like. This data is commonly entered by using a keyboard and or a mouse connected to a device local to the user that is running a web browser that is linked to the Internet or other computer network . is a diagram illustrating an exemplary system used for entering user authentication and transaction data. In this example the authentication information to be entered by a user comprises a user ID and password. In known systems the user ID and password are composed of a string of characters entered via a keyboard while executing a web browser on a computing device . A typical user entry interface provided by the browser to the user on a display is shown.

After entry a user s sensitive information is typically transmitted to a remote server preferably in an encrypted form over secure connections. For example the widely used TCP IP communication protocol includes security protocols built on the secure socket layer SSL protocol to allow secure data transfer using encrypted data streams. SSL offers encryption source authentication and data integrity as a means for protecting information exchanged over insecure public networks. Accordingly many E commerce servers and applications use SSL or similar security protocols to exchange data between remote servers and local user systems. If the entered authentication information is approved by the server the user is permitted to send and receive data from the server s website.

The source of messages received at a web server is often determined from the IP address of the device from which the message is sent and or from a cookie included with data from the user. A cookie generally refers to a packet of information often sensitive information sent by a web server to a browser resident on the user s computer system for saving to a file and for transmitting back to the server whenever the user s browser makes additional requests from the server. The IP address is generally included in a message header and the cookie is usually one that has been previously sent by the server often at login. The server compares the user login data with the message IP address and the returned cookie to determine the identity of the user sending the message and whether the user is currently logged into the server. The IP address of the user is also confirmed.

Despite these known precautions a user s sensitive information remains vulnerable because it is in a raw unsecured form between its entry by the user and its encryption prior to remote transmission. Also sensitive data sent from the server is vulnerable during the period after its decryption and until its display. This unsecured information can be surreptitiously captured in a number of ways. For example cookie hijackers copy sensitive information from cookies. Further keyboard loggers and mouse click loggers are hidden software that intercept and copy mouse clicks and depressed keys after user entry but before processing by a browser or other software. Logger software can readily intercept the user s secure information. Keyboard loggers and mouse click loggers might also take the form of hardware connected between the keyboard and mouse cable and the computer or the hardware inside the keyboard and mouse device.

Even graphical user interfaces that represent on screen keypads and keyboards with selectable graphics for user entry instead or in addition to providing fields for text entry are vulnerable to mouse click loggers screen capture loggers and other schemes. and illustrates prior art examples of such interfaces. Each alphanumeric character in the graphical interface is represented by a unique graphical image e.g. the pixels forming the number 1 . Screen capture loggers utilize optical character recognition OCR technology to decipher characters selected by mouse clicks and the corresponding alphanumeric graphics in order to ascertain the actual alphanumeric text characters of a user s ID and password. Sophisticated screen capture loggers might also utilize checksum and size characteristics of the graphic images in order to ascertain which the data item corresponding to a graphic image selected by a user s mouse click during data entry. In these ways the screen capture loggers may acquire the personal information even when the graphical user interface has rearranged the order of alphanumeric characters on the keypad or keyboard.

Sensitive information can also be intercepted by espionage software including snoopware spyware non viral malware hackers utilities surveillance utilities Trojan horses etc. Espionage software aids in the unauthorized acquisition of information about a person or organization without their knowledge or consent. It typically installs itself on a user s computer without consent and then monitors or controls the use of the device. Every user keystroke all chat conversations all websites visited every user interaction with a browser every application executed every document printed all text and images might be captured by the espionage software. Espionage software typically is capable of locally saving or transmitting the captured data to third parties over the Internet most often without the user s knowledge or consent.

Another fraudulent acquirer of sensitive personal information is an over the shoulder spy who surreptitiously reads a user s display to acquire the information.

Known anti virus and anti spyware software products attempt to enable a user to protect against such malicious software. However use of outdated anti virus and anti spyware files provides minimal protection at best of computer data against outside threats. Consequently a drawback of these products is that the information used by the anti virus and anti spyware program must be constantly updated to reflect newly discovered schemes in order to keep the protection current. In addition to keeping the virus information current the system must be periodically scanned for potential infections.

Further certain geographic locations are known to contain an inordinate number of identity thieves. It is therefore advantageous to know where an attempt to access a server originates from. IP addresses are one readily available source of location information. But IP addresses have drawbacks in that for many users the IP address is not constant. Known network protocols and facilities can lead to variable IP addresses. For example proxy servers are used to provide a gateway between a local area network of an organization and the Internet. The local network is protected by firewall software installed on the proxy server. Proxy servers dynamically assign new IP addresses to a user device each time a new message is sent therefrom. As a result there is no constant IP address assigned to an individual user device for users connected to the Internet via a proxy server.

Another source of IP address variability is the commonly used dynamic host configuration protocol DHCP protocol which assigns IP addresses dynamically and automatically to the devices on a TCP IP network. A DHCP server assigns an IP address to a device from a list of available addresses when the device connects to the network. The device retains this IP address only for the duration of the current session. Some DHCP server systems can dynamically change the user s IP address during the session. The use of a proxy or DHCP server means that the IP address alone may not be enough to identity a particular user device.

Security systems and methods that protect against the above identified risks should also meet the usability concerns of an average user. A service provider wants to encourage online use in a secure manner. But a cumbersome and prolonged user interface or a less user friendly interface might discourage or even intimidate and frustrate users or cause user errors or the like. Also a security system should institute precautions to prevent execution of a fraudulent transaction once it has been found that the user s information and or system is at risk of being compromised. A security system should also alert the service provider based on a particular device attempting to access the provider s system irrespective of the user.

Also a security system and method should enable a service provider to strike a proper balance between security and usability of the system. In other words a system and method is needed to enable a service provider to provide an easy to use and lower security interface when no security risk is identified and a higher security interface when one is identified. Additionally desirable security systems and methods should depend as little as possible upon human action to maintain their state of security. For example it not advantageous to require users to keep and maintain tokens or digital certificates or the like. A token can be lost damaged stolen and the like.

But security systems protecting against the described threats and having the described properties are not generally known in the art. What is needed but currently lacking in the art is a security system and method with the following features and aspects 

The systems and methods of the present invention fill gaps in the prior art by providing improved authentication services.

An advantage of the systems and methods according to the present invention is that they provide information and selectable user interfaces for enabling a service provider to take action to authorize deny or put on hold online transactions in real time as a function of the risk presented by both the user and the device attempting to conduct a transaction.

Another advantage of the present invention is that it enables a service provider to identify possible in process fraudulent authentication transactions based on both user and device historical data analysis. Transactions can be approved declined or put on hold for verification based an a set of predetermined rules.

Another advantage of the present invention is that it provides both user and device based robust fraud monitoring and detection along with robust fraud analysis and risk assessment to give a service provider real time information needed to determine how and whether to allow a device to access the provider s system.

Another advantage of the present invention is the enabling of a selection of levels of secure user graphical authentication as a function of predetermined usability and or security concerns.

Another advantage of the present invention is that there is no dependence on tokens cards and other similar hardware devices digital certificates anti virus software or personal firewall solutions for protecting end users against online identity theft.

Another advantage of the present invention is the acquisition and development of a blacklist and or white list that is device based rather than only user based.

Broadly stated according to an embodiment the present invention fingerprints a user s device by obtaining device identifying information that can be used to assess the fraud risk posed by a user at that user device. According to another embodiment the present invention performs fraud analysis and alerting of the risk associated with the device being used to access a service provider s server. According to another embodiment this invention includes a database of user devices and their historical known fraud risks available in a central repository. According to another embodiment this invention presents user authentication interfaces selected from a plurality of user authentication interfaces that provide a plurality of levels of security and usability.

Accordingly the present invention provides systems and methods for providing levels of fraud monitoring detection and a tiered user authentication comprising a fingerprinting module for identifying a user device that has requested connection to a server an authenticator module for enabling selection from of a plurality of login graphical user interfaces as a function of predetermined selection criteria for presentation on the user device wherein the selection criteria is in the form of rules regarding usability and security a fraud analyzer and alert module for analyzing and assessing the risk associated with the user device as a function of historical tracking of use of the user device and a device central repository for identifying legitimate and fraudulent users based on the fingerprinting module and other repositories of tracking information. This invention provides variously architected systems that implement the methods of this invention to provide authentication services to one or more service providers.

An example of the present invention s usability and security features is provided by users who have forgotten their login id or password. Such a user typically accesses a system from a limited number of user devices and the fact that authentication attempts of this type were made from such a device is recognized by the present invention and can be used to present a helpful interface to the user. If the device is unknown to the system this can signal that a hacker is trying to break into the system and can be used to present an authentication interface of heightened security. Additionally such users typically enter his user password information that is almost but not entirely accurate. This can be recognized by the present invention and used to further guide user authentication. In preferred embodiments these options are represented by rules processed by a rules engine.

A further example of this invention s usability and security features is provided by the ability to distinguish user behaviors. If an access originates from a user device that has not previously accessed a service provider e.g. as detected by the absence of a device token stored on the user device system rules can required that this access pass a higher level of authentication or challenge. However the user may be a savvy user who routinely removes application tokens from their user device almost 15 of Internet users . Further on the basis of previous accesses this user may be associated with a behavior pattern indicating routine access from not readily identifiable devices. Then this user is preferably not challenged or subject to a higher level of scrutiny. In contrast systems with authentication systems that do not adjust the authentication process on the basis past user behavior would always challenge such a user. Accordingly the present invention provides a better user experience for all the users whether they are savvy or not.

In further detail the systems and methods of the present invention verify each user s computer and location something you have along with behavioral usage patterns on a site to confirm identity something you are . These verifications are added on top of existing enterprise requirements for login password credentials something you know . This offers the enterprise several strong additional layers of anti fraud protection.

The present invention includes secure cookies flash objects and other technologies to recognize and to fingerprint the from which device a user access an application whether it is a computer laptop mobile device or any other. These user devices thus become additional authentication factors without requiring any change in user behavior. Information concerning these user devices is fingerprinted and stored into a device token or device id for one time use. The id or token is stored on the user device and saved in a database for later comparison with tokens retrieved from subsequent user device accesses. The token is invalidated if a user attempts to reuse it.

The present invention also includes user device tokens or device ids that have a unique number which is randomly generated by the methods of this invention. Such device tokens are then assigned to the particular user device stored on the particular user device as persistent data e.g. a cookie and also stored so as to be accessible to the authentication services of this invention. The particular user device can be thereby identified upon a subsequent access by retrieving the device token from the user device and comparing the unique number with the stored information. If the data matches this particular device is identified. Then a new unique identifier number is created and is stored on the user device and by the methods of this invention for use in a further access.

The present invention enables application service providers score risk for each online login and transaction and to increase authentication security in real time at login and in session for transactions that may be high risk or potential fraud. It evaluates the pre post and in session characteristics of each transaction to ensure fraud detection and transactional integrity. The methods then provide a service provider with scores actions and alerts. For example if a transaction has a high risk score and is thus potentially fraudulent one preferred action is to hold the transaction and to then seek secondary authentication or secondary challenge. The user is e.g. asked to call service provider personnel to confirm the validity of the held transaction. Another action is to reject the transaction. Different actions may be appropriate to different transaction types. In the case of banking service providers viewing account balances is acceptable but wire transfers are not acceptable or in the case of ecommerce ASP service providers download of sensitive documents may restricted based on the risk score. These actions are preferably invoked by rules evaluated during transaction evaluation.

The systems and methods of the present invention include the following features device location and user behavior workflow fingerprinting user profiling through capture and recording of user workflows real time risk scoring real time rules based fraud alerts and response alerts automatic internal flagging of suspicious activity configurable out of band end user optional secondary authentication via e mail SMS voice print other 3rd party integration via open APIs support for shared authentication and fraud services infrastructure case management tools for reviewing individual client logs customer care tool for servicing inbound customer care a dashboard for real time fraud and activity monitoring reporting for risk management and trending analysis and administration for system and rules configuration and maintenance. The methods and systems include the following components and features rules engine risk scoring forensics real time response proprietary fingerprinting of devices locations workflows models and rules intelligent algorithms and comprehensive administrative tools such as a dashboard reports and customer care

These and other embodiments features aspects and advantages of the invention will become better understood with regard to the following description appended claims and accompanying drawings.

Reference symbols or names are used in the Figures to indicate certain components aspects or features shown therein with reference symbols common to more than one Figure indicating like components aspects or features shown therein.

This invention generally provides systems and methods that interface with service providing systems of online service providers and assists them in authenticating their user requests especially user log on requests and transaction sequences referred to herein as a user s workflow . Briefly this invention authenticates a user and a login request referred to herein as pre authentication in a manner determined both by the identity of the device from which the authentication request originates this invention as well as by available information concerning the identity of the requesting user. User workflow sequences are authenticated referred to herein as post authentication using a user s transaction history. In both applications the precise authentication processes and decisions can be directed by rules from the service provider.

The general structure and arrangement of preferred embodiments of these systems and methods are now described following are more detailed descriptions of preferred embodiments of the component processes. Heading are used herein solely to aid clarity and without any intended limitation.

In many preferred embodiments but without limitation the authentication processes of the invention are implemented with a client server type architecture or more generally a distributed systems type architecture . Accordingly the individual processes providing authentication services for a particular service provider application can both execute on the service provider s computer system or be distributed among other network attached computer systems. Preferred distribution architectures include one or more authentication servers that at least host a device central repository DCR service.

The DCR receives stores and makes available online information identifying user devices and the fraud risks associated with the user devices. This information can include blacklists and or white lists of devices with higher risk of fraud and with lower risk of fraud respectively. This information can be gathered from the authentication experiences of the service providers participating in an implementation of this invention or from other concurrent and intercommunicating implementations of this invention from 3 rd party data sources and the like. Authentication servers can also host service provider applications.

Optionally the authentication server can also host the actual authentication processes of this invention which are then configured as server processes responding to requests from application executing remotely on service provider computer systems. Thereby in certain embodiments of this invention the authentication server system also provides device based authentication services as well as DCR services . A service provider server system e.g. system for example need itself not run all or any authentication processes but instead can access those processes it does not host or all authentication processes on the authentication server. In other embodiments a service provider system can execute all authentication processes and therefore need only access the authentication server for optional DCR services. In system does not itself perform pre authentication processing but does performs post authentication services .

In another preferred embodiment authentication services usually pre authentication services can be performed on a firewall machine or other type of network gateway machine . In firewall performs primarily pre authentication services for service provider system . If a user is authenticated then that user can access service provider applications e.g. applications A B C D and so forth. In certain instances a firewall can perform all pre authentication service processing however in most instances it is advantageous for the firewall to act as a client to the authentication services of the authentication server. In fact it may not be practical for a firewall to perform full pre authentication processing even with server assistance in which case it can perform a subset of authentication processing referred to herein a basic authentication services .

Basic authentication services can be limited to user device fingerprinting and confirmation of basic machine data e.g. IP address operating systems device ID and the like. As described subsequently the user s computer is provided with a cookie that includes the identifying information of the machine. This cookie is reviewed by the firewall upon login to verify that it matches what the entity knows about the user. Discrepancies can be identified and scored to determine whether to allow access or not or whether to apply secondary authentication protocols such as a security question before allowing access. This embodiment is applicable to an entity such as an organization company or law firm for authenticating remote log ins from its employees members or other users where these employees or users number approximately 10 000 or less.

Authentication services are invoked when a server application or services provider computer system receives user request that needs authentication. In the case of pre authentication the most common user request is a login request to access an application or system. Other requests usually handled by post authentication services include e.g. transaction requests involving large amounts of money. User requests can be received directly from communication subsystems or alternatively can be forwarded from the service provider application or system across an interface to the authentication processes.

In preferred embodiments authentication services can be invoked through an externally available application programming interface API . Table 1 list a selection of exemplary API requests.

Fingerprint process is the first authentication process invoked with input data describing the user request. The fingerprint process then gathers identifying information describing the device from which the user request originated and creates a device identifier Device ID . The Device ID and optionally other device identifying information is stored on the user device from which it can be retrieved and form part of the device identifying information to be used during a subsequent fingerprinting

Next FAAS process is invoked with the Device ID and optionally other device and or user identifying information . This process evaluates its input identifying information and either can e.g. recommend to the service provider application or system that the request should be processed further or blocked from the system referred to herein as actions . This process can also provide risk alerts and risk scores referred to herein as alerts and scores describing the relative risks of the input request so that the service provider application or system can themselves make such authentication decisions. FAAS evaluation preferably begins with retrieving forensic information related to the characteristics of the current request that are apparent in the input request information. Information sources can include system DCR services which stores an authentication system s past authentication results and third party data services which can provide a wide range of data e.g. geolocation data services providing likely geographical source of the current request. The input data and the retrieved forensic data is then analyzed by a rules based decision process in order to determines output actions alerts and scores.

In other words device id is usually available and then is the primary item to identify an authorized user. Even when the device id is recognized the user can be required to provide additional security information before being allowed access. Other conventional security protocols i.e. personal questions selection of personal information from a multiple choice question etc. or even a higher level of security i.e. telephone IP administrator call to provide voice recognition etc. can be used. When a user knows in advance that a different computer will be used for access at certain times e.g. business travel to a new location with use of a different computer contemplated then this information can be provided to the entity and its IP administrator so that the rules for that particular user and time period can be changed to facilitate access to the system and its application.

If a request is to be further processed a further exemplary action is the selection of preferred graphical or other type authentication interfaces GUI for authenticating a newly arrived user or an existing user making a request that needs particular authentication. Authentication interface selection criteria can be determined in accordance with the evaluated risk scores and any risk alerts. The selection criteria will then call for an interface with a security that is commensurate the risk of fraud. Also the risk information can also be provided to the service provider system or application which can then perform e.g. more thorough checking of authentication data or requesting the authentication services of this invention to re authenticate the user or request. This can involve e.g. seeking responses to details authentication questions or obtaining biometric identification information e.g. fingerprints retinal scans or the like or obtaining voice prints or the like.

Next authenticator process is invoked with the interface selection criteria selects an particular user authentication interface from a user interface database according to the criteria and then presents the selected interface at the originating user device and receives the data entered in response to interface presentation. The entered data is then used as part of the authentication decision by the service provider application of processes of this invention. The server application or the FAAS or both together then decide whether on not to authenticate the current request.

The DCR process gathers the results of the current request authentication processing and stores them in DCR database in association with the identifying information for example the Device ID for the originating user device. These stored processing results preferably include at least whether or not the request was validated or not and or whether or not the request was found to be fraudulent. Thereby the DCR database can provide an historical record of the results of previous request authentication processing to guide the FAAS in current authentication request processing. The DCR database includes at least data obtained from the current service provider. Preferably it also includes data from other service providers so that device risk information can be shared and the accuracy of authentication processing can be multiplied.

FDM performs the actual gathering and assembly of the results of the current request authentication processing. Data from the current request can optionally be supplemented by the third party data similar to that data already retrieved by the FAAS and or other data retrieved by the FAAS relevant to evaluating the current request. The FDM process can execute either locally or remotely as part of authentication services or can be implemented as part of DCR services.

In other words when the system finds an elevated risk score it evaluates rules in view of the risk score and can carry out actions alerts or risk score reporting. Table 2 provides preferred categories of responses to an elevated risk score.

The methods of this invention retrieve information concerning a device from which a request originates the user originating the request and the transactions requested by that user. Efficient handling of this information is advantageous especially in commercial applications servicing a large number of concurrent users. Thus in many preferred embodiments gathered information is stored for online use in a condensed or summary form and for offline use in nearly full or full detail. Online uses include e.g. real time authentication and authentication update. Offline uses include e.g. data mining rule refinement and so forth.

A preferred condensed or summary form is referred to herein as a fingerprint. First possible values of a category of data or of an authentication criteria are divided into a number of bins . Then the category or criteria fingerprint of a particular user is a representation e.g. as a binary token of the gathered data which indicates only which bins have data and which do not. This representation can be optionally compressed using known techniques. Thereby a user s authentication and transaction requests can be represented in several binary tokens.

For example in a typical online business application there may be 20 unique pre identified sensitive transaction sequences workflows . Each workflow can be characterized by e.g. ten bins or variable with each variable having e.g. ten bind of values. Therefore a user can be characterized by a fixed number of possible fingerprints with each user having on average e.g. ten unique fingerprints.

The function of the present invention are configured to provide consistent methods of checking the authenticity and security of a user initiated request made to a service provider application e.g. a online store application an online banking application and the like. The methods receive a copy of the request itself or information describing and abstracting the substance of a current request. The input information is processed and the methods output risk scores risk alerts and actions or action recommendations . Risk scores and alerts are indicia of the likely risks that the current request is incorrect or malicious or fraudulent and so forth. More specifically the risk scores output are products of a number fraud detection inputs which are weighted and analyzed in real time using analytic processes customizable for individual service providers. Fraud detection inputs describe the user the user s device the location of the user s device the workflow of transaction entered by the user historical patterns of user accesses and data from 3rd party data sources. This information is provided to service provider applications and systems users of the invention for use in their internal authentication processes. The methods of this invention can also recommend or initiate actions according to service provider guidelines or rules. These actions are generally directed to gathering information for authenticating the request being processed.

Generally the available security relevant information related to a user request the request attributes is broken into related information groupings referred to as criteria so that each criteria preferably contains several pieces of data concerning a user request. Groups of rules preferably criteria specific then evaluate the criteria and the risk scores and actions that are output result from a combination and weighting of the results of the rule based evaluation of each criteria. As a user request and especially as a related group of user transactions is authenticated by this invention and processed by service provider applications more or less criteria data are available and criteria have varying importance. For example before a user is authenticated and granted access to a service provider application data relevant to workflow criteria e.g. a sequence of related transactions by a user is usually not available. On the other hand when a user is engaged in requesting transactions criteria related to initial authentication are usually less important. These periods are referred to as the pre authentication period and the post authentication period respectively.

Preferred pre authentication criteria include location information and device information and preferred post authentication criteria include user information and workflow information. Table 2 present exemplary data relevant to each of these criteria.

This figure also illustrates that 3rd party data can be included in the evaluation process. Third party data can be incorporated in various fingerprints. For example third party data can include the presence or absence of firewall or of antivirus software on a user device and also and or the maintenance status of such software. Third party data can also include IP Intelligence risk data historical data from a data warehouse fraud network data and so forth. Further third party describing characteristics of known risks at the location device or user level can be received from third party data warehouses and incorporating in various fingerprints primarily the workflow fingerprint and the historical data fingerprint. Also 3rd party evaluation tools can integrated into or supplement the analytics and scoring process the evaluates the fingerprints.

Location information and device information are important criteria especially in the pre authentication period. Location information characterizes the location of the device from which a request originates. Location can most easily be estimated from the device s IP address and the hierarchy of networks linking the device to the Internet. Device information characterizes the originating device itself such as its hardware and software components. Table 3 present a more detailed catalog of device software and hardware characteristics that can be extracted from a device by a browser hosted process.

A further important component of device information when available is a secure token e.g. a secure cookie available from a device which has been previously used as a user device. When a request is received from and device at least the available location and device information can be summarized condensed or fingerprinted and stored back on the device as a secure token. If another request then originates from this device the secure token can be retrieved and its contents compared against the currently collected location and device information. Any mismatches can be weighted to form a score for use in risk analysis. Whether or not mismatches occur a new secure token is generated from the currently retrieved information and stored back on the device.

Such a secure token also advantageously includes a unique identifier generated by the methods of this invention. Comparing the unique identifier in a retrieved token with an expected or known unique identifier provides further information on which to base the score. Also a unique identifier is particularly useful if location or device information cannot be obtained from a user device. Then the unique token can be the only identifying device information.

Preferred post authentication information includes user information and transaction or workflow information. User information includes user identification and the progress of a user through the user authentication process. Transaction information includes information extracted from a requested transaction and the sequence and timing of transactions. Information is preferably extracted from a transaction request by looking for key expressions and then extracting the values perhaps only ranges of values and other information associated with the key. Sequence and timing of transactions and of web pages visited is packaged into workflow fingerprints which are summaries of a users historical usage patterns.

Analytics are thus preferably implemented in groups what are known herein as policies. Table 5 illustrates preferred policies that are useful for most systems. Other systems can have some or different policies as needed.

Policies can be enforced during pre authentication for example when a user is being authenticated or during post authentication for example when a user is making transaction requests. The rules engine automatically determines what models to run based on the context of the request. Different sets of models can be configured to support different transaction types e.g. bill pay money transfer password change email change etc. Since the models are defined and written in XML after the initial integration no code changes are needed in the service provider applications. All models can be modified using a network interface or by replacing the XML definition file. Also new models can be added seamlessly during operation of the methods of this invention. Models are fully portable so that they can be migrated from a simulation environment to a test and production environment. Additionally policies can be configured for exceptions like user not in user list or device not a bank kiosk etc. policies can be temporarily overridden based on e.g. time period or one time exceptions.

Briefly security policies are applicable both pre and post authentication and typically seek to recognized known hacker behaviors. These behaviors can be recognized using standards developed from cross industry best practices. Business policies are primarily applicable post authentication when a transaction session is ongoing. These policies generally represent standards established by a particular service provider for mitigating transaction risk. Workflow policies are primarily applicable post authentication and compare fingerprints of past transaction session activities with fingerprints of the current session in order to detect unexpected patterns that may indicate fraud.

Examples of preferred security business workflow and 3rd party policies are now described in more detail beginning with security policies. Security policies can be widely applied across most service providers and service provider application and used both during pre and post authentications. They can be applied e.g. during user login and during user transaction processing. Security models evaluate a plurality of data items generally from the device and location criteria which are evaluated to obtain a security score. illustrates an exemplary set of such data items. For example a user who submits requests that appear to originate from multiple machines or multiple cities or multiple locations over an impossibly short duration of time has been found likely to be hacker. Therefore these and similar data items are part of preferred security models.

The security policy contains models involving decisions based on risk patterns associated with user device and location information. The security models are based on known risk conditions and potentially risky behavior and are categorized into the following models. Tables 6A and 6B present illustrative security models.

A service provider may find certain conditions associated with a user request require that this user s access must be prevented. Restricted models gather data items and factors relevant to determining that a particular access must be prevented. Alternatively a service provider may find certain user behavior patterns suggest that this user is a hacker or malicious. Hacker models accordingly gather relevant data items and factors.

Associated with a security model such as the model of or of Table 7 are evaluation rules which in a preferred embodiment provide a score reflecting the likelihood that a current request is a security problem. Tables 8 and 9 present exemplary security evaluation in the form of decision tables. The illustrated decision process is hierarchically arranged or nested in which Table 8 invokes further checks such as the checks of table 9 if certain conditions are found.

The secondary check examines the particulars of the how the data contained in a retrieved data token does not match the criteria associated with a current user request. Table 9 an exemplary decision table which implements such a secondary check.

Business policies generally include rules referred to as transaction rules that evaluate parameters of individual in session transactions for the likelihood of fraud or malicious intent. Accordinly business policies are generally application during post authentication are generally specific to the field or to the business of the service provider and service provider application. For example in a banking application specific transaction rules can be directed to specific banking transactions e.g. bill pay transfer funds and the like. Transaction models can be used in conjunction with security rule e.g. don t allow or challenge user for money transfer request from an international IP address. Business policies can be shared by different service providers in a particular field or can created and customized for a specific service provider.

Table 10. For example a particular banking service provider may have determined that certain transaction data indicate that the transaction should be restricted or rejected. Table 10 present exemplary rules that evaluate conditions that can indicate a transaction should be restricted challenged or rejected.

Workflow policy contains models that evaluate groups or sequences of related transactions e.g. transaction requested by a particular user that indicate expected behavior patterns. These rules are preferably based either of expectations for a typical user of a given class or upon historical describing a particular user. Conversely rules in workflow policies can indicate unexpected behavior that may indicate malicious intent. For example if a user routinely requests account transfers in a certain range then a transfer far out of this range can indicate risk. Alternately if a user routinely makes money transfers of amounts greater than an expected average future transfers in the part range do not necessarily indicate risk and appropriate rules can be advantageously relaxed for the user.

Table 11 presents examples of rules that indicate that a requested transaction may be fraudulent or malicious and should be restricted challenged or rejected.

A further type of policies and models are applicable in situations where data from 3rd party databases is useful for evaluating risk. For example relevant rules can block or restrict logins or transactions based on input from a 3rd party database of black listed IP addresses. Additionally relevant models can be based on fraud patterns or models available from external databases. Embodiments of the present invention maintain databases useful evaluating transaction and provide methods for generating and simulating patterns of fraudulent behavior.

The above has described the structure of criteria policies and models. In operation specific instances of these data and rule classes are created and filled in for specific devices locations users requests service providers and the like that become known during the course of providing authentication services. These are generically referred to herein as external objects . To aid in providing more easy customization of the authentication services for individual service providers the created instances are grouped together and evaluated to the extent possible as members of groups. The groups correspond to the particular criteria items and are linked to compatible models containing rules used to evaluate activity.

A policy set holds all the policies models and rule instances used to evaluate a total risk score. Multiple policy sets can be configured tested and stored but in preferred embodiments only one policy set can be actually used at one time. Each policy set generally contains four types of policies e.g. security policies business policies workflow policies and 3rd party policies with each policy type representing models based on the type of policy.

In more detail the groups model and rules can be customized according to business need to become activated if a transaction is scored above a certain risk threshold. Table 12 presents some exemplary rule types.

Further models can be nested to ensure higher degree of accuracy for the risk score. A nested model is a secondary model used to further quantify the risk score in instances where the original results output by the system are inconclusive. A nested model is run only when a specific sequence of answers is returned from the primary model. Nested models therefore reduce false positives and negatives and serve to ensure overall accuracy of the risk score. If a service provider does not wish to assign a risk score or nested model for particular criteria and data combinations default weights are attached to each attribute. This further ameliorates customization requirements.

It will be apparent that this hierarchical structure is well suited to allowing easy customization service providers need only specify the general goals for their authentication services while the particular details are hidden in system groups. It will be also apparent that this model is suited to implementation by object oriented programming techniques. The system rules engine directs gathering criteria data creating external objects and processing rules.

The rules engine analyzes models and policies and their data elements in advance of their use During authentication servicing the rules engine triggers model processing when it recognizes pre analyzed data elements that are relevant to a pre analyzed service provider model. transactional data flows to identify those elements that may impact the models. After triggering the models execute and provide risk scores and actions and alerts if called for. New or changed parameters and data are maintained so that they can be tested when new data is next recognized or a model is next triggered. For example if new data is within certain ranges of old data the associated model may not need to be triggered.

In more detail the following are examples of core methods. One exemplary method is known as time over threshold . This method compares the value of a variable to a pre defined threshold at each transaction and reports if the value has been out of range for too many transactions. Thus rather than triggering a model each time the threshold is crossed recent historical data is used to sort out persistent problems. Thus time over threshold eliminates unnecessary alert and actions. Another exemplary method is known as deviation from normal . This method instead of comparing current actions to fixed thresholds employs uses historical data to establish normal for specific days times users devices workflows and the like. It then assesses whether the current behavior is deviating from what is normally in similar circumstances.

Another exemplary method is known as event state . This method maintains states for external object which store past alerts and actions. Then a failing rule generates a single alert on the first failure. Subsequent failures will not generate additional alerts until a selected interval has passed from the first alerts. If the rule subsequently succeeds the alert will be cleared. Another exemplary method is known as event rate . This method generates alerts only after a selected event has occurred too many times in a part selected time interval. For example if a login failure occurs more than three times in one hour an alarm or alert is generated indicating that an intruder may be trying to access the system. However subsequent login failures during the predetermined time period would not generate additional alarms nor would less than three login failures. A further exemplary method is known as event time over threshold . This method generates an alert when the rate of traps received exceeds a threshold rate for a period of time. For example network links frequently go up and down so it is distracting if an alarm is generated every time a link cycles. However if the network link has failed for e.g. ten or more minutes in an e.g. hour then availability may be is impacted and an alert generated.

The individual components of the methods and systems of this invention which have been briefly described above are now described in more detail the fingerprint process with reference to then the FAAS process with reference to then the authenticator process with reference to then the DCR server with reference to and lastly the FDM process with reference to . User devices are preferably identified using secure cookies Flash cookies and similar data tokens combined with other data items such as browser characteristics device hardware configuration e.g. as acquired using Flash calls network characteristics and the like. Device identifying data is evaluated by a configurable set of nested rules that identify a device and also check historical logins from this device for accuracy including handling exception cases where cookies are disabled out of sync cookies and also potentially identifying fraudulently stolen cookies.

In Step device identity information for the user device is captured. This information can be captured by a client program already resident on the user device. For Internet applications the client program is commonly a web browser. Alternately a software module can be downloaded to the user device and executed to gather identifying information. For Internet applications the software module can be a plug in a script or an applet e.g. a Java applet downloaded by the web browser and executed. The identity information gathered is selected to identify the user device as uniquely as possible. Preferably the device can be uniquely identified within those user devices that access the server application. If insufficient information is available for unique identification the user device is identified as narrowly as possible e.g. by the values of specific properties that vary widely among possible user devices. Identity information can be augmented by data generated by the fingerprinting process itself e.g. a unique bit string such as a large random number. Some or all of the device identity along with identifying information generated by the fingerprinting process information is stored in a data token referred to as a Device ID . APPENDIX A to this section present particular examples of data elements and evaluation rules useful in a particular preferred embodiment of device fingerprinting.

Generally the captured device identifying information includes the following. A first type of device identifying information is a secure persistent data token that has been previously stored on the user device. Secure persistent data includes generally data elements that are encrypted signed or otherwise secured against modification and that remain resident on the user device even when it is not accessing a service provider application. This data may have been previously stored on the user device by the service provider server application in which case it often identifies the user who accessed the service provider. This data may also have been stored by the fingerprinting processes of this invention during the course of a prior identification of this device in which case it preferably includes the Device ID .

Although any technique that allows a remote application to store and retrieve persistent data on a user device can be used it is preferred to use known and widely available techniques. One such technique is known as secure cookies . A standard cookie is a data packet sent by a web server to a web browser for saving to a file on the host machine. The data packet can be retrieved and transmitted back to the server when requested such as whenever the browser makes additional requests from the server. A secure cookies refers to a standard cookie that has been secured against modification or tampering.

Another such technique is known as flash cookies . Graphical software applications and or plug ins from Macromedia and generally identified by the trade name Flash are currently resident on many user devices. This software can create local shared objects known as flash cookies for maintaining locally persistent data on a user s device akin to the standard cookies stored by web browsers. Flash cookies can be stored locally on a flash plug in user s device are updatable and have the advantage not being as easily removed from the user s device as are standard cookies.

A second type of device identifying information are the hardware characteristics of the user device and or of the user device s network connections. Many types of hardware characteristics can be gathered for device identifying purposes including IP addresses adapter MAC addresses local time and or time zone network connection speed such as download and or upload times microprocessor type and or processing and or serial number and so forth. Software for gathering such information is described in the APPENDIX B to this section.

In step the captured device identity information ID including any previously stored Device ID is compared to identity information that has previously been stored by the FAAS process in a database referred to as a device profile history see in where the device profile history is referred to as profile history . The device history profile database includes record s associated with and describing previously recognized and or identified devices. If it can be established test that the captured device information corresponds to information previously stored for a device the new identifying information updates the device history record for the device in step . One test is matching a unique bit string previously generated by the fingerprint and stored on the user device and in the device history. If there is no corresponding record in the device history database found during test the a new record is created with the new identity information in step .

Lastly a new Device ID token is created for the device in step and in step is sent to the user device and stored thereon e.g. as a standard cookie or as a flash cookie. If no Device ID was found on the user device a new Device ID token is created from the gathered identifying information. If a Device ID was found it can be updated e.g. with a new unique bit string new timestamp and so forth. At step the process continues.

A feature of the invention relates to the replacement of the cookie on the user s machine upon each login. This provides further security so that even if a user s machine information is improperly acquired by a third party even including that embodied in a previous cookie the authentication system can identify that the user is not authorized and deny access to the system. Of course access by a different computer often occurs for certain users and secondary security protocols can be provided to allow access to authorized users. In addition if access is allowed from a user on a different computer this can be identified by the software with an implementation of a higher risk of security when the user tries to access applications or other files in the system. Cookies and device token generally are also stored for comparison with the token when later retrieved. Thus stolen fingerprints tokens or device ids cannot be fraudulently reused.

The fraud analyzer and alert system FAAS process which is invoked by the fingerprinting process is described with reference to illustrating an exemplary flowchart for this process and with reference to illustrating an exemplary implementation of this process. Generally the function of the FAAS is to represent the user s and service provider s instructions concerning how best to carry out authentication in view of risk information relating to the device making an access request and optionally in view of the nature of the request. In the preferred embodiments the user s and service provider s instructions are represented by rules. A rules engine component of the FAAS evaluates access requests in view of available fraud risk information in order to determine authentication interface selection criteria. In alternate embodiments other techniques can be used to evaluate access requests and to determine interface selection criteria. For example the rules and rules engine can be replaced by statistical analysis techniques neural network techniques and so forth. See e.g. Duda et al. 2nd ed. 2000.

Turning to FAAS is illustrated and described with reference to its inputs outputs internal data structures and processing components. Most external inputs are processed by the data sources processing module . This module receives external data and formats and or otherwise prepares it for use by the rules engine . One external input is the device identifying information just gathered by the fingerprinting process concerning the device from which the current access request originates. This gathered information preferably includes and or is encapsulated in the Device ID and also can include IP addresses secure and Flash cookies CPU type etc. This identifying information is used to cross reference the device profile history database in order to determine if the current device has previously accessed the service provider system. If so information stored therein and associated with the current device e.g. risk information is retrieved and input to the data sources processing module. The device profile database is updated with the current identifying information. Where a device cannot be uniquely identified this information refers to a group of similar devices including the current device.

Another external input to the data sources processing module from the service provider system is transaction based input . Transaction based input comprises input regarding the specific transaction being requested by a user device e.g. purchase amount transfer amount type of transfer requested for which a service provider or user may wish to handle specially by storing a rule in rules definition module . For example the service provider may wish to receive an alert and or invoke a higher security authentication interface before purchase requests over a certain amount are sent to the server.

Another external input to the data sources processing module is from a flagged devices central repository DCR . The DCR is a database of historical fraud risk information derived from the service provider and preferably also from other service providers. The information is derived from the fingerprinting and FAAS processes.

The data sources processing modules also preferably receives data from external third party data providers. These sources can include geolocation service blacklist service whitelist service and so forth. A geolocation service provides approximate geographic latitude and longitude corresponding to the user device IP address. Geolocation by IP address is a technique of determining the geographic latitude and longitude corresponding to a user by comparing the user s IP address with known locations of other nearby servers and routers. The geolocation service gives its subscribers another arrow in the quiver for battling Internet fraud. The third party blacklist service typically provides a list containing IP addresses of suspected fraudulent users e.g. addresses associated with suspected or known fraudulent activity. The third party whitelist service typically provides a list of IP addresses that have a history of being legitimate i.e. not associated with fraud.

FAAS processing is preferably performed by the rules engine . This rules engine can be constructed as known in the art to use a predetermined set of rules to determine authentication interface selection criteria. The data sources processing module is coupled to the rules engine in order to make external data readily form. The rules definition module in order to provide stored rules and actions. Rules are stored in component of the rules definition module and actions associated with the rules are stored in storage . Rules can be supplied and stored by a service provider in order that authentication actions can be tailored to the service provider s requirements. The service provider service application can optionally also have a direct link to the rules engine so that so that the rules engine to request additional authentication guidance from the service provider application.

An exemplary action is to specify a particular authentication interface selection. For example a rule may specify that where there is receipt of a request from a user device for a transfer of an amount of money over a certain threshold and where the device resides in a location determined by geolocation information known for an larger than normal volume of fraudulent activity the action to be taken is to present a predetermined higher security user interface to the user in order to provide more security against a possible fraudulent transaction.

The rules engine evaluates its input data and input guidance if any according to the stored rules and determines interface selection criteria according to the stored actions. The interface selection criteria specify the type of authentication interface that should be displayed to the user at the current user device in order to authenticate the current access request. These criteria can in some embodiments specify the specific interface to be displayed or can in other embodiments specify interface characteristics such as level of security. The interface selection criteria are output to authenticator which selects and displays the authentication interface to the user. The user then enters the requested authentication information and or performs the requested authentication actions if any . This entered information known as user authentication information is returned to the FAAS and or to the service provider application. and the rules engine. Either the rules engine or the service provider application or both together evaluate the user authentication information to determine whether or nor the user is authenticated. Optionally a degree of authentication can be determined. If the degree of authentication is insufficient the service provider application may then request the FAAS to perform further authentications.

The rules engine then evaluates the returned user authentication information to further determine whether or not other forms of authentication or verification are needed. Additional authentication if needed is performed in accordance with the rules specified by the service provider. For example optional step can be where the service provider is a bank or other financial institution which seeks a higher security authentication interface for certain transactions.

Next the rules engine and or service provider system or application based on the received authentication information e.g. username and password entered by the user decide whether or not to authenticate the user as valid. If the user is valid processing continues with the service provider application at the service provider web server. If the user is not valid the user is directed to an error message page . Typically the service provider then blocks user access to the web server and terminates the session connection. Alternatively the service provide may give the user additional opportunities to present valid user authentication information.

It should be appreciated that the service provider might not give the user an opportunity to use the user entry interface to input authentication information for validation. For example if based on the ID information the user device is identified as posing a major risk of fraud the system and method of the present invention enables the service provider to require via a rule that a fraud alert be sent to the service provider. The service provider may then respond by terminating the user s connection to the server before enabling entry of the user s authentication information via a user interface. The selection criteria for the initial user interface for display may be predetermined by the service provider.

It should also be appreciated that the user or service provider may request further authentication during the course of a valid already authenticated session based on e.g. the transaction being requested. For example a bank or other financial institution may wish to invoke a higher security authentication interface during a session before transactions over a certain amount are sent to the server. The systems and methods of the present invention can be invoked to provide for such authentication.

The present invention can address usability concerns by providing selectable multiple tiers of graphical login user interfaces ranging from a basic familiar user interface to the most secure user interface with a plurality of interfaces in between. For example a more user friendly interface can be presented for routine transactions to long term user customers who are using a device that does not present a known risk of fraud. In the latter case a rule can be created for that user and included as part of the definitions module in . Also certain users may be permitted to add rules to tailor their authentication interfaces.

In more detail interface selection criteria are received by an interface setector displayor in authenticator . An interface module and a database are coupled to the interface selector displayor . The database comprises a plurality of graphical user interfaces GUIs shown as GUI to GUI N . A selected one of the GUIs is sent to interface module by the interface setector displayor as a function of the interface selection criteria . The interface module sends the selected GUI to user device via network . Optionally the interface selection criteria can specify that the selected GUI be modified in a particular fashion. Entered user authentication information is returned to the FAAS and or to the service provider.

Database can include user interfaces such as the interface shown in and the interfaces shown in and and variations thereof e.g. as shown in that latter all illustrate a plurality of higher security interfaces based on the keypad user interface in . The user interfaces are shown with two authentication factors userid or username and password it should be appreciated that the present invention is not limited to two factors additional factors may be included within the scope of the present invention. Each of the GUI s shown are sent to the user device using suitable software e.g. MACROMEDIA Flash Java etc. In preferred embodiments Flash software is used for the GUIs.

The GUIs in provide heightened security by enabling users to enter and submit passwords or other sensitive information using an online image that is unrecognizable in actual image form as well as in data output form. Further details of the method providing the unrecognizable online image are found in pending U.S. patent application Ser. No. 11 169 564 which was filed Jun. 29 2005 and which is incorporated by reference herein in its entirety. illustrates a graphical wheel two factor authentication interface for enabling authentication information entry using mouse click navigation for aligning alphanumeric and graphic symbols. illustrates an exemplary graphical slider authentication interface for enabling authentication information entry using mouse click navigation for aligning alphanumeric and graphic symbols. It should be appreciated that the symbols and alphanumerics shown in are exemplary i.e. other graphical symbols and images may be used to practice the invention.

The wheel GUI in can be generated or stored by the authenticator and comprises at least two concentric wheels and for encryption at the point of data entry. In order to enter to the next element or symbol or character of the username field or password field a user guides reference points on the inner wheel via navigational mouse clicks on right arrow button for counter clockwise rotation and on left arrow button for clockwise rotation to the desired element on the outer wheel . Reference points are selected by and known only to the user making the image un interpretable and or indiscernible to outsiders including the various espionage software and over the shoulder spies.

Each time the user clicks on the next button to enter an image symbol data describing the displacement though which the inner wheel has moved from its prior orientation is sent to the server preferably as degrees or radians or similar measure of angles. The enter button is preferably used to designate that the element for the username field or password field is to be entered. The button identifiers shown are exemplary only other button identifiers may be used for the invention. Alternatively only one button is preferably used instead of the next and enter buttons for systems wherein the username or password are of a fixed length. Preferably the entered elements are not displayed in either the username field or password field as an aid in preventing an over the shoulder spy from viewing the field information. For example an asterisk may optionally be displayed in the field to signify entry of each element.

Displacement of the inner wheel measured in degrees or radians or similar measure of angles is subsequently sent to and decoded by the server. The authenticator knows the real authentication information and the image details and therefore deduces the selected marker by decoding the displacement information in order to determine decode the user inputs for authenticating the session. Displacement coordinates are session specific and unusable once the session ends.

A reset button is preferably provided to enable a user to restart entry of the username or password. Block icons are provided preferably on the right side of the two rows for displaying the status of the field entry i.e. indicating how many elements of the user name or password have been entered. Preferably the entered elements are not displayed in either the username field or password field as an aid in preventing an over the shoulder spy from viewing the field information. Alternatively an asterisk can be shown in the entry input portions to signify entry of each element.

It should be appreciated that the distortion methods of as well as the methods for the other modifications in can also be applied to the other graphical user interfaces e.g. distorting the keyboard e.g. keyboard of as in the above identified U.S. patent application. Conversely this invention is not limited to the above described distortion techniques but includes other distortion techniques known in the art for enhancing security.

Also input is device identifying information gathered from user devices by fingerprinting module . This identifying information is similar to identities information input to FAAS and stored in database . The identities information therefore preferably includes IP address standard cookies flash cookies and other identifying information. The APPENDIX attached hereto describes methods of obtaining other identifying information for CPU type processing speed and connection speed identifications. Other known identifiers may also be used to identify user devices and may depend on the level of security and information that has been accessible in the past from the user device.

Also input is information from 3 rd party data providers . This input is generally similar to the in content to the 3 rd party inputs to FAAS . These as with the FAAS include 3 rd party geolocation data 3 rd party blacklist data and 3 rd party whitelist data

The combined input information along with the current device identifying information is transmitted to the DCR where it is used to update the historical risk database. The combined input information is also evaluated by the flagging rules engine applies rules definitions in order to maintain lists that identify devices and their associated fraud risk based on historical information and optionally targeted to one or more specific user devices. Guided by the flagging rules engine the shared lists processing creates updates and otherwise maintains a black list and a white list . The lists are device based for identifying devices and the potential fraud risk posed by each device.

This information is made available to the FAAS input in . This information is also output to the DCR server in . The DCR can make then available the shared lists and optionally further risk information via the network to subscribing service providers and alternatively can be published so to make the listings available for use by 3 rd party vendors.

Although specific embodiments of the invention have been described various modifications alterations alternative constructions and equivalents are also encompassed within the scope of the invention. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that additions subtractions deletions and other modifications and changes may be made thereunto without departing from. the broader spirit and scope of the invention as set forth in the claims.

The present invention also include administrative tools that assist system operators and service providers in providing and monitoring authentication services.

The alerts browser gives a detailed list of alerts triggered at authentication and transaction check points. It identifies which user transaction is at risk for fraudulent behavior by delivering correlated impact analysis organized by users devices geographies and alerts. The present invention can also automatically notify appropriate personnel or even the end user about the alerts transactions via e mail pager by forwarding alarms to a network management system or by invoking any user specified action.

A further tool are customizable reports that provide detailed risk management and analysis information. Reports can provide historical information including geographic locations devices users. illustrates an exemplary report. Most data accessed by the methods of the invention can be presented in one or more reports.

Another administrative tool provides case management that enables a service provider to review servicing logs for each individual client and to investigate the reasons actions were taken or alerts were triggered. illustrates an exemplary screen of the customer care tool.

For example service provider personnel can view the reason a login or transaction was blocked view a severity flag with alert status to assist in escalation complete actions such as issuing temporary allow for a customer or un registering a device if appropriate and the like. The capabilities and viewership rights in fraud analyzer component of the customer care can be customized and managed according to roles and company procedures.

First method uses subtle differences between the listed CPUs to distinguish between them. The detection method is shown in brackets 

The third method is performed only on those CPUs which support the CPUID instruction. That is mainly all CPUs manufactured after the first Intel Pentium introduced in 1983. Also new 486s from 1994 on support this instruction. However motherboards with the Cyrix 5x86 Cyrix 6x86 and NexGen CPUs installed will usually have this instruction disabled in BIOS for correct detection it needs to be enabled by software. This CPUID instruction returns enough information about CPU type to allow all new CPUs to be easily identified. The following CPUs are recognized by this method 

The CPUID instruction can be executed in several levels. First level of CPUID instruction returns a vendor specific string 

Second level of the CPUID instruction returns information about type family model stepping revision and other CPU features.

This application could contain a small database which adds a short description to this detected information. Here s a brief explanation of the values returned by CPUID 

Third level of CPUID instruction is supported only by Intel 6th generation CPUs from Pentium Pro and returns information about cache sizes as represented by these hexadecimal values 

Fourth level of CPUID instruction is supported from Intel Pentium III up and returns a processor serial number.

AMD Cyrix and Centaur CPUs support some more levels of CPUTD which can be used for detection of special features for example 3Dnow technology their cache sizes or a string a CPU name which is coded on chip. Strings returned by these CPUs are 

First method measures the execution time of some CPU instructions and compares this time to a table of values by CPU type. These values are the particular number of clock cycles needed by the identified CPU for that execution. Our application then divides the relevant value by the execution time giving the CPU frequency.

A disadvantage of this method is that the frequency won t be measured accurately if the correct CPU type wasn t detected or if you have a new processor which is missing from the table 

Number of clock cycles needed for execution from the table execution time frequency 120000 ticks 0.0012 seconds 100 MHz

Second method is applied only to CPUs with a Time Stamp Counter implemented. TSC counts processor clock cycles. It is incremented on each internal processor clock cycle and allows the mast accurate timing method on PCs. NB this counter is reset to zero after a processor reset. It is 64 bits wide which is enough to count more than 5850 years if a processor runs at 100 MHz. The CPUID instruction is used to check for an implemented TSC All new CPUs will have TSC. Intel supports it from the Pentium processor upward AMD from K5 and Cyrix from 6 86MX. The frequency can be theoretically measured to one clock cycle precision actually the clock rate can alter slightly because of hardware factors. Even so the system according to the present invention could measure frequency to a precision of 0.001 MHz.

Some CPUs have a suffix of PR beside frequency meaning Performance Rating. This extra label comes from processor vendors AMD Cyrix and IBM who wish to suggest that their CPUs have better code execution and execute faster at a given frequency than Intel s Pentium or Pentium II processors. They use the Winstone benchmark for comparisons. So fur example a processor with Pentium 75 performance is labeled PR75.

Processor features which are returned with CPUID instruction is listed below. There are some interesting features for users 

This item signifies the presence of a floating point unit FPU directly on chip which all modern CPUs from 486DX will include. The FPU is used for real number calculations.

Time stamp counter TSC provides the most accurate timing method on a PC it allows precise measurement of processor frequency.

Multiprocessor support chip contains APIC This signifies the presence of APIC which permits symmetrical multiprocessing. If this item is crossed out then APIC is either disabled or not supported.

Processor serial number Means a serial number is enabled. This controversial feature can be disabled Then this item is crossed out Software for this purpose is available from Intel.

MMX technology signifies a processor instruction set extension. 57 new MMX instructions accelerate graphics and multimedia processing. It was introduced with Intel s Pentium MMX processor. Currently MMX is supported by all processor manufacturers 

Fast save and restore FP MMX SSE signifies the ability of this processor to switch rapidly between FPU MMX and SSE modes.

Intel Streaming SIMD Extensions SSE signifies the presence of a second instruction set extension 70 new instructions which speed up the processing of 3D graphics sound and internet.

Partial SSE support signifies an instruction set extension of Athlon and newer processor. It supports the SSE MMX and SSE MEM instructions.

Cyrix extended MMX signifies an instruction set extension for 6x86MX2 M I1 and newer processors. These processors support some new MMX instructions.

AMD 3Dnow Signifies support for 23 instructions from AMD for 3D graphics speed up which was first introduced with the KS 2 processor. This graphics instruction set is also supported by IDT WinChip processors. AMD extended 3Dnow AMD Athion and newer processors have additional 3D instructions.

MOV test is first of two memory benchmarks which measures transfer speed of memory and caches. These memory speeds are measured by transferring the same data block twice. During the first transfer a data block is loaded into cache the second time data is transferred from the cache. The block size is increased repeatedly from 2 kB to 2 MB. The transfer speed drops considerably above a certain block size indicating that the cache has reached full capacity. Cache size can be detected in this way. One could use a pair of MOV instructions in this test one of the most commonly used instructions. However transfers with a MOV instruction are slower than transfers via a MOVSD instruction which is used in my second memory test.

EST contains source address ED1 holds target address and ECX contains the number of repetitions. To transfer 4 K 1024 repetitions are needed because 32 bits 4 bytes are transferred at a time. Instruction MOV EAX ESI reads data from source address ESI in memory into EAX register in the processor. Second instruction MOV EDI EAX writes data from EAX back to target address in memory in EDI . Next two instructions ADD ESI 4 and ADD EDX 4 increment pointers to source and target address to point at next 4 byte which we will transfer. Next instruction DEC ECX decrements the ECX register by one so that the loop will be repeated only 1023 times. The fast instruction JNZ WPEAT forces repetition of this loop until ECX reaches zero.

Cache memory is fast and small. It holds Frequently used data which can be accessed quickly in the cache. Cache memory was used on 386 motherboards for the first time. From the 486 processor on two caches are used. There is a first level cache L1 which is on chip and a second level cache L2 which is usually on the motherboard. This second level cache is bigger but slower than the other. In Pentium class processors the first level cache is divided into code and data cache.

MOVSD test works similarly to the first memory bench. It too measures memory transfer speed respectively cache transfer speed but uses MOVSD instructions. This instruction is faster than a pair of MOV instructions because a modem processor will pre fetch reads using burst cycles and write combine data into burst cycles. The method of transferring the data block is similar ESI contains a source address ED1 holds a target address and ECX counts the number of repetitions. Then a REP MOVSD instruction is executed. The REP prefix means that the following instruction will be executed repeatedly. Number of repetitions is determined in ECX register whose value is decreased on every iteration until the value is zero. Then execution of the REP MOVSD loop finishes. MOVSD instruction moves data from source address ESI to target address EDI and increases both pointers ES1 and EDI to point to the next location.

A first benchmark calculates a large factorial using integer numbers so this benchmark only uses the processor no FPU . The factorial of 10001 is the product of all numbers from 1 to 10001 10001 1 2 3 . . . 9998 9999 10000 10001

This factorial result is stored in 148 12 bytes over 14 k3 of memory a 11 8496 bit number The result will still fit into an on die L1 cache in most processors. It will not reflect main memory performance.

A second benchmark calculates the first 30000 prime numbers. This benchmark uses only integer numbers again so it tests just the processor and uses about 120 Id3 memory which is accessed only once. Caching isn t needed.

Number n is prime if it isn t divisible by numbers bigger than 1 and smaller than n. But it will be enough to find divisibility by numbers or factors h m 2 to the square root of number a. All even numbers beyond two can t be primes because by definition they are divisible by the number two.

A third benchmark calculates the determinant of a 9 9 matrix using Laplace transformation. This benchmark works with regular matrices of real numbers so it will use both the processor and the FPU. A Laplace transformation is based on decomposition of an original matrix into smaller determinants which are then decomposed etc until a single number is obtained. In TestCPU this is done by recursive procedure calls. Here s a decomposition of a 3 3 matrix as an example of this benchmark in mathematical terms 

Unfortunately there is no simple way to just call a function and find out the exact speed of a user s Internet connection. The only realistic way to do this is to download a large file from the internet and then monitor the progress of the download. By measuring how long it takes to download the file based on the size of the download you can calculate an estimate of the user s connection speed this is exactly what most browsers download functions do . More importantly this calculation isn t just the theoretical connection speed i.e. 56 Kbps or 1.5 Mbps it s a real world test between the user s computer and your Internet hosting environment.

However most users would be really annoyed if they had to sit through an unnecessary download just so you have an idea of what their connection speed is like. So the way around it is to incorporate this monitoring check into a loader movie that preloads an actual download of an authentication interface to be presented to the user. This way we can get a sense of the user s connection speed without inconveniencing them.

When you click on each of the buttons you will see the progress of the file being preloaded into your cache. As it preloads it also calculates the approximate download speed you are getting on yaw individual machine. Now let s look at the sample code in Flash for this download.

This code calls the preloadFile handler and passes it the exact URL to download. Now you need to create the preloadFile handler in one of your movie scripts. Its code looks like this 

This preloadFile handler uses two global variables gNetID and gStartTime. The first global gNetID keeps track of which network operation is currently preloading. The second global gStartTime keeps track of the time when the download started. This handler starts by assigning gNetID with the value of the net operation preloadNetThing. Next it initializes gStartTime by setting it to zero. Finally it creates a timeout object which wit1 call the handler checkDownload every f 00 milliseconds or approximately ten times a second.

The network checker will execute the checkDownloadhandler 10 times a second. That handler looks like this 

This handler starts by getting the streamStatus of the preload operation we called earlier. The getstreamStatus function in Network checker returns a property list in Checker that looks like this 

There are five different properties in this list. The url property tells us the exact URL that is being downloaded the state property tells us what is currently happening with the download. There are five different possibilities for the state value Connecting Started InProgress Complete and Error . The bytesSoFar property tells us the number of bytes that have been currently downloaded and the bytesTotal property tells us the total number of bytes in the download. Finally if there is an error it is returned in the error property.

In the checkDownload handler we assign this property list to a local variable name tempStatus. Next we check the value of the state property if the operation has completed then we forget the timeout object and everything is done. If the state has just started or is in progress then we check to see if the global variable gStartTicks is stilt set to 0.If it is then we reset its value to the ticks which is a system property that relates the current time in 1 60ths of a second. Finally we use a sendAllSprites command to call the updateDownloadInfo handler in each of the different sprites on stage.

There are different behaviors on the progress bar and the text field containing the current time and these behaviors use the information sent to it to update their awn content. The most important thing though is that you use this information to calculate the average modem speed. That code looks like this 

This handler starts by making sure that startTicks and bytesTotal are not equal to 0 which effectively makes sure that the download has actually started. Next it subtracts the current ticks from startTicks and divides the number by 60 to give the exact number of seconds that have elapsed since the download began. If tempTime does not equal zero then this handler calculates the modemRate by taking the bytes so far multiplying it by 8 and then dividing it by 1000. It then divides that number by the total number of seconds that have elapsed since the download started and you are left with the actual download speed. Finally take this number and display it in the text member an screen.

So this formula for modem speed is as follows. The number that is sent to the handler is the total number of bytes that have been downloaded. However conventional modem speeds are represented by bits instead of bytes so we have to multiply the number of bytes by 8 to get the number of bits. Next modem speeds are referred to in kilobits or thousands of bits so to find that number we take the total number of bits and divide them by 1000 Finally we want to know the number of kilobits per second so we take the total number of kilobits and divide it by the total number of seconds to get the number of kilobits per seconds.

So when the download is done and we are ready to move on to the actual authentication interface Authenticator movie we have a text field all ready that contains a. fairly accurate description of the speed of a user s Internet connection.

