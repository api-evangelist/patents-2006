---

title: Identifying a configuration for an application in a production environment
abstract: Various embodiments of a computer-implemented method, computer system and computer program product provide a configuration recommendation. Request-processing performance data of an application is received. The request-processing performance data is collected by an application monitor during an execution of the application on a source hardware system. One or more request-processing performance measurements are determined based on the request-processing performance data. One or more target objectives of the application are received. An analytic engine is invoked to provide a configuration recommendation of a target hardware system on which to execute the application based on one or more request-processing performance measurements and one or more target objectives.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07756973&OS=07756973&RS=07756973
owner: International Business Machines Corporation
number: 07756973
owner_city: Armonk
owner_country: US
publication_date: 20060427
---
In co pending application Ser. No. 10 686 988 entitled Autonomic Computing Algorithm for Identification of an Optimum Configuration for a Web Infrastructure filed Oct. 15 2003 by Noshir C. Wadia and Peng Ye assigned to the assignee of the present invention and incorporated herein by reference in its entirety there is described various embodiments of a method system and article of manufacture for autonomic identification of an optimum hardware configuration for a Web infrastructure. Although not limited thereto various embodiments of the present invention employ embodiments of the method system and article of manufacture for autonomic identification of an optimum hardware configuration for a Web infrastructure.

In co pending application Ser. No. 10 174 030 entitled Method System and Article of Manufacture for an Analytic Modeling Technique for Handling Multiple Objectives filed Jun. 17 2002 by Michael Ignatowski and Noshir C. Wadia assigned to the assignee of the present invention and incorporated herein by reference in its entirety there is described various embodiments of a method system and article of manufacture method system and article of manufacture for an analytic modeling technique for handling multiple objectives. Although not limited thereto various embodiments of the present invention employ embodiments of the method system and article of manufacture method system and article of manufacture for an analytic modeling technique for handling multiple objectives.

This invention relates to identifying a configuration for an application and in particular this invention relates to identifying a configuration for an application in a production environment.

Many businesses provide services using the Internet. depicts an exemplary web application environment which provides a web service. A number of clients at for example a cell phone a server and computer systems and connect to a network such as the Internet and request information such as a web page from a web server . The web server receives the request and returns a response to the request for example the web page. The exemplary web server of comprises various types of application software and hardware on which that application software executes.

In the web server has three tiers. A first tier has one or more web presentation servers . The web presentation servers are software applications which respond to requests from the clients and provide the response if the information is available at the presentation server or pass the request to the second tier.

The second tier has one or more web application servers . The web application servers are software applications which provide integration business logic to execute the web application. In this example the web application servers access a third tier. The third tier has one or more database servers . The database servers are also software applications. For example if the processing of the request reaches the database servers the requested data is passed to the web application servers which may further processes the requested data and pass the requested data to the web presentation servers which generate a web page which is returned to the client.

In this example each tier of server application software executes on computer system hardware which is separate from the computer system hardware of the other tiers. In some web application environments each web presentation server web application server and database server may execute on a different computer system. Other web application environments may combine the functionality of the tiers on a single computer system. Yet other web application environments may combine the functionality of the web presentation servers and application servers on a single computer system separate from the database servers. In various web application environments an edge server may be between the presentation server s and the network .

When businesses plan to provide a new web application or provide an existing application to a larger group of users the configuration of the hardware that will handle the load of the application and that will satisfy performance targets at an acceptable cost needs to be determined. Therefore there is a need for a technique to determine a hardware configuration to implement a new or expand an existing application.

To overcome the limitations in the prior art described above and to overcome other limitations that will become apparent upon reading and understanding the present specification various embodiments of a computer implemented method computer system and computer program product provide a configuration recommendation. Request processing performance data of an application is received. The request processing performance data is collected by an application monitor during an execution of the application on a source hardware system. One or more request processing performance measurements are determined based on the request processing performance data. One or more target objectives of the application are received. An analytic engine is invoked to provide a configuration recommendation of a target hardware system on which to execute the application based on the one or more request processing performance measurements and the one or more target objectives.

In this way various embodiments provide a technique to determine a hardware configuration to implement a new or expand an existing application.

To facilitate understanding identical reference numerals have been used where possible to designate identical elements that are common to some of the figures.

After considering the following description those skilled in the art will clearly realize that the teachings of the various embodiments of the present invention can be utilized to provide a hardware configuration recommendation. Request processing performance data of an application is received. The request processing performance data is collected by an application monitor during an execution of the application on a source hardware system. One or more request processing performance measurements are determined based on the request processing performance data. One or more target objectives of the application are received. An analytic engine is invoked to provide a configuration recommendation of a target hardware system on which to execute the application based on the performance measurements and one or more target objectives.

The source hardware system is a data processing system such as a server computer. In various embodiments the server computer may execute the Windows AIX Linux MVS z OS Solaris HP UX or Unix operating system. In other embodiments the server computer may execute other operating systems. The target hardware system is also a data processing system such as a server computer which may execute any of the operating systems described above.

Various embodiments of the present invention provide a process that integrates data collection on software application executing on a source computer system with an analytic engine that provides a hardware configuration recommendation for a target computer system. In various embodiments the analytic engine may be a capacity planning tool and in other embodiments the analytic engine may be a mathematical modeling tool. In some embodiments the analytic engine implements a method system and article of manufacture for autonomic identification of an optimum hardware configuration for a Web infrastructure as described in U.S. patent application Ser. No. 10 686 988 titled Autonomic Computing Algorithm for Identification of an Optimum Configuration for a Web Infrastructure . In other embodiments other analytic engines may be used.

Various embodiments of the present invention facilitate the Information Technology Infrastructure Library Application Management process.

In the application development phase in step requirements are generated. In step a software design is generated based on the requirements. In step application software is built based on the software design.

In step an initial configuration estimate is made for the application software also referred to as the application. In various embodiments an Initial Configuration Estimate ICE module invokes an analytic engine to provide a configuration recommendation of a target computer system on which to execute the application based on target objectives and performance data of an execution of the application on an existing computer system that is a hardware system. In some embodiments the ICE module is implemented as a wizard. The ICE wizard is used to bridge the gap between the application development phase and the service management phase . Typically the target computer system is in a production execution environment. In various embodiments using performance data from an execution of the application on an existing computer system in an execution environment whether that execution environment is a pre production quality assurance or existing production environment improves the accuracy of the analytic engine s recommendation because the calculations performed by the analytic engine are based on an actual execution of the application.

In the service management phase in step the application is deployed to the target computer system. The target computer system is configured in accordance with the recommendation of the analytic engine. In step the application is operated. In step various optimizations may be applied to the application and the environment.

In step the user configures an application monitor to collect data on the application. In various embodiments the user configures a data collector which is part of the application monitor. In some embodiments the application monitor is the IBM WebSphere Application Monitor WSAM however the invention is not meant to be limited to WSAM and other application monitors may be used. In some embodiments the user schedules the playback of the recorded tests on the application.

In step a load is driven against the application once the application monitor is monitoring the application and performance data is collected. The load comprises requests such as requests for web pages. In for example a pre production quality assurance and development environment a load is driven against the application using automation software for example the recorded tests are played back. In an alternate embodiment for example in a production environment step is omitted and the application serves its usual traffic therefore the load comprises requests from users of the application.

In step the ICE wizard retrieves performance data of the application. The performance data is collected by the application monitor. In various embodiments the performance data comprises request processing performance data.

In step the ICE wizard receives at least one source hardware identifier indicating the type of server computer system on which the performance data of the application is collected.

In step the ICE wizard determines one or more performance measurements based on the performance data. The ICE wizard transforms at least a portion of the performance data which is collected by the application monitor to provide one or more performance measurements suitable for the analytic engine. In various embodiments the ICE wizard computes at least one performance measurement based on the performance data.

In step the ICE wizard invokes the analytic engine to provide a configuration recommendation of a target hardware system on which to execute the application based on at least one of the performance measurements the source hardware identifier and at least one target objective. In various embodiments the ICE wizard provides at least one of the performance measurements the source hardware identifier and one or more target objectives as parameters to the analytic engine. In some embodiments for example in which the ICE wizard and analytic engine are used with a predetermined source hardware system step is omitted and the source hardware identifier is not provided to the analytic engine.

In step the ICE wizard presents the configuration recommendation. In various embodiments the ICE wizard presents the configuration recommendation on a display. In other embodiments other output devices such a printer may be used.

In response to activating the PERFORMANCE ANALYSIS menu button a menu is displayed. The menu comprises a CREATE REPORTS menu item button a VIEW SAVED REPORTS button and a DAILY STATISTICS button . A button may be activated using any well known manner such as clicking on the button using a mouse activating the button using a keyboard or other techniques that are known or that may become known.

In response to activating the CREATE REPORTS menu item button another menu is displayed. This menu comprises an APPLICATION REPORTS menu button a SERVER REPORTS menu button a PRODUCTION ELIGIBILITY REPORT button an INITIAL CONFIGURATION REPORT button and an ITIL PROCESS REPORT button .

In the APPLICATION PROPERTIES window an Application Name text box allows a user to enter the name of the application and a Version text box allows a user to enter the version of the application.

The APPLICATION PROPERTIES window has a Production Eligibility Report tab and an Initial Configuration Report tab . In the Initial Configuration Report tab record scripts playback scripts and various parameters of the Initial Configuration Report may be specified. In some embodiments to gather performance data the user executes record and playback scripts in a sequential stream for a desired or predetermined period of time. The user reports this activity in the Initial Configuration Report tab .

In a RECORD SCRIPTS area an Owner text box allows a user to specify an owner. A start date and time of a record script can be specified or a current date may be selected using the Current Date button . The user enters an end date and time of when the user completed the process of recording scripts in end date and time text boxes or a current date may be entered as the end date and time by activating the Current Date button .

In a PLAYBACK SCRIPTS area an Owner text box allows a user to specify a name of the owner who played back or scheduled the playback of the scripts. The user enters a start date and time of when the user began the process of playing back a script in a start date and time text box. A current date and time may be entered into the start date and time text boxes by activating the Current Date button .

The end date and time specifies the date and time when the user completed the process of recording scripts. The user enters the end date and time of when the user completed the process of playing back the scripts in end date and time text boxes . A current date and time may be entered into the end date and time text boxes by activating the Current Date button .

The start date and time and end date and time of the PLAYBACK SCRIPTS area help users to organize their workflow. In various embodiments there is no relationship between the start date and time and end date and time which is entered in the PLAYBACK SCRIPTS area and any other processes such as the execution of the test scripts. In some embodiments a record script and a playback script are not specified.

An INITIAL CONFIGURATION REPORT area displays a Report Name an Owner a Report Date Start a Report Date End and a Report Run On date and time . An Initial Configuration Report is also referred to as an Initial Configuration Estimate or ICE report. The Report Name is the name given the ICE report at the time the ICE report is saved. The Owner is the name of a user who created the ICE report. The Report Date Start displays the start of the date range used for building the ICE report. In various embodiments the Report Date Start is aligned with the start date of the scripts which are played back. The Report Date End displays the end of the date range used for building the ICE report. In various embodiments the Report Date End is aligned with the end date of the scripts which are played back. The Report Run On date and time displays the date and time that the ICE report is run or executed. In an Initial Configuration Report is to be created therefore the Report Name the Owner the Report Date Start the Report Date End and the Report Run On date and time are set to Not Applicable N A .

In response to activating a Use Existing dropdown button a menu of saved ICE reports from which the user can select is displayed.

In response to activating a Cancel button no further action is taken and the Application Properties window exits. In response to activating a Save button data entered in the Initial Configuration Report tab is saved.

In response to activating a Create button the ICE wizard is invoked. The Create button causes an Initial Configuration Estimate ICE Report to be created based on the specified application name and version specified record script and specified playback script. In other embodiments the ICE wizard is invoked in response to activating the INITIAL CONFIGURATION REPORT button .

In various embodiments and as illustrated above the ICE wizard is implemented within the application monitor user interface framework. In other embodiments the ICE wizard is implemented outside the user interface framework of the application monitor.

In response to being invoked the ICE wizard presents a sequence of windows to lead the user through the ICE process. The user steps through the ICE wizard to specify the server time period performance target load and output objectives response time calculation and source and target information.

In response to activating a Cancel button the ICE wizard exits. In response to activating a Next button the ICE wizard saves the selected group and server in an input data structure and presents the Select Date Range window .

To enter a custom start date the user can select a month day and year using the month day and year text box glyph pairs and respectively. The user enters a desired start time in the start time text box . To enter a custom end date the user can select a month day and year using the month day and year text box glyph pairs and respectively. The user enters a desired start time in the start time text box . The start date and time is referred to as a start date range setting and the end date and time is referred to as an end date range setting.

In response to activating a Cancel button the ICE wizard terminates. In response to activating a button ICE wizard saves the start and end dates and times in the input data structure and presents the Performance Target Objectives Load window of .

In response to activating a Cancel button the ICE wizard exits. In response to a button the ICE wizard stores the number of user visits per second as a specific arrival rate or the page view rate depending on whether check box or is checked stores the average user session time if check box is checked and the number of concurrent users if the check box is checked in the input data structure and displays the Performance Target Objectives Outputs window of . In various embodiments either the specific arrival rate or the page view rate is stored in the input data structure but not both.

In response to activating a Cancel button the ICE wizard exits. In response to a button the ICE wizard stores the response time per page view and CPU utilization if their associated check box is checked and the percent contingency factor in the input data structure and displays the Response Time Calculation window of .

Three radio buttons and allow a user to specify one of an Average Response Time a 90th Percentile Response Time and a 95th Percentile Response Time respectively. The radio buttons and are mutually exclusive. The ICE wizard provides an indication of the selected response time calculation to the analytic engine and the analytic engine provides a configuration recommendation in accordance with the indication of the selected response time calculation. For example a successful workload may have an average response time which below a specified performance target objective but still have individual requests that exceed the performance target objective. In response to providing the 90or 95percentile setting to the analytic engine the analytic engine applies the 90or 95percentile setting to the response time performance target objective by enforcing that either nine out of ten requests for the 90percentile setting or nineteen out of twenty requests for the 95percentile setting meet the specified performance target objective

In response to activating a Cancel button the ICE wizard exits. In response to activating a button the ICE wizard stores an indication representing the selected type of response time and displays the Source Configuration window of .

In response to a Use SSL checkbox being checked the ICE wizard receives a percentage of transactions using Secure Sockets Layer SSL of the source system in a of Transactions Using SSL text box . The source session persistence is selected by a user and is received by the ICE wizard using the Persistent and Non Persistent radio buttons and respectively. The application server hardware of the source system is specified using a Brand text box and associated glyph . In response to activating the glyph a list of source brands is displayed and the user selects one of the source brands from the list which is displayed in the Brand text box . In various embodiments the list of source brands comprises hardware for example Web Application Servers that execute Windows NT AIX Linux MVS Linux PPC Solaris and HP UX. However in other embodiments other source brands may be used. A source model is also specified using a Model text box and associated glyph . In response to activating the glyph a list of source models is displayed and the user selects one of the source models from the list which is displayed in the Model text box . For example a source brand may be a pSeries RS 6000 and the Model may be a P670 4 way 1500. In various embodiments the list of source brands and source models is provided with the ICE wizard.

In response to activating a Cancel button the ICE wizard exits. In response to activating a button the ICE wizard stores the percentage of transactions using SSL if the Use SSL checkbox is checked an indication of the specified session persistence the selected brand and the selected model in the input data structure and displays the Target Configuration window of .

In response to a Use SSL checkbox being checked the ICE wizard receives a percentage of transactions using Secure Sockets Layer of the target system in a of Transactions Using SSL text box . The target session persistence is selected by a user and received by the ICE wizard using the Persistent and Non Persistent radio buttons and respectively. The target application server hardware class is specified using a Brand text box and associated glyph . In response to activating the glyph a list of target brands is displayed and the user selects one of the target brands from the list which is displayed in the Brand text box . In various embodiments the list of target brands is the same as in the list of source brands Source Configuration window of .

In response to activating a Cancel button the ICE wizard exits. In response to activating a button the ICE wizard stores the target percentage of transactions using SSL if the checkbox is checked the selected target session persistence and the target brand in the input data structure calculates one or more performance measurements invokes the analytic engine and displays the Recommendation window of .

In step the ICE wizard retrieves request processing performance data from the application monitor based on the server selection and in some embodiments the group which is specified in the server selection window and the date range settings which are specified in the date range window. The request processing performance data comprises a list of CPU times and response times for the requests which are received within the start and end date range settings which are specified in the date range window. A request may be considered to be within the start and end date range settings if the start date and time of the request is greater than or equal to the start date range setting and less than or equal to the end date range setting. Alternately a request may be considered to be within the start and end date range settings if the start date and time of the request is greater than the start date range setting and less than the end date range setting.

In various embodiments a request can be any type of request which the application monitor can monitor such as a request for a web page or data. Examples of requests comprise Servlets Java Server Pages JSPs Enterprise Java Beans EJBs Portlets and standalone Java DataBase Connectivity JDBC calls such as in the third tier of the three tier architecture described above with reference to .

In step the ICE wizard calculates the average CPU time per request based on the request processing performance data. The ICE wizard calculates the average CPU time per request based on the total number of requests within the start and end date range settings which are specified in the date range window. The total CPU time is calculated from the individual CPU time which is captured by the application monitor for individual requests. The start and end date range settings define which requests are included in the calculation of the total CPU time. The total CPU time is equal to the sum of the CPU times of the individual requests within the start and end date range settings. The total CPU time is divided by the number of requests within the start and end date range settings to provide the average CPU time per request.

In other embodiments the application monitor directly measures the average CPU time per request and the ICE wizard queries the application monitor to retrieve the average CPU time per request.

In step the ICE wizard sets the Service time equal to the average CPU time per request. The ICE wizard stores the Service time in the input data structure.

In step the ICE wizard calculates the Average Response Time per request based on the request processing performance data. The response time per request represents an amount of time between receiving a request for example for a web page and responding to that request for example returning the web page for the requests within the start and end date range settings. The ICE wizard sums the response times of the requests which are retrieved in step and divides the sum by the number of requests to provide the Average Response Time per request.

In step the ICE wizard calculates the Average time for Input Outputs I Os per page view as follows Average time for I Os per page view Average Response Time per request Average CPU time per request. The ICE wizard stores the Average time for I Os per page view in the input data structure.

In other embodiments the application monitor directly measures the Average time for I Os per page view and the ICE wizard queries the application monitor to retrieve the Average time for I Os per page view .

In step the ICE wizard calculates a Think time per request . The Think time per request is calculated based on the requests which are received by the application within the start and end date range settings. In various embodiments the Think time represents an amount of time during which the system is not actually processing a request but waiting for resources to become available. Examples of resources comprise the CPU and database connection pools. The ICE wizard calculates a duration of load which is equal to the end date range setting minus the start date range setting which are specified in the date range window.

The ICE wizard sets an average number of sessions equal to an average number of live sessions. In various embodiments each time the user requests a new web page that request is a distinct request. The session is a device which allows a server to provide a seemingly continuous request response experience to a user. A session is an amount of memory which the server uses to identify a user and the user s previous activity. A live session corresponds to an active request. Sessions are typically maintained in expectation of a user submitting another request. Therefore at any point in time the sessions that the server maintains can be divided into a group of sessions that correspond to users for whom the system is actively processing requests and another group of sessions which the server is maintaining with an expectation that the user will issue a subsequent request. After a predetermined interval of time the system terminates the sessions that are no longer active to save memory.

The ICE wizard retrieves a total number of live sessions during the specified date range settings from the application monitor The total number of live sessions represents a total number of simultaneous live sessions at any point in time during the start and end date range settings and is used as the average number of sessions.

The ICE wizard sets a total response time equal to the sum of the response time of all requests at the server within the start and end date range settings which are specified in the date range window.

The ICE wizard determines the total number of requests which are received by the application at the server that are within the start and end date range settings which are specified in the date range window.

In other embodiments the application monitor directly measures the Think time per request and the ICE wizard queries the application monitor to retrieve the Think time per request.

In step the ICE wizard invokes the analytic engine to provide a configuration recommendation of a target hardware system on which to execute the application based on at least one target objective a specified source server a specified source configuration a specified target session information and at least one of the Service time Average time for I Os per page view and think time. In various embodiments the analytic engine receives data from the ICE wizard using the input data structure and provides the configuration recommendation based on at least one parameter of the input data structure. Typically one or more instructions are executed on a data processing system to invoke the analytic engine. In various embodiments the analytic engine provides an application programming interface comprising one or more instructions which can be used to invoke the analytic engine.

In various embodiments the ICE wizard invokes the analytic engine via an application programming interface and provides the Service Time Average time for I Os per page view and the Think Time along with the specified source configuration of the Source Configuration Window and one or more specified performance targets which are specified in the Performance Target Objectives Load window the Performance Target Objectives Outputs window Response Time Calculation window and Target Configuration window to the analytic engine via the input data structure.

In some embodiments the analytic engine recommends a hardware configuration of a user specified target hardware system. In other embodiments for example if no target hardware system is specified the analytic engine recommends a target hardware system.

In various embodiments the analytic engine implements a technique described in U.S. patent application Ser. No. 10 174 030 entitled Method System and Article of Manufacture for an Analytic Modeling Technique for Handling Multiple Objectives to determine a configuration recommendation. For example in some embodiments the analytic engine uses the actual Service time Average time for I Os per page view and Think time per request that is provided by the ICE wizard to calculate response times to estimate the performance of a target computer system.

In some embodiments the analytic engine implements a technique described in application Ser. No. 10 686 988 entitled Autonomic Computing Algorithm for Identification of an Optimum Configuration for a Web Infrastructure to determine a configuration recommendation.

In step the ICE wizard displays the configuration recommendation provided by the analytic engine in the Recommendation window of . The values in the Recommendation window are provided to the ICE wizard by the analytic engine in the configuration recommendation data structure.

The configuration recommendation provided by the analytic engine is displayed in tabs comprising a Solution tab an Overall tab a Minimum Response Time tab a Utilization tab and a Memory tab . The Solution tab displays a Brand Model number of nodes disk access time in milliseconds ms and a number of disks .

In response to activating a Cancel button the ICE wizard exits. In response to activating a button being activated the ICE wizard displays the Save Report window of .

Various embodiments of the invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore various embodiments of the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and digital video disk DVD . The term computer readable storage medium is defined to be any apparatus that can store the program for use by or in connection with the instruction execution system apparatus or device such as semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. The term computer usable communication medium is defined to be any apparatus that can communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

Input output or I O devices including but not limited to for example a keyboard pointing device such as a mouse a display printer etc. can be coupled to the system bus either directly or through intervening I O controllers.

Network adapters such as a network interface NI may also be coupled to the system bus to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks . Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters. The network adapter may be coupled to the network via a network transmission line for example twisted pair coaxial cable or fiber optic cable or a wireless interface that uses a wireless transmission medium. In addition the software in which various embodiments are implemented may be accessible through the transmission medium for example from a server over the network.

The memory elements store an operating system the application the application monitor performance data which is collected by the application monitor the ICE wizard the input data structure the analytic engine the configuration recommendation data structure that contains the configuration recommendation provided by the analytic engine and one or more ICE Reports . In some embodiments the analytic engine and ICE wizard are combined. In various embodiments the application application monitor and performance data are on a different data processing system from the data processing system containing the ICE wizard and analytic engine .

The operating system may be implemented by any conventional operating system such as the z OS MVS OS 390 AIX UNIX Windows LINUX Solaris or HP UX operating system.

The exemplary data processing system illustrated in is not intended to limit the present invention. Other alternative hardware environments may be used without departing from the scope of the present invention.

The performance target objectives comprise user visits per second page views per second average user session time number of concurrent users response time per page view CPU utilization and percent contingency factor . The performance target objectives are provided in the Performance Target Objectives windows .

The source configuration parameters are input in the Source Configuration window comprise the percent transactions using SSL session persistent indicator source hardware brand and source hardware model . The target configuration parameters are input in the Target Configuration window comprise the percent transactions using SSL session persistent indicator and target hardware brand . In some embodiments the target hardware brand is not supplied and the analytic engine recommends a target hardware brand.

The foregoing detailed description of various embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teachings. It is intended that the scope of the invention be limited not by this detailed description but rather by the claims appended thereto.

IBM z OS MVS OS 390 and AIX trademarks of International Business Machines Corporation in the United States other countries or both. Windows is a registered trademark of Microsoft Corporation. LINUX is a registered trademark of Linus Torvalds. Java is and all Java based trademarks are trademarks of Sun Microsystems Inc. in the United States other countries or both. Solaris is a registered trademark of Sun Microsystems Inc. HP UX is a registered trademark of Hewlett Packard Development Company L.P. UNIX is a registered trademark of the Open Group in the United States and other countries.

