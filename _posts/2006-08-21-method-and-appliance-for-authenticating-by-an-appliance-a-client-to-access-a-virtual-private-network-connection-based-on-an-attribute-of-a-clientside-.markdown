---

title: Method and appliance for authenticating, by an appliance, a client to access a virtual private network connection, based on an attribute of a client-side certificate
abstract: In a method and appliance for authenticating, by an appliance, a client to access a virtual network connection, based on an attribute of a client-side certificate, a client authentication certificate is requested from a client. A value of at least one field in the client authentication certificate received from the client is identified. One of a plurality of types of access is assigned responsive to an application of a policy to the identified value of the at least one field, each of the plurality of access types associated with at least one connection characteristic.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08413229&OS=08413229&RS=08413229
owner: Citrix Systems, Inc.
number: 08413229
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20060821
---
The present invention generally relates to data communication networks. In particular the present invention relates to a method and appliance for authenticating by an appliance a client to access a virtual private network connection based on an attribute of a client side certificate.

Conventional methods of access control typically require receipt and evaluation of authentication credentials from a client prior to granting access. The credentials are typically presented to an access infrastructure or other security gateway which determines what types of access may be provided to the client. In some methods a certificate provides information associated with the client such as a verification of a user s identity. However conventional methods typically do not use certificate data or other authentication information when identifying a type of connection to establish with or for the user only when identifying whether or not to grant access. Many different types of connections may be granted to or required of a user secure connections accelerated connections and so on. Policies applicable to the user may indicate that to access a resource a user is required to establish a particular type of connection for example a connection to a virtual private network. Alternatively a user may qualify for improved connection quality such as an accelerated connection. Or information about the user request such as a time of day the request is made or a particular resource requested may influence a type of connection established for a user for example a load balanced or traffic managed connection. A method of determining types of connections responsive to authentication information associated with a user would be desirable in providing access to proprietary resources in a networked environment.

In one aspect a method for authenticating by an appliance a client to access a virtual network connection based on an attribute of a client side certificate includes the step of requesting a client authentication certificate from a client. A value of at least one field in the client authentication certificate received from the client is identified. One of a plurality of types of access is assigned responsive to an application of a policy to the identified value of the at least one field each of the plurality of access types associated with at least one connection characteristic.

In one embodiment a client authentication certificate comprising a Secure Socket Layer SSL certificate is requested from the client. In another embodiment the identified value of the at least one field identifies a username associated with a user of the client. In still another embodiment the identified value of the at least one field identifies a group of users with which a user of the client is associated. In yet another embodiment the identified value of the at least one field identifies a policy applicable to a user of the client.

In one embodiment a user interface having a user name field displaying the identified value of the at least one field is displayed on the client. In another embodiment a password is received from a user of the client via a password field of the user interface. In still another embodiment a value of a second field in the client authentication certificate is identified. In yet another embodiment authorization is granted based on the identified value of the second field.

In one embodiment the user is authenticated to a first authentication service responsive to the identified value and to a password provided by the user of the client. In another embodiment the first authentication service comprises an external authentication server. In still another embodiment the first authentication service comprises an authentication database of the appliance. In yet another embodiment the user is authenticated to a second authentication service.

In one embodiment one of a plurality of types of access is assigned the assigned type of access associated with a connection characteristic identifying an accelerated connection. In another embodiment one of a plurality of types of access is assigned the assigned type of access associated with a connection characteristic identifying a load balanced connection. In still another embodiment one of a plurality of types of access is assigned the assigned type of access associated with a connection characteristic identifying a traffic managed connection. In yet another embodiment one of a plurality of types of access is assigned the assigned type of access associated with a connection characteristic identifying a session managed connection.

In another aspect an appliance for authenticating a client to access a virtual private network connection based on an attribute of a client side certificate comprises a means for requesting a client authentication certificate from a client. The appliance comprises a means for identifying a value of at least one field in the client authentication certificate received from the client. The appliance comprises a means for assigning one of a plurality of types of access responsive to application of a policy to the identified value of the at least one field each of the plurality of access types associated with at least one connection characteristic.

The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements.

Prior to discussing the specifics of embodiments of the systems and methods of an appliance and or client it may be helpful to discuss the network and computing environments in which such embodiments may be deployed. Referring now to an embodiment of a network environment is depicted. In brief overview the network environment comprises one or more clients also generally referred to as local machine s or client s in communication with one or more servers also generally referred to as server s or remote machine s via one or more networks generally referred to as network . In some embodiments a client communicates with a server via an appliance .

Although shows a network and a network between the clients and the servers the clients and the servers may be on the same network . The networks and can be the same type of network or different types of networks. The network and or the network can be a local area network LAN such as a company Intranet a metropolitan area network MAN or a wide area network WAN such as the Internet or the World Wide Web. In one embodiment network may be a private network and network may be a public network. In some embodiments network may be a private network and network a public network. In another embodiment networks and may both be private networks. In some embodiments clients may be located at a branch office of a corporate enterprise communicating via a WAN connection over the network to the servers located at a corporate data center.

The network and or be any type and or form of network and may include any of the following a point to point network a broadcast network a wide area network a local area network a telecommunications network a data communication network a computer network an ATM Asynchronous Transfer Mode network a SONET Synchronous Optical Network network a SDH Synchronous Digital Hierarchy network a wireless network and a wireline network. In some embodiments the network may comprise a wireless link such as an infrared channel or satellite band. The topology of the network and or may be a bus star or ring network topology. The network and or and network topology may be of any such network or network topology as known to those ordinarily skilled in the art capable of supporting the operations described herein.

As shown in the appliance which also may be referred to as an interface unit or gateway is shown between the networks and . In some embodiments the appliance may be located on network . For example a branch office of a corporate enterprise may deploy an appliance at the branch office. In other embodiments the appliance may be located on network . For example an appliance may be located at a corporate data center. In yet another embodiment a plurality of appliances may be deployed on network . In some embodiments a plurality of appliances may be deployed on network . In one embodiment a first appliance communicates with a second appliance . In other embodiments the appliance could be a part of any client or server on the same or different network as the client . One or more appliances may be located at any point in the network or network communications path between a client and a server .

In one embodiment the system may include multiple logically grouped servers . In these embodiments the logical group of servers may be referred to as a server farm . In some of these embodiments the serves may be geographically dispersed. In some cases a farm may be administered as a single entity. In other embodiments the server farm comprises a plurality of server farms . In one embodiment the server farm executes one or more applications on behalf of one or more clients .

The servers within each farm can be heterogeneous. One or more of the servers can operate according to one type of operating system platform e.g. WINDOWS NT manufactured by Microsoft Corp. of Redmond Wash. while one or more of the other servers can operate on according to another type of operating system platform e.g. Unix or Linux . The servers of each farm do not need to be physically proximate to another server in the same farm . Thus the group of servers logically grouped as a farm may be interconnected using a wide area network WAN connection or medium area network MAN connection. For example a farm may include servers physically located in different continents or different regions of a continent country state city campus or room. Data transmission speeds between servers in the farm can be increased if the servers are connected using a local area network LAN connection or some form of direct connection.

Servers may be referred to as a file server application server web server proxy server or gateway server. In some embodiments a server may have the capacity to function as either an application server or as a master application server. In one embodiment a server may include an Active Directory. The clients may also be referred to as client nodes or endpoints. In some embodiments a client has the capacity to function as both a client node seeking access to applications on a server and as an application server providing access to hosted applications for other clients 

In some embodiments a client communicates with a server . In one embodiment the client communicates directly with one of the servers in a farm . In another embodiment the client executes a program neighborhood application to communicate with a server in a farm . In still another embodiment the server provides the functionality of a master node. In some embodiments the client communicates with the server in the farm through a network . Over the network the client can for example request execution of various applications hosted by the servers in the farm and receive output of the results of the application execution for display. In some embodiments only the master node provides the functionality required to identify and provide address information associated with a server hosting a requested application.

In one embodiment the server provides functionality of a web server. In another embodiment the server receives requests from the client forwards the requests to a second server and responds to the request by the client with a response to the request from the server . In still another embodiment the server acquires an enumeration of applications available to the client and address information associated with a server hosting an application identified by the enumeration of applications. In yet another embodiment the server presents the response to the request to the client using a web interface. In one embodiment the client communicates directly with the server to access the identified application. In another embodiment the client receives application output data such as display data generated by an execution of the identified application on the server .

Referring now to a network environment for delivering and or operating a computing environment on a client is depicted. In some embodiments a server includes an application delivery system for delivering a computing environment or an application and or data file to one or more clients . In brief overview a client is in communication with a server via network and appliance . For example the client may reside in a remote office of a company e.g. a branch office and the server may reside at a corporate data center. The client comprises a client agent and a computing environment . The computing environment may execute or operate an application that accesses processes or uses a data file. The computing environment application and or data file may be delivered via the appliance and or the server .

In some embodiments the appliance accelerates delivery of a computing environment or any portion thereof to a client . In one embodiment the appliance accelerates the delivery of the computing environment by the application delivery system . For example the embodiments described herein may be used to accelerate delivery of a streaming application and data file processable by the application from a central corporate data center to a remote user location such as a branch office of the company. In another embodiment the appliance accelerates transport layer traffic between a client and a server . The appliance may provide acceleration techniques for accelerating any transport layer payload from a server to a client such as 1 transport layer connection pooling 2 transport layer connection multiplexing 3 transport control protocol buffering 4 compression and 5 caching. In some embodiments the appliance provides load balancing of servers in responding to requests from clients . In other embodiments the appliance acts as a proxy or access server to provide access to the one or more servers . In another embodiment the appliance provides a secure virtual private network connection from a first network of the client to the second network of the server such as an SSL VPN connection. It yet other embodiments the appliance provides application firewall security control and management of the connection and communications between a client and a server .

In some embodiments the application delivery management system provides application delivery techniques to deliver a computing environment to a desktop of a user remote or otherwise based on a plurality of execution methods and based on any authentication and authorization policies applied via a policy engine . With these techniques a remote user may obtain a computing environment and access to server stored applications and data files from any network connected device . In one embodiment the application delivery system may reside or execute on a server . In another embodiment the application delivery system may reside or execute on a plurality of servers . In some embodiments the application delivery system may execute in a server farm . In one embodiment the server executing the application delivery system may also store or provide the application and data file. In another embodiment a first set of one or more servers may execute the application delivery system and a different server may store or provide the application and data file. In some embodiments each of the application delivery system the application and data file may reside or be located on different servers. In yet another embodiment any portion of the application delivery system may reside execute or be stored on or distributed to the appliance or a plurality of appliances.

The client may include a computing environment for executing an application that uses or processes a data file. The client via networks and appliance may request an application and data file from the server . In one embodiment the appliance may forward a request from the client to the server . For example the client may not have the application and data file stored or accessible locally. In response to the request the application delivery system and or server may deliver the application and data file to the client . For example in one embodiment the server may transmit the application as an application stream to operate in computing environment on client .

In some embodiments the application delivery system comprises any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application delivery system may deliver one or more applications to clients or users via a remote display protocol or otherwise via remote based or server based computing. In another embodiment the application delivery system may deliver one or more applications to clients or users via steaming of the application.

In one embodiment the application delivery system includes a policy engine for controlling and managing the access to selection of application execution methods and the delivery of applications. In some embodiments the policy engine determines the one or more applications a user or client may access. In another embodiment the policy engine determines how the application should be delivered to the user or client e.g. the method of execution. In some embodiments the application delivery system provides a plurality of delivery techniques from which to select a method of application execution such as a server based computing streaming or delivering the application locally to the client for local execution.

In one embodiment a client requests execution of an application program and the application delivery system comprising a server selects a method of executing the application program. In some embodiments the server receives credentials from the client . In another embodiment the server receives a request for an enumeration of available applications from the client . In one embodiment in response to the request or receipt of credentials the application delivery system enumerates a plurality of application programs available to the client . The application delivery system receives a request to execute an enumerated application. The application delivery system selects one of a predetermined number of methods for executing the enumerated application for example responsive to a policy of a policy engine. The application delivery system may select a method of execution of the application enabling the client to receive application output data generated by execution of the application program on a server . The application delivery system may select a method of execution of the application enabling the local machine to execute the application program locally after retrieving a plurality of application files comprising the application. In yet another embodiment the application delivery system may select a method of execution of the application to stream the application via the network to the client .

A client may execute operate or otherwise provide an application which can be any type and or form of software program or executable instructions such as any type and or form of web browser web based client client server application a thin client computing client an ActiveX control or a Java applet or any other type and or form of executable instructions capable of executing on client . In some embodiments the application may be a server based or a remote based application executed on behalf of the client on a server . In one embodiments the server may display output to the client using any thin client or remote display protocol such as the Independent Computing Architecture ICA protocol manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. or the Remote Desktop Protocol RDP manufactured by the Microsoft Corporation of Redmond Wash. The application can use any type of protocol and it can be for example an HTTP client an FTP client an Oscar client or a Telnet client. In other embodiments the application comprises any type of software related to VoIP communications such as a soft IP telephone. In further embodiments the application comprises any application related to real time data communications such as applications for streaming video and or audio.

In some embodiments the server or a server farm may be running one or more applications such as an application providing a thin client computing or remote display presentation application. In one embodiment the server or server farm executes as an application any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application is an ICA client developed by Citrix Systems Inc. of Fort Lauderdale Fla. In other embodiments the application includes a Remote Desktop RDP client developed by Microsoft Corporation of Redmond Wash. Also the server may run an application which for example may be an application server providing email services such as Microsoft Exchange manufactured by the Microsoft Corporation of Redmond Wash. a web or Internet server or a desktop sharing server or a collaboration server. In some embodiments any of the applications may comprise any type of hosted service or products such as GoToMeeting provided by Citrix Online Division Inc. of Santa Barbara Calif. WebEX provided by WebEx Inc. of Santa Clara Calif. or Microsoft Office Live Meeting provided by Microsoft Corporation of Redmond Wash.

The client server and appliance may be deployed as and or executed on any type and form of computing device such as a computer network device or appliance capable of communicating on any type and form of network and performing the operations described herein. depict block diagrams of a computing device useful for practicing an embodiment of the client server or appliance . As shown in each computing device includes a central processing unit and a main memory unit . As shown in a computing device may include a visual display device a keyboard and or a pointing device such as a mouse. Each computing device may also include additional optional elements such as one or more input output devices generally referred to using reference numeral and a cache memory in communication with the central processing unit .

The central processing unit is any logic circuitry that responds to and processes instructions fetched from the main memory unit . In many embodiments the central processing unit is provided by a microprocessor unit such as those manufactured by Intel Corporation of Mountain View Calif. those manufactured by Motorola Corporation of Schaumburg Ill. those manufactured by Transmeta Corporation of Santa Clara Calif. the RS 6000 processor those manufactured by International Business Machines of White Plains N.Y. or those manufactured by Advanced Micro Devices of Sunnyvale Calif. The computing device may be based on any of these processors or any other processor capable of operating as described herein.

Main memory unit may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the microprocessor such as Static random access memory SRAM Burst SRAM or SynchBurst SRAM BSRAM Dynamic random access memory DRAM Fast Page Mode DRAM FPM DRAM Enhanced DRAM EDRAM Extended Data Output RAM EDO RAM Extended Data Output DRAM EDO DRAM Burst Extended Data Output DRAM BEDO DRAM Enhanced DRAM EDRAM synchronous DRAM SDRAM JEDEC SRAM PC 100 SDRAM Double Data Rate SDRAM DDR SDRAM Enhanced SDRAM ESDRAM SyncLink DRAM SLDRAM Direct Rambus DRAM DRDRAM or Ferroelectric RAM FRAM . The main memory may be based on any of the above described memory chips or any other available memory chips capable of operating as described herein. In the embodiment shown in the processor communicates with main memory via a system bus described in more detail below . depicts an embodiment of a computing device in which the processor communicates directly with main memory via a memory port . For example in the main memory may be DRDRAM.

The computing device may support any suitable installation device such as a floppy disk drive for receiving floppy disks such as 3.5 inch 5.25 inch disks or ZIP disks a CD ROM drive a CD R RW drive a DVD ROM drive tape drives of various formats USB device hard drive or any other device suitable for installing software and programs such as any client agent or portion thereof. The computing device may further comprise a storage device such as one or more hard disk drives or redundant arrays of independent disks for storing an operating system and other related software and for storing application software programs such as any program related to the client agent . Optionally any of the installation devices could also be used as the storage device . Additionally the operating system and the software can be run from a bootable medium for example a bootable CD such as KNOPPIX a bootable CD for GNU Linux that is available as a GNU Linux distribution from knoppix.net.

Furthermore the computing device may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56 kb X.25 broadband connections e.g. ISDN Frame Relay ATM wireless connections or some combination of any or all of the above. The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein. A wide variety of I O devices may be present in the computing device . Input devices include keyboards mice trackpads trackballs microphones and drawing tablets. Output devices include video displays speakers inkjet printers laser printers and dye sublimation printers. The I O devices may be controlled by an I O controller as shown in . The I O controller may control one or more I O devices such as a keyboard and a pointing device e.g. a mouse or optical pen. Furthermore an I O device may also provide storage and or an installation medium for the computing device . In still other embodiments the computing device may provide USB connections to receive handheld USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry Inc. of Los Alamitos Calif.

In some embodiments the computing device may comprise or be connected to multiple display devices which each may be of the same or different type and or form. As such any of the I O devices and or the I O controller may comprise any type and or form of suitable hardware software or combination of hardware and software to support enable or provide for the connection and use of multiple display devices by the computing device . For example the computing device may include any type and or form of video adapter video card driver and or library to interface communicate connect or otherwise use the display devices . In one embodiment a video adapter may comprise multiple connectors to interface to multiple display devices . In other embodiments the computing device may include multiple video adapters with each video adapter connected to one or more of the display devices . In some embodiments any portion of the operating system of the computing device may be configured for using multiple displays . In other embodiments one or more of the display devices may be provided by one or more other computing devices such as computing devices and connected to the computing device for example via a network. These embodiments may include any type of software designed and constructed to use another computer s display device as a second display device for the computing device . One ordinarily skilled in the art will recognize and appreciate the various ways and embodiments that a computing device may be configured to have multiple display devices 

In further embodiments an I O device may be a bridge between the system bus and an external communication bus such as a USB bus an Apple Desktop Bus an RS 232 serial connection a SCSI bus a FireWire bus a FireWire 800 bus an Ethernet bus an AppleTalk bus a Gigabit Ethernet bus an Asynchronous Transfer Mode bus a HIPPI bus a Super HIPPI bus a SerialPlus bus a SCI LAMP bus a FibreChannel bus or a Serial Attached small computer system interface bus.

A computing device of the sort depicted in typically operate under the control of operating systems which control scheduling of tasks and access to system resources. The computing device can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or any other operating system capable of running on the computing device and performing the operations described herein. Typical operating systems include WINDOWS 3.x WINDOWS 95 WINDOWS 98 WINDOWS 2000 WINDOWS NT 3.51 WINDOWS NT 4.0 WINDOWS CE and WINDOWS XP all of which are manufactured by Microsoft Corporation of Redmond Wash. MacOS manufactured by Apple Computer of Cupertino Calif. OS 2 manufactured by International Business Machines of Armonk N.Y. and Linux a freely available operating system distributed by Caldera Corp. of Salt Lake City Utah or any type and or form of a Unix operating system among others.

In other embodiments the computing device may have different processors operating systems and input devices consistent with the device. For example in one embodiment the computer is a Treo 180 270 1060 600 or 650 smart phone manufactured by Palm Inc. In this embodiment the Treo smart phone is operated under the control of the PalmOS operating system and includes a stylus input device as well as a five way navigator device. Moreover the computing device can be any workstation desktop computer laptop or notebook computer server handheld computer mobile telephone any other computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

Hardware layer provides the hardware elements upon which programs and services within kernel space and user space are executed. Hardware layer also provides the structures and elements which allow programs and services within kernel space and user space to communicate data both internally and externally with respect to appliance . As shown in the hardware layer includes a processing unit for executing software programs and services a memory for storing software and data network ports for transmitting and receiving data over a network and an encryption processor for performing functions related to Secure Sockets Layer processing of data transmitted and received over the network. In some embodiments the central processing unit may perform the functions of the encryption processor in a single processor. Additionally the hardware layer may comprise multiple processors for each of the processing unit and the encryption processor . The processor may include any of the processors described above in connection with . In some embodiments the central processing unit may perform the functions of the encryption processor in a single processor. Additionally the hardware layer may comprise multiple processors for each of the processing unit and the encryption processor . For example in one embodiment the appliance comprises a first processor and a second processor . In other embodiments the processor or comprises a multi core processor.

Although the hardware layer of appliance is generally illustrated with an encryption processor processor may be a processor for performing functions related to any encryption protocol such as the Secure Socket Layer SSL or Transport Layer Security TLS protocol. In some embodiments the processor may be a general purpose processor GPP and in further embodiments may be have executable instructions for performing processing of any security related protocol.

Although the hardware layer of appliance is illustrated with certain elements in the hardware portions or components of appliance may comprise any type and form of elements hardware or software of a computing device such as the computing device illustrated and discussed herein in conjunction with . In some embodiments the appliance may comprise a server gateway router switch bridge or other type of computing or network device and have any hardware and or software elements associated therewith.

The operating system of appliance allocates manages or otherwise segregates the available system memory into kernel space and user space . In example software architecture the operating system may be any type and or form of Unix operating system although the invention is not so limited. As such the appliance can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any network operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or network devices or any other operating system capable of running on the appliance and performing the operations described herein.

The kernel space is reserved for running the kernel including any device drivers kernel extensions or other kernel related software. As known to those skilled in the art the kernel is the core of the operating system and provides access control and management of resources and hardware related elements of the appliance . In accordance with an embodiment of the appliance the kernel space also includes a number of network services or processes working in conjunction with a cache manager sometimes also referred to as the integrated cache the benefits of which are described in detail further herein. Additionally the embodiment of the kernel will depend on the embodiment of the operating system installed configured or otherwise used by the device .

In one embodiment the device comprises one network stack such as a TCP IP based stack for communicating with the client and or the server . In one embodiment the network stack is used to communicate with a first network such as network and with a second network . In some embodiments the appliance terminates a first transport layer connection such as a TCP connection of a client and establishes a second transport layer connection to a server for use by the client e.g. the second transport layer connection is terminated at the appliance and the server . The first and second transport layer connections may be established via a single network stack . In other embodiments the appliance may comprise multiple network stacks for example and and the first transport layer connection may be established or terminated at one network stack and the second transport layer connection on the second network stack . For example one network stack may be for receiving and transmitting network packet on a first network and another network stack for receiving and transmitting network packets on a second network. In one embodiment the network stack comprises a buffer for queuing one or more network packets for transmission by the appliance .

As shown in the kernel space includes the cache manager a high speed layer 2 7 integrated packet engine an encryption engine a policy engine and multi protocol compression logic . Running these components or processes and in kernel space or kernel mode instead of the user space improves the performance of each of these components alone and in combination. Kernel operation means that these components or processes and run in the core address space of the operating system of the appliance . For example running the encryption engine in kernel mode improves encryption performance by moving encryption and decryption operations to the kernel thereby reducing the number of transitions between the memory space or a kernel thread in kernel mode and the memory space or a thread in user mode. For example data obtained in kernel mode may not need to be passed or copied to a process or thread running in user mode such as from a kernel level data structure to a user level data structure. In another aspect the number of context switches between kernel mode and user mode are also reduced. Additionally synchronization of and communications between any of the components or processes and can be performed more efficiently in the kernel space .

In some embodiments any portion of the components and may run or operate in the kernel space while other portions of these components and may run or operate in user space . In one embodiment the appliance uses a kernel level data structure providing access to any portion of one or more network packets for example a network packet comprising a request from a client or a response from a server . In some embodiments the kernel level data structure may be obtained by the packet engine via a transport layer driver interface or filter to the network stack . The kernel level data structure may comprise any interface and or data accessible via the kernel space related to the network stack network traffic or packets received or transmitted by the network stack . In other embodiments the kernel level data structure may be used by any of the components or processes and to perform the desired operation of the component or process. In one embodiment a component and is running in kernel mode when using the kernel level data structure while in another embodiment the component and is running in user mode when using the kernel level data structure. In some embodiments the kernel level data structure may be copied or passed to a second kernel level data structure or any desired user level data structure.

The cache manager may comprise software hardware or any combination of software and hardware to provide cache access control and management of any type and form of content such as objects or dynamically generated objects served by the originating servers . The data objects or content processed and stored by the cache manager may comprise data in any format such as a markup language or communicated via any protocol. In some embodiments the cache manager duplicates original data stored elsewhere or data previously computed generated or transmitted in which the original data may require longer access time to fetch compute or otherwise obtain relative to reading a cache memory element. Once the data is stored in the cache memory element future use can be made by accessing the cached copy rather than refetching or recomputing the original data thereby reducing the access time. In some embodiments the cache memory element nat comprise a data object in memory of appliance . In other embodiments the cache memory element may comprise memory having a faster access time than memory . In another embodiment the cache memory element may comprise any type and form of storage element of the appliance such as a portion of a hard disk. In some embodiments the processing unit may provide cache memory for use by the cache manager . In yet further embodiments the cache manager may use any portion and combination of memory storage or the processing unit for caching data objects and other content.

Furthermore the cache manager includes any logic functions rules or operations to perform any embodiments of the techniques of the appliance described herein. For example the cache manager includes logic or functionality to invalidate objects based on the expiration of an invalidation time period or upon receipt of an invalidation command from a client or server . In some embodiments the cache manager may operate as a program service process or task executing in the kernel space and in other embodiments in the user space . In one embodiment a first portion of the cache manager executes in the user space while a second portion executes in the kernel space . In some embodiments the cache manager can comprise any type of general purpose processor GPP or any other type of integrated circuit such as a Field Programmable Gate Array FPGA Programmable Logic Device PLD or Application Specific Integrated Circuit ASIC .

The policy engine may include for example an intelligent statistical engine or other programmable application s . In one embodiment the policy engine provides a configuration mechanism to allow a user to identifying specify define or configure a caching policy. Policy engine in some embodiments also has access to memory to support data structures such as lookup tables or hash tables to enable user selected caching policy decisions. In other embodiments the policy engine may comprise any logic rules functions or operations to determine and provide access control and management of objects data or content being cached by the appliance in addition to access control and management of security network traffic network access compression or any other function or operation performed by the appliance . Further examples of specific caching policies are further described herein.

The encryption engine comprises any logic business rules functions or operations for handling the processing of any security related protocol such as SSL or TLS or any function related thereto. For example the encryption engine encrypts and decrypts network packets or any portion thereof communicated via the appliance . The encryption engine may also setup or establish SSL or TLS connections on behalf of the client server or appliance . As such the encryption engine provides offloading and acceleration of SSL processing. In one embodiment the encryption engine uses a tunneling protocol to provide a virtual private network between a client and a server . In some embodiments the encryption engine is in communication with the encryption processor . In other embodiments the encryption engine comprises executable instructions running on the encryption processor .

The multi protocol compression engine comprises any logic business rules function or operations for compressing one or more protocols of a network packet such as any of the protocols used by the network stack of the device . In one embodiment multi protocol compression engine compresses bi directionally between clients and servers any TCP IP based protocol including Messaging Application Programming Interface MAPI email File Transfer Protocol FTP HyperText Transfer Protocol HTTP Common Internet File System CIFS protocol file transfer Independent Computing Architecture ICA protocol Remote Desktop Protocol RDP Wireless Application Protocol WAP Mobile IP protocol and Voice Over IP VoIP protocol. In other embodiments multi protocol compression engine provides compression of Hypertext Markup Language HTML based protocols and in some embodiments provides compression of any markup languages such as the Extensible Markup Language XML . In one embodiment the multi protocol compression engine provides compression of any high performance protocol such as any protocol designed for appliance to appliance communications. In another embodiment the multi protocol compression engine compresses any payload of or any communication using a modified transport control protocol such as Transaction TCP T TCP TCP with selection acknowledgements TCP SACK TCP with large windows TCP LW a congestion prediction protocol such as the TCP Vegas protocol and a TCP spoofing protocol.

As such the multi protocol compression engine accelerates performance for users accessing applications via desktop clients e.g. Microsoft Outlook and non Web thin clients such as any client launched by popular enterprise applications like Oracle SAP and Siebel and even mobile clients such as the Pocket PC. In some embodiments the multi protocol compression engine by executing in the kernel mode and integrating with packet processing engine accessing the network stack is able to compress any of the protocols carried by the TCP IP protocol such as any application layer protocol.

High speed layer 2 7 integrated packet engine also generally referred to as a packet processing engine or packet engine is responsible for managing the kernel level processing of packets received and transmitted by appliance via network ports . The high speed layer 2 7 integrated packet engine may comprise a buffer for queuing one or more network packets during processing such as for receipt of a network packet or transmission of a network packer. Additionally the high speed layer 2 7 integrated packet engine is in communication with one or more network stacks to send and receive network packets via network ports . The high speed layer 2 7 integrated packet engine works in conjunction with encryption engine cache manager policy engine and multi protocol compression logic . In particular encryption engine is configured to perform SSL processing of packets policy engine is configured to perform functions related to traffic management such as request level content switching and request level cache redirection and multi protocol compression logic is configured to perform functions related to compression and decompression of data.

The high speed layer 2 7 integrated packet engine includes a packet processing timer . In one embodiment the packet processing timer provides one or more time intervals to trigger the processing of incoming i.e. received or outgoing i.e. transmitted network packets. In some embodiments the high speed layer 2 7 integrated packet engine processes network packets responsive to the timer . The packet processing timer provides any type and form of signal to the packet engine to notify trigger or communicate a time related event interval or occurrence. In many embodiments the packet processing timer operates in the order of milliseconds such as for example 100 ms 50 ms or 25 ms. For example in some embodiments the packet processing timer provides time intervals or otherwise causes a network packet to be processed by the high speed layer 2 7 integrated packet engine at a 10 ms time interval while in other embodiments at a 5 ms time interval and still yet in further embodiments as short as a 3 2 or 1 ms time interval. The high speed layer 2 7 integrated packet engine may be interfaced integrated or in communication with the encryption engine cache manager policy engine and multi protocol compression engine during operation. As such any of the logic functions or operations of the encryption engine cache manager policy engine and multi protocol compression logic may be performed responsive to the packet processing timer and or the packet engine . Therefore any of the logic functions or operations of the encryption engine cache manager policy engine and multi protocol compression logic may be performed at the granularity of time intervals provided via the packet processing timer for example at a time interval of less than or equal to 10 ms. For example in one embodiment the cache manager may perform invalidation of any cached objects responsive to the high speed layer 2 7 integrated packet engine and or the packet processing timer . In another embodiment the expiry or invalidation time of a cached object can be set to the same order of granularity as the time interval of the packet processing timer such as at every 10 ms.

In contrast to kernel space user space is the memory area or portion of the operating system used by user mode applications or programs otherwise running in user mode. A user mode application may not access kernel space directly and uses service calls in order to access kernel services. As shown in user space of appliance includes a graphical user interface GUI a command line interface CLI shell services health monitoring program and daemon services . GUI and CLI provide a means by which a system administrator or other user can interact with and control the operation of appliance such as via the operating system of the appliance and either is user space or kernel space . The GUI may be any type and form of graphical user interface and may be presented via text graphical or otherwise by any type of program or application such as a browser. The CLI may be any type and form of command line or text based interface such as a command line provided by the operating system. For example the CLI may comprise a shell which is a tool to enable users to interact with the operating system. In some embodiments the CLI may be provided via a bash csh tcsh or ksh type shell. The shell services comprises the programs services tasks processes or executable instructions to support interaction with the appliance or operating system by a user via the GUI and or CLI .

Health monitoring program is used to monitor check report and ensure that network systems are functioning properly and that users are receiving requested content over a network. Health monitoring program comprises one or more programs services tasks processes or executable instructions to provide logic rules functions or operations for monitoring any activity of the appliance . In some embodiments the health monitoring program intercepts and inspects any network traffic passed via the appliance . In other embodiments the health monitoring program interfaces by any suitable means and or mechanisms with one or more of the following the encryption engine cache manager policy engine multi protocol compression logic packet engine daemon services and shell services . As such the health monitoring program may call any application programming interface API to determine a state status or health of any portion of the appliance . For example the health monitoring program may ping or send a status inquiry on a periodic basis to check if a program process service or task is active and currently running. In another example the health monitoring program may check any status error or history logs provided by any program process service or task to determine any condition status or error with any portion of the appliance .

Daemon services are programs that run continuously or in the background and handle periodic service requests received by appliance . In some embodiments a daemon service may forward the requests to other programs or processes such as another daemon service as appropriate. As known to those skilled in the art a daemon service may run unattended to perform continuous or periodic system wide functions such as network control or to perform any desired task. In some embodiments one or more daemon services run in the user space while in other embodiments one or more daemon services run in the kernel space.

Referring now to a block diagram depicts another embodiment of the appliance . In brief overview the appliance provides one or more of the following services functionality or operations SSL VPN connectivity switching load balancing Domain Name Service resolution acceleration and an application firewall for communications between one or more clients and one or more servers . In one embodiment the appliance comprises any of the network devices manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. referred to as Citrix NetScaler devices. Each of the servers may provide one or more network related services referred to as services . For example a server may provide an http service . The appliance comprises one or more virtual servers or virtual internet protocol servers referred to as a vServer VIP server or just VIP also referred to herein as vServer . The vServer receives intercepts or otherwise processes communications between a client and a server in accordance with the configuration and operations of the appliance .

The vServer may comprise software hardware or any combination of software and hardware. The vServer may comprise any type and form of program service task process or executable instructions operating in user mode kernel mode or any combination thereof in the appliance . The vServer includes any logic functions rules or operations to perform any embodiments of the techniques described herein such as SSL VPN switching load balancing Domain Name Service resolution acceleration and an application firewall . In some embodiments the vServer establishes a connection to a service of a server . The service may comprise any program application process task or set of executable instructions capable of connecting to and communicating to the appliance client or vServer . For example the service may comprise a web server http server ftp email or database server. In some embodiments the service is a daemon process or network driver for listening receiving and or sending communications for an application such as email database or an enterprise application. In some embodiments the service may communicate on a specific IP address or IP address and port.

In some embodiments the vServer applies one or more policies of the policy engine to network communications between the client and server . In one embodiment the policies are associated with a VServer . In another embodiment the policies are based on a user or a group of users. In yet another embodiment a policy is global and applies to one or more vServers and any user or group of users communicating via the appliance . In some embodiments the policies of the policy engine have conditions upon which the policy is applied based on any content of the communication such as internet protocol address port protocol type header or fields in a packet or the context of the communication such as user group of the user vServer transport layer connection and or identification or attributes of the client or server .

In other embodiments the appliance communicates or interfaces with the policy engine to determine authentication and or authorization of a remote user or a remote client to access the computing environment application and or data file from a server . In another embodiment the appliance communicates or interfaces with the policy engine to determine authentication and or authorization of a remote user or a remote client to have the application delivery system deliver one or more of the computing environment application and or data file. In yet another embodiment the appliance establishes a VPN or SSL VPN connection based on the policy engine s authentication and or authorization of a remote user or a remote client . In one embodiment the appliance controls the flow of network traffic and communication sessions based on policies of the policy engine . For example the appliance may control the access to a computing environment application or data file based on the policy engine .

In some embodiments the vServer establishes a transport layer connection such as a TCP or UDP connection with a client via the client agent . In one embodiment the vServer listens for and receives communications from the client . In other embodiments the vServer establishes a transport layer connection such as a TCP or UDP connection with a server . In one embodiment the vServer establishes the transport layer connection to an internet protocol address and port of a server running on the server . In another embodiment the vServer associates a first transport layer connection to a client with a second transport layer connection to the server . In some embodiments a vServer establishes a pool of transport layer connections to a server and multiplexes client requests via the pooled transport layer connections.

In some embodiments the appliance provides an SSL VPN connection between a client and a server . For example a client on a first network requests to establish a connection to a server on a second network . In some embodiments the second network is not routable from the first network . In other embodiments the client is on a public network and the server is on a private network such as a corporate network. In one embodiment the client agent intercepts communications of the client on the first network encrypts the communications and transmits the communications via a first transport layer connection to the appliance . The appliance associates the first transport layer connection on the first network to a second transport layer connection to the server on the second network . The appliance receives the intercepted communication from the client agent decrypts the communications and transmits the communication to the server on the second network via the second transport layer connection. The second transport layer connection may be a pooled transport layer connection. As such the appliance provides an end to end secure transport layer connection for the client between the two networks .

In one embodiment the appliance hosts an intranet internet protocol or intranetIP address of the client on the virtual private network . The client has a local network identifier such as an internet protocol IP address and or host name on the first network . When connected to the second network via the appliance the appliance establishes assigns or otherwise provides an IntranetIP which is a network identifier such as IP address and or host name for the client on the second network . The appliance listens for and receives on the second or private network any communications directed towards the client using the client s established IntranetIP . In one embodiment the appliance acts as or on behalf of the client on the second private network . For example in another embodiment a vServer listens for and responds to communications to the IntranetIP of the client . In some embodiments if a computing device on the second network transmits a request the appliance processes the request as if it were the client . For example the appliance may respond to a ping to the client s IntranetIP . In another example the appliance may establish a connection such as a TCP or UDP connection with computing device on the second network requesting a connection with the client s IntranetIP .

In some embodiments the appliance provides one or more of the following acceleration techniques to communications between the client and server 1 compression 2 decompression 3 Transmission Control Protocol pooling 4 Transmission Control Protocol multiplexing 5 Transmission Control Protocol buffering and 6 caching. In one embodiment the appliance relieves servers of much of the processing load caused by repeatedly opening and closing transport layers connections to clients by opening one or more transport layer connections with each server and maintaining these connections to allow repeated data accesses by clients via the Internet. This technique is referred to herein as connection pooling .

In some embodiments in order to seamlessly splice communications from a client to a server via a pooled transport layer connection the appliance translates or multiplexes communications by modifying sequence number and acknowledgment numbers at the transport layer protocol level. This is referred to as connection multiplexing . In some embodiments no application layer protocol interaction is required. For example in the case of an in bound packet that is a packet received from a client the source network address of the packet is changed to that of an output port of appliance and the destination network address is changed to that of the intended server. In the case of an outbound packet that is one received from a server the source network address is changed from that of the server to that of an output port of appliance and the destination address is changed from that of appliance to that of the requesting client . The sequence numbers and acknowledgment numbers of the packet are also translated to sequence numbers and acknowledgement expected by the client on the appliance s transport layer connection to the client . In some embodiments the packet checksum of the transport layer protocol is recalculated to account for these translations.

In another embodiment the appliance provides switching or load balancing functionality for communications between the client and server . In some embodiments the appliance distributes traffic and directs client requests to a server based on layer 4 or application layer request data. In one embodiment although the network layer or layer 2 of the network packet identifies a destination server the appliance determines the server to distribute the network packet by application information and data carried as payload of the transport layer packet. In one embodiment the health monitoring programs of the appliance monitor the health of servers to determine the server for which to distribute a client s request. In some embodiments if the appliance detects a server is not available or has a load over a predetermined threshold the appliance can direct or distribute client requests to another server .

In some embodiments the appliance acts as a Domain Name Service DNS resolver or otherwise provides resolution of a DNS request from clients . In some embodiments the appliance intercepts a DNS request transmitted by the client . In one embodiment the appliance responds to a client s DNS request with an IP address of or hosted by the appliance . In this embodiment the client transmits network communication for the domain name to the appliance . In another embodiment the appliance responds to a client s DNS request with an IP address of or hosted by a second appliance . In some embodiments the appliance responds to a client s DNS request with an IP address of a server determined by the appliance .

In yet another embodiment the appliance provides application firewall functionality for communications between the client and server . In one embodiment the policy engine provides rules for detecting and blocking illegitimate requests. In some embodiments the application firewall protects against denial of service DoS attacks. In other embodiments the appliance inspects the content of intercepted requests to identify and block application based attacks. In some embodiments the rules policy engine comprises one or more application firewall or security control policies for providing protections against various classes and types of web or Internet based vulnerabilities such as one or more of the following 1 buffer overflow 2 CGI BIN parameter manipulation 3 form hidden field manipulation 4 forceful browsing 5 cookie or session poisoning 6 broken access control list ACLs or weak passwords 7 cross site scripting XSS 8 command injection 9 SQL injection 10 error triggering sensitive information leak 11 insecure use of cryptography 12 server misconfiguration 13 back doors and debug options 14 website defacement 15 platform or operating systems vulnerabilities and 16 zero day exploits. In an embodiment the application firewall provides HTML form field protection in the form of inspecting or analyzing the network communication for one or more of the following 1 required fields are returned 2 no added field allowed 3 read only and hidden field enforcement 4 drop down list and radio button field conformance and 5 form field max length enforcement. In some embodiments the application firewall ensures cookies are not modified. In other embodiments the application firewall protects against forceful browsing by enforcing legal URLs.

In still yet other embodiments the application firewall protects any confidential information contained in the network communication. The application firewall may inspect or analyze any network communication in accordance with the rules or polices of the engine to identify any confidential information in any field of the network packet. In some embodiments the application firewall identifies in the network communication one or more occurrences of a credit card number password social security number name patient code contact information and age. The encoded portion of the network communication may comprise these occurrences or the confidential information. Based on these occurrences in one embodiment the application firewall may take a policy action on the network communication such as prevent transmission of the network communication. In another embodiment the application firewall may rewrite remove or otherwise mask such identified occurrence or confidential information.

Referring now to an embodiment of the client agent is depicted. The client includes a client agent for establishing and exchanging communications with the appliance and or server via a network . In brief overview the client operates on computing device having an operating system with a kernel mode and a user mode and a network stack with one or more layers . The client may have installed and or execute one or more applications. In some embodiments one or more applications may communicate via the network stack to a network . One of the applications such as a web browser may also include a first program . For example the first program may be used in some embodiments to install and or execute the client agent or any portion thereof. The client agent includes an interception mechanism or interceptor for intercepting network communications from the network stack from the one or more applications.

The network stack of the client may comprise any type and form of software or hardware or any combinations thereof for providing connectivity to and communications with a network. In one embodiment the network stack comprises a software implementation for a network protocol suite. The network stack may comprise one or more network layers such as any networks layers of the Open Systems Interconnection OSI communications model as those skilled in the art recognize and appreciate. As such the network stack may comprise any type and form of protocols for any of the following layers of the OSI model 1 physical link layer 2 data link layer 3 network layer 4 transport layer 5 session layer 6 presentation layer and 7 application layer. In one embodiment the network stack may comprise a transport control protocol TCP over the network layer protocol of the internet protocol IP generally referred to as TCP IP. In some embodiments the TCP IP protocol may be carried over the Ethernet protocol which may comprise any of the family of IEEE wide area network WAN or local area network LAN protocols such as those protocols covered by the IEEE 802.3. In some embodiments the network stack comprises any type and form of a wireless protocol such as IEEE 802.11 and or mobile internet protocol.

In view of a TCP IP based network any TCP IP based protocol may be used including Messaging Application Programming Interface MAPI email File Transfer Protocol FTP HyperText Transfer Protocol HTTP Common Internet File System CIFS protocol file transfer Independent Computing Architecture ICA protocol Remote Desktop Protocol RDP Wireless Application Protocol WAP Mobile IP protocol and Voice Over IP VoIP protocol. In another embodiment the network stack comprises any type and form of transport control protocol such as a modified transport control protocol for example a Transaction TCP T TCP TCP with selection acknowledgements TCP SACK TCP with large windows TCP LW a congestion prediction protocol such as the TCP Vegas protocol and a TCP spoofing protocol. In other embodiments any type and form of user datagram protocol UDP such as UDP over IP may be used by the network stack such as for voice communications or real time data communications.

Furthermore the network stack may include one or more network drivers supporting the one or more layers such as a TCP driver or a network layer driver. The network drivers may be included as part of the operating system of the computing device or as part of any network interface cards or other network access components of the computing device . In some embodiments any of the network drivers of the network stack may be customized modified or adapted to provide a custom or modified portion of the network stack in support of any of the techniques described herein. In other embodiments the acceleration program is designed and constructed to operate with or work in conjunction with the network stack installed or otherwise provided by the operating system of the client .

The network stack comprises any type and form of interfaces for receiving obtaining providing or otherwise accessing any information and data related to network communications of the client . In one embodiment an interface to the network stack comprises an application programming interface API . The interface may also comprise any function call hooking or filtering mechanism event or call back mechanism or any type of interfacing technique. The network stack via the interface may receive or provide any type and form of data structure such as an object related to functionality or operation of the network stack . For example the data structure may comprise information and data related to a network packet or one or more network packets. In some embodiments the data structure comprises a portion of the network packet processed at a protocol layer of the network stack such as a network packet of the transport layer. In some embodiments the data structure comprises a kernel level data structure while in other embodiments the data structure comprises a user mode data structure. A kernel level data structure may comprise a data structure obtained or related to a portion of the network stack operating in kernel mode or a network driver or other software running in kernel mode or any data structure obtained or received by a service process task thread or other executable instructions running or operating in kernel mode of the operating system.

Additionally some portions of the network stack may execute or operate in kernel mode for example the data link or network layer while other portions execute or operate in user mode such as an application layer of the network stack . For example a first portion of the network stack may provide user mode access to the network stack to an application while a second portion of the network stack provides access to a network. In some embodiments a first portion of the network stack may comprise one or more upper layers of the network stack such as any of layers 5 7. In other embodiments a second portion of the network stack comprises one or more lower layers such as any of layers 1 4. Each of the first portion and second portion of the network stack may comprise any portion of the network stack at any one or more network layers in user mode kernel mode or combinations thereof or at any portion of a network layer or interface point to a network layer or any portion of or interface point to the user mode and kernel mode .

The interceptor may comprise software hardware or any combination of software and hardware. In one embodiment the interceptor intercept a network communication at any point in the network stack and redirects or transmits the network communication to a destination desired managed or controlled by the interceptor or client agent . For example the interceptor may intercept a network communication of a network stack of a first network and transmit the network communication to the appliance for transmission on a second network . In some embodiments the interceptor comprises any type interceptor comprises a driver such as a network driver constructed and designed to interface and work with the network stack . In some embodiments the client agent and or interceptor operates at one or more layers of the network stack such as at the transport layer. In one embodiment the interceptor comprises a filter driver hooking mechanism or any form and type of suitable network driver interface that interfaces to the transport layer of the network stack such as via the transport driver interface TDI . In some embodiments the interceptor interfaces to a first protocol layer such as the transport layer and another protocol layer such as any layer above the transport protocol layer for example an application protocol layer. In one embodiment the interceptor may comprise a driver complying with the Network Driver Interface Specification NDIS or a NDIS driver. In another embodiment the interceptor may comprise a mini filter or a mini port driver. In one embodiment the interceptor or portion thereof operates in kernel mode . In another embodiment the interceptor or portion thereof operates in user mode . In some embodiments a portion of the interceptor operates in kernel mode while another portion of the interceptor operates in user mode . In other embodiments the client agent operates in user mode but interfaces via the interceptor to a kernel mode driver process service task or portion of the operating system such as to obtain a kernel level data structure . In further embodiments the interceptor is a user mode application or program such as application.

In one embodiment the interceptor intercepts any transport layer connection requests. In these embodiments the interceptor execute transport layer application programming interface API calls to set the destination information such as destination IP address and or port to a desired location for the location. In this manner the interceptor intercepts and redirects the transport layer connection to a IP address and port controlled or managed by the interceptor or client agent . In one embodiment the interceptor sets the destination information for the connection to a local IP address and port of the client on which the client agent is listening. For example the client agent may comprise a proxy service listening on a local IP address and port for redirected transport layer communications. In some embodiments the client agent then communicates the redirected transport layer communication to the appliance .

In some embodiments the interceptor intercepts a Domain Name Service DNS request. In one embodiment the client agent and or interceptor resolves the DNS request. In another embodiment the interceptor transmits the intercepted DNS request to the appliance for DNS resolution. In one embodiment the appliance resolves the DNS request and communicates the DNS response to the client agent . In some embodiments the appliance resolves the DNS request via another appliance or a DNS server .

In yet another embodiment the client agent may comprise two agents and . In one embodiment a first agent may comprise an interceptor operating at the network layer of the network stack . In some embodiments the first agent intercepts network layer requests such as Internet Control Message Protocol ICMP requests e.g. ping and traceroute . In other embodiments the second agent may operate at the transport layer and intercept transport layer communications. In some embodiments the first agent intercepts communications at one layer of the network stack and interfaces with or communicates the intercepted communication to the second agent .

The client agent and or interceptor may operate at or interface with a protocol layer in a manner transparent to any other protocol layer of the network stack . For example in one embodiment the interceptor operates or interfaces with the transport layer of the network stack transparently to any protocol layer below the transport layer such as the network layer and any protocol layer above the transport layer such as the session presentation or application layer protocols. This allows the other protocol layers of the network stack to operate as desired and without modification for using the interceptor . As such the client agent and or interceptor can interface with the transport layer to secure optimize accelerate route or load balance any communications provided via any protocol carried by the transport layer such as any application layer protocol over TCP IP.

Furthermore the client agent and or interceptor may operate at or interface with the network stack in a manner transparent to any application a user of the client and any other computing device such as a server in communications with the client . The client agent and or interceptor may be installed and or executed on the client in a manner without modification of an application. In some embodiments the user of the client or a computing device in communications with the client are not aware of the existence execution or operation of the client agent and or interceptor . As such in some embodiments the client agent and or interceptor is installed executed and or operated transparently to an application user of the client another computing device such as a server or any of the protocol layers above and or below the protocol layer interfaced to by the interceptor .

The client agent includes an acceleration program a streaming client and or a collection agent . In one embodiment the client agent comprises an Independent Computing Architecture ICA client or any portion thereof developed by Citrix Systems Inc. of Fort Lauderdale Fla. and is also referred to as an ICA client. Other embodiments of the application client include a Remote Display Protocol RDP client developed by Microsoft Corporation of Redmond Wash. an X Windows client a client side player interpreter or simulator capable of executing multimedia applications email Java or .NET code. Moreover in one embodiment the output of an application executing on the server can be displayed at the client via the ICA client.

In some embodiments the client comprises an application streaming client for streaming an application from a server to a client . In some embodiments the client agent comprises an acceleration program for accelerating communications between client and server . In another embodiment the client agent includes a collection agent for performing end point detection scanning and collecting end point information for the appliance and or server .

In some embodiments the acceleration program comprises a client side acceleration program for performing one or more acceleration techniques to accelerate enhance or otherwise improve a client s communications with and or access to a server such as accessing an application provided by a server . The logic functions and or operations of the executable instructions of the acceleration program may perform one or more of the following acceleration techniques 1 multi protocol compression 2 transport control protocol pooling 3 transport control protocol multiplexing 4 transport control protocol buffering and 5 caching via a cache manager Additionally the acceleration program may perform encryption and or decryption of any communications received and or transmitted by the client . In some embodiments the acceleration program performs one or more of the acceleration techniques in an integrated manner or fashion. Additionally the acceleration program can perform compression on any of the protocols or multiple protocols carried as payload of network packet of the transport layer protocol

The streaming client comprises an application program process service task or executable instructions for receiving and executing a streamed application from a server . A server may stream one or more application data files to the streaming client for playing executing or otherwise causing to be executed the application on the client . In some embodiments the server transmits a set of compressed or packaged application data files to the streaming client . In some embodiments the plurality of application files are compressed and stored on a file server within an archive file such as a CAB ZIP SIT TAR JAR or other archive. In one embodiment the server decompresses unpackages or unarchives the application files and transmits the files to the client . In another embodiment the client decompresses unpackages or unarchives the application files. The streaming client dynamically installs the application or portion thereof and executes the application. In one embodiment the streaming client may be an executable program. In some embodiments the streaming client may be able to launch another executable program.

The collection agent comprises an application program process service task or executable instructions for identifying obtaining and or collecting information about the client . In some embodiments the appliance transmits the collection agent to the client or client agent . The collection agent may be configured according to one or more policies of the policy engine of the appliance. In other embodiments the collection agent transmits collected information on the client to the appliance . In one embodiment the policy engine of the appliance uses the collected information to determine and provide access authentication and authorization control of the client s connection to a network .

In one embodiment the collection agent comprises an end point detection and scanning mechanism which identifies and determines one or more attributes or characteristics of the client. For example the collection agent may identify and determine any one or more of the following client side attributes 1 the operating system an or a version of an operating system 2 a service pack of the operating system 3 a running service 4 a running process and 5 a file. The collection agent may also identify and determine the presence or versions of any one or more of the following on the client 1 antivirus software 2 personal firewall software 3 anti spam software and 4 internet security software. The policy engine may have one or more policies based on any one or more of the attributes or characteristics of the client or client side attributes.

In some embodiments and still referring to a first program may be used to install and or execute the client agent or portion thereof such as the interceptor automatically silently transparently or otherwise. In one embodiment the first program comprises a plugin component such an ActiveX control or Java control or script that is loaded into and executed by an application. For example the first program comprises an ActiveX control loaded and run by a web browser application such as in the memory space or context of the application. In another embodiment the first program comprises a set of executable instructions loaded into and run by the application such as a browser. In one embodiment the first program comprises a designed and constructed program to install the client agent . In some embodiments the first program obtains downloads or receives the client agent via the network from another computing device. In another embodiment the first program is an installer program or a plug and play manager for installing programs such as network drivers on the operating system of the client .

Communication between a program neighborhood enabled client and a server may occur over a dedicated virtual channel that is established on top of an ICA virtual channel. In other embodiments the communication occurs using an XML service. In still other embodiments the client runs a client side dialog that acquires the credentials of a user of the client . In some embodiments a user management subsystem on a server receiving the credentials of the user may return a set of distinguished names representing the list of accounts to which the user belongs. Upon authentication the server may establish a program neighborhood virtual channel a control channel or other communications channel. In some embodiments an acceleration program may also be transmitted to the client in response to a client request.

C. A Method and Appliance for Authenticating by an Appliance a Client to Access a Virtual Private Network Connection Based on an Attribute of a Client Side Certificate

In some embodiments a client may use the client agent to browse farms servers and applications in the farms . In one embodiment each server includes an ICA browsing subsystem to provide the client with browsing capability. After the client establishes a connection with the ICA browser subsystem of any of the servers that browser subsystem supports a variety of client requests. Such requests include 1 enumerating names of servers in the farm 2 enumerating names of applications published in the farm 3 resolving a server name and or application name to a server address that is useful to the client . The ICA browser subsystem also supports requests made by clients running a program neighborhood application that provides the client upon request with a view of those applications within the farm for which the user is authorized. The ICA browser subsystem forwards all of the above mentioned client requests to the appropriate subsystem in the server .

In one embodiment a user of the client selects an application for execution from a received enumeration of available applications. In another embodiment the user selects an application for execution independent of the received enumeration. In some embodiments the user selects an application for execution by selecting a graphical representation of the application presented on the client by a client agent . In other embodiments the user selects an application for execution by selecting a graphical representation of the application presented to the user on a web server or other server . In some embodiments an appliance or acceleration program accelerates delivery of the graphical representation. In some embodiments an appliance caches or stores the graphical representation. In some embodiments an appliance may cache or store any and all of the associated applications or portions of the associated applications.

In some embodiments when a client connects to the network the user of the client provides user credentials. User credentials may include the username of a user of the client the password of the user and the domain name for which the user is authorized. Alternatively the user credentials may be obtained from smart cards time based tokens social security numbers user passwords personal identification PIN numbers digital certificates based on symmetric key or elliptic curve cryptography biometric characteristics of the user or any other means by which the identification of the user of the client can be obtained and submitted for authentication. The server responding to the client can authenticate the user based on the user credentials.

In some embodiments the client provides credentials upon making a request for execution of an application to a server directly or through an appliance . In one of these embodiments the client requests access to an application residing on a server . In another of these embodiments the client requests access to a network on which a desired resource resides. In other embodiments the client provides credentials upon making a request for a connection to an appliance . In one of these embodiments the client requests access to a virtual private network. In another of these embodiments the client requests a network address on the virtual private network. In still another of these embodiments the client initiates a connection to the appliance .

In some embodiments the user provides credentials to the server or appliance via a graphical user interface presented to the client by the server or appliance . In other embodiments a server or appliance having the functionality of a web server provides the graphical user interface to the client . In still other embodiments a collection agent transmitted to the client by the server or appliance gathers the credentials from the client .

In one embodiment a credential refers to a username and password. In another embodiment a credential is not limited to a username and password but includes without limitation a machine ID of the client operating system type existence of a patch to an operating system MAC addresses of installed network cards a digital watermark on the client device membership in an Active Directory existence of a virus scanner existence of a personal firewall an HTTP header browser type device type network connection information such as internet protocol address or range of addresses machine ID of the server date or time of access request including adjustments for varying time zones and authorization credentials.

In some embodiments a credential associated with a client is associated with a user of the client . In one of these embodiments the credential is information possessed by the user. In another of these embodiments the credential is user authentication information. In other embodiments a credential associated with a client is associated with a network. In one of these embodiments the credential is information associated with a network to which the client may connect. In another of these embodiments the credential is information associated with a network collecting information about the client. In still other embodiments a credential associated with a client is a characteristic of the client.

In some embodiments the user authentication performed by the server or appliance may suffice to authorize the use of each hosted application program presented to the client although such applications may reside at another server . Accordingly when the client launches i.e. initiates execution of one of the hosted applications additional input of user credentials by the client may be unnecessary to authenticate use of that application. Thus a single entry of the user credentials may serve to determine the available applications and to authorize the launching of such applications without an additional manual log on authentication process by the user.

In one embodiment an appliance receives a request for access to a resource from a client . In another embodiment the appliance receives a request for access to a virtual private network. In still another embodiment the appliance makes a determination as to whether to grant access and what level of access to grant. In yet another embodiment the appliance makes a determination as to what type of connection to establish when providing the client with access to the application.

In some embodiments decisions regarding whether and how to grant a user access to a requested resource are made responsive to determinations by a policy engine regarding whether and how a client may access an application. In one of these embodiments a decision regarding a level of access is made responsive to a policy engine determination. In another of these embodiments a decision regarding a type of access is made responsive to a policy engine determination. In still another of these embodiments a decision regarding a type of connection is made responsive to a policy engine determination. The policy engine may collect information about the client prior to making the determination. In some embodiments the policy engine resides on the appliance . In other embodiments the appliance is in communication with a police engine residing on a server .

Referring now to a block diagram depicts one embodiment of an appliance for authenticating a client to access a virtual private network connection based on an attribute of a client side certificate. In brief overview the appliance includes a means for requesting a certificate a means for identifying a value in a certificate and a means for assigning an access type . The means for requesting the certificate requests a client authentication certificate. The means for identifying the value in the certificate identifies a value of at least one field in the client authentication certificate received from the client. The means for assigning an access type assigns one of a plurality of types of access responsive to an application of a policy to the identified value of the at least one field each of the plurality of access types associated with at least one connection characteristic.

In some embodiments as depicted in shadow in the means for requesting a certificate the means for identifying a value in a certificate and the means for assigning an access type reside on the policy engine in the appliance . In one of these embodiments the means for requesting a certificate comprises a transmitter sending the request to the client over a control connection. In another of these embodiments the means for identifying a value in a certificate comprises a certificate inspector extracting a value of a field in a certificate. In still another of these embodiments the means for assigning an access type comprises a policy application component accessing a policy database to assign the access type.

The means for requesting the certificate requests a client authentication certificate. In one embodiment the means for requesting the certificate further comprises a means for requesting from a client a client authentication certificate comprising a Secure Socket Layer SSL certificate. In another embodiment the means for requesting the certificate further comprises a means for requesting from a client a client authentication certificate comprising an X.509 certificate. In still another embodiment the means for requesting the certificate further comprises a means for requesting from a client a client authentication certificate comprising a certificate by an administrator or user.

In one embodiment the means for requesting the certificate further comprises a means for denying authentication of a user of the client if the client authentication certificate is not received. In still another embodiment the means for requesting further the certificate comprises a means for requesting the client authentication certificate from the client in response to a failed authentication attempt by a user of the client.

In one embodiment the means for requesting the certificate can comprise logic functions or operations software hardware or any combination of software and hardware to request a client authentication certificate from the client . In another embodiment the means for requesting the certificate can comprise any type and form of application program service process task thread or executable instruction. In still another embodiment the means for requesting the certificate may comprise any component or portion of the appliance as illustrated in . In yet another embodiment the means for requesting the certificate resides in the policy engine on the appliance . In a further embodiment the means for requesting the certificate is a transmitter residing on the appliance and communicating with the client over a control connection.

In one embodiment the means for requesting the certificate further comprises a means for identifying a value of a field the value identifying a user name associated with a user of the client. In another embodiment the means for requesting the certificate further comprises a means for identifying a value of a field the value identifying a group of users with which a user of the client is associated. In still another embodiment the means for requesting the certificate includes a means for identifying a value of a field the value identifying a policy applicable to a user of the client.

In one embodiment the means for requesting the certificate further comprises a means for identifying a value of a field the value identifying a network address of the client . In another embodiment the means for requesting the certificate further comprises a means for identifying a value of a field the value identifying an application executing on the client . In still another embodiment the means for requesting the certificate further comprises a means for identifying a value of a field the value identifying an operating system attribute of an operating system executing on the client .

In some embodiments the means for requesting the certificate further comprises a means for identifying a value of a field the value identifying an attribute of the certificate. In one of these embodiments the means for requesting the certificate further comprises a means for identifying a value of a field the value identifying an issuer of the certificate. In another of these embodiments the means for requesting the certificate further comprises a means for identifying a value of a field the value identifying a period of time during which the certificate is valid. In still another of these embodiments the means for requesting the certificate further comprises a means for identifying a value of a field the value identifying a serial number associated with the certificate.

The means for identifying the value in the certificate identifies a value of at least one field in the client authentication certificate received from the client. In one embodiment the means for identifying the value in the certificate comprises a means for receiving from the user the first user name via a login page. In another embodiment the means for identifying the value in the certificate comprises a means for comparing a user name identified as a value in the client authentication certificate with the first user name. In still another embodiment the means for identifying the value in the certificate comprises a means for determining that the user name and the first user name differ a means for requesting a second user name and a second password from the user via a user interface on the client and a means for authenticating the second user name and the second password to a second authentication service. In yet another embodiment the means for identifying the value in the certificate comprises a means for determining that the user name and the first user name are the same and authenticating the first user name and the password to a second authentication service.

In one embodiment the means for identifying the value in the certificate can comprise logic functions or operations software hardware or any combination of software and hardware to identify a value in a field of a client authentication certificate. In another embodiment the means for identifying the value in the certificate can comprise any type and form of application program service process task thread or executable instruction. In still another embodiment the means for identifying the value in the certificate may comprise any component or portion of the appliance as illustrated in . In yet another embodiment the means for identifying the value in the certificate resides in the policy engine on the appliance .

The means for assigning an access type assigns one of a plurality of types of access responsive to an application of a policy to the identified value of the at least one field each of the plurality of access types associated with at least one connection characteristic. In one embodiment the means for assigning an access type resides in an appliance and comprises a means for applying a policy to the identified value. In another embodiment the means for assigning an access type comprises a means for transmitting the identified value to a policy engine. In still another embodiment the means for assigning an access type comprises a means for receiving a result of a policy application by the policy engine to the identified value. In some embodiments the means for assigning an access type transmits the assignment to the client . In other embodiments the means for assigning an access type transmits the assignment to a server . In still other embodiments the means for assigning an access type initiates from the appliance establishment of a connection for the client the connection have the assigned access type.

In one embodiment the means for assigning an access type comprises means for assigning by a policy engine one of a plurality of types of access responsive to application of a policy to the identified value. In another embodiment the means for assigning an access type comprises a means for authenticating the user to a first authentication service responsive to the identified value and to a password provided by the user of the client. In still another embodiment the first authentication service comprises an external authentication server. In yet another embodiment the first authentication services comprises an authentication database of an appliance such as the appliance . In a further embodiment the means for assigning an access type comprises a means for authenticating a user of the client to a second authentication service responsive to a first user name and a password if identification of the first value fails.

In one embodiment the means for assigning an access type can comprise logic functions or operations software hardware or any combination of software and hardware to assign an access type responsive to a value in a certificate field. In another embodiment the means for assigning an access type can comprise any type and form of application program service process task thread or executable instruction. In still another embodiment the means for assigning an access type may comprise any component or portion of the appliance as illustrated in . In yet another embodiment the means for assigning an access type resides in the policy engine on the appliance . In a further embodiment the means for assigning an access type is in communication with a policy database.

In one embodiment a user of a client initiates a connection to an appliance . In another embodiment the appliance identifies a certificate policy associated with the user and identifies and requests from the user authentication information required for authentication and identified by the policy.

In some embodiments a certificate policy indicates that an authentication policy applies to the user request for access. In one of these embodiments the certificate policy indicates that the authentication policy applies because the user is associated with a particular network address. In another of these embodiments the authentication policy specifies that the user must satisfy two factor authentication. In still another of these embodiments the authentication policy specifies that the user must provide a client authentication certificate identifying a user name associated with the user and that the user must also provide a password. In yet another of these embodiments the certificate policy indicates that a value should be extracted from a second field in the client authentication certificate for determining a group name of a group in which the user is a member.

In other embodiments a certificate policy indicates that an authentication policy applies to the user request for access the authentication policy specifying that a user need not provide a client authentication certificate. In one of these embodiments the certificate policy indicates that the authentication policy applies because the user is associated with a particular network address. In another of these embodiments the authentication policy specifies that the user may provide a user name and password via a user interface on a login page presented to the user. In still another of these embodiment the authentication policy specifies that the user name associated with the user must be identified from a value of a field in a client authentication certificate instead of from a user interface on a login page presented to the user.

The means for assigning an access type comprises a means for assigning one of a plurality of types of access each of the plurality of access types associated with at least one connection characteristic. In one embodiment the connection characteristic identifies an accelerated connection. In another embodiment the connection characteristic identifies a load balanced connection. In still another embodiment the connection characteristic identifies a traffic managed connection. In yet another embodiment the connection characteristic identifies a session managed connection. In some embodiment the connection characteristic identifies a type of connection to establish to satisfy a policy applicable to the user.

In one embodiment the means for assigning an access type assigns a type of connection responsive to an application of a policy to a value of a field in the certificate. In another embodiment the appliance assigns the type of connection. In still another embodiment the means for assigning an access type assigns a type of connection responsive to an authentication policy. In yet another embodiment the means for assigning an access type assigns a type of connection responsive to an authorization policy.

In one embodiment the means for assigning an access type assigns a type of connection responsive to an auditing policy. In another embodiment the means for assigning an access type assigns a type of connection responsive to a session management policy. In still another embodiment the means for assigning an access type assigns a type of connection responsive to a traffic management policy. In yet another embodiment the means for assigning an access type assigns a type of connection responsive to a load balancing policy.

In some embodiments the means for assigning an access type assigns a type of accelerated connection. In one of these embodiments the means for assigning an access type may assign a type of accelerated connection providing TCP multiplexing. In another of these embodiments the means for assigning an access type may assign a type of accelerated connection providing TCP pooling. In still another of these embodiments the means for assigning an access type may assign a type of accelerated connection providing TCP compression. In yet another of these embodiments the means for assigning an access type may assign a type of accelerated connection providing TCP buffering. In one of these embodiments the means for assigning an access type may assign a type of accelerated connection providing caching. In another of these embodiments the means for assigning an access type may assign a type of accelerated connection providing any one or more of the acceleration techniques described in greater detail above in connection with .

In other embodiments the means for assigning an access type assigns a type of load balanced connection. In one of these embodiments the means for assigning an access type assigns a type of load balanced connection that connects the client to one of a plurality of server farms the server farm selected responsive to a load balancing decision. In another of these embodiments the means for assigning an access type assigns a type of load balanced connection that connects the client to a server selected responsive to a load balancing decision. In still another of these embodiments the means for assigning an access type assigns a type of load balanced connection that connects the client to a server selected responsive to a global server load balancing policy. In yet another embodiment the means for assigning an access type assigns a type of load balanced connection that connects the client to an appliance selected responsive to a load balancing policy. In some embodiments the means for assigning an access type assigns a type of load balanced connection that connects the client to one of a plurality of vServers the vServers selected responsive to a load balancing decision.

In still other embodiments the means for assigning an access type assigns a type of session managed connection. In one of these embodiments the means for assigning an access type assigns a type of session managed connection applying a compression technique to traffic transmitted over the connection. In another of these embodiments the means for assigning an access type assigns a type of session managed connection established responsive to an application of a policy defining SSL characteristics of the connection. In still another of these embodiments the means for assigning an access type assigns a type of session managed connection implementing a type of compression.

In yet other embodiments the means for assigning an access type assigns a type of audited connection. In one of these embodiments the means for assigning an access type assigns a type of audited connection in which a type of packet traffic transmitted over the connection is logged. In another of these embodiments the means for assigning an access type assigns a type of audited connection in which a particular server audits communications sent over the audited connection. In still another of these embodiments the means for assigning an access type assigns a type of audited connection in which a particular audit log stores the audit records for communications sent over the audited connection.

Referring now to a flow diagram depicts one embodiment of the steps taken in a method for authenticating by an appliance a client to access a virtual private network connection based on an attribute of a client side certificate. In brief overview a client authentication certificate is requested from a client step . A value is identified of at least one field in the client authentication certificate received from the client step . One of a plurality of types of access is assigned responsive to an application of a policy to the identified value of the at least one field each of the plurality of access types associated with at least one connection characteristic step .

Referring now to and in greater detail a client authentication certificate is requested from a client step . In one embodiment a client authentication certificate comprising a Secure Socket Layer SSL certificate is requested from the client. In another embodiment an appliance such as the appliance requests the client authentication certificate. In still another embodiment the client authentication certificate is requested from the client responsive to a request by the client for establishment of a virtual private network connection.

In one embodiment the client authentication certificate is requested from the client responsive to a request by the client for access to a resource such as an application a server a network or a connection to any of these. In another embodiment the client authentication certificate is requested from the client in response to a failed attempt to authenticate a user of the client responsive to credentials provided to a user interface on a login page. In still another embodiment authentication of a user of the client is denied if the client authentication certificate is not received.

A value is identified of at least one field in the client authentication certificate received from the client step . In one embodiment the value identifies a username associated with a user of the client. In another embodiment the value identifies a group of users with which a user of the client is associated. In still another embodiment the value identifies a policy applicable to a user of the client.

In one embodiment a user interface is displayed on the client the user interface having a user name field displaying the identified value. In another embodiment a password is received from a user of the client via a password field of the user interface. In still another embodiment a non modifiable field is displayed in the user interface. In yet another embodiment the non modifiable field displays a value of a second field in the client authentication certificate.

In some embodiments a user provides a user name and password via the user interface. In one of these embodiments the user name and password suffice to authenticate and authorize the user. In another of these embodiments the user optionally provides a client authentication certificate. In still another of these embodiments the user provides a first factor of authentication by providing credentials such as a user name or password via a user interface and provides a second factor of authentication via the client authentication certificate. In one embodiment an appliance is configured to include an authentication policy identifying what information to request from the user and what format to specify for the requested information. In another embodiment an appliance is configured to include a certificate policy identifying a value of at least one field in a client authentication certificate for inspection by the appliance .

In other embodiments the appliance requires receipt of the client authentication certificate to authenticate or authorize the user. In one of these embodiments the user is authenticated or authorized solely by the presentation of the client authentication certificate to the appliance . In another of these embodiments the appliance makes an authentication and authorization decision responsive to a value of at least one field in the client authentication certificate. In still another of these embodiments a user name or a group name are identified by values in the fields in the client authentication certificate. In yet another of these embodiments the appliance identifies a policy applicable to the user responsive to a user name or a group name identified by a value in the client authentication certificate.

In still other embodiments the appliance requests receipt of the client authentication certificate and of a password to authenticate or authorize the user. In one of these embodiments the user provides a first factor of authentication via the client authentication certificate and a second factor of authentication by providing a password via a user interface. In another of these embodiments the appliance requires the user to provide a user name or a group name via the user interface in addition to providing the password via the user interface. In still another of these embodiments the appliance identifies a user name or a group name as a value of a field in the client authentication certificate.

In one of these embodiments the appliance extracts a user name from a first field in the certificate and requests a password from the client. In another of these embodiments the appliance fails to identify a user name in the certificate and instead requests a user name and password from the user. In still another of these embodiments the appliance extracts a user name from a second field in the certificate. In yet another of these embodiments the appliance determines that the value of the second field and of the first field or of the user name provided by the user are the same and authenticates the user responsive to the value of the second field and the previously provided password. In a further of these embodiments the appliance determines that the value of the second field and of the first field or of the user name provided by the user are not the same requests a second password from the user and authenticates the user to a second authentication service with the value of the second field and with the second password.

In yet other embodiments the appliance requires a client authentication certificate only upon failure of the user to provide a valid user name and password. In one of these embodiments the user accesses a login page requesting user name and password. In another of these embodiments authentication of the received user name and password fails. In still another of these embodiments the appliance requests a client authentication certificate. If the client does not provide the certificate the authentication fails and the user request is denied. If the client does provide the certificate the appliance extracts a username from the certificate. In yet another embodiment the appliance requests a password from the user and attempts to authenticate the user responsive to the extracted user name and the provided password.

In some embodiments the appliance determines that an extracted user name matches a user name provided via a user interface on a login page. In one of these embodiments the appliance uses a different authentication service to authenticate the provided user name and password than the authentication service the appliance used in the first attempt to authenticate the user name and password provided via the user interface on the login page. In other embodiments the appliance determines that the extracted user name does not match the user name provided via a user interface on a login page. In one of these embodiments the appliance requests a password from the user and uses the first authentication service to authenticate the user based on the extracted user name and the provided password.

In one embodiment a value of a second field is identified in the client authentication certificate. In another embodiment a value of a second field is identified the value identifying a group name in the client authentication certificate. In still another embodiment a group authorization policy is assigned to a user of the client based on the value of the second field.

In one embodiment a first user name is received from a user of the client via a login page. In another embodiment the first user name is compared with a user name identified by a value of a field in the client authentication certificate. In still another embodiment a determination is made that the first user name and the user name identified by the certificate differ a second user name and a second password are requested from the user via a user interface on the client and the second user name and the second password are authenticated. In yet another embodiment the second user name and the second password are authenticated to an authentication service. In a further embodiment a determination is made that the first user name and the user name identified by the certificate are the same and the first user name and a received password are authenticated to an authentication service. In some embodiments the first user name and the received password are authenticated to a first authentication service and the second user name and the second password are authenticated to a second authentication service. In other embodiments both the first user name and the received password and the second user name and the second password are authenticated to the second authentication service.

One of a plurality of types of access is assigned responsive to an application of a policy to the identified value of the at least one field each of the plurality of access types associated with at least one connection characteristic step . In one embodiment an appliance such as the appliance applies the policy and assigns a type of access responsive to the application. In another embodiment the identified value is transmitted to a policy engine for application of the policy to the identified value. In still another embodiment an appliance such as the appliance receives a result of a policy application by a policy engine. In yet another embodiment a policy engine assigns one of a plurality of types of access responsive to application of a policy to the identified value.

In one embodiment a user of the client is authenticated to a first authentication service responsive to the identified value and to a password provided by the user of the client. In another embodiment the first authentication service is an external authentication server. In still another embodiment the first authentication service is an authentication database of an appliance such as the appliance . In some embodiments a user is authenticated to and granted a type of access by a first authentication service responsive to the identified value of the at least one field of the client authentication certificate. In one of these embodiments the user is authenticated to and granted a second type of access by a second authentication service responsive to an identified value of a second field in the client authentication certificate.

In one embodiment the user of the client is authenticated to a second authentication service responsive to a first user name and a password. In another embodiment the user of the client is authenticated to the second authentication service if an appliance fails to identify the first value of the identified at least one field in the client authentication certificate. In still another embodiment the user of the client is authenticated to the second authentication service if an application of a policy to an identified value results in a denial of the authentication request.

In one embodiment one of a plurality of types of access is assigned responsive to an application of a policy to the identified value of the at least one field. In another embodiment the type of access assigned satisfies a request by the client for access to a resource such as a request for execution or retrieval of an application. In still another embodiment the type of access assigned satisfies a request by the client for establishment of a connection to a resource such as a virtual private network. In yet another embodiment the type of access assigned satisfies a policy specifying a type of access authorized for the user.

The type of access assigned is associated with at least one connection characteristic. In one embodiment the connection characteristic identifies a type of connection to be established for the user of the client providing the client authentication certificate. In another embodiment the connection characteristic identifies a load balanced connection. In still another embodiment the connection characteristic identifies an accelerated connection. In yet another embodiment the connection characteristic identifies a traffic managed connection. In a further embodiment the connection characteristic identifies a session managed connection. In some embodiments the connection characteristic identifies a type of connection to establish to satisfy a policy applicable to the user. In other embodiments the connection characteristic identifies a connection to a quarantined network responsive to a determination that the user fails to satisfy a policy. In one of these embodiments the quarantined network provides the user with limited access to requested resources.

In some embodiments the appliance identifies information within a client authentication certificate and selects a type of access to grant to the client . In one of these embodiments the appliance requests the certificate after receiving a request from the client . In another of these embodiments the appliance selects the type of access to grant responsive to an application of a policy to the identified information. In still another of these embodiments the appliance establishes a type of connection for the client responsive to the application of the policy to the identified information. In other embodiments the identified information includes an identification of information associated with a user of the client requesting access to a network or a resource on the network. In one of these embodiments the identified information includes an authorization group of which the client is a member members of the group having authorization to access particular types of resources across particular types of connections. In another of these embodiments the appliance uses authentication information to identify and provide a type of connection between the client and a requested resource. In still other embodiments the appliance uses a connection characteristic to identify a type of connection to establish for the client . In one of these embodiments the appliance establishes a connection to a quarantined network responsive to a determination that the user fails to satisfy a policy the quarantined network providing the user with limited access to requested resources. In another of these embodiments the appliance establishes a load balanced connection. In still another of these embodiments the appliance establishes an accelerated connection. In yet another of these embodiments the appliance establishes a traffic managed connection. In a further embodiment the appliance establishes a session managed connection.

The methods and appliances described above may be provided as one or more computer readable programs embodied on or in one or more articles of manufacture. The article of manufacture may be a floppy disk a hard disk a CD ROM a flash memory card a PROM a RAM a ROM or a magnetic tape. In general the computer readable programs may be implemented in any programming language LISP PERL C C PROLOG or any byte code language such as JAVA. The software programs may be stored on or in one or more articles of manufacture as object code.

Having described certain embodiments of a method and appliance for authenticating by an appliance a client to access a virtual private network connection based on an attribute of a client side certificate it will now become apparent to one of skill in the art that other embodiments incorporating the concepts of the invention may be used. Therefore the invention should not be limited to certain embodiments but rather should be limited only by the spirit and scope of the following claims.

