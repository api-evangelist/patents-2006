---

title: Generic web service frontend
abstract: A publisher uses a toolbox to graphically define web forms, by selecting and configuring components such as buttons, text boxes, menus, etc. Underlying code for the web forms (such as Extensible Markup Language, or XML) is automatically generated. The publisher defines transforms (such as Extensible Stylesheet Markup Language Transforms, or XSLTs) that process the exchange of data between the front end and the backend web service. The transforms and the code underlying the web forms is automatically combined into a frontend to the web service. The web based frontend is published on a user site, such that users can access the backend web service through the frontend.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07831919&OS=07831919&RS=07831919
owner: Symantec Corporation
number: 07831919
owner_city: Mountain View
owner_country: US
publication_date: 20061218
---
This invention pertains generally to web services and more specifically to automatically creating web service frontends.

The recent availability of new web service tools such as SOAP WSDL XML RPM etc. has enabled rapid development and roll out of complicated web service functionality. Prior to the availability of such tools large web service projects such as online backup central queuing online product pricing image storage and retrieval and online searching took long amounts of time large programming teams and substantial financial investments to develop. As a result of the simplified development enabled by the new tools more web services are available to end users today.

End users benefit from the greater availability of these web services as the services themselves provide useful functionality. However although the available tools allow rapid development of the underlying functionality they do not provide or automate development of an associated user interface. Therefore although there is now a greater availability of web services these services often lack a functional web based frontend. As the publishers of web based services have no tools for easily creating user interfaces the publishers tend to focus on the web services themselves and leave the frontend to other developers.

What is needed are methods computer readable media and computer systems that provide a generic framework that greatly simplifies the task of creating a web based frontend for web services.

Generic web frontend creation tools allow publishers of web services to quickly and easily create web frontends for their backend web based services. A publisher uses a toolbox to graphically define web forms by selecting and configuring components such as buttons text boxes menus etc. Underlying code for the web forms such as Extensible Markup Language or XML is automatically generated. The publisher defines transforms such as Extensible Stylesheet Markup Language Transforms or XSLTs that process the exchange of data between the front end and the backend web service. The transforms and the code underlying the web forms is automatically combined into a frontend to the web service. The web based frontend is published on a user site such that users can access the backend web service through the frontend.

The features and advantages described in this summary and in the following detailed description are not all inclusive and particularly many additional features and advantages will be apparent to one of ordinary skill in the relevant art in view of the drawings specification and claims hereof. Moreover it should be noted that the language used in the specification has been principally selected for readability and instructional purposes and may not have been selected to delineate or circumscribe the inventive subject matter resort to the claims being necessary to determine such inventive subject matter.

The Figures depict embodiments of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following discussion that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.

Various embodiments of the present invention allow publishers of web services to quickly create web frontends for their backend web based services . As illustrated in a publisher uses a toolbox to define web based forms . The publisher graphically selects and configures fields of the various forms that make up a desired web based frontend . For example the publisher can select desired user interface fields from the toolbox such as buttons text fields text entry prompts checkboxes grids file upload selectors etc. The publisher can also manipulate the sizes and positions of the fields and otherwise affect their appearance and behavior by assigning selecting features such as color default value maximum length ID etc. The publisher can also use the toolbox to specify web form page behavior. Underlying code e.g. XML is generated to instantiate a web form as defined by the publisher . The underlying code interfaces with the publisher defined transforms described below.

Once a web form is defined the publisher typically creates a transform e.g. an Extensible Stylesheet Markup Language Transform or XSLT to process the form data e.g. the data entered by a user accessing the web form . This typically involves mapping the input data to parameters taken by a function call to the backend web service . Generally the publisher provides an XSLT that can also detect the input of bad data e.g. a number out of range or alphabetic input when a number is expected and output an appropriate error message to the user of the web form . The publisher also provides an XSL transform to process the return value from the backend function typically using it in the next web page form of the frontend . The publisher repeats this process of defining web forms pages and associated transforms until the desired functionality of the web based frontend has been implemented. Once a publisher has configured a web based frontend by defining web forms and transforms the transforms and the generated code underlying the web forms are combined into a web based frontend .

In some embodiments of the present invention in order to define a web based frontend a publisher logs onto an account on a web server which provides the above described frontend creation functionality. It is to be understood that the web server is to be one capable of executing custom programs such as Apache or Microsoft s Internet Information Server. The web server could also be implemented as a custom server . illustrates the frontend creation functionality residing on the same single web server as the backend web service . Of course in other embodiments the frontend creation functionality and or the backend web service can be distributed between multiple web servers as desired.

It is to be further understood that the backend web service in question is to be one with a well defined Application Programming Interface API so that transforms can be easily created that map input data to function calls to the backend . For example web services that use WSDL SOAP or XML RPC e.g. Amazon and Google web services have well defined APIs.

As illustrated in once a frontend has been created the frontend can be published on a user accessible web site . The publisher can choose or be assigned a name of the site and is also provided with a Uniform Resource Locator URL pointing thereto. Third party users can then access the web service via the frontend by visiting the site on which it is published. When the user visits the web site the user is presented with the publisher defined default page of the frontend . When a user operates the frontend the user enters the requested data into the web forms of the frontend clicks specific links or takes other actions the publisher defined. The associated publisher defined transforms of the frontend map the user input to the input parameters of the appropriate web service functions . The called functions run with the corresponding input parameters and other transforms processes the return values . The user continues to be presented with dynamically generated web pages based on publisher settings. In this way the user can access the various features of the backend web service via the published frontend .

To clarify the operation of an embodiment of the present invention the creation of a frontend to a web service that prompts a user for his or her name and prints out Hello name is described. The publisher uses the toolbox to create a web interface with the form illustrated in . The text field has an ID of UserName. 

The publisher sets the page as the main entry page for their user site and adds the XSL transform of Table 1 to handle the entry of the name data . Note that the transform checks for valid data and passes the valid entered name to the backend .

The publisher adds another XSL transform named response.xsl to process the return value from web service . Response.xsl is illustrated in Table 2 

The frontend is published on a user site at an assigned URL and given the name HelloWorld. A user visits the site and is presented with the form illustrated in . The user types in Joe and clicks submit. The web service frontend parses the form data and makes it available to the appropriate XSL transform which in this case validates the input and generates a call to the backend web service which is illustrated in Table 3 

The backend web service returns a response which the frontend parses. The frontend makes all XML nodes available in this example under root WebServiceOutput. The frontend then executes the XSL transform specified in the symxslt CallWebService which in this case is response.xsl. The transform response.xsl outputs the following 

As will be understood by those familiar with the art the invention may be embodied in other specific forms without departing from the spirit or essential characteristics thereof. Likewise the particular naming and division of the portions modules agents managers components functions procedures actions layers features attributes methodologies and other aspects are not mandatory or significant and the mechanisms that implement the invention or its features may have different names divisions and or formats. Furthermore as will be apparent to one of ordinary skill in the relevant art the portions modules agents managers components functions procedures actions layers features attributes methodologies and other aspects of the invention can be implemented as software hardware firmware or any combination of the three. Of course wherever a component of the present invention is implemented as software the component can be implemented as a script as a standalone program as part of a larger program as a plurality of separate scripts and or programs as a statically or dynamically linked library as a kernel loadable module as a device driver and or in every and any other way known now or in the future to those of skill in the art of computer programming. Additionally the present invention is in no way limited to implementation in any specific programming language or for any specific operating system or environment. Furthermore it will be readily apparent to those of ordinary skill in the relevant art that where the present invention is implemented in whole or in part in software the software components thereof can be stored on computer readable media as computer program products. Any form of computer readable medium can be used in this context such as magnetic or optical storage media. Additionally software portions of the present invention can be instantiated for example as object code or executable images within the memory of any programmable computing device. Accordingly the disclosure of the present invention is intended to be illustrative but not limiting of the scope of the invention which is set forth in the following claims.

