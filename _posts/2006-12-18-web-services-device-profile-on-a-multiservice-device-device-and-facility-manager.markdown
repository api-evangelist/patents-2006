---

title: Web services device profile on a multi-service device: device and facility manager
abstract: A technique is provided for implementing multiple Web services on a multi-functional device (MFP) executing multiple service applications. A Device Facility Manager (DFM) executing on the MFP represents the MFP by responding to discovery, metadata, and logging requests with device location, metadata and logging information. When a client application discovers the services provided by the MFP, the client application may communicate directly with a service application executing on the MFP. The client application requests the service metadata of the service application and then transmits SOAP requests, which the service application processes. The implementation of one or more Web Service specifications may be packaged into one common module so that the complexity of the Web Services is hidden from developers. New services may be added to the MFP and existing services may be updated through communication with the DFM.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07873647&OS=07873647&RS=07873647
owner: Ricoh Company, Ltd.
number: 07873647
owner_city: Tokyo
owner_country: JP
publication_date: 20061218
---
The present invention relates to multi functional peripherals MFPs and more particularly to implementing standard Web service protocols on a device facility manager DFM that also maintains device related information.

This application is related to U.S. patent application Ser. No. 11 641 453 entitled WEB SERVICES DEVICE PROFILE ON A MULTI SERVICE DEVICE DYNAMIC ADDITION OF SERVICES filed on Dec. 18 2006 the contents of which are herein incorporated by reference in their entirety for all purposes.

This application is related to U.S. patent application Ser. No. 11 497 000 entitled ADVANCED WEB SERVICES ON A LEGACY PLATFORM filed on Jul. 31 2006 the contents of which are herein incorporated by reference in their entirety for all purposes.

The term Web services describes a standardized way of integrating Web based applications using the XML SOAP and WSDL standards over an Internet protocol backbone. XML is used to tag the data SOAP is used to transfer the data WSDL is used for describing the services available. Used primarily as a means for businesses to communicate with each other and with clients Web services allow organizations to communicate data without intimate knowledge of each other s IT systems behind a firewall.

Web services share business logic data and processes through a programmatic interface across a network. Web services allow different applications from different sources to communicate with each other without time consuming custom coding. And because all communication is in XML Web services are not tied to any one operating system or programming language. For example Java can talk with Python and Windows applications can talk with UNIX applications.

Web Services specifications compose together to provide interoperable protocols for Security Reliable Messaging and Transactions in loosely coupled systems. Web Services specifications include both approved standards e.g. by the World Wide Web Consortium W3C and the Organization for the Advancement of Structured Information Standards OASIS and proposed documents and drafts that may become standards.

A multi functional peripheral MFP is a device that performs one or more functions such as printing copying facsimile and scanning. MFPs thus contain increasingly complex logic in order to service requests from multiple clients. Furthermore adding and updating services on an existing MFP is difficult while not disrupting existing services. Thus there is a need to simplify the communication between a client and an MFP. There is also a need to simplify the addition of new services to an MFP and to simplify the process of updating existing services.

A technique is provided for discovering and subscribing to a particular service provided by a multi functional peripheral MFP . Location data of an MFP is sent to a client application. A request for metadata of the MFP is received from the client application. A device facility manager DFM sends to the client application device metadata that indicates the plurality of services. The location data may be sent in response to a discovery request from the client application or may be sent as part of a broadcast or multicast message on the network to announce the availability of the MFP.

In one approach the device metadata further indicates where to communicate with the plurality of Web service applications WSAs corresponding to the plurality of services provided by the MFP. A WSA receives a SOAP request from the client application for service metadata associated with the WSA. The service metadata is sent to the client application after which a SOAP request is received from the client application for the service provided by the WSA.

In one approach the DFM includes a shared library of library routines that implement one or more functions defined by one or more Web Services specifications. Each WSA may invoke any available library routine from the shared library in order to service SOAP requests from client applications.

In one approach the DFM includes a Web Services Device WSD Manager that comprises information pertaining to the MFP. The information may include service metadata for each service provided by the MFP and device metadata indicating all the services provided by the MFP.

In one approach the DFM receives service metadata requests from WSAs executing on the MFP. The DFM retrieves service metadata for a corresponding WSA and sends the service metadata to the WSA.

In one approach the DFM receives configuration information from an administrator. The DFM then configures or causes to be configured a particular application based on the configuration information.

Another technique is provided for adding a service to a MFP. An add request is received to add a new application to a device that already provides a service. Code associated with the new application is received. A registration request to register the new application is received from the new application. Service metadata associated with the new service is also received from the new application. A port number is sent to the new application wherein the new application uses the port number to detect requests for the new service.

In one approach a service metadata request is received from the new application at the DFM. The DFM retrieves the service metadata associated with the new service and forwards the service metadata to the new application which forwards the service metadata to a client application.

In one approach the new application retrieves information pertaining to the device through an abstract API. The abstract API defines an interface by which the new application invokes one or more functions on the device and receives data from the device.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

The MFP as indicated by may comprise multiple platforms e.g. a legacy platform a Linux based platform and a VxWorks based platform upon each of which one or more of the WSAs may execute. The platforms depicted in are merely provided as examples as the approach is applicable to any type of platform.

DFM represents the MFP by responding to discovery requests metadata requests from client and configuration and other MFP administration requests from an administrator . DFM may act as a repository of implementations of multiple Web Service specifications such as WS Discovery and WS MeX i.e. WS MetadataExchange .

Each WSA executing on the MFP provides a service to client that requests the service e.g. using the SOAP protocol. Each WSA may employ a service specific abstract API such as abstract API independent from the target platform. Each WSA may also employ WS Eventing .

Client may discover that an MFP exists via a discovery request or a discovery HELLO message i.e. a broadcast or multicast message announcing the MFP to devices on the same network . Once client is aware of the existence of an MFP client sends a device metadata exchange request e.g. via WS MetadataExchange to discover all the services that the MFP provides. DFM acting for the entire device receives the request and returns metadata describing the various services provided by the MFP. Client requests service metadata from a particular service application executing on the MFP such as Web service application WSA . WSA may request the service metadata from a Web Service Device WSD Manager which returns the service metadata to WSA . WSA forwards the service metadata to client .

Alternatively the device metadata of the MFP and the service metadata of one or more WSAs may be sent to client in the same response.

Based on the service metadata client generates and transmits a SOAP request corresponding to a service provided by WSA which WSA receives and processes. Based on a service request WSA may use an abstract API to make a platform specific call to an implementation of abstract API such as an abstract API implementation . In this way a developer of a Web service application e.g. WSA may focus on the development of the Web service itself and without having to know the complexities of the underlying platform upon which the Web service executes. Therefore someone other than the Web service application developer with knowledge of the target platform may define the implementation of the corresponding abstract API.

Client is an application that is associated with a process that requests one or more services provided by an MFP. Client is typically an application associated with the operating system that supports the initial requesting process. A purpose of client is to convert a platform specific procedure call from a requesting process to a SOAP request that can be processed by an application that understands SOAP.

For example the requesting process may be associated with a Microsoft Word application and WSA may provide a print service. Client is typically an application associated with the operating system that supports the initial requesting process. Client receives a platform specific print data request sent from the requesting process. Client encodes the print data request in a SOAP message that can be processed by service application that understands SOAP messages.

SOAP communication between client and an MFP may be made over a network not shown . The network may be implemented by any medium or mechanism that provides for the exchange of data between various nodes in the network. Examples of such a network include without limitation a network such as a Local Area Network LAN Wide Area Network WAN Ethernet or the Internet or one or more terrestrial satellite or wireless links. The network may include a combination of networks such as those described. The network may transmit data according to Transmission Control Protocol TCP User Datagram Protocol UDP and or Internet Protocol IP .

DFM represents an MFP by accepting discovery requests requests for logging information and configuration instructions. According to an embodiment DFM also acts as a repository of implementations of multiple Web Service specifications. Thus DFM includes a shared library of routines that each implement one or more functions defined by one or more Web Services specifications e.g. WS Security WS MetadataExchange . In this way multiple Web Service specifications are implemented once and then shared with each of the multiple Web service applications i.e. WSA executing on the MFP. As a result developers of Web service applications are not required to know many details about any of the specifications implemented on DFM but can use and rely on those implementations. Some Web Service specifications implemented on DFM may include but are not limited to WS Discovery WS Transfer WS MeX i.e. WS MetadataExchange and WS Security .

In one embodiment DFM includes library routines corresponding to the SOAP protocol. Each SOAP library routine implements one or more functions defined by one or more SOAP specifications. The SOAP library routines are used to analyze SOAP requests and package SOAP messages. Therefore each WSA may invoke one or more SOAP library routines from DFM so that the SOAP library routines may be defined once and shared among all WSAs executing on the MFP. Multiple versions of the SOAP protocol standard may be supported. Updates to a newer version a SOAP protocol standard may be done with little or no modification to WSA .

In one embodiment a client application e.g. client may register to receive information pertaining to updates to one or more WSAs on the MFP. If DFM receives update information pertaining to an update of a particular application and a client application is registered to receive a message indicating such update then DFM sends to the client application a message that indicates the update information.

In one embodiment DFM may receive update information pertaining to a WSA. For example WSA may provide a fax service and the MFP detects that the fax line is disconnected. DFM should not respond to future metadata requests with device metadata that indicates that the MFP provides a fax service when the fax service is unavailable. Therefore DFM in response to receiving update information from a WSA updates the device and or service metadata associated with the WSA.

In one embodiment DFM may receive configuration requests from an administrator application e.g. administrator . A configuration request indicates one or more WSAs that are to be configured and or updated. The DFM handles configuration requests and performs or causes to be performed the configuration or update instruction on the appropriate WSA. Alternatively as described in more detail below DFM may instruct WSD Manager to handle such configuration requests.

In one embodiment DFM may receive and respond to log requests from an administrator application e.g. administrator . DFM retrieves logging information pertaining to the one or more WSAs executing on the MFP and sends the logging information to administrator . As described in more detail below WSD Manager may retrieve and provide to DFM the logging information.

According to an embodiment DFM also comprises WSD Manager . WSD Manager provides a central point for logging information status inquiry and external management of the MFP such as from an administrator . Administrator is an application that is configured to retrieve information pertaining to the MFP through WSD Manager . For example WSD Manager may centralize all logging information coming internally from all WSAs and from the various platforms upon which WSAs are executing. An administrator may also configure update or disable a WSA using WSD Manager .

In one embodiment WSD Manager maintains overall status information such as where the MFP is located what WSAs are installed on the MFP and whether the WSAs are running properly.

In one embodiment WSD Manager maintains the metadata for the MFP and service metadata pertaining to each service application running on the MFP.

According to an embodiment WSD Manager retrieves general information pertaining to the MFP such as the IP address and the model number of the MFP through general API . General API defines an interface by which DFM receives information specific to each platform of the MFP. In this way a DFM developer is not required to know the details of a specific platform only the details of the DFM that the developer is building for an MFP. The dotted lines in are API calls from a particular API to the appropriate API implementation. 

If general API has been defined for DFM then an implementation of general API for a specific platform must be defined. For example a general API implementation is defined for general API on a legacy platform . Similarly a general API implementation is defined for general API on a Linux based platform . Similarly a general API implementation is defined for general API on a VxWorks based platform . A corresponding general API implementation defines the functions specified in a device specific request and implemented on the MFP. Either the developer of DFM may define the implementation or someone else who has knowledge of the target platform may define the implementation.

Web services application WSA is a module that provides one or more Web services and relies on Web Services protocols and technologies such as those protocols provided by DFM . WSA may also rely on a separate SOAP module not shown to analyze SOAP requests if WSA does not include logic for analyzing SOAP requests. As indicated above the separate SOAP module may be provided by DFM and shared among all WSAs .

WSA may also comprise a WS Eventing module for responding to event requests from client . Client may subscribe to an event associated with the service provided by WSA . For example WSA may be a printing application and an event that client subscribes to is when the MFP associated with WSA completes a print job. Thus upon completion of the event WSA will send an event message to client indicating that the print job is completed.

WSA may also comprise an abstract API e.g. abstract API through which device specific calls may be generated. The abstract API defines an interface by which the associated WSA invokes one or more functions on the MFP. Therefore the developer of a Web service application is not required to know the underlying complexities of the target platform but only of the new service that the developer aims to provide.

If an abstract API has been defined by a Web service application developer then an implementation of the abstract API for a specific platform must be defined. For example an abstract API implementation is defined for abstract API on GW platform . Similarly an abstract API implementation is defined for abstract API on VxWorks platform . A corresponding abstract API implementation defines the functions specified in a device specific request and implemented on the MFP. Either the developer of the Web service application may define the implementation or someone else who has knowledge of the target platform may define the implementation.

At step the user sends via client a multicast discovery request to discover available printing devices that are capable of processing print jobs according to the above requirements. Typically the discovery request conforms to SOAP or any other platform independent communication protocol so that devices executing on various platforms may communicate with each other. The discovery request may be generated and transmitted by an application e.g. a word processing program or email program. In response to the discovery request DFM may use WS Discovery to examine the discovery request. WS Discovery implements the Web Services Discovery protocol standard. DFM also uses WS Discovery to package a response which at least includes the IP address of the MFP and sends the IP address to client step . Alternatively DFM may be configured to include in the response device metadata associated with the MFP identifying the various services provided thereon.

In one embodiment DFM may broadcast SOAP messages notifying devices in the vicinity that the MFP associated with DFM is available to provide services. In response to such a SOAP message client may promptly request the device metadata of DFM using the IP address in the initial SOAP message.

At step client sends a request for metadata to DFM . A metadata request from client may be initially processed by module WS Transfer on DFM wherein WS Transfer comprises one or more routines that implement one or more functions defined by the Web Services Transfer specification. At steps and DFM queries and retrieves from WSD Manager the device metadata associated with the MFP. DFM utilizes module WS MeX to package the device metadata. Module WS MeX comprises one or more library routines that implement one or more functions defined by the Web Services MetadataExchange specification. At step DFM uses one or more library routines provided by WS Transfer to return the device metadata of the MFP to client . The device metadata response may include but is not limited to a the physical location of the MFP b the MFP s hosting relationship i.e. list of all services on the MFP and c one or more URIs that allows a user to access the one or more services provided by the MFP.

Based on the device metadata the user of client determines 1 that the MFP provides at least a printing service and 2 the URI to use to access the printing service. In order to communicate directly with the printing service and to discover the exact capabilities of the printing service e.g. the security provided thereon client sends a service metadata request to the MFP using the port number provided in the device metadata response step . If WSA provides the printing service then WSA receives the service metadata request. At step WSA requests the service metadata from DFM which may query WSD Manager for the service metadata associated with WSA . WSA receives the service metadata step and forwards the service metadata to client step . The service metadata may be in the form of a WSDL document that describes the public interface to WSA . Thus the service metadata indicates how client is to interact with WSA .

If the user determines based on the service metadata that WSA provides the level of printing service that the user requires the user may require client to register with an eventing service provided by WSA . In this example client requests notification data when the print job is fully executed.

Client receives a platform specific request from the word processing application on the user s computer to print the electronic document according to the stated requirements. Client transforms the platform specific request into a SOAP request that can be processed by Web service applications. At step client transmits the SOAP request to WSA which may call DFM to implement some of the policies specified in the SOAP request.

In this example module WS Security implements the Web Service Security protocol standard to decrypt the portion of the SOAP request corresponding to the encrypted electronic document. WSA receives the decrypted electronic document from DFM . At step using abstract API WSA makes a WSA specific API call to the specific platform upon which WSA is executing. In this example the abstract API call is to print the electronic document. At step results of the print job are sent to the WSA . At step when the print job is complete WSA notifies client via WS Eventing .

Some benefits that may result from implementing a DFM as disclosed herein include a centralized implementation of common Web Services specifications so that all WSAs may benefit and share therefrom b a single location for device configuration metadata handling and discovery requests and c a WSD Manager for centralized control and management of the MFP.

As an example of how a new service may be added to a device consider the following. Suppose an archiving service is to be added to an MFP already providing a copying service and a printing service. An owner of the MFP inserts a secure digital SD card containing code to the new archiving application. In one embodiment the code is sent to the MFP from a remote computer using a secure Internet connection. However any mechanism may be used to provide the code to the MFP. The invention is not limited to any particular manner in which the code for a new application is sent to and received by the MFP.

The code is uploaded to the MFP after which the MFP executes at least a portion of the code. Execution of at least a portion of the code causes the archiving application to issue a registration request to register the archiving application.

If the MFP already provides an archiving service and for example the existing archiving service is a newer version than the service provided by the new application then the MFP may deny the registration request and not register the new application with the MFP. However the MFP may accept an older version of the archiving service in order to provide the archiving service to client applications that are only capable of communicating with the older version.

If the MFP accepts the registration request then the archiving application sends service metadata associated with the new archiving service to the MFP. The MFP sends a port number to the archiving application. The port number indicates which port of the MFP to listen for SOAP requests for the archiving service.

In a similar manner an existing WSA on the MFP may be updated. The described approach for adding a new service and updating an existing service allow the MFP to continue functioning without being shut down when a service is added or updated.

Once a new application is registered with a device the new application may receive service metadata requests and respond to other SOAP requests from a client application as described above.

In one embodiment once the new application is registered the MFP or new application may broadcast or multicast a HELLO message to notify devices on the network that the new service is added to the network and ready to respond to service requests.

In one embodiment once the new application is registered the device metadata of the MFP is updated to include the new service. The MFP may update the device metadata by informing the WSD Manager of the new application and a URI which URI a client application may use to send SOAP requests to the new application.

The approach described herein may be implemented on any type of computing platform or architecture. is a block diagram that illustrates a computer system upon which an embodiment of the invention may be implemented. Computer system includes a bus or other communication mechanism for communicating information and a processor coupled with bus for processing information. Computer system also includes a main memory such as a random access memory RAM or other dynamic storage device coupled to bus for storing information and instructions to be executed by processor . Main memory also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Computer system further includes a read only memory ROM or other static storage device coupled to bus for storing static information and instructions for processor . A storage device such as a magnetic disk or optical disk is provided and coupled to bus for storing information and instructions.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

The invention is related to the use of computer system for implementing the techniques described herein. According to one embodiment of the invention those techniques are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another machine readable medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus embodiments of the invention are not limited to any specific combination of hardware circuitry and software.

The term machine readable medium as used herein refers to any medium that participates in providing data that causes a machine to operation in a specific fashion. In an embodiment implemented using computer system various machine readable media are involved for example in providing instructions to processor for execution. Such a medium may take many forms including but not limited to non volatile media volatile media and transmission media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Common forms of machine readable media include for example a floppy disk a flexible disk hard disk magnetic tape or any other magnetic medium a CD ROM any other optical medium punchcards papertape any other physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM any other memory chip or cartridge a carrier wave as described hereinafter or any other medium from which a computer can read.

Various forms of machine readable media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are exemplary forms of carrier waves transporting the information.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution. In this manner computer system may obtain application code in the form of a carrier wave.

In the foregoing specification embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. Thus the sole and exclusive indicator of what is the invention and is intended by the applicants to be the invention is the set of claims that issue from this application in the specific form in which such claims issue including any subsequent correction. Any definitions expressly set forth herein for terms contained in such claims shall govern the meaning of such terms as used in the claims. Hence no limitation element property feature advantage or attribute that is not expressly recited in a claim should limit the scope of such claim in any way. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

