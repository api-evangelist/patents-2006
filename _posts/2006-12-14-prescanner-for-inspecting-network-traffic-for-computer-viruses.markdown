---

title: Pre-scanner for inspecting network traffic for computer viruses
abstract: In one embodiment, an add-on pre-scanner card is removably pluggable into a local bus of a computer. The add-on pre-scanner card may be coupled to a computer network to receive network traffic. The add-on pre-scanner card may be configured to extract payloads from received packets and scan the payloads for computer viruses. The add-on pre-scanner card may pass scanned payloads and other data to the computer by way of a shared memory interface. The pre-scanner card may identify each payload as infected with a virus, virus-free, or unknown to allow the computer to distinguish payloads that do not need further scanning from those that do. The computer may further scan for viruses payloads that the pre-scanner card cannot ascertain as either virus free or virus infected.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07992206&OS=07992206&RS=07992206
owner: Trend Micro Incorporated
number: 07992206
owner_city: Tokyo
owner_country: JP
publication_date: 20061214
---
The present invention relates generally to computer networks and more particularly but not exclusively to network security apparatus.

Computer viruses worms Trojans and spyware are examples of malicious codes that have plagued computer systems throughout the world. Although there are technical differences between each type of malicious code malicious codes are collectively referred to herein as viruses for ease of illustration and compliance with common usage.

The Internet and similar public networks enable viruses to spread quickly to infect a large number of computers. As a precautionary measure against viruses private computer networks may deploy a virus scanner between its computers and the Internet. Currently available in line virus scanners perform either store scan forward scanning or stream scanning. Store scan forward scanning is typically implemented in software using a complex file based scanner. A complex file based scanner stores received incoming data waits to receive all of the data comprising a file scans the file for viruses once all of its data are received and forwards the data to its destination assuming no viruses are found in the file. Being implemented in software store scan forward scanning provides great flexibility is easily extensible allows for high virus detection rate with relatively low false positives i.e. erroneous detection of a virus and low false negatives i.e. failure to identify a virus . However relying on a software implementation yields relatively slow performance resulting in excessive sometimes unacceptable processing delays.

Stream scanning also referred to as cut through scanning receives scans and forwards data on non file data units typically on packet levels. Scanning commences as soon as a number of data units become available and scanned data units are immediately forwarded out to their destination assuming no viruses are found. This way data receiving scanning and forwarding occur concurrently allowing for faster throughput compared to store scan forward scanning. Stream scanning whether implemented in hardware or software provides performance advantage that is noticeable by the end user. However stream scanning has relatively low virus detection capability because only forward scanning is possible and has higher rates of false positives and false negatives. In addition hardware based implementations often rely on less sophisticated scanning algorithms that open up the network to virus attacks.

In one embodiment an add on pre scanner card is removably pluggable into a local bus of a computer. The add on pre scanner card may be coupled to a computer network to receive network traffic. The add on pre scanner card may be configured to extract payloads from received packets and scan the payloads for computer viruses. The add on pre scanner card may pass scanned payloads and other data to the computer by way of a shared memory interface. The pre scanner card may identify each payload as infected with a virus virus free or unknown to allow the computer to distinguish payloads that do not need further scanning from those that do. The computer may further scan for viruses payloads that the pre scanner card cannot ascertain as either virus free or virus infected.

These and other features of the present invention will be readily apparent to persons of ordinary skill in the art upon reading the entirety of this disclosure which includes the accompanying drawings and claims.

In the present disclosure numerous specific details are provided such as examples of apparatus components and methods to provide a thorough understanding of embodiments of the invention. Persons of ordinary skill in the art will recognize however that the invention can be practiced without one or more of the specific details. In other instances well known details are not shown or described to avoid obscuring aspects of the invention.

In the example of data in the unknown state is passed to a back end complex scanner for second level scanning. The back end complex scanner may comprise a general purpose computer such as a server or desktop computer with a local bus with a file based scan engine . The file based scan engine is preferably implemented as software stored in computer memory and executed by the processor of the back end scanner . The file based scan engine may be a conventional file based antivirus scan engine such as those from antivirus vendors including Trend Micro Inc. The file based scan engine allows for more comprehensive virus scanning at the expense of performance. However the pre processing performed on incoming data by the pre scanner card minimizes the virus scanning workload of the file based scan engine . Using a file based scan engine to perform comprehensive virus scanning simplifies the design and implementation of the scan engine of the pre scanner card allowing the pre scanner card to operate faster.

Generally speaking the pre scanner card and a back end complex scanner together performs a two level virus scanning with the pre scanner card performing a first level virus scanning of incoming data on a packet level and the back end complex scanner performing a second level virus scanning of the incoming data on a file level in the event the pre scanner card cannot determine whether or not the incoming data is infected by a virus. This two level virus scanning approach allows for the reduced latency and higher performance of hardware based stream scanners with the accuracy and flexibility of software based store scan forward scanners.

The pre scanner card is an add on card in that it is configured to be removably plugged into a bus of a general purpose computer. For example the pre scanner card may be readily installed in a computer by inserting the pre scanner card into a slot or terminal of a local bus of the computer the pre scanner card may also be removed from the local bus by simply lifting it from the slot or terminal.

While the pre scanner card may be effectively integrated with a back end complex scanner in the same motherboard implementing it as an add on card provides several advantages heretofore unrealized. First the pre scanner card may be readily installed in existing customer computers. Second antivirus vendors may readily integrate the operation of the pre scanner card with file based virus scanners in current customer installations by adding interfacing software modules. Third the use of an add on card rather than a dedicated appliance allows existing customers to migrate for improved performance incrementally and at reasonable cost. Fourth the pre scanner card may be moved to faster computers as they become available. Fifth upgrading the pre scanner card with newer versions only requires removal of the old add on card and installing the new one in its place in the same computer.

In one embodiment the pre scanner card comprises a PCI Peripheral Component Interconnect card pluggable into a PCI local bus. Other buses may also be employed without detracting from the merits of the present invention. The pre scanner card may be installed in an available bus slot or terminal of a back end complex scanner for example. In other embodiments the pre scanner card may be integrated with the motherboard of the back end complex scanner .

In the example of a switch allows unknown data to be passed to other back end complex scanners coupled to the switch. schematically shows an add on pre scanner card in accordance with an embodiment of the present invention. Note that not all connections are shown in for clarity of illustration. In one embodiment the pre scanner card operates on TCP transmission control protocol packets. The pre scanner card may pre scan incoming TCP packets to classify them as good i.e. virus free bad i.e. virus infected or unknown i.e. cannot determine whether infected or not . Unknown packets are sent to a back end complex scanner for more comprehensive virus scanning by a file based scan engine . This reduces the scanning load of the back end complex scanner without compromising detection accuracy. Data and summary information for good data may be passed to the back end complex scanner in order to perform additional checks on the data such as to check if an email has content characteristic of SPAM or to verify the digital signatures of ActiveX controls. The pre scanner card may also perform control normalization and support functions to off load these functions from the back end complex scanner for even more performance gains.

In the example of the pre scanner card includes a network termination block and a network interface to send see arrow and receive see arrow TCP packets to and from a gigabit computer network. The network termination block may comprise one or more terminals for plugging network communication cables to the pre scanner card . The network interface may comprise a network interface chip such as the Intel IXF 1002 Dual Port Gigabit Ethernet MAC MAC 1G1 Gigabit Ethernet Media Access Controller Core from Evatronix of Poland MorethanIP GmbH of Germany or equivalent soft core from other IP vendors.

The pre scanner card may include programmable logic which may comprise one or more ASIC application specific integrated circuit or FPGA Field Programmable Gate Array devices. The programmable logic may include a packet routing and holding area a packet pre processing module a control module a normalization and support module a scan engine a packet header and checker TCP processor module timers and a manager .

The packet routing and holding area may comprise a limited amount of data storage locations configured to provide buffering for down stream processing delays. Received packets sit in the packet routing and holding area until the next packet arrives. A packet currently in the packet routing and holding area is also referred to herein as current packet. The pre scanner card may perform one of the following actions depending on the next arriving packet 

The packet pre processing module may be configured to strip header and payload from packets tag payloads with flow tags and forward payloads to corresponding protocol analyzers in the control module . In one embodiment the pre processing module also receives current packets sitting in the packet holding and routing area . The packet pre processing module does not have to receive the complete set of packets of a particular flow to operate on current packets.

The packet pre processing module may forward current packets to the TCP processor of the module for validation and to classify them as part of a packet flow. As can be appreciated a packet flow may comprise a plurality of packets associated with a particular TCP connection.

The packet pre processing module may create and attach a flow tag to each packet payload. Flow tags may be used to determine which payload goes with which packet flow. A flow tag may include VLAN virtual local area network information packet sequential number summary of packet header information e.g. source and destination IP addresses and port numbers etc. and other information. The flow tags may be generated based on packet sequence number or other packet identifier.

The packet pre processing module may forward packet headers payload and corresponding flow tags to the packet header and checker TCP processor module for network security inspection. The module may consult a header rules library stored in memory e.g. SDRAM coupled to the programmable logic to determine whether or not a packet is to be dropped and its associated flow blocked. The header rules library may comprise rules and information on how to identify network security threats. For example the header rules library may comprise a listing of IP addresses that are not allowed to traverse the network rules for authenticating TCP IP connections flow tags of packets to be blocked and so on. As a particular example the packet pre processor module may strip the header of a current packet and pass that header to the module where the IP address noted in the header is compared against a list of banned or to be blocked IP addresses listed in the header rules library . As another example the module may use the timers to detect expired packets and to block packets with particular sequence numbers for a period of time. Once a packet is blocked packets belonging to the same flow as that packet may also be blocked.

The packet pre processing module may determine the communication protocol of the current packet and forward the current packet to the appropriate protocol analyzer in the control module . For example the packet pre processing module may inspect the packet and determine from its destination port number whether it is for SMTP e.g. port or HTTP e.g. port .

The control module may include a protocol analyzer for analyzing packets of particular communication protocols. In the example of the control module includes protocol analyzers for SMTP simple mail transfer protocol and HTTP hyper text transfer protocol . A protocol analyzer may be configured to understand and parse a particular protocol. A protocol analyzer may operate with the normalization and support module . For example an email analyzer for SMTP may employ a MIME parser to extract attachments from an email a decompression engine to decompress archived files and so on. The control module may also have an interface for receiving packets for raw files from the packet pre processing module . The normalization and support module may also include a cyclic redundancy check CRC engine and an interface to the scan engine . The CRC engine may be configured to produce a unique numerical fingerprint in the form of a checksum for payloads or other unique piece of data processed by the pre scanner card . A scan interface may allow data such as payloads extracted from current packets to be forwarded to the scan engine for virus scanning and forwarding to the back end complex scanner .

The manager may be configured to coordinate the operation of the pre scanner card and may provide control and status registers. The manger may be implemented as a state machine for example.

The scan engine may be configured to scan data for computer viruses. In one embodiment the scan engine scans data on a packet level. In the example of the scan engine consults the signature database to determine whether a payload of a particular packet is good bad or unknown. The scan engine may compare the contents of a payload to virus signatures in the database to determine whether or not the payload is bad i.e. infected with a virus . If the payload is bad the scan engine may indicate in the payload s flow tag that the packet is bad so that the back end complex scanner does not have to bother scanning the payload for viruses. This advantageously reduces the virus scanning workload of the back end complex scanner . The bad payload may be transmitted to the back end complex scanner for logging. Upon finding from the flow tag that the payload is bad the back end complex scanner logs the event and sends a drop command to the packet pre processing module to drop the packet carrying the payload. In response the packet pre processing module drops the bad packet and blocks other packets of the same flow.

The scan engine may also compare the contents of the payload for patterns in the database indicating that the payload is good i.e. not infected with a virus . For example the contents of the payload may not be executable by a processor e.g. plain text or does not match one or more sub patterns that are known to be present in all virus patterns in both the signature database employed by the scan engine and the signature database employed by the file based scan engine . In those cases the scan engine may deem the payload to be good and accordingly so indicate in the payload s flow tag. The back end complex scanner may read the flow tag to determine that the payload is good. Accordingly the back end complex scanner does not have to bother scanning the payload for viruses reducing its virus scanning workload.

In the event the scan engine cannot determine whether the payload is good or bad such as when the contents of the payload match an aggressive signature that is known to have false positives in the signature database the payload may be deemed unknown. In that case the scan engine may indicate in the payload s flow tag that the payload is unknown before transmitting the payload to the back end scanner see arrow .

In one embodiment the scan engine sends all payloads i.e. whether good bar or unknown to the back end complex scanner for event logging and egress control coordination by way of a local bus. The local bus comprises the PCI Express bus in one embodiment. The scan engine may communicate with the back end complex scanner by passing data to each other using a shared memory interface on the local bus see . The back end complex scanner may read the flow tag of a payload to find associated payloads and to determine whether a payload is good bad or unknown based on the virus scanning performed by the scan engine . The back end complex scanner may send a packet drop command to the packet pre processing module by way of the scan engine for packets carrying a bad payload.

The back end complex scanner may include a file based scan engine that consults a signature database to determine whether or not a file contains a virus. The back end complex scanner may use the file based scan engine to virus scan payloads that have been tagged by the scan engine as unknown. In one embodiment the back end complex scanner gathers unknown payloads of the same flow tag to build a logical file. Upon receiving enough payloads to build the logical file the file based scan engine may scan the file for viruses using conventional pattern matching techniques. The file based scan engine may compare the contents of the file to those in the signature database to determine whether or not the file contains a virus. Because the signature database is more exact i.e. configured to have more precise patterns than the signature database for more complete virus scanning and because the file based scan engine has more data to work with i.e. scans an entire file the back end complex scanner allows for more comprehensive scanning than the scan engine of the pre scanner card . The performance penalty involved with comprehensive scanning in the back end complex scanner is minimized by having the pre scanner card pre process the incoming packets to detect readily identifiable bad and good packets.

The back end complex scanner may also include other security modules for URL filtering certificate validation IP reputation anti phishing anti spam and other conventional network security procedures.

The back end complex scanner may send a forward command to the packet pre processing module to allow good packets to pass through and propagate back onto the network. The back end complex scanner may send a drop command to the packet pre processing module to drop and block bad packets.

The pre scanner card may be configured to work with more than one back end complex scanner . In the example of the pre scanner card includes an interface for multiple back end complex scanners . The interface may comprise a PCI Express over cable interface commercially available from Texas Instruments Inc. for example.

In one embodiment the pre scanner card and a back end complex scanner communicates to each other by passing messages and data using a shared memory interface. schematically shows the use of a shared memory interface as a communication channel between the pre scanner card and the back end complex scanner in accordance with an embodiment of the present invention. The shared memory interface is preferably located in the local bus e.g. PCI bus to readily allow memory space sharing. The shared memory interface may comprise dual ported RAM DPR with associated control contention logic and instruction decoder. The shared memory interface may have separate address and data lines. The pre scanner card and the back end complex scanner may pass command status payload and other data to each other by reading and writing to the shared memory interface . The pre scanner card may communicate with the back end complex scanner by way of logic through the scan engine . The shared memory interface may be physically located separate from or as part of the pre scanner card .

The send ring buffer and the receive ring buffer may be managed as a generator consumer queue. The send ring buffer may be configured for sending messages from the pre scanner card to the back end complex scanner . For example the pre scanner card may write a message into the send ring . The back end complex scanner may poll the send ring for new messages and upon finding the message from the pre scanner card pick up the message and advance the pointer of the send ring to the next buffer location. Similarly the receive ring may be configured for sending messages from the back end complex scanner to the pre scanner card . For example the back end complex scanner may write a message into the receive ring . The pre scanner card may poll the receive ring for new messages and upon finding the message from the back end complex scanner read the message and advance the pointer of the receive ring to the next buffer location. The send ring and the receive ring may be configured to have enough buffer locations to prevent buffer overrun. The block memory may comprise blocks of memory locations for storing segments comprising payloads and other data.

The transfer of a message in and out of the shared memory interface is preferably done using programmed I O input output also referred to as the PIO method. In the PIO method the pre scanner card and a back end complex scanner reads from or writes into the shared memory interface by making I O reads and writes.

Interrupt processing is compute intensive on most operating systems can consume several thousands CPU cycles and should be reduced to a minimum. Therefore per packet interrupts is preferably avoided. This is especially important with high packet arrival rates as can be expected on a low latency high speed interconnect. Thus instead of an interrupt scheme a polling method to determine whether or not a new message is in the message rings or is preferred to reduce latency. In one embodiment the pre scanner car and the back end complex scanner poll an empty or full flag to determine whether or not a message is empty does not contain a message or full contains a message . The command or status flag indicates whether or not the message contains a command or status.

The field may hold the ID number of a particular back end complex scanner in configurations where there the pre scanner card works with multiple back end complex scanners. Using the field to identify a back end complex scanner is simpler but more dynamic than using an existing 32 bit IP address. In implementations where a back end complex scanner is hot pluggable the add on pre scanner card may be configured to assign the ID number of the back end complex scanner upon its detection on the local bus. The fields may indicate the ID number of the client in session the ID of the server in session with the client the packet number of the session and the routing segment IP address respectively. Fields may contain the payload of the packet in session and other information. A segment may be configured differently to meet a particular implementation without detracting from the merits of the present invention.

The size of a segment may be equal to the size of a flow tag plus the largest Ethernet packet size. Preferably segments may be linked together to form larger packet payloads such as those required for jumbo packets e.g. 9 Kbytes . For example a first segment may hold the flow tag and the following linked segments may be configured as pure data buffers holding the jumbo packet payload.

Even though the shared memory interface is configured as full duplex to allow either the pre scanner card or a back end complex scanner to access messages in the message rings and transfer of segments is preferably simplex. In one embodiment a segment is always transferred from the pre scanner card to the shared memory interface and then to a back end complex scanner . The transfer of segments from the shared memory interface may be by direct memory access DMA to aligned page frames of main memory in the back end complex scanner allocated by a device driver see from a virtual memory page pool.

In one embodiment the pre scanner card and a back end complex scanner communicate using a client server model with the pre scanner card working as a client and the back end complex scanner working as a server. A back end complex scanner may be viewed as a slave entity waiting and interpreting commands from the pre scanner card . Commands from the pre scanner and responses from the back end complex scanner may comprise messages posted in the shared memory interface .

For example an application may send data to an Ethernet card by making a conventional call that flows through the interface library winsock library transport driver interface TDI driver and network device interface NDIS driver . In contrast the application running in the back end complex scanner may communicate with the pre scanner card by way of an application level socket interface implemented using I O Completion Ports IOCP . Such implementation provides an industry standard API application programming interface to a programmer thus simplifying software development updates and maintenance cycles.

Generally speaking sockets implementation is located in the operating system kernel. Thus every socket operation involves a transition into the kernel and back which is very expensive in terms of latency. Invoking driver supported kernel entry point costs thousands of CPU cycles. Decoupling of the kernel based device driver from the application code is achieved using the shared memory interface which is accessible by either the pre scanner card or the back end complex scanner . Using this method kernel calls are avoided in the predominant code path of the sockets implementation. In the example of a kernel component in the form of the device driver sets up shared memory mapping. However the kernel is not involved during the bulk of data transfer between the pre scanner card and the back end complex scanner .

As shown in the pre scanner card may divide file based antivirus scanning and other security processing workloads among several back end complex scanners . In those cases the pre scanner card divides maintains and controls workloads on a per packet flow basis. The connectivity fabric between the back end complex scanners and the pre scanner card may be created using PCI Express over cable devices. Generally speaking PCI Express over cable is designed to connect modular computers together by use of Cat6 cables or fibers which are normally used for Gigabit Ethernet connections.

PCI Express over cable facilitates a remote memory access RMA communication model that allows several back end complex scanners to communicate with the same pre scanner card . Remote memory access is a communication model for multipoint servers it is an excellent connectivity model to achieve zero copy communication. Remote memory access achieves high performance and lowers latency by overlapping communication and computation. In this model several back end complex scanners remotely access the shared memory interface by way of the PCI Express over cable interface coupled to the PCI Express bus where the shared memory interface and the pre scanner card are installed. In the example of the back end complex scanner accesses the shared memory interface directly i.e. in the same computer over a PCI Express bus while the back end complex scanners and access the shared memory interface remotely over a PCI Express bus over cable . A PCI Express switch see may be employed to select particular back end complex scanners depending on implementation.

A remote memory access model views local or remote nodes as transparent shared memory. Each node can directly access the other node s memory just as easily as its own local memory. In the case of a block move e.g. transfer of segments a node can use its DMA controller to copy a block of memory directly between PCI Express local or remote in a single copy operation with no need for intermediate buffer memories so called Zero Copy operation . This feature greatly reduces latency and lowers overhead of data transfer. The DMA controller may be configured to support both read and write operations and be fully interleaved with remote memory access operations. Using remote memory access achieves zero copy communication. Zero copy communication protocols remove memory performance factors from communication performance models and help avoid wasting the valuable and limited memory bandwidth of computing nodes.

While specific embodiments of the present invention have been provided it is to be understood that these embodiments are for illustration purposes and not limiting. Many additional embodiments will be apparent to persons of ordinary skill in the art reading this disclosure.

