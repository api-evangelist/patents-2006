---

title: Method and system for transmitting data over a network
abstract: A method for transmitting data that includes receiving a first request to open a first virtual channel, the first virtual channel associated with a TCP connection, and negotiating a first payload encoding scheme between a client and a server to use on the first virtual channel. The method further includes receiving a first frame from the client, the frame including a first channel-id associated with the first virtual channel and a first payload that includes a first datum encoded using the first payload encoding scheme. In addition, the method includes decoding the first payload to obtain a decoded first datum and processing the decoded first datum to obtain a second datum. The method additionally includes generating a second frame that includes the first channel-id and a second payload that includes the second datum encoded using the first payload encoding scheme, and sending the second frame to the client.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07636353&OS=07636353&RS=07636353
owner: Sun Microsystems, Inc.
number: 07636353
owner_city: Santa Clara
owner_country: US
publication_date: 20061207
---
This application claims priority under 35 U.S.C. 119 to European Patent Application No. 06301004.5 filed Oct. 2 2006 entitled METHOD AND SYSTEM FOR TRANSMITTING DATA OVER A NETWORK. 

Network traffic typically in the form of packets is transmitted over a network such as the Internet from one computer system to another computer system. The content of the packets is initially generated by a process executing on the computer system initiating the transmission. This process generates and or obtains the data to send to the other computer system i.e. the receiving computer system . The data is then encoded using for example Extensible Markup Language XML . The encoded data is then sent to the receiving computer system using one or more communication protocols e.g. HyperText Transfer Protocol HTTP Transmission Control Protocol TCP and Internet Protocol IP .

Prior to sending the encoded data to the receiving computer system metadata is associated with the encoded data. The metadata corresponds to data that is required by the communication protocols. For example if encoded data is sent using HTTP one or more of the following pieces of metadata must accompany the encoded data general header data request header data response header data and entity header data. The various components associated with each of aforementioned headers are defined in Request for Comments RFC 2616 Hypertext Transfer Protocol HTTP 1.1 June 1999 .

The receiving computer system upon receipt of the encoded data and metadata processes the encoded data using the metadata. Processing the encoded data typically includes sending the encoded data through the various layers i.e. physical layer network layer transport layer etc. of the Open Systems Interconnection OSI model in the receiving computer system using the metadata decoding the encoded data using the metadata and performing the necessary actions on the data i.e. the encoded data after it has been decoded to generate a response.

Once the response has been generated the receiving computer system performs the same steps described above with respect to the computer system initiating the transmission to send the response to the initiating computer system. Specifically the receiving computer system encodes the response generates the necessary metadata and sends the metadata and the encoded response to the computer initiating the transmission using one or more communication protocols.

In general in one aspect the invention relates to a method for transmitting data. The method includes receiving a first request to open a first virtual channel wherein the first virtual channel is associated with a TCP connection and wherein the TCP connection is between a client and a server. The method further includes negotiating between the client and the server a first payload encoding scheme to use on the first virtual channel in response to the first request and receiving a first frame from the client. The first frame includes first frame comprises a first channel id and a first payload wherein the first channel id is associated with the first virtual channel and wherein the first payload comprises a first datum encoded using the first payload encoding scheme. The method further includes decoding the first payload to obtain a decoded first datum processing the decoded first datum to obtain a second datum and generating a second frame. The second frame includes the first channel id and a second payload and wherein the second payload comprises the second datum encoded using the first payload encoding scheme. The method also includes sending the second frame to the client.

In general in one aspect the invention relates to a method for transmitting data. The method includes receiving a first frame from a client. The first frame consists of a channel id a first header and a first payload component and wherein the first payload component comprises a first payload. The method further includes determining a payload encoding scheme using the channel id decoding the first payload to obtain a first decoded payload using the payload encoding scheme processing the first decoded payload to obtain a second payload encoding the second payload using the payload encoding scheme to obtain an encoded second payload and generating a second frame. The second frame consists of the channel id a second header and a second payload component wherein the second payload component comprises the encoded second payload. The method also includes sending the second frame to the client.

In general in one aspect the invention relates to a method for transmitting data. The method includes receiving by a server a first frame from a client wherein the first frame comprises a channel id a header and a payload component wherein the payload component comprises a first payload wherein the channel id is associated with a virtual channel operating over a transport layer protocol wherein the first payload is encoded using a payload encoding scheme associated with a state and wherein the state is associated with the channel id. The method further includes obtaining the state associated with the channel id decoding the first payload to obtain a first decoded payload using the state processing the first decoded payload to obtain a second payload encoding the second payload using the payload encoding scheme defined in the state to obtain an encoded second payload and generating a second frame. The second frame includes the encoded second payload. The method also includes sending the second frame to the client.

Other aspects of the invention will be apparent from the following description and the appended claims.

Specific embodiments of the invention will now be described in detail with reference to the accompanying figures. Like elements in the various figures are denoted by like reference numerals for consistency.

In the following detailed description of embodiments of the invention numerous specific details are set forth in order to provide a more thorough understanding of the invention. However it will be apparent to one of ordinary skill in the art that the invention may be practiced without these specific details. In other instances well known features have not been described in detail to avoid unnecessarily complicating the description.

In general embodiments of the invention relate to a method and system for transmitting data over a network. More specifically embodiments of the invention relate to negotiating payload encoding schemes between a client and a server prior to the transmission of data thereby reducing the metadata transmitted with the data.

Each of the computers is connected to the network via a network interface card NIC . In one embodiment of the invention each NIC is a piece of hardware operatively connected to the computer that includes functionality to send and receive network traffic.

In one embodiment of the invention network traffic is transmitted in the form of packets where each packet includes a header and a payload. The header includes metadata used to route and process the packet and the payload includes the actual data to be communicated to at least one other computer on the network .

The computers interact with the NICs via device drivers . In one embodiment of the invention each device driver is configured to expose the NIC to the computer . Exposing the NICs to the computers includes providing application programming interfaces APIs to allow the computers to interact with the NICs . Interacting with the NIC typically includes obtaining packets from the NIC and sending packets to the NIC .

As shown in each device driver is operatively connected to a network layer . In one embodiment of the invention the network layer is configured to perform network layer processing. Network layer processing corresponds to functionality to manage packet addressing and delivery on a network e.g. functionality to support Internet Protocol IP including but not limited to IPv4 and IPv6 Address Resolution Protocol ARP Internet Control Message Protocol ICMP etc. .

Further as shown in each network layer is operatively connected to a transport layer . In one embodiment of the invention the transport layer is configured to perform transport layer processing. Transport layer processing corresponds to functionality to manage the transfer of packets on the network e.g. functionality to support Transmission Control Protocol TCP User Datagram Protocol UDP Stream Control Transmission Protocol SCTP etc. . The device driver the network layer and the transport layer may be collectively referred to as a network stack .

In one embodiment of the invention each network stack is operatively connected to an application layer . In one embodiment of the invention the application layer enables users to access the network via an application not shown executing on the computer . Similar to the network layer and the transport layer the application layer also supports various application layer protocols. Some examples of application layer protocols include Telnet File Transfer Protocol FTP Simple Mail Transfer Protocol SMTP and Hypertext Transfer Protocol HTTP .

In one embodiment of the invention one or both of the computers may include a web service application. In one embodiment of the invention the web service application is configured to provide the connection management service. The connection management service may include functions to perform for example opening a TCP connection opening one or more virtual channels described below on the TCP connection negotiating which payload encoding schemes to use on a per virtual channel basis and assigning channel identifiers ids to each of the virtual channels. Additional details about various functions performed by the connection management service are discussed below in .

In one embodiment of the invention the functions included in the connection management service are defined using Web Service Description Language WSDL file. Further an Extensible Markup Language XML Schema Definition XSD file is used to define all custom types structures used in the WSDL file. Example 1 and Example 2 below are examples of respectively a WSDL file and an associated XSD file defining a connection management service. Those skilled in the art will appreciate that the following files are provided for exemplary purposes only and accordingly should not be construed as limiting the scope of the invention in any way.

Continuing with the discussion of another computer connected via the network to the computer with the web service application may use the Simple Object Access Protocol SOAP to call functions defined in the WSDL file e.g. initiateSession openChannel etc. .

In one embodiment of the invention the computer calling the aforementioned functions uses an application layer protocol. In one embodiment of the invention the application layer protocol defines a frame for transmitting data over the network . The frame is described in detail in relation to FIGS. and A I below. Once the frame has been created in the application layer the frame is sent to the network stack . Once the network stack has received the frame the various layers in the network stack namely the transport layer and the network layer append additional headers to the frame e.g. a TCP header an IP header a Media Access Control MAC address etc. to form a packet.

Once the network stack has completed processing the frame the result is a packet that includes a header and a payload. The header includes a header component from the network layer e.g. an IP header a header component from the transport layer and typically a MAC address. The payload includes the frame obtained from the application layer. At this stage the packet may be transmitted over the network to the destination computer as identified in the header i.e. the header of the packet .

Continuing with the discussion of the header includes the metadata associated with the frame . In one embodiment of the invention the application layer protocol defines the follow types of headers message header see message start chunk header see message chunk header see message end chunk header see error header see and Null header see . Each of the aforementioned types of headers is discussed below in relation to the referenced Figures.

Continuing with the discussion of the payload component corresponds to the data being communicated over the network as opposed to the metadata e.g. channel id and header . Said another way the payload component includes the data i.e. payload to be sent over the network while the channel id and header correspond to metadata required to send the payload component over the network and to enable the receiving computer to process the data in the payload component . Additional details about the payload component are described below in relation to .

The following discussion describes . shows a message header in accordance with one embodiment of the invention. The message header includes a message header id and a content description . The content description is described below in relation to . In one embodiment of the invention the message header id is a number used to denote that the payload component in is not part of a larger piece of data. Said another way the number denotes that the data to be transmitted combined with the channel id in and the header in does not exceed a maximum frame size i.e. the maximum length in bytes of the frame . If the data to be transmitted combined with the channel id in and the header in exceeds the maximum frame size then the data to be transmitted is divided into chunks.

As discussed above each of the aforementioned header types includes an id e.g. message header id message start chunk id message chunk id message end chunk id error id null id . As discussed above each of the aforementioned ids are used to denote the type of header in the frame. Accordingly the header in each frame includes a message id which corresponds to one of the aforementioned ids. For example a message id of 0 in a frame may denote that the header is message header. In this example the header in the frame conforms to the message header shown in . Similarly a message id of 2 in a frame may denote that the header is a message chunk header. In this example the header in the frame conforms to the message chunk header shown in .

In one embodiment of the invention the content id is a number that denotes the payload encoding scheme used to encode that payload in the payload component in . For example a content id of 1 may denote that the payload is encoded using XML and a content id of 4 may denote that the payload is encoded using Fast Infoset. In one embodiment of the invention the number of parameters field includes a number that denotes the number of parameters that are in the content description . If there are no parameters in the content description then the number of parameters field is 0. Parameters A N are discussed in relation to .

As discussed above there are many types of ids e.g. channel id message header id message start chunk id message chunk id message end chunk id error id null id content id and parameter id present in the frame in . In one embodiment of the invention the aforementioned ids used in the frames may be i negotiated and or established prior to opening a virtual channel ii negotiated and or established during the opening of a virtual channel and or iii negotiated and or established after opening a virtual channel.

In one embodiment of the invention negotiating and or establishing the aforementioned ids prior to opening a virtual channel may correspond to including the ids and what the ids represent as part of the connection management service. As the ids and or what the ids represent change over time the connection management service may be updated. In one embodiment of the invention each time one or more ids are changed the version of the connection management service is updated.

In one embodiment of the invention negotiating and or establishing the aforementioned ids during the opening of a virtual channel may correspond to one or both endpoints of the virtual channel e.g. the client and the server sending and or agreeing on the ids and what the ids represent prior to sending frames over the virtual channel. As such the aforementioned endpoints may use initially agreed upon or previously established ids while negotiating and or establishing new ids and what the ids represent for the virtual channel.

Finally once the virtual channel is open and in use the endpoints of the virtual channel may negotiate over the virtual channel or service channel discussed below modifications i.e. additions changes deletions to the current set of ids being used for frames transmitted over the virtual channel.

In one embodiment of the invention the ids and what the ids represent may be collectively referred to as an encoding decoding vocabulary. Further in one embodiment of the invention there may be one encoding decoding vocabulary for each virtual channel or group of virtual channels .

In one embodiment of the invention the layout of each frame i.e. the components of the frame as shown in FIGS. and A I is defined using a grammar e.g. a Backus Naur Form BNF grammar . In one embodiment of the invention the layout of each frame may be modified by changing the grammar. Further each change or set of changes to the aforementioned grammar may result in a new version of the grammar and be associated with a framing version i.e. a number used to identify the version of the grammar .

Example 3 is an example of a frame that includes a message header. Those skilled in the art will appreciate that the following frame is provided for exemplary purposes only and accordingly should not be construed as limiting the scope of the invention in any way.

Referring to Example 3 the highlighted portion of the frame corresponds to the channel id header and payload length. The remaining portion of the frame corresponds to the encoded payload. With respect to the highlighted portion the channel id is 1 the message id is 0 denoting the header is a message header the content id is 1 the number of parameters is 1 the parameter id is 1 the parameter value is UTF 8 and the payload length is 4342. In this example the content id of 1 denotes that the payload is encoded using SOAP version 1.1. Further the parameter id of 1 denotes that the parameter value identifies a charset which in this example is UTF 8.

Examples 4A 4C show an example of message chunking in accordance with one embodiment of the invention. Those skilled in the art will appreciate that the following example frames are provided for exemplary purposes only and accordingly should not be construed as limiting the scope of the invention in any way.

For the purposes of this example assume that a 20K piece of data must be sent across a virtual channel where the maximum frame size is 8K. Accordingly the following three frames are sent across the virtual channel.

Referring to Example 4A the highlighted portion of the frame corresponds to the channel id header and payload length. The remaining portion of the frame corresponds to the encoded payload. With respect to the highlighted portion the channel id is 1 the message id is 1 denoting that the header is a message start chunk header the content id is 5 denoting that the payload is encoded using SOAP Message Transmission Optimization Mechanism the number of parameters is 0 and the payload length is 8177.

Referring to Example 4B the highlighted portion of the frame corresponds to the channel id header and payload length. The remaining portion of the frame corresponds to the encoded payload. With respect to the highlighted portion the channel id is 1 the message id is 2 denoting that the header is a message chunk header and the payload length is 8178.

Referring to Example 4C the highlighted portion of the frame corresponds to the channel id header and payload length. The remaining portion of the frame corresponds to the encoded payload. With respect to the highlighted portion the channel id is 1 the message id is 3 denoting that the header is a message end chunk header and the payload length is 3902.

In one embodiment of the invention if multiple virtual channels are open on a single TCP connection and a large piece is being transmitted over one of the virtual channels using chunking see e.g. Examples 4A 4C all other frames on all other virtual channels are blocked until all of the frames that include chunks of the large piece of data have been transmitted over the virtual channel. Said another way no interleaving of frames associated with different pieces of data exists. For example once the frame in Example 4A has been transmitted over channel 1 on the TCP connection all other frames for all other virtual channels of the TCP connection are blocked until the frame in Example 4C has been transmitted.

Initially a TCP connection is opened between the client and the server ST . Once the TCP connection is open the client sends a protocol signature to the server ST . In one embodiment of the invention the protocol signature indicates to the server that the client wishes to use the application layer protocol discussed in FIGS. and A I. The client then sends information about the framing version and connection management service version the client is currently using ST . In one embodiment of the invention the framing version corresponds to the current version of the grammar used to define the layout of each frame. In one embodiment of the invention the connection management service version corresponds to the version of the connection management service that is currently being used by the client. In one embodiment of the invention the version of the connection management service that is currently being used by the client includes a listing of ids and what the ids represent discussed above the WSDL file and if necessary the XSD file defining the connection management service discussed above and other code used to interact with the connection management service.

Continuing with the discussion of upon receipt of the framing version and connection management service version from the client a determination is made about whether the server supports the versions the client is currently using ST . If the server does not support the versions the client is currently using then the TCP connection i.e. the TCP connection opened in ST is closed ST . Alternatively if the server supports the versions the client is currently using the server sends back an acknowledgement of the aforementioned versions not shown . The process then proceeds to ST.

In ST the client calls an initiateSession operation on the server. In one embodiment of the invention the initiateSession operation is defined in a WSDL file. Further the initiateSession operation is called using SOAP. Upon receipt of the initiateSession operation call from the client the server determines whether the server is able to open a session i.e. whether the TCP connection may be used to open a virtual channel s ST . In one embodiment of the invention the aforementioned determination is made based on the server s session limitations. For example the server may limit the total number of open sessions a total number of open sessions for a given client or any combination thereof.

If the server determines that a session may not be opened the process proceeds to ST. Alternatively if the server determines that a session may be opened the server sends back a response indicating that a session has been opened by the client not shown . The process then proceeds to ST. In ST the client calls an openChannel operation and sends with the aforementioned call or after the aforementioned call a listing of payload encoding schemes supported by the client. Examples of payload encoding schemes include Fast Infoset XML and SOAP Message Transmission Optimization Mechanism. Those skilled in the art will appreciate that other encoding schemes may be used.

Upon receipt of the listing of payload encoding schemes from the client the server determines whether the server accepts the opening of a new virtual channel and supports any of the payload encoding schemes identified in the listing of payload encoding schemes ST . In one embodiment of the invention the aforementioned determination is made based on the server s virtual channel limitations. For example the server may limit the total number of open virtual channels the total number of open virtual channels for a given TCP connection a total number of open virtual channels for a given client or any combination thereof.

If the server does not accept the opening of a new virtual channel or does not support any of the payload encoding schemes in the listing of payload encoding schemes i.e. there are no common payload encoding schemes the process proceeds to ST. In ST the server sends an error message to the client indicating that the a virtual channel has not been opened. In one embodiment of the invention the error message may include additional information identifying the reason s why the virtual channel was not opened. In one embodiment of the invention if there are no other open virtual channels on the TCP connection ST may also include closing the TCP connection.

Alternatively if the server accepts the opening of a new virtual channel and supports one or more payload encoding schemes in the listing of payload encoding schemes the server sends a listing of commonly supported payload encoding schemes and a channel id to the client ST . In one embodiment of the invention the channel id uniquely identifies a virtual channel on the TCP connection i.e. the TCP connection opened in ST .

At this stage the client may now begin transmitting frames over the virtual channel i.e. the virtual channel associated with the channel id received from the server . In ST the client encodes a payload to send to the server. In one embodiment of the invention the payload in the frame is encoded using one of the payload encoding schemes specified in the listing of commonly supported payload encoding schemes. In one embodiment of the invention one or more payload encoding schemes may by default be supported by both the client and the server e.g. XML . For the default payload encoding schemes the client and the server may not need to negotiate support. Those skilled in the art will appreciate that the default payload encoding schemes may be different for each of the connection management service versions.

The client then sends a frame to the server ST . The frame includes the aforementioned channel id and encoded payload. The server upon receipt of the frame generates a response encodes the response to obtain an encoded payload and sends the encoded payload and channel id in a frame to the client ST . In one embodiment of the invention the payload in the frame is encoded using one of the payload encoding schemes specified in the listing of commonly supported payload encoding schemes. In one embodiment of the invention one or more payload encoding schemes may by default be supported by both the client and the server e.g. XML . For the default payload encoding schemes the client and the server may not need to negotiate support. Those skilled in the art will appreciate that the default payload encoding schemes may be different for each of the connection management service versions.

ST ST may be repeated for each new virtual channel on an open TCP connection. Further ST ST may be repeated once the virtual channel has been opened.

As shown in ST ST and ST are performed on a service channel. In one embodiment of the invention the service channel corresponds to dedicated virtual channel that is used to open virtual channels on a TCP connection. In one embodiment of the invention there is one service channel for each TCP connection. Those skilled in the art will appreciate that ST and or ST may be slightly modified to when using the frames to send individual chunks of a large piece of data see Example 4A 4C .

In one embodiment of the invention the grammar defining the layout of the frames the encoding decoding vocabulary and the listing of commonly supported payload encoding schemes may be collective referred to as a state. In one embodiment of the invention a state is associated with each virtual channel or group of channels .

Examples 5A 5H below further explain the method shown in in accordance with one embodiment of the invention. Those skilled in the art will appreciate that the following examples are provided for exemplary purposes only and accordingly should not be construed as limiting the scope of the invention in any way.

Initially the client opens a TCP connection with the server and then sends a 5 byte protocol signature to the server. The client subsequently sends the framing version and the connection management service version to the client.

Referring to Example 5A the client is using framing version 1.0 and connection management service version 1.0. Note that the framing version and the connection management service version are represented in an indefinite length encoding of a non negative number.

The server receives the framing version and the connection management service version and in this case accepts the framing version and the connection management service version of the client. The acceptance is conveyed to the client by the following data.

Referring to Example 5B the server returns the server s versions framing version 1.0 and connection management service version 1.0. In addition the server returns an acceptance denoted as 00. 

The client subsequently calls the initiateSession operation on the server. The following frame includes the aforementioned call.

Referring to Example 5C the highlighted portion of the frame corresponds to the channel id header and payload length. The remaining portion of the frame corresponds to the encoded payload which includes the call to the initiateSession operation. With respect to the highlighted portion the channel id is 0 the message id is 0 denoting that the header is a message header the content id is 0 denoting XML encoding of the payload the number of parameters is 0 i.e. there are no parameters in the header and the payload length is 202.

The server then sends a response to the client to indicate whether the server can open a new session on the TCP connection. The following frame includes the response.

Referring to Example 5D the highlighted portion of the frame specifically a portion of the payload of the frame indicates that a new session has been opened by the client on the TCP connection.

The client subsequently calls the openChannel operation and sends a listing of payload encoding schemes to the server. The following frame includes the listing of payload encoding schemes.

Referring to Example 5E the highlighted portions of the frame specifically a portion of the payload of the frame indicate that i the client supports the Fast Infoset payload encoding scheme and ii the name of the Target Web Service is ns3 AddNumbersService.

If the server accepts the opening of a new virtual channel the server then responds with a listing of commonly supported payload encoding schemes. The following frame includes the listing.

Referring to Example 5F the highlighted portions of the frame specifically a portion of the payload of the frame indicate that i the client support the Fast Infoset payload encoding scheme and ii the channel id for the virtual channel is 1.

At this stage the client can now transmit frames over the virtual channel as opposed to the service channel . Example 5G shows a frame sent over the virtual channel.

Referring to Example 5G the highlighted portion of the frame corresponds to the channel id header and payload length. The remaining portion of the frame corresponds to the encoded payload. With respect to the highlighted portion the channel id is 1 the message id is 0 denoting that the header is a message header the content id is 4 denoting Fast Infoset encoding of the payload the number of parameters is 0 i.e. there are no parameters in header and the payload length is 128. In this example the payload includes a call to a web service hosted by the server.

Referring to Example 5H the highlighted portion of the frame corresponds to the channel id header and payload length. The remaining portion of the frame corresponds to the encoded payload. With respect to the highlighted portion the channel id is 1 the message id is 0 denoting that the header is a message header the content id is 4 denoting Fast Infoset encoding of the payload the number of parameters is 0 i.e. there are no parameters in header and the payload length is 127. In this example the payload includes the response to the call made in Example 5G.

Those skilled in the art will appreciate that while the framing and connection management service as described above have been collectively referred to as an application layer protocol the framing and connection management service may be operating in another layer in the computer. For example the framing and connection management service may be operating in the transport layer.

Embodiments of the invention enable the efficient transfer of data over a network. For example embodiments of the invention enable a 512 byte payload to be sent in a frame where the frame includes a total metadata size of only 32 bits i.e. 4 bytes . For example assuming a channel id 0 message id 0 denoting a message header a content id 0 denoting XML encoding a number of parameters 0 i.e. no parameters and a payload length 512 bytes the following is the corresponding frame 

In addition embodiments of the invention enable a single TCP connection to support multiple virtual channels where each of the channels is associated with its own state. Further the state may be modified over time and is persistent for the life of the virtual channel. In addition the state includes information to enable more efficient encoding and or decoding of the payloads in the frames.

Embodiments of the invention may be implemented on virtually any type of computer regardless of the platform being used. For example as shown in a computer system includes a processor associated memory a storage device and numerous other elements and functionalities typical of today s computers not shown . The computer may also include input means such as a keyboard and a mouse and output means such as a monitor . The computer system may be connected to a network e.g. a local area network LAN a wide area network WAN such as the Internet or any other similar type of network via a network interface connection not shown . Those skilled in the art will appreciate that these input and output means may take other forms.

Further those skilled in the art will appreciate that one or more elements of the aforementioned computer system may be located at a remote location and connected to the other elements over a network. Further embodiments of the invention may be implemented on a distributed system having a plurality of nodes where each portion of the invention e.g. application layer transport layer network layer etc may be located on a different node within the distributed system. In one embodiment of the invention the node corresponds to a computer system. Alternatively the node may correspond to a processor with associated physical memory. The node may alternatively correspond to a processor with shared memory and or resources. Further software instructions to perform embodiments of the invention may be stored on a computer readable medium such as a compact disc CD a diskette a tape a file or any other computer readable storage device.

While the invention has been described with respect to a limited number of embodiments those skilled in the art having benefit of this disclosure will appreciate that other embodiments can be devised which do not depart from the scope of the invention as disclosed herein. Accordingly the scope of the invention should be limited only by the attached claims.

