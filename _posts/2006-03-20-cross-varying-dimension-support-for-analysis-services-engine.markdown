---

title: Cross varying dimension support for analysis services engine
abstract: A data processing and analysis system is provided. The system includes an analysis engine that queries one or more components of data. A rules component specifies a relationship between at least one dimension of the data with respect to at least one other dimension of the data in order to facilitate an analysis of the data. In one example, the analysis engine is provided as an online analytical processing component.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07970735&OS=07970735&RS=07970735
owner: Microsoft Corporation
number: 07970735
owner_city: Redmond
owner_country: US
publication_date: 20060320
---
On Line Analytical Processing or OLAP is a term that is generally applied to applications that perform multidimensional analysis which facilitates data or information to be viewed and manipulated in a more intuitive manner. For instance in a business application OLAP users can observe a set of corporate data in many different forms without expending great software design resources. This behavior is facilitated via OLAP files or cubes that model data in multiple dimensions. A dimension is the classification of some activity in an organization or other structure with which one can measure a parameter such as a goal or business success. For example users can track sales data against product or customer data over a given period of time.

Generally there are two types of dimensions that applications can employ regular dimensions and measures dimensions. Regular dimensions refer to the items of data that users desire to measure for example if an application was designed to control sales one could use Customers with such example questions as which customers are the best buyers where are they located what do they buy etc. and Products regarding customers what are the customers buying which products are selling the best and so forth. Another dimension includes time such as where do these products stand now with respect to last year or last month In another application account receivables could employ dimensions such as time to track the due date of receivables where in other accounting areas dimensions such as charts of accounts cost center issues and so forth may also be considered.

Measures dimensions are the numbers that appear in the analysis depending on the elements chosen from the regular dimensions. For example in a sales cube one may want to track revenue cost units sold discounts and so forth. When such data has been collected the data may be assigned to a highly sophisticated structure referred to as a multidimensional cube where the cube can reside in a specialized database or as a standalone file. The cube allows users to observe data in a plurality of different forms. Thus applications can cross all the respective dimensions of the cube to obtain new information which hopefully should answer questions that users may be searching for.

In general there are two basic operations that can be performed with an OLAP cube which includes Slicing and Dicing. Users can change the dimensions they are looking at to have another view of data. For example Sales by product can be changed easily to Sales by salesman. Slicing is to change the value of a dimension for another value for example change from sales of January to sales of February. Dicing is similar to throwing a dice or die and looking for a new face of the cube. Drilling is another term where data items can be drilled down to get more information. For instance if an application were to look at geographical data users can drill down from a region to a country and then to a city and then to a customer to observe information at greater detail.

Generally in OLAP modeling the extent of what is referred to as cube space is entirely and uniquely determined by how dimensions are defined. This may have several negative consequences including 

1. Members from different dimensions are completely independent not allowing the cube author to specify any kind of business rule correlations that span physical dimension boundaries.

2. It is possible that non null values get assigned to member combinations from different dimensions that logically cannot coexist and cannot have meaning for the business scenario being modeled.

3. The number of cells in the cube space is artificially increased leading to performance degradation for queries.

One possible way to offset the above drawbacks with an OLAP product or tool is to forcefully merge such cross varying correlated dimensions into a single dimension which however introduces new problems. These problems include losing the strong cohesion that business or other type users have associated with attributes in a single dimension and altering the navigation behavior through side effects of overwrite semantics between attributes that conceptually used to belong to different dimensions.

The following presents a simplified summary in order to provide a basic understanding of some aspects described herein. This summary is not an extensive overview nor is intended to identify key critical elements or to delineate the scope of the various aspects described herein. Its sole purpose is to present some concepts in a simplified form as a prelude to the more detailed description that is presented later.

An analysis engine is provided to facilitate data analysis and data processing. A rules component is employed with the analysis engine to enable specifications of data dimensions that define one or more relationships between one or more data dimensions where such dimensions can be associated with a data cube or cubes for example. By specifying such relationships data can be viewed and processed in a meaningful rich environment that dynamically provides and processes data in its correct context to the user s application while mitigating the need to merge data in an unnatural manner such as forcing the data into a single dimension.

In one specific example the analysis engine enables developers to build a dimension A and define that it is varying based on another dimension B for example. The system can thus automatically handle multiple versions of dimension A based on dimension members of Dimension B. In this manner users can now query data for a specific version of Dimension A based on dimension B members requested in a query. They can also request for a same Dimension B member data value for multiple different versions of Dimension A. As can be appreciated dimension relationships can be specified between one dimension to a plurality of dimensions or specify relationships between a dimension subset with respect to at least one other dimension subset.

To the accomplishment of the foregoing and related ends certain illustrative aspects are described herein in connection with the following description and the annexed drawings. These aspects are indicative of various ways which can be practiced all of which are intended to be covered herein. Other advantages and novel features may become apparent from the following detailed description when considered in conjunction with the drawings.

A data processing and analysis system is provided. The system includes an analysis engine that queries one or more components of data. A rules component specifies a relationship between at least one dimension of the data with respect to at least one other dimension of the data in order to facilitate an analysis of the data. In one example the analysis engine is provided as an online analytical processing component where a graphical user interface can specify the relationship and be employed to view the data. The data can be associated with one or more cubes of data which are processed by the engine.

As used in this application the terms component engine model and the like are intended to refer to a computer related entity either hardware or computer executable components stored on memory. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a server and the server can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers. Also these components can execute from various computer readable media having various data structures stored thereon. The components may communicate via local and or remote processes such as in accordance with a signal having one or more data packets e.g. data from one component interacting with another component in a local system distributed system and or across a network such as the Internet with other systems via the signal .

Referring initially to a data processing and analysis system is illustrated for dynamically processing and viewing data in desired data contexts which are relevant to a given user. The system includes an analysis engine can also be referred to as an online analysis or analytical processing engine having a rules component for specifying one or more data dimension relationships at . Such dimensions are generally associated with one or more data cubes which are stored on local or remote databases not shown . A graphical user interface is provided to enable users to submit queries to the analysis engine and to allow rules to be specified for the rules component . In general rules can be applied between dimensions between one dimension and a subset of dimensions and or rules applied between one dimension subset and one or more other dimension subsets at . It is also noted that the analysis engine could be provided as part of a tool such as an online analytical processing OLAP tool however other type applications are possible such as data modeling applications for example.

In one specific example of how the rules operates on the dimensions the analysis engine enables developers to build a dimension A and define that it is varying based on another dimension B for example. The system can thus automatically process multiple versions of dimension A based on dimension members of Dimension B. In this manner users can query data via the user interface for a specific version of Dimension A based on dimension B members requested in a query. They can also request for a same Dimension B member data value for multiple different versions of Dimension A. As can be appreciated dimension relationships can be specified at between one dimension to a plurality of dimensions or specify relationships between a dimension subset with respect to at least one other dimension subset.

Various applications can be supported by the system ranging from data modeling on one hand to more routine applications dealing with business and finance for example. In one case the system allows a user to define which member of the dimension are valid for a specific entity or even which combination of tuples dimension member for several distinct dimension are valid. For instance a specific Entity X may only deal with Product A or Product B while Entity Y may only deal with Product B and Product C. Accordingly each Entity owner should be able to set rules via the rules component and user interface that Product C is not relevant for Entity X and Product A is not relevant for Entity Y. For this example with reporting tools associated with the user interface a Product C will not appear in a product list when the Entity is set to Entity X.

In a business example data and dimensions are often not symmetrical where they change over time where time is a dimension associated with the data. For instance a product categorization changes over time or a company organization changes over time. Many organizations re organize several times per year. In a company the chart of accounts often varies by divisions and so forth. A plurality of dimension changes can be similarly specified based on values in other dimensions. By specifying dimension relationships in this manner the analysis engine can efficiently process a plurality of applications. Cross varying dimensions help support reorganizations where reorganization is a component of a budget in an enterprise. Thus during periods of reorganization data relationships change and old models no longer reflect current data structures and organizations.

With respect to reorganization the analysis engine supports various data processing and viewing including moving an entity under another parent as of a specified day or time splitting entity cost Centers Headcount Line items merging entities ceasing entity activities such as selling the entity starting new business division acquiring a new entity changing percentage of ownership and changing owner. As can be appreciated a plurality of other aspects can affect a business and require change among data dimension relationships at .

In addition to various hardware and or software components provided with the system various interfaces can be provided to manipulate and query data. This can include a Graphical User Interface GUI to interact with the model or other components of the engine such as any type of application that sends retrieves processes and or manipulates data receives displays formats and or communicates data and or facilitates operation of the application. For example such interfaces can also be associated with an engine server client editor tool or web browser although other type applications can be utilized.

The user interface can include a display not shown having one or more display objects not shown for manipulating and viewing data including such aspects as configurable icons buttons sliders input boxes selection options menus tabs and so forth having multiple configurable dimensions shapes colors text data and sounds to facilitate operations with the analysis engine . In addition the interface can also include a plurality of other inputs or controls for adjusting and configuring one or more aspects. This can include receiving user commands from a mouse keyboard speech input web site remote web service and or other device such as a camera or video input to affect or modify operations of the interface .

Proceeding to one or more dimension rules are specified where the rule describes how data is to be processed and analyzed with respect to a particular users perspective and or with respect to the impact on one dimension of data as another dimension is varied or changed. As noted above dimension relationships can be specified between one dimension to one or more other dimensions or relationships can be specified or defined between a dimension subset with respect to at least one other dimension subset or group of dimensions. At the rules specified at are applied within the scope of an analytical data engine. Such engine could be a data modeling component or applied as an online analytical processing tool. At data is processed or displayed in view of the specified rules. For example if time is specified as a varying dimension data can be displayed before and after a respective date or time has occurred as will be illustrated in the example below with respect to .

Proceeding to in one case the specified rules may be employed to hide or mask data that is not relevant to a given user s data perspective. For instance in an organization one user may only be concerned with elements A B and C of the organization and thus elements D and E would be masked or hidden from such view. At the specified dimension may be employed to display data in its proper context to the user. Using the above example the user associated with elements A B and C could be given data modeling and data output that is related or defined to those particular elements thus the user would see data and its associated context with respect to the user associated with A B and C. In another example elements A and B may be specified with respect to time where elements C and D become relevant at some later time or with respect to another qualifying dimension.

Referring to an example user interface exemplifies displayed data with respect to a specified dimension relationship. In this example a Tablet PC division is reorganized below a Client division as of AprilFY03 as illustrated at . As a result the user expects to see the Tablet PC under its previous classification e.g. the Information Worker division until then at and under the Client division thereafter. As can be appreciated a plurality of such data displays can be provided based on different and varying dimensions.

Turning to an example engine architecture is illustrated for processing and viewing data. In one aspect the architecture allows a new cross varying dimensions feature that refines the concept of a cube dimension moving various semantic characteristics implied by dimensional structure into separate model constructs with each carrying the appropriate level of abstraction and flexibility for the end user. More specifically a dimension auto exist feature can be provided by an Sequential Query Language SQL tool that is generalized from attributes in a single dimension to attributes in several associated cross varying dimensions one of them being a Time dimension for example with corresponding additions and changes. At cube metadata can be enhanced with new structures e.g. Dimension Correlations each of which specifies a collection of two or more dimensions to be grouped together for purposes of determining member existence together with a data binding identifying the source association intersection many to many table which describes which members exist together. For a given cube each dimension may generally participate in one Dimension Correlation.

At reference dimensions can be processed as belonging to the same correlations as the base dimensions with an implicit association table given by a many to one relationship between the reference dimension and the base dimension. This approach may also be applied with degenerate dimensions which are described below. At semantic considerations may include auto exists semantics e.g. applied to tuple sets for obtaining cell values with a Where clause and in the Exists function and Existing operator which is extended to take into account cross varying dimension restrictions filtering by the associated correlation tables in addition to intra dimension auto exists and to also be applied between axes of a query rows columns and so forth . As a consequence this mitigates the possibility that users mistakenly associate calculation values or attempt to write back to invalid member combinations in cross varying dimensions.

At degenerate dimensions are considered where previous implementations can be reused and extended to become part of the cross varying dimensions implementation described herein. At Storage Engine query APIs and join algorithms can be extended to allow for efficient querying of several dimensions at once resolving correlation restrictions in a single logical step to facilitate appropriate performance. This can be performed by querying the entities correlation tables and dimensions with highest filter selectivity to be determined by using statistics and a cost based heuristic using the results to query the remaining entities other dimensions and correlation tables and then perform a hash join to produce the final result. An application programming interface API can be provided to be used by a Query Processor for auto exists operations on tuple sets as well as for obtaining cell iterators while evaluating cube calculations.

At a new cell property can be added in order to allow client applications to be aware of which of the cells being queried no longer exist i.e. are restricted eliminated due to cross varying dimensions restrictions. This cell property can be used by client applications for user interface UI presentation layer purposes custom formatting and display and write back decisions.

Turning to an example data mining modeling and or processing system is depicted that can be applied in conjunction with the analytical components described above. System provides a platform or framework to support among other aspects plug in of or more mining or analytical algorithms. System includes an analysis component that provides services or mechanisms for analyzing data. Analysis component can be included as part of a larger system such as a server for example a data mining server analysis server a database server or database management system comprising hardware software or a combination thereof that manages and facilitates interaction with data stored on one or more data stores e.g. relational multidimensional object oriented hybrid . . . .

Analysis component includes a data mining engine or analysis engine . Data mining engine includes components mechanisms systems and or services to enable mining or processing of data. For example mining engine can employ a data mining algorithm to discover rules and or patterns with respect to a first set of data. Mining engine can subsequently generate a data mining model DMM that can be utilized to analyze a second set of data. For instance predictions can be made or data classified inter alia. Data mining engine may include or otherwise be communicatively coupled to one or more native or built in mining algorithms such as those implementing decision trees na ve Bayesian clustering association rules neural network time series or support vector machines. However such algorithms may be suitable for general employment rather than specific to a particular problem. Alternatively the built in algorithms may not employ a particular data mining technique or analysis algorithm. Consequently it may be desirous to enable the data mining engine to employ other algorithms perhaps developed by research or industry e.g. niche vendors . Accordingly analysis component can also include a receiver component .

Receiver component receives retrieves or otherwise obtains a non native algorithm component . Non native algorithm component corresponds to an electronic version or representation of a data mining algorithm that was not initially built in or provided by a system. Hence the algorithm component can be developed for example by researchers academics or other third parties like niche vendors for particular problem spaces. Such an algorithm can be introduced or plugged to the system or server and analysis component from a client via receiver component . Furthermore receiver component can facilitate saving and registering the algorithm such that it can be employed by data mining engine to generate a data mining model among other things. The algorithm can be saved to data store and registered in a registry also stored on data store .

When plugged in the non native algorithm component can be employed just as if it were a native or built in algorithm. Accordingly the algorithm component can employ one or more server or database management services or mechanisms which frees algorithm developers from having to implement them. For example for training of a data mining model states numbers or other data can be formatted in a manner to facilitate comprehension or understanding by the algorithm for instance by tokenizing the data. In addition support can be provided for querying or utilizing a mining model for instance by a parser. Further infrastructure is supplied for storing and managing access to a data mining model or object. In particular support can be provided to limit or secure access supply concurrent access to a model by a plurality of users manage transactions and back up and restore among other things. Moreover the tight integration of non native algorithm component s enables them to take advantage of future additions to a system such as server or management services associated therewith.

The system can be provided as an extensible data mining or analysis system to support additional view components not shown . System in addition to the data mining engine can include a client tool component . Data mining engine can employ the data mining algorithm that analyzes stored data and produces a data mining model identifying rules and or patterns in data. The data mining engine can subsequently utilize this model to predict and or classify among other things newly received data. Often users desire to view the generated model. The learned model content can be displayed by viewers or graphical user interfaces GUIs that are customized for a mining algorithm employed to generate a data mining model.

Client tool component can be a mechanism to facilitate interaction with data mining data and or information. For example client tool component could be a design development and or workbench environment or system. Client tool component can include one or more native viewer components not shown for example provided by the client tool vendor. Such viewers can be employed to view mining model content generated by particular data mining algorithms. Client tool component can also include a viewer receiver component that can receive retrieve or otherwise obtain one or more non native viewer components for instance provided by clients users or third party vendors. The receiver component can then save the non native viewer component to facilitate future employment. Furthermore the receiver component may register the viewer component with the client tool component and or the data mining engine to identify its presence and availability. For example the receiver component may register the name and location of the viewer component assembly as well as the compatible data mining algorithms and a display name.

The data mining engine can interact with client tool component such that a non native viewer component or an instance thereof can be invoked. For instance the data mining engine can transmit information to the client tool component pertaining to the algorithm utilized to generate a model sought to be viewed or displayed. Where a data mining algorithm has more than one viewer capable of displaying a model the names of the available viewer components can be presented to a user for instance in a drop down list for selection for example in a data mining wizard provided by the client tool component . It should be appreciated that the non native viewer component that is plugged in to the client tool component can display models associated with built in or non native plug in data mining algorithms. For example a custom viewer could be designed and plugged in to the client tool component to display a model generated by a built in or native data mining algorithm in a different or more enhanced manner. Additionally or alternatively a non native viewer component could be added or plugged in to support display of a model generated by a non native data mining algorithm that was added or plugged in to the data mining engine or newly associated therewith.

Data mining engine may include one or more engine interface components not shown that can be utilized or consumed by viewer components. Similarly viewer components may include one or more viewer interface components that may be utilized or consumed by data mining engine to support interaction and ultimately display via viewer component. By way of example and not limitation the viewer component may be required to include or implement an interface to a pluggable viewer component. Other interfaces could be for Display Name for displaying the name of the viewer Service Provider and Connection String to facilitate connection to the mining engine view a specified string Model Name to return the name models supported as well as viewer data. A load data interface method can be called when the viewer component is asked to render a model. In such an interface a method is generally provided that connects to the server loads the content of the model and renders the content. Various other interfaces may be required or optional.

In order to provide a context for the various aspects of the disclosed subject matter as well as the following discussion are intended to provide a brief general description of a suitable environment in which the various aspects of the disclosed subject matter may be implemented. While the subject matter has been described above in the general context of computer executable instructions of a computer program that runs on a computer and or computers those skilled in the art will recognize that the invention also may be implemented in combination with other program modules. Generally program modules include routines programs components data structures etc. that performs particular tasks and or implements particular abstract data types. Moreover those skilled in the art will appreciate that the inventive methods may be practiced with other computer system configurations including single processor or multiprocessor computer systems mini computing devices mainframe computers as well as personal computers hand held computing devices e.g. personal digital assistant PDA phone watch . . . microprocessor based or programmable consumer or industrial electronics and the like. The illustrated aspects may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. However some if not all aspects of the invention can be practiced on stand alone computers. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

With reference to an exemplary environment for implementing various aspects described herein includes a computer . The computer includes a processing unit a system memory and a system bus . The system bus couple system components including but not limited to the system memory to the processing unit . The processing unit can be any of various available processors. Dual microprocessors and other multiprocessor architectures also can be employed as the processing unit .

The system bus can be any of several types of bus structure s including the memory bus or memory controller a peripheral bus or external bus and or a local bus using any variety of available bus architectures including but not limited to 11 bit bus Industrial Standard Architecture ISA Micro Channel Architecture MSA Extended ISA EISA Intelligent Drive Electronics IDE VESA Local Bus VLB Peripheral Component Interconnect PCI Universal Serial Bus USB Advanced Graphics Port AGP Personal Computer Memory Card International Association bus PCMCIA and Small Computer Systems Interface SCSI .

The system memory includes volatile memory and nonvolatile memory . The basic input output system BIOS containing the basic routines to transfer information between elements within the computer such as during start up is stored in nonvolatile memory . By way of illustration and not limitation nonvolatile memory can include read only memory ROM programmable ROM PROM electrically programmable ROM EPROM electrically erasable ROM EEPROM or flash memory. Volatile memory includes random access memory RAM which acts as external cache memory. By way of illustration and not limitation RAM is available in many forms such as synchronous RAM SRAM dynamic RAM DRAM synchronous DRAM SDRAM double data rate SDRAM DDR SDRAM enhanced SDRAM ESDRAM Synchlink DRAM SLDRAM and direct Rambus RAM DRRAM .

Computer also includes removable non removable volatile non volatile computer storage media. illustrates for example a disk storage . Disk storage includes but is not limited to devices like a magnetic disk drive floppy disk drive tape drive Jaz drive Zip drive LS 100 drive flash memory card or memory stick. In addition disk storage can include storage media separately or in combination with other storage media including but not limited to an optical disk drive such as a compact disk ROM device CD ROM CD recordable drive CD R Drive CD rewritable drive CD RW Drive or a digital versatile disk ROM drive DVD ROM . To facilitate connection of the disk storage devices to the system bus a removable or non removable interface is typically used such as interface .

It is to be appreciated that describes software that acts as an intermediary between users and the basic computer resources described in suitable operating environment . Such software includes an operating system . Operating system which can be stored on disk storage acts to control and allocate resources of the computer system . System applications take advantage of the management of resources by operating system through program modules and program data stored either in system memory or on disk storage . It is to be appreciated that various components described herein can be implemented with various operating systems or combinations of operating systems.

A user enters commands or information into the computer through input device s . Input devices include but are not limited to a pointing device such as a mouse trackball stylus touch pad keyboard microphone joystick game pad satellite dish scanner TV tuner card digital camera digital video camera web camera and the like. These and other input devices connect to the processing unit through the system bus via interface port s . Interface port s include for example a serial port a parallel port a game port and a universal serial bus USB . Output device s use some of the same type of ports as input device s . Thus for example a USB port may be used to provide input to computer and to output information from computer to an output device . Output adapter is provided to illustrate that there are some output devices like monitors speakers and printers among other output devices that require special adapters. The output adapters include by way of illustration and not limitation video and sound cards that provide a means of connection between the output device and the system bus . It should be noted that other devices and or systems of devices provide both input and output capabilities such as remote computer s .

Computer can operate in a networked environment using logical connections to one or more remote computers such as remote computer s . The remote computer s can be a personal computer a server a router a network PC a workstation a microprocessor based appliance a peer device or other common network node and the like and typically includes many or all of the elements described relative to computer . For purposes of brevity only a memory storage device is illustrated with remote computer s . Remote computer s is logically connected to computer through a network interface and then physically connected via communication connection . Network interface encompasses communication networks such as local area networks LAN and wide area networks WAN . LAN technologies include Fiber Distributed Data Interface FDDI Copper Distributed Data Interface CDDI Ethernet IEEE 802.3 Token Ring IEEE 802.5 and the like. WAN technologies include but are not limited to point to point links circuit switching networks like Integrated Services Digital Networks ISDN and variations thereon packet switching networks and Digital Subscriber Lines DSL .

Communication connection s refers to the hardware software employed to connect the network interface to the bus . While communication connection is shown for illustrative clarity inside computer it can also be external to computer . The hardware software necessary for connection to the network interface includes for exemplary purposes only internal and external technologies such as modems including regular telephone grade modems cable modems and DSL modems ISDN adapters and Ethernet cards.

What has been described above includes various exemplary aspects. It is of course not possible to describe every conceivable combination of components or methodologies for purposes of describing these aspects but one of ordinary skill in the art may recognize that many further combinations and permutations are possible. Accordingly the aspects described herein are intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims. Furthermore to the extent that the term includes is used in either the detailed description or the claims such term is intended to be inclusive in a manner similar to the term comprising as comprising is interpreted when employed as a transitional word in a claim.

