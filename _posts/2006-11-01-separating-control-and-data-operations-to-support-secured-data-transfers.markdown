---

title: Separating control and data operations to support secured data transfers
abstract: For a data transfer, security is negotiated via a control channel operating in accordance with a first protocol. The data is transmitted responsive to the security negotiation on a data channel operating in accordance with a second protocol. For example, a described implementation involves using a security control protocol and a separate secure data transfer protocol that operate cooperatively, but independently, to provide flexible application layer security with highly efficient data transfers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08687804&OS=08687804&RS=08687804
owner: Microsoft Corporation
number: 08687804
owner_city: Redmond
owner_country: US
publication_date: 20061101
---
The past decade has seen massive increases in the number of interconnected systems on the internet. Beneficiaries of this development include the scientific research community and businesses needing to model and analyze complex processes. Both types of users benefit from combining an application and relatively large amounts of data at one computational site. The data is usually stored in data repositories such as file systems databases and so forth. These data repositories that hold an application s data are often located on different physical device s than the one hosting the application computation.

The computational device and the data repository devices may span a number of different locations with connectivity provided by standard networking technology. To perform the desired computation at a given site with a selected application the targeted data is transferred from the data repositories storing the application s data to the computational site. Similarly the results of the application s computation may be written back into one or more remote data repositories to ensure that the results are properly maintained and or made available to other applications.

For a data transfer security is negotiated via a control channel operating in accordance with a first protocol. The data is transmitted responsive to the security negotiation on a data channel operating in accordance with a second protocol.

This Summary is provided to introduce a selection of concepts in a simplified form that are flier described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter. Moreover other method system scheme apparatus device media procedure API arrangement etc. implementations are described herein.

As described above data that is to be the target of computing tasks may be located at remote data repositories. Computing applications and targeted data may be brought together at a single site by transferring the data from the data repositories to for example a site having the computing application. Users often want these data transfers to be secured in some manner and to some extent. This may include by way of example but not limitation authentication of the data requestor to ensure that it is authorized access authentication of the data source to ensure it has the correct data integrity and confidentiality protection while the data transits over the network and so forth.

Similarly an application s computation may result in one or more data sets that may need to be written to remote data repositories. The transmission of the results may be done due to local storage limitations the need to ensure data is properly maintained the need to make such data available to other applications and so forth. Such transfers of results data to repositories can operate in the same manner as the transfer of the application s input data from the repositories. For example data security may be negotiated and then applied to the results data flowing in the reverse direction from the application to the data repository or repository. The input data source repositories may be the same as or may be different from the results data destination repositories.

Current approaches provide an inadequate solution to this problem. On the one hand there are channel level security protocols such as IPsec RFC 4301 . This approach provides efficient point to point confidentiality for all interactions. This efficiency is achieved by bulk encrypting all network traffic in the same way based on a negotiated security association. The IPSec security negotiation mechanism has limits in that each negotiation is limited to establishing security for a single point to point IP protocol connection it considers only device to device interaction and it cannot provide application specific authentication or data security mechanisms.

On the other hand existing application level security protocols can provide per application participant authentication and data security control. They are not however as efficient as desired for massive data transfers. First there is a common design pattern of developing a security negotiation protocol for a specific transport protocol operating between two entities. For example TLS SSL RFC 2246 may be used on top of HTTP or LDAP. or DCE Remote Procedure Call The Open Group Document C706 may be used with RPC. In such systems security is first negotiated between applications running on two devices and a secure data channel is established using the same base protocol HTTP RPC etc. . If one wishes to alter the security of the data channel it is typically necessary to stop the data transfer negotiate new security settings and then re start the data transfer.

The above approach limits potential efficiency of the data transfer in several ways. First modifying security settings is typically a synchronous operation requiring a temporary halt in data transfers. Second the control and data transfer protocols are statically determined and cannot be dynamically selected based on the data being transferred. This can force use of a message oriented protocol for both control and data transfers even when a stream oriented data protocol would be more efficient. Third the security negotiation mechanisms are designed to establish security between two entities and they are not amenable to dynamically selecting one or more data repository servers at run time.

In short conventional approaches have a number of deficiencies. Applications are therefore forced to use solutions that are sub optimal in one or more respects Consequently weaker than desired data confidentiality may be used in order to achieve a required level of efficiency. Channel security may be used with limited authentication of the parties involved. Or an existing application level protocol may be employed with less efficiency than desired.

In contrast certain implementations as described herein are capable of creating a set of linked application level protocols that work together to provide i a flexible security control channel and ii a separate high efficiency secure data transport channel that can operate independently and in parallel. For example a described implementation involves using a security control protocol and a separate secure data transfer protocol that operate cooperatively but independently to provide flexible application layer security with highly efficient data transfers. Mechanisms are described that bind the data security that is negotiated on a control channel with the data protocol used on the data channel.

In a described implementation requester receiver makes a request for data and receives the requested data. Herein below requester receiver is referred to as requester . Responder transmitter receives a request for data and responds by transmitting the requested data. Herein below responder transmitter is referred to as responder .

A data repository may be formed from one or more responders . In other words each responder either alone or in conjunction with other responder s may represent a data repository. Each responder includes data . Data at each responder may be a complete set of data distinct and unrelated units of data individual but related units of partial data and so forth. There may also be a responder that does not directly store any data but it instead coordinates data transmissions from other responders that do store data .

As illustrated environment includes n responders with n representing some positive integer. Specifically responder responder responder . . . responder are shown as being part of environment . Data transfer involves three responders responder responder and responder . However a data transfer may involve any number of responders from one to n .

Data transfer is effectuated across network . For example data is transmitted from responders to requester across network . Network may be any single network or combination of networks of any physical design protocol operation and so forth. Examples for network include but are not limited to the internet a local area network LAN a wide area network WAN a public or private network a telephone network a cellular network a wireless network a wired network some combination thereof and so forth.

Requester includes a requesting application req . Requesting application req makes a request for data from at least one responder . Requesting application req also receives data that is transmitted from the responder s . Requesting application req enables application level security to be created and or enforced for data transfer . Although not explicitly illustrated in responders may also include an application. Such an application which is termed a responding application for responders is described herein below with particular reference to .

Requesting application req may also wish to write one or more data sets resulting from its computation. These data results may be written to one or more data repositories. Such reverse data transfers can occur in a manner similar to that discussed above. In this case requesting application req requests a data transfer to one or more responders . Requesting application req enables application level security to be created and or enforced for the reverse data transfer as well. However the flow of data is reversed from that shown in the large arrow . In other words as indicated by the smaller arrows data transfers can originate at requester and be received at responder s .

Control channel and data channel are established between requesting application req and responding application resp over for example network of . Generally control channel is a two way communication and data channel is primarily a one way communication during any given transfer event. However there is typically some level of two way communication for data channel in order to implement a data transfer. Moreover as described above results data may be transmitted via data channel from requesting application req to responding application resp .

In a described implementation control channel operates in accordance with a first protocol and data channel operates in accordance with a second protocol . First protocol differs from second protocol . When multiple data channels are being used to transfer data each data channel may be operating under the same second protocol or under different second protocols .

A security negotiation is effected between requesting application req and responding application resp via control channel with first protocol . Security negotiation may include for example the negotiation of confidentiality information and or integrity information for the data transfer. Security negotiation may also involve stipulation of which data channel protocol to use for data channel .

To facilitate the data transfer a linkage or binding is created between control channel and data channel . Binding enables data channel to be used for a data transmission responsive to data security information that is negotiated as a result of security negotiation . Thus data is transmitted from responding application resp to requesting application req via data channel in accordance with second protocol . In other words the negotiated security creates a binding between security negotiation and data transmission such that security information negotiated via control channel can be applied to data that is transmitted on data channel .

At block data security is negotiated via at least one control channel that is operating in accordance with a first protocol. For example a security negotiation may be effected via a control channel that is operating in accordance with a first protocol . The security may be negotiated between for instance a requesting application req and a responding application resp .

At block data is transmitted via one or more data channels that are operating in accordance with a second protocol responsive to the negotiated data security. For example a data transmission may be effected via a data channel that is operating in accordance with a second protocol responsive to the data security established by security negotiation . Data may be transmitted for instance from responding application resp to requesting application req over network based on binding .

The data security as negotiated via the control channel can be implemented using mechanisms provided by the data channel security protocol by application level mechanisms using the negotiated security information some combination thereof and so forth. The negotiated security can include confidentiality protection integrity protection a combination thereof and so forth. For example integrity protection may be provided by message digests or digital signatures and confidentiality protection may be provided by encryption. An example message based approach for security negotiation is described below with particular reference to .

In a described implementation data information and or security information may be communicated e.g. by way of notifications negotiations etc. using one or multiple such messages . The different information that is illustrated in may be realized as blocks fields entries etc. of messages . These message s are communicated via control channel in accordance with first protocol of . Messages may include by way of example but not limitation data information security information and so forth.

Data information is information that facilitates setting up or establishing a data transfer and that does not directly pertain to confidentiality or integrity for the data being transferred. Data information may include by way of example but not limitation data channel protocol data identification and so forth. Data channel protocol stipulates the channel protocol to be used on data channel . This stipulated data channel protocol is represented by second protocol in . Data channel protocol entry may stipulate multiple data channel protocols especially when multiple data channels are being employed. Data identification identifies the data that is the target of a data request from requesting application req .

Using data information the data to be transferred and the data channel protocol to be used may thus be negotiated. Standard terminology for example may be employed here. For instance standard data identification mechanisms e.g. file repository data datafile.dat and standard data protocol naming conventions e.g. http www.w3.org Protocols rfc2616 rfc2616.html may be used.

Security information is information that can be used to provide security for data for example during data transmission . Security information may include by way of example but not limitation confidentiality information integrity information and so forth. Using security information the data confidentiality and integrity preferences for transferring the data may thus be negotiated. Standard terminology for example may be employed here. For instance standard algorithm identifiers for digital signatures digest algorithms and encryption algorithms e.g. http www.w3.org 2000 09 xmldsig rsa sha1 http www.w3.org 2000 09 xmldsig sha1 http www.w3.org 2001 04 xmlenc aes128 cbc etc. may be used.

Confidentiality information is information that facilitates the creation of confidentiality and or the maintenance of confidentiality of data especially during data transmission . Integrity information is information that enables requesting application req to check the integrity of data upon receipt. Security negotiation of may comprise at least in part the exchange of security information between requesting application req and responding application resp .

Confidentiality information may include by way of example but not limitation an encryption algorithm at least one cryptographic key one or more encryption parameters and so forth. Encryption algorithm designates an encryption algorithm that is to be used for data transmission . Cryptographic key s specifies encryption and or decryption keys to be used when encrypting and decrypting data for data transmission . The keys may be for example symmetric keys public keys some combination thereof and so forth.

The negotiated cryptographic key s and encryption algorithm may be used for bulk encrypting the data. Cryptographic key negotiation may use for example any number of standard approaches such as Diffie Helman key negotiation RSA based key transport e.g. http www.w3.org 2001 04 xmlenc rsa oaep mgflp symmetric key based key wrap algorithms e.g. http www.w3.org 2001 04 xmlenc kw aes128 and so forth. Encryption negotiation may use for example standard block ciphers e.g. AES TripleDES etc. stream ciphers e.g. RC4 and so forth. Such negotiations may alternatively reference and or rely on specialized approaches.

Encryption parameter s are additional parameters that may be provided by messages for ensuring the confidentiality of the transferred data. Examples of encryption parameters include by way of example but not limitation chunk sizes and chunk initialization vectors IVs when using a block cipher with periodic re initialization. The IVs may be transmitted via the control channel or in line by pre pending them to the encrypted data chunks transmitted via the data channel s .

Integrity information may include by way of example but not limitation an integrity algorithm one or more integrity parameters and so forth. Integrity algorithm designates an integrity algorithm that is to be used for checking whether data has been successfully transmitted without modification by data transmission . Example integrity algorithms include but are not limited to the SHA 1 or SHA 256 message digest algorithms. These produce a fixed size value that is unique based on a given binary input data. A typical approach is to compute a digest for each data chunk to be transmitted. These values may be transmitted via the control channel. The integrity of the transmitted data may then be checked by computing the digest of the received data chunk and comparing the computed digest value to the transmitted digest value. It may alternatively be appended to the transmitted data and or encrypted to prevent undetected modification of both the data and the digest value. The recipient can decrypt the received data and use the decrypted digest to verify the integrity of the decrypted data.

The transmitted integrity digest information may be protected against modification by using it as input to a digital signature computation. Example digital signature algorithms include by way of example but not limitation RSA SHA1 or HMAC SHA1. The resulting signature and cryptographic keying information for the originator may be transmitted via the control channel or the data channel and independently verified by the recipient. Use of digital signatures in this manner also provides for proof of origin for the transmitted data by allowing one to verify that the creator of the digital signature had access to the transmitted data.

Generally IVs cryptographic keys digest values for chunks and other such security related parameters and keys may be communicated in a number of manners. For example they may be included as part of messages and transmitted via the control channel. They may also be transmitted via the control channel in a separate document or documents. When using a separate document to transmit such security information the separate document may alternatively be transmitted via the data channel s . Furthermore they may be exchanged with reference to a network location e.g. by URL etc. from which the separate document may be retrieved. Using a separate document can reduce the total data size that is transmitted within the control channel messages which can improve efficiency of the overall data transfer process. When security related information is communicated over a data channel they may be communicated using a different data protocol than that used to transfer the application data. For example IV and digest information values may be transmitted within a document e.g. of an XML format using an HTTP protocol while the application data is transmitted over multiple RDMA protocol channels.

Regardless of whether the document s are transmitted via the control channel or the data channel s the document s may also be encrypted and or transmitted with some level of integrity checks. By way of example but not limitation an RSA SHA1 signature may be included over a list of security related parameters or keys e.g. digest values accessible using an HTTP protocol . The signature enables one to check the integrity of the received retrieved list and verify its origin from an entity authorized to provide this data Regardless the different types of security related parameters and keys may be communicated individually or in combination with one another.

The identified requested data the stipulated data transmission protocol the security requirements the specific mechanisms negotiated via the control channel etc. provide sufficient information for the requestor and responder to establish a binding between the control channel negotiation and a specific data transmission. This binding may be combined with the transmission of integrity information via the control channel operating in accordance with the control channel protocol or via a data channel operating in accordance with some data channel protocol. In combination they enable the use of the most efficient approaches available to streaming large quantities of binary data.

If no confidentiality is required then the data may simply be transmitted in the clear. The recipient can check its integrity after receipt if digest information was negotiated and transmitted. The data transfer participants may also rely on integrity protection mechanism s provided by the selected data channel protocol. If confidentiality is required the binary data stream can be efficiently encrypted using for example a stream cipher or block cipher in CBC mode. The originator encrypts the data using negotiated cryptographic key information and encryption parameters e.g. IVs chunk size key schedule etc. and transmits the data. The recipient receives the encrypted data and decrypts it using the same negotiated key and parameter information. The encryption decryption operations may be performed by the application outside of the data protocol. If the stipulated data channel protocol supports encryption then the participants may use the protocol encryption capabilities based on the negotiated encryption parameters.

A described implementation allows applications to make the most appropriate tradeoffs between security requirements and protocol efficiency based on their data requirements. Stronger security mechanisms can be handled at the application layer while allowing use of highly efficient transmission protocols such as RDMA or integrated data protocol security mechanisms can be used to simplify application level processing. Described implementation s enable these decisions to be dynamically negotiated at runtime based on a given application s current requirements.

As illustrated protocol unit includes a first protocol module and a second protocol module . Security unit generally includes a security negotiator and a security implementer . More specifically security negotiator includes an authentication negotiator A an integrity negotiator I and a confidentiality negotiator C . Security implementer includes an integrity implementer I and a confidentiality implementer C .

In a described implementation protocol unit is capable of communicating over control channel and one or more data channels . More specifically first protocol module is capable of communicating via control channel in accordance with first protocol of . First protocol may be for example a message oriented communications protocol . Second protocol module is capable of communicating via data channel in accordance with a second protocol or multiple second protocols . Second protocol may be for example a stream oriented transfer protocol .

In an example implementation a message oriented communications protocol may be a Simple Object Access Protocol SOAP or Remote Procedure Call RPC and a stream oriented transfer protocol may be a Remote Direct Memory Access RDMA protocol e.g. RFC 4297 or File Transfer Protocol FTP for highly efficient data transfers. However many other alternative implementations are possible including those based on industry standard protocols such as Web Services HTTP GridFTP and so forth. Generally it can usually facilitate user interaction management and manipulation of file transfers if first protocol of control channel is human readable such as Extensible Markup Language XML based tools. Likewise it can usually facilitate fast and efficient file transfers if second protocol of data channel operates on binary data.

Security unit is capable of enacting a selected level of data security for data transfers. Security negotiator negotiates security information of between a requesting application req and a responding application resp . More specifically authentication negotiator A provides proof of the identity and associated attributes of the requesting or responding application . Integrity negotiator I negotiates integrity information and confidentiality negotiator C negotiates confidentiality information . Authentication negotiator A integrity negotiator I and confidentiality negotiator C communicate over control channel using first protocol module . Messages e.g. messages of that are sent over control channel may also be encrypted and or integrity protected using different keys and algorithms than those for the data transmissions.

Security implementer implements the data security negotiated by security negotiator for data transmission of data . Hence the negotiated data security is implemented between a requesting application req and a responding application resp over data channel s . More specifically integrity implementer I implements the negotiated integrity information such as integrity algorithm . Confidentiality implementer C implements the negotiated confidentiality information such as encryption algorithm . Integrity implementer I and confidentiality implementer C communicate over data channel s using second protocol module .

When the application that is illustrated in is a responding application resp that is currently transmitting data second protocol module may communicate over one or more than one data channel . In other words each responder may be transmitting data over a single data channel or over multiple data channels . If the targeted data is being transmitted to a single requester then a requesting application req thereof may communicate over each of the data channels . The number of data channels over which second protocol module is currently communicating is analogous when result data is being transmitted from requesting application req .

At block via a control channel that is operating in accordance with a first protocol a connection is established between a requesting device and a responding device. For example via a control channel that is operating in accordance with a first protocol a connection may be established between a requester and a responder . More specifically for an application level data transfer a connection may be established between a requesting application req and a responding application resp .

At block via the control channel an authentication is performed. For example requesting application req and responding application resp may perform a unilateral or a bilateral authentication process with authentication negotiator A using security tokens signed messages and so forth. For instance an authentication negotiator A of requesting application req may authenticate itself to responding application resp to demonstrate that it has access rights to the requested data . Also an authentication negotiator A of responding application resp may respond to an authentication request from requesting application req to prove that the data is the targeted data.

Thus the data requester and or the responder may be authenticated depending on the application requirements. Standard mechanisms may be employed. For example message signing using public key cryptography or proof of knowledge of a shared secret e.g. as adopted by the OASIS SOAP Message Security standard may be used.

At block the data being requested is identified via the control channel. For example requesting application req may send a message having a data identification field to responding application resp . Example message s that are described herein with reference to may be individual messages a single shared message or some shared messages and some individual messages.

At block a data channel protocol is stipulated via the control channel. For example requesting application req may send a message having a data channel protocol field to responding application resp . If the data or protocol is unknown to the data repository an error may be generated.

At block via the control channel confidential information for the data transfer is negotiated. For example requesting application req may send a message having a confidentiality information field to responding application resp . Hence an encryption algorithm may be designated cryptographic key s may be specified encryption parameters may be provided etc. with confidentiality negotiator C .

At block via the control channel integrity information for the data transfer is negotiated. For example requesting application req may send a message having an integrity information field to responding application resp . Hence an integrity algorithm may be designated integrity parameters may be provided etc. with integrity negotiator I . A message having a confidentiality information field for block may be the same as or different from a message having an integrity information field for block .

At block via one or more data channels that are operating in accordance with a second protocol the requested data is transferred responsive to the negotiated confidentiality and integrity information. For example via data channel s that are operating in accordance with a second protocol data transmission of the requested data may be performed with confidentiality implementer C and integrity implementer I responsive to confidentiality information and integrity information respectively that were negotiated via control channel . With data transmission initially a responder transmits data and a requester receives data . However data transmission may also entail result data flowing in the reverse direction.

Security negotiation may at least partially overlap data transmission . If security negotiation does overlap the data transmission then the method of flow diagram continues at block . At block the security negotiation is continued on the control channel in parallel with data transfer on the data channel. For example further security negotiation s may be performed via control channel with security negotiator and first protocol module while data is being transmitted on data channel s with security implementer and second protocol module .

A security negotiation may result in a new data channel being established between a requestor and a new or an already active responder . The new data channel may potentially use a different type of data protocol . This new data channel operation need not impact data transfers that are already in progress in response to prior security negotiations.

Thus flow diagram may repeat at least the action s of block and or block while data is being transmitted by the action s of block . An example of such parallel security negotiation and data transmission is described further herein with particular reference to . Generally the actions of flow diagram are continued until a confirmation of a successful data transfer is exchanged or the data transfer is canceled in progress.

In other words an example usage pattern is to first do the control channel security negotiation then transmit the data over the data channel s and finally send a confirmation. However one can use the mechanisms described herein as part of a multi step process in which the initial control channel interaction negotiates security for the first part e.g. chunk of a large transfer and delays security negotiation for other parts. Security negotiations for subsequent parts of the data can then occur in parallel with the transmission of the data on the data channel s . This can increase not only data transfer efficiency but it can also improve security by allowing the use of different cryptographic encryption keys for different parts of the overall data stream being transferred.

In a described implementation the targeted data is separable into chunks. The security for each chunk is negotiated sequentially. Each chunk is transmitted in a stream oriented manner on one of the three data channels or . Data information of may be communicated initially. For example data channel protocol may be stipulated and the targeted data may be identified with data identification prior to any security negotiation or as part of the initial security negotiation. Alternatively all or part of data information may be communicated for each chunk along with the respective security negotiation.

Starting at time with control channel and proceeding from left to right with timing diagram the security for chunk is negotiated. For example security information may be negotiated for chunk of some requested data . This security negotiation may include the negotiation of confidentiality information and or integrity information . Upon completion of the security negotiation for chunk at time the streaming of chunk is started via data channel .

While the streaming of chunk is conducted over data channel the negotiation of the security for chunk is performed on control channel from time to time . Upon completion of the security negotiation for chunk at time the streaming of chunk is started via data channel .

While the streamings of chunks and are conducted over data channels and the negotiation of the security for chunk is performed on control channel from time to time . Upon completion of the security negotiation for chunk at time the streaming of chunk is started via data channel .

While the streamings of chunks and are conducted over data channels and the negotiation of the security for chunk is performed on control channel from time to time . At some time the streaming of chunk on data channel is completed. Consequently upon completion of the security negotiation for chunk at time the streaming of chunk is started via data channel . It should be understood that the completion of the security negotiation for chunk need not be aligned with the completion of the streaming of chunk .

In this example manner as illustrated in timing diagram the negotiation of security information may be performed on a control channel in parallel with data transmission on data channels and . Although three data channels are described in this example parallel security negotiation and data transmission may be accomplished with any number of data channels each of which may be associated with a different data repository. Even with a single data channel data transmission may start as soon as the security is negotiated for one chunk via control channel . Security negotiations for subsequent chunk s may be performed via control channel while the one chunk is being transmitted on the single data channel .

The overlapping of security negotiation with data transmission may also be utilized in the context of a security step up procedure. To initiate transmission of a first chunk of data quickly a faster security mechanism may be negotiated for the first chunk or chunks. A slower but likely stronger security mechanism may then be negotiated while this initial chunk s is being transmitted. The stronger security may then be implemented on subsequent chunks.

Generally a device may represent any computer or processing capable device such as a server device a workstation or other general computer device a data storage repository apparatus a personal digital assistant PDA a mobile phone a gaming platform an entertainment device some combination thereof and so forth. As illustrated device includes one or more input output I O interfaces at least one processor and one or more media . Media include processor executable instructions .

In a described implementation of device I O interfaces may include i a network interface for communicating across network ii a display device interface for displaying information on a display screen iii one or more man machine interfaces and so forth. Examples of i network interfaces include a network card a modem one or more ports and so forth. Examples of ii display device interfaces include a graphics driver a graphics card a hardware or software driver for a screen or monitor and so forth. Examples of iii man machine interfaces include those that communicate by wire or wirelessly to man machine interface devices e.g. a keyboard a remote a mouse or other graphical pointing device etc. .

Generally processor is capable of executing performing and or otherwise effectuating processor executable instructions such as processor executable instructions . Media is comprised of one or more processor accessible media. In other words media may include processor executable instructions that are executable by processor to effectuate the performance of functions by device .

Thus realizations for secured data transfers that are supported by separated control and data operations may be described in the general context of processor executable instructions Generally processor executable instructions include routines programs applications coding modules protocols objects components metadata and definitions thereof data structures application programming interfaces APIs etc. that perform and or enable particular tasks and or implement particular abstract data types. Processor executable instructions may be located in separate storage media executed by different processors and or propagated over or extant on various transmission media.

Processor s may be implemented using any applicable processing capable technology. Media may be any available media that is included as part of and or accessible by device . It includes volatile and non volatile media removable and non removable media and storage and transmission media e.g. wireless or wired communication channels . For example media may include an array of disks for longer term mass storage of processor executable instructions random access memory RAM for shorter term storing of instructions that are currently being executed link s on network for transmitting communications and so forth.

As specifically illustrated media comprises at least processor executable instructions . Generally processor executable instructions when executed by processor enable device to perform the various functions described herein including those paradigm s that are illustrated in those actions that are illustrated in flow diagrams and of respectively those data structure s and application s that are illustrated in respectively and so forth. By way of example only processor executable instructions may include an application one or more messages some combination thereof and so forth.

The devices actions aspects features functions procedures modules data structures protocols paradigms components etc. of are illustrated in diagrams that are divided into multiple blocks. However the order interconnections interrelationships layout etc. in which are described and or shown are not intended to be construed as a limitation and any number of the blocks can be modified combined rearranged augmented omitted etc. in any manner to implement one or more systems methods devices procedures media apparatuses APIs arrangements etc. for secured data transfers that are supported by separated control and data operations.

Although systems media devices methods procedures apparatuses mechanisms schemes approaches processes arrangements and other implementations have been described in language specific to structural logical algorithmic and functional features and or diagrams it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific featured and acts described above are disclosed as example forms of implementing the claims.

