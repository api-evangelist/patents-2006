---

title: Methods, systems, and computer program products for displaying windows on a graphical user interface based on relative priorities associated with the windows
abstract: Methods, systems, and computer program products for displaying windows on a graphical user interface based on relative priorities associated with the windows are disclosed. According to one method, relative priorities of a plurality of windows of a graphical user interface are determined. Further, relative priorities of a plurality of portions of at least one of the windows are determined. The windows are automatically arranged on the graphical user interface based on the relative priorities of the windows and based on the relative priorities of the portions. A higher priority window may cover a lower priority portion of a lower priority window to provide for a simultaneous viewing of the higher priority window and a higher priority portion of the lower priority window.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08381127&OS=08381127&RS=08381127
owner: Scenera Technologies, LLC
number: 08381127
owner_city: Portsmouth
owner_country: US
publication_date: 20060202
---
The subject matter described herein relates to methods systems and computer program products for displaying windows on a graphical user interface GUI . More particularly the subject matter described herein relates to methods systems and computer program products for displaying windows on a GUI based on relative priorities associated with the windows.

Computers and other electronic devices are typically operable to execute multiple applications concurrently. For example a computer may concurrently execute a word processing application a web browser application and an e mail application. One or more of these multiple applications can be simultaneously displayed to a user using separate windows of a GUI of the computer. Further each of these multiple applications can have multiple windows displayed on the GUI.

The concurrent display of multiple windows can be beneficial to a user when the user is working on a single task associated with each of the displayed windows. In this instance the user can view information shown by the windows at the same time. For example in a video conference a user may desire to simultaneously display windows for a video conferencing application a word processing application and a spreadsheet application.

One problem with the simultaneous display of multiple windows is the arrangement of the windows on the GUI. The display area of the graphical user interface available to windows is limited. Therefore it is desirable to position size and or configure the windows on the GUI in order to maximize the benefit of the display area of the GUI for the user.

One existing method for arranging the display of multiple windows is to let the user arrange the windows manually to a desirable configuration. The user could rearrange the windows by re sizing the windows and or re positioning the windows on the display. This manual rearrangement of the windows can be an inconvenient and time consuming process.

Techniques have been developed for automatically rearranging windows on the GUI. For example one system arranges windows on a display screen based on a class designation associated with the windows. However the space on a display screen may not be optimally utilized because components within the windows are not arranged based on their importance to a user. For example a portion within a window that is unimportant to a user may be arranged on a display screen in a position that is more prominent than a more important portion of the window. In addition conventional systems that arrange windows based on display class do not dynamically update the arrangement of the windows as the relative importance of the windows or portions within the windows changes.

In view of the shortcomings of existing techniques for displaying windows there exists a need for improved methods systems and computer program products for displaying windows on a GUI based on a relationship of the windows with one another.

According to one aspect the subject matter described herein includes a method for displaying windows on a GUI. The method includes determining relative priorities of a plurality of windows of a GUI. Further the method includes determining relative priorities of a plurality of portions of at least one of the windows. The windows may be automatically arranged in the GUI based on the relative priorities of the windows and based on the relative priorities of portions of the windows. A higher priority window covers a lower priority portion of a lower priority window to provide for a simultaneous viewing of the higher priority window and a higher priority portion of the lower priority window.

The subject matter described herein can be implemented as a computer program product comprising computer executable instructions embodied in a computer readable medium. Exemplary computer readable media suitable for implementing the subject matter described herein include disk memory devices chip memory devices application specific integrated circuits programmable logic devices and downloadable electrical signals. In addition a computer program product that implements the subject matter described herein may be located on a single device or computing platform. Alternatively the subject matter described herein can be implemented on a computer program product that is distributed across multiple devices or computing platforms.

According to one aspect a system for displaying windows on a GUI may be implemented as hardware software and or firmware components executing on one or more components of a system having a GUI. illustrates an example of a computer system for displaying windows on a GUI according to an embodiment of the subject matter described herein. Computer system may be any suitable system for displaying one or more windows on a GUI such as a personal computer mobile phone personal digital assistant and the like. The displayed windows may be associated with one or more applications. An application may provide instructions for displaying a window on GUI . Referring to computer system may include an input interface by which a user inputs data. For example input interface may be a keyboard a keypad a touch screen interface a tablet PC interface or a mouse. The user can input data into input interface for selecting one or more windows for display on GUI and interacting with the displayed windows.

A window may be a user interface through which a user interacts with an application or an instance of an application. For example a window may be one or more graphical images and or data that appears on a display screen and corresponds to an application. is a screen display of an exemplary window for displaying data and images associated with a spreadsheet application. Referring to the spreadsheet application is the Microsoft Excel spreadsheet software available from Microsoft Corporation of Redmond Wash. A user may utilize an input interface for editing or otherwise interacting with the data and or images displayed in the window. Further the user may also change the dimensions or other characteristics of the display of the window. For example the user may resize the window. In another example the user may also selectively remove or adjust the size of a portion of the window in order to increase the available display space of the GUI. The size of a portion of a window may also be increased if space on the GUI provides.

Referring again to GUI may be any suitable interface for visually representing programs and files with graphical images such as icons menus and dialog boxes on a screen. Examples of GUIs suitable for use with embodiments of the subject matter described herein include any GUIs that represent files and programs using windows. Some current examples of GUIs that use windows are the desktop interfaces provided by MICROSOFT WINDOWS Red Hat LINUX and the X Windows System developed by the Massachusetts Institute for Technology. In addition to these GUIs the subject matter described herein may also be suitable for use with windows based GUIs designed for mobile phones PDAs appliances or other devices with visual interfaces.

In the illustrated example GUI may include a display area for displaying windows and for view by the user. Windows and may also include a plurality of portions shown by the lines within each window that are of different relative importance to the user. For example a portion in which the user is currently reading or entering text may be of higher importance than a taskbar portion.

System may include an application function for storing managing and executing one or more applications. For example function may simultaneously execute applications and . An application may be an executable program. Applications may or may not operate with a user interface. A user may interact with an instance created by an application. For example a spreadsheet application may execute an instance of a file for interaction by the user. A spreadsheet containing data associated with the file may be displayed in a window of GUI .

Each application and may be associated with one or more windows displayed on display area . For example applications and may be associated with windows and respectively. Data such as text and images associated with the applications may be displayed within windows on display area . For example spreadsheet data generated by an application may be presented to a user in a window displayed on GUI .

Further system includes means for automatically arranging windows in a graphical user interface based on relative priorities of the windows and based on relative priorities of portions of at least one of the windows. For example system may include a window management function for automatically arranging windows on GUI based on the relative priorities of windows and based on the relative priorities of portions of at least one of the windows. Function may arrange the windows such that a higher priority window covers a lower priority portion of a lower priority window to provide for a simultaneous viewing of the higher priority window and a higher priority portion of the lower priority window. The windows may be arranged by positioning or repositioning the windows sizing one or more windows and or the contents of one or more portions of the windows. For example a window may be resized by changing the size of the window in a vertical direction and or horizontal direction. In another example a window may be positioned at a predetermined position with respect to another window. In another example a portion of a window may be covered by another window based on the relative priorities of all of the windows on GUI and the relative priorities of portions of the window. A window or portion of a window may be positioned and or sized such that a higher priority window or portion of the higher priority window is viewable by the user.

System may include a means for determining relative priorities of windows of a GUI. For example system may include a window priority function for determining relative priorities of windows of GUI . Relative priorities of windows may be determined based on a comparison of priorities assigned to two or more windows. The priorities assigned to each of the windows may be set by the user the computer system or by both the user and the computer system. For example a user may assign a word processing window a higher priority than an e mail management window. An application associated with the window may provide information about the window s priority to function . For example the application may provide to functions and one or more priority identifiers for identifying the priority of a window and or the priority of portions of the window.

System may include a means for determining relative priorities of portions of at least one of the windows. For example system may include a window portion priority function for determining relative priorities of portions of at least one of the windows of GUI . Relative priorities of portions of a window may be determined based on a comparison of priorities assigned to the portions of the window. The priorities of portions of each window may be assigned by the user the computer system or by both the user and the computer system. For example a higher priority may be assigned to a portion of a word processing window in which text is being entered than an unused portion of the word processing window or of another window. In another example a photographic image in a photography editing window may have a higher priority than a portion of the window associated with saving files and printing images.

According to one embodiment system may dynamically adjust the display of windows on GUI based on events affecting the priority of one of the windows. GUI may simultaneously display windows and . Further the sizes and or positions of the windows may be set according to relative priorities of the windows. Window management function may detect an event affecting the relative priority of one of the displayed windows. For example the event may be that one of the windows is being accessed by a user. The window being accessed may then be associated to have a higher priority than the other window. In another example the event may be that one of the windows is being closed by a user. On detection of an event affecting the relative priority of one of the displayed windows function can dynamically adjust at least one of the sizes and positions of the windows based on the event.

Referring again to windows of applications may be opened with window management function block . The windows opened may be a set of windows designated by the user for automatic arrangement by function on GUI . A user may open a window of an application with function by selecting a file to open and selecting a menu option for opening the application in function . is a screen display of an exemplary window including a menu option for opening a file in a window management function according to one embodiment of the subject matter described herein. Referring to the user can use a mouse to move a cursor for selecting the menu option Open in Window Management for opening a file with the window management function.

The opened application may generate a sub icon representation of the application in the display taskbar and a sub icon representation of the application in a display organizer icon. In one embodiment the same open application may have an instance residing as normal in the computer s operating system and an instance residing in the window management function . The windows may be separate in their display parameters while maintaining synchronized contents or data. An instance of the application may be closed in function without affecting the instance of the application in the computer s operating system. Further a user may alternate between a window of the application as displayed by the different instances. Further the application may remain open when function is closed.

In one example a window may be provided to windows management function for management by dragging and dropping a sub icon from a display taskbar onto the display organizer icon. For example a sub icon of a window may be shown on a display such as in a display taskbar. The sub icon may be selected and moved to the display organizer icon to add the window to function for management and arrangement with other windows on GUI .

In another example a window may be provided to function for management by a combination of use of a keyboard keystrokes mouse buttons and or mouse positioning. It is envisioned that a variety of key combinations may be suitable for providing a window to function for management. These key combinations include selecting items on a taskbar associated with the windows e.g. depressing a shift button or a control button with the mouse right clicking the mouse and selecting an add to Window Management button. In another example a window s title bars may be selected for moving the window rather than the taskbar items associated with the windows.

In another example a window may be provided to function for management by selecting a display organizer icon of an open application or an unopened file. The window may be provided to function by moving the window s title bar to an icon associated with function .

Referring again to in block window priority function determines relative priorities of windows. The relative priorities of windows may be determined based on an order that the windows are selected or positioned in the display organizer icon. For example when a window A is opened before a window B window A may be assigned a higher priority than window B. In another example a user may selectively assign a priority number or other indicia to a window such that the window may be compared to other windows having an assigned priority. After windows have been added to the display organizer icon the windows priorities can be reordered by arranging the windows in the display organizer icon in a different order from the order that the windows were added to the display organizer icon. Further window priorities may be adjusted by adding new windows to the display organizer icon. The position of sub icon of a window in the display organizer may determine its relative priority. For example a sub icon may have a higher priority than all sub icons positioned to its right.

In block window portion priority function determines relative priorities of portions of at least one of the windows. As stated above relative priorities of portions of a window may be determined by comparing priorities associated with two or more portions of a window. For example in a graphics application window such as ACROBAT software available from the Adobe Systems Incorporated of San Jose Calif. the main contents portion of the window e.g. the portion including graphics or text contained in an opened file may have a higher priority than the search bar and thumbnail portions of the window. Further for example a portion of a window that is selected by a user e.g. with a cursor or another suitable input device may have a higher priority than any other portion of the window and displayed window.

In block window management function may determine a default size of each window. For example if a window has not previously been opened by a user a default size of a window may be the default size of the window provided by the application associated with the window. The default size of a window may depend upon amount of that is being conveyed to the user by the window. For example the default size for a chat application window may be small as compared to the total display area of a GUI. Conversely the default size for a word processing application window may be large as compared to the total display area of a GUI. In another example for a window that has been previously opened the default size of the window may be the size of the window when the window was last closed. In another example when a window is a copy of another window the window copy may be sized the same as the size of the window that was copied.

In block function may determine a preferred axis of each window. The preferred axis of a window may be provided by the application associated with the window. The preferred axis may be the dimension of the window that stretches or compresses more than another axis of the window. For example in a window of a word processing application the window may permit scrolling in the vertical direction. The user may also have scrolled in the vertical direction. In such windows the vertical direction may be the preferred axis. Conversely in a window of a spreadsheet application the window may permit scrolling in a horizontal direction. In such windows the horizontal direction may be the preferred axis. For windows having scroll bars for the horizontal and vertical directions the dimensions of the scroll bars may be compared to determine the major preferred axis.

In block function may determine a minimum size of each window. The minimum size of a window may be provided by the application associated with the window. For example a minimum dimension of a window in the vertical direction and or the horizontal direction may be determined. In one example of a word processing application window the minimum size may be equal to the text width in the horizontal direction and five lines in the vertical direction. In an image editing application window the minimum size may be the size of an object image being edited.

Blocks represent a process for automatically arranging the designated set of windows for display on GUI . The process of blocks may be performed by function for each window in a sequential order from the lowest priority window to the highest priority window in the set. In block function may determine the lowest priority window for display among the set of windows designated for display. In block function may determine whether sufficient display space is available on GUI for displaying a default of the lowest priority window in the set that has not yet been arranged by the process on GUI or otherwise processed. If sufficient display space is available the window is positioned within the available space of GUI block . The window may be repositioned resized and or a portion of the window covered based on the processing of higher priority windows in the set.

In block it is determined whether another window is in the set that has not yet been arranged on GUI by the process or otherwise processed. If there is not another window for display the process stops block . Otherwise if there is another window for display the process may proceed to block for processing the next lowest priority window in the set that has not yet been arranged on GUI or otherwise processed.

Referring again to block if sufficient display space is not available on GUI function may determine whether the window can be resized for display on GUI block . If the window can be resized for display on GUI the window is resized block . The window may be resized by adjusting the size of the window in the vertical direction and or the horizontal direction. The size of the window may be reduced to a size that is small enough to fit in an available display space of GUI . Alternatively the size of the window may be adjusted to a size for fitting the window by increasing the size of the window if another window has been reduced in size by an event. The size of the window may not be reduced to a size less than the minimum dimensions for the window. In one embodiment function may determine whether the window can be resized along its preferred axis to fit the available space of GUI without reducing the size of the window below its minimum dimension. If the window cannot be resized to a small enough size along its preferred axis to fit the available space of GUI function may determine whether the window can be resized along its other axis to fit the available space of GUI without reducing the size of the window below its minimum dimension. If the window cannot fit within the available space of GUI at its minimum dimensions the window may be reduced in size to its minimum dimensions block for covering a low priority portion of a lower priority window. Alternatively the size of a window may be increased in the vertical and or horizontal directions when an event occurs that closes or reduces the size of another window.

In block the window may be displayed on GUI to cover a low priority portion of a lower priority window. Further in block the lower priority window may be moved and or resized. As stated above the relative priorities of windows may be determined at block and the relative priorities of portions of the windows may be determined at block . When a portion of a window is resized or a portion of the window covered information regarding an unused portion of the window e.g. white space in the margins may be hidden from view on the display of GUI by resizing the window or covering the unused portion. For example it may be preferred to cover white space over text or pictures in a window. Next the process may proceed to block to determine whether there is another window for display. As a result of the arrangement process a higher priority window may cover a lower priority portion of a lower priority window to provide for a simultaneous viewing of the higher priority window and a higher priority portion of the lower priority window. Further the lower priority window may be resized and moved for providing more display space for the higher priority window and positioning the higher priority window in a better location.

According to one embodiment the window management function may determine a relationship of windows with one another. For example applications may be closely related to one another because the windows associated with the applications may be opened simultaneously to perform a task. The synergistic nature of applications is recognized for arranging windows on a GUI. For example an e mail application may be synergistic with a chat application but not with a camera software update application. If a user selects windows for arrangement by a window management function the portions of the windows that have synergy with the highest priority window may be considered to have a high priority. A window having synergy with a high priority window may be assigned with a new priority that is higher than its previous priority based on its synergy with the highest priority window. Further when a user interacts with a window the window becomes the highest priority window and the priority of a window having synergy with the highest priority window may be rearranged based on its association with the highest priority window. A user may interact with a window by positioning a cursor on the window. Further gaze equipment may be included for determining a portion of a window to which a user s eyes are directed and the window portion to which the user s eyes are directed may be assigned the highest priority among the displayed windows.

In one example a user may want to initiate a task for putting contact information into a message to send to another person. The contact information may be contained in an address book application. The user may open windows for a messaging application and the address book application with a window management function. The applications may be defined as being synergistic. The user may interact with the window of the address book application for searching for an address. Since the applications are synergistic the portion of the address book window that includes the address search results may be assigned a high priority so that the messaging window does not cover the portion containing the search results. Further for example a selected portion containing information of a contact in the window may have a higher priority over the other portions containing contact information.

According to one embodiment the number of windows managed by the window management function may be limited. The number of windows practically arranged by the window management function may be limited. For example the function may not be able to practically manage windows on a typical GUI.

Portions of windows and are designated according to their priority relative to the other portions of the same window. The portions are designated according to priority with the highest priority being designated and the lowest priority being designated . Arrows and indicate the preferred axis for windows and respectively.

Referring to window may be the first window positioned on display screen because the window has the lowest priority among the set. Window may be resized small enough to fit within display screen .

Referring to window may be positioned on display screen . Further window may be reduced in size to fit with window on display because window has a lower priority than window . Window may be reduced in size to its minimum dimensions if necessary to fit window with window . Further if window is reduced to its minimum size and does not fit with window window may cover a low priority portion of window . In this example windows and are positioned on display screen without reducing the size of window or covering window . Further window is positioned in a preferred position of display screen at the upper left portion. Window is moved.

Referring to window may be positioned on display screen and cover portions of windows and . Recall that window as a whole has a higher priority than window . Accordingly lower priority portions of window are covered by window . Window may be reduced to its minimum size. Window is positioned above window on the right portion of display screen . Window is positioned on the preferred left portion of display screen .

Referring to window may be positioned on display screen and cover low priority portions of windows and . Window may be reduced to its minimum size. Windows and are moved to a lower portion of display screen .

According to one embodiment the display of windows on a GUI may be dynamically adjusted based on an event affecting the relative priority of one of the windows. Referring again to system includes means for simultaneously displaying a plurality of windows on a GUI where at least one of sizes and positions of the windows are set according to relative priorities of the windows and of portions of the windows. As stated above functions and may operate together for simultaneously displaying a plurality of windows on GUI . At least one of the sizes and positions of the windows are set according to relative priorities of the windows and of portions of the windows.

System may also include a means for detecting an event affecting the relative priority of at least one of the windows. For example window management function may detect an event affecting the relative priority of at least one of the displayed windows. The event may be a user accessing one of the windows or closing one of the windows. A window may be closed by removing a sub icon associated with the window from a display organizer icon. For example a user may close the window by selecting the close button in the window s title bar by right clicking on a mouse and selecting close or by clicking and dragging the window s sub icons off of the display organizer icon.

Further system may include a means for dynamically adjusting at least one of the sizes and positions of the windows based on the detected event such that a higher priority window covers a lower priority portion of a lower priority window to provide for a simultaneous viewing of the higher priority window and a higher priority portion of the lower priority window. For example function may dynamically adjust at least one of the sizes and position of the windows based on the detected event such that a higher priority window covers a lower priority portion of a lower priority window.

According to one embodiment applications may be specified by an application definition function . Function may include instructions in a markup language such as XML user interface language XUL available from Mozilla Foundation of Mountain View Calif. and extensible application markup language XAML available from the Microsoft Corporation . A markup language may aide a programmer to specify the components that compose an application. The markup language may be translated into procedural invocations on an application programming interface API of window manager or interpreted by window manager . Manager may interpret a markup language or intercept procedure invocations made to manager . Further function may specify the relative priorities of portions of windows for display. A markup language may support extensibility such that relative priorities of window portions may be added by a programmer. Based on the relative priorities of portions of a window for display function may send instructions to a display controller for controlling display to display the window according to the subject matter described herein.

The subject matter described herein provides the advantage of displaying windows on a GUI in a way that considers several factors about the windows. For example systems and methods described herein determine optimal display utilization of GUI display space. Further the subject matter described herein allows a user to define the relative priorities of a set of windows to be displayed.

In one embodiment a window management function as described herein and a conventional window management function such as provided by any of the WINDOWS operating systems may operate in parallel. The window management function may be utilized on a task by task basis. For a particular task a user may open or select windows for arrangement by the window management function. Once the task is complete the user may close the window management function for the task and initiate the window management function for a different task. Windows may not be closed just because the window management function is closed. The windows may still be operating based on the conventional window management function. Further multiple instances of the window management function described herein may simultaneously operate for managing and displaying windows associated with different tasks.

In another embodiment a user may select between the display of windows by a window management function as described herein and a conventional window management function such as that provided by any of the WINDOWS operating systems. Thus the user is provided with options for the display of windows on a GUI.

In one embodiment a desktop window may be provided on a GUI. The desktop window may be a view of the desktop as a window on a display organizer icon. For example the upper right quadrant of a display screen may include a view of the desktop. A user may click and drag an application window from the upper left quadrant display organizer to the recycle bin to remove the window. Thus the user may be able to view the desktop when a GUI is otherwise filled with windows.

In another embodiment a user may click and drag an icon associated with a window out of a display organizer icon for removing the window from management and display by a window management function. In response the window management function may dynamically adjust the display of other windows managed by the function according to the subject matter described herein. The other windows may be dynamically adjusted based on the relative priorities of the windows and based on the relative priorities of the portions.

In another embodiment a system according to the subject matter described herein may learn that a particular user has a tendency to delete particular portions of a window. Thus these portions of the window are not as important to the user as other portions. A priority may be assigned to a portion of the window based on the user s interaction with the portion. For example the time that the portion is kept open by a user relative to the total amount of time that the window is kept open may be measured. The time may be averaged over a predetermined number of instances of the window e.g. 10 times that the window is opened . For example in one application the main portion of a window may be viewed out of 220 times that the window is open and the thumbnails sidebar portion of the window may be viewed out of 220 times. Based on these measurements the thumbnails sidebar portion may be assigned a lower priority.

It will be understood that various details of the subject matter described herein may be changed without departing from the scope of the subject matter described herein. Furthermore the foregoing description is for the purpose of illustration only and not for the purpose of limitation.

