---

title: Bypass of the namespace hierarchy to open files
abstract: A file namespace hierarchy bypass and method to access files are provided. The bypass can be employed, for example, as a computer-readable medium with instructions for generating a unique identifier associated with a file and instructions for accessing the file based on the unique identifier and a specified search space. A computer-readable medium having instructions for obtaining the unique identifier and specified search space associated with the file and instructions for generating a path designation by combining the unique identifier and the specified search space used to access the file may also be employed. The method for bypassing the namespace hierarchy of the file, for example, may include passing the unique identifier and specified search space to a program and accessing the file based on a path designation generated by the program by combining the unique identifier and specified search space.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07925681&OS=07925681&RS=07925681
owner: Microsoft Corporation
number: 07925681
owner_city: Redmond
owner_country: US
publication_date: 20060428
---
This application is related to application Ser. No. 11 356 940 filed Feb. 17 2006 entitled MECHANISM TO EXCHANGE PRIMARY DATA STREAM OF A FILE. 

Computer users continue to store and share more files in richer ways as the internet communications and broadband technologies improve and expand their reach. While there are many benefits that come with this explosive growth of electronic information users are becoming more challenged to find and reuse files that they once created or used. The following scenario will be used as an example to illustrate this challenge.

A user named Fred receives a file attached to an email from his colleague Sam. The attachment is a written document describing the goals of a project Fred and Sam are leading. Fred makes a few changes to the document and saves the file on his local computer. He also starts to draft a new document that lays out the milestones for the project. Fred does not want to rewrite the project objectives in his milestones document so he embeds a link in the milestones document to the objectives document so that anyone who is reading his milestones document can link directly to the objectives document. Fred saves both the milestones document and the objectives document on a share that both Fred and Sam have permission to access. Fred changes the name on the objectives document to make it clear that the document includes his modifications and emails Sam the link to the milestones document stored on the common share.

Sam opens the milestones document and then clicks on the objectives document link that Fred has embedded so that Sam can see the changes Fred has made to the objectives. Sam is presented with a message on the display of his computer explaining that the objectives document can not be found. Sam does not know why the file can not be found and he does not know how to find it. So he needs to wait for Fred to correct the link or tell him where the file is stored and the name under which it is stored.

This scenario is further illustrated in . shows the file names and path relationships associated with this scenario. The file that Sam created is stored on the C drive of his computer in his Documents folder under the name Objectives . Thus the file name is C Documents Objectives. Similarly when Sam sends the file to Fred Fred saves the file on his computer s C drive in his documents folder under the name C Documents Objectives and this is the link that Fred includes in his milestones document. Fred creates and saves the milestone document as file under the name of C Documents Milestones on his computer. When Fred saves the milestones document on the common share he uses the S drive and the folder on that drive called Documents . The shared milestones file is named S Documents Milestones. Fred had also moved the objectives document file onto the common share under the new name S Documents objectives Fred to create a shared objectives file but he did not update the link embedded in the shared milestones file . Consequently when Sam tried to open the file by accessing the link from the shared milestone file it pointed him back to file which had been moved and renamed as shared objectives file .

Most files today are created with a namespace name that includes the path where the file is stored and the user given name. In the scenario described above the namespace name for file is C Documents Objectibes where C Documents is the path and Objectives is the name that Sam created for the file. As illustrated however the path and name of a file may change over the lifetime of the file making it difficult to ensure that these changes are tracked and updated so that the file can be opened despite any changes in its namespace name.

Some file systems are capable of tracking changes. For example the Windows NTFS file system includes a Change Journal such as an Update Sequence Number USN Journal that tracks file namespace changes. However because not all files are meant to be shared across users and applications the tracking information from the Change Journal is only available to certain applications and users with the highest security permissions. For example in the scenario discussed above Sam should not have access to the objectives document file stored on Fred s computer unless Fred authorized Sam to have access. Nor should Sam be able to obtain information about what files are stored on Fred s computer without permission. Accordingly except for administrators with the highest security permissions computer applications are not developed to utilize the tracking features of the Change Journal.

There are also some file systems that will create a unique file or object ID associated with certain files when they are created that are persistent and do not change even when the namespace name is changed. While having a unique and persistent identifier associated with a file may simplify the tracking of a file that has changed path or name over the course of its lifetime there is currently no mechanism for users without the highest of security permissions or applications that are designed to open files using the namespace name to open a file when the namespace name has been changed although doing so would not have been a breach of any security conditions.

It should be understood that many other scenarios are possible in which the namespace name changes preventing the opening of a desired file.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the illustrative embodiment nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Program instructions and methods are provided to bypass the namespace name hierarchy in order to access a file. In one illustrative example a unique number generator generates a unique identifier and the file system accesses a file based on the unique identifier. The unique identifier is associated by a file system with the file and does not change even if the namespace name for the file changes. The file system also uses a specified search space which adheres to all applicable security permissions in combination with the unique identifier to form a path designation that is used to access the file. If the file is moved to a location outside the specified search space the file will not be opened. If the file is moved to a shared location in which permission has been granted to access the file the file in the shared location can be accessed using the path designation.

According to one illustrative method for bypassing the namespace hierarchy to access a file an application passes the unique identifier and the specified search space to a program which may include a file system application programming interface. The program which may also include a file system combines the unique identifier and specified search space into a path designation and uses the path designation to access the file. The search space in this illustrative example is defined by a tree rooted in a store corresponding to the file s location. If the file s namespace name change for example by moving the file to a second location the file is still accessed as long as the second location remains within the specified search space.

In another illustrative example program instructions such as an application are described. The application includes instructions for obtaining the unique identifier associated with the file for example by requesting the unique identifier from a file system application programming interface. The application also may include instructions for obtaining the specified search space based on the location where the file is stored. A further set of instructions are provided to combine the unique identifier with the specified search space to form a path designation that may be used to access a file independent from its namespace name so long as the file location remains within the specified search space.

An illustrative embodiment of the present invention is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident however that the claimed subject matter may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to facilitate describing the claimed subject matter.

As mentioned in the Background there is currently no mechanism for opening a file that has undergone a namespace name change where the user is not granted broad security permissions or where the application is not designed for use by administrators with broad security permissions. The illustrative embodiment provides a mechanism to bypass the namespace hierarchy and to open a file that can be found within a permissible search space.

According to one illustrative embodiment the File System API combines a specified search space and the unique identifier to generate a path designation that the File System Kernel can use to access the file where accessing the file includes but is not limited to any one or more of opening viewing reading writing moving copying rendering and the like. The specified search space as is explained in more detail below meets requirements for security permissions and the unique identifier persists with the file even if the file path or name has changed.

After the file has been created as shown in it may undergo a namespace name change. is a flow chart showing a method for accessing the file after it has undergone such a namespace name change. If the application either did not previously request the unique identifier from the file system or if it did not retain the unique identifier the application may request the unique identifier at step in the manner described above. The application is still able to open that file after the namespace name has changed according to this aspect of the illustrative embodiment by passing the unique identifier and specified search space to the File System API at step which in turn creates a path designation at step . The file system kernel uses the path designation to locate and open the file at step .

The following description refers to an exemplary implementation of an application developed for the Windows File System WinFS to further illustrate steps and . The format of the file path is defined as follows 

where ItemId is the unique identifier. The Item Domain in WinFS or the specified search space is defined by the parent of the WinFS  ItemId . . . path. For example consider the following ItemId path 

In this case winfstst is the name of the machine and Defaultstore is a share in WinFS. The path prefix user fred further extends the scope and narrows the search space to only the namespace sub tree rooted at the folder named fred. The file has an ItemId of 0C092C29 882C 11CF A6BB 0080C7B2D682. The application recognizes winfstst Defaultstore user fred as the specified search space when Fred in this example first creates the file with a unique identifier 0C092C29 882C 11CF A6BB 0080C7B2D682.

In order for WinFS to open this exemplary file the file remains within the winfstst Defaultstore user fred item domain. Consequently the file is opened successfully with the ItemId when the file is present in a sub tree rooted at winfstst Defaultstore user fred. If the file is not present within a sub tree rooted in winfstst Defaultstore user fred attempts to open the file will fail. This will prevent a user from accessing items which are not within their item domain the search space for which that user has access permission.

where the itemId is the unique identifier for file . Fred may share files in Folder with Sam by granting Sam permission to open files in the folder user fred rooted in the defaultstore using an access control list or other method of granting access rights known by those skilled in the art. If Fred renames file as objectives fred shown as file the link he has embedded in milestones file will still open the desired file because the ItemId will have remained the same and renamed file can be found within the specified search space of machinename WinFSShare user fred .

Recall that the File System API combines the specified search space and the unique identifier to form the path designation that is used by the File System Kernel to open the file. If the syntax for the path designation is modified for the file system after the file is created it is preferred to include a mechanism for requesting the path designation according to the new syntax when the file is next accessed by the application. In the exemplary WinFS embodiment an API is provided that returns the path designation given the item domain and the ItemId. That way if the path designation syntax changes only this function will need to be updated. An exemplary API definition is as follows 

It should be understood that the function name parameters and syntax of such API should not be limited to this example and that alternative or additional APIs may be provided which instead of returning the path designation forms the path designation and provides it as an input to the File System Kernel following a change in syntax.

What has been described above includes examples of the illustrative embodiment. It is of course not possible to describe every conceivable combination of components or methodologies for purposes of describing the claimed subject matter but one of ordinary skill in the art may recognize that many further combinations and permutations of the illustrative embodiment are possible. Accordingly the present document is intended to embrace all such alterations modifications and variations. Furthermore to the extent that the term includes is used in either the detailed description or the claims such term is intended to be inclusive in a manner similar to the term comprising as comprising is interpreted when employed as a transitional word in a claim.

