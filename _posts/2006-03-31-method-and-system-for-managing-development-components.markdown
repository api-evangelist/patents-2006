---

title: Method and system for managing development components
abstract: Methods, systems, and software for managing development components or other enterprise content—whether developed internally or by third parties—are described herein. One method for managing reusable development components includes identifying a first development component of a first type. This first development component is stored in a repository, with the repository including a plurality of other development components with at least a second development component of a second type. The method then includes presenting an interface to a user operable to display information for at least the first and second development components.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08745583&OS=08745583&RS=08745583
owner: SAP AG
number: 08745583
owner_city: Walldorf
owner_country: DE
publication_date: 20060331
---
This disclosure relates to computer systems and methods and more particularly to methods systems and software for managing development components.

The amount of information in organizations is increasing exponentially. Much of this information is unstructured because complex heterogeneous systems typically crowd the typical IT landscape such as for example applications or components of applications documents on department file servers web pages on subsidiary web servers e mail groupware slide presentations and many others. These unstructured and unmanaged resources often contain mission critical knowledge that companies need to maximize business advantage. In some situations an enterprise portal may be used to provide a point of access to these applications information and services for employees and to transform that information into organizational knowledge. But these portals are often rather simple and merely provide one access point to underlying complexity. Moreover customers and partners typically have a difficult time finding and understanding components that can be reused when creating new solutions. This difficulty may be increased because development components are frequently located in different repositories are hard to find are difficult to understand once found and may be complicated to reuse when possible.

The disclosure provides various embodiments of systems methods and software for presenting and otherwise managing development components. These development components are typically but not necessarily offered to a plurality of parties via a storefront or other easy to use interface who may then use such components for any suitable purpose. For example one method for managing reusable development components includes identifying a first development component of a first type. This first development component is stored in a repository with the repository including a plurality of other development components with at least a second development component of a second type. The method then includes presenting an interface to a user operable to display information for at least the first and second development components.

The foregoing example method as well as other disclosed methods may be computer implementable. Moreover some or all of these aspects may be further included in respective systems and software for presenting and otherwise providing context based content for a computer application. The details of these and other aspects and embodiments of the disclosure are set forth in the accompanying drawings and the description below. Other features objects and advantages of the various embodiments will be apparent from the description and drawings as well as from the claims.

More specifically component manager may allow developers or other suitable end users to interact share get acknowledgement as well as gain confidence that they are not alone in what they are doing. In another example component manager can deliver solutions that help enable customers to assess and access analytics that are relevant for them. To facilitate this delivery component manager may provide an easy to use product catalog of development components that becomes ever more useful as the number of analytics offered by component provider and its partners increases. Put another way these development components are typically reusable in that they can be used in multiple solutions or versions of redeveloped solutions. This reuse may be furthered through the ability to easily find understand and adapt desired components. In yet another example component manager may be used to provide guidance on how to implement certain solutions. In certain cases component manager helps drive grass root adoption and hide complexity of multiple repositories and tools thereby allowing easier data and component access and helping create an enjoyable customer experience and effective consumption of these components. For example it may allow the user to implement real time synchronization with the most updated components versions bug reports and fixes for a wide variety of components .

In some cases the component manager is a hosted solution on a remote server providing an easy to use interface for disparate development components to at least one business or user potentially without requiring specific technical or data specific knowledge. System is typically a distributed client server system that spans one or more networks such as . In such cases the various components such as servers and clients may communicate via a virtual private network VPN SSH Secure Shell tunnel or other secure network connection. Accordingly rather than being delivered as packaged software system may represent a hosted solution either by or for content provider that may scale cost effectively and help drive faster adoption. In this case portions of the hosted solution may be developed by a first entity while other components are developed by a second entity. In such embodiments data may be communicated or stored in an encrypted format using any standard or proprietary encryption algorithm. This encrypted communication may be between the user or application client and the host or amongst various components of the host. Put simply communication or other transmission between any modules and or components may include any encryption export translation or data massage compression and so forth as appropriate. Further system may store some data at a relatively central location over a WAN while concurrently maintaining local data at the user s site for redundancy and to allow processing during downtime. But system may be in a dedicated enterprise environment across a local area network over LAN or subnet or any other suitable environment without departing from the scope of this disclosure.

Turning to the illustrated embodiment system includes or is communicably coupled such as via a one bi or multi directional link or network with server one or more clients one or more content developers or vendors one or more businesses at least some of which communicating across network . Server comprises an electronic computing device operable to receive transmit process and store data associated with system . Generally provides merely one example of computers that may be used with the disclosure. Each computer is generally intended to encompass any suitable processing device. For example although illustrates one server that may be used with the disclosure system can be implemented using computers other than servers as well as a server pool. Indeed server may be any computer or processing device such as for example a blade server general purpose personal computer PC Macintosh workstation Unix based computer or any other suitable device. In other words the present disclosure contemplates computers other than general purpose computers as well as computers without conventional operating systems. Server may be adapted to execute any operating system including Linux UNIX Windows Server or any other suitable operating system. According to one embodiment server may also include or be communicably coupled with a web server and or a mail server.

Illustrated server includes local memory . Memory may include any memory or database module and may take the form of volatile or non volatile memory including without limitation magnetic media optical media random access memory RAM read only memory ROM removable media or any other suitable local or remote memory component. Illustrated memory includes development components but may also include any other appropriate data such as VPN applications or services firewall policies a security or access log print or other reporting files HTML files or templates data classes or object interfaces child software applications or sub systems and others.

Development components include software at any appropriate level of granularity that may be reusable by users perhaps across businesses user types and platforms. These components may be development assets that are developed by multiple developers such as content provider and content developer . More specifically such development components may include among other things industry applications analytics reusable components objects collaborative software and pages request for comments RFC documents relationships processes views models dashboards and other business content whether primary secondary or other solutions or identifiable portion thereof. For example a first development component may be a warehouse delivery dashboard created by a first content developer a second development component may be a view of common warehouse data objects created by a second content developer a third development component may be a canned inventory report developed by the first content developer a fourth development component may be a web service for tracking such inventory while a fifth development component may be an enterprise software application developed exclusively for the requesting user or customized to meet his requests by content provider operable to manage some of the former components . In another example a development component may be an automated alert event that can be automatically sent to a recruiting manager each time a candidate declines an offer based on the manager s subscription preferences. Regardless of the particular type category or classification of the component system often stores metadata and other identifying information along with the actual piece of software whether object or source . For example the component may further include each element s definition lifecycle history dependents dependencies versions use or big name cases industry types or associations role types security profile and usage information.

Development components and their accompanying information may be stored in one or more logical or physical repositories. In some embodiments development components or pointers thereto may be stored in one or more tables in a relational database described in terms of SQL statements or scripts. In the same or other embodiments development components may also be formatted stored or defined as various data structures in text files eXtensible Markup Language XML documents Virtual Storage Access Method VSAM files flat files Btrieve files comma separated value CSV files internal variables or one or more libraries. For example a particular development component record may merely be a pointer to a particular piece of third party software stored remotely. In another example a particular development component may be an internally stored software object usable by authenticated customers or internal development. In short development components may comprise one table or file or a plurality of tables or files stored on one computer or across a plurality of computers in any appropriate format. Indeed some or all of development components may be local or remote without departing from the scope of this disclosure and store any type of appropriate data.

Server also includes processor . Processor executes instructions and manipulates data to perform the operations of server such as for example a central processing unit CPU a blade an application specific integrated circuit ASIC or a field programmable gate array FPGA . Although illustrates a single processor in server multiple processors may be used according to particular needs and reference to processor is meant to include multiple processors where applicable. In the illustrated embodiment processor executes at least component manager .

At a high level the component manager is software operable to provide an interface to a plurality of solutions and some or all of the underlying reusable components that can be used for these solutions. More specifically component manager is any application program module process or other software that helps manage at least a portion of development components and is operable to present certain components though interface for viewing and potential use or purchase by others. In one embodiment component manager may represent the back end processing of one access point where product groups partners community members or other authorized users can upload search for evaluate download rate rank receive certification view documentation and such of services lightweight or other composites analytics dashboards applications and any other components or solutions. More specifically component manager is often operable to enable the creation and display of new relationships between components make the particular component the center of its universe such as a business object and enable new information knowledge guidance to be added. In certain embodiments component manager may implement further functionality including being operable to i support versions feedback updates ii notify client side applications such that they become aware of updates that are available iii present a try before you buy option iv to control charge for access and downloads v manage or present mega catalog plus the ability to have site or customer specific sub catalogs vi provide a back end to any of these catalogs for publishers managers reviewers vii optimize consumption process via analysis of information collected viii certify users that can rate and submit content feedback and ix manage permissions for users and allow users to determine what access rights they have. Of course some or all of this further functionality may not be present or enabled in certain implementations of component manager . In certain cases component manager may be further operable to perform other types of processing or include links to such other functionality. For example component manager may implement include or be communicably coupled with a business application as described below in reference to example . In another example component manager can be an application layer that sits on top of a development environment. In yet another example component manager can reside on top of any suitable repository. In a further example component manager can have an integration point into any suitable tool or be hosted within a software development or other network.

Regardless of the particular implementation software may include software firmware wired or programmed hardware or any combination thereof as appropriate. Indeed component manager may be written or described in any appropriate computer language including C C Java J Visual Basic assembler Perl any suitable version of 4GL as well as others. It will be understood that while component manager is illustrated in as including a number of sub modules component manager may instead be a single multi tasked module that implements the various features and functionality through various objects methods or other processes. Further while illustrated as internal to server one or more processes associated with component manager may be stored referenced or executed remotely. For example a portion of component manager may be a web service that is remotely called while another portion of component manager may be an interface object bundled for processing at remote client . In another example the majority of processes or modules may reside or processing take place on client . Moreover component manager may be a child or sub module of another software module or enterprise application not illustrated without departing from the scope of this disclosure. At any rate component manager is generally operable perform processing automatically which may indicate that the appropriate processing is substantially performed by at least one component of system such as parts of component manager illustrated in . It should be understood that automatically further contemplates any suitable administrator or other user interaction with component manager or other components of system without departing from the scope of this disclosure.

Server may also include interface for communicating with other computer systems such as clients over network in a client server or other distributed environment. In certain embodiments server receives data from internal or external senders through interface for storage in memory for storage in DB and or processing by processor . Generally interface comprises logic encoded in software and or hardware in a suitable combination and operable to communicate with network . More specifically interface may comprise software supporting one or more communications protocols associated with communications network or hardware operable to communicate physical signals.

Network facilitates wireless or wireline communication between computer server and any other local or remote computer such as clients . Network may be all or a portion of an enterprise or secured network. In another example network may be a VPN merely between server and client across wireline or wireless link. Such an example wireless link may be via 802.11a 802.11b 802.11g 802.20 WiMax and many others. While illustrated as a single or continuous network network may be logically divided into various sub nets or virtual networks without departing from the scope of this disclosure so long as at least portion of network may facilitate communications between server and at least one client . For example server may be communicably coupled to one or more local repositories through one sub net while communicably coupled to a particular client or remote repositories through another. In other words network encompasses any internal or external network networks sub network or combination thereof operable to facilitate communications between various computing components in system . Network may communicate for example Internet Protocol IP packets Frame Relay frames Asynchronous Transfer Mode ATM cells voice video data and other suitable information between network addresses. Network may include one or more local area networks LANs radio access networks RANs metropolitan area networks MANs wide area networks WANs all or a portion of the global computer network known as the Internet and or any other communication system or systems at one or more locations. In certain embodiments network may be a secure network associated with the enterprise and certain local or remote content developers and businesses . As used in this disclosure business is any person department organization small business enterprise or any other entity that may use or request others to use system namely component manager to download or purchase reusable components at least some of which were created modified or otherwise uploaded by developer to content provider . As described above developers also may be local or remote to business . Indeed a particular developer may provide some content to component manager while receiving or purchasing other content at the same or different times as business . As illustrated business and developer each typically perform some processing such as uploading or purchasing content using a computer such as client .

Client is any computing device operable to connect or communicate with server or network using any communication link. For example client is intended to encompass a personal computer touch screen terminal workstation network computer kiosk wireless data port smart phone personal data assistant PDA one or more processors within these or other devices or any other suitable processing device used by or for the benefit of business vendor content provider or some other user or entity. At a high level each client includes or executes at least GUI and comprises an electronic computing device operable to receive transmit process and store any appropriate data associated with system . It will be understood that there may be any number of clients communicably coupled to server . Further client business developer and user may be used interchangeably as appropriate without departing from the scope of this disclosure. Moreover for ease of illustration each client is described in terms of being used by one user. But this disclosure contemplates that many users may use one computer or that one user may use multiple computers. For example client may be a PDA operable to wirelessly connect with external or unsecured network. In another example client may comprise a laptop that includes an input device such as a keypad touch screen mouse or other device that can accept information and an output device that conveys information associated with the operation of server or clients including digital data visual information or GUI . Both the input device and output device may include fixed or removable storage media such as a magnetic computer disk CD ROM or other suitable media to both receive input from and provide output to users of clients through the display namely the client portion of GUI or application interface .

GUI comprises a graphical user interface operable to allow the user of client to interface with at least a portion of system for any suitable purpose such as viewing application or other transaction data. Generally GUI provides the particular user with an efficient and user friendly presentation of data provided by or communicated within system . For example GUI may present the user with the components and information that is relevant to their task increase reuse of such components and facilitate a sizable developer community around those components. As shown in later figures GUI may comprise a plurality of customizable frames or views having interactive fields pull down lists and buttons operated by the user. For example GUI is operable to display certain development components in a user friendly form based on the user context and the displayed data. In another example GUI is operable to display different levels and types of information involving development components based on the identified or supplied user role. GUI may also present a plurality of portals or dashboards. For example GUI may display a portal that allows users to view create and manage historical and real time reports including role based reporting and such. Of course such reports may be in any appropriate output format including PDF HTML and printable text. Real time dashboards often provide table and graph information on the current state of the data which may be supplemented by development components . It should be understood that the term graphical user interface may be used in the singular or in the plural to describe one or more graphical user interfaces and each of the displays of a particular graphical user interface. Indeed reference to GUI may indicate a reference to the front end or a component of component manager as well as the particular interface accessible via client as appropriate without departing from the scope of this disclosure. Therefore GUI contemplates any graphical user interface such as a generic web browser or touchscreen that processes information in system and efficiently presents the results to the user. Server can accept data from client via the web browser e.g. Microsoft Internet Explorer or Netscape Navigator and return the appropriate HTML or XML responses to the browser using network such as those illustrated in .

At a high level illustrated component manager includes a number of layers namely a presentation or interface layer a web service interface a process controller component manager object layer and a data access layer . Component manager may further include operational management and security layers as appropriate. For example the security layer may allow a manager to establish or change access for users groups roles locations internal external perhaps based on logical network locations to one or more individual or groups of development components . Such access may include read write delete publish purchase preview and others or fewer as appropriate. This security capability may also be fully or partially offered to customers developers or other partners to for example help manage access to their development components . Process controller manages any number of sub modules process or objects including item generation component purchasing relations generation item searching and component publishing. Each of the processes creates utilizes or otherwise manages one some or all of the content manager objects. These objects may include ordering billing search object software solutions bag publishing object relations and content delivery. For example the ordering or billing objects may interface with an internal or outside business application such as to facilitate the purchase or licensing of components by the requesting user. The search object may include search parameters user identification for filtering or other data to help enable user friendly searches role based searches usage based searches or others. The software solutions bag object packages groups bundles or otherwise collects reusable components perhaps with its accompanying information such as metadata relationships and such. The software solutions bag may be accessible across internal or third party applications and be independent of particular tools or compilers. Moreover this bag may be associated with a project team or business instead of just one lone user. In this way the bag can by partially populated by a first user and completed by a second. Indeed this bag may be associated with a particular user but be accessed by the user s manager or other project members based on security settings. For example the first user may create or change the bag and then email the bag or a pointer thereto to the second user. In another example the first user may access the bag via a first application such as a development tool while the second user may access the bag via a second application such as a sales or marketing center . It will be understood that while termed as a software solutions bag it may be any object considered any logical or software implemented bag basket cart or other container data structure. Moreover this example project team may represent a quality assurance group an organization of similar roles such as developers a standards group a department such as research and development IT business assurance or marketing or any other logical or physical organization of users. Occasionally membership in this team may be authenticated prior to allowing other members to view or manage the bag. The publish object and relations object may help component manager manage the publication and interrelationships of components . Further content delivery object may encapsulate the purchased or requested for consumption or trial components for efficient delivery to business perhaps even to the appropriate development tool to speed reuse. For example one member of the project team may drop this software solutions bag into a storyboard or other shared environment for viewing and potential manipulation by other members of the project team. In another similar example this software solutions bag may be automatically linked or presented to the shared environment upon authentication of or access by a particular user. More specifically this storyboard may be an interface that the user can access for portal content development and is used to draw and compose model diagrams using a simple and intuitive visual notation.

The data access layer may implement several interfaces to data or data repositories including a search or query interface and a component manager repository interface. In this example the search interface may utilize a quick search capability or third party search portal to select or collect components stored in local repositories or third party repository . The component manager repository interface may allow component manager to store information about users businesses content developers or any other suitable party. This information may include search history account balances user or business profiles user group list instances of the component manager objects security profiles or login registration information licenses or contracts and others. For example the user profile may include some or all of search history purchase history user role business type and existing software whether licensed to his associated business or installed on his machine . Such information may be used to supplement or refine search results selected based on the user s search criteria.

It will be understood that while this example describes one configuration of component manager it may instead be a standalone or relatively simple software program integrated with other distributed modules or functionality. Moreover component manager may locally include or be remotely linked with some or all of the illustrated components as well as others not illustrated.

The example composite application portions may be implemented as Enterprise Java Beans EJBs or the design time components may have the ability to generate run time implementations into different platforms such as J2EE Java 2 Platform Enterprise Edition ABAP Advanced Business Application Programming objects or Microsoft s .NET. But it will be understood that while this example describes a composite application it may instead be a standalone or relatively simple software program integrated with other hosted modules or functionality illustrate example graphical user interfaces GUIs respectively of component manager for processing user contexts as described in method . Put another way GUI provides a front end for local or distributed component manager which may be collectively termed the storefront. Interface may be presented by a web browser that displays appropriate network pages including HTML Java PHP self referential PHP Hypertext Preprocessor ASP Active Server Pages or other pages populated at least in part by component manager . Each page may be hidden minimized or otherwise placed out of sight of the user while still including data that could be considered presented. For example GUI presents a centralized community based location with taxonomies and intuitive search capabilities that will enable different segments of end users which are not very technical to view applications information that is relevant to their task and suited to their skill set level. Particularly some of these GUIs provides a view of extensive metadata information on components including business cases use cases Key Performance Indicators KPIs or Key Success Indicators KSIs screenshots demos versions experts on component usage related components configuration hints and tips test cases and results community feedbacks and ratings. In another example GUI may be operable to provide filtered views of component information based on user s task or skill set and provide the ability to see community s feedback and provide feedback to it. In this way contextual information on select components can be viewed through the desired domain view perspective. Further this intuitive way often helps the user search find and understand what component is more adequate for the business needs and can help the non technical user and developer alike. In some cases GUI may make the search for such components more appealing for the often daily tasks of searching for the right item. Generally these example interfaces present various presentations of data throughout the search as described in subsequent flowcharts. Of course these interfaces are for example purposes only and component manager or its components such as and may provide any suitable interface operable to display at least transaction data and one or more development components indeed such displayed information may be communicated or presented in any suitable format or layout.

Regardless of the particular hardware or software architecture used component manager is generally capable of managing at least a portion of development components presenting certain components though interface for viewing and potential use or purchase by others and executing various other related business processes and techniques. Some of these processes such as providing target secondary content and providing feedback on such content are illustrated in certain flowcharts described below. The following descriptions of the flowcharts focus on the operation of component manager in performing the respective method. But system contemplates using any appropriate combination and arrangement of logical elements implementing some or all of the described functionality. For example some of the processing or other techniques may be implemented by business application or other invoked or referenced libraries or sub modules not illustrated.

But if the user is not a registered user then component manager may the display the general registration process that the new user will follow at step . For example such registration may include several steps to identify retrieve or otherwise collect information form the user. This example information may include registration data like email name company etc. and other information that can be used for customization if the user wishes such as industry role address and professional interest areas . In this example component manager collects and verifies user information at step using GUI . This information may include the registrant s first and last name the registrant s email address typically used as username for sign in and provides immediately useful contact information and the registrant s role in business . This role may be selected from a limited very general list to help normalize roles across businesses . In certain cases this list presented to the user after business data is gathered so that it may be populated based on the business type or other business context. Next at step component manager collects and verifies sign in information. This sign in information may comprise the registrant s password perhaps entered twice to ensure accuracy a password hint and the registrant s personal identification information to enable support to verify user.

As illustrated component manager then collects and verifies the business data to help provide some context and enable subsequent rolling registration. For example at step component manager collects and verifies business information such as the business names often both official or how the business is known legally and public or how the business is known to its customers phone number business address web address primary contact email address or other useful business contact information. This collected information is then stored in a repository subsequent processing at step . In some cases the user may customize his view of the storefront as shown at step . For example the user can customize the views using a guided procedure. This customization can be based on the users preferences results layouts search criteria and also using the registration data the user supplied role industry address etc. or a combination of both. The user can also save customizations in parallel for instance results filters .

Once the user and business information has been collected this demographic information may be used to help determine more appropriate components or otherwise help searching. is a flowchart illustrating an example method for presenting a plurality of development components potentially from a variety of content developers using the system of . Method begins at step where component manager receives a request for the storefront from a user on client . As described above this user may be an end user developer manager or other suitable user of client for example. Indeed component manager may automatically determine the role of the requesting user in an effort to provide more tailored information based on this role. For example a developer role may see more detail when he finds an artifact of interest while a business analyst role may see less technical detail with more business content. Moreover the user can conduct a search directly from the business s development tools via an API or conduct a search using a web interface or other software development network or ring using any suitable client such as the example PDAs laptops desktops automobiles and others. Next when appropriate the requesting user is authenticated using any suitable technique at decisional step . For example the user may log in using credentials created in the fashion described above. In another example the user may use a VPN or other similar secured access.

Once component manager provides access or otherwise returns the requested page at step then the user searches for one or more development components often of different types and vendors. In this way the search parameters at step should allow a non technical user to find the more appropriate components . The user should be able to use a customized search in which the storefront filters those items that are less relevant for that user on that particular search. This filtering is normally based on combinations of the user s role industry line of business IP Address company size and such. The user can also use a customized search to save time or create a search from the scratch. For example interface allows the user to add tags or other metadata that help identify the desired components. Then as shown in interfaces the user can add manually input filters to the search. These filters may include industry type interface solution type interface role type interface item type interface as well as many others. Indeed based on previously provided or dynamically determined information component manager may automatically populate certain of these fields. After the user adds the appropriate filters and tags he may input or provide additional search words or terms to help narrow the results as shown in interface . While shown as a certain search engine these searches may implement some or all as well as other of the following capabilities i text based search ii structured search categories based search iii parameter based search input parameters output parameters and iv dependency based search parent child brother brother relations . In any of these ways the search should allow technical and non technical persons with different skills and capabilities to conduct a professional yet simple and user friendly search of reusable development components . In some cases component manager may store the search or metadata associated with the search to help tailor subsequent searches.

Based on these parameters and any other determined context user or business information or other data content manger then locates selects or identifies any if any appropriate development components at step . As necessary component manager may identify the particular repository storing each selected component and request it as needed. For example many of the identified items may be stored within content provider . But in this example others may be located across network at various entities such as content developer and storage locations. As described above component manager may filter these results based on the input filters or dynamically determined criteria such as account balance company size contractual conditions . Moreover component manager may further filter or supplement the results based on the user s prior searches the core of which may have been saved to the appropriate repository. For example component manager suggests additional component based on historic usage analysis of models and relationships between components and such. In another example component manager may prioritize these results based on usage metrics including most searched items most purchased components composite opportunities supply and demand curves contractual obligations such as prioritized placement or other criteria.

Next at step the user gets the search s results as shown in interface . More specifically after conducting the search the user normally gets a clear easy to understand list of the different items that matched that search. Simply the user should be able to find the appropriate items from that list if any. The results may allow the user to view the metadata or accompanying information to understand the component s business scenarios look and feel as well as basic technical requirements or recommendations. Such a view may be similar to that illustrated as interface . In this example a screen shot is present along with a name unique identifier business context industry type author or other content developer general description or abstract and features and details. In some situations component manager may provide the user with the legal or licensing setting of consumption of those components. Also the search results may include the community rating and reviews regarding a specific component and different layouts of the result list each result displaying information with different look and feel. In some cases the search results may also display big name customers or case histories for appropriate components . Further the results may also be sorted ranked or made conspicuous such as bolded based on a preferred provider or application indication contractual obligations or any other criteria. At this point the user can also refine the current search by conducting another search on the items that are presented in the result list.

In some cases the user may be allowed to interact with some of the components in order to help him determine whether the application meets his expectations at step . For example the user can play with the application in a runtime system with dummy data sandbox without being bothered with installation and configuration as shown in interface . This dummy data may be supplied by content provider or developer or the user can add his own data if he is granted write abilities . This data can be erased reinitialized or otherwise reset when the customer logs off. In another example component may provide demos with screen shots and audio. In yet another example the user may download the component for trial and try to work with it in his daily environment within business . After examining the different items in the result list the user may select one or more items from the list at step . More specifically the user can add those selected items to software solutions bag as shown in interface . The user can have components for different purposes or solutions in one bag. Moreover the solutions bag may be user independent. Put another way the bag may be associated with the user a project team or business . Further the software solutions bag may be interfaced into a variety of different applications. For example the user may access his associated bag or bags via a development tool interface a web browser or any other suitable application. At this point the user may also add notes remarks or other metadata for selected components . In this way the user can save the most appropriate items for further investigation of those items downloading or purchasing them showing or forwarding them to a colleague or exiting component manager while allowing the user to get easily return with as little time and effort as possible. In this way the aggregated data or components of the bag may allow for easy data access and retrieval.

In certain embodiments the content provider may bill the user for some or all of the selected components at step . The billing amount may be a finder s fee an access fee a search fee a component cost or any other suitable cost determined by the user the business and or the component . Sometimes this billing amount may be computed by component manager and then communicated to the billing application sub module or outside data processing service for subsequent processing. Then using an EFT process credit card business account or other payment or arranged payment method content provider receives payment or approved promise of payment for the invoiced components . Component manager then allows these components to be downloaded by copied by or otherwise provided to the requesting user or business at step . Of course if there is no fee or expected billing for the particular selected component then it may be immediately provided to the user. In fact if there are no selected components that are associated with a cost then component manager may automatically skip the billing and payment steps. If the user desires he may supply feedback and contribute for the community at step using any forums or modules that help place views ask questions and give advice regarding specific applications components or enterprise knowledge. This feedback could include notes ratings or other comments on the quality of a reusable component. Typically any registered or authenticated user can take an active part in the forums or execute the feedback functionality. But this feedback could be automatically or manually analyzed and subsequently filtered or emphasized based on quality word choice performance evaluation of the feedback provider developer coding efficiency role and such. In some situations the end user may be encouraged or even required by the content provider to take an active role in the community in order to increase the value it offers to its other members.

Turning to example method begins with the searching user requesting a customization to a particular component at step . For example the user would be able to provide feedback directly on the user interface that will help the developer or consultant to adapt and configure the component. This feedback could be the addition of metadata to the search page tagging during the sandbox demonstration an email indicating the requested changes or any other suitable communication. More specifically method may involve graphically layering user requests on top of the application he is viewing. This often helps the user communicate more effectively with the implementer business analyst or developer that will manage or make the changes. In this way content provider could help enable the end user to provide feedback in the context of changes he desires. For example the user could be previewing the selected component via first graphical layer and tagging questions adaptations or other customization requests via a second graphical layer. In this example the users can create support messages or other tags directly in the application in which they are working. In another example this multi layered interface may represent a model driven solution that allows simple drag and drop techniques to request or develop pattern based or freestyle user interfaces and define the flow of data between them. These tags may be implemented using any suitable graphical element including comments pin ups highlights drop boxes frames and many others. Moreover this multi layered interface may help facilitate a collaborative environment. This integrated real time collaboration might allow users to work together efficiently regardless of where they are located as well as enable powerful communication that crosses organizational boundaries while enforcing security requirements. In some circumstances method may be at least partially implemented an end user feedback system or other similar application. At step the component manager may determine if there is an existing Software Licensing Agreement SLA involving the component or another agreement perhaps between the requesting user or his business and content provider . This determination may be performed by querying an internal database storing data on the extent and type of license agreements and or by requesting information from an external entity such as a database of a particular software company. If there is an existing agreement then the input generated by the user may serve as an appendix to such an agreement. In other words component manager generates an appendix based on the received request at step . Next at step this appendix is then presented to the requesting user or some other person with signing authority for the user or business . If the appendix was not approved at decisional step then that is often the end of this customization and an error message may be sent to the user at step . But in some cases the parties may negotiate changes to the disputed portions and processing may resume at this point. Once the appendix is approved the appendix is electronically or physically added or appended to the existing agreement at .

After the licensing issues if any are handled then component manager may first determine if this customization is an open bid at decisional step . For example the user may place an indicator on the user interface involving the customization and request that interested consultants perhaps within preset criteria contact him directly with bids. In another example the bidding processing may occur within the storefront framework. If this is an open bid then component manager may automatically send emails or other transmissions for bids at step . Otherwise at step the user s customization request is sent to an individual consultant who may have been selected according the processes similar to those described in method .

Once the request is verified component manager may present a preview of the development component to the user at step . More specifically the user may see a preview of how the component would look in the catalog. For example the user can test the item in the same way it will be supported in the catalog and can supply dummy data or modify dummy data defaulted based on the component type. The user can then edit the publication request and its related content or metadata in the preview mode at step . After the request is finalized then the user may indicate that he approves the publication at step . When appropriate the user can specify a requested date for publishing the item and an expiration date. If the user supplies a publication date as shown at decisional step then component will not normally be published until such a date is reached as shown at decisional step . In short once appropriate the development component is approved by the requestor and published at step and made available for other users and businesses to download purchase or otherwise review. In some situations a storefront administrator may approve publication requests prior to actual publication or distribution. For example the administrator may access a secure interface separate from or part of the storefront to see certain pending requests edit the content and approve or deny them. Moreover the administrator can inform the requestor about an item s approval or ask for further information in order to finish the process. This approval process may be automatically initiated according to the cost contractual obligations the developer the number of customizations or bug fixes or the degree of changes between versions.

Component manager may automatically select the appropriate repository to store the published component based on any suitable criteria or load balancing algorithm. For example a first component may be stored in a first repository because of the component type or geography a second component may be stored in a second repository because the first repository is full or experiencing reduced performance and a third component may be stored in the second repository but in a different table because of the component s associated platform or module type object source etc. . Of course these are for example purposes only and each component may be stored in the appropriate automatically or manually determined repository. In a further example component manager may automatically determine that the particular component or its metadata has changed at the remote site and automatically update the storefront as well as potentially propagate the changes to the appropriate customers. For example component manager may determine that the price contact information associated consultant list or other information has been changed and automatically update the catalog based on the identified changes.

Example method begins at step where component manager initializes a walkthrough of the publication. The guided procedure might be designed to help influence the content type the publisher who the target audience is and so forth. For example the first step of the walkthrough may be receiving the purported component type such as module of composite application interactive view dashboard and many others at step . Part of this process may include verifying that the user made the correct choice. In the event that the user or component manager can not determine a proper component type the to be published component may be assigned an item type of other unknown or to be determined. Next at step the user may identify any accompany items for the to be published component . For example the accompany may be required optional recommended or catalog specific elements and may include objects other published or concurrently to be published components text screenshots or other images metadata versioning and many others. The guided procedure then allows the user perhaps using a predefined list to specify what user groups would be able to see this component . Based on these selections if any at decisional step the user can then specify different look and feel flavors for each or a group of different user groups at step . After this and other not illustrated metadata is collected then the metadata is attached linked incorporated into or otherwise associated with the component for use during the publication process at step .

If there are any prior versions then component manager may compute or otherwise determine a delta or difference set between the latest published version in the repositories and the current one being processed at step . This dynamically determined delta may be analyzed by the user or a consultant of content provider to help add features or other metadata to the product description in the catalog. Further this delta may be automatically processed and the results included in a drill down of the current version when it is published similar to a red line. However accomplished this newly discovered or identified version metadata is associated with the component at step . Then using any suitable technique this new version which may be the initial version is published to the appropriate repository at step . Once the component is published or approved for publication then component manager may determine if any content developers business consultants or other users are to be notified of the new version as shown decisional step . If so then component manager or some other messaging system may automatically transmit such a notification to authorized users. For example component manager may generate a user specific email that describes the new version the delta the release or publication date the location the cost or fees or any other information that may be of use to the recipient. While described above in terms of modifications to source or object code in certain cases the customization may merely include an update to other metadata beyond version information or to the testing or recommended data.

At any point whether concurrently or afterwards component manager then receives retrieves or otherwise captures metrics describing such activity at step . These metrics may be statistics objects or any other information that helps system monitor the actual activity. For example the metrics may first comprise raw data that is then normalized for easier analysis storage or other processing. Next at step component manager aggregates the metrics as appropriate. In this case the metrics may be bundled into metric types so that an overall snapshot of the storefront can be determined for that particular level of granularity. For example the technical metrics may be collected such that the system or network administrator can get a view of the system status. In a more specific example these technical metrics may be collected or divided into sub categories such as network status database or repository status and so forth. As appropriate some or all of the metrics may be used to update the storefront interface or the metadata associated with certain components as shown at step or any other suitable logic of system . This update may include new rankings rerouting data transfers updating or resorting consultants update a marketing page of big name customers and many others.

After the metrics have been captured and optionally aggregated the metrics may be individually or collectively compared to some dynamic or predetermined threshold at step . Such thresholds may be set by an administrator a customer component manager and other appropriate users or modules. If a metric violates a threshold such as falling beneath or exceeding the relevant threshold as shown by decisional step then an administrator or customer or other user may automatically be notified such as via email or other messaging at step . Regardless of the subsequent processing the captured metrics are often presented to authorized users via a metrics interface. Of course the metrics interface may not be separate from the storefront but may instead be a secured frame or other object such as a popup embedded in the storefront interface. From this metrics interface the user may perform or request any appropriate processing of the metrics. For example the user may request that daily or weekly status reports be generated or some other report be generated on the fly as shown at step . Any report may also be automatically transmitted to appropriate recipients via any communications channel at step . In another example the user may also use the metrics interface to query the metrics. In this case component manager may automatically retrieve or summarize the search results and present them to the user at step . In yet another example component manager may determine trends based on regions countries industry types role types customers and such using these metrics. As shown at step these trends may be determined based on user input or criteria that are provided via the metrics interface. Of course these uses are for example purposes only and the user or system may utilize the metrics as appropriate including monitoring intellectual property compliance billing customers or partners manage or enhance a sales or marketing effort and so forth.

The preceding flowchart and accompanying description illustrate exemplary methods . System contemplates using or implementing any suitable technique for performing these and other tasks. It will be understood that these methods are for illustration purposes only and that the described or similar techniques may be performed at any appropriate time including concurrently individually or in combination. For example the walkthrough procedure of method may be incorporated into the publication procedures of method . Indeed the auto versioning techniques of method may be used to supplement the publication process. In another example the storefront interface may be dynamically updated as each metric is captured or analyzed within method as appropriate. In addition many of the steps in this flowchart may take place simultaneously and or in different orders than as shown. Moreover system may use methods with additional steps fewer steps and or different steps so long as the methods remain appropriate. For example if there are a relatively large amount of identified development components such that the identified components may not fit on the user s screen then component manager may sort or rank the development components to identify a subset to be displayed. In another example component manager may not compare some of the captured metrics such as search parameters to thresholds when not appropriate.

Although this disclosure has been described in terms of certain embodiments and generally associated methods alterations and permutations of these embodiments and methods will be apparent to those skilled in the art. For example certain embodiments of system may be a standalone but networked client that retrieves local information identifies the context of the local user and provides presentation elements associated with remote objects applications or other data accessible via the network. Accordingly the above description of example embodiments does not define or constrain this disclosure. Other changes substitutions and alterations are also possible without departing from the spirit and scope of this disclosure.

