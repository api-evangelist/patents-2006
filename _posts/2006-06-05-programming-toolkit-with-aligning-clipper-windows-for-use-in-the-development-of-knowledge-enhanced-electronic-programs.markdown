---

title: Programming toolkit with aligning clipper windows for use in the development of knowledge enhanced electronic programs
abstract: A graphical programming interface for use in developing computer programs uses a structure of graphically displayed elements representing positions, arguments and linkages to enable the development of computational decision making programs. The present invention provides new functionality to a clipper element that allows for simple division of a range of input values into contiguous sub-ranges, such as may be used to define a curve or other function.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07685528&OS=07685528&RS=07685528
owner: 
number: 07685528
owner_city: 
owner_country: 
publication_date: 20060605
---
This application claims the benefit of U.S. Provisional Application 60 688 457 filed Jun. 8 2005 hereby incorporated by reference.

The present invention relates to computer programming and more particularly to computer programs that provide knowledge enhanced electronic logic or computational decision making and to programming tools for use in developing knowledge enhanced electronic logic or computational decision making programs which simulate human decision making.

Formal processes that describe human decision making have been discussed for many years. As early as 1738 Daniel Bernouilli announced the concept of decision theory in an attempt to explain the non linear value of money. Both knowledge capture and decision making have long been addressed from the standpoint of academic research. Dr. Horst Rittel and Dr. Melvin Webber in their paper titled Dilemmas in a general Theory of Planning identified the difference between tame problems those where a formula can be used to calculate an answer and wicked problems where the answer lies in the gray area somewhere between good and bad . They focused their work on city planning activities and created the Issues Based Information System IBIS process in order to decompose a problem by structuring the information in the form of a decision tree including decisions and arguments. Researchers working on the decision making processes determined long ago that problems are best broken down or decomposed in order to solve them. Many decision making methodologies focus on choosing the best option or alternative. These techniques usually emphasize decomposing the decision into criteria or attributes against which all alternatives should be compared. First each criteria is rated as to its importance in the final decision and then each optional solution is compared against each of the criteria. These processes have been given several names in the academic literature such as Multi Attribute Decision Making MADM Multi Attribute Value Theory MAVT Multi Attribute Utility Theory MAUT and Multi Criteria Decision Analysis MCDA . A similar spin off has been Analytical Hierarchy Process AHA decision making that has focused on making pair wise comparisons. These processes work well when comparing similar options where the same criteria are applicable. This type of decision is applicable to choosing a particular car or choosing between an apple and an orange but not when balancing choices where the criteria are inconsistent. Further these processes have not been adapted for use in computational decision making programs for embedded systems or for real time control.

Artificial Intelligence and Expert Systems have taken many forms since the topics were first conceived. Rule based systems were commonly referred to as reverse chaining or forward chaining. Reverse chaining systems started with a solution and worked back through all the data to determine whether the solution was valid. This approach worked for simple decisions when some data might be missing. Forward chaining systems start with the data and try to determine the solution. Rule based systems supplied the concepts of confidence factors or certainty factors as part of the math behind the results. These types of systems were commonly used to evaluate static problems where the rules are fixed and the impact of each rule is stable. In many real world decision making situations rule based systems quickly become complex and hard to understand. Computer programs based on rule based systems are usually expensive to develop and difficult to debug. Further they can be inflexible and if changes occur may require complete recoding of system solutions.

Fuzzy Logic was developed as a mechanism to circumvent the need for rigorous mathematical modeling. Fudge factors in control systems were replaced by self explanatory linguistic descriptions that use soft terms that most humans can easily understand to describe a situation. Discrete data items are translated or fuzzified into different levels of participation in membership functions that describe the input domain in easily understood terms. The membership functions are characterized by simple geometric patterns which extend across different regions of the input domain. Likewise the output range is described by membership functions having geometric patterns which extend across different regions in the output range. Linguistic type if then rules are then formulated to define the transfer of membership participation from the input membership functions to the output membership functions. The output is then defuzzified according to a combinational strategy such as center of gravity. Software packages exist which provide program development interfaces that enable the generation of typical input and output membership functions and the on screen generation of transfer rules. Such software may also allow for multiple inputs and outputs which may be visually displayed as blocks on the left and right sides of a program development screen with blocks for the fuzzy logic rules shown in between. Some programs then allow fuzzy logic program code may be automatically generated based on the functions and rules defined on the program development screen. Fuzzy logic can be used for decision making but is not well adapted to handling multiple inputs and outputs or for enabling complex interactions between the components of the system. Fuzzy logic rules may have the advantage of allowing simple descriptions but they are likewise limited in what they can provide. It is often difficult to explain the results of fuzzy logic decisions because the result is determined by geometric based participation in various membership domains.

Neural nets were developed to mimic the structure of the human brain and can provide a form of decision making. Each neuron in a neural net processes incoming inputs and supplies outgoing outputs. The outputs are linked to other neurons which are frequently deployed in multiple interconnected layers across which signals are transferred from inputs on one side to outputs on the other side with some of the neurons providing interfaces to the outside world. Neural nets are trained to establish a pattern of desired behavior. Learning algorithms modify individual neurons by weighting or reinforcing certain of their connections with other neurons. Neural nets are fascinating to contemplate but require a lot of program code are hard to properly train and are not well adapted for dealing with applications requiring sharp changes in output based on limited input variation.

The present invention comprises a system for developing computer programs useful for computational decision making including a graphical programming interface an overall data structure and an execution engine. The system uses multiple hierarchical tree structures of positions or decisions and of arguments or challenges each of which is associated a particular position. Each position is primarily characterized by a modified value which usually corresponds to a final or intermediate output and includes other functional features such as position importance a position threshold and a position clipper window. Each argument is characterized by an argument value and usually corresponds to an initial or intermediate input. The values of the arguments associated with a given position are combined to determine the modified value of that position. Arguments may be supporting arguments which raise the modified value of the position or objecting arguments which decrease the modified value of the position. A complete program usually includes a large number of positions and arguments. The system also uses sets of linkages which may be used to define functional relationships between the different positions and arguments. The linkages allow different positions and arguments to be conveniently connected and combined into complex functional structures.

The graphical programming interface provides graphical representations of the positions as position value bars within importance boxes and of the arguments as slider bars deployed in proximity to the positions. The importance boxes provide a visual indication of the level of importance and the value bars provide a visual indication of the modified values of the positions. The slider bars provide a visual indication of the argument values which may be coupled to outside inputs connected to other positions or manually set by the developer. A set of connection points is associated with each position and a connection point is associated with each argument. Each position includes connection points associated with its modified value importance threshold clipper window upper limit and clipper window lower limit. The connection points are used in forming linkages providing functions related to the points of connection. The importance of a position scales the overall modified value of the position. The threshold is graphically adjustable so it can be set at any level along the position assembly. The threshold generates a zero output or full output depending on whether the modified value is less than or equal to or more than the threshold set point. The clipper window upper and lower limits are graphically adjustable so they can be set at any level along the position assembly and generate outputs in accordance with the level of a position s modified value in relation to the clipper window.

A program may be generated by specifying positions and arguments associated with these positions through the use of drop down windows. Linkages are then formed by clicking on connection points and using the cursor to create linkages by dragging and dropping linkage lines between connection points. The linkages provide overall functionality in accordance with their points and order of connection. The interface allows a computational decision making program to be conveniently developed by a highly visual programming methodology. A program may also be formed out of parts by merging multiple program segments together.

The overall data structure comprises a position data table an argument data table and as linkage data structure including data arrays associated with each type of linkage. The position data table stores basic position data such as modified value importance threshold set point clipper set points and a position ID and is accessed in accordance with an index count value. The argument data table stores basic argument data such as argument value type supporting or objecting and parent a position ID and is accessed in accordance with an index count value. The data arrays of the linkage data structures store basic data entries by linkage type specifying the linkage connections in accordance with an index count value. The data structure provides a convenient and compact memory structure for supporting the execution engine of the system.

The execution engine includes several basic routines and several code segments for arriving at stable modified values for the positions. The program first enters an overall Iterative Loop Routine in which it selects the first position in the position data table passes to the Do Decisions Routine whereby all other routines and code segments are invoked with respect to that selected position and returns to check for changes in basic position and argument values. If changes occur the loop is re executed and all other routines and code segments are iteratively run and rerun until stable values are settled upon. The Do Decisions Routine includes the Accumulate Arguments Routine the Make Decisions Routine and the Make Linkage Adjustments Routine. The Accumulate Arguments Routine separately collects the supporting and objecting arguments for the selected position. The Make Decisions Routine combines the arguments and evaluates the modified value of the selected position. Starting with an initial modified value of zero supporting arguments increase the current modified value by sequentially adding the product of the current supporting argument and the difference between the position importance and current modified value to the current value of the modified value. Objecting arguments reduce modified value by sequentially reducing the current modified value by the product of the current modified value and the current objecting argument. The Make Linkage Adjustments Routine passes through all the code segments associated with linkages and modifies the position and argument values of all other positions and arguments in accordance with the linkages connecting to the selected position.

It is an object of the present invention to provide an easy to use system for rapidly developing highly efficient and effective computer programs for use in computational decision making.

It is another object of the present invention to provide a graphical programming interface which enables computer programs for computational decision making to be developed in a highly visual and intuitive manner using graphical items drop down windows and drag and drop techniques for defining functional relationships.

It is a further object of the present invention to provide tools for the development of computer programs having an architecture which reflects a hierarchical tree structure of positions or decisions and arguments or challenges and which simulates human decision making.

It is yet another object of the present invention to provide for the automatic generation of computer code for computational decision making based on graphically created structures representing functional elements and including positions arguments and linkages.

It is a yet further object of the present to provide computer programs for computational decision making which are characterized by simple compact and efficient data structures.

It is yet another object of the present invention to provide computer programs for computational decision making which are characterized by well organized efficient and effective program code and program processes.

It is a yet further object of the present invention to provide for the development of computer programs which reflect a hierarchical structure of positions and supporting and objecting arguments in which the arguments associated with each position are mathematically combined to arrive at values for the positions using a simple but effective computer algorithms.

It is yet another object of the present invention to provide a toolkit for use in developing computer programs for computational decision making which warns the user of potentially unstable operations.

It is a yet further object of the present invention for the development of computer programs having an architecture which reflects a hierarchical tree structure of positions and arguments and includes a variety of different types of linkages which define different types of functional relationships between the positions and arguments.

It is yet another object of the present invention to provide for the development of computer programs having an architecture which reflects a structure of positions and arguments and which includes linkages enabling one position to drive the importance of another position or the value of an argument.

It is a yet further object of the present invention for the development of computer programs having an architecture which reflects a structure of positions and arguments and which includes linkages enabling threshold and clipper window functionality between different positions and arguments.

It is yet another object of the present invention to provide for the development of computer programs featuring Knowledge Enhanced Electronic Logic KEEL which provides for effective computational decision making which simulates human decision making. dr

Referring now to a graphical programming interface in accordance with co pending applications 2006 0112046 filed May 25 2006 and 2003 0083760 filed May 1 2003 assigned to the same assignee and hereby incorporated by reference is shown as including two positions or actions and . The positions and comprise position assemblies and that include rectangular importance boxes and and position value bars and disposed within rectangular boxes and . The level of the value bars and provides a visual indication of the level of each position s modified value. The vertical height of boxes and provides a visual indication of the value of the importance of each position. The graphical programming interface may include a large number of positions such as positions and .

Referring now also to once an application window is opened positions such as positions and are created within the window by selecting an add position entry on a drop down menu or selecting an Add Position button on a button bar which engages a drop down window allowing the position to be named in a text box and its importance value to be manually set by manipulating a slider . The interface software draws the positions within the application window with multiple positions being transversely spaced apart across the window.

Referring now again to the positions and also include connection points by which functional linkages can be established. Importance connection points and are indicated by an icon showing an asterisk in a small irregularly shaped circle and are located immediately above the position assemblies. Threshold connection points and are indicated by an icon showing a small downward pointing triangle within a small circle and are moveably positioned along the right side of the position assemblies. Clipper upper limit connection points and are indicated by an icon showing a small pyramid and are moveably positioned along the left side of the position assemblies. Clipper lower limit connection points and are indicated by an icon showing a small upside down pyramid and are moveably positioned on the left side of the position assemblies below the upper limit connection points and . Modified position value connection points and are indicated by an icon showing an upward pointing arrow within a small circle and are located immediately below the position assemblies. The connection points allow the positions and arguments to be functionally linked and combined together in a variety of ways using drag and drop techniques in order to form complex systems. Each position such as positions and includes importance threshold clipper upper limit clipper lower limit and modified value connection points all or none of which may or may not be utilized in each case depending on the requirements of each application. The specific functionality associated with the connection points will be explained later.

The graphical interface also includes three supporting and two objecting arguments or challenges and . The arguments and include sliders and that show input values normalized to a range of 0 100 within argument slider frames and . The argument values may be manually set or linked with outside input signals from sensors or the like or connected to various connection points associated with the positions and as will be explained later.

Referring now also to arguments such as arguments and are created by first selecting a position to which the argument will apply by clicking on the position and by selecting an add challenge entry on a drop down menu or selecting an Add Challenge button on a button bar which engages a drop down window allowing the argument to be named in a text box and for it to be designated as a supporting or objecting argument using radio buttons and . The interface software draws the arguments within the application window below the positions with which they are associated with the supporting arguments and objecting arguments shown in the order they are created.

Referring now again to the arguments and also include connection points. Input connection points and are indicated by icons in the shape of small diamonds which are located immediately below the argument slider bars and also by icons in the shape of small filled circles and located immediately above the slider bars. The lighter colored circles such as the circles of icons and indicate supporting arguments. The darker colored circles such as the circles of icons and indicate objecting arguments.

One supporting argument and one objecting argument are associated with the position and two supporting reasons or arguments and and one objecting reason or argument is associated with the position . The supporting and objecting arguments and which are associated with position are accumulated and combined to derive the modified value for the position as shown by the position value bar and in text box . The supporting and objecting arguments and which are associated with position are accumulated and combined to derive the modified value for the position as shown by the position value bar and in text box . The graphical programming interface may include a large number of both supporting and objecting arguments such as arguments and .

The modified value of position is calculated in software in accordance with the evaluation algorithm 100 100 100 PF PO

The modified value of position is calculated in software in accordance with the evaluation algorithm 100 100 2 100 100 PF PO

All supporting arguments are successively combined into an overall supporting argument value. Each supporting argument increases the values of the intermediate modified value figures. Objecting arguments are then successively combined staring with the final figure of the modified value after all supporting arguments have been combined into an overall result. Each objecting argument reduces the values of the intermediate modified value figures. The final intermediate modified value figure is the final result.

In the general case the formula for combining supporting values may be shown as follows 100 100 100 . . . 100 

The objecting arguments work off of the results of combining the supporting arguments and reduce the resulting evaluation. In the general case the formula for combining objecting values may be shown as follows 100 100 100 100 100 100 . . . 100 100 PF PO

It should be noted that PO PO 100 O 100 is algebraically and computationally equivalent to PO PO PO O 100 

In the alternative embodiment the modified value of the positions and may be calculated based on a different technique such as a difference between weighted sums of supporting and objecting arguments such as for otherwise 0

Referring now to the operation of modified position to argument connections or linkages and between position and argument associated with position and between position and argument associated with position are shown. The modified value of position is linked or wired at modified value connection point to the argument at argument connection point . The modified value of position is linked or wired at modified value connection point to the argument at argument connection point . The linkages are performed by clicking on the connection point with the cursor and then dragging and dropping the cursor on the connection point and by clicking on the connection point with the cursor and then dragging and dropping the cursor on the connection point . It should be noted that while drag and drop techniques are efficient and convenient the interface could provide for the linkages could be formed by alternative techniques. The linkages and are graphically represented on the interface by thin lines extending between the connection points of the affected positions and arguments. All linkages are graphically represented on the interface by lines running between connection points. The linkages represent functional relationships between the positions arguments and features associated with the connection points. It should be noted that once linkages are established the icons at the connection points and of the arguments and which are being driven by linkages and from other positions change from diamonds into small circles having four points. It should also be noted that the linkages are graphically depicted as extending between points and and and for the sake of convenience and to avoid clutter on the interface . The points and are not operatively active for creating new linkages but serve merely as diagrammatically convenient attachment points. In accordance with the functional relationship established by the linkages and the modified values of positions and drive the values of arguments and . For illustrative purposes the supporting argument is manually set to an argument value of 50. Accordingly the modified value of the position registers as 50. This value drives the argument through the link to a value of 50 which in turn drives the position to a value of 50. Since for illustrative purposes the supporting argument is manually set to an argument value of 50 this drives argument to a value of 50 through link . The modified value of the position registers as 50. This value drives the objecting argument through the link to a value of 50 which in turn drives the position to a value of in consideration of the fact that the supporting argument is set to 50 via link . The graphical programming interface may include a large number of linkages such as the linkages and .

Referring again to the supporting arguments and are connected or linked by linkage running below the arguments . The arguments and may thereby be conveniently set to identical values. Changes in one argument value will drive the other argument value. The linkage is performed by clicking on the connection point with the cursor and then dragging and dropping the cursor on the connection point although the same linkage could be established by clicking on the connection point and then dragging and dropping the cursor on connection point . The linkage is graphically represented by a thin line extending between connection points. The graphical programming interface may include a large number of linkages such as the linkages which may even connect multiple arguments.

Referring now to the operation of a modified position to position importance connection or linkage between positions and is shown. The modified value of position is linked or wired at modified value connection point to the position at importance connection point . The linkage is created by clicking on the connection point with the cursor and thereafter dragging and dropping the cursor on the connection point . The linkage is graphically represented by a thin line extending between connection points as are all linkages . The linkage represents a functional relationship between the position and its modified value and the position and its importance value. The modified value of the position drives the value of the importance of position . The importance of a position scales its modified value from 0 100 on a percent basis so that for example an importance of reduces a modified value of 80 to 48. For illustrative purposes the supporting argument is manually set to an argument value of 50 with slider . Accordingly the modified value of the position registers as 50. The argument also drives the argument through the action of the link to a value of 50. The linkage drives the importance of position to a value of 50 in accordance with the modified value of position . The modified value of position is driven to 25 as shown at text box and by position bar by the value of argument as adjusted in accordance with the importance determined by position through linkage . It should also be noted that the importance of any position can be manually set at the time of its creation by adjusting the slider associated with its drop down window as shown in . The graphical programming interface may include a large number of linkages such as the linkage .

Referring now to the operation of a threshold to argument connection or linkage between position and argument and its associated position is shown. The set point of the threshold for position can be adjusted by having its connection point clicked with the cursor and dragged and dropped anywhere along the right side of the position assembly while the control key and the right mouse button are depressed to set the threshold at any value between 0 and 100. The threshold connection point graphically represents the threshold s set point for triggering its functions in accordance with the height of its vertical position along the left side of the position assembly. It should however be understood that the exact sequence of keystrokes to perform actions like moving threshold points is a matter of design choice and that the interface could be programmed to use different sequences without affecting the functionality of the software. The threshold for position is linked or wired at threshold connection point to argument at argument connection point . The linkage is performed by clicking on the threshold connection point with the right mouse button and then dragging and dropping the cursor onto the connection point . In accordance with the linkage the threshold thereby drives the value of the of argument to either 0 if the modified value of position is equal to or below the threshold or to 100 if the modified value of the position is above the threshold. For illustrative purposes the supporting argument is manually set to an argument value of 60. The modified value of the position registers as 60. By operation of the threshold for position and linkage this value drives the argument to a value of 100 since the modified value of position is above the threshold and the modified value of position is then driven to 100 by argument . The graphical programming interface may include a large number of linkages such as the linkage .

Referring now to the operation of a threshold to argument connection or linkage between position and argument and its associated position is shown at the same time as the operation of a modified position to threshold linkage between positions and is illustrated. The linkage allows the set point of the threshold to be automatically adjusted. The threshold for position is linked or wired at threshold connection point to argument at argument connection point as previously described with respect to . The modified value of position is linked at connection point to the threshold associated with position at threshold connection point . The linkage is created by clicking on the modified value connection point with the cursor and then dragging and dropping the cursor on the threshold connection point . In accordance with the linkage the set point of the threshold for position is controlled to be the same as the modified position value of position . For illustrative purposes the supporting argument is manually set to an argument value of 40 and the supporting and objecting arguments and are manually set to argument values of 50. The modified value of the position registers as 40. By operation of linkage the threshold set point for position is set to 25 which corresponds to the modified value of position . By operation of the linkage the threshold drives the argument to a value of 100 since the modified value of position is above the threshold set point of 25 as controlled by position and the modified value of position is then driven to 100 by argument . The graphical programming interface may include a large number of linkages such as the linkages and .

Referring now to the operation of a clipper or clipper window to argument connection or linkage between position and argument and its associated position is shown as well as the operation of a clipper or clipper window to position importance linkage between position and position . The operation of the clipper window may be adjusted by having its upper and lower limit connection points and clicked with the cursor and dragged and dropped anywhere along the left side of the position assembly while the control key and right mouse button are depressed to set the clipper upper and lower limit set points at any values between 0 and 100 so long as the lower limit is below the upper limit . The clipper upper and lower limit connection points graphically represent the clipper s set points for triggering its functions in accordance with their vertical position along the left side of their position assembly. For general purposes it should be noted that a clipper window s upper set point is based on a percentage of the position importance and the clipper window s lower set point is based on a percentage of the upper clipper window set point. Knowing the position importance value and percentage values of the upper and lower clipper set point values count values can be calculated for both upper and lower clipper set points when these count values are needed to drive argument values. The upper connection points of clippers such as the connection point of the clipper for position are used for linking the outputs of clippers to other connection points. The clipper window for position is linked or wired at clipper connection point to argument at argument connection point . The clipper window for position is also linked or wired at clipper connection point to position at importance connection point . The linkages and are constructed by clicking on the clipper connection point with the cursor and then dragging and dropping the cursor onto the connection point and by clicking on the clipper connection point with the cursor and then dragging and dropping the cursor onto the connection point . It should be noted that clipper windows have both percentage and derived count value functions associated with them. The count values are used when they drive argument values and the percent values are used when they drive importance values. In accordance with linkage the clipper window for position thereby drives the value of the importance of position to the clipper s percent value. In accordance with the linkage the clipper window for position also drives the value of the argument to the clipper s derived count value. The count value of a clipper window is a function of the amount by which the modified value of the position it is associated with exceeds its clipper lower limit set point. However the count value of a clipper window is limited by its upper limit set point and its value will not increase further once its upper limit set point is reached even if the modified value of the position with which it is associated increases beyond the upper set point. For illustrative purposes the supporting argument is manually set to an argument value of 60. The modified value of the position registers as 60. By operation of the clipper window for position and linkage the argument is driven to a value of 30 since the modified value of position is 30 counts above the clipper s lower limit while still below the upper limit . The percent value of a clipper is a function of the amount by which the modified value of the position it is associated with exceeds its clipper lower limit set point as a percent of the total range of the clipper or rather as a percent of the difference between the upper and lower limit set points. For illustrative purposes the supporting argument is manually set to an argument value of 60. The modified value of the position registers as 60. By operation of the clipper window for position and linkage the importance of position is driven to 75 since the modified value of position is 75 percent of the way between the clipper s lower limit and upper limit. The graphical programming interface may include a large number of linkages such as the linkages and .

Referring now to the operation of position modified value to clipper upper limit and position modified value to clipper lower limit connections or linkages and between positions and and the clipper associated with position are shown. The linkages and allow the operation of the clipper window to be modified by having the set points associated with its upper and lower limit connection points and automatically adjusted. The modified value of position is wired or connected at connection point to clipper upper limit connection point . Similarly the modified value of position is wired or connected at connection point to clipper lower limit connection point . The linkages and are created by clicking on the position modified value connection point with the cursor and then dragging and dropping the cursor onto the clipper upper limit connection point and by clicking on the position modified value connection point with the cursor and then dragging and dropping the cursor onto the clipper lower limit connection point . The clipper window for position is also linked or wired at clipper connection point to argument at argument connection point by linkage . The modified values of positions and thereby drive the values of the set points for the upper and lower limits of the clipper of position . For illustrative purposes the supporting argument is manually set to an argument value of 50. The modified value of the position registers as 50. By operation of the linkages and the set point of the clipper upper limit is set to 70 percent or 70 counts and the set point of the clipper lower limit is set to 20 percent or 14 counts in accordance with the modified values of the positions and . The clipper window for position and linkage drive the modified value of position to since the modified value of position is 36 counts higher than the clipper lower limit count or set point of 14. The graphical programming interface may include a large number of linkages such as the linkages and .

Referring now to the position modified value to argument linkages and link position to position through argument and position to position through argument in a potentially unstable feedback loop. The interface program detects this and presents the icon in the shape of a large circular ball above the first position as a warning. The developer using the interface may manually override this warning using menu entries under the Edit menu as will be later described.

Referring now to the sample interface program includes five positions seven arguments and four linkages . The position modified value to argument linkages are operative for transferring the modified values from the positions to the position through the arguments . These modified values reflect the arguments that act as inputs to the system. The modified arguments are scaled relative to one another in accordance with the fixed importance values of the positions . However the position and its supporting argument control the importance of position through the position modified value to importance linkage . It should also be noted that the modified value of position is also scaled in accordance a fixed importance value. The position effectively modifies or controls the overall combined values of positions and the inputs represented by arguments as they are accumulated at position . In overall function the program collects scales and combines a set of inputs and allows the accumulated value to be modified and then expressed as a single output for control purposes.

Referring now to the furnace control program includes six positions fifteen arguments and ten linkages . The position reflects room temperature within the input range as provided at argument as the primary system input. The position reflects inverted room temperature as transferred from position through objecting argument . As room temperature goes down the modified value of position goes up thereby allowing the functionality of threshold and clipper window to be properly enabled. The position acts as an on off switch for the furnace. When the temperature falls and the inverted temperature rises above the set point of the threshold the furnace is turned on through the action of linkage which drives the argument to full value and position modified value of position to its full value of 50 as scaled by the fixed importance of position . The position is latched on or at full value by the linkage from the threshold to the argument which drives the position itself. Even if the modified value of the position falls below the threshold thereby dropping the value of the argument to zero the position will stay at full value due to the threshold driving the argument . The modified value of the position can only be reset by the action of the linkage driving the objecting argument to full value when the modified value of position reflecting room temperature rises above the threshold . The furnace is thereupon turned off as the modified value of position is driven to zero. Position represents the volume of gas flow to be supplied to the burner of the furnace and is controlled by linkages and . Linkage operates to apply the modified value of position to argument that provides a minimum value of 50 to the gas flow whenever the furnace is turned on and the position is accordingly at full value. Linkage operates to apply the count value of clipper window of position to argument which augments the gas flow as the room temperature falls and the inverted temperature rises within the range above the lower limit of the clipper . Arguments and are connected together by linkage whereby the value of argument drives argument thereby increasing the contribution of the clipper count value to the modified value of the position and further increasing the gas flow. Position represents the speed of the furnace fan and is controlled by the values of arguments and and the linkage which drives arguments and . Argument is manually set to a fixed value to provide for a minimum fan speed to provide for continuous ventilation unless the fan is manually turned off by supply of a full value input at objecting argument . Linkage operates to apply the count value of clipper window of position to argument which augments the fan speed to provide more cooling and heat transfer as the furnace bonnet temperature which is input at argument and represented by the modified value of position rises within the range above the lower limit of the clipper window. Arguments and are connected together by linkage whereby the value of argument drives argument thereby increasing the contribution of the clipper count value to the modified value of the position and further increasing the fan speed. The threshold for position is connected by linkage to objecting argument of position . The set point of the threshold is adjusted to reflect the maximum safe operating temperature for the furnace. If the threshold is exceeded by the modified value of position representing the furnace bonnet temperature the threshold and linkage operate to drive the objecting argument to full value and drive the modified value of position to zero thereby shutting off the furnace except for the operation of the fan at minimum ventilation speed.

Referring now to a medical diagnostic system is shown which includes ten positions twenty one arguments and fifteen linkages . The medical diagnostic system is adapted for interpreting test data such as such as blood sugar levels. The diagnostic system can be better understood with reference to showing a graph of the modified value of position which serves as the output signal of the system as a function of an input signal applied to arguments and via linkage . Graph shows a normal range corresponding to the flat area of the function extending across the middle of the graph. The results of below normal readings are shown with respect to the curve on the left side of the graph . The results of above normal readings are shown with respect to the curve on the right side of the graph . The abscissa value provides a measure of the importance of abnormal readings. Thus a diagnostic reading that is outside the normal range geometrically increases in importance by the amount it departs away from the range of normal values.

The diagnostic system may be viewed as having four operative sections. The curve see is created by operation of positions and related arguments and links. The curve is created by operation of positions and related arguments and links. Position may be seen as accumulating curves and into a single continuous curve. Positions and provide a mechanism for controlling the width of the normal region shown as the flat area .

The input supplied by argument drives the modified value of position . The clipper window drives the importance of position through linkage . Position is biased by the supporting argument with a value of 100 so that position is fully driven from 0 to 100 and the modified value of position rises from 0 to 100 counts as the modified value of position rises through the range of the clipper window . Because position is biased with a fixed supporting argument of value 100 the modified value of position rises at the same rate as its overall importance. This value is transmitted through links and to objecting arguments and which drive position along with supporting argument and objecting argument . Supporting argument is biased with a fixed value of 100. The modified value of position is linked to the supporting argument by linkage and thereby contributes to the overall output of the system as expressed by the modified value of position . By way of illustration if the input signal applied to supporting argument rises to a value of 10 this would drive the modified value of position to a value of 10. Since this value is 27 of the way between the clipper lower limit and the clipper upper limit the importance of position would rise to a value of 27. This will in turn drive the objecting arguments and to values of 27 each which drives the modified value of position to a value of 39. In this case the modified value of position and the output of the system would be 39.

The input supplied by argument drives the modified value of position . The clipper window drives the importance of position . The position is biased by the supporting argument with a value of 100 so that position is fully driven from 0 to 100 and the modified value of position rises from 0 to 100 counts as the modified value of position rises through the range of the clipper window . The modified of position drives the objecting argument of position which is also biased by supporting argument with a value of 100. This inverts the modified value of position so that as the modified value position goes from 0 to 100 the modified value of position goes from 100 to 0. The modified value of position drives objecting arguments and through linkages and . The position is also biased by the supporting argument with a value of 100. The modified value of position is linked to the supporting argument by linkage and thereby contributes to the overall output of the system as expressed by the modified value of position . By way of illustration if the input signal supplied to argument has a value of 20 then position would have a modified value of 0 and the position would have a modified value of 100. Objecting arguments and would be driven to 100 and the modified value of position would be driven to a value of 0. In this case the modified value of position and the output of the system would be 0. When the input value is set to a value between the ranges of the clipper window and clipper window then neither lower control positions nor upper control positions will contribute to the output signal. However when the input value is in the range of the clipper window the lower control positions progressively contribute to the output signal as the input signal decreases. Further when the input value is in the range of the clipper window the lower control positions progressively contribute to the output signal as the input signal increases.

The diagnostic system is adjustable. Positions and may be used to control the clipper upper limit of clipper window and the clipper lower limit of clipper window . The adjustment control is applied by supporting argument which controls the modified value of position . The modified value of position controls the upper limit of clipper through linkage . The modified value of position is also used to drive the objecting argument of position that is biased by the supporting argument . This inverts the value of the modified value of position which is then used to control the lower limit set point of clipper through linkage . The points at which the curves and begin may be thereby changed and the extent of the normal range widened or narrowed.

The graphical programming interface allows for the efficient development of effective software programs using a highly visual programming approach. However the interface is only one part of the software system of the present invention. As positions arguments and linkages and other graphical artifacts are configured on the interface screen programming code implementing the application being specified is automatically generated by the computer running the development system. This code is fully functional and enabled to run in the background. The code is coupled to the application programming interface and the graphical artifacts shown on the development screen so the application can be tested as it is being developed. Arguments can be manually manipulated to simulate different levels of inputs and the results can be immediately seen in turns of position values and the operation of the application can be visually demonstrated as has been shown with many of the program examples already given. After program development is complete the code can be reconfigured by dropping its connections to the graphical interface adapting it to a container so it can be ported to a different system and adding the glue logic necessary for it to coupled to inputs and outputs and run as an independent software program.

Referring now to the File and the Edit buttons on the main development program toolbar open menus and which present several useful menu items any one of which may be selected by highlighting and clicking on the items with the cursor. The New item allows programs to be started under a new name. The Open XML File and Open Link Set items and allow different types of existing program files to be opened for further work. The Merge item opens a window which enables another existing program to be combined or merged with the current program at a point after a specific selected position. The Project Setup item opens a window having text boxes for appending a title author and description to the program file. The Save and Save As items and perform their traditional functions in saving program files under existing or new names. The Loop Check item initiates a manual check of the design loops in the current application. The Connection List item invokes a function which displays and allows a Connection Chart to be printed out showing a list of positions and their respective supporting and objecting arguments for the current application under development. The Wire Report item invokes a function which displays and allows a Wire Report to be printed out showing a list of categories of linkages and the specifics for such linkages existing in the current application under development. The Print Design item opens a small window allowing a choice between Visual Basic and C Programming Language menu items and then according to this selection will display and allow print out of a file listing the program code for the current software application which is under development. The Print Design Data Only item opens a small window allowing a choice between Visual Basic and C Programming Language and then according to this selection will display and allow print out of the data portion of the program code for the current software application under development. The Exit item exits the development environment. The Position item opens a small window allowing a choice between Adding Editing and Deleting menu items which allow for new positions to be added or existing positions edited in accordance with the window of or for selected positions to be deleted. The Challenge item opens a small window allowing a choice between Adding Editing and Deleting menu items which allow for new arguments to be added or existing arguments edited in accordance with the window of or for a selected argument to be deleted. The Graph item opens a window listing all positions on one side and all arguments on the other for the program under development. After a specific position and a specific argument are selected an execute button on the window invokes a program execution and plotting function which runs through the full range of argument values and calculates the corresponding position values and displays a graph of the position value as a function of the argument value. This graph may then be printed out by clicking on a print button associated with the display window for the position argument graph. This plotting function enhances the ability of the program to be tested and debugged during development. The Organize Layout item opens a window listing positions in the current program under development and allowing different positions to be deselected in accordance with check boxes. The deselected positions are hidden from view and are not displayed in the programming interface window which can assist in avoiding screen clutter. The Enable Unstable Operation item allows the developer to override the warnings illustrated in with respect to feedback and possible unstable operation of the program.

Referring now again to the graph also illustrates the output and operation of the plotting function which may be activated using Graph item of menu . In this case the modified value of position which serves as the output signal of the system of is plotted against the value of the argument which serves as the input to the system. After the execute button is engaged the program runs through the full range of argument values and calculates the corresponding position values and displays the graph of the position value as a function of the argument value. This graph may then be printed out by clicking on a print button associated with the display window for the position argument graph to provide the graphical result shown in the figure.

Referring now to the data memory structures underlying the positions and arguments forming the basic tree structure part of the software programs which may be developed using the programming interface are shown. Position data table specifies seven data arrays and containing data relating to each position as developed and specified on screen with the programming interface. Argument data table specifies four data arrays and containing data relating to each argument as developed and specified on screen with the programming interface. The arrays and represent one dimensional arrays that contain data elements relating to position importance Position Importance modified position value Modified Position Value threshold set point Threshold Value clipper upper limit set point Clipper Value clipper lower limit set point ClipperB Value and position ID respectively. The count array tracks the number of positions in a program. The count values index all of the data elements and identify them with the positions to which they belong. The data elements for position importance modified position value threshold set point clipper upper limit set point clipper lower limit set point have the functions and characteristics previously described. The position ID data array provides convenient entries by which arguments can be efficiently linked to the different positions with which they are associated. The position name data array stores the name given each position for display on screen as part of the programming interface. The arrays and represent one dimensional arrays that contain data elements relating to argument value argument type supporting or objecting and the argument parent its parent position respectively. The count array tracks the number of arguments in a program and indexes all of the data elements to the argument to which they belong. The data elements for argument value and argument type have the functions and characteristics previously described. The argument parent array provides convenient entries of the Position IDs of the positions which the arguments are associated with by which the arguments can be efficiently linked with their positions. The argument name data array stores the name given each argument for display on the screen as part of the programming interface.

Referring now to the data memory structures underlying the connections or linkages part of the software programs that may be developed using the programming interface are shown. The data arrays represent two dimensional arrays that contain source and destination data elements specifying the source and destination positions and arguments related to the connection points for the linkages. Data array contains modified position to argument connection data. Data array contains modified position to position importance connection data. Data array contains modified position to threshold set point connection data. Data array contains modified position to clipper upper limit set point connection data. Data array contains modified position to clipper lower limit set point connection data. Data array contains clipper window to position importance connection data. Data array contains clipper window to argument connection data. Data array contains argument to argument connection data. Data array contains threshold to argument connection data. As previously shown the linkages can be used to form a linkage system or web which defines and enables complex functionality in conjunction with the tree structure of positions and arguments.

Referring now to the flowchart shows the main Iterative Loop Routine of the execution engine by which the software program of the present invention settles on solutions for all importance position values modified position values threshold set points clipper upper and lower limit set points and argument values. In step new values for all outside inputs to the arguments are accepted. In step all importance position values modified position values threshold set points clipper upper and lower limit set points and argument values are saved to memory. In step the index for the main program loop is set to point to the first position. In step the program enters the Do Decision Routine which thereafter leads to the calculation routines representing the primary data processing elements of the program. When the Do Decisions Routine is completed the program returns to decision step in which it compares all newly calculated importance position values modified position values threshold set points clipper upper and lower limit set points and argument values to the importance position values modified position values threshold set points clipper upper and lower limit set points and argument values previously saved to memory in step . If there are any differences the program returns back along loop to step and restarts all calculations for the importance position values modified position values threshold set points clipper upper and lower limit set points and argument values. The execution engine continues calculating and recalculating these basic values in order to converge on stable values for which no further changes are detected in step in which event the program moves to step and the final outputs are posted for all values and set points.

Referring now to the Do Decisions Routine is entered from the Iterative Loop Routine at step returns to the Iterative Loop Routine at step and includes three major subroutines and for accumulating arguments making decisions and adjusting for linkages. These subroutines are encompassed by a large loop which begins at step and ends at decision step . The loop runs through all positions by sequentially indexing to each position so that the subroutines and are run for all positions present on the graphical interface and in the program.

Referring now to the Accumulate Arguments Routine is entered from the Do Decisions Routine at step returns to the Do Decisions Routine at step and includes a loop for sorting through all the arguments identifying the arguments belonging to the selected position see step in and building a queue of supporting and a queue of objecting arguments which apply to that position. Supporting and objecting argument counts are initialized in step and the loop is entered at step . At decision step arguments belonging to the selected position are identified and when identified control is passed to decision step . In decision step the arguments are parsed according to whether they are supporting or objecting arguments. If they are supporting arguments the routine passes to step where a queue of supporting arguments is built. If they are objecting arguments the routine passes to step where a queue of objecting arguments is built. In the event the argument is not identified as for the selected position in step or after processing in steps and decision step for loop is entered. If the last argument has been processed by the loop the routine passes to step . In the event the last argument has not been processed the routine returns to step where the next argument is selected. In step the values of the supporting and objecting arguments in the queues are collected and thereafter the modified position value is initialized to zero in accordance with step in preparation for the Make Decisions Routine.

Referring now to the Make Decisions Routine is entered from the Do Decisions Routine at step returns to the Do Decisions Routine at step and includes a supporting argument evaluation loop and an objecting argument evaluation loop . In loop each supporting argument is sequentially referenced in step and the modified position value is successively recalculated in accordance with the formula of step . At decision step the routine passes to the objecting argument evaluation loop if all supporting arguments have been processed or otherwise returns to step to select and process another supporting argument. In accordance with the loop each objecting argument is sequentially referenced in step and the modified position value is successively recalculated accordance with the formula of step . At decision step the routine passes to step if all supporting arguments have been processed or otherwise returns to step to select and process another objecting argument. In step the program confirms that a final position modified value output has been calculated and saves this value to memory.

Referring now to the Make Linkage Adjustments Routine is entered from the Do Decisions Routine at step returns to the Do Decisions Routine at step and includes a series of eight steps corresponding to eight code segments for adjusting various position argument threshold and clipper values in accordance with the various linkages specified in the application program and the new modified value see step in for the selected position see step in as previously calculated in the Make Decisions Routine. The code segments reflect the different kinds of linkages which may be included in application programs in accordance with the application programming interface .

Referring now to the Adjust Importance Based On Modified Value Code Segment is entered from the Make Linkage Adjustments Routine at step moves to the next code segment shown in the Make Linkage Adjustments Routine at step from step and includes a loop for sequentially running through or scanning the position modified value to position importance array and finding the positions affected by any changes in the modified value of the selected position and resetting the position importance of those positions. In decision step the program checks for matches between source position entries in the array and the index of the currently selected position. When a match is found the program moves to step and resets the position importance of the affected position and at step enters the Do Selective Decision Making routine which will be described later. In the event no match is found in step or after the Do Selective Decision Making Routine is completed in step the program passes to decision step at which a check is made to determine if the entire position to position importance array has been scanned. If more entries remain to be scanned the program returns to step and a new entry is identified or if all entries have been scanned the program passes to the next code segment.

Referring now to the Adjust Importance Based On Clipper Window Code Segment is entered from the Adjust Importance Based On Modified Value Code Segment at step moves to the next code segment shown in the Make Linkage Adjustments Routine at step from step and includes a loop for sequentially running through or scanning the clipper to position importance array and finding the positions affected by any changes in the clipper window value of the selected position and resetting the position importance of those positions. In decision step the program checks for matches between source position entries in the array and the index of the currently selected position. When a match is found the program moves to step and resets the position importance of the affected position and at step enters the Do Selective Decision Making routine which will be described later. In the event no match is found in step or after the Do Selective Decision Making Routine is completed in step the program passes to decision step at which a check is made to determine if the entire position to position importance array has been scanned. If more entries remain to be scanned the program returns to step and a new entry is identified or if all entries have been scanned the program passes to the next code segment.

Referring now to the Adjust Argument Values Based On Modified Position Value Code Segment is entered from the Adjust Importance Based On Clipper Window Code Segment at step moves to the next code segment shown in the Make Linkage Adjustments Routine at step from step and includes a loop for sequentially running through or scanning the position modified value to argument array and finding the arguments affected by any changes in the modified position value of the selected position and resetting those argument values. In decision step the program checks for matches between source position entries in the array and the index of the currently selected position. When a match is found the program moves to step and resets the value of the affected argument and at step enters the Adjust Arguments Routine which will be described later. In the event no match is found in step or after the Adjust Arguments Routine is completed in step the program passes to decision step at which a check is made to determine if the entire position to argument array has been scanned. If more entries remain to be scanned the program returns to step and a new entry is identified or if all entries have been scanned the program passes to the next code segment.

Referring now to the Adjust Threshold Based On Modified Position Value Code Segment is entered from the Adjust Argument Values Based On Modified Position Value Code Segment at step moves to the next code segment shown in the Make Linkage Adjustments Routine at step from step and includes two nested loops and for sequentially running through all positions and for each position sequentially running through or scanning the modified position to threshold array and finding the thresholds affected by any changes in the modified position values and resetting those thresholds. In step the program counts through all the positions as a function of the loop . In step the program counts through all entries in the position to threshold array and checks for matches between the source position entries in the array and the index of the position currently selected in accordance with the loop . When a match is found in decision step the program moves to step and resets and recalculates the value of the threshold set point as a function of the percentage defined by the source modified value over its position importance full position value . In the event no match is found in step or after the step is completed the program passes to decision step at which a check is made to determine if the entire position to threshold array has been scanned. If more entries remain to be scanned in loop the program returns to step and a new entry is identified or if all entries have been scanned the program passes to step at which a check is made to determine if all the positions have been processed by loop . If more positions remain to be processed the program returns to step and a new position entry is identified or if all entries have been scanned in loop the program passes to the next code segment.

Referring now to the Adjust Argument Values Based On Threshold Code Segment is entered from the Adjust Threshold Based On Modified Position Value Code Segment at step moves to the next code segment shown in the Make Linkage Adjustments Routine at step from step and includes two nested loops and for sequentially running through all positions and for each position sequentially running through or scanning the threshold to argument array and finding the arguments affected by any changes in the thresholds and resetting those arguments. In step the program counts through all the positions as a function of the loop . In step the program counts through all entries in the threshold to argument array and checks for matches between the source position entries in the array and the index of the position currently selected in accordance with the loop . When a match is found in decision step the program moves to step and resets the argument value to 0 or 100 as a function of whether the modified value of the source position equals or exceeds the threshold set point. After resetting the argument value in step the program passes to step and runs the Adjusts Other Arguments Routine which will be described later. In the event no match is found in step or after the steps and are completed the program passes to decision step at which a check is made to determine if the entire threshold to argument array has been scanned. If more entries remain to be scanned the program returns to step and a new entry is identified or if all entries have been scanned the program passes to step at which a check is made to determine if all positions have been processed by loop . If more positions remain to be processed the program returns to step and a new position entry is identified or if all entries have been scanned the program passes to the next code segment.

Referring now to the Adjust Clipper Upper Limit Based On Modified Position Value Code Segment is entered from the Adjust Argument Values Based On Threshold Code Segment at step moves to the next code segment shown in the Make Linkage Adjustments Routine at step from step and includes two nested loops and for sequentially running through all positions and for each position sequentially running through or scanning the position modified value to clipper array and finding the clipper upper limits affected by any changes in the modified position values and resetting those clipper upper limits. In step the program counts through all the positions as a function of the loop . In step the program counts through entries in the position to clipper array and checks for matches between the source position entries in the array and the index of the position currently selected in accordance with the loop . When a match is found in decision step the program moves to step and recalculates the value of the clipper upper limit set point as a function of the percentage defined by the source modified value over its position importance full position value . In the event no match is found in decision step or after the step is completed the program passes to decision step at which a check is made to determine if the entire position to clipper array has been scanned. If more entries remain to be scanned the program returns to step and a new entry is identified or if all entries have been scanned the program passes to step at which a check is made to determine if all positions have been processed by loop . If more positions remain to be processed the program returns to step and a new position entry is identified or if all entries have been scanned the program passes to the next code segment.

Referring now to the Adjust Clipper Lower Limit Based On Modified Position Value Code Segment is entered from the Adjust Clipper Upper Limit Based On Modified Position Value Code Segment at step moves to the next code segment shown in the Make Linkage Adjustments Routine at step from step and includes two nested loops and for sequentially running through all positions and for each position sequentially running through or scanning the position modified value to clipperB array and finding the clipper lower limits affected by any changes in the modified position values and resetting those clipper lower limits. In step the program counts through all the positions as a function of the loop . In step the program counts through all entries in the position to clipper B array and checks for matches between the source position entries in the array and the index of the position currently selected in accordance with the loop . When a match is found in decision step the program moves to step and recalculates the value of the clipper lower limit set point as a function of the percentage defined by the source modified value over its position importance full position value . In the event no match is found in decision step or after the step is completed the program passes to decision step at which a check is made to determine if the entire position to clipperB array has been scanned. If more entries remain to be scanned the program returns to step and a new entry is identified or if all entries have been scanned the program passes to decision step at which a check is made to determine if all positions have been processed by loop . If more positions remain to be processed the program returns to step and a new position entry is identified or if all entries have been scanned the program passes to the next code segment.

Referring now to the Adjust Argument Values Based On Clipper Window Code Segment is entered from the Adjust Clipper Lower Limit Based On Modified Position Value Code Segment at step moves to the next code segment shown in the Make Linkage Adjustments Routine at step from step and includes two nested loops and for sequentially running through all positions and for each position sequentially running through or scanning the clipper to argument array and finding the arguments affected by any changes in the value of the clipper window and resetting those arguments. In step the program counts through all the positions as a function of the loop . In step the program counts through all entries in the clipper to argument array and checks for matches between the source clipper entries in the array and the index of the position currently selected in accordance with the loop . When a match is found in decision step the program moves to step and recalculates the argument value to equal the amount by which the source position modified value exceeds the clipper lower limit lower set point . After resetting the argument value in step the program passes to step and runs the Adjusts Other Arguments Routine which will be described later. In the event no match is found in decision step or after the steps and are completed the program passes to decision step at which a check is made to determine if the entire clipper to argument array has been scanned. If more entries remain to be scanned the program returns to step and a new entry is identified or if all entries have been scanned the program passes to decision step at which a check is made to determine if all positions have been processed by loop . If more positions remain to be processed the program returns to step and a new position entry is identified or if all entries have been scanned the program passes to the next code segment.

Referring now to the Adjust Other Arguments Routine is entered from the Adjust Argument Values Based On Position Modified Value Adjust Argument Values Based On Clipper Window and Adjust Argument Values Based On Threshold Code Segments at step and includes a loop for sequentially running through or scanning the argument to argument array and finding all the arguments affected by changes in a source argument value and adjusting all linked argument values. In step the program sets up a temporary argument Links Array queue and enters the index value of the current affected argument as first entry in this queue. In step the program scans through the argument to argument array in accordance with the loop and checks for matches between the source argument entries in the array and the index of the affected newly changed argument. In step arguments are added to the Links Array queue when matches are found. In step the program follows up by scanning the argument to argument array to further identify all arguments linked to arguments newly added to the Links Array queue and likewise adds them to the Links Array queue. After completing step the program enters decision step and checks to see if the argument to argument array has been completely scanned. If the argument to argument array has been fully scanned the program passes to step and otherwise the program returns to step so that the remaining entries can be scanned. In step all the entries in the Links Array queue are set to the same value as the affected argument first entered into the Links Array queue. Thereafter the program returns to the code segment from which it entered the Adjust Other Arguments Routine.

Referring now to the Do Selective Decision Making Routine is entered at step from the Adjust Importance Based on Modified Value and Adjust Importance Based on Clipper Window code segments and includes a loop for sorting through all the arguments in order to identify the arguments for the targeted position affected by the importance change and building a queue of supporting and a queue of objecting arguments which apply to that position a loop for evaluating the supporting arguments and a loop for evaluating the objecting arguments which are used in calculating a new modified position value for the targeted position. Supporting and objecting argument counts are initialized in step and the loop is entered at step . At decision step arguments for the targeted position are identified and when identified control is passed to decision step . At decision step the arguments are parsed according to whether they are supporting or objecting arguments. If they are supporting arguments the routine passes to step where a queue of supporting arguments is built. If they are objecting arguments the routine passes to step where a queue of objecting arguments is built. In the event the argument is not identified as belonging to the selected position in step or after processing in steps or the program passes on to decision step associated with loop . If the last argument has been processed the routine moves on to step . In the event the last argument has not been processed the routine returns to step where the next argument is selected. In step the values of the supporting and objecting arguments in the queues are collected and thereafter the modified position value is initialized to zero in accordance with step in preparation for further processing. In accordance with the loop each supporting argument is sequentially referenced in step and the modified position value is successively recalculated accordance with the formula of step . At decision step the routine passes to the objecting argument evaluation loop if all supporting arguments have been processed or otherwise returns to step to select and process another supporting argument. In accordance with the loop each objecting argument is sequentially referenced in step and the modified position value is successively recalculated accordance with the formula of step . At decision step the routine passes to step if all supporting arguments have been processed or otherwise returns to step to select and process another objecting argument. In step the program confirms that a final position value output has been calculated and saves this value to memory. A call to the Do Selective Decisions Routine is made after there is an adjustment is to a position importance value and accordingly there is a need to make a recalculation of the modified value of the affected position. The Do Selective Decision Making Routine is optional.

It should be apparent to one of ordinary skill in the art from the foregoing description that the present invention provides one or more scaled and interrelated outputs that are related to one or more positions and are based on inputs which come from subservient arguments or challenges each of which may have been assigned quantitative weights. The inputs are combined as described above according to their tree structure hierarchy and according to linkages that allow different positions and arguments to interact in a simple and intuitive manner which reflects human decision making. This basic framework is applicable to a wide range of real world applications.

This framework of providing a web or network of inter related outputs based on inputs can be used for direct control in a number of application areas such as aircraft and rail systems automotive systems financial systems like insurance underwriting bank loan administration and brokerage systems industrial and home automation systems military and homeland security systems medical diagnostic and treatment systems and the like where the output values are translated into proportional electrical signals and the inputs are obtained from electrical signals from sensors or other input devices and may or may not be entered by a human operator. The small footprint of the control systems created with this invention makes it effective in small embedded applications. In these types of applications the present invention provides an intuitive programming mechanism where the programming is in terms if weighted importance of information and linkages between one position or action and another that compete in a hierarchical interaction. In these applications systems may configured to be responsible for evaluating changes in inputs so they can automatically react to changes in environmental factors changes in its available resources or manual inputs from operators.

This framework of providing a web or network of inter related outputs based on inputs can also be used for analysis of data and the like where the output values are translated into diagnostic recommendations. This diagnostic information can be used identify faulty or degrading segments of a complete system or to cause systems to adapt and reconfigure themselves without direct human intervention. By packaging the expertise of the best maintenance personnel or the best operators in the current invention by defining inputs as arguments and outputs as positions and linking the system features through linkages the most effective functionality can be integrated into these systems.

This framework of providing a web or network of inter related outputs based on inputs can also be used for information synthesis in a number of application areas such as computer based gaming economic simulations and strategic planning and the like where output values are translated into proportional values and the inputs are obtained from real or synthetic databases or other input mechanisms as well as human operators. The ability to model different environments with an intuitive programming mechanism where the programming is in terms of importance of information and linkages between one position or action and another allows users to create interactive models without legacy programming techniques that require specific implantation skills or traditional scripting models.

Referring now to a position display element may be associated with a position importance value PI defining the height of a graphically displayed rectangular box. The height of the box indicates the maximum range of a position value termed a modified value MV that is internally stored as a variable and manifest by a graphical marker of contrasting color fill within the box in the manner of a conventional bar chart.

A modified value connection point located below the position display element may allow for graphical linkages as described above communicating modified values to other graphical elements. Likewise position importance connection point may allow for graphical linkages as described above receiving position importance values from other graphical elements to change the position importance value

A clipper window may be associated with the position display element and may provide graphical elements indicating an upper clipper limit UCL and a lower clipper limit therebetween defining a clipper range corresponding to a similar range within the position display element of the graphical marker . The location of the upper clipper limit and lower clipper limit may be freely moved by graphical manipulation techniques to redefine the clipper range both in its extent and relative location with respect to the position display element

As has been described before the clipper window provides a clipper value CV that may be obtained at a graphical connection point located on upper clipper limit . This clipper value evaluates whether the modified value and thus the graphical marker is within the clipper range as described above clipping or truncating modified values outside of the clipper range . The clipper value may be connected by a graphical connector wire to another graphical element such as position importance connection point being the position importance input for a second position display element

The settings of the upper clipper limit and lower clipper limit indicating their height along the box of position display element is stored in two representations within the computer memory. The upper clipper limit may be stored as a percent value indicating a user determined percentage that the upper clipper limit is of the position importance value . This percentage definition allows the absolute position of upper clipper limit to change as the position importance value changes. The upper clipper limit can also be represented as an upper clipper value being a number generally representing the actual height of the upper clipper limit from the bottom of the rectangle of the position display element

Likewise lower clipper limit may be stored in computer memory as a percent value which in this case denotes a percentage of the non percentage upper clipper value or percent value . Lower clipper limit can also be represented as a lower clipper value again directly comparable to the modified value

Thus if the position importance value is 100 and the percent value of the upper clipper limit is 50 then the upper clipper value of the upper clipper limit will be 50. When the position importance value is changed for example to 75 the percent value of the upper clipper limit stays at 50 but the representation of the upper clipper value drops to 37.5.

Under similar circumstances if the position importance value is 100 and the percent value of the upper clipper limit is 50 and percent value of the lower clipper limit is 50 then the lower clipper value will be 25. And when the position importance value is decreased to 75 the representation of the lower clipper value will change to 18.75.

These definitions allow the relative proportion of clipper range to stay in constant proportion to the position importance value as a position importance value is scaled.

The graphical connection point formed by upper clipper limit may provide distinctly different types of functionality related to the clipper window depending on the particular graphical element to which the graphical connection point of upper clipper limit is connected. In the present invention functionality is described by wires between source and sink connection points. In the present invention when the upper clipper limit is connected for example by graphical connector wire to another graphical connection point for example to position importance connection point of position display element a clipper value is used to control the position importance of . As described above the clipper value is a function of the relative value of the modified value within the values represented by the clipper range of the clipper window

On the other hand when the connection point represented by the upper clipper limit is connected to a lower clipper limit of a second clipper window associated with a third position display element then the functionality described uses the upper clipper value of the source upper clipper limit to control the sink lower clipper value as represented by connecting wire . This upper clipper value when received by the connection element of the lower clipper limit causes the lower clipper limit to take on a lower clipper value equal to upper clipper value and to derive a percent value with respect to the position importance of position display element as may be appropriate.

Thus for example if the upper clipper value is calculated to be 30 the position importance value PI of the third position display element is 100 and the upper clipper value of the upper clipper limit is 60 then 50 will be associated with the percent value of the lower clipper limit

Referring now to along with in the case that the functionality described by the linkage between upper clipper attempts to drive lower clipper to a value higher than upper clipper the lower clipper value of the lower clipper limit is greater than the upper clipper value of upper clipper limit as indicated by decision block then the lower clipper value is set equal to 100 of the upper clipper value . Otherwise as described earlier and indicated by process block the lower clipper value takes on the value from the upper clipper value

In this way clipper windows and may be ensured to define contiguous ranges regardless of movement of upper clipper limit . This allows a particular input variable dealt with in a graphical manner to be easily divided into sub ranges for separate treatment for example in the creation of functions or curves having continuous values and ranges.

The present invention also provides an additional functional connection from lower clipper limits such as that may for example go to an argument display element and hence affect the modified value of another position display element . The idea here is to create a modified value MV for position display element exactly equal in value to the lower clipper value of clipper window thus assisting in generating the necessary offsets to create semi continuous functions. Thus lower clipper value may participate in the control of modified value in another position display element along with any other arguments that might be attached to position display element

It is specifically intended that the present invention not be limited to the embodiments and illustrations contained herein. It should be noted that while graphical bar chart type displays are shown the clipper concept and the generation of contiguous sub ranges can be obtained with other graphical elements having graphical markers that move along a defined path such as a line or a simple curve. Accordingly modified forms of the embodiments shown and described including portions of the embodiments and including combinations of elements from different embodiments are intended to come within the scope of the following claims.

