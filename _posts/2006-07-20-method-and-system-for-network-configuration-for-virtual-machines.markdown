---

title: Method and system for network configuration for virtual machines
abstract: A method for changing network configuration parameters that includes generating a request to change a network configuration parameter, where the request is generated by a virtual machine, sending the request to a virtual network interface card (VNIC) associated with the virtual machine, sending the request to a VNIC configuration database associated with the VNIC, determining whether the virtual machine is allowed to change the network configuration parameter, if the virtual machine is allowed to change the network configuration parameter, updating the VNIC configuration database and VNIC to reflect the change in the network configuration parameter, and notifying the virtual machine that the change in network configuration parameter is allowed, and if the virtual machine is not allowed to change the network configuration parameter, dropping the request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08713202&OS=08713202&RS=08713202
owner: Oracle America, Inc.
number: 08713202
owner_city: Redwood City
owner_country: US
publication_date: 20060720
---
The present application contains subject matter that may be related to the subject matter in the following U.S. applications filed on Apr. 22 2005 and assigned to the assignee of the present application Method and Apparatus for Managing and Accounting for Bandwidth Utilization Within A Computing System with U.S. application Ser. No. 11 112 367 Method and Apparatus for Consolidating Available Computing Resources on Different Computing Devices with U.S. application Ser. No. 11 112 368 Assigning Higher Priority to Transactions Based on Subscription Level with U.S. application Ser. No. 11 112 947 Method and Apparatus for Dynamically Isolating Affected Services Under Denial of Service Attack with U.S. application Ser. No. 11 112 158 Method and Apparatus for Improving User Experience for Legitimate Traffic of a Service Impacted by Denial of Service Attack with U.S. application Ser. No. 11 112 629 Method and Apparatus for Limiting Denial of Service Attack by Limiting Traffic for Hosts with U.S. application Ser. No. 11 112 328 Hardware Based Network Interface Per Ring Resource Accounting with U.S. application Ser. No. 11 112 222 Dynamic Hardware Classification Engine Updating for a Network Interface with U.S. application Ser. No. 11 112 934 Network Interface Card Resource Mapping to Virtual Network Interface Cards with U.S. application Ser. No. 11 112 063 Network Interface Decryption and Classification Technique with U.S. application Ser. No. 11 112 436 Method and Apparatus for Enforcing Resource Utilization of a Container with U.S. application Ser. No. 11 112 910 Method and Apparatus for Enforcing Packet Destination Specific Priority Using Threads with U.S. application Ser. No. 11 112 584 Method and Apparatus for Processing Network Traffic Associated with Specific Protocols with U.S. application Ser. No. 11 112 228.

The present application contains subject matter that may be related to the subject matter in the following U.S. applications filed on Oct. 21 2005 and assigned to the assignee of the present application Method and Apparatus for Defending Against Denial of Service Attacks with U.S. application Ser. No. 11 255 366 Router Based Defense Against Denial of Service Attacks Using Dynamic Feedback from Attacked Host with U.S. application Ser. No. 11 256 254 and Method and Apparatus for Monitoring Packets at High Data Rates with U.S. application Ser. No. 11 226 790.

The present application contains subject matter that may be related to the subject matter in the following U.S. applications filed on Jun. 30 2006 and assigned to the assignee of the present application Network Interface Card Virtualization Based On Hardware Resources and Software Rings with U.S. application Ser. No. 11 479 046 Method and System for Controlling Virtual Machine Bandwidth with U.S. application Ser. No. 11 480 000 Virtual Switch with U.S. application Ser. No. 11 480 261 System and Method for Virtual Network Interface Cards Based on Internet Protocol Addresses with U.S. application Ser. No. 11 479 997 Virtual Network Interface Card Loopback Fastpath with U.S. application Ser. No. 11 479 946 Bridging Network Components with U.S. application Ser. No. 11 479 948 Reflecting the Bandwidth Assigned to a Virtual Network Interface Card Through Its Link Speed with U.S. application Ser. No. 11 479 161 Method and Apparatus for Containing a Denial of Service Attack Using Hardware Resources on a Virtual Network Interface Card with U.S. application Ser. No. 11 480 100 Virtual Network Interface Cards with VLAN Functionality with U.S. application Ser. No. 11 479 998 Method and Apparatus for Dynamic Assignment of Network Interface Card Resources with U.S. application Ser. No. 11 479 817 Generalized Serialization Queue Framework for Protocol Processing with U.S. application Ser. No. 11 479 947 Serialization Queue Framework for Transmitting Packets with U.S. application Ser. No. 11 479 143.

The present application contains subject matter that may be related to the subject matter in the following U.S. applications filed on Jul. 20 2006 and assigned to the assignee of the present application Low Impact Network Debugging with U.S. application Ser. No. 11 489 926 Reflecting Bandwidth and Priority in Network Attached Storage I O with U.S. application Ser. No. 11 489 936 Priority and Bandwidth Specification at Mount Time of NAS Device Volume with U.S. application Ser. No. 11 489 934 Notifying Network Applications of Receive Overflow Conditions with U.S. application Ser. No. 11 490 821 Host Operating System Bypass for Packets Destined for a Virtual Machine with U.S. application Ser. No. 11 489 943 Multi Level Packet Classification with U.S. application Ser. No. 11 490 745 Method and System for Automatically Reflecting Hardware Resource Allocation Modifications with U.S. application Ser. No. 11 490 582 Multiple Virtual Network Stack Instances Using Virtual Network Interface Cards with U.S. application Ser. No. 11 489 942 Method and System for Network Configuration for Containers with U.S. application Ser. No. 11 490 479 Network Memory Pools for Packet Destinations and Virtual Machines with U.S. application Ser. No. 11 490 486 Multiple Virtual Network Stack Instances with U.S. application Ser. No. 11 489 929 and Shared and Separate Network Stack Instances with U.S. application Ser. No. 11 489 933.

Network traffic is transmitted over a network such as the Internet from a sending system e.g. a computer system to a receiving system e.g. a computer system via a physical network interface card NIC . The NIC is a piece of hardware found in a typical computer system that includes functionality to send and receive network traffic. Typically network traffic is transmitted in the form of packets where each packet includes a header and a payload. The header contains information regarding the source address destination address size transport protocol used to transmit the packet and various other identification information associated with the packet. The payload contains the actual data to be transmitted from the network to the receiving system.

Each of the packets sent between the sending system and receiving system is typically associated with a connection. The connection ensures that packets from a given process on the sending system reach the appropriate process on the receiving system. Packets received by the receiving system via a NIC associated with the receiving system are analyzed by a classifier to determine the connection associated with the packet.

Typically the classifier includes a connection data structure that includes information about active connections on the receiving system. The connection data structure may include the following information about each active connection i the queue associated with the connection and ii information necessary to process the packets on the queue associated with the connection. Depending on the implementation the connection data structure may include additional information about each active connection. Such queues are typically implemented as first in first out FIFO queues and are bound to a specific central processing unit CPU on the receiving computer system. Thus all packets for a given connection are placed in the same queue and are processed by the same CPU. In addition each queue is typically configured to support multiple connections.

Once the classifier determines the connection associated with the packets the packets are sent to a temporary data structure e.g. a receive ring on the NIC and an interrupt is issued to the CPU associated with the queue.

In response to the interrupt a thread associated with the CPU to which the serialization queue is bound retrieves the packets from the temporary data structure and places them in the appropriate queue. Once packets are placed in the queue those packets are processed in due course. In some implementations the queues are implemented such that only one thread is allowed to access a given queue at any given time.

In general in one aspect the invention relates to a method for changing network configuration parameters. The method comprises generating a request to change a network configuration parameter wherein the request is generated by a virtual machine sending the request to a virtual network interface card VNIC associated with the virtual machine sending the request to a VNIC configuration database associated with the VNIC determining whether the virtual machine is allowed to change the network configuration parameter if the virtual machine is allowed to change the network configuration parameter updating the VNIC configuration database and VNIC to reflect the change in the network configuration parameter and notifying the virtual machine that the change in network configuration parameter is allowed and if the virtual machine is not allowed to change the network configuration parameter dropping the request.

In general in one aspect the invention relates to a method for changing network configuration parameters. The method comprises generating a request to change a network configuration parameter associated with a virtual machine wherein the request is generated by a host and the virtual machine is executing on the host sending the request to a VNIC configuration database associated with the VNIC updating the VNIC configuration database and VNIC to reflect the change in the network configuration parameter and notifying the virtual machine that the network configuration parameter has changed.

In general in one aspect the invention relates to a host. The host comprises a virtual machine configured to generate a first request to change a first network configuration parameter associated with the virtual machine and send the first request to a virtual network interface card VNIC the VNIC operatively connected to the virtual machine configured to receive the first request from the virtual machine and send the first request to a VNIC configuration database the VNIC configuration database operatively connected to the VNIC configured to receive the first request determine whether the virtual machine is allowed to change the first network configuration parameter if the virtual machine is allowed to change the first network configuration parameter update the VNIC configuration database and VNIC to reflect the change in the first network configuration parameter and notify the virtual machine that the requested change in the first network configuration parameter is allowed and if the virtual machine is not allowed to change the first network configuration parameter drop the first request.

Other aspects of the invention will be apparent from the following description and the appended claims.

Specific embodiments of the invention will now be described in detail with reference to the accompanying figures. Like elements in the various figures are denoted by like reference numerals for consistency.

In the following detailed description of embodiments of the invention numerous specific details are set forth in order to provide a more thorough understanding of the invention. However it will be apparent to one of ordinary skill in the art that the invention may be practiced without these specific details. In other instances well known features have not been described in detail to avoid unnecessarily complicating the description.

In general embodiments of the invention relate to a method and system for changing network configuration parameters. Further embodiments of the invention provide a method and system for limiting the network configuration parameters a virtual machine may change. In addition embodiments of the invention provide a method and system for monitoring outbound packets from a virtual machine to ensure that the virtual machine has not changed a network configuration parameter that is not authorized to change.

In one embodiment of the invention a network configuration parameter corresponds to any parameter that is associated with networking. Examples of network configuration parameters may include but are not limited to Media Access Control MAC address Internet Protocol IP address IP routing algorithm e.g. Routing Information Protocol RIP Open Shortest Path First OSPF etc. transport layer protocol e.g. Transmission Control Protocol TCP User Datagram Protocol UDP default route i.e. the route set in the IP routing table used when no other entry in the IP routing table matches the destination IP address of the packet TCP parameters i.e. parameters in the TCP that may be changed for example bandwidth delay product buffer size etc. IP parameters i.e. parameters in the IP that may be changed and TCP port number.

Continuing with the discussion of once a packet has been classified the packet is forwarded to the appropriate RR . Typically each RR is configured to receive packets for a specific virtual machine or a particular packet destination . In one embodiment of the invention each RR corresponds to a buffer in the NIC which is configured to store a finite number of packets.

The host includes a device driver not shown a number of virtual network interface cards VNICs one or more virtual network stacks VNSs one or more interfaces one or more packet destinations one or more virtual machines VMs and a VNIC configuration database . Each of the aforementioned components is described below.

Though not shown in the device driver is configured to expose the NIC to the host . Further the device driver is configured to expose the individual RRs to the host . Exposing the aforementioned components to the host includes providing application programming interfaces APIs to allow the host or components executing therein to interact with the NIC and the RRs on the NIC . Interacting with the NIC typically includes obtaining packets from the NIC and sending packets to the NIC .

Each VNIC in the host includes the same functionality as the NIC . However unlike the NIC the VNICs are implemented in the host typically in a MAC layer of the host . To all components above the VNIC e.g. the VNS the interfaces the packet destination and the VMs the VNICs appear as physical NICs.

Each VNIC is associated with a MAC address and an IP address. Further each VNIC may be optionally associated with a TCP port. Further each VNIC is associated with a RR such that the VNICs obtain packets from the RR with which they are associated. For example VNIC obtains packets from RR .

As discussed above each VNIC may be associated with a VNS or an interface . The VNS is described in below. In one embodiment of the invention each interface is interposed between a VNIC and a VM . Each interface is configured to receive a packet from an associated VNIC and process the packet as required to place it in the address space of the VM with which the interface is associated. In one embodiment of the invention processing the packet involves flipping the packet i.e. the bits that make up the packet are flipped such that the most significant bit becomes the least significant bit and vise versa . The result of flipping the packet is that the packet is placed in the address space of the corresponding virtual machine . As a result of placing the packet in the address space of the VM the VM is now aware of the packet and can proceed to process the packet.

In one embodiment of the invention the packet destination corresponds to a process executing in the host where the process is configured to send and receive packets but does not include its own internal networking stack. Rather the packet destination uses the VNS executing in the host . Examples of packet destinations include services i.e. applications executing in the host and containers. In one embodiment of the invention a container corresponds to an isolated execution environment within the host where the container and the host share a common kernel but the processes executing in the container are restricted to execute in the container and have limited access to resources not assigned to the container. An example of a container is a Solaris Container. Solaris is a trademark of Sun Microsystems Inc. of California USA .

In one embodiment of the invention a VM corresponds to an isolated execution environment executing on the host . However unlike packet destinations the VMs do not share the same kernel as the host . Rather each VM executes its own operating system OS which may be different from the OS executing on the host. Accordingly each VM is executing on its own a separate kernel.

In addition each VM includes a pseudo driver PDriver and its own VM network stack . The PDriver corresponds to a component in the VM that is configured to interact with the interface associated with the VM . The PDriver emulates a device driver discussed above not shown for the particular VM . Accordingly to the VM network stack in the VM the PDriver corresponds to a real device driver which is connected to a physical NIC.

The PDriver also maintains the MAC address and the IP address associated with the VM . In one embodiment of the invention the MAC address and IP address maintained by the PDriver is the same as the MAC address and IP address associated with the corresponding VNIC . For example VNIC is associated with the same MAC address and IP address as PDriver .

In one embodiment of the invention each VM network stack includes functionality to process inbound i.e. packets received by the VM and outbound packets i.e. packet issued by the VM or a process executing therein . The aforementioned functionality to process packets may include but is not limited to IP layer processing and transport layer processing. IP layer processing corresponds to processing the packets in accordance with IP and transport layer processing corresponds to processing packets in accordance with a transport layer protocol such as Transmission Control Protocol TCP User Datagram Protocol UDP etc.

In one embodiment of the invention the VNIC configuration database is configured to maintain all network configuration parameters associated with the networking components in the host . Accordingly the VNIC configuration database may include network configuration parameters for each packet destination each VM and each VNIC . Further the VNIC configuration database also includes a listing of which network configuration parameters each VM and or each packet destination is allowed to change. In addition to listing the network configuration parameters the VM may change the VNIC configuration database may also indicate the allowable values the VM or packet destination may change a given network configuration parameter to. For example the VNIC configuration database may allow VM to change its IP address but the VNIC configuration database may include a list of IP addresses that the VM may change its IP address to. Accordingly VM is only allowed to change its IP address to one of the IP addresses in the aforementioned list. Finally as shown in the VNIC configuration database is configured to receive requests to change network configuration parameters from the VMs via the associated VNICs .

In one embodiment the IP layer is configured to receive packets from the VNIC associated with the VNS e.g. VNS receives packets from VNIC in . Further the IP layer is configured to receive packets from the transport layer . In one embodiment of the invention the IP layer is configured to perform IP level processing for both inbound and outbound packets.

Continuing with the discussion of the inbound VSQ is configured to receive packets from the IP layer . The inbound VSQ corresponds to a queue data structure and is configured to queue packets received from the IP layer prior to the packets being processed by the transport layer . In one embodiment of the invention the inbound VSQ may be used to control the number of packets being received by the packet destination e.g. associated with VNS. The inbound VSQ may control the bandwidth by limiting the number of packets in the VSQ and preventing additional packets from entering the VNS until the inbound VSQ has less than a threshold number of packets.

In one embodiment of the invention the transport layer is configured to process inbound and outbound packets in accordance with Transmission Control Protocol TCP User Datagram Protocol UDP or both UDP and TCP. Other protocols may be supported by the transport layer .

In one embodiment of the invention the outbound VSQ is a queue data structure configured to receive packets from the packet destination e.g. with which the VNS is associated. Further the outbound VSQ is configured to store packets prior to sending the received packets to the transport layer . In one embodiment of the invention the outbound VSQ is also configured to control the flow of packets from the packet destination e.g. associated with the VNS to the VNS . In one embodiment of the invention the outbound VSQ or a related process is configured to block an application from sending packets to the outbound VSQ if the packet destination e.g. is attempting to issue packets at a higher rate than the outbound bandwidth allocated to the packet destination e.g. . Further the outbound VSQ or a related process is configured to notify the packet destination e.g. when it is no longer blocked from issuing packets to the VNS .

In one embodiment of the invention the inbound VSQ and outbound VSQ are each configured to enforce the manner in which packets are processed. Specifically the inbound VSQ and outbound VSQ may be configured to enforce the packet processing requirements imposed by the transport layer . For example TCP requires serial processing of packets. Thus the inbound VSQ and outbound VSQ may require all threads accessing the inbound VSQ and outbound VSQ to conform to a mutual exclusion policy. In one embodiment of the invention the mutual exclusion policy requires that only one thread may access the VSQ inbound or outbound at a time. Thus if two threads are attempting to access a given VSQ inbound or outbound one thread must wait until the other thread has finished accessing the VSQ inbound or outbound .

Alternatively if the transport layer only supports UDP then the inbound VSQ and outbound VSQ may be configured to allow concurrent access. Said another way two or more threads may concurrently access the VSQ inbound or outbound . In one embodiment of the invention if the transport layer is configured to process both TCP and UDP packets then the inbound VSQ and outbound VSQ are configured to conform to the more stringent standard e.g. TCP if the transport layer supports both TCP and UDP .

In one embodiment of the invention the inbound VSQ and the outbound VSQ are implemented as a single bi directional VSQ. In such cases the bi directional VSQ includes a single set of configuration parameters discussed above to enforce the manner in which packets are processed. Further the enforcement of the configuration parameters is performed on a VSQ basis as opposed to a per direction basis . For example if the bi directional VSQ enforces a mutual exclusion policy then only one thread may access the bi directional VSQ at a time.

The VNIC configuration database then determines whether the VM is allowed to change the network configuration parameter as requested ST . For example example if VM requested to change its MAC address then the VNIC configuration database determines whether VM is allowed to change its MAC address based on the information included in the VNIC configuration database. If the change is not allowed then the network configuration parameter change is not committed to the VNIC configuration database ST and the process ends.

Alternatively if the network configuration parameter change is allowed i.e. the VM is allowed to change the network configuration parameter and optionally the VM is allowed to change the network configuration parameter to the value specified in the request then the VNIC configuration database is updated to reflect the change in the network configuration parameter ST . Optionally the VNIC associated with the VM is subsequently updated ST . ST is optional as the network configuration parameter that is changed may not affect the VNIC. For example if the IP address is changed then the VNIC is updated to include the new IP address. However if the IP routing algorithm was changed then the VNIC is not affected and thus is not changed.

The VM is subsequently informed via a request sent by the VNIC configuration database to the associated VNIC that the network configuration parameter has been changed ST . Though not shown in upon receiving the notification of the acceptance of the change in network configuration parameter the associated PDriver and or other portions of the VM network stack may also be updated to reflect the change in network configuration parameter.

Optionally the VNIC associated with the VM is subsequently updated ST . ST is optional as the network configuration parameter that is changed may not affect the VNIC. For example if the IP address is changed then the VNIC is updated to include the new IP address. However if the IP routing algorithm was changed then the VNIC is not affected and thus is not changed.

The VM is subsequently informed via a request sent by the VNIC configuration database to the associated VNIC that the network configuration parameter has been changed ST . Though not shown in upon receiving the notification the change in network configuration parameter the associated PDrvier and or other portions of the VM network stack may also be updated to reflect the change in network configuration parameter.

The VM subsequently sends the packet to the associated VNIC ST . Typically the packet is received by the associated VNIC via an interface associated with the VM. The VNIC then determines whether the source MAC address i.e. the MAC address associated with the VM in the header of the packet is the same as the MAC address in the VNIC i.e. the VNIC MAC address ST . If the source MAC address is not the same as the MAC address in the VNIC then the packet is dropped and optionally a warning is issued to the host that the VM is attempting to send spoofed packets ST . Alternatively if the source MAC address is the same as the MAC address in the VNIC then the packet is sent towards the destination MAC address listed in the header of the packet ST .

An embodiment of the invention may be implemented on virtually any type of computer regardless of the platform being used. For example as shown in a networked computer system includes a processor associated memory a storage device and numerous other elements and functionalities typical of today s computers not shown . The networked computer may also include input means such as a keyboard and a mouse and output means such as a monitor . The networked computer system is connected to a local area network LAN or a wide area network via a network interface connection not shown . Those skilled in the art will appreciate that these input and output means may take other forms. Further those skilled in the art will appreciate that one or more elements of the aforementioned computer may be remotely located and connected to the other elements over a network. Further software instructions to perform embodiments of the invention may be stored on a computer readable medium such as a compact disc CD a diskette a tape or any other physical computer readable storage device.

While the invention has been described with respect to a limited number of embodiments those skilled in the art having benefit of this disclosure will appreciate that other embodiments can be devised which do not depart from the scope of the invention as disclosed herein. Accordingly the scope of the invention should be limited only by the attached claims.

