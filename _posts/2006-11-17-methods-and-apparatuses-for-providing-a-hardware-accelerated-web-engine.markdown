---

title: Methods and apparatuses for providing a hardware accelerated web engine
abstract: Methods and apparatuses for providing hardware acceleration of a web browser are disclosed. In one embodiment, a method of operating a web browser on a computer system includes analyzing a data stream having a plurality of fragments. The method further includes determining what fragments of the data stream should be rendered for storage into separate backing stores. The method further includes rendering the fragments into raster images intended for hardware acceleration. The method further includes storing the raster images in the backing stores located in a graphics processing unit.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08234392&OS=08234392&RS=08234392
owner: Apple Inc.
number: 08234392
owner_city: Cupertino
owner_country: US
publication_date: 20061117
---
The subject matter of the present disclosure relates to hardware accelerating a web browser with a graphics composition engine.

A web browser is a software application that enables a user to display and interact with text images video and other information typically located on a web page at a website on the World Wide Web or a local area network. Text and images on a web page can contain hyperlinks to other web pages at the same or different websites. Web browsers allow a user to quickly and easily access information provided on many web pages at many websites by traversing these links. Web browsers available for personal computers include Safari Internet Explorer Firefox Netscape and Opera.

The file format for a web page is usually hyper text markup language HTML and is transferred with a hyper text transfer protocol HTTP . Most browsers natively support a variety of formats in addition to HTML such as the extensible markup language XML and image formats and can be extended to support more through the use of plug ins. The combination of HTML content type and uniform resource locator URL specification allows web page designers to embed images animations video sound and streaming media into a web page or to make them accessible through the web page. A style sheet language such as cascading style sheets CSS may be used to describe the presentation of a document written in a markup language. CSS is used by both the authors and readers of web pages to define colors fonts layout and other aspects of document presentation. CSS is designed to enable the separation of document content written in a markup language from document presentation written in CSS.

A typical web browser of the prior art retrieves a data stream of web content expressed in a markup language and analyzes components or elements of the data stream which can be a web page. The web browser builds a data structure in the form of a logic tree with nodes. Each node has a height width position and order on the web page. The nodes of the data structure are rendered as an image into a backing store located in main memory. Rendering is the process of generating an image from a model by means of software programs. The model is a description of objects in a strictly defined language or data structure. The render process consumes substantial processing and memory resources located in main memory.

A data stream may have dynamic content that changes based on user input JavaScript code execution video updating or for other reasons. For example a component of a data stream may be modified moved resized animated or changed in some way. A component being moved creates damage to content in its wake that requires other components to be redrawn. A web browser displaying a web page with dynamic content would need to re render the entire logic tree or at least the components damaged by the move. The re rendering process consumes processing and memory resources located on a computer. Also the re rendering process requires additional time and slows the performance of the web browser.

The subject matter of the present disclosure is directed to overcoming or at least reducing the effects of one or more of the problems set forth above.

Methods and apparatuses for providing a hardware accelerated web engine are disclosed. In one embodiment a method for hardware accelerating a web browser on a computer system includes analyzing a data stream having a plurality of fragments with the data stream being processed by the web browser. The method further includes determining what fragments of the data stream should be rendered for storage into separate backing stores. The method further includes rendering the fragments into raster images intended for hardware acceleration. The method further includes causing the storage of the raster images in the backing stores located in a graphics processing unit. The web browser provides information identifying the raster images to the graphics processing unit.

In another embodiment a method includes constructing a data structure having nodes associated with elements of a web page. The method further includes monitoring a state for each node of the data structure. The state of each node indicates whether the node has changed from a previous version of the node. The method further includes determining whether a change of the state of a node requires rendering the node into a raster image which represents a decomposed portion of a complete image. The method further includes rendering the node into a raster image if rendering is necessary. The method further includes storing the raster image in a retained backing store located in a graphics processing unit if rendering is necessary. The method further includes compositing raster images located in retained backing stores associated with the data structure into a complete image in order to hardware accelerate the operation of the web browser.

The foregoing summary is not intended to summarize each potential embodiment or every aspect of the present disclosure.

While the subject matter of the present disclosure is susceptible to various modifications and alternative forms specific embodiments thereof have been shown by way of example in the drawings and are herein described in detail. The figures and written description are not intended to limit the scope of the inventive concepts in any manner. Rather the figures and written description are provided to illustrate the inventive concepts to a person skilled in the art by reference to particular embodiments as required by 35 U.S.C. 112.

As shown in the computer system which is a form of a data processing system includes a bus which is coupled to a microprocessor and a ROM and volatile RAM and a non volatile memory . The microprocessor which may be for example a microprocessor from Intel or a G3 or G4 microprocessor from Motorola Inc. or IBM is coupled to cache memory as shown in the example of . The bus interconnects these various components together and also interconnects these components and to a display controller and display device s which may include display devices and a graphics processing unit GPU and to peripheral devices such as input output I O devices which may be mice keyboards modems network interfaces printers scanners video cameras and other devices which are well known in the art. The GPU may include a microprocessor and a plurality of backing stores which store images prior to being displayed with display device s . Typically the input output devices are coupled to the system through input output controllers .

The volatile RAM is typically implemented as dynamic RAM DRAM which requires power continually in order to refresh or maintain the data in the memory. The non volatile memory is typically a magnetic hard drive or a magnetic optical drive or an optical drive or a DVD RAM or other type of memory systems which maintain data even after power is removed from the system. Typically the non volatile memory will also be a random access memory although this is not required. While shows that the non volatile memory is a local device coupled directly to the rest of the components in the data processing system it will be appreciated that the present disclosure may utilize a non volatile memory which is remote from the system such as a network storage device which is coupled to the data processing system through a network interface such as a modem or Ethernet interface. The bus may include one or more buses connected to each other through various bridges controllers and or adapters as is well known in the art. In one embodiment the I O controller includes a USB Universal Serial Bus adapter for controlling USB peripherals and or an IEEE 1394 bus adapter for controlling IEEE 1394 peripherals.

It will be apparent from this description that aspects of the present disclosure may be embodied at least in part in software. That is the techniques may be carried out in a computer system or other data processing system in response to its processor such as a microprocessor executing sequences of instructions contained in a memory such as ROM volatile RAM non volatile memory cache or a remote storage device. In various embodiments hardwired circuitry may be used in combination with software instructions to implement the present disclosure. Thus the techniques are not limited to any specific combination of hardware circuitry and software nor to any particular source for the instructions executed by the data processing system. In addition throughout this description various functions and operations are described as being performed by or caused by software code to simplify description. However those skilled in the art will recognize what is meant by such expressions is that the functions result from execution of the code by a processor such as the microprocessor .

At least one embodiment of the present disclosure seeks to hardware accelerate the operation of a web browser with a graphics composition or web engine application utilizing the GPU of the data processing system . The web browser includes a set of instructions to determine data for graphics acceleration on a graphics processing unit. The web browser further includes a set of instructions to transfer the data to the GPU .

The web browser may retrieve a description of a web page from a web server which is then parsed into a data structure that is stored in a memory component of the data processing system . The data structure is a logical representation of components or elements of the web page organized into a tree of render nodes. The nodes are conceptual and organizational. In one embodiment the data structure enforces the order in which elements draw but does not determine the surface or surfaces to which the elements draw. In this embodiment all render nodes render to the same underlying graphics surface. In another embodiment the data structure enforces the order in which elements draw and also determines the surface or surfaces to which the elements draw.

In general a separate render node is used for each sequence of renderable objects that occurs within a normal flow of a style sheet language. Most elements are in the normal flow. Text is typically within the normal flow while images are not in the normal flow. Each web page or frame has its own root node with sub nodes being instantiated as needed according to the properties of the renderable objects a node contains. If a web page has nothing outside its normal flow a single node will be used for all elements of the web page.

Each node has a specified position relative to its parent node as well as a Z index which defines whether the node should be drawn behind or on top of the other nodes. The web browser application may analyze the data structure and determine whether a node of the data structure should be rendered into a separate backing store located in the GPU . The web browser application may render the node into a raster image that is sent to the backing store located in the GPU . The raster image represents a decomposed portion of a complete image. The microprocessor of the GPU may execute a graphics application to store the raster image in the backing store . Other raster images associated with the data structure are also stored in the backing store. The graphics application may then composite the raster images stored in the backing store to create a final image displayed as a web page.

As described above a web browser retrieves web content in the form of a data stream such as an HTML document which is then parsed into a first data structure that is stored in main memory of the data processing system . A style sheet language such as cascading style sheets CSS may be used to describe the presentation of a HTML or other markup language document. The first data structure is a logical representation of components or elements of the web page in the form of a render tree having render nodes. The microprocessor executing a web browser software application may analyze the first data structure and determine what render nodes of the first data structure should be rendered for storage into separate backing stores located in the GPU . The web browser then renders the render tree into a second data structure or layer tree that includes raster images associated with the render nodes of the render tree. Each raster image represents a decomposed portion of a complete or final image. The raster images are stored in the backing stores . In one embodiment each raster images is stored in a separate retained backing store. The microprocessor executes a graphics application in order to composite the raster images into a final image displayed as a web page.

A node may include an image element a graphic element a text element a vector element and or a media element. Each node is defined by a property selected from the group consisting of a position a coordinate system a transform and a relationship to another node. In one embodiment each node is rendered into a raster image stored in a single retained backing store.

The web browser may receive an input to animate a component of the web page such as component . The node of the render tree associated with component has a state that changes in response to the input. For example a node being moved may change from state X to state Y which represents a change in position of the node. The web browser determines if animation of the component requires re rendering of any node of the render tree. A graphics application may instruct the GPU to composite the raster images into a final image displayed as web page if no re rendering of any node of the render tree is required.

For example illustrates resizing the component of the web page of according to certain teachings of the present disclosure. In this case of resizing the web browser determines that the resizing of the component does not require re rendering of any node of the render tree. The GPU is instructed to re composite the raster images with the raster image associated with component being resized as illustrated in to display the web page with component being the resized version of component .

A dirty region is one or more nodes of the render tree that have changed relative to their immediate prior versions. For example the dirty regions can be indicated by changing the state of the associated nodes of the render tree that have been changed relative to their immediately prior version. During rendering only those nodes that have changed relative to their immediately prior version are rendered. For re rendering was not necessary for the resizing of the component into component . Rather a graphics application performs the resizing during the composition of raster images to form the web page .

A web browser of the prior art would have re rendered the node associated with component in order to generate component . Also the nodes associated with components and may have been re rendered as these components are in the wake of the resizing of component into component . Thus the web browser of the prior art requires more processing and accessing of memory resources to perform the additional re rendering.

A web browser of the prior art would have re rendered the nodes associated with components and in order to generate components and because the nodes associated with components and are in the wake of the reshaping of component into component . Thus the web browser of the prior art requires more processing and accessing of memory resources to perform the additional re rendering.

In one embodiment the method hardware accelerates the formation of a web page in a web browser with a graphics processing unit that can quickly and efficiently composite raster images stored in backing stores. Each backing store may store one fragment of the data stream which may be a web page having a plurality of elements expressed in HTML or CSS. In another embodiment the web browser is configured with no hardware acceleration of the formation of a web page.

As previously discussed a separate node is used for each sequence of renderable objects that occurs within a normal flow of a style sheet language. Most elements are in the normal flow. Each web page or frame has its own root node with sub nodes being instantiated as needed according to the properties of the renderable objects a node contains. If a web page has nothing outside its normal flow a single node will be used for all elements of the web page.

In one embodiment render objects draw in the coordinate system of the root frame. Each render object is positioned relative to their parent with horizontal and vertical offsets.

The web browser may determine what elements should be rendered from a render tree associated with the elements of the web page into raster images with each raster image stored in a separate backing store. Each backing store is associated with an independent layer of a layer tree in the form of a raster image. The layer tree has one or more nodes that may be associated with the nodes of the render tree. The web browser determines what elements to render from the render tree into raster images with each raster image stored in a separate backing store in a variety of ways. For example a backing store may be assigned for each element of the web page. Alternatively an independent layer may be allocated for each node of the render tree.

In one embodiment an element may be rendered into a raster image stored in a separate backing store associated with an independent layer if the element has a specific attribute associated with the element. The specific attributes or properties may include opacity explicit position relative position explicit Z ordering or content overflow. The terms attribute and property may be used interchangeably in the present disclosure . Opacity refers to the level of opaqueness or inversely the level of transparency for a given layer. Explicit position refers to the x and y coordinate positions of an element on a web page. Relative position refers to the x and y coordinate positions of an element in reference to another element or component on a web page. Explicit Z ordering refers to the front to back or back to front ordering of elements on a web page based on the Z index which can be modified to alter the ordering of elements.

Content overflow occurs if content is larger than the area that has been reserved for the content. The style property overflow controls the rendering behavior of such elements. The content may be clipped to the boundary of the element or the content may be allowed to render beyond the boundary of the element. In one embodiment an independent layer may be allocated for an element having a combination of specific attributes which individually are not sufficient to receive an independent layer for the element.

An independent layer may be allocated for each element that provides scripting of the web page such as JavaScript code execution. An independent layer may be allocated for each element associated with an explicit indication that the element should be an independent layer. The explicit indication may be associated with the render node of the render tree. An independent layer may be allocated for certain types of content e.g. video as indicated by a web server or a file extension of the content.

An independent layer may be allocated for each element requiring animation which is defined as a change or modification of a component or fragment of the web page in a given time period. Animations requiring an independent layer may include a video update or changing a shape which change bit values stored in the backing stores. Animations not requiring an independent layer may include resizing moving or altering the opacity.

An independent layer may be allocated for a plug in or add on model such as a video plug in that allows a web page author to include video in a web page. The web browser is configured to interface with the plug in model which may receive a node of the render tree. The plug in model determines how it would like to draw using its own facilities or having the node of the render tree rendered into a backing store for acceleration in the GPU.

The previously discussed attributes that trigger the creation of a new independent layer may be changed or extended as necessary. For example a scalable vector graphics SVG language may have renderable classes that override the previous discussion of attributes triggering independent layers in order to keep the render tree shallow.

The method further includes rendering the node into a raster image if rendering is necessary at block . In one embodiment the web browser performs the rendering at block . The browser may have knowledge of the contents of the backing stores if it created the contents of the backing stores. Otherwise a graphics processing unit GPU having the backing stores will have to provide this information to the browser. The method further includes storing the raster image in a retained backing store located in a graphics processing unit GPU if rendering is necessary at block . The method further includes compositing the backing stores associated with the data structure at block . If rendering is not necessary the method further includes compositing the backing stores associated with the data structure at block . The data structure may be a render tree organized in the form of nodes representing a grouping of elements of the web page.

Rendering may be necessary at block if the change of state of a node occurs based on the shape changing or a updating a video frame. Rendering may not be necessary at block if the change of state of an attribute of a node occurs based on a change in position Z order opacity or scale.

The rendering process occurs based on using existing techniques of a platform graphics library in order to create the graphics primitives of nodes of the second data structure. The method further includes compositing the raster images stores in the backing stores to construct a first final image displayed as a web page at block .

The first data structure may include a plurality of render nodes that form a render tree. The second data structure may include a plurality of nodes with each node representing an independent layer to form a layer tree. Each independent layer of the layer tree may be associated with one node of the render tree. Alternatively multiple nodes of the render tree may be associated with a single layer of the layer tree. Also multiple layers of the layer tree may be associated with a single node of the render tree.

In certain embodiments the API transfers a first call with redraw instructions for a set of render nodes in a first data structure having a plurality of render nodes. The layer nodes in a second data structure that are affected by the redraw instructions are then determined. The API transfers a second call to the second data structure passing the redraw instructions and the affected layer nodes. Given that second call a web browser application may determine which of the layer nodes need re rendering and what render nodes within those layer nodes need re rendering and what regions within those layers are damaged such as a rectangular region. The API transfers a third call to the first data structure with render instructions for each set of render nodes that need to be rendered within each of the layers. Once the render nodes have been re rendered the parts of the decomposed raster images in the backing stores in the second data structure are re composited to construct an image to be displayed to show the changes to the web page.

The graphical processing unit GPU accelerates changes to the layer nodes of the second data structure by efficiently animating the visual scene. Central processing resources can process other tasks without being concerned with animation and graphics that are accelerated by the GPU.

Referring back to the web browser may determine what elements should be rendered for storage into separate backing stores in a variety of ways at block . In one embodiment an independent layer may be allocated to a separate backing store for each element having a specific attribute associated with the element. The specific attribute may include opacity explicit position relative position or explicit Z ordering. In one embodiment an independent layer may be allocated for an element having a combination of specific attributes which individually are not sufficient to receive an independent layer for the element.

An independent layer may be allocated for each element that provides scripting of the web page such as JavaScript code execution. An independent layer may be allocated for each element associated with an explicit indication that the element should be an independent layer. The explicit indication may be associated with a node of the first data structure. An independent layer may be allocated for certain types of content e.g. video as indicated by a web server or the file extension.

An independent layer may be allocated for each element requiring animation. Animations requiring an independent layer may include a video update or changing a shape which change bit values stored in the backing stores. Animations not requiring an independent layer may include resizing moving or altering the opacity.

The web browser may receive an input to animate a portion of the web page associated with a raster image stored in a backing store. The web browser determines if animation of the portion of the web page requires re rendering of any node of the first data structure. The GPU may receive instructions from a graphics application to composite the raster images into a second final image if no re rendering of any node of the first data structure is required. The rendering process and composition process are decoupled from each other. Composition of raster images may occur without any re rendering of the first data structure having occurred.

The web browser may re render a node associated with the portion of the web page if re rendering is required. A graphics application directs the GPU to composite the raster images to construct a third final image displayed as a web page.

An animation rule may include defining a duration for each property that is expected to change. An animation rule may include defining a transition for each property that is expected to change. A property has a numeric or non numeric value. The transition associated with a property having a numeric value includes an interpolation function such as a pre defined interpolation function or a custom interpolation function using expression language. The transition associated with a property having a non numeric value includes a cutoff transition for the property.

In at least one embodiment an extension to CSS occurs based on defining animation states in the data stream with each state having at least one property such that properties are animated as a group. In other embodiments an extension to CSS occurs based on declaring how a change in state should be processed via an animation rule.

In certain embodiments the animation rules and states of method are extending into the data stream received by a web browser being hardware accelerated in accordance with the method . For example the method includes constructing a first data structure by grouping elements of a data stream into a first plurality of nodes at block . The first data structure would include information representing the animation rules and states of method . The method further includes determining what elements should be rendered for storage into separate backing stores at block . The method further includes constructing a second data structure separate from the first data structure at block . The second data structure includes a second plurality of nodes each representing an independent layer associated with a raster image intended for hardware acceleration. The second data structure would include information representing the animation rules and states of method . The method further includes rendering all nodes of the first data structure to create raster images which each represent a decomposed portion of a complete image stored in the backing stores located in a graphics processing unit GPU at block . The GPU may receive the raster images along with attributes of the images such as transparency level and position information. The method further includes compositing the raster images stores in the backing stores to construct a first final image displayed as a web page at block .

A graphics application directs hardware acceleration within the GPU including the compositing of the raster images. The graphics application receives the information regarding the animation states and rules of method from the second data structure in order to perform animations such as moving resizing changing shape etc. Additional features and functionality of the graphics application may be enabled based on receiving the information regarding the animation states and rules for animating a data stream in accordance with the method .

The graphics processing unit may receive information identifying the raster images. The information may be received from a software application. The information that identifies the raster images may indicate the location of the raster images in the computer system. Also the information identifying the raster images may indicate attributes of each raster image. Attributes of the raster images include opacity and position of each raster image within a complete image.

The operation of the graphics processing unit hardware accelerates the composition of raster images into a complete image which can be displayed as a web page. A software application or web browser provides information to the graphics processing unit regarding the raster images to be composited.

The foregoing description of preferred and other embodiments is not intended to limit or restrict the scope or applicability of the inventive concepts conceived of by the Applicants. In exchange for disclosing the inventive concepts contained herein the Applicants desire all patent rights afforded by the appended claims. Therefore it is intended that the appended claims include all modifications and alterations to the full extent that they come within the scope of the following claims or the equivalents thereof.

