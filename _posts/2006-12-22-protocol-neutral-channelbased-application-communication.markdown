---

title: Protocol neutral channel-based application communication
abstract: A system is presented that enables applications in a distributed system to communicate through a channel-based communication system. The applications use adaptors which communicate through a communication mechanism, resulting in application independence from the communication mechanism. In one embodiment, the communication mechanism consists of transmission media, logical channels, and brokers. The adaptors communicate with each other over the transmission media. Groups of adaptors involved in a particular type of communication from a communication channel. Channel profiles, which include channel properties and a list of adaptor members, are stored in brokers which can be queried by adaptors. Adaptors can support channel-specific data processing operations specified in the channel profile. Adaptors can join a channel, leave a channel, and communicate with other adaptors over the channel.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07933291&OS=07933291&RS=07933291
owner: Honda Motor Co., Ltd.
number: 07933291
owner_city: Tokyo
owner_country: JP
publication_date: 20061222
---
A distributed system may contain many applications each performing some function needed by the overall system. For example one application may be a digital interface to a video camera and another application may be control software on a robot arm. A distributed system may consist of one camera application sending data to three robot arm applications that use the data to determine when and how to move. In general an application may be implemented in hardware or software or both and is capable of digital communication.

Often a particular group of applications in a distributed system will need to communicate with each other. In the example above the camera application is sending data while the robot arm applications are receiving it. This may be considered a communication channel which has one server application and three client applications. In many distributed systems each application needs to know the location of the other applications and contain programming to connect to and communicate with the other applications. As the number of applications increases each application must store more location information and must handle greater numbers of connections to other applications. Also when the configuration of the network is modified the applications may need to be modified to support the new configuration for example to communicate using different protocols.

Communication between applications in a distributed system should be flexible and efficient. Often communication systems require the registration of data types with a central broker and require the maintenance of these types. This limits the flexibility of applications by requiring broker supported types and decreases the efficiency of the system by requiring type registration with a central broker.

What is needed is a channel based application independent communication system for protocol neutral data communications between applications in a distributed system.

Systems and methods are presented that enable applications in a distributed system to communicate through a channel based communication system. The applications use adaptors which communicate through a communication mechanism resulting in application independence from the communication mechanism.

In one embodiment the communication mechanism consists of transmission media logical channels and brokers. The adaptors communicate with each other over the transmission media. Groups of adaptors involved in a particular type of communication form a communication channel. Adaptors within a channel have particular roles such as client server or peer. Information about channels and channel members is stored in brokers which can be queried by adaptors. Adaptors can join a channel leave a channel and communicate with other adaptors over the channel.

In one embodiment the adaptor contains a channel interface to each channel of which the adaptor is a member. Each channel interface contains connections to other adaptors in that particular channel. A connection comprises a connection proxy that handles communication with the transmission media and a channel stack that performs channel specific data processing operations such as ensuring a certain quality of service.

In one embodiment the adaptor contains an application interface module which provides an application programming interface API for the application to send data over a channel and an event handler for the application to receive data from a channel.

A preferred embodiment of the present invention is now described with reference to the figures where like reference numbers indicate identical or functionally similar elements. Also in the figures the left most digits of each reference number corresponds to the figure in which the reference number is first used.

Reference in the specification to one embodiment or to an embodiment means that a particular feature structure or characteristic described in connection with the embodiments is included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

Some portions of the detailed description that follows are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps instructions leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical magnetic or optical signals capable of being stored transferred combined compared and otherwise manipulated. It is convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like. Furthermore it is also convenient at times to refer to certain arrangements of steps requiring physical manipulations of physical quantities as modules or code devices without loss of generality.

However all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or determining or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system memories or registers or other such information storage transmission or display devices.

Certain aspects of the present invention include process steps and instructions described herein in the form of an algorithm. It should be noted that the process steps and instructions of the present invention could be embodied in software firmware or hardware and when embodied in software could be downloaded to reside on and be operated from different platforms used by a variety of operating systems.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards application specific integrated circuits ASICs or any type of media suitable for storing electronic instructions and each coupled to a computer system bus. Furthermore the computers referred to in the specification may include a single processor or may be architectures employing multiple processor designs for increased computing capability.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may also be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the present invention as described herein and any references below to specific languages are provided for disclosure of enablement and best mode of the present invention.

In addition the language used in the specification has been principally selected for readability and instructional purposes and may not have been selected to delineate or circumscribe the inventive subject matter. Accordingly the disclosure of the present invention is intended to be illustrative but not limiting of the scope of the invention which is set forth in the following claims.

Adaptors in a channel can communicate with each other by publishing data to the channel or publishing data to specific adaptors within the channel. By publishing data to the channel or broadcasting to the channel an adaptor can send data to multiple other adaptors. This is useful if there is an application producing data which is of interest to multiple applications receiving the data. An adaptor may also have knowledge of the characteristics of the applications using the other adaptors on the channel and choose only one or a specified list of adaptors to receive its data. By using a broadcast to channel mechanism an adaptor can easily send data to all adaptors on a channel or all complementary adaptors on a channel as described below without having specific knowledge of the adaptors on the channel. By using a mechanism to send to one or more adaptors specifically an adaptor with specific knowledge of the adaptors it wishes to receive the message can reduce bandwidth over the communication mechanism by sending a message to only the specific adaptors.

In one embodiment adaptors belonging to a channel have assigned roles. In one embodiment an adaptor can have the role of client C server S or peer P for a given channel. As an adaptor can belong to multiple channels it can have different roles in different channels. For example adaptor A is a server in channel A while adaptor A is a peer in channel B. The client and server roles are complementary while the peer role is a self complementary group. When an adaptor registered on a channel as a client publishes data to the channel the data will be sent to all the servers on the channel since clients and servers are complementary roles. Similarly if a server publishes to a channel the data will be sent to all clients on the channel. The peer role is a self complementary group so when a peer publishes to a channel the data will be sent to all other peers in the channel. By having role differentiation within a channel adaptors can publish data to a channel and automatically send to the subset of adaptors on the channel that are interested in the message without necessarily having knowledge of those specific adaptors while also avoiding broadcasting the data to all adaptors on the channel and using unnecessary communication bandwidth. In some embodiments some adaptors have no role and some adaptors are members of other sets of self complementary or complementary roles for example video stream clients and video stream servers .

The broker mentioned above stores information related to the channels in the communication mechanism . The functions of the broker can be implemented in hardware or software or both and may reside on the same entity as one or more adaptors or on a separate entity. The broker is capable of digital communication with the adaptors. A broker can support multiple channels and a communication mechanism can comprise multiple brokers each supporting one or more channels. A single channel can be supported by multiple brokers. This may be useful for providing a backup broker in case the primary broker fails and for distributing the communication load to the broker from various adaptors. The broker stores information about each supported channel including but not limited to the name or other identifier of the channel the list of adaptors communicating on the channel and the set of channel communication properties. In one embodiment the channel communication properties may include the quality of service QoS of the data communication on the channel such as the minimum bandwidth requirement maximum latency requirement or in order packet delivery requirement. The properties can also include whether the channel communication is to be synchronous or asynchronous and the data format of the communication.

By using the communication mechanism an adaptor need not have knowledge a priori of other adaptors with which that adaptor may want to communicate. In one embodiment an adaptor needs knowledge of only a channel name and can then join the channel and communicate with appropriate entities on the channel. In another embodiment an adaptor needs knowledge of only the characteristics of a channel it wishes to join for example based on a request from the application associated with the adaptor . The adaptor can then query a broker obtain a list of available channels with the characteristics of each and then choose an appropriate channel to join. In another embodiment the adaptor need not have knowledge of the existence of a particular broker. The adaptor can send a query to nearby entities and available brokers can respond to the query. The adaptor can then contact an available broker to join or obtain information about a channel.

Also by using the communication mechanism there is no central point of failure. The failure of an adaptor on a channel will not generally result in the failure of the entire channel. An adaptor can still join a channel publish to a channel and receive from a channel even if one or more adaptors on the channel fail. An application communication system can include multiple redundant adaptors so that the loss of a single adaptor will not prevent the channel from functioning as intended. Though a broker can serve as a repository of information about one or more channels the failure of a broker will not result in the immediate failure of one of its channels. Adaptors that have already joined the channel are still able to publish to and receive data from the channel. Though new adaptors will not be able to request information about the channel or join the channel without a broker the communication mechanism can provide for the detection of failed brokers and create a new broker when an existing one fails. Throughout this process of creating a new broker however adaptors already communicating on the channel will be unaffected. The communication mechanism can also include backup brokers in case a primary broker fails.

In one embodiment the adaptors communicate with the broker through a common mechanism known to all adaptors. Adaptors can generally know the location of the broker or the broker can periodically communicate its location to adaptors. In another embodiment the adaptors communicate with the broker through a specialized broker channel not illustrated . The broker channel is a channel known to all adaptors and is used when an adaptor needs to communicate to one or more brokers or when a broker needs to communicate with one or more adaptors. By using a broker channel for communication an adaptor can communicate with a broker through its standard channel interface and does not need a different interface for broker communications.

As illustrated in adaptor A has a server role on channel A while adaptors D and B have the complementary client role on channel A. As a result channel interface A will publish the data on both connections A and B. Connections A and B will transmit the data from adaptor A to transmission media A and B. In one embodiment the data will be tagged to identify it as data intended for adaptors with client roles on channel A.

Transmission media can be any digital communication transmission media such as a wired or wireless network a hardware bus or shared memory. Transmission media A B C D can be the same or different transmission media or can be groups of different transmission media. For example transmission media B and C can be the same shared memory and transmission media A and D can be two different ethernet LANs. Channel A is a logical representation of the communication taking place over transmission media A and B from channel interface A. Communication mechanism comprises channels and transmission media.

As an example to illustrate the process of receiving data suppose that application A is receiving data sent from adaptor B on channel A. The data is received by adaptor A listening for packets on the transmission media. In one embodiment the data is received by connection B listening for data packets on the transmission medium B. Connection B listens for packets being sent to adaptor A on channel A or for packets being broadcast on channel A. Since adaptor A has a server role on channel A connection B listens for broadcast packets sent from only an adaptor with a client role. In another embodiment the data is received by channel interface A listening for data packets on the transmission medium B and then the data is sent to connection B. After connection B receives and processes the data it is sent to channel interface A which sends the data to application interface . Application interface sends the data to application A which uses the data to perform its functions. In one embodiment application A receives additional information about the data including the source adaptor channel connection and interface through which it was received.

The application interface includes an API module and an event handler . In one embodiment when the application needs to send data to a channel through a channel interface the application calls a function in the API module to send the data. For example one function in the API module can be called sendToChannel and take as parameters the channel name and the data to be sent. Another function in API module can be called sendToAdaptors and take as parameters the channel name a list of adaptors and the data to be sent. These API functions can then pass the data to the appropriate channel interface for sending to the appropriate channel or adaptor.

In one embodiment event handler is responsible for passing packets from the channel interfaces to the application . When a data packet arrives on a channel interface it is sent asynchronously to the event handler. The event handler then examines the packet determining for example the channel and adaptor it arrived from. In one embodiment the event handler consults a subscription map not shown to determine if the application is interested in receiving the data and if so which function to call in the application to notify it of the data arrival. A lookup in the subscription map can be based on information relating to the data for example the originating adaptor and channel of the data. After determining the appropriate application notification function the event handler calls this function and provides the data or the location of the data to the application. The application notification function returns control to the event handler so that the event handler can receive more data from the channel interfaces.

The management module performs management functions for the adaptor . Various API module functions can be provided to the application for configuration through the management module. A list of possible example configuration functions is given in Table 1.

These API module functions are called by the application . The API module then sends the request to the management module which carries out the requested action and returns a response if necessary to the application through the API module. In order to carry out configuration tasks the management module may need to send data through the channel interfaces or receive data from the channel interfaces using the API module or event handler . In addition to requests from the application the management module can perform configuration tasks in response to data received from the channel interfaces. For example if a channel interface receives a notification packet from the transmission media that another adaptor has joined a channel associated with a channel interface the management module can create a new connection in the appropriate channel interface to communicate with that adaptor. In one embodiment the management module performs monitoring functions such as discovering that a connection to another adaptor has been lost or discovering that another adaptor has joined the channel. Notifications can be provided to the application through the event handler enabling the application to take actions if necessary.

Connection comprises a channel stack and a connection proxy . The connection proxy is responsible for sending to and receiving from the transmission medium . The connection proxy can comprise standard transport layer and link layer protocols. Examples include transmission control protocol TCP user datagram protocol UDP internet protocol IP ethernet and shared memory access protocols. The connection proxy is adaptor and connection specific. For example different adaptors with connections to the same channel may have different connection proxies because of the need to communicate through different transmission media. The connection proxy effectively hides the details of underlying protocols from the channel stack.

In one embodiment a connection proxy is created by a connection proxy factory not shown when the need for a new connection arises. A new connection can be required for example when a new adaptor joins a channel to which the current adaptor is subscribed. The composition of the connection proxy will depend on the needs of the adaptor transmission media and the channel. In one embodiment the connection proxy factory automatically determines the optimal protocols to be included in the connection proxy based on its knowledge of the transmission medium and the location of the other adaptor. For example if the other adaptor is running on the same machine as the current adaptor then the connection proxy factory may create a connection proxy with shared memory protocols rather than with network protocols such as TCP.

The channel stack performs additional processing on data sent to and received from the connection proxy . The channel stack is channel specific meaning that all connections to a particular channel will have identically configured channel stacks. The channel stack can implement functions necessary for the proper transmission across the channel. One example includes data packet quality of service QoS which sends packets in such a way as to meet certain maximum or minimum bandwidth or latency limits.

In one embodiment a channel stack is created by a channel stack factory not shown . A new channel stack is required for example when the adaptor joins a new channel . Once a new channel stack is created for a particular channel interface that channel stack can be copied as the need arises for new connections within the same interface. The channel stack factory creates a channel stack with specific operations based on information obtained about the channel. As described above the broker maintains a repository of information about one or more channels. When an adaptor joins a channel it can obtain channel information from the broker which can then be used by the channel stack factory to configure the channel stack with the appropriate operations.

In step the adaptor retrieves the channel profile from the broker . In one embodiment the adaptor sends a channel profile request to a broker and the broker responds with the channel profile. This adaptor broker communication can be through a specialized broker channel as described above or through some other mechanism.

In step the adaptor establishes communications to complementary adaptors identified in the channel profile. In one embodiment the management module creates a channel interface to the specified channel containing connections to the complementary adaptors identified in the channel profile. The channel stack in each connection can be configured based on the channel profile.

In step the adaptor notifies the broker that it has joined the channel. In one embodiment the broker responds with an acknowledgement that the adaptor has joined the channel and includes another channel profile to provide for the possibility that the channel profile changed since it was retrieved in step for example an additional adaptor joined the channel . The broker updates its list of adaptors currently on the channel and provides the updated list to future adaptors requesting a channel profile. In one embodiment the adaptor or the broker also notifies other adaptors currently on the channel that a new adaptor has joined. This enables other adaptors to create new connections as necessary.

In step the adaptor closes connections to complementary adaptors on the channel. In one embodiment the management module removes a channel interface to the specified channel containing connections to the complementary adaptors identified in the channel profile.

In step the adaptor notifies the broker that it has left the channel. The broker updates its list of adaptors currently on the channel and provides the updated list to future adaptors requesting a channel profile. In one embodiment the adaptor or the broker also notifies other adaptors currently on the channel that the adaptor has left the channel. This enables other adaptors to remove connections as necessary.

Although the invention has been described in considerable detail with reference to certain embodiments thereof other embodiments are possible as will be understood to those skilled in the art.

