---

title: Handling processor computational errors
abstract: Embodiments include a computer processor-error controller, a computerized device, a device, an apparatus, and a method. A computer processor-error controller includes a monitoring circuit operable to detect a computational error corresponding to an execution of a second instruction by a processor operable to execute a sequence of program instructions that includes a first instruction that is fetched before the second instruction. The computer processor-error controller includes an error recovery circuit operable to restore an execution of the sequence of program instructions to the first instruction in response to the detected computational error.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08375247&OS=08375247&RS=08375247
owner: The Invention Science Fund I, LLC
number: 08375247
owner_city: Bellevue
owner_country: US
publication_date: 20060228
---
The present application is related to and claims the benefit of the earliest available effective filing date s from the following listed application s the Related Applications e.g. claims earliest available priority dates for other than provisional patent applications or claims benefits under 35 USC 119 e for provisional patent applications for any and all parent grandparent great grandparent etc. applications of the Related Application s .

For purposes of the USPTO extra statutory requirements the present application constitutes a continuation in part of United States patent application entitled PROCESSOR RESOURCE MANAGEMENT naming Bran Ferren W. Daniel Hillis Nathan P. Myhrvold Clarence T. Tegreene and Lowell L. Wood Jr. as inventors U.S. Ser. No. 11 214 449 filed Aug. 29 2005.

For purposes of the USPTO extra statutory requirements the present application constitutes a continuation in part of United States patent application entitled MULTIPROCESSOR RESOURCE OPTIMIZATION naming Bran Ferren W. Daniel Hillis Nathan P. Myhrvold Clarence T. Tegreene and Lowell L. Wood Jr. as inventors U.S. Ser. No. 11 214 458 filed Aug. 29 2005.

For purposes of the USPTO extra statutory requirements the present application constitutes a continuation in part of United States patent application entitled PREDICTIVE PROCESSOR RESOURCE MANAGEMENT naming Bran Ferren W. Daniel Hillis William Henry Mangione Smith Nathan P. Myhrvold Clarence T. Tegreene and Lowell L. Wood Jr. as inventors U.S. Ser. No. 11 214 459 filed Aug. 29 2005.

For purposes of the USPTO extra statutory requirements the present application constitutes a continuation in part of United States patent application entitled RUNTIME BASED OPTIMIZATION PROFILE naming Bran Ferren W. Daniel Hillis William Henry Mangione Smith Nathan P. Myhrvold Clarence T. Tegreene and Lowell L. Wood Jr. as inventors U.S. Ser. No. 11 292 207 filed Nov. 30 2005.

For purposes of the USPTO extra statutory requirements the present application constitutes a continuation in part of United States Patent application entitled ALTERATION OF EXECUTION OF A PROGRAM IN RESPONSE TO AN EXECUTION OPTIMIZATION INFORMATION naming Bran Ferren W. Daniel Hillis William Henry Mangione Smith Nathan P. Myhrvold Clarence T. Tegreene and Lowell L. Wood Jr. as inventors U.S. Ser. No. 11 292 296 filed Nov. 30 2005.

For purposes of the USPTO extra statutory requirements the present application constitutes a continuation in part of United States patent application entitled FETCH REROUTING IN RESPONSE TO AN EXECUTION BASED OPTIMIZATION PROFILE naming Bran Ferren W. Daniel Hillis William Henry Mangione Smith Nathan P. Myhrvold Clarence T. Tegreene and Lowell L. Wood Jr. as inventors U.S. Ser. No. 11 291 503 filed Nov. 30 2005.

For purposes of the USPTO extra statutory requirements the present application constitutes a continuation in part of United States patent application entitled HARDWARE GENERATED AND HISTORICALLY BASED EXECUTION OPTIMIZATION naming Bran Ferren W. Daniel Hillis William Henry Mangione Smith Nathan P. Myhrvold Clarence T. Tegreene and Lowell L. Wood Jr. as inventors U.S. Ser. No. 11 292 323 filed Nov. 30 2005.

For purposes of the USPTO extra statutory requirements the present application constitutes a continuation in part of United States Patent application entitled FREEZE DRIED GHOST PAGES naming Bran Ferren W. Daniel Hillis William Henry Mangione Smith Nathan P. Myhrvold Clarence T. Tegreene and Lowell L. Wood Jr. as inventors U.S. Ser. No. 11 324 174 filed Dec. 30 2005.

For purposes of the USPTO extra statutory requirements the present application constitutes a continuation in part of United States patent application entitled CROSS ARCHITECTURE EXECUTION OPTIMIZATION naming Bran Ferren W. Daniel Hillis William Henry Mangione Smith Nathan P. Myhrvold Clarence T. Tegreene and Lowell L. Wood Jr. as inventors U.S. Ser. No. 11 343 745 filed Jan. 31 2006.

For purposes of the USPTO extra statutory requirements the present application constitutes a continuation in part of United States Patent application entitled CROSS ARCHITECTURE OPTIMIZATION naming Bran Ferren W. Daniel Hillis William Henry Mangione Smith Nathan P. Myhrvold Clarence T. Tegreene and Lowell L. Wood Jr. as inventors U.S. Ser. No. 11 343 745 filed Jan. 31 2006.

For purposes of the USPTO extra statutory requirements the present application constitutes a continuation in part of United States patent application entitled ADJUSTING A PROCESSOR OPERATING PARAMETER BASED ON A PERFORMANCE CRITERION naming Bran Ferren W. Daniel Hillis William Henry Mangione Smith Nathan P. Myhrvold Clarence T. Tegreene and Lowell L. Wood Jr. as inventors U.S. Ser. No. 11 364 573 filed Feb. 28 2006.

For purposes of the USPTO extra statutory requirements the present application constitutes a continuation in part of United States patent application entitled HARDWARE ERROR TOLERANT COMPUTING naming Bran Ferren W. Daniel Hillis William Henry Mangione Smith Nathan P. Myhrvold Clarence T. Tegreene and Lowell L. Wood Jr. as inventors U.S. Ser. No. 11 364 130 filed Feb. 28 2006.

The United States Patent Office USPTO has published a notice to the effect that the USPTO s computer programs require that patent applicants reference both a serial number and indicate whether an application is a continuation or continuation in part. Stephen G. Kunin Benefit of Prior Filed Application USPTO Electronic Official Gazette Mar. 18 2003 at http www.uspto.gov web offices com sol og 2003 week11 patbene.htm. The present applicant entity has provided a specific reference to the application s from which priority is being claimed as recited by statute. Applicant entity understands that the statute is unambiguous in its specific reference language and does not require either a serial number or any characterization such as continuation or continuation in part. Notwithstanding the foregoing applicant entity understands that the USPTO s computer programs have certain data entry requirements and hence applicant entity is designating the present application as a continuation in part of its parent applications but expressly points out that such designations are not to be construed in any way as any type of commentary and or admission as to whether or not the present application contains any new matter in addition to the matter of its parent application s .

An embodiment provides a computer processor error controller. The computer processor error controller includes a monitoring circuit operable to detect a computational error corresponding to an execution of a second instruction by a processor operable to execute a sequence of program instructions that includes a first instruction that is fetched before the second instruction. The controller also includes an error recovery circuit operable to restore an execution of the sequence of program instructions to the first instruction in response to the detected computational error. The controller and the processor may be formed on a single chip. A computing system may include the controller the processor and an information store. In addition to the foregoing other computer processor error controller embodiments are described in the claims drawings and text that form a part of the present application.

Another embodiment provides a computerized device. The computerized device includes a processor operable to execute a sequence of program instructions having a fetch order that includes a first instruction that is fetched before a second instruction. The computerized device also includes a controller. The controller includes a hardware implemented execution verification circuit for detecting a computational error corresponding to an execution of the second instruction by the processor. The controller also includes an error recovery circuit for rolling back an execution of the sequence of program instructions to a logical state associated with the first instruction in response to the detected computational error. The processor and the controller may be formed on a same chip. The computerized device may further include the processor the controller and an information store. In addition to the foregoing other computerized device embodiments are described in the claims drawings and text that form a part of the present application.

A further embodiment provides a method. The method includes sensing a computational error corresponding to an execution of a second instruction by a processor operable to execute an instruction sequence having a first instruction that is fetched before the second instruction. The method also includes restoring an execution of the instruction sequence to a logical state associated with the first instruction in response to the sensed computational error. In addition to the foregoing other method embodiments are described in the claims drawings and text that form a part of the present application.

An embodiment provides a device. The device includes means for sensing a computational error corresponding to an execution of a second instruction by a processor operable to execute an instruction sequence having a first instruction that is fetched before the second instruction. The device includes means for restoring an execution of the instruction sequence to the first instruction in response to the sensed computational error. In addition to the foregoing other device embodiments are described in the claims drawings and text that form a part of the present application.

Another embodiment provides a device. The device includes a monitoring circuit for detecting a computational error corresponding to an execution of an instruction of a sequence of instructions by a processor subsystem having an adjustable operating parameter. The device also includes a recovery circuit for rolling back an execution of the sequence of instructions to a checkpoint in response to the detected computational error. The device further includes a control circuit for adjusting the adjustable operating parameter in response to a performance criterion. In addition to the foregoing other device embodiments are described in the claims drawings and text that form a part of the present application.

A further embodiment provides a computerized apparatus. The computerized apparatus includes a processor subsystem having an adjustable operating parameter and operable to execute a sequence of instructions. The computerized apparatus also includes a sensing module operable to detect an operating parameter induced error in an execution of an instruction of the sequence of instructions. The computerized apparatus further includes a recovery module operable to rollback an execution of the sequence of instructions to a checkpoint in response to the detected operating parameter induced error. The computerized apparatus also includes a control module operable to adjust the adjustable operating parameter in response to a performance criterion corresponding to an incidence of the detected operating parameter induced error. The processor subsystem and at least one of the sensing module the recovery module and or the control module may be formed on a same chip. In addition to the foregoing other computerized apparatus embodiments are described in the claims drawings and text that form a part of the present application.

An embodiment provides a method. The method includes detecting a computational error corresponding to an execution of an instruction of a sequence of instructions by a processor having an adjustable operating parameter. The method also includes rolling back an execution of the sequence of instructions to a checkpoint in response to the detected computational error. The method further includes changing the adjustable processor operating parameter in response to a performance criterion corresponding to an incidence of the detected computational error. In addition to the foregoing other method embodiments are described in the claims drawings and text that form a part of the present application.

Another embodiment provides a device. The device includes means for detecting a computational error corresponding to an execution of an instruction of a sequence of instructions by a processor having an adjustable operating parameter. The device also includes means for rolling back an execution of the sequence of instructions to a checkpoint in response to the detected computational error. The device further includes means for changing the adjustable processor operating parameter in response to a performance criterion corresponding to an incidence of the detected computational error. In addition to the foregoing other device embodiments are are described in the claims drawings and text that form a part of the present application.

A further embodiment provides a computing system. The computing system includes a processor subsystem having an adjustable operating parameter. The computing system also includes an information store operable to save a sequence of instructions. The computing systems further includes a controller module. The controller module includes a monitor circuit for detecting an incidence of an operating parameter caused error corresponding to an execution of an instruction of the sequence of instructions by the processor subsystem. The controller module further includes a control circuit for adjusting the adjustable operating parameter based upon an error tolerant performance criterion. The controller module may include an error recovery circuit operable to restore an execution of the sequence of program instructions to a checkpoint based upon the detected operating parameter caused error. In addition to the foregoing other computing system embodiments are described in the claims drawings and text that form a part of the present application.

An embodiment provides a method. The method includes detecting an incidence of a processor operating parameter caused error corresponding to an execution of an instruction of the sequence of instructions by a processor subsystem having an adjustable operating parameter. The method also includes changing the adjustable processor operating parameter based upon an error tolerant performance criterion. The method may include restoring an execution of the sequence of program instructions to a checkpoint based upon the detected processor operating parameter caused error. In addition to the foregoing other method embodiments described in the claims drawings and text that form a part of the present application.

Another embodiment provides a device. The device includes means for detecting an incidence of a processor operating parameter caused error corresponding to an execution of an instruction of the sequence of instructions by a processor subsystem having an adjustable operating parameter. The device also includes means for changing the adjustable processor operating parameter based upon an error tolerant performance criterion. The device may include means for restoring an execution of the sequence of program instructions to a checkpoint based upon the detected processor operating parameter caused error. In addition to the foregoing other computerized apparatus embodiments described in the claims drawings and text that form a part of the present application.

The foregoing summary is illustrative only and is not intended to be in any way limiting. In addition to the illustrative aspects embodiments and features described above further aspects embodiments and features will become apparent by reference to the drawings and the following detailed description.

In the following detailed description reference is made to the accompanying drawings which form a part hereof. In the drawings similar symbols typically identify similar components unless context dictates otherwise. The illustrated embodiments described in the detailed description drawings and claims are not meant to be limiting. Other embodiments may be utilized and other changes may be made without departing from the spirit or scope of the subject matter presented here.

The computing system environment typically includes a variety of computer readable media products. Computer readable media may include any media that can be accessed by the computing device and include both volatile and nonvolatile media removable and non removable media. By way of example and not of limitation computer readable media may include computer storage media and communications media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media include but are not limited to random access memory RAM read only memory ROM electrically erasable programmable read only memory EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computing device . Communications media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communications media include wired media such as a wired network and a direct wired connection and wireless media such as acoustic RF optical and infrared media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and nonvolatile memory such as ROM and RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within the computing device such as during start up is typically stored in ROM . RAM typically contains data and program modules that are immediately accessible to or presently being operated on by processing unit . By way of example and not limitation illustrates an operating system application programs other program modules and program data . Often the operating system offers services to applications programs by way of one or more application programming interfaces APIs not shown . Because the operating system incorporates these services developers of applications programs need not redevelop code to use the services. Examples of APIs provided by operating systems such as Microsoft s WINDOWS are well known in the art. In an embodiment an information store may include a computer storage media.

The computing device may also include other removable non removable volatile nonvolatile computer storage media products. By way of example only illustrates a non removable non volatile memory interface hard disk interface that reads from and writes to non removable non volatile magnetic media a magnetic disk drive that reads from and writes to a removable non volatile magnetic disk and an optical disk drive that reads from and writes to a removable non volatile optical disk such as a CD ROM. Other removable nonremovable volatile non volatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards DVDs digital video tape solid state RAM and solid state ROM. The hard disk drive is typically connected to the system bus through a non removable memory interface such as the interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable non volatile memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computing device . In for example hard disk drive is illustrated as storing an operating system application programs other program modules and program data . Note that these components can either be the same as or different from the operating system application programs other program modules and program data . The operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computing device through input devices such as a microphone keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a joystick game pad satellite dish and scanner. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computing system environment may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computing device although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks such as a personal area network PAN not shown . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computing system environment is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computing device typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or via another appropriate mechanism. In a networked environment program modules depicted relative to the computing device or portions thereof may be stored in a remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on computer storage medium . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

In the description that follows certain embodiments may be described with reference to acts and symbolic representations of operations that are performed by one or more computing devices such as the computing device of . As such it will be understood that such acts and operations which are at times referred to as being computer executed include the manipulation by the processing unit of the computer of electrical signals representing data in a structured form. This manipulation transforms the data or maintains them at locations in the memory system of the computer which reconfigures or otherwise alters the operation of the computer in a manner well understood by those skilled in the art. The data structures in which data is maintained are physical locations of the memory that have particular properties defined by the format of the data. However while an embodiment is being described in the foregoing context it is not meant to be limiting as those of skill in the art will appreciate that the acts and operations described hereinafter may also be implemented in hardware.

Embodiments may be implemented with numerous other general purpose or special purpose computing devices and computing system environments or configurations. Examples of well known computing systems environments and configurations that may be suitable for use with an embodiment include but are not limited to personal computers handheld or laptop devices personal digital assistants multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network minicomputers server computers game server computers web server computers mainframe computers and distributed computing environments that include any of the above systems or devices.

Embodiments may be described in a general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. An embodiment may also be practiced in a distributed computing environment where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

The processor includes a processor operable to execute an instruction set. In an embodiment the instruction set may include a collection of instructions that the processor can execute. In a further embodiment the instruction set may include an instruction set architecture of the processor. In another embodiment the instruction set may include a group of machine instructions and or computer instructions that the processor can execute. In another embodiment the instruction set may be interpreted by the processor. In further embodiment the instruction set may include a high level language an assembly language and or a machine code that the processor can execute with or without a compiling and or a translation.

In an embodiment an instruction may include a functional instruction a branching instruction a memory instruction and or other instruction that may be executed by a processor. In another embodiment an instruction may include a statement or a portion of a statement in a program. In a further embodiment an instruction may include at least two statements from a program. A program may include any type of a program from several lines of instructions to an application and to an operating system. In an embodiment an instruction may include a decoded instruction a translated instruction a portion of a translated instruction and or a micro operation. In a further embodiment an instruction may include an instruction block a basic block a functional block and or an instruction module.

The execution optimization synthesizer includes an execution optimization synthesizer operable to collect data from the communications link that corresponds to an execution of at least one instruction of the instruction set. In an embodiment the data may include certain data items such as datum byte bit and or a block that are associated together. The execution optimization synthesizer is also operable to generate an execution optimization information utilizing the collected data from the communications link and corresponding to the execution of at least one instruction of the instruction set.

In an embodiment the communications link may include at least one of a signal bearing medium digital signal bearing medium a light propagation medium a light propagation medium an optical fiber a light guide a computer readable storage medium a hardware register a bus a memory local to the processor an interconnection structure and or a digital signal conductor. For example a computer readable storage medium may include a memory and or a memory system directly accessible by the processor and the execution optimization synthesizer. By way of further example a digital signal conductor may include any digital signal conducting structure configured to at least transfer digital signals from the processor to the execution optimization synthesizer. In another embodiment the communications link includes a signal bearing medium exposed only to an execution optimization synthesizer and the processor. In a further embodiment the communications link includes a signal bearing medium exposed to an execution optimization synthesizer and the processor and transparent to software executing on the processor. In another embodiment the communications link includes a signal bearing medium exposed to an execution optimization synthesizer to the processor and to software.

In an embodiment the processor and the communications link reside on a single chip illustrated as a single chip . In another embodiment the processor and the execution optimization synthesizer reside on a single chip also illustrated as the single chip . In a further embodiment the processor communications link and the execution optimization synthesizer are formed on a single chip illustrated as the single chip .

In an embodiment the execution optimization synthesizer includes a hardware implemented execution optimization synthesizer. In another embodiment the execution optimization synthesizer includes a microengine implemented execution optimization synthesizer.

In a further embodiment the execution optimization synthesizer operable to collect data from the communications link that corresponds to an execution of at least one instruction of the instruction set includes an execution optimization synthesizer operable to collect dynamic data from the communications link that corresponds to a runtime execution of at least one instruction of the instruction set. In an embodiment the data collected by the execution optimization synthesizer includes at least one of an interpreted instruction a translated instruction a decoded instruction a micro operation corresponding to at least a portion of an instruction data correlating to the execution of the at least one instruction a movement of data correlating to an execution of the at least one instruction of the instruction set a result of an execution of an instruction a branch outcome of an execution of an instruction an exception correlating to an execution of an instruction a store to load dependency correlating an execution of an instruction a predicted value correlating to an execution of an instruction and or a relationship between at least two instructions of the instruction set.

In an embodiment the execution optimization synthesizer operable to collect data from the communications link that corresponds to an execution of at least one instruction of the instruction set includes an execution optimization synthesizer operable to collect at least one of data transparent to a user data visible to a user data transparent to software executing on the processor data visible to software executing on the processor and or data exposed for user manipulation.

In another embodiment the execution optimization synthesizer operable to generate an execution optimization information utilizing the collected data includes an execution optimization synthesizer operable to generate an optimization information that is at least one of responsive to the collected data derived from the collected data associated with the collected data and or using the collected data. In a further embodiment the execution optimization synthesizer operable to generate an execution optimization information corresponding to the execution of at least one instruction of the instruction set includes an execution optimization synthesizer operable to generate at least one of an execution environment optimization information a processor environment optimization information a data environment optimization information and or a metadata reporting an execution environment. For example an execution environment optimization information may include an indication that an identified micro op is used frequently and may be advantageously saved in a memory close to the processor . Another execution environment optimization may include one or more versions of the at least one instruction of the instruction set that provides some expected benefit over the original at least one instruction of the instruction set. A memory management system serving the processor may cause one of the versions to be executed transparently instead of the original at least one instruction of the instruction set such as through a translation lookaside buffer. By way of further example metadata reporting an execution environment may include tracking information with respect to data objects. For example certain access predictors may work well with certain data objects or some objects do not appear to be co resident in the cache or may be highly co resident or certain pointers in object orientated systems typically point to specific object types or specific value predictors have worked well with some data in the past.

In other embodiments the execution optimization synthesizer operable to generate an execution optimization information utilizing the collected data may include an execution optimization synthesizer operable to generate an execution optimization information optimizing data handling which may be by a data class. In some instances a data class may include certain data items datum byte bit a block a page that are used once and never again. In other instances a data class may include certain data items are used constantly but never written and or infrequently written. In further data classes certain data items may be constantly read and written to or other data items may be often being written but never read. The execution optimization synthesizer operable to generate an execution optimization information may predict how a data class will likely be used in the future and or saves the data items in a manner and or a location that substantially optimizes utilization of the data items by an instruction group and or storage of the data items by the computing device. Any suitable type of predictive algorithm providing meaningful results may be used including a predictive algorithm based on a Bayesian method and or a learning algorithm. The prediction may be written to a ghost page associated with a piece of data. A prediction may be straight forward if it is known that the data piece will never be written or read. Each data item will expose what its peculiar flavor is. This may be implemented down to the size of a single cache line or even below the cache line.

In further embodiments the execution optimization synthesizer operable to generate an execution optimization information utilizing the collected data may include an execution optimization synthesizer operable to generate an execution optimization information providing a storage mobility for data items that are associated together in a substantial disequilibrium based upon a shared fate a shared nature an entanglement to a page and or line of similarly handled data. The data item may include one or more extra bits tag on end of a data item that may indicate its size nature written but never read read but never written read once in the life of the program used by at least two threads . In a further embodiment an indicator may say which code relates with to the data item. This may be used for doing storage assignment. For example if the data item includes a semaphore that is used across multiple threads that should be known and the data item managed accordingly. Most data is associated with a particular body of code and assigned to a storage unit together. By watching that these assignments can be done together between the I cache and the D cache.

In an embodiment the execution optimization synthesizer further includes an execution optimization synthesizer operable to save the optimization information. The optimization information may be saved close to the processor for example in an on chip resource such as the cache A or in the off chip resource such as a system memory or storage medium. In another embodiment the execution optimization synthesizer further includes an execution optimization synthesizer operable to save the optimization information in an association with the at least one instruction of the instruction set.

In an embodiment the device includes a computing device such as for example the computing device of the computing system environment of . In a further embodiment the computing device includes at least one of desktop computing device a laptop computing device a portable computing device and or a supercomputing device.

The execution optimization information generated by the execution optimization synthesizer may be associated with the at least one instruction of the instruction set of a program an application and or a module that includes the at least one instruction. In the case of data the execution optimization information generated by the execution optimization synthesizer may be associated with data received for processing by the execution data produced by the execution the at least one instruction of the instruction set that processed the data and or other related matter. illustrates certain embodiments of an association of the execution optimization information with the at least one instruction of the instruction set. The ghost pages that include the execution optimization information pertaining to the operating system may be virtually and or physically associated in an information storage with the operating system. The information storage may include a non volatile memory structure. For example the ghost pages may be saved in the same file as the operating system. When the operating system is loaded into system memory the ghost pages may remain in the information storage or may be such as for example also loaded into system memory or loaded into an inboard memory. In another embodiment an execution optimization information pertaining to a data set is associated in a information storage with the data set. In a further embodiment an execution optimization profile is associated in an information storage with an application .

In an embodiment a ghost page of the ghost pages containing the execution optimization information may be associated with a selected page of a program or data whose content corresponds to the generation of the execution optimization information such as for example a selected page containing the instruction of the operating system a selected page containing the data of the data set and or a selected page containing the application program . By way of further example data in a ghost page of the ghost pages may indicate that a branch instruction on an identified line of an associated selected page of an application should not be taken. In another embodiment a file containing the execution optimization information may be associated with a file containing the data set.

The illustrated embodiments of the ghost page the execution optimization information and the execution optimization profile respectively associated with the operating system the data and the application are intended only to be illustrative and are not limiting. In another embodiment for example the ghost pages may be associated with the application or the data set .

The microengine includes a microengine operable to gather data in a manner transparent to software executing on the processor and corresponding to a runtime execution of at least a portion of the instruction set by the processor. The microengine is also operable to create a runtime based optimization profile utilizing the gathered dynamic data and which is useable in a subsequent execution of the at least of a portion of the instruction set by the processor.

In an embodiment the microengine may include a microengine operable to gather at least one of dynamic data and or static data in a manner transparent to software executing on the processor and corresponding to a runtime execution of at least a portion of the instruction set by the processor .

In another embodiment the device may further include the processor having an instruction set. In a further embodiment the processor and the microengine are formed on a chip illustrated as a single chip . In an embodiment the device may further include a communications link exposed to the microengine. In another embodiment the device may include the communications link exposed to the microengine and transparent to software executing on the processor. In a further embodiment the device may include the communications link operably coupled to the microengine and to the processor. In another embodiment the communications link may include an interconnection structure.

The modification operation may include at least one additional operation. The at least one additional operation may include an operation an operation and or an operation . The operation changes a movement of data with respect to the processor in response to the execution based optimization profile. For example changing a movement of data may include changing a movement of data toward and or away from the processor. Changing a movement of data toward the processor may include a prefetch of data. By way of further example frequently read data may be stored in a memory close to the processor and infrequently read data may be stored in a memory far from the processor. By way of example frequently written or rewritten data may be stored in a memory close to the processor and infrequently read data may be stored in a memory far from the processor. The operation changes a format of data processable by the processor in response to the execution based optimization profile. For example the operation may save data translated from one format to another such as from big endian to little endian or floating point formats. The operation changes a movement of the at least one instruction of the instruction set toward a processor for execution in response to the execution based optimization profile.

In an alternative embodiment the means includes hardware implemented means for gathering data in a manner transparent to software executing on a processor and corresponding to an execution of at least one machine instruction of an instruction set by the processor. In another alternative embodiment the means may include at least one additional means. The at least one additional means may include hardware implemented means for creating an execution based optimization profile utilizing the gathered data and which is useable in a subsequent execution of the at least one machine instruction of the instruction set by the processor. The at least one additional means may include software implemented means for creating an execution based optimization profile utilizing the gathered data and which is useable in a subsequent execution of the at least one machine instruction of the instruction set by the processor.

In an embodiment the execution optimization information may include the execution optimization information generated by the execution optimization synthesizer of . In another embodiment the execution optimization information may include at least one of the ghost pages the execution optimization information and or the execution optimization profile described in conjunction with . In an alternative embodiment the first processor includes a first processor operable to execute an instruction set and operably coupled to the information store . In another embodiment the hardware circuit for altering an execution of a program includes a hardware circuit for altering an execution of a program and operably coupled to the information store. In a further embodiment the hardware circuit includes a hardware circuit operably coupled to the processor.

In an embodiment the hardware circuit includes a hardware circuit for copying the execution optimization information from the information store to a memory operably coupled to the first processor. For example the memory operably coupled to the first processor may include the hardware resource such as the on chip cache B or the off chip resource such as an off chip cache or an outboard memory or an outboard storage.

In a further embodiment the hardware circuit for altering an execution of a program by the first processor in response to the execution optimization information includes a hardware circuit for causing an alteration of an execution of at least one instruction of an instruction set of a static program by the first processor in response to the execution optimization information. In another embodiment the altering an execution of a program by the first processor in response to the execution optimization information includes altering an execution of at least one instruction of an instruction set of a dynamic program by the first processor in response to the execution optimization information. In a further embodiment the altering an execution of a program by the first processor in response to the execution optimization information includes altering a context of an execution of a program by the first processor in response to the execution optimization information.

In an embodiment the hardware circuit for altering an execution of a program by the first processor in response to the execution optimization information includes a hardware circuit for altering an execution of at least one instruction of an instruction set of a program by the first processor in response to the execution optimization information. In another embodiment the hardware circuit for altering an execution of a program by the first processor in response to the execution optimization information includes a hardware circuit for altering a movement of data with respect to the first processor in response to the execution optimization information. In a further embodiment the hardware circuit for altering an execution of a program by the first processor in response to the execution optimization information includes a hardware circuit for altering a movement of at least one instruction of the program toward the first processor in response to the execution optimization information.

In some instances the altering an execution of a program by the first processor in response to the execution optimization information may include directly altering an execution of a program by the first processor in response to the execution optimization information. In other instances the altering an execution of a program by the first processor in response to the execution optimization information may include causing an alteration of an execution of a program by the first processor in response to the execution optimization information. In further instances the altering an execution of a program by the first processor in response to the execution optimization information may include initiating an alteration of an execution of a program by the first processor in response to the execution optimization information.

In an embodiment the execution optimization information includes execution optimization information created by a hardware device not shown utilizing data collected from a second processor not shown that is at least substantially a same processor as the first processor . For example the execution optimization information used to alter a current execution of a program by the first processor may have been created during a prior execution of the program by the first processor. In another embodiment the execution optimization information includes an execution optimization information created by a hardware device utilizing data collected from a second processor that is at least a substantially different processor from the first processor. For example the execution optimization information used to alter a current execution of a program by the first processor may have been created during a prior execution of the program by a completely different second processor which may be a processor running in a completely different computing device.

In an embodiment the information store includes at least a portion of a cache. In another embodiment the information store includes at least one of an I cache or a D cache. In a further embodiment the information store includes at least one of a volatile memory or a non volatile memory. In a further embodiment the information store includes a computer readable medium. In another embodiment the information store may include a non volatile outboard storage such as magnetic disk storage.

In another embodiment the first processor and the hardware circuit are formed on a single chip illustrated as a single chip . In a further embodiment the first processor and the information store are formed on a single chip illustrated as a single chip .

In an embodiment a computational error includes an error introduced during computation. In another embodiment a computational error includes a setup hold violation also known as a setup and hold time requirement violation for a transistor. For example in an embodiment a transistor of the processor has input requirements. A setup and hold time defines a window of time during which the input of the transistor must be valid and stable in order to assure valid data at the output of the transistor. Setup is a time that the input must be valid before the transistor samples. Hold time is a time the input must be maintained valid while the transistor samples. In a further embodiment a setup and hold violation may include valid values but the values occur outside the window of time. In another embodiment a setup and hold violation may include an invalid value that occurs within the window of time. In a further embodiment a computational error includes at least one of a computational error corresponding to a processor clock speed a processor voltage a processor temperature a noise spike a cosmic particle a soft error an unreliable processor hardware an incorrectly executed instruction and or a electromigration error.

Program instructions are generally fetched in a sequence or order for execution by the processor . A first instruction of the sequence of program instructions may execute but a second instruction of the sequence may not execute because of a processor computational error. The monitoring circuit is operable to detect a computational error corresponding to an execution of the second instruction. Rather than losing the entire execution of the sequence of program instructions because of the computational error the error recovery circuit is operable to restore an execution of the sequence of program instructions to the first instruction in response to the detected computational error. Execution of the sequence of program instructions then restarts from the first instruction. Means for designating the first instruction are described below.

In an embodiment the monitoring circuit further includes a monitoring circuit implemented in hardware and operable to detect a computational error corresponding to an execution of a second instruction by a processor operable to execute a sequence of program instructions that includes a first instruction that is fetched before the second instruction. Any technique known by those skilled in the art may be used to implement the monitoring circuit in hardware. In another embodiment the monitoring circuit further includes a monitoring circuit implemented in a dynamic implementation verification architecture DIVA and operable to detect a computational error corresponding to an execution of a second instruction by a processor operable to execute a sequence of program instructions that includes a first instruction that is fetched before the second instruction. Examples of a DIVA architecture approach can be found in T. Austin printed on Feb. 6 2006 and located at http www.huron.ucdavis.edu micro32 presentations p austin.pdf S. Chatterjee printed on Feb. 6 2006 and located at http www.eecs.umich.edu taustin papers MICRO33 divadesign.pdf each of which is incorporated herein by reference. In a further embodiment the monitoring circuit may includes a hardware implemented monitoring circuit employing a TEATime execution checker algorithm architecture and operable to detect a computational error corresponding to an execution of a second instruction by a processor operable to execute a sequence of program instructions that includes a first instruction that is fetched before the second instruction. The TEATime execution checker algorithm architecture may also be known as a Timing Error Avoidance system. Examples of a TEATime execution checker algorithm approach can be found in United States Patent application entitled SYSTEM AND METHOD OF DIGITAL SYSTEM PERFORMANCE ENHANCEMENT naming Augustus K. Uht as inventor and published as US 2004 0174944 A1 G. Uht and R. Vaccaro . . . printed on Feb. 6 2006 and located at http www.lems.brown.edu iris BARC2005 Webpage BARCpresentations uht.pdf A. Uht and R. Vaccaro printed on Feb. 6 2006 and located at http www.ele.uri.edu uht papers MuRI TR 20041027.pdf A. Uht printed on Feb. 6 2006 and located at www.ele.uri.edu uht talks TEAtimeroadshow2003.Dist.pdf A Uht printed on Feb. 6 2006 and located at http www.ele.uri.edu uht papers SSGRR2003wFnlUht.pdf each of which is incorporated herein by reference. In another embodiment the monitoring circuit may be implemented in a RAZOR architectural approach. An example of a RAZOR architecture approach can be found in D. Ernst et al. Razor printed on Jul. 7 2006 and located at http www.gigascale.org pubs 426 razor.submit.authors.pdf which is incorporated herein by reference.

In an embodiment the monitoring circuit further includes a hardware implemented monitoring circuit employing another processor not shown operable to execute the second instruction substantially in parallel with the processor . The monitoring circuit also is operable to detect a computational error corresponding to an execution of a second instruction by the processor by correlating an output of the processor with the output of the another processor. In another embodiment the monitoring circuit further includes a hardware implemented monitoring circuit operable to detect a computational error corresponding to a setup hold violation occurring in a processor operable to execute a sequence of program instructions that includes a first instruction that is fetched before the second instruction.

In an embodiment error recovery circuit includes an error recovery circuit operable to restore an execution of the sequence of program instructions to a logical state associated with the first instruction in response to the detected computational error. In a further embodiment the error recovery circuit includes an error recovery circuit implemented in at least one of hardware software firmware and or a microengine and operable to restore an execution of the sequence of program instructions to the first instruction in response to the detected computational error. In another embodiment the error recovery circuit includes an error recovery circuit implemented in software associated with at least one of an operating system or a program executable by the processor and operable to restore an execution of the sequence of program instructions to the first instruction in response to the detected computational error. For example in an embodiment the error recovery circuit detects a computational error and hands off recovery from the error to an operating system that includes the error recovery circuit. In a further embodiment the error recovery circuit includes an error recovery circuit operable to designate the first instruction as a checkpoint and to restore an execution of the sequence of program instructions to the checkpoint in response to the detected computational error. In an embodiment the error recovery circuit includes an error recovery circuit operable to designate the first instruction as an instruction separated from the second instruction by a predetermined number of instructions and to restore an execution of the sequence of program instructions to the first instruction in response to the detected computational error. For example a predetermined number of instructions may include a 5K instruction a 10K instruction a 25K instruction or a 50K instruction spacing.

In another embodiment the error recovery circuit includes an error recovery circuit operable to select the first instruction corresponding to a checkpoint protocol and to rollback an execution of the sequence of program instructions to the selected checkpoint in response to the detected computational error. In a further embodiment the exemplary computing environment includes the controller the processor and an information store . In another embodiment the controller and the processor are formed on a single chip .

In an embodiment the controller further includes a controller that includes an error recovery circuit for at least one of initiating activating causing facilitating accomplishing and or achieving a rollback of an execution of the sequence of program instructions to the first instruction in response to the detected computational error. In another embodiment the controller further includes a controller that includes an error recovery circuit implemented in at least one of hardware software firmware and or microengine for rolling back an execution of the sequence of program instructions to the first instruction in response to the detected computational error.

In an embodiment the processor and the controller are formed on a same chip illustrated as a chip . In another embodiment the computerized device further includes the processor the controller and an information store .

A recovery operation restores an execution of the instruction sequence to a logical state associated with the first instruction in response to the sensed computational error. The operational flow then moves to an end operation.

In an embodiment the operational flow may be implemented in the computing system environment and the computer processor error controller of and or in the exemplary computing device of .

In an embodiment the monitoring circuit includes a hardware implemented monitoring circuit for detecting a computational error corresponding to an execution of an instruction of a sequence of instructions by a processor subsystem having an adjustable operating parameter. In another embodiment the monitoring circuit includes a monitoring circuit implemented in at least one of hardware software firmware and or a microengine for detecting a computational error corresponding to an execution of an instruction of a sequence of instructions by a processor subsystem having an adjustable operating parameter. In a further embodiment the monitoring circuit includes a monitoring circuit implemented in dynamic implementation verification architecture DIVA and for detecting a computational error corresponding to an execution of an instruction of a sequence of instructions by a processor subsystem having an adjustable operating parameter. In another embodiment the monitoring circuit includes a monitoring circuit employing a TEATime execution checker algorithm and for detecting a computational error corresponding to an execution of an instruction of a sequence of instructions by a processor subsystem having an adjustable operating parameter.

In an embodiment the recovery circuit includes a recovery circuit implemented in at least one of hardware software firmware and or a microengine and for rolling back an execution of the sequence of instructions to a checkpoint in response to the detected computational error. In a further embodiment the recovery circuit includes a recovery circuit implemented in software associated with at least one of an operating system or a program executable by the processor subsystem and for rolling back an execution of the sequence of instructions to a checkpoint in response to the detected computational error. In another embodiment the recovery circuit includes a recovery circuit for at least one of initiating activating causing facilitating accomplishing and or achieving a re execution of the instruction by the processor subsystem by rolling back an execution of the sequence of instructions to a checkpoint in response to the detected computational error.

In an embodiment the control circuit includes a control circuit implemented in at least one of hardware software firmware and or a microengine and for adjusting the adjustable operating parameter in response to a performance criterion.

The manufacturer s nominal zero error point MNZEP reflects a common practice of manufacturers in specifying processor ratings and operating parameters to generally assume a worst case operating situation and to set the operating clock rate or frequency at the manufacturer s nominal zero error point MNZEP. The manufacturer s nominal zero error point MNZEP may be a point selected to produce a tolerated operating error rate that is very small for example an operating error rate that is in a range of 10per hour. In other instances the manufacturer s nominal zero error point MNZEP reflects a manufacturer s practice of labeling a higher speed processor chip as a lower speed processor chip. In situations an individual processor can be operated at a higher clock rate than the manufacturer s nominal zero error point MNZEP without exceeding a manufacturer s tolerated operating error rate. Without an ability to recover from timing errors resulting from a clock rate higher than the actual nominal zero error point ANZEP a computational system is subject to an increased possibility of system failure and data loss corruption due to the timing errors as clock rate further increases.

An error rate line ER illustrates an error rate per instruction or per instruction sequence for a processor. An execution rate line ET illustrates an execution time per instruction or per instruction sequence for the processor. A time for error corrected execution line TECE illustrates a time for a time for error corrected execution of an instruction or instruction sequence and reflects a measure of useful work performed by the processor. A time for an error corrected execution at a particular clock rate in excess of the ANZEP includes a sum of the execution rate line ET and a time to correct erroneous executions because the ANZEP is exceeded. The time for error corrected execution line TECE illustrates this sum and includes an optimal error tolerant operating portion OETOP identified as a 0 slope location. In an embodiment running a processor having a computational fault recovery means at the OETOP results in a minimum time for an error corrected execution of an instruction or instruction sequence. In a further embodiment the time for error corrected execution line TECE illustrates a performance criterion. In another embodiment the time for error corrected execution line TECE represents a performance criterion corresponding to an incidence of a detected computational error illustrated as a selected point not shown on the error rate line ER.

Returning to in an embodiment the control circuit includes a control circuit for adjusting the adjustable operating parameter in response to a performance criterion corresponding to an incidence of the detected computational error. In another embodiment the performance criterion includes a performance criterion embodied in the time for error corrected execution line TECE of . For example the adjusting the adjustable operating parameter in response to a performance criterion may include adjusting a clock rate to achieve a performance criterion of a minimum TECE. In a further embodiment the performance criterion includes a performance criterion corresponding to an incidence of the detected computational error. For example the adjusting may include adjusting a clock rate to achieve a performance criterion of a target error rate along the ER line thus achieving a performance criterion of no more than the target error rate.

In an embodiment the control circuit includes a control circuit implemented in software associated with at least one of an operating system and or a program executable by the processor subsystem and for adjusting the adjustable operating parameter in response to a performance criterion. In another embodiment the control circuit includes a control circuit for adjusting the adjustable operating parameter in response to a performance criterion corresponding to an incidence of a detected processor subsystem computational error. In a further embodiment the control circuit includes a control circuit for at least one of initiating activating causing facilitating accomplishing and or achieving an adjustment of the adjustable operating parameter in response to a performance criterion. In an embodiment the control circuit includes a control circuit for adjusting a voltage of the processor subsystem in response to a performance criterion.

In an embodiment the control circuit includes a control circuit for adjusting a processor subsystem in response to a performance criterion corresponding to an incidence of the detected computational error. In another embodiment the control circuit includes a control circuit for adjusting a frequency of a timing signal employed by the processor subsystem in response to a performance criterion. In a further embodiment the control circuit includes a control circuit for adjusting a processor subsystem clock in response to a performance criterion corresponding to an incidence of the detected computational error. In another embodiment the control circuit includes a control circuit for adjusting the adjustable operating parameter in response to a performance criterion corresponding to at least one of a single incidence of the detected computational error an incidence frequency of the detected computational error an incidence occurrence rate of the detected computational error an incidence tempo of the detected computational error an incidence pattern of the detected computational error or an incidence prevalence of the detected computational error. For example the incidence frequency of the detected computational error may include an incidence frequency over a time of the detected computational error. In another example the incidence rate of the detected computational error may include an incidence rate of the detected computational error per execution of an instruction or an instruction sequence. In a further example the incidence prevalence of the detected computational error may include an incidence distribution of the detected computational error such as more than X instances occurring within Y instructions of a sequence of Z instructions.

In an embodiment the control circuit includes a control circuit for adjusting the adjustable operating parameter based on a performance criterion substantially minimizing a time required to complete successfully an execution of the sequence of instructions . In another embodiment the control circuit includes a control circuit for adjusting the adjustable operating parameter in a substantial conformity with a performance criterion corresponding to

In an embodiment the control circuit includes a control circuit for adjusting a frequency of the processor subsystem clock signal based upon a performance criterion corresponding to a substantial minimization of time to complete an execution of the sequence of instructions . In another embodiment the control circuit includes a control circuit for adjusting a processor subsystem clock signal frequency in substantial conformity with a performance criterion corresponding to

In a further embodiment the control circuit includes a control circuit for adjusting a processor subsystem voltage Vcc in response to a performance criterion corresponding to a substantial minimization of time to execute the sequence of instructions . In another embodiment the control circuit includes a control circuit for adjusting a processor subsystem voltage in substantial conformity with a performance criterion corresponding to

In an embodiment the control circuit includes a control circuit for adjusting the adjustable operating parameter based upon a performance criterion substantially minimizing an expected time to successfully complete an execution of the sequence of instructions while at least one other adjustable operating parameter remains substantially constant. In another embodiment the control circuit includes a control circuit for adjusting the adjustable operating parameter based upon a dynamically derived performance criterion and an incidence of the detected computational error. For example the control circuit may include an operability to vary a clock rate of a processor subsystem in an environment dynamically determine corresponding times required for an error corrected execution of an instruction sequence and select a clock signal rate for a subsequent execution according to a performance criterion. For example the performance criterion may include selection of a clock signal rate corresponding to the optimized error tolerant operating portion OETOP for the processor. Alternatively the performance criterion may include selection of a clock signal rate based upon another portion of the TECE line representing a time for an error corrected execution of the instruction sequence such as a 10 lesser clock rate than the optimized error tolerant operating portion OETOP. In a further embodiment the dynamically derived performance criterion includes a dynamically derived performance criterion having an objective to substantially minimize an expected time to successfully complete an execution of the sequence of instructions.

In an embodiment the control circuit includes a control circuit for adjusting the adjustable operating parameter based upon a performance map and an empirically based incidence of the detected computational error. In another embodiment the control circuit includes a control circuit for adjusting the adjustable operating parameter based upon an error tolerant performance criterion corresponding to an incidence of the detected computational error. In a further embodiment the control circuit includes a control circuit for adjusting the adjustable operating parameter in response to a performance criterion embodied in a lookup table and an incidence of the detected computational error. In another embodiment the performance criterion embodied in the lookup table includes a performance criterion embodied in a lookup table having an objective to substantially minimize an expected time to execute the sequence of instructions.

In an embodiment the sensing module includes a sensing module operable to detect a computational error in an execution of an instruction of the sequence of instructions . In another embodiment the sensing module includes a sensing module operable to detect an execution path synchronization error in an execution of an instruction of the sequence of instructions. In a further embodiment the sensing module includes a sensing module operable to detect a clock induced error in an execution of an instruction of the sequence of instructions. In another embodiment the sensing module includes a sensing module operable to detect a processor voltage induced error in an execution of an instruction of the sequence of instructions. In a further embodiment the sensing module includes a sensing module implemented in hardware and operable to detect an operating parameter induced error in an execution of an instruction of the sequence of instructions.

In an embodiment the recovery module includes a recovery module implemented in at least one of hardware software firmware and or a microengine and operable to rollback an execution of the sequence of instructions to a checkpoint in response to the detected operating parameter induced error. In another embodiment the processor subsystem and at least one of the sensing module the recovery module and or the control module are formed on a same chip .

In an embodiment the control module includes a control module implemented in at least one of hardware software firmware and or a microengine and operable to adjust the adjustable operating parameter in response to a performance criterion corresponding to an incidence of the detected operating parameter induced error. In another embodiment the control module includes a control module operable to adjust the adjustable operating parameter in response to an error tolerant performance criterion corresponding to an incidence of the detected operating parameter induced error.

In an embodiment the controller module including a monitor circuit further includes a controller module including a monitor circuit for detecting an incidence of a computational error corresponding to an execution of an instruction of the sequence of instructions by the processor subsystem. In another embodiment the controller module including a monitor further includes a controller module including a monitor circuit for detecting an incidence of an execution path synchronization error corresponding to an execution of an instruction of the sequence of instructions by the processor subsystem. In a further embodiment the controller module including a monitor circuit includes a controller module including a hardware implemented monitor circuit for detecting an incidence of an operating parameter caused error corresponding to an execution of an instruction of the sequence of instructions by the processor subsystem.

In an embodiment the controller module including a monitor circuit further includes a controller module including a monitor circuit implemented in at least one of hardware software firmware and or a microengine for detecting an incidence of an operating parameter caused error corresponding to an execution of an instruction of the sequence of instructions by the processor subsystem. In another embodiment the controller module including a monitor circuit further includes a controller module including a monitor circuit implemented in dynamic implementation verification architecture DIVA and for detecting an incidence of an operating parameter caused error corresponding to an execution of an instruction of the sequence of instructions by the processor subsystem. In a further embodiment the controller module including a monitor circuit further includes a controller module including a monitor circuit employing a TEATime execution checker algorithm and for detecting an incidence of an operating parameter caused error corresponding to an execution of an instruction of the sequence of instructions by the processor subsystem.

In an embodiment the controller module including a control circuit further includes a control circuit implemented in at least one of hardware software firmware and or a microengine and for adjusting the adjustable operating parameter based upon an error tolerant performance criterion. In another embodiment the controller module including a control circuit further includes a control circuit implemented in software associated with at least one of an operating system and or a program executable by the processor subsystem and for adjusting the adjustable operating parameter based upon an error tolerant performance criterion. In a further embodiment the controller module including a control circuit further includes a controller module including a control circuit for at least one of initiating activating causing facilitating accomplishing and or achieving an adjustment of the adjustable operating parameter based upon an error tolerant performance criterion.

In an embodiment the controller module including a control circuit further includes a controller module including a control circuit for adjusting a voltage of the processor subsystem based upon an error tolerant performance criterion. In another embodiment the controller module including a control circuit further includes a controller module including a control circuit for adjusting a frequency of a timing signal employed by the processor subsystem based upon an error tolerant performance criterion. In a further embodiment the controller module including a control circuit further includes a controller module including a control circuit for adjusting a processor clock based upon an error tolerant performance criterion.

In an embodiment the controller module including a control circuit further includes a controller module including a control circuit for adjusting the adjustable operating parameter to at least substantially minimize a time required to successfully complete an execution of the sequence of instructions. In another embodiment the controller module including a control circuit further includes a controller module including a control circuit for adjusting the adjustable operating parameter in substantial conformity with an error tolerant performance criterion that corresponds to

In an embodiment the controller module including a control circuit further includes a controller module including a control circuit for adjusting a processor clock frequency to substantially minimize a time to complete an execution of the sequence of instructions. In another embodiment the controller module including a control circuit further includes a controller module including a control circuit for adjusting a processor clock frequency in substantial conformity with

In an embodiment the controller module including a control circuit further includes a controller module including a control circuit for adjusting a processor voltage to substantially minimize a time to complete an execution of the sequence of instructions. In another embodiment the controller module including a control circuit further includes a controller module including a control circuit for adjusting a processor clock frequency in substantial conformity with

In another embodiment the controller module including a control circuit further includes a controller module including a control circuit for adjusting a processor clock frequency to substantially minimize an expected time to successfully complete an execution of the sequence of instructions while at least one other adjustable operating parameter remains substantially constant. In a further embodiment the controller module including a control circuit further includes a controller module including a control circuit for adjusting the adjustable operating parameter based upon an error tolerant and dynamically derived performance criterion. For example the control circuit may dynamically derive data representative of the time for error corrected execution line TECE of . The time for error corrected execution line TECE represents a time for an error corrected execution of an instruction or instruction sequence as at least one adjustable operating parameter of CLK signal and or processor voltage Vcc is varied for the processor subsystem . This allows the processor subsystem to be tuned for its unique properties and its environment. In an embodiment the dynamically derived performance criterion may be derived once for a processor and be available for a future use. In another embodiment the dynamically derived performance criterion may be derived periodically for a processor and be available for a future use. In a further embodiment the dynamically derived performance criterion may be derived from a processor of a processor class and be available for a future use by other instances of processors of the processor class. In another embodiment the controller module including a control circuit for adjusting the adjustable operating parameter based upon an error tolerant dynamically derived performance criterion further includes a controller module including a control circuit for adjusting the adjustable operating parameter based upon an error tolerant dynamically derived performance criterion having an objective to substantially minimize an expected time to successfully complete an execution of the sequence of instruction.

In an embodiment the controller module including a control circuit further includes a controller module including a control circuit for adjusting the adjustable operating parameter based upon an empirically based error tolerant performance map. In another embodiment the controller module including a control circuit further includes a controller module including a control circuit for adjusting the adjustable operating parameter based upon a performance criterion embodied in a lookup table. In a further embodiment the controller module including a control circuit further includes a controller module including a control circuit for adjusting the adjustable operating parameter based upon a performance criterion embodied in a lookup table and having an objective of substantially minimizing a time to complete an execution of the sequence of instruction.

In an embodiment the controller module including a control circuit further includes a controller module including a control circuit for adjusting the adjustable operating parameter based upon an error tolerant performance criterion corresponding to an incidence of the detected operating parameter caused error. In another embodiment the controller module further includes an error recovery circuit operable to restore an execution of the sequence of program instructions to a checkpoint based upon the detected operating parameter caused error.

Those having skill in the art will recognize that the state of the art has progressed to the point where there is little distinction left between hardware and software implementations of aspects of systems the use of hardware or software is generally but not always in that in certain contexts the choice between hardware and software can become significant a design choice representing cost vs. efficiency tradeoffs. Those having skill in the art will appreciate that there are various vehicles by which processes and or systems and or other technologies described herein can be effected e.g. hardware software and or firmware and that the preferred vehicle will vary with the context in which the processes and or systems and or other technologies are deployed. For example if an implementer determines that speed and accuracy are paramount the implementer may opt for a mainly hardware and or firmware vehicle alternatively if flexibility is paramount the implementer may opt for a mainly software implementation or yet again alternatively the implementer may opt for some combination of hardware software and or firmware. Hence there are several possible vehicles by which the processes and or devices and or other technologies described herein may be effected none of which is inherently superior to the other in that any vehicle to be utilized is a choice dependent upon the context in which the vehicle will be deployed and the specific concerns e.g. speed flexibility or predictability of the implementer any of which may vary. Those skilled in the art will recognize that optical aspects of implementations will typically employ optically oriented hardware software and or firmware.

The foregoing detailed description has set forth various embodiments of the devices and or processes via the use of block diagrams flow diagrams operation diagrams flowcharts illustrations and or examples. Insofar as such block diagrams operation diagrams flowcharts illustrations and or examples contain one or more functions and or operations it will be understood by those within the art that each function and or operation within such block diagrams operation diagrams flowcharts illustrations or examples can be implemented individually and or collectively by a wide range of hardware software firmware or virtually any combination thereof.

In addition those skilled in the art will appreciate that the mechanisms of the subject matter described herein are capable of being distributed as a program product in a variety of forms and that an illustrative embodiment of the subject matter described herein applies equally regardless of the particular type of signal bearing media used to actually carry out the distribution. Examples of a signal bearing media include but are not limited to the following recordable type media such as floppy disks hard disk drives CD ROMs digital tape and computer memory and transmission type media such as digital and analog communication links using TDM or IP based communication links e.g. packet links .

It will be understood by those within the art that in general terms used herein and especially in the appended claims e.g. bodies of the appended claims are generally intended as open terms e.g. the term including should be interpreted as including but not limited to the term having should be interpreted as having at least the term includes should be interpreted as includes but is not limited to etc. . It will be further understood by those within the art that if a specific number of an introduced claim recitation is intended such an intent will be explicitly recited in the claim and in the absence of such recitation no such intent is present. For example as an aid to understanding the following appended claims may contain usage of the introductory phrases at least one and one or more to introduce claim recitations. However the use of such phrases should not be construed to imply that the introduction of a claim recitation by the indefinite articles a or an limits any particular claim containing such introduced claim recitation to inventions containing only one such recitation even when the same claim includes the introductory phrases one or more or at least one and indefinite articles such as a or an e.g. a and or an should typically be interpreted to mean at least one or one or more the same holds true for the use of definite articles used to introduce claim recitations. In addition even if a specific number of an introduced claim recitation is explicitly recited those skilled in the art will recognize that such recitation should typically be interpreted to mean at least the recited number e.g. the bare recitation of two recitations without other modifiers typically means at least two recitations or two or more recitations . Furthermore in those instances where a convention analogous to at least one of A B and C etc. is used in general such a construction is intended in the sense one having skill in the art would understand the convention e.g. a system having at least one of A B and C would include but not be limited to systems that have A alone B alone C alone A and B together A and C together B and C together and or A B and C together etc. . In those instances where a convention analogous to at least one of A B or C etc. is used in general such a construction is intended in the sense one having skill in the art would understand the convention e.g. a system having at least one of A B or C would include but not be limited to systems that have A alone B alone C alone A and B together A and C together B and C together and or A B and C together etc. .

The herein described aspects depict different components contained within or connected with different other components. It is to be understood that such depicted architectures are merely exemplary and that in fact many other architectures can be implemented which achieve the same functionality. In a conceptual sense any arrangement of components to achieve the same functionality is effectively associated such that the desired functionality is achieved. Hence any two components herein combined to achieve a particular functionality can be seen as associated with each other such that the desired functionality is achieved irrespective of architectures or intermedial components. Likewise any two components so associated can also be viewed as being operably connected or operably coupled to each other to achieve the desired functionality. Any two components capable of being so associated can also be viewed as being operably couplable to each other to achieve the desired functionality. Specific examples of operably couplable include but are not limited to physically mateable and or physically interacting components and or wirelessly interactable and or wirelessly interacting components.

While various aspects and embodiments have been disclosed herein other aspects and embodiments will be apparent to those skilled in the art. The various aspects and embodiments disclosed herein are for purposes of illustration and are not intended to be limiting with the true scope and spirit being indicated by the following claims.

