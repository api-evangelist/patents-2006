---

title: Method and system for tracking access to application data and preventing data exploitation by malicious programs
abstract: Provided are a method and system for tracking access to application data and preventing data exploitation by malicious programs. In one example, the method includes shimming into a running process of the system to create at least one monitoring hook to monitor a program, building an execution path of the monitored program, and monitoring a behavior of the execution path for malicious behavior using the monitoring hook.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09171157&OS=09171157&RS=09171157
owner: Blue Coat Systems, Inc.
number: 09171157
owner_city: Sunnyvale
owner_country: US
publication_date: 20060328
---
Malicious software malware refers to software programs that perform unwanted functions on a system. Examples of malware include computer viruses worms Trojans spyware keyloggers and the like. Currently the detection of malware is primarily performed using two known methods. One method is a signature based approach which detects binary digital bit streams or patterns in the binary object code of malware based on a list of binary strings that are found in known malware programs. Another method is a rule based or heuristic approach which detects malware programs based on behaviors that are shared by malware programs of a given class. These methods however have their downsides. If the behavior patterns are too narrowly defined some malware programs may not be detected which results in compromising the system. If the rules are too broadly defined non harmful programs may be mistaken for malware programs which results in false alarms and potentially corrective action that is mistakenly applied.

It is to be understood that the following disclosure provides many different embodiments or examples for implementing different features of the disclosure. Specific examples of components and arrangements are described below to simplify the present disclosure. These are of course merely examples and are not intended to be limiting. In addition the present disclosure may repeat reference numerals and or letters in the various examples. This repetition is for the purpose of simplicity and clarity and does not in itself dictate a relationship between the various embodiments and or configurations discussed.

Aspects of the present disclosure provide a computer implemented method a computer system and a computer program product for tracking access to application data and preventing data exploration by malicious programs. The aspects of the present disclosure provide a detection program that detects malware programs by performing a real time weighted analysis of a program s complete execution path. In an illustrative embodiment the detection program monitors normal execution of programs in real time to generate probability ratings or weightings. A weighting is generated based on interactions between the running program and its internal functional modules as well as externally called functional modules and or application programming interfaces APIs . If the weighting reaches a pre defined threshold of infection the detection program identifies the running program as a malware program and automatically triggers an alert and or takes corrective action to address the threat.

An operating system running on clients and coordinates and provides control of various components. As a client the operating system may be a commercially available operating system such as Microsoft Windows XP Microsoft and Windows are trademarks of Microsoft Corporation Seattle Wash. . An object oriented software system such as the Java software system may run in conjunction with the operating system and provide calls to the operating system from Java programs or applications executing on clients and . Java is a product available from Sun Microsystems Inc of Santa Clara Calif. It is understood that the present disclosure may be used with other operating systems and applications written using other programming languages.

A detection program may be implemented directly on a client such as clients and may be implemented on the server or may be distributed between for example client and server . In an alternative embodiment clients and may access detection program from a monitoring device such as server . The detection program may be developed using an object oriented programming language such as Java or C . It is understood that is intended as an example and not as an architectural limitation for different embodiments of the present disclosure.

The detection program of the present disclosure detects malware programs such as a keylogger. A keylogger is a program designed to surreptitiously capture the typed input of a user. The captured input is usually either saved in a log file locally or transmitted to a third party or a computer system remotely over a network. Keyloggers are often used to steal user identities and logon credential information as well as other important data. In addition to keyloggers other types of malicious programs such as a virus or a spyware program may also be detected by detection program . Detection program may be activated by a user of the system automatically upon a user login to the system or network or upon the occurrence of other events.

The detection program monitors the behavior of a potential malware program i.e. a program of interest based on the interaction between the program of interest and the operating system as well as the interaction between the program of interest and other external programs and program modules. In addition to the interaction between the program of interest and the operating system the detection program may monitor operating system resources for example the key message queue in the case of keyloggers. Based on such monitoring the detection program associates a weighting with each program of interest. The weighting indicates the probability that the program of interest is a malware program. The higher the weighting of the program the more likely it is the program is malicious. If a running program of interest attempts to activate functional modules that are outside of the program and such activation causes malicious behavior the weighting of the program is increased. In the example of keyloggers an attempt to access the key message queue may increase the weighting of the program. Although a higher weighting is indicative of a higher probability of maliciousness in the present example it is understood that a weighting system may be implemented that uses a lower weighting to indicate a higher probability of maliciousness.

If a relationship is found where the program of interest is designed to initiate other function calls or programs that may indicate the presence of malware but has not yet called those functions the weighting of the program may also increase. For example the detection program may detect that KL.exe calls other programs such as KLHELPER.exe and that KLHELPER.exe includes behavior that may indicate the presence of malware. The weighting of KLHELPER.exe s behavior is added to KL.exe s weighting which raises the probability that KL.exe is a malware program. Thus the detection program monitors the interactions across multiple program modules instead of a single program or program module.

If the weighting of the program of interest reaches a pre defined threshold of infection the detection program identifies the program as a malware program and triggers an alert. The alert may perform any number of predefined actions including informing a user that further analysis is needed or causing the detection program to automatically take corrective action to address the malware threat. When the alert is triggered the detection program may also perform a module analysis that may result in lowering the probability of the program being a malware program. For example the module analysis may be based upon the program s association with and its ability to call other non malware programs such as APIs or programs whose behavior in conjunction with the calling program is associated with normal maintenance of the system software updates operating system updates and the like.

After step the detection program builds execution paths of all processes and modules for use with the monitoring hooks step . Execution paths are sequences of calls made by a program to functions and APIs of the system and logical state machines that define the functions and APIs of the system. A more specific example of step is discussed below with reference to . After the execution paths are built the detection program begins monitoring the behavior of one of the execution paths step . A more specific example of step is discussed below with reference to . A determination is then made by the detection program as to whether the sequence of calls made in the execution path generates any known malicious behavior step . This step may be performed by examining pre defined behavior rules that identify potentially malicious behavior. An example of a known malicious behavior may be a call to a function that processes key messages. If the sequence of calls generates malicious behavior the detection program associates the behavior with a potential malware infection instance step . However if no malicious behavior is generated the process returns to step to continue monitoring the behavior of the next execution path.

If the behavior is associated with a potential malware infection instance in step the detection program monitors whether the instance makes other operating system API calls step . A determination is then made as to whether the instance makes other OS API calls step . If other OS API calls are made the detection program places the instance on a watch list and monitors for additional activity generated by the instance step . However if no other OS API calls are made the process returns to step to continue monitoring the behavior of the instance.

If the instance is placed on a watch list in step a determination is then made by the detection program as to whether additional activities that are generated by the other OS API calls generate known malicious behavior step . This step may be performed by examining the pre defined malware behavior rules. If so the detection program increases the weighting of the instance to indicate that it is a potential malware program step before continuing to step . For example if a program of interest named KL.exe is identified by the detection program as a potential malware infection instance KL.exe is then monitored at a more detailed level. If the detailed monitoring performed by the detection program identifies additional activity that is associated with a type of malware the weighting is increased. However if no additional activity is identified the weighting stays the same and is increased only if the behavior profile changes.

In step the detection program monitors the interaction between the instance and other program modules. A determination is then made by the detection program as to whether the instance attempts to call program modules that are outside of the instance step . If the instance calls outside program modules the detection program returns to step to monitor the behavior of the called program modules. If the instance does not call outside program modules the process continues to step .

In step a determination is made as to whether the weighting of the program instance reaches a pre defined threshold of infection. If the pre defined threshold of infection is reached the detection program may perform a module analysis which lowers the weighting of the instance if the instance is calling legitimate programs step . A more specific example of step is discussed below with reference to . When the threshold of infection is crossed an alert is triggered by the detection program and or corrective action is taken by the detection program to address the threat step . The process may then terminate. Returning to step if the weighting does not reach the pre defined threshold a determination is then made by the detection program as to whether an additional execution path is present step .

If an additional execution path is present the process returns to step to monitor the behavior of the next execution path. If no additional execution path is present the process may terminate. In cases where the execution path is updated during the building of execution paths of a program the detection program checks the behavior of the execution path against pre defined behavior rules to determine if the weighting needs to be updated. Examples of pre defined behavior rules for a potential keylogger program include rules that a program should never make a call to an operating system message processing function never make a call to a function that processes key messages never make a call to a function that stores key messages and never make a call to a function that forwards stored messages to another machine.

After the message dispatcher is located the detection program replaces the message dispatcher of the operating system with the detection program s message dispatcher step . Thus a shim for the operating system s dispatcher is created. After the operating system s dispatcher is replaced the detection program scans the device desktop virtual memory space to locate functions of interest step . An example of a function of interest is a function that processes key messages or stores key messages. Once the functions of interest are located the detection program replaces the functions with the detection program s monitoring functions step and thus creates a shim for monitoring malicious behavior for particular functions.

The exemplary process in describes step of in further detail. As shown in from the perspective of the detection program the process begins when input from a user is detected step . Examples of user input include a keystroke or a mouse click. Next the detection program identifies state transitions of the logical state machine that are triggered by the user input step . Based on the state transitions the detection program identifies a sequence of calls to functions and application programming interfaces APIs triggered by the state transitions of the logical state machine step . Once the sequence of calls is identified the detection program builds execution paths of the program based on the sequence of calls step . The process terminates thereafter.

Next the detection program checks the signature of each of the recorded programs and removes those that have a valid signature from the list step . The signature may include information such as vendor information installation information and signing information of the programs. After the programs with valid signatures are removed the detection program monitors the remaining programs in the list of programs for communication with other programs step for example network operations with remote machines communication operations with other programs that perform network operations or file operations on files that are shared by another process. A determination is then made as to whether the remaining programs communicate with other programs based on whether they perform any one of the above operations step . If a remaining program communicates with other programs the program is placed in a watch list to be monitored at a more detailed level step and the process terminates thereafter. If the remaining program does not communicate with other programs the process returns to step to examine other remaining programs.

As shown in from the perspective of the detection program the process begins when the detection program checks the information associated with a module of the program step . The information of the module that the detection program checks includes information such as the module s loader the module s vendor the module s installation procedure if verifiable and the module s certificate signature if one exists. Examples of a loader include an Internet Explorer helper a Windows shell extension and a preloaded third party module.

A determination is then made as to whether the module is a legitimate program step . This determination is made based on the information of the module examined in step . If the information of the module indicates that the module is a legitimate program the detection program lowers the weighting of the module to below the threshold of infection step . Generally if a module is a legitimate program its vendor information is readily available as it is installed through a standard procedure and has a valid certificate signature. However if the module is not a legitimate program no change is made to the weighting of the module step . The process terminates thereafter.

As discussed above in addition to detecting malware programs such as keyloggers other types of malware programs including viruses and spyware programs may be detected using the detection program provided by the present disclosure. In these cases since there is no known list of signatures other types of behavior are detected by the detection program . For example the detection program may monitor disk access for viruses that attempt to delete files on the system monitor network access for viruses that spread and attack other systems within the network monitor local data storage access for spyware that steals address book information and monitor frame buffer for spyware programs that capture computer screens.

For the detection of viruses the pre defined malware behavior rules are different from the rules defined for the keylogger program. Examples of pre defined malware behavior rules for viruses include rules for only loading modules that are either common to all programs located in the system wide directory or specific to a particular program located in the program s installation directory only accessing files that are either common to all programs located in the system wide directory or specific to a particular program located in the program s installation directory never modifying system configuration modules or files that belong to the operating system never deleting files belonging to other programs such as a user s email program and never making multiple connections to different machines within a short period of time.

For the detection of spyware programs the pre defined malware behavior rules are also different from the rules defined for the keylogger program. Examples of pre defined malware behavior rules for spyware include rules for ensuring that requests to a website generate connections to that website only that site specific browser objects are only used when the browser is connected to the site and that site specific browser modules are only used to create update or modify a site publisher s resources.

The detection program s monitoring function has the capability to monitor for multiple sets of predefined malware behavior rules simultaneously. Thus the monitoring function may detect not only potential keylogger programs but also viruses and spyware programs simultaneously.

DetectMalwareModule then attempts to install key message monitoring hooks by invoking lnstallHookCallBack function . If the hooks are installed successfully DetectMalwareModule builds a complete execution path by invoking a LaunchKLHoneyPot function . In this example HoneyPot is a module that generates dummy keystrokes and monitors for behaviors that are associated with all running programs including the keyloggers. The monitoring result of the HoneyPot is returned by invoking DetectKLHook function and is stored in bKLHookResult .

Finally DetectMalwareModule merges the detection results bKLDriverResult and bKLPollingResult with the monitoring result from the HoneyPot bKLHookResult and returns the merged result to the user. If the merged result is true the user may retrieve a list of detected malware programs from a data structure which stores all of the programs that are detected as malware.

In summary various embodiments of the present disclosure are able to observe potential malicious behavior based on the operation of multiple programs rather than examining a single program or module at a given point of execution. In addition the present disclosure provides for the monitoring of programs in real time rather than scanning sequentially. In this way malware threats may be continuously detected and eliminated. Furthermore various embodiments of the present disclosure may be more efficient than existing methods of detecting malware programs since multiple programs may be monitored at the same time without sacrificing system performance or overall user experience. Moreover instead of a one time or periodic analysis the weighting of a program may be continuously maintained and adjusted in real time until a pre defined threshold is reached. In this way malware threats may be detected and addressed as soon as they are identified.

An embodiment of the present disclosure can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. For example one of the previously described embodiments may be implemented in software which includes but is not limited to firmware resident software microcode etc. In addition various steps of the above processes may be performed in another order split into additional steps or combined into a single step. Steps may also be removed and or added to any of the above processes.

Furthermore the present disclosure can take the form of a computer program product accessible from a tangible computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a tangible computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and digital video disc DVD .

Although embodiments of the present disclosure have been described in detail those skilled in the art should understand that they may make various changes substitutions and alterations herein without departing from the spirit and scope of the present disclosure. Accordingly all such changes substitutions and alterations are intended to be included within the scope of the present disclosure as defined in the following claims. In the claims means plus function clauses are intended to cover the structures described herein as performing the recited function and not only structural equivalents but also equivalent structures.

