---

title: Hot pluggable virtual machine
abstract: An exemplary method for a hot pluggable virtual machine comprises authenticating a user within an active host environment on a host device, executing a virtual machine driver, configuring a guest environment, and activating the guest environment for the virtual machine on the host device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08443358&OS=08443358&RS=08443358
owner: Citrix Systems, Inc.
number: 08443358
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20060922
---
This U.S. nonprovisional patent application claims the benefit of U.S. Provisional Patent Application Ser. No. 60 811 582 filed on Jun. 6 2006 entitled Systems and Methods for a Hot Pluggable Virtual Machine U.S. Provisional Patent Application No. 60 811 591 filed on Jun. 6 2006 entitled Intelligent Resource Management for a Virtual Machine U.S. Provisional Patent Application No. 60 811 572 filed on Jun. 6 2006 entitled Intelligent Resource Management using a Dynamic Table for a Virtual Machine U.S. Provisional Patent Application No. 60 771 998 filed on Feb. 10 2006 entitled Dynamic Table System U.S. Provisional Patent Application No. 60 772 000 filed on Feb. 10 2006 entitled System and Method For Virtualizing An Operating System U.S. Provisional Patent Application No. 60 772 001 filed on Feb. 10 2006 entitled Hot Pluggable Transportable Virtual Environment and U.S. Provisional Patent Application No. 60 772 002 filed on Feb. 10 2006 entitled Intelligent Resource Management for a Virtual Machine which are all incorporated herein.

The present application is related to U.S. Nonprovisional patent application Ser. No. 11 525 888 filed on Sep. 22 2006 entitled Intelligent Resource Management for a Virtual Machine and U.S. Nonprovisional patent application Ser. No. 11 525 727 filed on Sep. 22 2006 entitled Dynamic Table Configuration in a Virtual Machine which are also incorporated herein.

The present invention relates generally to the field of virtual machines and more particularly to hot pluggable virtual machines.

Virtual machines allow a computer to simultaneously support and execute two or more computing environments. A computer environment comprises the operating system as well as user applications and data. A virtual machine is configured to emulate computing resources such as CPU disk and memory from a host computer and co exist alongside the host computer as a guest computer.

Due to a large software footprint current virtual machines can not be easily transported from one host computer to another host computer. Unfortunately the installation and operation of a virtual machine within a host environment may significantly alter the host environment and associated file system e.g. installation of files on the computer to execute the virtual machine. If the virtual machine is transported to a different host environment without the installation of necessary files the virtual machine may not function since necessary files and resources may not be present within the operating system or hardware of the host environment. As a result each computer may be significantly altered by the execution of a portable virtual machine.

As such there exists a need for a portable virtual machine that may depend on access to required files without significantly altering the host computer or host environment. Further there exists a need for the resources on the guest computer to be isolated from the resources on the host computer and vice versa to reduce the effect of the virtual machine on the host environment.

Various embodiments of the present invention include methods systems and software for a hot pluggable virtual machine by providing for reconfiguration capabilities and the encapsulation of guest resources within the virtual machine. In various embodiments programs for the guest environment are contained in a hot pluggable peripheral device. This peripheral device can be plugged into a computer running an active host environment. Hot installation and execution means that rebooting the computer is not required.

An exemplary method for the hot pluggable virtual machine comprises authenticating a user within an active host environment on a host device executing a virtual machine driver configuring a guest environment and activating the guest environment for the virtual machine on the host device.

Installation may require user authentication for security and or configuration purposes. Once a user has been authenticated a driver may be executed so that the peripheral device may communicate with the host. The guest computing environment for the virtual machine can then configured to allow for interaction between the guest and the host computer and activated.

In various embodiments the guest environment may include an operating system instance. A guest registry may be loaded onto the host device for efficient resource management. The virtual machine driver may be stored on the portable guest device. Further the guest environment may comprise emulation of hardware of the host device. The method may also comprise installing software within the guest environment without altering a file system of the host device.

In exemplary embodiments a software product for a hot pluggable virtual machine comprises software operational when executed by a processor to authenticate a user within an active host environment on a host device execute a virtual machine driver configure a guest environment and activate the guest environment for the virtual machine on the host device and a storage medium configured to store the software.

An exemplary system for a hot pluggable virtual machine comprises a memory and a processor. The memory is configured to store data. The processor is configured to authenticate a user within an active host environment on a host device execute a virtual machine driver configure a guest environment and activate the guest environment for the virtual machine on the host device.

The embodiments discussed herein are illustrative of one example of the present invention. As these embodiments of the present invention are described with reference to illustrations various modifications or adaptations of the methods and or specific structures described may become apparent to those skilled in the art. All such modifications adaptations or variations that rely upon the teachings of the present invention and through which these teachings have advanced the art are considered to be within the scope of the present invention. Hence these descriptions and drawings should not be considered in a limiting sense as it is understood that the present invention is in no way limited to only the embodiments illustrated.

Various embodiments include methods systems and software for a hot pluggable virtual machine. In exemplary embodiments a hot pluggable virtual machine is within a portable storage device such as a USB flash drive. When the USB flash drive is coupled to a digital device such as a computer a virtual machine may generate a guest environment on the digital device.

The guest environment can comprise an operating system applications and a registry that can operate independently from the previously existing operating system and applications on the digital device. In some embodiments the guest environment comprises applications e.g. browsers or computer games that may be used by the user that are not otherwise available on the digital device. The guest environment may be created or terminated without affecting the performance of the operating system or applications within the digital device.

Each virtual machine may have its own set of virtual hardware e.g. RAM CPU NIC upon which an operating system and applications may be loaded. The operating system may see a consistent normalized set of hardware regardless of the actual physical hardware components of the host digital device. Virtual machines may be encapsulated into files making it possible to rapidly save copy and provision a virtual machine.

Virtual machine capabilities allow a computer system s resources to be shared or emulated between several system programs. This can allow for the host computer system s resources to be pooled and allocated as required to satisfy the needs of the aggregate program set. Operating systems such as Windows or Linux may provide the capability to balance resources among individual processes but may lack the ability to isolate groups of processes from one another. In various embodiments a virtual machine can isolate a group of processes which allows for multiple groups of the same processes to be executed. As a result multiple instances of operating systems may be executed simultaneously.

A virtual machine is hot and pluggable if it can be plugged into and or removed from a host computer without having to shut down or reset the host computer. In other words the virtual machine and the associated guest environment can be seamlessly installed and executed. This hot pluggability characteristic is a benefit to the functionality of a portable virtual machine which can encapsulate the guest environment.

In various embodiments hot pluggable virtual machines can adapt to one or more given host environments. Such adaptation may include reconfiguring guest settings for new hosts. Reconfiguration may require configuring the guest s operating system resources and or enabling disabling hardware support. Configuring operating system resources may be done by matching old operating system resources to new operating system resources through intelligent table mapping which queries and maps corresponding system resources including associated metadata. The process of matching old operating system resources to new operating system resources is further discussed in U.S. patent application Ser. No. 11 525 727 entitled Dynamic Table Configuration in a Virtual Machine filed Sep. 22 2006 which is hereby incorporated by reference. 

A virtual machine can execute a virtual computing environment on a computer or any digital device. A digital device is any device with a processor including but not limited to computers cellular telephones and personal digital assistants. The virtual computing environment may appear as a separate computer running on the same digital device as the host environment. Virtual machines can allow a computer to execute two or more computing environments i.e. the host s and one or more guest computers environment simultaneously. The host computing environment and the guest computing environment may share various computing resources such as for example a central processing unit CPU memory and a keyboard. However each computing environment may be operated separately or isolated from the other.

Isolation refers to the virtual separation of a guest environment from the host environment. For example when a guest environment runs a software application that software application is invisible to other environments including the host environment. That software application may use common resources but its processes do not affect the host or other guest computers. In some embodiments viruses or bugs on a virtual machine are contained within that virtual machine and do not have any adverse effect on the host environment.

The host environment comprises for example user applications and data files stored within a host memory. The host memory is further discussed in . The host environment may further access for example library files configuration files registries and or or kernel objects. The operating system may comprise for example Windows or Linux . The hardware includes hardware resources such as ports processors memory and input output devices including for example a display speakers printers a keyboard and or a mouse. In operation a user may operate the host system as if the host system is a personal computer without a virtual machine. The host environment may be substantially unaffected by the presence of a virtual machine.

The guest environment receives instructions from and transmits instructions to the virtual machine manager . The virtual machine manager can interrupt instructions between the operating system the portable storage device i.e. guest memory discussed in the host environment and the guest environment . In various embodiments the guest environment may depend upon resources and or files that may be available within the host computer and or the portable storage device. The virtual machine manager may analyze the commands between the operating system host environment and guest environment to control whether resources within the host computer or resources from the portable storage device should respond. The process of matching old operating system resources to new operating system resources is further discussed in U.S. patent application Ser. No. 11 525 727 entitled Dynamic Table Configuration in a Virtual Machine filed Sep. 22 2006 which is hereby incorporated by reference. Further the virtual machine manager may coordinate existing resources such as hardware between the host environment and the guest environment .

In some embodiments the virtual machine manager allows the guest environments to access resources while maintaining isolation of said resources for the host environment . Because guest resources may be isolated a guest application may obtain the resources for the guest application s execution by submitting requests through the virtual machine manager .

The virtual machine manager may act as a peer of the host computing environment or may act autonomously from the host environment and guest environment . The virtual machine manager can function to isolate resources from each virtual machine guest environment by intercepting requests for resources from each guest environment . These requests may be processed and then forwarded to the operating system . The operating system allocates the requested resources which are intercepted by the virtual machine manager for processing before forwarding to the guest environment . In this manner each guest environment sees all the resources required for its applications but some or all of these resources may exist as virtual resources and are not representative of resources on the host computer . Any changes that a guest makes to the resources therefore may not leak or affect the host computer the host environment or other guest environments . Resources may include traditional hardware resources such as for example CPU memory disks printers input devices and CRT as well as software resources such as include library files configuration files shared data and the like.

The files to generate the guest environment may be stored within a guest memory described in . Files within guest environment may comprise application files data files registry files library files configuration files kernel objects and or cookies.

In some embodiments the guest environment operates as a paravirtualized virtual machine system wherein individual guest environments may maintain separate operating systems which communicate with the virtual machine manager . In one example the host environment and each guest environment submits requests for resources through the virtual machine manager which acts as an intermediary and coordinates resource hardware and file usage. In another example specific hardware not present in the host computer may be emulated in the paravirtualized virtual machine system for the use in one or more guest environments .

The port interface allows for connections and data exchange with peripheral components e.g. guest memory . Examples of peripheral components that may be connected to the host computer using the port interface include memory devices such as flash memory storage devices USB drives hard drives CD drives and DVD drives. The port interface may comprise for example a Universal Serial Bus USB port. In exemplary embodiments the guest memory is portable and may be used within many host computers .

In various embodiments of the present invention the guest memory includes all the required data for setting up one or more guest environments including various guest resources and or a virtual machine manager . Once connected to the host computer using the port interface software present in the guest memory may be activated to install and execute the guest environment . Some embodiments install the virtual machine manager in host memory . In some embodiments the virtual machine manager remains in guest memory .

The guest environment additionally comprises dynamic tables for determining whether to read files associated with the guest memory or the memory on the host machine . The dynamic tables may contain a list of resources associated with the operating system . In some embodiments the list of resources corresponds to files stored on the memory of the host computer or the guest memory . In some embodiments the dynamic tables comprise a File Exception Table FET and a File Inclusion Table FIT . The FET may indicate that a resource should be read from the host memory and the FIT may indicate that a resource should be read from the guest memory .

The dynamic table entries indicate a file name having a standard hierarchical file structure in a table. For example the file name WINDOWS TEMP may appear in the FIT and the file name WINDOWS may appear in the FET. In this example a file in WINDOWS TEMP will be read from the guest memory but a file in WINDOWS SYSTEM will be read from the host memory . The process of matching old operating system resources to new operating system resources is further discussed in U.S. patent application Ser. No. 11 525 727 entitled Dynamic Table Configuration in a Virtual Machine filed Sep. 22 2006 which is hereby incorporated by reference. 

In various embodiments activation may occur automatically upon a user coupling the guest memory or upon a user response to a prompt. Once the guest memory is coupled to the host computer or the virtual machine is otherwise activated a device driver e.g. a guest memory driver may load and execute e.g. autorun . The device driver may authenticate the user within the active host environment in step . In one example the device driver for the guest memory loads into the host memory and subsequently displays a message to the user to enter a username and a password. The username and password may be required for security as well as to customize configuration settings for the user within the virtual machine. The name and password may be compared to a name and password previously stored within the guest memory before authenticating the user. If the user is not authenticated the process may end.

In step the guest memory executes a virtual machine driver to configure and initiate the guest environment and the virtual machine manager . In some embodiments the virtual machine driver controls how the host computer communicates with the guest environment . In some embodiments the virtual machine driver is executed prior to the user authentication in step and may comprise the device driver e.g. the guest memory driver .

In step the virtual machine driver configures the guest environment . For example the virtual machine driver scans the available hardware and software of the host computer e.g. the hardware and the operating system . In some embodiments the virtual machine driver matches the names operating systems resources of the host computer to the names of resources needed in the guest environment or present within the guest memory .

One way to accomplish this is to use intelligent table mapping. Intelligent table mapping produces a table containing a list of corresponding resource names and associated metadata for the host environment operating system and the guest environment . For any given resource requested intelligent table mapping can respond with the renamed resource as it would be seen by the guest operating system within the guest environment . The table created by intelligent table mapping can be queried by the virtual machine manager when a resource is required. Maintaining a map for various operating system resources can allow for the virtual machine manager to rename resources or files as needed in a process called namespace virtualization. The process of matching old operating system resources to new operating system resources is further discussed in U.S. patent application Ser. No. 11 525 727 entitled Dynamic Table Configuration in a Virtual Machine filed Sep. 22 2006 which is hereby incorporated by reference. 

In some embodiments the virtual machine manager may enable or disable hardware support for the guest environment . A request for hardware resources may be passed through to the host computer based on the type of hardware requested.

The guest environment is subsequently activated in step . In exemplary embodiments a user can switch between the host environment and the guest environment without a performance impact between the two environments. In one example Adobe Photoshop may be rendering an image in the host environment while the user plays a graphic intensive game within the guest environment . These two applications within the separate environments may run independent of each other. If one program crashes the other environment may continue to execute unaffected.

A registry is a hierarchical database within an operating system used to store information necessary to configure the system for one or more users applications and hardware devices. In one example a Microsoft Windows registry contains information that the Windows operating system continually references during operation such as profiles for each user the applications installed on the computer and the types of documents each can create property settings for folders and applications icons what hardware exists on the system and which ports are being used.

In exemplary embodiments the guest registry comprises a database or other data structure which may be used to store information necessary to configure the host computer the guest environment and or the virtual machine manager . In one example the guest registry contains files and resources available within the guest memory . In some embodiments the guest registry is configured to load data regarding the host computer the hardware the operating system guest memory and or the host environment .

Some operating systems may provide software application programming interfaces APIs that programs can use to read and or write configuration values to the registry. Communications to and from these application programming interfaces may be intercepted and transferred to the guest registry. The guest registry may also use intelligent table mapping to determine the names of files and resources requested by the APIs.

In various embodiments a host computer may play host to multiple guest environments . The multiple guest environments can be organized by and their data stored in their respective guest registry to allow for faster and more efficient program execution of guest applications. In some embodiments the multiple guest environments may store data within a single guest registry.

In step the guest memory copies the virtual machine driver to the host machine . As discussed in the virtual machine driver may be configured to prepare the host machine to execute the guest environment initiate the guest environment and control the hardware of the guest memory . In step the virtual machine driver is executed. The virtual machine driver can then initiate the guest environment .

In step the virtual machine driver emulates hardware of the host machine . In one example the virtual machine driver checks to see what hardware is available on the host computer . Hardware interfaces digital devices peripherals CPU RAM and or any other hardware may be emulated by the virtual machine.

In some embodiments the hardware on the host computer is emulated. In one example the guest environment and the host environment operate completely independent of each other and assume full access to the hardware . The virtual machine driver may also emulate hardware that is not present within the host computer for use with the virtual machine.

The virtual machine manager may emulate hardware by creating a virtual set of hardware resources for each guest environment to use during execution of the guest environment s applications programs or the like. Not only can the virtual machine manager emulate the hardware resources of the host computer but it can emulate hardware resources not present on the host computer in various embodiments. In one example instead of disabling features when the host computer lacks certain hardware resources the virtual machine manager can emulate and provide the hardware features that are lacking on the host computer . This can be very useful on a mobile virtual machine that is transferred between host computers with different hardware features.

The operating system instance e.g. guest environment may be activated for the virtual machine in step . The operating system instance may by any operating system including but not limited to Linux Windows or Unix. Although activating only one operating system instance is discussed in step many operating system instances may be activated. In one example two operating system instances one for Linux and the other for Windows may be activated. Similarly one or more of the guest environment s may utilize the same brand of operating system as the host environment . In another example the host environment utilizes a different operating system than that used within the guest environments .

In various embodiments the steps of may be of a different order. In one example the virtual machine driver may be copied to the host machine i.e. steps and before the user is authenticated. Those skilled in the art will appreciate that there may be many methods to install and execute a hot pluggable virtual machine.

The user may shut down the guest environment through normal shut down procedures within the operating system instance s . When the user shuts down i.e. turns off all of the guest environments that were activated by the guest memory the guest environment can terminate the virtual machine driver may unload the guest registry removed and the virtual machine manager terminated. The guest memory can then be removed and ultimately plugged into another host computer without significantly altering a host environment .

In other examples the guest memory is physically decoupled from the host computer . In some embodiments the guest environment and virtual machine manager terminate. The host environment operating system and the hardware may not be effected by the termination of the guest environment or virtual machine.

The above description is illustrative and not restrictive. Many variations of the invention will become apparent to those of skill in the art upon review of this disclosure. The scope of the invention should therefore be determined not with reference to the above description but instead should be determined with reference to the appended claims along with their full scope of equivalents.

