---

title: System and method for detecting and displaying business transactions
abstract: Methods and systems are presented for detecting business transactions from sequences of call center agent activities. In one embodiment, the method comprises the steps of: receiving a plurality of agent activity events; matching a sequence of events within the received events with one of a plurality of transaction definitions; creating a transaction from the matching sequence; and displaying the transaction.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08160233&OS=08160233&RS=08160233
owner: Verint Americas Inc.
number: 08160233
owner_city: Melville
owner_country: US
publication_date: 20060222
---
The business of a call center is to provide rapid and efficient interaction between agents and customers or prospective customers. Conventional call center systems determine if agents are being productive and meeting call center targets called adherence by tracking phone usage of agents. In addition to talking to a customer on the phone such an agent usually spends time using a PC or workstation application such as a customer relationship manager CRM or a customer account database. The proficiency of an agent on these applications therefore impacts overall call center productivity. However conventional call center systems do not utilize information about application usage when providing adherence information.

Today s call centers often support various interaction methods and media including phone e mail and messaging applications. Call center systems typically allow some or all of these interactions to be recorded. The recordings may be reviewed later for compliance with business or government regulations or for quality assurance. These systems also allow a supervisor to monitor interactions typically to determine if an agent is adhering to call center policies.

In conventional call center systems the playback of recorded interactions and live monitoring of interactions occurs in an interactions application sometimes known as a contacts application. A separate schedule adherence application is used to compare agents scheduled activities with agents actual activities and to provide information about adherence exceptions to the scheduled activities.

Methods and systems are presented for detecting business transactions from sequences of call center agent activities. In one embodiment the method comprises the steps of receiving a plurality of agent activity events matching a sequence of events within the received events with one of a plurality of transaction definitions creating a transaction from the matching sequence and displaying the transaction.

When an agent is ready to receive calls at his phone the agent first logs into the ACD . This login notifies the ACD that the agent is available to take calls. An agent s ACD state changes throughout the workday as the agent takes calls performs after call work takes breaks etc. An example list of ACD states includes available busy after call work unavailable.

The ACD distributes incoming phone calls to available agents. A phone call comes into the call center on an outside trunk . If an agent is not available the ACD puts the call into a queue which effectively places the caller on hold. When an agent is available the ACD connects the outside trunk line carrying the phone call to one of the agents. More specifically the ACD connects the outside trunk line to the trunk line of the selected agent.

A call recorder connected to one or more of the agent trunk lines provides call recording capabilities. In a typical call center such as that shown in the recorder is a server with specialized hardware e.g. digital signal processing boards . The recorder receives instructions from a recording server . The recording server maintains an interactions database which stores the recorded content as well as descriptive information about the recording. The recording server provides an interface for searching the interactions database .

While on a call with a customer the agent interacts with one or more applications running on the workstation . Examples are applications that give the agent access to customer records product information ordering status transaction history etc. The applications may access one or more enterprise databases not shown via the network .

The call center also includes a work force manager WFM which is typically divided among several applications. The WFM comprises the suite of applications. Many of the WFM components have a user interface which runs on a supervisor workstation .

The WFM performs many functions. One such function is calculating staffing levels and agent schedules based on historical patterns of incoming calls. Another function of the WFM is collecting call center contact statistics and providing this information both historical and real time to the call center supervisor or manager. Yet another function of the WFM is supplying the supervisor with information on how well each agent complies with call center policies. The portion of the WFM that performs this last function is the adherence subsystem.

In general terms the function of an adherence subsystem is to determine whether agent activities comply with adhere to call center policies. An instance where an agent activity does not adhere to a policy is an exception. An adherence subsystem may support different levels of adherence where policies are defined and agent activities are captured with different amounts of detail.

For example the policy used in a low level form of adherence might be a schedule e.g. agent is expected to be working the phone from 10 AM to 11 AM and e mail from 11 AM to 12 PM. Information about calls or emails handled by an agent is not relevant to this first form of adherence. In contrast in a higher level form of adherence policy includes quality targets e.g. an agent is expected to have a call duration of less than 5 minutes.

As the agent takes calls throughout the day the agent s ACD state changes. The ACD reports these state changes to the activity collector as ACD events . In some environments the events may be Computer Telephony Integration CTI events instead of ACD events . As an agent interacts with various applications on his workstation application events are reported to the activity collector . Events are then mapped into agent activities using activity mapping definitions provided by a user.

These collected agent activities are actual activities which have actually occurred. In contrast a scheduled activity is scheduled to occur and may or may not have actually occurred. A manager or supervisor defines scheduled activities through a WFM application not shown . As explained above scheduled activities correspond to tasks performed by agents during a workday e.g. Phone E mail Chat Fax Out .

Both types of activities are stored in the adherence database . In one implementation the activity information stored in adherence database includes an agent identifier an activity code a start time and a duration. In another implementation the activity information stored in adherence database includes an agent identifier an activity code a start time and a stop time.

The adherence monitor retrieves actual activities and scheduled activities and compares them on a per agent basis. If the comparison reveals a discrepancy between an actual activity and a scheduled activity for the same agent the adherence monitor notes this as a exception. However the comparison may take into account a guard time for a scheduled activity . For example a policy could be defined to allow an agent to log into the ACD two minutes early or one minute late without reporting the activity as out of adherence.

The adherence monitor provides information about the scheduled activities the actual activities and the exceptions to the adherence application . In this implementation that information is provided in the form of three timelines a scheduled timeline S an actual timeline A and an adherence exception timeline E. The adherence application displays the timelines for viewing by a call center supervisor typically in a graphical view.

The adherence subsystem described above represents only one example of how functionality can be partitioned between components in an adherence subsystem. One of ordinary skill in the art should understand that other partitions are possible. As just one example another variation of the adherence database stores device events rather than actual activities in the adherence database and the mapping from events to actual activities is performed by the adherence monitor rather than the activity collector . Furthermore one of ordinary skill in the art should recognize that the timeline produced by the adherence monitor is not required to be a graphical representation but can be any data structure which conveys the underlying information about activities and occurrence times. In another variation the adherence exception timeline E is not stored in the database but calculated on the fly.

In this disclosure the term interaction refers to a record of the content of agent activities related to a call. Note that agent activities are not limited to audio of the call itself. Other forms of media are included such as video of the agent the application activity on the agent s workstations and messages delivered through e mail instant messaging or other messaging technologies. Also the agent activities in an interaction are not limited to the duration of the call but can occur after the call called wrap up or research .

Conventional call center systems provide an interactions application that allows playback of recorded interactions and live monitoring of interactions. Importantly these conventional systems did not integrate interactions with adherence or exceptions to adherence.

Blocks indicate periods of agent activity actual or scheduled occurring at specific times and for specific durations. The location of an activity block is aligned with the timeline axis to show this time and duration. Each activity on these three lines is aligned appropriately with a timeline axis e.g. an activity starting at 5 00 PM and ending at 5 30 PM would have its left edge aligned with the 5 00 PM marker on the timeline axis .

Each different type of activity e.g. Phone LoggedOut is displayed with a different visual attribute e.g. color pattern shading . The combination of timeline alignment and color coded activities allows a user to quickly get an overall picture of what an agent is spending his time on in a given time period. In one implementation one color pattern shade is used for activities that have one recorded interaction and another is used for activities that have multiple recorded interactions. A legend may be included to show which color pattern shade corresponds to each of these types.

In this view another line presents a list of agent interactions during that time period. Interactions differ from activities. On the actual activities line an activity block merely describes which activity occurred and its time period. For example activity block P tells the viewer that an agent was in the Phone activity from 9 00 to 12 00. Interaction block I during that time period tells the user that recorded content is available for calls between 9 45 and 10 45. By presenting exceptions to agent adherence together with and visually aligned with information about interactions a user can quickly discover which exceptions can be further examined by reviewing or playing back the corresponding interaction information.

The list of interactions can be refreshed by activating a Load Interactions button . A user can play back an interaction record an agent on demand or monitor an agent in real time by activating various buttons . A user plays back a particular interaction block e.g. I by selecting the interaction block and then activating the playback button . When the playback button is activated the media options dialog box shown in is displayed.

The media options dialog box presents the user with choices for an audio playback device . The media type of the recording is displayed e.g. call audio agent video and agent workstation activity .

If the media type included workstation activity then a portion of the playback window is used to play back what appeared on the agent s workstation screen during the interaction. If the media type included audio then the audio is played on the chosen audio device e.g. workstation speaker phone . In one implementation a list of events that occurred during the interaction and the time of each is displayed in an event list .

The user interface described in allows a supervisor to review interactions that were recorded in the past. Interactions are typically recorded according to a predefined configuration created through the recording server . The adherence window disclosed herein also allows a supervisor to start an immediate on demand recording of a particular agent or to monitor an agent in real time.

Each agent in the list has a record on demand button if recording is available for that agent. To record a specific agent on demand the user activates the record on demand button associated with this specific agent. A visual indication that the agent is being recorded is then displayed e.g. the record on demand button changes color the agent s name flashes the agent s name is displayed in a different color . To stop the recording the user activates the record on demand button a second time.

The live monitor feature works as follows. The user selects an agent from the agent list and activates the live monitor button . Then the user selects an audio playback device as well as content type from media options dialog box . If the content type includes audio then audio of the selected agent begins playback on the selected device. If the content type includes workstation activity another window appears in activity on the agent s workstation screen is displayed. In one implementation this workstation activity window is similar to the window in .

Next the adherence application sends a Connected event to the recording server passing in the recorder identifier obtained earlier and a unique session identifier. The recording server creates a new interaction in the interactions database including the start time and agent and sends the identified recorder a StartRecording command .

At some later time the adherence application receives user input indicating the end of agent recording. The adherence application sends a Disconnected event to the recording server passing in the recorder identifier and the session identifier. The recording server adds the stop time to the interaction in the interactions database and sends the identified recorder a StopRecording command .

As described earlier an adherence subsystem may support different levels of adherence. In the embodiment described earlier in connection with a low level form of adherence measured whether work tasks actually performed by agents complied with a schedule. is a block diagram of another adherence subsystem embodiment which supports a higher level form of adherence.

Adherence subsystem takes into account agent activities associated with different devices e.g. agent phone activity and agent workstation activity . This particular adherence subsystem also compares time spent in these activities to thresholds defined in a policy. Note that although this particular adherence subsystem includes both of these features the features are independent.

The adherence subsystem includes an activity collector an adherence monitor component an adherence database and an adherence application . As the agent takes calls throughout a workday the ACD reports changes in the state of the agent s phone as ACD events P. As an agent interacts with various applications on his workstation an application monitor tracks and reports application events A. In one implementation the granularity of application events A is application level so that events describe when applications start and exit and when a user switches from one application to another. In another implementation the granularity of application events A is screen level so that events describe a particular screen displayed within an application. In yet another implementation application events A are low level including input and or output associated with each application e.g. keystrokes mouse clicks and screen updates .

The collector receives events from multiple sources. An event has an occurrence time and a descriptor which includes fields such as event source e.g. ACD application monitor type and agent identifier. If the event does not include an agent identifier the collector maps the phone or workstation identifier to a corresponding agent identifier based on information obtained at agent login. Thus the event indicates either directly or indirectly an agent identifier.

The collector maps the events into agent activities . In the adherence subsystem described earlier many different events mapped to the same activity because the subsystem viewed agent activities in broad categories Phone E mail Chat etc. This adherence subsystem measures agent activities in more detail distinguishing between an agent available to take calls talking to a customer and performing after call work. Thus events closely correspond to activities in the mapping used by adherence subsystem 

The agent activities are stored in the adherence database . In one implementation the activity information stored in the adherence database includes an agent identifier an activity source an activity code a start time a stop time and a duration.

The adherence monitor determines adherence by comparing the activities to policies in the adherence database . A policy describes one or more targets which an agent is expected to meet. Example policies define expectations for time spent in an ACD state for time spent in an application for applications an agent is allowed to use etc. A manager or supervisor defines policies through one of the WFM applications not shown . The policies are stored in the adherence database .

An agent activity which does not comply with adhere to a policy is an exception. Examples of exceptions include exceeded average time on a call exceeded expected time in the Helpdesk application while on a call exceeded expected time in the customer account database after a call.

As described earlier a user can define policies which define expected durations for various agent activities. Defining policies manually can be time consuming and error prone. Yet another implementation of an adherence subsystem not shown uses historical call center data to create policy templates. The user then creates policies from these templates which saves time and reduces errors.

This adherence subsystem records agent activities for a period of time usually several weeks to a month . The subsystem analyzes the recorded data to determine call statistics such as minimum maximum average and standard deviation of various agent activities. These statistics represent typical or normal call center operation. From these statistics the subsystem creates policy templates which describe expectations for agent activities.

Agents typically handle calls of various types. For example some calls are related to product A and others related to product B. Since these different types of calls often exhibit different characteristics the subsystem analysis can be supplemented by user input which identifies certain calls as belonging to a group. In that case rather than producing call statistics for all calls in the analysis period the subsystem instead produces per group statistics and policy templates for each group.

The adherence application receives information about these exceptions and information about activities . The adherence application uses the information describing activities from different event sources e.g. ACD and workstation to present a novel timeline view of agent activity on a supervisor workstation where it can be viewed by a call center supervisor. This novel timeline view presents simultaneously and in the same window agent activities from different sources correlated in time. shows an example of this novel timeline view as displayed on a supervisor workstation.

A timeline axis is arranged to display time periods across the screen in one direction. In the timeline view of the granularity of the timeline axis is 15 minutes starting at 6 00 AM. Blocks indicate periods of agent activity occurring at specific times and for specific durations and the location of an activity block is aligned with the timeline axis to show this time and duration. For example A describes an event lasting from 6 12 to 6 17 and is therefore placed under timeline axis such that the start of the block A is located to the left of the 6 15 mark and the end of the block A is located to the right of the 6 15 mark.

In the timeline view each event source is placed on a different line. Thus activity blocks for ACD or call events e.g. A appear on the Call Track line and activity blocks for application events e.g. B appear on the Application Track line . Within the same source identifying information about an event is conveyed by displaying the block in a particular color shade or pattern.

For example the timeline view uses different colors when displaying activity blocks for activities with different ACD states. As another example the timeline view uses different colors when displaying activity blocks for activities with different workstation applications. In this manner activity blocks are visually distinguishable from each other and the color shade pattern conveys important identifying information to the user. In one implementation a legend is included to show which color shade pattern corresponds to each event identifier. The View Details button when activated displays details for a selected activity in a text based rather than graphical format.

The example shown in has been simplified to show only activities for a single agent identified by label . Other implementations display activities for multiple agents by stacking the track lines one under the other. Although specific user interface controls are discussed here other ways of gathering user input are known e.g. menus commands etc. and are intended to be included in the scope of this disclosure.

In this timeline view timing relationships between ACD events P and application events A are now visible. Blocks A and B show one such relationship an agent using a Helpdesk application during a call. Blocks C and D show another relationship an agent uses a customer account database after a call wrap up .

The timeline view by displaying these timing relationships allows a call center supervisor to quickly determine whether or not an agent is adhering to call center policies. A few examples of determinations made by a supervisor using this view are whether an agent is spending too time much during the call in the helpdesk application and whether an agent is spending too much time after the call in the customer account database. Once discrepancies are identified the supervisor can address the possible causes e.g. the agent needs more training on the helpdesk application or the screens in the customer account application need to be redesigned .

The information presented in this timeline view also makes visible to the supervisor areas for further investigation. Examples of areas of supervisor investigation that may be prompted by this view are what an agent did when the caller was placed on hold what an agent did while in the ACD After Call Work state what kinds of transactions are associated with long call times what agents do while in not ready states e.g. Admin or Research .

Although this disclosure focuses on two event sources the ACD and the application monitor the activity timeline view described herein is also applicable to other types of events that describe agent activities.

As described above the timeline view allows a supervisor to visually assess whether or not agents are adhering to call center policies by examining the timing relationships shown in the view. is another implementation of a timeline view which explicitly displays instances where agents are not adhering called exceptions .

This timeline view is similar to the implementation in but includes an additional line that is also correlated with the timeline axis . The Exceptions line displays exceptions activities that are out of compliance using icons. The example shown in assumes that a policy is defined as follows the Customer Account and HelpDesk applications are allowed during calls the Customer Account HelpDesk and Email applications are allowed during after call work and the agent is expected to use the customer account application for less than five minutes during after call work. The Exceptions line shows that the agent is adhering to this policy for all activities except for two. One exception occurs in block when the agent accesses the Email application while on a call. This type of exception where an agent uses an application that is not allowed is represented using an X icon. Another exception occurs in block when the agent spends longer than five minutes in the customer account application during after call work. This type of exception where an agent spends longer than allowed in an application is represented using a clock icon.

As described earlier an adherence subsystem may support different levels of adherence. In the embodiment described earlier in connection with the adherence monitor compared work tasks actually performed to a schedule. In the embodiment described earlier in connection with activities were associated with multiple devices and the adherence monitor compared time spent in activities associated to thresholds in a policy. is a block diagram of another embodiment which supports an even higher level form of adherence in which sequences of agent activities are mapped to business level transactions and transactions are compared to a policy.

Adherence subsystem subsystem includes a transaction detector an adherence monitor component an adherence database and an adherence application . The transaction detector receives reports of events from various sources such as events A from the application monitor that describe an agent s workstation state. In this example the application events A are screen level. That is an application event A describes a particular screen in a particular application.

In this subsystem activities can be derived directly from events each event has an occurrence time and an activity occurs between two events. Thus an activity has a start time a stop time and a duration derived from start and stop times.

The transaction detector examines sequences of events to find matches to defined transactions. When a match is found the transaction detector creates a transaction from the event sequence and stores the transaction in the adherence database . Transaction definitions are business specific and are created by manager or supervisor through a WFM application not shown . Transactions can best be explained by means of an example which follows.

A particular call center campaign involves taking orders from customers. To place a new order an agent interacts with a customer entry screen in the customer relationship manager CRM application followed by a product entry screen in the CRM. Other CRM screens may be accessed between the customer entry and product entry steps except for the cancel order screen. This NewOrder business transaction can then be defined as NewOrder CRM Cust NOT CRM Cancel CRM Prod NOT CRM Cancel 

In the notation used above the transaction name appears to the left of the equal sign and the event sequence appears to the right of the equal sign. In order to match the transaction events must occur in the order they appear in the definition. Events which are optional appear in brackets. In this example the combination of bracket and the NOT operator means that any event other than the CRM Scr CancelOrder event can occur between the CRM Scr CustEntry event and the CRM Scr ProdEntry event.

The transactions detected by the transaction detector are stored in the adherence database . In some implementations the underlying events and or activities are also stored in the adherence database . The adherence monitor determines adherence by comparing the transactions to transaction policies in the adherence database . Just as the definition of a transaction is specific to a campaign business or enterprise so are the policies applied to that transaction. A transaction policy is a rule that defines correct or proper execution of a transaction in terms of event sequences. Many event sequences may map to a particular transaction according to the transaction definition but only a subset of those event sequences represent a properly executed transaction according to the transaction policy .

The following example building on the previous example of transaction definitions will illustrate the use of transaction policies . A policy for the NewOrder business transaction described above can be defined as NewOrder CRM Cust CRM NewCust CRM OldCust Helpdesk Inv Check CRM Prod

This notation is similar to the one used above. Events must occur in the order listed in the policy definition. Events in brackets are optional. When events are separated by a vertical line any of the events matches. So this policy says that to properly execute a new order an agent must go to the CRM Cust screen followed by either the CRM NewCust or the CRM OldCust screen followed by the Inv Check screen followed by the CRM Product screen.

The adherence monitor compares detected transactions to transaction policies and generates adherence exceptions for discrepancies between the two. In the example above a transaction which includes a CRM screen other than NewCust or OldCust will be detected as a NewOrder transaction but will also be reported as an exception. As another example a transaction which does not include the Inv Check screen will be detected as a NewOrder transaction but will also be reported as an exception.

The adherence application receives information about activities transactions and optionally exceptions . The adherence application uses the information describing the activities and the transactions to present a novel timeline view of agent transactions against a timeline on a supervisor workstation.

Different colors or patterns or shadings are used to display blocks representing different workstation activities. In this manner activities are visually distinguishable from each other and the color shade pattern conveys important identifying information to the user. Blocks representing detected transactions are identified by a label within the block. This example assumes the transaction definitions described above. Therefore the Transactions line beneath Activities line displays two detected NewOrder transactions N and N 

A conventional adherence subsystem presents the call center supervisor with a timeline view of agent activity throughout the workday. This allows the supervisor to see when an agent is adhering to call center policies such as adherence to schedule adherence to time limits spent on specific activities and adherence to usage of specific applications. However the underlying purpose of agent activities is to perform business transactions and the conventional adherence subsystem does not provide any information about adherence to transaction processing policies.

This novel timeline view allows a supervisor to see call center operations in terms of high level business transactions rather than low level agent activities. A view focused on business transactions allows the supervisor to detect situations that might otherwise be missed. For example an agent may complete an order without checking inventory which is an exception to call center business policy. But a supervisor would not detect that in a conventional adherence system because the agent is adhering to schedule taking calls and is using the right app CRM while on the call. In contrast the novel timeline view gives the supervisor insight into transactions which allows the supervisor to detect the problem.

The example shown in assumes the transaction and policy definitions described above. The Transactions line shows that two NewOrder transactions have been detected N and N . Furthermore the Exceptions line shows that an exception occurred during the second transaction N . An X icon beneath the CRM Prod workstation activity P indicates an exception at this point in the transaction since the Inv Check screen activity did not appear before the CRM Prod activity.

Omitted from are many conventional components known to those skilled in the art which are not necessary to explain the operation of the system . The foregoing description has been presented for purposes of illustration and description. It is not intended to be exhaustive or to limit the disclosure to the precise forms disclosed. Obvious modifications or variations are possible in light of the above teachings. The implementations discussed however were chosen and described to illustrate the principles of the disclosure and its practical application to thereby enable one of ordinary skill in the art to utilize the disclosure in various implementations and with various modifications as are suited to the particular use contemplated. All such modifications and variations are within the scope of the disclosure as determined by the appended claims when interpreted in accordance with the breadth to which they are fairly and legally entitled.

