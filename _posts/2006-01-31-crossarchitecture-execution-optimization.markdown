---

title: Cross-architecture execution optimization
abstract: Embodiments include a device, apparatus, and a method. A device includes an input circuit for receiving data corresponding to a runtime execution of a first instruction by a first processor having a first architecture. The device also includes a generator circuit for creating an execution-based optimization profile useable in an execution of a second instruction by a second processor having a second architecture.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08214191&OS=08214191&RS=08214191
owner: The Invention Science Fund I, LLC
number: 08214191
owner_city: Bellevue
owner_country: US
publication_date: 20060131
---
The present application is related to claims the earliest available effective filing date s from e.g. claims earliest available priority dates for other than provisional patent applications claims benefits under 35 USC 119 e for provisional patent applications and incorporates by reference in its entirety all subject matter of the following listed application s the Related Applications to the extent such subject matter is not inconsistent herewith the present application also claims the earliest available effective filing date s from and also incorporates by reference in its entirety all subject matter of any and all parent grandparent great grandparent etc. applications of the Related Application s to the extent such subject matter is not inconsistent herewith.

For purposes of the USPTO extra statutory requirements the present application constitutes a continuation in part of U.S. patent application entitled PROCESSOR RESOURCE MANAGEMENT naming Bran Ferren W. Daniel Hillis Nathan P. Myhrvold Clarence T. Tegreene and Lowell L. Wood Jr. as inventors U.S. application Ser. No. 11 214 449 filed Aug. 29 2005 which issued as U.S. Pat. No. 7 539 852 on May 26 2009.

For purposes of the USPTO extra statutory requirements the present application constitutes a continuation in part of U.S. patent application entitled MULTIPROCESSOR RESOURCE OPTIMIZATION naming Bran Ferren W. Daniel Hillis Nathan P. Myhrvold Clarence T. Tegreene and Lowell L. Wood Jr. as inventors U.S. application Ser. No. 11 214 458 filed Aug. 29 2005.

For purposes of the USPTO extra statutory requirements the present application constitutes a continuation in part of U.S. patent application entitled PREDICTIVE PROCESSOR RESOURCE MANAGEMENT naming Bran Ferren W. Daniel Hillis William Henry Mangione Smith Nathan P. Myhrvold Clarence T. Tegreene and Lowell L. Wood Jr. as inventors U.S. application Ser. No. 11 214 459 filed Aug. 29 2005.

For purposes of the USPTO extra statutory requirements the present application constitutes a continuation in part of U.S. patent application entitled RUNTIME BASED OPTIMIZATION PROFILE naming Bran Ferren W. Daniel Hillis William Henry Mangione Smith Nathan P. Myhrvold Clarence T. Tegreene and Lowell L. Wood Jr. as inventors U.S. application Ser. No. 11 292 207 filed Nov. 30 2005.

For purposes of the USPTO extra statutory requirements the present application constitutes a continuation in part of U.S. patent application entitled ALTERATION OF EXECUTION OF A PROGRAM IN RESPONSE TO AN EXECUTION OPTIMIZATION INFORMATION naming Bran Ferren W. Daniel Hillis William Henry Mangione Smith Nathan P. Myhrvold Clarence T. Tegreene and Lowell L. Wood Jr. as inventors U.S. application Ser. No. 11 292 296 filed Nov. 30 2005.

For purposes of the USPTO extra statutory requirements the present application constitutes a continuation in part of U.S. patent application entitled FETCH REROUTING IN RESPONSE TO AN EXECUTION BASED OPTIMIZATION PROFILE naming Bran Ferren W. Daniel Hillis William Henry Mangione Smith Nathan P. Myhrvold Clarence T. Tegreene and Lowell L. Wood Jr. as inventors U.S. application Ser. No. 11 291 503 filed Nov. 30 2005.

For purposes of the USPTO extra statutory requirements the present application constitutes a continuation in part of U.S. patent application entitled HARDWARE GENERATED AND HISTORICALLY BASED EXECUTION OPTIMIZATION naming Bran Ferren W. Daniel Hillis William Henry Mangione Smith Nathan P. Myhrvold Clarence T. Tegreene and Lowell L. Wood Jr. as inventors U.S. application Ser. No. 11 292 323 filed Nov. 30 2005.

For purposes of the USPTO extra statutory requirements the present application constitutes a continuation in part of U.S. patent application entitled FREEZE DRIED GHOST PAGES naming Bran Ferren W. Daniel Hillis William Henry Mangione Smith Nathan P. Myhrvold Clarence T. Tegreene and Lowell L. Wood Jr. as inventors U.S. application Ser. No. 11 324 174 filed Dec. 30 2005.

For purposes of the USPTO extra statutory requirements the present application constitutes a continuation in part of U.S. patent application entitled CROSS ARCHITECTURE OPTIMIZATION naming Bran Ferren W. Daniel Hillis William Henry Mangione Smith Nathan P. Myhrvold Clarence T. Tegreene and Lowell L. Wood Jr. as inventors U.S. application Ser. No. 11 343 745 filed Jan. 31 2006.

The United States Patent Office USPTO has published a notice to the effect that the USPTO s computer programs require that patent applicants reference both a serial number and indicate whether an application is a continuation or continuation in part. Stephen G. Kunin Benefit of Prior Filed Application USPTO Electronic Official Gazette Mar. 18 2003 at http www.uspto.gov web offices com sol og 2003 week11 patbene.htm. The present applicant entity has provided a specific reference to the application s from which priority is being claimed as recited by statute. Applicant entity understands that the statute is unambiguous in its specific reference language and does not require either a serial number or any characterization such as continuation or continuation in part. Notwithstanding the foregoing applicant entity understands that the USPTO s computer programs have certain data entry requirements and hence applicant entity is designating the present application as a continuation in part of its parent applications but expressly points out that such designations are not to be construed in any way as any type of commentary and or admission as to whether or not the present application contains any new matter in addition to the matter of its parent application s .

An embodiment provides a device. The device includes an input circuit for receiving data corresponding to a runtime execution of a first instruction by a first processor having a first architecture. The device also includes a generator circuit for creating an execution based optimization profile useable in an execution of a second instruction by a second processor having a second architecture. The device may include an information store configured by the execution based optimization profile. The device may further include an output circuit for broadcasting the execution based optimization profile. In addition to the foregoing other device embodiments described in the claims drawings and text form a part of the present application.

Another embodiment provides a device. The device includes means for receiving data transparent to software executing on a first processor having a first architecture and corresponding to a runtime execution of a first instruction by the first processor. The device also includes means for creating an execution based optimization profile useable in an execution of a second instruction by a second processor having a second architecture. The device may include means for configuring an information store in response to the execution based optimization profile. In addition to the foregoing other device embodiments are described in the claims drawings and text form a part of the present application.

A further embodiment provides an apparatus. The apparatus includes an input module operable to receive data transparent to software executing on a first processor having a first instruction set architecture and corresponding to a runtime execution of a first instruction by the first processor. The apparatus also includes a generator module operable to create an execution optimization information useable in an execution of a second instruction by a second processor having a second instruction set architecture. The apparatus may include a broadcast module operable to encode a computer readable signal bearing medium with the execution optimization information. The apparatus may include a broadcast module operable to transmit a computer readable signal bearing medium encoded with the execution optimization information. In addition to the foregoing other apparatus embodiments described in the claims drawings and text form a part of the present application.

An embodiment provides an apparatus. The apparatus includes a receiver module operable to acquire data transparent to software executing on a first processor having a first microarchitecture and corresponding to a runtime execution of a first instruction by the first processor. The apparatus also includes a generator module operable to create an execution optimization information useable in an execution of a second instruction by a second processor having a second microarchitecture. In addition to the foregoing other apparatus embodiments described in the claims drawings and text form a part of the present application.

Another embodiment provides a method. The method includes receiving hardware gathered data corresponding to a runtime execution of a first instruction by a first processor having a first architecture. The method also includes creating an execution optimization information useable in an execution of a second instruction by a second processor having a second architecture. The method may include saving the execution optimization information. The method may include marketing the execution optimization information. The method may include facilitating entry of the execution optimization information into a stream of commerce. The method may include encoding a computer readable signal bearing medium with the execution optimization information. In addition to the foregoing other method embodiments described in the claims drawings and text form a part of the present application.

A further embodiment provides an apparatus. The apparatus includes an execution based optimization profile usable during an execution of a computer program by a second processor having a second architecture. The execution based optimization profile is derived by a hardware device utilizing data generated during a runtime execution of the computer program by a first processor having a first architecture. The apparatus also includes a computer readable medium encoded with the execution based optimization profile. In addition to the foregoing other apparatus embodiments described in the claims drawings and text form a part of the present application.

An embodiment provides an apparatus. The apparatus includes a monitor circuit for determining an execution characteristic of a first instruction associated with a first computing machine architecture. The apparatus also includes a generator circuit for creating an optimization profile useable in an execution of a second instruction associated with a second computing machine architecture. In addition to the foregoing other apparatus embodiments described in the claims drawings and text form a part of the present application.

Another embodiment provides a method. The method includes identifying an execution characteristic of a first instruction associated with a first computing machine architecture. The method also includes generating an optimization profile useable in an execution of a second instruction associated with a second computing machine architecture. In addition to the foregoing other method embodiments described in the claims drawings and text form a part of the present application.

A further embodiment provides a device. The device includes means for determining an execution characteristic of a first instruction associated with a first computing machine architecture. The device also includes means for creating an optimization profile useable in an execution of a second instruction associated with a second computing machine architecture. In addition to the foregoing other device embodiments described in the claims drawings and text form a part of the present application.

An embodiment provides an apparatus. The apparatus includes an optimization profile usable during an execution of a second instruction associated with a second computing machine architecture and determined in response to an execution characteristic of a first instruction associated with a first computing machine architecture. The apparatus also includes a computer readable medium encoded with the optimization profile. In addition to the foregoing other apparatus embodiments described in the claims drawings and text form a part of the present application.

The foregoing summary is illustrative only and is not intended to be in any way limiting. In addition to the illustrative aspects embodiments and features described above further aspects embodiments and features will become apparent by reference to the drawings and the following detailed description.

In the following detailed description reference is made to the accompanying drawings which form a part hereof. In the drawings similar symbols typically identify similar components unless context dictates otherwise. The illustrated embodiments described in the detailed description drawings and claims are not meant to be limiting. Other embodiments may be utilized and other changes may be made without departing from the spirit or scope of the subject matter presented here.

The computing system environment typically includes a variety of computer readable media products. Computer readable media may include any media that can be accessed by the computing device and include both volatile and nonvolatile media removable and non removable media. By way of example and not of limitation computer readable media may include computer storage media and communications media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media include but are not limited to random access memory RAM read only memory ROM electrically erasable programmable read only memory EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computing device . Communications media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communications media include wired media such as a wired network and a direct wired connection and wireless media such as acoustic RF optical and infrared media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and nonvolatile memory such as ROM and RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within the computing device such as during start up is typically stored in ROM . RAM typically contains data and program modules that are immediately accessible to or presently being operated on by processing unit . By way of example and not limitation illustrates an operating system application programs other program modules and program data . Often the operating system offers services to applications programs by way of one or more application programming interfaces APIs not shown . Because the operating system incorporates these services developers of applications programs need not redevelop code to use the services. Examples of APIs provided by operating systems such as Microsoft s WINDOWS are well known in the art. In an embodiment an information store may include a computer storage media.

The computing device may also include other removable non removable volatile nonvolatile computer storage media products. By way of example only illustrates a non removable non volatile memory interface hard disk interface that reads from and writes to non removable non volatile magnetic media a magnetic disk drive that reads from and writes to a removable non volatile magnetic disk and an optical disk drive that reads from and writes to a removable non volatile optical disk such as a CD ROM. Other removable nonremovable volatile non volatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards DVDs digital video tape solid state RAM and solid state ROM. The hard disk drive is typically connected to the system bus through a non removable memory interface such as the interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable non volatile memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computing device . In for example hard disk drive is illustrated as storing an operating system application programs other program modules and program data . Note that these components can either be the same as or different from the operating system application programs other program modules and program data . The operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computing device through input devices such as a microphone keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a joystick game pad satellite dish and scanner. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computing system environment may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computing device although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks such as a personal area network PAN not shown . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computing system environment is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computing device typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or via another appropriate mechanism. In a networked environment program modules depicted relative to the computing device or portions thereof may be stored in a remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on computer storage medium . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

In the description that follows certain embodiments may be described with reference to acts and symbolic representations of operations that are performed by one or more computing devices such as the computing device of . As such it will be understood that such acts and operations which are at times referred to as being computer executed include the manipulation by the processing unit of the computer of electrical signals representing data in a structured form. This manipulation transforms the data or maintains them at locations in the memory system of the computer which reconfigures or otherwise alters the operation of the computer in a manner well understood by those skilled in the art. The data structures in which data is maintained are physical locations of the memory that have particular properties defined by the format of the data. However while an embodiment is being described in the foregoing context it is not meant to be limiting as those of skill in the art will appreciate that the acts and operations described hereinafter may also be implemented in hardware.

Embodiments may be implemented with numerous other general purpose or special purpose computing devices and computing system environments or configurations. Examples of well known computing systems environments and configurations that may be suitable for use with an embodiment include but are not limited to personal computers handheld or laptop devices personal digital assistants multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network minicomputers server computers game server computers web server computers mainframe computers and distributed computing environments that include any of the above systems or devices.

Embodiments may be described in a general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. An embodiment may also be practiced in a distributed computing environment where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

The processor includes a processor operable to execute an instruction set. In an embodiment the instruction set may include a collection of instructions that the processor can execute. In a further embodiment the instruction set may include an instruction set architecture of the processor. In another embodiment the instruction set may include a group of machine instructions and or computer instructions that the processor can execute. In another embodiment the instruction set may be interpreted by the processor. In further embodiment the instruction set may include a high level language an assembly language and or a machine code that the processor can execute with or without a compiling and or a translation.

In an embodiment an instruction may include a functional instruction a branching instruction a memory instruction and or other instruction that may be executed by a processor. In another embodiment an instruction may include a statement or a portion of a statement in a program. In a further embodiment an instruction may include at least two statements from a program. A program may include any type of a program from several lines of instructions to an application and to an operating system. In an embodiment an instruction may include a decoded instruction a translated instruction a portion of a translated instruction and or a micro operation. In a further embodiment an instruction may include an instruction block a basic block a functional block and or an instruction module.

The execution optimization synthesizer includes an execution optimization synthesizer operable to collect data from the communications link that corresponds to an execution of at least one instruction of the instruction set. In an embodiment the data may include certain data items such as datum byte bit and or a block that are associated together. The execution optimization synthesizer is also operable to generate an execution optimization information utilizing the collected data from the communications link and corresponding to the execution of at least one instruction of the instruction set.

In an embodiment the communications link may include at least one of a signal bearing medium digital signal bearing medium a light propagation medium a light propagation medium an optical fiber a light guide a computer readable storage medium a hardware register a bus a memory local to the processor an interconnection structure and or a digital signal conductor. For example a computer readable storage medium may include a memory and or a memory system directly accessible by the processor and the execution optimization synthesizer. By way of further example a digital signal conductor may include any digital signal conducting structure configured to at least transfer digital signals from the processor to the execution optimization synthesizer. In another embodiment the communications link includes a signal bearing medium exposed only to an execution optimization synthesizer and the processor. In a further embodiment the communications link includes a signal bearing medium exposed to an execution optimization synthesizer and the processor and transparent to software executing on the processor. In another embodiment the communications link includes a signal bearing medium exposed to an execution optimization synthesizer to the processor and to software.

In an embodiment the processor and the communications link reside on a single chip illustrated as a single chip . In another embodiment the processor and the execution optimization synthesizer reside on a single chip also illustrated as the single chip . In a further embodiment the processor communications link and the execution optimization synthesizer are formed on a single chip illustrated as the single chip .

In an embodiment the execution optimization synthesizer includes a hardware implemented execution optimization synthesizer. In another embodiment the execution optimization synthesizer includes a microengine implemented execution optimization synthesizer.

In a further embodiment the execution optimization synthesizer operable to collect data from the communications link that corresponds to an execution of at least one instruction of the instruction set includes an execution optimization synthesizer operable to collect dynamic data from the communications link that corresponds to a runtime execution of at least one instruction of the instruction set. In an embodiment the data collected by the execution optimization synthesizer includes at least one of an interpreted instruction a translated instruction a decoded instruction a micro operation corresponding to at least a portion of an instruction data correlating to the execution of the at least one instruction a movement of data correlating to an execution of the at least one instruction of the instruction set a result of an execution of an instruction a branch outcome of an execution of an instruction an exception correlating to an execution of an instruction a store to load dependency correlating an execution of an instruction a predicted value correlating to an execution of an instruction and or a relationship between at least two instructions of the instruction set.

In an embodiment the execution optimization synthesizer operable to collect data from the communications link that corresponds to an execution of at least one instruction of the instruction set includes an execution optimization synthesizer operable to collect at least one of data transparent to a user data visible to a user data transparent to software executing on the processor data visible to software executing on the processor and or data exposed for user manipulation.

In another embodiment the execution optimization synthesizer operable to generate an execution optimization information utilizing the collected data includes an execution optimization synthesizer operable to generate an optimization information that is at least one of responsive to the collected data derived from the collected data associated with the collected data and or using the collected data. In a further embodiment the execution optimization synthesizer operable to generate an execution optimization information corresponding to the execution of at least one instruction of the instruction set includes an execution optimization synthesizer operable to generate at least one of an execution environment optimization information a processor environment optimization information a data environment optimization information and or a metadata reporting an execution environment. For example an execution environment optimization information may include an indication that an identified micro op is used frequently and may be advantageously saved in a memory close to the processor . Another execution environment optimization may include one or more versions of the at least one instruction of the instruction set that provides some expected benefit over the original at least one instruction of the instruction set. A memory management system serving the processor may cause one of the versions to be executed transparently instead of the original at least one instruction of the instruction set such as through a translation lookaside buffer. By way of further example metadata reporting an execution environment may include tracking information with respect to data objects. For example certain access predictors may work well with certain data objects or some objects do not appear to be co resident in the cache or may be highly co resident or certain pointers in object orientated systems typically point to specific object types or specific value predictors have worked well with some data in the past.

In other embodiments the execution optimization synthesizer operable to generate an execution optimization information utilizing the collected data may include an execution optimization synthesizer operable to generate an execution optimization information optimizing data handling which may be by a data class. In some instances a data class may include certain data items datum byte bit a block a page that are used once and never again. In other instances a data class may include certain data items are used constantly but never written and or infrequently written. In further data classes certain data items may be constantly read and written to or other data items may be often being written but never read. The execution optimization synthesizer operable to generate an execution optimization information may predict how a data class will likely be used in the future and or saves the data items in a manner and or a location that substantially optimizes utilization of the data items by an instruction group and or storage of the data items by the computing device. Any suitable type of predictive algorithm providing meaningful results may be used including a predictive algorithm based on a Bayesian method and or a learning algorithm. The prediction may be written to a ghost page associated with a piece of data. A prediction may be straight forward if it is known that the data piece will never be written or read. Each data item will expose what its peculiar flavor is. This may be implemented down to the size of a single cache line or even below the cache line.

In further embodiments the execution optimization synthesizer operable to generate an execution optimization information utilizing the collected data may include a execution optimization synthesizer operable to generate an execution optimization information providing a storage mobility for data items that are associated together in a substantial disequilibrium based upon a shared fate a shared nature an entanglement to a page and or line of similarly handled data. The data item may include one or more extra bits tag on end of a data item that may indicate its size nature written but never read read but never written read once in the life of the program used by at least two threads . In a further embodiment an indicator may say which code relates with to the data item. This may be used for doing storage assignment. For example if the data item includes a semaphore that is used across multiple threads that should be known and the data item managed accordingly. Most data is associated with a particular body of code and assigned to a storage unit together. By watching that these assignments can be done together between the I cache and the D cache.

In an embodiment the execution optimization synthesizer further includes an execution optimization synthesizer operable to save the optimization information. The optimization information may be saved close to the processor for example in an on chip resource such as the cache A or in the off chip resource such as a system memory or storage medium. In another embodiment the execution optimization synthesizer further includes an execution optimization synthesizer operable to save the optimization information in an association with the at least one instruction of the instruction set.

In an embodiment the device includes a computing device such as for example the computing device of the computing system environment of . In a further embodiment the computing device includes at least one of desktop computing device a laptop computing device a portable computing device and or a supercomputing device.

The execution optimization information generated by the execution optimization synthesizer may be associated with the at least one instruction of the instruction set of a program an application and or a module that includes the at least one instruction. In the case of data the execution optimization information generated by the execution optimization synthesizer may be associated with data received for processing by the execution data produced by the execution the at least one instruction of the instruction set that processed the data and or other related matter. illustrates certain embodiments of an association of the execution optimization information with the at least one instruction of the instruction set. The ghost pages that include the execution optimization information pertaining to the operating system may be virtually and or physically associated in an information storage with the operating system. The information storage may include a non volatile memory structure. For example the ghost pages may be saved in the same file as the operating system. When the operating system is loaded into system memory the ghost pages may remain in the information storage or may be such as for example also loaded into system memory or loaded into an inboard memory. In another embodiment an execution optimization information pertaining to a data set is associated in a information storage with the data set. In a further embodiment an execution optimization profile is associated in an information storage with an application .

In an embodiment a ghost page of the ghost pages containing the execution optimization information may be associated with a selected page of a program or data whose content corresponds to the generation of the execution optimization information such as for example a selected page containing the instruction of the operating system a selected page containing the data of the data set and or a selected page containing the application program . By way of further example data in a ghost page of the ghost pages may indicate that a branch instruction on an identified line of an associated selected page of an application should not be taken. In another embodiment a file containing the execution optimization information may be associated with a file containing the data set.

The illustrated embodiments of the ghost page the execution optimization information and the execution optimization profile respectively associated with the operating system the data and the application are intended only to be illustrative and are not limiting. In another embodiment for example the ghost pages may be associated with the application or the data set .

The microengine includes a microengine operable to gather data in a manner transparent to software executing on the processor and corresponding to a runtime execution of at least a portion of the instruction set by the processor. The microengine is also operable to create a runtime based optimization profile utilizing the gathered dynamic data and which is useable in a subsequent execution of the at least of a portion of the instruction set by the processor.

In an embodiment the microengine may include a microengine operable to gather at least one of dynamic data and or static data in a manner transparent to software executing on the processor and corresponding to a runtime execution of at least a portion of the instruction set by the processor .

In another embodiment the device may further include the processor having an instruction set. In a further embodiment the processor and the microengine are formed on a chip illustrated as a single chip . In an embodiment the device may further include a communications link exposed to the microengine. In another embodiment the device may include the communications link exposed to the microengine and transparent to software executing on the processor. In a further embodiment the device may include the communications link operably coupled to the microengine and to the processor. In another embodiment the communications link may include an interconnection structure.

The modification operation may include at least one additional operation. The at least one additional operation may include an operation an operation and or an operation . The operation changes a movement of data with respect to the processor in response to the execution based optimization profile. For example changing a movement of data may include changing a movement of data toward and or away from the processor. Changing a movement of data toward the processor may include a prefetch of data. By way of further example frequently read data may be stored in a memory close to the processor and infrequently read data may be stored in a memory far from the processor. By way of example frequently written or rewritten data may be stored in a memory close to the processor and infrequently read data may be stored in a memory far from the processor. The operation changes a format of data processable by the processor in response to the execution based optimization profile. For example the operation may save data translated from one format to another such as from big endian to little endian or floating point formats. The operation changes a movement of the at least one instruction of the instruction set toward a processor for execution in response to the execution based optimization profile.

In an alternative embodiment the means includes hardware implemented means for gathering data in a manner transparent to software executing on a processor and corresponding to an execution of at least one machine instruction of an instruction set by the processor. In another alternative embodiment the means may include at least one additional means. The at least one additional means may include hardware implemented means for creating an execution based optimization profile utilizing the gathered data and which is useable in a subsequent execution of the at least one machine instruction of the instruction set by the processor. The at least one additional means may include software implemented means for creating an execution based optimization profile utilizing the gathered data and which is useable in a subsequent execution of the at least one machine instruction of the instruction set by the processor.

In an embodiment the execution optimization information may include the execution optimization information generated by the execution optimization synthesizer of . In another embodiment the execution optimization information may include at least one of the ghost pages the execution optimization information and or the execution optimization profile described in conjunction with . In an alternative embodiment the first processor includes a first processor operable to execute an instruction set and operably coupled to the information store . In another embodiment the hardware circuit for altering an execution of a program includes a hardware circuit for altering an execution of a program and operably coupled to the information store. In a further embodiment the hardware circuit includes a hardware circuit operably coupled to the processor.

In an embodiment the hardware circuit includes a hardware circuit for copying the execution optimization information from the information store to a memory operably coupled to the first processor. For example the memory operably coupled to the first processor may include the hardware resource such as the on chip cache B or the off chip resource such as an off chip cache or an outboard memory or an outboard storage.

In a further embodiment the hardware circuit for altering an execution of a program by the first processor in response to the execution optimization information includes a hardware circuit for causing an alteration of an execution of at least one instruction of an instruction set of a static program by the first processor in response to the execution optimization information. In another embodiment the altering an execution of a program by the first processor in response to the execution optimization information includes altering an execution of at least one instruction of an instruction set of a dynamic program by the first processor in response to the execution optimization information. In a further embodiment the altering an execution of a program by the first processor in response to the execution optimization information includes altering a context of an execution of a program by the first processor in response to the execution optimization information.

In an embodiment the hardware circuit for altering an execution of a program by the first processor in response to the execution optimization information includes a hardware circuit for altering an execution of at least one instruction of an instruction set of a program by the first processor in response to the execution optimization information. In another embodiment the hardware circuit for altering an execution of a program by the first processor in response to the execution optimization information includes a hardware circuit for altering a movement of data with respect to the first processor in response to the execution optimization information. In a further embodiment the hardware circuit for altering an execution of a program by the first processor in response to the execution optimization information includes a hardware circuit for altering a movement of at least one instruction of the program toward the first processor in response to the execution optimization information.

In some instances the altering an execution of a program by the first processor in response to the execution optimization information may include directly altering an execution of a program by the first processor in response to the execution optimization information. In other instances the altering an execution of a program by the first processor in response to the execution optimization information may include causing an alteration of an execution of a program by the first processor in response to the execution optimization information. In further instances the altering an execution of a program by the first processor in response to the execution optimization information may include initiating an alteration of an execution of a program by the first processor in response to the execution optimization information.

In an embodiment the execution optimization information includes execution optimization information created by a hardware device not shown utilizing data collected from a second processor not shown that is at least substantially a same processor as the first processor . For example the execution optimization information used to alter a current execution of a program by the first processor may have been created during a prior execution of the program by the first processor. In another embodiment the execution optimization information includes an execution optimization information created by a hardware device utilizing data collected from a second processor that is at least a substantially different processor from the first processor. For example the execution optimization information used to alter a current execution of a program by the first processor may have been created during a prior execution of the program by a completely different second processor which may be a processor running in a completely different computing device.

In an embodiment the information store includes at least a portion of a cache. In another embodiment the information store includes at least one of an I cache or a D cache. In a further embodiment the information store includes at least one of a volatile memory or a non volatile memory. In a further embodiment the information store includes a computer readable medium. In another embodiment the information store may include a non volatile outboard storage such as magnetic disk storage.

In another embodiment the first processor and the hardware circuit are formed on a single chip illustrated as a single chip . In a further embodiment the first processor and the information store are formed on a single chip illustrated as a single chip .

In an embodiment the execution optimization circuit includes at least one of a microengine a micro programmed circuit and or a hardwired circuit. In another embodiment the execution optimization circuit includes an execution optimization portion of a control unit of the processor. In a further embodiment the processor and the execution optimization circuit are formed on a chip illustrated as the chip .

In an embodiment the execution optimization circuit includes an execution optimization circuit for receiving an identification of a first instruction to be fetched from the instruction set of a program for execution by the processor. The program may be a static program or a dynamic program. In another embodiment the execution optimization circuit includes an execution optimization circuit for pointing to a second instruction of the instruction set of the processor to be fetched for execution by the processor if indicated by an execution based optimization profile associated with the first instruction. In a further embodiment the execution optimization circuit includes an execution optimization circuit for pointing to a second instruction of the instruction set of the processor to be fetched for execution by the processor if indicated by an execution based optimization profile associated with another instruction of the instruction set. In an embodiment the execution based optimization profile includes the execution based optimization profile being previously derived by a hardware device utilizing data invisible to software and generated during a runtime execution of at least a portion of an instruction set of a static program.

The first processor is operable to execute a program illustrated as the program saved in the information store . The first processor includes a first processor operable to execute an instruction set and or having a first instruction set architecture. The first processor may include any processing unit and may be described as a central processing unit that controls operation of a computer such as for example the processing unit described in conjunction with .

The information store includes an information store configured by an execution based optimization profile an embodiment of which is illustrated as an execution based optimization profile . In an embodiment the information store may be configured by writing bits of data representing the execution based optimization profile on the information store. In another embodiment the information store may be configured by flashing bits of data representing the execution based optimization profile on the information store.

The execution based optimization profile includes an execution based optimization profile that is usable in an execution of the program and that was created utilizing data collected during a runtime execution of the program by a second processor not shown and transparent to software executing on the second processor. For example in an embodiment the second processor may include the processor described in conjunction with and the execution based optimization profile may have been created as described in conjunction with . In an embodiment the execution based optimization profile may have another provenance. For example the execution based optimization profile may have a provenance that includes a derivation from other information responsive to a runtime execution of the program. In a further embodiment the execution based optimization profile may include one or more execution based optimization profiles described elsewhere in this document.

In an embodiment the information store may include any suitable computer readable media. partially illustrates an embodiment of an information store hierarchy of computer readable media. An off line storage may include a magnetic tape an external hard disk drive a flash memory card and or a network accessible information store such as an Internet site. An outboard storage may include an internal hard disk drive such as the hard disk drive and or a mounted portable storage medium such as the non volatile magnetic disk and or a mounted removable optical media such as the optical disk all as described in conjunction with . An inboard memory may include a system memory such as the system memory or the system memory described in conjunction with respectively. The inboard memory may also include an on chip memory such as a cache and or a register illustrated as the on chip memory of .

In another embodiment the information store configured by an execution based optimization profile includes an information store configured by a portable execution based optimization profile such as the execution based optimization profile carried by a portable information store as depicted in . The portable information store may include any form of portable off line storage and or mountable portable outboard storage described in conjunction with and or described in conjunction with . For example an embodiment of the portable information store may include a flash memory device such as a flash memory card configured by the execution based optimization profile. By way of further example an embodiment of the portable information store may include an optical disk such as a DVD configured by the execution based optimization profile.

The execution optimization circuit includes an execution optimization circuit operable to alter an execution of the program by the first processor in response to the execution based optimization profile . In an embodiment the first processor operable to execute a program includes a first computing device having a first processor operable to execute a program as shown in .

In a further embodiment a provenance of the execution based optimization profile includes an execution based optimization profile usable in an execution of the program and that was created utilizing data collected by a hardware device during a runtime execution of the program by a second processor and transparent to software executing on the second processor. The hardware device may include the execution optimization synthesizer described in conjunction with . In another embodiment the hardware device may include a micro engine.

In an embodiment a provenance of the execution based optimization profile includes an execution based optimization profile usable in an execution of the program and generated utilizing data collected during a runtime execution of the program by a second processor and transparent to software executing on the second processor. The data collected during a runtime execution of the program may include data corresponding to at least one of an execution environment a data object involved in the execution of the program and or to an instruction involved in the execution of the program. In another embodiment a provenance of the execution based optimization profile includes an execution based optimization profile that is usable in an execution of the program and that was created utilizing data collected during a runtime execution of the program by a second computing device not shown having a second processor and transparent to software executing on the second processor. In a further embodiment a provenance of the execution based optimization profile includes an execution based optimization profile usable in an execution of the program and that was created by an entity that utilized data collected during a runtime execution of the program by a second processor and transparent to software executing on the second processor. The entity may include a real entity such as a human or a person a legal entity such as a corporation or labor union or a fictional entity such as a company or partnership. In an embodiment an entity may create the execution based optimization profile by operating controlling possessing and or otherwise having a nexus with the creation of the execution based optimization profile.

In an embodiment the execution optimization circuit of includes an execution optimization circuit operable to alter an execution of an instruction of the program by the first processor in response to the execution based optimization profile. In another embodiment the execution optimization circuit includes an execution optimization circuit operable to alter an environment of the program execution by the first processor in response to the execution based optimization profile. In an embodiment the execution optimization circuit includes an execution optimization circuit operable to alter a context of the program execution by the first processor in response to the execution based optimization profile. In a further embodiment the execution optimization circuit includes an execution optimization circuit operable to at least one of initiate activate cause facilitate accomplish and or achieve an alteration of an execution of the program by the first processor in response to the execution based optimization profile. In another embodiment the execution optimization circuit includes an execution optimization circuit operable to alter at least one of a memory a data object storage schema and or a data object management schema corresponding to an execution of the program by the first processor in response to the execution based optimization profile. The memory may include at least one of a cache and or a register. In a further embodiment the execution optimization circuit includes an execution optimization circuit operable to receive at least a portion the execution based optimization profile and to alter an execution of the program by the first processor in response to the execution based optimization profile. For example the execution optimization circuit may receive at least a portion the execution based optimization profile from the information store and or the portable information store .

In another embodiment the device includes means for receiving the execution based optimization profile and altering the execution of the computer program in response to the execution based optimization profile.

An alternative embodiment includes an execution based optimization profile usable during an execution of a computer program by a first processor and derived by a hardware device utilizing data generated during a runtime execution of the computer program by a second processor and transparent to software executing on the second processor. In another embodiment the computer readable medium includes a computer storage medium . In a further embodiment the computer storage medium may include a transportable computer storage medium or a portable computer storage medium . In an embodiment the computer readable medium includes a computer readable communications medium .

In an embodiment the input circuit and the generator circuit may be associated with a processor illustrated as a first processor . The first processor may include any processor such as for example the processing unit described in conjunction with . In another embodiment a computing device illustrated as a first computing device may include at least one of the input circuit the generator circuit and or the first processor. The first computing device may include any computing device such as for example the computing device described in conjunction with . The first computing device may include a first information store and or an output circuit . The first information store may be configured by an execution based optimization profile and or a first instruction s .

In a further embodiment another computing device such as a second computing device may include the input circuit and the generator circuit the inclusion is not illustrated in . The second computing device may include any computing device such as for example the computing device described in conjunction with . The second computing device may also include at least one of a second processor and or a second information store . The second information store may be configured by an execution based optimization profile and or a second instruction s . In an embodiment the execution based optimization profile may include a received version of the execution based optimization profile . The received version of the execution based optimization profile may include a version of the execution based optimization profile received from the first computing device via a network such as the Internet or may be a received from a portable information store configured by a portable execution based optimization profile . In another embodiment the execution based optimization profile may include a locally generated execution based optimization profile such as for example when second computing device includes the generator circuit .

In an embodiment the first processor and the second processor may be formed on a single chip. In another embodiment the first processor and the second processor may be formed on separate chips. In a further embodiment the first processor and the second processor may be formed on separate chips and incorporated into separate computing device. In a further embodiment the first processor and the second processor may be formed on separate chips and incorporated in a single computing device.

In an embodiment the input circuit for receiving data corresponding to a runtime execution of a first instruction by a first processor having a first architecture includes an input circuit for receiving data corresponding to a runtime execution of a first instruction by a first processor having a first instruction set architecture. The instruction set architecture is an architectural component of the first processor and may be built into the first processor and or into a microcode of the first processor. The instruction set architecture may include a programmer visible instruction set that the first processor can execute. The instruction set architecture may include a repertoire of machine language instructions that the first processor can execute. The instruction set may include a machine instruction set such as the x86 instruction set. The instruction set may include a compilable or interpretable instruction set such as Java bytecode. In another embodiment the input circuit for receiving data corresponding to a runtime execution of a first instruction by a first processor having a first architecture includes an input circuit for receiving data corresponding to a runtime execution of a first instruction by a first processor having a first microarchitecture. A microarchitecture may include a hardware system architecture which in combination with the instruction set architecture comprises a computer architecture. Processors with a differing microarchitectures may execute the same instruction set architecture. For example Intel processor chips have various microarchitectures but all execute the x86 instruction set architecture. By way of further example Intel processor chips and AMD processor chips have differing microarchitectures but both executing the x86 instruction set architecture.

In an embodiment the input circuit for receiving data corresponding to a runtime execution of a first instruction by a first processor having a first architecture includes an input circuit for receiving data corresponding to a runtime execution of a first instruction associated with a program by a first processor having a first architecture. In another embodiment the generator circuit for creating an execution based optimization profile useable in an execution of a second instruction by a second processor having a second architecture includes a generator circuit for creating an execution based optimization profile useable in an execution of a second instruction associated with the program by a second processor having a second architecture.

In a further embodiment the input circuit for receiving data corresponding to a runtime execution of a first instruction by a first processor having a first architecture includes an input circuit for receiving data corresponding to a runtime execution of a first instruction associated with an application by a first processor having a first architecture. In another embodiment the input circuit for receiving data corresponding to a runtime execution of a first instruction by a first processor having a first architecture includes an input circuit for receiving data transparent to software executing on the first processor and corresponding to a runtime execution of a first instruction by the first processor having a first architecture. A runtime execution of a first instruction may include a runtime execution of a compiled first instruction and or a runtime execution of an interpreted first instruction. For example a runtime execution of an interpreted first instruction may include a runtime execution of an interpreted first Java bytecode instruction.

In an embodiment the generator circuit for creating an execution based optimization profile useable in an execution of a second instruction by a second processor having a second architecture includes a generator circuit for creating an execution based optimization profile useable in an execution of a second instruction by a second processor having a second instruction set architecture. In another embodiment the generator circuit for creating an execution based optimization profile useable in an execution of a second instruction by a second processor having a second architecture includes a generator circuit for creating an execution based optimization profile useable in an execution of a second instruction associated by a second processor having a second microarchitecture. In a further embodiment the generator circuit for creating an execution based optimization profile useable in an execution of a second instruction by a second processor having a second architecture includes a generator circuit for creating an execution based optimization profile useable in an execution of a second instruction by a second processor having a second architecture the second instruction being at least substantially similar to the first instruction .

In an embodiment the generator circuit for creating an execution based optimization profile useable in an execution of a second instruction by a second processor having a second architecture includes a generator circuit for creating an execution based optimization profile useable in an execution of a second instruction by a second processor having a second architecture the second instruction being at least substantially different from the first instruction. In another embodiment the generator circuit for creating an execution based optimization profile useable in an execution of a second instruction by a second processor having a second architecture includes a generator circuit for creating an execution based optimization profile useable in an execution of a second instruction by a second processor having a second architecture in response to the received data. In a further embodiment the generator circuit for creating an execution based optimization profile useable in an execution of a second instruction by a second processor having a second architecture includes a generator circuit for creating an execution based optimization profile useable in prefetching data in conjunction with an execution of a second instruction by a second processor having a second architecture. In another embodiment the generator circuit for creating an execution based optimization profile useable in an execution of a second instruction by a second processor having a second architecture includes a generator circuit for creating an execution based optimization profile useable in prefetching a third instruction in conjunction with an execution of a second instruction by a second processor having a second architecture.

In an embodiment the first instruction includes at least one of a machine level instruction a compiled instruction a compilable instruction one instruction at least two instructions an instruction line an instruction block an atomic instruction block a program and or an application. In another embodiment the first processor includes an x86 architecture and the second processor includes a PowerPC architecture. In a further embodiment the first processor includes an Intel based architecture and the second processor includes an AMD based architecture.

In an embodiment the device includes the first information store configured by the execution based optimization profile . In another embodiment the device includes an output circuit for broadcasting the execution based optimization profile. In a further embodiment the second computing device includes an execution modification circuit . In an embodiment the execution modification circuit includes an execution modification circuit for modifying an execution of the second instruction in response to the execution based optimization profile .

In an embodiment the input module and the generator module may be associated with a processor illustrated as the first processor . In another embodiment a computing device illustrated as the first computing device may include at least one of the input module the generator module and or the first processor . The first computing device may include a broadcast module . The first information store may be configured by an execution optimization profile and or a first instruction s .

In another embodiment another computing device such as the second computing device may include the input module and or the generator module the inclusion is not illustrated in . The second computing device may include at least one of the second processor and or the second information store . The second information store may be configured by an execution optimization profile and or a second instruction s . In an embodiment the execution optimization profile may include a received version of the execution optimization profile . The received version of the execution optimization profile may include a version of the execution optimization profile received from the first computing device via a network such as the Internet or may be received from a portable information store configured by an execution optimization profile . In another embodiment the execution optimization profile may include a locally generated execution optimization profile such as for example when second computing device includes the generator module .

In an embodiment the second instruction set architecture of the second processor is at least substantially different from the first instruction set architecture of the first processor . In a further embodiment the second instruction set architecture is at least substantially similar to the first instruction set architecture.

In an embodiment the apparatus includes a broadcast module operable to encode a computer readable signal bearing medium with the execution optimization information. In another embodiment the apparatus includes a broadcast module operable to transmit a computer readable signal bearing medium encoded with the execution optimization information. In a further embodiment the apparatus includes an execution optimization module . The execution optimization module includes an execution optimization module operable to optimization an execution of the second instruction in response to the execution optimization profile .

In an embodiment the receiver module and the generator module may be associated with a processor illustrated as the first processor . In another embodiment a computing device illustrated as a first computing device may include at least one of the receiver module the generator module and or the first processor . The first computing device may include the broadcast module . The first information store may be configured by an execution optimization information and or a first instruction s .

In another embodiment another computing device such as the second computing device may include the receiver module and or the generator module the inclusion is not illustrated in . The second computing device may include at least one of the second processor and or the second information store . The second information store may be configured by an execution optimization information and or a second instruction s . In an embodiment the execution optimization information may include a received version of the execution optimization information . The received version of the execution optimization information may include a version of the execution optimization information received from the first computing device via a network such as the Internet or may be received from the portable information store configured by a portable execution optimization information . In another embodiment the execution optimization information may include a locally generated execution optimization information.

In an embodiment the second microarchitecture of the second processor is at least substantially different from the first microarchitecture of the first processor . In another embodiment the second microarchitecture of the second processor is at least substantially similar to the first microarchitecture of the first processor.

In a further embodiment the apparatus includes the execution optimization module . The execution optimization module includes an execution optimization module operable to optimization an execution of the second instruction in response to the execution optimization information .

In another embodiment the execution based optimization profile includes an execution based optimization profile usable during an execution of a computer program by a second processor having a second instruction set architecture and derived by a hardware device utilizing data generated during a runtime execution of the computer program by a first processor having a first instruction set architecture. In a further embodiment the execution based optimization profile includes an execution based optimization profile usable during an execution of a computer program by a second processor having a second microarchitecture and derived by a hardware device utilizing data generated during a runtime execution of the computer program by a first processor having a first microarchitecture.

In an embodiment the computer readable medium includes a computer storage medium . In a further embodiment the computer storage medium may include a transportable computer storage medium or a portable computer storage medium . In an embodiment the computer readable medium includes a computer readable communications medium .

In an embodiment the apparatus may include a first computing machine having the first computing machine architecture and or a second computing machine having the second computing machine architecture. In another embodiment the apparatus may include a first device that includes the first computing machine . The first computing machine may include a virtual computing machine and or a real computing machine. In a further embodiment the apparatus may include a second device that includes the second computing machine. The second computing machine may include a virtual computing machine and or a real computing machine. A real computing machine may include a real processor unit formed on a chip such as the processing unit described in conjunction with . A virtual computing machine may include a Java Virtual Machine.

In an embodiment the monitor circuit includes a monitor circuit for determining at a runtime an execution characteristic of a first instruction associated with a first computing machine architecture. In a further embodiment the monitor circuit includes a monitor circuit for determining at a walk time a characteristic of execution of a first instruction associated with a first computing machine architecture. In another embodiment the monitor circuit includes a monitor circuit for determining at a compile time an execution characteristic of a first instruction associated with a first computing machine architecture. For example determining at a compile time may include determining statically i.e. without an execution. In a further embodiment the monitor circuit includes a monitor circuit for dynamically determining an execution characteristic of a first instruction associated with a first computing machine architecture.

In an embodiment the monitor circuit includes a monitor circuit for determining an execution characteristic of a first instruction associated with a first computing machine architecture in response to a compilation of the first instruction into an intermediate language. For example an intermediate language may include a binary executable language such as bytecode of the Java Virtual Machine or Common Intermediate Language of Microsoft s C . In another embodiment the monitor circuit includes a monitor circuit for determining an execution characteristic of a first instruction corresponding to an execution of the first instruction by a real first computing machine having the first computing machine architecture. In a further embodiment the monitor circuit includes a monitor circuit for determining an execution characteristic of a first instruction corresponding to an execution of the first instruction by a virtual first computing machine having the first computing machine architecture.

In an embodiment the monitor circuit includes a monitor circuit for determining an execution characteristic of a first instruction corresponding to a simulated execution of the first instruction having a first computing machine architecture. In another embodiment the monitor circuit includes a monitor circuit for determining an execution characteristic of a first instruction corresponding to a translation of the first instruction having a first computing machine architecture. The translation may include a static translation. In a further embodiment the monitor circuit includes a monitor circuit for determining an execution characteristic of a first instruction corresponding to a dynamic translation of the first instruction associated with a first computing machine architecture. In another embodiment the monitor circuit includes a monitor circuit for determining an execution characteristic of a first instruction corresponding to a compilation of the first instruction associated with a first computing machine architecture.

In an embodiment the generator circuit includes a generator circuit for creating an optimization profile useable in an execution of a second instruction associated with a second computing machine architecture in response to the determined execution characteristic. In a further embodiment the second instruction associated with a second computing machine architecture is at least substantially similar to the first instruction associated with a first computing machine architecture. In another embodiment the second instruction associated with a second computing machine architecture is at least substantially different than the first instruction associated with a first computing machine architecture.

In an embodiment the generator circuit includes a generator circuit for creating an optimization profile useable in modifying a movement of data with respect to an execution of a second instruction associated with a second computing machine architecture. For example the movement of data may include a prefetch of data and or storage of data in a different location that indicated by the second instruction. In another embodiment the generator circuit includes a generator circuit for creating an optimization profile useable in modifying an execution of a second instruction associated with a second computing machine architecture.

A user employs a text editor to write one or more instructions and or statements in the source code having a computing machine architecture illustrated as Java and or Microsoft C source code. The one or more instructions and or statements written in the source code having a computing machine architecture sometimes referred to herein as a first instruction are compiled by a compiler into a binary executable associated with a first computing machine architecture. For example instructions and or statements written in Java source code may be compiled to byte code associated with Java virtual computing machine architecture and instructions and or statements written in C source code may be complied to Microsoft s Common Intermediate Language associated with a computing machine architecture. In conjunction with compiling the source code the monitor circuit determines an execution characteristic of a first instruction associated with a first computing machine architecture. In response to the determined execution characteristic the generator circuit creates an optimization profile useable in an execution of a second instruction associated with a second computing machine architecture. In an embodiment the second computing machine architecture is at least substantially different from the first computing machine architecture. In a further embodiment the second computing machine architecture is at least substantially similar to the first computing machine architecture.

The second computing machine architecture may be any computing machine architecture. For example the second computing machine architecture may include an Intel x86 computing machine architecture a Sun SPARC computing machine architecture and or a Mac PowerPC computing machine architecture . The optimization profile created by the generator circuit at the compilation into the binary executable by the compiler may include optimization information useful when the second instruction is compiled by the virtual machine into the native language of the second computing machine having the second computing machine architecture. The virtual machine may include a Java virtual machine and or a Microsoft common language runtime virtual machine. For example the optimization profile may be usable in an execution of the second instruction in one or more of the computing machines illustrated in .

In an alternative embodiment the first instruction having a first computing machine architecture may include an instruction of the binary executable . The second instruction having a second computing machine architecture may include a native language and or machine language of the processor such the x86 machine code of the Intel x86 machine or the machine code of the Mac PowerPC machine .

A further embodiment may be illustrated by . For example the first instruction having a first computing machine architecture may include a machine language instruction associated with the x86 computing machine architecture. The second instruction having a second computing machine architecture may include a machine language instruction associated with the Mac PowerPC computing machine architecture.

In an embodiment the computer readable medium includes a computer storage medium . In another embodiment the computer storage medium includes a transportable computer storage medium . In a further embodiment the computer storage medium includes a portable computer storage medium . In another embodiment the computer readable medium includes a computer readable communications medium .

The foregoing detailed description has set forth various embodiments of the devices and or processes via the use of block diagrams flow diagrams operation diagrams flowcharts illustrations and or examples. Insofar as such block diagrams operation diagrams flowcharts illustrations and or examples contain one or more functions and or operations it will be understood by those within the art that each function and or operation within such block diagrams operation diagrams flowcharts illustrations or examples can be implemented individually and or collectively by a wide range of hardware software firmware or virtually any combination thereof.

In addition those skilled in the art will appreciate that the mechanisms of the subject matter described herein are capable of being distributed as a program product in a variety of forms and that an illustrative embodiment of the subject matter described herein applies equally regardless of the particular type of signal bearing media used to actually carry out the distribution. Examples of a signal bearing media include but are not limited to the following recordable type media such as floppy disks hard disk drives CD ROMs digital tape and computer memory and transmission type media such as digital and analog communication links using TDM or IP based communication links e.g. packet links .

It will be understood by those within the art that in general terms used herein and especially in the appended claims e.g. bodies of the appended claims are generally intended as open terms e.g. the term including should be interpreted as including but not limited to the term having should be interpreted as having at least the term includes should be interpreted as includes but is not limited to etc. . It will be further understood by those within the art that if a specific number of an introduced claim recitation is intended such an intent will be explicitly recited in the claim and in the absence of such recitation no such intent is present. For example as an aid to understanding the following appended claims may contain usage of the introductory phrases at least one and one or more to introduce claim recitations. However the use of such phrases should not be construed to imply that the introduction of a claim recitation by the indefinite articles a or an limits any particular claim containing such introduced claim recitation to inventions containing only one such recitation even when the same claim includes the introductory phrases one or more or at least one and indefinite articles such as a or an e.g. a and or an should typically be interpreted to mean at least one or one or more the same holds true for the use of definite articles used to introduce claim recitations. In addition even if a specific number of an introduced claim recitation is explicitly recited those skilled in the art will recognize that such recitation should typically be interpreted to mean at least the recited number e.g. the bare recitation of two recitations without other modifiers typically means at least two recitations or two or more recitations . Furthermore in those instances where a convention analogous to at least one of A B and C etc. is used in general such a construction is intended in the sense one having skill in the art would understand the convention e.g. a system having at least one of A B and C would include but not be limited to systems that have A alone B alone C alone A and B together A and C together B and C together and or A B and C together etc. . In those instances where a convention analogous to at least one of A B or C etc. is used in general such a construction is intended in the sense one having skill in the art would understand the convention e.g. a system having at least one of A B or C would include but not be limited to systems that have A alone B alone C alone A and B together A and C together B and C together and or A B and C together etc. .

The herein described aspects depict different components contained within or connected with different other components. It is to be understood that such depicted architectures are merely exemplary and that in fact many other architectures can be implemented which achieve the same functionality. In a conceptual sense any arrangement of components to achieve the same functionality is effectively associated such that the desired functionality is achieved. Hence any two components herein combined to achieve a particular functionality can be seen as associated with each other such that the desired functionality is achieved irrespective of architectures or intermedial components. Likewise any two components so associated can also be viewed as being operably connected or operably coupled to each other to achieve the desired functionality. Any two components capable of being so associated can also be viewed as being operably couplable to each other to achieve the desired functionality. Specific examples of operably couplable include but are not limited to physically mateable and or physically interacting components and or wirelessly interactable and or wirelessly interacting components.

While various aspects and embodiments have been disclosed herein other aspects and embodiments will be apparent to those skilled in the art. The various aspects and embodiments disclosed herein are for purposes of illustration and are not intended to be limiting with the true scope and spirit being indicated by the following claims.

