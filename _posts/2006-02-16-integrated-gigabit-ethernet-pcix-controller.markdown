---

title: Integrated gigabit ethernet PCI-X controller
abstract: A network controller having a multiprotocol bus interface adapter coupled between a communication network and a computer bus, the adapter including a predictive time base generator; and a management bus controller adapted to monitor and manage preselected components coupled with one of the communication network and the computer bus. The management bus controller is adapted to employ an Alert Standard Format (ASF) specification protocol, a System Management Bus (SMBus) specification protocol, an Intelligent Platform Management Interface (IPMI) specification protocol, a Simple Network Management Protocol (SNMP), or a combination thereof. The network controller also includes a 10/100/1000BASE-T IEEE Std. 802.3-compliant transceiver and media access controller coupled with the communication network; a buffer memory coupled with the MAC, wherein the buffer memory includes one of a packet buffer memory, a frame buffer memory, a queue memory, and a combination thereof; and a transmit CPU and a receive CPU coupled with the multiprotocol bus interface adapter and the management bus controller. The network controller can be a single-chip VLSI device in an 0.18 micron CMOS VLSI implementation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07444455&OS=07444455&RS=07444455
owner: Broadcom Corporation
number: 07444455
owner_city: Irvine
owner_country: US
publication_date: 20060216
---
This application is a division of U.S. patent application Ser. No. 10 132 531 filed Apr. 24 2002 now U.S. Pat. No. 7 062 595 which claims the benefit of U.S. Provisional Patent Application No. 60 286 320 filed Apr. 24 2001 the disclosure of each of which is hereby incorporated by reference herein.

The present application also is related to U.S. patent application Ser. No. 09 865 844 now U.S. Pat. No. 6 829 715 filed May 25 2001 and entitled MULTIPROTOCOL COMPUTER BUS INTERFACE ADAPTER AND METHOD the entire contents of which is incorporated herein by reference as though set forth in full. The present application also is related to co pending United States Patent Application entitled ALERTING SYSTEM ARCHITECTURE AND CIRCUITRY with named inventors Steven B. Lindsay Andrew SeungHo Hwang and Andrew M. Naylor filed on Apr. 24 2002 the entire contents of which is incorporated herein by reference as though set forth in full. The present application also is related to co pending United States Patent Application entitled POWER MANAGEMENT SYSTEM AND METHOD with named inventors Steven B. Lindsay Andrew SeungHo Hwang Andrew M. Naylor Scott Sterling McDonald and Habib Anthony Abouhossien filed on Apr. 24 2002 the entire contents of which is incorporated herein by reference as though set forth in full. The present application also is related to co pending United States Patent Application entitled ASF MEMORY LOADING AND HANDLING SYSTEM with named inventors Steven B. Lindsay Andrew SeungHo Hwang and Andrew M. Naylor filed on Apr. 24 2002 the entire contents of which is incorporated herein by reference as though set forth in full.

The present invention relates to computer bus interfaces particularly to high performance high bandwidth computer bus interfaces and more particularly to a computer bus interface adapter providing integrated alerting and management functions and having a predictive time base generator therein.

Modern communications networks are demanding heterogeneous environments having associated complex communication management and support requirements. Some components may act as servers under some circumstances and as clients under others in a hierarchy of control and management functions in addition to the primary mission of effecting communications. Certain components are relatively permanent in the network structure yet others are intermittently part of the active network because they are mobile or remotely operated. In addition while many network components are always on others may be made dormant during periods of inactivity or maintenance. In view of the above it is desirable that advanced high bandwidth high performance local bus adapters and controllers operate robustly and intelligently in most if not all environments thereby forcing designers to make trade offs between features and functionality and available motherboard slots or board real estate.

The term system manageability represents technologies that enable remote system access and control in both OS present and OS absent environments. OS absent is defined herein as a networked computer system being in a state including without limitation no active OS inoperable OS or low power system sleep state. These technologies are primarily focused on minimizing on site maintenance maximizing system availability and performance to the local user maximizing remote visibility of and access to local systems by network administrators and minimizing the system power consumption required to keep this remote connection intact. Technologies that require the OS to be present do not allow an administrator to have remote visibility or access to systems that have serious hardware or software problems which prevent the OS from loading or working correctly. In addition such OS present technologies do not allow for a system to be remotely managed while in a low power mode.

Furthermore computer processors typically communicate with cooperating components along one or more computer buses. Peripheral components including audio and print devices portable storage media and low bandwidth networking devices usually are coupled with the bus through a peripheral or expansion computer bus interface adapter. On the other hand devices with high bandwidth needs including video memory high performance networking and core storage media often are linked to the CPU via a high bandwidth local bus interface adapter. Components on expansion buses typically have operational speeds many orders of magnitude slower than that of the CPU however such components sporadically access CPU and system resources and thus critical design issues such as bus latency setup hold times and clock to data time are of little import to interface adapters designed for those applications.

Although high bandwidth high performance local bus components and adapters tend to operate at clock speeds much higher than their expansion bus counterparts they still lag current CPU speeds by about an order of magnitude. However because local bus components tend to interact with the CPU to a significant degree slow inefficient and poorly designed local bus interface adapters can potentially waste substantial amounts of processor and system resources. Therefore local bus interface adapters are usually faced with observing strict timing budgets when accessing and providing data to the local bus.

Many factors can lead an adapter to violate the timing budget imposed by a bus protocol. For example delays introduced in the clock trees and in the data paths of bus adapters or both can effectively decouple the interface adapter from the bus because the adapter response time fails to remain synchronized to the bus clock. The functional characteristics of VLSI devices employed in such high bandwidth high performance computer bus interface adapters can be susceptible to design and process variations during manufacturing. Also the response of such adapters can be compromised by variations in environmental conditions while operating.

There is a need then for a local bus interface adapter that mitigates critical path delays within a computer bus interface adapter or device to the extent that they do not violate the aforementioned timing budgets. It is desirable that such an adapter is robust to design and process variations during manufacturing as well as to the environmental conditions which may be encountered during operations. Because multiple local bus protocols exist in common computer environments there also is a need for a robust multiprotocol computer bus interface adapter that is observant of stringent bus protocol timing budgets. There also is a need for an advanced high performance high bandwidth local bus adapter controller that integrates complex network communication management and support features and functions onto a single VLSI chip.

To reduce the total cost of ownership of computing systems such as personal computers a number of technologies have been developed to provide more cost effective system maintenance and to maximize system up time . For example some of these technologies give IT administrators more visibility and control over remote systems. Traditionally these technologies require that the managed system is an operational state with the Operating System e.g. Microsoft Windows of the computing system loaded.

In general however technologies that require the OS to be loaded do not allow an administrator to have remote visibility or access to systems that have serious hardware or software problems that prevent the OS from loading or working correctly. In addition these technologies do not allow for a system to be remotely managed while in a low power mode. For these scenarios there is a need for a standardized low level technology that gives administrators remote access to and control over the managed system.

Several vendors have developed proprietary technologies in this area. Intel and IBM created Alert on LAN AoL technology. AoL provided remote notification of local system states and various hardware or software failures in an OS absent environment. In addition Intel and others developed the Platform Event Trap PET format to describe how alerts were formatted over the network.

As the number of these technologies increased computing system vendors were faced with the possibility of having to support several different alerting standards. As a result the Distributed Management Task Force developed an open remote control and alerting standard the Alert Standard Format ASF .

ASF is a specification that defines methods for alerting and remote system control. ASF is specifically targeted at OS absent environments. As used herein the term OS absent refers to a computer system that is in a state including without limitation a no active OS state an inoperable OS state a low power state and or a system sleep state.

The remote control and alerting system defined by ASF includes a management system that communicates with one or more clients. Here the term client refers to a managed computing system. Typically the management system is located remotely from the computing systems and communicates with the clients via a network. An alert sending device ASD which is a component in each client interfaces with other components in the computing system to respond to remote control requests from the management system. Such requests include for example power up power down and maintenance requests. The ASD also interfaces with sensors in the client computing system. When a sensor detects an alert event the ASD in the client sends a corresponding alerting message to the management system. To this end the ASF specification defines interfaces for sensors alert sending devices which may include for example network interface cards or Modems remote management console software and system firmware in order to allow system vendors and system component vendors to develop ASF compliant products.

In summary the above technologies collectively referred to as system manageability technologies enable remote system access and control in both OS present and OS absent environments. These technologies are primarily focused on minimizing on site maintenance maximizing system availability and performance to the local user maximizing remote visibility of and access to local systems by network administrators and minimizing the system power consumption required to keep this remote connection intact.

While the technologies discussed above address some of the problems associated with system manageability they fall short of addressing many issues involved in providing a robust remote control and alerting system for computing systems. In particular in networked computing systems there is a need for a cost effective yet highly high functional system for managing a computing system using standard protocols when the OS is not present.

An embodiment of the invention is a network controller. Included is a multiprotocol bus interface adapter coupled between a communication network and a computer bus. The adapter has a clock signal input a data delay element interposed in an output data path and imposing a predetermined output data delay upon output data and a predictive time base generator coupled with the clock signal input and the data delay element. The time base generator has a predictive synchronizer having a synchronizing feedback loop therein and a replica delay element coupled with the synchronizing feedback loop and adapted to provide feedback delay substantially replicating the predetermined output data delay. The replica delay element causes the predictive time base generator to provide a predictive clock signal to the data delay element and substantially reducing the predetermined output data delay. An alert supervisory controller is coupled with the multiprotocol bus interface adapter and is adapted to monitor and manage preselected components coupled with one of the communication network and the computer bus.

An embodiment of the invention is in a network controller having a plurality of state machines receiving a plurality of inputs effecting a plurality of predefined functions upon respective ones of the plurality of inputs and producing a plurality of states thereby. An alert supervisory bus controller includes a processor operably coupled with the plurality of state machines and disposed to monitor the plurality of states and a rules checker disposed to operate with the processor. The rules checker evaluates the plurality of states and identifies an alert supervisory state. The processor produces a predefined alert supervisory output responsive to the alert supervisory state.

An embodiment of the invention is also an alerting network controller which includes firmware coupled to an alert supervisory bus and bidirectionally translating data between an alert supervisory protocol and a network protocol. A network interface is coupled with the firmware and bidirectionally communicates the data between the firmware and a network implementing the network protocol.

The above needs can also be satisfied by providing an advanced high performance high bandwidth highly integrated controller that integrates complex network communication management and support features and functions onto a single VLSI chip. Embodiments of the invention can be realized as an Integrated Gigabit Ethernet PCI X Controller. Embodiments of the invention may include a network controller coupled between a communication network and a computer bus which incorporates a multiprotocol bus interface adapter. The adapter has a clock signal input a data delay element interposed in an output data path and imposing a predetermined output data delay upon output data and a predictive time base generator coupled with the clock signal input and the data delay element. The time base generator has a predictive synchronizer with a synchronizing feedback loop therein. It also has a replica delay element coupled with the synchronizing feedback loop and adapted to provide feedback delay substantially replicating the predetermined output data delay the replica delay element causing the predictive time base generator to provide a predictive clock signal to the data delay element and substantially reducing the predetermined output data delay and wherein the computer bus and the multiprotocol bus interface adapter are adapted to employ a PCI protocol a PCI X protocol or both. An embodiment of the present invention may further include a management bus controller coupled with the multiprotocol bus interface adapter. The management bus controller is adapted to monitor and manage preselected components coupled with one of the communication network and the computer bus. The management bus controlled is adapted to employ at least one of an Alert Standard Format ASF specification protocol a System Management Bus SMBus specification protocol an Intelligent Platform Management Interface IPMI specification protocol and a Simple Network Management Protocol SNMP . The invention also can include a 10 100 1000BASE T IEEE Std. 802.3 compliant transceiver and media access controller MAC coupled with the communication network a buffer memory coupled with the MAC wherein the buffer memory includes one of a packet buffer memory a frame buffer memory a queue memory or a combination thereof and CPU which may be used to transmit in addition to other functions and a CPU which may be used to receive in addition to other functions coupled with the multiprotocol bus interface adapter and the management bus controller. The multiprotocol computer bus interface adapter the management bus controller or both can include at least one of a Gigabit Media Independent Interface GMII interface an 10 Gigabit Media Independent Interface XGMII a 10 Gigabit attachment unit interface XSBI 10 Gigabit serial bus interface XAUI a Serial Gigabit Media Independent Interface SGMII a Reduced Gigabit Media Independent Interface RGMII a Reduced Ten Bit Interface RTBI a Ten Bit Interface TBI a Serial Gigabit Media Independent Interface SMII and a Media Independent Interface MII . Also the multiprotocol bus interface adapter is suited to interface one of an IEEE Std. 802.3 like protocol a SONET SDH like protocol a Fiber Channel like protocol an SCSI like protocol and an InfiniBand like protocol. Also the predictive interface adapter may be a multiprotocol predictive interface adapter that can accommodate multiple computer bus protocols including the PCI local bus protocol and the PCI X local bus protocol as well as similar bus protocols such as for example the CardBus protocol. Furthermore local bus adapter controller can be adapted to additionally accommodate at least one of the Alert Standard Format ASF specification protocol the System Management Bus SMBus specification protocol the Intelligent Platform Management Interface IPMI specification protocol and the Simple Network Management Protocol SNMP . In certain embodiments of the present invention the network controller can be realized in a single chip VLSI implementation for example an 0.18 micron CMOS VLSI implementation which can be particularly advantageous for application of these embodiments to Gigabit Ethernet Network Interface cards and LAN on Motherboard LOM systems.

The present invention implements an advanced high performance high bandwidth highly integrated controller such as an Integrated Gigabit Ethernet PCI X Controller that integrates complex network communication management and support features and functions onto a single VLSI chip. Embodiments of the invention can be configured as a network controller which is coupled between a communication network and a computer bus and which incorporates a multiprotocol bus interface adapter and a alert supervisory bus controller.

To meet stringent timing requirements whether in a computer bus interface adapter or in another high performance digital environment the present invention provides a predictive time base generator that produces a predictive clock signal typically advanced in time relative to an input clock signal which can compensate for elements producing delays in a data path a clock path or both. It will be apparent to the skilled practitioner that the predictive time base generator of the present invention can be employed to compensate for critical path delays in applications other than computer bus interface adapters as well and it is intended that the scope of the present invention include such applications. For example within the domain of IEEE Std. 802.3 related network adapters the predictive time base generator of the present invention can be employed advantageously in a myriad of interfaces including without limitation XGMII 10 Gigabit Media Independent Interface XAUI 10 Gigabit attachment unit interface XSBI 10 Gigabit serial bus interface SGMII Serial Gigabit Media Independent Interface RGMII Reduced Gigabit Media Independent Interface RTBI Reduced Ten Bit Interface GMII Gigabit Media Independent Interface as well as in TBI SMII and MII interfaces. IEEE Std. 802.3 2000 Edition relevant to such implementations is hereby incorporated herein in its entirety.

In order to provide such an early clock signal PTBG provides a predictive clock signal to buffer . PTBG according to the present invention can include a predictive synchronizer which receives input clock signal and through delay feedback produces signal substantially locked with but advanced relative to clock input signal . In general it is preferred that synchronizer be a phase lock loop PLL although a delay lock loop DLL also may be used. By inserting replica delay element between synchronizer output and delay feedback synchronizer can lock with input clock signal such that predictive signal is advanced relative to signal by an amount of time substantially replicating the predetermined data delay imposed by delay element . Thus valid data can be made available on path essentially simultaneously with the arriving rising edge of clock signal and PTBG assists with data synchronization as well as providing a predictive timing signal. It is generally preferred to replicate the structure s inducing the critical data path delay within replica delay element in order to obtain an accurate and robust approximation of the predetermined data delay. Advantageously the approximation of the predetermined data delay thus obtained is largely unaffected by variations in design and fabrication processes operating environment and the like.

In many applications a data path delay can be accompanied by a clock related delay for example a clock tree delay. Thus PIA in is adapted to additionally compensate for clock related delays in internal clock path producing delayed clock signal . Similar to the structure and function described with regard to PIA is interposed between data source and data sink in communication system . PIA includes PTBG which provides predictive clock signal to data delay element . As before a predetermined data delay exists within PIA as indicated by data delay element .

However in PIA an additional source of delay is encountered namely a predetermined clock delay in the propagation of input clock signal which clock delay is modeled by clock delay element . In order to compensate for both types of delays it is desirable to adapt replica delay element which is coupled with delay feedback to replicate therein both data delay element and clock delay element . In this manner predictive synchronizer produces predictive clock signal advanced in time relative to input clock signal to substantially nullify both the predetermined data delay and the predetermined clock delay.

In operation interface block receives data on data path from data source . This data is made available on data path to data delay element before the arrival of the preselected e.g. rising edge of input clock signal . Were data delay element to be clocked by delayed clock signal the resultant delay from clock to valid data out on data path would be approximately the sum of the predetermined data delay and the predetermined clock delay. Because the clock to valid output data delay is typically one of the most difficult timing constraints to meet in such a device direct clocking by delayed clock signal may cause a standard interface adapter to violate or undesirably approach the relevant timing restriction. Thus it is preferred that predictive clock signal clocks data delay element in advance of the arrival of input clock signal such that valid data is available on data path at or desirably near the arrival of the rising edge of input clock signal to PIA .

In the event that wire delays represent significant components in the data delay the clock delay or both a compensatory replica wire delay element corresponding to the undesirable wire delays can be incorporated with delay element in the path of feedback delay . Moreover interface block can be a component that selectively transfers data in a manner suitable to one or more computer bus protocols and thus PIA can be a multiprotocol predictive interface adapter.

The embodiments of the present invention illustrated in and can be used in a variety of devices in which it is desired to reduce the effects of signal propagation delay for example in a computer network or in a computer system. Such computer network components for example network time synchronizers and Serializer Deserializers SERDES can be adapted for applications related to exemplary networking protocols including without limitation Ethernet SONET SDH Fibre Channel Ultra3 SCSI InfiniBand and the like.

Certain preferred embodiments of the invention herein can be especially advantageous when used in conjunction with particular computer bus interface adapters particularly where multiple bus protocols are employed. Such an application can based for example on the Peripheral Component Interconnect PCI Local Bus specification and its subsequent enhancements. A skilled artisan would realize however that the present invention also can readily be adapted for bus implementations similar to the PCI Local Bus including without limitation CardBus implementations. CardBus is a 32 bit bus mastering interface defined by the PC Card Standard Release 8 March 1997 and by the Yenta specification Intel Corporation which standards are incorporated herein in their entirety.

It will be useful to briefly describe the PCI bus family of protocols in order to inform the subsequent descriptions of additional embodiments of the invention as realized in the context of the PCI PCI X bus protocols. The PCI specification was introduced to define a low latency path between the microprocessor local bus and faster peripherals such as high resolution video boards disk controllers and LAN devices. The original PCI bus specification PCI33 defines a 33 MHz 32 bit or 64 bit data path to achieve a bandwidth of about 133 Mbps. Later the 66 MHz PCI PCI66 bus was introduced as a compatible superset of PCI33. A PCI66 bus operates up to a maximum clock speed of 66 MHz also using a 32 bit or 64 bit data path providing a peak bandwidth of about 533 megabytes per second MB s . Differences between the PCI33 bus and the PCI66 bus are minimal PCI66 utilizes the PCI33 bus protocol signal definitions and connector layout and simply operates at a higher maximum bus clock frequency. The PCI66 bus is specified to be interoperable with the PCI33 bus a PCI66 device operates as a PCI33 device when it is connected to a 33 MHz PCI bus. Similarly if any PCI33 devices are connected to a PCI66 bus the PCI66 bus operates as if it were a PCI33 bus. PCI33 devices are specified to operate between 0 33 MHz and PCI66 devices between 33 66 MHz.

However despite the advantages of the PCI66 protocol business critical applications continue to demand greater bandwidth and shorter response times from the input output I O subsystems of enterprise computers. Faster and more complex I O devices such as

Gigabit Ethernet Fibre Channel Ultra3 SCSI and multi port network interface controllers NICs can demand far greater bandwidth than PCI33 or PCI66 can provide. For example a four port Gigabit Ethernet NIC with each port capable of 1 gigabit per second or 125 MB s of sustained throughput would overwhelm the 64 bit 66 MHz PCI bus bandwidth by consuming essentially all available bandwidth. Thus the conventional PCI bus technology can become a performance bottleneck. To break this I O bottleneck the PCI X bus was developed as an enhancement of the industry standard PCI bus.

Both PCI33 and PCI66 bus specifications hereinafter conventional PCI are described in detail in the 2.2 the 1.1 the 1.1 the PCI BIOS Specification Revision 2.1 the 1.0 the 1.0 and the 1.5aS as amended collectively PCI Specification . In addition the PCI X66 and PCI X133 bus specifications are described in detail in the 1.0 as amended PCI X Specification in addition to pertinent parts of the PCI Specification. The foregoing specifications are incorporated by reference in their respective entireties herein.

PCI X technology can increase bus capacity to more than eight times the conventional PCI bus bandwidth from 133 MB s with the 32 bit 33 MHz PCI bus to 1066 MB s with the 64 bit 133 MHz PCI X bus. PCI X enables the design of systems and devices that can operate at bus frequencies of up to 133 MHz using a 64 bit bus width a significant improvement in performance beyond that of conventional PCI systems. The PCI X specification defines two frequency design points and two data path widths for PCI X adapters PCI X 66 MHz and PCI X 133 MHz each capable of having 32 bit or 64 bit data paths. When operating in PCI X mode PCI X66 adapters can have actual clock frequencies ranging from 50 to 66 MHz and PCI X133 adapters can have clock frequencies ranging from 50 to 133 MHz.

In general PCI X provides backward compatibility with conventional PCI bus designs at both the adapter and system level. Devices can be designed to meet PCI X66 and PCI X133 requirements yet operate as conventional PCI33 and PCI66 devices when installed in those systems. Conversely if conventional PCI devices are installed on a PCI X bus the bus clock remains at a frequency acceptable to the conventional adapter and other adapters on that bus segment are restricted to using the conventional PCI protocol. If only PCI X devices are installed on a PCI X bus that bus segment can operate using the PCI X protocol. However despite backward compatibility there are fundamental differences between the PCI and PCI X protocols that pose challenges to the design of PCI XI33 adapters which yield maximum bandwidth in a PCI XI33 environment yet are fully functional as PCI33 devices in a 33 MHz signaling environment. A key difference relates to the disparate natures of PCI and PCI X bus transactions which are described presently.

In PCI terminology a requester is a requesting device and a target is the device that responds to that request. The fundamental unit of information transfer is a transaction which is a combination of address data and bus turn around phases occurring between requester and target. A sequence is one or more transactions associated with carrying out a single logical transfer by a requester. A delayed transaction is a transaction in which one or more wait states are inserted by requester or target devices. The PCI X protocol does not implement delayed transactions.

Typically each conventional PCI transaction takes three overhead cycles and a variable number of data cycles to complete including a bus turn around cycle. The conventional PCI protocol implements an immediate protocol in which during the first clock cycle of the PCI transaction the requester propagates across the bus an address signal that all potential targets must immediately decode in order to decide which target is to respond with the actual target device responding to the requester by the next clock cycle. During subsequent cycles the data phase is executed with the requester constantly polling the target to determine whether the data phase has completed. If it has not then the requester or target inserts one or more wait states into the transaction to stall the bus until the transaction is completed which can slow bus throughput dramatically. Finally the bus turn around phase is executed and the PCI bus is released for another transaction.

Of the 30 ns PCI33 clock cycle time 7 ns are allocated during the first clock cycle for target device logic decoding which usually is sufficient to permit a response by the next rising clock edge. However for PCI66 designs having a clock cycle time of 15 ns target device logic decoding is reduced to 3 ns making a device or adapter using the conventional PCI66 protocol difficult to implement.

The performance improvements realized by the PCI X protocol are a result of two primary differences between conventional PCI and PCI X higher clock frequencies made possible by the register to register protocol and new protocol enhancements such as the attribute phase and split transactions. Under the registered PCI X protocol the target receives in a register the signal sent by the requester during the first clock cycle. Unlike with an immediate protocol the target is not required to respond to the requester until the rising edge of a subsequent clock cycle thus allowing the target an entire clock cycle to decode the requester signal and up to two clock cycles to respond.

Although the PCI X registered protocol reduces certain timing constraints PCI X transactions nominally take four overhead cycles to complete the address attribute target response and bus turn around phases. The attribute phase optimizes system performance by including such properties as the byte count bus number and device number as part of the transaction assists components optimize their performance during data transfers and facilitates interfacing the PCI X bus to packet based systems because the length of a transaction is communicated at the beginning of the transaction.

When a PCI X device does not have data to transfer it removes itself from the bus so that another device can use the bus bandwidth. A split transaction is a sequence in which an initial transaction is sent defining action to be taken by the target after which the bus is released until the target is ready to execute the transactions necessary to complete the sequence. By implementing split transactions the PCI X protocol advantageously eliminates the use of wait states except for initial target latency resulting in a more efficient use of bus and memory resources. Despite the clock cycle added to the basic PCI X transaction the actual time required to complete the transaction can be greatly reduced. For example a transaction that takes nine cycles at 33 MHz will finish in about 270 ns while a PCI X transaction that takes ten cycles at 133 MHz will finish in about 75 ns yielding a significant reduction in transaction time.

Due to the constraints imposed by the PCI immediate protocol many designs for 66 MHz devices are preferred to be implemented using PCI X66 protocol over the PCI66 protocol. However despite the advantages of using the PCI X protocol pragmatic operational considerations make designing PCI X133 devices quite difficult because stringent internal timing budgets must be strictly observed in order to operate at maximum throughput.

The relevant timing budget can be expressed by the equation where Tis the clock cycle time Tis the clock clk to output signal valid delay Tis the signal propagation time across the bus Tis the input setup time to CLK and Tis total clock tree skew time. For the most part PCI and especially PCI X designs are sensitive to critical path issues as manifested by T because Tis a function of the internal paths within a PCI PCI X device. For example a PCI device must meet a minimum Tvalue of 2.0 ns and a maximum value of 6 ns PCI66 or 11 ns PCI33 . By contrast for PCI X devices Tmust meet a minimum value of 0.7 ns and a maximum value of 3.8 ns.

Although it is desirable to provide a multiprotocol computer bus interface adapter that meets both PCI and PCI X requirements a suitable PCI PCI X adapter is constrained both by the minimum PCI Ttime 2.0 ns and the maximum PCI X Ttime 3.8 ns . An additional constraint can be imposed by the technology in which the PCI X device is realized particularly in modern deep submicron CMOS processes. PCI PCI X devices are specified to use a nominal main power supply voltage V of about 3.3V yet deep submicron devices often operate with a substantially lower V. For example a device fabricated under a 0.13 micron CMOS technology may employ a nominal Vof about 1.2V with 0.18 micron CMOS designs the nominal Vcan be limited to about 1.8V. Thus a device which gains the size speed and cost advantages of CMOS devices fabricated using deep submicron technology may need to employ voltage level shifting devices at the interface between the internal circuitry of the device with a nominal Vof for example 1.2V or 1.8V and the external circuitry which is exposed to the PCI PCI X signaling environment of 3.3V. Such voltage level shifting can add to critical path delays which may lead to violation of the maximum PCI X Ttime.

In addition to predictive time base generator as described with regard to and respectively the present invention also provides a multiprotocol computer bus interface adapter fabricated using deep submicron CMOS processes for example an 0.18 micron CMOS fabrication process which 1 satisfies the timing and voltage requirements of both the PCI and PCI X specifications 2 minimizes the impact on Ttime and 3 is robust to variations in design fabrication processes and environmental conditions.

In PTBG it is desired to employ a phase locked loop PLL as predictive synchronizer to create predictive clock signal which assists synchronizing the availability of valid data on data output path approximately at the moment when the preselected preferably rising edge of input clock signal arrives at input path . Alternatively the predictive synchronizer can be realized using a delay locked loop DLL . Both PLLs and DLLs are well known in the digital arts. PLL generates a clock signal responsive to delayed clock signal . As before replica delay components constituting replica delay element are interposed in feedback delay of PLL such that predictive clock signal is produced in a manner that substantially nullifies the predetermined clock delay produced by clock delay element and the predetermined data delay produced by data delay element . In PIA interface block as represented by a PCI X interface block makes data available on output path in advance of input clock signal arrival. The constituent components of PCI X interface block are well known and for the sake of clarity will not be described further the present invention contemplates embodiments both including and excluding PCI X block .

PIA can be a PCI PCI X target device substantially conforming to the PCI X local bus requirements and thus can have nearly two full clock cycles to respond to a requester s valid request. Therefore the required data is usually available for transfer in advance of input clock signal . However without PTBG input clock signal otherwise would be delayed by an amount equivalent to the delay induced by clock delay element i.e. level shifter and any other clock related delay presented to produce delayed clock signal . Delayed clock signal would then clock data latch after the predetermined clock delay and the data would then be valid at output path after the critical path delay associated with data delay element . Thus relative to the timing budget constraints of PCI PCI X protocols and the use of delayed clock signal may produce a value for Twhich exceeds or comes unacceptably close to maximum values for the clock to output signal valid delay i.e. T as defined in the relevant specification.

PTBG produces clock signal in a manner which predicts the arrival of the preselected e.g. rising edge of input clock signal so that data from PCI X block is clocked through data latch up shifted in voltage by voltage level shifter and available on PCI X  data out approximately at the moment the edge of input clock signal rises to a preselected value for example to V defined in the relevant PCI X specification to be nominally about 0.5 V . It also is desirable to clock oeb latch concurrently with data latch using predictive clock so that operation of the two latches is substantially simultaneous. Because the use of replica delay element in PTBG substantially nullifies the predetermined clock delay and the predetermined data delay such that the clock to output signal valid delay is approximately thereby substantially minimizing critical path delays induced by delay elements within PIA .

When CLK arrives signal A is seen to be delayed by an amount equivalent to t t. Signal B then corresponds to predictive clock signal arriving at data latch and oeb latch advanced by an amount of time approximately equivalent to t t t. It is assumed that PCI X block has valid data on data path by the arrival of the rising edge of signal . When clock signal i.e. signal B clocks output data latch output data on data path propagates through latch and arrives at path approximately at the time signal C rises. Thus signal C corresponds to signal B as delayed by latch delay t. Despite the latch delay signal C nevertheless is advanced in time relative to CLK by an amount approximately equivalent to the delay t arising from 1.8V to 3.3V voltage level shifter . Once the data signal propagates through shifter it becomes available as a valid DATA signal PCI X  data out after a delay approximately equivalent to the input path delay t plus the output path delay t or T CLK t t. Therefore the apparatus and method of the present invention substantially nullify the predetermined clock delay as represented by t and the predetermined data delay as represented by t t. If desired the delays arising from the input path t and the output path t also could be included into the replica delay such that T CLK i.e. the delays due to the PIA are essentially transparent to the PCI X bus.

Under the conventional PCI protocol it may not be desirable to use predictive clock signal from PTBG but instead use delayed clock signal . Indeed for PCI33 compatible operation the use of a PLL is generally discouraged because under the conventional PCI33 protocol 1 clock speeds are allowed to change on the fly and 2 frequencies are allowed to drop down to 0 zero MHz with either operation being generally incompatible with PLL operation. Also it may be unnecessary to employ PTBG for 66 MHz signals. After arrival signal CLK traverses input path as well as 3.3V to 1.8V voltage level shifter becoming delayed clock signal . Signal triggers PCI PCI X block to provide data under the PCI protocol using PCI data out data path . Delayed clock signal clocks the PCI data through data latch whose output due to the de assertion of PCI X select signal is selected by MUX for transfer to PCI X  data out via level shifter and data path due to PCI X select signal being unasserted.

Under the PCI X protocol particularly during PCI X133 operations PCI X select signal is asserted such that predictive clock signal clocks PCI X data out into data latch in advance of CLK . In this case the output of latch is selected by MUX for transfer as valid output data to PCI X  data out after traversing voltage level shifter and output path being available approximately at the time when CLK signal arrives as a rising edge signal. The ability to select between standard PCI and advanced PCI X thereby selectively employing PTBG to provide a predictive clock signal advantageously positions MCBIA as a multiprotocol computer bus interface adapter capable of operating under the PCI X protocol up to 133 MHz or under the PCI protocol down to zero MHz thus allowing computer bus interface adapters according to the present invention to be fully compatible with a vast array of devices bridges and boards already designed under long standing PCI protocol as well as those yet to be designed under the PCI X enhancement.

In addition it may be desirable to provide for example a PCI X Bridge block in place of PCI X block such that communication network is configured to be a second PCI PCI X bus. In such a case it might be desirable to implement a second PTBG not shown in communication with the appropriate I O and clock signals on bus with second PTBG not shown having suitable replica delays therein so that clock and data delays on signals from bus are substantially nullified thereby. Moreover a skilled artisan would realize that MCBIA including PTBG also can be adapted for use in other bus protocol applications where it is desired to compensate for delays which may be introduced by circuitry used to dispose an adapter similar to MCBIA for operations under multiple bus protocol timing voltage and operational requirements.

Aspects of such management functionality can be defined for example by the Alert Standard Format ASF specification protocol the System Management Bus SMBus specification protocol Advanced Configuration and Power Interface Specification ACPI protocol the Intelligent Platform Management Interface IPMI specification protocol and the Simple Network Management Protocol SNMP as well as pertinent documents related thereto. The ASF specification protocol is defined in detail in The Distributed Management Task Force specification 1.03 Jun. 20 2001 as amended . The SMBus protocol architecture and interface descriptions are defined in detail in the SBS Implementers Forum specification 2.0 Aug. 3 2000 as amended the PCISIG Forum document 2.2 Oct. 5 2000 and the 2.0 Jul. 27 2000. The IPMI protocol is defined in detail in 1.5 1.0 as amended developed by a consortium including Intel Corporation Hewlett Packard Company NEC Corporation and Dell Computer Corporation. Also the Simple Network Management Protocol SNMP is defined in detail for example in the IETF RFC documents 1157 J. D. Case M. Fedor M. L. Schoffstall C. Davin May 1 1990 2571 B. Wijnen D. Harrington R. Presuhn April 1999 2572 J. Case D. Harrington R. Presuhn B. Wijnen April 1999 and 2573 D. Levi P. Meyer B. Stewart April 1999 . Such exemplary IETF RFC documents may be found through the IETF RFC web page http www.ietf.org rfc.html. Each of the aforementioned documents are incorporated herein in their entirety.

Returning to in an embodiment of the present invention controller can provide high performance bidirectional intercommunication between computer bus and communication network . Controller can include triple speed 10 100 1000 Mbps IEEE 802.3 compliant physical layer transceiver coupled with triple speed 10 100 1000 Mbps IEEE 802.3 compliant media access controller MAC . MAC can be adapted to provide VLAN tagging Layer 2 priority coding link aggregation and full duplex control. Control unit can provide command monitoring and control functions utilizing status control and interface registers . Control unit also can include Alert Supervisory Bus Controller that can be an SMBus . interface controller compliant with and providing one or both of ASF and IPMI protocol related management functions thereby enabling efficient platform management within a communication system. The term platform management is used to refer to the monitoring and control functions that are built in to the platform hardware and primarily used for the purpose of monitoring the health of the system hardware. This typically includes monitoring elements such as system temperatures voltages fans power supplies bus errors system physical security etc. It includes automatic and manually driven recovery capabilities such as local or remote system resets and power on off operations. It includes the logging of abnormal or out of range conditions for later examination and alerting where the platform issues the alert without aid of run time software. Lastly it includes inventory information that can help identify a failed hardware unit.

Although the original purpose of the SMBus was to define the communication link between an intelligent battery a charger for the battery and a microcontroller that communicates with the rest of the system SMBus functionality can also be used to connect a wide variety of devices including power related devices system sensors inventory E EPROMS and communications devices as well as in mobile and desktop personal computers for low speed communication in the system. In general the SMBus protocol defines the message formats and transmission protocols for alerting and corrective action for various hardware products including add in cards sensors system servers operating systems management platforms and SMBIOS namely the SMB Internetwork Operating System which is a local interface to reach system management information .

Controller also can couple dual high speed on chip processors such as CPU and CPU with integrated on chip memory in addition to 64 bit 66 MHz 133 MHz PCI PCI X local bus interface . Local bus interface includes a predictive time base generator and which can be similar to predictive PCI X Interface Adapter in to MCBIA in and to MCBIA in .

CPU and CPU can serve as advanced packet classification engines providing data respectively transmitted to and received from network with custom frame processing features such as TCP Segmentation and can implement features such as multiple send and receive rings for Quality of Service QoS intelligent networking functions such as cable diagnostics and auto network detection. The operation of Controller can be represented by multiple finite state machines operating both serially and in parallel with CPUs and providing Controller can include a GMII Gigabit Media Independent Interface interface for example for 1000Base SX LX fiber applications. Controller also can be disposed advantageously with a myriad of interfaces including without limitation XGMII 10 Gigabit Media Independent Interface XAUI 10 Gigabit attachment unit interface XSBI 10 Gigabit serial bus interface SGMII Serial Gigabit Media Independent Interface RGMII Reduced Gigabit Media Independent Interface RTBI Reduced Ten Bit Interface as well as in TBI SMII and MII interfaces. Triple speed 10 100 and 1000 Mbps support with standards based auto negotiation allows server workstation and desktop computer manufacturers to build solutions that can transparently interface with Ethernet Fast Ethernet and Gigabit Ethernet technology over existing Category 5 cabling infrastructures.

The Alert Supervisory features of the present invention can support the Alert Standard Format ASF specification the Intelligent Platform Management Interface IPMI specification or a combination thereof. Alert Supervisory functionality in Alert Supervisory Bus Controller enables software management tools with alerting and remote control interfaces for proactively managing OS absent networked devices. OS absent is defined as a networked computer system in the states including no active OS inoperable OS or power system sleep state. Typically the ASF protocol uses bit based transmission protocols including SNMP and User Datagram Protocol to provide the desired intercommunication. ASF functionality can provide network administrators with a variety of different types of alerts to manage devices on the network for example an alert in response to failures of specific components within a networked device. ASF functionality also can include the Remote Management Control Protocol RMCP which allows a network administrator to respond to an alert remotely in many different ways powering on the system powering off the system or forcing a reboot for example either to the default boot device or to an alternate boot device such as a Pre Boot Execution Environment PXE server.

Furthermore Alert Supervisory Bus Controller can be adapted to implement Intelligent Platform Management Interface IPMD Specification to provide additional management functionality. IPMI allows autonomous monitoring and recovery features to be implemented directly in platform management hardware and firmware. In general IPMI makes inventory monitoring logging and recovery control functions available independently of the main processors BIOS and operating system. Platform management functions can also be made available when the system supported by bus is in a powered down state. IPMI functionality can support clients where there is no system management software available for the particular operating system or the end user elects not to load or enable the system management software. The term platform management can refer to the monitoring and control functions that may be built in to the platform hardware and used for the purpose of monitoring the health of the system hardware. This functionality can includes monitoring elements such as system temperatures voltages fans power supplies bus errors system physical security etc. It also can include automatically driven and manually driven recovery capabilities such as local or remote system resets and power on off operations as well as logging of abnormal or out of range conditions for later examination and alerting where the platform issues the alert without aid of run time software. Furthermore IPMI functionality can provide inventory information that can help identify a failed hardware unit.

IPMI and ASF are complementary specifications that can provide platform management in a pre boot or OS absent environment. In general IPMI is conceptualized to employ a management microcontroller as the main element of the management system whereas the ASF architecture generally uses an alert sending device to poll devices on the motherboard and autonomously generating alerts. According to the present invention Alert Supervisory Bus Controller is capable of implementing ASF functionality IPMI functionality and a combination thereof. Controller also can support the specification of SMBus interfaces to ASF Sensor Devices which can be polled by the alert sending device the specification of the RMCP packet format and the specification of SMBus based commands that can be used to send a push alert via an alert sending device. Additional IPMI capabilities can include event logging multiple users remote authentication multiple transports management extension busses sensor access etc.

Turning to it is desirable to provide alert supervisory bus controller employing TX CPU RX CPU or both and alert supervisory bus interface within integrated Gigabit Ethernet Controller . Similar to controller can be used to communicate alert and management data traffic including events between computer bus and network using internal bus in the context of managed communication system . Routine Ethernet network data traffic can be bidirectionally communicated under the coordination of control unit status control and interface registers clock circuitry and DMA control between network and bus by way of triple speed transceiver MAC bus and interface . On board buffer memory can be used to temporarily store packets traversing bus during communication and processing and to provide flow through queues which allow supervisory messages to be intercepted and executed. It is desirable for interface to include predictive time base generator for example as described relative to MCBIA in . Although dedicated hardware such as for example controller in could be used to provide alert and management functionality by adapting one or both of CPUs to analyze for and respond to the data traffic on bus the presence of alert and management signals and events to poll and receive messages from remote sensors and managed devices not shown and to bidirectionally convert alerts and management responses through alert supervisory bus interface significant additional flexibility in system design functionality and upgradability can be realized in controller . It is preferred that Alert Supervisory functionality as described with respect to also be integral to Alert Supervisory Bus Controller supporting the ASF specification the IPMI specification and a combination thereof.

According to the present invention the operation of transceiver MAC control unit registers Alert Supervisory Bus Controller buffer memory clock circuitry DMA controller and PCI PCI X Bus Interface can be represented in the abstract by a plurality of state machines. As defined herein a state machine can include a set of input events a set of output events a set of states one or more functions that each maps states and input to output and a function that maps states and inputs to states. Advantageously CPU CPU or a combination thereof can be used to monitor each of these state machines and provide detailed analyses of each state machine a feature which provides operational flexibility and intelligent processing of data on bus which data may include message and information conforming to multiple protocols. This permits the interception of for example alert supervisory states representative of alert supervisory messages embedded in a communication stream between network and bus and re mapping of that state e.g. the redirection of that alert supervisory message to a different data path for example through alert supervisory bus interface to alert supervisory bus instead of through PCI PCIX interface to computer bus . To this end it is desirable to include within Controller at least one rules checker that intercepts and analyzes the traffic on bus for alert supervisory related messages. The one or more rules checkers can operate with one or both of CPUs .

Further it is desirable to maintain sufficient power to Controller when Interface and associated circuitry are powered down that alerts received from bus and management messages sent to devices on bus continue to be processed and transmitted even if managed client served by computer bus and alert supervisory bus is in a low power state. Where both CPU and CPU are employed to process ASF IPMI messages it may be desirable but is not required to power down one of these CPUs to further reduce power consumption.

It is preferred that the present invention implement and facilitate system manageability using alerting functionality in networked systems such as system regardless of the state and types of operating system OS employed therein. Alerting functionality coupled with alert device can provide advance warning and system failure indication from managed clients such as managed client to remote management consoles such as remote monitor over a network such as network . The Alert Standard Format ASF specification defines a common alerting interface using a standardized low level technology that gives administrators remote access and control to managed system particularly when managed client is an OS absent state. The ASF and IPMI protocols employ the IPMI specified Platform Event Trap PET to format alerts for example from alert device which are sent by managed client over network to management console . The ASF and IPMI specifications interfaces are built upon standards based protocols such as SNMP and UDP which are lightweight bit based information carriers suitable for implementations in hardware and or firmware. Again instead of implementing ASF and IPMI functionality using dedicated hardware the invention herein gains additional flexibility and upgradability by implementing many features in firmware using one or more processors to provide the alert supervisory capability.

In order to allow interoperability between client and management console it is desirable that ASF IPMI aware client 1 transmits the alert messages produced by client 2 receives the remote maintenance requests from monitor console and transmits the associated responses by client 3 provides the data description of the system specific capabilities and characteristics of client and 4 provides the software used to configure or control client system in an OS present state. An additional level of interoperability can occur between a client system s alerting components such as alert device and remote monitor when the system firmware is used to communicate system capabilities and format the messages sent between the device client and remote monitor .

Once a system alert provides its warning or error report the next step in remote system manageability is to allow corrective action to be taken including enabling remote monitor to remotely reset and power on or power off client . When client is in an OS present state these actions can be provided for example by Common Information Model CIM interfaces that interact with client to provide orderly shutdown capabilities. The ASF enabled device such as device can provide similar functionality when client is in an OS absent state. CIM interfaces are defined in detail in the DTMF document 2.2 Jun. 14 1999 which is incorporated herein in its entirety.

It is desirable that the ASF IPMI aware features of the present invention be implemented in the context of a control bus for system related and power management related tasks such as the System Management Bus SMBus . An SMBus is a multiple attachment bus having two wire interface through which various system components can communicate with each other and with the rest of the system. The System Management Bus Specification refers to three types of devices slave master and host. A slave is a device that is receiving or responding to a command. A master is a device that issues commands generates the clocks and terminates the transfer. A host is a specialized master that provides the main interface to the system s CPU. A bus slave device can receive data provided by the master or it can provide data to the master. A device may be designed so that it is always a slave always a master or a combination thereof depending upon the particular circumstances. For example a system host is an example of a device that acts as a host most of the time but that includes some slave behavior. Multiple devices both bus masters and bus slaves may be connected to an SMBus segment. Typically one device will master the bus at a given time. Because more than one device may attempt to take control of the bus as a master SMBus provides an arbitration mechanism that can rely for example on the wired AND connection of all SMBus device interfaces to the SMBus. Generally a bus master device initiates a bus data transfer with a single bus slave providing clock signals associated with the transfer. Presently SMBus has substantially no routing capability with communication typically occurring between two nodes a master and a slave except where devices implement the Address Resolution Protocol as well as the Alert Response Address.

Under the SMBus protocol ASF IPMI aware alert device can provide for example manufacturer information model part number previous control state and present status error reports. Device also accept control parameters and return its status.

Continuing in it is generally desirable that controller be an ASF enabled controller supporting an ASF alerting function in device and an ASF remote management and control function in remote monitor . It also is desirable to provide ASF enabled controller with ASF Support modules which can include an ASF Host Configuration module ASF Controller Firmware and ASF Simulator . It further is desirable to provide ASF Remote Monitor Diagnostic Software in remote monitor . Controller can be a network interface card NIC LAN on motherboard LoM device or other alerting network controller intervening between managed client and remote monitor . Indeed where the term NIC is used it will be understood that the associated principles can be used in the context of a LoM or other alerting network controller.

ASF Host Configuration module can be used to configure ASF operation on host system in an OS present situation and can include interoperable modules such as ASF Configuration Application ASF Daemon module and Pass through kernel mode driver module . To make application modules readily accessible by end users it is desirable to provide a graphical user interface GUI which is supported by common operating systems such as for example Windows related and Unix related operating systems using application programming interfaces API 

ASF Configuration Application permits end users to configure ASF related parameters which can include without limitation 1 RMCP enable disable 2 alerting PET enable disable 3 enable disable automatic ARP 4 sensor selection and masking 5 identification of remote console e.g. remote IP Address identification local EP address configuration 6 heartbeat message configuration NIC SMBus slave address configuration 7 OEM or IPMD customizations 8 OS present behavior and 9 NIC Driver heartbeat.

For sensor selection and masking it is desirable that ASF Configuration Application provide information about sensors that have been detected in the system such as device and allow the user to mask off alerts that would have otherwise been generated from those sensors. Heartbeat message configuration can include message enable disable time interval and the like. For address configurations of alert devices such as device it is desirable to permit selection between dynamic and fixed addresses and if fixed configuration of the fixed address. Included in the configured OS present behavior can be enable disable RMCP and or PET while the network driver loads. In addition the NIC Driver heartbeat can be used by ASF firmware to detect the health of the OS and NIC Driver software causing a PET to be generated if either becomes disabled.

It also is desirable that ASF Configuration Application retrieve data represented in the ASF Table and SMBIOS structures via an ACPI mechanism where an ASF capable system and its supporting SMBIOS are available or from a predetermined data file which can be an ASCII text file in the absence of such a system. The predetermined data file can be stored in EEPROM and can contain descriptions of the system and devices to be simulated such as system s UUID GUID sensor device address device type and their capabilities. The contents of the ASF Table and SMBIOS structures as well as the applicable ACPI mechanism are described in detail in the applicable aforementioned ASF SMBus and ACPI specifications respectively as would be well known to a skilled artisan.

It also may be desirable to integrate selected User Diagnostic functions with ASF Configuration Application to detect and diagnose problems such as SMBus interface faults non ASF supporting NICs and erroneous or misconfigured remote console IP address. It further is desirable to provide support for unattended installation so that ASF Configuration Application can be operated without user interaction with the GUI screen.

ASF Daemon module communicates with ASF Firmware via Shared Memory for example to detect an IP address change of local client and to pass the new local IP address to ASF Firmware . ASF Daemon module can run as a background task when it is loaded by the OS regardless of whether NIC driver is loaded. Host Interface Pass Through Driver module is a kernel mode driver that provides ASF Daemon module access to the NIC hardware including Shared Memory . Pass Through Driver module can be loaded when ASF Daemon is invoked and unloaded when ASF Daemon is terminated.

Ethernet Port Driver module can be used to handle multiple ASF functions including interacting with network . Module can parse and construct ASF packets and thus it is desirable for Ethernet Port Driver module to have awareness of OSI Layers 2 4. Ethernet Port Driver module can handle the reception of packets parse incoming packet stream to look for RMCP or ARP packets and transmit packets including PET RMCP and ARP reply packets. It is desirable that the Alerting Protocol Handler APH include a Platform Event Trap PET frame assembler to build SNMP Trap PDU frames based on a message coming from the aforementioned SMBus module. It is desirable that the APH has an understanding of ASN.1 BER. The APH also can be disposed to manage Sensor Poll timers ensuring that sensors are polled at the proper times manage PET packet transmission and re transmission and facilitate the transmission of heart beat packets.

In order to operate in an OS absent environment ASF firmware can be used to interface to SMBus and also to send receive ASF management packets RMCP and or PET via network . ASF firmware can advantageously include Host interface Network ARP Handler Alerting Protocol Handler Remote Management and Control Protocol RMCP Platform Event Trap PET Handler Bit Bang software module and SMBus Interface .

Host Interface can be configured to send and receive RMCP packets peek and poke at stored ASF data structures and registers accept commands from a host diagnostic to control initiate ASF functions and allow the simulation of ASF events. It is desirable that Host Interface Module of controller expose a portion of its memory i.e. Shared Memory such that it can be accessed from both firmware of controller and the CPU of managed client . ASF Firmware uses Shared Memory interface to communicate with both ASF Daemon module and NIC Device Driver . In cooperation with ASF Daemon module ASF Firmware receives IP address update request via Shared Memory of Host Interface and updates the new IP address in EEPROM . In addition the new IP addresses are propagated to all relevant firmware modules such as ARP ICMP PING RMCP and PET. It is preferred that this update take effect immediately without requiring system reboot or re running of ASF Host Configuration module . In one embodiment of the present invention ASF Firmware can receive two events from the NIC device driver Halt ASF and NIC Driver started . When ASF Firmware receives the Halt ASF request event it will purge all data transfer activities on network SMBus and Shared Memory and put client into an idle state. Accompanying the Halt ASF request can be a boot option parameter which can be used by the bootstrap loader of controller to decide whether or not the next boot should boot from ASF firmware or from another memory location. When ASF Firmware receives the NIC Driver started notification event it propagates this event to relevant firmware modules such as ARP and ICMP PING so these operations can be disabled or bypassed while in the OS present environment to avoid handling conflicts between the OS and ASF Firmware .

In order for the RMCP protocol to function in an OS absent state ARP Handler enables controller via client to respond to network Address Resolution Protocol ARP requests from the local router. If controller was not capable of responding to ARPs on its own then a router might not be able to forward an RMCP packet to the ASF enabled client because the router would not know the Ethernet MAC address of managed client . Therefore ASF firmware can possess within ARP Handler the intelligence to detect network ARP requests and automatically generate an ARP response without any intervention from host based system software. Network ARP Handler also can provide a rules checker to identify network ARPs respond to ARPs if configured and provide a Module Interface to SMBus module . Remote Management and Control Protocol RMCP Handler manages the RMCP protocol transactions within Firmware . Handler can be disposed to provide a controller rules checker used to identify RMCP packets to parse incoming RMCP packets and identify the response needed for specific RMCP messages to process RMCP ACKing and to respond to RMCP messages for example pong response capabilities response and pass control packet to SMBus entity. Also RMCP Handler can include a RMCP frame assembler to build PDU content for RMCP messages and may have an IPMI OEM custom message handler which decodes RMCP IPMI packets and responds in the correct manner and which drives IPMI custom messages across SMBus .

SMBus Interface is that portion of ASF firmware which interfaces to and communicates with SMBus and can include Initialization module SMBus Driver and Protocol Handler as well as a Module Interface . Initialization module can be used to initialize hardware to allow dynamic assignment of the Alerting Network Controller SMBus address to read EEPROM content to learn about SMBus devices and legacy polling devices in system and to discover ASF sensors in system . SMBus Driver and Protocol Handler can be responsible for driving SMBus interface of integrated controller and for bidirectionally translating sent and received messages between the ASF SMBus message level and the SMBus byte level. SMBus Handler can poll sensors such as device on SMBus receive SMBus push messages for example from device perform error checking for SMBus and handle SMBus ARP. In conjunction with Interface Bit Bang module can perform the SMBus bit bang. Finally the Module Interface can be employed to generate messages to be sent to and handle messages received from other modules such as for example PET and RMCP.

In certain embodiments of the present invention it is desirable to include ASF Simulator in order to permit controller to perform ASF related functions without the presence of a working ASF capable system platform. Furthermore it also is desirable to provide an ASF SMBus Sensor and Device Emulator that can drive another SMBus entity in system to emulate a SMBus sensor or microcontroller. Advantageously SMBus interface can be used as a SMBus Sensor Emulator to simulate the function and the behavior of for example Legacy Sensor Devices ASF Sensor Devices and ASF Remote Control Devices.

ASF Simulator can simulate sending SMBus messages to and receiving messages from the controller . It is desirable to provide Simulation GUI Application which can allow an end user to enable disable which device to simulate to change a sensor device s state sensor value or both and to observe Remote Control Action and return appropriate responses. It also is desirable that ASF Simulator be capable of emulating sensor firmware by providing for example and without limitation the ability to 1 push SMBus alert messages with or without retransmission to the controller 2 emulate a legacy sensor and respond to a SMBus legacy sensor poll from the controller 3 emulate an ASF sensor and respond to a SMBus alert poll from the controller 4 send Get Boot Option SMBus messages to the controller 5 send Device Type Poll SMBus messages controller 6 send start stop watchdog timer messages to controller 7 receive and display Remote Control Action SMBus messages from controller and 8 receive and display Boot Options Response SMBus messages from controller .

Furthermore it may be desirable to include with ASF Simulation Application ASF Remote Monitor Diagnostic ARM D Software to emulate a remote console and could be used to send RMCP traffic to the Controller . ARM D Software can be used to test and verify that ASF enabled controller can send and receive ASF messages correctly over Ethernet medium network coupled therewith as well as to display the contents of incoming RMCP or PET messages. ARM D software can provide the ability 1 to generate any form of RMCP packet that could be sent to a NIC LoM or controller in a manner easily selectable by an end user 2 to capture and display the contents of RMCP packets received from the NIC and 3 to verify that the controller properly handles out of order or malformed RMCP packets and optionally to parse and display incoming PET packets.

Turning to alert management system can include managed client communicating with remote management console across network . Managed client is disposed with alerting controller which can be for example a network interface card LAN on Motherboard integrated circuit or other device suitable for facilitating networked communications between a remote console and a client. Transceiver can be coupled with Controller on Controller to receive and transmit data over network . In order to convert these communications between a protocol suitable for network and one or more protocols suitable for use with managed client it is desirable to use multiprotocol controller . Controller is desired to be a multiprotocol computer bus interface adapter similar to MCBIA in but which is adapted to provide SMBus functionality as described for example relative to and in addition to PCI PCI X bus functionality as described relative to . Therefore in addition to communicating with the computer system of managed client multiprotocol controller also can communicate with alert devices which can be for example sensors. In the embodiments where multiprotocol controller employs the ASF and SMBus protocols to communicate with the alerting devices of managed client one or more of devices can be ASF enabled devices or sensors such as sensors or a legacy device or sensor such as sensor . Network system and alert device parameters can be stored in memory device which is desired be an EEPROM flash EPROM or other non volatile memory device.

During operations of managed client for example during an OS absent state sensor can detect a state to which remote monitor should be alerted. In this case sensor transmits alerting information as a PET to MCBIA which forms packets into an RMCP message to be received by Remote Monitor . In response to the received alerting information or according to other criteria Monitor can communicate a message in the form of one or more data packets formed according to the RMCP protocol across network to managed client . PHY receives the RMCP message converts it to the proper medium protocol and passes the message to MCBIA . MCBIA can parse incoming RMCP packets and then take the appropriate action including RMCP management operations such as a presence pong to Monitor . For remote control commands such as reset and power up power down MCBIA passes the parsed command over SMBus to remote control function device effecting the desired function on managed client . In addition MCBIA can be enabled to communicate with system firmware of managed client for example to configure boot options and the like.

In certain embodiments of the present invention network controller or MCBIA can be realized in a single chip VLSI implementation for example an 0.18 micron CMOS VLSI implementation which can be particularly advantageous for application of these embodiments to Gigabit Ethernet Network Interface cards and LAN on Motherboard LoM systems. One product embodying aspects of the present invention in a VLSI implementation may include for example a Gigabit Ethernet Integrated PCI X Controller.

Many alterations and modifications may be made by those having ordinary skill in the art without departing from the spirit and scope of the invention. Therefore it must be understood that the illustrated embodiments have been set forth only for the purposes of example and that it should not be taken as limiting the invention as defined by the following claims. The following claims are therefore to be read to include not only the combination of elements which are literally set forth but all equivalent elements for performing substantially the same function in substantially the same way to obtain substantially the same result. The claims are thus to be understood to include what is specifically illustrated and described above what is conceptually equivalent and also what incorporates the essential idea of the invention.

