---

title: Shared library in a printing system
abstract: Provided are a method, system and article of manufacture wherein device configuration information is stored in a shared library. An application programming interface is provided to allow a plurality of page description language interpreters to access the device configuration information stored in the shared library. At least one of the plurality of page description language interpreters accesses the device configuration information stored in the shared library by calling the application programming interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07894084&OS=07894084&RS=07894084
owner: InfoPrint Solutions Company, LLC.
number: 07894084
owner_city: Boulder
owner_country: US
publication_date: 20060428
---
The disclosure relates to a method system and article of manufacture for a shared library in a printing system.

A page definition language PDL interpreter may be provided with two forms of input a PDL stream and device control configuration information. The PDL stream may include PDL commands and the device control configuration information may include the configuration values associated with a printer. For example the device control configuration information may include the paper attributes supported by a printer and the PDL stream may include instructions that when executed by the PDL interpreter generate the output that is to be printed on a page.

Exemplary PDL interpreters include a POSTSCRIPT interpreter a Printer Control Language PCL interpreter a Printer Job Language PJL interpreter etc. In a multi PDL print job i.e. a print job that includes more than one type of PDL some of the PDL commands when interpreted by one PDL interpreter can change the desired behavior of another PDL interpreter. For example PJL statements that precede POSTSCRIPT statements in a print job can change the size of the output page. Certain printing systems allow such changes to be incorporated in the printing system by arranging for each interpreter to know of the existence of the other interpreters in the printing system and by allowing the interpreters to directly interface with each other. POSTSCRIPT is a trademark or a registered trademark of ADOBE SYSTEMS INCORPORATED. PCL is a trademark or a registered trademark of HEWLETT PACKARD DEVELOPMENT COMPANY L.P.

Provided are a method system and article of manufacture wherein device configuration information is stored in a shared library. An application programming interface is provided to allow a plurality of page description language interpreters to access the device configuration information stored in the shared library. At least one of the plurality of page description language interpreters accesses the device configuration information stored in the shared library by calling the application programming interface.

In certain additional embodiments all hardware specific computations for device control are performed in the shared library.

In further embodiments a new page description language interpreter is added without changing the shared library wherein the new page description language interpreter also accesses the device configuration information stored in the shared library by calling the application programming interface.

In yet additional embodiments the plurality of page description language interpreters comprise a first page description language interpreter and a second page language description interpreter and wherein code implementing the first page description language interpreter does not directly interface with code implementing the second page language interpreter.

In further embodiments the device configuration information is for a printing device wherein the shared library further stores job processing information wherein all inputs for a page setting for printing on the printing device are allowed to be stored in the shared library wherein changes to the page setting are made via calls initiated from a wrapper that encloses the at least one of the plurality of page description language interpreters and wherein page attributes are dynamically determined in the shared library.

In the following description reference is made to the accompanying drawings which form a part hereof and which illustrate several embodiments. It is understood that other embodiments may be utilized and structural and operational changes may be made.

The computational device may comprise any suitable computational device including those presently known in the art such as personal computers workstations mainframes midrange computers network appliances palm top computers telephony devices blade computers laptop computers etc. The network may be any network known in the art such as a Local Area Network LAN Wide Area Network WAN the Internet an Intranet etc.

The shared library includes functions that may be implemented such that the functions can be called via Application Programming Interfaces API from wrappers surrounding each PDL interpreter . . . where the PDL interpreters . . . may include POSTSCRIPT PJL PCL or any other interpreter that may be used for printing on the printing device . For example functions may be implemented in the domain of PDL configuration. In certain embodiments the shared library may include functions to keep track of the page numbers in a print job and communicate with a job monitor. The functions may include a set of tools to resolve information about the physical setup of the printing device user configurable settings PJL commands data stream commands etc. The shared library may also include routines to prompt the user via an operator interface to change the print engine configuration to allow a particular job to print. The shared library may comprise any suitable library that includes executable code.

In certain embodiments illustrated in code included in the wrappers surrounding the PDL interpreters . . . call the shared library via the API s . The functions implemented in the shared library are used to compute and provide device control and configuration information to the PDL interpreters . . .

The API may define a software interface for allowing communication between the PDL interpreters . . . and the functions implemented in the shared library . In certain embodiments existing PDL interpreters that may have been designed for printing systems that do not have the shared library may be augmented with code implemented in wrappers where the wrappers may be used by existing PDL interpreters to communicate with the functions implemented in the shared library .

Control starts at block where a shared library is stored in a computational device . In certain embodiments the shared library is stored in the computational device by installing code from a computer readable media e.g. a CDROM or by installing code downloaded to the computational device over a network. A plurality of PDL interpreters . . . are installed at block in the computational device .

Control proceeds to block where a document such as a print job having one or more types of PDL statements is loaded into the memory of the computational device for execution. A print job interpreter may parse the PDL statements of the print job one by one and determine at block the type of the PDL statements. If the print job interpreter determines that a PDL statement belongs to a first type of PDL then control proceeds to block where a first PDL interpreter that can interpret the PDL statements of the first type is called. For example if the PDL statements are POSTSCRIPT statements then a POSTSCRIPT interpreter may be called.

The first PDL interpreter interprets the PDL statements and calls at block the shared library via the API to access or update the device control and configuration information by using the functions provided in the shared library . A determination at block is made as to whether there are more PDL statements to be interpreted. If so then control returns to block and the next PDL statements are interpreted.

If the print job interpreter determines at block the type of PDL statements to be interpreted belong to a second type of PDL statements then control proceeds to block where a second PDL interpreter that can interpret the PDL statements of the second type are called. For example if the PDL statements are PCL statements then a PCL interpreter may be called. The second PDL interpreter interprets the PDL statements and calls at block the shared library via the API to access or update the device control and configuration information by using the functions provided in the shared library . A determination at block is made as to whether there are more PDL statements to be interpreted. If so then control returns to block and the next PDL statements are interpreted.

If at block a determination is made that there are no more PDL statements to interpret then the process waits for the next print job to arrive at block .

Therefore illustrates certain embodiments in which device control and configuration information are accessed by a plurality of PDL interpreters . . . via a shared library . The shared library includes functions that compute the device control and configuration information and provide the information to a PDL interpreter that requests the information.

A print job is shown to comprise a sequence of PJL statements followed by a sequence of POSTSCRIPT statements . The PJL statements may include commands that request the page size for printing to be set to legal size whereas the POSTSCRIPT statements may include commands that request the page size for printing to be set to letter size.

Control starts at block where a PJL interpreter interprets the PJL statements and calls the shared library with a request to set the page size to legal. The shared library receives the call from the PJL interpreter and uses at least one of the functions to set the page size to legal. The shared library may indicate to the PJL interpreter that the page size has been set to legal as requested by the PJL interpreter.

Control continues to block where the POSTSCRIPT interpreter interprets the POSTSCRIPT statements and calls the shared library with a request to set the page size to letter. Since the shared library has already set the page size to legal the shared library determines by using one or more functions whether the page size for the print job should continue to follow the page size of legal that has been set on the basis of the PJL statements or whether the page size should be changed to the page size of letter that has been requested on the basis of the POSTSCRIPT statements .

The page size for printing on the printing device is set at block according to the page size returned by the shared library to the POSTSCRIPT interpreter.

Therefore illustrates certain embodiments in which the shared library determines device control and configuration parameters taking into consideration requests received from one or more PDL interpreters.

Control starts at block where device configuration information is stored in a shared library . In certain embodiments all hardware specific computations for device control are performed in the shared library .

An application programming interface is provided at block to allow a plurality of page description language interpreters . . . to access the device configuration information stored in the shared library . In certain embodiments the storing of the device configuration information may be achieved by computing the device configuration information by functions implemented in the shared library .

At least one of the plurality of page description language interpreters . . . accesses at block the device configuration information stored in the shared library by calling the application programming interface .

A new page description language interpreter may be added at block without changing the shared library wherein the new page description language interpreter also accesses the device configuration information stored in the shared library by calling the application programming interface.

In certain embodiments the plurality of page description language interpreters . . . comprise a first page description language interpreter and a second page language description interpreter and wherein code implementing the first page description language interpreter does not directly interface with code implementing the second page language interpreter. Instead both the first and the second page description language interpreters use the shared library for updating and securing device control and configuration information for printing on the printing device .

In certain embodiments all inputs for a page setting are stored in the shared library wherein no changes to the page setting are made outside of the shared library and wherein page attributes are dynamically determined in the shared library .

In certain embodiments illustrated in printer hardware specific device control calculations are isolated in one code location. Therefore processing time is reduced in comparison situations in which a plurality of components handle configuration device control information. For example in a POSTSCRIPT page orientation there are many inputs to determine orientation paper size JDF PJL POSTSCRIPT and printer console settings. Built into a page may be screenings that are not valid if a page is rotated 90 degrees or degrees after the page has been created. Rotating a page 180 degrees after construction can impact system performance. Certain embodiments allows all inputs for orientation to be considered in a central location such as the shared library .

Certain embodiments provide a printing system with no data stream dependencies and allows for isolation of individual PDL interpreters addition and removal of PDL interpreters and computation of device control and configuration information via functions provided by a shared library . Certain embodiments allow interpreters to enter and exit the printing system dynamically on demand. New interpreters can be added with an interface to the shared library and the new interpreters do not have to know of the existence of the other interpreters in the system.

In certain embodiments a prompting for user input may occur if the shared library cannot resolve the media characteristics requested by a PDL interpreter with the media characteristics found in the printing device . In response to the prompting for user input a user may provide input to the shared library to resolve the media characteristics.

Certain embodiments implement a printing system in which each PDL interpreter is a stand alone and independent process. Moreover each PDL interpreter can be activated or deactivated based on the demand for a particular PDL on a given printer model. Since PDL libraries provided by a plurality of vendors may be used each PDL interpreter may include a wrapper such that a common Application Programming Interface is used to interface with a shared library that can compute device control and configuration information for printers . The PDL interpreters . . . may operate as isolated processes but receive device control and configuration information from the shared library .

Certain embodiments provide a shared library with an API to be used by all the PDL interpreters . . . in the printing system to access device control and configuration information. As a result individual PDL interpreters do not need to know of the existence of other PDL interpreters and the impact of one PDL interpreter on another. Certain embodiments reuse common configuration device control code and the API is established in a way such that new PDL interpreters can be easily added or removed from the printing system.

In certain embodiments printer hardware specific device control calculations are isolated in one code location. Therefore processing time is reduced in comparison to having multiple components handle configuration device control information. For example there may be many inputs to determine a page s orientation paper size PJL POSTSCRIPT and printer console settings. Certain embodiments allow all inputs for orientation to be considered in a central location such as the shared library .

The described techniques may be implemented as a method apparatus or article of manufacture involving software firmware micro code hardware and or any combination thereof. The term article of manufacture as used herein refers to code or logic implemented in a medium where such medium may comprise hardware logic e.g. an integrated circuit chip Programmable Gate Array PGA Application Specific Integrated Circuit ASIC etc. or a computer readable medium such as magnetic storage medium e.g. hard disk drives floppy disks tape etc. optical storage CD ROMs optical disks etc. volatile and non volatile memory devices e.g. Electrically Erasable Programmable Read Only Memory EEPROM Read Only Memory ROM Programmable Read Only Memory PROM Random Access Memory RAM Dynamic Random Access Memory DRAM Static Random Access Memory SRAM flash firmware programmable logic etc. . Code in the computer readable medium is accessed and executed by a processor. The medium in which the code or logic is encoded may also comprise transmission signals propagating through space or a transmission media such as an optical fiber copper wire etc. The transmission signal in which the code or logic is encoded may further comprise a wireless signal satellite transmission radio waves infrared signals Bluetooth etc. The transmission signal in which the code or logic is encoded is capable of being transmitted by a transmitting station and received by a receiving station where the code or logic encoded in the transmission signal may be decoded and stored in hardware or a computer readable medium at the receiving and transmitting stations or devices. Additionally the article of manufacture may comprise a combination of hardware and software components in which the code is embodied processed and executed. Of course those skilled in the art will recognize that many modifications may be made without departing from the scope of embodiments and that the article of manufacture may comprise any information bearing medium. For example the article of manufacture comprises a storage medium having stored therein instructions that when executed by a machine results in operations being performed.

Certain embodiments can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore certain embodiments can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

The terms certain embodiments an embodiment embodiment embodiments the embodiment the embodiments one or more embodiments some embodiments and one embodiment mean one or more but not all embodiments unless expressly specified otherwise. The terms including comprising having and variations thereof mean including but not limited to unless expressly specified otherwise. The enumerated listing of items does not imply that any or all of the items are mutually exclusive unless expressly specified otherwise. The terms a an and the mean one or more unless expressly specified otherwise.

Devices that are in communication with each other need not be in continuous communication with each other unless expressly specified otherwise. In addition devices that are in communication with each other may communicate directly or indirectly through one or more intermediaries. Additionally a description of an embodiment with several components in communication with each other does not imply that all such components are required. On the contrary a variety of optional components are described to illustrate the wide variety of possible embodiments.

Further although process steps method steps algorithms or the like may be described in a sequential order such processes methods and algorithms may be configured to work in alternate orders. In other words any sequence or order of steps that may be described does not necessarily indicate a requirement that the steps be performed in that order. The steps of processes described herein may be performed in any order practical. Further some steps may be performed simultaneously in parallel or concurrently.

When a single device or article is described herein it will be apparent that more than one device article whether or not they cooperate may be used in place of a single device article. Similarly where more than one device or article is described herein whether or not they cooperate it will be apparent that a single device article may be used in place of the more than one device or article. The functionality and or the features of a device may be alternatively embodied by one or more other devices which are not explicitly described as having such functionality features. Thus other embodiments need not include the device itself.

Certain embodiments may be directed to a method for deploying computing instruction by a person or automated processing integrating computer readable code into a computing system wherein the code in combination with the computing system is enabled to perform the operations of the described embodiments.

At least certain of the operations illustrated in may be performed in parallel as well as sequentially. In alternative embodiments certain of the operations may be performed in a different order modified or removed.

Furthermore many of the software and hardware components have been described in separate modules for purposes of illustration. Such components may be integrated into a fewer number of components or divided into a larger number of components. Additionally certain operations described as performed by a specific component may be performed by other components.

The data structures and components shown or referred to in are described as having specific types of information. In alternative embodiments the data structures and components may be structured differently and have fewer more or different fields or different functions than those shown or referred to in the figures. Therefore the foregoing description of the embodiments has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the embodiments to the precise form disclosed. Many modifications and variations are possible in light of the above teaching.

