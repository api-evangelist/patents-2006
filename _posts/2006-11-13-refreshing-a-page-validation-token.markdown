---

title: Refreshing a page validation token
abstract: Methods and computer-readable media are provided for refreshing a page validation token. In response to a request for a form from a client, a server responds with the requested form, a page validation token, and a page token refresh program. The client executes the page token refresh program in response to a request to post the contents of the form to the server computer. The page token refresh program determines whether a preset period of time has elapsed since server computer generated the page validation token. If the period of time has not elapsed, the form is posted to the server with the page validation token and processed by the server computer. If the page timeout has elapsed, the page token refresh program refreshes the page validation token prior to posting the form by requesting an updated page validation token from the server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08424073&OS=08424073&RS=08424073
owner: Microsoft Corporation
number: 08424073
owner_city: Redmond
owner_country: US
publication_date: 20061113
---
This application is related to U.S. patent application Ser. No. 10 440 375 now U.S. Pat. No. 7 500 099 filed on May 16 2003 and entitled Method for Mitigating Web Based One Click Attacks which is expressly incorporated herein by reference in its entirety.

A form on a World Wide Web Web page mimics the usage of paper forms by allowing a user to enter data that is sent to a server for processing. For instance a form may be utilized to enter name and address information on an e commerce Web site. In order to use such a form a user typically utilizes a computer mouse or other pointing device to place an insertion point into the fields of the form. Then with a keyboard or other text input device the user inputs text data into the form fields. Often a button or other object will be displayed that the user actuates to post the inputted form data to the computer hosting the Web site.

Because of the stateless nature of most Web servers a client computer can send form data to a Web server without having previously requested the form. For instance if form data is posted to a Web server in a format that the server expects the server will accept the data without first having sent the corresponding form. Because the server does not keep track of what it previously sent to each client computer the Web server will accept the posted form data even though it had not previously transmitted the form to the sending client. This is referred to as cross site posting.

An attacker with malicious intent can exploit cross site posting to trick a user into unknowingly posting information to a Web site. For example an attacker may induce a user to actuate a hypertext link such as by sending an e mail to the user that includes the link. By actuating the link a user may unknowingly cause a script to be executed that posts data to a Web site. These attacks are often referred to as Cross Site Request Forgery CSRF attacks because they only require an authorized user to click on a hyperlink in order to post the embedded command to a Web server. By clicking the hyperlink the user is unknowingly posting information to the Web server.

Some safeguards are available to prevent CSRF attacks. For example one type of safeguard causes a Web server to refuse to accept form data posted after a predetermined period of time has elapsed since the form page was transmitted from the server. This type of safeguard however can be frustrating to users in several scenarios. For instance if a user takes too long to fill out a form the form will expire and the server will reject the form when it is finally posted. This can be especially frustrating for users if inputted form data is lost as the result of an expired form page.

Methods and computer readable media are provided herein for refreshing a page validation token. Utilizing a page validation token as described herein Web forms may be provided in a manner that minimizes the ability of malicious users to perform CSRF attacks while at the same time eliminating the inadvertent expiration of forms for non malicious users.

According to one aspect presented herein a server computer is operative to receive and process requests for information pages that include forms. In response to a request for a form from a client computer the server computer generates a page validation token. The page validation token includes data that allows the web server to later determine the time at which the form page was provided to the requesting client. Once the page validation token has been generated the server responds to the request with the requested form the page validation token and a page token refresh program.

When the client computer receives the response the form is displayed for editing. The client computer executes the page token refresh program in response to a request to post the contents of the form to the server computer. The page token refresh program determines whether a preset period of time called the page timeout has elapsed since the server computer generated the page validation token. If the page timeout has not elapsed the form is posted to the server with the page validation token and processed by the server computer in the manner described below. If however the page timeout has elapsed the page token refresh program refreshes the page validation token by requesting an updated page validation token from the server computer.

In response to the request for an updated page validation token the server attempts to validate the request. If the request cannot be validated the server will not provide an updated page validation token. If the request can be validated the server generates an updated page validation token and returns the token to the client computer in response to the request. The server computer may expose a remote application programming interface API through which the client computer may request the updated page validation token.

In response to receiving the updated page validation token the page token refresh program replaces the previous page validation token with the updated token. The client computer then posts the form data to the server computer along with the page validation token. When the server computer receives the post the server computer regenerates the page validation token and compares the received page validation token with the regenerated page validation token. If the tokens are not identical the server computer rejects the form data and an error is returned to the client computer.

If the server computer determines that the received page validation token and the regenerated page validation token are identical the server then determines whether the form has expired. The form has expired if a second preset period of time called the validation timeout has elapsed between the time the page validation token was originally generated by the server computer and the time at which the token was received back from the client computer with the post request. According to aspects the page timeout is shorter than the validation timeout. According to other aspects the page timeout may be calculated as a percentage of the validation timeout.

If the server computer determines that the form page validation token has expired the request to post the form data is rejected and an error message may be returned to the client computer. If the form page validation token has not expired however the server computer accepts the request to post the form. The server computer may also return a success message to the client computer. According to other aspects the client computer may expose an API through which applications executing on the client computer can obtain a page validation token from the server computer.

The above described subject matter may also be implemented as a computer controlled apparatus a computer process a computing system or as an article of manufacture such as a computer readable medium. These and various other features will be apparent from a reading of the following Detailed Description and a review of the associated drawings.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

The following detailed description is directed to systems methods and computer readable media for refreshing a page validation token. While the subject matter described herein is presented in the general context of program modules that execute in conjunction with the execution of an operating system and application programs on a computer system those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules.

Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the subject matter described herein may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

The subject matter described herein is also described as being practiced in a distributed computing environment where tasks are performed by remote processing devices that are linked through a communications network and wherein program modules may be located in both local and remote memory storage devices. It should be appreciated however that the implementations described herein may also be utilized in conjunction with stand alone computer systems and other types of computing devices. It should also be appreciated that although reference is made herein to the Internet the embodiments presented herein may be utilized with any type of local area network LAN or wide area network WAN .

In the following detailed description references are made to the accompanying drawings that form a part hereof and which are shown by way of illustration specific embodiments or examples. Referring now to the drawings in which like numerals represent like elements through the several figures aspects of a computing system and methodology for updated a page validation token will be described. In particular is a network diagram illustrating aspects of an illustrative operative environment for the subject matter described herein that includes a client computer a network and a server computer .

As shown in the client computer and the server computer are communicatively coupled to one another through respective connections to the network . According to one implementation the network comprises the Internet. However it should be appreciated that the network may comprise a LAN WAN or other type of suitable network for connecting the client computer and the server computer .

According to one implementation the client computer also includes a Web browser program referred to herein as a browser . The browser is operative to request receive and display information pages such as Web pages from the server computer . In particular the browser is operative to establish a connection with a Web server application executing on the server computer . Through the connection the browser may request an information page that includes a form from the server computer . A form on a Web page mimics the usage of paper forms by allowing a user to enter data that is sent to a server for processing. It should be appreciated that other types of Web pages allow a user to perform other types of actions that are also sent to the server for processing in a similar manner. In addition to form pages the embodiments presented herein are applicable to these types of Web pages.

When displayed by the browser the form may include a number of fillable data fields. A user may fill the forms by entering alphanumeric text into the form data fields. When the user has completed data entry into the form the user may request that the form be posted back to the server computer . In response to such a request the browser sends a post request to the Web server application . If the post is accepted by the Web server application the server computer processes the data entered into the form data fields. Posts received from other types of non form Web pages are processed in a similar manner.

As will be described in greater detail below according to one aspect provided herein the server computer is operative to generate a page validation token in response to a request for a form . The page validation token includes data that allows the server to authenticate the token and to later determine the time at which the form was provided to the client computer .

According to one implementation the page validation token is created by generating a hash value using predefined information such as the user credentials corresponding to a user of the client computer and the current time at the time the page validation token is generated. A one way hash algorithm may be utilized to generate the page validation token . As known to those skilled in the art a one way hash algorithm is a cryptographic hash function that takes a string as input and produces a fixed length string as output sometimes termed a message digest. It is very difficult to obtain the original input string from the fixed length output string. Any suitable one way hash function may be utilized to create the page validation token .

In response to the request from the client computer for the form the server computer returns the form the page validation token the time value used to generate the page validation token and a page token refresh program . In one implementation the page validation token time value and page token refresh program are provided as hidden fields within the form although these items may be provided in another manner.

As discussed in greater detail herein the page token refresh program is executed by the client computer in response to receiving a request to post form data to the server computer . Such a request may come from a user for instance or from a programmatic element on the information page containing the form . According to one implementation the page token refresh program is written utilizing the JAVASCRIPT programming language. Other suitable programming languages may also be utilized.

When executed the page token refresh program is operative to determine whether a predefined period of time called the page timeout has elapsed since the server computer generated the page validation token . This is determined by computing the elapsed time between the current time and the time the page validation token was generated as specified in the time value provided by the server computer with the form . If the calculated amount of time does not exceed the page timeout then the client computer posts the form to the server computer along with the page validation token and the time value originally provided by the server . The server computer then processes the post request in the manner described below. If the calculated amount of time exceeds the page timeout however then it becomes necessary for the page token refresh program to obtain a new page validation token from the server computer .

In order to obtain an updated page validation token the page token refresh program executing on the client computer makes a remote procedure call to the get updated page validation token API . According to one implementation the API comprises a simple object access protocol SOAP function which when called will return an updated page validation token to the caller. The updated page validation token is generated in the manner described above for generating the original page validation token . Once the server computer has generated the updated page validation token the updated token is returned to the client computer along with data indicating the time the updated token was generated.

When the page token refresh program receives the updated page validation token it replaces the previous page validation token with the updated page validation token. In this manner the client computer only maintains the most recent page validation token . The page token refresh program then transmits a post request to the Web server application that includes the form data the page validation token and the time value provided by the server in response to the request for the form .

In response to receiving the post request the server regenerates the page validation token using the same predefined information along with the time value received with the post request. The server then compares the page validation token received with the post request to the regenerated page validation token. If the two tokens are identical the server continues processing the post request in the manner described below. If the two tokens are not identical the post request is rejected and an error message may be provided to the client computer .

If the server determines that the two tokens are identical the server then determines whether the form has expired. The form has expired if a second preset period of time called the server timeout has elapsed between the time the page validation token was originally generated by the server computer and the time at which the token was received back from the client computer with the post request. The elapsed time is computed using the current time along with the time value received from the client computer with the post request.

If the server computer determines that the form has expired the post request is rejected and an error message may be provided to the client computer . If however the server determines that the form has not expired the posted form data is processed by the server and a success response is generated and transmitted to the client computer .

According to implementations the page timeout may be set to a value that is less than the validation timeout to avoid a race condition. For instance the page timeout may be set as 20 minutes while the validation timeout is set to 30 minutes. The page timeout may also be set as a percentage of the validation timeout. As an example the page timeout may be set to 80 percent of the validation timeout.

According to other implementations the client computer may further include a get page validation token API . Through a call to the API an application program can retrieve a page validation token from the server computer . Using such a page validation token the application program can provide properly formatted and authorized responses to the server computer . In this regard it should be appreciated that although the various embodiments are presented herein in the context of a Web browser communicating with the Web server application the embodiments presented herein are not limited to the use of a Web browser . Other types of application programs may utilize and update a page validation token in the manner described herein. Additional details regarding these processes are provided below with respect to and .

Referring now to additional details will be provided regarding the embodiments presented herein for refreshing a page validation token. In particular are flow diagrams illustrating the operation of the client computer and the server computer according to one implementation. The routine illustrates processing operations performed by the client computer while the routine illustrates processing operations performed by the server computer . The routines and will be described in conjunction with one another.

It should be appreciated that the logical operations described herein are implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance requirements of the computing system. Accordingly the logical operations described herein are referred to variously as operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination.

The routine begins at operation where the client computer transmits a request to the server computer for an information page that includes the form . In one implementation the request comprises a hypertext transfer protocol HTTP GET request. The server computer fields the request at operation of the routine . In response to receiving the GET request the routine continues from operation to operation where the server computer generates the page validation token in the manner described above with respect to .

From operation the routine continues to operation where the server computer inserts the page validation token into a hidden field on the form . As described above with respect to the page validation token may be provided to the client computer in a manner other than by inserting the token into a hidden field on the form . From operation the routine continues to operation where the page token refresh program is also inserted into the form . At operation a response is provided to the GET request that includes the requested form the page validation token and the page token refresh program .

At operation of the routine the client computer receives the response to the GET request. In response thereto the browser displays the form and allows a user to edit the form fields at operation . At operation the client computer determines whether a request has been made to post the contents of the form to the server computer . For instance such a request may occur in response to a user selecting an object for posting the form contents or in response to a program object requesting a post of the form. If a request to post the form is not detected the routine branches back to operation for editing the form.

If at operation the client computer detects a request to post the form the routine continues to operation where the page token refresh program is executed. As will be described in greater detail below the page token refresh program is operative to request and receive an updated page validation token if too much time has passed since the receipt of the previous page validation token . Additional details regarding the operation of the page token refresh program will be provided below with respect to .

From operation the routine continues to operation where the form data is posted to the server computer . The post includes the form the page validation token and the time value received with the page validation token. In one implementation this data is posted to the server computer through the use of an HTTP POST command. The server computer receives the request to post the form at operation of the routine .

From operation the routine continues to operation where the server computer determines whether the request to post the form included a page validation token . If the post request did not include a token the routine branches to operation where an error response is generated and transmitted to the client computer in response to the post request. The client computer receives and displays the response at operation of the routine .

If at operation the server computer determines that the post request did include a page validation token the routine continues to operation . At operation the server computer regenerates the page validation token using the one way hash algorithm in the manner described above with respect to . Once the page validation token has been regenerated the routine continues to operation where the server computer determines whether the regenerated page validation token is identical to the page validation token received from the client computer with the post request. If the tokens are not identical the routine branches to operation where an error response is generated and transmitted to the client computer in the manner described above.

If at operation the server computer determines that the regenerated page validation token is identical to the page validation token received from the client computer with the post request then the routine continues from operation to operation . At operation the server computer determines whether the form has expired. As described above with reference to the form is considered to have expired if the validation timeout period has elapsed between the time the page validation token was originally generated by the server computer and the time at which the token was received back from the client computer with the post request. If the form has expired the routine branches from operation to operation where an error response is generated and transmitted to the client computer in the manner described above.

If at operation the server computer determines that the form has not expired the routine continues to operation . At operation the server computer processes the received form data. The routine then continues to operation where a success response is generated by the server computer transmitted to the client computer and displayed by the client computer at operation of the routine . The routines and end at operations and respectively.

Turning now to an illustrative routine will be described that illustrates the operation of the page token refresh program in one implementation. The routine begins at operation where the page token refresh program determines whether the page validation token stored at the client computer should be updated. In particular as discussed above with respect to the page token refresh program determines whether the page timeout period has elapsed since the server computer generated the page validation token . This is determined by computing the elapsed time between the current time and the time the page validation token was generated as specified in the time value provided by the server computer with the form .

From operation the routine continues to operation where a determination is made as to whether the page validation token should be updated. If not the routine branches to operation where it returns to operation described above. If the page validation token does need to be updated the routine continues from operation to operation .

At operation the page token refresh program makes a remote procedure call to the get updated page validation token API . The updated page validation token is generated in the manner described above and returned to the client computer along with data indicating the time the updated token was generated at operation . At operation the page token refresh program replaces the previous page validation token with the updated page validation token. In this manner the client computer only maintains the most recent page validation token . From operation the routine returns to operation described above with reference to where the form and updated page validation token are posted to the server computer .

Referring now to an illustrative computer architecture for a computer utilized in the various embodiments presented herein will be discussed. The computer architecture shown in illustrates a conventional desktop laptop computer or server computer. The computer architecture shown in includes a central processing unit CPU a system memory including a random access memory RAM and a read only memory ROM and a system bus that couples the memory to the CPU . A basic input output system containing the basic routines that help to transfer information between elements within the computer such as during startup is stored in the ROM . The computer further includes a mass storage device for storing an operating system application programs and other program modules which will be described in greater detail below.

The mass storage device is connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer readable media provide non volatile storage for the computer . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer readable media can be any available media that can be accessed by the computer .

By way of example and not limitation computer readable media may include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer readable media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer .

According to various embodiments the computer may operate in a networked environment using logical connections to remote computers through a network such as the Internet. The computer may connect to the network through a network interface unit connected to the bus . It should be appreciated that the network interface unit may also be utilized to connect to other types of networks and remote computer systems. The computer may also include an input output controller for receiving and processing input from a number of other devices including a keyboard mouse or electronic stylus not shown in . Similarly an input output controller may provide output to a display screen a printer or other type of output device also not shown in .

As mentioned briefly above a number of program modules and data files may be stored in the mass storage device and RAM of the computer including an operating system suitable for controlling the operation of a networked desktop or server computer such as the WINDOWS XP operating system from MICROSOFT CORPORATION of Redmond Wash. or the WINDOWS VISTA operating system also from MICROSOFT CORPORATION. The mass storage device and RAM may also store one or more program modules. In particular the mass storage device and the RAM may store a Web browser program a Web server application and the other program modules described above with respect to . Other program modules may also be stored in the mass storage device and utilized by the computer .

It should be appreciated that although the implementations presented herein have been described in the context of a form being posted by a browser the data sent to the server may not necessarily come from a Web page that displays a form. A POST request may be sent to a server computer for a variety of other reasons. For instance in one implementation a Web page includes Web parts. Web parts are tiles of information on a Web page. A user may use an input device to drag and drop the Web parts to move them around on screen. Web parts may also display a close user interface control which when selected will temporarily or permanently close the Web part. When a user performs one of these actions on a Web part the Web page sends a POST request to the server to refresh the Web page carry out the user actions and to store the actions for future display of the Web page. In such a scenario it may be desirable to utilize a page validation token in the manner described herein to ensure that the Web page does not timeout. It should be appreciated therefore that the embodiments presented herein may be utilized with any type of POST request being transmitted to a server that may benefit from the use of a page validation token as described herein.

Based on the foregoing it should be appreciated that systems methods and computer readable media for refreshing a page validation token are provided herein. Although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

