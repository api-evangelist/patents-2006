---

title: Importing and exporting markup language data in a spreadsheet application document
abstract: Extensible markup language data in an extensible markup language (such as XML) is associated with a schema file for defining data types and data type definitions for applying data to the document. A map is prepared that relates that any extensible markup data applied to the document back to corresponding elements or attributes defined in the associated schema file. When the document is imported into a spreadsheet application grid, the data map is parsed to find XPATHs which determine the location, data types and user data for each cell or list object in the document related to the schema file. The cells and lists are populated with the extensible markup data and user data, and rendered according to formatting dictated by the extensible markup data applied to the document. The document may be exported such that the extensible markup data is maintained for subsequent import and use.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07640493&OS=07640493&RS=07640493
owner: Microsoft Corporation
number: 07640493
owner_city: Redmond
owner_country: US
publication_date: 20060123
---
This patent application is a continuation of U.S. patent application Ser. No. 10 377 145 entitled IMPORTING AND EXPORTING MARKUP LANGUAGE DATA IN A SPREADSHEET DOCUMENT filed on Feb. 28 2003 now U.S. Pat. No. 7 017 112 and assigned to the same assignee as this application. The aforementioned patent application is expressly incorporated herein by reference.

The present invention relates generally to importing markup language data to and exporting markup language data from a spreadsheet document. More particularly the present invention relates to importing an eXtensible Markup Language file into a spreadsheet document and to exporting an eXtensible Markup Language document from a spreadsheet document.

Computer software applications allow users to create a variety of documents for use in work education and leisure. For example a spreadsheet application allows users to store manipulate print and display a variety of alphanumeric data. A word processing application allows users to create letters articles books memoranda and the like. Such applications have a number of well known strengths including rich editing formatting and calculation.

To keep up with demands for more advanced functionality for such computer software applications software developers have begun to use structured data formats including markup languages such as eXtensible Markup Language XML to allow users to annotate a software application document to give the document a useful structure apart from the normal functionality of the software application responsible for creating the document or the visible formatting associated with the document. For example the user may wish to create using her spreadsheet application a template document for preparation of a purchase order to be used in her company s sales department. By applying structure to the document purchasers or other institutions or persons receiving the document may make use of the structure by processing the document to utilize data defined by the document structure.

Some software applications such as word processing applications allow users to annotate a document with XML elements so that the user may define certain data types and data definitions for data inserted into the document. A resume document for example may include an experience section in which the user will include present and past work experience. Using XML the user may desire to markup the experience section of the document to define that certain allowable information in a prescribed order and in a prescribed number may be included in the experience section of the document. For example the user may wish to markup the experience section of the document to allow four present or past experience items.

Unfortunately prior art spreadsheet applications allow very limited use of XML data. Bulk XML data may be imported where the user points to an XML file and the spreadsheet application imports that file into the spreadsheet grid. But the user gets no control over how the data is laid out or which data is imported because all of the data is imported. Under prior spreadsheet applications manual coding of XML data to a spreadsheet application may be required in which a programmer writes their own custom code for handling import and or export of XML data. This code may be in the form of an XSLT transformation file or it may be a more traditional programming language like VBA or C . Such custom programming is time consuming expensive and is difficult to apply generally to spreadsheet documents.

Prior spreadsheet applications do not establish a relationship between the XML data and the spreadsheet grid. A relationship between the XML data and the grid allows the user to have a custom view of the XML data. For example if a user only wants elements and to show up in the grid and to skip elements and that preference needs to be stored somewhere. Furthermore if the user wants element to be displayed first and show up in column A followed by elements and in columns B and C that preference needs to be stored as well. If the user wants the data to begin appearing in row rather than at the top of the grid sheet that preference will need to be stored as well. Because prior spreadsheet applications allow no custom control over how the data is imported and displayed there is nothing for the spreadsheet application to remember about the data. Accordingly no relationship between the spreadsheet and the XML data is established.

Accordingly there is a need in the art for methods and systems that allow users to import and or export XML data to and from spreadsheet grids. There is further a need for methods and systems for that allow spreadsheet documents to exchange data with other XML enabled applications whether or not the other applications understand the programming or functionality of the spreadsheet application. There is further a need for methods and systems that allow users to build custom spreadsheet application views of XML data so that they may readily view analyze edit and produce XML data. There is further a need for methods and systems that allow programmers to write programs that interact directly with XML data in a spreadsheet grid using an XML context.

Embodiments of the present invention provide methods and systems for importing markup language formatted data into a spreadsheet document and for exporting markup language formatted data from a spreadsheet document. More particularly embodiments of the present invention solve the above and other problems by providing methods and systems for importing eXtensible Markup Language XML data and associated user data if available into a spreadsheet document and for exporting XML data and associated user data if available from a spreadsheet document.

According to one aspect of the invention an XML document or XML data is associated with an XML schema file defining XML data types and data type definitions for applying XML data to the spreadsheet document. An XML data map is prepared that relates a spreadsheet grid to the schema file. Generally the map is the relationship between the grid and the XML schema. Element goes in cell B for instance. The map contains an XPATH that points to element and the XPATH is paired with a grid reference. The mapping is essentially a collection of pairings where for each pairing a given XML element or attribute referenced by an XPATH corresponds to a given location in the grid.

When the XML document is subsequently imported into a spreadsheet application grid the XML map is selected for determining the relationships between XML data applied to the spreadsheet application document and the XML schema file associated with the document. The XML data map is parsed to find XPATHs in the imported spreadsheet document pointing in the document to an associated schema file. Each XPATH is executed to determine the location data types and user data for each cell or list object in the document that is related back to the associated schema file. The cells and lists are populated with associated XML data in locations in the grid where the XML data is mapped and according to the rules element names syntax etc. of the associated schema file. That is the grid is populated with XML data and the data lands in the proper cells lists and columns according to the relationships between the spreadsheet grid and schema as specified in the XML data map.

According to another aspect of the invention after an imported XML document has been edited the data in that document may be exported as XML data. Similarly a mapped spreadsheet document can be used as a blank template. The user opens the spreadsheet document template enters data into the mapped regions and then exports the data as XML data. In either case the exported XML data may be processed by any other XML enabled application for example another desktop application a backend database a spreadsheet document that has been mapped to the same schema and the like.

Prior to exporting the edited or created document an XML data map relating XML data in the document to associated elements or attributes of a selected XML schema file is selected. The XML data map is iterated to find the location of each cell or list object in the document that contains XML data and to locate an XPATH in each of such cell or list object for pointing the XML data associated with the cell or list object back to associated XML elements or attributes in the selected XML schema file. Each XML element or attribute applied to the document and located by parsing the XML data map is applied to a generalized instance structure of the selected XML schema file to create a hierarchically structured instance structure of the XML data applied to the document. The data for cells or list objects located in the document by parsing the XML data map are extracted and are arranged hierarchically according to the generalized instance structure. The hierarchical arrangement of the XML data and associated user data is written to memory or is exported for other subsequent uses.

These and other features and advantages which characterize the present invention will be apparent from the reading the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention as claimed.

The following description of embodiments of the present invention is made with reference to the above described drawings where in like numerals refer to like parts or components throughout the several figures. The present invention is directed to methods and systems for importing markup language formatted data into a spreadsheet document and for exporting the markup language formatted from a spreadsheet document.

Referring now to a simplified block diagram illustrating importing markup language formatted data into a spreadsheet document and illustrating exporting markup language formatted data from a spreadsheet document is described. According to embodiments of the present invention a preferred markup language for use in accordance with the present invention is the eXtensible Markup Language XML . In one embodiment the present invention is incorporated into the OFFICE suite of application programs that is manufactured and marketed by MICROSOFT CORPORATION of Redmond Wash. A suitable spreadsheet application for use in accordance with the present invention is the EXCEL spreadsheet application manufactured and marketed by MICROSOFT CORPORATION of Redmond Wash.

Referring to an embodiment of the present invention provides a spreadsheet application the ability to natively understand custom markup language data such as XML data. For example if an XML data file contains quarterly financial results prepared according to an XML schema file for example an XSD file embodiments of the present invention allow that XML data to be imported into a spreadsheet document or template with a single import function such as clicking an import button provided by the spreadsheet application . Accordingly the imported data will land in the spreadsheet document or template in the appropriate cells and columns of the spreadsheet grid as specified by the designer creator of the template or document. That is if the user imports an XML document having two elements for date and amount data associated with company sales an embodiment of the present invention will cause the data from the two elements to import into a position in the target grid in the same positions as specified by the map.

As described above a user may import XML data into a spreadsheet grid and edit that data for subsequent export. Or a user may start with a blank mapped grid for example a grid that has XML data mapped to it but no other data and enter data to the blank mapped grid for subsequent export. However if a user adds new data for example a new column of data to the spreadsheet grid that data must be mapped to the XML schema file in order for XML data entered for the new column to be included in the exported XML data.

With reference to an exemplary system for implementing the invention includes a conventional personal computer including a processing unit a system memory and a system bus that couples the system memory to the processing unit . The system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within the personal computer such as during start up is stored in ROM . The personal computer further includes a hard disk drive a magnetic disk drive e.g. to read from or write to a removable disk and an optical disk drive e.g. for reading a CD ROM disk or to read from or write to other optical media. The hard disk drive magnetic disk drive and optical disk drive are connected to the system bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The drives and their associated computer readable media provide non volatile storage for the personal computer . Although the description of computer readable media above refers to a hard disk a removable magnetic disk and a CD ROM disk it should be appreciated by those skilled in the art that other types of media which are readable by a computer such as magnetic cassettes flash memory cards digital video disks Bernoulli cartridges and the like may also be used in the exemplary operating environment.

A number of program modules may be stored in the drives and RAM including an operating system and one or more application programs such as a spreadsheet application program a word processor program or other type of program module. Other program modules illustrated in include an XML processing module a document object model DOM parser and a simple application programming interface for XML SAX parser . According to an embodiment of the invention the XML module is used by the spreadsheet application for processing data formatted according to the eXtensible Markup Language. A suitable XML processing module is MSXML manufactured and marketed by Microsoft Corporation of Redmond Wash.

A user may enter commands and information into the personal computer through a keyboard and pointing device such as a mouse . Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a serial port interface that is coupled to the system bus but may be connected by other interfaces such as a game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video adapter . In addition to the monitor personal computers typically include other peripheral output devices not shown such as speakers or printers.

The personal computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a server a router a peer device or other common network node and typically includes many or all of the elements described relative to the personal computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the personal computer is connected to the LAN through a network interface . When used in a WAN networking environment the personal computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external is connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the personal computer or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

In order to provide the document with a set of grammatical and data type rules governing the types and structure of data that may be included in a given document an XML schema is attached to or associated with the document for providing the rules governing each of the XML elements and tags with which the user may annotate the given document. For example a purchase order document may have an attached or associated schema such as purchaseorder schema.xsd for providing the allowable set of XML elements such as a element element element and so on. The schema includes the rules governing the order with which those elements may be applied to the document and specific rules associated with individual elements applied to the document. For example a schema attached or associated with the purchase order document may prescribe that data associated with a given element for example a element must include a day element followed by a month element followed by a year element. Additionally the schema may require that a element must immediately precede a element for example.

As is understood by those skilled in the art developers of XML schemas determine the names of XML elements and the associated data types and data structures allowed for those elements. Then all users of documents annotated with XML structure according to a given schema may utilize the data contained within the XML structure without regard to the overall type and structure of the document. For example if a purchase order document described above is transmitted to a purchaser of the goods the purchaser may develop software applications for parsing the document to locate specific types of data within the document for use by the purchaser. The purchaser may for example only wish to print serial numbers and associated prices for certain goods. Using the schema attached to the document the purchaser will know that the data associated with the XML elements have been prepared according to the schema governing the document. Accordingly the purchaser may develop a software application or an eXtensible Stylesheet Language Transformation XSLT file for locating the element and for extracting the data associated therewith for insertion into the purchaser s own documents.

Following with this example a number of different purchasers may subscribe to the same schema for dictating the rules associated with the purchase order document so that each purchaser may then receive the purchase order document from the author of the document and use the data contained in the purchase order according to the XML elements structuring the data. That is a first purchaser may only be interested in the data contained within the element while a second purchaser may be interested in extracting only the data contained in a element. Each purchaser may extract the data it desires without regard to other aspects or elements of the document by using their own software applications or XSLT transformation files for locating the desired data according to the XML structure. This is made possible by the fact that each user of the document follows the data type and data structure rules prescribed in the schema attached to or associated with the document.

As understood by those familiar with the eXtensible Markup Language XML namespaces provide a method for qualifying elements and attribute names used in XML documents by associating those elements and attribute names with nainespaces identified by uniform resources identifier URI references. An XML namespace is a collection of names identified by a URI reference which are used in XML documents as element types and attribute names. A single XML document may contain elements and attributes that are defined for and used by multiple software modules. For example in accordance with an embodiment of the present invention a single XML document such as a spreadsheet document may contain elements and attributes defined and used by different software modules. For example a spreadsheet document may have elements and attributes defined for and used by a spreadsheet application XML processing module or the document may contain elements and attributes defined for and used by or associated with one or more schema files associated with the document. For example elements and attributes may be associated with the spreadsheet document to associate the document with a schema file associated with a purchase order resume document a legal document and the like. Accordingly an individual document such as an exemplary spreadsheet document may have a namespace identifying the element types and attribute names associated with each of the different software modules that may consume or use data from the document. A set of standard XML data types has been defined by the World Wide Web consortium W3C the disclosure of which is incorporated here and by reference.

In order to import an XML data file to a spreadsheet document and in order to export an XML data file from a spreadsheet document the spreadsheet application remembers the relationships between cells and list objects in the spreadsheet application grid and corresponding elements or attributes of an associated XML schema file defining the structure blueprint of XML data documents corresponding to that schema file. In order to remember the relationship between the cells and or list objects and elements or attributes of the associated XML schema file cells and or list objects are mapped to associated elements or attributes in the schema file. For example if a cell is supposed to receive data when an XML data file is imported that cell is referred to as a mapped cell as opposed to an unmapped cell that may receive data entered by a user but that does not receive data associated with an XML schema file attached to or associated with the imported XML data file. In order to map a cell or list object with an associated element or attribute of the XML schema file markers known as XPATHs are stored in the spreadsheet document to point a given cell or list object to a corresponding element or attribute in an associated XML schema file. Use of and operation of XPATHs are defined by the World Wide Web consortium.

Accordingly the mapping is a collection of XPATH markers that define a relationship between the spreadsheet application grid and a particular XML schema file where the XPATH is a pointer back to the associated schema file. For example if cell B has an XPATH marker that points to the element in an associated XML schema file the relationship between cell B and the element of the associated schema file is maintained when an XML data file containing the relationship between cell B and the associated schema file is imported to a spreadsheet document via a spreadsheet application . For example if the imported XML data file includes a element with value 2 Jan. 2003 and the map in the spreadsheet document specifies that cell B of the document is related to the element by an XPATH referencing the element then cell B will contain 2 Jan. 2003 once the import is finished. For a further description of mapping data in a document to an associated schema file see U.S. Patent Application Pub. No. 2004 0172616 entitled Markup Language Visual Mapping filed on Feb. 28 2003 and assigned to the same assignee as the present application which is incorporated herein by reference as if fully set out herein.

According to an embodiment of the present invention dragging a given element or attribute from the tree view to the grid allows the user to annotate a target location in the grid with markup language for example XML structure associated with the dragged and dropped element or attribute. For example referring to the element is dragged from the tree view structure to a target location Cell D in the grid . Data associated with that target location for example 2001 01 01 illustrated in is shown in the target spreadsheet Cell D. Once the selected element or attribute is dragged from the tree view structure and is dropped onto a target location in the spreadsheet grid an XPATH marker is written to the target location to point the target location back to the XML schema element or attribute to which the target location is now associated.

The mapping of the XML elements or attributes to target locations in the spreadsheet grid as described above is advantageous because it allows the spreadsheet application to interact with other applications that are not compatible with or otherwise do not speak the same language of the spreadsheet. If the spreadsheet application imports XML data from a financial accounting system for example the accounting system does not have to know the data is being consumed by a spreadsheet application on the other end so long as the spreadsheet application can understand the XML data in question via an XML data mapping . Likewise if the spreadsheet application exports data back to that accounting system the accounting system does not have to know the data is coming from the spreadsheet application so long as the data conforms to an XML schema that the accounting system understands. If the consumer wishes to extract the date from the spreadsheet grid the consuming application may make use of the mapping between the element of the marked up of language schema file to the grid location D to readily locate data associated with the date for extracting the data or otherwise utilizing the data. That is in accordance with embodiments of the present invention the annotation of the spreadsheet grid with markup language structure and association of that structure with a markup language schema file for defining data associated with the structure is maintained in the grid document for subsequent use and consumption by other consuming spreadsheet applications or other types of application capable of consuming and using the markup language data now associated with the spreadsheet application grid .

In order to import and utilize XML data of the imported file the file must have been associated with an XML schema file and the XML schema must have been mapped to the spreadsheet grid. At step the spreadsheet application identifies the XML data mapping that corresponds to the incoming XML data file. The matching XML data map corresponding to the XML data is found by matching the root name and namespace of the XML data with that of the XML schema file associated with all the maps in the spreadsheet document. If more than one XML data mapping is available for the imported document the user is queried via a user interface to select one of the multiple available mappings. For example if the imported XML document contains XML data for quarterly sales figures a first XML mapping may have been prepared as described with reference to using an XML schema file that defines the XML data where only the aggregate sales for each quarter are mapped to the spreadsheet document to give a summary report. A second XML mapping may have been created in the same spreadsheet document where a different set of elements and attributes from the XML schema may have been mapped to give a detailed report of the sales data.

At step the XML data mapping is parsed so that each element or attribute mapped to the grid is located. For instance the first list object or single mapped cell is found which has a mapping that corresponds to the XML map being imported. If a single mapped cell is found the XPATH associated with it is obtained. This XPATH is passed to a flattening module that parses the XML data by loading it into a document object model DOM parser that in turn fetches the data that corresponds to the XPATH. If a list object is found all the XPATHs associated with the columns of the list are collected. The collection of XPATHs are passed to the flattening module which uses the DOM and the schema associated with the XML data map to determine the layout of the resulting data. The flattening module returns the data in a flat data structure that can be populated in the spreadsheet document. As is known to those skilled in the art DOM parsers are tree based parsers that load an entire XML file into memory and SAX parsers are event based parsers capable of reading XML nodes elements and or attributes sequentially one at a time. According to document object models a document is presented as a logical structure rather than as a collection of tagged words. The document object model is a means of defining a document as a tree like hierarchy of nodes in which the document is an object containing other objects such as images and forms. An example of a DOM parser is MSXML DOM provided by Microsoft Corporation of Redmond Wash. For a detailed description of a suitable flattening module see U.S. Patent Application Pub. No. 20040172590 entitled Method and System for Converting a Schema Based Hierarchical Data Structure into a Flat Data Structure filed on Feb. 28 2003 and assigned to the same assignee of the present application which is incorporated herein by reference as if fully set out herein.

At step once all XPATHs marked in the imported data file are obtained by the DOM parser the XPATHs are passed to the XML processing module for executing the XPATHs. At step the XML processing module executes each XPATH one by one against the XML data file to locate all cells and list object ranges and for finding associated XML elements or attributes applied to those cells and list object list ranges from the associated XML schema file.

At step after each XPATH located in the XML data mapping for the imported document is executed to obtain the cell or list object list range locations for the XML data and the user data and for relating back to the associated schema file for associated XML schema definitions a layout for the grid of the spreadsheet worksheet associated with the imported data file is determined by the spreadsheet application in conjunction with the XML processing module . At step the cells and list object list ranges of the grids are populated with associated XML data.

According to an embodiment of the present invention when the data is populated in the spreadsheet grid for use by the user the data is converted from a hierarchical data structure associated with the data mapping into a flattened structure for rendering a presentation in the spreadsheet application grid. For a detailed description of a methods and systems for converting the hierarchically structured data into a flattened data structure for presentation to the user in the spreadsheet grid see U.S. Patent Application Pub. No. 20040172590 entitled Method and System for Converting a Schema Based Hierarchical Data Structure into a Flat Data Structure filed on Feb. 28 2003 and assigned to the same assignee of the present application which is incorporated herein by reference as if fully set out herein. As should be understood after the data obtained from the flattening module is properly formatted and populated into the spreadsheet cells or lists the process continues again until all data for all the cells and lists associated to the XML mapping are imported into the spreadsheet grid. The method ends at step .

Referring to after a user has imported XML data to the spreadsheet application grid for editing as described with reference to or after the user has created a new XML document and mapped an associated schema file to that document the user may export the XML document along with XML markup XML data and XML data mapping for subsequent use. According to embodiments of the present invention the user may also export an XML document where XML structure is associated via a schema XSD to a spreadsheet having pre existing data. Advantageously upon export all relationships created between cell and list object locations in the spreadsheet application grid and the associated schema file are maintained for subsequent use by any other XML enabled application. Referring to a method for exporting XML data from a spreadsheet document according to an embodiment of the present invention is described. The method begins at start step and proceeds to step where an XML data file is selected for exporting. As briefly described above the XML data file may be a data file previously imported as described with reference to or the data file may be a new file created by the user who now desires to export the data file. According to an embodiment of the invention the user may be prompted for a name of a file that will be created and to which the XML document will be written. If the named file already exists the user may be prompted as to whether to overwrite the file or to choose a different file name.

At step an XML data mapping defining the relationship between XML data in the document to be exported and an associated schema file is selected. The XML data mapping selected for the export of the data may be the mapping used for importing the data as described above with reference to . Alternatively if the data file to be exported is being created by the user an XML data mapping between the document grid and an associated schema file may be created as described above with reference to . At step a determination is made as to whether more than one XML data mapping is present. If there is more than one the user is prompted to specify which mapping to export. As described above with reference to the document previously imported by the user or being created by the user may have more than one mapping associated with an XML schema file. If more than one XML data mapping is present the method proceeds to step and the user is queried via a user interface for a selection of one of multiple data mappings. Once a mapping is selected the method proceeds to step and the XML data mapping is obtained for use in preparing the data for exporting.

At step the XML data mapping is matched to a generalized instance structure created for the associated schema file as described above with reference to . As described above the generalized instance structure is a tree like hierarchical representation of an XML hierarchical data structure where all available elements and or attributes of an associated schema file are applied to the document. That is the instance structure represents a potential hierarchical data structure of a document having all potential elements and or attributes of an associated schema file applied to the document. At step the selected XML data mapping is matched to a corresponding generalized instance structure. For example if the XML data mapping was prepared in association with a purchase order schema file at step that XML data mapping is matched to a corresponding generalized instance structure prepared for the purchase order schema file.

At step the XML data mapping s generalized instance structure is passed to the XML processing module . The XML export module iterates the grid s data to extract references to the data associated to the mapping specified by the user. The references are stored in the generalized instance structure. According to an embodiment of the present invention the XML processing module walks through the XML data mapping node by node for the document to be exported to find the location of and content of XML data applied to the document. Advantageously iteration of the map to find data associated with the spreadsheet document allows the XML export module to associate data contained in the spreadsheet document with corresponding XML structure in the generalized instance structure so that the location and hierarchical order of the data may be determined for the eventual export of the data for subsequent use.

At step the XML processing module locates each element and or attribute applied from the associated schema file to the spreadsheet document via the mapping between the generalized instance structure of the XML schema file to the spreadsheet document. For each reference in the XML data mapping located by the XML export module the XML export module obtains an XPATH marking the location of the XML data in the document and pointing that location and data back to the XML schema file. For example if the XML export module comes to a first reference in the XML data mapping that is representative of a XML data element the XML processing module obtains the associated XPATH for example purchaseorder person frame for pointing to the child element of the element which in turn is a child element of the element of an associated purchase order schema file applied to the document. In effect each cell or list object annotated with XML data according to the associated XML schema file is located by walking a list of XML data mappings. The associated XPATH locating a cell or list object and data associated therewith is used to apply the XML data to the generalized instance structure of the associated XML schema file to prepare a hierarchically structured representation of the XML data and associated user data contained in the document. At step each XPATH obtained by the XML export module and associated with a given XML data element or attribute applied to the document is used to associate each applied element or attribute to the generalized instance structure associated with the selected XML schema file. In effect the generalized instance structure is filled in to indicate which elements and or attributes of the generalized instance structure of the selected XML schema file are actually applied to the document.

If the location of a single non repeating element or attribute is found the associated XPATH for the location and the associated data will be pushed out to the generalized instance structure as described above. However if during iteration of the map at step a list object is found having a cell range for example cell C through cell C an indication is made that the list object is associated with a repeating element in generalized instance structure of the associated XML schema file. In response the XML export module analyzes the hierarchical structure of the generalized instance structure to find the XML element associated with the list found in the application document and determines the minimum number of repeats associated with the element. This is required in order to ultimately know where the associated data is located in the document so that the data may be pushed out to the generalized instance structure for creating a hierarchically structured representation of the XML document for export.

At step the mapped data associated with each XPATH in the document is extracted and at step the extracted data is arranged by the XML export module according to the generalized instance structure. In order to arrange the extracted data in a hierarchical structure the XML processing module walks down the generalized instance structure one node at a time to prepare the data for writing to memory and for validating the data against the XML schema file. For example if the DOM parser and SAX module locates a first element corresponding to a single non repeating element the data if any contained in the cell associated with that element is validated against the element of the associated schema file. That is if the element requires a first name followed by a middle name followed by a last name the DOM parser and SAX module determine if the associated data is valid according to that data type and structure. If the data is not valid a schema validation error may be presented to the user.

If the XML processing module locates a list object that repeats for example ten times according to the generalized instance structure of the XML schema file then associated data of the ten cells are arranged for the eventual export. With each cell in the column that is arranged data associated therewith is validated against the XML schema file described above. According to a preferred embodiment of the present invention the rendering of the data according to the associated schema file is honored unless the rendering dictated by the schema file will cause a loss of user entered data. For example if the associated schema file requires that an annotated cell contain a whole number but the user entered a decimal value for example whole number 8 versus decimal number 8.5 the decimal value will be written out to memory and the user will be provided with an XML schema validation error.

At step the XML export module via the SAX module writes out the hierarchically structured data to memory for subsequent import and use as described above with reference to . As should be understood a variety of options are available when the data is written out to memory at step . The data may be written to memory for future import as described with reference to or the data may be transformed using a transformation file such as an eXtensible Stylesheet Language Transformation XSLT file to transform the data into a different format for subsequent consumption for example consumption by a Hypertext Markup Language processing module. Alternatively at step the data may be sent to another user for import by the second user utilizing another spreadsheet application program or alternatively for import by a different software application such as a word processing application. If the document is sent to another user for import by the second user utilizing a separate software application program such as a word processing application the spreadsheet functionality associated with the document created by the first user may be lost but advantageously the XML formatting of the data including XML tags and application of elements and or attributes from the associated schema file are maintained in the data for use by the second user.

Additionally during the process of writing out the data to memory at step a determination may be made based on the associated schema file as to whether or not a given element is optional. That is according to one embodiment a determination may be made as to whether an element applied to the document that should be rendered according to the associated schema file may nonetheless be omitted where for example rendering the element will generate a blank cell. For example sometimes an element is expressed that is not optional but the element does not have data in the document location to which it is applied for example a NIL value. If a cell has an Integer data type according to the associated schema file but the cell does not have an expressed value a zero 0 cannot be expressed in the cell because a zero is a valid Integer data type that in all probability does not convey the intent of a cell with no data content. For another example say a element is optional and twenty elements must be parsed according to the general instance structure of the associated schema file. If the schema file dictates that the element is required each time a element is parsed having no associated price items user data an empty element is written. An empty element is shorthand for having an open tag and a closed tag with nothing in between.

As is known to those skilled in the art in the described example case XML syntax may be written to prevent an empty cell from filling in with zeros. For example when a cell has no data content XML syntax may be written to prevent that empty cell from filling in with zeros. As described above one example is an empty element that is required and another example is where a number data type such as an Integer data type is required and the user does not enter data to the cell. In either of these cases writing a blank as a description would not be valid against the associated schema file and a schema validation error would occur and likely confuse a user. According to one embodiment if the XSD defines the element to be nillable a NIL value is written to the cell by writing an attribute of xsi nil true where the namespace prefix xsi is associated to the http www.w3c.org 2001 XMLSchema instance namespace in that location so that the schema validation process will ignore the cell. On export the element may be tagged stating that the cell should be expressed as a NIL value that will prevent a validation error from being provided to the user. If an element is required but where no data is provided according to one embodiment the element may be written out to memory at step to adhere to the associated schema file and an empty element may be written out even though it is invalid versus the schema file but where it is the best interpretation of the user s desires. A schema validation error may then be presented to the user to alert the user.

According to embodiments of the present invention mapping XML data to the spreadsheet grid as described herein may also expose application programming interfaces API that allow a programmer to peer into the XML map and use it for other purposes. According to a first aspect of this embodiment if a programmer is working with a specific XML schema such as a purchase order PO schema she may want to write a custom program that provides the user with actions such as Check status of this purchase order wherever purchase order data is encountered and the programmer may want those actions to show up inline in the spreadsheet document. Because the XML mapping feature described above allows the PO schema to be used in different spreadsheet documents each providing a different view of the XML purchase order data the programmer cannot write a program that works in all places. For example the Check status action needs to have access to the element of the PO data in order to know which purchase order it should look up for the user. The programmer therefore needs a way to discover whether the element is present at all in the spreadsheet document. Once it has been determined that the element is present the program code needs to know where the element is mapped in the grid. Once the program code knows where the element is mapped the program code is able to fetch the value of the spreadsheet cell to which the element is mapped as described above. The program code may also use this location to draw the appropriate user interface button etc. in the vicinity of that spreadsheet cell.

The objects are declared that will hold the location and value results to be obtained as described above. The element XPATH of the element needed by the programmer is passed to an XmlMapQuery method to find the location of the element. In response a Range object is returned which represents some area in the spreadsheet application spreadsheet. If the desired element does not exist meaning it has not been mapped into this particular spreadsheet the Range returned will be empty or un initialized. In response the programmer user checks for an empty Range before continuing. If the Range is not empty a call is made e.g. XmlDataQuery to fetch the Range that contains the actual data for the Range. XmlMapQuery and XmlDataQuery in many cases return the exact same Range. However element mappings may contain extra information such as headers which would be returned by XmlMapQuery whereas XmlDataQuery returns just the data.

In addition sometimes a mapping for a particular element may exist but no data may exist in the mapping yet in which case XmlDataQuery would return an empty Range while XmlMapQuery would return valid Range. In such cases the programmer user may first query for the existence of the mapping using XmlMapQuery before accessing the value of that mapping with XmlDataQuery. Next a determination is made as to whether the mapping Range contains any data. The location of the data in the spreadsheet can be obtained from the Range. Accessing the value of the element is also done with this Range. The Range may contain more than one cell but for the purposes of the example only the first cell having a Range IdRange is accessed.

According to a second aspect of this embodiment if the programmer user may desire to write a program that is able to work with multiple different XML schemas. For example consider an automobile company that produces cars trucks and buses where there is an XML schema for each type of vehicle that describes all of the parts that go into that type of vehicle. The company may also have a general purpose spreadsheet template for ordering parts. Users must customize that template by mapping the appropriate elements from one of the three schemas to the Order Table section of the spreadsheet. Once they have created the mapping they can fill out the Order Table.

Continuing with the example the programmer may want to provide the users with actions that help them fill out the order table for example an action like Get quote. The programmer already knows where the Order Table is in the spreadsheet but does not know which schema cars trucks buses the user will have mapped in each case nor the elements that the user mapped from the particular schema. The programmer first declares the objects that will hold the results to be obtained below. Next the programmer addresses a Range in the spreadsheet corresponding to one of the columns in the Order Table . For example the programmer looks up the Part Number column in the table and retrieves the XML XPATH information from that Range. The programmer then checks to make sure that the column is indeed mapped before proceeding. The XPATH object provides useful information to the programmer. For example the XPATH may give the programmer the XPATH identifier of the element that is mapped to this column. According to the present example the programmer may be interested in identifying the schema that is mapped to this table so that she knows how to appropriately request a price quote. She does this by accessing the XmlMap object via XPath.Map associated with XPATH object followed by retrieving the namespace value from RootElementNamespace that uniquely identifies the schema being used. After the programmer knows which schema is in use in this table she performs the action that is appropriate to the given schema such as inserting a code to get a quote for car parts.

As described herein embodiments of the present invention relate to importing markup language data to and exporting markup language data from a spreadsheet application grid. It will be apparent to those skilled in the art that various modifications or variations may be made in the present invention without departing from the scope or sprit of the invention. Other embodiments of the invention will be apparent to those skilled in the art from consideration of this specification and practice of the invention disclosed herein.

