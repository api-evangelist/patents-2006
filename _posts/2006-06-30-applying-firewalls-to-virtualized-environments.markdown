---

title: Applying firewalls to virtualized environments
abstract: Each virtualized environment on a computer has its own set of firewall rules. The virtualized environments share a single instance of the operating system image, a filter engine and a single network stack. A virtualized environment may be a compartment or a server silo. A virtualized environment is a network isolation mechanism and may be used to prevent use of a computer to traverse network boundaries by creating a separate virtualized environment for each network, enabling a separate set of rules to be applied to each virtualized environment and the network interfaces within it. Virtualized environments may also be used to assign different trust levels to the same physical network. Firewall rules are applied by virtualized environment identifier (ID), enabling separate filters to be applied to each virtualized environment on a computer. A virtualized environment may include or be associated with one or more network interfaces.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08151337&OS=08151337&RS=08151337
owner: Microsoft Corporation
number: 08151337
owner_city: Redmond
owner_country: US
publication_date: 20060630
---
In construction a firewall is a fireproof or fire resistant wall designed to prevent the spread of fire through a building or a vehicle. When the term is applied to a computer system it refers to a security system consisting of hardware software or a combination thereof that limits the exposure of a computer or computer network to attack from unauthorized users. The firewall operates within a networked environment to prevent communications forbidden by a security policy typically designed by a system administrator . The firewall attempts to control traffic between different zones of trust. One situation in which a firewall is commonly used is on local area networks that are connected to the Internet to control traffic between the Internet not trusted and the internal network highly trusted . Thus the goal of the firewall is to provide controlled connectivity between zones of differing trust levels by enforcement of a security policy. The proper configuration of firewalls demands skill and a good understanding of network protocols and computer security. Small mistakes can render a firewall worthless as a security tool.

Each virtualized environment on a computer has its own set of firewall rules. Each virtualized environment is associated with a unique identifier. The set of firewall rules that are applied to each virtualized environment is based on the unique identifier of the virtualized environment. The virtualized environments may share a single instance of the operating system image a single shared filter engine and a single shared network stack. When a computer is connected to two or more separate networks use of a separate virtualized environment for each network prevents traversal of network boundaries and enables a separate set of rules to be applied to each virtualized environment and the network interfaces within it. When two or more virtualized environments on one computer are connected to the same network different virtualized environments may be used to isolate the sessions or users using those virtualized environments so that a session or user is prevented from affecting another session or user s port space routing tables or firewall rules for that network. A virtualized environment may be a compartment or a server silo. A compartment is a network isolation mechanism and may be associated with a unique compartment identifier ID . Firewall rules may be applied based on the compartment identifier enabling separate filters to be applied to each compartment on a computer. A compartment may include or be associated with one or more network interfaces.

A server silo is another kind of network isolation mechanism and may be associated with a unique silo ID. Firewall rules may be applied based on the silo ID enabling separate filters to be applied to each silo on a computer. A server silo may include one or more compartments. Firewall rules added by a silo administrator are automatically scoped so that they apply only to the silo the administrator manages. System administrators may apply rules based on virtualized identifier e.g. by compartment ID or by silo ID or may apply rules to all virtualized environments on the computer.

All the virtualized environments on the computer may share a single operating system image filter engine and network stack. To determine which rules stored in a rules database in the operating system are applied to a piece of traffic rules are tagged with a unique virtualized environment identifier. Only those rules which are tagged with the virtualized environment ID to which the interface is associated on which the traffic is sent or received are applied to traffic coming in or going out from that interface. Instead of a particular virtualized environment ID a range of IDs may be specified for the rules. Because filters are applied by virtualized environment ID when the filter processes a request not when the filter is added interfaces belonging to a particular virtualized environment have the filters applied to them automatically even if the interface is added to the virtualized environment after the filters are set up.

To set up a firewall someone designs one or more rules. For example a rule might be Block all traffic except traffic coming in on port 80 or Do not allow this application to talk to any network except the corporate network . These rules are translated into a form in which the rule is represented in the operating system kernel i.e. into a series of filters . The kernel portion of the operating system maintains a database of the translated rules. When incoming or outgoing traffic is detected the kernel applies the filters to the packets of information making up the traffic. Packets that make it through the filters are sent on and all others are discarded.

In some operating systems when a new firewall rule is added the rule applies by default to the whole machine although in some cases attributes can be added to the filter so that the filter only applies to a specific interface on the machine or to a specific IP Internet protocol address. When a computer is connected to two or more different networks the computer may have different degrees of trust for the different networks to which it is connected. Similarly when two or more virtualized environments are connected to the same network the different virtualized environments may have different trust levels for the network. Depending on the degree of trust the computer may want to restrict access to its services e.g. file and print sharing differently for each network or trust level. In addition the computer may utilize different communications protocols such as TCP IP IPsec and other commonly known protocols on the different networks. Therefore it would be helpful to be able to apply one set of filters to traffic on one network and another set of filters to traffic on a different network or one set of filters to traffic to and from one virtualized environment and another set of filters to traffic to and from another virtualized environment.

Traditionally if the computer were divided into more than one compartment the same set of firewall rules would typically apply to all compartments. For example specifying that a port accepts or blocks incoming connections would affect that port in all the compartments on the computer. Because filters can be restricted to only specific interfaces or addresses it is possible to apply filters to only those interfaces within a specific compartment. This requires the administrator or other entity adding the filter to query for the interfaces in the compartment and then to either add the filter once for each interface in the compartment or add a single filter which explicitly specifies the set of interfaces in the compartment. An interface moving into the compartment would not automatically have the filters applied to it which correspond to the compartment and is likely to still have the filters associated with its former compartment associated with it instead. This situation requires the administrator to monitor and correct which filters are applied to interfaces as they move into and out of compartments. To address this situation in accordance with embodiments of the invention the virtualized environment identifier or ID is added to the set of attributes provided by the filter engine. When a filter is added the client can specify a virtualized environment ID or set or range of virtualized environment IDs along with the operation that should be used to filter network traffic. When the filter is applied it is only applied to the network traffic in the specified virtualized environment. In some embodiments the filter applies to all the interfaces in the virtualized environment at the time the filter operation is performed rather than at the time the filter is added. For example suppose at the time filter is applied to compartment interface and exist in compartment . Suppose later interface is added to compartment . Filter will be automatically applied to interface . If a filter is not associated with a compartment ID the filter is applied to all compartments.

For server silos the compartment mechanism is extended to provide each server silo with its own default compartment. Each compartment is then associated with a particular server silo. Compartments belonging to a server silo follow the same rules described above with respect to compartments not associated with a server silo. Sessions and interfaces may be only associated with compartments within the same server silo that is associations may not cross server silo boundaries. A server silo can create a new compartment for its own use but is not allowed to affect the compartments of other server silos. A process running in a server silo in some embodiments of the invention is prohibited from switching its thread s compartment to a compartment outside the server silo.

In some embodiments of the invention server silos run on a shared single instance kernel and only a single kernel mode filter engine exists. A server silo may however be associated with its own user mode filter engine. A server silo user mode filter engine may communicate with the kernel mode filter engine but may not communicate with other server silo user mode filter engines. In some embodiments of the invention server silos share a user mode filter engine. Therefore to determine when a filter should be applied the virtualized environment is utilized as the filter boundary. That is when a filter is added from a server silo if the filter specifies a compartment ID the filter engine ensures that the compartment is within the same server silo. If it is not the filter addition fails. If the filter does not specify a compartment ID the filter is applied to the server silo thus affecting all the traffic for the server silo e.g. all traffic tagged with the silo ID .

A silo is an intra operating system isolation containment mechanism that provides for the isolation of a process running on a computer. The silo enables the controlled sharing of some files and restricts access to other files by creating a view of the file system for the process running in the silo. Similarly the silo controls sharing and restricted access to the entries in the registry by creating a view of the registry for the process running in the silo. The registry view appears to a process running in the silo to be a single registry which is the union of two or more physical registries the system registry and the registry on the removable medium.

Although not required the invention can be implemented via an application programming interface API for use by a developer and or included within the network browsing software which will be described in the general context of computer executable instructions such as program modules being executed by one or more computers such as client workstations servers or other devices. Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers PCs automated teller machines server computers hand held or laptop devices multi processor systems microprocessor based systems programmable consumer electronics network PCs minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus .

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB .

A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . A graphics interface such as Northbridge may also be connected to the system bus . Northbridge is a chipset that communicates with the CPU or host processing unit and assumes responsibility for accelerated graphics port AGP communications. One or more graphics processing units GPUs may communicate with graphics interface . In this regard GPUs generally include on chip memory storage such as register storage and GPUs communicate with a video memory . GPUs however are but one example of a coprocessor and thus a variety of coprocessing devices may be included in computer . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface which may in turn communicate with video memory . In addition to monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

One of ordinary skill in the art can appreciate that a computer or other client device can be deployed as part of a computer network. In this regard the present invention pertains to any computer system having any number of memory or storage units and any number of applications and processes occurring across any number of storage units or volumes. The present invention may apply to an environment with server computers and client computers deployed in a network environment having remote or local storage. The present invention may also apply to a standalone computing device having programming language functionality interpretation and execution capabilities.

Different sets of firewall rules can be specified and applied to one or more networks by associating the different networks or different trust levels for the same network with different virtualized environments on a computer having a shared operating system image filter engine and network stack. illustrates a system for applying firewall rules to virtualized environments in accordance with embodiments of the invention. System may reside on one or more computers such as computer described above with respect to . System includes a computer connected to one or more different networks represented in by network and network . In some embodiments of the invention the two networks network and network represent different zones of trust. For example network may represent a zone of little or no trust such as the Internet and network may represent a highly trusted zone such as a business internal network. Alternatively two or more virtualized environments may be connected to the same network but assign different trust levels to the network. System may include one or more virtualized environments. A single instance of an operating system is shared by one or more virtualized environments represented in by compartment and compartment etc. Any number of additional compartments may be created. In some embodiments of the invention a computer will have at least one compartment denoted as the default compartment in which the system services execute. The service or system session in some embodiments of the invention is associated with the default compartment.

The operating system e.g. OS may represent a Microsoft WINDOWS Mac OS and Darwin Unix and Linux or other operating system. The operating system in some embodiments of the invention includes a filter engine that applies the network firewall rules and a network stack that is shared by all the applications and virtualized environments running on the system. Rules may be stored in a filter database stored in the operating system . In some embodiments of the invention the filter engine provides a number of attributes that may be specified when a new filter is added. Examples of these attributes include specification of the local and remote IP addresses the local and remote ports and the local interface the filter applies to.

A compartment is a network isolation mechanism which is especially useful when a computer is connected to two or more separate networks e.g. in multi homed personal computer PC scenarios although it will be appreciated that the invention as contemplated is not so limited. The isolation mechanism may operate in such a way that the computer cannot be used to traverse network boundaries by assigning use of a separate compartment for each network. In some embodiments of the invention each compartment is identified by a locally unique value the compartment identifier or compartment ID . Each session that runs on the computer runs within a compartment. No sessions one session or more than one session may be associated with a particular compartment. For example in compartment includes one session session and compartment includes multiple sessions session session etc. Different sessions of the same application e.g. Application X may run in different compartments. That is session running in compartment and session running in compartment may both be sessions or instances of Application X or may be sessions of different applications e.g. Application X and Application Y . Similarly session and session may both be sessions or instances of Application X or may be sessions of different applications.

Computer may also be associated with network interfaces. A network interface also called a network interface card or NIC network adaptor or network card is a piece of hardware software or combination thereof that enables a computer to communicate with a network. It is a point of interconnection between a user terminal and a private or public network. In some embodiments of the invention each network interface is associated with a compartment. More than one network interface can be associated with a particular compartment. Hence each compartment is associated with zero one or more than one network interfaces. In some embodiments of the invention to provide network isolation each compartment is associated with and maintains its own routing information and loopback interface. The separated routing information prohibits network traffic on the computer from being routed from a network interface in one compartment to a network interface in another compartment. In addition in some embodiments of the invention the compartment serves as a boundary for port bind requests. When a user mode application requests a port bind even if the request specifies that the bind should be on all available addresses the bind is limited to only the interfaces within the same compartment as the application determined by the session the application is running in. Two separate application running in different compartments may bind to the same port number without conflict. For kernel mode bind requests the request may specify that the bind apply to all compartments. The filters applied may depend on the destination of the traffic e.g. the interface the traffic is received on which may map to a compartment which may map to a server silo etc. 

In some embodiments of the invention a process running with the appropriate administrative privileges may switch one of its threads to another compartment. By doing so the process may take actions in multiple compartments including initiating connections binding ports or indirectly forwarding traffic.

In compartment an exemplary compartment is associated with two network interfaces interface and interface . Compartment is associated with two other network interfaces interface and interface . In general any particular interface will only exist in one compartment e.g. one would not expect to see interface in both compartment and compartment . When a request such as request is received from a network such as network the request is received at the appropriate interface e.g. interface processed by the filter engine and if the request passes the filters associated with the compartment in which the interface is located or with which the interface is associated e.g. interface is associated with compartment so the request must pass the set of filters associated with compartment the request is sent to the appropriate session e.g. to session . Similarly when in request is received from network the request is received at interface processed by the filter engine and if the request passes the filters associated with compartment the request is sent to the appropriate session e.g. to session . 

In some embodiments of the invention server silos run on a single instance of the kernel of the operating system which is shared by everything running on the computer. Filters added from a silo such as from silo are not permitted to affect traffic to or from other server silos such as silo . Thus when server silo adds a filter the filter engine checks to make sure that if server silo has specified that the filter is to apply to compartment that compartment is in server silo . If it were not the filter would not be added the filter addition process would fail. Similarly if server silo does not specify a compartment ID to which the filter is to be applied the filter is applied to the server silo by tagging the filter with the server silo ID e.g. the filter would be applied to compartments and and to any other compartments subsequently added to the silo .

The various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the present invention or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers the computing device will generally include a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may utilize the creation and or implementation of domain specific programming models aspects of the present invention e.g. through the use of a data processing API or the like are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

While the present invention has been described in connection with the preferred embodiments of the various figures it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiments for performing the same function of the present invention without deviating therefrom. Therefore the present invention should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the appended claims.

