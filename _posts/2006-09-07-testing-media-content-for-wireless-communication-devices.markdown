---

title: Testing media content for wireless communication devices
abstract: A communications network comprises a wireless communication device, a mobile data service and an apparatus for testing media content developed for a wireless communication device. This apparatus comprises a media content composer module, a web server, and a dispatcher module. The dispatcher module is programmed to: receive a media content simulation request from the composer module; publish media content developed on the composer module onto the web server, the published content having a uniform resource locator (URL) associated thereto; and transmit to the mobile data service the URL and instructions to the wireless communication device or a wireless communication device simulator to open a web browser and access the URL thereby downloading the media content from the web server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08290442&OS=08290442&RS=08290442
owner: Research In Motion Limited
number: 08290442
owner_city: Waterloo, Ontario
owner_country: CA
publication_date: 20060907
---
A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by any one of the patent document or patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The following relates to the field of wireless communication devices and more specifically to testing media content developed for wireless communication devices.

Wireless communication devices such as cellular phones personal digital assistants and the like have components that include microprocessors input peripherals such as a keypad special function buttons and wheels output peripherals and information storage means. These devices run one or more software applications such as micro browsers address books and email clients. Additionally current generations of such devices have access to a plurality of services via the Internet. A wireless device may for example be used to browse web sites on the Internet to transmit receive and execute media content such as graphics and graphical animations and to execute streaming audio and or video applications.

During the development of media content for mobile devices a content developer may want to test completed content and or make a change to the content using a content development tool and immediately test the changes on a wireless communication device or a simulator of such device. This edit and test cycle can occur repeatedly until the developer is satisfied with the result. Each time the content developer wants to test content he or she must follow a lengthy series of manual steps which can become distracting time consuming and tedious. Known media content development tools include Macromedia Adobe Flash and Plazmic Content Developers Kit for Blackberry .

Such manual steps depend on the particular development tool and typically include exporting the developed content from the content development tool in a publishable format publishing the exported content onto a web server opening a browser on the wireless communication device or on the device simulator entering the URL of the published content into the browser then downloading the published content at the URL to the wireless communication device or device simulator for playback by the developer. It would be desirable to provide a solution that solves at least some of the challenges present in existing approaches to test media content developed for wireless communication devices.

It will be noted that throughout the appended drawings like features are identified by like reference numerals.

According to an aspect there is provided a method of testing media content developed for a wireless communication device. The method comprises the steps of receiving a media content simulation request publishing media content onto a web server and transmitting to a wireless communication device or a wireless communication device simulator the URL and instructions to open a web browser and access the URL thereby downloading the media content from the web server. The media content is published on a path.

According to another aspect there is provided a computer readable memory having recorded thereon statements and instructions for execution on a computer to carry out a method of testing media content developed for a wireless communication device. The method comprises the steps of receiving a media content simulation request publishing media content onto a web server and transmitting to a wireless communication device or a wireless communication device simulator the URL and instructions to open a web browser and access the URL thereby downloading the media content from the web server. The media content is published on a path.

According to another aspect there is provided an apparatus for testing media content developed for a wireless communication device. The apparatus comprises a media content composer module a web server and a dispatcher module programmed to receive a media content simulation request from the composer module publish media content developed on the composer module onto the web server and transmit to a wireless communication device or a wireless communication device simulator the URL and instructions to open a web browser and access the URL thereby downloading the media content from the web server. The media content is published on a path.

According to another aspect there is provided a communications network. The communications network comprises a wireless communication device a mobile data service and an apparatus for testing media content developed for a wireless communication device. The apparatus comprises a media content composer module a web server and a dispatcher module programmed to receive a media content simulation request from the composer module publish media content developed on the composer module onto the web server and transmit to the mobile data service the URL and instructions to the wireless communication device or a wireless communication device simulator to open a web browser and access the URL thereby downloading the media content from the web server. The media content is published on a path.

According to one aspect there is provided a method of testing media content developed for a wireless communications device including rich media content and a computer readable media having recorded thereon instructions for carrying out the method. Upon receipt of a simulation request by a user the method publishes media content developed on a composer program onto a web server wherein the published content has a uniform resource locator URL associated thereto then instructs a wireless communication device or a wireless communication device simulator to open a web browser and download the published content from the web server at the URL. Prior to content being published the method can also export media content on the composer program into a publishable format. By automating these steps the method reduces the tedium associated with a user having to perform these steps manually.

According to another aspect the method can open a simulator session before a user requests a simulation to be performed thereby reducing the time required for the simulator to perform the simulation.

According to yet another aspect a device side playback control application is provided that interfaces a control panel application with a content playback application programming interface of a web browser on a wireless communication device or a wireless communication device simulator. In one aspect the playback control application is resident on the device or device simulator and enables the control panel to be located external to the device or device simulator and control playback of developed content on the web browser of the device or device simulator. In another aspect the playback control application can be pushed to a wireless communication device that does not have the application resident thereon or new versions of the application can be pushed to devices.

Referring to and a rich media content development tool is provided for content developers to develop rich media content for a wireless communication device and test developed content either on the wireless communication device or on a simulator of such device . An example of the wireless communication device is the Blackberry brand of wireless communication devices manufactured by Research in Motion RIM .

The rich media development tool is part of an application development system for a wireless communication device enterprise solution. The application development system provides organizations with the means to build deploy and manage application for the device enterprise solution. A prior art example of such a system is the Blackberry Mobile Data System v. 4.1 by RIM. The system includes developer tools such as the rich media content development system a mobile data service MDS and application development system software not shown for the wireless communication device .

Referring to the development tool is a software program that resides on a client computer . The MDS resides on an enterprise server communicative with the client computer . The MDS communicates wirelessly with one or more wireless communication devices via the Internet and wireless networking equipment communicative with the Internet in a manner that is well known in the art. A firewall is provided to protect the application and enterprise servers from Internet based attacks.

The MDS is responsible for managing interactions and requests between wireless communication devices and enterprise applications. The MDS includes an administrative and management service that deals with policies such as those specifying allowed applications for users and services available to applications. The MDS also includes a provisioning service that controls and manages which application users can download to the wireless communication devices . The MDS also includes a data optimization service that transforms data for efficient wireless transmission and use on mobile devices a connection service that provides TCP IP and HTTP based connectivity between MDS Java applications and MDS browser applications and enterprise applications. The Blackberry MDS Services for the Blackberry Mobile Data System 4.1 is an example of a commercially available MDS that can be used with the content development tool .

Referring to and according to one embodiment the development tool is a software program configured to automatically simulate developed content on a wireless communication device . The development tool is a collection of graphical user interfaces and command line tools that enable content developer to build test and simulate run mobile media content such as 2D graphical scalable vector graphics SVG content for viewing on a web browser of the wireless communication device . The development tool includes the following program modules 

The composer module is a graphical authoring computer program for developing rich media content and particularly SVG content. Rich media is a term used to describe a broad range of interactive digital media that exhibit dynamic motion taking advantage of enhanced sensory features such as video audio and animation. The Composer program for the Blackberry Mobile Data System 4.1 an example of a commercially available composer module that can be used with the content development tool of this embodiment.

The web server is a computer program that is responsible for accepting HTTP requests from clients which are known as Web browsers and serving them Web pages which are usually HTML documents and linked objects images etc. . Such a web server is well known in the art and is thus not described in detail here.

The dispatcher module is a computer program that executes the steps necessary to simulate developed content on the wireless communication device . The dispatcher module is communicative with the composer module to receive a simulation request initiated by the content developer clicking an icon in the composer module and is communicative with the MDS to instruct the MDS to locate the wireless communication device and instruct the device to access and download the developed content from the web server .

Referring to and a content developer that has developed media content that he or she wants to test on the wireless device will have first selected the wireless device on which to simulate the developed content this selected wireless device has a device identifier or PIN that is entered into the development tool . The user clicks a simulator icon not shown on a control panel of the composer module step . When this icon is clicked a series of steps is executed by the development tool that results in the wireless device obtaining and running the developed content. First the composer module exports the developed content into an publishable format e.g. scalable vector graphics format step . Then the composer module sends a request to the dispatcher module that contains the pathname of the exported file and the PIN of the device or device simulator to which the content is to be pushed. In response to this request the dispatcher module transmits the exported content to the web server for publication step . The web server receives and publishes the content under a certain path and the dispatcher module determines the Universal Resource Locator URL identifier associated with that path.

After the content has been published the dispatcher module sends a Wireless Application Protocol WAP service load request to the MDS containing the URL the PIN of the wireless device step and instructions for the device to open a web browser on the device and access the URL at the web server Step and and an execute high priority for these instructions which tells the browser to load the URL immediately. Upon receipt of this information the MDS will push the data to the device via the network as shown in . When the device receives the pushed data the device will open its web browser and access the web server with the URL. When the URL has been accessed the device will download the media content located at that URL and run the media content on the wireless device Step and .

When the device is connected to the client computer eg. via Bluetooth or by USB the device PIN can be determined automatically in a manner as is known in the art.

The use of the MDS to locate and communicate with the wireless communication device and use of a web browser on the device to access a web server and download content from a URL on the web server are well known in the art and thus not described in detail here.

The WAP service load request is considered an aggressive means to communicate with the wireless device as the request is given an execute high priority. When the MDS receives such a request it will override any current application that is running on the wireless device and cause the device to execute the commands in the WAP service load request which in this embodiment is to open the web browser and download and run media content from the web server . However it is within the scope of this embodiment for the dispatcher module to send requests via the MDS in a different manner.

The wireless communication device is described in further detail below under the heading Wireless Communication Device .

One example of the wireless communication device adapted in accordance with this embodiment is shown in . Device is a two way communication device having at least voice and advanced data communication capabilities including the capability to communicate with other computer systems. Depending on the functionality provided by device it may be referred to as a data messaging device a two way pager a cellular telephone with data messaging capabilities a wireless Internet appliance or a data communication device with or without telephony capabilities . Device may communicate with any one of a plurality of fixed transceiver stations within its geographic coverage area.

Device will normally incorporate a communication subsystem which includes a receiver a transmitter and associated components such as one or more preferably embedded or internal antenna elements and local oscillators LOs and a processing module such as a digital signal processor DSP all not shown . As will be apparent to those skilled in field of communications particular design of communication subsystem depends on the communication network in which device is intended to operate.

Network access is associated with a subscriber or user of device and therefore depending on network type the device may require a Subscriber Identity Module or SIM card to be inserted in a SIM IF in order to operate in the network. Device is a battery powered device so it also includes a battery IF for receiving one or more rechargeable batteries . Such a battery provides electrical power to most if not all electrical circuitry in device and battery IF provides for a mechanical and electrical connection for it. The battery IF is coupled to a regulator not shown which provides power V to all of the circuitry.

Device includes a microprocessor which controls overall operation of device . Communication functions including at least data and voice communications are performed through communication subsystem . Microprocessor also interacts with additional device subsystems such as a display a flash memory or other persistent store a static random access memory SRAM auxiliary input output I O subsystems a serial port a keyboard a speaker a microphone a short range communications subsystem and any other device subsystems generally designated at . Some of the subsystems shown in perform communication related functions whereas other subsystems may provide resident or on device functions. Notably some subsystems such as keyboard and display for example may be used for both communication related functions such as entering a text message for transmission over a communication network and device resident functions such as a calculator or task list. Radio and embedded software and JVM collectively main operating system OS firmware as well as Java applications are preferably stored in a persistent store such as the flash memory which may alternatively be a read only memory ROM or similar storage element not shown . Those skilled in the art will appreciate that objects and other data generated by the main OS firmware specific device applications or parts thereof may be temporarily loaded into a volatile store such as the SRAM .

While wireless device operates on the Java platform and utilizes JVM and Java applications other software platforms utilizing different virtual machines application framework and applications as is known in the art can be substituted.

Microprocessor in addition to its operating system functions preferably enables execution of software applications on device . A predetermined set of applications which control basic device operations including at least data and voice communication applications will normally be installed on device during its manufacture. A preferred application that may be loaded onto device may be a personal information manager PIM application having the ability to organize and manage data items relating to the user such as but not limited to instant messaging IM e mail calendar events voice mails appointments and task items. Naturally one or more memory stores are available on device and SIM to facilitate storage of PIM data items and other information.

The PIM application preferably has the ability to send and receive data items via the wireless network. In a preferred embodiment PIM data items are seamlessly integrated synchronized and updated via the wireless network with the mobile station user s corresponding data items stored and or associated with a host computer system thereby creating a mirrored host computer on device with respect to such items. This is especially advantageous where the host computer system is the mobile station user s office computer system. Additional applications may also be loaded onto device through network an auxiliary I O subsystem data port short range communications subsystem or any other suitable subsystem and installed by a user in SRAM or preferably the non volatile store for execution by microprocessor . Such flexibility in application installation increases the functionality of device and may provide enhanced on device functions communication related functions or both. For example secure communication applications may enable electronic commerce functions and other such financial transactions to be performed using device .

In a data communication mode received information data such as a text message an e mail message or web page download will be processed by communication subsystem and input to microprocessor . Microprocessor will preferably further process the information for output to display and or to auxiliary I O device . A user of device may also compose data items such as e mail messages for example using keyboard in conjunction with display and possibly auxiliary I O device . Keyboard is preferably a complete alphanumeric keyboard and or telephone type keypad. These composed items may be transmitted over a communication network through communication subsystem or short range communication subsystem .

For voice communications the overall operation of device is substantially similar except that the received signals would be output to speaker and signals for transmission would be generated by microphone . Alternative voice or audio I O subsystems such as a voice message recording subsystem may also be implemented on device . Although voice or audio signal output is preferably accomplished primarily through speaker display may also be used to provide an indication of the identity of a calling party duration of a voice call or other voice call related information as some examples.

Data port in is normally implemented in a personal digital assistant PDA type communication device for which synchronization with a user s desktop computer is a desirable albeit optional component. The data port can be serial or USB. Data port enables a user to set preferences through an external device or software application and extends the capabilities of device by providing for information or software downloads to device other than through a wireless communication network. The alternate download path may for example be used to load an encryption key onto device through a direct and thus reliable and trusted connection to thereby provide secure device communication.

Short range communications subsystem of is an additional optional component which provides for communication between device and other different systems or devices which need not necessarily be similar devices. For example subsystem may include an infrared device and associated circuits and components or a Bluetooth communication module to provide for communication with similarly enabled systems and devices. Bluetooth is a registered trademark of Bluetooth SIG Inc.

Referring to and according to another embodiment the development tool is provided with a mobile data service simulator MDS simulator and the wireless communication device simulator . Both the MDS simulator and the device simulator are computer programs resident on the client computer that emulate the functionality of the MDS and wireless device . These simulators provide the content developer with the option of testing the developed content on either the wireless communication device or on the device simulator . The device simulator simulates the entire wireless device handheld experience and can be used by developers who do not have access to a wireless communication device to test their developed content entirely on the client computer instead.

Referring to the developer working on the composer module will have to select whether to run a simulation test on a wireless communication device or on the simulator . When the developer opens a new document in the Composer module Step the developer will be prompted to select testing media content on a wireless communication device or on the simulator . When the developer selects the device he will be prompted to enter the PIN of the device after entering this PIN and clicking the Simulation icon the development tool executes the steps as described for the first embodiment.

When the developer selects to run the test on the simulator the dispatcher module assigns a simulator PIN associated with the current composer document then instructs the simulator to open a new simulator session having the session PIN Step and place the session in hidden mode i.e. hidden from the developers view. Opening a new simulator session in prior art device simulators can take several minutes and can be frustrating to developers who must wait each time they want to test their developed content. In this embodiment the dispatcher causes a simulator session to be opened and ready for use before the developer initiates a simulation request thereby reducing the wait time for the simulation test to begin running to seconds instead of minutes.

When the developer clicks the simulation icon in the composer program Step a series of steps are executed by the development tool 

When the URL has been accessed the simulator will download the media content located at that URL run the media content for display on the client computer step and .

The effectiveness of a developer s edit and test cycle in which a developer makes changes to his or her work and immediately tests those changes is improved with the use of the device simulator . Unfortunately the improvement is not fully realized if the device simulator has a slow start up time. Therefore as described above a simulator session is opened and kept in hidden mode when a composer document is opened by the developer and before the developer requests a simulation. Pre opening a simulator session has been found to significantly reduce the time required to run a simulation.

While pre opening a simulator session works well when the developer works on a single composer document and only wants to run a single simulation the developer may want to edit and test content on the same document repeatedly or test the same content on different types of wireless communication devices. To start a new simulator session each time the developer wants to test content would be very inefficient. On the other hand an attempt to re use the same simulator session each time would preclude the option of testing on different device types it is assumed that the device type is fixed for any given simulator session .

Therefore in accordance with an another embodiment multiple simulator sessions can be opened at one time on the development tool . For example multiple simulator can be opened by the development tool when the developer opens a document in the composer . Each opened simulator session is assigned a unique identifier which the composer uses to identify the session and separate from the simulator PIN. The session identifiers and the PINs which they map to are recorded in a data repository in the dispatcher . This enables the dispatcher to re use simulator PINs as needed while keeping the simulator session identifiers unique.

Associated with the running of multiple simulator sessions at one time is a problem with port conflicts. Simulator sessions running on the device simulator and the device simulator itself may reserve specific port numbers in order to communicate with other programs. In many cases these port numbers can be assigned dynamically as is known in the art in order to avoid conflicts. However the quantity of available ports assigned to development tool is a limited resource and therefore needs to be managed carefully to avoid port conflicts.

In this connection the dispatcher is further programmed to manage the use of multiple simulator sessions as well as allocating port numbers as needed when there are multiple simulator sessions running on a single client computer .

The dispatcher is provided with a limited range of port numbers which it can assign the dispatcher has a repository which lists each port number and the availability of the associated ports. When a new simulator session is started the dispatcher assigns the required number of ports to that session and updates the repository to indicate that the assigned ports are no longer available. When a simulator session is closed the dispatcher updates the repository to indicate that the ports used for the closed session are now available.

Referring to and when the content developer opens a document on the composer application step the dispatcher tries to open one or more new simulator sessions. The dispatcher examines the repository for available ports step . In this embodiment each simulator session requires three ports one port for communicating with the MDS simulator and two ports for receiving and transmitting data to a control panel of the simulator session. When there is an insufficient number of ports available the device simulator does not open a new session step .

When there is a sufficient number of ports the dispatcher selects three available ports for use with a new simulator session step and checks to see whether another application is using those ports step . Such checking may be required as the ports may already be in use by other applications on the client computer . As there is no correlation between the three port numbers needed for a simulation in this embodiment the assignment of each port number is treated independent of the other. Therefore the dispatcher will select and check each port one at a time. This process continues until a total of three available and unused ports are found. Then the dispatcher assigns the three ports to the simulator session and the repository is updated step . When using the device simulator the dispatcher then instructs the device simulator to open a new simulation session using the three assigned ports. Upon receipt of the such instruction the device simulator opens a simulator session in hidden mode using the three ports step .

When the content developer wants to test his developed content and clicks the simulation icon in the composer document a simulation request is sent to the dispatcher . The dispatcher attempts to service that request by first checking whether there is an unused hidden session and if yes to bring the hidden session forward and then to send a WAP service load to the MDS simulator with the session PIN of the unused hidden session. Consequently the unused hidden session accesses the web server and downloads the developed content onto the simulator session.

If the dispatcher cannot find an unused hidden session it will attempt to open a new simulator session in the manner as described above.

The developer may on occasion want to run multiple simulations at one time. For example the developer may want to test the developed content on multiple device types or multiple families of device types and request such when the document is opened. In this connection the dispatcher is programmed to pre start a new simulator session for each device type in a set of predefined device types when the development tool is started up. For example the dispatcher may be provided with a list of each device in the Blackberry 71XX family of devices and open a separate simulator session for each 71XX device in the family. Or the dispatcher is programmed to start up a session for each family of device types e.g. a 7100 simulator session for the 71XX family. Opening separate sessions for each device type is useful where differences between the devices would affect the playback of the developed content for example different devices in the Blackberry 71XX family may have different application behaviour that requires certain developed application content to be tested on each device type. However the 71XX family of devices all have the same screen size so developed graphical web content can be tested on a single simulator session for the entire 71XX family.

Each opened simulator session is assigned a unique identifier which is stored in the repository. When the developer requests multiple simulations the dispatcher will check the repository for available simulator sessions select the required number of simulator sessions then instruct the each session to access the URL of the published content in the manner as described above.

Referring now to a playback control application or run time agent is provided on the device or on the device simulator and provides an interface between a control panel application and a content playback application program interface API of the web browser on the device or device simulator . The playback control application is also communicative with the dispatcher and notifies the dispatcher when the device or device simulator is ready to handle a wireless data push.

The end user interface not shown on the device or device simulator has a very limited number of playback controls and would not be satisfactory for a developer seeking to test developed content. The following table is a high level description of the content playback API functions that deal with the browser content currently being displayed on the device or device simulator . In this embodiment the media player is referred to as the Media Engine and the API is written in Java 2 Micro Edition J2ME . However any media player of time based content would provide a similar API and can be readily substituted.

The control panel is a software program that provides additional control over playback of the developed content. The control panel is not resident on the device or integrated with the device simulator and instead resides on the client computer . As the control panel is external to the device or device simulator it must communicate with the content playback API via the playback control application . In this embodiment the control panel and playback control application communicate via a user datagram protocol UDP socket connection. When the content developer tests content using the device simulator the development tool assigns two local ports incoming and outgoing on the client computer to enable the control panel to communicate with the content playback API in accordance with the port management steps described above. Alternatively other communication socket protocols can be used to communicate between the control panel and the playback control application e.g. transmission control protocol TCP different numbers of ports may be required when using different protocols as will be apparent to one skilled in the art.

In the case of actual devices Bluetooth USB or other suitable data connections can be used to connect the device to the client computer in which the control panel is resident thereby providing for communication means between the playback control application and the control panel . This data connection can also be used to push the playback control application to devices that do not already have the application resident thereon or to send the latest version of the application to the device . A data connection can also be established over the wireless network shown in using the MDS using the wireless network is particularly useful when the device and the client computer are in two physically different locations e.g. when a developer at the client computer wishes to demonstrate developed media content to another person located at a different location.

The following table lists features of the control panel that are particularly useful for the content developers 

While the preferred embodiment of the invention has been illustrated and described it will be appreciated that various changes can be made therein without departing from the scope and spirit of the invention.

