---

title: Method and system for trusted/untrusted digital signal processor debugging operations
abstract: Techniques for the design and use of a digital signal processor, including (but not limited to) for processing transmissions in a communications (e.g., CDMA) system. Trusted and untrusted debugging operational control occurs in operating a core processor associated with the digital signal processor. A debugging process within a debugging mechanism associates with the core processor. The core processor process determines the origin of debugging control as trusted debugging control or untrusted debugging control. In the event of trusted debugging control, the core processor process provides to the trusted debugging control a first set of features and privileges. Alternatively, in the event that debugging control is untrusted debugging control, the core processor process provides the untrusted debugging control a second restricted set of features and privileges, all for maintaining security and proper operation of the core processor process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08533530&OS=08533530&RS=08533530
owner: QUALCOMM Incorporated
number: 08533530
owner_city: San Diego
owner_country: US
publication_date: 20061115
---
This application is related to the following co pending United States Patent application numbers application Ser. No. 11 560 217 filed Nov. 15 2006 entitled NON INTRUSIVE THREAD SELECTIVE DEBUGGING METHOD AND SYSTEM FOR A MULTI THREADED DIGITAL SIGNAL PROCESSOR U.S. patent application Ser. No. 11 560 323 filed Nov. 15 2006 entitled METHOD AND SYSTEM FOR A DIGITAL SIGNAL PROCESSOR DEBUGGING DURING POWER TRANSITIONS U.S. patent application Ser. No. 11 560 339 filed Nov. 15 2006 entitled EMBEDDED TRACE MACROCELL FOR ENHANCED DIGITAL SIGNAL PROCESSOR DEBUGGING OPERATIONS and U.S. patent application Ser. No. 11 560 344 filed Nov. 15 2006 entitled METHOD AND SYSTEM FOR INSTRUCTION STUFFING OPERATIONS DURING NON INTRUSIVE DIGITAL SIGNAL PROCESSOR DEBUGGING.

The disclosed subject matter relates to data processing systems and processes such as may find use in data communications and similar applications. More particularly this disclosure relates to a novel and improved method and system for permitting and controlling trusted and untrusted digital signal processor debugging operations.

Increasingly telecommunications and other types of electronic equipment and supporting video complex audio videoconferencing and other rich software applications involve signal processing. Signal processing requires fast mathematical calculations and data generation in complex but repetitive algorithms. Many applications require computations in real time i.e. the signal is a continuous function of time which must be sampled and converted to digital signals for numerical processing. The processor must execute algorithms performing discrete computations on the samples as they arrive.

The architecture of a digital signal processor DSP is optimized to handle such algorithms. The characteristics of a good signal processing engine include fast flexible arithmetic computation units unconstrained data flow to and from the computation units extended precision and dynamic range in the computation units dual address generators efficient program sequencing and ease of programming.

One promising application of DSP technology includes communications systems such as a code division multiple access CDMA system that supports voice and data communications as well as text messaging and other applications between users over a satellite or terrestrial link. The use of CDMA techniques in a multiple access communication system is disclosed in U.S. Pat. No. 4 901 307 entitled SPREAD SPECTRUM MULTIPLE ACCESS COMMUNICATION SYSTEM USING SATELLITE OR TERRESTRIAL REPEATERS and U.S. Pat. No. 5 103 459 entitled SYSTEM AND METHOD FOR GENERATING WAVEFORMS IN A CDMA CELLULAR TELEHANDSET SYSTEM both assigned to the assignee of the claimed subject matter.

A CDMA system is typically designed to conform to one or more standards. One such first generation standard is the TIA EIA IS 95 Terminal Base Station Compatibility Standard for Dual Mode Wideband Spread Spectrum Cellular System hereinafter referred to as the IS 95 standard. The IS 95 CDMA systems are able to transmit voice data and packet data. A newer generation standard that may more efficiently transmit packet data is offered by a consortium named the 3Generation Partnership Project 3GPP and embodied in a set of documents including Document Nos. 3G TS 25.211 3G TS 25.212 3G TS 25.213 and 3G TS 25.214 which are readily available to the public. The 3GPP standard is hereinafter referred to as the W CDMA Standard.

Complex DSP operational software employing the W DCMA Standard for example requires robust development tools. Such development tools may include those for code generation integration testing debugging and evaluating application performance. In developing and operating software or complex DSP applications such as advanced telecommunications applications there is the need for sophisticated yet non intrusive debugging software. That is debugging software applications must be not only sufficiently robust to monitor test and support the correction of software defects and operational problems but also they may operate so as not to interfere with the core processor software during debugging operations. Otherwise any problems in the core processing software may not be detected or detected properly during the use of such debugging software.

Such non intrusive debugging operations may include performing trusted and untrusted debugging operations and the ability to perform instruction stuffing operations. Trusted users include software developers at the kernel and application level while untrusted users may include OEMs third party developers end users and others who may intentionally or unintentionally yet inappropriately affect essential operations of the DSP operating system and other essential programs. In a programmable core the operating system is the manager of security concerns and understands which resources registers memory locations devices and services are allowed for various users. Accordingly a process for determining a user to be either a trusted or untrusted user may coordinate tightly with the determination that the operating system may make in addressing different security needs.

There is a need therefore for a debugging process and system for operation with a DSP which debugging process and system provides the ability to determine a user to be a trusted or an untrusted user.

A need exists for a non intrusive software debugging process capable of selectably operating in either a trusted or an untrusted mode for permitting various types of configuration and breakpoint determinations and permissions.

Yet a further need exists for a debugging system capable of operating with trusted and untrusted users which system makes use of the security management functions of a DSP core processor operating system.

Techniques for providing non intrusive thread selective debugging method and system for a digital signal processor including a multi threaded digital signal processor are disclosed which techniques permit selectably operating in trusted or untrusted debugging modes. The method and system here disclosed improve both the operation of a digital signal processor and the efficient use of digital signal processor instructions for increasingly powerful software applications including applications operating in personal computers personal digital assistants wireless handsets and similar electronic devices as well as increasing the associated digital processor speed and service quality.

According to one aspect of the disclosed subject matter a method and system for controlling between trusted and untrusted debugging operational modes includes the processes circuitry and instructions for operating a core processor process within a core processor associated with the digital signal processor. The method and system further operate a debugging process within a debugging mechanism of the digital signal processor which debugging mechanism associates with the core processor. The core processor process determines the origin of debugging control as trusted debugging control or untrusted debugging control. In the event that debugging control is trusted debugging control the core processor process provides to the trusted debugging control a first set of features and privileges. Alternatively in the event that debugging control is untrusted debugging control the core processor process provides the untrusted debugging control a second restricted set of features and privileges. As such the disclosed software debugging method and system maintain security in the operation of the core processor process according to the determination of the debugging control as untrusted debugging control or untrusted debugging control.

These and other advantages of the disclosed subject matter as well as additional novel features will be apparent from the description provided herein. The intent of this summary is not to be a comprehensive description of the claimed subject matter but rather to provide a short overview of some of the subject matter s functionality. Other systems methods features and advantages here provided will become apparent to one with skill in the art upon examination of the following FIGUREs and detailed description. It is intended that all such additional systems methods features and advantages be included within this description be within the scope of the accompanying claims.

The disclosed subject matter for a non intrusive thread selective debugging method and system for a multi threaded digital signal processor has application for multi threaded processing of any type for which the benefits here presented may be advantageous. One such application appears in telecommunications and in particular in wireless handsets that employ one or more digital signal processing circuits. For explaining how such a wireless handset may be used provides a simplified block diagram of a communications system that may implement the presented embodiments of the disclosed interrupt processing method and system. At a transmitter unit data is sent typically in blocks from a data source to a transmit TX data processor that formats codes and processes the data to generate one or more analog signals. The analog signals are then provided to a transmitter TMTR that modulates filters amplifies and up converts the baseband signals to generate a modulated signal. The modulated signal is then transmitted via an antenna to one or more receiver units.

At a receiver unit the transmitted signal is received by an antenna and provided to a receiver RCVR . Within receiver the received signal is amplified filtered down converted demodulated and digitized to generate in phase I and Q samples. The samples are then decoded and processed by a receive RX data processor to recover the transmitted data. The decoding and processing at receiver unit are performed in a manner complementary to the coding and processing performed at transmitter unit . The recovered data is then provided to a data sink .

The signal processing described above supports transmissions of voice video packet data messaging and other types of communication in one direction. A bi directional communications system supports two way data transmission. However the signal processing for the other direction is not shown in for simplicity. Communications system may be a code division multiple access CDMA system a time division multiple access TDMA communications system e.g. a GSM system a frequency division multiple access FDMA communications system or other multiple access communications system that supports voice and data communication between users over a terrestrial link. In a specific embodiment communications system is a CDMA system that conforms to the W CDMA Standard.

Output from execution data paths goes to register file write circuit also configured to accommodate individual threads T T for returning the results from the operations of DSP . Thus the data path from circuit and before to register file write circuit forms a processing pipeline . The present embodiment may employ a hybrid of a heterogeneous element processor HEP system using a single processor with up to six threads T T. Processor pipeline has six stages which matches the minimum number of processor cycles necessary to fetch a data item from circuit to registers and . DSP concurrently executes instructions of different threads T T within a processor pipeline . That is DSP provides six independent program counters an internal tagging mechanism to distinguish instructions of threads T T within processor pipeline and a mechanism that triggers a thread switch. Thread switch overhead varies from zero to only a few cycles.

DSP therefore provides a general purpose digital signal processor designed for high performance and low power across a wide variety of signal image and video processing applications. provides a brief overview of the DSP architecture including some aspects of the associated instruction set architecture for one manifestation of the disclosed subject matter. Implementations of the DSP architecture support interleaved multithreading IMT . In this execution model the hardware supports concurrent execution of multiple hardware threads T T by interleaving instructions from different threads in the pipeline. This feature allows DSP to include an aggressive clock frequency while still maintaining high core and memory utilization. IMT provides high throughput without the need for expensive compensation mechanisms such as out of order execution extensive forwarding networks and so on. Moreover the DSP may include variations of IMT such as those variations and novel approaches disclosed in the commonly assigned U.S. patent applications by M. Ahmed et al and entitled Variable Interleaved Multithreaded Processor Method and System and Method and System for Variable Thread Allocation and Switching in a Multithreaded Processor. 

Sequencer provides hybrid two way superscalar instructions and four way VLIW instructions to S Pipe unit M Pipe unit LD Load Pipe and LD ST Store Pipe unit all of which communicate with general registers . AXI Bus also communicates via Bus I F with shared data cache LD ST instructions to threads T T. Optional L Cache TCM signals include LD ST instructions with shared data TCM which LD ST instructions further flow to threads General Registers . From AHB peripheral bus MSM specific controller communicates interrupts with T T including interrupt controller instructions debugging instructions and timing instructions. Global control registers communicates control register instructions with threads T T.

DSP therefore includes six virtual DSP cores each containing global control registers and private supervisor control registers . Global control registers are shared between all threads. Each thread shares a common data cache and a common instruction cache. Load store and fetch operations are serviced by a common bus interface. High performance AXI bus and a lower performance AHB bus are used to connect the data and instruction traffic to off core memory and peripherals. An integrated level two memory cache and or TCM input is optional. Peripheral access may be through memory mapped loads and stores. The physical address partition between AHB and AXI may be configured at the MSM level.

Clearly the presented architecture for DSP may evolve and change over time. For example the number of instruction caches that DSP may use could change from six to one or other numbers of caches. Superscalar dispatch L data at TCM and other architectural aspects may change. However the present subject matter may have continued relevance in a wide variety of configurations and for a large family of modifications of DSP .

ISDB through JTAG interface provides a hardware debugger for DSP . ISDB provides software debug features through JTAG interface by sharing system or supervisor only registers that are divided into supervisor control registers on a per thread basis as well as global control registers between all threads. The system control registers are used for per thread interrupt and exception control and per thread memory management activities. Global registers allow interacting with the ISDB for debugging operations.

ISDB enables software developers to debug their software while DSP operates. ISDB hardware in combination with a software debugger program operating in ISDB may be used to debug the DSP operating system software. ISDB supports debugging hardware threads individually. Users may suspend thread execution view and alter thread registers view and alter instruction and data memory single step threads stuff instructions to threads and resume thread execution. Trusted users have access to all of ISDB features while untrusted users have access to a subset of features.

ISDB may interface with a debugger interface card to communicate with ISDB debugging software residing on a program counter yet all through JTAG interface . Host debugger software may interact with the ISDB by reading and writing ISDB control registers. Communication for example may be through a 40 bit packet which identifies the ISDB register to which read write is to occur as well as a 32 bit data payload. A packet format supporting this operation may be up to 64 control registers which may be 32 bits wide each.

ISDB includes a trusted register for controlling security during a debugging operation. If the ISDB trusted is set then all ISDB registers are visible to the debugger software and all ISDB commands are available for use. In the case that ISDB trusted is cleared then ISDB only permits a restricted set of operations. These aspects of the present disclosure appear in more detail below.

Certain ISDB registers may be made visible to core software. These are accessible via SUPERVISOR mode control register transfer instructions. The core instructions include a breakpoint instruction. When ISDB trusted is set this instruction causes the executing thread to enter a debugging operational mode. This transition shifts thread control to ISDB . In addition to the thread that executed a breakpoint other threads may optionally enter DEBUG mode according to ISDB programming. If ISDB is not trusted or not enabled this instruction is treated as a NOP. Preferably the breakpoint instruction is the only instruction in a packet.

Having listed the various components of ISDB what follow are a brief operational description and introduction to the constituent parts of the control or logic circuitry for performing non intrusive trusted and untrusted debugging operations of DSP . ISDB controller handles a variety of tasks including a implementing various ISDB registers b synchronizing the MCD external break and resume triggers and the ETM break trigger to DSP before they are forwarded to CU for further processing c generating MCD break and resume triggers based on debug mode status of core and d adding a pipeline stage for signals sent out to DSP sub system such as ISDB interrupt break event etc.

CU includes circuitry and instructions capable of handling the tasks such as a processing breakpoints and generating break triggers to each thread b generating micro break and micro resume commands c maintaining ISDB status and mailbox registers and d implementing the certain ISDB registers. CU includes a breakpoint processing logic BPL block as appears in for processing all the breakpoints and generating a macro break request to a micro command generator of CU ISDB controller . The micro command generator processes the macro break request along with instruction stuff commands instruction step and resume commands and issues micro break and resume commands to CU for pipeline control.

CU ISDB controller maintains the state of ISDB based on the break and resume acknowledge signals received back. The mailbox functions of CU ISDB controller maintain mailbox registers used for communication between the host debug software and the DSP core processor. These mailbox functions also contain ISDB status registers.

The per thread mode state diagram of is supported by various instructions or events. These include Except or internal exception event an Int or external interrupt event an RTE or software return instruction from exception mode and SSR or update to SSR register instruction a Stop or software stop instruction that may be entered from any mode a Start or software Start Instruction that also may be entered from any mode a trap or software Trap Instruction a Wait or software wait Instruction a Resume or software Resume Instruction a DE or Debug Event and a DR or Debug Instruction. While the functions in different implementations of the claimed subject matter may vary slightly from those here presented the meanings of Start Wait Resume DE and or DR may be given their broadest interpretations consistent with the scope of the claimed subject matter.

Registers are available in DSP in both USER mode and SUPERVISOR mode . The user mode registers are divided into a set of general registers and a set of control registers. General registers are used for all general purpose computation including address generation scalar and vector arithmetic. Control registers support special purpose functionality such as hardware loops predicates etc. General purpose registers are 32 bits wide and may be accessed as single registers or as aligned pairs of two registers. The general register file provides all operands for instructions including addresses for load store data operands for numeric instructions and vector operands for vector instructions.

DEBUG mode provides a special state where the thread is waiting for commands from ISDB . Whenever an ISDB Debug Event occurs such as by the execution of a software breakpoint instruction a break command from ISDB or occurrence of a hardware breakpoint indicated threads may enter DEBUG mode . While in DEBUG mode the core is controlled by ISDB via commands from JTAG interface . When the ISDB releases the thread due to execution of a resume command the thread may resume operation according to their current mode settings. When a thread is in DEBUG mode it is controlled by ISDB and cannot be controlled by other threads. A Wait Resume Start or Stop instruction from a running thread targeting a thread in DEBUG mode may be ignored. Similarly a Non Maskable Interrupt NMI may be ignored by threads in DEBUG mode .

A HARDWARE RESET mode not shown in and DEBUG mode are global to all threads. Whenever the hardware reset pin is asserted regardless of any thread s processing state DSP may enter HARDWARE RESET Mode. In HARDWARE RESET mode all registers are set to their reset values. No processing may occur until the hardware reset pin is de asserted. When the reset pin is asserted the processor may transition into reset mode and all registers may be reset to their HARDWARE RESET values. After the reset pin is de asserted thread T may be given a soft reset interrupt. This may cause thread T to enter SUPERVISOR mode and begin executing at the reset vector location. All other threads may remain off. At this point the software is free to control mode transitions for each thread individually.

In it is seen that BPL circuit of CU ISDB controller includes break triggers from six different sources including hardware breakpoints 0 1 HWBKPT0 and HWBKPT1 software breakpoint SWBKPT JTAG breakpoint JTAGBKPT ETM embedded trace macro breakpoint ETMBKPT and external breakpoint EXTBKPT . Break trigger through and debug mode status input go to encode break encoder to cause DSP to operate in DEBUG mode . Output from encoder includes three 3 breakpoint information bits and a breakpoint valid bit . Breakpoint information data enters breakpoint information circuit to cause a breakpoint information JTAG interface command . Breakpoint bit also generates OR gate input and reset circuit input. Reset circuit receives either a UCG resume thread number or a reset input to generate reset control output into OR gate . Either valid bit or reset output may cause OR gate to generate BPL breakpoint output .

The break triggers in BPL circuit are processed along with the corresponding TNUM mask to generate macro break trigger to each of the threads. The macro break trigger bpl breakTnum ANY 0 is maintained until the corresponding thread is resumed. The number of pipeline stages that can be used in BPL is driven by hardware breakpoints which are precise breakpoints i.e. the instruction that triggers hardware breakpoint match must not be executed. The thread switches to debug mode after executing the program until that instruction. The disclosed embodiment provides a macro break trigger one cycle after the break triggers arrive. For that reason the breakValid input is logically OR ed with its latched version input to generate bpl breakTnum ANY 0 output .

Through the use of breakpoints the six threads of DSP may individually enter and exit DEBUG mode . A breakpoint trigger may come from five sources which correspond to the five different types of breakpoints supported in ISDB . Upon hitting a breakpoint a thread transitions from its current mode e.g. WAIT RUN to DEBUG mode . In DEBUG mode the thread waits for commands from ISDB . A thread in OFF mode is powered down and may not accept any commands from ISDB . The latency of entering DEBUG mode is implementation defined such as in the present disclosure as relating to the event a power collapse. For example an implementation may choose to complete a given operation for example finish an outstanding load request before entering DEBUG mode . In one embodiment a thread identifier register contains an 8 bit read write field and is used for holding a software thread identifier. This field is used by the hardware debugger to match breakpoints.

There are a number of different ways to enter a breakpoint process. For example for HWBKPT1 and HWBKPT2 breakpoints if a register equals a predetermined value then when the program counter PC matches the predetermined value then the process goes into the DEBUG mode . ASIDs Address Space Identifiers are tags similar to process IDs in a process or a particular thread in a multithreaded process. So physical address virtual address ASID PC or other qualifiers may be used to optionally obtain a fix of the location of the program in a space at which point a breakpoint may occur. The uses of breakpoints here referenced are more particularly disclosed in the commonly assigned U.S. patent applications by L. Codrescu et al and entitled NON INTRUSIVE THREAD SELECTIVE DEBUGGING METHOD AND SYSTEM FOR A MULTI THREADED DIGITAL SIGNAL PROCESSOR. The disclosed subject matter provides a path for moving into a DEBUG mode in the event of a breakpoint such as those of . The disclosed subject matter controls which thread or sets of threads in the DSP go into the DEBUG mode .

The presently disclosed method and system for performing trusted and untrusted debugging operations provide various levels of security that may be applied during both internally and externally controlled debugging operations. Because debugging operations potentially expose critical DSP software to the source of the debugging actions there is the need to know and control who may perform debugging operations. For trusted debugging operations complete access to the software and its operation is possible. For necessary untrusted operations e.g. from a not fully trusted third party only limited access to the software and perhaps memory and registers is possible.

In general ISDB users may be classified as trusted and untrusted users. Trusted users may include known software developers e.g. those creating kernel and application level programs while untrusted users may include OEMs third party developers end users etc. In DSP the operating system for core processor is the manager of security concerns and understands which resources registers memory locations devices and services are allowed for various users. The DSP operating system allows untrusted users to debug their applications according to the value of a supervisor only core control ISDB TRUSTED bit that only the operating system may set. If the ISDB use is trusted all features and privileges are allowed. The ISDB can perform any instruction in supervisor mode.

To demonstrate illustrative circuitry for performing the presently disclosed trusted and untrusted debugging operations includes ISDB JTAGSync circuit . ISDB JTAGSync circuit includes an ISDB test data register which DSP may use to read and write the ISDB control registers. ISDB JTAGSync circuit provides the synchronization logic between the ISDB test data register operating on DB tck and the ISDB control registers operating in the DSP clock domain. By reading and writing the ISDB control registers DSP performs various debug tasks supported by the ISDB .

In the implementation of ISDB JTAGSync circuit receives JTAG isdb chain in signal into ISDB Test Data Register to generate JTAG isdb chain out signal . ISDB Test Data Register includes read write R W bits Address bits 6 0 212 and Data bits 31 0 214. Values in R W bits go to AND gate as do Sync circuit output and CU trustedDebug input . JTAG isdb chain update tkl signal and ISDB CLK signal control the operation of Sync circuit . Address information from Address bits may be received by Address Decode circuit which feeds ISDB Registers . ISDB Registers transfers data with Data bits 31 0 in response to a write enable signal from AND gate .

Communication through a SYSCFG register as a 40 bit packet identifies the ISDB register to read write and a 32 bit data payload. This packet format supports up to 64 control registers which can be 32 bits wide each. The valid bit of a particular register indicates the data portion to be valid or not. On a control register read or write JTAG interface returns an invalid value if the core is powered off in the process of powering up down if access is not currently permitted to the specified register or if the specified register is reserved.

SYSCFG register is a supervisor only control register. Interacting with ISDB ISDB core ready bits indicate whether core processor of DSP is ready to interact with the host debugger. All JTAG register reads and writes may return an invalid status until the ISDB core ready bit is set i.e. has a value 1 .

ISDB trusted bit controls security such that if ISDB trusted bit is set i.e. has value 1 then all ISDB registers are visible to the debugger software and all ISDB commands are available for use. In the case that ISDB TRUSTED is cleared i.e. value 0 then ISDB only permits a restricted set of operations. Only the core processor operation system may set ISDB trusted bit .

As an example of how the present implementation may might work consider how a breakpoint could be set. The host debugger software puts a command in the mailbox set breakpoint . The host debugger software would then raise the debugger interrupt. Then the core processor operating system may take the interrupt sees the command and acknowledges it with a response in the outgoing mailbox. The host debugger software then may proceed to give more information such as PC and thread name. These bits of information are received and acknowledged via the mailbox interrupt mechanism. The core processor operating system once it verifies that the user is allowed to set this breakpoint may set a software TRAP at the desired point. Once the breakpoint is hit it may trap to the core processor operating system whereby the core processor operating system can send a mailbox message to ISDB that the breakpoint was hit.

In summary the disclosed subject matter provides a method and system for controlling debugging operations for trusted and untrusted user and includes steps circuitry and instructions for operating a core processor process within core processor and a debugging process within a debugging mechanism of the digital signal processor the debugging mechanism associated with the core processor. Core processor determines the origin of debugging control as trusted debugging control or untrusted debugging control. In the event that debugging control is trusted debugging control the trusted debugging control is provided a first set of features and privileges. Alternatively in the event that debugging control is untrusted debugging control the untrusted debugging control is provided a second restricted set of features and privileges. Accordingly the present disclosure maintains security in the operating of the core processor process according to the determination of the debugging control as untrusted debugging control or untrusted debugging control.

The processing features and functions described herein for trusted and untrusted non intrusive thread selective debugging in a multi threaded digital signal processor may be implemented in various manners. For example not only may DSP perform the above described operations but also the present embodiments may be implemented in an application specific integrated circuit ASIC a microcontroller a digital signal processor or other electronic circuits designed to perform the functions described herein. Moreover the process and features here described may be stored in magnetic optical or other recording media for reading and execution by such various signal and instruction processing systems. The foregoing description of the preferred embodiments therefore is provided to enable any person skilled in the art to make or use the claimed subject matter. Various modifications to these embodiments will be readily apparent to those skilled in the art and the generic principles defined herein may be applied to other embodiments without the use of the innovative faculty. Thus the claimed subject matter is not intended to be limited to the embodiments shown herein but is to be accorded the widest scope consistent with the principles and novel features disclosed herein.

