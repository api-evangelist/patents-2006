---

title: Methods and apparatus to manage hardware resources for a partitioned platform
abstract: Methods and apparatus are disclosed to boot a basic input/output system (BIOS) for a partitioned platform. An example method disclosed herein identifies at least one hardware component unique to a partition, determines which hardware components have commonality with the partition, initializes the at least one hardware component having commonality, and initializes the at least one hardware component unique to the partition. Other embodiments are described and claimed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07640426&OS=07640426&RS=07640426
owner: Intel Corporation
number: 07640426
owner_city: Santa Clara
owner_country: US
publication_date: 20060331
---
This disclosure relates generally to computer system platforms and boot procedures thereof and more particularly to methods and apparatus to optimize a basic input output system BIOS for a partitioned platform.

Computing devices personal computers workstations and servers hereinafter computer or computers typically include a basic input output system BIOS as an interface between computer hardware e.g. a processor chipsets memory etc. and an operating system OS . The BIOS includes firmware and or software code to initialize and enable low level hardware services of the computer such as basic keyboard video disk drive input output I O port and chipset drivers associated with a computer motherboard.

A computer that executes separate and multiple copies of an OS on computer hardware is referred to as a partitioned platform. Each instance of a separate OS on the platform is referred to as a partition of the platform and may use shared hardware resources e.g. same central processing unit CPU same bus etc. yet use non overlapping subset s of memory e.g. random access memory RAM read only memory ROM dynamic random access memory DRAM hard drive space etc. .

A partitioned platform may also have dedicated resources instantiated by server hard partitioning. Servers that employ hard partitioning may have a complete set of resources fully replicated in each partition. A rich i.e. complete set of resources may include multiple CPU s large amounts of memory and many I O devices. As such each partition separated by various hardware mechanisms typically includes a full BIOS that operates fully and independently. The hardware mechanisms for separating partitions such as a service processor are expensive to implement and time consuming.

Whether the underlying resources i.e. the hardware and associated systems are shared or dedicated each partition executes in an environment that is independent of other environments within other partitions of the platform. Because the partitions operate independently and are unaware of the existence of any other partitions on the platform the applications executing on their particular partitions are secure from one another. In such a case even if one application contains a security flaw such vulnerability is limited to only the breached partition thereby leaving any other partitions unaffected. However such independence results in each partition s BIOS executing all of its initialization instructions even if one or more of the partitions has already executed such instructions.

Prior to partition creation the platform hardware initiates a CPU reset upon power up. As discussed in further detail below one of the multiple processors is typically hard coded to access a specific memory location such as a fetch to BIOS boot instructions. The BIOS initializes memory and a base minimum amount of platform hardware to eventually allow each partition to run independently. However creating each partition also requires initialization of a service processor . The service processor thereafter creates each partition in a serial manner. As a result each of the partition BIOS performs initialization in a serial manner. Initialization may include but is not limited to power on self test POST procedures for each CPU and memory . Furthermore because the platform hardware BIOS already initialized the memory the serial creation of partitions by the service processor results in redundant procedures. For example such POST procedures already performed by the platform BIOS are repeated when each partition BIOS also performs memory initialization thereby wasting significant amounts of time.

Generally speaking each computer system has a particular set of hardware that when working together allows the computer system to execute an operating system. Such computer systems may include personal computers workstations PDAs kiosks and servers. Furthermore upon successful initiation of an operating system the computer system may thereafter execute particular user applications such as word processing applications spreadsheet applications Internet browser applications games and or other custom and commercial applications. Prior to executing the applications the operating system typically initializes and takes control of the computer system hardware including hard drive s memory I O facilities including but not limited to disk adapters compact disk CD drives digital versatile disk DVD drives local area network LAN adapters serial ports terminals graphics audio cards etc. Because the operating system is itself a software application read from a hard drive a base level initialization of the underlying hardware is accomplished via BIOS procedures before the operating system may take overall control of the computer system. Base level initialization may include initialization of computer system components such as for example main memory e.g. RAM a non volatile storage e.g. a hard drive a central processing unit CPU and various chipsets.

Typical approaches to initializing a partitioned platform may employ a full platform set of resources to be part of every partition sometimes referred to as server style hard partitions. Benefits of a partitioned platform include a prevention of conflicts between applications i.e. programs running on a computer running on any other partitions. For example if an error occurs in one partition the execution of applications in other partitions is unaffected and continues as normal. Consequently the hard partitions typically include the service processor to initialize parts of the system and create partitions before any CPUs are allowed to perform duplicative initialization procedures due to a duplicate BIOS in each partition. Alternatively a partitioned platform may be implemented by virtualization to create soft partitions with a full or emulated BIOS in each partition. For example partitions implemented by virtualization typically have no service processor and employ a single CPU to initialize the system pursuant to a system wide BIOS. The VMM is loaded by the CPU to create individual partitions for the platform. Additionally the VMM may provide an individual full BIOS in each partition that implements redundant operations or the VMM may include stubs or fake BIOSs for each partition. While the methods and apparatus to optimize a BIOS for a partitioned platform described herein apply to either partitions created by way of virtualization partitions created by server style hard partitions or various combinations thereof the remaining embodiments are described without limitation in view of server style hard partitions. As each partition includes a copy of BIOS instructions additional memory resources are consumed by having multiple copies of the same BIOS on a memory device e.g. shared RAM shared hard drive etc. .

Similar to a single partition computer server system a multi partitioned computer server system also performs low level initialization procedures during boot time. As discussed above the BIOS routines instructions typically dictate hardware functionality of the hardware platform to prepare various components for operation before an operating system OS takes control of the computer server system. Because each partition has a BIOS the initialization of each partition typically executes the BIOS instructions some of which perform POST procedures instructions on various pieces of platform hardware.

POST procedures are programs that ensure hardware is present and working properly before loading an operating system. When problems are detected as a result of POST procedures the computer server system typically emits beeps from a speaker because video drivers may not yet be resident and operating to enable video display of errors to a user. Various BIOS manufacturers have unique beep codes that allow diagnostics without system video capabilities. The POST procedures that execute on hardware vary in complexity and time to complete. A very thorough POST procedure typically takes a significant amount of time to complete execution.

When a typical computer system e.g. a non partitioned system is powered up from a cold boot a CPU reset is invoked. In particular a chipset or CPU is typically hard coded to fetch the first BIOS boot instructions during power up at the top of an addressable memory e.g. a flash memory . The conventional BIOS boot process may begin executing BIOS boot instructions located at the addressable memory location sometimes referred to as a jump location and initialize a sufficient amount base level of platform hardware prior to more advanced sub system initialization procedures. However a computer system employing server style hard partitioning typically invokes the service processor prior to the CPUs . The service processor will typically have its own BIOS and execute in a monolithic e.g. embedded ROM style set of programs and not have access to more advanced resources such as disks and or network resources. Accordingly the service processor may use explicit dedicated resources e.g. RAM ROM etc. that are not used by the normal execution of the system. Additionally the service processor may perform various POST procedures on various system resources and initialize a complex interconnect that allows and or restricts various CPUs to from access of various system resources such as RAM and or ROM. However while each one of the CPUs executes the BIOS e.g. one of such BIOS execution results in redundant POST procedures.

For example every partition for a typical platform requires a CPU and memory for proper operation. In view of the example first partition when the processor CPU initializes it refers to the BIOS which advances through various initialization procedures. Such procedures include an initialization of memory which was already initialized at a global level by the BIOS of the platform hardware . Upon completion of the creation of the first partition the service processor proceeds to create the second partition . Much like the initialization of the first partition a second CPU of the several processors refers to an addressable memory location that permits execution of BIOS instructions. The BIOS instructions execute to initialize hardware including the memory that was previously initialized by the platform BIOS and by the first partition BIOS . Persons of ordinary skill in the art will appreciate that such a serial initialization procedure includes redundancies that consume valuable time. Hardware initializations performed at early stages of a computer system boot process establish that for example the memory is working properly. Despite this determination subsequent partition creation by the service processor results in compounding redundancies that are exacerbated as the number of partitions for any particular computer system grows.

Each partition includes many of the same BIOS instructions such as POST instructions to verify properly functioning hardware e.g. a hard drive test RAM integrity test etc. . Those same instructions are repeated multiple times despite the fact that previously executed POST instructions have indicated satisfactory results for the same hardware in conjunction with a POST performed by an adjacent partition. Such duplicative POST instructions consume valuable time and computing resources during the boot process.

Manufacturers of enterprise class servers are particularly concerned with the amount of time consumed during the boot process. Computer server systems that boot faster are more likely to satisfy rigorous metrics of high availability servers. A high availability server is defined by its ability to be up and running 99.999 of the time during a year. This high standard translates into a limit of no more than approximately five minutes of downtime per year. Initialization of various hardware components consumes a substantial amount of boot time. While some hardware and or firmware component initialization procedures require only an appropriate voltage be applied to it other hardware and or firmware components require additional tests to verify proper operation. In particular many hardware component initialization procedures include POST. When redundant hardware POST procedures are performed there is no additional knowledge gained about the hardware in exchange for the time spent performing the redundant POST procedures.

Computer systems may also contain many more types of hardware components that require initialization with or without POST procedures. For example such other hardware components may include disk adapters LAN adapters serial parallel ports advanced graphics cards AGP cards sound cards peripheral component interconnect PCI cards and small computer system interface SCSI devices. When a computer system applies power to each of these devices they may each execute independent POST procedures such as POST procedures stored on a local BIOS typically referred to as an option ROM of the component. Regardless of the type of hardware devices of the computer system that are to be initialized or whether the BIOS includes initialization for POST and non POST devices duplicative initialization of the same hardware component wastes significant amounts of time in a partitioned system.

Unlike the platform hardware of the platform hardware of does not include a service processor. Furthermore a BIOS of is shown inside the platform hardware as is a partition manager . Without limitation the partition manager may be implemented as an application programming interface API various hardware gates and or other programs stored on a non volatile memory that is loaded into memory.

The partition manager includes an overall description of the platform . In other words the partition manager includes a road map of partitions. Because the partition manager is aware of the total number of partitions and has access to the per partition BIOS for each partition the partition manager determines which system resources are allocated to the partitions . As discussed in further detail below the partition manager may configure the BIOS to take advantage of such multi platform resource allocation by initializing such hardware once rather than multiple times during a platform boot and or during additions of new partitions. This initialization of such hardware may be done once in the BIOS or in the per partition BIOS depending on what hardware is allocated to which partition. Furthermore the partition manager automatically analyzes the platform for additional partitions that may be added during runtime. For example a system administrator may invoke an additional partition to accommodate a new application such as for example a new database indexing application. Subsequently or contemporaneously the partition manager may analyze the platform to detect the new partition and determine which resources it requires by accessing its per partition BIOS. Underlying hardware resources that have already been initialized are not re initialized e.g. POST procedures . However if the newly added example partition uses a hardware component that has not previously been initialized and or is not listed in the per partition BIOS of the other partitions then such hardware component s are initialized at that time.

In the example partitioned platform platform initialization may be separated into four parts. First underlying platform hardware that affects all partitions is initialized. Similarly any such hardware needed before individual partitions may be created is initialized. In other words the hardware that affects all partitions has a degree of commonality with those partitions. As discussed above the hardware that affects all partitions is determined in part by the information and or prior efforts of the partition manager . Initialization of the underlying platform may proceed from a cold boot in the following manner. A CPU reset causes the CPU to begin execution at a hard coded memory location that typically contains a jump instruction that points to an alternate location containing BIOS boot instructions. The processor boots the BIOS which proceeds to initialize a minimum or base level amount of platform hardware that is required for the partition manager . The partition manager may be an API and or other program stored on a non volatile memory e.g. ROM flash memory hard drive that is loaded into memory for operation. For example while the memory may be several gigabytes in size the BIOS may initialize only a small portion sufficient to load the partition manager from for example flash memory that may be located on a motherboard. Because the partition manager was invoked after a minimal and or base level amount of resources initialized the partition manager may proceed to partition creation without having consumed a large amount of time. The partition manager may also identify any additional platform hardware that may require initialization due to a commonality or dependency on the several partitions .

During a second part of platform initialization each individual partition is created in which fragments of the underlying hardware are allocated to each partition. For example a specific non overlapping range of memory may be allocated to each partition in a hard drive RAM etc.

Third additional platform resources not previously initialized on a global scale are now initialized in view of the needs of each particular partition. For example if the underlying platform hardware includes an individual CPU for the first partition second partition and third partition then the partition manager may invoke a CPU reset on each of these processors simultaneously. As a result each of the CPUs begins execution from its hard coded memory location which may further point to a jump location. Such memory locations or jump locations point to the respective per partition BIOS for each partition . Unlike the platform of the platform of initializes each processor specific memory blocks and I O resources in parallel rather than in series. Furthermore each partition invokes initialization procedures in view of only such hardware resources necessary for its proper operation. Thus if the first partition is dedicated to performing database management operations in which it downloads and uploads record entries from a network then that partition only performs POST procedures for its particular associated network adapters and ignores any initialization procedures for hardware unrelated to the needs of the first partition .

During a fourth part of platform initialization upon successful completion of a base level hardware initialization partition control is handed off to the corresponding OSs in which each OS may have specific initialization procedures within each partition.

The BIOS initializes underlying platform hardware that is common to any existing and or planned partitions. At a most rudimentary level each partition requires some processor resources some memory resources and some I O device resources for proper operation. As such the BIOS consolidates the base level initialization at one time to allow each individual partition to take advantage of underlying platform hardware that is ready to operate upon request. Unlike the known computer platform of in which each partition performed duplicative initialization instructions on the underlying platform hardware the BIOS of saves considerable amounts of time as a compliment to the per partition BIOS by performing such initialization instructions e.g. POST instructions for minimal required memory and or various I O devices at a single time prior to further initialization by each individual partition . Furthermore each of the partitions performs initialization procedures in parallel rather than serial thereby saving additional time.

Because the BIOS initializes the base level platform hardware which is needed prior to creation of some and or all of the partitions each of those partitions is relieved of that burden and may use its corresponding per partition BIOS in a focused and time efficient manner. Such focused initialization is accomplished with the per partition BIOS to address specific platform hardware that is needed by a particular partition.

Although illustrates platform hardware to include processors memory and I O devices the underlying platform hardware may include any other hardware components based upon the particular needs and or objectives of various partitions.

The process begins with power up block of a computer system that will be configured to have multiple partitions. The computer system may include underlying platform hardware such as the hardware of that further includes various peripherals that maintain and execute independent BIOS procedures. Such peripherals may include I O adapters disk drive adapters and network adapters. The BIOS initializes a base level amount of platform hardware resources for the platform before the partitions are created block . Example base level hardware initialization may include initializing a relatively small amount of memory which permits the partition manager to be loaded from a non volatile memory e.g. flash memory hard disk ROM etc. . When such minimal underlying hardware is initialized to support the partition manager the number of platform partitions that will independently execute on the platform is determined block . The partition manager determines the number of partitions by accessing the configuration settings stored in the non volatile memory. Configuration settings may include but are not limited to the number of partitions the hardware common to the partitions the per partition BIOS settings of each partition resource allocation setting for each partition e.g. dedicated RAM and or hard drive memory locations for each partition and other BIOS settings. Additionally or alternatively various settings may be retrieved by the partition manager from a non volatile memory such as in a flash memory ROM and or hard disk. Accordingly the partition manager determines resources to allocate to the partitions at block . In particular the partition manager populates each per partition BIOS with configuration settings as specified in memory e.g. memory and or non volatile memory . The partition manager creates each partition block so that specific hardware resources are allocated to each partition . For example the partition manager may allocate one or more processors and or unit of memory to the first partition while the second partition only includes a single processor and a single unit of memory . Additionally or alternatively the partition manager may configure the platform hardware such that only allocated resources will be detected by each per partition BIOS As such any per partition BIOS may have exclusive access to a subset of partition hardware. In the event that a partition has access to platform hardware for which it is not configured authorized to use the per partition BIOS associated with that partition will only discover the platform hardware that the partition manager deemed appropriate.

Because each partition is created wherein each partition is assigned its own subgroup of platform resources the per partition BIOS of each partition executes independently i.e. in parallel of the other partitions blocks A B C . As a result each partition may initialize its resources in parallel without any temporal dependency of completion by another partition. For example the first partition per partition BIOS may initialize a specific unit of 500 megabytes of memory block A while the second partition per partition BIOS may initialize a separate specific unit of 500 megabytes of memory block B at the same time. Persons of ordinary skill in the art will appreciate that each per partition BIOS may continue such independent and parallel initialization procedures for other platform hardware that is specific to each of the created partitions . Such focused use of the per partition BIOSs eliminates both excessive memory consumption and time consumption associated with multi partition computer systems as compared with traditional multi partition computer systems that employ redundancy techniques for initialization purposes.

Partitions that have initialized a sufficient amount of platform hardware via the per partition BIOS instructions may hand off control to an OS blocks A B C . While specific details regarding additional OS initialization procedures is beyond the scope of this patent such OS initialization procedures may occur in parallel blocks A B C as shown in .

Although the foregoing discloses example systems including among other components firmware and or software executed on hardware it should be noted that such systems are merely illustrative and should not be considered as limiting. For example it is contemplated that any or all of these hardware and software components could be embodied exclusively in dedicated hardware exclusively in software exclusively in firmware or in some combination of hardware firmware and or software. Accordingly while the following describes example systems persons of ordinary skill in the art will readily appreciate that the examples are not the only way to implement such systems.

The system of the instant example includes a processor . For example the processor can be implemented by one or more Intel microprocessors from the Pentium family the Itanium family the XScale family or the Centrino family. Of course other processors from other families are also appropriate.

The processor is in communication with a main memory including a volatile memory and a non volatile memory via a bus . The volatile memory may be implemented by Synchronous Dynamic Random Access Memory SDRAM Dynamic Random Access Memory DRAM RAMBUS Dynamic Random Access Memory RDRAM and or any other type of random access memory device. The non volatile memory may be implemented by flash memory and or any other desired type of memory device. Access to the main memory is typically controlled by a memory controller not shown in a conventional manner.

The computer also includes a conventional interface circuit . The interface circuit may be implemented by any type of well known interface standard such as an Ethernet interface a universal serial bus USB and or a third generation input output 3GIO interface.

One or more input devices are connected to the interface circuit . The input device s permit a user to enter data and commands into the processor . The input device s can be implemented by for example a keyboard a mouse a touch screen a track pad a trackball isopoint and or a voice recognition system.

One or more output devices are also connected to the interface circuit . The output devices can be implemented for example by display devices e.g. a liquid crystal display a cathode ray tube display CRT a printer and or speakers . The interface circuit thus typically includes a graphics driver card.

The interface circuit also includes a communication device such as a modem or network interface card to facilitate exchange of data with external computers via a network e.g. an Ethernet connection a digital subscriber line DSL a telephone line coaxial cable a cellular telephone system etc. .

The computer also includes one or more mass storage devices for storing software and data. Examples of such mass storage devices include floppy disk drives hard drive disks compact disk drives and digital versatile disk DVD drives.

As an alternative to implementing the methods and or apparatus described herein in a system such as the device of the methods and or apparatus described herein may alternatively be embedded in a structure such as processor and or an ASIC application specific integrated circuit .

Although certain example methods apparatus and articles of manufacture have been described herein the scope of coverage of this patent is not limited thereto. On the contrary this patent covers all methods apparatus and articles of manufacture fairly falling within the scope of the appended claims either literally or under the doctrine of equivalents.

