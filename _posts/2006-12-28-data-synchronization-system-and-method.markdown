---

title: Data synchronization system and method
abstract: A method and system for synchronizing data between a network server and a mobile device is provided. In an embodiment, a plurality of object instances may be received from the network server, and at least one object instance may be selected. For each selected object instance, the plurality of object instances may be recursively searched to identify related object instances, the related object instances may be sorted, and the sorted object instances may be sent to the mobile device, followed by the selected object instance. In this manner, data synchronization between the network server and the mobile device may advantageously include only those object instances that are needed by the mobile device, thereby preventing redundant, or omitted, data transfers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09165047&OS=09165047&RS=09165047
owner: SAP SE
number: 09165047
owner_city: Walldorf
owner_country: DE
publication_date: 20061228
---
This application is a continuation of U.S. application Ser. No. 10 608 537 filed Jun. 30 2003 pending the contents of which are incorporated herein by reference.

The present invention relates to a data synchronization method and system. More particularly the present invention relates to a method and system for synchronizing data between a network server and a mobile device.

Enterprise systems manage many of the business processes and applications critical to the success of any particular company including for example order generation and sales activities inventory management customer relations and support product lifecycle and human resources management etc. Typically large scale enterprise systems include one or more enterprise servers and hundreds if not thousands of stationary and mobile devices such as for example personal digital assistants PDAs pocket computers Pocket PCs laptop notebook and desktop computers etc. Enterprise systems may also include other components such as for example middleware servers software application development deployment and administration subsystems intra networks etc.

Generally mobile business application functionality may be distributed between an enterprise server and a mobile device based on many different criteria including for example the specific requirements of the particular business application the processing and storage capacities of the mobile devices etc. In many cases business application data may be created modified and deleted by both the mobile device and the enterprise server. Consequently maintaining the consistency of business application data between the mobile device and the enterprise server is an important component of the enterprise system. An intermediate subsystem such as for example a middleware server may assist the data synchronization process.

Enterprise business applications typically store data as objects records etc. within an application database on the enterprise server. A much smaller subset of these data objects may be duplicated and stored on the mobile device. However enterprise business applications also define various dependencies between data objects and consequently may require all of the related data objects to be present on the mobile device.

Unfortunately in many cases the requirement to store many related data objects on the mobile device conflicts with the storage or processing capacities of the mobile device such as for example using an excessive amount of memory to store all of the related data objects consuming an excessive amount of time or bandwidth to download all of the related data objects etc. Typically an excessive and often redundant amount of related data objects are downloaded to the mobile device thereby adversely impacting the performance of the mobile device and generally of the entire enterprise system. Furthermore if all of the data objects related to a particular data object are not already present on the mobile device that particular data object may not be downloaded at all.

A method and system for synchronizing data between a network server and a mobile device is provided. In an embodiment a plurality of object instances may be received from the network server and at least one object instance may be selected. For each selected object instance the plurality of object instances may be recursively searched to identify related object instances the related object instances may be sorted and the sorted object instances may be sent to the mobile device followed by the selected object instance. In this manner data synchronization between the network server and the mobile device may advantageously include only those object instances that are needed by the mobile device thereby preventing redundant or omitted data transfers.

Enterprise system may include at least one enterprise server coupled to business object database and application database and at least one synchronization server coupled to at least one replica database . Enterprise system may support large scale business applications involving hundreds if not thousands of local and remote users or clients. Generally mobile business application functionality may be distributed between enterprise system and plurality of mobile devices . Various data acquisition functions such as for example order and invoice generation service notification etc. may be performed by mobile device mobile device etc. while other data management activities such as product lifecycle management may be performed by enterprise system .

At least a portion of the information created and maintained by enterprise system often needs to be provided to each of the plurality of mobile devices in order to support the mobile business application functionality apportioned to these devices. Similarly information created or modified by each of the plurality of mobile devices may need to be provided to enterprise system . Advanced mobile business applications may employ object oriented approaches to data management including the use of object classes object instances etc.

Various embodiments of the present invention provide a synchronization server e.g. synchronization server to synchronize object oriented data between enterprise server and plurality of mobile devices . For example synchronization server may receive periodic or aperiodic data updates from enterprise server . These data updates may include instances of various object classes several of which may be related to one another. For example an object instance may include a reference to another object instance and a hierarchy of object instances may be used by the mobile business application. However not all these object instances may need to be sent to plurality of mobile devices . In one embodiment an object instance may be selected by synchronization server and the remaining object instances may be recursively searched to identify object instances that may be related to the selected object instance. The related object instances may be sorted and then sent from synchronization server to one or more of the plurality of the mobile devices . The selected object instance may then be sent from synchronization server to one or more the mobile device.

Enterprise server may be a symmetric multiprocessing SMP computer such as for example an IBM eServer zSeries 900 manufactured by International Business Machines Corporation of Armonk N.Y. a Sun Enterprise 10000 server manufactured by Sun Microsystems of Santa Clara Calif. etc. Business object database and application database may reside on one or more disks or disk farms coupled to enterprise server or alternatively to network . Synchronization server may also be a symmetric multiprocessing SMP computer similar to enterprise server and replica database may reside on one or more disks or disk farms coupled to synchronization server or alternatively to network . Generally enterprise system may be coupled to network . In one embodiment synchronization server and enterprise server may be coupled to network while in another embodiment synchronization server may be coupled to network and enterprise server may be coupled to synchronization server via a virtual private network a local area network a wide area network etc.

Network may include any type or combination of public or private wired or wireless networks including for example a local area network LAN a wide area network WAN a virtual private network VPN the Internet etc. Various combinations and layers of network protocols may operate over network including for example Ethernet i.e. IEEE 802.3 CSMA CD Ethernet Wireless LAN e.g. IEEE 802.11 IEEE 802.16 ETSI HYPERLAN 2 Bluetooth General Packet Radio Service or GPRS etc. Transmission Control Protocol Internet Protocol TCP IP Asynchronous Transfer Mode ATM etc. Enterprise system may communicate with plurality of mobile devices i.e. mobile device . . . D via network . Various well known authentication and data encryption techniques may be used to preserve an appropriate level of security in the public network context including for example HTTPS HyperText Transfer Protocol with Secure Sockets Layer etc.

Plurality of mobile devices may include for example notebook or laptop computers e.g. IBM Thinkpad T Series Notebook pocket computers e.g. HP iPAQ Pocket PC h5450s manufactured by Hewlett Packard of Palo Alto Calif. personal digital assistants or PDAs e.g. Palm Tungsten T Handhelds manufactured by Palm Inc. of Milpitas Calif. smart cellular phones etc. An operating system may also be provided for each mobile device such as for example Palm OS 5 or any one of a number of Microsoft Windows operating systems manufactured by Microsoft Corporation of Redmond Wash. including for example Windows 2000 Windows XP Windows XP Embedded Windows CE .NET Windows Pocket PC 2002 etc. Each of the plurality of mobile devices may also include mobile application software. In an embodiment mobile application software may include various functional layers such as for example a user interface layer UIL or presentation layer a business object layer BOL a business document layer BDL or transaction layer TL etc.

In addition to the operating system each of the plurality of mobile devices may include other software components to support mobile application software such as for example a browser e.g. Microsoft Internet Explorer etc. microbrowser or native user interface a web server a servlet engine runtime interpreters eXtended Markup Language XML parsers data exchange interfaces e.g. Simple Object Access Protocol or SOAP interface etc. authentication and encryption components hardware device drivers etc. In an embodiment one or more of these runtime components may facilitate data acquisition transfer and management between the mobile device and enterprise system . For example a Runtime Framework RF may include several software components to provide various enterprise related services to the mobile software application. These components may be accessed for example through an Application Programming Interface API associated with the Runtime Framework.

In one embodiment the Runtime Framework may include various Java based technologies such as for example Java Virtual Machine JVM Java Server Pages JSP Java 2 Platform Micro Edition J2ME etc. In another embodiment the Runtime Framework may include other mobile or embedded technologies such as for example Microsoft .NET technologies Microsoft eMbedded Visual Basic Microsoft eMbedded Visual C etc. Generally mobile application software may be organized as runtime objects ROs representing executable code embodying various physical and logical constructs such as for example data structures function calls procedures object oriented classes etc. Executable code may reside on the mobile device in various forms such as for example HTML files Dynamic Link Libraries DLLs Visual Basic Application VBA files etc. Each of the plurality of mobile devices may include memory to store these runtime objects as well as memory to store a local database which may include data associated with the mobile application software.

Each of the plurality of mobile devices may include a network interface to connect to network such as for example a coaxial cable interface a fiber optic interface a wireless network interface etc. Plurality of mobile devices may support an on line operating mode when connected to network and an off line operating mode when not connected to network . Data integrity consistency and security may be provided generally by complementary synchronization processes executing on enterprise system and each of the plurality of mobile devices .

In one embodiment the enterprise synchronization process may be performed by enterprise server while in another embodiment and as noted above synchronization server may provide the enterprise synchronization process. In one embodiment the mobile synchronization process may be included within the Runtime Framework while in another embodiment the mobile synchronization process may be an additional component executing on each mobile device. For example the mobile synchronization process may include Sun JDBC technology and employ HTTPS over the network interface.

Enterprise system as well as plurality of mobile devices may include software components expressing the functionality and dependencies of various business processes and data typically architected according to well known object oriented programming OOP methods and constructs. Generally these software components may include application programs and databases interface libraries etc. developed in many cases using object oriented software development tools such as for example SAP Software Development Kit SDK Version 6.2 manufactured by SAP AG of Walldorf Germany etc.

In an embodiment enterprise server may include a plurality of business objects which encapsulate various business methods and data specific to enterprise system while hiding structure and implementation details from higher level software components such as for example business applications. Generally business objects may include data definitions methods operational rules and constraints access specifications etc. that are particular to a specific business component process logical construct etc. Various interfaces may be defined to provide access to the methods and data associated with a particular business object such as for example business application programming interfaces or BAPIs .

Each business object may be created as an instance of a business object type. For example each employee of a company may be represented by an instance of an Employee business object type. Business object types may be stored within a business object repository BOR such as for example business object database etc. while business objects also known as business object instances object instances etc. may be stored within a different database such as for example application database etc. In an embodiment business object may include kernel layer integrity layer interface layer and access layer .

Kernel layer may include data inherently associated with business object . For example an employee business object may include data representing an employee identification number name supervisor business division etc. Integrity layer may include rules and constraints associated with the environment. Interface layer may describe the implementation and structure of the various methods associated with business object and may include one or more associated interfaces such as for example business object interface . Access layer may define various technologies that may be used to access business object such as for example COM DCOM component object model distributed component object model RFC remote function call JAVA CORBA common object request broker architecture etc.

In an embodiment plurality of business object methods i.e. business object method . . . M etc. may also provide access to or operate upon data defined within kernel layer of business object . In this embodiment plurality of business object methods may be constructed as function modules compatible with the Remote Function Call RFC protocol. Each function module may also be associated with a corresponding business object interface such as for example business object interface . Plurality of business object methods may be stored within a business object repository such as for example business object database etc. or alternatively plurality of business object methods may be stored within a different database memory etc.

As discussed above the functionality of a mobile business application may be apportioned between enterprise server and plurality of mobile devices and may generally consist of various methods and processes operating on business application data. These data may be shared between enterprise server and plurality of mobile devices . For example a sales application may include one or more processes executing on enterprise server as well as one or more processes executing on plurality of mobile devices . Enterprise server may create modify and store large volumes of business application data within application database such as for example sales orders customer information etc. while each of the plurality of mobile devices may create modify and store a much smaller volume of these data locally including for example sales orders.

In an embodiment the mobile business application may operate upon business application data defined by various business object types such as for example business object type A business object type B business object type C etc. As discussed above each business object type may express data associated with a physical or logical construct related to a particular business process such as for example sales orders customers etc. while each business object may define a specific instance of a particular business object type such as for example a single sales order a single customer etc. In one embodiment each business object may include a plurality of data fields while in another embodiment each business object may include at least one key as well as several data elements . . . N. The key may facilitate identification of each specific instance of a particular business object type. As discussed above with reference to these data may be accessed through business application programming interfaces or BAPIs. Alternatively these data may be accessed through business application programming interface wrappers or BAPI Wrappers which may add additional rules and functionality to business application programming interfaces.

In one example a mobile business application may employ three business objects to store business application data shared between enterprise server and plurality of mobile devices . Referring to business object may be defined by business object type A and may include key as well as data elements . . . . Business object may be defined by business object type B and may include key as well as data elements . . . . Business object may be defined by business object type C and may include key as well as data elements . . . . In a simple embodiment enterprise server and plurality of mobile devices may each store a copy of these business objects. Modifications to business objects and may be performed by enterprise server as well as by any of the plurality of mobile devices and may be propagated throughout the system by synchronization server .

In one embodiment synchronization server may periodically request all of the data within business objects and from enterprise server compare these data with the contents of replica database and update replica database with those data that have been modified by enterprise server . In another embodiment synchronization server may periodically request only those data within business objects and that have been modified by enterprise server then update replica database with the modified data. In response to individual requests received from each of the plurality of mobile devices synchronization server may send the modified data to each mobile device.

Similarly plurality of mobile devices may individually upload modifications to business objects and to synchronization server . Synchronization server may update replica database with the modified data and then send these modified data to enterprise server . Modifications performed simultaneously by enterprise server and one or more mobile devices etc. may be identified by synchronization server and any contentions may be resolved according to any number of rules such as for example choosing enterprise server data choosing mobile device data choosing the most recent data etc.

In an embodiment enterprise server may operate upon business application data defined by various business object types while plurality of mobile devices may operate upon business application data defined by various synchronization business object types. Generally synchronization business object types may define data shared between enterprise server and plurality of mobile devices and each synchronization business object type may include one or more data fields keys data elements etc. corresponding to one or more business object types. Additionally various methods may be provided to access the data within each synchronization business object type. Each synchronization business object may be created as an instance of a synchronization business object type similar to business object instances.

In one embodiment synchronization business object types may be created by an object oriented software development tool such as for example SAP s Software Development Kit. Using a synchronization business object builder tool e.g. SAP s SyncBO Builder a developer may create synchronization business object types based on one or more business object type definitions. In one embodiment the synchronization business object builder may allow the developer to select various fields from one or more business object type definitions and then automatically generate a synchronization business object type which may include data structure definitions as well as data access methods. Data access methods may include for example replicating an instance of the synchronization business object type from enterprise server to synchronization server downloading an instance of the synchronization business object type from synchronization server to one of the plurality of mobile devices uploading an instance of the synchronization business object type from one of the plurality of mobile devices to synchronization server etc.

In an example a mobile business application may employ three synchronization business objects to store business application data shared between enterprise server and plurality of mobile devices . Synchronization business object type A may include a subset of the data fields within business object type A such as for example a key and two data elements as well as methods associated with accessing these data. Similarly synchronization business object type B may include a subset of the data fields within business object type B as well as methods associated with accessing these data. Similarly synchronization business object type C may include a subset of the data fields within business object type C as well as methods associated with accessing these data. In another embodiment synchronization business object types may include data fields from more than one business object type.

Referring to synchronization business object may be defined by synchronization business object type A and may include key as well as data elements and . In this example key data elements and may correspond to key data elements and of business object respectively. Synchronization business object may be defined by synchronization business object type B and may include key as well as data elements and corresponding to key data elements and respectively of business object . Synchronization business object may be defined by synchronization business object type C and may include key as well as data element corresponding to key and data element respectively of business object . Methods associated with these synchronization business object types are not shown for clarity.

In an embodiment synchronization server and plurality of mobile devices may each store a copy of these synchronization business objects while enterprise server may store the corresponding business objects. Modifications to synchronization business objects and may be performed by any of the plurality of mobile devices while modifications to business objects and may be performed by enterprise server . These modifications may be propagated throughout the system by synchronization server . For example enterprise server may modify data element and in response to a request send the modification to synchronization server . Synchronization server then updates data element within replica database and in response to a request from one or more of the plurality of mobile devices sends updated data element to the mobile device. Similarly mobile device may modify data element and upload the modification to synchronization server . Synchronization server may update data element stored within replica database and then send the modification to enterprise server which updates data element within application database .

In an embodiment a synchronization business object type may include a data element that references a key to a different synchronization business object type. In this manner an instance of a synchronization business object type may refer to an instance of a related synchronization business object type. For example synchronization business object type A may include a subset of the data fields within business object type A such as for example a key and two data elements. The first data element may refer to the key of a second synchronization business object type B. Similarly synchronization business object type B may include a subset of the data fields within business object type B such as for example a key and two data elements. The second data element may refer to the key of a third synchronization business object type C which may include a subset of the data fields within business object type C.

In other embodiments synchronization business object types may include data fields from more than one business object type as well as key references to more than one related synchronization business object type.

Referring to synchronization business object may be defined by synchronization business object type A and may include key as well as data elements and . In this example key and data element may correspond to key and data element of business object respectively while data element may reference key of synchronization business object . Similarly synchronization business object may be defined by synchronization business object type B and may include key as well as data elements and . In this example key and data element may correspond to key and data element of business object respectively while data element may reference key of synchronization business object . Synchronization business object may be defined by synchronization business object type C and may include key as well as data element corresponding to key and data element respectively of business object .

In this example synchronization business object type C may include a subset of the data within business object type C synchronization business object type B may include a subset of the data within business object type B and synchronization business object type A may include a subset of the data within business object type A. Additionally synchronization business object type C may be related to synchronization business object type B and synchronization business object type B may be related to synchronization business object type A. Synchronization business object type C may define country data synchronization business object type B may define customer data and synchronization business object type A may define sales order data. Synchronization business object may represent data associated with a single country key may be a country identifier e.g. US while data element may be a country name e.g. United States . Synchronization business object may represent data associated with a single customer key may be a customer identifier e.g. 101 data element may be a customer name e.g. Brawn while data element may reference key e.g. US . Synchronization business object may represent data associated with a single sales order key may be a sales order identifier e.g. 5001 data element may reference key e.g. 101 while data element may be a delivery date e.g. Apr. 6 2003 .

A plurality of object instances may be received from a network server. In an embodiment synchronization server may receive plurality of object instances from enterprise server . Generally plurality of object instances may be stored within replica database and as discussed above synchronization server may receive periodic updates e.g. additions deletions modifications etc. to these object instances. In one embodiment all of the object instances within plurality of object instances may be received from enterprise server while in another embodiment only those object instances that have been modified added deleted etc. since the last update may be received from enterprise server . In a further embodiment only those data elements within each of the plurality of object instances that have been modified may be received from enterprise server .

In an embodiment plurality of object instances may include more than one type of synchronization business object. For example plurality of object instances may include various object instances associated with Country synchronization business object type e.g. object instances and Customer synchronization business object type e.g. object instances and Sales Order synchronization business object type e.g. object instances and etc. Generally as discussed with reference to synchronization business object types may be related to one another. In an embodiment one synchronization business object type may include a data element that references a different synchronization business object type.

In one example Sales Order synchronization business object type may include a Customer ID data element that may reference a Customer ID key within Customer synchronization business object type as indicated by connecting arrow . Consequently each Sales Order object instance includes a data element value i.e. Customer ID value that identifies a related Customer object instance. Object instance for example includes a Customer ID value equal to 101 which identifies object instance . Similarly object instance includes a Customer ID value equal to 102 which identifies object instance object instance includes a Customer ID value equal to 103 which identifies object instance etc.

In another example Customer synchronization business object type may include a Country ID data element that may reference the Country ID key within Country synchronization business object type as indicated by connecting arrow . Consequently each Customer object instance includes a data element value i.e. Country ID value that identifies a related Country object instance. Object instance for example includes a Country ID value equal to US which identifies object instance . Similarly object instance includes a Country ID value equal to US which also identifies object instance object instance includes a Country ID value equal to JP which identifies object instance etc. In this example none of the Customer object instances include a Country ID values equal to DE or GB consequently none of the Customer object instances reference object instances or . Expressed differently object instances and may not be related to any Customer object instances.

Accordingly a hierarchy of object instances may be created based on these relationships. Generally with respect to the embodiment depicted in each Country object instance may be referenced by one or more Customer object instances while each Customer object instance may be referenced by one or more Sales Order object instances. For example object instance may be referenced by object instance e.g. via Customer ID value 101 while object instance may be referenced by object instance e.g. via Country ID value US . Consequently object instance may be directly related to object instance according to a first tier relationship and indirectly related to object instance according to a second tier relationship. Similarly object instance may be directly related to object instance . In other words any particular object instance may be related to one or more different object instances according to a hierarchical relationship e.g. first tier second tier etc. .

At least one object instance may be selected from the plurality of object instances. In a simple embodiment all of the plurality of object instances may be selected and then sent to the mobile device. In a more sophisticated embodiment at least one object instance may be selected from plurality of object instances . Many selection criteria may be applied to plurality of object instances such as for example object type object instance data element value etc.

In an embodiment at least one object instance may be selected from plurality of object instances based on at least one filtering criteria. For example all Sales Order synchronization business object instances may be selected i.e. object instances and . In another example all Sales Order synchronization business object instances having a delivery date of Apr. 23 2003 may be selected i.e. object instances and . Combinations of filtering criteria may also be used such as for example Sales Order synchronization business object instances having a delivery date of Apr. 23 2003 i.e. object instances and combined with Customer synchronization business object instances including a Country ID equal to US i.e. object instances and .

For each selected object instance the plurality of object instances may be recursively searched to identify related object instances the related object instances may be sorted the sorted object instances may be sent to the mobile device and then the selected object instance may be sent to the mobile device. Each of these processes will be described below with reference to the selection of Sales Order synchronization business object instances having a delivery date equal to Apr. 23 2003 object instances and as described above. Consequently for the purposes of the following discussion object instance may be selected first while object instance may be selected second.

The plurality of object instances may be recursively searched to identify related object instances. In an embodiment the Sales Order synchronization business object type may include a Customer ID data element that may reference the Customer ID key of the Customer synchronization business object type. Similarly the Customer synchronization business object type may include a Country ID data element which may reference the Country synchronization business object type via the Country ID key. Consequently for the first selected object instance i.e. object instance all of the object instances associated with the Customer synchronization business object type i.e. object instances and may be searched to identify the object instance having a Customer ID value equal to 101 i.e. object instance . Next all of the object instances associated with the Country synchronization business object type i.e. object instances and may be searched to identify the object instance having a Country ID value equal to US i.e. object instances . Thus a first tier relationship between object instance and object instance may be identified while a second tier relationship between object instance and object instance may also be identified. Generally object instances may be recursively searched as required by the relationships defined between the various synchronization business object types.

The related object instances may be sorted . In an embodiment related object instances identified through the recursive search may be sorted according to the level of relationship to the selected object instance in descending order ascending order etc. For example related object instances and may be sorted in descending order so that the object instance having the furthest relation to selected object instance i.e. object instance may be placed first in the sort order while the object instance having the closest relation to selected object instance i.e. object instance may be placed second in the sort order etc. In this manner the sort order may advantageously reflect the hierarchical relationship between related object instances. In one embodiment copies of the related object instance may be sorted while in another embodiment pointers to the memory locations of each related object instance may be sorted. Various well known data sorting methods and techniques may also be employed.

The sorted object instances may be sent to the mobile device. In an embodiment the first object instance in the sort order i.e. e.g. the object instance having the furthest relation to the selected object instance may be sent to the mobile device and the remaining related object instances may be sent in order thereafter. For selected object instance related object instance may be sent first to the mobile device while related object instance may be sent second. Advantageously any particular object instance that includes a reference to another object instance will be sent after the referenced object instance.

The selected object instance may be sent to the mobile device. In an embodiment after the sorted object instances are sent to the mobile device the selected object instance may be sent . For example related object instance may be sent first related object instance may be sent next and then selected object instance may be sent last. Advantageously each referenced object instance may be sent to the mobile device in advance of the referring object instance thereby avoiding many problems associated with missing or unresolvable references within object instances after they are sent to the mobile device e.g. uninitialized pointers etc. .

Similarly for selected object instance the plurality of object instances may be recursively searched to identify related object instances. For example all of the object instances associated with the Customer synchronization business object type i.e. object instances and may be searched to identify the object instance having a Customer ID value equal to 102 i.e. object instance . Next all of the object instances associated with the Country synchronization business object type i.e. object instances and may be searched to identify the object instance having a Country ID value equal to US i.e. object instance . Thus a first tier relationship between object instance and object instance may be identified while a second tier relationship between object instance and object instance may also be identified.

Likewise for selected object instance the related object instances may be sorted the sorted object instances may be sent to the mobile device and then the selected object instance may be sent to the mobile device. For example related object instances and may be sorted in descending order so that the object instance having the furthest relation to selected object instance i.e. object instance may be placed first in the sort order while the object instance having the closest relation to selected object instance i.e. object instance may be placed last in the sort order. Related object instance may then be sent first to the mobile device and related object instance may be sent next. Finally selected object instance may be sent to the mobile device.

In an embodiment object instances previously sent to the mobile device may be extracted from the sorted object instances associated with the currently selected object instance. In the above examples object instances and were identified as being related to selected object instance sorted and then sent to the mobile device. Object instances and were subsequently identified as being related to selected object instance and then sorted . However in this embodiment object instance may be extracted from the sorted object instances associated with selected object instance because object instance was already sent to the mobile device. Consequently in this example only related object instance needs to be sent to the mobile device. Similarly related object instances may be determined to have been sent to the mobile device as previously selected object instances. Generally the selected object instance or any of the related object instances may have been previously sent to the mobile device as either a selected object instance or a related object instance.

Consequently the amount of information sent to the mobile device may be significantly reduced. For example in the simple embodiment all object instances depicted within are selected and then sent to the mobile device while in more sophisticated embodiments and examples as little as five object instances need to be sent to the mobile device.

In another embodiment a unique synchronization key may be associated with each of the plurality of object instances to uniquely identify each object instance. Plurality of synchronization keys may include for example synchronization keys corresponding to object instances and respectively. More specifically synchronization key 1000000001 may be associated with object instance synchronization key 1000000002 may be associated with object instance etc. In one embodiment plurality of synchronization keys may be assigned to plurality of object instances in a sequential manner while in another embodiment plurality of synchronization keys may be assigned to plurality of object instances according to various criteria such as for example assigning a series of numbers to each synchronization business object type etc. Other synchronization key mapping algorithms are contemplated by the present invention.

In a further embodiment copies of the related object instances may be sorted and each key referring to a related object instance may be replaced by the synchronization key associated with the related object instance. The key within each related object instance may be deleted ignored etc. Similarly the selected object instance may be copied and any keys referring to related object instances may be replaced by synchronization keys associated with the related object instances. The key within the selected object instance may be deleted ignored etc. as well. As discussed above with reference to Sales Order object type may include a Customer ID data element which may contain a key referring to the Customer ID key of Customer object type as indicated by arrow .

In a specific example object instance may include a Customer ID value equal to 101 which may refer to object instance whose Customer ID key equals 101. With reference to and after synchronization key replacement object instance may now include a Customer ID value equal to 1000000005 which may refer to object instance whose associated synchronization key equals 1000000005. The Sales Order key depicted within object instance may now be deleted ignored etc. as depicted by object instance .

Within the context of the examples described above object instances and may be related to the first selected object instance while object instances and may be related to second selected object instance . Plurality of object instances may therefore include object instances and while plurality of synchronization keys may include synchronization keys and associated with object instances and respectively. Consequently synchronization keys rather than keys may be sent to the mobile device. Accordingly plurality of object instances without keys and plurality of synchronization keys may represent those data ultimately sent to the mobile device. In an alternative embodiment the keys within the selected and related object instances may be retained therein and sent to the mobile device.

Several embodiments of the present invention are specifically illustrated and described herein. However it will be appreciated that modifications and variations of the present invention are covered by the above teachings and within the purview of the appended claims without departing from the spirit and intended scope of the invention.

