---

title: Language for binding scalable vector graphics elements to java classes
abstract: According to a technique described herein, a binding document comprises one or more “<bind>” element instances. Each “<bind>” element instance indicates an association between (a) an SVG element instance and (b) a class. When a binding's name is passed to a “createFromTemplate( )” method, the method processes all of the “<bind>” element instances that are associated within that name. For each such “<bind>” element instance, the method (a) creates, in an SVG DOM tree, a clone of a node that corresponds to an SVG element instance indicated in that “<bind>” element instance, (b) instantiates an object that is an instance of a class that is indicated in that “<bind>” element instance, and (c) stores data that establishes a binding between the clone node and the object. Methods of the object can be invoked to affect and/or alter attributes of the clone node to which the object is bound.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07962895&OS=07962895&RS=07962895
owner: Oracle America, Inc.
number: 07962895
owner_city: Redwood City
owner_country: US
publication_date: 20060720
---
Computerized development tools are increasingly becoming more visually oriented. For example information can be displayed in a graph instead of as text. An easy to use shape description language helps a tool designer to more easily provide a visual aspect to computerized presentations. Scalable Vector Graphics SVG is an Extensible Markup Language XML language for describing two dimensional graphics. SVG provides a good foundation for visual expression because SVG allows designers to describe visual elements in an XML format.

However several limitations affect SVG. SVG visual elements are static in that there are no behaviors associated with SVG visual elements. Also the programming model for SVG is based on the XML Document Object Model DOM . Consequently SVG graphics are manipulated through the manipulation of nodes in an SVG DOM tree. No hooks exist for attaching executable code to the SVG DOM tree.

According to a technique described herein a binding document comprises one or more element instances. Each element instance indicates an association between a an SVG element instance and b a class. When a binding s name is passed to a createFromTemplate method the method processes all of the element instances that are associated within that name. For each such element instance the method a creates in an SVG DOM tree a clone of a node that corresponds to an SVG element instance indicated in that element instance b instantiates an object that is an instance of a class that is indicated in that element instance and c stores data that establishes a binding between the clone node and the object. Methods of the object can be invoked to affect and or alter attributes of the clone node to which the object is bound.

According to a technique described herein a binding document expresses bindings between SVG element instances and JAVA classes. The binding document is composed in a binding language that is a subset of XML. In one embodiment of the invention the binding document comprises one or more element instances. Each element instance indicates a name for a binding. Additionally each element instance encloses one or more element instances. Each element instance indicates an association between a an SVG element instance defined in an SVG document and b a JAVA class in an API or framework. 

In one embodiment of the invention when the name of a binding is passed as a parameter to an invocation of a createFromTemplate method the createFromTemplate method reads and processes all of the element instances that are enclosed within the element instance that indicates that name. For each such element instance the createFromTemplate method creates in an SVG DOM tree a clone of a node that corresponds to an SVG element instance indicated in that element instance. Additionally for each such element instance the createFromTemplate method instantiates an object that is an instance of a JAVA class that is indicated in that element instance. For each such element instance the createFromTemplate method stores data that establishes a binding between the clone node and the object. Methods of the object can be invoked to affect and or alter attributes of the clone node to which the object is bound.

The SVG Specification defines several different element types such as which stands for group and . Each element type may have one or more attributes e.g. id . An example SVG document is shown below.

There are SVG element types and then there are instances of those SVG element types. The foregoing SVG document comprises multiple instances of the same SVG element type. For example there are two instances of the SVG element type. One instance of this SVG element type has an id attribute value of BoxLabel and one instance of this SVG element type has an id attribute value of CircleLabel. 

The foregoing SVG document may be provided as input to an SVG engine. In response to receiving the SVG document as input an SVG engine may render and display a a 50 pixel by 20 pixel white box with a red border and a text label that reads Node as described by the SVG element instance whose id attribute value is BoxLabel and b a white circle with a radius of 15 pixels and a blank text label as described by the SVG element instance whose id attribute value is CircleLabel. 

The foregoing SVG document describes only two shapes the box defined by the SVG element instance whose id attribute value is BoxLabel and the circle defined by the SVG element instance whose id attribute value is CircleLabel . A programmer might want the SVG engine to render and display multiple instances of these shapes. Traditionally a programmer who wanted to accomplish this using SVG would need to use a document editor to make a separate copy of the appropriate SVG code for each instance desired paste those multiple copies into the SVG document and manually modify the attributes e.g. coordinates size color text label of the SVG code for each instance desired. For example if the programmer wanted the SVG engine to render 5 boxes and 3 circles then the programmer would need to make 4 additional copies of the SVG code for the SVG element instance whose id attribute value is BoxLabel and 2 additional copies of the SVG code for the SVG element instance whose id attribute value is CircleLabel. In order to cause the shapes to not overlap each other the programmer would need to modify the coordinate attribute values for each copy. If the programmer wanted the labels of the shapes to differ then the programmer would need to edit manually the text between the tags in each copy.

 Visdev is a JAVA based visual framework. In the Visdev Framework shapes such as boxes and circles are represented by design elements. Design elements may be imagined as wrappers around instances of SVG element nodes that are contained in an SVG DOM tree. Design elements provide a set of Application Programming Interfaces APIs through which a JAVA program can manipulate the SVG element nodes around which the design elements are wrapped. 

According to one embodiment of the invention design elements correspond to SVG element instances. In one embodiment of the invention each different design element is implemented by a different JAVA class. Thus in one embodiment of the invention SVG element instances correspond to JAVA classes.

According to one embodiment of the invention the JAVA classes do not actually comprise any code for causing the shapes to be rendered or displayed. Instead the information that generally describes the shapes that are to be rendered and displayed remains within an SVG document. This allows programmers to continue to describe shapes using the easy to use SVG language. Programmers are not forced to write custom JAVA code that actually renders and displays shapes. Instead programmers can merely write JAVA code that alters the attribute values of SVG element instances so that the shapes corresponding to those SVG element instances exhibit desired behavior. Thus the shapes become dynamic rather than static. 

According to one embodiment of the invention JAVA classes in the Visdev Framework can extend other JAVA classes in the Visdev Framework thereby inheriting the methods and variables of the extended JAVA classes.

As is described above in one embodiment of the invention JAVA classes correspond to SVG element instances. According to one embodiment of the invention this correspondence is established through a binding document that describes associations or in other words bindings between SVG element instances and JAVA classes. A binding document describes these bindings through a binding language that is described herein. In one embodiment of the invention the binding language is a subset of the XML language.

An example binding document which is composed in the example binding language is shown below. In one embodiment of the invention the binding document is located in a separate file from the SVG document to which the binding document refers.

The foregoing binding document comprises two notable element types the element type and the element type which are among the primitives of the binding language. In the foregoing binding document there are two instances of the element type one whose id attribute value is BoxLabelTemplate and one whose id attribute value is CircleLabelTemplate. Additionally there are four instances of the element type.

Each element instance may enclose within its opening and closing tags one or more element instances. Additionally each element instance may enclose within its opening and closing tags one or more other element instances that are subordinate to the element instance within whose tags they are enclosed.

According to one embodiment of the invention each element instance has an id attribute whose attribute value identifies that specific element instance. According to one embodiment of the invention each element instance has an svg ref attribute whose attribute value identifies an SVG element instance in an SVG document. Additionally according to one embodiment of the invention each element instance also has either a a class attribute whose value identifies a JAVA class in the Visdev Framework or b a field attribute whose value identifies a variable or field of a JAVA class in the Visdev Framework. According to one embodiment of the invention a element instance may have both the class attribute and the field attribute. In one embodiment of the invention if an particular element instance has a field attribute but not a class attribute then the particular element is assumed to have a class attribute whose attribute value is the same as the attribute value of a class attribute of another element that encloses the particular element.

In the foregoing binding document the first element instance s id attribute value is BoxLabelTemplate. This signifies that a binding called BoxLabelTemplate should be created when binding occurs. This element instance encloses a element instance whose svg ref attribute value is BoxLabel and whose class attribute value is TextLabelDesignElement. This signifies that the BoxLabelTemplate binding should include a binding between a a first level SVG element instance whose id attribute value is BoxLabel and b a TextLabelDesignElement JAVA class in the Visdev Framework. This element instance encloses yet another element instances whose svg ref attribute value is Label whose class attribute value is TextLabelDesignElement and whose field attribute is label. This signifies that the BoxLabelTemplate binding should also include a binding between a a second level SVG element instance that is enclosed within the first level SVG element instance and whose id attribute value is Label and b a label variable of the TextLabelDesignElement JAVA class in the Visdev Framework.

Similarly in the foregoing binding document the second element instance s id attribute value is CircleLabelTemplate. This signifies that a binding called CircleLabelTemplate should be created when binding occurs. This element instance encloses a element instance whose svg ref attribute value is CircleLabel and whose class attribute value is TextLabelDesignElement. This signifies that the CircleLabelTemplate binding should include a binding between a a first level SVG element instance whose id attribute value is CircleLabel and b a TextLabelDesignElement JAVA class in the Visdev Framework. This element instance encloses yet another element instances whose svg ref attribute value is Label whose class attribute value is TextLabelDesignElement and whose field attribute is label. This signifies that the CircleLabelTemplate binding should also include a binding between a a second level SVG element instance that is enclosed within the first SVG element instance and whose id attribute value is Label and b a label variable of the TextLabelDesignElement JAVA class in the Visdev Framework.

As is discussed above in one embodiment of the invention a binding document expresses bindings between SVG element instances and JAVA classes in the Visdev Framework. Also as is discussed above the JAVA classes in the Visdev Framework can be designed to alter the attribute values of SVG element instances so that the shapes corresponding to those SVG element instances exhibit desired behavior.

When an SVG engine interprets an SVG document the SVG engine creates an SVG DOM tree that comprises SVG element nodes that correspond to the SVG element instances in the SVG document. When the attribute values of the SVG element nodes are altered the displayed shapes that represent those SVG element nodes are automatically updated to reflect the new attribute values. For example if a JAVA class changes the attribute value of a label attribute of an SVG element node in an SVG DOM tree then the text displayed within a shape that represents that SVG element node will change automatically to reflect the new attribute value.

An example JAVA class that might be included in an implementation of the Visdev Framework is shown below.

In the previous example the binding document expressed a binding named BoxLabelTemplate. The BoxLabelTemplate binding included a binding between a the SVG element instance whose id attribute value is BoxLabel and b the TextLabelDesignElement JAVA class shown above. This BoxLabelTemplate binding also included a binding between a the SVG element instance whose id attribute value is Label and which is also a child SVG element instance of the SVG element instance whose id attribute value is BoxLabel and b the label variable of the TextLabelDesignElement JAVA class shown above.

According to one embodiment of the invention the Visdev Framework includes a class called AbstractDesignView that is a superclass but not necessarily an immediate superclass of all other classes in the Visdev Framework. An application program that uses the Visdev Framework instantiates an instance of the AbstractDesignView class. The AbstractDesignView class defines a method called createFromTemplate . The createFromTemplate method accepts as a parameter the name of a binding e.g. BoxLabelTemplate . The application program invokes this method of the instance of the AbstractDesignView class.

When invoked the createFromTemplate method reads the binding document. The method locates a element instance whose id attribute value matches the name that was passed to the method as a parameter in this example BoxLabelTemplate. The located element instance encloses one or more first level element instances. For each such first level element instance the createFromTemplate method a reads the attribute value of the svg ref attribute of that element instance the svg ref value b locates in the SVG document an SVG element instance whose id attribute value matches the svg ref value e.g. BoxLabel c creates in the SVG DOM tree a clone node for that SVG element instance d reads the attribute value of the class attribute of that element instance the class value e instantiates in one embodiment of the invention using reflection an object that is an instance of the class in the Visdev Framework whose class name matches the class value e.g. TextLabelDesignTemplate and f stores in memory data that establishes an association or binding between the clone node e.g. a clone of the BoxLabel SVG element node and the object.

In one embodiment of the invention when the clone node for an SVG element instance is created as described above clone nodes are also created for each of that SVG element instance s descendant SVG element instances in the SVG DOM tree. In one embodiment of the invention for each first level element instance enclosed by the element instance the createFromTemplate method recursively establishes bindings between the clone nodes for the child element instances enclosed by that first level element instance if any and the appropriate variables indicated by the field attribute value of the child element instance of the object that has been bound to that clone node for the first level element instance. If those child element instances enclose any child element instances then the createFromTemplate method recursively does the same for those child element instances and so on. Thus in the above example an SVG DOM clone node for the BoxLabel SVG element instance is bound to a TextLabelDesignElement object and a child SVG DOM clone node for the Label SVG element instance is bound to the label variable of the TextLabelDesignElement object.

In one embodiment of the invention when the createFromTemplate method creates the clone nodes in the SVG DOM tree the display is automatically refreshed to show shapes that correspond to those clone nodes. In one embodiment of the invention when the createFromTemplate method instantiates an object of the appropriate class as indicated by the class attribute value of the element instance the createFromTemplate method also invokes the initializes method of that object. Following the example of the TextLabelDesignElement class shown above when the initialize method of an object of that class is invoked the initialize method a increments a static variable index that is shared by all objects of that class and b changes the value of the dynamic label variable of that object to reflect the incremented value of the index variable.

Thus in the above example each time that createFromTemplate BoxLabelTemplate is invoked a new BoxLabel SVG node is created in the SVG DOM tree and displayed and that SVG node s label is updated to reflect a next sequentially occurring index value. Thus the JAVA class TextLabelDesignElement adds behavior to the BoxLabel SVG node.

If createFromTemplate CircleLabelTemplate were to be invoked then a new CircleLabel SVG node would be created in the SVG DOM tree and displayed and that SVG node s label also would be updated to reflect the next sequentially occurring index value since in the above example CircleLabel is also bound to the TextLabelDesignElement class.

In one embodiment of the invention the binding language also allows instances of other templates to be composited into a complex design element. For example the following class might be defined in the Visdev Framework 

The class above can be used to hold multiple instances of TextLabelDesignElement that are composited together. In the above class the appendChild method is an API method of CompositeDesignElement. When invoked appendChild appends a new specified SVG node to the SVG DOM tree.

The following fragment of a binding document allows an instance of MultiLabelDesignElement to be created. When created the object will contain an instance of the BoxLabelTemplate and the CircleLabelTemplate 

In the above example instead of referencing an SVG element instance the element instances reference an entire element instance as previously defined in the binding document. This causes instances of both the BoxLabelTemplate and the CircleLabelTemplate to be created. The method attribute of the element instance indicates to the createFromTemplate method that the addLabel method should be invoked passing in the new TextLabelDesignElement which will append the new SVG node to the SVG DOM tree.

According to one embodiment of the invention the binding document can define one binding that overrides another binding previously defined in the binding document. For example 

The above binding creates an instance of BoxLabelTemplate. However instead of referencing BoxLabel and creating an instance of TextLabelDesignElement as specified by BoxLabelTemplate the above binding causes the MyBoxLabel SVG element to be referenced and an instance of MyTextLabelDesignElement to be created.

In one embodiment of the invention the binding language is extensible. Customized attributes can be added to the elements to add customized binding behaviors. In such an embodiment the binding facility invokes a setBindingAttributes method on the design element passing a Binding instance which can be queried to return attributes in a corresponding element. The setBindingAttributes method on a design element can be overridden to process customized attribute extensions.

In block a createFromTemplate method of an AbstractDesignView object is invoked. A name of a binding defined in a binding document is passed as a parameter in the method invocation. For example an application program may invoke the createFromTemplate method and pass to the method as a parameter the binding name BoxLabelTemplate. 

In block in response to the method invocation the createFromTemplate method locates in the binding document a element instance whose id attribute value matches that name that was passed to the method as a parameter. Continuing the example the createFromTemplate method may locate in the binding document a element.

In block the createFromTemplate method locates a element instance that is enclosed within the element located in block . Continuing the example the createFromTemplate method may locate in the binding document a element instance.

In block the createFromTemplate method reads the attribute value of the svg ref attribute of the element instance located in block . Continuing the example the createFromTemplate method may read BoxLabel as the attribute value of the svg ref attribute of the element instance located in block .

In block the createFromTemplate method locates in an SVG document to which the binding document refers an SVG element instance whose id attribute value matches the svg ref value read in block . Continuing the example the createFromTemplate method may locate in the SVG document a SVG element instance.

In block the createFromTemplate method creates in the SVG DOM tree a clone node for the SVG element instance located in block . Continuing the example the createFromTemplate method may create in an SVG DOM tree a clone of an SVG node for the element instance. In one embodiment of the invention the creation of the clone SVG node in the SVG DOM tree causes a display to be updated to show a new shape that the clone SVG node represents. The new shape has the characteristics indicated by the SVG element instance based upon which the clone SVG node was created.

In block the createFromTemplate method reads the attribute value of the class attribute of the element instance located in block . Continuing the example the createFromTemplate method may read TextLabelDesignElement as the attribute value of the class attribute of the element instance located in block .

In block the createFromTemplate method instantiates an object that is an instance of the class whose class name matches the class value read in block . Continuing the example the createFromTemplate method may instantiate an object that is an instance of the TextLabelDesignTemplate class. In one embodiment of the invention when the object is instantiated the createFromTemplate method automatically invokes an initialize method of that object. The initialize method may alter attributes of the clone SVG node that corresponds to the object thereby causing the display to be updated automatically to reflect the alterations.

In block the createFromTemplate method stores in memory data that establishes an association or binding between a the clone SVG node created in block and b the object instantiated in block . For example the createFromTemplate method may store data that establishes a binding between a the clone SVG node of the BoxLabel SVG element instance and b the TextLabelDesignElement object. Separate instances of the TextLabelDesignElement object may be bound to separate SVG nodes in the SVG DOM tree.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

In computer system bus may be any mechanism and or medium that enables information signals data etc. to be exchanged between the various components. For example bus may be a set of conductors that carries electrical signals. Bus may also be a wireless medium that carries wireless signals between one or more of the components. Bus may also be a medium that enables signals to be capacitively exchanged between one or more of the components. Bus may further be a network connection that connects one or more of the components. Overall any mechanism and or medium that enables information signals data etc. to be exchanged between the various components may be used as bus .

Bus may also be a combination of these mechanisms media. For example processor may communicate with storage device wirelessly. In such a case the bus from the standpoint of processor and storage device would be a wireless medium such as an electromagnetic wave. Further processor may communicate with ROM capacitively. In this instance the bus would be the medium that enables this capacitive communication to take place. Further processor may communicate with main memory via a network connection. In this case the bus would be the network connection. Further processor may communicate with display via a set of conductors. In this instance the bus would be the set of conductors. Thus depending upon how the various components communicate with each other bus may take on different forms. Bus as shown in functionally represents all of the mechanisms and or media that enable information signals data etc. to be exchanged between the various components.

The invention is related to the use of computer system for implementing the techniques described herein. According to one embodiment of the invention those techniques are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another machine readable medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus embodiments of the invention are not limited to any specific combination of hardware circuitry and software.

The term machine readable medium as used herein refers to any medium that participates in providing data that causes a machine to operation in a specific fashion. In an embodiment implemented using computer system various machine readable media are involved for example in providing instructions to processor for execution. Such a medium may take many forms including but not limited to non volatile media volatile media and transmission media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Common forms of machine readable media include for example a floppy disk a flexible disk hard disk magnetic tape or any other magnetic medium a CD ROM any other optical medium punchcards papertape any other physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM any other memory chip or cartridge a carrier wave as described hereinafter or any other medium from which a computer can read.

Various forms of machine readable media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the worldwide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are exemplary forms of carrier waves transporting the information.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

Processor may execute the received code as the code is received and or stored in storage device or other non volatile storage for later execution. In this manner computer system may obtain application code in the form of a carrier wave.

In the foregoing specification embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. Thus the sole and exclusive indicator of what is the invention and is intended by the applicants to be the invention is the set of claims that issue from this application in the specific form in which such claims issue including any subsequent correction. Any definitions expressly set forth herein for terms contained in such claims shall govern the meaning of such terms as used in the claims. Hence no limitation element property feature advantage or attribute that is not expressly recited in a claim should limit the scope of such claim in any way. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

