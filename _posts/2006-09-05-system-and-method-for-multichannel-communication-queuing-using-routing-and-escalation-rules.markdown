---

title: System and method for multi-channel communication queuing using routing and escalation rules
abstract: A system, apparatus, and method for routing work items to agents, wherein the work items can be of one of two or more different communication media types from one of two or more different communication channels. A queuing engine includes a list of routes and each route is associated with one or more properties. The list of routes can further include information related to one or more escalation rules for each route; the type of communication media available along the route for handling one or more of the work items; whether the route is active; the priority of the route; whether work items can be handled real-time; the service level for work items handled on the route; and the number of work items that can be assigned to the route. The queuing engine determines various properties required to handle each work item, such as the communication media type, agent language and skill level, and the category and recipient of the work item, and assigns each work item to one of the one or more agents based on one or more of the properties. When the queuing engine determines that a work item has been waiting a predetermined amount of time to be assigned to an agent, the queuing engine can escalate the search for an agent to handle the work item based on the escalation rules. The queuing engine can also substitute values for variables in the routing and escalation rules, thereby reducing the number of rules that must be entered to achieve the same routing capability.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07308093&OS=07308093&RS=07308093
owner: Siebel Systems, Inc.
number: 07308093
owner_city: San Mateo
owner_country: US
publication_date: 20060905
---
This application is a continuation of U.S. patent application Ser. No. 09 895 456 entitled SYSTEM AND METHOD FOR MULTI CHANNEL COMMUNICATION QUEUING USING ROUTING AND ESCALATION RULES filed Jun. 29 2001 now U.S. Pat. No. 7 103 171 and naming Anil Kumar Annadata Wai Hong Pak and Rohit Bedi as inventors. This application is assigned to Siebel Systems Inc. the assignee of the present invention and is hereby incorporated by reference in its entirety and for all purposes.

The present invention is related to the subject matter of the following non provisional United States Patent Applications 

 Adaptive Communication Application Programming Interface naming inventors Mingtse Chen Anil K. Annadata and Leon Chan filed Mar. 31 2001 Ser. No. 09 823 828.

 System and Method for Maintaining Real Time Agent Information for Multi Channel Communication Queuing naming inventors Mingtse Chen Anil K. Annadata and Wai H. Pak filed Mar. 31 2001 Ser. No. 09 823 770.

 System and Method for Multi Channel Communication Queuing naming inventors Anil K. Annadata Wai H. Pak and Rohit Bedi filed Mar. 31 2001 Ser. No. 09 823 590.

 Configurable Media independent Server naming inventors Mingtse Chen and Anil K. Annadata Filed Mar. 31 2001 Ser. No. 09 823 769.

 User Interface for Multi Channel Communication naming inventors Mingtse Chen Anil K. Annadata and Kuang Huang filed Mar. 31 2001 Ser. No. 09 823 531.

 Multi Channel Media Independent Server naming inventors Mingtse Chen Anil K. Annadata and Leon Chan filed Mar. 31 2001 Ser. No. 09 823 835.

 An Extensible Interface for Inter Module Communication naming inventor Wai H. Pak filed Mar. 31 2001 Ser. No. 09 823 678.

In today s emerging technological and information world companies are interacting with their customers potential customers and other contacts through a wide variety of different communication channels. Such communication channels include face to face telephone fax email voicemails wireless communication Internet information inquiries via call me now and call me later Internet collaborative sessions paging and short messaging services. With all these communication channels companies are faced with managing each customer interaction while meeting service levels and maximizing customer satisfaction. In addition companies are faced with optimally staffing and training their workforce to deal with customers through these communication channels whether through their customer support center s telebusiness organizations or their sales marketing and service professionals.

Currently many companies have dedicated email inboxes fax inboxes and voicemail boxes defined for specific business areas as well as automated call distributors. Employees called agents are assigned to poll and manage the support requests from customers for each communication channel. Combined with the traditional call queues for inbound telephone calls each agent is tasked with managing his or her work using all these communication channels while not having any visibility to the queue status and priorities of each customer support request and or communication channel.

Thus it is desirable to provide a system that includes a universal queue strategy capable of assigning routing and queuing work items from multiple channels of communication to an agent having the appropriate skills to respond to the request. The system should enable the agent to view and manage his or her work items for all communication channels. Such a system reduces the response times and increases customer satisfaction while balancing priorities amongst work items in multiple communication channels.

In one embodiment a method of routing work items in a multi channel communication queuing system is provided that includes forming a list of routes wherein each route includes information related to the type of communication media available along the route for handling one or more of the work items.

In one aspect of this embodiment each route can further include information indicating whether the route is active the priority of the route whether work items can be handled real time the service level for work items handled on the route and the number of work items that can be assigned to the route.

Another aspect of this embodiment can include entering one or more properties for the route combining two or more of the properties of the route using a boolean operator and substituting a value for a variable in one or more of the properties.

Another aspect of this embodiment can include entering one or more escalation rules for the route combining two or more of the escalation rules using a boolean operator and substituting a value for a variable in one or more of the escalation rules.

In another embodiment a database structure for a multi channel communication queuing system includes a list of routes that includes information related to properties for the routes and escalation rules for the routes.

Another aspect of this embodiment can include information related to the type of communication media available along the route for handling one or more of the work items whether the route is active the priority of the route whether work items can be handled real time the service level for work items handled on the route and the number of work items that can be assigned to the route.

In another embodiment a system for routing work items to agents is provided. The work items can be of one of two or more different communication media types from two or more different communication channels. The system includes a queuing engine with a list of routes and information related to one or more properties for each route rising.

In one aspect of this embodiment the list of routes further includes information related to one or more escalation rules for the route.

In another aspect of this embodiment the list of routes further includes information related to the type of communication media available along the route for handling one or more of the work items.

In another aspect of this embodiment the list of routes further includes information related to one or more of the following types of information whether the route is active the priority of the route whether work items can be handled real time the service level for work items handled on the route and the number of work items that can be assigned to the route.

In another aspect of this embodiment the queuing engine is operable to determine the communication media type required to handle each work item and to assign each work item to one of the one or more agents based on the communication media type.

In another aspect of this embodiment the queuing engine is operable to determine the language required to handle each work item and to assign each work item to one of the one or more agents based on the language required.

In another aspect of this embodiment the queuing engine is operable to determine the level of agent skill required to handle each work item and to assign each work item to one of the one or more agents based on the level of skill required.

In another aspect of this embodiment the queuing engine is operable to determine a category for each work item and to assign each work item to one of the one or more agents based on the category of the work item.

In another aspect of this embodiment the queuing engine is operable to determine a recipient for each work item and to assign each work item to one of the one or more agents based on the recipient of the work item.

In another aspect of this embodiment the queuing engine is operable to determine the amount of time that a work item has been waiting to be assigned to an agent and to escalate the search for an agent to handle the work item based on the escalation rules.

The foregoing is a summary and thus contains by necessity simplifications generalizations and omissions of detail consequently those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting. As will also be apparent to one of skill in the art the operations disclosed herein may be implemented in a number of ways and such changes and modifications may be made without departing from this invention and its broader aspects. Other aspects inventive features and advantages of the present invention as defined solely by the claims will become apparent in the non limiting detailed description set forth below.

In accordance with the present invention client server system includes a universal queuing UQ system capable of assigning routing and queuing work items from multiple channels of communication to an agent having the appropriate skills to respond to a customer support request. The term work item refers to a request from a customer that requires a response from an agent assigned by client server system such as responding to a customer support request in the form of a telephone call email fax or other communication of a different media type. A work item can be initiated when an event such as an incoming customer support request arrives or by an application client using the communication API .

Client server system also includes a communication server that enables agents to use communication channels of different media types to communicate with customers. Communication server handles events such as the arrival of incoming customer support requests from a channel driver such as one of channel drivers A B and C. Each channel driver communicates with a communication channel such as one of communication channels A B C and D.

Interaction between UQ system and communication server occurs when for example communication server receives and routes an incoming customer request as a work item to UQ system for assignment to an agent. UQ system assigns an agent to the work item and sends the work item back to communication server for communication to the assigned agent.

Web browser client A includes a web browser program such as Microsoft s Internet Explorer running on a client computer system not shown . The web browser client A communicates with a web server . Application server in client server system performs functions for and sends information to web browser client A via web server which provides web pages for web browser client A to display. Web server can download program instructions such as Java applet to the web browser client A to provide additional functionality such as a user interface.

Web browser client A is shown including a toolbar . One of skill in the art will recognize that other user interfaces providing the functionality of toolbar can be implemented using a variety of different display formats to interface with multiple communication channels of different media types within the scope of the invention. Toolbar is presented as part of a user interface. One embodiment of toolbar is disclosed in U.S. patent application Ser. No. 09 823 531 User Interface for Multi Channel Communication. 

In one embodiment application server of client server system includes object manager session mode communication server request mode communication server inbound communication receiver UQ system web server web server Enterprise Application Interface EAI object manager and workflow process . In one embodiment communication between components in application server is enabled using a suitable inter process communication protocol in conjunction with transfer control protocol Internet protocol TCP IP as known in the art.

UQ business service allows communication server to request information from UQ system which returns the information via web server and EAI object manager . In one embodiment both session mode communication server and inbound communication receiver can communicate with UQ system . Other embodiments can communicate with a third party queuing system for maintaining work item queues and assigning agents to work items.

Communication server includes session mode communication server . Communication server may optionally include one or both of request mode communication server and inbound communication receiver . It is important to note that the functionality provided by servers and can be implemented on one server computer system or distributed across two or more server computer systems. Communication server handles all communication between agents and customers via communication channels of one or more media types. Communication server is not media specific and has no knowledge of communication channels or media.

To communicate with multiple communication channels of different media types communication server is designed to communicate with a channel driver such as one of channel drivers A B and C. A channel driver is written according to Communication Application Program Interface API . Communication API provides an interface for third party vendors of communication devices and software e.g. middleware vendors for communication devices to provide a channel driver so that their products are compatible with application server . By implementing a channel driver vendors can take advantage of the customer support center management features and multi media communication channel capabilities of application server .

Communication API is designed to provide flexibility to third party vendors for integrating their products. In the implementation of a channel driver a vendor defines the commands the vendor s communication channel understands so that communication server can issue commands for the communication channel to perform. Normally these commands are issued when session mode communication server is presenting a user interface to the agent although inbound communication receiver also can send commands in some circumstances.

In addition the vendor defines the events that the vendor s communication channel provides regarding activity of a specific communication channel . Finally the vendor provides a channel driver implementation such as a dynamic link library .DLL file for performing each command and generating and providing each event. The channel driver implementation is required by communication API to include code to instantiate a driver object and at least one service object.

By requiring the vendor to provide facilities for the communication server to issue commands to and to receive information from the vendor s communication channel communications API enables communications server to operate independently of the command channel media type and specific protocols to communicate with the vendor s communication device or software.

Each event handler corresponds to an event provided by channel driver and it is sequenced among the event handlers for an event. Each event handler has an event response. An event response can be shared among event handlers. An event response can have multiple event logs and an event log can be shared among event responses. When operating in session mode communication server is under the control of session mode communication server . Session mode communication server receives incoming events such as customer support requests and communicates in real time with the agent by controlling a user interface presented to the agent. The term real time is used herein to indicate that the incoming customer support request is communicated to the agent at substantially the same time the customer support request is received by the communication channel with brief intermissions only to allow for processing and transport time in transporting the customer support request. The term toolbar as used herein includes the user interface within which the communication toolbar is presented.

When an event such as arrival of an incoming telephone call occurs the user interface notifies the agent using a notification function to change the user interface to capture the agent s attention. For example a notification function can cause a button to blink to notify the agent of the phone call. A notification function can also display other information such as information about the caller before the agent picks up the phone. When the agent uses toolbar to accept a telephone call put a call on hold or release a call the user interface sends a command to session mode communication server which communicates with one of channel drivers to issue the command to the communication channel controlling the telephone.

Referring to an example of a database schema that can be used by client server system for storing and communicating channel driver information agent limitations on media access commands and events inbound task management agent preferences agent status media status communication channel configurations multiple queue support and agent management is shown. Database schema includes data structures for configuration base command and event system base response group and email profile access control . Database schema is further described in U.S. patent application Ser. No. 09 823 590 System and Method for Multi Channel Communication Queuing. .

Session mode communication server also handles establishing and maintaining connections to one or more communication channels such as communication channels A through D. Session mode communication server uses one of channel drivers such as channel driver A to establish the connection. Having a connection to a communication channel enables the agent to receive an incoming work item such as an email intended specifically for that agent in real time. The connection can be to a middleware server to a web server directly to a media device or to any other communication intermediary from which the customer can receive a communication. The connection can be established as a TCP IP socket connection to a middleware server as an OLE interface such as the IadviseSink interface or as any other suitable inter process communication scheme. Each of channel drivers contains all information needed to establish the connection with communication channel so that communication server operates independently of communication channel .

UQ system queues requests for all types of media until an agent is assigned to the request. As agents become available either by an agent logging in finishing a task or due to a change in state or assignment UQ system pushes a work item from a communication channel to an agent and removes the work item from the respective queue. In one implementation when multiple work items are routed to an agent the work item that arrived first is presented to the agent and the other work item is returned to its respective queue and rerouted pushed to the next available agent that is capable of handling the particular work item.

UQ system includes UQ receiver and UQ requester that interface with UQ engine via UQ server . Web server can be included in system to receive messages from UQ system . In one embodiment web server receives the message and sends it to EAI object manager . EAI object manager packages the messages and transmits it to UQ business service .

UQ system interfaces with UQ business service and web server via UQ application programming interface UQ API . UQ business service places information received from UQ system into data structures used by communication server . UQ business service also places information from communication server into data structures commands and parameters recognized and used by UQ API .

In one embodiment UQ business service includes the following functions with input and output parameters shown in parentheses for initializing and communicating with the UQ system 

In one embodiment UQ business service also includes the following functions for initializing and maintaining agents 

In one embodiment UQ business service also includes the following functions for initializing and maintaining work items 

In one embodiment UQ business service includes the following functions for reporting performance statistics 

The foregoing lists are examples of functions that can be included in UQ business service . Other functions can be included in addition to or instead of these examples. Some of the functions include return codes and or state codes to indicate whether a requested function was performed successfully and or the state of UQ system a work item or an agent. The following lists provide examples of codes that are used as parameters in the preceding functions 

Referring to and clients choose a UQ configuration via the UQOpenConnection function in UQ business service . UQ system uses information such as UQ receiver server name and UQ receiver Port to determine where to send responses. In one embodiment multiple receiver servers not shown in EAI object manager can be connected to receive messages from UQ system Each sender on the communication server sends different OpenConnection information to UQ business service . UQ business service establishes the connections back to communication server via web server and EAI object manager based upon the information provided. The receiver server i.e. web server and EAI object manager can be the same for all UQOpenConnection requests or different receiver servers i.e. different instantiations of web server and EAI object manager can be used. Table 1 shows an example of parameters in a UQ configuration table that is stored in UQ system and used to establish communication with and perform functions as requested by communication server via the UQOpenConnection function. For example Table 1 includes parameters for identifying and establishing communication with the host for UQ system . Table 1 also includes default settings for agent preferences such as whether an agent is in the auto ready state after login or in the auto auxwork state after login.

Table 2 shows a subset of parameters in the UQ Configuration table in Table 1 referred to as PropertyInfo parameters that are used in other functions that are included in UQ business service .

Web server handles packing information using a suitable data transfer protocol for outgoing messages to EAI object manager . In one implementation for example HTTP is used to communicate messages to and from UQ API . Web server converts information in HTTP format to another suitable transport protocol which EAI object manager unpacks for use by UQ business service . In other embodiments other protocols known in the art can be used instead of or in addition to HTTP.

UQ engine defines a route for processing each work item. For example if a work item is a fax requiring response from an agent with knowledge of computer networking the UQ engine would define a route that specifies an agent with computer networking skills. An agent can transfer the work item to a route queue using the functions TransferWorkItemToRoute Route configuration Name or BlindTransferWorkItemToAgent agentID if the agent is not able to respond to the work item. The skill requirements for the work item can be changed before invoking the transfer if the agent determines that a different skill is necessary to respond to the work item.

In one embodiment route points are generated wherein each route point has specific skill requirements. When a work item is to be transferred to another point the transferring agent can choose a route point from a pop up list for example. The list can include the option to either list all agents or all route points.

The following examples show how requests from clients are processed through one embodiment of system 

Communication server background mode server uses UQOpenConnection function in UQ business service to connect clients with UQ system . In one embodiment two or more configurations can be available to initialize UQ business service including a default configuration. The default UQ configuration parameters are used if no other configuration is specified. The UQPropertyInfo parameters of UQOpenConnection included PrimaryReceiverName and PrimaryReceiverPort which identify the location of the primary receiver server in web server . In an alternative embodiment HTTPLoginTemplate and HTTPLoginBodyTemplate are used to identify the receiver which is typically web server .

UQOpenConnection can be invoked multiple times to connect multiple receiver servers in web server to UQ system and UQ system maintains a list of all connections to the connected receiver servers. After a successful UQOpenConnection the function UQInitRules can be invoked to download agent skill information as well as rules for escalating agents and specifying routes. In one embodiment UQInitRules is invoked only once during initialization and the function UQReplaceRules is used to update the rules once they have been initialized. The parameter ERROR UQ INITIALIZED indicates an error if UQInitRules if subsequently invoked. An indicator of whether the initialization was successful is supplied in the Return parameter associated with the UQInitRules function.

New agents invoke UQOpenConnection through business service to inform UQ system that there is a new agent. The function AgentLogon is then invoked by UQ business service to log the agent into UQ system . UQ business service then sends a message that includes the agent skill information to UQ system . There is a parameter in UQOpenConnection to identify the name of the connection. When AgentLogon is used there is also a parameter to identify which connection this agent will use. This connection ID is for messages coming from UQ system to communication server .

If multiple receiver servers are connected each invocation of the function AgentLogon includes information about the agent s connection. Agent information also includes information including auto available setting and auto wrap setting. UQ system returns either the error if the invocation to AgentLogon fails or returns the new agent state if the logon operation was successful.

When communication server receives an email message it sends the message along with related information regarding the client who sent the message to UQ business service . UQ business service transfers the email message and related information to UQ system via the AddWorkItem function. UQ system determines whether to accept the work item and issues a response to communication server via web server EAI object manager and UQ business service indicating whether the work item was accepted using the status parameter in the HandleWorkItem function.

UQ system determines an agent for a work item and sends a message that the work item was assigned to an agent to communication server via the receiver server associated with the agent. UQ system then transmits a message via the HandleWorkItem function to the web server and EAI object manager associated with the agent. The ProcessEvents function in UQ business service is then invoked to dispatch the message to an agent. The agent invokes the WorkItemAccept function to inform UQ system that it received the work item.

As an example of one method for UQ system to notify communication server of an error or alarm assume UQ system determines that the number of requests that can be handled by one of the communication channels has exceeded a predefined threshold. UQ system sends a return code to the receiver server via the HandleError function indicating that the queue capacity has been exceeded. EAI object manager receives the message and invokes the function ProcessEvents in UQ business service . The error message can be logged and broadcast to the component that issued the request. Alarm messages are handled in a similar manner. The error alarm can be broadcast visually aurally textually and or by any other suitable means known in the art.

As an example of one method for UQ system to notify communication server of an error or alarm assume UQ system determines that the number of requests that can be handled by one of the routes has exceeded a predefined threshold. UQ system sends an error code to the receiver server via the HandleError function indicating that the queue capacity has been exceeded. EAI object manager receives the message and invokes the function ProcessEvents in UQ business service . The error message is logged into database. An error or alarm indication is also sent to the agent and administrator console.

A client or other component in system can request statistics regarding its communication channels agents and or the routing of agents from UQ system via SetRouteStatInterval SetChannelStatInterval StartAgentStat and StopAgentStat functions. UQ system generates the requested statistics and transmits them to Web server . When the receiver server in EAI object manager receives the message it can log the statistics and broadcast them through an interface such as a message bar mechanism as known in the art. Agent configurations can be set up to request statistics on a continual basis. The statistics can include information for work items completed as well as work items in the agent s queue.

When an agent is in AuxWork mode the agent can choose a work item from the queue through a user interface such as the toolbar . RequestWorkableItemList is used to retrieve a list of the work items. When a work item is selected UQ system is notified via the RequestWorkItemAssignment function in business service . If the work item is available the function will indicate a successful selection through the return parameter and the work item is delivered via the HandleWorkItem function. The RequestWorkableItemList function can return an error indicator if the work item is not available for the agent.

When UQ system receives a route request UQ system determines the agent to assign to the work item and sends a message to the agent s receiver server in EAI object manager that includes the assigned agent and the work item. If UQ system cannot find an agent to assign within the time allowed the request is placed in a waiting queue as implemented by UQ engine . It is important to note that many different types of commercially available queing engines can be used in UQ system .

Referring to and an agent can be connected to receive calls directly from ACD switch E without interacting with UQ system . Agents can also be connected to receive calls from ACD switch E as well as other work items through UQ system . When agent is in Auxmode he will not receive any work items.

There are several alternative implementations that can be used to place an agent in the AuxWork state. For example an agent can default to AuxWork state. UQ system can be notified when ACD switch E receives a call that should be handled by the agent and the agent notified to suspend processing a work item such as a response to an email request to take the call. The agent notifies UQ system when the call is completed and returns to processing the suspended work item.

When a work item is dispatched to an agent the agent invokes the AcceptWorkItem function to accept the work item. Output parameters in AcceptWorkItem inform UQ system of the new agent state and work item state. When the agent completes the work item it invokes the CompleteWorkItem function to inform UQ system of the new agent state and work item state.

An auto wrap option can be set in the agent s configuration table that allows an agent time to wrap up a work item upon completion. Agents can select an interface option that invokes the AgentAvailable function to indicate that they are out of wrap up mode and ready to accept another work item. UQ system changes the status of the work item to Complete and places the agent in the Auxwork state if AgentInitAuxWork function has been invoked. If the AgentInitAuxWork function is not invoked the agent s state is set to BUSY if there are other work items in the queue that the agent can handle. Otherwise the agent is placed in the Available state.

A situation can arise when a work item is cancelled after it has been assigned to an agent but before the agent has accepted the work item. Such a situation may arise for example when a caller hangs up while waiting. In this case the UQ system informs the client that the work item is cancelled through HandleWorkItemStatus and a signal such as a blinking button on the agent s user interface display can be changed to indicate that the work item was removed.

The term private branch exchange PBX refers to a subscriber owned telecommunications exchange that usually includes access to the public switched network. When an email and a PBX work item are queued UQ system uses the priority set forth in the route rules to determine which media will have higher priority over the other. Client configurations typically give PBX work items higher priority than email.

When a work item is completed UQ system sends a work item journal entry to communication server via the HandleJournal function. The journal entry includes information to identify whether the journal entry pertains to the agent state history and or the work item escalation history of the work item.

If the connection between UQ system and session mode communication server fails UQ system will remove all agents associated with session mode communication server and send all non interactive workitems back to UQ system for future dispatch. All interactive work items are marked as complete. Note that an administrator can designate a particular communication channel as interactive or non interactive and the work items that are routed through the communication channel are designated as interactive or non interactive correspondingly.

When UQ business service is instantiated it will load the UQ configuration including the sender s server component name and the workflow name. In one embodiment an HTTP transport business service routes the request to the appropriate component in communication server . If there are multiple EAI object managers for receiving messages from UQ system a load balancer is included to route request to the appropriate EAI object manager .

Each work item sent by UQ clients include a login and a client key associated with the work item. When the same work item is being returned form UQ system as a result of either an agent assignment or problem with the work item the login and the client key are used to route the result to the right client.

An agent can use the function InitTransfer to transfer a work item to another agent if the agent cannot respond to the work item or thinks that another agent is better qualified to respond. If the transferree agent is not available to accept the work item being transferred the work item will be queued until the agent is available.

An agent can invoke the TransferWorkItemToAgent function to transfer a work item to another agent to consult with the other agent regarding the work item. If the agent is not available for consultation UQ system informs the agent that the other agent is not available. The agent can select whether to hold on to the work item retry or send the work item to a route.

An agent can use the function TransferWorkItemToRoute to transfer a work item to along a route to another agent. This is useful for example when an agent receives a work item that would be handled more efficiently by an agent with other skills.

In one embodiment a client server system in accordance with the present invention includes UQ API for communicating with UQ system . For example the interface can translate information in one format such as a data table used by UQ business service to an extensible markup language XML format used in UQ system . UQ API can also translate information between other formats suitable for use in UQ business service and UQ system . Alternatively the same format can be used throughout system thereby eliminating the need for UQ API . UQ API is further described in copending U.S. patent application Ser. No. 09 823 678 entitled Extensible Interface For Intermodule Communication .

In one embodiment a user interface for entering and editing agent skills is provided. An example of an agent skill graphical user interface GUI is described in U.S. patent application Ser. No. 09 823 531 entitled Communication Toolbar Supporting Multiple Communication Channels of Different Media Types . The agent skill GUI includes fields for selecting entering and editing agent information including name employee number job title login name contact information skills and the level of expertise for each skill item. After a client updates the skills of an agent through the agent skill GUI the ChangeAgentSkill function in UQ business service can be used to update agent information in UQ system .

The route selection criteria allows UQ system to examine the work item to determine whether the route can handle the work item. For example consider an email route with the following selection critiera SiebelMediaType Email Category money ReceivierAddress sales siebel.com. If the email route includes all of the above properties this email will be assigned to the route. The IsContact field identifies whether a real time agent is needed or not. If IsContact is false the work items assigned to this route will be sent to an agent who is logged in regardless of his availability. If IsContact is true the work items can be sent to agent whether they are logged in or not. The routes can be transmitted from communication server to UQ system via the UQInitRules and UQReplaceRules functions as described hereinabove.

Other tables can be included in an embodiment of UQ system in addition to or instead of the tables shown in 

The route definitions properties escalation rules channels and channel properties can be entered via a user interface as shown in the example administrator interfaces in and Note that other suitable types of interfaces for entering this information can be used with the interfaces shown in and being just one example.

The route window also includes information regarding the route service level and service level percentage. These values indicate the amount of time within which the given percentage of the work items need to be handled in the route. Selecting a route in route window causes the route to be displayed in the uppermost line of the list which includes data entry windows for entering and modifying the selected route s parameters.

Administrator s interface also includes properties tab and escalations tab that can be selected to view add edit and delete properties and escalation rules for the selected route shown in line . The properties and escalation rules provide a set of parameters that are used by UQ engine to determine how to handle work items according to the administrator s preferences.

When properties tab is selected the administrator can enter property information for the route. The properties define the characteristics of the work to be performed using the route and as many properties as desired can be defined for the route.

In the implementation shown in selecting the properties tab invokes properties interface that allows an administrator to add delete and edit one or more properties for the selected route. Multiple properties can be combined using a language code with relational operators that are evaluated when applying the properties to the corresponding route. For example the begin group can be selected from a list of delimiters such as single or multiple parentheses followed by a property a relational operator a property value an end group and a joinder operator that allows expressions to be grouped together. The properties relational operators property values end group and joinder operators can also be selected from a pull down list that includes the available selections defined by the administrator. The joinder operators can be implemented using any suitable relational operators such as Boolean operators. The following expression of properties results from the entries shown in lines and for an email Recipient furniture.com AND category chair OR category table 

The Recipient property is derived from the addressee of the email and the category can be derived from the contents of the email. This means that UQ engine can include a function that scans the work item and determines the subject of the content by analyzing the number of times keywords and phrases appear. Additionally a commonly used linguistic representation of textual content known in the art is the bag of words representation can also be used. In this approach the content is represented as a list of the words that appear in it and as a vector of features with a specific frequency assigned to each feature. In some cases the words are stemmed so that similar words map to a common root. For instance learning learned and learns would all map to the common root learn . This frequency corresponds to the number of times each stemmed word occurs in the document. One or more topics to which the content pertains is determined by analyzing which words occur most frequently.

When UQ engine receives a work item it compares the properties associated with the route to the work item. If a match is found between the properties associated with the route and the characteristics of the work item then the work item is handled according to the route parameters. Although any number of properties can be defined for a route the fewer number of properties specified the greater the probability that a work item can be handled according to one of the routes. Also evaluating a greater number of properties can require more of the processing resources of UQ engine .

In another implementation macro substitution can be used to add power and flexibility to UQ engine . A delimiter such as the percent sign can be used to indicate a term whose value can be supplied or substituted with a value supplied by the administrator. For example in the following property expression a number of different values can be substituted for the term type Recipient furniture.com AND category type An administrator can specify any number of values that can be substituted for the term type such as chair table and desk . When the category of a work item matches any of the values allowed by the administrator for the term type in the property expression the work item is handled along the route that corresponds to the property expression.

As another example of the usefulness of the macro substitution feature is the ease of creating routing rules for agents that speak several different languages. A property expression for a route can be created as follows Recipient furniture.com AND language language The agent skills can include the languages the agent is capable of speaking such as English French and Spanish. When the language of a work item matches any of the language values spoken by an agent the work item can be assigned to a route that corresponds to an agent with the required linguistic abilities.

Another feature that can be implemented to add power and flexibility to UQ engine is an agent ID virtual skill feature. This capability results in the work item being assigned directly to the agent specified by the work item as opposed to being placed in a queue waiting for the next available agent who has the skills to handle the work item. For example a property expression for a route to a particular agent can be created as follows AgentID AgentID When a work item with Recipient johndoe furniture.com is received the work item will be assigned to the route corresponding to the Agent ID johndoe. Agent ID recipient The correct syntax is AgentID AgentID When a work item with Recipient johndoe furniture.com is received a new property AgentID johndoe is added to the work item s properties before it is sent to UQ system . When UQ system receives the work item and finds a match for a route the UQ system then determines whether any of the escalation rules apply. If an escalation rule specifying AgentID AgentID is found the UQ system uses the work item property to find that AgentID johndoe to assign the work item to the agent named John Doe.

In the implementation shown in selecting the escalations tab invokes escalations interface and escalations rules interface for adding deleting and editing one or more escalation rules for the selected route. Escalations interface allows an administrator to select or enter the name of an escalation rule and to specify how long the escalation rule will be in effect once it is activated. The administrator can also enter the order in which the selected escalation rule is activated relative to other escalation rules that apply to the selected route.

The escalation rules interface allows an administrator to combine multiple terms into one escalation rule using a language code with relational operators that are evaluated when the escalation rule s are applied to the corresponding route. For example the begin group such as single or multiple parentheses can be entered followed by a skill name a relational operator a skill item an end group a joinder operator and a sequence value that allows escalation rules to be grouped together. The begin group skills relational operators skill items end group joinder operators and sequence values can also be selected from a pull down list that includes the available selections defined by the administrator.

When UQ engine receives a work item it attempts to match an agent having the desired skills to handle the work item. If an agent who has the desired skills cannot be found the next escalation rule can specify fewer or more common skills thus making it more likely that an agent with the reduced scope of skills can be found. Each escalation rule has a time associated with it that represents the amount of time allowed to find an agent. The time limit can be omitted for the last escalation rule so that the work item does not go unserved.

Escalation Rule 1 Allow 120 seconds to find an agent who is an expert in furniture sales and the English language. Language english Expertise Expert AND Skill name Furniture Sales Expertise Expert .

Escalation Rule 2 Allow 180 seconds to find an agent who has experience with furniture sales and speaks the English language. Language english Expertise intermediate AND Skill name Furniture Sales Expertise intermediate .

Escalation Rule 3 Wait until an agent is available who speaks the English language and works in the furniture department. Language english Expertise intermediate AND Skill name Furniture Department Expertise novice .

Although any number of escalation rules can be defined for a route the more specific the scope of the agent s skills specified the lesser the probability that a work item can be handled according to the escalation rule. Also evaluating a greater number of escalation rules can require more of the processing resources of UQ engine .

In another implementation macro substitution can be used to add power and flexibility to escalation rules in UQ engine . A delimiter such as the percent sign can be used to indicate a term whose value can be supplied or substituted with a value supplied by the administrator. For example in the following escalation rule a number of different values can be substituted for the term type Skill name furniture AND language type The same work type has to be in the work item property. An administrator can specify any number of values that can be substituted for the term type such as English French and Chinese . When the agent s language matches any of the values allowed by the administrator for the term type in the escalation rule the work item is handled by that agent as long as the other criteria is satisfied as well.

The channel service level and service level percentage indicate the amount of time within which the given percentage of the work items need to be handled. This differs from the route service level and service level percentage since there can be multiple routes for the same media. Media statistics provide information for each media type while route statistics provide information for each route.

Administrator s interface also includes properties tab that can be selected to view add edit and delete properties for the selected channel shown in line . The channel properties list is used when a route selection criteria is defined and a pick list can be provided from which the user can choose an option. Properties interface is used as entries in a pick list from which the user can choose an option.

The foregoing detailed description has set forth various embodiments of the present invention via the use of block diagrams flowcharts and examples. It will be understood by those within the art that each block diagram component flowchart step and operations and or components illustrated by the use of examples can be implemented individually and or collectively by a wide range of hardware software firmware or any combination thereof.

The present invention has been described in the context of a fully functional computer system however those skilled in the art will appreciate that the present invention is capable of being distributed as a program product in a variety of forms and that the present invention applies equally regardless of the particular type of signal bearing media used to actually carry out the distribution. Examples of signal bearing media include recordable type media such as floppy disks and CD ROM transmission type media such as digital and analog communications links as well as media storage and distribution systems developed in the future.

The above description is intended to be illustrative of the invention and should not be taken to be limiting. Other embodiments within the scope of the present invention are possible. Those skilled in the art will readily implement the steps necessary to provide the structures and the methods disclosed herein and will understand that the process parameters and sequence of steps are given by way of example only and can be varied to achieve the desired structure as well as modifications that are within the scope of the invention. Variations and modifications of the embodiments disclosed herein can be made based on the description set forth herein without departing from the spirit and scope of the invention as set forth in the following claims.

