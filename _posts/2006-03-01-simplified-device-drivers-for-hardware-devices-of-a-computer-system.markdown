---

title: Simplified device drivers for hardware devices of a computer system
abstract: A computer system uses simplified device drivers for operating hardware devices. A simplified device driver for a hardware device of a given device type, such as a flatbed scanner, works with a system-supplied common driver for that given device type. The common driver and the simplified driver together function like a regular device driver. The simplified device driver implements a small number of entry point functions corresponding to a pre-selected set of operation commands “generic” to hardware devices of that given device type. When an application makes a request for an operation by the device, the request is passed through a device driver interface (DDI) to the common driver. The common driver then calls the entry point functions in the simplified device driver to carry out the requested operation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07673303&OS=07673303&RS=07673303
owner: Microsoft Corporation
number: 07673303
owner_city: Redmond
owner_country: US
publication_date: 20060301
---
This application is a continuation of and priority is claimed to application Ser. No. 09 809 237 filed Mar. 15 2001 now U.S. Pat. No. 7 047 534 titled SIMPLIFIED DEVICE DRIVERS FOR HARDWARE DEVICES OF A COMPUTER SYSTEM and issued to Sadovsky which claims priority from U.S. Provisional Patent Application Ser. No. 60 190 457 filed Mar. 17 2000. This United States patent is commonly assigned herewith and is hereby incorporated herein by reference for all that it discloses.

This invention relates generally to computer operating systems and more particularly to software components for communicating with and controlling the operation of a computer hardware device such as a scanner.

A computer system employs hardware devices for various functions such as data input and output printing display etc. Each hardware device in the computer system is typically operated through its associated device driver which is typically provided by the vendor of the hardware device and loaded as part of the operating system. The device driver allows the operating system of the computer and applications running on the computer to communicate with the device and control its operations. The device driver is device specific in that it is written to handle the specific behavior of the device. On the other hand the device driver also has to be written according to specifications and requirements of the operating system with which the driver is to be used.

Although the quality of the device driver for a hardware device is critical to the proper operation of the device many hardware vendors find it difficult to put in the significant time and resources needed to adequately develop a device driver. As a result device drivers provided by hardware vendors are often of unsatisfactory quality and require extensive fixing before they can be used with the operating system. This problem is especially significant for models with low profit margins. For example flatbed color scanners are commonly used for capturing color images for incorporation in presentations and communications. Some low end models of flatbed scanners have rather low retail prices which limit the resources their vendors could reasonably spend on writing device drivers for them.

The difficulty in obtaining well developed device drivers is exacerbated by the need to include many device drivers with an operating system. One of the goals of modern operating systems is to provide an out of the box experience where an end user can simply connect a device to her computer and the device will work without the need to install any extra software. To provide such an experience an operating system typically includes many device drivers from different hardware vendors. Due to the large number of device drivers involved the time and resources required to test and fix the drivers to ensure their proper operations can become unacceptably high. Accordingly there is a need for a new approach in developing device drivers that makes it significantly easier for hardware vendors to develop high quality device drivers.

In view of the foregoing the present invention provides a computer system that allows the use of simplified device drivers for operating hardware devices. A simplified device driver for a hardware device of a given type such as a flatbed scanner works with a common driver provided for that given type and together they function like a regular device driver. The simplified device driver implements entry point functions for a small set of pre selected operation commands generic to different device models and brands of that given device type. When an application makes a request for an operation by the device the request is passed through a device driver interface DDI to the common driver. The common driver then calls the entry point functions in the simplified device driver to control the device to carry out the requested operation. Because a simplified device driver only has to implement a small number of entry point functions for generic device operation commands it is significantly less complicated than a regular device driver that has to handle various driver interface functions required by the operating system. As a result it is much easier for a hardware vendor to develop a high quality simplified device driver.

Additional features and advantages of the invention will be made apparent from the following detailed description of illustrative embodiments which proceeds with reference to the accompanying figures.

Turning to the drawings wherein like reference numerals refer to like elements the invention is illustrated as being implemented in a suitable computing environment. Although not required the invention will be described in the general context of computer executable instructions such as program modules being executed by a personal computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations including hand held devices multi processor systems microprocessor based or programmable consumer electronics network PCs minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a conventional personal computer including a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. The system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within the personal computer such as during start up is stored in ROM . The personal computer further includes a hard disk drive for reading from and writing to a hard disk a magnetic disk drive for reading from or writing to a removable magnetic disk and an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM or other optical media.

The hard disk drive magnetic disk drive and optical disk drive are connected to the system bus by a hard disk drive interface a magnetic disk drive interface and an optical disk drive interface respectively. The drives and their associated computer readable media provide nonvolatile storage of computer readable instructions data structures program modules and other data for the personal computer . Although the exemplary environment described herein employs a hard disk a removable magnetic disk and a removable optical disk it will be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer such as magnetic cassettes flash memory cards digital video disks Bernoulli cartridges random access memories read only memories and the like may also be used in the exemplary operating environment.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM including an operating system one or more applications programs other program modules and program data . A user may enter commands and information into the personal computer through input devices such as a keyboard and a pointing device . Other input devices may include a microphone joystick game pad or the like. The input devices may further include image capturing devices such as scanners and digital cameras as sources of color image data. These and other input devices are often connected to the processing unit through a serial port interface that is coupled to the system bus but may be connected by other interfaces such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video adapter . In addition to the monitor personal computers typically include other peripheral output devices not shown such as speakers and printers.

The personal computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be another personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the personal computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the personal computer is connected to the local network through a network interface or adapter . When used in a WAN networking environment the person computer typically includes a modem or other means for establishing communications over the WAN . The modem which may be internal or external is connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the personal computer or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

In the description that follows the invention will be described with reference to acts and symbolic representations of operations that are performed by one or more computers unless indicated otherwise. As such it will be understood that such acts and operations which are at times referred to as being computer executed include the manipulation by the processing unit of the computer of electrical signals representing data in a structured form. This manipulation transforms the data or maintains it at locations in the memory system of the computer which reconfigures or otherwise alters the operation of the computer in a manner well understood by those skilled in the art. The data structures where data is maintained are physical locations of the memory that have particular properties defined by the format of the data. However while the invention is being described in the foregoing context it is not meant to be limiting as those of skill in the art will appreciate that various of the acts and operation described hereinafter may also be implemented in hardware.

Referring now to the present invention is directed to a system architecture that enables the use of a simplified device driver for controlling the operation of a hardware device . The simplified device driver is significantly easier to develop and to debug than regular device drivers. As a result hardware vendors are likely to be able to develop high quality simplified device drivers that do not require extensive fixing. As will be described in greater detail below the simplification of the device drivers in accordance with the invention is achieved by using a common driver for a given type of hardware devices such as flatbed scanners that works together with simplified device drivers for different devices of that given type. The common behavior between the different models of devices of the given type is abstracted into the common driver which preferably is system supplied. Specifically the simplified device drivers are required to implement functions responsive to a small set of pre selected simple operation commands from the common driver that are generic to the given type of devices. Using the pre selected set of commands the common driver can operate devices of that type through their respective simplified drivers to provide their functionality. For example the set of commands may include simple input output I O operations such as SET and GET operations that are generic in use but the specific operations performed by the simplified driver to carry out the commands depend on the target device. The common driver is not required to have knowledge of the specifics of the simplified driver.

In contrast to the common driver the simplified device driver for a particular device implements any needed device behavior specific to the device and is expected to be provided by the vendor of that device. As described above the common driver can send a finite set of commands to the simplified device driver of a target device to accomplish tasks. The simplified driver can implement any method to translate the generic commands from the common driver into device specific operations. The common driver is not concerned with the details of such device specific operations and preferably only has to be informed of the success failure status of these commands.

By way of example in an embodiment where the devices are scanners the common driver may send a command to set the X resolution e.g. CMD SET X RESOLUTION to the simplified driver of a scanner with the intended value of the X resolution. The simplified driver interprets the command as an intention to set the X resolution and issues the correct sequence of commands to the associated scanner with the specified x resolution value. The simplified driver then returns a response to the common driver indicating whether the setting operation is successful.

In the following description the invention will be described in the context of an embodiment based on the Windows Image Acquisition WIA architecture which is part of the Windows operating system of Microsoft Corporation. Moreover the invention will be described using flatbed scanners as one example of the different types of hardware devices for which simplified device drivers can be advantageously used. It will be appreciated however that the approach of employing simplified device specific drivers in accordance with the invention can be effectively used in other types of operating systems. Moreover the invention is not limited only to flatbed scanners but can be advantageously applied to other types of computer peripheral devices where a common set of generic operations can be defined for different models of the devices.

Referring now to the operating system of the shown embodiment employs an image acquisition architecture that is designed to enable an image processing application to effectively communicate with and control the operations of various image capturing devices such as scanners and digital cameras. To illustrate the concept of using simplified device drivers in accordance with the invention a simplified device driver for a flatbed scanner is juxtaposed with a regular device driver for another image capturing device and the image acquisition architecture is described in connection with the regular device driver to allow an appreciation of the advantages of using the simplified device driver.

In the embodiment of the image capturing device functions as a source of color image data which can be transmitted to an image processing application for various types of processing and editing operations. The processed or edited color image may then be displayed on a color display device such as a computer monitor for viewing printed on a printer or included in a document for presentation or communication purposes.

The image acquisition architecture of the operating system includes a system supplied image acquisition service which servers as an intermediate between the application and the device drivers for various image capturing devices such as the image capturing device which may be a scanner a digital camera etc. and the flatbed scanner . The image processing application communicates with the image acquisition service through an image acquisition Application Programming Interface API provided by the operating system . When the application makes a request to use one of the image capturing devices the image acquisition service directs the request to the device driver for that image capturing device. Communicating with the device driver through the image acquisition service the image processing application can monitor communicate with and receive captured color image data from the image capturing device .

The device driver is typically supplied by the vendor of the associated image capturing device . In the illustrated embodiment the device driver is a user mode component that directs image acquisition property changes and commands to its associated image capturing device . It communicates through a device specific user mode interface with system supplied or vendor supplied kernel mode I O device drivers which drives the image capturing device through a driver such as a USB driver. The kernel mode image drivers which are bus specific package data for delivery to the image capturing device and transfer data from the image capturing device to the device driver . The communications between the kernel mode image driver and the image capturing device may be based on one of different types of buses. For instance in one implementation kernel mode image drivers for the USB SCSI and IEEE 1394 buses are provided with the operating system .

In the opposite direction of the command data flow the device driver communicates with the image acquisition service through a Device Driver Interface DDI . The image acquisition DDI allows the image acquisition service to communicate with and control the device driver . Requests made by the application concerning the image capturing device are directed to the image acquisition service which in turn directs the requests to the appropriate device driver through the image acquisition Device Driver Interface DDI . To work with the image acquisition DDI the device driver is required to implement various pre defined interface methods for communications with the Image Acquisition Service . The interface methods perform device related tasks such as creating a tree like data structure called a device tree with items representing the device and its images and folders reading and writing properties of the items in the device tree transferring captured image data from the image capturing device enumerating device image formats supported by the device deleting an item in the device tree sending operation commands to the device enumerating device capabilities and obtaining device error message strings.

It can be seen from this example that to implement the required DDI interface methods in a regular device driver for an image capturing device a hardware vendor has to have a good understanding of the image acquisition architecture of the operation system and to follow carefully the specifications of the methods and their parameters. Due to the relatively large number and complexity of the required interface methods the proper development of a regular device driver for an image capturing device can require significant time and resources. The hardware vendor of the device may find it difficult to allocate the needed resources for driver development especially when the device is a low end model. This problem of course is not peculiar to image capturing devices but is a general one for vendor provided device drivers.

The use of simplified device drivers in accordance with the invention effectively solves this problem. Specifically rather than implementing all the device driver interface methods required of a regular device driver e.g. the driver a simplified device driver for a device of a given type only has to implement entry point functions pertaining to a very small set of operation commands generic to devices of the given type. Those entry point functions allow the simplified device driver to be accessed by a common driver for the given device type. The common driver preferably system supplied handles the device driver interface methods as required by the system architecture and communicates with the simplified device driver through the entry point functions implemented therein. In this way the system supplied common driver and the vendor supplied simplified device driver together function like a regular device driver such as the device driver . Since the simplified device driver does not have to implement the complicated system interface methods it is significantly easier for the hardware vendor to develop. The hardware vendor only has to focus on device specific behavior which it knows best in writing the simplified device driver to perform operations for carrying out the small set of commands from the common driver.

For instance in the illustrated embodiment the image acquisition architecture requires a regular device driver to handle the management and validation of the settings of image acquisition properties according to rules defined as part of the architecture. With the combination of a common driver and one or more simplified drivers the common driver controls the various aspects of the property management and validation. Thus a simplified driver does not have to deal with property management and validation and only has to handle property setting negotiations and data acquisition operations.

In one embodiment the installation of a simplified device driver requires additional entries in the installation file .INF . First an entry is included in the device data section of the .INF file to indicate that the device driver is a simplified one rather than a regular driver. The value of this entry is set to be the name of the file in this embodiment a .DLL file that implements the simplified device driver. Moreover in an Add to Register section where a regular device driver would normally be referenced the file that implements the common driver is listed as the driver for the device.

In the embodiment of the image acquisition system shown in the common driver for flatbed scanners is referred to as the Flatbed Driver . The Flatbed Driver may be used together with a plurality of simplified device drivers referred to as simplified scanner drivers for flatbed scanners that may be of different models from different hardware vendors. Each of the simplified scanner drivers is required to implement entry point functions for corresponding operation commands generic to those flatbed scanners. Specifically there are only four entry point functions that the simplified scanner driver has to implement MicroEntry GetScanInfo SetPixelWindow and Scan. The purposes of these functions and their parameters are described in greater detail below.

When the application makes a request concerning the flatbed scanner the request is passed by the Image Acquisition Service to the Flatbed Driver . The Flatbed Driver handles the request by sending commands i.e. calling the entry point functions in the simplified scanner driver for that scanner to perform the requested operation. Also a data structure called SCANINFO is passed to the simplified scanner driver to communicate scanning parameters such as scan window and resolutions. This data structure and other data structures used by the simplified scanner driver will be described in the Structure Definitions section below. The Flatbed Driver reads values form the SCANINFO structure but does not write them. It is the simplified scanner s responsibility to set the data members of the SCANINFO structure. The simplified scanner driver relies on the values stored in the SCANINFO for a scan and does not separately store any parameters for that scan. This allows the simplified driver to support access to the scanner by multiple applications. For instance if two applications are setting up scans on the same scanner at the same time there will be only one copy of the simplified driver running. In this situation the simplified driver will be called with one of two different SCANINFO structures depending on which application is trying to access the scanner.

The parameter lPhase indicates the requested scan phase. Valid values of this parameter include SCAN FIRST SCAN NEXT and SCAN FINISH. SCAN FIRST is the first phase sent to the simplified driver which should initialize and prepare the scanner to scan as well as initiate the scan. The scanned data should be returned from this call. To that end the parameter pBuffer points the buffer memory space to be filed with the scanned data. This buffer is allocated by the Flatbed Driver and its length is specified by the parameter lLength which is the requested amount of data to be scanned. The value of the parameter pReceived indicates the amount of data actually scanned into the buffer. This value should not exceed the value of lLength. The phase SCAN NEXT is repeatedly called during the data transfer. The phase SCAN FINISH will be called to terminate the scanning process. It is called even if the user cancels the scan. In response the simplified driver should stop the transfer of scanned data and reset the scanner to a power on state ready for another transfer .

As described above commands are passed to the simplified scanner driver in the MicroEntry function. Commands that are required to be supported by the simplified driver are described in this section. It should be appreciated that there may be other possible commands that the simplified scanner driver may support.

The flatbed scanners using simplified scanner drivers may support limited automatic document feeder ADF control. To report that it supports automatic document feeding a simplified driver may set the ADF member in the SCANINFO structure to 1. This will cause the Flatbed Driver to add the needed properties for automatic document feeder control.

The data structures used in the entry point functions and commands of the simplified driver as described above are defined as follows 

As mentioned above one of the important advantages of using simplified device drivers is that they are very easy for hardware vendors to develop. This is because they only have to implement the very simple entry point functions for interacting with the common driver and to handle device specific aspects of controlling the device to perform pre selected basic operations generic to devices of that type. The task of handling the complicated interfacing with the high level operating system components is taken care of by the system supplied common device driver.

In view of the many possible embodiments to which the principles of this invention may be applied it should be recognized that the embodiment described herein with respect to the drawing figures is meant to be illustrative only and should not be taken as limiting the scope of invention. For example those of skill in the art will recognize that the elements of the illustrated embodiment shown in software may be implemented in hardware and vice versa or that the illustrated embodiment can be modified in arrangement and detail without departing from the spirit of the invention. Therefore the invention as described herein contemplates all such embodiments as may come within the scope of the following claims and equivalents thereof.

