---

title: Technique for scanning stealthed, locked, and encrypted files
abstract: A copy of the raw data on physical disk of an inaccessible source file is automatically generated in an accessible target file. When accessed, the copy of the raw data of the inaccessible source file in the accessible target file can be read allowing a user or application to evaluate the data of the accessible target file, and thus indirectly the raw data of the inaccessible source file. In some embodiments, the copy of the raw data is evaluated for malicious code, allowing a user or application to take protective actions, such as deleting the inaccessible source file. Where the raw data of the inaccessible source file is encrypted, the copy of the raw data is automatically decrypted by the operating system when read yielding unencrypted data. Where the raw data of the inaccessible source file is compressed, the copy of the raw data is automatically decompressed by the operating system when read yielding uncompressed data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07634521&OS=07634521&RS=07634521
owner: Symantec Corporation
number: 07634521
owner_city: Mountain view
owner_country: US
publication_date: 20060427
---
The present invention relates to computer systems. More particularly the present invention relates to the detection of malicious code on a computer system.

Malicious code often stores processes and data in stealthed e.g. hidden or locked files to prevent detection such as by a malicious code detection application. Often the contents of these files are also encrypted or compressed.

In accordance with one embodiment of the invention a method includes determining the file path of an inaccessible source file wherein the contents of the inaccessible source file is stored as raw data at one or more locations on a physical disk of a host computer system. An accessible target file is automatically created and a copy of the raw data of the inaccessible source file is automatically generated in the accessible target file. When accessed the copy of the raw data of the inaccessible source file in the accessible target file i.e. the contents of the accessible target file can be read allowing a user or application to evaluate the contents of the accessible target file and thus indirectly the raw data of the inaccessible source file. In some embodiments the contents of the accessible target file is evaluated for malicious code allowing a user or application to take protective actions such as deleting the inaccessible source file.

In some embodiments the raw data of the inaccessible source file is encrypted data and an encryption stream utilized for decrypting the raw data of the inaccessible source file is obtained and associated with the accessible target file. When read the copy of the raw data of the inaccessible source file in the accessible target file is automatically decrypted by the operating system yielding unencrypted data.

In some embodiments the raw data of the inaccessible source file is compressed data. When read the copy of the raw data of the inaccessible source file in the accessible target file is automatically decompressed by the operating system yielding decompressed data.

Embodiments described herein are best understood by reference to the following detailed description when read in conjunction with the accompanying drawings.

Common reference numerals are used throughout the drawings and detailed description to indicate like elements.

Scanning encrypted files that have been stealthed and or locked for malicious code can be very difficult and time consuming often requiring manual decryption. As used herein in one embodiment an encrypted file is a file that is automatically encrypted and decrypted by a file system. Further as used herein in one embodiment a stealthed file is a file that is not visible in a standard directory listing used by an file system due to malicious code that redirects file input output I O commands to that the file. Additionally as used herein in one embodiment a locked file is a file that is opened for exclusive access and cannot be opened for reading by another process.

In Windows NT operating systems files can be opened in a variety of ways such as for shared use or for exclusive use. When a file is opened for shared use typically another process can access the file through the file system. However when the file is opened for exclusive use i.e. not for shared use typically another process cannot access the file. For example malicious code often opens a file with exclusive access so that another process can not access the file through the file system and examine the contents.

When a file is to be accessed through the file system typically an API function for example the win32 API function CreateFile is called and various parameters such as the file name of the file to be accessed are passed to the operating system. In response the operating system locates the file in the standard directory listing and returns a file handle to the file.

When a process has the file handle the process can open the associated file and seek within the file. Depending on how the file was opened the process can also perform read and or write operations on the file. However when the file cannot be located in the directory listing or the file has been opened for exclusive access in response to the call to CreateFile the operating system returns a service denial such as an access denied error and the calling process cannot access the file.

Thus for example when a malicious code detection scanning application calls CreateFile to obtain a handle to a file that is hidden from the directory listing or opened for exclusive access the operating system returns a service denial to the malicious code detection scanning application. Consequently the malicious code detection scanning application cannot access the file and evaluate the file for malicious code.

Some software products bypass the file system and allow a user to go directly to the locations of the raw data contents of a file on a physical storage disk and to read the raw data contents of the file from the physical disk. As used herein the raw data of a file e.g. an inaccessible source file is the actual data contents of a file as stored on a physical disk e.g. a hard drive. However these software products cannot automatically decrypt raw data that is encrypted and or decompress raw data that is compressed.

For example some software products such as VxMS available from Symantec Corporation Cupertino Calif. allow the file system stack on a Windows NT operating system to be bypassed and the raw data contents of files on the physical disk to be read and parsed. Generally with VxMS the physical disk is viewed as a single flat file so that the files on the physical disk are available as blocks of data. The data is mapped out and the locations of the raw data i.e. the data clusters for each file is available for reading.

When the raw data of a file is compressed data the above technique obtains raw data that is still in a compressed state. The operating system does not decompress the compressed raw data from the physical disk. Similarly when the raw data of a file is encrypted data the above technique obtains raw data that is still in an encrypted state. The operating system does not decrypt the encrypted raw data from the physical disk.

Consequently even if the raw data of a file is obtained from the physical disk and then provided to a malicious code detection scanning application if the raw data of the file is encrypted or compressed the malicious code detection application cannot evaluate the data for malicious code as the data is still in the encrypted or compressed state.

Embodiments in accordance with the present invention directly access the raw data contents i.e. the raw data of an inaccessible source file on a physical disk and automatically generate a copy of the raw data of the inaccessible source file in an accessible target file. As used herein in one embodiment an inaccessible source file is a file on a computer system that is a locked file or a stealthed file as earlier defined.

In one embodiment when the raw data of the inaccessible source file are encrypted an accessible target file is automatically generated so that the copy of the encrypted raw data is automatically decrypted by the operating system and scanned for the presence of malicious code. In one embodiment when the raw data of the inaccessible source file is compressed an accessible target file is automatically generated so that the copy of the compressed raw data is automatically decompressed by the operating system and scanned for the presence of malicious code. In one embodiment when the raw data of the inaccessible source file is normal data i.e. not encrypted data and not compressed data an accessible target file is automatically generated so that the copy of the raw data contents are accessible and scanned for the presence of malicious code. In some embodiments upon detection of malicious code protective action is taken such as deleting the inaccessible source file.

Referring now to is a diagram of a client server system that includes a file access and scanning application executing on a host computer system e.g. a first computer system in accordance with one embodiment of the invention. Host computer system sometimes called a client or user device typically includes a central processing unit CPU hereinafter processor an input output I O interface a memory and a disk e.g. a physical hard disk. In one embodiment memory includes an operating system such as a page based virtual memory system that uses pages e.g. memory areas.

For example Windows NT are operating systems widely used on home and business computer systems. Windows NT operating systems provide page based virtual memory management schemes that permit programs to realize a virtual memory address space. In one embodiment when processor is running in virtual memory mode all addresses are presumed virtual addresses and are translated or mapped to physical addresses each time processor executes a new instruction to access memory.

Conventionally the virtual memory address space is divided into two parts a lower user address space also referred to as user mode address space available for use by a program and a high system address space also referred to as kernel address space reserved for use by the operating system.

To protect the integrity of the operating system code and other kernel address space code and data structures from errant or malicious programs and to provide efficient system security user rights management Windows NT operating systems separate code executing in the user address space e.g. user mode from code executing in the kernel address space e.g. kernel mode. User mode code typically does not have direct access to kernel mode code and has restricted access to computer system resources and hardware. To utilize kernel mode code functionalities user mode programs utilize system calls provided in an application program interface API e.g. win32dll and Ntdll which interface between the user mode and kernel mode functions.

Windows NT operating systems typically store data e.g. the raw data of files on the physical disk s of a computer system e.g. disk in accordance with the New Technology File System NTFS . The basic unit of allocation in the NTFS is a data cluster of a specified number of bytes that is also a multiple of a sector size of the physical disk. For example a NTFS cluster of 4 kilobytes includes eight 8 512 byte sectors on a physical disk. NTFS addresses data using a cluster number.

The NTFS formats the disk space on a physical disk into volumes. Data is stored in a volume as files. Each NTFS volume has a special file called the Master File Table MFT that includes at least one record for each file in the volume. Similar to file records directory records are also stored in the MFT however rather than data directory records contain index information.

The first sixteen 16 records in an MFT are reserved for special files used by the NTFS. In particular record also commonly termed index of a MFT is the root directory folder and includes index information for locating a next directory level on the volume in the directory structure. Thus beginning with record a full path name to a selected file can be indexed through the directory records to determine the location of the record of the selected file on the MFT.

Following the first sixteen 16 reserved records in the MFT the remaining records on the MFT are for each file and directory on the volume. Generally a MFT record includes a set of file attributes that represent the file. Elements such as a file s name the file s security information and the file s data are file attributes.

Attributes stored in the MFT record are commonly termed resident attributes and attributes stored outside the MFT record are termed nonresident attributes. When file attributes are too large for the MFT record the attributes are stored in clusters of disk space outside the MFT structure but within the volume.

The MFT record includes an attribute list which itself is an attribute that lists the location of all attributes that reside in other MFT records. When a file is small an MFT record can include the raw data of the file. In larger files an MFT record lists the location s where all the raw data in the file can be found on the volume.

When a file is an encrypted file e.g. the raw data contents of the file are encrypted the MFT record for that file also includes an encryption stream termed the EFS stream which is stored in a data attribute in the MFT record. The EFS stream in the MFT record is used by the operating system and in particular the Encrypting File System EFS in decrypting the encrypted data.

Windows NT operating systems the NTFS the MFT the MFT record and directory structures and the EFS are all well known to those of skill in the art and are not further described herein in detail to avoid detracting from the principles of the invention.

Host computer system may further include standard devices like a keyboard a mouse a printer and a display device as well as one or more standard input output I O devices such as a compact disk CD or DVD drive floppy disk drive or other digital or waveform port for inputting data to and outputting data from host computer system . In one embodiment file access and scanning application is loaded into host computer system via I O device such as from a CD DVD or floppy disk containing file access and scanning application .

Host computer system is coupled to a server system of client server system by a network . Server system typically includes a display device a processor a memory and a network interface .

Further host computer system can also be coupled to other computer systems such as a computer system by network over which information can be sent and received. In one embodiment computer system is similar to host computer system and for example includes a central processing unit an input output I O interface and a memory. Computer system may further include standard devices like a keyboard a mouse a printer a display device and an I O device s .

Network can be any network or network system that is of interest to a user. In various embodiments network interface and I O interface include analog modems digital modems or a network interface card.

In one embodiment file access and scanning application is typically stored in memory of host computer system and executed on host computer system . The particular type and configuration of host computer system computer system and server system are not essential to the present embodiment.

Herein in one embodiment malicious code is defined as any computer program module set of modules or code that enters a computer system environment without an authorized user s knowledge and or without an authorized user s consent. A computer virus is one example of a malicious code. Herein malicious code can exist in either user mode or kernel mode.

The present invention is described herein with reference to Windows NT operating systems available from Microsoft Corporation Redmond Wash. and to the New Technology File System NTFS and the Encrypting File System EFS utilized by the Windows NT operating systems. Herein in one embodiment the term Windows NT operating systems represent and include Windows 2000 Windows XP Windows 2003 operating systems as well as future releases of Windows operating systems. Those of skill in the art can apply the principles and operations described herein to other operating systems and file systems with modifications as needed by a specific operating system and or file system. Further although the API functions are described herein using examples of API functions accessible from user mode e.g. win32 API in other embodiments equivalent API functions accessible from kernel mode can also be used e.g. NTOS functions.

More particularly is a key to B and C and illustrates a flow diagram of a method for generating an accessible copy of an encrypted inaccessible source file and scanning the accessible copy for malicious code in accordance with one embodiment of the invention. Referring now to together in one embodiment execution of file access and scanning application by processor results in the operations of method as described below.

In one embodiment method is entered at an ENTER operation and from ENTER operation processing transitions to a DETERMINE FILE PATH OF INACCESSIBLE SOURCE FILE operation .

In DETERMINE FILE PATH OF INACCESSIBLE SOURCE FILE operation the file path of an inaccessible source file is determined. In the present embodiment the inaccessible source file is an encrypted inaccessible source file. As used herein in one embodiment an encrypted inaccessible source file is an inaccessible source file having raw data i.e. a raw data contents in an encrypted state.

In one embodiment the file path of an inaccessible source file e.g. an encrypted inaccessible source file is a series of separated strings of characters that uniquely identifies the location of the inaccessible source file in a file system used by the operating system. Conventionally each of the separated strings of characters represents a directory level in the file system with the final string of characters representing the file name of the inaccessible source file.

In one embodiment the file path of the encrypted inaccessible source file is provided to or otherwise detected by file access and scanning application . For example in one embodiment an application such as a malicious code detection application receives a service denial on attempting to access the encrypted inaccessible source file on host computer system and provides the file path of the encrypted inaccessible source file to file access and scanning application .

For purposes of description assume as an example that the file path of the encrypted inaccessible source file is C test foo.txt . From DETERMINE FILE PATH OF INACCESSIBLE SOURCE FILE operation processing transitions to an OBTAIN MFT RECORD OF INACCESSIBLE SOURCE FILE operation .

In OBTAIN MFT RECORD OF INACCESSIBLE SOURCE FILE operation the Master File Table MFT record associated with the inaccessible source file is obtained. In the present embodiment the MFT record associated with the encrypted inaccessible source file is obtained. As earlier described a physical disk e.g. disk is typically divided by the NTFS into multiple volumes with each volume having a special file termed the MFT. The MFT includes at least one MFT record for each file stored on the volume and further includes MFT records for each directory file stored on the volume.

In one embodiment a handle is obtained to a particular volume of the physical disk on which the inaccessible source file is stored. The directory structure of the MFT is searched until the MFT record associated with the encrypted inaccessible source file is located and obtained.

The MFT record stores the raw data of the inaccessible source file or stores information describing one or more locations on the volume of the physical disk e.g. physical disk at which the raw data of the encrypted inaccessible source file is located. One method for obtaining the MFT record of an inaccessible source file is further described herein with reference to .

In one embodiment the particular one kilobyte MFT record s associated with an inaccessible source file is located by parsing through the file path of the inaccessible source file and locating the MFT record associated with the inaccessible source file through the directory structure of the MFT as further described below.

Referring now to together in one embodiment execution of file access and scanning application by processor results in the operations of method A as described below. In one embodiment method A is entered from operation at an ENTER operation and from ENTER operation processing transitions to a DETERMINE VOLUME ID operation .

In DETERMINE VOLUME ID operation in one embodiment the volume identifier ID of the volume on which inaccessible source file is stored is determined. For example in the example file path C test foo.txt the volume is C . In one embodiment file access and scanning application queries the operating system for the volume ID of volume C . The operating system determines the volume ID and returns the volume ID to file access and scanning application .

For purposes of description assume for example the volume ID returned by the operating system for volume C is Volume4062072a 351b 11da 8451 806d6172696f . Determining a volume ID for a volume in the NTFS for a main directory structure is well known to those of skill in the art and not further described herein to avoid detracting from the principles of the invention. From DETERMINE VOLUME ID operation processing transitions to an OBTAIN VOLUME HANDLE operation .

In OBTAIN VOLUME HANDLE operation in one embodiment a call is made to the operating system to receive a handle to the volume identified by the volume ID obtained in operation . In one embodiment the API function CreateFile is called specifying the volume ID e.g. Volume4062072a 351b 11da 8451 806d6172696f .

The operating system returns a handle to the volume herein also termed the volume handle to file access and scanning application . In the present example the operating system returns a handle to volume . From OBTAIN VOLUME HANDLE operation processing transitions to a REQUEST MFT RECORD operation .

In REQUEST MFT RECORD operation the operating system is called to open the specified volume and to return a specified MFT record. In one embodiment the function DeviceIOControl is called specifying the volume handle the control parameter FSCTL GET NTFS FILE RECORD and the index number associated with a particular MFT record. The control parameter FSCTL GET NTFS FILE RECORD specifies that the operating system is to locate a MFT record for a file at a specified index number and return the record. In some embodiments additional input parameters can also be specified.

In one embodiment initially index the root directory MFT record of a volume is specified. Index of the MFT is a hard coded index well known to those of skill in the art. Generally viewed index represents the root directory on the volume e.g. the first in the file path and includes a data attribute that specifies the data clusters containing index information for the next lower level in the directory structure of the volume.

The operating system opens the specified volume locates the MFT record at index and returns the MFT record for index . In one embodiment one MFT record is returned per call to DeviceIOControl. From REQUEST MFT RECORD operation processing transitions to a RECEIVE MFT RECORD operation .

In RECEIVE MFT RECORD operation file access and scanning application receives the MFT directory record requested in operation . Initially the MFT directory record returned is the MFT directory record at index of the volume. From RECEIVE MFT RECORD operation processing transitions to a SOURCE FILE check operation .

In SOURCE FILE check operation a determination is made whether the MFT record received in operation is the MFT record of the inaccessible source file. In particular in one embodiment a determination is made whether the MFT record received in operation corresponds to the last string in the file path representing the inaccessible source file e.g. foo.txt .

When the MFT record received in operation corresponds to the last string in the file path YES e.g. foo.txt the MFT record of the inaccessible source file is obtained. The search for the MFT record of the inaccessible source file is completed and from SOURCE FILE check operation processing exits method A at EXIT operation and returns to method at operation .

Alternatively when the MFT record received in operation does not correspond to the last string in the file path and thus is not the MFT record of the inaccessible source file the directory structure of the MFT is further searched until the MFT record of the inaccessible source file is obtained. Thus in one embodiment when the MFT record received in operation does not correspond to the last string in the file path NO from SOURCE FILE check operation processing transitions to a DETERMINE LOCATION S OF DIRECTORY DATA CLUSTER S operation .

In DETERMINE LOCATION S OF DIRECTORY DATA CLUSTER S operation the locations of the directory data clusters on the physical disk associated with the MFT record are determined. In one embodiment the directory data clusters are identified in the data attribute of the MFT record. Determination of a location of a data cluster from an MFT record is well known to those of skill in the art and not further described in detail to avoid detracting from the principles of the invention. From DETERMINE LOCATION S OF DIRECTORY DATA CLUSTER S operation processing transitions to a SELECT DATA CLUSTER operation .

In SELECT DATA CLUSTER operation a directory data cluster is selected. In one embodiment initially a first directory data cluster at a first location obtained in operation is selected for reading. From SELECT DATA CLUSTER operation processing transitions to a READ DATA CLUSTER operation .

In READ DATA CLUSTER operation the directory data cluster selected in operation is read. The data as read from the directory data cluster however is modified from original data due to an update sequence array error checking process used by the NTFS on directory data clusters.

In particular in order to read the original data of the directory data cluster the data in the directory data cluster needs to be modified with associated data located in an update sequence array. From READ DATA CLUSTER operation processing transitions to a RESTORE UPDATE SEQUENCE ARRAY DATA operation .

In RESTORE UPDATE SEQUENCE ARRAY DATA operation the data in the directory data cluster is modified with associated update sequence array data that was originally part of the data stored in the directory data cluster. In particular in one embodiment the last two bytes of each sector of the directory data cluster are replaced with the original 2 bytes stored in the update sequence array structure to yield the original data of the directory data cluster. On method for restoring the data in a data cluster from the update sequence array is further described herein with reference to method A and .

When the data of the directory data cluster is restored from the update sequence array the data of the directory cluster can now be evaluated to determine an index value associated with the next lower level of the file path. Thus from RESTORE UPDATE SEQUENCE ARRAY DATA operation processing transitions to a PARSE DATA CLUSTER FOR NEXT DIRECTORY IN FILE PATH operation .

In PARSE DATA CLUSTER FOR NEXT DIRECTORY IN FILE PATH operation the restored data of the directory data cluster is parsed for the next lower directory in the file path. In one embodiment the restored data of the directory data cluster is parsed for the string representing the next lower directory in the file path.

Continuing the present example the MFT record for the root directory i.e. index contains index entries for the next lower level directories e.g. those directories below C on volume . Thus in one embodiment the directory data cluster is parsed for an entry associated with the next lower directory level in the file path the string test . From PARSE DATA CLUSTER FOR NEXT DIRECTORY IN FILE PATH operation processing transitions to a NEXT DIRECTORY FOUND check operation .

In NEXT DIRECTORY FOUND check operation a determination is made whether the directory data cluster contains the next lower directory in the file path. In one embodiment a determination is made whether the directory data cluster contains the string corresponding to the next lower directory in the file path. For example a determination is made whether the directory data cluster contains an entry corresponding to the string test .

If the data cluster does not contain an entry corresponding to the next lower directory in the file path NO processing transitions from NEXT DIRECTORY FOUND check operation and returns to operation with a next directory data cluster at a next location being selected in order from the locations obtained in operation .

Alternatively when the directory data cluster contains an entry corresponding to the next lower directory in the file path YES processing transitions from NEXT DIRECTORY FOUND check operation to a READ INDEX VALUE operation .

In READ INDEX VALUE operation the index value associated with the entry for the next lower directory in the file path is read. For example the index value associated with the entry for the string test is read. For purposes of description as an example the index value associated with the entry for the string test is assumed to have the index value .

The index value represents the index e.g. offset in the volume at which the MFT record for the directory test is located. From READ INDEX VALUE operation processing returns at operation to operation with the index value obtained in operation e.g. index being specified as the next MFT record to be requested.

Operations through are similarly performed as earlier described until the MFT record of the inaccessible source file is obtained. For example continuing the example at operation the MFT record at index is next requested rather than index .

At operation the MFT record at index is returned. The MFT record at index represents the directory for the file path string test and includes a data attribute that specifies the data clusters containing index information for the next lower level in the directory structure of the volume.

At operation a determination is made whether the MFT record corresponds to the last string in the file path i.e. the inaccessible source file. As the MFT directory record corresponds to the directory test and not foo.txt the MFT record does not correspond to the last string in the file path NO and thus processing continues to operation .

In operation the locations of the directory data clusters are determined and at operations through the directory data clusters are read restored with update sequence array data and then searched for the next string in the file path e.g. foo.txt . When the entry for the string foo.txt is located at operation the index value is read.

For example assume an index value is read for the string foo.txt . Thus processing again returns to operation and index is next requested rather than index . At operation the MFT record at index is returned.

The MFT record at index represents the MFT record for the file path string foo.txt . At operation a determination is made whether the MFT record corresponds to the last string in the file path. As the MFT record corresponds to the last string in the file path e.g. foo.txt YES the MFT record of the encrypted inaccessible source file is obtained. From operation processing exits method A at operation and returns to method with processing transitioning from OBTAIN MFT RECORD OF INACCESSIBLE SOURCE FILE operation to a DETERMINE ENCRYPTION STREAM OF INACCESSIBLE SOURCE FILE operation .

In DETERMINE ENCRYPTION STREAM OF INACCESSIBLE SOURCE FILE operation the encryption stream associated with the encrypted inaccessible source file is determined from the MFT record obtained in operation . In one embodiment the encryption stream is the EFS stream in the MFT record. In one embodiment the MFT record of the encrypted inaccessible source file is read and parsed and the EFS stream is determined from a data attribute of the MFT record.

The EFS stream is a Windows alternate data stream that the operating system uses to decrypt the data of the encrypted inaccessible source file. From DETERMINE ENCRYPTION STREAM OF INACCESSIBLE SOURCE FILE operation processing transitions to a DETERMINE LOCATION S OF RAW DATA OF INACCESSIBLE SOURCE FILE ON PHYSICAL DISK operation .

In DETERMINE LOCATION S OF RAW DATA OF INACCESSIBLE SOURCE FILE ON PHYSICAL DISK operation the locations associated with the raw data of the inaccessible source file are determined from the MFT record obtained in operation . In one embodiment the MFT record of the encrypted inaccessible source file is read and parsed and the locations of the raw data that compose the encrypted inaccessible source file are determined from the data attribute in the MFT record.

Thus the locations of the raw data composing the encrypted inaccessible source file on the volume of the physical disk e.g. disk have been located and the EFS stream needed to decrypt the raw data is determined. From DETERMINE LOCATION S OF RAW DATA OF INACCESSIBLE SOURCE FILE ON PHYSICAL DISK operation processing transitions to a CREATE TARGET FILE HAVING ENCRYPTION STREAM IN MFT RECORD operation .

In CREATE TARGET FILE HAVING ENCRYPTION STREAM IN MFT RECORD operation a target file having an encryption stream in an associated MFT record is created. In one embodiment a target file having an EFS stream in an associated MFT record is created.

In particular in one embodiment the Encrypting File System EFS API functions used for reading and writing encrypted files and leaving the encrypted files in an encrypted state are used in creating the target file so that the target file is an encrypted file having an EFS stream in an associated MFT record. The EFS API functions are typically used by Windows NT operating systems for backup and restore operations. Creation of a target file having a EFS stream in an associated MFT record is further described herein with reference to .

In CALL OPENENCRYPTEDFILERAW operation a target file is opened. In particular in one embodiment the EFS API function OpenEncryptedFileRaw is called specifying the control CREATE FOR IMPORT and a target file name for example C test fool.txt . In one embodiment the file name is specified as a fully qualified file path. The control CREATE FOR IMPORT specifies that a file i.e. the target file be created to allow import of data.

The operating system creates a file i.e. the target file and also generates an MFT record associated with the target file. From CALL OPENENCRYPTEDFILERAW operation processing transitions to a RECEIVE CONTEXT operation .

In RECEIVE CONTEXT operation a context returned from the operating system is received. In one embodiment the operating system returns a context that is used in subsequent calls to the target file. In particular in one embodiment the context is used to write the EFS stream to the MFT record associated with the target file. From RECEIVE CONTEXT operation processing transitions to a CALL WRITEENCRYPTEDFILERAW operation .

In CALL WRITEENCRYPTEDFILERAW operation the EFS API function WriteEncryptedFileRaw is called. In particular in one embodiment WriteEncryptedFileRaw is called specifying the address of the procedure for call back herein termed the call back address. In one embodiment the call back address is an address of a process of file access and scanning application . The operating system uses the call back address to call back to file access and scanning application . From CALL WRITEENCRYPTEDFILERAW operation processing transitions to a RECEIVE CALL BACK operation .

In RECEIVE CALL BACK operation a call back is received by file access and scanning application . From RECEIVE CALL BACK operation processing transitions to a WRITE BACK EFS STREAM operation .

In WRITE BACK EFS STREAM operation the EFS STREAM obtained in operation is written back to the operating system. In particular in one embodiment the EFS stream obtained in operation is encapsulated with an EFS header structure that is written back to the operating system.

In one embodiment structures sent in the returned context are returned in the EFS header structure with the EFS stream in the call back to WriteEncryptedFileRaw to recreate an encrypted file and add the EFS stream to the MFT record for the target file.

From WRITE BACK EFS STREAM operation processing transitions to a CALL CLOSEENCRYPTEDFILERAW operation .

In CALL CLOSEENCRYPTEDFILERAW operation the EFS API CloseEncryptedFileRaw is called and the operating system closes the target file. In the present embodiment the target file is initially of zero 0 length with a EFS stream set in the associated MFT record entry. From CALL CLOSEENCRYPTEDFILERAW operation processing exits method and returns to method with processing transitioning from CREATE TARGET FILE HAVING ENCRYPTION STREAM IN MFT RECORD operation to an OPEN TARGET FILE operation .

In OPEN TARGET FILE operation the target file created in operation is opened so that the raw data of the inaccessible source file can be written from the physical disk to the target file. In particular in one embodiment the API function CreateFile is called to open the target file in order to receive a handle to the target file. In one embodiment CreateFile is called specifying the target file name e.g. C test fool.txt . From OPEN TARGET FILE operation processing transitions to a RECEIVE TARGET FILE HANDLE operation .

In RECEIVE TARGET FILE HANDLE operation the operating system returns a handle to the target file herein termed the target file handle. The target file handle can now be used to copy the raw data of the encrypted inaccessible source file from the physical disk to the accessible target file. From RECEIVE TARGET FILE HANDLE operation processing transitions to a COPY RAW DATA OF INACCESSIBLE SOURCE FILE FROM PHYSICAL DISK TO TARGET FILE operation .

In COPY RAW DATA OF INACCESSIBLE SOURCE FILE FROM PHYSICAL DISK TO TARGET FILE operation the raw data of the inaccessible source file is copied from the physical disk e.g. disk to the accessible target file. More particularly in one embodiment raw data at each of the data clusters that compose the contents of the encrypted inaccessible source file are read from the physical disk and written to the accessible target file until a complete copy of the raw data of the encrypted inaccessible source file is created in the accessible target file. In one embodiment the reads and writes are performed in order of the data clusters. One example of a method for copying the raw data of an inaccessible source file from physical disk to a target file is further described with reference to and method .

In OPEN VOLUME operation the volume of the physical disk having the data clusters of the inaccessible source file is opened. In one embodiment the API function ReadFile is called specifying the volume handle. From OPEN VOLUME operation processing transitions to a SELECT DATA CLUSTER operation .

Generally viewed the following operations and form a loop of commands that read each of earlier located data clusters that compose the inaccessible source file on the physical disk and that write each of the data clusters to the target file. In one embodiment each of the data clusters is read in order and each data cluster is written to the target file in order using the target file handle received in operation .

In SELECT DATA CLUSTER operation initially a first data cluster of the inaccessible source file at a first location is selected from the location s of the data clusters determined in operation . In one embodiment the first data cluster location selected is the first ordered data cluster. From SELECT DATA CLUSTER operation processing transitions to a READ RAW DATA OF DATA CLUSTER FROM PHYSICAL DISK operation .

In READ RAW DATA OF DATA CLUSTER FROM PHYSICAL DISK operation in one embodiment the raw data of the data cluster selected in operation are read from the data cluster location on the physical disk. In one embodiment the API function ReadFile is called initially specifying the location of the first data cluster e.g. at a first offset. From READ RAW DATA OF DATA CLUSTER FROM PHYSICAL DISK operation processing transitions to a WRITE RAW DATA OF DATA CLUSTER TO TARGET FILE operation .

In WRITE RAW DATA OF DATA CLUSTER TO TARGET FILE operation the data cluster read in operation is written to the target file. In one embodiment DeviceIOControl is called specifying the parameter FSCTL WRITE RAW ENCRYPTED which allows a write of encrypted raw data to the target file. From WRITE RAW DATA OF DATA CLUSTER TO TARGET FILE operation processing transitions to a LAST DATA CLUSTER check operation .

In LAST DATA CLUSTER check operation a determination is made whether the current data cluster location selected in operation is the last location composing the encrypted inaccessible source file. When the current data cluster location is not the last data cluster location composing the encrypted inaccessible source file NO processing transitions from LAST DATA CLUSTER check operation and returns to SELECT DATA CLUSTER operation with a next data cluster at a next location that is next in the data cluster order being selected.

Referring again to LAST DATA CLUSTER check operation alternatively when the current data cluster is the last data cluster composing the inaccessible source file YES the complete contents of the inaccessible source file has been read from the physical disk e.g. physical disk and written to the accessible target file. From LAST DATA CLUSTER check operation processing transitions to a CLOSE VOLUME operation .

In CLOSE VOLUME operation the volume is closed. In one embodiment the API function CloseHandle is called specifying the volume handle. In some embodiments if additional files on the volume are to be copied or other operations performed the volume handle is left open until those operations are completed and then the volume is closed. From CLOSE VOLUME operation processing transitions to an EXIT operation with processing exiting method and returning to method at operation .

Referring back again to and method in CLOSE TARGET FILE operation the target file is closed. In particular the target file now contains a complete copy of the raw data i.e. the raw data contents of the encrypted inaccessible source file and the accessible target file has an associated MFT record including a copy of the encryption stream e.g. the EFS stream of the inaccessible source file. In one embodiment the API function CloseHandle is called specifying the target file handle. From CLOSE TARGET FILE operation processing transitions to an OPEN TARGET FILE operation .

In OPEN TARGET FILE operation the target file is opened. In particular the target file is opened again to allow the operating system to automatically decrypt the copy of the encrypted raw data of the encrypted inaccessible source file present in the accessible target file.

In one embodiment the target file is opened using a call to CreateFile and specifying the target file handle. From OPEN TARGET FILE operation processing transitions to a READ TARGET FILE operation .

In READ TARGET FILE operation the target file is read by the operating system and automatically decrypted by the operating system. In one embodiment the operating system utilizes the EFS stream in the MFT record associated with the target file to automatically decrypt the copy of the encrypted raw data of the encrypted inaccessible source file present in the target file. In one embodiment the API function ReadFile is called specifying the target file handle.

Thus in the present embodiment the encrypted raw data of the encrypted inaccessible source file is now indirectly accessible through the target file and is automatically decrypted by the operating system when the target file is read to generate unencrypted data. This allows the unencrypted contents to be further evaluated such as for the presence of malicious code as further described herein. From READ TARGET FILE operation processing transitions to a SCAN TARGET FILE operation where the contents of the target file are evaluated for malicious code or optionally transitions at operation to a CLOSE TARGET FILE operation with processing exiting method at an EXIT operation further described herein.

Referring now to method and in SCAN TARGET FILE operation the unencrypted data of the target file read in operation is scanned for malicious code. Any of a variety of techniques can be used for scanning the unencrypted data for malicious code for example known malicious code strings are compared to the unencrypted data of the target file. From SCAN TARGET FILE operation processing transitions to a MALICIOUS CODE DETECTED check operation .

In MALICIOUS CODE DETECTED check operation a determination is made whether malicious code was detected in the scan of the unencrypted data in operation . In some embodiments the results of the scan are further evaluated such as in accordance with malicious code heuristics and or exclusion databases.

When a determination is made that malicious code is not detected NO processing transitions from MALICIOUS CODE DETECTED check operation to CLOSE TARGET FILE operation .

In CLOSE TARGET FILE operation the target file is closed. In one embodiment the API function CloseHandle is called specifying the target file handle. FROM CLOSE TARGET FILE operation processing transitions to EXIT operation with processing exiting method . In some embodiments rather than exiting method processing returns to operation .

Referring again to MALICIOUS CODE DETECTION check operation alternatively upon a determination that malicious code is detected YES from MALICIOUS CODE DETECTED check operation processing transitions to a TAKE PROTECTIVE ACTION operation .

In TAKE PROTECTIVE ACTION operation protective action is taken. In some embodiments the inaccessible source file is deleted from host computer system . In some embodiments the target file and or the unencrypted data is automatically copied to a text file and sent to a security evaluation center.

In one embodiment the user is prompted for input prior to taking protective action e.g. the user is asked for permission to take protective action. From TAKE PROTECTIVE ACTION operation processing optionally transitions to a NOTIFY operation or directly to CLOSE TARGET FILE operation .

In optional NOTIFY operation the user of host computer system and or a system administrator of the network e.g. network are notified of a malicious code detection on host computer system . In one embodiment a record or error message is generated and provided to the user and or system administrator. In one embodiment the notification identifies the particular malicious code and or any protective action taken.

The user and or administrator are notified using any one of a number of techniques e.g. by using a pop up window by generating an e mail by writing to a file and or otherwise by logging the event. Further in one embodiment a notification is provided to a security center. From optional NOTIFY operation processing transitions to CLOSE TARGET FILE operation .

Referring now again to and operation as earlier described Windows NT operating systems implement an error check method in the data clusters of MFT directories in which the last 2 bytes of each sector in a directory data cluster are replaced with a 2 byte fixed pattern from an update sequence array. The original 2 bytes that were replaced with the 2 byte fixed pattern are stored in an update sequence array.

The operating system checks the 2 byte fixed pattern in the update sequence array and determines whether the last 2 bytes in each sector of a directory data cluster have the same 2 byte fixed pattern. When each of the last 2 bytes in each sector contains the 2 byte fixed pattern the operating system determines the directory is good e.g. not corrupted. However if the last 2 bytes of each sector in the directory data cluster do not match the 2 byte fixed pattern the operating system determines there is an error in the directory data cluster.

Conventionally an update sequence array is located at the beginning of each directory data cluster. The first data element of a directory data cluster is the NTFS RECORD HEADER structure. The first two bytes indicate the type of NTFS record. For a directory cluster this will always be the character equivalent of INDX 

The UsaOffset field of NTFS RECORD HEADER structures gives the offset in bytes from the beginning of the structure to the Update Sequence Array USA . The first two bytes in the USA are the usaCheck value. This is the value that must be stored in the last two bytes of each sector of the cluster.

Immediately following the usaCheck value is the actual data that needs to replace the usaCheck values at the end of each sector. There will be two bytes for each sector.

Thus when the directory data clusters of an MFT record are read in operation of method A the last 2 bytes of each sector of the data cluster have been replaced with the 2 byte fixed pattern of the update sequence array. In order to read the original data of the data cluster the last 2 bytes of each sector need to be restored with the original data from the update sequence array as further described herein with reference to and method A.

In DETERMINE NUMBER OF SECTORS IN DATA CLUSTER operation the number of sectors in a directory data cluster is determined. For example assume that in a given volume a directory data cluster is 4 kilobytes i.e. 4 096 bytes and a sector is 512 bytes. In one embodiment the number of sectors in the directory data cluster is the size of the directory data cluster divided by the size of a sector. Thus in the present example the number of sectors per data cluster is 4 096 bytes divided by 512 bytes which equals 8 sectors. As there is one entry in an update sequence array for each sector there are 8 entries in the update sequence array for the given directory data cluster.

The 2 byte fixed pattern present at the end of each sector of the directory data cluster needs to be replaced with the corresponding original 2 bytes of each sector that are stored in the update sequence array. From DETERMINE NUMBER OF SECTORS IN DATA CLUSTER operation processing transitions to a LOCATE SECTOR operation .

In LOCATE SECTOR operation initially a first sector in the director cluster is located. Locating a sector in a directory data cluster is well known to those of skill in the art and not further described herein to avoid detracting from the principles of the invention. From LOCATE SECTOR operation processing transitions to a LOCATE FIXED PATTERN BYTES operation .

In LOCATE FIXED PATTERN BYTES operation the sector located in operation is scanned and the last 2 bytes of the sector having the fixed pattern of the update sequence array are located. From LOCATE FIXED PATTERN BYTES operation processing transitions to a REPLACE FIXED PATTERN BYTES WITH UPDATE SEQUENCE ARRAY BYTES operation .

In REPLACE FIXED PATTERN BYTES WITH UPDATE SEQUENCE ARRAY BYTES operation the last 2 bytes of the sector e.g. the 2 byte fixed pattern are replaced with the corresponding 2 original bytes stored in the update sequence array thus yielding the original data of the sector. From REPLACE FIXED PATTERN BYTES WITH UPDATE SEQUENCE ARRAY BYTES operation processing transitions to a LAST SECTOR check operation .

In LAST SECTOR check operation a determination is made whether the current sector is the last sector in the directory data cluster e.g. whether there are remaining sectors to be scanned and updated from the update sequence array. Upon a determination that the current sector is not the last sector in the directory data cluster NO processing transitions from LAST SECTOR check operation and returns to LOCATE SECTOR operation with a next sector in the directory data cluster being located.

Referring again to LAST SECTOR check operation alternatively upon a determination that the current sector is the last sector of the directory data cluster YES processing transitions from LAST SECTOR check operation to an EXIT operation with processing exiting method and transitioning to operation of method .

As earlier described one embodiment of the inventions allows a user or application to generate an accessible copy of the raw data of an encrypted inaccessible source file that is automatically decrypted by the operating system when the accessible copy is read. Another embodiment in accordance with the invention allows a user or application to generate an accessible copy of the raw data of a compressed inaccessible source file that is automatically decompressed by the operating system when the accessible copy is read as further described herein with reference to .

In the present embodiment operations and are similarly performed as earlier described with reference to method hereby incorporated by reference excepting that the raw data of the inaccessible source file is compressed rather than encrypted. Thus in the present embodiment the inaccessible source file is a compressed inaccessible source file. As used herein in one embodiment a compressed inaccessible source file is an inaccessible source file having raw data i.e. raw data contents in a compressed state.

As the compressed inaccessible source file is not encrypted the encryption stream e.g. the EFS stream is not present in the associated MFT record associated with the compressed inaccessible source file and operation is not performed.

More particularly in DETERMINE FILE PATH OF INACCESSIBLE SOURCE FILE operation the file path of the compressed inaccessible source file is obtained and processing transitions to operation in which the MFT record of the compressed inaccessible source file is obtained. From operation processing transitions to operation in which the location s of the raw data of the compressed inaccessible source file i.e. the locations of the data clusters on the physical disk are determined from the data attribute of the MFT record obtained operation . From operation processing transitions to a CREATE TARGET FILE operation .

In CREATE TARGET FILE operation a target file is created. In one embodiment as a target file suitable for encrypted data is not needed for compressed data the EFS API functions used in creating the target file in operation are not used in the present embodiment.

Rather in one embodiment the API function CreateFile is called specifying a name of the target file. The operating system creates a target file and returns a handle to the target file herein termed the target file handle. From CREATE TARGET FILE operation processing transitions to a RECEIVE TARGET FILE HANDLE operation .

In RECEIVE TARGET FILE HANDLE operation file access and scanning application receives the target file handle. From RECEIVE TARGET FILE HANDLE operation processing transitions to a READ RAW DATA OF INACCESSIBLE SOURCE FILE FROM PHYSICAL DISK TO MEMORY operation .

In READ RAW DATA OF INACCESSIBLE SOURCE FILE FROM PHYSICAL DISK TO MEMORY operation the compressed data at each of the data clusters identified in operation are read from the physical disk in order into memory for example to a memory location on host computer system accessible by file access and scanning application . In one embodiment the API function ReadFile is called successively specifying each of the location s of the raw data of the compressed file on the physical disk in order until all the data clusters are read into memory. In one embodiment an in memory copy of the raw data of the compressed inaccessible source file is created in memory. From READ RAW DATA OF INACCESSIBLE SOURCE FILE FROM PHYSICAL DISK TO MEMORY operation processing transitions to a DECOMPRESS DATA operation .

In DECOMPRESS DATA operation the raw data read into memory in operation is decompressed. In the current embodiment the data is decompressed in preparation for writing the data to the target file.

In one embodiment file access and scanning application utilizes a decompression operation to decompress the in memory copy of the raw data of the compressed inaccessible source file. In one embodiment an in memory decompressed copy of the compressed raw data of the compressed inaccessible source file is generated. Decompression of compressed data is well known to those of skill in the art and not further described herein to avoid detracting from the principles of the invention. From DECOMPRESS DATA operation processing transitions to a WRITE DECOMPRESSED DATA FROM MEMORY TO TARGET FILE operation .

In WRITE DECOMPRESSED DATA FROM MEMORY TO TARGET FILE operation the decompressed data is written from memory to the target file created in operation . In one embodiment the in memory decompressed copy of the compressed raw data of the compressed inaccessible source file is written from memory to the target file.

In one embodiment the API function WriteFile is called specifying the target file handle. When the decompressed data is written from memory to the target file the operating system automatically compresses the data again. The resulting target file is now an accessible copy of the compressed raw data of the compressed inaccessible source file. From WRITE DECOMPRESSED DATA FROM MEMORY TO TARGET FILE operation processing transitions to a READ TARGET FILE operation .

In READ TARGET FILE operation the contents of the target file are read. In one embodiment the API function ReadFile is called specifying the target file handle. When the operating system reads the contents of the target file the compressed data is automatically decompressed by the operating system. From READ TARGET FILE operation processing transitions at operation to SCAN TARGET FILE operation where the decompressed contents of the target file are evaluated for malicious code as earlier described or optionally transitions at operation to CLOSE TARGET FILE operation earlier described with processing exiting method at EXIT operation or returning to operation .

Another embodiment in accordance with the invention allows a user or application to generate an accessible copy of an inaccessible source file in which the raw data are not encrypted and not compressed as further described herein with reference to .

Operations and are performed as earlier described with reference to method hereby incorporated by reference excepting that the raw data of the inaccessible source file is normal data. As used herein in one embodiment normal raw data are raw data that are not compressed or encrypted. As the raw data of the inaccessible source file is not encrypted the encryption stream e.g. the EFS stream is not present in the associated MFT record and operation is not performed.

More particularly in operation the file path of the inaccessible source file is obtained and processing transitions to operation in which the MFT record of the inaccessible source file is obtained. From operation processing transitions to operation in which the location s of the raw data of the inaccessible source file i.e. the locations of the data clusters are determined from the data attribute of the MFT record obtained operation . From operation processing transitions to CREATE TARGET FILE operation .

In CREATE TARGET FILE operation a target file is created. In one embodiment as a target file suitable for encrypted data is not needed for normal data the EFS API functions used in operation are not used in the present embodiment. Rather in one embodiment the API function CreateFile is called specifying a name of the target file. The operating system creates a target file and returns a handle to the target file herein termed the target file handle. From CREATE TARGET FILE operation processing transitions to a RECEIVE TARGET FILE HANDLE operation .

In RECEIVE TARGET FILE HANDLE operation file access and scanning application receives the target file handle. From RECEIVE TARGET FILE HANDLE operation processing transitions to a COPY RAW DATA OF INACCESSIBLE SOURCE FILE FROM PHYSICAL DISK TO TARGET FILE .

In COPY RAW DATA OF INACCESSIBLE SOURCE FILE FROM PHYSICAL DISK TO TARGET. FILE operation the raw data of the inaccessible source file is copied from the physical disk to the target file. In one embodiment the raw data are read from the data clusters and written to the target file as earlier described with reference to operation of method hereby incorporated by reference excepting that the raw data are normal data and are not encrypted or compressed. FROM COPY RAW DATA OF INACCESSIBLE SOURCE FILE FROM PHYSICAL DISK TO MEMORY operation processing transitions to a READ TARGET FILE operation .

In READ TARGET FILE operation the contents of the target file are read. In one embodiment the API function ReadFile is called specifying the target file handle. From READ TARGET FILE operation processing transitions at operation to SCAN TARGET FILE operation where the contents of the target file are evaluated for malicious code as earlier described or optionally transitions at operation to CLOSE TARGET FILE operation earlier described with processing exiting method at EXIT operation or optionally returning to operation .

In one embodiment method can be used to generate a copy of a running database. For example assume a copy of a database is needed but the database is currently running and cannot be taken offline. Another embodiment in accordance with the invention generates a copy of the running database using the operations of method described herein. The copy of the database can then be run on another system. In some instances the database is adjusted to cure inconsistent states prior to use on the other system.

Although file access and scanning application is referred to as an application this is illustrative only. File access and scanning application should be capable of being called from an application or the operating system. In one embodiment an application is generally defined to be any executable code. Moreover those of skill in the art will understand that when it is said that an application or an operation takes some action the action is the result of executing one or more instructions by a processor.

While embodiments have been described for a client server configuration an embodiment may be carried out using any suitable hardware configuration or means involving a personal computer a workstation a portable device or a network of computer devices. Other network configurations other than client server configurations e.g. peer to peer web based intranet Internet network configurations are used in other embodiments.

Herein a computer program product comprises a medium configured to store or transport computer readable code in accordance with the embodiments described herein. Some examples of computer program products are CD ROM discs DVDs ROM cards floppy discs magnetic tapes computer hard drives servers on a network and signals transmitted over a network representing computer readable code.

As illustrated in this medium may belong to the computer system itself. However the medium also may be removed from the computer system. For example file access and scanning application may be stored in memory that is physically located in a location different from processor . Processor should be coupled to the memory . This could be accomplished in a client server system or alternatively via a connection to another computer via modems and analog lines or digital interfaces and a digital carrier line.

More specifically in one embodiment host computer system and or server system is a portable computer a workstation a two way pager a cellular telephone a digital wireless telephone a personal digital assistant a server computer an Internet appliance or any other device that includes components that can execute the functionality of file access and scanning application in accordance with at least one of the embodiments as described herein. Similarly in another embodiment host computer system and or server system is comprised of multiple different computers wireless devices cellular telephones digital telephones two way pagers or personal digital assistants server computers or any desired combination of these devices that are interconnected to perform the methods as described herein.

In view of this disclosure the functionality of file access and scanning application in accordance with one embodiment can be implemented in a wide variety of computer system configurations. In addition the functionality of file access and scanning application could be stored as different modules in memories of different devices.

For example file access and scanning application could initially be stored in server system and then as necessary a portion of file access and scanning application could be transferred to host computer system and executed on host computer system . Consequently part of the functionality of file access and scanning application would be executed on processor of server system and another part would be executed on processor of host computer system . In view of this disclosure those of skill in the art can implement the various embodiments described herein in a wide variety of physical hardware configurations using an operating system and computer programming language of interest to the user.

In yet another embodiment file access and scanning application is stored in memory of server system . File access and scanning application is transferred over network to memory in host computer system . In this embodiment network interface and I O interface would include analog modems digital modems or a network interface card. If modems are used network includes a communications network and file access and scanning application is downloaded via the communications network.

This disclosure provides exemplary embodiments. The scope of the various embodiments described herein is not limited by these exemplary embodiments. Numerous variations whether explicitly provided for by the specification or implied by the specification or not may be implemented by one of skill in the art in view of this disclosure.

In particular in the above embodiments the raw data of the inaccessible source file is accessed on the physical disk by opening the particular volume on which the inaccessible source file is stored and then calling DeviceIOControl specifying the volume handle and a specific MFT record. In an alternative embodiment the volume in which the file is stored is opened but the API function ReadFile is called and the volume is directly read and parsed until the MFT record of the inaccessible source file is located. In another alternative embodiment the physical disk is opened and all the volumes are read and parsed until the location of the MFT record associated with the inaccessible source file is determined. In these alternative embodiments the raw MFT records need to be modified as they are stored on disk in an altered form as a consistency check for the operating system.

