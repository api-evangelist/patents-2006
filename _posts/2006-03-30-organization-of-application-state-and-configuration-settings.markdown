---

title: Organization of application state and configuration settings
abstract: The operating system manages software entities by creating a construct called a context that organizes and manages software-related state and configuration settings of applications. A context may comprise an installation service, a configuration service and an activation service. Contexts can be linked or arranged hierarchically to form parent-child relationships. Hierarchies may be used to affect accessibility of software items, to satisfy dependencies, to control the visibility/invisibility of software items, to provide access to configuration settings and to override software availability, dependencies and configuration settings. An override may be applied to set policy when more than one context has a configuration setting, dependency or access to a software entity.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08001528&OS=08001528&RS=08001528
owner: Microsoft Corporation
number: 08001528
owner_city: Redmond
owner_country: US
publication_date: 20060330
---
A typical operating system does not know what executable software resides on the machine nor does it know what resources are needed by the software to execute. It follows therefore that the operating system can have no knowledge of how or if one piece of software depends on another and will be unable to determine if a particular piece of software will run.

An application that is written to be run by a current operating system typically assumes that it will have access to a global namespace used to resolve names and obtain values and resources. A number of drawbacks are associated with the use of a global namespace. It is difficult to keep track of the state and configuration parameters of an application especially if the application can be run concurrently at the system wide level and at a user level because configuration parameters and current state are stored in the global namespace and no structure for distinguishing system wide versus user specific values for the application is provided by the operating system. Secondly machine resources accessed via a global namespace are shared by all the applications running on the machine. Applications can interfere with each other via this global shared namespace. For example one executing application may store its state in a file of a particular name in the global namespace. A second application may store its state in a file of the same name. If the applications execute concurrently the applications may overwrite each other s state. Additionally access to the resources is typically controlled by ACLs access control lists which associate access privileges with the identity of the user running the application. It follows that an application may well have access to resources that it does not need enabling a malicious user to compromise the integrity of the system. Finally use of a global namespace may prevent an application from being easily used to perform a slightly different task than the one for which it was originally intended. For example an application which translates text from English to Spanish may expect the input and output files to have particular names making it difficult to use the application to accept a different input file and produce a different output file without modifying the code.

The operating system manages a set of software entities by creating a construct called a context that organizes and manages software related state and configuration settings of applications. Software related state includes the condition of the software entities themselves their property settings and the setting of activation policies. The context may include an installation service a configuration service and an activation service. The installation service is responsible for installing uninstalling and servicing software entities within its context. The installation service keeps track of what software is installed and available within the context the version of the installed software what resources are needed by the software to run and what configuration properties or settings have been defined for the software entity. The installation service makes installed software entities available to the activation service. The activation service maintains and manages resolution polices resolves configuration settings and resource values constructs the environment in which an application runs and initiates the running of the software. The configuration service maintains and manages configuration settings associated with the software and provides configuration settings to the activation service.

One type of software entity managed by the context is a software item. A software item is a uniquely identified piece of code source and or executable accompanied by metadata packaged into a single unit. The metadata may be provided in the form of a manifest. Metadata may include versioning information a description of the configuration data the code uses resources the code may need to run dependencies and other information. A dependency refers to the requirement of one software entity for a second software entity to be available. A software item may have a dependency on one or more other software items. One or more contexts may be created for the execution of a software item.

Contexts can be linked or arranged hierarchically to form parent child relationships. Parent child relationships may ease centralized management and policy setting. A parent context may have one or more children. A child context may have one or more parents. When multiple parents exist the possibility of conflicts are addressed by assigning a priority to each of the multiple parents with the parent having the highest priority ultimately determining how the conflict is resolved. Hierarchies may be used to affect accessibility of software items to satisfy dependencies to control the visibility invisibility of software items to provide access to configuration settings and to override software availability dependencies and configuration settings. An override may be applied to set policy when more than one context has a configuration setting dependency or access to a software entity.

An operating system according to some embodiments of the present invention is aware of what executable software resides on the machine and what resources are needed by the software to execute. The operating system is aware of how or if one piece of software depends on another and is able to determine if a particular piece of software will run. The operating system is aware of what other software is needed for the software to run.

Even though an application may be written assuming that it will have access to a global namespace such a namespace may be mapped differently for each application execution giving access to only those resources needed by the application to perform its task during that execution. A structure for managing and tracking state and configuration parameters of an application is provided by the operating system. In some embodiments of the invention the structure for managing and tracking state and configuration settings is the context. One or more contexts may be created for the execution of the application. A context may include an installation service a configuration service and an activation service. Use of a context may enable an application to perform a slightly different task than the one for which it was originally intended. For example in the case of the application which translates text from English to Spanish described above putting the application in a different context would enable the input and output files to have the same names but refer to different files.

Although not required the invention can be implemented via an application programming interface API for use by a developer and or included within the network browsing software which will be described in the general context of computer executable instructions such as program modules being executed by one or more computers such as client workstations servers or other devices. Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers PCs automated teller machines server computers hand held or laptop devices multi processor systems microprocessor based systems programmable consumer electronics network PCs minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus .

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB .

A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . A graphics interface such as Northbridge may also be connected to the system bus . Northbridge is a chipset that communicates with the CPU or host processing unit and assumes responsibility for accelerated graphics port AGP communications. One or more graphics processing units GPUs may communicate with graphics interface . In this regard GPUs generally include on chip memory storage such as register storage and GPUs communicate with a video memory . GPUs however are but one example of a coprocessor and thus a variety of coprocessing devices may be included in computer . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface which may in turn communicate with video memory . In addition to monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

One of ordinary skill in the art can appreciate that a computer or other client device can be deployed as part of a computer network. In this regard the present invention pertains to any computer system having any number of memory or storage units and any number of applications and processes occurring across any number of storage units or volumes. The present invention may apply to an environment with server computers and client computers deployed in a network environment having remote or local storage. The present invention may also apply to a standalone computing device having programming language functionality interpretation and execution capabilities.

The operating system manages a set of software entities by creating a construct called a context. A context is used to organize software related state and configuration settings for one or more applications and to describe an execution environment in which the application may run. Software related state includes the condition of the software entities themselves e.g. installed visible version configuration settings dependencies etc. their property settings and the setting of activation policies. A context may represent a system context developer context manager context user context or other type of context. When an application is started the context determines the required resources and makes the required resources accessible to the application. The context may also limit the resources an application running within the context is able to access based on policy decisions for example. Resources include but are not limited to values or pointers to system namespaces such as file systems network devices shared memory components and service endpoints.

One type of software entity that is managed by a context is a software item. A software item is a resource known to the operating system by a unique name or identifier. A software item in some embodiments includes program code and associated data packaged into a single unit. The associated data may include version information typically presented as a number that is incremented as changes are made to the software over its lifetime . The software item may include the source and or executable code and may be accompanied by metadata. In some embodiments of the invention the metadata accompanying the code is provided in a manifest. The metadata may include the unique identifier for the versioning information a description of the configuration data the code uses resources the code may need to run dependencies and other information. A dependency refers to the requirement of one software entity for a second software entity. A software entity may have a dependency on another software entity or on other software entities. That is for example a software entity such as a software item e.g. Software Item D may require the presence of another software item e.g. Software Item C in order to run. The dependency may be required or optional. For example instead of being required Software Item C may add functionality but not be necessary for Software Item D to run. For example a word processing program may have an optional thesaurus installed but the word processing program may not require the thesaurus to run. Dependencies may have version requirements e.g. Software Item C version 2 must be present for Software Item D version 4 to run . The list of software items that are used to satisfy each dependency may be calculated when the software item is installed. Each time a software item is installed the way dependencies are satisfied may be altered requiring the re computation of dependencies.

A context may include an installation service a configuration service and an activation service. illustrates one embodiment of a system for organizing state and configuration settings for one or more applications as described above. System may reside on a computer such as computer described above with respect to . In a context includes an installation service a configuration service and an activation service .

An installation service e.g. installation service keeps track of what software is installed and available within the context the version of the installed software what resources are needed by the software to run and what configuration properties or settings have been defined for the software entity. The installation service also installs removes and services software entities and makes the installed software entities available to the activation service . Servicing software entities makes a newer version of the software available to the system and may include the installation of the newer version of the software and saving and organizing the metadata associated with the new software. New versions of software may be made available to reduce defects improve function provide new functions modify previously provided functions accommodate new hardware or for other well known reasons.

The configuration service maintains manages and mediates configuration settings associated with the software. Before a software entity is activated its properties must be initialized to proper values. The process of setting these values is called configuration. In some embodiments of the invention property values for a software entity such as a software item are stored in a configuration store not shown . The set of property values for an application in a context contributes to application state.

The activation service constructs the environment in which an application will run and initiates the software. The activation service resolves configuration settings and provides the software items with the values needed by the software item to execute. The activation service resolves dependencies determines if all dependencies are satisfied and loads the software items satisfying the dependencies received from the installation service into the execution environment. A software item may not be activated unless all of the required dependencies are satisfied.

Contexts may be linked or arranged hierarchically to form a directed acyclic graph. Parent child relationships may be created to enable centralized management and to set policy. A parent context may have one or more children. A child context may have one or more parents. When multiple parents exist the possibility of conflicts are addressed by assigning a priority to each of the multiple parents. Conflicts may arise because more than one parent has a configuration setting override flag or visibility flag. A child context may be created based on a parent context. Hierarchies may be used to affect accessibility of software items to satisfy dependencies to control the visibility invisibility of software items to provide access to configuration settings and to override software availability dependencies and configuration settings. Within a context services can communicate with each other. Communication between services of different contexts is only allowed between like services and only from the child to the parent e.g. installation service of context can communicate with installation service of context but not with configuration service of context and only if context is the child of context .

The ability to access software entities such as software items can be inherited through creation of a parent child hierarchy. In general if a context such as Context U is linked to another context Context S where Context S is the parent of Context U the software items installed in Context S are visible to Context U so that the set of software items available in Context U is the union of those available in Context U and those available in Context S. illustrates one such hierarchy. In context of is a parent of a child context . Child context includes an installation service a configuration service and an activation service . Child context can inherit the software items of parent context . For example suppose parent context includes the following software items Software Item A version 1 Software Item A version 2 Software Item B version 1 and Software Item C version 2. Suppose child context includes the following software items Software Item D version . Because of the creation of the parent child context hierarchy the child context could activate all of the following software items Software Item A version 1 Software Item A version 2 Software Item B version 1 Software Item C version 2.0 and Software Item D version 1. The parent context would be able to activate Software Item A version 1 Software Item A version 2 Software Item B version 1 Software Item C version 2 but would not be able to activate Software Item D version 1.

A parent in a hierarchy may set visibility invisibility flags for software entities such as software items within the hierarchy. Suppose for example that a system administrator learns that there is a critical bug in Software Item A version 1. Parent context may make Software Item A version 1 invisible and thus inaccessible to child context by setting a visibility flag for Software Item A version 1 to a value denoting invisibility. A parent can also override local state for software availability dependencies and configuration settings by setting an override flag for contexts below it in the hierarchy.

The ability to access dependencies and configuration settings can also be inherited through creation of such a hierarchy. For example suppose now that Software Item E version 2 having a dependency on Software Item B version 1 were installed into child context Suppose that child context does not have Software Item B version 1 but parent context does. The dependency of Software Item E version 2 on Software Item B version 1 is satisfied because Software Item B version 1 is installed in parent context . When Software Item E version 2 is run Software Item B version 1 is loaded into the execution environment from parent context . Now suppose that configuration data for Software Item D version 1 is installed in parent context but is not installed in child context . Because there is configuration data in parent context for Software Item D version 1 this configuration data can be inherited by child context and used by Software Item D version 1 when this software item is activated and run in the child context . A parent in a hierarchy may set override flags for software items within the hierarchy. Override flags may be applied to software accessibility visibility dependencies and configuration data. Suppose for example that Software Item D version 4 is installed in both parent context and child context . Suppose further that Software Item D version 4 has a dependency on Software Item C version 2 Suppose that Software Item C version 2 is installed in child context . Now suppose that there is a critical bug in Software Item C version 2. By setting an override flag for Software Item C version 2 in parent context parent context can substitute the use of another software item say Software Item C version 3 so that when Software Item D version 4 is run in child context Software Item C version 3 is loaded instead of Software Item C version 2. Although the example described is directed to overriding a dependency it will be appreciated that overrides may also be applied to visibility or configuration data.

The various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the present invention or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers the computing device will generally include a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may utilize the creation and or implementation of domain specific programming models aspects of the present invention e.g. through the use of a data processing API or the like are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

While the present invention has been described in connection with the preferred embodiments of the various figures it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiments for performing the same function of the present invention without deviating therefrom. Therefore the present invention should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the appended claims.

