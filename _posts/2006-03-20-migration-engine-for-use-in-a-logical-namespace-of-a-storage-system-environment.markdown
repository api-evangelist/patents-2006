---

title: Migration engine for use in a logical namespace of a storage system environment
abstract: A migration engine is provided for use in a logical namespace of a storage system environment. A remote agent of an integrated management framework is installed on a host machine of the storage system environment and includes a pre-installed migration plug-in module that configures the agent as a migration engine adapted to provide a data migration capability. That is, the migration plug-in has the intelligence to configure the remote agent as a migration engine adapted to perform data migration from a source location to a destination location in the storage system environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08285817&OS=08285817&RS=08285817
owner: NetApp, Inc.
number: 08285817
owner_city: Sunnyvale
owner_country: US
publication_date: 20060320
---
The present invention is related to the following commonly assigned U.S. patent application Ser. No. 11 384 776 titled System and Method for Data Migration Management in a Logical Namespace of a Storage System Environment filed on Mar. 20 2006 which application is hereby incorporated by reference.

The present invention relates to storage systems and more specifically to a migration engine for use in a storage system environment.

A storage system typically comprises one or more storage devices into which information may be entered and from which information may be obtained as desired. The storage system includes an operating system that functionally organizes the system by inter alia invoking storage operations in support of a storage service implemented by the system. The storage system generally provides its storage services through the execution of software modules such as processes. The storage system may be implemented in accordance with a variety of storage architectures including but not limited to a network attached storage environment a storage area network and a disk assembly directly attacked to a client or host computer. The storage devices are typically disk drives organized as a disk array wherein the term disk commonly describes a self contained rotating magnetic media storage device. The term disk in this context is synonymous with hard disk drive HDD or direct access storage device DASD .

The storage system may be further configured to operate according to a client server model of information delivery to thereby allow many clients to access information stored on the system. In this model the storage system may be embodied as file server executing an operating system such as the Microsoft Windows operating system hereinafter Windows operating system . Furthermore the client may comprise an application executing on an operating system of a computer that connects to the server over a computer network such as a point to point link shared local area network wide area network or virtual private network implemented over a public network such as the Internet. Each client may request the services of the server by issuing storage access protocol messages in the form of packets to the server over the network. By supporting a plurality of storage e.g. file based access protocols such as the conventional Common Internet File System CIFS and the Network File System NFS protocols the utility of the server is enhanced.

To facilitate client access to the information stored on the server the Windows operating system typically exports units of storage e.g. CIFS shares. As used herein a share is equivalent to a mount point or shared storage resource such as a folder or directory that stores information about files or other directories served by the file server. A Windows client may access information in the directory by mounting the share and issuing a CIFS protocol access request that specifies a uniform naming convention UNC path to the share. The UNC path or pathname is an aspect of a Windows networking environment that defines a way for a client to refer to a unit of storage on a server. The UNC pathname is prefixed with the string to indicate resource names on a network. For example a UNC pathname may comprise a server name a share directory name and a path descriptor that collectively reference a unit of storage or share. Thus in order to access the share the client typically requires knowledge of the specific physical location i.e. the identity of the server exporting the share.

Instead of requiring the client to provide the specific identity of the file server exporting the share it is desirable to only require a logical pathname to the share. That is it is desirable to provide the client with a globally unique pathname to the share location without reference to the file server. The conventional Distributed File System DFS namespace service provides such a solution in a Windows environment through the creation of a namespace that removes the specificity of server identity. DFS is well known and described in DCE 1.2.2 1997 which is hereby incorporated by reference. As used herein a namespace is a view of shared storage resources such as shares from the perspective of a client. The DFS namespace service is generally implemented using one or more DFS servers and distributed components in a network.

Using the DFS service it is possible to create a unique pathname in the form of a UNC pathname for a storage resource that a DFS server translates to an actual location of the resource share in the network. However in addition to the DFS namespace provided by the Windows operating system there are many other namespace services provided by various operating system platforms including the NFS namespace provided by the conventional Unix operating system. Each service constructs a namespace to facilitate management of information using a layer of indirection between a file server and cliff accessing a shared storage resource share on the server. For example a share may be connected or linked to a link point link in DFS terminology or a mount point in NFS terminology to hide the machine specific reference to the share. By referencing the link point the client can automatically access information on the storage resource of the specific machine. This allows an administrator to store the information on any server in the network by merely providing a reference to the information or share . However these namespaces are typically services created on heterogeneous server platforms which leads to incompatibility and non interoperability with respect to management of the namespaces by the user. For example the DFS namespace service is generally limited to Windows based operating system platforms whereas the NFS namespace service is generally limited to Unix based operating system platforms.

The Virtual File Manager VFM developed by NuView Inc. and available from Network Appliance Inc. NetApp provides a namespace service that supports various protocols operating on various file server platforms such as NetApp filers and DFS servers. The VFM namespace service is well known and described in VFM 4.0 2001 2003 and VFM 4.0 2001 2003.

Movement or migration of data is an essential capability of andata management solution. Data migration may be employed for a number of reasons including i load balancing to reduce the load on a particular machine ii reducing access latency by moving data to a machine that is closer to a consumer of the data or iii archiving to move data that has not been used for some time stale data on a machine of high grade to a machine of lower grade. Data migration thus facilitates improved distribution of storage in a hierarchical manner as well as relocation of unwanted or stale data automatically.

Broadly stated previous namespace services such as the VFM namespace service facilitate migration movement of data from a machine computer at a source location to a machine at a destination location using a migration agent in connection with a data migration process. As used herein the migration agent is software code configured to perform data migration between the machines at the source and destination locations in a network. The migration agent used by these services is generally not pre installed on the machine involved in the data migration process rather these services push installation of the migration agent to the machine in the network as and when required.

Often the migration agent may fail as a result of e.g. a system crash. The previous services may utilize platform specific tools to convey the cause of the failure or error to a user such tools are generally complex and not useful in an environment wherein the machines have different heterogeneous operating system platforms e.g. in a heterogeneous storage system environment. As used herein a heterogeneous storage system environment may include storage systems having different operating systems different variants of operating systems and or different file systems implemented by different operating systems. The present invention is directed in part to conveying the cause of migration agent failure in a format that is user friendly and compatible in such a heterogeneous environment.

Furthermore in response to the migration agent failure it is possible that the resulting data stored at the destination location may be inconsistent corrupted with respect to the original data transferred from the source location. That is the data stored at the destination location might include a mixture of the original data and additional erroneous data. The present invention is further directed in part to reducing the probability of a migration agent failure corrupting data during the migration process.

When the data migration process includes moving data e.g. a file between heterogeneous machines at the source and destination locations there is a further issue of possible loss of data format of the file as opposed to loss of the actual data content of the file. In this context data loss denotes loss of file metadata such as attributes including security attributes such as access control lists ACLs type of file and other information associated with the file such as alternate data streams ADS . Here the type of file includes i sparseness of the file and or ii encryption of the file. Often there is a requirement to exactly strictly preserve the attribute type and associated information of the file transferred from the source location to the destination location during the migration process. The present invention is further directed in part to a technique for strictly preserving file attributes type and associated information during data migration.

The disadvantages of the prior art are overcome by providing a migration engine for use in a logical namespace of a storage system environment. A remote agent of an integrated management framework is installed on a host machine of the storage system environment and includes a pre installed migration plug in module that configures the agent as a migration engine adapted to provide a data migration capability. That is the migration plug in has the intelligence to configure the remote agent as a migration engine adapted to perform data migration from a source location to a destination location in the storage system environment.

In accordance with the present invention the migration engine is illustratively embodied as software code that operates within the context of a remote agent process e.g. of the remote agent and provides an interface between an architecture of the integrated management framework and an architecture of its host machine. Notably the internal functionality and security machinery of the migration engine and remote agent facilitates portability to multiple operating system platforms of host machines to thereby enable the integrated management framework to manage namespace and storage objects of those machines.

According to an aspect of the present invention the migration engine reduces the probability of data corruption occurring during data migration by storing a copy of data e.g. a file transferred from the source location in a temporary area on the destination location and changing the original name of the transferred file copy. Once the data migration transfer is complete the file is renamed to its original file name and the file copy is stored at the permanent destination location. Renaming of the file is an atomic operation that protects against failures crashes corrupting the data in the file. For example if the migration engine fails the data stored in the temporary area is deleted. Once the migration engine is restored a new data migration transfer is started thus reducing the possibility of inconsistent data on the destination location.

Another aspect of the invention is directed to the format and content of information recorded logged by the migration engine during data migration. The migration engine also has the capability of controlling the amount of information that is logged during data migration. The novel logging format provides an intelligent manner of logging information that can be used by an administrator user to precisely determine the cause of a failure arising during migration. As a result the content of the logging information may be particularly useful for auditing purposes.

Each client may comprise an application executing on an operating system of a general purpose computer that interacts with the file servers in accordance with a client server model of information delivery. That is the client may request the services of a server and the server may return the results of the services requested by the client by exchanging packets over the network . The client may issue packets including storage e.g. file based access protocols such as the Common Internet File System CIFS protocol or Network File System NFS protocol over the Transmission Control Protocol Internet Protocol TCP IP when accessing information in the form of e.g. files and directories.

To facilitate client access to the information stored on the server a file server executing e.g. the Windows operating system typically exports units of storage e.g. CIFS shares. A client may access information of the share by mounting the share and issuing a CIFS protocol access request that specifies a uniform naming convention UNC path to the share. Although the illustrative embodiment is directed to a Windows file server that is accessed using the CIFS protocol the invention described herein is not so limited and may also apply to other servers such as Unix filer servers and NetApp filers that are accessible using other file access protocols such as the NFS protocol. The client connects to file server when accessing the share typically by specifying the IP address or identity of the file server.

However instead of requiring that the client know the specific identity of the server in order to access the share a namespace server such as the conventional Distributed File System DFS server provides a namespace service that removes the specificity of server identity. Using the DFS service a unique pathname in the form of a UNC pathname is created for the share that the DFS server translates to an actual location of the share in the network. Moreover in a typical Windows environment wherein a group of machines is organized as a domain a domain controller such as a primary domain controller PDC provides security e.g. rights privileges and authentication services for the machines. Note that the PDC and DFS server may reside on separate machines or as in the illustrative embodiment described herein may reside on the same machine as separate services.

For example assume a client application issues a CIFS request to access information of a share stored on a file server in the environment . The request is passed through various layers of the client s operating system including e.g. a CIFS redirector. Before issuing a CIFS packet directed to a UNC pathname specified by the client application the redirector contacts a DFS server to determine whether there is a different actual pathname needed to access the information. At that time the DFS server performs a PDC lookup operation to determine whether the client has the appropriate privileges to access the data. If so the actual pathname is provided to the redirector which then uses that pathname to create the CIFS packet for transmission over the network to the appropriate file server. The DFS namespace service thus provides a level of indirection to a share that resides on a file server in the environment . Upon receiving the packet the file server verifies that the client has the appropriate privileges to access the information.

Although the illustrative embodiment is directed to a DFS namespace service provided by the Windows operating system executing on a DFS server the invention described herein is not limited and may also apply to other namespace services such as the NFS namespace provided by the Unix operating system executing on a conventional Name Information Service NIS server. Each service constructs a namespace to facilitate management of information using a layer of indirection between a file server and client accessing a shared storage resource share on the server. However these namespace services are created on heterogeneous server platforms which lead to incompatibility and non interoperability with respect to management of different namespaces by e.g. an administrator user .

In the illustrative embodiment a namespace and storage management NSM server is provided that integrates namespace management and storage management in storage system environment . The NSM server includes an integrated management framework that provides an underlying infrastructure that supports various heterogeneous storage access protocols within a single logical namespace service. To that end the NSM server cooperates with a NSM console and a remote agent to create the integrated management framework. The integrated management framework in turn allows the NSM server to interact with any namespace server such as a DFS server configured to handle CIFS protocol requests or a NIS server configured to handle NFS protocol requests directed to namespace services.

An operating system portions of which is typically resident in memory and executed by the processing elements functionally organizes the server by inter alia invoking operations in support of storage services implemented by the server. In the illustrative embodiment the operating system is preferably the Windows operating system although it is expressly contemplated that any appropriate operating system such as the Unix operating system may be enhanced for use in accordance with the inventive principles described herein. The operations invoked by the operating system are illustratively namespace and storage operations in support of an integrated management framework provided by the server. It will be apparent to those skilled in the art that other processor and memory means including various computer readable media may be used for storing and executing program instructions pertaining to the invention described herein.

The NSM server generally provides its storage services through the execution of software modules such as processes. These services are illustratively implemented as separately scheduled processes and or daemons that execute in user space of operating system to provide the integrated management framework . As used herein a process refers to an instance of a program being executed by e.g. the processor and a thread is an instance of a sequence of the process s program code. is a schematic block diagram of the integrated management framework in accordance with the present invention. The integrated management framework provides a logical namespace service that is based on extensions to underlying storage management technology and other technological components. Notably these extensions are embodied as library functionality.

In the illustrative embodiment the underlying storage management technology is embodied as DataFabric Manager DFM technology available from Network Appliance Inc. Sunnyvale Calif. and described in 3.2 Administration Guide 1994 2004 which is hereby incorporated by reference. Broadly stated the DFM technology comprises a set of coordinating processes including an application programming interface API server a scheduler an Event daemon a Monitor including a Discovery daemon and a database interface DBI configured to interact with an embedded database . The present invention extends the capabilities of these processes to create the integrated namespace and storage management framework through the addition of NSM library functionality . As described herein the NSM library is illustratively implemented as various library modules each of which provides namespace and storage management actions embodied as APIs.

The integrated management framework exposes a set of interfaces e.g. an API interface that is used by the NSM console and a command line interface CLI used by a communication protocol. Illustratively the communication protocol is embodied as an XML over HTTP mechanism for APIs primarily because of its ability to describe data conveyed over the network as well as the transport without describing the actual storage access protocol. An example of a communication protocol that may be advantageously used with the present invention is the ZAPI protocol available from Network Appliance Inc. Such a protocol is also easily extensible and flexibly agnostic to binary formats of specific servers and clients to thereby operate efficiently in a heterogeneous environment.

In the illustrative embodiment the integrated management framework facilitates configuration and management of pathnames in the logical namespace. That is the underlying infrastructure of the framework allows a user to manage various pathnames exported by heterogeneous namespace service and protocol implementations within the logical namespace. This aspect of the framework involves creation of a layer of abstraction that presents to a client a notion of the logical namespace that is accessible via a particular storage access protocol. As noted the various heterogeneous namespace services are not interoperable with respect to user management the integrated framework as described further herein extracts logical views e.g. pathnames from the namespaces exported by the heterogeneous services stores those pathnames in database and then configures the pathnames so that they are accessible in the logical namespace via the storage access protocol.

In storage and networking environments some operations can only be executed if a user such as a system administrator is logged into a server on which the operations are to be performed e.g. the NSM server. In other words a remote operation that is to be invoked on the server can only be performed if the user is logged into the server. The NSM console and remote agent of the integrated management framework address this problem. Illustratively the NSM console is a component of the framework that includes a JAVA based interface and the remote agent is a software module installed on a host machine such as a server . Using the communication protocol the NSM console issues APIs to the NSM server which in turn issues APIs that are invoked on the remote agent to perform actions requested by the user.

Essentially the remote agent is a thin web server that includes programmatic glue to enable installation of plug in modules plug ins that provide certain functionality of the remote agent. Notably the remote agent and plug in module are pre installed on the host machine i.e. installed during configuration of the machine by e.g. an administrator in a manner that is non obtrusive to operation of the host machine. In contrast previous systems typically push installation of a migration agent on the machine as and when required.

In the illustrative embodiment plug in modules include a namespace plug in that allows remote access and management of data e.g. pathnames by the NSM server and as described further herein a novel migration plug in that provides a migration capability of the remote agent . The remote agent and plug ins are illustratively constructed without the use of operating system specific code and are integrally adapted to operate on various operating system platforms through the use of operating system calls and APIs specific to each platform. For example a remote agent and plug in that reside on a Windows host machine use Windows operating systems calls and APIs e.g. Win32 APIs to communicate with the host machine. To that end the remote agent may further comprise an API server that cooperates with an API service on Windows platforms or a daemon process on Unix platforms to receive API requests from the NSM server and translate them into host machine calls such as Win32 APIs or Unix system calls.

It should be noted that the underlying directory data structures used in the logical namespace described herein reside on the namespace server providing the particular namespace service such as a DFS server. That is the namespace server implements the basic namespace the NSM server provides a service for configuring that namespace. To that end the NSM server cooperates with the remote agent to acquire a copy of the namespace directory structures from the namespace server and stores the copy on the embedded database . The NSM server then cooperates with the NSM console to allow a user to manipulate configure the copy. Once configuration is complete the server cooperates with the remote agent to push store the manipulated copy of directory structures back to the namespace server .

The Monitor is illustratively embodied as a multi threaded process having a collection of individual monitor threads each of which is scheduled by the scheduler . The Monitor cooperates with the remote agent to communicate with one or more machines devices in the storage system environment using SNMP RSH etc to collect any type of storage or data namespace object information e.g. volume and or qtree information as well as information about namespace servers available in the environment and to that end functions as a data collector. Illustratively each monitor thread is configured to collect information about a particular object in the environment. Extensions to the Monitor are directed to namespace and agent management each of which is illustratively embodied as an individual monitor thread.

As data is collected the Monitor determines whether it needs to notify any processes of some resulting condition. For example an individual monitor thread may detect a threshold and the occurrence of some type of event. As used herein an event is a synchronous notification with a severity attribute. By configuring thresholds the NSM server can determine when an event occurs. An example of a threshold is if volume capacity is greater than 50 generate an event out of space . If a threshold is exceeded the Monitor communicates with the Event daemon to notify it of that event. Thus the Monitor is configured to detect certain events and in response generate event notifications to the Event daemon . The Event daemon then determines what if any further action is needed e.g. send an SMTP alert an email an SNMP trap and records the event in the embedded database .

The embedded database is illustratively implemented as a Sybase relational database that exports a set of Simple Query Language SQL function calls that enable storage retrieval of data such as namespace objects to from the database. A schema of the database is configured to efficiently capture characteristics of a namespace independent of the storage access protocol such as NFS or CIFS. The database is illustratively organized as a plurality of tables each of which can be accessed by processes within the NSM server. The DBI is illustratively embodied as a SQL interface to the database and its associated tables although it will be understood to those skilled in the art that the DBI may be embodied as any other type of database protocol interface depending on the actual implementation of the database e.g. an Oracle database.

The API server is illustratively embodied as a multi threaded process that is configured to implement the APIs used by the NSM console to access the database and manipulate information stored thereon. The API server also implements the communication protocol APIs used to interact with the remote agent . Accordingly extensions to the API server are primarily directed to those APIs required to manipulate the database and the remote agent. For example APIs are invoked by a user via the NSM console to manipulate modify update the embedded database . The API server updates the database with respect to user configuration requests and the Monitor periodically queries polls the database for any state information change. Depending upon the change the API server may cooperate with the Monitor to instruct data collection from the remote agent . After receiving the collected information from the remote agent the Monitor updates the database and the Event daemon .

The present invention relates to a migration engine for use in a logical namespace of a storage system environment. The remote agent of the integrated management framework is installed on a host machine of the storage system environment and includes a pre installed migration plug in module that configures the agent as a migration engine adapted to provide a data migration capability. That is the migration plug in has the intelligence e.g. computer readable instructions to configure the remote agent as a migration engine adapted to perform data migration from a source location to a destination location in the storage system environment.

Using the logical namespace service provided by the NSM server data e.g. files and or directories can be easily moved or migrated from a source location of a storage resource share to a destination location for the share in connection with a data migration job. Note that the data migration job is an executable entity of a migration policy that is created in accordance with a policy architecture of the integrated management framework . An example of a policy architecture that may be advantageously used with the present invention is disclosed in commonly assigned U.S. patent application Ser. No. 11 384 711 titled System and Method for Integrating Namespace Management and Storage Management in a Storage System Environment which application is hereby incorporated by reference.

The NSM server provides source and destination path locations to the migration engine of a user selected remote agent . These paths are illustratively UNC pathnames directed to e.g. shares. As described herein the migration engine may be installed on a source machine hosting the source location of the data migration job a destination machine hosting the destination location of the job both machines involved in the data migration job or none of the involved machines. The only requirement is that the migration engine has access to both the source and destination path locations. However use of a migration engine local to either the source or destination locations may improve performance.

Assume an administrator user wants to migrate data from a source location residing on a host machine e.g. a computer file server or filer to a destination location residing another host machine in accordance with a migration policy. Broadly stated the user interacts with the NSM console to select the source location of the data i.e. a source share and destination location of the data i.e. a destination share by e.g. specifying the source and destination locations share pathnames of the data migration along with details of the migration policy. Using the communication protocol the NSM console then issues APIs to the NSM server which in turn issues instructions including inter alia a set of APIs that are invoked on the migration engine to initiate data migration.

In response to receiving the instructions such as source location destination location and details e.g. rules for performing the data migration the migration engine executes the migration job. As described herein the migration engine has an internal organization adapted to implement the rules to perform the data migration. For example the rules of the migration policy may specify reading of the data file from the source location and writing it to the destination location while preserving attributes type s and other information associated with the file s . The migration engine implements these rules by generating appropriate e.g. Win32 APIs to instruct appropriate subsystems within its host operating system e.g. the Windows operating system to perform the migration. That is the migration engine generates the appropriate APIs to instruct a storage system of the host platform to retrieve the file and forward it to a network interface on the Windows platform where the file data is assembled into packets for transmission over the network to the destination.

The migration engine illustratively comprises a migration manager configured to manage a global migration worker queue object or structure worker queue and a thread pool . The migration manager worker queue and thread pool cooperate to move or migrate data between machines computers by implementing executing the rules of the migration policy as defined by one or more data migration jobs. The migration manager may be configured to support execution of multiple migration jobs simultaneously. To that end the migration manager illustratively embodies a multi threaded architecture model although it will be understood to those skilled in the art that the engine may alternatively embody a single threaded model.

In the single threaded model all files directories are sequentially migrated on a single thread as part of a single migration job. In the multi threaded model the files directories are migrated in parallel on multiple threads. Operationally the migration manager spawns a first primary thread to handle a first migration job e.g. job A and if appropriate spawns a second primary thread to handle a second migration job e.g. job B . Each primary thread then enters a job pre processing phase wherein the thread 1 scans a source directory at the source location 2 selects one or more files to be moved 3 prepares the file for migration in the form of file job e.g. A.file and B.file and 4 inserts the file job onto the worker queue . The thread then waits until all files are processed.

The worker queue comprises a plurality of slots or entries each of which is configured to accommodate a file job. The worker queue operates within the thread pool comprising a plurality of worker threads . Each worker thread selects an appropriate file job from an entry of the queue and executes the migration job by e.g. retrieving reading the corresponding file from the source location and storing writing a copy of the file at the destination location. Note that during the reading writing phase of the migration job the worker thread records the status of the job in the form of e.g. progress information. Upon completion of the reading writing phase the worker thread then performs post processing operations and writes the results to e.g. a history file.

In an alternate embodiment a second destination migration engine is installed on the Unix host machine . Here the destination migration engine is configured with requisite privileges to communicate with the source migration engine on the Windows host machine using e.g. APIs in accordance with the communication protocol to enable transfer of the data copy from the source location to the destination location . The destination migration engine is further configured to issue appropriate Unix system calls and APIs to various sub systems on the Unix machine in order to store the transferred data at the destination location .

When selecting the migration policy an administrator user can choose one or more options that control the migration operation. These options include among others i updating namespace links as part of the migration job ii specifying whether the migration is a copy paste or copy paste delete operation and iii providing filters inclusion exclusion lists for the migration job where the files directories are selected based on specified criteria such as name size and or access time. In addition the user can choose one or more pre migration options that specify whether the migration engine should abort the migration job or generate a warning e.g. an error message when scanning for potential e.g. file permission related problems moving e.g. copying the data and or running a pre migration batch script.

Furthermore the user can specify whether to strictly preserve all metadata i.e. attributes type s and information associated with the data e.g. one or more files . In other words the user can specify whether it can endure any metadata loss associated with the file. Note that in this context the attributes include security attributes such as access control lists ACLs while the type s of file include i sparseness of the file and or ii encryption of the file and the information associated with the file includes alternate data streams ADS .

When copying a file between similar operating system platforms it is fairly easy to preserve the attributes type s and file associations at the destination location. For example the ACLs ADS and file attributes are exactly copied from the source to destination locations. However preserving such attributes type s and associated information may be problematic when copying the file between heterogeneous operating system and or file system platforms. The migration engine may be adapted to address this problem by retrieving the file from the source location and translating its attributes type s and associated information to a format compatible with the destination platform on the fly dynamically for storage on the destination location.

If a single migration engine e.g. source migration engine is used to copy data between the different platforms the engine must be configured with information pertaining to e.g. the required formats of the attributes on the source and destination locations in order to dynamically perform format translation. Otherwise if two migration engines e.g. source migration engine and destination migration engine are used each engine is configured with information pertaining to the required format of the file attributes on its resident source or destination platform. Note that the migration engine illustratively supports a best effort mode that performs the data migration job in spite of security information losses file metadata losses etc.

Illustratively data flows through a machine hosting the migration engine which in an embodiment of the invention may be a machine other than the source or destination machines. For example the migration engine e.g. migration engine may be installed on a machine hosting a domain controller e.g. a PDC server of the environment . Of course it will be understood to those skilled in the art that data flow could occur directly between the source and destination machines. If the attributes of the file are to be strictly preserved the migration engine checks those attributes and alerts the user as to whether they are preserved. Moreover if the source machine implements a Windows operating system platform and the destination machine implements a Unix operating system platform then the migration engine on the PDC server performs the appropriate format translations on the fly. Here the migration engine communicates with a CIFS server not shown of the operating system on the source machine using e.g. Win32 API remote procedure calls RPCs over the network and with a NFS server not shown of the operating system on the destination machine using Unix system RPCs. Both of these servers communicate internally with their corresponding network and storage subsystems to affect the data transfers over the network and onto the disks of their machines.

In Step the migration engine executes the migration job to migrate the share data from the source location to the destination location. Note that if the source and destination machines have heterogeneous platforms i.e. the operating systems and or file systems of the machines are different the migration engine further determines whether the job allows a loss of metadata when copying the share between the heterogeneous platforms. For example security information ACLs and ADS information may be lost when copying data from a Windows NT file system NTFS platform to a non NTFS platform. In addition some file attributes such as archival attributes may be lost when copying data between such platforms. Moreover other disparities may arise after copying the data to the destination machine for example encrypted files on the source file system platform may end up as non encrypted files on the destination file system platform if the latter does not support encrypted files. If the loss of metadata is not allowed the migration engine executes the migration job by among other things performing the appropriate format translations on the fly. The procedure then ends at Step .

When specifying the migration policy the user is prompted by the NSM console to select the manner in which data is to be copied during a copy phase of the data migration job. For example the data can be copied from the source location to the destination location with the data being either deleted from the source location or maintained at the source location. In the illustrative embodiment copy paste and copy paste delete options for data migration are provided for selection by the user. In copy paste the original files at the source machine are retained whereas in copy paste delete those original files are deleted at the source location upon successful completion of data migration. For both options during the copy phase a copy in place option is provided. Copy in place as used herein denotes overwriting of the files at the destination location when the same file exists at both the source and destination locations.

According to an aspect of the present invention the migration engine reduces the probability of data corruption occurring during data migration by storing a copy of data e.g. a file transferred from the source location in a temporary area on the destination location and changing the original name of the transferred file copy. Once the data migration transfer is complete the file is renamed to its original file name and the file copy is stored at the permanent destination location. Renaming of the file is an atomic operation that protects against failures crashes corrupting the data in the file. For example if the migration engine fails the data stored in the temporary area is deleted. Once the migration engine is restored a new data migration transfer is started thus reducing the possibility of inconsistent data on the destination location.

While there has been shown and described an illustrative embodiment of a migration engine for use in a logical namespace of a storage system environment it is to be understood that various other adaptations and modifications may be made within the spirit and scope of the invention. For example another aspect of the invention is directed to the format and content of information recorded logged by the migration engine during data migration. The migration engine also has the capability of controlling the amount of information that is logged during data migration. The novel logging format provides an intelligent manner of logging information that can be used by an administrator user to precisely determine the cause of a failure arising during migration. As a result the content of the logging information may be particularly useful for auditing purposes.

In the illustrative embodiment the XML language is used to record the logging information in specific headers that provide a detailed audit trail of the migration job. XML is a platform independent protocol that can be easily ported to any platform in the heterogeneous storage system environment. is a diagram of an exemplary format of information logged by the migration engine in accordance with the present invention. Note that previous systems utilize platform specific tools such as the Windows event viewer to record information. In contrast this aspect of the invention provides a user friendly format that can be used with any operating system and file system platform of the heterogeneous environment.

The foregoing description has been directed to specific embodiments of this invention. It will be apparent however that other variations and modifications may be made to the described embodiments with the attainment of some or all of their advantages. For instance it is expressly contemplated that the procedures processes and or modules described herein may be implemented in hardware software embodied as a computer readable medium having program instructions firmware or a combination thereof. Accordingly this description is to be taken only by way of example and not to otherwise limit the scope of the invention. Therefore it is the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the invention.

