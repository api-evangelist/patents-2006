---

title: Efficient multi-protocol software architecture with shared resources for different applications
abstract: A method and system can comprise a software architecture that allows different applications in the same or different communications protocols to interact with shared resources. More specifically, code for a computer program may be written to increase the amount of code that is generic to (i.e., shared by) more than one application or communications protocol and reduce the amount of code that handle application-specific or protocol-specific actions. In one embodiment, a transaction may be broken down into a set of discrete actions. The discrete actions may include functions that are common to more than one application. These functions may be part of the shared resources. Each application may have its own set of software plug-in modules for the discrete actions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07818758&OS=07818758&RS=07818758
owner: Mobitv, Inc.
number: 07818758
owner_city: Emeryville
owner_country: US
publication_date: 20060502
---
This application is a continuation of and claims the benefit of U.S. patent application Ser. No. 10 342 113 filed Jan. 14 2003 entitled Method and System of Performing Transactions Using Shared Resources and Different Applications which issued as U.S. Pat. No. 7 073 178 on Jul. 4 2006 and which claims priority under 35 U.S.C. 119 e to U.S. Patent Application Nos. 60 349 424 entitled Network Proxy Platform that Simultaneously Supports Data Transformation Storage and Manipulation for Multiple Protocols by de Bonet et al. filed on Jan. 18 2002 and 60 349 344 entitled A Modular Plug In Transaction Processing Architecture by de Bonet et al. filed Jan. 18 2002 both of which are assigned to the current assignee hereof and are incorporated herein by reference.

The invention relates in general to methods and systems for performing transactions and more particularly to methods and systems of performing transactions using shared resources and different applications.

Traditionally different applications used in communicating over a network have their own code specialized for their particular application. Even if the computer applications are similar and use the same protocol effectively the applications are written from scratch or copied and extensively edited. Application development times are long due to the lengthy manual operations used in writing or editing the applications.

A method and system can comprise a software architecture that allows different applications in the same or different communications protocols to interact with shared resources. More specifically code for a computer program may be written to increase the amount of code that is generic to i.e. shared by more than one communications protocol and reduce the amount of code that handle application specific actions. In one embodiment a transaction may be broken down into a set of discrete actions. The discrete actions may include functions that are common to more than one application. These functions may be performed by the shared resources.

For each action code that is specific to a particular protocol or particular application may be written as part of a software plug in module with function calls to functions of the shared resources. Each application may have its own set of software plug in modules for the discrete actions. New protocols and new applications can be added by developing a new set of plug in modules instead of writing an entire new program. The software architecture can reduce development time increase the likelihood that more protocols will be properly supported and reduce the burden on hardware and software resources.

In one set of embodiments a system for performing transactions can comprise a shared resource a first application and a second application. The first application may be configured to send a first call to the shared resource and the second application may be configured to send a second call to the shared resource.

In still another set of embodiments a method of developing a system for performing transactions using shared resources can comprise generating a first application and generating a second application. Each of the first and second applications may be configured to make a call to at least one of the shared resources.

In a further set of embodiments a method of performing electronic transactions can comprise receiving a first communication from a first application and sending a first call to a resource in response to the first communication. The method can also comprise receiving a second communication from a second application and sending a second call to the resource in response to the second communication.

In still other sets of embodiments data processing system readable media can comprise code that includes instructions for carrying out the methods and may be used on the systems.

The foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention as defined in the appended claims.

Skilled artisans appreciate that elements in the figures are illustrated for simplicity and clarity and have not necessarily been drawn to scale. For example the dimensions of some of the elements in the figures may be exaggerated relative to other elements to help to improve understanding of embodiments of the present invention.

Reference is now made in detail to the exemplary embodiments of the invention examples of which are illustrated in the accompanying drawings. Wherever possible the same reference numbers will be used throughout the drawings to refer to the same or like parts elements .

A method and system can comprise a software architecture that allows different applications in the same or different communications protocols to interact with shared resources within a computer. More specifically code for a computer program may be written to increase the amount of code that is generic to i.e. shared by more than one application or communications protocol and reduce the amount of code that handle application specific or protocol specific actions. In one embodiment a transaction may be broken down into a set of discrete actions. The discrete actions may include functions that are common to more than one network application. These functions may be performed by the shared resources.

For each action code that is specific to a particular protocol or application may be written as part of a software plug in module with function calls to functions of the shared resources. Each software plug in module may substantially act similar to a manager for the action where common tasks are delegated to the shared resources and the module performs specialized functions. Each protocol may have its own set of software plug in modules for the discrete actions. New applications and support for new protocols can be added by developing a new set of plug in modules instead of writing an entirely new program. New applications for the same protocol may be developed by replacing or editing as little as one plug in module from a different application in the same protocol. The software architecture can reduce development time increase the likelihood that new applications may be developed quickly with fewer changes from an existing application more protocols will be properly supported and reduce the burden on hardware and software resources.

A few terms are defined or clarified to aid in understanding the descriptions that follow. A network includes an interconnected set of server and client computers over a publicly available medium e.g. the Internet or over an internal company owned system. A user at a client computer may gain access to the network using a network access provider. An Internet Service Provider ISP is a common type of network access provider.

As used herein the terms comprises comprising includes including has having or any other variation thereof are intended to cover a non exclusive inclusion. For example a method process article or apparatus that comprises a list of elements is not necessarily limited to only those elements but may include other elements not expressly listed or inherent to such method process article or apparatus. Further unless expressly stated to the contrary or refers to an inclusive or and not to an exclusive or. For example a condition A or B is satisfied by any one of the following A is true or present and B is false or not present A is false or not present and B is true or present and both A and B are true or present .

The term software component is intended to mean at least a portion of a computer program i.e. a software application . An example includes a software plug in module or the like. Different software components may reside in the same computer program or in different computer programs on the same computer or different computers.

Before discussing embodiments of the present invention an exemplary hardware architecture for using embodiments of the present invention is described. illustrates such an exemplary hardware architecture and includes client computer proxy computer and server computer . Client computer and proxy computer are bi directionally coupled to network and proxy computer and server computer are bi directionally coupled to network . Each of networks and may be an internal network or an external network e.g. the Internet . In one embodiment networks and may be the same network such as the Internet. Computers and may be bi directionally coupled to databases and respectively.

Client computer can include a desktop computer a laptop computer a personal digital assistant a cellular phone or nearly other device capable of communicating over network . Other client computers not shown may also be bi directionally coupled to network . The proxy computer can be a server computer but in another embodiment may be a client computer. Other server computers not shown similar to server computer may be bi directionally coupled to network .

In an alternative embodiment each of proxy computer and server computer may be replaced by a plurality of computers not shown that may be interconnected to each other over a network or a combination of networks. For simplicity a single system is shown for each of proxy computer and server computer .

The client computer can include central processing unit CPU read only memory ROM random access memory RAM hard drive HD or storage memory and input output device s I O . I O can include a keyboard monitor printer electronic pointing device e.g. mouse trackball stylus etc. or the like. Proxy computer can include CPU ROM RAM HD and I O and server computer can include CPU ROM RAM HD and I O .

Each of the computers in may have more than one CPU ROM RAM HD I O or other hardware components. For simplicity each computer is illustrated as having one of each of the hardware components even if more than one is used. Note that is a simplification of an exemplary hardware configuration. Many other alternative hardware configurations are possible and known to skilled artisans.

Each of computers and is an example of a data processing system. ROM and RAM and HD and and databases and can include media that can be read by CPU or . Therefore each of these types of memories includes a data processing system readable medium. These memories may be internal or external to computers or .

Portions of the methods described herein may be implemented in suitable software code that may reside within ROM or RAM or or HD or . The instructions in an embodiment of the present invention may be contained on a data storage device such as HD . illustrates a combination of software code elements and that are embodied within a data processing system readable medium on HD . Alternatively the instructions may be stored as software code elements on a DASD array magnetic tape floppy diskette optical storage device or other appropriate data processing system readable medium or storage device.

In an illustrative embodiment of the invention the computer executable instructions may be lines of compiled assembly C C Java or other language code. Other architectures may be used. For example the functions of any one of the computers may be performed by a different computer shown in . Additionally a computer program or its software components with such code may be embodied in more than one data processing system readable medium in more than one computer.

In the hardware configuration above the various software components may reside on a single computer or on any combination of separate computers. In alternative embodiments some or all of the software components may reside on the same computer. For example one or more the software component s of the proxy computer could reside on the client computer the server computer or both. In still another embodiment the proxy computer and database may not be required if the functions performed by the proxy computer are merged into client computer or server computer . In such an embodiment the client computer and server computer may be bi directionally coupled to the same network not shown in .

Communications between any of the computers in can be accomplished using electronic optical radio frequency or other signals. For example when a user is at client computer client computer may convert the signals to a human understandable form when sending a communication to the user and may convert input from a human to appropriate electronic optical radio frequency or other signals to be used by computers or . Similarly when an operator is at server computer server computer may convert the signals to a human understandable form when sending a communication to the operator and may convert input from a human to appropriate electronic optical radio frequency or other signals to be used by computers or .

Attention is now directed to the methodology of developing a software architecture for the software in accordance with one embodiment of the present invention. The method can comprise breaking down a transaction into a set of discrete actions. The actual definitions used for separating the transaction into the discrete actions is variable and may be selected by skilled artisans in manners that best suit their particular transactions hardware requirements and software requirements. The method can also include determining which functions within the set of discrete actions are common to more than one application. As more are identified the number of shared resources can increase and the amount of application specific code can be decreased. Therefore skilled artisans are encouraged to examine the software from many different levels of abstraction to discover potential shared resources that may otherwise be missed.

The method can further comprise generating software components for the discrete actions. A set of software plug in modules can correspond to the different discrete actions for the transaction. Each application may have its own set of software plug in modules. The amount of code within each software plug in module should be kept relatively low if the identification of shared resources was performed properly. To the extent code for any shared resources does not currently exist code for the shared resources should be generated to maximize its ability to be used by as many different plug in modules as possible.

At least two of the software plug in modules for different applications whether they use the same or different protocols can make function calls to any one or more of the shared resources. For different applications using the same protocol only a request manipulation plug in module a content manipulation plug in module or both may be the only modules changed. Therefore creating new application for the same protocol may be simplified because other plug in modules used for the application may be copied from another application using the same protocol. These other plug in modules may be substantially the same between the applications. By replacing or editing the request manipulation plug in module content manipulation plug in module or both new applications may be developed very quickly.

Regarding applications in different protocols each protocol may have a module that performs substantially the same action as any or all of the similar module s for the other protocol s though reducing this duplicative code by combining the common functionality is preferable.

Attention is now directed to the software architecture of the software in accordance with one embodiment of the present invention. The software architecture is illustrated in and is directed towards an electronic transaction that can be performed over a network. A basic idea behind the architecture is to allow programming code for shared resources to be commonly used by as many different network applications as possible. Note that all of the resources may or may not be shared by all the applications. The programming code for each application specific plug in module may include code to connect the incoming communication in any supported application to the shared resources. By limiting the code within the plug in modules a user of the software architecture can reduce development time increase the likelihood that more applications in the same or different protocols will be properly supported especially proprietary protocols that may be used by only a limited number of computers or users and reduce the burden on hardware and software resources for different applications because only relatively small plug in modules may be used.

In each row of boxes and represents different applications in the same or different protocols. For example row may represent a first application using HTTP row may represent a different application using HTTP and row may represent yet another application in a different protocol such as POP SNMP WAP and the like. Note that the series of dots between rows and indicate that many other applications in the same or different protocols may be present. Additionally the architecture may be configured to allow the addition of future applications. The software architecture easily supports at least three different and potentially many more protocols.

Referring to row each of the boxes through represents different stages actions that may occur during an electronic transaction. For example box may represent a request reception plug in module box may represent an authorization plug in module box may represent a request manipulation plug in module box may represent a content retrieval plug in module box may represents a content manipulation plug in module box may represent a content delivery plug in module and box may represent a post response communication plug in module e.g. acknowledgement billing etc. . Each module may correspond to one or more of the discrete actions. Details about the individual plug in modules are described later in this specification. Note that the other rows and include corresponding boxes for substantially the same types of actions except that they are designed for different applications. More specifically box represents an incoming message reception plug in module for a different application using the same protocol as box and box represents an incoming message reception plug in module for yet another application using a different protocol compared to box .

New applications that make use of already supported protocols can be developed with a minimum of effort. This is achieved by creating a new row which makes use of protocol specific plug ins used in another row and combines them with other plug ins developed for the specific application at hand. Some plug in modules may be substantially the same for many different applications in the same protocol. In different protocols the plug in modules for at least some of the different applications may provide substantially the same functionality although the code within those plug in modules may be different compared to similar modules for the other protocols.

Within the software architecture shared resources are illustrated as planes and that lie beneath each of the rows and . Referring to interfaces may be made to each of the shared resources for each plug in module. Specifically referring to box functional connectivity links module and shared resource . Likewise functional connectivity links module and shared resource and functional connectivity links module shared resource . Links and can be achieved by function calls to the shared resources. Examples of the shared resources may include a content cache a parameter cache a connection pool a domain name server cache a clock a counter a database a global variables space e.g. a logging database or the like. A list of potential shared resources is nearly limitless. Note that not all shared resources may be connected to all modules along a row. For example modules and may not need access to the content cache because they may not receive or process content returned for a request. Each connection from a client may be handled independently on its own thread. However in other embodiments fewer threads or a single thread can be used to operate all connections to a specific row that supports a particular application or protocol. Unless stated to the contrary the method below is described from the perspective of proxy computer .

The method can comprise receiving a request from a client computer using a request reception plug in module block and performing authorization using an authorization plug in module block . The method can also comprise manipulating a request using a request manipulation plug in module block . The method can further comprise retrieving content using a content retrieval plug in module block . The method can yet further comprise manipulating returned content using a content manipulation plug in module block and sending the modified content to the client computer using a content delivery plug in module block . The method can still further comprise processing post response communications using a post response plug in module block .

Note that not all of the activities described in the process flow diagram are required that a limitation within a specific activity may not be required and that further activities may be performed in addition to those illustrated. Also some of the activities may be performed substantially simultaneously during with other activities. After reading this specification skilled artisans will be capable of determining what activities can be used for their specific needs.

Attention is now directed to the protocol specific plug in modules along the rows and and how they are related to the activities illustrated in . Although the discussion is directed to row the corresponding modules along other rows can provide similar functionality. Also in the example below client computer is sending a request for content to proxy computer and server computer is providing content in response to the request. The flow of information could be in the opposite direction server computer seeking information from client computer .

The method can comprise receiving a request from client computer using request reception plug in module block in . Request reception plug in module can be used when a request from client computer is received or accessed by proxy computer . Module can initially generate an associative array from portions of the header of the request. Part or all of the associative array may be used by the other modules along the same row. The associative array may provide information that can be part of function calls to the shared resources. Any or all the data including the associative array may be passed from any prior plug in module e.g. module to any or all the subsequent plug in modules along the same row e.g. or .

The method can also comprise performing authorization using authorization plug in module block . The authorization plug in module is optional and can be used for determining whether a user at client computer has proper authorization. The authorization modules may be based on an Internet Protocol IP address or a name and a password. Module may send the IP address or name and password to a shared resource to determine if the user is allowed access.

The method can further comprise manipulating the request using request manipulation plug in module block . Request manipulation plug in module may be used to modify replace or otherwise manipulate the request. For example proxy computer may have code to redirect a URL within a request to a different URL. More specifically proxy computer may make a function call to that shared resource using the requested URL. The shared resource may pass the different URL back to module . Module may have the logic to put the different URL in the correct protocol so that it will be understood by a computer that may receive the redirected request.

The method can yet further comprise retrieving content using content retrieval plug in module block . Content retrieval plug in module may be used to send the request and receive or access content in response to the original request or manipulated request. More specifically a request originating from client computer may have been processed by proxy computer before being received by server computer . Content from server computer in response to the processed request from proxy computer would be processed using module . Similar to module the code may parse the content from server computer into a header portion and a content portion and append that information onto a previously generated associative array.

The method can still further comprise manipulating returned content from the server computer using content manipulation plug in module block . Content manipulation plug in module may be used to add or modify content before sending it to client computer . More specifically proxy computer may add advertisements or supplementary information from third parties to the content provided by server computer . In an alternative embodiment part or all of the content originating from server computer may be deleted or replaced with other content.

The method can comprise sending the modified content to the client computer using content delivery plug in module block . Content delivery plug in module may be used to route the content after manipulation if any to client computer . Some of the information in the associative array generated when the original request from client computer was processed may be used by module when sending the outgoing content to client computer .

The method can also comprise processing post response communications using post response plug in module block . Post response communication plug in module may be used for acknowledgement billing or other purposes. For example after content is successfully sent to client computer from module module could then charge the user s credit card for that transaction. Alternatively module may look for a signal that service to or from client computer or server computer is being terminated for the current transaction. Such post response processing may be helpful in avoiding invoices or other bills sent to a user at client computer if a product or service was either incomplete or defective or to properly reflect the connect time for a transaction.

Along similar lines one of the planes as illustrated in may include global space variables that may need to be used by other shared resources proxy computer or the plug in modules. System statistics are examples of information that may be within a global variable space. This information may be useful to proxy computer or another computer such as client computer or server computer in monitoring activity. The statistics may include how many computers are connected to proxy computer the amount of time each of those computers are connected to proxy computer the amount of or time lapsed during transactions being processed through proxy computer or the like.

These global variables may be used in conjunction with a module such as authorization module . If too many users are currently logged into proxy computer authorization may be denied even if the computer attempting a connection to proxy computer has proper security clearance. After another transaction by another client computer is terminated a signal from module can be sent to the logging system within the shared resources. A new client computer may now gain access to the services provided by proxy computer after the connection from the other transaction is terminated.

Attention is now directed to more specific activities that may be performed by a specific module and how that specific module may interact with other modules for the same transaction using a specific application. The process flow diagram illustrated in is used to describe some of the specific activities. Again unless stated to the contrary the method is primarily described from the perspective of proxy computer .

To aid in understanding the method in a specific example is used and occasionally referenced. In the example an incoming communication may be a request from client computer sent to proxy computer for www.yahoo.com. The client computer is communicating using HTTP using a Netscape browser of AOL Time Warner Inc. of New York N.Y. and has a MacOS X operating system of Apple Computer Inc. of Cupertino Calif. .

Referring to the method can comprise receiving an incoming communication for a specific application block . The communication can comprise a request a message or other form of communication. The communication can be sent by client computer and received or accessed by proxy computer via network . Proxy computer can access or read at least a portion of the incoming communication and determine the specific application for the communication. In the example the incoming communication is a request from client computer sent to proxy computer for www.yahoo.com. The incoming communication will also contain other information within the header of the request. In the example the other information can include the browser and operating system of client computer .

After determining the application for the communication proxy computer can determine which row or other or row of plug in modules will be used for the transaction. At this point in the method proxy computer may activate any or all of the plug in modules for the row corresponding to the specific application. In one embodiment plug in modules within each row may be activated only as they are first used. Referring to the example the request is for an application corresponding to row . Therefore plug in module may be activated. If the communication is for another application plug in module or may be activated for the particular application.

The method can further comprise routing the incoming communication to a first software plug in module for the specific application block . Proxy computer can route the request to request reception software plug in module because the incoming request uses the application corresponding to row .

The method can comprise parsing the incoming communication into a header portion and a content portion block . The parsing can be performed by module to obtain information from the request.

The method can also comprise generating an associative array using information contained within the header portion block . The associative array can include nearly any finite number of rows. Each row can comprise a key and a value. The key can comprise a parameter within the header portion and the value can comprise a value for that parameter. In general the header portion may include one or more lines of a command followed by a command argument. The command may be a key and the command argument may be the corresponding value for the key. The associative array may be searched by the key or the value.

By knowing conventions used by each of the protocols for incoming communications and the characteristics of headers used for those protocols formation of the associative array can be performed without complicated coding requirements. The associative array is flexible regarding the number of rows and allows different sizes of associative arrays to be used for different protocols.

For HTTP one of the lines within the header may include a line with User Agent Mozilla 5.0 Macintosh U PPC Mac OS X en US rv 1.1 Gecko. The key will be User Agent and the value will be Mozilla 5.0 Macintosh U PPC Mac OS X en US rv 1.1 Gecko. For POP a line may include RETR where is an object identifier for is a particular item to be retrieved. The key will be COMMAND and the value will be RETR. A second entry will be made with a key of ARGUMENT and a value of 27. For SNMP a line may include get 47.12.112.38 where 47.12.112.38 corresponds to an object identifier. The key will be COMMAND and the value will be GET and a second entry will have the key ARGUMENT and the value 47.12.112.38. 

The content may or may not be part of the associative array. If it is the associative array can include a key of CONTENT and the entire content data block as the value. For an image the content may be a very large amount of data. Alternatively the associative array may be paired with a data pointer that points to the data block rather than incorporating it directly into the associative array.

Turning to the example the associative array may include information as shown in Table 1 below. Descriptive names are used instead of actual names to aid in understanding the associative array. Also the associative array may include many more rows. Because the associative array may be searched by key or value the order of the rows is unimportant.

The method can also comprise generating a function call to at least one of the shared resources using data within the associative array block in . In the example proxy computer can make a function call to a shared resource more specifically to a clock shared resource and a logging system another shared resource to get the time and log the beginning of the transaction. The logging information may include the time and a transaction identifier. Note that some of the information within the associative array could be sent with the function call to the shared resource.

The method can further comprise receiving data from the function call block . In the example the transaction identifier may be passed back to module . The method can still further comprise processing data from the function call with other code within the first software module block . Module may be more focused on processing the incoming message rather than processing data coming back from the function call. Other modules such as the content deliver plug in module may perform such data processing. Note that the application specific processing may occur before during or after function call s if any are made to the shared resource s .

A determination may be made whether the first software plug in module is the last software plug in module diamond . If so the method may end. Otherwise the method may continue with passing any or all of the data including the associative array from a prior software plug in module to the next software plug in module block in . In the example the next software plug in module is authorization module . Authorization module may use some of the information that was collected or generated by module . Passing the information reduces the load on hardware by not sending a communication from proxy computer to another computer e.g. client computer or making the same or similar function call to a shared resource for the same information.

The method can also comprise generating a function call to at least one of the shared resources using data within the associative array block . Authorization module may make a function call to the parameter system to determine if the user has proper authorization whether access can be granted whether number of users currently connected to proxy computer has exceeded its limits priority of connection level or speed of service to be provided etc. Module may pass user name and password when making the function call to the logging system. Module may also make a function call to the shared clock to obtain a time for the action.

The method can also comprise receiving data from the function call block . The data may include information regarding whether user at client computer has proper security clearance whether the connection could be made priority of the connection and the like. The method can further comprise processing data from the function call with other code within the current software plug in module block . An example may include sending a communication from proxy computer to client computer informing the user whether the connection was made. Alternatively no further processing may occur with module .

A determination may be made whether the current software plug in module is the last software plug in module diamond . If so the method may end. Otherwise the method may continue with block in and proceed in an iterative manner until the last software plug in module is reached.

The remaining modules along row will be addressed to complete the example transaction to give a better understanding of actions within the modules and some function calls that those modules may make. More or fewer modules may be used. Also more fewer or different function calls may be made by the modules.

Data can be passed to request manipulation software plug in module . A function call can be made to a shared resource to determine if the request should be changed. The function call may pass information that a request for www.yahoo.com has been received or accessed. The shared resource may include logic to replace the original client request with www.google.com. The associative array may be changed to replace www.yahoo.com with www.google.com or be appended to note that the manipulated request is www.google.com.

Module may perform the content retrieval. A function call can be made to a content cache shared resource at proxy computer to determine if the content cache includes a network page for www.google.com specifically formatted for a computer having a Netscape browser and a MacOS X operating system. Note that the browser and operating system information can be obtained from the associative array. If the content cache has the network page it can be passed to module . Otherwise module may formulate an HTTP request to server computer requesting the network page for the specific browser and operating system of client computer . After proxy computer obtains the proper network page from server computer module may send a function call to the content cache at proxy computer to cache the network page. The proper network page and other information previously collected may be sent to module .

Content manipulation module may delete add or replace some or all of the content within the proper network page returned. For example when the proper Google network page is received or accessed module may add advertisement s around the border s of the page. A function call can be made to a shared resource to determine which advertisement s should be added. The logging system may keep track of which advertisement is being added whose advertisement it is and how many times the advertisement has been added during the current billing cycle. The logging system which is a shared resource may access the counter another shared resource by itself. In other works some or all of the shared resources may interact with each other without requiring an application specific software plug in module to intervene. The manipulated content and other information may be passed to module .

Content delivery software plug in module may take the Google network page formatted for a Netscape browser and MacOS X operating system and the advertisement s from module and prepare a communication using HTTP. The communication can be sent from proxy computer to client computer . Function calls can be made to the logging system to note the actual content sent to client computer and time sent. Any or all information collected or generated by modules may be passed to module .

Post response communications module may be used to track usage or billing information. At the end of a transaction module may make a function call to the clock to determine the current time and make another function call to the logging system to determine how much time lapsed during the transaction and record any billing information. The billing information may be within a shared resource managed by an accounting department. Billing information for the user at client computer may be passed from one of the shared resources to module which may return some of the information for the user at client computer . Proxy computer may send a message to client computer similar to You were connected for 2.1 minutes and were charged 1.27. Thank you for using our service. Alternatively no message may be sent and the method may end.

Note that not all of the activities described in the process flow diagram in are required that a limitation within a specific activity may not be required and that further activities may be performed in addition to those illustrated. Also some of the activities may be performed substantially simultaneously during with other activities. After reading this specification skilled artisans will be capable of determining what activities can be used for their specific needs.

The power of creating new applications for the same protocol may be better understood with the flow diagram in and an example. In one embodiment different applications may be generated for different priorities of users for a network site. The communication protocol may use HTTP. The method can comprise developing a first set of plug in modules for a first application block . The set may correspond to row and be directed to premium users of a network site.

A new application may need to be developed for regular users of the network site. The communication protocol may also use HTTP. The method can comprise copying the first set of plug in modules to form a second set of plug in modules block .

For the new application only the request manipulation plug in module the content manipulation plug in module or both may be replaced. The remainder of the plug in modules may be unchanged and be substantially the same as the remainder of the plug in modules for the first application.

The method may comprise replacing a first request manipulation plug in module with a second request manipulation plug in module for a second application block . For example the premium user may have access to some network pages that the regular user may not. If the regular user requests a premium page the second request manipulation module may direct the regular user to another network page for which the regular user has proper access.

The method may also comprise replacing a first content manipulation plug in module with a second content manipulation plug in module for the second application block . The premium user may have only 10 percent of his or her window occupied by advertisements whereas the regular user may have 50 percent of his or her window occupied by advertisements. The second content manipulation module may reformat the retrieved content to allow for more advertising space. The second content manipulation module may also access the shared resources to obtain the advertisements and keep track of which advertisements were used. Device dependent optimization of network pages desktop computer vs. cellular phone etc. can be achieved by plugging in a module which transcodes content using settings developed for the particular device that made the initial request.

After one or both of the request manipulation and content manipulation modules are replaced the method can still further comprise executing the second application using the second set of plug in modules block .

Note that while the example focused more on replacing specific modules in other embodiments those modules may be generated by editing code within the corresponding modules within the first set for the first application.

After reading this specification skilled artisans will appreciate that entirely different applications using the same network protocol can be developed by simply inserting new plug in module s at the request manipulation location the content request location or both locations.

In other embodiments the method and system may be used for nearly any other network communications. As an example client computer may make a request for information within a database located at server computer . The request may be handled in a manner similar to a request for a network page. If the user does not have proper authorization to all information within a request the request manipulation module may request only that information for which the user has property access or the content manipulation module may add information stating that the user does not have proper access to some or all the information.

In another embodiment the multiple protocol software architecture and plug in modules may be installed in client computer or server computer . Not all modules in proxy computer may be needed by client computer or server computer . Authorization modules and may not be used or can be coded to allow authorization always authorized at client computer . The content manipulation modules and may not be used by the server computer . After reading this specification skilled artisans are capable of determine which modules are needed and which ones can be eliminated or bypassed module exists but passes information through without performing any other significant activity .

The software components can be designed to maximize their ability use shared resources while minimizing the amount of code used for application specific operations. Therefore relatively smaller plug in modules compared to the shared resources may be used to access the shared resources illustrated in the planes below the modules. In this manner less code needs to be written for a new protocol compared to the prior art method of writing or copying and modifying an entire program for a specific protocol. For applications in the same protocol the specific coding requirements may be much less. Furthermore protocols are more likely to be supported because the coding requirements are less and therefore may be generated for protocols that have relatively fewer users compared to other protocols. The method and system are significantly more efficient in both time and cost compared to existing prior art methods dealing with the problem of many different applications in the same or different protocols.

In the foregoing specification the invention has been described with reference to specific embodiments. However one of ordinary skill in the art appreciates that various modifications and changes can be made without departing from the scope of the present invention as set forth in the claims below. Accordingly the specification and figures are to be regarded in an illustrative rather than a restrictive sense and all such modifications are intended to be included within the scope of present invention.

Benefits other advantages and solutions to problems have been described above with regard to specific embodiments. However the benefits advantages solutions to problems and any element s that may cause any benefit advantage or solution to occur or become more pronounced are not to be construed as a critical required or essential feature or element of any or all the claims.

