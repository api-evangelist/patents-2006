---

title: Distributing notifications to multiple recipients via a broadcast list
abstract: Processing a notification intended for delivery to multiple recipients associated with a broadcast list. Software executes within an alerts service environment to receive a notification addressed to a broadcast alias, determine a list of recipients associated with the broadcast alias to receive the notification, and broadcast the received notification to each recipient in the determined list.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09460421&OS=09460421&RS=09460421
owner: MICROSOFT TECHNOLOGY LICENSING, LLC
number: 09460421
owner_city: Redmond
owner_country: US
publication_date: 20061211
---
This application is a continuation of prior pending U.S. patent application Ser. No. 10 696 916 filed Oct. 30 2003 and a continuation in part of prior pending U.S. patent application Ser. No. 10 017 680 filed Oct. 22 2001 which claims the benefit of U.S. Provisional Patent Application Ser. No. 60 275 809 filed Mar. 14 2001 all three of which applications are hereby incorporated by reference herein in their entirety for all purposes.

Some prior systems broadcast messages to alert users to information e.g. for example news updates . The broadcast messages alerts or other notifications include individual packets of information sent to users. These systems broadcast the messages by sequentially sending individually addressed messages e.g. multiple messages to one addressed user or multiple instances of one message to several addressed users . That is the alerts are sent one by one using multiple packets even though the same information is sent to multiple users. In such systems an individual alert is sent for each recipient. Other systems only accommodate up to twenty recipients per message. However these systems require the content provider to explicitly address each of the recipients.

Some systems use an electronic mail alias to distribute a single electronic mail message to multiple recipients. However such a system is dependent on and limited to the electronic mail transport medium. Existing systems fail to use a plurality of transport mediums.

Accordingly a system for distributing notifications to multiple recipients via a broadcast list is desired to address one or more of these and other disadvantages.

Embodiments of the invention include creating a broadcast list of recipients of a particular alert. Content providers send the broadcast alert to the broadcast list effecting delivery of the alert to each of the recipients on the broadcast list. In one embodiment the broadcast list is managed and maintained by an alerts web service. A broadcast alert is intended for a scenario in which the same alert content is to be sent to multiple recipients. In one embodiment the broadcast list represents a set of users who want to receive content such as a daily news update breaking news a weather forecast or a traffic report. With a broadcast list a content provider only sends one alert to the broadcast list instead of sending thousands or millions of alerts with each one addressed to one person only.

The broadcast list in embodiments of the invention provides scalability and allows alerts to be handled in a cost effective way for both the content provider and distributor of alerts. Further the broadcast list allows the content provider to offload the management and distribution of alerts to an alerts service and simplify the operations of the content provider. This reduces the packet traffic from the content providers to the alerts service significantly and also allows the alerts service to scale better in terms of the number of packets processed per computing device associated with the web service and the reduction in database storage for the alert messages. Benefits of the broadcast list are significant particularly when the broadcast list size is fairly large e.g. tens of thousands of members to several million members per list . Further aspects of the invention transcend any one particular medium of delivery. That is multiple mediums such as electronic mail instant messaging and mobile short message service messaging may be used.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

In an embodiment the invention processes the distribution of an alert or notification e.g. event driven content . In particular embodiments of the invention include software for receiving an alert from a content provider and broadcasting the alert to a plurality of users. A broadcast alert is intended for a scenario in which the same alert content is to be sent to multiple recipients. In one embodiment the broadcast list represents a set of users who want to receive content such as a daily news update breaking news a weather forecast or a traffic report. In one embodiment an alert carries time sensitive content. Broadcasting an alert according to the invention allows the content provider to delegate explicit addressing of the alert to the alerts service. That is in an embodiment of the invention the content provider transfers the addressing workload to the alerts service. The alerts service addresses the alert to each of the users associated with the broadcast alert processes user preferences and routes the addressed alerts to each of the intended users. Alternatively the alerts service addresses the alerts but transfers the broadcasting workload to a gateway based on the user preferences see below . The gateway then performs the actual broadcasting of the alert to the intended users. In this embodiment the alerts service forwards a single alert with multiple explicitly addressed users to the gateway. Further aspects of the invention include thresholds for queue management to throttle requests incoming to the alerts service.

Referring first to an exemplary block diagram illustrates one example of a suitable alerts service environment in which embodiments of the invention may be implemented. In one example the alerts service environment is referred to as a notification pipeline and database NPD . illustrates the communication flow between a content provider such as content provider through content provider N an alerts service and a user device such as user device through user device M. The content provider the alerts service and the user device are coupled to a data communication network such as described with reference to see below . The content provider sends an alert to the alerts service for delivery to one or more of the user devices . The alerts service accesses a subscription database storing subscription information and user routing preferences to determine which user device s should receive the alert. The alerts service then delivers the alert to the determined user device .

The user device may be a computer such as computer described with reference to . Further the user device may execute an alerts application e.g. an instant messaging application that receives and processes alerts. The alerts application executes on a user device such as a cellular telephone e.g. a Smartphone device a pager and a handheld computing device e.g. a personal digital assistant or a Pocket PC device . Further the user device may include any of the above exemplary devices enabled with an information service such as a SMART PERSONAL OBJECTS TECHNOLOGY SPOT brand of telecommunication service and or devices. The information service comprises a computing infrastructure e.g. a telecommunication service for sending data and information to personal and home devices via computer networks wireless networks and the Internet. User devices which may be enabled with the information service include but are not limited to the following devices clocks alarm clocks radios incorporating clocks watches billfolds wallets checkbook and passbook wallets purses pens metal key rings key holders wireless devices computer hardware e.g. peripherals monitors and displays electronic calendar devices and refrigerator magnets. Further magazines books and user manuals relating to computers computer programs personal information devices and wireless communications may also incorporate the information service. The information service enables billions of devices to communicate with each other. For example customers select the type of information and services they want to receive on the enabled devices via a configuration web page. This content is subsequently beamed to and displayed on the device. Information available to users on devices using the information service includes personal messages calendar updates and customized news weather financial and sports information.

The alerts service illustrated in transcends any one particular transport medium for delivery of notifications. Aspects of the invention may use any of a plurality of transport mediums such as electronic mail instant messaging and mobile short message service messaging.

The system of processes a notification or alert. The alerts service includes a memory area storing a notification received from a third party content provider . In one example the memory area includes a plurality of databases. An interface component receives a data packet representing the notification. The notification includes routing information and content. The routing information includes a broadcast alias. One or more computing devices associated with the alerts service enable delivery of the stored notification to a plurality of users based on the broadcast alias. Software executing on each of the computing devices accesses the stored notification determines a list of users associated with the broadcast alias for receiving the stored notification and delivers the stored notification to the determined list of users. In one embodiment an address component determines the list of recipients associated with the broadcast alias to receive the notification. Further a broadcast component routes the notification to the determined list of recipients.

In one embodiment the system of is implemented as a web service. Further functionality associated with the alerts service of may be distributed among one or more computers. For example the alerts service may include a distributed processing system such as illustrated in .

Referring next to an exemplary block diagram illustrates a detailed view of the alerts service illustrated in . In this embodiment the plurality of computing devices includes a master router and a plurality of worker routers . The master router associates the stored notification with one of the plurality of worker routers . Broadcast list processing is distributed by the master router across the plurality of worker routers such as NRouters. The worker routers accept or reject the assigned workload based on their currently assigned workload. While any worker router may act as a master router the NRouter that originally receives the alert from the content provider is designated as the master router . The master router coordinates the processing of the received alert across other worker NRouters . The master router also functions as a worker NRouter to process alerts. The master NRouter is responsible for logging the alert to a memory area such as an activity queue database . The master and worker routers communicate with each other through an STS server to server layer see . The STS layer includes a communication component that provides a network connection between or among all routers in the system. The master router and the worker routers communicate with each other through an STS component. In one embodiment a maximum of 256 worker NRouters process a single broadcast list. However there is no limit on the number of broadcast NRouters that may be deployed.

A unicast NRouter handles alert packets that are explicitly addressed to a particular user by the content provider . A broadcast NRouter or worker NRouter processes alert packets that are addressed to a broadcast list. Both types of routers are built out of the same code base so that any NRouter may actually act as both unicast and broadcast at the same time if necessary to improve efficiency and scalability. All the broadcast NRouters are behind one fan out logical store. The mappings are installed through an application program such as dbsmgmt. An NRouter is designated as a broadcast NRouter by adding the following entry into a configuration file such as soft.xml with appropriate values for the MAC and IP attributes and installing the mappings 

In another configuration file such as notifications.conf a NPD NROUTER CLASS field is set to Broadcast in an NPD section.

The master and worker routers access a computer readable medium storing a data structure e.g. in a broadcast list database . The data structure may be associated with an application programming interface. The data structure includes a broadcast list identifier associated with the broadcast alias and a list of the users associated with the broadcast list identifier. In one embodiment the broadcast list database includes a broadcast list table associating the broadcast list identifier with a specific member table storing the list of users associated with the broadcast list identifier. The subscription database or a user profile database stores the user routing preferences . Invention software routes the stored notification to the users on the determined list based on user routing preferences corresponding thereto stored in the subscription database .

In another embodiment the alerts service identifies the users associated with the broadcast alias but sends the notification and the identified users to one or more third party gateways for delivery. For example the gateways may include an instant messaging gateway a mobile gateway and an electronic mail gateway . The third party gateways route the notification to the user devices associated with the identified users via one or more types of networks .

Referring next to an exemplary flow chart illustrates operation of the alerts service. One or more computer readable media have computer executable instructions for performing the method illustrated in . Software or other computer executable instructions embodying aspects of the invention receives a data packet representing a notification at . The data packet has routing information including a broadcast alias. The software populates an activity queue with the received data packet at and subsequently accesses the activity queue to obtain the stored data packet. The software determines a list of recipients associated with the broadcast alias to receive the data packet at . In one embodiment the software retrieves a broadcast list identifier from a broadcast list table via the broadcast alias. The software identifies one or more recipients associated with the broadcast list identifier by accessing a member list table. The software delivers the received data packet to the determined list of recipients at .

In the master worker router embodiment of the software receives an alert from a content provider directed to a broadcast list alias. The master router parses the alert packet and verifies or validates the content provider. The master router stores the alert in the activity queue database. The master router accesses the broadcast list database using information in the packet such as the broadcast list alias. In one embodiment the master router uses a content provider identifier and the alias to obtain the broadcast list identifier. There is a user member table for each broadcast list identifier which lists all users members associated with the broadcast list identifier. For example the member table may be one table with multiple partitions. Every row in the member table has a broadcast list identifier a sequence number unique to the broadcast list identifier and user and a unique identifier for each user.

The master router distributes processing based on the number of members for the broadcast list identifier and the number of worker routers available. The master router may queue multiple work items for each worker router. In one embodiment the master router stores a table of the worker routers including itself in memory such as a state table. In another embodiment the master router stores the table in a database such as a persistent SQL database. Storing the state information in a database provides reliability should the master router become unavailable.

Each worker router accepts assigned work e.g. by accessing the activity queue and processes the assigned work item by accessing the member table to obtain a list of users loading user preferences e.g. from a user profile database for each user on the list and delivering the alert to each user based on the preferences. In one embodiment the user profile database includes a SQL table indexed by a user identifier a user name and routing preferences.

With aspects of the invention each content provider sends a single packet to the alerts service for delivery to a broadcast list of users. In an alternative embodiment the alerts service identifies the individual users associated with the broadcast list and transfers the packet and the list of users to another computing device e.g. a gateway to perform the routing. That is the software sends the received data packet and the determined list of recipients to a third party gateway for routing the received data packet to each of the recipients on the determined list. The software effects the routing of the received notification to each of the recipients on the determined list.

In particular an NRouter identifies a packet addressed to a broadcast list by the presence of the attribute listed on the TO element as shown below 

In one form the listid is in hexadecimal format and between the range 0 through 2 32 1 i.e. approximately four billion values . This corresponds to the npd ListID column in the npd BroadcastList table discussed below. The content provider provisions the listid with the alerts service.

Referring next to an exemplary block diagram illustrates operation of software executed by a master router in the alerts service. When a content provider posts an alert such as in the form of an extensible markup language XML document to the master NRouter at the master NRouter parses the alert and validates the packet at . In one embodiment the master NRouter applies usage and throttle limits. The master NRouter then acknowledges receipt of the alert by returning a message with HSE STATUS PENDING status to the content provider. The master NRouter asynchronously processes the alert by queuing the alert into an NPD queue or other memory area. The NPD queue represents an internal queue of work items that are acted upon by any one of the multiple threads in the thread pool but only one thread processes the item at any given time.

The master NRouter then retrieves information regarding the specific broadcast list specified in the alert such as the number of members or users and an internal 32 bit row identifier from a database such as BLdb. The master NRouter enforces the usage limits for the content provider if any and logs the alert to an activity queue database such as AQdb . A copy of the broadcast activity is logged to every physical bucket in each activity queue physical store. This is done before returning a final status to the content provider. If the master NRouter is unsuccessful during any of the above processing it returns an error code such as 500 Server Error with status 600. Otherwise the master NRouter returns 202 Accepted with status 100.

A list processor module associated with the master NRouter picks up the queued packet and uses the size of the broadcast list to determine an optimum number of processing jobs to schedule across the worker NRouters. These jobs are then queued into a scheduler queue and handed off to a scheduler module which packages each job into a request packet e.g. as defined by a fan out protocol and assigns each job to an appropriate logical area of the logical NRouter in the STS layer . These logical areas map to the various NRouters. The scheduler module also adds an entry into an outstanding jobs queue with an appropriate expiration timestamp. The list row identifier a tick count and a chunk identifier together make up the key by which the outstanding jobs queue is searched. A response command handler or other monitor process executing on the master NRouter periodically checks the outstanding jobs queue e.g. every 5 minutes and reschedules expired jobs if necessary. In one embodiment the periodic interval is configurable and rescheduling occurs up to a total of three times before discarding the job.

Referring next to an exemplary block diagram illustrates operation of software executed by a worker router in the alerts service. On the worker NRouter the request packet is picked up from the STS layer . If that worker NRouter is willing to accept this work item a request command handler sends an acknowledgement ACK back to the master NRouter. Otherwise the request command handler returns a not acknowledged NACK status see the fan out NRouter to NRouter protocol illustrated in . One implementation returns the ack nack immediately and does not wait for the worker NRouter to complete its task. The job is then queued into a fan out request queue . A fan out processor reads the BLdb database for a range of members defined by the chunk identifiers specified in the request packet. The fan out processor creates small blocks of members e.g. 250 members per block for further processing by a rules engine . These configurable blocks are added to an NPD queue . The policy threads in the rules engine process each block independently.

The master NRouter maintains an in memory table of its pending jobs. Since it is in memory the table is susceptible to master NRouter failures. To improve reliability the master NRouter periodically writes out its state into a table such as a structured query language SQL table. The worker NRouters work off of the database to update the rows corresponding to each work item belonging to a particular fan out request. The master NRouter or a secondary master monitors the work items that are being updated in the database.

The following tables show exemplary request and response packet formats for use with the alerts service. The master NRouter sends the request packet to the worker NRouter to assign an alert to the worker NRouter. The worker NRouter accepts or declines the assigned alert via the response packet.

The CMD field indicates one of the following fan out request processing i.e. requests an NRouter to process a fan out job fan out response accepted i.e. worker NRouter accepts the task or fan out response declined i.e. worker NRouter declines the task . The KEY field correlates outstanding jobs in the Master NRouter with the worker NRouter responses. In one example the key field includes a List RowID and a Tick count. The ChunkID Start and End fields specify an interval within the broadcast List member range that a worker NRouter is to process. In one example the ChunkID start and end fields map to npd Bucket in an npd BroadcastListMembers table.

The fan out processor may be fine tuned using the following configuration settings e.g. such as in a notifications.conf file . An NPD BROADCAST WORKER IDEAL JOB SIZE setting represents an integral value that is used as a guideline by the master NRouter when assigning work to the worker NRouters. A default value includes 1000 list members per worker NRouter per request. An NPD BROADCAST JOB EXPIRATION TIMEOUT setting in milliseconds represents the time period to wait before attempting to reschedule the job with another worker NRouter. A default value includes one minute. An NPD BROADCAST MEMBERS PER POLICY BLOCK setting represents the maximum number of recipients that are associated with an instance of the policy block. A default value includes 250 recipients.

Exemplary databases and tables involved with broadcast list processing include npd BLdb rw 1 and npd BLdb ro1. They both contain the tables npd BroadcastList and npd BroadcastListMembers and both databases have identical content.

Web page front end computers read and write to npd BLdb rw 1. The broadcast list provisioning also occurs on this database. The SQL instance hosting this database also acts as a distributor for transaction replication to populate npd BLdb ro 1. This latter database is used by the NRouter front ends at run time. The database npd BLdb rw 1 may be deployed on a different network switch than npd BLdb ro 1. These databases are accessed in NPD via the NSD STORE NPD LISTS and NSD STORE NPD LISTS PROTECTED logical stores respectively.

Both BLdb RW and RO databases are setup to do Read Only failover at physical bucket PB level. The number of PBs for the RW database is equal to the number of RO databases physical stores the number of PBs for the RO database is equal to 2 per physical store. The failover generation algorithm also takes into account the network switch if specified.

Each row in Npd BroadcastList table represents one broadcast list. The npd CPID and npd ListID together uniquely identify a list as does the npd RowID column by itself. The npd CPID column corresponds to the npd Row column in the Content Provider table. This column contains the site ID of the content provider that owns the List. The npd ListID column contains List owner e.g. Content Provider defined data and its semantics are known to the NRouter. The owner has the entire range of values at its disposal. The npd RowID column is the identity column that contains a unique 32 bit number and is generally used within the NPD to identify Lists. This column is related to npd RowID column in npd BroadcastListMembers table. This column also corresponds to the npd SubscriptionId column in the npd Subscriptions table in the user profile database. In the case of broadcast activities in activity queue database its value is used for npd ReceiverIDRow column in npd Activity2 table. In one example the npd RowID is a 32 bit number. The bits or a subset thereof may be organized or otherwise given specific meaning. For example a subset of the bits may identify a specific alert such as an hourly news update or a nightly news update. In one embodiment the invention software codes npd CPID and npd ListID to map to a specific npd RowID for lookups and modification to a specific broadcast list.

The npd MemberCount column contains the count of members belonging to each broadcast list. The master NRouter uses this count to decompose a fan out request into an optimum number of jobs that are then distributed across worker NRouters. The npd Language column holds locale information in one embodiment. The npd DisplayName column contains a user displayable string for the given broadcast list. There may be more than one row sharing the same topic information as long as the provider specific data portion is unique. The display name is available on the first row if there are multiple rows with the remaining rows containing a NULL for this column value.

The npd RowID column contains a 32 bit value that uniquely identifies a List. This column corresponds to the npd RowID column in npd BroadcastList table. The members of each List are grouped into one of the 256 possible npd Cluster clusters. The master NRouter assigns one or more clusters at a time to each worker NRouter for processing. The value is based on a hash of the member PUID. The npd PUIDhigh and npd PUIDlow columns represent identifiers that uniquely identify a single user.

The primary clustered index is based on npd ReceiverIDtype npd ReceiverIDbucket npd ReceiverIDrow and npd ID. The npd ReceiverIDtype ensures that all broadcast activities are grouped together and all unicast activities are together so as to take advantage of SQL page caching as each broadcast activity is read by more than one user. Typically the read write ratio for broadcast activities is very high compared to unicast activities.

The NRouter logs a copy of the broadcast activity to each of the physical buckets in the activity queue database. During a read operation the user is directed to one of these copies based on a function of the user s bucket.

The activity queue database stores the alerts for each user for a time interval e.g. twenty four hours configurable by an administrator of the alerts service or by the user. In one example a broadcast activity table includes multiple rows. Each row stores a user identifier and an alert. Each user may be allocated one or more rows. In another example each message is stored once while a list of recipients of the message is stored and associated with the message.

The AQS runs a separate set of threads to handle broadcast activity expiration enforcement and dirty bucket cleanup due to failover. The related SQL stored procedures have been modified to take an extra argument to distinguish broadcast from unicast activities. Broadcast activities are cleaned up at the same frequency as unicast activities.

Application programming interfaces APIs are exposed e.g. as a web service to content providers to create and maintain broadcast list IDs. In one example this function is implemented by a subscription management service. Exemplary APIs for managing broadcast lists are described in Appendix A.

The computer typically has at least some form of computer readable media. Computer readable media which include both volatile and nonvolatile media removable and non removable media may be any available medium that may be accessed by computer . By way of example and not limitation computer readable media comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer storage media include RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that may be used to store the desired information and that may be accessed by computer . Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. Those skilled in the art are familiar with the modulated data signal which has one or more of its characteristics set or changed in such a manner as to encode information in the signal. Wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media are examples of communication media. Combinations of the any of the above are also included within the scope of computer readable media.

The system memory includes computer storage media in the form of removable and or non removable volatile and or nonvolatile memory. In the illustrated embodiment system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. For example illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media. also shows a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that may be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive and magnetic disk drive and optical disk drive are typically connected to the system bus by a non volatile memory interface such as interface .

The drives or other mass storage devices and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components may either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies.

A user may enter commands and information into computer through input devices or user interface selection devices such as a keyboard and a pointing device e.g. a mouse trackball pen or touch pad . Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are connected to processing unit through a user input interface that is coupled to system bus but may be connected by other interface and bus structures such as a parallel port game port or a Universal Serial Bus USB . A monitor or other type of display device is also connected to system bus via an interface such as a video interface . In addition to the monitor computers often include other peripheral output devices not shown such as a printer and speakers which may be connected through an output peripheral interface not shown .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to computer . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. LAN and or WAN may be a wired network a wireless network a combination thereof and so on. Such networking environments are commonplace in offices enterprise wide computer networks intranets and global computer networks e.g. the Internet .

When used in a local area networking environment computer is connected to the LAN through a network interface or adapter . When used in a wide area networking environment computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external is connected to system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to computer or portions thereof may be stored in a remote memory storage device not shown . By way of example and not limitation illustrates remote application programs as residing on the memory device. The network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Generally the data processors of computer are programmed by means of instructions stored at different times in the various computer readable storage media of the computer. Programs and operating systems are typically distributed for example on floppy disks or CD ROMs. From there they are installed or loaded into the secondary memory of a computer. At execution they are loaded at least partially into the computer s primary electronic memory. Aspects of the invention described herein include these and other various types of computer readable storage media when such media contain instructions or programs for implementing the steps described below in conjunction with a microprocessor or other data processor. Embodiments of the invention also include the computer itself when programmed according to the methods and techniques described herein.

For purposes of illustration programs and other executable program components such as the operating system are illustrated herein as discrete blocks. It is recognized however that such programs and components reside at various times in different storage components of the computer and are executed by the data processor s of the computer.

Although described in connection with an exemplary computing system environment including computer aspects of the invention are operational with numerous other general purpose or special purpose computing system environments or configurations. The computing system environment is not intended to suggest any limitation as to the scope of use or functionality of embodiments of the invention. Moreover the computing system environment should not be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment. Examples of well known computing systems environments and or configurations that may be suitable for use with aspects of the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics mobile telephones network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

Aspects of the invention may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include but are not limited to routines programs objects components and data structures that perform particular tasks or implement particular abstract data types. Aspects of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

An interface in the context of a software architecture includes a software module component code portion or other sequence of computer executable instructions. The interface includes for example a first module accessing a second module to perform computing tasks on behalf of the first module. The first and second modules include in one example application programming interfaces APIs such as provided by operating systems component object model COM interfaces e.g. for peer to peer application communication and extensible markup language metadata interchange format XMI interfaces e.g. for communication between web services .

The interface may be a tightly coupled synchronous implementation such as in Java 2 Platform Enterprise Edition J2EE COM or distributed COM DCOM examples. Alternatively or in addition the interface may be a loosely coupled asynchronous implementation such as in a web service e.g. using the simple object access protocol . In general the interface includes any combination of the following characteristics tightly coupled loosely coupled synchronous and asynchronous. Further the interface may conform to a standard protocol a proprietary protocol or any combination of standard and proprietary protocols.

The interfaces described herein may all be part of a single interface or may be implemented as separate interfaces or any combination therein. The interfaces may execute locally or remotely to provide functionality. Further the interfaces may include additional or less functionality than illustrated or described herein.

In operation computer executes computer executable instructions such as those illustrated in to process a notification by receiving the notification addressed to a broadcast alias determining the list of recipients associated with the broadcast alias and delivering the notification to each recipient on the list.

The order of execution or performance of the operations in embodiments of the invention illustrated and described herein is not essential unless otherwise specified. That is the operations may be performed in any order unless otherwise specified and embodiments of the invention may include additional or fewer operations than those disclosed herein. For example it is contemplated that executing or performing a particular operation before contemporaneously with or after another operation is within the scope of aspects of the invention.

When introducing elements of aspects of the invention or the embodiments thereof the articles a an the and said are intended to mean that there are one or more of the elements. The terms comprising including and having are intended to be inclusive and mean that there may be additional elements other than the listed elements.

Having described aspects of the invention in detail it will be apparent that modifications and variations are possible without departing from the scope of aspects of the invention as defined in the appended claims. As various changes could be made in the above constructions products and methods without departing from the scope of aspects of the invention it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.

To create a copy of the broadcast activity in every physical bucket of each AQ logical store use npdModify instead of npdCreate.

Since the activities are filed under the list row identifier the list row identifiers may be found by determining all the list subscriptions of the user. This information is input into a special query to gather all broadcast activities for the given user.

