---

title: Color management system that supports legacy and advanced color management applications
abstract: The present invention provides method and apparatus for supporting a legacy application programming interface (API) set between a component and a color management system. The legacy API set supports both the new capabilities as well as the legacy capabilities. The color management system determines the format type for an object that is referenced by an API call. If the object is associated with a legacy format, the API call is processed by a legacy processing module. If the object is associated with an advanced format, the API call is processed by an advanced processing module. If a plurality of objects is associated with an API call with mixed formats, the color management system converts some of the objects so that the objects have a consistent format. A common structure supports an object that may have either a legacy format or an advanced format.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07647348&OS=07647348&RS=07647348
owner: Microsoft Corporation
number: 07647348
owner_city: Redmond
owner_country: US
publication_date: 20060220
---
This application is a divisional of and claims priority to co pending U.S. application Ser. No. 10 705 132 filed Nov. 10 2003. The prior application is hereby incorporated by reference in its entirety.

This disclosure is related to the following co pending applications each of which having the same named inventor and filing date as the present application 

a. U.S. patent application Ser. No. 11 276 245 filed Feb. 20 2006 entitled A COLOR MANAGEMENT SYSTEM THAT SUPPORTS LEGACY AND ADVANCED COLOR MANAGEMENT APPLICATIONS .

b. U.S. patent application Ser. No. 11 276 244 filed Feb. 20 2006 entitled A COLOR MANAGEMENT SYSTEM THAT SUPPORTS LEGACY AND ADVANCED COLOR MANAGEMENT APPLICATIONS .

The present invention relates to color management technology for a computer system and in particular provides compatibility of a legacy application program interface API that supports advanced color management capabilities.

With a one input one output workflow as supported by the prior art color management was not typically required. Images were typically scanned by a professional operator using a single scanner producing a color representation e.g. cyan magenta yellow and black CMYK format that was tuned to a single output device. Spot colors were handled either by mixing spot inks or by using standard CMYK formulas in swatch books. An accurate monitor display was not typically available. The system worked because the CMYK values that the scanner produced were tuned for the output device forming a closed loop that dealt with one set of numbers.

More recently the types of input and output devices have increased dramatically. Input devices include not only high end drum scanners but also high end flatbed scanners desktop flatbeds desktop slide scanners and digital cameras. Output devices include not only web and sheetfeed presses with waterless inks soy inks direct to plate printing and Hi Fi color but also digital proofers flexography film recorders silk screeners color copiers laser printers inkjet printers and even monitors that function as final output devices. The diversity of input and output devices vastly complicates the approach of a closed workflow as previously discussed. Thus possible workflows may be associated with a many to many mapping of input devices to output devices.

The result is a potentially huge number of possible conversions from input devices to output devices. With an m input to n output workflow one may need m n different conversions from the input to the output. With the increasing diversity of input and output devices the task of providing desired color conversions from input to output can easily become unmanageable.

Color management is a solution for managing the different workflows that may be supported between different input device and output device combinations. Color management typically supports an intermediate representation of the desired colors. The intermediate representation is commonly referred as a profile connection space PCS which may be alternately referred as a working space. The function of the profile connection space is to serve as a hub for the plurality of device to device transformations. With such an approach the m n link problem is reduced to m n links in which only one link is needed for each device. Each link effectively describes the color reproduction behavior of a device. A link is commonly referred as a device profile. A device profile and the profile connection space are two of the four key components in a color management system.

As based upon current International Color Consortium ICC specifications the four basic components of a color management system are a profile connection space a set of profiles a color management module CMM and rendering intents. The profile connection space allows the color management system to give a color an unambiguous numerical value in CIE XYZ or CIE LAB color space that does not depend on the quirks of the plurality of devices being used to reproduce the color but instead defines the color as a person actually sees the color. Both CIE XYZ and CIE LAB are color spaces that are modeled as being device independent. A profile describes the relationship between a device s RGB red green and blue or CMYK control signals and the actual colors that the control signals produce. Specifically a profile defines the CIE XYZ or CIE LAB values that correspond to a given set of RGB or CMYK numbers. A color management module CMM is often called the engine of the color management system. The color management module is a piece of software that performs all of the calculations needed to convert the RGB or CMYK values. The color management module works with the color data that is contained in the profiles. Rendering intents includes four different rendering intents. Each type of rendering intent is a different way of dealing with out of gamut colors where the output device is not physically capable of reproducing the color that is present in the source space.

As a workflow becomes more complex color management becomes more important to the user for managing colors of an image file as the image file flows from input e.g. a scanner to output e.g. printer . A workflow utilizes four stages of color management that include defining color meaning normalizing color converting color and proofing. Defining the color meaning includes determining if a profile is embedded in the content and defining a profile if there is no embedded profile. The workflow can then proceed with normalizing color to a working space corresponding to a device independent color space or with converting the color representation of the image file directly to the destination space. If the color is normalized to a working space operations are performed in the working space e.g. the user modifying selected colors in the working space. A color management system may then build a transformation table from the source profile and the destination profile using the common values from the working space. Consequently the color management system can convert a source image to a destination image using the transformation table.

A substantial effort resources and money may be invested in an application that utilizes capabilities of color management supported by an operating system in which the application utilizes an application program interface API to utilize these capabilities. In order to be competitive in the marketplace and satisfy demands by users a color management system may be revised adding new capabilities that can be utilized by the application. However it is not typically desirable for the legacy application to support an advanced API set to access the new capabilities and enhancements if the application is already using a legacy API set for legacy capabilities and the advanced API set is not compliant with the legacy API set. Doing so would entail a large effort and cost in revising the application.

With the prior art color management solutions do not typically support legacy applications or solutions when a new version of a color management system with a corresponding new API set is introduced. The new version of the color management system may offer new capabilities enhancements and resolutions fixes to problems of the legacy version by altering and or embellishing the legacy API set or by replacing the legacy API set with an advanced API set. If that is the case the legacy application may not be compatible with the advanced API set and thus not compatible with the new version of the color management system. On the other hand it may be difficult and costly for the color management system to support both the legacy API set and the advanced API set considering development and maintenance issues. It would be an advancement in the art to provide compatibility of a legacy API with a new color management solution.

The present invention provides method and apparatus for supporting a legacy application programming interface API set between a component e.g. an application and a system e.g. a color management system . With new capabilities and enhancements being offered by the system the legacy API set supports both the new capabilities and enhancements as well as the legacy capabilities. Consequently updating and maintaining system software is facilitated because only the legacy API set need be supported rather than a plurality of API sets. Moreover a legacy application is able to interact with the system using the legacy API set.

With one aspect of the invention a color management system can support both a legacy application and an advanced application with the legacy API set. The color management system determines a format type for an object that is referenced by an API call. If the object is associated with a legacy format the API call is processed by a legacy processing module. If the object is associated with an advanced format the API call is processed by an advanced processing module.

With another aspect of the invention if a plurality of objects is associated with an API call and if the plurality of objects has mixed formats the color management system converts some of the objects so that the formats of the objects are consistent. The color management system then performs the requested operation with the objects having a consistent format.

With another aspect of the invention a common structure supports an object that may have either a legacy format or an advanced format rather than requiring separate structures to support a legacy format and an advanced format.

In the following description of the various embodiments reference is made to the accompanying drawings which form a part hereof and in which is shown by way of illustration various embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural and functional modifications may be made without departing from the scope of the present invention.

Definitions for the following terms are included to facilitate an understanding of the detailed description.

The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through an non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and wireless pointing device commonly referred to as a mouse trackball or touch pad. In an embodiment of the invention wireless pointing device may be implemented as a mouse with an optical sensor for detecting movement of the mouse. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . In wireless pointer communicates with user input interface over a wireless channel . Wireless channel utilizes an electromagnetic signal e.g. a radio frequency RF signal an infrared signal or a visible light signal. A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through a output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

A peripheral interface may interface to a video input device such as a scanner not shown or a digital camera where output peripheral interface may support a standardized interface including a universal serial bus USB interface. Color management which may be supported by operating system or by an application assists the user in obtaining a desired color conversion between computer devices. The computer devices are typically classified as input devices e.g. digital camera display devices e.g. monitor and output devices e.g. printer . Operation of color management is explained in greater detail in the following discussion.

ICC profile is typically represented in a binary format that assumes a black box approach. Consequently a user may conclude that ICC profile has significant shortcomings that may be addressed by other profile formats.

Virtual device model profile has several features that may be advantageous to a user. For example profile does not assume that the source profile space is equivalent to the destination profile space. The color appearance model corresponding to color appearance model segment and inverse color appearance model segment need not be proprietary and may utilize a CIE based color appearance model. Also profile may be more accessible by using a text format e.g. Extensible Markup Language XML rather than a binary format that is used by ICC profile . Virtual device model profile exemplifies an advanced profile format as referenced in the subsequent discussion.

ICM2 is built into Windows 98 and higher. ICM2 supports a legacy application program interface API set that has different API categories including 

Referring to legacy application and advanced application interact with API layer module to determine which processing module should process an API request. Both applications and send API requests to API layer module . While the structure and format of API call API return result API call and API return result are compliant with the legacy format advanced application can utilize capabilities and enhancements provided by advanced processing module . However legacy application can continue to utilize the legacy API set without any modifications. For example advanced application may utilize virtual device model profile to represent one or more the designated profiles in an API call. API adaptation layer module analyzes an object that is identified in an API call to determine if the object has a legacy format e.g. ICC profile or if the object has an advanced format e.g. virtual device model profile . The advanced format may be defined as a non legacy format. If the objects have a legacy format then legacy processing module processes the API call. If the objects have an advanced format then advanced processing module processes the API call.

If the objects of a set of objects that are identified by the API call have mixed formats i.e. one of the objects has a legacy format and another object has an advanced format the formats of some of the objects are converted so that the formats of all of the objects are consistent. As an example if the destination profile and the source profile have different formats where one profile has a legacy format and the other profile has an advanced format the format of the object having a legacy format is converted to an advanced format. In the embodiment API adaptation layer module utilizes the logic shown in Table 1 to determine format conversion. In other embodiments of the invention format conversion may be performed by other modules of a color management system. 

In the embodiment illustrated in Table 1 if any object in a set of objects is associated with the advanced format then any remaining object of the set having the legacy format is converted to the advanced format so that all the objects of the set have the advanced format after format conversion. Advanced module is subsequently invoked to process the API call.

In the embodiment as illustrated in Table 1 if all objects in the set of objects are associated with the legacy format then none of the objects are converted to the advanced format. Legacy module is subsequently invoked to process the API call. However in another embodiment a format override indicator may be configured corresponding to a only advanced format through a policy so that all objects having a legacy format are converted to the advanced format regardless whether any object of the set of objects is associated with the advanced format. Moreover the policy may support a plurality of mode selections for configuring the format override indicator corresponding to a prefer advanced format so that all legacy objects are not unconditionally converted to an advanced format i.e. as described above the legacy objects are converted to the advanced format only if at least one object has the advanced format. The embodiment may support other mode selections e.g. a only legacy format and a prefer legacy format . Table 2 illustrates operation in accordance with these mode selections.

While the embodiment converts an object from a legacy format to an advanced format other embodiments may convert the object from an advanced format to a legacy format. However legacy software is typically frozen while updates are incorporated in non legacy software. That being the case it may be advantageous to convert a legacy format to an advanced format as shown in Table 1 in order to avoid a modification of the legacy software.

While the embodiments illustrated in support an application program interface between a component and a color management system the invention may support system enhancements with a legacy API set for other types of systems. Consequently a legacy API can support enhancements and new capabilities of the system while enabling a legacy application to continue interacting with the system without modifications to the legacy application.

A programming interface or more simply interface may be viewed as any mechanism process protocol for enabling one or more segment s of code to communicate with or access the functionality provided by one or more other segment s of code. Alternatively a programming interface may be viewed as one or more mechanism s method s function call s module s object s etc. of a component of a system capable of communicative coupling to one or more mechanism s method s function call s module s etc. of other component s . The term segment of code in the preceding sentence is intended to include one or more instructions or lines of code and includes e.g. code modules objects subroutines functions and so on regardless of the terminology applied or whether the code segments are separately compiled or whether the code segments are provided as source intermediate or object code whether the code segments are utilized in a runtime system or process or whether they are located on the same or different machines or distributed across multiple machines or whether the functionality represented by the segments of code are implemented wholly in software wholly in hardware or a combination of hardware and software.

Notionally a programming interface may be viewed generically as shown in or . illustrates an interface Interface as a conduit through which first and second code segments communicate. illustrates an interface as comprising interface objects I and I which may or may not be part of the first and second code segments which enable first and second code segments of a system to communicate via medium M. In the view of one may consider interface objects I and I as separate interfaces of the same system and one may also consider that objects I and I plus medium M comprise the interface. Although show bidirectional flow and interfaces on each side of the flow certain implementations may only have information flow in one direction or no information flow as described below or may only have an interface object on one side. By way of example and not limitation terms such as application programming interface API entry point method function subroutine remote procedure call and component object model COM interface are encompassed within the definition of programming interface.

Aspects of such a programming interface may include the method whereby the first code segment transmits information where information is used in its broadest sense and includes data commands requests etc. to the second code segment the method whereby the second code segment receives the information and the structure sequence syntax organization schema timing and content of the information. In this regard the underlying transport medium itself may be unimportant to the operation of the interface whether the medium be wired or wireless or a combination of both as long as the information is transported in the manner defined by the interface. In certain situations information may not be passed in one or both directions in the conventional sense as the information transfer may be either via another mechanism e.g. information placed in a buffer file etc. separate from information flow between the code segments or non existent as when one code segment simply accesses functionality performed by a second code segment. Any or all of these aspects may be important in a given situation e.g. depending on whether the code segments are part of a system in a loosely coupled or tightly coupled configuration and so this list should be considered illustrative and non limiting.

This notion of a programming interface is known to those skilled in the art and is clear from the foregoing detailed description of the invention. There are however other ways to implement a programming interface and unless expressly excluded these too are intended to be encompassed by the claims set forth at the end of this specification. Such other ways may appear to be more sophisticated or complex than the simplistic view of but they nonetheless perform a similar function to accomplish the same overall result. We will now briefly describe some illustrative alternative implementations of a programming interface.

A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown some interfaces can be described in terms of divisible sets of functionality. Thus the interface functionality of may be factored to achieve the same result just as one may mathematically provide 24 or 2 times 2 time 3 times 2. Accordingly as illustrated in the function provided by interface Interface may be subdivided to convert the communications of the interface into multiple interfaces InterfaceA Interface B Interface C etc. while achieving the same result. As illustrated in the function provided by interface I may be subdivided into multiple interfaces I I I etc. while achieving the same result. Similarly interface I of the second code segment which receives information from the first code segment may be factored into multiple interfaces I I I etc. When factoring the number of interfaces included with the 1code segment need not match the number of interfaces included with the 2code segment. In either of the cases of the functional spirit of interfaces Interface and I remain the same as with respectively. The factoring of interfaces may also follow associative commutative and other mathematical properties such that the factoring may be difficult to recognize. For instance ordering of operations may be unimportant and consequently a function carried out by an interface may be carried out well in advance of reaching the interface by another piece of code or interface or performed by a separate component of the system. Moreover one of ordinary skill in the programming arts can appreciate that there are a variety of ways of making different function calls that achieve the same result.

In some cases it may be possible to ignore add or redefine certain aspects e.g. parameters of a programming interface while still accomplishing the intended result. This is illustrated in . For example assume interface Interface of includes a function call Square input precision output a call that includes three parameters input precision and output and which is issued from the 1Code Segment to the 2Code Segment. If the middle parameter precision is of no concern in a given scenario as shown in it could just as well be ignored or even replaced with a meaningless in this situation parameter. One may also add an additional parameter of no concern. In either event the functionality of square can be achieved so long as output is returned after input is squared by the second code segment. Precision may very well be a meaningful parameter to some downstream or other portion of the computing system however once it is recognized that precision is not necessary for the narrow purpose of calculating the square it may be replaced or ignored. For example instead of passing a valid precision value a meaningless value such as a birth date could be passed without adversely affecting the result. Similarly as shown in interface I is replaced by interface I redefined to ignore or add parameters to the interface. Interface I may similarly be redefined as interface I redefined to ignore unnecessary parameters or parameters that may be processed elsewhere. The point here is that in some cases a programming interface may include aspects such as parameters that are not needed for some purpose and so they may be ignored or redefined or processed elsewhere for other purposes.

It may also be feasible to merge some or all of the functionality of two separate code modules such that the interface between them changes form. For example the functionality of may be converted to the functionality of respectively. In the previous 1and 2Code Segments of are merged into a module containing both of them. In this case the code segments may still be communicating with each other but the interface may be adapted to a form which is more suitable to the single module. Thus for example formal Call and Return statements may no longer be necessary but similar processing or response s pursuant to interface Interface may still be in effect. Similarly shown in part or all of interface I from may be written inline into interface I to form interface I . As illustrated interface I is divided into Iand I and interface portion Ihas been coded in line with interface I to form interface I . For a concrete example consider that the interface I from performs a function call square input output which is received by interface I which after processing the value passed with input to square it by the second code segment passes back the squared result with output. In such a case the processing performed by the second code segment squaring input can be performed by the first code segment without a call to the interface.

A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown in one or more piece s of middleware Divorce Interface s since they divorce functionality and or interface functions from the original interface are provided to convert the communications on the first interface Interface to conform them to a different interface in this case interfaces InterfaceA InterfaceB and InterfaceC. This might be done e.g. where there is an installed base of applications designed to communicate with say an operating system in accordance with an Interface protocol but then the operating system is changed to use a different interface in this case interfaces InterfaceA InterfaceB and InterfaceC. The point is that the original interface used by the 2Code Segment is changed such that it is no longer compatible with the interface used by the 1Code Segment and so an intermediary is used to make the old and new interfaces compatible. Similarly as shown in a third code segment can be introduced with divorce interface DI to receive the communications from interface I and with divorce interface DI to transmit the interface functionality to for example interfaces Iand I redesigned to work with DI but to provide the same functional result. Similarly DI and DI may work together to translate the functionality of interfaces I and I of to a new operating system while providing the same or similar functional result.

Yet another possible variant is to dynamically rewrite the code to replace the interface functionality with something else but which achieves the same overall result. For example there may be a system in which a code segment presented in an intermediate language e.g. Microsoft IL Java ByteCode etc. is provided to a Just in Time JIT compiler or interpreter in an execution environment such as that provided by the Net framework the Java runtime environment or other similar runtime type environments . The JIT compiler may be written so as to dynamically convert the communications from the 1Code Segment to the 2Code Segment i.e. to conform them to a different interface as may be required by the 2Code Segment either the original or a different 2Code Segment . This is depicted in . As can be seen in this approach is similar to the Divorce scenario described above. It might be done e.g. where an installed base of applications are designed to communicate with an operating system in accordance with an Interface protocol but then the operating system is changed to use a different interface. The JIT Compiler could be used to conform the communications on the fly from the installed base applications to the new interface of the operating system. As depicted in this approach of dynamically rewriting the interface s may be applied to dynamically factor or otherwise alter the interface s as well.

It is also noted that the above described scenarios for achieving the same or similar result as an interface via alternative embodiments may also be combined in various ways serially and or in parallel or with other intervening code. Thus the alternative embodiments presented above are not mutually exclusive and may be mixed matched and combined to produce the same or equivalent scenarios to the generic scenarios presented in . It is also noted that as with most programming constructs there are other similar ways of achieving the same or similar functionality of an interface which may not be described herein but nonetheless are represented by the spirit and scope of the invention i.e. it is noted that it is at least partly the functionality represented by and the advantageous results enabled by an interface that underlie the value of an interface.

While the invention has been described with respect to specific examples including presently preferred modes of carrying out the invention those skilled in the art will appreciate that there are numerous variations and permutations of the above described systems and techniques that fall within the spirit and scope of the invention as set forth in the appended claims.

