---

title: Detecting missing elements in a storage area network with multiple sources of information
abstract: A detectibility service for a storage infrastructure manager (SIM) operating on a storage area network (SAN) is disclosed directed to addressing a situation where there may be multiple sources of duplicate or contradictory information to the SIM about the presence and condition of an element in the SAN. The service can account for both authoritative as well as nonauthoritative sources of information in a SAN, which participate in the discovery process scanning for SAN elements. Both authoritative and nonauthoritative sources of information can be used to report a given SAN element during a probe, taking advantage of the more efficient processing of information from authoritative sources to override information from nonauthoritative sources regardless of the order in which the various scans may occur.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07725555&OS=07725555&RS=07725555
owner: International Business Machines Corporation
number: 07725555
owner_city: Armonk
owner_country: US
publication_date: 20060906
---
This invention relates to networked storage devices in a computer system. Particularly this invention relates to managing such storage devices in a storage area network SAN .

A typical storage area network SAN comprises multiple entities such as hosts storage subsystems host bus adapters storage volumes and ports. In addition a connection between two devices is a relationship that may be tracked. One example where such tracking is valuable is demonstrated in the case where three objects exist in a SAN and two of those objects can see the third but they cannot see each other tracking relationships reveals this whereas tracking only entities would not. The state of these various entities and relationships may often be in flux. At any moment entities get created deleted and become unreachable. In addition the attributes of the entities may change e.g. in response to events occurring in the SAN.

Storage infrastructure management software may be used to manage such complex SANs comprising equipment from multiple vendors. One important aspect of such management software is the process of running discovery tasks or probes to discover the entities in the SAN and the relationships associations between those entities. The various entities and relationships within a SAN may be collectively referenced as elements hereafter. Another key aspect of such management software is the use of a configuration database to store information about the discovered entities and relationships.

One feature such a storage infrastructure manager SIM must provide is health and fault management. One aspect of such health and fault management is to alert the administrator e.g. via standardized events such as SNMP traps messages to a pager or highlighting of the element in the SIM GUI when elements in the SAN appear to be missing . An element may be declared to be missing under a variety of scenarios. For example an element is missing if it is not visible to the SIM through any of its SAN probing mechanisms. An element is also considered missing if the SIM is informed via mechanisms such as SNMP alerts or CIM indications that it has in place to listen for events from SAN elements that an entity e.g. a storage volume or relationship e.g. a link between two ports has been removed. An element is also missing if it is actually removed via the control interface or application programming interface API of the SIM itself.

Once a baseline discovery process of all elements in a SAN has been completed and the configuration database has been populated it is relatively easy to process the missing element scenarios which either involve the SIM being informed about the event or the removal occurring via use of the SIM s control interfaces. For example when an event is received indicating that some element is no longer present in the SAN e.g. a CIM indication informs the SIM that a storage volume has been deleted or when the deletion occurs through the SIM s user interface or API itself the configuration database can be updated in response and an event can be generated to alert the administrator at the same time.

However the scenario where an element simply becomes invisible to the SIM is more complex because there can be multiple sources of information that assist the SIM s discovery process and some types of information sources can provide duplicate or contradictory information about whether an element is visible to the SIM or not. Such informational inconsistencies must be reconciled by the SIM software before a conclusion about the visibility of the element can be reached. This problem is particularly significant because the disappearing device may not send a notice that it is going to disappear. This problem may be referred to as the detectability problem. 

Ideally a SIM once installed would perform a full discovery of all elements on the SAN populate its configuration database and from then on keep the database up to date regarding SAN elements that are no longer visible to it via the SIM either being informed directly or via the removal of the elements through the SIM API. However there are two practical issues that cause less than ideal conditions. Firstly not all operations to manipulate the SAN elements e.g. to delete a storage volume are performed through the SIM interface because other means such as individual element managers i.e. management software specialized for a specific storage subsystem can be used instead bypassing the SIM. Secondly some kinds of physical re configuration cannot be performed by management software such as removing the cable between a host s fibre channel port and that of a switch. If all systems on a SAN diligently generated events for all configuration changes that occur e.g. including physically connecting two ports together or removing such a link then ideally the SIM software could listen for such events and update its database to reflect detectability status in real time. But this is not always the case and leads to the second practical issue not all systems on a SAN currently generate such events correctly. This is especially true in scenarios where the event subscriber i.e. the SIM software is not operational when the event is generated. Support for features such as persistent CIM indications would help in this area but such implementations are not widely available and equivalent robust event delivery mechanisms do not typically exist in the SNMP world. In view of this it is evident that there is a need to address the detectibility problem using additional mechanisms.

A subset of the detectibility problem has been addressed before in some prior art namely products such as the Tivoli SAN Manager and the IBM TotalStorage Productivity Center v2.x. However the sources of information performing discovery of SAN elements on behalf of the SIM were presumed to be nonauthoritative and thus the logic for inferring detectability was focused on achieving consensus between distinct sources of information that could provide either duplicate or contradictory information. Other systems and methods have also been developed to manage networked storage devices.

However there is still a need in the art for systems and methods to detect missing elements in a storage area network with multiple sources of information. Particularly there is a need in the art for such systems and method to efficiently resolve duplicate or contradictory information from distinct sources. These and other needs are met by the present invention as detailed hereafter.

Embodiments of the present invention are directed to addressing the detectability problem described above. The problem may be addressed through a detectability service. Embodiments of the invention may employ a mechanism to address the detectability problem by accounting for both authoritative as well as nonauthoritative sources of information defined hereafter in a SAN which participate in the discovery process. Embodiments of the invention can provide a process for handling discovery that is more efficient in terms of both space required in the database and time to execute database queries to reach a conclusion about detectability when there are authoritative sources of information providing input to the discovery process. Further embodiments of the invention can handle situations where there are both authoritative and nonauthoritative sources of information that report a given SAN element during a probe taking advantage of the more efficient processing of information from authoritative sources to override information from nonauthoritative sources regardless of the order in which the various scans may occur.

A typical embodiment of the invention comprises a computer program embodied on a computer readable medium including program instructions for gathering information about one or more storage area network SAN components using a discovery process involving scanning one or more data sources for a storage infrastructure manager SIM program instructions for storing the information in a database and program instructions for analyzing the information from the discovery process to infer which of the one or more SAN components are currently detectable to the SIM where each of the one or more sources of the information are classified as either only an authoritative source or only a nonauthoritative source and the information from any authoritative source is prioritized over the information from any nonauthoritative source. Analyzing the information from the discovery process may be performed by a detectability service of the SIM.

In further embodiments processing of detectability information from any nonauthoritative source includes consensus determination such that a SAN component is only identified as missing when each of the one or more nonauthoritative sources of the information reports the SAN component as missing during the most recent scan. The information reported by authoritative sources is prioritized over that reported by nonauthoritative sources in that if an authoritative source reports a SAN element as missing the element is marked as such even if one or more nonauthoritative sources have reported it as being visible in the most recent scan.

Typically one or more management agents may be used to manage the one or more SAN components which communicate the information about those SAN components to the SIM. In addition the information about the one or more SAN components may be dynamically determined and persisted in the database e.g. in one or more tables in a relational database. The SIM may use one or more database mappers for updating the database with the information from the one or more SAN components the job of the mappers being to isolate the information reported by the discovery process see below from the schema of the underlying database where the discovery results are stored.

Further embodiments of the invention may include a discovery engine operating within the SIM. The discovery engine includes one or more scanners for probing one or more storage area network SAN components during the discovery process and receiving the information one or more parsers for parsing the information received from the one or more scanners and one or more processors for communicating the parsed information through one or more database mappers to store the parsed information in a database. The information that is reported by each of the one or more scanners may be either authoritative or nonauthoritative but not both. Each of the one or more scanners is either an in band scanner or an out of band scanner.

Similarly a typical method embodiment of the invention comprises the steps of gathering information about one or more SAN components using a discovery process by probing one or more data sources storing the information in a database and analyzing the information from the discovery process to infer which of the one or more SAN components are currently detectable to the SIM where each of the one or more sources of the information are each classified as either only an authoritative source or only a nonauthoritative source and the information from any authoritative source is prioritized over the information from any nonauthoritative source. The method embodiment of the invention may be further modified consistent with the computer program or system embodiments described herein.

The present invention is directed to systems and methods for detecting missing elements in a storage area network with multiple sources of information. Embodiments of the invention can provide a mechanism to address the detectability problem by accounting for both authoritative as well as nonauthoritative sources of information in a SAN which participate in the discovery process providing a process for handling discovery that is thereby more efficient in terms of both space and time when there are authoritative sources of information providing input to the discovery process handling the case where there can be both authoritative and non authoritative sources of information that report a given SAN element during a probe and taking advantage of the more efficient processing of information from authoritative sources to override information form non authoritative sources regardless of the order in which the various scans may occur. Embodiments of the invention may also perform a process of providing the key components involved in determining detectability using characterizations of scanners used to probe systems defining a missing element processing of scanner results to identify missing elements providing inter component flows for determining detectability of elements providing database changes for detectability and providing logic to determine detectability.

An important innovation of the invention is distinguishing between nonauthoritative and authoritative sources of information regarding SAN elements and applying that distinction to detection processing. Nonauthoritative sources can define something as missing only if all of them report it as missing in their most recent scan this is a consensus requirement for nonauthoritative sources. On the other hand any authoritative source can report an element as missing and the SIM will accept that as the truth even if one or more nonauthoritative sources have reported that element as being visible during their last scan. It is this ability to prioritize the information reported by authoritative sources over nonauthoritative sources so that we do not have to wait for all nonauthoritative sources to report that an element is missing whenever they report the information in the future which leads to the enhanced efficiency of embodiments of the invention.

Further there are some key components of the SIM that participate in the process. For example scanners which are used to probe or scan various SAN components A C by communicating with management agents A B for those SAN components A C. A scanner reports a SAN component s internal components relationships between those components and optionally the relationship of the SAN component and its subcomponents to other entities on the SAN. Scanners can be characterized by how they are implemented either in band or out of band and also by the nature of the information they report from the probe of a system namely whether the information is authoritative or nonauthoritative. This is described in more detail hereafter. Note that a scanner may represent software that is part of the SIM itself or for in band scanners software that executes on a separate host server and communicates the results of the scan to the SIM over the network. In addition parsers parse the results of probes returned by scanners . Throughout this description it may be assumed that the result of a probe can be represented as an XML stream whose structure could conform to a standard format e.g. CIM XML or a proprietary format when no standards exist. An example of the latter is the probe result that may be returned by an in band fabric scanner that probes a SAN by communicating with a fibre channel switch using the Fibre Channel Generic Services 3 protocol FC GS 3 . Next processors interact with parsers and communicate with database mappers to store probe results in a database . Scanners parsers and processors are subcomponents of the discovery engine component of the SIM . Database mappers and a mapper manager can provide an isolation layer between the discovery engine and the structure of the database i.e. the database tables used to store the information resulting from a probe namely the entities and associations reported by a scanner. Finally a detectability service is a component of the SIM that can interact with the processors as well as the various database mappers to implement the detectability logic. The SIM may be implemented as software operating across a distributed computing system an example of which is described in the next section.

Generally the computer operates under control of an operating system e.g. z OS OS 2 LINUX UNIX WINDOWS MAC OS stored in the memory and interfaces with the user to accept inputs and commands and to present results for example through a graphical user interface GUI module . Although the GUI module is depicted as a separate module the instructions performing the GUI functions can be resident or distributed in the operating system the computer program or implemented with special purpose memory and processors. The computer also implements a compiler which allows an application program written in a programming language such as COBOL PL 1 C C JAVA ADA BASIC VISUAL BASIC or any other programming language to be translated into code that is readable by the processor . After completion the computer program accesses and manipulates data stored in the memory of the computer using the relationships and logic that was generated using the compiler . The computer also optionally comprises an external data communication device such as a modem satellite link ethernet card wireless link or other device for communicating with other computers e.g. via the Internet or other network.

In one embodiment instructions implementing the operating system the computer program and the compiler are tangibly embodied in a computer readable medium e.g. data storage device which may include one or more fixed or removable data storage devices such as a zip drive floppy disc hard drive DVD CD rom digital tape etc. which are generically represented as the floppy disc . Further the operating system and the computer program comprise instructions which when read and executed by the computer cause the computer to perform the steps necessary to implement and or use the present invention. Computer program and or operating system instructions may also be tangibly embodied in the memory and or transmitted through or accessed by the data communication device . As such the terms article of manufacture program storage device and computer program product as may be used herein are intended to encompass a computer program accessible and or operable from any computer readable device or media.

Embodiments of the present invention are generally directed to any software application program that includes functions for managing a distributed computer system comprising a network of computing devices particularly in a SAN. The program may operate within a single computer or as part of a distributed computer system comprising a network of computing devices. The network may encompass one or more computers connected via a local area network and or Internet connection which may be public or secure e.g. through a VPN connection or via a fibre channel Storage Area Network or other known network types as will be understood by those skilled in the art. Note that a fibre channel SAN is typically used only for computers to communicate with storage systems and not with each other. 

Embodiments of the invention may operate within the described hardware environment to manage detecting the presence and status of the SAN components such as the networked storage devices A C and their relationships to each other and other hardware. In a typical embodiment the information regarding the SAN components is then applied by client computers servers and or the mainframe computer to efficiently utilize the SAN components. Primary software such as at least portions of the storage infrastructure manager may function as part of the resource manager within the computer .

Those skilled in the art will recognize that many modifications may be made to this hardware environment without departing from the scope of the present invention. For example those skilled in the art will recognize that any combination of the above components or any number of different components peripherals and other devices may be used with the present invention meeting the functional requirements to support and implement various embodiments of the invention described herein.

Referring back to a scanner may be characterized by how it is implemented. Specifically a scanner can use in band techniques which use specific storage networking protocols to communicate with a SAN component. Host based scanners that use fibre channel e.g. FC GS 3 commands to query fibre channel switches about elements on the fabric that the switch resides in are one type of in band scanner. Similarly host based scanners that use SCSI commands to query storage subsystems about SCSI logical units LUs or volumes that they export are another type of in band scanner.

Scanners can also use out of band techniques to communicate with a system. Generally all such out of band scanners are based on the use of TCP IP. For example scanners that use SNMP MIB queries to probe switches on a fibre channel SAN are one type of out of band scanner. Scanners that use vendor specific proprietary APIs to query fibre channel switches about elements on a SAN are another. A CIM client that queries a CIM Object Manager CIMOM which manages a system on the SAN to get information about the subcomponents of that system is another example of an out of band scanner. A typical SIM may employ scanners of one or more of the foregoing in band and out of band types to perform discovery to gather information about the SAN .

Another orthogonal way to characterize scanners is by the nature of the information they report in a probe or scan. The two such characterizations of a scanner are authoritative and nonauthoritative. A scanner may be considered authoritative if the SIM that processes the probe results can be certain that the element is no longer present if an element the scanner reported in the previous probe is not reported in the latest probe the information from an authoritative scanner is definitive. A scanner is considered to be nonauthoritative if this is not the case the information from a nonauthoritative scanner is uncertain. Thus if a scanner is nonauthoritative absence of an element in the current probe which was reported by the same scanner in the previous probe does not imply that the element is actually missing from the SAN. In the context of the detectability service the authoritative versus nonauthoritative characterization is critical because it determines how the detectability service processes the information reported by a scanner.

One example of an authoritative scanner is a CIM client that communicates with a subsystem CIMOM to gather information about the internal subcomponents of the storage subsystem such as the volumes SCSI LUs ports storage pools physical disk drives etc. Even if multiple proxy CIMOMs can communicate with a given storage subsystem the CIM client communicates with exactly one of them to probe the subsystem in question and it would query each CIMOM in exactly the same manner using standardized APIs based on standardized object models . The assumption here is that all the CIMOMs in the network support the same version of the standard and if that is not the case the CIM client would pick the CIMOMs supporting the most recent version. Therefore when a particular CIMOM no longer reports a subcomponent of a storage subsystem that is internal to that subsystem which was reported earlier e.g. a storage volume reported as a SCSI Logical Unit or LU the SIM that processes the probe result can be certain that the subcomponent is no longer present in the subsystem.

In the context of the above characterizations of scanners it is also important to define what it means for a SAN component or element to be missing. An element is deemed to be missing if no scanner can detect the element when it probes a system. The element itself might be still present in the SAN. However if the SIM cannot detect the element then it will still declare the element to be missing and generate alerts and or display the element s health status accordingly via its various interfaces e.g. Graphical User Interface or GUI . For example a storage subsystem can be present in the SAN and be turned on and yet still appear to be missing to the SIM if any of the following conditions are true. First no proxy CIMOM is active or no active CIMOM is able to communicate with the storage subsystem. Second no host based scanners are installed in hosts that have fibre channel attachments to a fabric that the subsystem is also attached to. Third an error has occurred in the connection to the network. For example this could be either a SIM connection problem or a device connection problem.

The basic characterization of a scanner as an authoritative or nonauthoritative source of information about an element which it reports in a probe is key to the process of determining whether the element is visible to the SIM. When an element is only reported by authoritative scanners and one instance of such a scanner does not report an element in a probe that it reported in an earlier probe then that element can be immediately identified as being missing. An example of such an element is a SCSI LU storage volume reported by storage subsystem CIMOMs. Also if an element is only reported by nonauthoritative scanners and one instance of such a scanner does not report an element in a probe that it reported in an earlier probe then a consensus determining algorithm must be executed to analyze what other nonauthoritative scanners reported in their most recent probes regarding the visibility of that element. The element can be marked missing only if all nonauthoritative scanners have not reported that element in their most recent probes. An example of such an element is a fibre channel zone defined in a fabric. Finally if an element is reported by both authoritative and nonauthoritative sources then the probe results of each type of scanner is processed according to the information source as outlined above. However the authoritative scanner results override the probe results reported earlier by nonauthoritative scanners. The process described hereafter accounts for that possibility. An example of such an element is a storage subsystem s fibre channel ports that attach to a fabric these are reported by both subsystem CIMOMs as authoritative sources and by in band fabric scanners which are nonauthoritative sources.

After a scanner probes a system and produces the results e.g. in XML form a matching parser component parses the output and a processor component handles the population of the configuration database based on the parsed result. For each XML tag that corresponds to an element that must be recorded in the configuration database the processor calls the mapper manager to access a database mapper instance that can persist information about that element in the database. A database mapper encodes domain knowledge regarding which database tables to update to persist information about an element. It in turn calls methods of classes that hide details of the database schema from the higher layers of the SIM including the mappers .

The main interactions with the detectability service may occur between the processor component that processes the results of a probe and the database mappers that update the database. The discovery process informs the detectability service about every probe as well as the types of information discovered during each probe. The detectability service then dynamically processes each such type of information as well as any types of information discovered during similar previous scans and analyzes this configuration information for data that refers to stale or disappeared entities. These entities can then be processed in an appropriate way e.g flagged as missing removed from the database and hence from any display views and so on. For example the processor component may identify the boundary of a probe by invoking a startDiscovery method of the detectability service to inform it when DB population or update is about to begin following a probe and later by invoking the stopDiscovery method of the service to indicate when DB population or update has ended i.e. processing of the result of a probe is complete. In addition each database mapper which updates a database table can invoke the tableUpdated method of the detectability service to inform it that a database table has been updated during the processing of a probe. A scan ID that encodes information about the type of scanner e.g. a storage subsystem CIMOM or an in band fabric scanner and also uniquely identifies the scanner instance may be passed in all of the above method calls to correlate the processing that is associated with a given probe.

In the configuration database of the SIM which is used to store information about elements on the SAN several data model enhancements may be introduced in support of an embodiment of the detectability service.

First a means for representing a missing element should be provided. This can be accomplished using an integer valued field boolean or any other suitable variable type. In one example an integer valued field e.g. labeled DETECTABLE may be introduced in each table representing an element an entity or a relationship between multiple entities whose detectable status is to be determined and represented after a probe of a system. A value of 0 indicates that the element is not visible to the SIM and 1 indicates that it is. This field can be used for two purposes. First if the DETECTABLE field is set to 0 then the GUI can display the element s missing status appropriately. Second even if the GUI is not interested in displaying the missing status the presence of a DETECTABLE field plus its value being set to 0 can be used to delete database records tuples that correspond to elements that are no longer visible in a lazy fashion. Note that if an element s missing status is not of interest for generating alerts or displaying visually to the administrator then the corresponding database tuple can be deleted as soon as the detectability service logic identifies it as missing.

Next a metadata table may be used to track elements reported by a type of scanner. It should be noted that the data may be stored in any format. In general a given type of scanner e.g. a CIM client requesting a storage subsystem CIMOM to perform a full scan of a storage subsystem will report various types of elements. If a subsequent run of the same scanner does not report an element of a certain type then that information can be used to infer the fact that all instances of that element that were previously reported by that scanner are no longer visible to that scanner. It is possible to statically represent e.g. in SIM code all element types and the corresponding database tables used to represent them that can be reported by a given type of scanner. However it is more flexible to use a method that dynamically determines the types of information that were processed during a given scan or probe by tracking the historical data about similar previous scans since that does not require error prone static configuration definitions. For example one embodiment may introduce a detectability service to dynamically determine that information and to persist it across multiple activations of the SIM by learning that information during multiple runs of a given type of scanner and persisting it in a metadata table. That table e.g. SCANTYPE2TABLE may include fields identifying the type of scan e.g. field name SCAN TYPE as well as the corresponding table name representing the element and e.g. field name TABLE NAME for example.

In addition embodiments of the invention may use metadata to track detectability of elements reported by at least one authoritative scanner. It is important for the detectability service to determine what data is stale. Timestamp based processing may be used to accomplish this. For example if an element is reported by at least one authoritative scanner then a database column e.g. called UPDATE TIMESTAMP may be introduced in the corresponding database table that contains information about that element. This field type is a timestamp set by the database mapper whenever it inserts or updates a tuple corresponding to the element it represents. The field is used by the detectability service to infer visibility of the element during the processing of the stopDiscovery method described hereafter.

Metadata may also be used to track detectability of elements reported by at least one nonauthoritative scanner with embodiments of the invention. Historical discovery information needs to be retained for every entity that is reported by a non authoritative source. In addition every time a non authoritative source discovers an entity a consensus algorithm consults the discovery history of this entity to analyze whether it is still detectable or not. For example for each element that is reported by at least one nonauthoritative scanner one may introduce a database table e.g called ELEMENT PROBE STATUS to represent information about the visibility of various database elements to each scanner that reports it in a probe. This table may be used to perform a consensus based determination of detectability of elements for nonauthoritative sources of information. The following fields may be used in the table in an exemplary embodiment. ELEMENT ID uniquely identifies a tuple representing an element in a database table. ELEMENT TYPE identifies the database table where the above tuple resides. SCANNER ID identifies the scanner instance that reported the element in a probe. UPDATE TIMESTAMP identifies the time when the above scanner last reported that element in a probe. A FOUND field indicates that the element was not found in the most recent probe performed by this scanner if it is set to 0. If FOUND is set to 1 it indicates the reverse.

Next in operation if the scanner is authoritative and the element information indicates that the element is detected then the corresponding tuple in database table for the corresponding element type is updated or created if it does not exist with a timestamp indicating when the element was last confirmed as visible . In operation if the scanner is non authoritative and the element information indicates the element is detected then the tuple in the table for consensus based detectability determination that represents the element being detected by that scanner is updated or the tuple is created if it does not exist . The consensus based detectability determination table includes a tuple for each non authoritative scanner reporting status of the particular element. A consensus determining algorithm can analyze this table to render a status determination for the element as previously described. In addition the SAN element types that can be reported by each scanner type can be tracked in another table that may be dynamically updated. For example operation may be performed using the SCANTYPE2TABLE table and associated logic in the tableUpdated method described hereafter. In operation when the probe is complete the contents of the database tables are analyzed to determine which SAN elements are missing. See pseudocode for stopDiscovery describing an example of programming logic for performing this.

The method may be implemented per pseudocode employed for startDiscovery stopDiscovery and tableUpdated programmed methods which are described hereafter. The core of the Detectability Service may be implemented in these methods. Some additional logic may also be required in each database mapper that updates a table representing an element whose detectability status has to be maintained.

For example the following additional processing needs to take place during updates made to a database table by a database mapper either to insert a tuple when a new element is reported in a probe or to update the tuple if an element already in the database is reported again. If the table has a DETECTABLE field it should be set to 1. If the table has an UPDATE TIMESTAMP field it should be set to the current time of the database server. These fields should be set even if the values of other fields of the tuple remain the same as reported in the latest probe.

In addition when the startDiscovery method is called the detectability service should start tracking the fact that database updates corresponding to the probe results returned by a new scan as represented by the scan ID passed to the method have begun. The timestamp of the start of the DB update may be recorded internally based on the current time on the database server.

The following example pseudocode describes the logic performed by the tableUpdated method when it is invoked by a database mapper after updating a database table.

This concludes the description including the preferred embodiments of the present invention. The foregoing description including the preferred embodiment of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible within the scope of the foregoing teachings. Additional variations of the present invention may be devised without departing from the inventive concept as set forth in the following claims.

