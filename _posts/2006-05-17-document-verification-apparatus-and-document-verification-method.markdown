---

title: Document verification apparatus and document verification method
abstract: A document verification apparatus includes a determining portion that determines whether a change that influences a verification result is made to at least one of an electronic document and a given condition, after it is verified whether or not the electronic document that has been input satisfies the given condition, and also includes an outputting portion that outputs the verification result after it is verified whether or not the electronic document satisfies the given condition, if it is determined that the change is made to at least one of the electronic document and the given condition, or outputs a result of a time when it is verified whether or not the electronic document satisfies the given condition most recently, if it is determined that the change is not made.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08112816&OS=08112816&RS=08112816
owner: Fuji Xerox Co., Ltd.
number: 08112816
owner_city: Tokyo
owner_country: JP
publication_date: 20060517
---
This application claims priority under 35 USC 119 from Japanese patent documents 2005 144611 and 2006 132999 the disclosure of which is incorporated by reference herein.

In establishing and operating a structured document processing system a heavy work load is applied by a verification process of a structured document to be processed. This causes a degradation of processing efficiency. To address this problem approaches have been taken as follows 1 speeding up of a verification processing program 2 elimination of the verification process and 3 transfer the verification process to the outside of the system. The verification process denotes a process for checking whether or not the structured document satisfies conditions expressed in a document schema or the like. The verification process applied to documents conforming to Extensible Markup Language XML a well known structured document is categorized into two processes. One verification process is a process of verifying that the document is a well formed XML document in other words a process of verifying whether the document is written on the basis of the syntax specified as XML standard. The other verification process is a process of verifying document validity in other words a process of determining whether or not the document satisfies conditions of the corresponding document schema. Document Type Definition DTD and W3C XML Schema are representative document schemata. W3C is the abbreviation of a standards body World Web Consortium.

It is to be noted that the above described approaches are not advanced enough to address the problem that the verification process increases processing workloads. The method of speeding up the verification processing program won t be able to deal with the document schema for business use to be introduced more in the future or a large scale document.

The present invention has been made in view of the above circumstances and provides a document verification apparatus a document verification method and a program product therefor by which processing efficiency is improved by alleviating workloads of a verification process implemented on an electronic document.

According to one aspect of the present invention there is provided a document verification apparatus including a determining portion that determines whether a change that influences a verification result is made to at least one of an electronic document and a given condition after it is verified whether or not the electronic document that has been input satisfies the given condition and an outputting portion that outputs the verification result after it is verified whether or not the electronic document satisfies the given condition if it is determined that the change is made to at least one of the electronic document and the given condition or outputs a result of a time when it is verified whether or not the electronic document satisfies the given condition most recently if it is determined that the change is not made.

A description will now be given with reference to the accompanying drawings of embodiments of the invention.

In an itinerary making service employed in the embodiments of the invention the travel agency receives an itinerary request from the user client and generates an itinerary while checking status of booking of the hotel the first car rental company the second car rental company the first airline the second airline and the railroad company and outputs the itinerary in a unified natural language requested by a user such as Japanese or English.

More specifically when the itinerary request is sent to the travel agency from the user client the travel agency respectively requests the railroad company for a railroad reservation the first airline for an airline reservation the second airline for an airline reservation the first car rental company for a rental car reservation the second car rental company for a rental car reservation the hotel for a room reservation and the translation service for translation. Then upon receiving tentative reservation results or translation results the travel agency arranges an itinerary plan and sends the itinerary plan to the user client . The document verification service is provided for implementing the validity verification process of the document.

The document verification service is not shown in the sequence chart in . However when the document itinerary request the itinerary draft or the itinerary is sent to the respective services the hotel the first car rental company the second car rental company the translation service the first airline the second airline the railroad company and the travel agency that are included in the itinerary making service the respective services of the sending destinations output the document to the document verification service to request for the validity verification process.

When the documents are sent and received between the services not only the documents but also a sent and received document that includes the above mentioned document are actually sent and received. shows the sent and received document used when the first car rental company requests the document verification service for the validity verification process.

Referring to the sent and received document is realized as a SOAP document and the document to be sent and received is represented as the content of a SOAP body Body element from the sixth line to the ninety second line . The contents of a SOAP header Header element from the third line to the fifth line include the information necessary for process implemented by the document verification service as a validatorID element to be described below in accordance with a first embodiment or a digest element to be described below in accordance with a second embodiment and later . The content of the validatorID element includes an identifier applied to the document that is the content of the SOAP body. The content of the digest element includes a digest value of the document. The value of a validity attribute represents a true value of the process result of a document which is the content of the SOAP body when the validity verification process is performed on the document most recently.

The service that has requested the document verification service for the validity verification process receives the sent and received document from the document verification service refers to the value of the validity attribute of the validatorID element or the digest element in the SOAP header and obtains the result of the validity verification process. If the validity verification process is successful a given process is performed on the document. If unsuccessful a give error process is performed.

A first embodiment of the invention will be described. The first embodiment is an exemplary embodiment where documents are compared. A consideration is given to a situation when the itinerary draft shown in is sent to the first car rental company from the travel agency and is then sent back to the travel agency without change. At this time the itinerary draft becomes a processing object of the validity verification process to be implemented by the document verification service when the itinerary draft is sent to the first car rental company and when the itinerary is sent back to the travel agency . In the document verification service employed in accordance with the present embodiment the validity verification process does not have to be implemented when the itinerary draft is sent back to the travel agency thereby realizing the promotion of efficiency in processing.

The sent and received document retaining portion retains the sent and received document that has been input applies an identifier to the document to be verified and also retains a copy of a verification result. The verified document retaining portion retains a set of a value obtained as a result that one directional function process is applied when an electronic document is verified most recently and the verification result in association with the electronic document that has been verified.

The verification process controlling portion controls the whole verification process and determines whether a change that influences the verification result is made to the electronic document or condition after it is verified whether such input electronic document satisfies a given condition. Here the given condition denotes a condition defined by a given schema if the electronic document is a structured document. If the verification process controlling portion determines that a change is made to the electronic document or to the condition the verification process controlling portion implements the verification to see whether the electronic document satisfies a given condition and the verification result is output. If it is determined that a change is not made the verification process controlling portion refers to the verified document retaining portion to output the result of the time when it is verified whether or not the electronic document satisfies the above described condition most recently as a verification result. Here if there is no most recent verification result the verification process controlling portion verifies to see whether the electronic document satisfies a give condition and then outputs the result.

The verification process controlling portion determines that a change that influences the verification result is made to the electronic document when the information obtained by performing a given calculation on the electronic document at the time when the electronic document is verified most recently is different from the information obtained by performing the given calculation on such input electronic document. The afore described given calculation includes a preprocessing. The preprocessing includes the canonicalization process. The canonicalization process is executed on the document canonicalization portion . The canonicalization process is a process that absorbs the fluctuations of description generated by the processes such as addition of space or linefeed mark conversion of character code or the like unrelated to the original functions of the individual programs. By implementing the canonicalization process on the document it is possible to produce the documents that should be considered identical to have an identical notation. This facilitates the determination of identity. The document verifying portion is provided for verifying the document. So when the electronic document is a structured document the document verifying portion verifies to learn whether the structured document satisfies the condition defined by a given document schema.

Next the process flow of the document verification service is described. exemplarily shows a flow chart of processes in the verification process controlling portion in accordance with the first embodiment of the invention. A subroutine CANONICALIZE and a subroutine VALIDATE are activated in the process shown in and are respectively executed by the document canonicalization portion and the document verifying portion .

When the sent and received document in is input into the document verification service the process in is activated. At step S the verification process controlling portion assigns the content of the SOAP body to a variable X. If the document identifier is not applied to the document retained as a value of the variable X at step S the document identifier is newly issued to assign to the document retained as a value of the variable X at step S and processing goes to step S. If the document identifier is applied to the document retained as a value of the variable X at step S the document having the document identifier of the document retained as a value of the variable X is obtained from the verified document retaining portion and is assigned to a variable Y at step S. Since the document in the SOAP body in has the identifier the document shown in having such identifier is obtainable form the verified document retaining portion . The document canonicalization portion executes the subroutine CANONICALIZE with the value of the variable X serving as an argument. The subroutine CANONICALIZE implements the canonicalization process.

The output from the subroutine CANONICALIZE and the variable Y are compared at step S. If they are identical the verification result corresponding to the document having the variable Y is applied to the sent and received document at step S and processing goes to step S. That is to say when the first car rental company sends a reply with the document shown in to the travel agency without changing the document shown in and the travel agency requests the document verification service to implement the verification process of the document shown in both documents are determined identical because the documents compared at step S are those shown in . Accordingly the subroutine VALIDATE is skipped. In this manner the validity verification process can be eliminated when the sent and received document is sent back to the travel agency by utilizing the document verification service employed in the present embodiment thereby improving the processing efficiency.

If the output from the subroutine CANONICALIZE and the variable Y are not identical at step S the document having the variable Y is deleted from the verified document retaining portion at step S. In as described above the output from the subroutine CANONICALIZE and the variable Y are not identical the document shown in is deleted from the verified document retaining portion at step S. At step S the document verifying portion performs the subroutine VALIDATE with the variable X serving as an argument. In the subroutine VALIDATE the validity verification process is implemented on the document schema of the document and the verification result is output as a truth value. At step S the document retained as a value of the variable X and the output from the subroutine VALIDATE are applied to the verified document retaining portion . In accordance with the present embodiment the subroutine VALIDATE returns true and the document shown in is added to the verified document retaining portion . At step S the output from the subroutine VALIDATE is applied to the sent and received document. At step S the sent and received document is sent back. In other words the document shown in is sent back to the first car rental company without change.

The canonicalization process for XML document includes Canonical XML and Exclusive XML Canonicalization. At step S any of the canonicalization process is executed on the basis of the specification thereof. The detailed processes executed in the canonicalization process are categorized into the processes implemented by an XML processor which is a program that reads the XML document and provides an access to the content and structure thereof and is specified in the XML standard and canonicalization specific processes. Such categorization processes respectively include zero or more processes described below.

The order relations of the document element attribute and name space declaration specified in Section 2.2 XML Canonicalization Standard are described as follows 

According to the present embodiment the validation verification process needs not to be executed when the sent and received document is sent back to the travel agency enabling the processing efficiency to be improved.

A second embodiment of the invention is described. The second embodiment is an exemplary embodiment in which the digest values are compared. In the second embodiment a consideration is given to a situation when the itinerary draft shown in is sent to the first car rental company from the travel agency and is then sent back to the travel agency without change. At this time the itinerary draft becomes a processing object of the validity verification process to be implemented by the document verification service when the itinerary draft is sent to the first car rental company and when the itinerary is sent back to the travel agency .

The verification process controlling portion determines that the change that influences the verification result has been made to the electronic document when the information obtained by performing a given calculation on the electronic document when the electronic document is verified most recently is different from the information obtained by performing a given calculation on the electronic document that has been input. The afore described given calculation includes one directional function process implemented by the digest value calculating portion in addition to the preprocessing described in the first embodiment.

At step S the sent and received document shown in is sent back to the first car rental company and processing ends. The first car rental company refers to the value of the validity attribute of the digest element in the fourth line in the sent and received document shown in and learns that the validity verification process has been completed successfully and then implements the process on the document. In accordance with the present embodiment the first car rental company sends the sent and received document shown in to the travel agency without change.

Indent from the line head represents a parent child relationship between nodes. For example the DOCUMENT node in the first line is a parent node of the ELEMENT node in the second line. The ELEMENT node in the second line has child nodes of the ATTRIBUTE nodes in the third fifth and seventh lines and the ELEMENT nodes in the ninth and fourteenth lines. shows descriptions of the respective nodes from the first line to the forty second line shown in .

At step S a subroutine GET DIGEST is implemented on the output. If there is no old digest value in the document at step S processing goes to step S. As a result of referring to the digest element in the fourth line in the SOAP header of the sent and received document on the sent and received document retaining portion see it is determined that an old digest value is applied to the document and processing goes to step S. It is determined whether the old digest value and a new digest value output from a subroutine GET DIGEST are identical. If the new digest value and the old digest value are identical output are a set of the old digest value and a result of a most recent result of a subroutine VALIDATE at step S.

If the new digest value and the old digest value are not identical at step S processing goes to step S. In the present embodiment the new digest value and the old digest value are not identical processing goes to step S and the subroutine VALIDATE is executed. In the subroutine VALIDATE the validity verification process is implemented on the document for the document schema the verification result is output in a truth value. In the present embodiment true is output as a result of the validity verification process. At step S a set of the following subroutine VALODATE and the new digest value are output and step S is completed.

The subroutine CANONOCALIZE at step S generates the DOM tree with the input document as an exemplary canonicalization process. The DOM tree is generated by the XML processor having a DOM interface. The process by the XML processor is also implemented here out of the canonicalization processes described in the first embodiment.

Meanwhile in the embodiments of the invention including the present embodiment when the DOM tree is generated with the input document the node to be deleted is the TEXT node having a sibling node of the ELEMENT node and the content thereof is made up with only a blank character such as space return line feed and tab. The XML standard allows a blank character to be inserted between the document elements included in the content that corresponds to the element content model in the document schema. However the blank character does not influence the verification process result. The content models defined by the document schema to be used in the embodiment of the invention including the present embodiment are all element content models. Accordingly even if the blank character is deleted in the TEXT node as stated above the verification process result is not influenced. Also according to the specification of DOM a DOM tree is composed of the relationship between the document element and the content and the relationship between the document element and the document element attribute is not included in the DOM tree. However according to exemplary embodiments of the invention including the present embodiment not only the former relationship but also the latter relationship are to be included in the DOM tree.

In the afore described processes the respective nodes of the DOM tree have to be ordered so as to apply the DOMNASH algorithm to the nodes of the DOM tree. Retrieval sequence such as depth first order algorithm or breadth first order algorithm may be employed.

The DOMHASH algorithm calculates the digest values of the nodes for text processing instruction document element attribute document attribute and document among the nodes that compose the DOM tree. When the DOMHASH algorithm is utilized in the exemplary embodiments of the invention the process of calculating the digest value of the node for processing an instruction is not implemented. As a hush function used in the DOMHASH algorithm MD5 algorithm SHA algorithm SHA1 algorithm or the like can be utilized. However SHA1 algorithm is employed in the present embodiment and in other exemplary embodiments of the present invention.

Upon receiving the sent and received document the travel agency requests the document verification service for the validity verification process. At this time the digest value output from the subroutine GET DIGEST at step S is shown as below.

At step S as a result of reference to the digest element in the fourth line in the SOAP header of the sent and received document see on the sent and received document retaining portion it is determined that the old digest value is applied to the document and processing goes to step S. At step S it is determined whether the old digest value and the digest value output from the subroutine GET DIGEST are identical. Here since both digest values are identical the old digest value and the result of the most recent subroutine VALIDATE are read out of the digest element and output at step S and step S is completed.

At step S the set of values output at step S are associated with the document that is the value of the variable X and are written into the SOAP header of the sent and received document. Here the set of the values output at step S are identical to the contents of the digest element in the SOAP header of the sent and received document on the sent and received document retaining portion and accordingly the sent and received document is not changed. At step S the sent and received document shown in is sent to the travel agency and processing ends.

As stated by using the document verification service employed in the present embodiment the digest values are used for comparing the current document and the document that was a target of the verification process most recently. This eliminates the necessity of implementing the validity verification process when the document is sent back to the travel agency and in addition eliminates the necessity of storing the document that was a target of the verification process most recently thereby reducing the memory area to be needed drastically. Also the digest value at the processing the verification most recently can be distributed with the document eliminating the costs to manage a document identifier.

In the exemplary embodiments of the invention it is based on the assumption that the document obtained as a result of executing the subroutine CANONICALIZE at the document verification service is not output from the document verification service . However the verification process with the use of W3C XML Schema in some cases includes the process of changing the document such as the process of reflecting a default value of the content of the document element that is defined in the document schema on the document element of the document. For example when the document shown in is verified by the document schema shown in the default value TBD is added as the value of the place element as shown in the twenty seventh line to the document shown as the verification result see .

When the changed document is used for another service it may be configured in such a manner that the document on the sent and received document retaining portion is exchanged with the document output from the subroutine CANONICALIZE and the digest value and the set of the true values are output the digest value being output as a result of executing the subroutine GET DIGEST on the document output from the subroutine CANONICALIZE the true value being an output from the subroutine VALIDATE. That is to say the verification process controlling portion outputs the verification result the changed document and the information obtained by performing a given calculation on such changed document.

A third embodiment of the invention is described. The third embodiment is an exemplary embodiment where the digest value is calculated from a text expression. The document verification service employed in the third embodiment is the similar as the document verification service employed in the second embodiment except the contents of the subroutine CANONICALIZE step S and those of the subroutine GET DIGEST step S . Also in the third embodiment a description will be given with reference to . The preprocessing performed by the verification process controlling portion is a process of generating a tree with the nodes that neither includes the document element nor the document element attribute from the string expression of the electronic document. A process is shown as an example where the process to which the digest value calculating portion applies one directional function is a process of applying the digest function that includes the MD5 algorithm or the SHA1 algorithm. The subroutine CANONICALIZE of the document verification service used in accordance with the present embodiment implements the similar processes as those of the subroutine CANONICALIZE step S employed in the first embodiment and the explanation is omitted here.

The document verification service enables to obtain the similar effects as those of the document verification service used in the second embodiment. Specifically similarly as described in the second embodiment a consideration is given to a situation where the itinerary draft shown in is sent to the first car rental company from the travel agency and the itinerary draft is sent back to the travel agency without change. At this time the validity verification process needs not to be performed on the document verification service used in the present embodiment thereby enabling the process to be facilitated.

In accordance with the present embodiment the canonicalization process similarly as described in the first embodiment is implemented by the subroutine CANONICALIZE and accordingly the output from the subroutine CANONICALIZE is expressed by text of the XML document. On the other hand as specified in the XML Canonicalization Standard the canonicalization process can be performed not only for the text representation of the XML document but also for an XPath node set. By use of this it may be configured in such a manner that the XPath node set a tree having the nodes of the document element the document element attribute and the contents that do not include the document element is generated from the text representation of the document string representation of the electronic document and the digest value is directly calculated by the XPath node set without returning to the text representation of the document after the canonicalization process that conforms to the XML Canonicalization Standard is implemented.

A fourth embodiment of the invention is described. The fourth embodiment is an exemplary embodiment where a sampling function is employed. In accordance with the fourth embodiment the process of applying the one directional function performed by the digest value calculating portion is a process of applying a pseudo random algorithm that has a repeatability that includes a linear congruential method or Mersenne Twister. That is to say the document verification service employed in the fourth embodiment is basically similar to that described in the third embodiment except that a combination of a function of calculating the number of characters or bites and the pseudo random algorithm that has repeatability that includes a linear congruential method or Mersenne Twister whereas the hash function such as MD5 algorithm or SHA1 algorithm used at step S performed by the digest value calculating portion of the document verification service in the third embodiment.

The combination of the functions outputs a set of the number of characters or bites in a document and a sample character string. Referring to again the present embodiment is described. In the present embodiment 32 is an example of the number of characters in the sample character string. Instead of the method employed in accordance with the present embodiment the function of calculating the number of characters or the number of bites in the document and the pseudo random algorithm having repeatability that includes a linear congruential method or Mersenne Twister may be used together and applicable to not only the document verification service employed in the third embodiment but also to the document verification service employed in the second embodiment at step S.

In the present embodiment in a similar fashion as described in the first embodiment a consideration is given to a situation when the itinerary draft shown in is sent to the first car rental company from the travel agency and is then sent back to the travel agency without change. shows an exemplary sent and received document transmitted to the first car rental company . The digest element in the fourth line retains the verification result value of the validity attribute the number of characters in the document value of documentLength attribute and a sample character string content when the document is verified by the document verification service most recently. However 

At step S if an old set of the number of characters and the sample character string is applied to the document processing goes to step S. If not processing goes to step S. At step S if a new number of characters equals to an old number of characters and a new sample character string equals to an old sample character string a set of old number of characters and sample character string and the result output most recently from the subroutine VALIDATE are output at step S. At step S if a new number of characters equals to an old number of characters and a new sample character string does not equal to the old sample character string processing goes to step S. In the present embodiment the value output from the subroutine GET DIGEST at step S is different from the number of characters and the sample character string described in the digest element in the fourth line in at step S and processing goes to step S.

At step S the subroutine VALIDATE is executed on an input document. At step S the set of new number of characters and sample character string and the result output from the subroutine VALIDATE is output. In accordance with the present embodiment true is output as a result of the afore mentioned number of characters in the document the sample character string and the subroutine VALIDATE. This result is shown in . shows the sent and received document sent back to the first car rental company . With respect to the sent and received document shown in the value of the digest element in the fourth line is renewed.

Next a consideration is given to a situation where the sent and received document shown in is sent back to the travel agency from the first car rental company . The travel agency requests the document verification service for the validity verification process again. At this time the number of characters in the document and the sample character string output from the subroutine GET DIGEST are shown as follows and correspond to the number of characters and the sample character string output from the subroutine GET DIGEST described in the digest element in the fourth line in .

Processing goes to step S and is capable of skipping the subroutine VALIDATE thereby enabling the improved efficiency of the process.

A fifth embodiment will be described. The document verification service employed in the fifth embodiment performs a digest value calculation process on the result where a portion that does not influence the validity verification process result is deleted from the document. Also in the present embodiment a description is given with reference to .

In a case where the document schema conforms to W3C XML Schema specification even if the processing instruction in the document or the content in a string type is excluded from the document this does not influence the validity verification process result. Therefore in accordance with the present embodiment if the electronic document is an XML document the verification process controlling portion excludes character data A child is three years old in the sixth line in included in the content that corresponds to a mixed content model in the CDATA section comment processing instruction and document schema as a portion that does not influence the verification result.

When the XML document is input as an electronic document and W3C XML Schema is input as a document schema the verification process controlling portion as a portion that does not influence the verification result excludes from the XML document the content that does not include another element or the value of the document element attribute that should have the content of a string type in the contents of the document element that should have the content of the string type defined by W3C XML Schema. It is possible to improve the efficiency of the digest value calculation process by calculating the digest value the number of characters and the sample character string after the afore mentioned content is excluded.

The document verifying portion employed in the present embodiment processes the document element having the content of the character data only while the validity verification process is being carried out. Then the document verifying portion adds a contentType attribute of the document element and sets the character string that corresponds to the data type of the character data of the content as a value thereof. Also after the document element that corresponds to the element type having the mixed content model is processed the content Type attribute is added to the document element and the value thereof is set to mixed .

At step S deleted is a partial tree having a top of the attribute node that is the text node having a name of contentModel and is provided immediately below the generated node. If the generated node satisfies a condition 3 there is an attribute node having a name of contentModel immediately below the generated node and there is a text node having a value of mixed immediately below the attribute node at step S processing returns to step S. At step S deleted are the text node immediately below the generated node and a partial tree having a top that is an attribute node having the name of contentModel and processing goes back to step S. At step S when the pointer P reaches the end of the input document the tree T is output at step S.

In accordance with the present embodiment the document is converted into the DOM tree and then the node corresponding to the portion that does not influence the verification process result is deleted. However other than the above described process it is possible to configure in such a manner that the portion that does not influence the verification process result is excluded with the use of the document in a text format.

A sixth embodiment will be described. The document verification service employed in the sixth embodiment implements a digest value calculation process on the result where a portion that does not influence the validity verification process result is deleted from the document in a similar manner as described in the fifth embodiment. Also in the present embodiment a description is given with reference to .

In a case where the document schema conforms to W3C XML Schema specification even if the document element corresponding to the content model that does not include the definition of the document element other than an any element skip of lax is the value of a processCentents attribute in the document schema this does not influence the validity verification process result. Also even if the document element attribute corresponding to the content model that does not include the definition of the document element attribute other than an anyAttribute element skip or lax is the value of the processCentents attribute in the document schema this does not influence the validity verification process result. For this reason in accordance with the present embodiment if W3C XML Schema is input as a document schema the verification process controlling portion determines the XML document of an electronic document as a portion that does not influence the verification result and excludes a document element that appears at a position corresponding to the any element specified in W3C XML Schema and the document element attribute that appears at a position corresponding to the anyAttribute element from the XML document. The efficiency of the digest value calculation process can be improved by calculating the digest value the number of characters and the sample character string after the above mentioned portions are deleted.

The document verifying portion employed in the present embodiment adds an attribute contentModel and an attribute value any to the document element during the validity verification process after processing the document element corresponding to the content model that does not include the definition of the document element other than an any element skip or lax is the value of a processCentents attribute in the document schema. The document verifying portion adds the attribute contentModel and the attribute value anyAttribute as an attribute of the document element to which the document element attribute belongs after processing the document element attribute corresponding to the content model that does not include the definition of the document element attribute other than an anyAttribute element skip is the value of the processCentents attribute in the document schema.

If there is no node that satisfies a condition 2 there is an attribute node having a name of contentModel immediately below the node itself and there is a text node having a value of any immediately below the attribute node at step S processing goes to step S. If there is anode that satisfies the condition 2 the document element node immediately below the node the attribute node having the name of contentModel and the text node having the name of any that is a child node thereof are deleted at step S. If there is no node that satisfies a condition 3 there is an attribute node having the name of contentModel immediately below the node itself and there is a text node having a value of anyAttribute immediately below the attribute node at step S processing goes back to step S. If there is a node that satisfies the condition 3 empty is set to the content of the text node immediately below the document element attribute immediately below the node at step S. In addition the attribute node having a name of contentModel immediately below the node and a child node thereof that is the text node having the name of anyAttribute are deleted.

In accordance with the present embodiment the document is converted into a DOM tree and the node corresponding to the portion that does not influence the verification process result are deleted. In addition it is possible to configure such that the portion that does not influence the verification process result is excluded from the document in a text format.

A seventh embodiment will be described. The document verification service employed in the seventh embodiment implements a digest value calculation process on the result where a portion that does not influence the validity verification process result is deleted from the document in a similar manner as described in the fifth and sixth embodiments. However in the present embodiment the document schema that conforms to XML DTD specification is to be processed. Also in the present embodiment a description is given with reference to .

In a case where the document schema conforms to the XML DTD specification even if the content composed only of a processing instruction or character data is excluded from the document this does not influence the validity verification result. The verification process controlling portion excludes a portion that is a content of the document element and that does not include another document element from the XML document as a portion that does not influence the verification result if the XML document is input as an electronic document and the XML DTD Document Type Definition is input as a document schema. The efficiency of the digest value calculation process can be improved by excluding the above mentioned portions and then calculating the digest value the number of characters and sample character string.

The reason the description that conforms to the XML standard specification is not employed is as follows if the description shown in is employed and the document is retained as a content of the SOAP body and processed as a portion of the sent and received document a DOCTYPE declaration that is only allowed to appear immediately after the XML declaration appears in the sent and received document causing an error. It is preferable that the description in should be replaced with a new description when the new description can solve the afore described problem.

In addition it is easily possible to realize the process of excluding the content of the character data of the document element having a mixed content model in a case where the document schema is not only the W3C XML Schema but also XML DTD as described in the fifth embodiment. In accordance with the present embodiment the document is converted into the DOM tree and then the node corresponding to the portion that does not influence the verification process result is deleted. However in addition to this it is possible to configure in such a manner that the portion that does not influence the verification process result is excluded from the document in a text format.

An eighth embodiment will be described. The document verification service employed in the eighth embodiment processes the document schema that conforms to the specification of XML DTD or W3C SML Schema and implements the digest value calculation process on the result where the portion that does not influence the validity verification process result is deleted from the document. Also in the present embodiment a description is given with reference to .

The verification process controlling portion excludes a portion that does not influence the verification result from an electronic document and then determines whether or not a change that influences the verification result is made to the electronic document from which the portion that does not influence the verification result is excluded. In a case where the document schema conforms to the XML DTD specification even if the character data immediately below the content corresponding to the content model that is defined as ANY keyword this does not influence the validity verification result. In a similar manner in a case where document schema conforms to the W3C XML Schema specification even if the document and the character data corresponding to any element this does not influence the validity verification result.

For this reason when the XML document is input as an electronic document the verification process controlling portion deletes the content of the character data immediately below the document element corresponding to a portion that includes ANY keyword in the XML DTD element type definition and also deletes the document element and the character data corresponding to any element in the W3C XML Schema as portions that do not influence the verification result. The efficiency of the digest value calculation process can be improved by calculating the digest value the number of characters and sample character string after these portions are deleted.

The document verifying portion adds an attribute contentModel and an attribute value any to the document element after processing the document element that corresponds to the content model defined by ANY keyword of the document schema during the validity verification process. Here in the description hereafter XML DTD is assumed to be employed as a document schema. However also in W3C XML Schema the similar effects are obtainable by adding the attribute contentModel and the attribute value any to the document element after the document element that corresponds to any element is processed.

If the generated node does not satisfy a condition 2 there is an attribute node having a name of contentModel immediately below the generated node and there is a text node having a value of any immediately below the attribute node at step S processing goes back to step S. If the generated node satisfies the condition 2 all the nodes immediately below the node the attribute node having a name of contentModel and a child node thereof that is the text node having a name of any are deleted at step S and processing goes back to step S. If the pointer P reaches the end of the input document at step S the tree T is output at step S.

The DOM tree obtained when the document shown in is input into the subroutine CANONICALIZE is identical to the document shown in after the node corresponding to the character data of A child is three years old added in the sixth line in the document shown in is deleted. As a result it is possible to improve the efficiency of the digest value calculation process which is a subsequent process.

In accordance with the present embodiment the document is converted into the DOM tree and then the node corresponding to the portion that does not influence the verification process result is deleted. However in addition to this it is possible to delete the portion that does not influence the verification result from the document in a text format.

A ninth embodiment will be described. In the document verification service employed in the ninth embodiment the document is partially input into the subroutine EVALUATE. Also in the present embodiment a description will be given by reference to . The verification process controlling portion divides an electronic document into two or more portions. At this time the verification process controlling portion divides the electronic document into a content of character data and a rest thereof. If the electronic document is a structured document represented by a tree having nodes of component elements the verification process controlling portion divides the structured document into document element attributes and a rest thereof. The document verifying portion verifies whether or not portions of such divided electronic document respectively satisfy a given condition. Even if a change is made on the document the portion on which the validity verification process is performed can be smaller than the whole document thereby improving the processing efficiency.

If the value of the variable Z is not greater than that of the variable Y at step S a document schema fragment is generated to correspond to a the variable Z th element of the array Y at step S. The subroutine EVALUATE is executed with an argument of the variable Z th element of the array Y at step S. An output from the subroutine EVALUATE is associated with the variable Z th element of the array Y at step S. The variable Z is incremented at step S and processing goes back to steps . If the value of the variable Z is greater than that of the variable Y at step S the sent and received document is received at step S.

At step S the number of elements in the array Y is set to variable Z and 0 is set to the variable W. If the value of the variable Z is not greater than that of the variable Y at step S a document schema fragment is generated to correspond to a the variable Z th element of the array Y at step S. At step S a schema in which all data types of the character data in the input document schema are converted into string types is generated as a document schema for the whole document. At step S the subroutine EVALUATE is executed with an argument of the variable Z th element of the array Y. At step S the output from the subroutine EVALUATE is corresponded to the variable Z th element of the array Y. At step S the variable Z is incremented and processing returns to step S. If the value of the variable Z is greater than the value of the variable Y at step S the sent and received document is sent back at step S.

In the processes shown in the document is divided into the relationship between the document elements and the respective document elements and the respectively corresponding document schemas are generated. In the processes shown in the document schema that does not check the character data type and the document schema that checks the character data type of the respective document elements are generated and in addition the respectively corresponding document fragments are generated. This is based on the assumption that the change in the document is made locally in many cases with respect to a specific document element. In addition to this it is possible to divide the document into the relationship between the document elements the respective document elements that exclude the character data and the respective character data. Furthermore it is possible to divide the document into a partial tree having a top of a specific document element and a rest thereof.

It is also possible to generate in advance all the document schema fragments that include the document schema fragment shown in through and when the document schema is obtained. This makes it possible to improve the processing efficiency of a case where lots of documents associated with an identical document schema are processed.

Hereinafter in the present embodiment it is assumed that the process shown in is implemented on the verification process controlling portion . Even in a case where the processes shown in are implemented similar process results are obtainable as described hereinafter.

For example the document portion that corresponds to the structure attribute text attribute and attribute of the digest element in the fourth line includes only the relationship between the document elements and does not include the text content or the document element attribute. The value of a path attribute denotes an XPath location path to specify the document element located on the top of the document portion that corresponds to the digest element. Here the content of the validity attribute and that of the digest element are described above.

The document verification service employed in the present embodiment calls the subroutine EVALUATE after the input document is divided in a text format without change. In addition to this it is possible to configure such that the input document is converted into the DOM tress and then divided.

As described heretofore a document to be processed is divided into multiple portions and it is determined whether a change is made on each of the verification process results of the multiple portions. Accordingly even if a change is made to the document the portion on which the validity verification process is to be performed can be reduced as compared to the whole document thereby improving the processing efficiency.

A tenth embodiment will be described. The document verification service employed in a tenth embodiment a portion of the document not the whole document is input into the subroutine EVALUATE same as described in the sixth embodiment. In addition to this the document verification service employed in the tenth embodiment receives from a service that has requested the validity verification process information on the document part that has been changed by the service and then divides the document with the use of the information received. A description is given with reference to . When it is determined that a change is made to the electronic document that influences the verification result the verification process controlling portion divides the electronic document into a portion to which the changed is made and the rest of the document. At this time if the electronic document is a structured document the verification process controlling portion divides the structured document into a partial tree and the rest thereof. The document verifying portion verifies whether or not the portion in which a change is made satisfies a given condition. Even if a change is made to the document the portion on which the validity verification process is performed can be smaller than the whole document thereby improving the processing efficiency.

A description is now given in more detail. The document shown in is sent to the first airline from the travel agency the sent and received document that includes the document shown in is sent to the document verification service employed in the present embodiment from the first airline and the validity verification process is requested. shows the sent and received document that is sent at this time.

In the fourth line in the digest element is shown. The digest element retains the verification result and the digest value when the validity verification process was performed on the whole document most recently. In addition to this in the fifth and sixth lines the modification elements are added by the travel agency that has sent this sent and received document. The modification element represents a possibility that a change will be made by the first airline who is a receiver of the sent and received document. The value of a path attribute of the modification element is a location path of XPath that represents the document element located on the top of a partial structure to which there is a possibility that a change is made.

A subtree attribute specifies that the partial structure to which there is a possibility that a change is made is any of a partial tree having a top of the document element specified by the path attribute and a portion that excludes the partial tree having a top of the document element. If the attribute value is true this represents the former. If the attribute value is false this represents the latter. The modification elements in the fifth and sixth lines denote that there is a possibility of changing a partial tree having a top of a second appearing travel element immediately below itineraryInProcess element and a partial tree having a top of a fifth appearing travel element.

At step S the verification process controlling portion assigns the content of the SOAP body to the variable X. At step S the content of the variable X is divided into two or more partial structures according to the contents of the modification element and the digest element and such two or more partial structures are assigned to the array Y. At step S the variable Z is set to the number of the elements of the array Y and the variable W is set to 0. If the value of the variable Z is not greater than the value of the variable Y at step S a document schema fragment that corresponds to the variable Z th element of the array Y is generated at step S. At step S the subroutine EVALUATE is executed with an argument of the variable Z th element of the array Y. At step S the output from the subroutine EVALUATE is corresponded to the variable Z th element of the array Y. At step S the variable Z is incremented and processing returns to step S. If the value of the variable z is greater than the value of the variable Y at step S the sent and received document is sent back at step S.

Next a consideration is given to a situation when the whole sent and received document shown in is renewed from to by the travel agency . shows the sent and received document sent to the document verification service from the travel agency . shows a list of the digest values old digest values retained as the digest element the digest values new digest values calculated by the document verification service with respect to three partial structures in which the validity verification results and the digest values are retained.

Since exhibits that only the partial tree which has a top of the second appearing travel element immediately below the itineraryInProcess element has been changed the subroutine VALIDATE is executed on only the afore described partial tree. If the document schema that conforms to W3C XML Schema is used the document schema corresponding to the document can be utilized to execute the verification process on only an arbitrary partial tree. Therefore the document schema shown in can be used without change at the time of executing the subroutine VALIDATE.

The document verification service employed in the present embodiment calculates and compares the digest values of the portions a portion that excludes from the document the partial tree having a top of the second appearing travel element and the partial tree having a top of the fifth appearing travel element immediately below the itineraryInProcess element that are specified by the modification element shown in that there is no possibility of a change. However it is possible to configure to skip the above described process.

It is also possible to configure such that the document verification service divides the input document in a text format and calls the subroutine EVALUATE. In addition to this it is possible to configure such that the input document is converted into a DOM tree and the DOM tree is divided.

As stated by dividing the document to be processed into multiple portions according to the information obtained from the service and determining whether or not a change that influences the verification process result has been made the portion on which the validity verification process should be performed can be made smaller than the whole document even if a change has been made on the document. Thus the processing efficiency can be improved.

An eleventh embodiment will be described. The eleventh embodiment of the invention exemplarily describes a case where the document schema is revalidated due to a change of the document schema. The document verification service employed in the eleventh embodiment detects the change not only of the document but also of the document schema and the validity verification is performed. shows a schematic view of a system employed in the present embodiment. The system includes the first airline the travel agency and a document verification service . These are respectively connected onto the network such as the Internet. The document verification service includes the sent and received document retaining portion the document canonicalization portion the document verifying portion the verification process controlling portion the digest value calculating portion and a document schema retaining portion . That is to say in addition to the components shown in the document schema retaining portion is added. The document schema retaining portion retains the schema.

The verification process controlling portion determines that a change that influences the verification result is made on a given schema if the information obtained by implementing a given operation on a given document schema an old digest value of the document schema is different from the information obtained by implementing a given operation on a given document schema anew digest value of the document schema at the time when a structured document is validated most recently. The document verification service employed in the present embodiment is capable of detecting the change not only of the document but also of the document schema and performing the validity verification.

At step S the subroutine CANONICALIZE is executed on an input document. At step S the subroutine GET DIGEST is executed on the output. If the old digest value is not applied at step S processing goes to step S. If the old digest value is applied processing goes to step S. If the new digest value and the old digest value are not identical at step S processing goes to step S. If the new digest value and the old digest value are identical processing goes to step S. At step S the partial tree having the top of the annotation element is deleted from the document schema.

At step S the subroutine CANONICALIZE is executed on the document schema. At step S the subroutine GET DIGEST is executed on the output. If the old digest value of the document schema is applied to the document at step S processing goes to step S. If not processing goes to step S. If the new digest value of the document schema and the old digest value of the document schema are identical at step S a set of the digest value of the old document the digest value of the old document and the most recent result of subroutine VALIDATE at step S. At step S the most recent result of subroutine VALIDATE is output. At step S the set of the digest value of the new document the digest value of the new document schema and the result of the subroutine VALIDATE are output.

It is assumed that the document shown in is sent back to the travel agency from the first airline and the document schema shown in is renewed before the document is sent to the second airline from the travel agency . shows a document schema after renewal. In the document schema shown in the children element has to be appeared immediately below the passengers element. However in the document schema in there is a change in that the children element needs not to be appeared in the document schema in see the nineteenth line . In accordance with this change the content of the annotation element in the fourth line is also changed.

The document shown in is sent to the second airline from the travel agency and the validity verification process is requested to the document verification service from the second airline . Then the new digest value and the old digest value of the document and that of the document schema are compared on the basis of the process flow shown in at step S. As a result the new digest value and the old digest value of the document are identical. However the new digest value and the old digest value of the document schema are not identical at step S. Processing moves to step S from step S. At step S the subroutine VALIDATE is called and the new digest value and the process result of the subroutine VALIDATE are output at step S.

A twelfth embodiment will be described. The twelfth embodiment exemplarily describes a case where inclusion relation of the language defined by the document schema is determined. The document verification service employed in the present embodiment detects the change of the document schema and implements the validity verification in a similar manner as described in the eleventh embodiment. In addition the document verification service employed in the present embodiment determines whether or not the change of the schema influences the validity verification result. Only when the change influences the validity verification result the validity verification is performed.

The schematic view of the document verification service employed in the present embodiment is similar to that employed in the eleventh embodiment as shown in . However the document verification service employed in the present embodiment retains a latest document schema specified by an identical identifier on the document schema retaining portion whenever the subroutine VALIDATE is executed.

The verification process controlling portion determines that there is no change in the document schema that influences the validity verification result if a language defined by a new document schema a first language defined by a given document schema includes the language defined by the old document schema a second language defined by the given document schema when the structured document is verified most recently and the result verification result of the most recent subroutine VALIDATE is true . The verification process controlling portion also determines that there is not a change in the document schema that influences the validity verification result if the language defined by the old document schema includes the language defined by the new document schema and the result verification result of the most recent subroutine VALIDATE is false .

At step S the subroutine GET DIGEST is executed on the output. If the old digest value of the document schema is not applied to the document at step S processing goes to step S. If the old digest value of the document schema is applied to the document at step S processing goes to step S. If the new digest value of the document schema is not identical to the old digest value of the document schema at step S processing goes to step S. If the new digest value of the document schema is identical to the old digest value of the document schema at step S a set of the digest value of the old document the digest value of the old document and the result of the most recent subroutine VALIDATE at step S. If the language defined by the new document schema includes the document defined by the old document schema and the result of the most recent subroutine VALIDATE is not true processing goes to step S. If it is true the set of the old digest value the digest value of the new document and the result of the most recent subroutine VALIDATE at step S. At step S the subroutine VALIDATE is executed on the input document. At step S the set of the digest value of the new document the digest value of the new document schema and the result of the VALIDATE are output.

In the processes of the verification process controlling portion employed in the ninth embodiment shown in the subroutine VALIDATE is activated unconditionally if the new digest value of the document schema is not identical to the old digest value of the document schema. Meanwhile if the language defined by the new document schema includes the language defined by the old document schema and the result of the most recent subroutine VALIDATE is true although the new and the old digest values of the document schema are not identical the verification process controlling portion employed in the twelfth embodiment determines that a change of the document schema does not influence the validity verification result and terminates the process without activating the subroutine VALIDATE.

Although the processes in do not include it is possible to add a process of determining that the change of the document schema does not influence the validity verification result and terminating the process without activating the subroutine VALIDATE even in a case where the language defined by the old document includes the language defined by the new document schema and the result of the most recent subroutine VALIDATE is false .

At step S a deterministic finite state automaton is generated from the production rules of the variable E and the variable F and is assigned to a variable G and a variable H. At step S a subroutine COMPARE is executed with arguments of the values of the variable H and the variable G. If a return value of the subroutine COMPARE is not true at step S false is output at step S. If true processing goes to step S. If the value of the variable D is not an end element of the list C at step S the next element of the list C is assigned to the variable D at step S and processing returns to step S. If the value of the variable D is an end element true is output at step S.

The processes shown in are implemented on the assumption that there is only one production rule having an identical symbol in the left side. Such assumption is satisfied in XML DTD. Meanwhile in W3C XML Schema multiple production rules having the identical symbol in the left side may be obtainable because different content models can be defined according to the appearing position of the document element with the use of the mechanism of local element and local attribute. According to exemplary embodiments of the invention the document schema is employed such that a single content model is defined regardless of the appearing position of the document element.

If the state W is in an accept state at step S processing goes to step S. If not false is output at step S. At step S a state list X is set to a state transition list having a starting edge of the state V. At step S a state set Y is set to a state transition set having a starting edge of the state W. If the state list X is empty at step S processing goes back to step S. If not processing goes to step S. If an element of the symbol corresponding to the initial element of the state list X is not included in the state set Y at step S false is output at step S. If it is included in the state set Y a state set Z is set to the initial element of the state list X and an element of the set Y corresponding to the symbol of the initial element of the state list X at step S.

At step S the element of Z is deleted from X and Y. If the state set Z is included in the state set S or the state list T at step S processing returns to step S. If not the state set Z is added as an end element of the list T having a set of states at step S and processing goes back to step S.

The language composed of a symbol string accepted by the deterministic finite state automaton shown in includes the language accepted by the deterministic finite state automaton shown in . The deterministic finite state automaton shown in accepts a symbol string composed only of a symbol adult but the deterministic finite state automaton shown in does not accept the above described symbol. All the symbol strings accepted by the deterministic finite state automaton shown in are accepted by the deterministic finite state automaton shown in .

With respect to the production rule and the deterministic finite state automaton having the symbol corresponding to other document elements in the left side identical production rules and the deterministic finite state automatons are obtainable from the document shown in and that in . When the subroutine COMPARE is activated with the afore described automatons serving as arguments the language accepted by the deterministic finite state automaton shown in includes the language accepted by the deterministic finite state automaton shown in . Accordingly the subroutine COMPARE returns true . It is thus possible to end the process without executing the subroutine VALIDATE improving the processing efficiency.

A thirteenth embodiment will be described. The thirteenth embodiment is an exemplary embodiment that verifies an integral form. The document verification service employed in the thirteenth embodiment is different from the document verification services employed in the firth through twelfth embodiments and is provided for determining whether or not the input document is an XML document in an integral form. is a schematic view of a system employed in the present embodiment. A system includes a document editing service a document DB service and a document verification service . These are connected onto the network such as the Internet. The document verification service includes the sent and received document retaining portion the verification process controlling portion a digest value calculation portion and the document verifying portion . The verification process controlling portion is provided for verifying whether or not the input electronic document is an XML document in an integral form.

The document editing service shown in provides a document editing program suitable for a document edited by the user. For instance if the document to be edited is not an XML document a text editor is activated. If the document is an XML document an XML document editor is activated. The user stores the document in process of editing on the document DB service and reloads the document onto the document editing service as needed when restarting editing.

When the document is reloaded on the document editing service the document editing service sends the document to the document verification service and asks whether or not the document is an XML document in an integral form. The document verification service sends a reply of the sent and received document that includes the digest value of the determination result of the document to the document editing service . If the document is determined to be an XML document in an integral form the document editing service activates the XML document editor. If not the document editing service activates a text editor.

The process flow of the document verification service and that of the verification process controlling portion are identical to that shown in . is a flowchart of processes of the subroutine EVALUATE. At step S the subroutine GET DIGEST is executed on the input document. If the old digest value is applied to the document at step S processing goes to step S. If not processing goes to step S. If the new digest value equals to the old digest value at step S a set of the old digest value and the result of a most recent subroutine PARSE are output at step S. At step S the subroutine PARSE is executed on the input document. At step S a set of the new digest value and the result of the subroutine PARSE.

This value is identical to the content of the digest value in the fourth line. Therefore the document verification service determines that there is no change in the document and the sent and received document is sent to the document editing service .

Next a consideration is given to a situation when the document in the sent and received document shown in is edited by the text editor to a well formed XML document in an integral form is stored on the document DB service and is reloaded onto the document editing service . is a view showing the sent and received document to be sent to the document verification service from the document editing service . It is assumed that the following digest value is obtained when the sent and received document shown in is input.

This value is different from the content of the digest element in the fourth line. Therefore the document verification service determines that there is a change in the document and the subroutine PARSE is executed. As a result the document is determined to be a well formed XML document in an integral form the content of the digest element is renewed and the sent and received document shown in is sent to the document editing service . The document editing service refers to the result the value of the welformedness attribute of the digest value activates the XML document editor as an editor for the document instead of the text editor.

As stated even if the process of determining whether or not the document is a well formed XML document in integral form when there is no change in the document it is possible to know whether or not the document is a well formed XML document having an integral form by using the document verification service enabling the improved processing efficiency.

A fourteenth embodiment will be described. The fourteenth embodiment of the invention is an example where a verification history is retained. is a schematic view of a system in accordance with the present embodiment. The system is provided with the first car rental company the travel agency and a document verification service . These are connected on the network such as the Internet. The document verification service is provided with the sent and received document retaining portion the document canonicalization portion the document verifying portion the verification process controlling portion the digest value calculating portion and a verification history retaining portion .

In the embodiments described above the digest value and the verification result when the document to be verified was verified most recently are retained in the header of the sent and received document SOAP document . The verification history retaining portion employed in the present embodiment retains a set of the value obtained as a result that one directional function process is applied digest value of the document in a past verification result and a verification result. If the value obtained as a result that one directional function process is applied to the document to be verified is identical to any of the values retained on the verification history retaining portion the verification result that corresponds to the value is set to the verification result of the electronic document.

This eliminates the necessity of making a set of the digest value and the verification result in association with the document to be verified. Only the document to be verified has to be sent to the document verification service from the service that requests the verification. Accordingly in addition to SOAP employed in the above described embodiments representational state transfer REST protocol can be used. REST protocol is one of the protocols used for sending and receiving the document between the services connected over the Internet.

In a similar manner as described in the first and second embodiments a consideration is given to a situation where the itinerary draft shown in is sent to the first car rental company from the travel agency and sent back to the travel agency without change. At this time the verification history retaining portion of the document verification service retains in the following as a set of the verification result and the digest value.

The document verification service calculates the digest value of the itinerary draft when the travel agency requests for the verification process of the itinerary draft shown in . Then the document verification service tries to specify a set having an identical digest value in the verification history retaining portion and specifies the above described set. The verification history retaining portion outputs true which is the verification result in such specified set to the travel agency and completes the process. This makes it possible to skip the verification process of the itinerary draft thereby improving processing efficiency.

The document verification method employed according to an aspect of the invention after it is verified whether the electronic document input satisfies a given condition includes a step of determining whether or not there is a change that influences the verification result in at least one of the electronic document and the given condition and if it is determined that there is a change that influences the verification result in at least one of the electronic document and the given condition further includes a step of verifying the electronic document whether the electronic document satisfies the given condition to output a verification result and if it is determined that there is a change output a result whether it is verified most recently that the electronic document satisfies the given condition as a verification result. The steps are realized by executing the steps on CPU. The determining portion is realized by the verification process controlling portion . The outputting portion is realized by the document verifying portion and the verification process controlling portion .

The verification history retaining portion of the system employed according to an aspect of the invention retains only a set of the document digest value and the verification result. However it is possible to configure to retain the information retained by the digest value in the SOAP header of the sent and received document employed according to embodiments of the invention. In addition according to embodiments of the invention the document verification apparatus is described as an independent service. However it is possible to realize as a function applied to one or more services.

A fifteenth embodiment will be described. illustrates a system configuration in accordance with a fifteenth embodiment of the invention. Referring to a system is provided with a document verification service system and service systems through N. The document verification service system is capable of sending and receiving messages to and from the service systems through N over a public network . The document verification service system receives a message that requests for the verification of a structured document from the service systems through N and sends a message of the verification result. Such sent and received message includes information for verification as will be described later in detail. The document verification service system is provided for verifying whether or not a structured document that has been input satisfies a given document schema. The document verification service system promotes efficiency of the verification process with the use of the information for verification.

The document verification service system includes a controller a message sending and receiving portion a message memory an input output portion a verification information memory a document instance memory a document schema memory a canonicalization portion a digest value calculating portion a document divider a validity verifying portion and a verification result outputting portion .

The document divider divides the structured document into two or more portions on the basis of a structural feature of the document schema as a method of dividing the structured document in view of data structure. The controller after such divided structured document is verified whether or not it satisfies the document schema determines whether or not there is a change that influences the verification result in at least one of such divided portions of the structured document and the document schema.

The verification result outputting portion verifies whether or not a specific portion in which the controller determines that there is a change that influences the verification result from among such divided portions of the structured document satisfies the document schema to set as the verification result. With respect to the portion where it is determined that no change is made the verification result outputting portion sets the result of the time when the respective portions are verified whether the portions satisfy the condition most recently. The verification result outputting portion outputs the verification result of the whole structured document input with the above mentioned result.

Meanwhile the document divider for example extracts a structural feature of the document schema from one document schema. At this time when one or more other document schemata are utilized the document divider as an element that composes one document schema extracts an element that uses another document schema as a structural feature. For example the structured document is written in XML and the document schema is written in W3C XML Schema the element that uses another document schema is expressed by importing another document schema. The document divider divides the structured document with a unit of the element that uses another document schema.

The document divider may extract a document element necessary for adjusting to the document schema on the basis of one document schema as a structural feature of the document schema. Also the document divider may extract the document element that is allowed to appear multiple times in the document schema on the basis of one document schema as a structural feature of the document schema. For example the document divider specifies the necessary document element on the basis of a particle in the document schema when the structural document of the document schema is written in XML and the document schema is written in W3C XML Schema.

Also the document divider may extract the structural feature of the document schema on the basis of multiple document schemata. In this case when multiple document schemata are a document schema for inputting and a document schema for outputting for one document service the document divider extracts a common portion that is common to the document schema for inputting and the document schema for outputting as a structural feature of the document schema. Then the document divider divides the structured document as a unit of the common portion of the document schema for inputting and the document schema for outputting. For example the document divider specifies the document schema for inputting and the document schema for outputting for one document service on the basis of a WSDL document of one document service when the structural document of the document schema is written in XML and the document schema is written in W3C XML Schema.

In an example of focusing on the processing the document divider divides the structured document into two or more portions according to the change made to the structured document. At this time the document divider specifies a possibility of change to be made to the structured document before a change is made to the structured document. For example the document divider specifies a possibility of change to be made to the structured document on the basis of the document schema for inputting and the document schema for outputting in which the process of making a change to the structured document is described. The document divider may extract a common portion of multiple document schemata to be used in a group of linked document services as a structural feature of the document schema if multiple document schemata are those used by the group of linked document services.

At this time the document divider specifies multiple document schemata used in the group of the document services on the basis of the information that forms a linkage. For example the structured document is written in XML and the document schema is written in W3C XML schema and the information that forms a linkage is written in BPEL4WS. In an alternative example the document divider pursues the document processed by a linked document service to specify multiple document schemata used in the group of linked document services.

The document divider is capable of specifying a possibility of a change made to the structured document on the basis of change information that becomes public by the process of making a change to the structured document. The change information becomes public for example by notifying to a verification processing apparatus with the use of a registry service with the use of a service description language and with the use of an inquiry interface.

The document divider may specify a possibility of change for the structured document according to the change made to the structured document. Specifically the document divider checks a change made to the structured document by sampling the structured document. For instance the document divider checks a change made to the structured document by sampling an input document and an output document of one service. The document divider is capable of checking a change made to the structured document by sampling a group of documents used by the linked services. For example the document divider takes a sample of the group of documents to be used in a service linked in a hub for linked services. The document divider rakes a sample of the structured document by pursuing a message flow.

The controller determines that there is a change that influences the verification result in the respective portions of such input structured document if the information obtained by executing a given calculation on the respective portions of the structured document at the time when the structured document is verified most recently is different from the information obtained by executing a given calculation on the respective portions of such input structured document. The controller determines that there is a change that influences the verification result in the respective portions of a given document schema if the information obtained by performing a given calculation on a given document schema at the time when the structured document is verified most recently is different from the information obtained by performing a given calculation on a given document schema.

Here a given calculation includes at least one of pre processing and a process of applying one directional function. Preprocessing is for example a canonicalization process that absorbs the fluctuations of description in the structured document. The preprocessing may be a process of producing at least one of the document element and a tree having nodes whose contents does not include the document element attribute or the document element. The process of applying one directional function is for example a process of applying a digest function that includes MD5 algorithm or SHA1 algorithm. The process of applying one directional function may be a process of applying the pseudo random algorithm having repeatability that includes a linear congruential method or Mersenne Twister.

The document divider generates a document schema fragment to verify such divided portions according to the division of the structured document. The verification result outputting portion may verify a portion where it is determined that there is a change in the structured document according to the document schema fragment. At this time the document divider generates the document schema fragment after the controller determines that there is a change to a specific portion of the structured document. The document schema memory retains the document schema fragment used in the verification of the structured document and the validity verifying portion reuses the document schema fragment retained when another structured document having an identical document schema is verified.

The validity verifying portion in verifying the portion of the document where it is determined that there is a change made to the structured document verifies the structured document according to the division of the structured document divided by the document divider without verifying a lower level structure of a specific document element considering that the lower level structure satisfies the document schema with an existence of a specific document element.

In the above described process flow the verification process is more efficient due to the following reasons.

 1 In the structured document in which the verification is once implemented the verification result is identical to the last time if there is no change in the structured document or the document schema. Accordingly the verification is not carried out one again.

 2 It is easy to determine whether or not there is a change in the structured document or the document schema by comparing the values generated from a given calculation such as the calculation of the digest value.

 3 With the preparation of the verification result of the respective portions divided from the structured document and the value generated by a given calculation if there is a change in the structured document it is possible to obtain the whole verification result of the structured document by verifying only the portion that includes the portion changed.

A description will be given in more detail. Referring to the controller determines whether or not the received message includes the information for verification. If the received message includes information for verification Yes at step S the canonicalization portion canonicalizes the document schema used for verification at step S. Next the controller calculates the digest value of the document schema with the use of the digest value calculating portion at step S. If such calculated digest value is matched with the value in the information for verification Yes at step S the controller divides the structured document to be verified according to a divided position in the information for verification with the use of the document divider at step S.

The controller canonicalizes the respective portions divided by the canonicalization portion at step S and calculates the digest values of such divided respective portions with the use of the digest value calculating portion at step S. If all of such calculated digest values are matched with the values in the information for verification Yes at step S the controller copies the information for verification of the received message at step S and goes to step S. If all of the calculated digest values are not matched with the values in the information for verification No at step S the controller verifies the validity on the portion in which the digest value is not matched by the validity verifying portion and generates the verification result at step S. The controller generates the verification result of the whole document from the generated verification result and the verification result in the information for verification for the portion relating to the digest value at step S.

The controller calculates the digest value of the portion in which the digest values are not matched with the use of the digest value calculating portion at step S. The controller generates the information for verification that is overwritten by the newly generated information for verification for the portion in which the digest values are not matched and a newly calculated digest value with respect to the copy of the information for verification of the received message as the information for verification for transmission at step S and processing goes to step S. If the received message does not include the information for verification at step S or if such calculated digest value is not matched with the value in the information for verification the controller divides the document to be verified with the use of the document divider at step S. The controller canonicalizes the respective portions divided by the canonicalization portion at step S.

The controller verifies the validity of the respective portions with the use of the validity verifying portion and generates the verification result at step S. The controller generates the verification result of the whole structured document from the verification results of the respective portions at step S calculates the digest values of the respective portions with the use of the digest value calculating portion at step S canonicalizes the document schema used in the verification with the use of normalization portion at step S and calculates the digest value of the document schema with the use of the digest value calculating portion at step S. The controller generates the information for verification that includes the verification result the divided portion and the digest value at step S and processing goes to step S. Lastly the controller sends the message that includes the information for verification to the service system where the request is issued at step S.

A sixteenth embodiment will be described. illustrates a system configuration in accordance with the sixteenth embodiment of the invention. In the present embodiment a document verification service system verifies the structured document exchanged between a buyer side system and a seller side system in procurement of supplies and equipment. In accordance with the present embodiment universal business language UBL 1.0 recommended by Organization for the Advancement of Structured Information Standards OASIS is employed in the exchange of the structured document between the buyer side system and the seller side system in the procurement of supplies and equipment.

In the present embodiment the document divider extracts a structural feature of the document schema on the basis of one document schema as a division method of the structured document. Also as a document schema the document schema used for the procurement process of UBL is employed. Here one document schema imports another document schema and accordingly the structured document is divided as an example. As a dividing point specification XPath expression that represents the document element which is a root element of such imported document schema is generated. As a given calculation method the canonicalization portion implements the canonicalization process as preprocessing and the digest value calculating portion performs the calculation of the digest value as a process of applying one directional function.

The digest value calculating portion calculates the digest value of a partial structure a in which the document element specified as a dividing point and a lower level element thereof are deleted and the digest value of a partial structure b in having only the element and the lower level element. A method of generating a fragment is employed for the verification method of such divided structured document. Lazy evaluation generates the document schema fragment. As the document schema fragment there are generated the document schema fragment in which the document element specified as a dividing point is deleted from an original document schema and the document schema fragment in which the document element specified as a dividing point is set as a root. The former document schema fragment is used for verification of the partial structure a and the latter document schema fragment is used for verification of the partial structure b.

As a modification of the sixteenth embodiment a division by an essential element and a recursive element another preprocessing and a process of applying one directional function a fragment reuse and the lazy evaluation are now mentioned to cover the description.

A description will be given of respective functional portions. The controller has a function of controlling the overall process of the system. The message sending and receiving portion has a function of sending and receiving the message with other service systems on the public network . The message received by the present system includes at least a message that is issued from another service system to request for the verification of the structured document. The message sent by the present system includes a message that includes a verification result to another system to respond to the received verification request.

The message memory has a function of storing the message received by the message sending and receiving portion and the message generated for sending to another system from the present system. The input output portion has a function of providing the information to the administrator of the present system and a function of receiving an instruction to the system from the administrator. The document instance memory has a function of storing the structured document to be verified and the partial structure created by the document division as will be described later. The document schema memory has a function of storing the document schema used for verification and the document schema fragment created by the document division as will be described later. The document schema stored in the document schema memory is defined by UBL 1.0.

The canonicalization portion has a function of implementing a canonicalization process to absorb the fluctuations of description in the structured document as a preprocessing of the digest value calculation. Here the canonicalization process is a process of absorbing the fluctuations of description occurred by processes irrelevant to the original functions of the respective programs when the document is sequentially processed by multiple programs. The processes irrelevant to the original functions of the respective programs include for example addition of space or line feed conversion of character code and the like. It is possible to provide identical documents having an identical description by carrying out the canonicalization process on the structured document. In the present embodiment the canonicalization portion carries out the canonicalization process according to Canonical XML recommended by W3C.

The digest value calculating portion has a function of calculating the digest value of the document schema in the document schema memory and that of a partial structure in the document instance memory . A unique digest value is calculated from a given piece of electronic information. Accordingly with respect to whether or not there is a change in the electronic information it is possible to determine that there is no change in the electronic information if the former digest value and the current digest value are compared and are matched. It is possible to determine that there is a change in the electronic information if the former digest value and the current digest value are compared and are not matched. In the sixteenth embodiment the digest value is used for determining whether or not there is a change in the partial structure or the document schema in the structured document. As a process of applying one directional function a process of applying the digest function such as MD5 algorithm SHA algorithm or SHA1 algorithm can be utilized.

The document divider has a function of dividing the structured document to be verified into partial structures. In the sixteenth embodiment the structured document to be verified is divided into partial structures. At this time the document divider divides the structured document focusing on one structural feature of the document schema. The structural feature used in accordance with the sixteenth embodiment is that one document schema includes another document schema as a component element thereof.

The document divider checks the structured document to be verified and extracts the document element multiple document elements depending on the case that is a root element in the document schema to be imported as a dividing point of the document structure. The document divider generates the partial structure equal to and lower than the dividing point and a portion in which the partial structure is removed from the original structured document to store them in the document instance memory . The document divider generates the document schema fragment according to the document element to store in the document schema memory . The document schema fragment employed in the present embodiment is a document schema for verifying such divided partial structure and is a portion where a partial element is removed from the original document schema. Here the necessity of the document schema fragment and the relationship between the document division and the document schema fragment are described by reference to a schematic view of .

It is thus possible to verify the partial structure and obtain the verification result as a whole structured document by utilizing the document schema fragment. For ease of description of it is assumed that the definitions of the partial structure b are all written between a start tag and an end tag of the document schema element BreakHere. However in the document schema written in W3C XML Schema the element included in a Composite element is defined outside of the Composite element and a particle existent between the start tag and the end tag of the Composite element is defined in some cases. Even in this case the document divider employed in the present embodiment includes a necessary definition in the document schema fragment.

The validity verifying portion has a function of verifying whether or not a partial structure satisfies a specific document schema fragment. In the validity verification used in the present embodiment the partial structure and the document schema fragment are generated as described. It is therefore possible to apply a general method of verifying the validity of the XML document on the document schema. The verification information memory has a function of storing the information for verification for each structured document to be verified.

The information for verification is sometimes included in the message when the document verification is requested from another system. Also when the result of the verification request is sent back the information for verification is included in the message. In accordance with the present embodiment SOAP envelope is used for exchanging the information with another system and the information for verification is included in the header of the envelope.

The verification result outputting portion newly generates the information for verification or makes a copy from the verification request to store in the verification information memory . Then the verification result outputting portion has a function of renewing the information for verification according to the process result of the document divider the validity verifying portion and the digest value calculating portion .

A modification of the sixteenth embodiment is now described. As a division according to the structural feature of one document schema an essential element and an optional element in the document structure may be divided in addition to the above described dividing method. Alternatively repeatedly appearing elements may be divided respectively. This is because the optional element and the repeatedly appearing element have a high possibility of adding or deleting. The division is capable of applying the information for verification that does not influence another portion even if there is an addition or a deletion.

As an alternative modification of the sixteenth embodiment a preprocessing may employ a process of generating at least one of the document element the document element attribute and a tree having the content of the node that does not include the document element from the expression of a character string in the structured document to be verified. The preprocessing is a process that a prefix that denotes a name space or the difference in superficial expression of the character string is configured not to be influential before one direction function is applied to the DOM tree. The preprocessing corresponds to for example a process for a code fragment in DOMHASH defined by RFC2803.

As a further alternative modification of the sixteenth embodiment the process of applying one directional function may be a process of applying a pseudo random algorithm that has repeatability that includes a linear congruential method or Mersenne Twister. If the pseudo random algorithm that has repeatability is applied it is possible to determine whether or not there is a change in a document portion by comparing the values in a similar manner as described in the calculation of the digest value without studying the portion in detail.

As a yet alternative modification of the sixteenth embodiment the document schema fragment generated in the former verification process and stored in the document schema memory may be reused instead of the document divider generating the document schema fragment for each verification request. For example a consideration is given to a situation where the portion that corresponds to the document schema fragment b is reused. The document schema fragment and the digest value of the original document schema are associated with each other and stored in the document schema memory .

If an element name of the document element that is a dividing point of a new verification request is matched with an attribute name of a root element of the document schema fragment and the digest value of the document schema at that time is identical to the digest value of such associated and stored the document schema fragment is provided for verifying the document element and the original document schema is not changed thereby enabling the document schema fragment to be reused. As a yet alternative modification of the sixteenth embodiment the lazy evaluation that generates the document schema fragment only after the verification is necessary as a result of comparing the digest values may be employed in the generation of the document schema fragment.

A seventeenth embodiment will be described. shows a configuration of a system . A travel agency side system a travel planning company side system a first hotel side system and a second hotel side system are connected on the network . Referring to a document verification service employed in the present embodiment further includes a WSDL document instance memory as compared to the document verification service shown in .

In the present embodiment the method of dividing the structured document includes a method of extracting the structural feature from multiple document schemata and a method of specifying a possibility of change in the structured document from the document schema. The document schema uses the document schema for inputting and the document schema for outputting of a specific service out of the document schemata used in a TravelXML demonstration experiment. In accordance with the present embodiment the afore described document schemata have a common portion. Accordingly the document divider extracts the common portion to divide the structured document. It is possible to learn the correlation between the document schema for inputting and the document schema for outputting from the WSDL document of the service. The dividing point is similar to that of the sixteenth embodiment. The TravelXML is a standard recommended by a nonprofit organization XML consortium.

A deemed verification is employed for the verification of such divided document. The validity verification algorithms are different in verifying a partial structure equal to and lower than a dividing point and in verifying the partial structure excluding the portion equal to and lower than the dividing point. In verifying the partial structure equal to and lower than the dividing point a generally used verification is employed in a similar manner as employed for the original document schema except that the dividing point is allowed to be a root. In verifying the partial structure excluding the portion equal to and lower than the dividing point at the time of recognizing the dividing point the verification is skipped on the assumption that the structure equal to and lower than the dividing point satisfies the document schema and the verification continues.

A given calculation method is almost similar to that employed in the sixteenth embodiment. However the verification method employed in the seventeenth embodiment is different from that employed in the sixteenth embodiment. Accordingly there is a slight difference in the partial structure for the calculation of the digest value. The partial structure a includes the information that shows an existence of the document element that serves as a dividing point. Here with respect to XML the information that shows an existence of the document element that serves as a dividing point is a pair of the start tag and the end tag of the document element. The information that serves as the dividing point is excluded in the partial structure b. As a modification of the seventeenth embodiment such extracted common portion is reused and an input output document is sampled for narrowing down the division are now mentioned to cover the description.

In the present embodiment the structured document used in inventory inquiry and reservation arrangement of a package tour is verified by the document verification service system . In the present embodiment the buyer side system and the seller side system are communicated with the use of TravelXML. A series of procedure in the inventory inquiry and reservation arrangement initiated by the inquiry of the travel agency side system are mounted on the travel planning company side system . As a data format XML is used for the structured document W3C XML Schema is used for the document schema WSDL is used for description of a service interface and SOAP is used for message.

The functional portions are respectively described. However the same components as described in the sixteenth embodiment are omitted. The WSDL document instance memory has a function of storing a WSDL document in which the service interface of another system is described. The WSDL document as will be described later in detail is used for dividing the structured document to be verified. The WSDL document instance memory has a validity verification method different from that employed in the sixteenth embodiment. Accordingly the partial structure is not described in the functional portion. The document schema memory employed in the present embodiment has a function of storing the document schema written in the WSDL document stored in the WSDL document instance memory . The validity verification method employed in the present embodiment is different from that employed in the sixteenth embodiment and the document schema fragment is not stored in the functional portion.

The document divider focuses on the structural feature of two document schemata and has a function of determining the dividing point of the structured document to be verified. Here two document schemata are the document schema for inputting and the document schema for outputting in one system which is written in one WSDL document stored in the WSDL document instance memory see . illustrates a schematic view of the WSDL document instance in accordance with the seventeenth embodiment.

The document divider extracts the common portion in the afore described schemata and divides the document portion if the document portion of the structured document to be verified is included in the common portion. This is because there is a possibility that an identical partial structure and content thereof are included in the input portion and the output portion which are the common portion. For example traveler information and the package tour information are included in the input and output of a vacant room inquiry to a hotel but the information is just referred to by the hotel and is not overwritten. The input portion and the output portion have the identical partial structure and content thereof. By implementing the verification with such divided common portion and implementing the verification as necessary again the partial structure and the content that are not changed needs not to be verified again thereby enabling the verification efficiency to be improved. Such determined dividing point is described in XPath expression as a dividing point for the information for verification in a similar manner as described in the fifteenth embodiment.

The document divider employed in the present embodiment is different from that employed in the sixteenth embodiment and does not generate the partial structure or the document schema fragment since the validity verification methods are different as will be described later.

The validity verifying portion is different from a generally used algorithm used for validity verification and changes the validity verification algorithm in a case where the partial structure equal to and lower than the dividing point and in a case where the partial structure that excludes the portion equal to and lower than the dividing point is verified. This verification algorithm is described by reference to . schematically shows the verification method of the validity verifying portion in accordance with the seventeenth embodiment.

The document schema the document instance and the document element BreakHere that serves as the dividing point shown in are similar to those shown in . In the verification of the partial structure that excludes the portion equal to and lower than the document element BreakHere that is the dividing point the verification is carried out from the document element root in left to right depth first order. Then the existence of the dividing point namely the start tag and the end tag of the BreakHere element are confirmed. If there are the start tag and the end tag the verification continues without verifying the inside thereof. If not it is determined that there is no dividing point and the result of invalid is returned and the verification is completed. In the verification of the partial structure equal to and lower than the document element BreakHere that is the dividing point the generally used verification is implemented except that another portion is not verified.

A modification of the seventeenth embodiment is now described. As a modification of the seventeenth embodiment the document divider may extract and store the common portion in the document schema whenever the WSDL document is newly stored in the WSDL document instance memory . Such extracted portion may be used again in dividing the structured document. As an alternative modification the dividing point may be narrowed down by sampling the verification information of the input output document if there are multiple common portions. For example in such sampled multiple documents if the digest values of multiple document portions corresponding to the common portion are always aligned and there is no change in one document an upper element that includes the common portion may be divided.

An eighteenth embodiment of the invention will be described. illustrates a system configuration in accordance with the eighteenth embodiment. In a system the travel agency side system the travel planning company side system the first hotel side system the second hotel side system and the linkage service side system are connected on the network . A BPEL4WS document instance memory is additionally provided in a document verification service .

In the present embodiment the structured document used in the inventory inquiry and reservation arrangement of a package tour is verified by the document verification service system in a similar manner as described in the seventeenth embodiment. The difference from the seventeenth embodiment is that a series of procedure of in the inventory inquiry and reservation arrangement initiated by the inquiry of the travel agency side system is mounted on the linkage service side system and are written with the use of BPEL4WS. Accordingly in accordance with the present embodiment messages are exchanged with the use of the linkage service side system that serves as a hub and a series of procedure are carried out.

As a division method of the structured document the method of extracting a feature from multiple document schemata and the method of specifying a possibility of change in the structured document from the structured document in a similar manner as described in the seventeenth embodiment. What is different is that the document schema in the linked services is used as a document schema. The document schema used in a specific process scenario is employed from among those used in a TravelXML demonstration experiment. In this example those document schemata have a common portion and the common portion is extracted for dividing the structured document. A method of finding the common portion of the document schemata utilizes the WSDL document referred to by the VPEL4WS document which uses BPEL4WS in the description of linkage. Here the dividing point is specified in a similar manner as described in the sixteenth embodiment. Such divided structured document is verified and calculated in a similar manner as described in the sixteenth embodiment.

As a modification of the eighteenth embodiment the division is further narrowed down by sampling the structured document which is exchanged between the linked services with a BPEL4WS execution process that serves as a hub for linkage. This is now mentioned to cover the description.

Hereinafter the functional portions are described. However the same components as those of the seventeenth embodiment will be omitted. The BPEL4WS document instance memory has a function of storing the BPEL4WS document to be used in the linkage service side. The BPEL4WS document as will be described later is used for dividing the structured document to be verified. The document divider has a function of focusing on the structural feature of multiple document schemata and determining the dividing point of the structured document to be verified. Here multiple document schemata is a document schema written in multiple WSDL documents linked to one BPEL4WS document stored in the BPEL4WS document instance memory see . illustrates a schematic view of the BPEL4WS document instance in accordance with the eighteenth embodiment.

The document divider extracts the common portion of the document schema. If the document portion of the structured document to be verified is included in the common portion the document portion is divided. The reason the common portion is used is similar as described in the sixteenth embodiment.

As a modification of the above described embodiment in a case where there are multiple common portions the information for verification included in a message input into or output from the linkage service side system is sampled for narrowing down the dividing point. For example in multiple documents from which samples are taken if the digest values of the multiple document portions that correspond to the common portion are always aligned and there is no change an upper element that includes the common portion may be divided.

A nineteenth embodiment will be described. illustrates a system configuration in accordance with the nineteenth embodiment of the invention. In a system the service systems of a travel agency side system a car rental company side system a hotel side system and a railroad company side system are connected to the network . In a document verification service a document change reference information memory is additionally provided.

In the present embodiment a method of dividing the structured document employs a method of notifying to a verification process from among the processes that the respective services open whether or not there is a change. The verification method and the method of performing a given calculation on such divided structured document are similar as described in the sixteenth embodiment. Here as a modification of the nineteenth embodiment open to the registry extension of a service description language specifically WSDL and a dedicated inquiry interface are now mentioned to cover the description. The message flow is pursued and sampled for narrowing down the dividing point which is also mentioned now.

The respective systems through related to a series of processes request the document verification service system for verification of the itinerary. Here in the present embodiment the systems through follows an instruction from the travel agency before receiving the itinerary and have a knowledge of the system in the next process. The processes are respectively mounted on the respective systems so that receive the itinerary and pass onto the next process.

Hereinafter the respective functional portions are described. The same components as described in the above embodiments are omitted. The document schema memory employed in the present embodiment stores the document schema of the itinerary. The document change reference information memory stores the information having a set of the element name and an edit type a reserved word that represents change or reference of the document schema of the itinerary with respect to the document element changed or referred to by each system. Here the change includes addition or deletion of the document element and additional description of the content or overwriting. This information is written in an XML format together with the information for verification in the header portion of the verification request message sent from each system.

The document divider employed in the present embodiment divides the structured document according to the information in the document change reference information memory . If an identical portion in the information stored in the document change reference information memory is referred to by multiple systems it is possible to improve the efficiency of the verification process by dividing this portion in the structured document. On the other hand if an identical portion is changed in the structured document in the multiple systems that portion is divided. Such change no longer influences to another portion thereby enabling the efficiency of the verification process to be improved.

As a modification of the present embodiment when each system registers the service in a registry service to open the service the document change reference information may also be registered simultaneously so that the document verification service system may confirm the registry and divide the structured document according to the document change reference information to be changed. In particular in a case where there is a document schema of industry standard such as the travel XML the message having an identical type is managed uniformly on the basis of the document schema of industry standard even in multiple systems managed in different organizations. In such a case in view of the use of the network bandwidth it is preferable in some cases that the document verification service system should refer to the registry service according to the need instead of the document change reference information being included in the message received by the document verification service system

As an alternative modification the service description language that defines the input and output of each service is extended may be extended to describe the document change reference information. For example in WSDL the document structure and the type of content of an input message and an output message can be defined as a message element. However WSDL may be extended such that correspondence between a new element that represents the document change reference information and the message element can be described. As an alternative modification each system may have a dedicated interface that inquires the document change reference information such that the document verification service system inquires about the document change reference information for each system as necessary.

As a further alternative modification the document verification service system may take a sample from the message that issues the verification request and may narrow down the dividing point according to the level of the change in the structured document which actually occurs in a series of processes. For example in a case where there is a possibility that one system changes one portion of the structured document but the change is not made every time the portion is represented as change as the document change reference information. In such a case if there is a small possibility of the change in the structured document it is more effective in some cases in view of the process period for the division that the verification process is implemented without dividing the portion in the structured document.

As described heretofore in accordance with the fifteenth through nineteenth embodiments of the invention the structured document is divided according to the structural feature of the document schema and the document process and the information for verification is generated in each portion to be used for verification. By this as far as the structured document is changed the verification process may be implemented on the document only once. If the structured document is changed only the portion having a change has to be verified again thereby improving the efficiency of the verification process in the structured document. It is therefor possible to provide a document verification apparatus a document verification method and a program product therefor by which processing efficiency is improved by alleviating workloads of a verification process implemented on an electronic document.

The foregoing description of the embodiments of the present invention has been provided for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Obviously many modifications and variations will be apparent to practitioners skilled in the art. The embodiments were chosen and described in order to best explain the principles of the invention and its practical applications thereby enabling others skilled in the art to understand the invention for various embodiments and with the various modifications as are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the following claims and their equivalents.

