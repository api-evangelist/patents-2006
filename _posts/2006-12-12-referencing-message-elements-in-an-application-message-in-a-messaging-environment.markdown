---

title: Referencing message elements in an application message in a messaging environment
abstract: Methods, systems, and products are disclosed for referencing message elements in an application message in a messaging environment that include: establishing a message model on a computer, the message model comprising message element specifications that each specify a message element for storing data in the application messages, each message element specification comprising element characteristics; creating, by a messaging module on the computer in dependence upon the message model, a message element designator map that maps a separate message element designator to each message element specified by the message model; receiving, in the messaging module from a requesting module, a request for an element designator for a specific message element identified by the element characteristics for the specific message element; and providing, by the messaging module to the requesting module, the requested element designator in dependence upon the message element designator map and the element characteristics for the specific message element.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08327381&OS=08327381&RS=08327381
owner: International Business Machines Corporation
number: 08327381
owner_city: Armonk
owner_country: US
publication_date: 20061212
---
The field of the invention is data processing or more specifically methods systems and products for referencing message elements in an application message in a messaging environment.

Messaging environments are generally available to provide data communication between message sending devices and message receiving devices using application messages. An application message is a quantity of data organized into one or more data fields and is passed from a message producer installed on a message sending device to a message consumer installed on a message receiving device. An application message is a form of message recognized by application software operating in the application layer of a data communication protocol stack as contrasted for example with a transport message or network message which are forms of messages recognized in the transport layer and the network layer respectively. An application message may represent for example numeric or textual information images encrypted information and computer program instructions.

For an example of an application message consider a financial market data environment. A financial market data environment is a data processing environment used to communicate information about financial markets and participants in financial markets. In a financial market data environment an application message is commonly referred to as a tick and includes financial market data such as for example financial quotes or financial news. Financial quotes include bid and ask prices for any given financial security. A bid refers to the highest price a buyer is willing to pay for a security. An ask refers to the lowest price a seller is willing to accept for a security.

Application messages in current messaging environments are typically created and interpreted according to a message model. The message model specifies the message format used to interpret the application messages. An application message is composed of one or more message elements each message element is a message field or a message data structure composed of multiple message fields or other data structures. The message model includes information regarding the format and other characteristics of each of the message elements in application messages. For example the message model may specify the type of each message element the offset of each message element from the beginning of the message the size of each message element and the name of each message element.

When an application accesses a particular message element of an application message the application typically utilizes a messaging module that performs messaging functions and interacts with the message model. Such messaging functions may include for example retrieving a value for a particular message element in an application message or storing a value for a particular message element in an application message. When a messaging module receives a request from an application to perform a messaging function using a message element the messaging module retrieves information about the message element from the message model. To retrieve information about a particular message element from a message model the messaging module typically searches the message model for the specification of the particular message element and retrieves the format data or other characteristics from the specification in the message model used to perform the requested messaging function. Typically the messaging module performs the search through the message model using string operations which are expensive operations that often consume more computer resource than other operations such as for example numeric operations. Because the messaging module often searches the message model many times for specification data regarding the same message element large quantities of computer resources are typically consumed searching for the same data over and over again. As such readers will therefore appreciate that room for improvement exists for referencing message elements in an application message in a messaging environment.

Methods systems and products are disclosed for referencing message elements in an application message in a messaging environment that include establishing a message model on a computer the message model specifying a message format for interpreting application messages the message model comprising one or more message element specifications each message element specification specifying a message element for storing data in the application messages each message element specification comprising element characteristics creating by a messaging module on the computer in dependence upon the message model a message element designator map the message element designator map mapping a separate message element designator to each message element specified by the message model receiving in the messaging module from a requesting module a request for an element designator for a specific message element the specific message element identified in the request by the element characteristics for the specific message element and providing by the messaging module to the requesting module the requested element designator in dependence upon the message element designator map and the element characteristics for the specific message element.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods systems and products for referencing message elements in an application message in a messaging environment according to embodiments of the present invention are described with reference to the accompanying drawings beginning with . sets forth a network diagram illustrating an exemplary system for referencing message elements in an application message in a messaging environment according to embodiments of the present invention. The system of operates generally to referencing message elements in an application message in a messaging environment according to embodiments of the present invention as follows A message model is established on a computer. The message model specifies a message format for interpreting application messages. The message model includes one or more message element specifications. Each message element specification specifies a message element for storing data in the application messages. Each message element specification includes element characteristics. A messaging module on the computer creates a message element designator map in dependence upon the message model . The message element designator map maps a separate message element designator to each message element specified by the message model . The messaging module receives a request from a requesting module for an element designator for a specific message element. The specific message element identified in the request by the element characteristics for the specific message element. The messaging module provides the requested element designator to the requesting module in dependence upon the message element designator map and the element characteristics for the specific message element. In the example of the computer is implemented as either a feed adapter or a subscribing client device . In the example of the requesting module is any software component that requests services from a messaging module installed on the feed adapter or the messaging module installed on the subscribing client device .

The high speed low latency data communications environment illustrated in includes a high speed low latency data communications network . The network includes a feed adapter a stream administration server and a subscribing client device as well as the infrastructure for connecting such devices together for data communications. The network of is termed high speed low latency because the application messages sent between devices connected to the network on message streams administered by the stream administration server bypass the stream administration server . For example the application messages on the message stream from the feed adapter to the subscribing client device bypass the stream administration server . Although such messages are not delayed for processing in the stream administration server the stream administration server retains administration of the stream between devices connected to the high speed low latency data communications network .

Further contributing to the high speed low latency nature of network readers will note that the network does not include a router that is a computer networking device whose primary function is to forward data packets across a network toward their destinations. Rather each device provides its own routing functionality for data communication through a direct connection with the other devices connected to the network . Because the network does not include a computer networking device dedicated to routing data packets the network of may be referred to as a minimally routed network. Although the exemplary network illustrated in does not include a router such a minimally routed network is for explanation only. In fact some high speed low latency networks useful in referencing message elements in an application message in a messaging environment according to embodiments of the present invention may include a router.

The high speed low latency data communications environment depicted in includes a message stream . A message stream is a data communication channel between a communications endpoint of a sending device and a communications endpoint of at least one receiving device. A communications endpoint is composed of a network address and a port for a sending device or a receiving device. A message stream may be implemented as a multicast data communication channel. In a multicast data communication channel a one to many relationship exists between a destination address for a message and the communication endpoints of receiving devices. That is each destination address identifies a set of communication endpoints for receiving devices to which each message of the stream is replicated. A multicast data communication channel may be implemented using for example the User Datagram Protocol UDP and the Internet Protocol IP or the Pragmatic General Multicast PGM protocol. In addition to a multicast data communication channel the message stream may be implemented as a unicast data communication channel. In a unicast data communication channel a one to one relationship exists between a destination address for a message and a communication endpoint of a receiving device. That is each destination address uniquely identifies a single communication endpoint of single receiving device. A unicast data communication channel may be implemented using for example the Transmission Control Protocol TCP and IP.

The exemplary system of includes a stream administration server connected to the high speed low latency data communications network through a wireline connection . The stream administration server of is a computer device having installed upon it a stream administration module an authentication module an authorization module and an authorization policy . A stream administration module is a software component that includes a set of computer program instructions configured for brokering establishment of a message stream from the feed adapter to the subscribing client device . The message stream of provides the application messages from the feed adapter to the subscribing client device . The stream administration module may broker the establishment of the message stream by receiving a request from the subscribing client device to initialize a message subscription authenticating the subscribing client device authorizing the subscribing client device to receive application messages from the feed adapter on the message stream and providing to the subscribing client device a data communications endpoint data for the message stream from the feed adapter . In addition to brokering the establishment of the message stream the stream administration module also includes a set of computer program instructions for performing other administrative functions in the messaging environment such as for example notifying the feed adapter to start publishing messages on the message stream in response to a receiving a publication notification from the subscribing client device .

The authentication module of is a set of computer program instructions capable of providing authentication security services to the stream administration module through an exposed authentication application programming interface API . Authentication is a process of verifying the identity of an entity. In the exemplary system of the authentication module verifies the identity of the subscribing client device . The authentication module may provide authentication security services using a variety of security infrastructures such as for example shared secret key infrastructure or a public key infrastructure.

The authorization module of is a set of computer program instructions capable of providing authorization security services to the stream administration module through an exposed authorization API . Authorization is a process of only allowing resources to be used by resource consumers that have been granted authority to use the resources. In the example of the authorization module identifies the application messages that the subscribing client device is authorized to receive on the message stream . The authorization module of provides authorization security services using an authorization policy . The authorization policy is a set of rules governing the privileges of authenticated entities to send or receive application messages on a message stream. In a financial market data environment for example an authenticated entity may be authorized to receive application messages that include financial quotes for some financial securities but not other securities. The authorization policy may grant privileges on the basis of an individual entity or an entity s membership in a group.

In the exemplary system of feed adapter is connected to the high speed low latency data communications network through a wireline connection . The feed adapter is a computer device having the capabilities of converting application messages received on a feed adapter input stream having a first format to application messages having a second format for transmission on a feed adapter output stream to subscribing client devices. The feed adapter input stream is a message stream from a feed source to the feed adapter . The feed adapter output stream is a message stream administered by the stream administration server from the feed adapter to the subscribing client device .

In the example of the feed adapter receives application messages on the feed adapter input stream from a feed source . The feed source is a computer device capable of aggregating data into application messages and transmitting the messages to a feed adapter. In a financial market data environment for example a feed source may be implemented as a feed source controlled by the Options Price Reporting Authority OPRA . OPRA is the securities information processor for financial market information generated by the trading of securities options in the United States. The core information that OPRA disseminates is last sale reports and quotations. Other examples of feed sources in financial market data environment may include feed sources controlled by the Consolidated Tape Association CTA or The Nasdaq Stock Market Inc. The CTA oversees the dissemination of real time trade and quote information in New York Stock Exchange and American Stock Exchange listed securities. The Nasdaq Stock Market Inc. operates the NASDAQ Market Centers which is an electronic screen based equity securities market in the United States. In a financial market data environment a feed adapter input stream is referred to as a financial market data feed. 

The feed adapter of has installed upon it a conversion module a converter table conversion function library a messaging module a message model messaging middleware and a transport engine . The conversion module is a set of computer program instructions for converting application messages received on the feed adapter input stream having a first format into application messages having a second format for transmission to subscribing devices on the feed adapter output stream .

The conversion module converts application messages from the first format to the second format according to the converter table . The converter table of is a data structure that specifies the converter functions capable of converting the application message from one format to another format. Utilizing multiple converter tables the conversion module may convert messages from a variety of input formats to a variety of output formats. In the example of the converter table specifies the converter functions capable of converting the application message received from the feed adapter input stream having the first format to application messages having the second format for transmission to subscribing client devices on the feed adapter output stream . The converter table of may be implemented using a structured document such as for example an eXtensible Markup Language XML document.

The conversion function library of is a loadable software module that contains one or more converter functions capable of converting data fields in an application message from one format to another format or converting values of data fields from one value to another value. The converter functions contained in the conversion function library may for example convert a 16 bit integer to a 32 bit integer convert a number stored in a string field to a 64 bit double floating point value increase the value of one data field by one or any other conversion as will occur to those of skill in the art. The conversion module accesses the converter functions through a set of converter function APIs exposed by the converter functions of the conversion function library . In the example of the conversion function library may be implemented as dynamically linked libraries available to the conversion module at runtime statically linked libraries linked into the conversion module at compile time dynamically loaded Java classes or any other implementation as will occur to those of skill in the art.

In the example of the application messages transmitted by the feed adapter have a format specified in a message model on the feed adapter . The message model is established on the feed adapter and a similar message model is established on the subscribing client device by the stream administration server when the stream administration server brokers a message stream to a subscribing client device. A message model may be implemented using a structured document such as for example an XML document a Java object C object or any other implementation as will occur to those of skill in the art.

The message model is metadata that defines the structure and the format used to create access and manipulate the application messages converted from the application messages not shown received from the feed source . That is the message model specifies a message format for interpreting application messages and includes one or more message element specifications. Each message element specification specifies a message element for storing data in the application messages and includes element characteristics of the message element. A message element is a simple or complex data structure contained in an application message. A simple message element is a data field in an application message such as for example a field for storing a person s name or a field for storing a person s age. A complex message element is data structure consisting of two or more data fields. For example a complex message element may be implemented as an address data structure whose constituent data fields consist of a street field a city field a state field and a zip code field. In such an example the complex message element consisted of simple message elements but readers will note that complex message elements may also consist of other complex message elements. For example a complex message element representing information about a person may include the exemplary complex message element above representing a person s address.

In the example of the conversion module and the converter functions of the conversion function library process the data contained in the application messages using the messaging module . The messaging module is a software module that includes a set of functions for creating accessing and manipulating messages according to a message model . The messaging module is accessible to the conversion module the converter functions of the conversion function library and the messaging middleware through a message API exposed by the messaging module .

The messaging module of includes a set of computer program instructions for referencing message elements in an application message in a messaging environment according to embodiments of the present invention. The messaging module operates generally for referencing message elements in an application message in a messaging environment according to embodiments of the present invention by creating on the computer in dependence upon the message model a message element designator map the message element designator map mapping a separate message element designator to each message element specified by the message model receiving a request for an element designator for a specific message element from a requesting module the specific message element identified in the request by the element characteristics for the specific message element and providing the requested element designator to the requesting module in dependence upon the message element designator map and the element characteristics for the specific message element. The requesting module is a software component such as for example the conversion module the converter functions of the conversion function library and the messaging middleware that request message access services from the messaging module .

In the exemplary system of the feed adapter has created upon it a message element designator map . The message element designator map of is a data structure that maps a separate message element designator to each message element specified by the message model . The message element designator map of maps a message element designator to a message element specified by the message model by mapping a message element designator to the element characteristics specified in the message model for a particular message element. A message element designator is a unique identifier used to reference a message element in an application message or metadata describing the message element. The messaging module uses the message element designator to directly retrieve the specification data for a particular message element from the map without searching through the message model . The ability to directly retrieve specification data such as for example format type offset size and other characteristics for a message element advantageously allows the messaging module to process application message access requests from requesting modules using less computer resources than sequentially searching through the message model for the specification data. As such the message module creates the message element designator map when the feed adapter initializes and uses the message element designator map during runtime instead of the message model . In the example of the message element designator map may be implemented as a table a Java object a C object a set of arrays or any other implementation as will occur to those of skill in the art. The message element designator may be implemented as an index number into the map a pointer to a computer memory location storing a portion of the map or any other implementation as will occur to those of skill in the art.

Before the conversion module of performs data processing on the application messages the conversion module receives application messages not shown having a first format from the feed source . The conversion module of may receive the source stream messages through a receiving transport engine not shown of the feed adapter . The receiving transport engine is a software module that operates in the transport layer of the network stack and may be implemented according to the TCP IP protocols UDP IP protocols the PGM protocol or any other data communication protocol as will occur to those of skill in the art. The receiving transport engine may provide the received application messages directly to the conversion module or to the messaging middleware which in turn provides the source stream messages to the conversion module .

After the conversion module of performs data processing on the application messages received from the feed source the conversion module provides the application messages having the second format to the messaging middleware . The messaging middleware of is a software component that provides high availability services between the feed adapter any backup feed adapter that may exist the subscribing client device and the feed source . In addition to providing high availability services the messaging middleware of may also provide administration services for the application messages such as for example inserting sequence numbers into the messages calculating proxies for the contents of the application messages used in filtering the messages ensuring application messages are transmitted on the proper message stream and providing the application messages to a transport engine. The application messages provided to the transport engine are received from the conversion module . The conversion module interacts with the messaging middleware through a messaging middleware API exposed by the messaging middleware .

The transport engine of is a software component operating in the transport and network layers of the OSI protocol stack promulgated by the International Organization for Standardization. The transport engine provides data communications services between network connected devices. The transport engine may be implemented according to the TCP IP protocols UDP IP protocols PGM protocol or any other data communications protocols as will occur to those of skill in the art. The transport engine is a software module that includes a set of computer program instructions for transmitting application messages to the subscribing client device . The transport engine of may transmit the application messages by receiving the application messages from the messaging middleware encapsulating the application messages provided by the messaging middleware into transport packets and transmitting the packets through the message stream to the subscribing client device . The messaging middleware operates the transport engine through a transport API exposed by the transport engine .

The subscribing client device in exemplary system of connects to the high speed low latency data communications network through a wireline connection . The subscribing client device of is a computer device capable of subscribing to the message streams transmitted by various feed adapters. In a financial market data environment for example a subscribing client device may subscribe to a tick to receive the bid and ask prices for a particular security on a message stream provided by a feed adapter controlled by a financial securities broker.

In the example of the subscribing client device has installed upon it an application a messaging module messaging middleware a stream administration library and a transport engine . The subscribing client device also has created upon it a message element designator map and a message model that is similar to the message element designator map and the message model created on the feed adapter . The application is a software component that processes data contained in the application messages received from the feed adapter . The application may process the data for utilization by the subscribing client device itself for contributing the data to another feed adapter or for contributing the data to some other device. In a financial market data environment the application installed on the subscribing client device may be a program trading application that buys or sells financial securities based on the quoted prices contained in ticks. The application may also be a value adding application that contributes information to a tick such as for example the best bid and ask prices for a particular security that is not typically included in the ticks provided by the feed source . The subscribing client device may then transmit the ticks to a feed adapter for resale to other subscribing client devices.

The application processes the data contained in the application messages using the messaging module . The messaging module is software module that includes a set of functions for creating accessing and manipulating messages according to the message model that is installed on the subscribing client device . The messaging module is accessible to the application through a message API exposed by the messaging module .

The messaging module of includes a set of computer program instructions for referencing message elements in an application message in a messaging environment according to embodiments of the present invention. The messaging module operates generally for referencing message elements in an application message in a messaging environment according to embodiments of the present invention by creating on the computer in dependence upon the message model a message element designator map the message element designator map mapping a separate message element designator to each message element specified by the message model receiving a request for an element designator for a specific message element from a requesting module the specific message element identified in the request by the element characteristics for the specific message element and providing the requested element designator to the requesting module in dependence upon the message element designator map and the element characteristics for the specific message element. The requesting module is a software component such as for example the application the stream administration library and the messaging middleware that request message access services from the messaging module .

The communications between the subscribing client device and the stream administration server may be implemented using a stream administration library . The stream administration library is a set of functions contained in dynamically linked libraries or statically linked libraries available to the application through a stream administration library API . Through the stream administration library the subscribing client device of may request to subscribe to messages from a feed adapter modify an existing message subscription or cancel a subscription. Functions of the stream administration library used by the application may communicate with the stream administration server through network by calling member methods of a CORBA object calling member methods of remote objects using the Java Remote Method Invocation RMI API using web services or any other communication implementation as will occur to those of skill in the art.

 CORBA refers to the Common Object Request Broker Architecture a computer industry specifications for interoperable enterprise applications produced by the Object Management Group OMG . CORBA is a standard for remote procedure invocation first published by the OMG in 1991. CORBA can be considered a kind of object oriented way of making remote procedure calls although CORBA supports features that do not exist in conventional RPC. CORBA uses a declarative language the Interface Definition Language IDL to describe an object s interface. Interface descriptions in IDL are compiled to generate stubs for the client side and skeletons on the server side. Using this generated code remote method invocations effected in object oriented programming languages such as C or Java look like invocations of local member methods in local objects.

The Java Remote Method Invocation API is a Java application programming interface for performing remote procedural calls published by Sun Microsystems . The Java RMI API is an object oriented way of making remote procedure calls between Java objects existing in separate Java Virtual Machines that typically run on separate computers. The Java RMI API uses a remote procedure object interface to describe remote objects that reside on the server. Remote procedure object interfaces are published in an RMI registry where Java clients can obtain a reference to the remote interface of a remote Java object. Using compiled stubs for the client side and skeletons on the server side to provide the network connection operations the Java RMI allows a Java client to access a remote Java object just like any other local Java object.

Before the application processes the data contained in the application messages the application receives the messages from the messaging middleware which in turn receives the application messages from the feed adapter through the transport engine . The messaging middleware is a software component that provides high availability services between the subscribing client device the feed adapter any backup feed adapters and the stream administration module . The application and the stream administration library interact with the messaging middleware through a messaging middleware API .

The transport engine of is a software component operating in the transport and network layers of the OSI protocol stack promulgated by the International Organization for Standardization. The transport engine provides data communications services between network connected devices. The transport engine may be implemented according to the TCP IP protocols UDP IP protocols PGM protocol or any other data communications protocols as will occur to those of skill in the art. The transport engine is a software component for receiving application messages from the feed adapter . The transport engine receives the application messages by receiving transport packets through the message stream from the feed adapter unencapsulating the application messages from the received packets and provides the application messages to messaging middleware of the subscribing client device . In the example of the messaging middleware operates the transport engine through a transport API exposed by the transport engine .

The servers and other devices illustrated in the exemplary system of are for explanation not for limitation. Devices useful in referencing message elements in an application message in a messaging environment may be implemented using general purpose computers such as for example computer servers or workstations hand held computer devices such as for example Personal Digital Assistants PDAs or mobile phones or any other automated computing machinery configured for data processing according to embodiments of the present invention as will occur to those of skill in the art.

The arrangement of servers and other devices making up the exemplary system illustrated in are for explanation not for limitation. Although the connections to the network of are depicted and described in terms of wireline connections readers will note that wireless connections may also be useful according to various embodiments of the present invention. Furthermore data processing systems useful according to various embodiments of the present invention may include additional servers routers other devices and peer to peer architectures not shown in as will occur to those of skill in the art. Networks in such data processing systems may support many data communications protocols including for example Transmission Control Protocol TCP Internet Protocol IP HyperText Transfer Protocol HTTP Wireless Access Protocol WAP Handheld Device Transport Protocol HDTP and others as will occur to those of skill in the art. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

Referencing message elements in an application message in a messaging environment in accordance with the present invention in some embodiments may be implemented with one or more subscribing client devices stream administration servers and feed adapters. These devices and servers are in turn implemented to some extent at least as computers that is automated computing machinery. For further explanation therefore sets forth a block diagram of automated computing machinery comprising an exemplary subscribing client device useful in referencing message elements in an application message in a messaging environment according to embodiments of the present invention. The subscribing client device of includes at least one computer processor or CPU as well as random access memory RAM which is connected through a high speed memory bus and bus adapter to processor and to other components of the subscribing client device.

Stored in RAM are an application messages message model a messaging module a message element designator map a messaging middleware a stream administration library and a transport engine . Each message is a quantity of data that includes one or more data fields and is transmitted from one device to another on a message stream. As mentioned above a message may represent numeric or textual information images encrypted information computer program instructions and so on. In a financial market data environment for example a message is commonly referred to as a tick and represents financial market data such as for example financial quotes or financial news. Each message may be implemented using a structured document such as for example an XML document a Java object C object or any other implementation as will occur to those of skill in the art. The message model is metadata that defines the structure and format of the messages . The message model may also be implemented using a structured document such as for example an XML document a Java object C object or any other implementation as will occur to those of skill in the art. The message element designator map of is a data structure that maps a separate message element designator for each message element specified by the message model . In the example of the message element designator map may be implemented as a table a Java object a C object a set of arrays or any other implementation as will occur to those of skill in the art. The application the messaging module the messaging middleware the stream administration library and the transport engine illustrated in are software components that is computer program instructions that operate as described above with reference to .

Also stored in RAM is an operating system . Operating systems useful in subscribing client devices according to embodiments of the present invention include UNIX Linux Microsoft NT IBM s AIX IBM s i5 OS and others as will occur to those of skill in the art. The operating system the application the messages the message model the messaging module the message element designator map the messaging middleware and the transport engine in the example of are shown in RAM but many components of such software typically are stored in non volatile memory also for example on a disk drive .

The exemplary subscribing client device of includes bus adapter a computer hardware component that contains drive electronics for high speed buses the front side bus the video bus and the memory bus as well as drive electronics for the slower expansion bus . Examples of bus adapters useful in subscribing client devices useful according to embodiments of the present invention include the Intel Northbridge the Intel Memory Controller Hub the Intel Southbridge and the Intel I O Controller Hub. Examples of expansion buses useful in subscribing client devices useful according to embodiments of the present invention may include Peripheral Component Interconnect PCI buses and PCI Express PCIe buses.

The exemplary subscribing client device of also includes disk drive adapter coupled through expansion bus and bus adapter to processor and other components of the exemplary subscribing client device . Disk drive adapter connects non volatile data storage to the exemplary subscribing client device in the form of disk drive . Disk drive adapters useful in subscribing client devices include Integrated Drive Electronics IDE adapters Small Computer System Interface SCSI adapters and others as will occur to those of skill in the art. In addition non volatile computer memory may be implemented for a subscribing client device as an optical disk drive electrically erasable programmable read only memory so called EEPROM or Flash memory RAM drives and so on as will occur to those of skill in the art.

The exemplary subscribing client device of includes one or more input output I O adapters . I O adapters in subscribing client devices implement user oriented input output through for example software drivers and computer hardware for controlling output to display devices such as computer display screens as well as user input from user input devices such as keyboards and mice. The exemplary subscribing client device of includes a video adapter which is an example of an I O adapter specially designed for graphic output to a display device such as a display screen or computer monitor. Video adapter is connected to processor through a high speed video bus bus adapter and the front side bus which is also a high speed bus.

The exemplary subscribing client device of includes a communications adapter for data communications with other computers and for data communications with a high speed low latency data communications network . Such data communications may be carried out through Ethernet connections through external buses such as a Universal Serial Bus USB through data communications networks such as IP data communications networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a data communications network. Examples of communications adapters useful for referencing message elements in an application message in a messaging environment according to embodiments of the present invention include modems for wired dial up communications IEEE 802.3 Ethernet adapters for wired data communications network communications and IEEE 802.11b adapters for wireless data communications network communications.

Although is discussed with reference to exemplary subscribing client devices readers will note that automated computing machinery used to implement exemplary stream administration servers and exemplary feed adapters useful in referencing message elements in an application message in a messaging environment according to embodiments of the present invention are similar to the exemplary subscribing client device of . That is such exemplary stream administration servers and feed adapters include one or more processors bus adapters buses RAM video adapters communications adapters I O adapters disk drive adapters and other components similar to the exemplary subscribing client device of as will occur to those of skill in the art.

For further explanation sets forth a flowchart illustrating an exemplary method of referencing message elements in an application message in a messaging environment according to embodiments of the present invention. The method of includes brokering by a stream administration server establishment of a message stream from a feed adapter to a computer such as for example a client subscribing device. The message stream provides the application messages from the feed adapter to the computer. The message stream represents a data communication channel between a communications endpoint of a feed adapter and a communications endpoint of the computer. A message stream may be implemented as a multicast data communication channel using the UDP IP protocols or a unicast data communication channel using TCP IP protocols as discussed above with reference to .

Brokering by a stream administration server establishment of a message stream from a feed adapter to a computer according to the method of may be carried out by receiving a subscription request from a requesting module on the computer to subscribe to messages from a feed adapter. The subscription request may be implemented as an XML document a call to a member method of a RMI object on the computer or any other implementation as will occur to those of skill in the art. The subscription request may include topics of the messages that the requesting module requests to receive from the feed adapter. A topic represents the characteristics of the messages that the requesting module requests. Using a topic a requesting module may specify the group of messages for receipt from the feed adapter. In a financial market data environment for example a requesting module on a computer such as for example a client subscribing device may use a topic to request ticks from an OPRA feed source that contains quotes of an IBM option traded on the Chicago Board Options Exchange CBOE that includes the best bid and best ask for the IBM option on the CBOE.

In the example of brokering by a stream administration server establishment of a message stream from the feed adapter to the computer may include providing the message receiving device with a destination address for the feed adapter. The destination address for the feed adapter is a multicast address or a unicast address used by the requesting module on the computer to listen for messages from a feed adapter. Using the destination address provided by the stream administration server the requesting module may establish the message stream from the feed adapter to the computer.

Before the stream administration server provides the destination address for the feed adapter the stream administration server in the example of may perform several security services to ensure that the requesting module on the computer only receives messages from the feed adapter for which the computer is authorized to receive. In the method of brokering by a stream administration server establishment of a message stream from the feed adapter to the computer may also be carried out by authenticating the requesting module on the computer and authorizing the requesting module to receive messages from the feed adapter on the message stream . Authenticating the requesting module may be carried out by verifying client security credentials provided by the requesting module with the subscription request. The client security credentials may be implemented as a digital signature in a public key infrastructure a security token or any other security data as will occur to those of skill in the art for authenticating the identity of the originator of the subscription request. Authorizing the requesting module to receive messages from the feed adapter on the message stream may be carried out by identifying the privileges associated with the authenticated requesting module in dependence upon an authorization policy. An authorization policy is a set of rules governing the privileges of authenticated requesting module requesting to receive data from a feed adapter.

The method of also includes establishing a message model on the computer. The message model is metadata that defines the structure and the format used to create access and manipulate application messages on the computer. That is the message model specifies a message format for interpreting application messages. The message model of includes one or more message element specifications . Each message element specification is metadata that specifies a message element for storing data in an application message. Each message element specification of includes element characteristics . The element characteristics describe the attributes of the message elements in an application message. In the example of the element characteristics of each message element specification include an element name an element size and an element type . The element name specifies a description for each message element specified by the message element specifications . The element size specifies the size of each message element specified by the message element specifications . The element type specifies the type of each message element specified by the message element specifications . Typically the message model of is established on the computer by the stream administration server when the stream administration server brokers the message stream .

As mentioned above the message model of may be implemented using a structured document such as for example an eXtensible Markup Language XML document. For further explanation consider an exemplary message model useful in referencing message elements in an application message in a messaging environment according to embodiments of the present invention. Such an exemplary message model may be implemented in XML as follows 

In the example above lines and contain markup tags that denote the beginning and the end respectively of the exemplary message model. Lines through implement a message element specification for a message element for storing a person s name in an application message. Lines through implement a message element specification for a message element for storing a person s age in an application message. Lines through implement a message element specification for a message element for storing a person s address in an application message. The address message element specification implemented in lines through includes four message element specifications nested inside the address message element specification. Lines through implement a message element specification for a message element for storing a person s street of residence in an application message. Lines through implement a message element specification for a message element for storing a person s city of residence in an application message. Lines through implement a message element specification for a message element for storing a person s state of residence in an application message. Lines through implement a message element specification for a message element for storing a person s zip code in an application message. Readers will note that the exemplary message model above is for explanation and not for limitation. Other message models as will occur to those of skill in the art may also be useful in referencing message elements in an application message in a messaging environment according to embodiments of the present invention. Readers will also note that the XML implementation the markup tags and structure of the exemplary message model above is also for explanation and not for limitation. Many other implementations markup tags or structures may be used to implement message models useful according to embodiments of the present invention.

The method of includes creating by a messaging module on the computer in dependence upon the message model a message element designator map . The message element designator map of is a data structure that maps a separate message element designator to each message element specified by the message model . A message element designator is a unique identifier used to reference a message element in an application message or metadata describing the message element. The message element designator map of maps a message element designator to a message element specified by the message model by mapping a message element designator to the element characteristics specified in the message model for the particular message element. In addition to the characteristics specified in the message model the message element designator map may also include other characteristics such as for example an offset position from the beginning of an application message that the messaging module calculates using the characteristics specified in the message model .

The message element designator map in the example of is implemented as table. Readers will note however that other implementations such as for example a Java object or C object are also within the scope of the present invention. Each record in the message element designator map of represents a message element specified in the message model for storing data in application messages. In the example of each record of the map includes a message element designator the element name the size the element type and an element offset . The element name the size and the element type are the element characteristics from the message model as discussed above. The element offset of represents the element s offset position from the beginning of an application message and as mentioned above is calculated from the characteristics specified in the message model . The message element designator of represents a unique identifier used to reference a message element in an application message or metadata describing the message element. The message element designator may be implemented as an index for each record in the message element designator map or as a pointer to each record in the message element designator map . For further explanation consider the following exemplary message element designator map created from the exemplary message model described above 

The exemplary message element designator map above includes seven records one record for each message element specified by the exemplary message model above. The exemplary message element designator map above maps a separate message element designator to each message element specified by the exemplary message model above that may be used to reference the specified message element. Readers will note that the exemplary message element designator map above is for explanation and not for limitation. Other message element designator maps as will occur to those of skill in the art may also be useful in referencing message elements in an application message in a messaging environment according to embodiments of the present invention. Readers will also note that the table implementation and the table structure of the exemplary message element designator map above are also for explanation and not for limitation. Many other implementations or structures may also be used to implement message element designator maps useful according to embodiments of the present invention.

Readers will appreciate the advantage of referencing message elements using a message element designator when considering referencing the message elements using one of the element characteristics specified in the model. Referencing a message element using one of the characteristics specified in the message model requires the messaging module to search the message model often sequentially for the particular element characteristic such as for example the element name used to reference a message element. Searching the message model typically involves string operations that consume excessive amounts of computer resources and are slower compared to other numeric operations. When the message element designator is used to reference a message element the message module may quickly locate element characteristics pertaining to the message element in a message element designator map using fast numeric operators with the index numbers or pointers implementing the message element designator.

The messaging module may create a message element designator map according to the method of by parsing the message model for each message element specification retrieving the element characteristics from each message element specification and inserting the element characteristics into the message element designator map . When the messaging module inserts the element characteristics into the message element designator map the messaging module may explicitly associate a message element designator with the element characteristics such as for example associating an index number implementing the message element designator with the element characteristics. The messaging module may however implicitly specify a message element designator with the element characteristics using the structure of the map such as for example when the message element designator is implemented as a pointer to the record containing the element characteristics in a table implementing the map . The messaging module typically creates the message element designator map when the computer initializes or when the computer receives a new message model. Creating the map at startup or upon receiving a new message model advantageously allows the messaging module to only search through the entire message model once instead of each time the messaging module references message elements in application messages.

As mentioned above the message element designator map is typically created when the computer initializes on startup. Readers will also note that the message element designators are not typically mapped to message elements until the message element designator map is created. A requesting module that requests services from the messaging module therefore must query the message module for the message element designator for a particular message element before the requesting module gains the benefits of referencing the message element using the message element designator according to embodiments of the present invention.

The method of includes receiving in the messaging module from a requesting module a request for an element designator for a specific message element. The specific message element is identified in the request by the element characteristics for the specific message element. The request for the element designator for the specific message element may be implemented as an XML document a call to a function of an API for the requesting module or any other implementation as will occur to those of skill in the art. For example consider the following exemplary function in the API of the requesting module useful for receiving a request for an element designator for a specific message element according to embodiments of the present invention 

A requesting device may call the exemplary function request designator above to request an element designator for the message element identified by the element characteristic whose value matches the value for name. The exemplary function request designator returns the message element designator after executing the function. Readers will note that the exemplary function described above is for explanation and not for limitation. In fact other exemplary functions as will occur to those of skill in the art may also be useful in referencing message elements in an application message in a messaging environment according to embodiments of the present invention.

The method of also includes providing by the messaging module to the requesting module the requested element designator in dependence upon the message element designator map and the element characteristics for the specific message element. The requested element designator represents the message element designator mapped to the message element identified by the element characteristics . The messaging module may provide the requested element designator according to the method of by identifying in the map the message element designator for the message element having values for element characteristics that match the values for the element characteristics and transmitting the identified element designator to the requesting module. The messaging module may transmit the identified element designator to the requesting module by transmitting the requested element designator to the requesting module as a return value from a function called by the requesting module as in the exemplary request designator function above sending the requested element designator to the requesting module in an XML message using web services or any other implementation as will occur to those of skill in the art.

After the requesting module has the message element designator for a specific message element the requesting module may then reference the specific message element using the message element designator. Using the message element designator the requesting module may request a value for a message element in an application message. For further explanation therefore sets forth a flowchart illustrating a further exemplary method of referencing message elements in an application message in a messaging environment according to embodiments of the present invention that includes receiving by the messaging module from the requesting module a request for a value for the specific message element in an application message .

The method of is similar to the method of . That is the method of includes establishing a message model on a computer. The message model specifies a message format for interpreting application messages and includes one or more message element specifications . Each message element specification of specifies a message element for storing data in the application messages Each message element specification includes element characteristics consisting of an element name an element size and an element type . The method of is similar to the method of in that the method of also includes creating by a messaging module on the computer in dependence upon the message model a message element designator map the message element designator map mapping a separate message element designator to each message element specified by the message model receiving in the messaging module from a requesting module a request for an element designator for a specific message element the specific message element identified in the request by the element characteristics for the specific message element and providing by the messaging module to the requesting module the requested element designator in dependence upon the message element designator map and the element characteristics for the specific message element. The message element designator map of includes a message element designator the element name the element size the element type and the element offset .

The method of also includes receiving by the messaging module from the requesting module a request for a value for the specific message element in an application message . The specific message element is identified in the request for the value by the requested element designator . The request for the value for the specific message element in the application message may be implemented as an XML document a call to a function of an API for the requesting module or any other implementation as will occur to those of skill in the art. For example consider the following exemplary function in the API of the requesting module useful for receiving a request for a value for the specific message element in an application message according to embodiments of the present invention 

A requesting device may call the exemplary function request value above to request a value from the application message located at computer memory address identified by the value of msg. The particular element for which the value is requested is identified by the message element designator having a value that matches the value for dsg. The exemplary function request value returns the value for the message element in the application message after executing the function. Readers will note that the exemplary function described above is for explanation and not for limitation. In fact other exemplary functions as will occur to those of skill in the art may also be useful in referencing message elements in an application message in a messaging environment according to embodiments of the present invention.

The method of also includes providing by the messaging module to the requesting module the value for the specific message element in dependence upon the application message the requested element designator and the message element designator map . The messaging module may provide the value for the specific message element according to the method of by identifying in the map the value for the element offset associated with the value for the message element designator that matches the value for the requested element designator . The messaging module may then provide the value for the specific message element according to the method of by retrieving the value at the memory location specified by adding the identified value for the element offset to the address for the beginning of the message and transmitting the value to the requesting module. The messaging module may transmit the value to the requesting module by transmitting the value to the requesting module as a return value from a function called by the requesting module as in the exemplary request value function above sending the value to the requesting module in an XML message using web services or any other implementation as will occur to those of skill in the art.

In addition to using the message element designator to request a value for a message element in an application message the requesting module may use the message element designator to request to set a value for a message element in an application message. For further explanation therefore sets forth a flowchart illustrating a further exemplary method of referencing message elements in an application message in a messaging environment according to embodiments of the present invention that includes receiving by the messaging module from the requesting module a request to store a value for the specific message element in an application message .

The method of is similar to the method of . That is the method of includes establishing a message model on a computer. The message model specifies a message format for interpreting application messages and includes one or more message element specifications . Each message element specification of specifies a message element for storing data in the application messages Each message element specification includes element characteristics consisting of an element name an element size and an element type . The method of is similar to the method of in that the method of also includes creating by a messaging module on the computer in dependence upon the message model a message element designator map the message element designator map mapping a separate message element designator to each message element specified by the message model receiving in the messaging module from a requesting module a request for an element designator for a specific message element the specific message element identified in the request by the element characteristics for the specific message element and providing by the messaging module to the requesting module the requested element designator in dependence upon the message element designator map and the element characteristics for the specific message element. The message element designator map of includes a message element designator the element name the element size the element type and the element offset .

The method of also includes receiving by the messaging module from the requesting module a request to store a value for the specific message element in an application message . The specific message element is identified in the request to store the value by the requested element designator . The request to store the value for the specific message element in the application message may be implemented as an XML document a call to a function of an API for the requesting module or any other implementation as will occur to those of skill in the art. For example consider the following exemplary function in the API of the requesting module useful for receiving a request to store a value for the specific message element in an application message according to embodiments of the present invention 

A requesting device may call the exemplary function store value above to request to store the value of val in the application message located at computer memory address identified by the value for msg. The particular element of the message into which the value is stored is identified by the message element designator having a value that matches the value for dsg. The exemplary function store value returns an integer error code after executing the function to indicate whether the store value function successfully stored the value into the message. Readers will note that the exemplary function described above is for explanation and not for limitation. In fact other exemplary functions as will occur to those of skill in the art may also be useful in referencing message elements in an application message in a messaging environment according to embodiments of the present invention.

The method of also includes storing by the messaging module the value for the specific message element in the application message in dependence upon the requested element designator and the message element designator map . The messaging module may store the value for the specific message element in the application message according to the method of by identifying in the map the value for the element offset associated with the value for the message element designator that matches the value for the requested element designator . The messaging module may then store the value for the specific message element in the application message according to the method of by writing the value in the message at the memory location specified by adding the identified value for the element offset to the address for the beginning of the message .

In addition to using the message element designator to request or store a value for a message element in an application message the requesting module may also use the message element designator to request element characteristics for a message element in an application message. For further explanation therefore sets forth a flowchart illustrating a further exemplary method of referencing message elements in an application message in a messaging environment according to embodiments of the present invention that includes receiving by the messaging module from the requesting module a request for the element characteristics for the specific message element.

The method of is similar to the method of . That is the method of includes establishing a message model on a computer. The message model specifies a message format for interpreting application messages and includes one or more message element specifications . Each message element specification of specifies a message element for storing data in the application messages Each message element specification includes element characteristics consisting of an element name an element size and an element type . The method of is similar to the method of in that the method of also includes creating by a messaging module on the computer in dependence upon the message model a message element designator map the message element designator map mapping a separate message element designator to each message element specified by the message model receiving in the messaging module from a requesting module a request for an element designator for a specific message element the specific message element identified in the request by the element characteristics for the specific message element and providing by the messaging module to the requesting module the requested element designator in dependence upon the message element designator map and the element characteristics for the specific message element. The message element designator map of includes a message element designator the element name the element size the element type and the element offset .

The method of also includes receiving by the messaging module from the requesting module a request for the element characteristics for the specific message element. The specific message element is identified in the request for the element characteristics by the requested element designator . The request for the element characteristics for the specific message element may be implemented as an XML document a call to a function of an API for the requesting module or any other implementation as will occur to those of skill in the art. For example consider the following exemplary function in the API of the requesting module useful for receiving a request for element characteristics for the specific message element according to embodiments of the present invention 

A requesting device may call the exemplary function request characteristics above to request element characteristics for the message element identified by the message element designator having a value that matches the value for dsg. The particular characteristic requested is specified by the value for id. The exemplary function request characteristics returns the value for the particular element characteristic after executing the function. Readers will note that the exemplary function described above is for explanation and not for limitation. In fact other exemplary functions as will occur to those of skill in the art may also be useful in referencing message elements in an application message in a messaging environment according to embodiments of the present invention.

The method of also includes providing by the messaging module to the requesting module the requested element characteristics for the specific message element in dependence upon the requested element designator and the message element designator map . The messaging module may provide the requested element characteristics according to the method of by identifying in the map the values for the element characteristics associated with the value for the message element designator that matches the value for the requested element designator . The messaging module may then provide the requested element characteristics according to the method of by transmitting the values for the requested element characteristics to the requesting module. The messaging module may transmit the values for the requested element characteristics to the requesting module by transmitting the values for the requested element characteristics to the requesting module as return values from a function called by the requesting module as in the exemplary request characteristics function above sending the values for the requested element characteristics to the requesting module in an XML message using web services or any other implementation as will occur to those of skill in the art.

As mentioned above when the messaging module receives a request from a requesting module for an element designator for a specific message element the specific message element may be identified in the request by the element characteristics for the specific message element. Often however two or more message elements may have the same element characteristics but the message elements are constituent elements of different parent elements. For example an application message representing information about a person may include two message elements representing street information for the person. Both street message elements may have the same element characteristics. One street element however may have a parent message element that represents a home address for the person while the second street element has a parent message element that represents an office address for the person. In such an example each street message element may be identified by both the element characteristics and the message element designator for the parent message element. For further explanation therefore sets forth a flowchart illustrating a further exemplary method of referencing message elements in an application message in a messaging environment according to embodiments of the present invention in which the specific message element is further identified in the request by an element designator for a parent message element.

The method of is similar to the method of . That is the method of includes establishing a message model on a computer. The message model specifies a message format for interpreting application messages and includes one or more message element specifications . Each message element specification of specifies a message element for storing data in the application messages Each message element specification includes element characteristics consisting of an element name an element size and an element type . The method of is similar to the method of in that the method of also includes creating by a messaging module on the computer in dependence upon the message model a message element designator map the message element designator map mapping a separate message element designator to each message element specified by the message model receiving in the messaging module from a requesting module a request for an element designator for a specific message element the specific message element identified in the request by the element characteristics for the specific message element and providing by the messaging module to the requesting module the requested element designator in dependence upon the message element designator map and the element characteristics for the specific message element. The message element designator map of includes a message element designator the element name the element size the element type and the element offset .

As mentioned above the specific message element is further identified in the request of by an element designator for a parent message element. To utilize the element designator for a parent message element the messaging module adds a parent element designator field to the message element designator map when the map is created at startup or upon receiving a new message model. The parent element designator field specifies the message element designator for the parent element of each message element in the map .

In the method of providing by the messaging module to the requesting module the requested element designator in dependence upon the message element designator map and the element characteristics for the specific message element includes providing the requested element designator in dependence upon the message element designator map the element characteristics for the specific message element and the element designator for the parent message element. The messaging module may provide the requested element designator according to the method of by identifying in the map the message element designator for the message element having values for element characteristics that match the values for the element characteristics and having a value for the parent element designator that matches the value for the parent element designator . The messaging module may provide the requested element designator according to the method of by transmitting the identified element designator to the requesting module. The messaging module may transmit the identified element designator to the requesting module by transmitting the requested element designator to the requesting module as a return value to a function called by the requesting module from a messaging module API sending the requested element designator to the requesting module in an XML message using web services or any other implementation as will occur to those of skill in the art. For example consider the following exemplary function in the API of the requesting module useful for receiving a request for an element designator for a specific message element according to embodiments of the present invention 

A requesting device may call the exemplary function request designator above to request an element designator for the message element identified by the element characteristic whose value matches the value for name and identified by the parent element designator whose value matches the value for parent dsg. The exemplary function request designator returns the message element designator after executing the function. Readers will note that the exemplary function described above is for explanation and not for limitation. In fact other exemplary functions as will occur to those of skill in the art may also be useful in referencing message elements in an application message in a messaging environment according to embodiments of the present invention.

In view of the explanations set forth above in this document readers will recognize that referencing message elements in an application message in a messaging environment according to embodiments of the present invention provides the following benefits 

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for referencing message elements in an application message in a messaging environment. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on signal bearing media for use with any suitable data processing system. Such signal bearing media may be transmission media or recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as for example Ethernets and networks that communicate with the Internet Protocol and the World Wide Web as well as wireless transmission media such as for example networks implemented according to the IEEE 802.11 family of specifications. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

