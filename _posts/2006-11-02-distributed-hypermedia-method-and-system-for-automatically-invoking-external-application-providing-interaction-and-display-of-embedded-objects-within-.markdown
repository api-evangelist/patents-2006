---

title: Distributed hypermedia method and system for automatically invoking external application providing interaction and display of embedded objects within a hypermedia document
abstract: A system allowing a user of a browser program on a computer connected to an open distributed hypermedia system to access and execute an embedded program object. The program object is embedded into a hypermedia document much like data objects. The user may select the program object from the screen. Once selected the program object executes on the user's (client) computer or may execute on a remote server or additional remote computers in a distributed processing arrangement. After launching the program object, the user is able to interact with the object as the invention provides for ongoing interprocess communication between the application object (program) and the browser program. One application of the embedded program object allows a user to view large and complex multi-dimensional objects from within the browser's window. The user can manipulate a control panel to change the viewpoint used to view the image. The invention allows a program to execute on a remote server or other computers to calculate the viewing transformations and send frame data to the client computer thus providing the user of the client computer with interactive features and allowing the user to have access to greater computing power than may be available at the user's client computer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08082293&OS=08082293&RS=08082293
owner: The Regents of the University of California
number: 08082293
owner_city: Oakland
owner_country: US
publication_date: 20061102
---
This application is a continuation and claims the benefit of U.S. application Ser. No. 10 217 955 filed Aug. 9 2002 which is a continuation and claims the benefit of U.S. application Ser. No. 09 075 359 filed May 8 1998 which is a continuation of U.S. application Ser. No. 08 324 443 filed Oct. 17 1994 now U.S. Pat. No. 5 838 906 the disclosures of which are hereby incorporated by reference.

This invention relates generally to manipulating data in a computer network and specifically to retrieving presenting and manipulating embedded program objects in distributed hypermedia systems.

Computer networks are becoming increasingly popular as a medium for locating and accessing a wide range of data from locations all over the world. The most popular global network is the Internet with millions of computer systems connected to it. The Internet has become popular due to widely adopted standard protocols that allow a vast interconnection of computers and localized computer networks to communicate with each other. Computer systems connected to a network such as the Internet may be of varying types e.g. mainframes workstations personal computers etc. The computers are manufactured by different companies using proprietary hardware and operating systems and thus have incompatibilities in their instruction sets busses software file formats and other aspects of their architecture and operating systems. Localized computer networks connected to the Internet may be incompatible with other computer systems and localized networks in terms of the physical layer of communication including the specific hardware used to implement the network. Also different networks use differing incompatible protocols for transferring information and are not able to communicate with each other without a translation mechanism such as a gateway .

The Internet provides a uniform and open standard for allowing various computers and networks to communicate with each other. For example the Internet uses Transfer Control Protocol Internet Protocol TCP IP that defines a uniform packet switched communication standard which is ultimately used in every transfer of information that takes place over the Internet.

Other Internet standards are the HyperText Transmission Protocol HTTP that allows hypertext documents to be exchanged freely among any computers connected to the Internet and HyperText Markup Language HTML that defines the way in which hypertext documents designate links to information. See e.g. Berners Lee T. J. The world wide web Computer Networks and ISDN Systems 25 1992 .

A hypertext document is a document that allows a user to view a text document displayed on a display device connected to the user s computer and to access retrieve and view other data objects that are linked to hypertext words or phrases in the hypertext document. In a hypertext document the user may click on or select certain words or phrases in the text that specify a link to other documents or data objects. In this way the user is able to navigate easily among data objects. The data objects may be local to the user s computer system or remotely located over a network. An early hypertext system is Hypercard by Apple Computer Inc. Hypercard is a standalone system where the data objects are local to the user s system.

When a user selects a phrase in a hypertext document that has an associated link to another document the linked document is retrieved and displayed on the user s display screen. This allows the user to obtain more information in an efficient and easy manner. This provides the user with a simple intuitive and powerful way to branch off from a main document to learn more about topics of interest.

Objects may be text images sound files video data documents or other types of information that is presentable to a user of a computer system. When a document is primarily text and includes links to other data objects according to the hypertext format the document is said to be a hypertext document. When graphics sound video or other media capable of being manipulated and presented in a computer system is used as the object linked to the document is said to be a hypermedia document. A hypermedia document is similar to a hypertext document except that the user is able to click on images sound icons video icons etc. that link to other objects of various media types such as additional graphics sound video text or hypermedia or hypertext documents.

When the user clicks on the phrase hypermedia software running on the user s computer obtains the link associated with the phrase symbolically shown by arrow to access hypermedia document . Hypermedia document is retrieved and displayed on the user s display screen. Thus the user is presented with more information on the phrase hypermedia. The mechanism for specifying and locating a linked object such as hypermedia document is an HTML element that includes an object address in the format of a Uniform Resource Locator URL .

Similarly additional hypertext can be selected by the user to access hypertext document via link as shown in . If the user selects additional hypertext then the text for hypertext document is displayed on the user screen. Note that hypertext document itself has hypertext at . Thus the user can click on the phrase hypermedia while viewing document to access hypermedia document in a manner similar to that discussed above.

Documents and other data objects can be referenced by many links from many different source documents. shows document serving as a target link for both documents and . A distributed hypertext or hypermedia document typically has many links within it that specify many different data objects located in computers at different geographical locations connected by a network. Hypermedia document includes image icon with a link to image . One method of viewing images is to include an icon or other indicator within the text.

Typically the indicator is a very small image and may be a scaled down version of the full image. The indicator may be shown embedded within the text when the text is displayed on the display screen. The user may select the indicator to obtain the full image. When the user clicks on image icon browser software executing on the user s computer system retrieves the corresponding full image e.g. a bit map and displays it by using external software called a viewer. This results in the full image represented by image being displayed on the screen.

An example of a browser program is the National Center for Supercomputing Application s NCSA Mosaic software developed by the University of Illinois at Urbana Champaign Ill. Another example is Cello available on the Internet at http www.law.cornell.edu . Many viewers exist that handle various file formats such as .TIF .GIF formats. When a browser program invokes a viewer program the viewer is launched as a separate process. The view displays the full image in a separate window in a windowing environment or on a separate screen. This means that the browser program is no longer active while the viewer is active. By using indicators to act as place holders for full images that are retrieved and displayed only when a user selects the indicator data traffic over the network is reduced. Also since the retrieval and display of large images may require several seconds or more of transfer time the user does not have to wait to have images transferred that are of no interest to the user.

Returning to another type of data object is a sound object shown as sound icon within the hypermedia document. When the user selects sound icon the user s computer accesses sound data shown symbolically by data file . The accessed sound data plays through a speaker or other audio device.

As discussed above hypermedia documents allow a user to access different data objects. The objects may be text images sound files video additional documents etc. As used in this specification a data object is information capable of being retrieved and presented to a user of a computer system. Some data objects include executable code combined with data. An example of such a combination is a self extracting data object that includes code to unpack or decompress data that has been compressed to make it smaller before transferring. When a browser retrieves an object such as a self extracting data object the browser may allow the user to launch the self extracting data object to automatically execute the unpacking instructions to expand the data object to its original size. Such a combination of executable code and data is limited in that the user can do no more than invoke the code to perform a singular function such as performing the self extraction after which time the object is a standard data object.

Other existing approaches to embedding interactive program objects in documents include the Object Linking and Embedding OLE facility in Microsoft Windows by Microsoft Corp. and OpenDoc by Apple Computer Inc. At least one shortcoming of these approaches is that neither is capable of allowing a user to access embedded interactive program objects in distributed hypermedia documents over networks.

Internet connects other localized networks such as server B at which interconnects users and and their respective computer systems to Internet . Internet is made up of many interconnected computer systems and communication links. Communication links may be by hardwire fiber optic cable satellite or other radio wave propagation etc. Data may move from server A to server B through any number of intermediate servers and communication links or other computers and data processing equipment not shown in but symbolically represented by Internet .

A user at a workstation or personal computer need not connect to the Internet via a larger computer such as server A or server B. This is shown for example by small computer connected directly to Internet as by a telephone modem or other link. Also a server need not have users connected to it locally as is shown by server C at of . Many configurations of large and small computers are possible.

Typically a computer on the Internet is characterized as either a client or server depending on the role that the computer is playing with respect to requesting information or providing information. Client computers are computers that typically request information from a server computer which provides the information. For this reason servers are usually larger and faster machines that have access to many data files programs etc. in a large storage associated with the server. However the role of a server may also be adopted by a smaller machine depending on the transaction. That is user may request information via their computer from server A. At a later time server A may make a request for information from computer . In the first case where computer issues a request for information from server A computer is a client making a request of information from server A. Server A may have the information in a storage device that is local to Server A or server A may have to make requests of other computer systems to obtain the information. User may also request information via their computer from a server such as server B located at a remote geographical location on the Internet. However user may also request information from a computer such as small computer thus placing small computer in the role of a server. For purposes of this specification client and server computers are categorized in terms of their predominant role as either an information requestor or provider. Clients are generally information requestors while servers are generally information providers.

Referring again to data objects such as distributed hypermedia documents and image and sound data file may be located at any of the computers shown in . Since these data objects may be linked to a document located on another computer the Internet allows for remote object linking.

For example hypertext document of may be located at user s client computer . When user makes a request by for example clicking on hypertext i.e. the phrase hypermedia user s small client computer processes links within hypertext document to retrieve document . In this example we assume that document is stored at a remote location on server B. Thus in this example computer issues a command that includes the address of document . This command is routed through server A and Internet and eventually is received by server B. Server B processes the command and locates document on its local storage. Server then transfers a copy of the document back to client via Internet and server A. After client computer receives document it is displayed so that user may view it.

Similarly image object and sound data file may reside at any of the computers shown in . Assuming image object resides on server C when user clicks on image icon client computer generates a command to retrieve image object to server C. Server C receives the command and transfers a copy of image object to client computer . Alternatively an object such as sound data file may reside on server A so that it is not necessary to traverse long distances via the Internet in order to retrieve the data object.

The Internet is said to provide an open distributed hypermedia system. It is an open system since Internet implements a standard protocol that each of the connecting computer systems and must implement TCP IP . It is a hypermedia system because it is able to handle hypermedia documents as described above via standards such as the HTTP and HTML hypertext transmission and mark up standards respectively. Further it is a distributed system because data objects that are imbedded within a document may be located on many of the computer systems connected to the Internet. An example of an open distributed hypermedia system is the so called world wide web implemented on the Internet and discussed in papers such as the Berners Lee reference given above.

The open distributed hypermedia system provided by the Internet allows users to easily access and retrieve different data objects located in remote geographic locations on the Internet. However this open distributed hypermedia system as it currently exists has shortcomings in that today s large data objects are limited largely by bandwidth constraints in the various communication links in the Internet and localized networks and by the limited processing power or computing constraints of small computer systems normally provided to most users. Large data objects are difficult to update at frame rates fast enough e.g. 30 frames per second to achieve smooth animation. Moreover the processing power needed to perform the calculations to animate such images in real time does not exist on most workstations not to mention personal computers. Today s browsers and viewers are not capable of performing the computation necessary to generate and render new views of these large data objects in real time.

For example the Internet s open distributed hypermedia system allows users to view still images. These images are simple non interactive two dimensional images similar to photographs. Much digital data available today exists in the form of high resolution multi dimensional image data e.g. three dimensional images which is viewed on a computer while allowing the user to perform real time viewing transformations on the data in order for the user to better understand the data.

An example of such type of data is in medical imaging where advanced scanning devices such as Magnetic Resonance Imaging MRI and Computed Tomography CT are widely used in the fields of medicine quality assurance and meteorology to present physicians technicians and meteorologists with large amounts of data in an efficient way. Because visualization of the data is the best way for a user to grasp the data s meaning a variety of visualization techniques and real time computer graphics methods have been developed. However these systems are bandwidth intensive and compute intensive and often require multiprocessor arrays and other specialized graphics hardware to carry them out in real time. Also large amounts of secondary storage for data are required. The expense of these requirements has limited the ability of researchers to readily exchange findings since these larger computers required to store present and manipulate images are not available to many of the researchers that need to have access to the data.

On the other hand small client computers in the form of personal computers or workstations such as client computer of are generally available to a much larger number of researchers. Further it is common for these smaller computers to be connected to the Internet. Thus it is desirable to have a system that allows the accessing display and manipulation of large amounts of data especially image data over the Internet to a small and relatively cheap client computer.

Due to the relatively low bandwidth of the Internet as compared to today s large data objects and the relatively small amount of processing power available at client computers many valuable tasks performed by computers cannot be performed by users at client computers on the Internet. Also while the present open distributed hypermedia system on the Internet allows users to locate and retrieve data objects it allows users very little if any interaction with these data objects. Users are limited to traditional hypertext and hypermedia forms of selecting linked data objects for retrieval and launching viewers or other forms of external software to have the data objects presented in a comprehensible way.

Thus it is desirable to have a system that allows a user at a small client computer connected to the Internet to locate retrieve and manipulate data objects when the data objects are bandwidth intensive and compute intensive. Further it is desirable to allow a user to manipulate data objects in an interactive way to provide the user with a better understanding of information presented and to allow the user to accomplish a wider variety of tasks.

The present invention provides a method for running embedded program objects in a computer network environment. The method includes the steps of providing at least one client workstation and one network server coupled to the network environment where the network environment is a distributed hypermedia environment displaying on the client workstation a portion of a hypermedia document received over the network from the server where the hypermedia document includes an embedded controllable application and interactively controlling the embedded controllable application from the client workstation via communication sent over the distributed hypermedia environment.

The present invention allows a user at a client computer connected to a network to locate retrieve and manipulate objects in an interactive way. The invention not only allows the user to use a hypermedia format to locate and retrieve program objects but also allows the user to interact with an application program located at a remote computer. Interprocess communication between the hypermedia browser and the embedded application program is ongoing after the program object has been launched. The user is able to use a vast amount of computing power beyond that which is contained in the user s client computer.

In one application high resolution three dimensional images are processed in a distributed manner by several computers located remotely from the user s client computer. This amounts to providing parallel distributed processing for tasks such as volume rendering or three dimensional image transformation and display. Also the user is able to rotate scale and otherwise reposition the viewpoint with respect to these images without exiting the hypermedia browser software. The control and interaction of viewing the image may be provided within the same window that the browser is using assuming the environment is a windowing environment. The viewing transformation and volume rendering calculations may be performed by remote distributed computer systems.

Once an image representing a new viewpoint is computed the frame image is transmitted over the network to the user s client computer where it is displayed at a designated position within a hypermedia document. By transmitting only enough information to update the image the need for a high bandwidth data connection is reduced. Compression can be used to further reduce the bandwidth requirements for data transmission.

Other applications of the invention are possible. For example the user can operate a spreadsheet program that is being executed by one or more other computer systems connected via the network to the user s client computer. Once the spreadsheet program has calculated results the results may be sent over the network to the user s client computer for display to the user. In this way computer systems located remotely on the network can be used to provide the computing power that may be required for certain tasks and to reduce the data bandwidth by only transmitting results of the computations.

Still other applications of the present invention are possible as disclosed in the specification below.

375 pages of Source code on 4 microfiche Appendices A and B are provided to this specification. The source code should be consulted to provide details of a specific embodiment of the invention in conjunction with the discussion of the routines in this specification. The source code in Appendix A includes NCSA Mosaic version 2.4 source code along with modifications to the source code to implement the present invention. Appendix B includes source code implementing an application program interface. The source code is written in the C computer language to run on an X Window platform.

Mouse and keyboard are user input devices. Other examples of user input devices are a touch screen light pen track ball data glove etc. Mouse may have one or more buttons such as buttons shown in . Cabinet houses familiar computer components such as disk drives a processor storage means etc. As used in this specification storage means includes any storage device used in connection with a computer system such as disk drives magnetic tape solid state memory bubble memory etc. Cabinet may include additional hardware such as input output I O interface cards for connecting computer system to external devices such as an optical character reader external storage devices other computers or additional devices.

In client computer communicates with server computer via network . Both client computer and server computer use a network protocol layer to communicate with network . In a preferred embodiment network is the Internet and the network protocol layers are TCP IP. Other networks and network protocols may be used. For ease of illustration additional hardware and software layers are not shown in .

Client computer includes processes such as browser client and application client . In a preferred embodiment application client is resident within client computer prior to browser client s parsing of a hypermedia document as discussed below. In a preferred embodiment application client resides on the hard disk or RAM of client computer and is loaded if necessary and executed when browser client detects a link to application client . The preferred embodiment uses the XEvent interprocess communication protocol to exchange information between browser client and application client as described in more detail below. Another possibility is to install application client as a terminate and stay resident TSR program in an operating system environment such as X Window. Thereby making access to application client much faster.

Browser client is a process that a user of client computer invokes in order to access various data objects such as hypermedia documents on network . Hypermedia document shown within client computer is an example of a hypermedia document or object that a user has requested access to. In this example hypermedia document has been retrieved from a server connected to network and has been loaded into e.g. client computer s RAM or other storage device.

Once hypermedia document has been loaded into client computer browser client parses hypermedia document . In parsing hypermedia document browser client detects links to data objects as discussed above in the Background of the Invention section. In hypermedia document includes an embedded program link at . Embedded program link identifies application client as an application to invoke. In this present example the application namely application client resides on the same computer as the browser client that the user is executing to view the hypermedia document. Embedded program link may include additional information such as parameters that tell application client how to proceed. For example embedded program link may include a specification as to a data object that application client is to retrieve and process.

When browser client encounters embedded program link it invokes application client optionally with parameters or other information and application client executes instructions to perform processing in accordance with the present invention.

An example of the type of processing that application client may perform is multidimensional image visualization. Note that application client is in communication with network via the network protocol layer of client computer . This means that application client can make requests over network for data objects such as multidimensional image objects. For example application client may request an object such as object at located in server computer . Application client may make the request by any suitable means. Assuming network is the Internet such a request would typically be made by using HTTP in response to a HTML style link definition for embedded program link .

Assuming application client has made a request for the data object at server process ultimately receives the request. Server process then retrieves data object and transfers it over network back to application client . To continue with the example of a multidimensional visualization application data object may be a three dimensional view of medical data for e.g. an embryo.

After application client receives the multidimensional data object application client executes instructions to display the multidimensional embryo data on the display screen to a user of the client computer . The user is then able to interactively operate controls to recompute different views for the image data. In a preferred embodiment a control window is displayed within or adjacent to a window generated by browser client that contains a display of hypermedia document . An example of such display is discussed below in connection with . Thus the user is able to interactively manipulate a multidimensional image object by means of the present invention. In order to make application client integral with displays created by browser client both the browser client and the application client must be in communication with each other as shown by the arrow connecting the two within client computer . The manner of communication is through an application program interface API discussed below.

Browser client is a process such as NCSA Mosaic Cello etc. Application client is embodied in software presently under development called VIS and Panel created by the Center for Knowledge Management at the University of California San Francisco as part of the Doyle Group s distributed hypermedia object embedding approach described in Integrated Control of Distributed Volume Visualization Through the World Wide Web by C. Ang D. Martin M. Doyle to be published in the Proceedings of Visualization 1994 IEEE Press Washington D.C. October 1994.

Versions and descriptions of software embodying the present invention are generally available as hyperlinked data objects from the Visible Embryo Project s World Wide Web document at the URL address HTTP visembryo.ucsf.edu .

Another embodiment of the present invention uses an application server process executing on server computer to assist in processing that may need to be performed by an external program. For example in application server resides on server computer . Application server works in communication with application client residing on client computer . In a preferred embodiment application server is called VRServer also a part of Doyle Group s approach. Since server computer is typically a larger computer having more data processing capabilities and larger storage capacity application server can operate more efficiently and much faster than application client in executing complicated and numerous instructions.

In the present example where a multidimensional image object representing medical data for an embryo is being viewed application server could perform much of the viewing transformation and volume rendering calculations to allow a user to interactively view the embryo data at their client computer display screen. In a preferred embodiment application client receives signals from a user input device at the user s client computer . An example of such input would be to rotate the embryo image from a current position to a new position from the user s point of view. This information is received by application client and processed to generate a command sent over network to application server . Once application server receives the information in the form of e.g. a coordinate transformation for a new viewing position application server performs the mathematical calculations to compute a new view for the embryo image. Once the new view has been computed the image data for the new view is sent over network to application client so that application client can update the viewing window currently displaying the embryo image. In a preferred embodiment application server computes a frame buffer of raster display data e.g. pixel values and transfers this frame buffer to application client . Techniques such as data compression and delta encoding can be used to compress the data before transmitting over network to reduce the bandwidth requirement.

It will be readily seen that application server can advantageously use server computer s computing resources to perform the viewing transformation much more quickly than could application client executing on client computer . Further by only transmitting the updated frame buffer containing a new view for the embryo image the amount of data sent over network is reduced. By using appropriate compression techniques such as e.g. MPEG Motion Picture Experts Group or JPEG Joint Photographic Experts Group efficient use of network is preserved.

Other applications of the invention are possible. For example the user can operate a spreadsheet program that is being executed by one or more other computer systems connected via the network to the user s client computer. Once the spreadsheet program has calculated results those results may be sent over the network to the user s client computer for display within the hypermedia document on the user s client computer. In this way computer systems located remotely on the network can be used to provide the computing power that may be required for certain tasks and to reduce the data bandwidth required by only transmitting results of the computations.

Another type of possible application of this invention would involve embedding a program which runs only on the client machine but which provides the user with more functionality than exists in the hypermedia browser alone. An example of this is an embedded client application which is capable of viewing and interacting with images which have been processed with Dr. Doyle s MetaMAP invention U.S. Pat. No. 4 847 604 . This MetaMAP process uses object oriented color map processing to allow individual color index ranges within paletted images to have object identities and is useful for the creation of for example interactive picture atlases. It is a more efficient means for defining irregular hotspots on images than the ISMAP function of the World Wide Web which uses polygonal outlines to define objects in images. A MetaMAP capable client based image browser application can be embedded together with an associated image within a hypermedia document allowing objects within the MetaMAP processed image to have URL addresses associated with them. When a user clicks with a mouse upon an object within the MetaMAP processed image the MetaMAP client application relays the relevant URL back to the hypermedia browser application which then retrieves the HTML file or hypermedia object which corresponds to that URL.

The various processes in the system of the present invention communicate through a custom API called Mosaic External Application Program Interface MEAPI. The MEAPI set of predefined messages includes those shown in Table I.

The messages in Table I are defined in the file protocol.sub. lib.h in Appendix B. The functions of the MEAPI are provided in protocol. sub. lib.c of Appendix B. Thus by using MEAPI a server process communicates to a client application program to let the client application know when the server has finished updating information such as an image frame buffer or pixmap Message when the server is ready to start processing messages Message and when the server is exiting or stopping computation related to the server application program.

For client to server communications MEAPI provides for the client informing the server when the image display window area is visible when the area is hidden and when the area is destroyed. Such information allows the server to decide whether to allocate computing resources for e.g. rendering and viewing transformation tasks where the server is running an application program to generate new views of a multi dimensional object. Source code for MEAPI fundamental functions such as handle.sub. client. sub. msg register.sub. client register.sub. client.sub. msg.sub. callback and send.sub. client. sub. msg may be found in protocol.sub. lib.c as part of the source code in Appendix B. Next a discussion of the software processes that perform parsing of a hypermedia document and launching of an application program is provided in connection with Table II and B A and B. Table II below shows an example of an HTML tag format used by the present invention to embed a link to an application program within a hypermedia document.

For client to server communications MEAPI provides for the client informing the server when the image display window area is visible when the area is hidden and when the area is destroyed. Such information allows the server to decide whether to allocate computing resources for e.g. rendering and viewing transformation tasks where the server is running an application program to generate new views of a multi dimensional object. Source code for MEAPI fundamental functions such as handle.sub. client.sub. msg register.sub. client register.sub. client.sub. msg.sub. callback and send.sub. client. sub. msg may be found in protocol.sub. lib.c as part of the source code in Appendix B.

Next a discussion of the software processes that perform parsing of a hypermedia document and launching of an application program is provided in connection with Table II and B A and B.

Table II below shows an example of an HTML tag format used by the present invention to embed a link to an application program within a hypermedia document.

As shown in Table II the EMBED tag includes TYPE HREF WIDTH and HEIGHT elements. The TYPE element is a Multipurpose Internet Mail Extensions MIME type. Examples of values for the TYPE element are application x vis or video mpeg . The type application x vis indicates that an application named x vis is to be used to handle the object at the URL specified by the HREF. Other types are possible such as application x inventor application postscript etc. In the case where TYPE is application x vis this means that the object at the URL address is a three dimensional image object since the program x vis is a data visualization tool designed to operate on three dimensional image objects. However any manner of application program may be specified by the TYPE element so that other types of applications such as a spreadsheet program database program word processor etc. may be used with the present invention. Accordingly the object reference by the HREF element would be respectively a spreadsheet object database object word processor document object etc.

On the other hand TYPE values such as video mpeg image gif video x sgi movie etc. describe the type of data that HREF specifies. This is useful where an external application program such as a video player needs to know what format the data is in or where the browser client needs to determine which application to launch based on the data format. Thus the TYPE value can specify either an application program or a data type. Other TYPE values are possible. HREF specifies a URL address as discussed above for a data object. Where TYPE is application x vis the URL address specifies a multi dimensional image object. Where TYPE is video mpeg the URL address specifies a video object.

WIDTH and HEIGHT elements specify the width and height dimensions respectively of a Distributed Hypermedia Object Embedding DHOE window to display an external application object such as the three dimensional image object or video object discussed above.

In general the flowcharts in this specification illustrate one or more software routines executing in a computer system such as computer system of . The routines may be implemented by any means as is known in the art. For example any number of computer programming languages such as C Pascal FORTRAN assembly language etc. may be used. Further various programming approaches such as procedural object oriented or artificial intelligence techniques may be employed.

The steps of the flowcharts may be implemented by one or more software routines processes subroutines modules etc. It will be apparent that each flowchart is illustrative of merely the broad logical flow of the method of the present invention and that steps may be added to or taken away from the flowcharts without departing from the scope of the invention. Further the order of execution of steps in the flowcharts may be changed without departing from the scope of the invention. Additional considerations in implementing the method described by the flowchart in software may dictate changes in the selection and order of steps. Some considerations are event handling by interrupt driven polled or other schemes. A multiprocessing or multitasking environment could allow steps to be executed concurrently. For ease of discussion the implementation of each flowchart may be referred to as if implemented in a single routine .

The modifications to NCSA Mosaic version 2.4 software files HTMLparse.c HTMLformat.c HTMLwidget.c and HTML.c will next be discussed in turn.

Returning to it is assumed that a hypermedia document has been obtained at a user s client computer and that a browser program executing on the client computer displays the document and calls a first routine in the HTMLparse.c file called HTMLparse . This first routine HTMLparse is entered at step where a pointer to the start of the document portion is passed. Steps and represent a loop where the document is parsed or scanned for HTML tags or other symbols. While the file HTMLparse.c includes routines to handle all possible tags and symbols that may be encountered for simplicity only illustrates the handling of EMBED tags.

Assuming there is more text to parse execution proceeds to step where routines in HTMLparse.c obtain the next item e.g. word tag or symbol from the document. At step a check is made as to whether the current tag is the EMBED tag. If not execution returns to step where the next tag in the document is obtained. If at step it is determined that the tag is the EMBED tag execution proceeds to step where an enumerated type is assigned for the tag. Each occurrence of a valid EMBED tag specifies an embedded object. HTMLParse calls a routine get.sub. mark in HTMLparse.c to put sections of HTML document text into a markup text data structure. Routine get.sub. mark in turn calls ParseMarkType to assign an enumerated type. The enumerated type is an identifier with a unique integer associated with it that is used in later processing described below.

Once all of the hypermedia text in the text portion to be displayed has been parsed execution of HTMLparse.c routines terminates at step .

At step the parameters of the structure are initialized in preparation for inserting a DrawingArea widget on an HTML page. This includes providing values for the width and height of a window on the display to contain an image position of the window style URL of the image object etc. Various codes are also added by routines in HTMLformat.c such as TriggerMarkChanges to insert an internal representation of the HTML statement into an object list maintained internally by the browser. In the X Window application corresponding to the source code of Appendix A the browser is NCSA Mosaic version 2.4.

HTMLwidget is entered at step after HTMLformat has created the internal object representation of the EMBED tag. HTMLwidget is passed the internal object and performs its processing on the object. At step the DrawingArea widget is created according to the type of the internal representation from HTMLformat specified in the internal object. Similarly at step a pixmap area for backing storage is defined.

At step a check is made as to whether the type attribute of the object i.e. the value for the TYPE element of the EMBED tag is an application. If so step is executed to launch a predetermined application. In a preferred embodiment an application is launched according to a user defined list of application type application pairs. The list is defined as a user configurable XResource as described in Xlib Programming Manual. An alternative embodiment could use the MIME database as the source of the list of application type application pairs. The routine vis.sub. start.sub. external.sub. application in file HTMLformat.c is invoked to match the application type and to identify the application to launch.

The external application is started as a child process of the current running process Mosaic and informed about the window ID of the DrawingArea created in HTMLformat. The external application is also passed information about the ID of the pixmap the data URL and dimensions. Codes for communication such as popping up iconifying start notification quit notification and refresh notification with external applications and DrawingArea refreshing are also added. Examples of such codes are 1 setup start in vis.sub. register.sub. client and vis. sub. get panel.sub. window in HTMLwidgets.c 2 handle messages from external applications in vis.sub. handle panel.sub. msg in HTMLwidgets.c 3 send messages to external applications in vis.sub. send.sub. msg in HTMLwidgets.c 4 terminate external applications in vis.sub. exit in HTMLwidgets.c which calls vis.sub. send.sub. msg to send a quit message and 5 respond to refresh msgs in vis.sub. redraw in HTMLwidgets.c.

If at step the type is determined not to be an application object e.g. a three dimensional image object in the case of application x vis a check is made at step to determine if the type is a video object. If so step is executed to launch a video player application. Parameters are passed to the video player application to allow the player to display the video object within the DrawingArea within the display of the portion of hypermedia document on the client s computer. Note that many other application objects types are possible as described above.

The present invention allows a user to have interactive control over application objects such as three dimensional image objects and video objects. In a preferred embodiment controls are provided on the external applications user interface. In the case of a VIS panel application a process panel creates a graphical user interface GUI thru which the user interacts with the data. The application program VIS can be executing locally with the user s computer or remotely on a server or on one or more different computers on the network. The application program updates pixmap data and transfers the pixmap data frame image data to a buffer to which the browser has access. The browser only needs to respond to the refresh request to copy the contents from the updated pixmap to the DrawingArea. The Panel process sends messages as Msg sending performed by routines such as vis.sub. send.sub. msg and vis.sub. handle panel.sub. msg to send events mousemove keypress etc. to the external application.

In the foregoing specification the invention has been described with reference to a specific exemplary embodiment thereof. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the appended claims. For example various programming languages and techniques can be used to implement the disclosed invention. Also the specific logic presented to accomplish tasks within the present invention may be modified without departing from the scope of the invention. Many such changes or modifications will be readily apparent to one of ordinary skill in the art. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense the invention being limited only by the provided claims.

