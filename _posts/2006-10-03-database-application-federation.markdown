---

title: Database application federation
abstract: A database federation mechanism permits one or more applications external to the database to be registered. Applications so registered may be automatically invoked in response to database queriesâ€”where such invocation utilizes data from specific database entries.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09122719&OS=09122719&RS=09122719
owner: BMC SOFTWARE, INC.
number: 09122719
owner_city: Houston
owner_country: US
publication_date: 20061003
---
This application claims priority to U.S. provisional patent application 60 745 869 entitled CMDB Federation filed 28 Apr. 2006 and which is hereby incorporated by reference.

A Configuration Management Database CMDB is a database that is used to retain information about the components in an information system and the relationships between those components that are used by an organization s Information Technology IT services. In this context system components are often referred to as configuration items. A configuration item can be any conceivable resource or component including software hardware documentation facilities and personnel as well as any combination of these. The process of configuration management seeks to specify control and track configuration items and any changes made to them in a comprehensive and systematic fashion.

The Information Technology Infrastructure Library ITIL best practices standards include specifications for configuration management. According to ITIL specifications the four major tasks of configuration management are 1 identification of configuration items to be included in the CMDB 2 control of data to ensure that it can only be changed by authorized individuals 3 status maintenance which involves ensuring that the current status of any configuration item is consistently recorded and kept updated and 4 verification through audits and reviews of the data to ensure that it is accurate. ITIL is a registered trademark of The Lords Commissioners of Her Majesty s Treasury Acting Through The Office of Government Commerce and Central Computer and Telecomunications Agency United Kingdom. 

Within a configuration database the concept of data federation is an important scalability and complexity management issue. Generally speaking data federation is the concept of storing additional or related data about a configuration item stored in a first data store in another second product or database. This approach to distributing data keeps the size scope and responsibility of the configuration database controlled and allows the use of existing databases as they currently exist.

In the prior art federated data is generally accessed by manually executing an application distinct from the federated database. For example federated data may be retained in a second database accessible through a separate database management system or a distinct product such as a separate configuration management application . Data federated in this manner may be accessed by developing customized source integration logic or by invoking a pre determined or fixed instance of a second application. In the first of these approaches custom logic i.e. software is developed for each federated database that allows a more automated interaction with the specified data store. In the second approach the second application is used to manually search for the desired data. In yet a third approach links to an application that could manipulate an instance of a federated data object are provided but no ability to modify the invocation of this link including parameter passing is possible.

Thus it would be beneficial to provide a mechanism to automatically and dynamically invoke a specified application from within a database in general and a configuration management database in particular.

In one embodiment the invention provides a method to register an external application with a database. The method includes identifying an entry in the database identifying the external application and associating a command string with the entry and the external application external wherein the command string is formed by a combination of predetermined portions e.g. specified at the time the external application was associated with the entry and dynamic portions comprising information to be obtained from the identified entry at run time. The command string configured to cause the external application to execute once its dynamic portions are provided at run time.

In another embodiment the invention provides a method to use a database having federated external applications. The method includes receiving a query for a database retrieving an entry from the database in accordance with the query identifying an external application associated with the entry identifying an invocation string associated with the entry substituting one or more values e.g. attribute values from the entry into the invocation string and using the invocation string including the substituted values to cause the external application to automatically execute. The external application may execute independently or provide data back to the invoking process.

In still another embodiment the invention provides a system for assisting a user with configuration management. The system includes a configuration management database having multiple configuration items stored therein an application external to the database a means for associating an invocation string with a first configuration item and the external application a means for obtaining information from the first configuration item e.g. attribute values a means for inserting the obtained configuration item information into the invocation string to create an application execution command and a means for causing the external application to execute based on the application execution command.

The following description is presented to enable any person skilled in the art to make and use the invention as claimed and is provided in the context of the particular examples discussed below variations of which will be readily apparent to those skilled in the art. Accordingly the claims appended hereto are not intended to be limited by the disclosed embodiments but are to be accorded their widest scope consistent with the principles and features disclosed herein.

In the context of an object oriented configuration management database a federation mechanism in accordance with the invention uses one or more execution definitions for each product application or execution module to be federated. One illustrative product in which the inventive concept has been embodied is the BMC Atrium CMDB configuration management database system. BMC ATRIUM is a trademark of BMC Software Inc. of Houston Tex. Each execution definition identifies a method of execution e.g. command line URL or web service a mode of execution e.g. interactive or stand alone zero or more invocation arguments and the ability to specify data from a class of database entries a specific database instance or a relationship associated with the instance.

Referring to federation process in accordance with the invention includes identifying the product application or execution module that is to be federated block . For example it may be desired to associate a configuration item with an action request system so that the status of any help desk tickets action requests related to the configuration item may be determined or modified. The means block and mode block may then specified. Illustrative invocation means include command line URL and web service. Illustrative invocation modes include interactive and stand alone. In an interactive mode the targeted application i.e. the application specified in accordance with block may return data to the configuration management database. In a stand alone mode the targeted application may simply be invoked with a specified command string and thereafter run independently of the configuration management database. Finally the invocation command for the targeted application is specified block . In one embodiment the invocation command is a character string that is used to actually invoke or execute the targeted application e.g. a command line or URL string .

In accordance with the invention the invocation command may include zero or more parameters some of which may be static i.e. fixed at the time the command is specified and some of which may be dynamic i.e. obtained from a configuration item at the time of invocation . For example if the command invocation string is http www.bmc.com info name Name the variable Name may be obtained from the configuration item associated with the command string. Thus if the value of the configuration item s Name attribute was GreenMonster the value GreenMonster would be substituted into the invocation command at the time of execution to yield http www.bmc.com info name GreenMonster .

In one embodiment an application may also be federated with a class of configuration items. If a federated application is to be invoked based on a class relationship one or more attributes of the class may be filtered prior to performing the above described parameter substitution and invocation operations. For example if application A is to be invoked every time a configuration item of class Monitor is retrieved one or more attribute values in the retrieved instance may be filtered to determine whether the application is actually invoked. Thus if only ABC brand monitors associated with computer systems in the XYZ workgroup should be processed by application A the BrandName and Workgroup attribute values of the specific instance associated with the current operation are checked. If they match i.e. have values equal to ABC and XYZ respectively the application will be automatically invoked. Conversely if the specific instance s attribute values do not match the application is not invoked. In another embodiment one or more attribute values may be used to specify which of two or more possible command string substitutions to perform.

Referring to system in accordance with one embodiment of the invention includes configuration management database and external application . Configuration management database includes configuration item federated interface object federated product object federated interface link object and federated product link object . One of ordinary skill in the art will recognize that a configuration management database may include thousands or millions of configuration items each of which may have zero or more relationships with other objects such as for example other configuration items. Furthermore in accordance with the invention a single configuration item may be associated with more than one federated interface and a single federated product may be associated with a plurality of federated interface objects. This latter case is useful when a single external application can be invoked for several different purposes. Accordingly system presents a simplified structure for the purposes of describing the relevant details of the claimed invention and not as a representation of a fully functional implementation.

Referring to system in accordance with another embodiment of the invention includes configuration management database and external application . Configuration management database includes configuration item federated interface objects and federated product object federated interface link object and federated product link objects and . As shown configuration item is federated to product object rather than to an interface object as shown in . In this configuration configuration item may cause external application to be invoked through any of the interface objects e.g. and linked to product object e.g. through federated product link object and .

As previously noted configuration item object may represent substantially any resource physical entities such as software hardware documentation facilities and personnel as well as logical entities such as business processes or services. Further in an object oriented implementation configuration item may represent a specific instance of a resource e.g. the laptop computer system assigned to person A or a class of resources e.g. all laptop computer systems in an organization . Federated interface object includes the information necessary to invoke external application for the particular configuration item to which it is linked i.e. via federated interface link object . Table ZZ defines federated interface object in accordance with one embodiment.

Federated product object includes the information necessary to identify the specific external application to be launched. Table YY defines federated product object in accordance with one embodiment. Separating the information retained in federated interface and federated product objects permits a single product e.g. external application to be invoked in a number of different ways i.e. through multiple federated interface objects such as object without duplicating much of the external product s information.

As shown in configuration item and federated interface object are associated through federated interface link object . Similarly federated interface object and federated product object are associated through federated product link object . In the parlance of object oriented database technology link objects and may be referred to as relationship objects or more simply relationships. Because a federated product e.g. external product might offer several types of federated data each federated product object may be associated with a plurality of federated interface objects. Table XX defines federated interface link object in accordance with one embodiment. Table WW defines federated product link object in accordance with one embodiment.

Because some federated applications do not store configuration item attributes that also exist in the configuration management database e.g. configuration management database it may not be possible to use attribute substitution to match a configuration item to federated data. In these cases a foreign key may be used to tie a configuration management database s configuration item an instance or class object to information stored in an external application. As used herein a foreign key is a unique identifier in the federated product application that maps to or identifies a specific configuration item in the configuration management database. To accommodate these cases a foreign key relationship may be used to form an association between a configuration item an instance or class object and a federated product where the foreign key relationship includes the foreign key value that uniquely ties a configuration item to an external product.

Referring to in one embodiment the foreign key relationship may be implemented through federated key link object . As shown federated key link object logically couples configuration item and federated product object via source and destination field references see Table W . In this way the foreign key value retained in federated key link object may be substituted into the information in a federated interface object e.g. the AccessString field to permit each configuration item to uniquely identify an external product. Table W defines federated key link object in accordance with one embodiment.

In summary a federation mechanism in accordance with the invention permits one or more applications external to the database to be registered. Applications so registered may be automatically invoked in response to database queries where such invocation utilizes data from specific database entries or instances.

In general then and as shown in federation operation in accordance with the invention begins when a query is received by a federated database block . Once received the query is applied to the database block and a result is obtained block . If the result is not associated with an external product in accordance with the invention the No prong of block the result is returned as in the prior art block and processing completes. If the result is associated with an external application in accordance with the invention the Yes prong of block a check is made to determine if the retrieved entity is federated to a class block . If the result is not federated to a class of database entries the No prong of block processing continues at block . If the result is federated to a class of database entries the Yes prong of block one or more values associated with the retrieved entity are compared against a user specified pattern as discussed above block where after one or more values from the returned entity are substituted into the entities associated invocation string such as the AccessString attribute of a federated interface object block . For convenience once instance values have been substituted into the invocation string the resulting quantity will be referred to as a command string. It is significant that filter operations in accordance with block may include any combination of values or attributes of the retrieved entity e.g. through logical operations such as AND OR and NOT operations including values integral to the retrieved entity or any of the entities parent objects i.e. values obtained through inheritance . Following the acts of block processing continues as shown in .

Referring to following the acts of block of the external application is invoked block and the command string is passed to it for execution block . One of ordinary skill in the art will recognize that the acts of blocks and may often be combined into a single operation such as for example when an external application is invoked via a command line.

If the external application was not invoked as an interactive application the No prong of block the result is returned block where after database processing completes. In the non interactive or stand alone mode of operation it will be recognized that the external application may continue to execute. If the external application was invoked as an interactive application the Yes prong of block results are received from the external application block and passed to the entity making the original database query such as for example another application block .

By way of example consider an object oriented database that includes a class of company objects e.g. one entry for company ABC one entry for company DEF and so forth where one attribute of the company class is StockSymbol the stock market symbol used to uniquely identify the company. In accordance with the above described registration method see a federated product object can be instantiated that identifies the target external application e.g. a web browser application . In addition a federated interface object can be instantiated that specifies the means of invocation as URL e.g. via the AccessMehtod attribute the mode of activation as stand alone e.g. via the AccessMode attribute and the invocation string as http www.StockTickerInfo.com symbol StockSymbol . Finally the relationships functionally coupling the company object class with the federated interface and product objects can be created. In accordance with federation operation when any instance of a company object is retrieved e.g. the instance associated with company ABC the value of that instance s StockSymbol attribute retrieved from the instance itself will be substituted into the associated federated interface object s invocation or access string to create an application command string e.g. http www.StockTickerInfo.com symbol ABC . The web browser application identified in the federated product object is then invoked through for example known application programming interface or scripting techniques and the command sting is passed to the browser for interpretation or execution. Finally the browser application will display the company s associated stock market information e.g. share price over a specified time period .

Various changes in the components as well as in the details of the illustrated operational methods are possible without departing from the scope of the following claims. For example while the illustrative embodiments have been described in terms of a configuration management database using object oriented technology the claimed invention is not so limited. Specifically the application registration and invocation techniques described herein may be used in conjunction with substantially any database e.g. relational databases . In addition illustrative objects e.g. federated interface object federated product object federated interface link object federated product link object and federated key link object have been described in terms of a number of specific attributes. It will be understood however that such objects may include more attributes than listed in tables ZZ W e.g. class and instance identifiers . Further some of the attributes listed in the above tables may be inherited from parent objects rather than being intrinsic to the federation objects themselves e.g. source and destination references in the link objects and . Also in the above description federation has been described as it is applied to configuration items. However this limitation is not required. For example in an object oriented environment as described herein relationships are themselves objects and as such may be federated just like any other item. That is a relationship may be linked to an external product via a link object.

It will be further recognized that acts in accordance with may be performed by a programmable control device executing instructions organized into one or more program modules. A programmable control device may be a single computer processor a special purpose processor e.g. a digital signal processor DSP a plurality of processors coupled by a communications link or a custom designed state machine. Custom designed state machines may be embodied in a hardware device such as an integrated circuit including but not limited to application specific integrated circuits ASICs or field programmable gate array FPGAs . Storage devices suitable for tangibly embodying program instructions include but are not limited to magnetic disks fixed floppy and removable and tape optical media such as CD ROMs and digital video disks DVDs and semiconductor memory devices such as Electrically Programmable Read Only Memory EPROM Electrically Erasable Programmable Read Only Memory EEPROM Programmable Gate Arrays and flash devices.

