---

title: Automatic connection and query management
abstract: A method for accessing data from a network storage medium is disclosed. An application supplies a query interface to a software object. The software object then establishes a connection between the application and the network storage medium using database information supplied by the query interface. Next, an annotated method supplied by the query interface is executed using logic provided by the software object. After the transactions have ended, the annotated method closes the connection between the application and the network storage medium.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07797709&OS=07797709&RS=07797709
owner: Oracle America, Inc.
number: 07797709
owner_city: Redwood City
owner_country: US
publication_date: 20060314
---
Corporations are increasingly adopting data driven business models that use business applications which require access to a variety of different data sources within the corporation. As a result corporate data network infrastructures have become exponentially more complex as database storage demands have also greatly increased. New data servers of all makes e.g. Sun Microsystems Inc. IBM Dell etc. and platforms e.g. Oracle Sybase etc. are routinely being integrated with existing database networks resulting in a veritable menagerie of database server makes and platforms handling the pool of enterprise data within a corporation.

Enterprise network Application Programming Interfaces APIs such as Sun Microsystem Inc. s JDBC API act as the glue that keeps this heterogenous mix of business applications and data servers functioning seamlessly together. Network APIs enable applications to have universal data access across an entire network irrespective of the make or platform of the data server being accessed. They eliminate the need for applications to be written specifically for each database server of a particular make or data platform on a given network thus greatly simplifying corporate database network infrastructures.

Currently network APIs require application developers to manage the specifics i.e. opening maintaining and closing the connection of the connection to a database server and set the interface for sending query statements i.e. Oracle Structured Query Language Sun Query etc. to the server once the connection has been established. This needlessly complicates the application code and sidetracks the application developer s attention away from what should be the developer s main task creating applications that manage the data once it s been populated with data from a database server.

In view of the forgoing there is a need for a network API that can automatically manage connections and query statement interfaces for accessing database information from networked databases.

Broadly speaking the present invention fills these needs by providing a method and system for automatically managing connections and query statements for accessing relational data from multiple data sources. It should be appreciated that the present invention can be implemented in numerous ways including as a system a method and a computer program. Several inventive embodiments of the present invention are described below.

In one embodiment a system for accessing data from a network storage medium is disclosed. The system includes a client computer system a network storage medium and an application interface that is configured to arbitrate communications between the client computer system and the network storage medium. The client computer system contains an application having a query interface. The application interface is configured to establish a data communications connection between the application and the network storage medium using annotated methods and database information residing within the query interface. Annotated methods are used by the application interface to transact with a database stored on the network storage medium. After the application finishes transacting with the network storage medium the application interface closes the data communications connection between the application and the network storage medium.

In another embodiment a method for accessing data from a network storage medium is disclosed. An application supplies connection information and a query interface to a first software object. The first software object creates a second software object and passes the connection information and query interface to the second software object. Subsequently the second software object establishes a connection between the application and the network storage medium using the connection information. An annotated method supplied by the query interfaced is then executed to enable transactions with a database stored on the network storage medium. The annotated method then closes the connection between the application and the network storage medium after the transactions are complete.

In still another embodiment another method for accessing data from a network storage medium is disclosed. An application supplies a query interface to a software object. The software object then establishes a connection between the application and the network storage medium using database information supplied by the query interface. Next an annotated method supplied by the query interface is executed using logic provided by the software object. After the transactions have ended the annotated method closes the connection between the application and the network storage medium.

An invention is described for methods and systems for automatic management of connections and query statements for accessing relational data from multiple database sources. It will be obvious however to one skilled in the art that the present invention may be practiced without some or all of these specific details. In other instances well known process operations have not been described in detail in order not to unnecessarily obscure the present invention.

As used herein a database network system is any client server network that contains one or more linked network database storage devices i.e. database servers configured to be accessed as a resource by one or more client machines. A network database storage device can be of any make e.g. Sun Microsystems Inc. IBM Dell Compaq Hewlett Packard etc. running on any database protocol e.g. Oracle Sybase etc. so long as the device can be operatively connected to a network.

The database network system can be configured into either two tier or three tier client server architecture models. In the two tier model the application and client interface are merged together into a client application. The client application communicates directly with the network database storage devices through the use of a network API. Typically the client application resides locally on the same client machine as the network API but separate from the network database storage devices. In the three tiered model the client communicates with an application that typically resides in an application server that is in communication with the network database storage devices on the database network system. In this arrangement the network API resides on the application server separate from both the client machine and the network database storage devices. The client interface would typically be a web browser that is in communication with the network application server via the Internet.

What is disclosed by the embodiments described herein is a network Application Programming Interface API for automated management of connections and query statements for accessing relational data from multiple network database storage devices on a database network system.

The application interfaces directly with the network API while the network API communicates with the network database storage devices by way of connection objects . The interface between the application and network API facilitates the invoking of services i.e. SQL queries etc. on the server side of the system and the management of the connection details between the application and network database storage devices . In one embodiment the application is a Java application or applet running in conjunction with a Java Virtual Machine on top of the existing operating system of a client machine. However it should be understood that the application could be written in any programming language e.g. C C Perl etc. so long as the application can be configured to communicate with network database storage devices via the network API .

Each connection object represents a unique physical connection between an application and a network database storage device wherein the network API serves as the arbitrator of data transactions between the application and the network database storage device . For example the Sun connection object is a unique physical connection between an application and the Sun network database storage device via the network API . The connection objects e.g. Sun Connection Object IBM Connection Object Dell Connection Object etc. are unique because each is associated with a device driver specific to a particular make of network database storage device e.g. Sun Database Server IBM Database Server Dell Database Server etc. and contains the set of query statements and results sets being transacted in the particular session. In one embodiment the connection object is automatically acquired by the network API upon an application requesting data from a network database storage device and automatically released by the network API upon cessation of the data communication session. In another embodiment the connection object is automatically acquired and released by the network API on an as needed basis to update data tables in an application when data in the network database storage device has been modified or updated.

Still on in one embodiment the application is connected to a pooled network database storage device through a logical connection object that is one of a set of pooled connection objects in a connection object pool . The connection object pool is essentially a set of logical connection objects that are pre created for the pooled network database storage device and made available on an as needed basis to the application . Unlike the connection object discussed above here the actual physical connection is established between the network API and the pooled network database storage device via the connection object pool . In one embodiment the connection object pool between the network API and pooled network database storage device remains open indefinitely. In another embodiment the connection object pool is released after some predetermined period of time or when data transactions have not occurred for a set period of time.

When an application accesses data from the pooled network database storage device the application obtains one of the logical connection objects from the connection object pool via the network API . For example when data communications is transacted between an application and a Sun pooled network database storage device via the network API the application first obtains a Sun logical connection object from the Sun connection object pool. This arrangement allows multiple applications and or clients to simultaneously access data from a pooled network database storage device without having to be queued or for the physical connection to the pooled network database storage device to be repeatedly opened and closed.

Continuing with in one embodiment the network API is configured to effectuate the automatic release of the logical connection object back into the connection object pool upon cessation of data transactions between the application and pooled network database storage device . This being done without any explicit or implicit instructions from the application itself. In another embodiment the network API automatically reacquires a logical connection object to update data tables in an application when the data in a pooled network database storage device has been modified or updated and automatically releases the logical connection object once the update is complete.

Still with in one embodiment the network API automatically manages all the query statements sent to the network database storage devices . The application being responsible for supplying only a query interface specifying the methods and annotations that describe the data desired by the application . No explicit instructions being provided by the application regarding the management of the query statements. It should be understood that the query statements generated by the network API can be in any relational database programming query language so as long as it can be processed by the targeted network database storage device . One example of a programming language that can be used to create a query statement is the Structured Query Language SQL . In another embodiment the application supplies a query interface containing only methods but no annotations.

In one embodiment the client server database system is arranged in a two tier architecture whereby the application resides in the same machine i.e. client machine as the client and network API but separate from the network database storage devices . In another embodiment the client server database system is arranged into a three tier architecture wherein the application resides in a dedicated applications server along with the network API separate from both the client machine containing the client and the network database storage devices . In a three tier system the client is typically some form of presentation logic for user interaction such as an Internet web browser Graphical User Interface GUI or Personal Digital Assistant PDA . It should be appreciated that the client can be any type of presentation logic so as long as the client can operatively interface with the application .

The network API is configured to arbitrate all data communications transacted between the application and network database storage devices . When transacting data with network database storage devices the application need only supply connection information and query interface to the QueryObjectFactory . The specifics of establishing the connection sending SQL statements and processing results are all automatically managed by the network API .

In one embodiment the connection information is in the form of a Universal Resource Locator URL that specifies the identity and location of the network database storage device to the network API . The URL enables the network API to choose an appropriate device driver for the purpose of creating a connection object to establish communications with the storage device . In another embodiment the connection information is a Datasource Logical Name representative of the network database storage device . The Datasource Logical Name is processed to create a Datasource connection object using a naming service or directory such as the Java Naming and Directory Interface JNDI or any other functional equivalent.

Continuing with in one embodiment when the QueryObjectFactory receives connection information and query interface from the application it invokes a CreateQueryObject method embedded within the QueryObjectFactory to create the QueryObjectGenerator object. The QueryObjectGenerator being responsible for establishing the connection with the network database storage device that the application is requesting data from and for injecting the necessary logic i.e. SQL statements for the query interface methods to be executed by the storage device . In one embodiment the query interface includes annotated methods. The methods themselves specify the data desired by the application while the annotations provide information regarding where the data is located i.e. specific data table within a network database storage device . The QueryObjectGenerator processes these annotated methods into appropriate query statements that are sent to the proper network database storage device for execution. In another embodiment the query interface provides methods that do not have any annotations.

In one embodiment the QueryObjectGenerator automatically manages the connection object with the desired network database storage device once it receives the connection information from the QueryObjectFactory . This includes acquiring the connection object before the initiation of data transactions between the application and the network database storage device and releasing the connection object once the data transactions have ceased. In one embodiment the QueryObjectGenerator is configured to monitor the connection during the entire data communications session between the application and the network database storage device and can detect when data communications have ceased. In one embodiment the QueryObjectGenerator can automatically reacquire the connection with the network database storage device if the connection prematurely closes during a data communications session between the application and the network database storage device . In one embodiment the QueryObjectGenerator is configured to automatically acquire and release the connection object on an as needed basis to update data tables in an application when data in the network database storage device has been modified or updated.

It should be understood that the QueryObjectFactory and QueryObjectGenerator can be software object components of any network API so long as they are able to operate within the logical construct of the network API . Examples of network APIs that can utilize QueryObjectFactory and QueryObjectGenerator components include JDBC API version 3.0 and Microsoft s Open Database Connectivity ODBC API.

The method then proceeds to operation where the CreateQueryObject method within the QueryObjectFactory is invoked to create a QueryObjectGenerator. Next the method moves on to operation where the QueryObjectFactory passes the connection information and the methods i.e. both annotated and non annotated to the QueryObjectFactory. The method then goes to operation whereby the network API automatically establishes a connection between the application and the network database storage device using the connection information and QueryObjectGenerator. It should be appreciated that the connection can be in the form of either a connection object with the network database storage device or a logical connection object through a connection object pool as discussed above.

Next the method proceeds to operation where the methods provided by the query interface are executed using logic supplied by the QueryObjectGenerator. The logic is embedded within the code of the QueryObjectGenerator and it results in the automatic generation of query statements that are later sent to the network database storage device for processing. After executing the query interface methods the method moves on to operation where the data communications between the application and network database storage device are transacted. This includes the QueryObjectGenerator sending query statements to the network database storage device and the return of data i.e. result set etc. to the requesting application. Then the method proceeds to operation where the QueryObjectGenerator uses its embedded logic to close the connection with the network database storage device automatically upon the cessation of data communications between the application and network database storage device.

The network API is configured to arbitrate all data communications transacted between the application and network database storage devices . When transacting data with network database storage devices the application need only supply a query interface to the QueryObjectGenerator . The specifics of establishing the connection sending query statements and processing results are all automatically managed by the QueryObjectGenerator within the network API .

In one embodiment when the network API receives the query interface from the application it invokes a CreateQueryObject method embedded within the network API to create the QueryObjectGenerator object. The QueryObjectGenerator being responsible for establishing the connection with the network database storage device that the application is requesting data from and for injecting the necessary logic i.e. SQL statements for the query interface methods to be executed by the storage device . In one embodiment the query interface includes annotated methods. The methods themselves specify the data desired by the application while the annotations provide information regarding where the data is located i.e. specific data table within a network database storage device . The QueryObjectGenerator processes these annotated methods into the appropriate query statements that are sent to the network database storage device for execution. In another embodiment the query interface provides methods that do not have any annotations.

In one embodiment the QueryObjectGenerator automatically manages the connection object with the desired network database storage device using the database information provided by the query interface. This includes acquiring the connection object before the initiation of data transactions between the application and the network database storage device and releasing the connection object once the data transactions have ceased. In one embodiment the QueryObjectGenerator is configured to monitor the connection during the entire data communications session between the application and the network database storage device and can detect when data communications have ceased.

In one embodiment the QueryObjectGenerator can automatically reacquire the connection with the network database storage device if the connection closes before the completion of the data communications session between the application and the network database storage device . In one embodiment the QueryObjectGenerator is configured to automatically acquire and release the connection object on an as needed basis to update data tables in an application when data in the network database storage device has been modified or updated. It should be understood that the QueryObjectGenerator can be a software object component of any network API so long as it is able to operate within the logical construct of the network API . Examples of network APIs that can utilize the QueryObjectGenerator component include JDBC API version 4.0 and Microsoft s Open Database Connectivity ODBC API.

The method then proceeds to operation whereby the network API automatically establishes a connection between the application and the network database storage device using the query interface and QueryObjectGenerator. It should be appreciated that the connection can be in the form of either a connection object with the network database storage device or a logical connection object through a connection object pool as discussed above. The QueryObjectGenerator being configured to utilize the database information supplied by the query interface in conjunction with a naming service or directory i.e. Java Naming and Directory Interface JNDI or any other functional equivalents to identify the network database storage device targeted by the application.

Next the method proceeds to operation where the methods provided by the query interface are executed using logic supplied by the QueryObjectGenerator. The logic is embedded within the code of the QueryObjectGenerator and it results in the automatic generation of query statements that are later sent to the network database storage device for processing. After executing the query interface methods the method moves on to operation where the data communications between the application and network database storage device are transacted. This includes the QueryObjectGenerator sending query statements to the network database storage device and the return of data i.e. result set etc. to the requesting application. Then the method proceeds to operation where the QueryObjectGenerator uses its embedded logic to close the connection with the network database storage device automatically upon the cessation of data communications between the application and network database storage device.

Provided below in Table A is a sample code for the above described network API embodiments in accordance with one embodiment of the present invention.

The query QueryObjectFactory.createDefaultQueryObject I QueryTest.class conn statement in the network API code instructs the QueryObjectGenerator to automatically establish a connection with a network database storage device using database information provided in the annotated methods supplied by the application. The Select in the code denotes the beginning of the method annotation to the QueryObjectGenerator. As indicated before the annotation provides information to the QueryObjectGenerator regarding where data requested by an application is located i.e. specific data table within a network database storage device and specifics of the connection handle. For example the Select sql SELECT from query001 connected false readOnly false tableName query001 string points the QueryObjectGenerator to data table query001 when it executes the method DatasetgetAllPersons to query data for the requesting application. Additionally the logic statement connected false tells the QueryObjectGenerator to automatically release the connection object once the data communications between the application and the network database storage device has ceased. It should be understood that the sample code provided above is used for illustration purposes only and should in no way be interpreted as the only way in which the code for the network API can be written. Essentially any programming language i.e. Java C C Perl etc. can be used to code the network API so as long as it results in a network API that can automatically manage connections and query statements for accessing data from a network database storage device.

The invention may be practiced with other computer system configurations including hand held devices microprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. The invention may also be practiced in distributing computing environments where tasks are performed by remote processing devices that are linked through a network.

With the above embodiments in mind it should be understood that the invention may employ various computer implemented operations involving data stored in computer systems. These operations are those requiring physical manipulation of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. Further the manipulations performed are often referred to in terms such as producing identifying determining or comparing.

Any of the operations described herein that form part of the invention are useful machine operations. The invention also relates to a device or an apparatus for performing these operations. The apparatus may be specially constructed for the required purposes such as the carrier network discussed above or it may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular various general purpose machines may be used with computer programs written in accordance with the teachings herein or it may be more convenient to construct a more specialized apparatus to perform the required operations.

The invention can also be embodied as computer readable code on a computer readable medium. The computer readable medium is any data storage device that can store data which can thereafter be read by a computer system. Examples of the computer readable medium include hard drives network attached storage NAS read only memory random access memory CD ROMs CD Rs CD RWs magnetic tapes and other optical and non optical data storage devices. The computer readable medium can also be distributed over a network coupled computer systems so that the computer readable code is stored and executed in a distributed fashion.

Although a few embodiments of the present invention have been described in detail herein it should be understood by those of ordinary skill that the present invention may be embodied in many other specific forms without departing from the spirit or scope of the invention. Therefore the present examples and embodiments are to be considered as illustrative and not restrictive and the invention is not to be limited to the details provided therein but may be modified and practiced within the scope of the appended claims.

