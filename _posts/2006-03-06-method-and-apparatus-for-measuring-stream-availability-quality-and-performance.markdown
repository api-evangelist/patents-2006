---

title: Method and apparatus for measuring stream availability, quality and performance
abstract: A streaming measurement agent designed to experience, measure, and report on a media stream as an actual end user would experience the stream. Preferably, agent resides transparently within a streaming media player itself so that it can monitor stream packet flows within the player as the measured streams are being played. In an illustrative embodiment, the agent comprises a performance monitoring module (PMM), which is software that resides in an interface between an existing core module and a renderer of a media player. The agent PMM intercepts each useful packet as it goes from the core to the renderer and, as a result, it is able to compute quality metrics about the playback. The agent functions “transparently” to the media player by presenting the core with an application programming interface (API) that emulates the API that the renderer normally presents to the core. Thus, when the core believes it is calling the renderer, it is actually calling the agent PMM, which can then receive all the packets from the core and process them. After computing relevant performance metrics using the packets it receives, the agent PMM calls the renderer. A set of performance agents can be managed by a service provider to enable a content provider to determine how a stream is perceived by end users.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07725576&OS=07725576&RS=07725576
owner: Akamai Technologies, Inc.
number: 07725576
owner_city: Cambridge
owner_country: US
publication_date: 20060306
---
This case is a continuation of prior Ser. No. 10 364 753 filed Feb. 11 2003 now U.S. Pat. No. 7 010 598 which application was based on and claimed priority from Ser. No. 60 356 076 filed Feb. 11 2002.

Streaming media is a type of Internet content that has the important characteristic of being able to be played while still in the process of being downloaded. A client machine can play the first packet of the stream and decompress the second while receiving the third. Thus an end user can start enjoying the multimedia without waiting to the end of transmission. Streaming is very useful for delivering media because media files tend to be large particularly as the duration of the programming increases. Indeed for live events the file size in effect is infinite. To view a media file that is not streamed users must first download the file to a local hard disk which may take minutes or even hours and then open the file with player software that is compatible with the file format. To view streaming media the user s browser opens player software which buffers the file for a few seconds and then plays the file while simultaneously downloading it. Unlike software downloads streaming media files are not stored locally on a user s hard disk. Once the bits representing content are used the player typically discards them.

Streaming media usually relies on proprietary server and client software. The server client production and encoding tools developed by a streaming software vendor are collectively referred to as a format. Streaming media encoded in a particular format must be served by that format s media server and replayed by that format s client. Streaming media clients are often called players and typically they exist as plug ins to Web browsers. The three major streaming media formats in use today are RealNetworks RealSystem G2 Microsoft Windows Media Technologies WMT and Apple QuickTime.

An ever growing number of content providers enterprises and content delivery networks utilize and deliver streaming media. As a consequence it has become important to quantify in a scientific and measurable way how well a given stream was delivered as well as to devise relevant metrics that capture the end user s experience of the stream. Client media players have the capability of generating basic statistics about the streams they deliver. Unfortunately the correlation of some of these statistics with a high quality end user experience is subjective and thus extremely difficult to measure effectively. For example frame rate a commonly used metric reported by media players may not be a robust indicator of stream quality because players can interpolate and insert variable quality frames into a stream. As another example some media players report a bandwidth metric that does not accurately indicate whether or not the bytes are received in a timely fashion so that they can be used for rendering.

There are several companies such as Keynote StreamCheck and others that provide partially or completely outsourced streaming monitoring solutions. In an illustrative system streaming measurement computers sometimes called agents connect to URLs and collect relevant statistics such as initial buffer time packet information and overall stream quality. These measurement agents are typically positioned strategically around the Internet so as to accurately represent the experience of an end user connecting to a given site URL. Providers of such outsourced performance monitoring solutions typically provide performance data in the form of real time and historical reports and threshold based alarms.

By way of additional background it is also known in the prior art that streaming performance measurement is significantly harder than web download measurements for several reasons. Unlike web performance where it suffices to measure object download times streams can show degradation in significantly complex ways that need to be quantified and measured. Unlike the HTTP protocol an open protocol measuring stream performance involves taking into account complex proprietary streaming protocols such as RTSP Real and MMS Windows Media .

One can distinguish three steps in making streaming media content available to the end user the media is captured and encoded the media is delivered over the network to the client i.e. the media player of the end user and the media is rendered by the media player to be viewed by the end user. The process of delivering streaming media over the network can degrade the quality perceived by the end user. A primary goal of a content delivery network or CDN is to ensure that the media is delivered to a requesting end user with as few distortions as possible from its pristine encoded form thereby maximizing the end user experience of the stream. The root causes of degradation in stream quality are problems that may occur in the underlying network that transports the media from the server to the client. For example network connectivity may go down which limits the ability of the client to talk to the server. The effective bandwidth available between the server and client may be greatly reduced. The network may lose packets sent from the server to the client. More subtly the network may cause packets to be re ordered in route to the client. Or the packets may be delivered by the network to the client late in which case the packets will not be useful in the stream playback.

It is instructive to examine how the client and the server react to these network problems in a manner that degrades stream quality. As noted above typically the client and the server communicate using a proprietary protocol such as Real s RTSP or Windows Media s MMS to control the manner in which data is streamed from the server to the client. The client server protocol is typically designed to overcome moderate amounts of network degradation. The player typically buffers several seconds of data ahead of what is currently being rendered. This buffering helps the player smooth out any variations in the rate at which packets are being received including out of order delivery of packets. Further buffering provides an opportunity for the player to tolerate a certain amount of packet loss because lost packets can be re requested from the server and received in time for playback. Consequently a moderate degradation in the network is effectively shielded from the user.

As the network degrades further however one might see prolonged periods of reduction in the available bandwidth or a significant amount of packets lost or a significant number of packets arriving late. The server typically reacts to such a situation by sending less than the full encoded bandwidth to the client resulting in a thinned playback. The server achieves this thinning by sending only the more important bytes and throwing away the rest. For example the server may send only key video frames and audio and not send the rest of the content. In the extreme case thinning results in the so called slide show effect where isolated frames are displayed without interpolation. If the stream is encoded at multiple bit rates thinning is effected more seamlessly e.g. by the server switching to a replica of the stream encoded at a lower bit rate. Typically the bandwidth streamed from the server to the client is controlled by a feedback loop where the client continually estimates the available bandwidth and reports it to the server and the server attempts to fit the stream to the available bandwidth. An even more drastic degradation in the network e.g. a rapid reduction in the available bandwidth may deplete the player s buffer of data. When the player cannot continue the playback it freezes to refill its buffer before resuming again resulting in an interrupted playback. The player is typically designed to rebuffer only under extreme network conditions.

There is a need in the art to provide for improved methods for measuring stream quality and performance. The present invention addresses this need.

An object of the present invention is to provide a streaming measurement agent that is designed to experience measure and report on a media stream as an actual end user would experience the stream. Preferably this is accomplished by having the agent reside transparently within a media player itself so that the agent can monitor stream packet flows within the player as the measured streams are being played. In an illustrative embodiment the agent comprises a performance monitoring module PMM which is software that preferably resides in an interface between an existing core module and a rendering module a renderer of a media player. The agent PMM preferably intercepts each useful packet as it goes from the core to the rendering module and as a result the agent is able to compute quality metrics about the rendering in an highly accurate fashion. The agent functions transparently to the media player by presenting the core with an application programming interface API that emulates the API the renderer normally presents to the core. Thus when the core believes it is calling the renderer the core is actually calling the agent PMM which can then receive all the packets from the core and process them. After computing the relevant performance metrics using the packets received the agent PMM calls the renderer and from the perspective of the renderer the agent plays the same role as the core.

According to a feature of the invention the agent may compute one or more quality or performance metrics by intercepting useful packets that flow inside the media player. Generally a given statistic is generated from the intercepted useful packet. As used herein a given statistic is some arbitrary function that can be computed from the sequence of useful packets that are intercepted. Preferably a useful packet is one that has a given set of properties e.g. it has not been thinned by a streaming server during delivery it was not lost in an unrecoverable manner during delivery and it arrived at the player in time to be useful for rendering. In one particular embodiment the agent uses these packets to compute an actual playback bandwidth an accurate measure of stream quality as perceived by an end user. Other packet related metrics and bandwidth related metrics are also obtained by monitoring the packet flow through the embedded performance monitoring module. Additionally the agent may use native media player functions e.g. a callback function to obtain other useful information such as stream startup time interruptions components of startup time and the like.

Monitoring the actual packet stream within the media player itself according to the present invention provides a novel way to evaluate stream availability quality and performance. Because all or substantially all useful packets flow through the PMM the present invention provides an enhanced view into the effectiveness of the stream delivery process as compared to prior art techniques. The packet flow through the PMM enables the generation of important performance metrics such as actual playback bandwidth and these metrics can be supplemented with metrics generated through other means e.g. using player callback functions.

According to another aspect of the present invention the above described agent technology is deployed in a widely distributed manner to provide stream quality and performance measurements from a plurality of locations. As compared to prior art techniques data collected from these agents can more accurately report on how successfully a stream is being delivered from a given server to a set of media players.

According to a further aspect of the present invention a managed stream quality and performance measurement service is provided by a service provider on behalf of particpating content providers e.g. entities that use a content delivery network CDN to facilitate streaming media delivery. The service utilizes a set of performance agents such as described above that are deployed in a diverse set of networks and geographic locations to measure performance over a wide variety of conditions. The service provider may deploy the measurement agents in locations that are otherwise free of streaming servers or co located with such servers.

The foregoing has outlined some of the more pertinent features of the present invention. These features should be construed to be merely illustrative. Many other beneficial results can be attained by applying the disclosed invention in a different manner or by modifying the invention as will be described. Accordingly other features and a fuller understanding of the invention may be had by referring to the following Detailed Description of the Preferred Embodiment.

The core is responsible for transporting data received from the media server. Typically the core establishes a control channel to exchange control information with the media server. Such information may include requests from the player to describe play pause stop the stream feedback from the player on the perceived bandwidth packet loss and other metrics information from the server on the media that is being requested and so forth. As noted above the control protocol between the core and the media server is typically proprietary for example RTSP for Real and MMS for Windows Media. In addition to the control channel the core typically establishes a data channel on which the actual media stream flows from the server to the client. The media stream is a series of packets containing audio video and text information. The packets must be received in a timely fashion for the stream to be useful. In particular each packet typically has a timestamp denoting when it must be rendered and the core transfers over to the renderer to be rendered those packets that arrive in a timely fashion. The core can receive packets from the server several seconds ahead of the time that they must be rendered and the packets arriving ahead of time are stored in a buffer not shown . This provides an opportunity for the core to re request missing packets from the server and to recover them in time for such packets to be rendered appropriately. The renderer receives packets from the core and renders the data contained in the packet. The renderer contains several functional units one for each type of media or there may be a separate renderer for each type. Audio information is rendered through the sound device on the client s computer whereas video and text information are rendered on the computer display screen.

The agent is a piece of software capable of playing streams measuring the availability and quality of the streams and reporting this information. In a representative embodiment the agent is independent of the core or the renderer although this is not a requirement of the invention. In an appropriate case the functionality of the agent may be native to the core or to the renderer. A given media player vendor thus may provide the media player with the agent functionality built in.

A given media player includes an agent and a set of media players with embedded agents may comprise a stream monitoring system as illustrated in . In this example the stream monitoring system includes without limitation a front end where users can setup stream tests and push these tests out to a set of agents deployed in diverse network and geographic locations and a back end that stores the performance data reported by the agents and provides analysis tools and a convenient user interface UI for viewing the test results. The one or more computers that comprise front end and back end preferably are accessed via a secure channel although this is not a limitation. A convenient way of implementing these sub systems is via an intranet or extranet application e.g. using a Web browser over a secure SSL connection. In one particular embodiment a service provider uses the front end to provision the tests and the service provider and its customers use the back end to view or evaluate the test results. Preferably the agents themselves schedule the tests perform the tests and report back on the results.

As seen in an illustrative agent has two primary components an agent shell and the agent nucleus each of which is now described at a functional level. The agent shell as illustrated is logically distinct from from the agent nucleus . Agent nucleus includes a performance monitoring module PMM which resides across the interface between a core and a renderer and monitors the packet flow. In this embodiment the agent nucleus includes the core and the renderer which typically are elements that are provided by the third party media player vendor although this is not a requirement. Alternatively the agent nucleus may comprise just the PMM and the core. Generally the agent shell provides control functions for the agent nucleus and in particular the PMM and initiates one or more tests and the agent shell receives the test results. In an illustrative embodiment the agent shell includes code that provides several functions such as determining a configuration of tests that need to be carried out scheduling the tests and reporting back on the stream quality e.g. to the back end of the stream monitoring system. The step of reading the test configuration may be accomplished by reading a configuration file present in the local machine or by querying a real time communication mechanism. In a representative embodiment the configuration file is pushed from the front end system to the agent shell or it is pulled on demand by the agent shell.

Typically a configuration of tests consists of several test suites where each test suite can be performed independently and in parallel. In a representative embodiment each test suite has a start time when the agent needs to start testing the test suite an end time when the agent needs to stop testing the test suite a priority that provides scheduling information on how important the test suite is and a frequency which determines how often the testing of the test suite is repeated. Preferably each test suite is a series of tests that are executed in a sequence one after another. Preferably each test is specified by the URL of the stream that needs to be tested max startup time which is the maximum amount of time the agent will wait for the stream to start the playback before declaring failure max stream time which is the amount of time in the stream that the agent plays the stream and max play time which is the maximum amount of actual clock time the agent will attempt to play the stream. Note the subtle distinction between stream time which is defined internal to the stream that is being measured and play time which is actual clock time for example the agent could play the stream till it reaches the 3 minute point in the clip i.e. elapsed stream time is 3 minutes but it could actually take 4 minutes of clock time to reach that point due to rebuffering events when the play is frozen i.e. elapsed play time is 4 minutes. Preferably the agent stops playing the clip when either max stream time or max play time is reached whichever is reached the earliest.

As noted above the agent shell also performs scheduling of the tests. The shell schedules the tests in the test suites per the specifications and it hands tests in the appropriate sequence to the agent nucleus for testing. The agent nucleus is responsible for conducting the tests and reporting back the measured stream quality metrics back to the agent shell. In particular the shell logs the stream quality metrics into a log file that for example may contain one log line per test. In one embodiment the logs are transported to the back end system e.g. through log mailing. Alternately the stream quality data can also be reported back by a mechanism that is more real time than log mailing namely a distributed query mechanism.

The agent nucleus takes in the URL that needs to be tested plays the stream e.g. through at least the core measures one or more performance metrics and reports these metrics back to the agent shell . As illustrated in the nucleus incorporates within it or is otherwise associated with a media player e.g. a Windows Media player a Real player a QuickTime player that is used to play the streams. In particular the media player is typically a black box as it is a proprietary piece of software. Of course it is known that looking inside a black box to extract performance information is a challenging task. According to the present invention however the agent nucleus overcomes these deficiencies by implementing an interface between the core and the renderer that is used to monitor stream performance. As noted above and as shown in the agent nucleus contains a performance monitoring module PMM that resides within or across this interface. As will be seen the quality of the stream that is rendered depends on the useful packets handed over by the core to the renderer. As used herein useful packets are considered to be those packets that are not thinned out by the server that were not lost in an unrecoverable fashion as they were transmitted over the network from the server to client and that arrived in time to be useful for the rendering. Preferably the performance monitoring module intercepts all or substantially all the useful packets as the packets go from the core to the renderer and it is able to compute quality metrics about the playback.

Regardless of the media player architecture the performance monitoring module PMM should be designed to behave like a renderer to the core to effectively intercept the useful packets. In particular the PMM is designed to provide the same or substantially the same application programming interface API to the core as the renderer. Thus when the core thinks that it is calling the renderer it is really calling a wrapper renderer that is a part of the PMM. The wrapper renderer can then receive all the packets from the core. After computing the relevant performance metrics using the packets that it receives the PMM can then complete the packet transfer by calling the actual renderer. From the perspective of the renderer the PMM plays the same role as the core.

According to an illustrative embodiment the PMM computes a one or more performance metrics by intercepting useful packets that flow inside the media player. An illustrative metric is actual playback bandwidth which measures the bits sec that arrive without loss and in time for rendering. Conventional media players do not provide this metric. As shown in the module preferably also uses one or more callback functions provided by the media player to compute additional metrics.

A description of how PMM computes the various performance metrics follows. In particular the following is a generic description of the performance metric computation strategy together with specific details for implementing the invention with representative media players provided by Real and WMS. To compute the metrics the PMM may rely on a media player software development kit SDK for the particular streaming format. Thus for example a first embodiment of the agent for use with a Real media player relies on the RealSystem SDK. A second embodiment of the agent for use with a WMS media player uses the Windows Media Format SDK. In the following discussion familarity with the Real and Windows Media player operations as well as the associated SDKs is presumed.

The following desribes a stream quality measurement methodology that may be implemented using the agent technology. As noted above the agent provides a detailed inside view of the stream because it preferably sits between the core and the renderer of the media player. With this view several first level questions may be asked about each playback that form the basis for the stream quality metrics was the user able to connect to the server and play the stream how long did the user have to wait before the stream playback began and what fraction of the media was delivered effectively from the server to the player so as to be usable and what fraction was thinned out at server lost in transit or arrived late so as to be unusable were there any interruptions i.e. rebuffers during the playback. These first level metrics taken together which is not a requirement provide a clear picture of how the stream played back. In addition use of the agent facilitates measurement of several second level or auxiliary metrics that provide additional information about the stream quality. These will be defined below.

Besides the first level metrics there are other metrics of interest that provide more detailed information on the quality of the stream. They include one or more of the following 

As noted above the streaming agent may be implemented as a standalone device or a set of such agents may be implemented preferably in a distributed manner to enable a content or other service provider to determine stream quality and performance from a plurality of different locations. In such case an agent is implemented at each such location and the distribed agents are controlled to each request a given stream. As the streams are being delivered from one or more media servers to media players that include the embedded agent software data is collected. Periodically that data is transferred from the agents to a central management location where it is processed into reports or otherwise made available for viewing e.g. via a secure portal for downloading or for other analysis. In one particular embodiment the agents comprise part of a content delivery network CDN and are used to enable a CDN service provider or CDN customers to determine stream quality and performance. As is well known a CDN is a collection of content servers and associated control mechanisms that offload work from Web site origin servers by delivering content on their behalf to end users. A well managed CDN achieves this goal by serving streaming media or some or all of the contents of a site s Web pages thereby reducing the customer s costs while enhancing an end user s browsing experience from the site. In operation the CDN typically uses a request routing mechanism to locate a CDN content server close to the client to serve each request directed to the CDN where the notion of close is based in part on evaluating results of network traffic tests. A CDN may be used to provide live or on demand streaming.

