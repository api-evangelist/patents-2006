---

title: Approval process for booting devices in pre-boot execution environment (PXE)
abstract: Approving a client to boot in a pre-boot execution environment. A request is received from the client to boot the client by a computing device. The request includes device information associated with the client. A data store having a collection of known device information is queried in response to the received request. The request is stored, and it is determined whether to execute the received request by evaluating the device information in the stored request. The received request is responded to as a function of the evaluated device information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07574592&OS=07574592&RS=07574592
owner: Microsoft Corporation
number: 07574592
owner_city: Redmond
owner_country: US
publication_date: 20060221
---
When deploying an operating system to multiple computing devices it is beneficial to utilize tools to automate the deployment process. For example in a computing device manufacturing process an original equipment manufacturer OEM typically installs an operating system OS with standard configurations or a standard OS to the computing device before customers purchase them at retail stores or over the Internet. In a corporate setting a business may need to upgrade a number of identically configured machines simultaneously and efficiently using such automated process.

Typically the standard OS is deployed and installed automatically to the computing devices by copying or duplicating a pre determined OS image to the computing device for booting the computing device. For example the automated deployment and installation process would install the OS with standard configurations on a memory storage area of each of the computing devices via a wired or a wireless connection. Upgrades to OS or other applications may be installed in a similar fashion.

However with the ongoing advancements and developments in storage medium and computing device processing powers installing a standard set of OS image to a number of computing devices no longer accounts for proper configuration of the computing devices.

One available system Pre Boot Execution Environment PXE protocol allows a client to obtain an OS image from a PXE server in a networked environment. The client initiates the PXE process by broadcasting a PXE request in the networked environment. However any PXE server listening for a request can read and choose to respond to the client. A disadvantage results if more than one PXE server exists in the networked environment because the client will be serviced by whichever PXE server responds the quickest to the client s request. For example if two PXE servers are in the networked environment the first configured with application logic to service personal computer clients and a second configured to service any type of device e.g. personal computers point of sale devices and network servers it is not possible to determine which PXE server will be the first to respond to the request from a point of sale device client. Therefore it is possible that while using the PXE protocol the point of sale device may incorrectly receive a boot image for a personal computer.

In addition not only does an entity needs to deploy an OS on a number of different classes of computing devices from personal digital assistant PDA to server computers to point of sale terminals the entity also needs to consider that each class of the computing devices may require particular configurations due to hardware components. For example a PDA X with a chip having a processing power of 500 MHz and a storage memory capacity of 5 GB may require a different OS image from another PDA Y in the same production line with a chip having a processing power of 733 MHz and a storage memory capacity of 10 GB. As such the existing OS image deployment systems of installing an OS with standard configuration or a standard OS image would not properly configure the PDA Y because both PDA X and PDA Y would receive the same OS image for booting the devices. In addition current OS image deployment systems lack the ability to efficiently respond to clients that are unknown to the server.

Embodiments of the invention overcome shortfalls of existing OS boot image deployment systems by placing the unknown clients in an intermediate storage awaiting approval by an administrator or an automated process. By approving or denying unknown client s request the server may send an OS image to the client and adds the client to the data store storing known clients.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Referring to the system illustrates an exemplary embodiment in which aspects of the invention may be implemented. A server which may be one of a plurality of servers includes components that enable the deployment of an operating system OS to a plurality of clients via a networked environment . In one embodiment the server deploys the OS such as MAC OS X UNIX Linux or Windows Vista operating system to the clients . The server and the clients may communicate via a number of underlying network transport mechanisms available in the networked environment . In one embodiment the transport mechanisms include Transmission Control Protocol TCP Trivial File Transfer Protocol TFTP User Datagram Protocol UDP Remote Procedure Call RPC File Transfer Protocol FTP HyperText Transfer Protocol HTTP or the like. In one example server in system includes a server described in .

The clients include one or more computing devices such as a desktop computer a laptop computer a personal digital assistant PDA or other devices. In another embodiment server and each of the clients implement at least a part of a computer depicted in .

In one example system may be used in a pre boot execution environment PXE . For example server may be a PXE server which watches for dynamic host configuration protocol DHCP discovery requests that include a special tag identifying the client as a PXE client. If the discovery request includes the tag the PXE server replies to the client with configuration information including the name of a boot image file which may include an OS boot image pre OS image file pre boot agents e.g. computer executable instructions for scanning clients for viruses before installing an OS . The boot image file may transferred to clients using TFTP and the transferred file may be used to boot the clients .

Referring now to an exemplary embodiment of the server of the invention is shown. The server includes one or more components such as a transport layer a PXE server and a Control Protocol Server . The transport layer handles the details associated with communicating with clients and provides a transport independent communication mechanism to the PXE Server and the Control Protocol Server . In one embodiment the transport layer may communicate with the clients utilizing a variety of network protocols including Transmission Control Protocol TCP User Datagram Protocol UDP Remote Procedure Call RPC and HyperText Transfer Protocol HTTP .

The PXE server accepts PXE requests from the clients . PXE is one of the components of the Wired for Management WfM specification that allows the clients to boot from the PXE server on a network prior to booting an operating system from a hard drive local to the clients . After receiving the PXE request from the client the PXE server passes the request to a PXE provider . The PXE provider is a component containing the application logic to formulate a response to the clients . In one embodiment the PXE provider is Boot Information Negotiation Layer A BINL . The responsibilities of the BINL service include answering the request querying a directory service on behalf of the clients as well ensuring that the correct policy and configuration settings are applied to the clients during the operating system installation. In another embodiment the PXE provider includes two or more PXE providers each with distinct application logic.

The Control Protocol Server accepts requests from a reduced operating system environment. The reduced operating system aids in the deployment of the operating system. In one embodiment the Control Protocol Server accepts Microsoft Windows Preinstallation Environment WinPE requests. After receiving the request from the clients the Control Protocol Server passes the request to a Control Protocol Provider . The Control Protocol Provider is a component containing the application logic to formulate a response to the clients . In one embodiment the Control Protocol Provider includes a plurality of providers such as A and B.

It is also to be understood that additional components connected wired or wirelessly to the server may be added to perform operations of the transport layer the PXE server and the control protocol server .

Initially a client e.g. client attempts to request to be booted by a server e.g. PXE server . The request is received by the server which may be coupled with one or more other servers e.g. a Windows Deployment Services WDS server or PXE providers for responding to the request.

In existing OS boot image file deployment systems the server responds to the request by sending a standard or a predetermined OS boot image file to the client. However the request from the client may identify an unknown client to the server. To deal with such situation current deployment systems employ three basic models in responding to the requests from clients responding to no clients responding to all clients and responding to a subset of designated clients. In the last model the subset of designated clients is previously identified and is also known as pre staged clients or known clients. Frequently information of these pre staged or known clients is stored in a data store.

In dealing with unknown clients i.e. clients that are not pre staged or whose information is in the data store two usual processes are used for adding entries for booting client computers into the known client data store a manual method and an automated method. The manual method requires manually entering entries into the data store for each unknown client. The automated method usually requires receiving a spreadsheet or other such file from a source e.g. an OEM vendor that lists all devices ordered from the vendor along with the unique identifiers of the system that needs to be recorded in the data store.

Embodiments of the invention provide a pending approval process which enables an option to approve a client that is currently unknown and place it in an intermediate storage e.g. a queue awaiting approval. During this time period the client remains in a pending state until the client is approved or rejected by an administrator or an automated process. If the client is approved it is added to the data store of known clients and the normal PXE boot process continues. If the client is rejected the client is not allowed to boot via PXE.

If the client is found in the data store the device is known. If client is not known server forwards or transmits request to an intermediate storage for further analysis whether to grant request from client . In one example the intermediate storage is a queue. In another example intermediate storage may include other temporary storage areas for storing the request such that server makes the request available for further evaluation whether to approve or grant the request at a later time. In one example request remains in intermediate storage for a pre determined period of time e.g. 24 hours until at least one of the four things occur 

3. A timeout is reached by the server after a pre determined period of time e.g. 6 hours and the client does not receive the requested boot image from the server and

4. A user operating the client terminates or cancels request or the administrator cancels or terminates the approval process on server .

In one embodiment during the time when client is in intermediate storage a special PXE network boot program will be sent to client to pause or delay the PXE boot. In doing so the PXE boot by server is paused or delayed and the administrator may review request in intermediate storage and accept or deny request accordingly. In addition by pausing or delaying the booting process embodiments of the invention efficiently avoid having client being booted more than once.

For example suppose the client has one or more sources from which the client can boot such as a CD ROM the server a hard drive or the like. When the client selects to boot from the server the client sends a request e.g. request to the server . The server receives the request and querying the data store and failing to locate the device information of the client in the data store the server stores the request in the intermediate storage to proceed the process described above. While the request is waiting for approval the client may have an internal time out policy and may determine to boot from another source such as the CD ROM. In this situation the client may thus attempt to boot from the CD ROM without informing the server . By the time the administrator approves the request and the server transmits an image to boot the client the client would have been booted twice i.e. once by the CD ROM and the server .

As such embodiments of the invention include the PXE network boot program to be sent to the client to delay or pause the client during the PXE boot with the server such that the client would not proceed with its internal booting process while its request is being evaluated.

Alternatively additional information apart from the information normally passed during PXE boot e.g. a PXE boot packet may be collected to help the administrator make a better determination whether to accept or reject the computing device. For example this information could include one or more of the following information computing device vendor model number or the like.

In another embodiment an automated process e.g. software an application or a collection of computer executable instructions instead of administrator manual approval process may be employed to determine whether to approve or grant request . In another embodiment factors for approving or granting request include whether client matches existing clients whether client is equipped with a certain type of hardware configuration or the like.

Once the request is responded to either by an automated process or by the administrator as a function of the evaluated device information information associated with the client may added to data store such that the client is now a known device. As such server transmits the requested boot image file to the client via .

For example a message component receives from a client e.g. client a request for booting at . The request includes information associated with the client. A memory component queries a data storage component storing a collection of known device information. If the information associated with the client is not found in the data storage component the memory component stores the request in a collection of unknown client information at . For example the memory component stores the request in an intermediate storage area such as intermediate storage in . At an approval component determines whether to execute the received request by evaluating the client information in the stored request. A service component responds to the received request as a function of the evaluated information. In an alternative embodiment a boot component delays or pauses the service component in executing the received request when the request is stored by the memory component .

The computer typically has at least some form of computer readable media. Computer readable media which include both volatile and nonvolatile media removable and non removable media may be any available medium that may be accessed by computer . By way of example and not limitation computer readable media comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer storage media include RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that may be used to store the desired information and that may be accessed by computer . Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. Those skilled in the art are familiar with the modulated data signal which has one or more of its characteristics set or changed in such a manner as to encode information in the signal. Wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media are examples of communication media. Combinations of any of the above are also included within the scope of computer readable media.

The system memory includes computer storage media in the form of removable and or non removable volatile and or nonvolatile memory. In the illustrated embodiment system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. For example illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media. also shows a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that may be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive and magnetic disk drive and optical disk drive are typically connected to the system bus by a non volatile memory interface such as interface .

The drives or other mass storage devices and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components may either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies.

A user may enter commands and information into computer through input devices or user interface selection devices such as a keyboard and a pointing device e.g. a mouse trackball pen or touch pad . Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are connected to processing unit through a user input interface that is coupled to system bus but may be connected by other interface and bus structures such as a parallel port game port or a Universal Serial Bus USB . A monitor or other type of display device is also connected to system bus via an interface such as a video interface . In addition to the monitor computers often include other peripheral output devices not shown such as a printer and speakers which may be connected through an output peripheral interface not shown .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to computer . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. LAN and or WAN may be a wired network a wireless network a combination thereof and so on. Such networking environments are commonplace in offices enterprise wide computer networks intranets and global computer networks e.g. the Internet .

When used in a local area networking environment computer is connected to the LAN through a network interface or adapter . When used in a wide area networking environment computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external is connected to system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to computer or portions thereof may be stored in a remote memory storage device not shown . By way of example and not limitation illustrates remote application programs as residing on the memory device. The network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Generally the data processors of computer are programmed by means of instructions stored at different times in the various computer readable storage media of the computer. Programs and operating systems are typically distributed for example on floppy disks or CD ROMs. From there they are installed or loaded into the secondary memory of a computer. At execution they are loaded at least partially into the computer s primary electronic memory. Aspects of the invention described herein includes these and other various types of computer readable storage media when such media contain instructions or programs for implementing the steps described below in conjunction with a microprocessor or other data processor. Further aspects of the invention include the computer itself when programmed according to the methods and techniques described herein.

For purposes of illustration programs and other executable program components such as the operating system are illustrated herein as discrete blocks. It is recognized however that such programs and components reside at various times in different storage components of the computer and are executed by the data processor s of the computer.

Although described in connection with an exemplary computing system environment including computer embodiments of the invention are operational with numerous other general purpose or special purpose computing system environments or configurations. The computing system environment is not intended to suggest any limitation as to the scope of use or functionality of any aspect of the invention. Moreover the computing system environment should not be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment. Examples of well known computing systems environments and or configurations that may be suitable for use with aspects of the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics mobile telephones network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

Embodiments of the invention may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include but are not limited to routines programs objects components and data structures that perform particular tasks or implement particular abstract data types. Aspects of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

An interface in the context of a software architecture includes a software module component code portion or other sequence of computer executable instructions. The interface includes for example a first module accessing a second module to perform computing tasks on behalf of the first module. The first and second modules include in one example application programming interfaces APIs such as provided by operating systems component object model COM interfaces e.g. for peer to peer application communication and extensible markup language metadata interchange format XMI interfaces e.g. for communication between web services .

The interface may be a tightly coupled synchronous implementation such as in Java 2 Platform Enterprise Edition J2EE COM or distributed COM DCOM examples. Alternatively or in addition the interface may be a loosely coupled asynchronous implementation such as in a web service e.g. using the simple object access protocol . In general the interface includes any combination of the following characteristics tightly coupled loosely coupled synchronous and asynchronous. Further the interface may conform to a standard protocol a proprietary protocol or any combination of standard and proprietary protocols.

The interfaces described herein may all be part of a single interface or may be implemented as separate interfaces or any combination therein. The interfaces may execute locally or remotely to provide functionality. Further the interfaces may include additional or less functionality than illustrated or described herein.

In operation computer executes computer executable instructions such as those illustrated in to implement aspects of the invention.

The order of execution or performance of the operations in embodiments of the invention illustrated and described herein is not essential unless otherwise specified. That is the operations may be performed in any order unless otherwise specified and embodiments of the invention may include additional or fewer operations than those disclosed herein. For example it is contemplated that executing or performing a particular operation before contemporaneously with or after another operation is within the scope of aspects of the invention.

Embodiments of the invention may be implemented with computer executable instructions. The computer executable instructions may be organized into one or more computer executable components or modules. Aspects of the invention may be implemented with any number and organization of such components or modules. For example aspects of the invention are not limited to the specific computer executable instructions or the specific components or modules illustrated in the figures and described herein. Other embodiments of the invention may include different computer executable instructions or components having more or less functionality than illustrated and described herein.

When introducing elements of aspects of the invention or the embodiments thereof the articles a an the and said are intended to mean that there are one or more of the elements. The terms comprising including and having are intended to be inclusive and mean that there may be additional elements other than the listed elements.

As various changes could be made in the above constructions products and methods without departing from the scope of aspects of the invention it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.

