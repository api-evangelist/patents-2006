---

title: Approximating function properties with expander graphs
abstract: Function properties may be approximated using an expander graph. For example, an approximate average of a function may be determined by randomly exploring an expander graph. Values of the function are associated with vertices of the expander graph. The expander graph is randomly explored by traversing edges and encountering vertices. The exploration may comprise a crawl, a walk, and so forth. An approximate average of the function is determined based on the function values that are associated with encountered vertices.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07680871&OS=07680871&RS=07680871
owner: Microsoft Corporation
number: 07680871
owner_city: Redmond
owner_country: US
publication_date: 20060119
---
In many circumstances the average value of a function is desired for some purpose. Averages may often be determined directly using each possible value of the function. However determining averages directly may sometimes be impossible. Moreover there are times when directly determining an average is possible but it is not reasonable or feasible to do so. For example the mathematical computation required to determine a true average may be too great in terms of time and or processing resources especially when the number of values in the set is tremendous e.g. when there are billions or trillions of values and or when the computation is complex. Additionally it may be financially cost prohibitive to secure each and every value of a function especially when investigation or research is required e.g. when millions of people would need to be polled for information .

Accordingly an approximate average of a function is substituted from time to time for the true average. An approximate average of a function is computed using fewer than all of the actual values in the total set of values of the function.

Function properties may be approximated using an expander graph. For example an approximate average of a function may be determined by randomly exploring an expander graph. Values of the function are associated with vertices of the expander graph. The expander graph is randomly explored by traversing edges and encountering vertices. The exploration may comprise a crawl a walk and so forth. An approximate average of the function is determined based on the function values that are associated with encountered vertices.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter. Moreover other method system scheme apparatus device media procedure API arrangement etc. implementations are described herein.

As described herein approximate averages of functions may be determined using an expander graph. By way of example only respective values of a function are associated with respective vertices of an expander graph. An exploration of the expander graph produces selected values that are a subset of the total data set for the function. The selected values of the subset may be utilized to calculate an approximate average.

Three sections are included below. One section pertains to a relatively qualitative description of approximating properties of functions with expander graphs and another section pertains to a relatively quantitative description of approximating properties of functions with expander graphs. The first section is entitled Example Qualitative Implementations for Approximate Averaging with Expander Graphs . The second section is entitled Example Quantitative Implementations for Approximate Averaging with Expander Graphs . There is also a third section that extends the described schemes approaches etc. to properties of functions besides the average. This section is entitled Approximating General Function Properties with Expander Graphs .

More specifically approximate average determiner receives at least a portion of function and or a description of function . Function may be considered to adhere to the following example description functions are of the form D R where D is a finite set and R is the set of real numbers. In real world applications the values of a function typically have some attribute in common. For example a set of values of a function may have the same origin such as being from the same program file or survey. Alternatively each value of a set of values may represent the same real world variable or parameter such as age income or mortgage payment. The values of data sets for functions may alternatively share some other attribute or attributes.

Expander graph is a collection of vertices or nodes and a collection of edges. The edges interconnect the vertices. An exploration of expander graph is effected by traversing the edges between vertices. As is described more fully herein below an expander graph exploration may be a walk on an expander graph a crawl on an expander graph and so forth.

Individual values of function are associated with individual vertices of expander graph . An exploration of expander graph involves traversing edges to reach vertices. The values associated with traversed vertices are selected for determining an approximate average. A random seed not explicitly shown in may be used to determine the path of the exploration on expander graph .

An example of an expander graph is described herein below with particular reference to . Examples of explorations of an expander graph are also described. The examples include an example of a walk and a crawl on an expander graph . A crawl on an expander graph is described in more detail herein below with particular reference to . A walk on an expander graph is described in more detail herein below with particular reference to .

Generally any type of expander graph may be employed by approximate average determiner . Expander graphs are usually characterized as having a property that enables them to grow relatively quickly from a given vertex to its neighbor vertices and onward to still other vertices. An example of a family of graphs that are considered to have good expansion properties are the so called Ramanujan graphs. Although not required approximate averaging with an expander graph is facilitated by using an expander graph with good expansion properties.

The degree k indicates the number of edges emanating from a given vertex. Although not required expander graphs that are so called k regular graphs are particularly amenable for use in determining approximate averages. Such k regular graphs are graphs that have the same number of edges emanating from each vertex. Moreover two specific types of k regular graphs are particularly amenable for use in determining approximate averages. These two examples of k regular graph types are i supersingular elliptic curves expander graphs and ii Lubotzky Philips Sarnak LPS expander graphs. These two specific k regular expander graph types which are also examples of Ramanujan graphs are described mathematically herein below in the quantitative section.

As is apparent from each edge interconnects two vertices . Only a portion of the overall example expander graph is shown in due to space limitations. An actual expander graph may be much larger in practice. This is represented in expander graph by the long dashed lines emanating from some vertices and extending outward to terminate at unseen vertices .

As illustrated expander graph is a k regular graph with k 3. In other words each vertex has three edges extending there from and therefore terminating thereat depending on perspective and the direction of the exploration. Hence each vertex is directly connected to three other neighbor vertices . Although a k 3 regular graph is used as an example herein k may take any integer value especially of three or larger .

An example walk W and an example crawl C are both illustrated on expander graph . A crawl entails a pair wise independent sampling of a subset of the neighbors of a selected vertex. Generally a crawl C is shown as starting at vertex and extending to one or more directly connected neighbor vertices. A crawl C may include up to all of the neighbor vertices of the starting vertex . Specifically crawl C traverses edge to reach vertex . After returning to starting vertex crawl C traverses edge to reach vertex . After again returning to vertex crawl C traverses edge to reach vertex .

In a described implementation a crawl C involves traversing edges extending from a starting vertex to one or more neighbor vertices . Although the example crawl C on expander graph embraces each vertex to that is directly connected to the starting vertex crawls around expander graphs may embrace fewer than all of the neighbor vertices of a starting vertex. The number of neighbor vertices that are included in a crawl C is dependent on a number of factors that impact the approximate average determination as is described herein below. An input seed is used to select a next edge to be traversed to reach a next neighbor vertex of a given crawl C. Effecting a crawl C on an expander graph is described further below with particular reference to .

A walk entails sampling vertices as edges of the expander graph are traversed one after the other. Generally a walk W is shown starting at vertex and extending beyond vertex . Specifically example walk W traverses edges to and includes vertices to . Walk W starts at vertex and traverses edge to reach vertex . From vertex walk W traverses edge to reach vertex . From vertex walk W traverses edge to reach vertex . From vertex walk W traverses edge to reach vertex . From vertex walk W traverses edge to reach a vertex not explicitly shown in .

In a described implementation walk W can continue traversing edges to include other vertices in walk W as long as an input seed may be used to provide direction for the walk. The desired length of a walk W is dependent on a number of factors that impact the approximate average determination as is described herein below. The seed is used to select a next edge to be traversed to reach a next vertex from a given current vertex . With three edges emanating from each vertex in expander graph there are three options for a next step or leg of a walk W. Hence with a k 3 regular graph two bits from an input seed are used for each next edge or step determination. Creating a walk W on an expander graph is described further below with particular reference to .

Although the actions of flow diagram may be performed in other environments and with a variety of hardware and software combinations a device that is described herein below with particular reference to may be used to implement the method of flow diagram . For example approximate average determiner as embodied in processor executable instructions may implement the described actions. Other figures that are described herein above are referenced to further explain an example of the method. For example an approximate average determiner may implement the method using an expander graph of .

At block each function value is associated with a vertex of an expander graph. For example each respective value from a data set of a function may be associated with a respective vertex of an expander graph . At block a starting vertex is selected from the expander graph. For example a starting vertex for an exploration of an expander graph may be selected.

Using an input seed the starting vertex selection may be randomly made from among all existing vertices from among a subset of all existing vertices and so forth. Alternatively the starting vertex may be pre selected and or fixed. With the example walk W of expander graph of the starting vertex is . With the example crawl C of expander graph of the starting vertex is .

At block the expander graph is explored to encounter other vertices. For example with an exploration of an expander graph other vertices besides the starting vertex may be encountered so as to collect function values that are associated with encountered vertices. The exploration may take any of many possible forms including the example crawling of block C or the example walking of block W.

At block C a crawl is performed on the expander graph. For example a crawl C that embraces vertices to may be effected on expander graph from starting vertex . An example of crawling on an expander graph is described further herein below with particular reference to which illustrates a scheme and which illustrates a method. At block W a walk is performed on the expander graph. For example a walk W that embraces vertices to and beyond may be effected on expander graph from starting vertex . An example of walking on an expander graph is described further herein below with particular reference to which illustrates a scheme and which illustrates a method.

At block the average of the function values that are associated with encountered vertices is calculated. For example the average of the function values that are collected by encountering associated vertices during exploration may be determined. This average may be a true average of the collected function values. Because of the randomization properties of the expander graph this true average of a subset of the total function values is also an approximate average of the total values of the function. The accuracy and precision of the approximation is adjustable as is described further herein below.

Example expander graph is a regular graph with k 8. However expander graphs with other degrees may alternatively be used. The large circles each represent a vertex of expander graph . The solid lines represent edges that interconnect visible vertices. The large dashed lines represent edges that originate at a visible vertex and terminate on an un illustrated vertex. Many of the vertices and edges of expander graph are not explicitly shown in due to space limitations.

For the examples of a function having 26 values is used. These 26 values are represented by the 26 letters of the alphabet A B C D . . . X Y and Z. Of the 26 potential values six values are explicitly shown as being respectively associated with six vertices. These six values are D G P T V and Y. To determine an approximate average of this example alphabet sized function only a subset of the 26 total potential values is used. The size of this subset is based on a number of factors including a target additive error and a desired confidence level . These factors are addressed more rigorously herein below especially in the quantitative subsection entitled Example Quantitative Implementations for Approximate Averaging with Expander Graphs .

Random seed includes a number n of seed chunks with n being some integer. As illustrated random seed includes seed chunk seed chunk seed chunk seed chunk seed chunk seed chunk . . . seed chunk . Each seed chunk . . . is also graphically represented by a balloon having an integer . . . therein. The number of bits of each seed chunk may differ.

In operation random seed is used to select a next edge for traversing to a next neighbor vertex. In the illustrated example the starting vertex is randomly selected. Accordingly as indicated by the 0 balloon in expander graph a first seed chunk is used to select the starting vertex which is associated with function value V. Function value V is thus provided to approximate average calculator for inclusion in the approximate average calculation.

The next seed chunk seed chunk is then extracted and used to select a next edge as indicated by the 1 balloon. This selected edge leads to the next selected vertex which is associated with function value D. Function value D is thus provided to approximate average calculator . Crawl C continues by returning to the starting vertex.

The next seed chunk seed chunk is then extracted and used to select a next edge as indicated by the 2 balloon. This selected edge leads to the next selected vertex which is associated with function value G. Function value G is thus provided to approximate average calculator . Crawl C continues by returning to the starting vertex.

The next seed chunk seed chunk is then extracted and used to select a next edge as indicated by the 3 balloon. This selected edge leads to the next selected vertex which is associated with function value Y. Function value Y is thus provided to approximate average calculator . Crawl C continues by returning to the starting vertex.

In respective order the next seed chunks seed chunks and are then extracted and used to select two additional next edges as indicated by the 4 and 5 balloons. These selected edges lead to the next selected vertices which are associated with function values P and T. Function value P and function value T are thus provided to approximate average calculator .

Crawl C may continue by returning to the starting vertex which is associated with function value V. If additional function values are desired for inclusion in the approximate average calculation of approximate average calculator and additional seed chunks remain crawl C may continue to other vertices. Otherwise approximate average calculator activates to calculate an approximate average using function value entries that have been selected from expander graph. .

Although the actions of flow diagram C M may be performed in other environments and with a variety of hardware and software combinations an approximate average determiner may implement the described actions. Other FIGS. as described herein and especially are referenced below to further explain an example of the method.

By way of explanation only it is given that flow diagram C M begins a current round of crawling at the starting vertex after just returning from the vertex associated with function value Y. At block a seed chunk is extracted. For example seed chunk may be extracted from random seed .

At block a next edge is selected responsive to the extracted seed chunk. For example the edge indicated by the 4 balloon may be selected. At block the next edge is traversed to encounter the next neighbor vertex. For example crawl C may traverse the edge indicated by the 4 balloon.

At block the function value that is associated with the next neighbor vertex is ascertained. For example the function value P may be ascertained. At block the ascertained function value is forwarded to an average calculator. For example function value P may be forwarded to approximate average calculator .

At block it is determined if the crawl is concluded. For example crawl C may be concluded when a sufficient number of function values of function have been forwarded to approximate average calculator . As noted above an example approach to determining a sufficient number of function values is described further herein below in the quantitative section. If the crawl is concluded as determined at block then the overall method may continue with block of . If on the other hand the crawl is not yet concluded then at block the crawl returns to the starting vertex prior to the extraction of another seed chunk at block .

Example expander graph is a regular graph with k 3. However expander graphs with other degrees may alternatively be used. The large circles each represent a vertex of expander graph . The solid lines represent edges that interconnect visible vertices. The large dashed lines represent edges that originate at a visible vertex and terminate on an un illustrated vertex. Many of the vertices and edges of expander graph are not explicitly shown in due to space limitations. As described above with particular reference to a function having 26 alphabetically represented values is used. Of the 26 potential values six values i.e. D G P T V and Y are explicitly shown as being respectively associated with six vertices.

Random seed again includes n seed chunks . . . n . As noted above the number of bits of each seed chunk may differ. This is particularly true between the crawl and the walk approaches as there are generally a greater number of edges extending from each vertex with the crawl approach. Consequently fewer bits of random seed are consumed for each step of a walk.

In operation random seed is used to select a next edge for traversing to a next vertex. In the illustrated example the starting vertex is randomly selected. Accordingly as indicated by the 0 balloon in expander graph a first seed chunk is used to select the starting vertex which is associated with function value V. Function value V is thus provided to approximate average calculator for inclusion in the approximate average calculation.

The next seed chunk seed chunk is then extracted and used to select a next edge as indicated by the 1 balloon. This selected edge leads to the next selected vertex which is associated with function value D. Function value D is thus provided to approximate average calculator . In contrast to crawl C of walk W continues without returning to the starting vertex.

The next seed chunk seed chunk is then extracted and used to select a next edge as indicated by the 2 balloon. This selected edge leads to the next selected vertex which is associated with function value G. Function value G is thus provided to approximate average calculator . Walk W continues from the current vertex which is the one associated with function value G.

The next seed chunk seed chunk is then extracted and used to select a next edge as indicated by the 3 balloon. This selected edge leads to the next selected vertex which is associated with function value Y. Function value Y is thus provided to approximate average calculator . Walk W continues from the current vertex.

In respective order the next seed chunks seed chunks and are then extracted and used to select the next two edges as indicated by the 4 and 5 balloons. These respective selected edges along walk W lead to the next respective selected vertices which are associated with respective function values P and T. Function value P and function value T are thus provided to approximate average calculator .

Walk W may continue from the current vertex which is the one that is associated with function value T. If additional function values are desired for inclusion in the approximate average calculation of approximate average calculator and additional seed chunks remain walk W may continue to other vertices of expander graph . Otherwise approximate average calculator calculates an approximate average of function using function value entries that have been selected from expander graph .

Although the actions of flow diagram W M may be performed in other environments and with a variety of hardware and software combinations an approximate average determiner may implement the described actions. Other FIGS. as described herein and especially are referenced below to further explain an example of the method.

By way of explanation only it is given that flow diagram W M begins with a walk W being at a current vertex that is associated with function value Y. At block a seed chunk is extracted. For example seed chunk may be extracted from random seed .

At block a next edge is selected responsive to the extracted seed chunk. For example from between among the edges emanating from the vertex associated with function value Y the edge indicated by the 4 balloon may be selected. In operation an association is established between the available edges that emanate from a current vertex and the possible values for a seed chunk . The actual value of an extracted seed chunk is used to determine the next edge from among the available edges using the association. At block the next edge is traversed to encounter the next vertex along the walk. For example walk W may take another step by traversing the edge indicated by the 4 balloon to encounter the next vertex.

At block the function value that is associated with the next vertex is ascertained. For example the function value P may be ascertained. At block the ascertained function value is forwarded to an average calculator. For example function value P may be forwarded to approximate average calculator .

At block it is determined if the walk is concluded. For example walk W may be concluded when a sufficient number of function values of function have been forwarded to approximate average calculator . As noted above an example approach to determining a sufficient number of function values is described further herein below in the quantitative section. If the walk is concluded as determined at block then the overall method may continue with block of . If on the other hand the walk is not yet concluded then the method of flow diagram W M continues at block by extracting another seed chunk.

Generally device may represent a server device a storage device a workstation or other general computer device a set top box or other television device a personal digital assistant PDA mobile telephone or other mobile appliance some combination thereof and so forth. As illustrated device includes one or more input output I O interfaces at least one processor and one or more media . Media includes processor executable instructions . Although not specifically illustrated device may also include other components.

In a described implementation of device I O interfaces may include i a network interface for communicating across network s ii a display device interface for displaying information on a display screen iii one or more man machine device interfaces and so forth. Examples of i network interfaces include a network card a modem one or more ports and so forth. Examples of ii display device interfaces include a graphics driver a graphics card a hardware or software driver for a screen television or printer and so forth. Examples of iii man machine device interfaces include those that communicate by wire or wirelessly to man machine interface devices e.g. a keyboard or keypad a mouse or other graphical pointing device a remote control etc. .

Generally processor is capable of executing performing and or otherwise effectuating processor executable instructions such as processor executable instructions . Media is comprised of one or more processor accessible media. In other words media may include processor executable instructions that are executable by processor to effectuate the performance of functions by device .

Thus realizations for approximate averaging using an expander graph may be described in the general context of processor executable instructions. Generally processor executable instructions include routines programs applications coding modules protocols objects interfaces components metadata and definitions thereof data structures application programming interfaces APIs etc. that perform and or enable particular tasks and or implement particular abstract data types. Processor executable instructions may be located in separate storage media executed by different processors and or propagated over or extant on various transmission media.

Processor s may be implemented using any applicable processing capable technology. Media may be any available media that is included as part of and or accessible by device . It includes volatile and non volatile media removable and non removable media and storage and transmission media e.g. wireless or wired communication channels . For example media may include one or more disks for longer term mass storage of processor executable instructions random access memory RAM for shorter term storage of instructions that are currently being executed flash memory for medium to longer term storage optical disks for portable storage and or link s on network for transmitting communications and so forth.

As specifically illustrated media comprises at least processor executable instructions . Generally processor executable instructions when executed by processor enable device to perform the various functions described herein including those that are illustrated i in schemes C S and W S of respectively and ii in flow diagrams C M and W M of and respectively .

By way of example only processor executable instructions may include all or part of an approximate average determiner . Approximate average determiner may be a stand alone application or it may be part of a larger application such as a spreadsheet statistical or database program. In use an approximate average determiner may be applied to a spreadsheet column with many entries to statistical data collected as part of a survey or investigation to values of a database subject and so forth.

As described qualitatively in the preceding section approximate averages may be determined using expander graphs. Respective individual function values of a function are associated with respective individual vertices of an expander graph. An expander graph is randomly explored so as to encounter a number of vertices of the expander graph. The function values that are associated with the encountered vertices form a subset of the total values of the function. An approximate average of the function is determined by averaging the subset of function values.

The exploration may be for example a crawl or a walk. Regardless of the exploration approach any given expander graph type may be employed. Example expander graph types include Lubotzky Philips Sarnak LPS expander graphs and supersingular elliptic curve expander graphs. Hence a walk or a crawl may be taken on an LPS expander graph. Likewise a walk or a crawl may be taken on a supersingular elliptic curve expander graph. Quantitative descriptions of walking and crawling on both LPS and supersingular elliptic curve expander graphs are included herein below.

In short in certain implementations as described herein the average value of a function is approximated by focused sampling so as to reduce the number of samples to be taken. Instead of picking points completely at random as in other methods of approximating an average one of the following is implemented a random vertex on an expander graph is picked and the function is sampled at some of its neighbors or the function is evaluated at the vertices of a short random walk on the expander graph.

Thus in certain implementations as described herein approximate averaging involves making random explorations on expander graphs. Expander graphs with good expansion properties are particularly adaptable to approximate averaging. One family of expander graphs with good expansion properties are Ramanujan graphs. As noted herein above approximate averaging with expander graphs may be facilitated using regular graphs. Two example graph types that are both regular and Ramanujan graphs are i expander graphs formed from supersingular elliptic curves and ii Lubotzky Philips Sarnak LPS expander graphs. These two example expander graphs are addressed mathematically below in individual subsections.

This and the succeeding paragraph present a concise relatively non rigorous explanation of how and why explorations on expander graphs behave in a pseudorandom fashion and generally entail pseudorandom properties. On any k regular connected graph a random walk for example converges to a uniform distribution on the vertices this means that the likelihood of reaching any vertex given a sufficiently long random walk is the same equal to one over the number of vertices. The key property of good expander graphs and among them the Ramanujan graphs are optimal in that regard is the speed of convergence to that uniform distribution.

Given a probability distribution on the vertices of a k regular connected graph namely given for each vertex the likelihood of the process beginning at this vertex the rate of convergence to the uniform probability distribution is controlled by the size of the gap between the eigenvalue 1 and the other eigenvalues of the normalized adjacency matrix of the graph. For an expander graph this gap is large enough so that this convergence to the uniform distribution occurs in a logarithm of the number of vertices many steps. The property of the gap between the leading eigenvalue and the others being large is the defining property of Ramanujan graphs of which the two example graphs described herein are instances. Thus heuristically in the example graphs a relatively short with respect to the number of vertices and degree k random walk on the graph as is carried out in one of the processes described herein shall converge rapidly relative to the same parameters to a uniform distribution and so the likelihood of reaching any vertex is close to being the same.

In many situations the following problem is confronted A function U 0 . . . 1 is defined on a finite set U and the average value of the function is desired to be computed. In cases in which i U is large or ii the function is difficult to compute or has function values that are otherwise difficult to acquire it is rarely efficient to compute the true average value of the function. Consequently an approximate average may be determined instead.

One way to determine an approximate value for the average is by random sampling e.g. using a Monte Carlo method . With random sampling a bunch of samples x 1 i k are picked and the average value of the function is approximated on U by the quantity

In contrast certain implementations as described herein enable an approximate average to be determined with the same confidence using just m O log 1 random bits. If is very small this is a considerable saving in the number of random bits that are required. Because the random bits in actual applications are produced by a pseudorandom number generator which may be computationally expensive this saving of random bits results in an increase in efficiency since there are far fewer calls to the pseudorandom number generator.

Initially a set of data for a function is embedded into an expander graph e.g. a Ramanujan graph . For example one graph may be used for the embedding of the data set by filling unused additional values with zero 0 but taking care to modify the average definition accordingly. Alternatively the data set may be exhausted by using a disjoint union of expander graphs.

For the crawling scheme the set U is initially embedded into an expander graph G e.g. that is of size U such that UV G . Random bits are used to sample a starting vertex of the graph G. The average value of the function is then computed on O 1 using uniformly random pair wise independent neighbors of that starting vertex . More precisely if the vertices u u . . . uare the neighbors of vertex then the following approximate average is output 

For the walking scheme the length of a random walk around an expander graph is O log N for a function defined on a set of size N. With a crawling approach the degree k is relatively large. With a walking approach the degree k can be relatively smaller but there is more movement around the graph. Furthermore the crawling scheme entails only pair wise independent sampling whereas the random walking involves mutually independent random bits and therefore consumes more bits of a random seed. The better approach may depend on the computational ease of handling a large degree expander graph with less inter vertex movement versus moving around to many different vertices in a smaller degree expander graph.

An example family of supersingular elliptic curve expander graphs is defined as follows. It is given that p is a prime number and that l p is another prime number. The graph G p l has as its vertex set V the set of supersingular j invariants over the finite field F. There is an edge between the vertex jand jif there is an isogeny of degree l between the supersingular elliptic curves whose j invariants are jand j. The graph G p l is therefore established to be an example of an l 1 regular Ramanujan graph. The following paragraphs of this subsection describe the construction of an approximate average determiner that uses explorations of supersingular elliptic curve expander graphs. Thus this entails describing how to navigate the graph G p l .

The graph is constructed as follows. It is given that j . . . jare the vertices of the graph G p l . Because the number of vertices k of the graph is equal to the class number of the definite quaternion algebra ramified only at p and at infinity only log k bits are needed to specify a vertex. However the j invariants are given a priori as elements of Fwritten as a pair a b of elements of F. The j invariant may be considered as a pair of natural numbers a b mod p. Applying e.g. a 2 universal hash function to the concatenation of a and b produces a bit string of length ceil log 2k 1.

More specifically although there are k vertices the names for the vertices occupy 2 log p bits instead of log k bits. Because the number of vertices is known a priori an appropriate hash function can be applied to reduce the number of bits consumed by the names of the vertices. The result of applying such a universal hash function is called u and the vertices of the graph are relabeled u j . . . u j .

Generally the graph is explored for a walk to generate a subset of the total function values of a function as follows. It is given that is the seed of the pseudorandom number generator and that s is the number of steps that can be taken for the walk. While log k bits of the seed a are used to determine the starting vertex h bits of the seed are consumed at each step. If the starting vertex is fixed then it can be assumed that is of length h s. The value of is considered to be an element of 0 1 i.e. a string of 0 s and 1 s of length h s log k where h ceil log l 1 1 . It is also given that is the first log k bits of .

An output having a string of respective vertices to which respective function values are associated is produced with an input of the seed In stage the starting vertex is v j and the output is . At stage i for 0

A specific mathematical approach to taking a walk around a supersingular elliptic curve expander graph is as follows. For the expander graph whose nodes are supersingular elliptic curves modulo a prime p and its edges are isogenies of degree l between elliptic curves the steps of a walk around the graph can be taken as follows 

Beginning at a node corresponding to the elliptic curve E first find generators P and Q of the l torsion of E l . To this end 

The j invariants in Fof the t 1 elliptic curves that are isogenous to E are j . . . j. They can be found as follows 

If the graph of supersingular elliptic curves with 2 isogenies is used for example a random walk can be taken in the following explicit way at each step after finding the three non trivial 2 torsion points of E they are ordered in terms of their x coordinates in a pre specified manner. The input bits are then used to determine which point to select to quotient the elliptic curve by in order to get to the next vertex or node in the walk.

Another Ramanujan graph that may be used by an approximate average determiner is the Lubotzky Philips Sarnak LPS expander graph. This example expander graph is described in relative detail in this subsection. The construction of an LPS expander graph is accomplished as follows. It is given that l and p are two distinct primes with l a relatively small prime and p a relatively large prime. It is also established that p and l are 1 mod 4 and that the l is a quadratic residue mod p i.e. that l 1 mod p . The LPS graph with parameters l and p is denoted by X.

The vertices that make up the graph Xare defined as follows. The vertices of Xare the matrices in a projective special linear PSL group. More specifically the vertices of Xare the matrices in PSL F which are invertible 2 2 matrices with entries in Fthat have a determinant of 1 together with the equivalence relation A A for any matrix A. Given a 2 2 matrix A with determinant the name for the vertex is the 4 tuple of entries of A or A depending on which is lexicographically smaller in the usual ordering of the set 0 . . . p 1.

The edges that make up the graph Xare defined as follows. Each matrix A is connected to the matrices gA where the g s are the following explicitly defined matrices It is given that I is an integer satisfying I 1 mod p. There are exactly 8 l 1 solutions g g g g g to the equation g g g g l. Among these 8 l 1 solutions there are exactly l 1 with i gboth 0 and odd and ii geven for j 1 2 3 . . . .

The following mathematical example is presented by way of explanation only. It pertains to the crawling scheme with an LPS expander graph. It is given that 0 1 0 . . . 1 is a function whose output is a rational number between 0 and 1. The procedure below enables the average value of to be determined within an additive error to the hundredths 0.01 and 90 confidence 0.9 . In accordance with the guidance described above e.g. k 256 1 a Ramanujan graph with degree k 25.6 10is utilized. Two primes are used a prime l k and a prime p 2. It is assumed that p is much larger than k. A set of generators for the graph Xare computed as described in the paragraphs herein above concerning the construction of an LPS graph X. To compute the approximate average of two random strings sand sare selected. Specifically string sis of length m and string sis of length 874 log 8 1 log 256 1 .

A 2 universal hash function is used to stretch sto sof length 800000 8 1 on an alphabet of size k. Next string sis used to pick a vertex of X. String sis then used to take a pair wise random set of the neighbors of size 800000. Because the string sis over an alphabet of size k each letter can be used to determine a generator gusing the letter to determine the index i. The neighbor of vertex corresponding to this letter is gwith the product being computed in the group PSL F . The average of this set is calculated and this calculated average is output as the approximate average of the function. It should be understood that the example values provided above are worst case values. In practice one can take a shorter walk or smaller degree expander and still get good estimates for the average.

Using expander graphs to determine an approximate attribute of a function data set is not limited to approximating averages. Instead expander graphs may be used to determine general properties of the distribution of values of a function. These general properties of functions include but are not limited to the variance the standard deviation the mean higher k order moments about the mean other statistical values and so forth. From one perspective explorations e.g. walks crawls etc. of expander graphs build an approximation of the distribution of the function on the data set that is associated with vertices of the expander graph that are encountered during the exploration. Hence any property that can be determined from this approximate distribution can thereby be approximated using an expander graph exploration.

The devices actions aspects features functions procedures modules data structures schemes methods architectures components etc. of are illustrated in diagrams that are divided into multiple blocks. However the order interconnections interrelationships layout etc. in which are described and or shown are not intended to be construed as a limitation and any number of the blocks can be modified combined rearranged augmented omitted etc. in any manner to implement one or more systems methods devices procedures media apparatuses APIs arrangements etc. for approximate averaging using an expander graph.

Although systems media devices methods procedures apparatuses techniques schemes approaches arrangements and other implementations have been described in language specific to structural logical algorithmic and functional features and or diagrams it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

