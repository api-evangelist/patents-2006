---

title: Modifying a file written in a formal language
abstract: In certain embodiments, a method for modifying a file written in a formal language comprises: (1) parsing an input file written in a formal language to generate a data structure of the input file; (2) issuing, during generation of the data structure, one or more queries to a rule engine for evaluation of one or more rules for modifying the input file; and (3) generating the data structure according to the evaluation of the one or more rules.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09063744&OS=09063744&RS=09063744
owner: CA, Inc.
number: 09063744
owner_city: Islandia
owner_country: US
publication_date: 20060626
---
The present invention relates generally to computer programming and more particularly to modifying a file written in a formal language.

Files such as computer programs are often written in a formal language. It may be desirable to modify a file written in a formal language. As just one example it may be desirable to modify the code of a computer program that is designed to operate with a first database management system in such a manner that the computer program can operate with another type of database management system.

According to the present invention disadvantages and problems associated with previous techniques for modifying a file written in a formal language may be reduced or eliminated.

In certain embodiments a method for modifying a file written in a formal language comprises 1 parsing an input file written in a formal language to generate a data structure of the input file 2 issuing during generation of the data structure one or more queries to a rule engine for evaluation of one or more rules for modifying the input file and 3 generating the data structure according to the evaluation of the one or more rules.

In certain embodiments a system for modifying a file written in a formal language comprises a rule engine and a parser. The rule engine comprises one or more rules for modifying an input file written in a formal language. The parser is operable to 1 parse the input file written in the formal language to generate a data structure of the input file 2 issue during generation of the data structure one or more queries to the rule engine for evaluation of one or more rules for modifying the input file the rule engine operable to evaluate the one or more rules in response to the one or more issued queries and to return a query result to the parser and 3 generate the data structure according to the query result returned by the rule engine.

Particular embodiments of the present invention may provide one or more technical advantages. Conventional systems for modifying a file written in a formal language typically involve either a text based approach or a semantic approach. The text based approach generally considers the input file as a stream of characters and performs what are usually simple changes based on a recognition of character patterns. The semantic approach applies a lexical analysis and parsing of the input file and transforms the input file based on syntactic patterns. The semantic approach may allow matching based on higher level patterns relative to the text based approach. The semantic approach usually involves tightly mixing lexical analysis and parsing with the desired modification of the input file which may make it difficult to maintain and reuse as the modification rules are interspersed with the parser code. For example each time a different modification is to be made it may be necessary to recreate the parser to include new modification rules for making the new modification.

In certain embodiments the present invention fosters reuse and flexibility in formal language processing through separation of duties. For example by separating the definition and application of the modification rules from the parsing of an input file the present invention may foster re use and flexibility in formal language processing. In certain embodiments the parser may be built once for the formal language of the input file that is being modified rather than multiple times for each set of desired modifications. For example a generated parser may be used with different sets of modification rules to perform different modifications to files written in the formal language of the input file since the rule processing is performed by a distinct rule engine.

In certain embodiments the techniques for modifying an input file written in a formal language provided by the present invention are less complex and easier to develop and maintain than a text based or semantic approach for modifying a file written in a formal language. The present invention may decrease the response time of post processors by reducing the workload for post processors for example. In certain embodiments the present invention may be used to enhance code of a computer program.

Certain embodiments of the present invention may provide some all or none of the above advantages. Certain embodiments may provide one or more other technical advantages one or more of which may be readily apparent to those skilled in the art from the figures descriptions and claims included herein.

User system may include one or more computer systems at one or more locations that may share data storage communications or other resources according to particular needs. For example functionality described in connection with user system may be provided using a single or multiple computer systems which in a particular embodiment might include a conventional desktop or laptop computer a server or server pool or a client server environment. Each computer system may include one or more suitable input devices output devices mass storage media processors memory modules interfaces communication ports or other appropriate components for receiving processing storing and communicating information according to the operation of system . User system may be any suitable computer system or associated users that create develop derive or use computer implemented files written in a formal language. Where appropriate reference to user system is meant to include one or more associated human users. Moreover user system and user of user system may be used interchangeably throughout this description.

The one or more processors of each computer system of user system may be a microprocessor controller or any other suitable computing device or resource. The one or more processors may work either alone or with other components of system to provide the functionality of system described herein. Additionally each computer system may include a personal computer workstation network computer kiosk wireless data port personal data assistant PDA a client server environment one or more processors within these or other devices or any other suitable processing device. As used throughout this description the term computer is intended to encompass any suitable type of processing device.

In general the present invention enables user system to manually or autonomously modify an input file that is written in a formal language to generate a modified file . Although input file and modified file are referred to in the singular the present invention contemplates one or more input files and one or more modified files . Input file and modified file may be stored either temporarily or permanently in any suitable type of memory module that is a part of or otherwise accessible to user system .

Input file may include any suitable type of computerized data stream or other computerized collection of data that is written in a formal language. For example input file may include a computer program a stream of characters a document a spreadsheet or any other suitable type of data that is written in a formal language. In certain embodiments input file may be received by user system over a network. The term file as used throughout this description is meant to include any suitable type of input stream or other collection of data at least a portion of which is written in a formal language.

As described above input file may be written in a formal language. In certain embodiments a formal language comprises a set of finite length words e.g. character strings taken from a finite alphabet although those of ordinary skill in the art will appreciate that any suitable formal language may be used without departing from the spirit and scope of the present invention. For example in embodiments in which input file comprises a computer program the computer program may comprise computer code written in a formal language such as a computer programming language. Example formal languages for a computer program may include C C JAVA COBOL or any other suitable programming language. Although example programming languages are described the present invention contemplates the formal language of a computer program comprising any suitable programming language. Additionally although input file is primarily described as a computer program written in a programming language the present invention contemplates input file comprising any suitable type of file written in any suitable type of formal language.

Input file may be modified to generate modified file for any suitable purpose using the present invention. Modified file may include any suitable modified version of input file . For example modifying input file may include adding to input file deleting from input file changing input file or performing any other suitable type of modification. As a particular example in embodiments in which input file comprises a computer program the modification may include adding to the computer code of input file e.g. for adding to functionality of the computer program for enhancing functionality of the computer program or for any other suitable purpose deleting source code from input file e.g. for removing functionality from the computer program or for any other suitable purpose changing the source code of input file e.g. for altering the compatibility of the computer program or for any other suitable purpose or performing any other suitable type of modification. As just one example input file may comprise a computer program that is operable to interact with a first type of database management system and it may be desirable to modify the computer program to be operable to interact with a second type of database management system.

Parser is operable to parse input file in order to determine its grammatical structure with respect to a particular formal language specification. Parser may generate a parse tree or other suitable data structure based on the parsing of input file . Although the present description primarily focuses on embodiments in which the data structure generated by parser comprises a parse tree the present invention contemplates parser generating any suitable data structure for representing input file according to a formal language specification for the formal language of input file . In certain embodiments parser parses input file to identify the meaningful tokens within input file and builds the parse tree from one or more of the identified tokens. The terms parsing and parser may also be referred to as syntax analysis and syntax analyzer respectively.

In certain embodiments parser is operable to communicate one or more queries to rule engine for evaluation of one or more rules. For example during generation of the parse tree for input file parser may issue one or more queries to rule engine for evaluation of one or more rules. In certain embodiments as parser is generating the parse tree for input file and prior to adding a node to the parse tree parser may issue one or more queries to rule engine for evaluation of one or more rules. Prior to sending each query parser may gather any relevant data to be sent along with query as one or more parameters of query for example. In certain embodiments the source code of parser may comprise one or more language modification hooks that cause parser to issue queries e.g. prior to adding a node to the parse tree .

Parser may receive a query result from rules engine . Query result may include an identification of the action resulting from query any suitable details associated with the action and any other suitable information. Example actions of the rules are described in more detail below. Parser may execute the action when the rule is fired. In particular parser may generate the relevant portion of the parse tree according to query result . For example parser may generate the node according to query result which may include determining that the node should not be generated .

In certain embodiments user system comprises a parser generator that is operable to generate parser . Parser generator may comprise a JAVA Compiler Compiler JAVACC LEX Yet Another Compiler Compiler Yacc Sable Compiler Compiler SableCC Another Tool For Language Recognition ANTLR or any other suitable parser generator according to particular needs. For example purposes only the present description primarily focuses on embodiments in which parser generator comprises a JAVACC.

In certain embodiments parser generator generates parser according to a formal language specification for the formal language of input file . For example parser generator may generate the source code for parser from the formal language specification for the formal language of input file . Formal language specification which may also be referred to as a grammar or grammar specification may be defined for representing the formal language of input file . Formal language specification may be defined using any suitable notation according to particular needs. As just one example formal language specification may be defined using the Extended Backus Naur Form EBNF notation. EBNF notation is widely used to describe formal language syntax which may make it desirable to begin the process with an existing EBNF grammar specification. Other example notations for formal language specification may include Backus Naur Form BNF Augmented Backus Naur Form ABNF or any other suitable type of notation for describing a formal language. Formal language specification may be stored as a file on user system or in any other suitable format at any other suitable location.

In certain embodiments formal language specification may have been developed for a different parser generator than parser generator of system . In such embodiments formal language specification may be ported to the target parser generator i.e. parser generator and adapted to integrate as much of the language modification hooks for issuing the one or more queries .

As an example using a JAVACC parser generator a formal language specification for the C programming language may include the following 

In certain embodiments rule engine comprises a database or other suitable memory module that is operable to store and evaluate one or more rules . Additionally or alternatively the present invention contemplates rule engine comprising any suitable number of processors. Rule engine may be integral to or distinct from user system and may be geographically remote from or local to user system . In certain embodiments rule engine is distinct from parser .

Rule engine may store one or more rules . Rules may specify how an input file is to be modified. Rules may be organized in one or more rule sets. A particular set of rules which may include one or more rules may facilitate the modification of an input file for one or more suitable purposes. Rule engine may be written using ProLog AION or any other suitable programming language. In certain embodiments rules comprise text files however the present invention contemplates rules being in any suitable format according to particular needs.

Rules may have any suitable structure according to particular needs. In certain embodiments each of rules comprises one or more of a name portion one or more filters one or more actions and one or more details relevant to the one or more actions. Each of these example portions of rules will now be described in the context of an example embodiment in which rules are written in ProLog however it should be understood that this is for example purposes only and the present invention is not intended to be so limited.

The name portion of a rule may be used to identify rule . For example ProLog structures may be named according to EBNF production rules. The one or more filters may be used to determine the relevant rules to be evaluated in response to a query . For example a subset of the terminal symbols used to make up the parse tree node for which the one or more rules are being evaluated i.e. for which the query was issued may be passed. This subset may be used by rule engine to determine the context and reply to the correct queries . The one or more filters may be used to determine whether the action associated with a rule should be triggered in response to query .

The one or more actions of a rule may instruct parser as to what action to perform in response to evaluation of rule by rules engine . The action may be communicated as part of query result . Parser may execute the action when the rule is fired. In certain embodiments the one or more actions of a rule include one or more of the following 1 a cancel action instructing parser to stop parsing of input file 2 an add action instructing parser to add some text before the current node 3 a delete action instructing parser to delete the current node and 4 an add after action instructing parser to add some text after the current node. Although these example actions are primarily described the present invention contemplates rules comprising any other suitable actions for modifying input file according to particular needs. The one or more details relevant to the one or more actions may include any suitable information. For example if the action is an add action or an add after action then the one or more details may include the content of the text to add to the parse tree. As another example if the action is a cancel action then the one or more details may include a justification for stopping parsing of input file . The one or more details may be included as part of query result .

Rule engine may receive queries issued by parser determine one or more appropriate rules to evaluate in response to queries e.g. based on the one or more filters of rules evaluate the one or more appropriate rules and return a query result to parser . Query result may provide a suitable action to be performed by parser in response to evaluation of query by rules engine .

Each of parser rules engine and parser generator may comprise any suitable combination of software firmware and hardware. Moreover parser rules engine and parser generator may be packaged as a single component or one or more separate components according to particular needs.

In operation of an example embodiment of system a formal language specification for the formal language of input file may be defined. As just one example the formal language specification may comprise the EBNF notation. As described above in certain embodiments formal language specification may have been developed for a different parser generator than parser generator of system . In such embodiments formal language specification may be ported to the target parser generator i.e. parser generator and adapted to integrate one or more language modification hooks for issuing the one or more queries .

In certain embodiments such as might by the case with JAVACC it may be appropriate to navigate the parse tree and potentially to issue queries at one or more nodes of the parse tree. For example a multi mode parse tree may be generated. A multi mode parse tree may comprise one class per rule which may allow processing based on class name in JAVA. Node scope hooks may be inserted in the parse tree to trigger specific processing of one or more rules before nodes are attached to the parse tree which may allow the structure of the parse tree to be dynamically altered if appropriate. In the JAVACC approach the code for the main parser class may also be placed in formal language specification which may reduce the effort needed to integrate the processing afterwards.

Parser generator may generate parser . For example parser generator may process formal language specification of the formal language of input file to generate parser . The result of the processing of formal language specification by parser generator may be one or more raw parser source files. For example using a JAVACC parser generator formal language specification may be processed by a JJTREE tool which may result in an intermediate file. The intermediate file may be processed by JAVACC which may result in a number of JAVA classes. Processor integration may be performed which may result in one or more final parser source files. As described briefly above the one or more files e.g. raw parser source files generated by parser generator may be customized to integrate processing logic for the formal language of input file if appropriate.

Parser may be compiled. For example the one or more final parser source files may be compiled. In certain embodiments depending on parser generator and possibly on the intermediate programming language the generated final parser source files are processed to create an executable parser image. The executable parser image may be compiled and optionally link edited with one or more relevant libraries if appropriate. In certain embodiments for a JAVACC parser generator the final parser source files may be compiled using the JAVAC command with both the one or more formal language processing classes and the application programming interface API to rules engine . The compilation of parser may result in a number of JAVA classes.

One or more rules for modification of input file may be defined. Based on the selected rules engine and the scope of the modifications rules may be defined to alter the parse tree to obtain the desired result e.g. the desired modified file . In certain embodiments different sets of rules may be used with the same parser to achieve different results e.g. different modified files . For example a first set of rules may be used to perform a first modification to input file to generate a first modified file and a second set of rules may be used to perform a second modification to input file to generated a second modified file . In certain embodiments this capability of system may depend on particular needs and whether the formal language used by the files to be modified is the same. For example a parser generated according to the present invention may be able to apply different sets of rules to the same input file to achieve different modified files . As another example a parser generated according to the present invention may be able to apply the same or different sets of rules to different input files that are written in the same formal language.

The modification of input file may be performed. In certain embodiments once the executable parser image has been generated a set of modification rules may be selected e.g. depending on the result to be achieved and applied to input file to result in one or more modified files . During processing the parser may issue one or more queries to rule engine . For example parser may issue one or more queries to rule engine before each node is added to the parse tree generated by parser . Parser may collect any suitable information to be sent to rule engine with query . For example parser may collect all of the information relative to the terminal nodes below the node at which query is being issued. Rule engine may evaluate query and when rule engine determines that a corresponding rule is matched the relevant action data for that rule may be captured and a query result may be returned to parser . Parser may generate the parse tree in accordance with the evaluation of rule . For example parser may generate the parser tree in accordance with the action specified in query result .

In operation of an example embodiment of system input file may be accessed in any suitable manner such as being received over a network or accessed from a disk or other suitable memory module removable or non removable of user system for example. In certain embodiments parser accesses input file . Parser may begin parsing input file to generate a parse tree of input file . Parser may determine whether parsing of input file is complete. If parser determines that parsing of input file is complete then modified file may be generated according to the parse tree generated by parser .

If parser determines that parsing of input file is not complete then parser may determine whether there is a node to add to the parse tree. If parser determines that there is not a node to add to the parse tree then parser may continue parsing input file . If parser determines that there is a node to add to the parse tree then parser may determine whether to issue a query to rule engine . In certain embodiments parser issues a query before adding any node to the parse tree. In such embodiments there may not be an explicit decision made regarding whether to issue a query . In certain other embodiments parser issues a query only before adding certain nodes to the parse tree. The determination of whether to issue a query before addition of a node to the parse tree may be made according to node scope hooks e.g. or language modification hooks inserted in the code of parser by parser generator .

If it is determined that a query should not be issued then parser may add the node to the parse tree and continue parsing input file . If it is determined that a query should be issued to rule engine then parser may gather information for query . For example parser may gather any relevant data to be sent along with query as one or more parameters of query for example. As a particular example the parameters of query may include a subset of the terminal symbols used to make up the parse tree node at which query is being issued. The present invention contemplates parser not gathering any information for query if that is appropriate according to particular needs. Parser may issue query to rule engine . The issued query may include a portion or all of the gathered information. Although a single query is primarily described parser may communicate any suitable number of queries for a given node.

Rule engine may process query received from parser in any suitable manner according to particular needs. In certain embodiments rule engine may analyze query determine whether query triggers one or more rules . For example the one or more filters of rules may enable relevant rules to be evaluated in response to a query . For example a subset of the terminal symbols used to make up the parse tree node for which the one or more rules are being evaluated may be passed. This subset may be used by rule engine to determine context and reply to the correct queries . The one or more filters may be used to determine whether the action associated with a rule should be triggered in response to query .

If rule engine determines that query triggers a particular rule rule engine may determine the action for rule and any suitable details for the action. In certain embodiments the one or more actions of a rule include one or more of the following 1 a cancel action instructing parser to stop parsing of input file 2 an add action instructing parser to add some text before the current node 3 a delete action instructing parser to delete the current node and 4 an add after action instructing parser to add some text after the current node. Although these example actions are primarily described the present invention contemplates rules comprising any other suitable actions for modifying input file according to particular needs. The one or more details relevant to the one or more actions may include any suitable information. For example if the action is an add action or an add after action then the one or more details may include the content of the text to add to the parse tree. As another example if the action is a cancel action then the one or more details may include a justification for stopping parsing of input file .

Rule engine may communicate a query result to parser . Query result may include an identification of the action resulting from query any suitable details associated with the action and any other suitable information. Parser may generate the relevant portion of the parse tree according to query result . For example parser may generate the node according to query result which may include determining that the node should not be generated .

Parser may execute the action when the rule gets fired to generate the relevant portion of the parse tree according to query result . In certain embodiments the one or more actions of a rule include one or more of the following 1 a cancel action instructing parser to stop parsing of input file 2 an add action instructing parser to add some text before the current node 3 a delete action instructing parser to delete the current node and 4 an add after action instructing parser to add some text after the current node. Although these example actions are primarily described the present invention contemplates rules comprising any other suitable actions for modifying input file according to particular needs. The one or more details relevant to the one or more actions may include any suitable information. For example if the action is an add action or an add after action then the one or more details may include the content of the text to add to the parse tree. As another example if the action is a cancel action then the one or more details may include a justification for stopping parsing of input file . The one or more details may be included as part of query result . Parser may continue parsing input file until parsing is complete.

Particular embodiments of the present invention may provide one or more technical advantages. Conventional systems for modifying a file written in a formal language typically involve either a text based approach or a semantic approach. The text based approach generally considers the input file as a stream of characters and performs what are usually simple changes based on a recognition of character patterns. The semantic approach applies a lexical analysis and parsing of the input file and transforms the input file based on syntactic patterns. The semantic approach may allow matching based on higher level patterns relative to the text based approach. The semantic approach usually involves tightly mixing lexical analysis and parsing with the desired modification of the input file which may make it difficult to maintain and reuse as the modification rules are interspersed with the parser code. For example each time a different modification is to be made it may be necessary to recreate the parser to include the new modification rules for making the new modification.

In certain embodiments the present invention fosters reuse and flexibility in formal language processing through separation of duties. For example by separating the definition and application of modification rules from the parsing of input file the present invention may foster re use and flexibility in formal language processing. In certain embodiments parser may be built once for the formal language of input file that is being modified rather than multiple times for each set of desired modifications. For example a generated parser may be used with different sets of modification rules to perform different modifications to files written in the formal language of input file since the rule processing is performed by a distinct rule engine .

In certain embodiments the techniques for modifying an input file written in a formal language provided by the present invention are less complex and easier to develop and maintain than a text based or semantic approach for modifying file written in a formal language. The present invention may decrease the response time of post processors by reducing the workload for post processors for example. In certain embodiments the present invention may be used to enhance code of a computer program.

As described above in certain embodiments formal language specification may have been developed for a different parser generator than parser generator of system . In such embodiments formal language specification may be ported to the target parser generator i.e. parser generator and adapted to integrate one or more language modification hooks for issuing the one or more queries .

In certain embodiments such as might by the case with JAVACC it may be appropriate to navigate the parse tree and potentially to issue one or more queries at one or more nodes of the parse tree. For example a multi mode parse tree may be generated. A multi mode parse tree may comprise one class per rule which may allow processing based on class name in JAVA. Node scope hooks may be inserted in the parse tree to trigger specific processing of one or more rules before nodes are attached to the parse tree which may allow the structure of the parse tree to be dynamically altered if appropriate. In the JAVACC approach the code for the main parser class may also be placed in formal language specification which may reduce the effort needed to integrate the processing afterwards.

At step parser generator may generate parser . For example parser generator may process formal language specification of the formal language of input file to generate parser . The result of the processing of formal language specification by parser generator may be one or more files in a given programming language. These files may be referred to as raw parser source files . For example using a JAVACC parser generator formal language specification may be processed by a JJTREE tool which may result in an intermediate file. The intermediate file may be processed by JAVACC which may result in a number of JAVA classes.

At step processor integration may be performed. This may result in one or more final parser source files . As described briefly above the one or more files e.g. raw parser source files generated by parser generator may be customized to integrate processing logic for the formal language of input file if appropriate. The amount of customization if any may depend on one or more of the following the chosen parser generator the programming language generated how the language processing logic was designed and any other suitable factors. In certain embodiments with JAVACC and the reflection possibilities of the JAVA programming language these customizations may be limited to although not necessarily copying of a few standard classes in the target environment and creation of a few fields in the standard SimpleNode class.

At step parser may be compiled. For example the one or more final parser source files may be compiled. In certain embodiments depending on parser generator and possibly on the intermediate programming language the generated final parser source files are processed to create an executable parser image . Executable parser image may be compiled and optionally link edited with one or more relevant libraries if appropriate. In certain embodiments for a JAVACC parser generator final parser source files may be compiled using the JAVAC command with both the one or more formal language processing classes and the API to rules engine . The compilation of parser may result in a number of JAVA classes.

At step one or more rules for modification of input file may be defined. Based on the selected rules engine and the scope of the modifications rules may be defined to alter the parse tree to obtain the desired result e.g. the desired modified file . In certain embodiments different sets of rules may be used with the same parser to achieve different results e.g. different modified files . For example a first set of rules may be used to perform a first modification to input file to generate a first modified file and a second set of rules may be used to perform a second modification to input file to generated a second modified file . In certain embodiments this capability of system may depend on particular needs and whether the formal language used by the files to be modified is the same. For example a parser generated according to the present invention may be able to apply different sets of rules to the same input file to achieve different modified files . As another example a parser generated according to the present invention may be able to apply the same or different sets of rules to different input files that are written in the same formal language.

At step the modification of input file may be performed. In certain embodiments once executable parser image has been generated a set of modification rules may be selected e.g. depending on the result to be achieved and applied to input file to result in one or more modified files . During processing the parser may issue one or more queries to rule engine . For example parser may issue one or more queries to rule engine before each node is added to the parse tree generated by parser . Parser may collect any suitable information to be sent to rule engine with query . For example parser may collect all of the information relative to the terminal nodes below the node at which query is being issued. Rule engine may evaluate query and when rule engine determines that a corresponding rule is matched the relevant action data for that rule may be captured and a query result may be returned to parser . Parser may generate the parse tree in accordance with the evaluation of rule . For example parser may generate the parser tree in accordance with the action specified in query result .

At step parser may parse input file . For example parser may begin parsing input file . Parser may parse input file to generate a parse tree of input file . At step parser may determine whether parsing of input file is complete. Parser may determine that parsing of input file is complete for any suitable reason. For example if parser has parsed all of input file it may be determined that parsing of input file is complete. If it is determined at step that parsing of input file is complete then at step modified file may be generated according to the parse tree generated by parser .

If it is determined at step that parsing of input file is not complete then at step parser may determine whether there is a node to add to the parse tree. If parser determines at step that there is not a node to add to the parse tree then the method may return to step at which parser continues parsing input file . If parser determines at step that there is a node to add to the parse tree then at step parser may determine whether to issue a query to rule engine . In certain embodiments parser issues a query before adding any node to the parse tree. In such embodiments there may not be an explicit decision made regarding whether to issue a query . In certain other embodiments parser issues a query only before adding certain nodes to the parse tree. The determination of whether to issue a query before addition of a node to the parse tree may be made according to node scope hooks e.g. or language modification hooks inserted in the code of parser by parser generator .

If it is determined at step that a query should not be issued then at step parser may add the node to the parse tree and return to step to continue parsing input file . If it is determined at step that a query should be issued to rule engine then at step parser may gather information for query . For example parser may gather any relevant data to be sent along with query as one or more parameters of query for example. As a particular example the parameters of query may include a subset of the terminal symbols used to make up the parse tree node at which query is being issued. The present invention contemplates parser skipping step if appropriate. At step parser may issue query to rule engine . The issued query may include a portion or all of the information gathered at step . Although a single query is primarily described parser may communicate any suitable number of queries for a given node.

At step rule engine may process query received from parser . Rule engine may process query in any suitable manner according to particular needs. In certain embodiments rule engine may analyze query determine whether query triggers one or more rules . For example the one or more filters of rules may enable relevant rules to be evaluated in response to a query . For example a subset of the terminal symbols used to make up the parse tree node for which the one or more rules are being evaluated may be passed. This subset may be used by rule engine to determine context and reply to the correct queries . The one or more filters may be used to determine whether the action associated with a rule should be triggered in response to query .

If rule engine determines that query triggers a particular rule rule engine may determine the action for rule and any suitable details for the action. In certain embodiments the one or more actions of a rule include one or more of the following 1 a cancel action instructing parser to stop parsing of input file 2 an add action instructing parser to add some text before the current node 3 a delete action instructing parser to delete the current node and 4 an add after action instructing parser to add some text after the current node. Although these example actions are primarily described the present invention contemplates rules comprising any other suitable actions for modifying input file according to particular needs. The one or more details relevant to the one or more actions may include any suitable information. For example if the action is an add action or an add after action then the one or more details may include the content of the text to add to the parse tree. As another example if the action is a cancel action then the one or more details may include a justification for stopping parsing of input file .

At step rule engine may communicate a query result to parser . Query result may include an identification of the action resulting from query any suitable details associated with the action and any other suitable information. At step parser may generate the relevant portion of the parse tree according to query result . For example parser may generate the node according to query result which may include determining that the node should not be generated .

Parser may execute the action when the rule gets fired to generate the relevant portion of the parse tree according to query result . In certain embodiments the one or more actions of a rule include one or more of the following 1 a cancel action instructing parser to stop parsing of input file 2 an add action instructing parser to add some text before the current node 3 a delete action instructing parser to delete the current node and 4 an add after action instructing parser to add some text after the current node. Although these example actions are primarily described the present invention contemplates rules comprising any other suitable actions for modifying input file according to particular needs. The one or more details relevant to the one or more actions may include any suitable information. For example if the action is an add action or an add after action then the one or more details may include the content of the text to add to the parse tree. As another example if the action is a cancel action then the one or more details may include a justification for stopping parsing of input file . The one or more details may be included as part of query result . The method may return to step at which parser continues parsing input file .

Although particular methods for modifying a file written in a formal language have been described with reference to the present invention contemplates any suitable method for modifying a file written in a formal language in accordance with the present invention. Thus certain of the steps described with reference to may take place simultaneously and or in different orders than as shown. Moreover components of system may use methods with additional steps fewer steps and or different steps so long as the methods remain appropriate.

A particular example of modifying a file written in a formal language according to certain embodiments of the present invention will now be described. It will be understood that this example is provided for illustrative purposes only and should not be used to limit the present invention.

In this example input file comprises a JAVA computer program named echo.java which is a simple computer program that is operable to echo to a computer display the first argument passed to the computer program. The source code of echo.java may include the following 

A listing of example queries that may be sent by parser to rule engine in text format are listed below.

A first set of rules may be provided. The first set of rules is operable to modify echo.java to add the system time to all print statements in a JAVA computer program. The first set of rules may be stored as printTime.plg. For purposes of this example the first set of rules are written in ProLog format. The first set of rules may be as follows.

The modified file i.e. echo.java.printTime that results from application of the first set of rules to input file i.e. echo.java may be as follows.

A second set of rules may be provided. The second set of rules is operable to modify echo.java to direct all print statements in a JAVA computer program e.g. echo.java to a log file. The second set of rules may be stored as printToLog.plg. For purposes of this example the second set of rules are written in ProLog format. The second set of rules may be as follows.

The modified file i.e. echo.java.printToLog that results from application of the second set of rules to input file i.e. echo.java may be as follows.

In certain embodiments the first and second sets of rules i.e. printTime.plg and printToLog.plg may be used to modify multiple JAVA programs in some cases any JAVA program without changing parser and other files used to parse the multiple JAVA programs. For example depending on the desired change to a JAVA input file it may only be necessary to modify sets of rules to implement different modifications in the JAVA input file .

Although this invention has been described in terms of certain embodiments and generally associated methods alterations and permutations of these embodiments and methods will be apparent to those skilled in the art. Accordingly the above description of example embodiments does not define or constrain this invention. Other changes substitutions and alterations are also possible without departing from the spirit and scope of this invention.

