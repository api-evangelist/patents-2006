---

title: Automatically filling a drive table
abstract: Provided are techniques for filling a drive table. A key request including at least one of a drive serial number and a world wide node name is received from a data storage drive. It is determined whether the drive serial number or a world wide node name are in an entry in a drive table. In response to determining that the drive serial number or a world wide node name are not in an entry in a drive table, a new entry is automatically added in the drive table that includes the at least one of a drive serial number and a world wide node name.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07752463&OS=07752463&RS=07752463
owner: International Business Machines Corporation
number: 07752463
owner_city: Armonk
owner_country: US
publication_date: 20060907
---
Automated data storage libraries e.g. tape libraries including tape drives are known for providing cost effective storage and retrieval of large quantities of data. The data in automated data storage libraries is stored on data storage media e.g. tape cartridges that are in turn stored in storage slots or storage shelves or the like inside the library in a fashion that renders the data storage media and its resident data accessible for physical retrieval. An accessor may be used to move data storage media e.g. tape cartridges between the storage slots and data storage drives e.g. tape drives . Such data storage media are commonly termed removable media. Data storage media may comprise any type of media on which data may be stored and which may serve as removable media including but not limited to magnetic media such as magnetic tape or disks optical media such as optical tape or disks electronic media such as PROM EEPROM flash PROM Compactflash TM Smartmedia TM Memory Stick TM etc. . or other suitable media. Typically the data stored in automated data storage libraries is resident on data storage media that is contained within cartridge and referred to as a data storage media cartridge. An example of a data storage media cartridge that is widely employed in automated data storage libraries for data storage is a tape cartridge.

Sometimes data that is written to the data storage media is encrypted and data that is read from the data storage media is to be decrypted. Encryption may be described as the transformation of data into a form called a ciphertext using an encryption key the cannot be easily transformed back to the original data without the decryption key. Decryption may be described as the process of transforming the encrypted data back into its original form using a decryption key.

In some conventional systems a drive table identifies all tape drives and drive information e.g. tape drive serial numbers is entered into the drive table manually for example by a system administrator via a Command Line Interface CLI . That is an additive CLI command is entered for each tape drive. The additive CLI command specifies a drive identifier or drive name e.g. a tape drive serial number as one of the command s parameters. As this manual solution requires a human to enter drive information the solution is error prone. Additionally the manual solution is very time consuming when installing a large number of tape drives e.g. 192 tape drives in a library . Moreover if the manual solution runs in the foreground then processes running in the background may have to be stopped and restarted while the drive table is being completed. Entering drive information manually may also be viewed as a usability problem from a customer s perspective.

Also some drive tables include a tape drive serial number Drive S N . However the tape drive s World Wide Node Name WWNN may be the one to stay constant in some environments.

Thus there is a need in the art for automatically filling a drive table including enabling the drive table to be updated based on a WWNN instead of a Drive S N.

Provided are a method computer program product and system for filling a drive table. A key request including at least one of a drive serial number and a world wide node name is received from a data storage drive. It is determined whether the drive serial number or a world wide node name are in an entry in a drive table. In response to determining that the drive serial number or a world wide node name are not in an entry in a drive table a new entry is automatically added in the drive table that includes the at least one of a drive serial number and a world wide node name.

In the following description reference is made to the accompanying drawings which form a part hereof and which illustrate several embodiments of the invention. It is understood that other embodiments may be utilized and structural and operational changes may be made without departing from the scope of the invention.

The drive certificate . . . may be described as a public key certificate that uses a digital signature to bind together a public key with an identity so that the drive certificate . . . may be used to verify that the data storage drive possesses the corresponding private key . . .

The automated data storage library is also connected to one or more key servers . Although the automated data storage library is illustrated as being directly connected to the one or more key servers the automated data storage library may be connected to proxy servers not shown that are connected to the one or more key servers . A proxy server may be described as a server that receives requests intended for another computing device e.g. another server or appliance and that acts on behalf of the requestor as the requestors proxy to obtain the requested service. In embodiments using proxy servers the proxy servers may act as proxies for the data storage drives . . . and or data storage drive pools. A proxy server may also be described as a conduit that also acts as a protocol converter and adds other functionality e.g. Internet Protocol IP routing . Thus there may be a proxy server between a key server and a data storage drive . . . or may not and if there is the proxy server acts as a bridge between one type of interface e.g. Fiber Channel FC or RS 422 and another e.g. IP .

The one or more key servers each include a key manager key data a drive table and a configuration file . The key manager assists encryption enabled data storage drives . . . e.g. tape drives in generating protecting storing and maintaining encryption keys that are used to encrypt information being written to and decrypt information being read from data storage media . . . e.g. tape cartridges . The key manager is capable of serving numerous data storage drives . . . regardless of where those data storage drives . . . reside e.g. in an automated data storage library connected to mainframe systems through various types of channel connections or installed in other computing systems. 

The key manager processes key generation or key retrieval requests. In particular when a data storage drive . . . is to write encrypted data the data storage drive . . . first requests an encryption key from a key server . Upon receipt of the request at the key server the key manager generates an encryption key e.g. an Advanced Encryption Standard AES key and serves the generated encryption key to the data storage drive . . . in two protected forms 

1. As a protected key that is encrypted or wrapped e.g. using Rivest Shamir Adleman RSA key pairs . The data storage drive . . . writes one or more protected keys to one or more non volatile areas within the data storage media . . . . In certain embodiment a non volatile area is a data storage leader i.e. the front part of a data storage medium . . . . . . before the area that user data is stored . In certain embodiments the protected key may also be referred to as an Externally Encrypted Data Key EEDK .

2. As a separately encrypted key for secure transfer to and only readable by the data storage drive . . . where it is decrypted upon arrival and used to encrypt the data being written to data storage media . . . . Once the data storage drive . . . encrypts data with this key and is instructed to unload this data storage medium . . . this key is removed from access usage by or retrieval from the data storage drive . . .

When an encrypted data storage medium . . . is to be read the data storage drive . . . sends the protected key read from the data storage medium . . . to the key manager along with the request to retrieve the key needed to read the data storage medium . . . . The key manager unwraps decrypts the wrapped protected key to access the secret key and then rewraps encrypts this secret key with another key for secure data transfer back to the data storage drive . . . only readable by the data storage drive . . . where the rewrapped key is then unwrapped to access the secret key which is used to decrypt the data stored on the data storage medium . . . . The key manager allows protected keys to be re encrypted using different keys e.g. different RSA keys from the original ones that were used. The key data may be described as a key store of keys used to create encrypt or unwrap decrypt the protected key. Also the key data may be described as including version information an identifier of the proper keys to use in interpreting key data and the encrypted encryption keys which are also referred to as protected keys .

The key server serves keys to known entities. Thus the key server maintains a drive table with a list of known storage media drives . . . to which the key server may serve keys.

The configuration file includes an indicator for indicating whether the drive table is to be automatically filled and provides default certificate key identifier values which are to be used in creating protected keys. In certain embodiments certificate key identifiers may also be referred to as certificate aliases.

Multiple key servers with key managers may be provided to enable high availability i.e. if one key server is unavailable another may be used by a data storage drive . . . .

In certain embodiments the automated data storage library is a tape library that includes tape drives into which tape cartridges may be inserted.

In certain embodiments a direct key model is implemented. With the direct key model an application that writes data provides keys to the data storage drives . . . in either a wrapped or direct key only manner. The application is not shown in but would be connected to one or more of data storage drives . . .

Embodiments enable automatically updating the drive table without requiring the time consumptive and error prone process of having a manual transcription. Also embodiments enable the key manager to serve keys based on either a Drive S N or WWNN and to allow the FRU replacement process.

Additionally with embodiments a certificate is installed at each storage media drive . . . which may be used to authenticate the storage media drive . . . . Also with embodiments the storage media drive . . . sends both its Drive S N and WWNN to the key manager with each key request. The key request may be a request to the key manager for a key to encrypt data or may be a request to the key manager to decrypt a protected key for use by the data storage drive . . . in decrypting data on data storage media . . .

With embodiments a data storage drive . . . contacts the key manager with a key request to request a key or to have one unwrapped. In some embodiments the key manager responds to key requests without initiating contact with data storage drives . . . . In alternative embodiments the key manager may initiate contact with the data storage drives . . .

In certain embodiments a data storage drive . . . is capable of contacting the key manager out of band e.g. via a library proxy server . In other embodiments a data storage drive . . . is capable of contacting the key manager in band e.g. on Fiber Channel at least up to some proxy e.g. a device driver . Device Drivers and Access Methods for the z OS r operating system available from International Business Machines IBM Corporation are initiators and do not do polling so if a command is being sent to the data storage drive . . . e.g. a Load a Write or a Read the data storage drive . . . as the target device has the change to respond otherwise the data storage drive . . . does cannot establish connection to the key server in band because it is not able to initiate.

To protect against an attacker connecting to the key server and asking for and getting keys the key manager uses the drive table to screen key requests to determine whether they are valid key requests or potential attacks. The drive table identifies known entities that should be responded to which are to be distinguishable from other entities.

In certain embodiments the drive serial number and or the WWNN may be treated as the data storage drive identifier or drive name . In certain embodiments it is useful to use the WWNN as the data storage drive identifier as the drive serial number is not retained through a FRU process while the WWNN is retained through this process. In certain embodiments it is useful to use the drive serial number as this can be easily located on the back of the data storage drive . . . and as some operating systems e.g. z OS operating system do not have access to the WWNN.

In certain embodiments the key manager does not respond to key requests from data storage drives . . . with drive identifiers not found in the drive table . This is to avoid for example a Denial of Service DoS attack. The key manager responds to key requests from data storage drives with drive identifiers that are found in the drive table .

In certain embodiments a drive diagnostic is available that causes the data storage drive . . . to invoke an existing key manager command flow e.g. a key request to create a new key with default key labels . In certain embodiments the key request may be sent with a code so that the key manager processes the key request as a No Operation which has a short timeout e.g. one minute . The drive diagnostic may be invoked by the automated data storage library in Library managed mode a Device Driver DD in System managed mode or an IBM TotalStorage Tape Diagnostic Tool ITDT tool with an IBM Device Driver available from International Business Machines IBM Corporation . In the case of the automated data storage library in some embodiments selection of a control on a Graphical User Interface GUI provided by embodiments causes the diagnostic to be simultaneously issued to a certain number e.g. one or 192 of data storage drives . . . at a given time. Thus it is possible that all data storage drives in a logical library which may include all data storage drives . . . in the automated data storage library or a subset of them are issued the diagnostic to contact one or more key managers assigned to that logical library.

Embodiments allow the drive table to be automatically updated to include both the Drive S N and WWNN without requiring manual transcription. Embodiments leverage use of the drive certificate as a means of authentication and use the Drive S N and WWNN being sent from the data storage drives . . . with each key request.

In certain embodiments automated entry automatic filling of the drive table is enabled when a configuration file option is set and a valid Drive S N and WWNN are presented with the key request with the optional additional requirement that the data storage drive . . . contain an authenticatable drive certificate . . .

Data storage drives . . . that do not have entries in the drive table may be introduced within some period of time e.g. by having each make a key request e.g. as part of the install process or may be added to the drive table whenever they first contact the key manager i.e. as opportunity allows . In the case in which the data storage drives . . . that do not have entries in the drive table contact the key manager in a given period of time the configuration file option may be set for that period of time i.e. the configuration file option is set temporarily . In the case in which the data storage drives . . . that do not have entries in the drive table do not contact the key manager in a given window of time the configuration file option may be left on at least until the data storage drives . . . that do not have entries in the drive table are seen to have entries in the drive table .

Embodiments add a form of data storage drive discovery to the key server . That is in certain embodiments the key manager listens for requests emitted from data storage drives . . . libraries e.g. automated data storage library and proxy servers. With embodiments the key manager is dynamic and adaptive to a customer s environment. In particular with embodiments the key manager provides a form of discovery processing at the key server allowing customers to have their key server used for any data storage drives . . . in their environment that successfully connect to and communicate with the key server .

In certain embodiments in order to discover new data storage drives . . . the key manager at the key server employs the following Pseudocode 1 

In Pseudocode 1 the determination of Drive not found in Drive Table is based on looking up the drive identifier which may be the drive serial number in the drive table e.g. a lookupDriveTableEntry subprocedure fails to return an entry . The determination of Drive Discovery Is Enabled is based on a new configuration parameter of accept UnknownDrives being set to true in the configuration file . The following is the format of this new configuration parameter.

Also in Pseudocode 1 a new drive table entry is created when a data storage drive . . . that has sent an operation request i.e. a key request does not have an entry in the drive table and the configuration parameter acceptUnknownDrives is set to true i.e. subprocedure Config acceptUnknownDrives true . The drive name is set to a unique identifier such as the Drive S N and or WWNN. The failedCount parameter is set to zero because no failed operations have been encountered with this data storage drive . . . . Note that failed operations is another means of verifying proper operation with the data storage drive . . . and can be used to protect against un wanted or faulty devices from impacting normal operations. If a data storage drive . . . exceeds some failure count the data storage drive . . . may be dis avowed of further service requests until some administrative action is taken to reset the data storage drive . . . the drive table or both. The isValid parameter is set to false as the data storage drive . . . has not been validated i.e. as a valid data storage drive . . . rather than as an attacker . The numberOfOperationsPerformed is initially set to zero as no operations have been performed for this data storage drive . . . yet.

Pseudocode 1 is performed before the drive certificate verification that enables a data storage drive . . . asking for assistance to be verified as a data storage drive . . . rather than an attacker if the verification is enabled.

Merely having an entry in the drive table would not enable a data storage drive . . . to be used for encrypting information since the certificate key identifiers for building protected keys referred to herein as recAlias and recAlias are not set yet.

In certain embodiments the certificate key identifiers are set using an admin CLI moddrive command. To alleviate the requirement of having to enter the certificate key identifier values before the data storage drive . . . may be used for encrypting data storage media . . . embodiments use the following configuration parameters 

The defaultAlias and defaultAlias configuration parameters in the configuration file are used in the event that the drive table entry in the drive table is not configured with recAlias values.

In certain embodiments where certificate key identifier values are to be used in building the protected keys the key manager at the key server employs the following Pseudocode 

In Pseudocode the EEDK refers to a protected key. Building the protected key refers to processing a key request when a data storage drive . . . is to write data and needs and encryption key while interpreting refers to processing a key request when a data storage drive . . . is to read data and needs a protected key unwrapped. Then with Pseudocode if the recAlias values are not set for the data storage drive . . . in the drive entry of the drive table i.e. Drive recAlias n is not set and if default value are set via the configuration parameters defaultAlias and defaultAlias in the configuration file i.e. Config defaultAlias n is set then the default values may be used. Otherwise an indication that the key manager is not able to create the protected key is returned.

Thus the key server is able to adapt to whatever existing environment is being used with data storage drives . . . being auto added to the drive table as they first make contact with the key server . This is enabled by the key server listening for requests.

In block the key manager automatically adds an entry i.e. row for the data storage drive . . . sending the key request to the drive table if an entry is not already there. In block the key manager determines whether this is the first request from this data storage drive . . . and whether verification i.e. validation will be performed. Note that the verification processing is optional in certain embodiments. If so processing continues to block otherwise processing continues to block .

In block the key manager requests a drive specific certificate from the data storage drive . . . receives a valid drive specific certificate from the data storage drive . . . and stores the drive specific certificate in the entry in the drive table for the data storage drive . . . . From block processing continues to block .

In block the key manager optionally performs verification checking by checking a signature on the key request using the drive specific certificate in the drive table validating that the drive specific certificate is signed by a trusted third party and verifying that the data storage drive is in possession of a private key . . . associated with the drive specific certificate. Thus in certain embodiments the key manager queries a drive certificate . . . from the data storage drive . . . the first time the data storage drive . . . contacts the key manager . If a valid drive certificate is returned by the data storage drive . . . that checks out i.e. to a root Certificate Authority CA which may be described as an entity that issues the drive certificates and is an example of a trusted third party the key manager validates data storage drive entry in the drive table for that data storage drive . . . . The drive certificate . . . is also stored in the drive table . Then the key manager is capable of checking signatures on key requests against the drive certificate in the drive table . In this manner the key manager is able to verify that a key request is from a data storage drive . . . and not an attacker masquerading as a data storage drive . . . . From block processing continues to block .

In block optionally the key manager determines whether the entry in the drive table for the data storage drive . . . is in a pending state. If so processing continues to block otherwise processing continues to block . In block the key manager sends an error message. Thus in certain embodiments once a drive table entry has been created a system administrator indicates e.g. via a CLI command or GUI whether the key manager should respond to key requests to the data storage drive . . . associated with that entry.

In block the key manager determines whether there are certificate key identifier values in the drive table for the data storage drive . . . . If so processing continues to block otherwise processing continues to block . In block the key manager stores default certificate key identifier values from the configuration file into the drive table . From block processing continues to block . In block the key manager responds to the key request.

Although illustrate the logic in accordance with certain embodiments many variations are within the scope of the embodiments.

With certain embodiments a configuration file option or flag i.e. acceptUnknownDrives parameter may be set to indicate to the key manager to not check the drive table for certain elements. For example if the acceptUnknownDrives parameter is set to true the key manager may not check or update the drive table and yet allow key requests to be processed. In other embodiments a new drive table row is created for any data storage drive . . . that does not have an existing drive table row and key requests are processed for data storage drives . . . that have an existing drive table row in the drive table .

In certain embodiments the key manager responds to a key request from a data storage drive . . . whether or not the data storage drive . . . has a drive entry with a drive identifier i.e. Drive S N and or WNNN in the drive table . That is the key manager responds to the key request whether or not the drive identifier is in the drive table and if the drive identifier is not in the drive table the key manager enters the drive identifier for the data storage drive . . . in the drive table .

However there are different forms of responding to the key request. In certain embodiments there is a configuration file option full response. With the configuration file option full response the key manager creates a new row in the drive table for each data storage drive . . . that contacts the key server and serves keys to the data storage drive . . . without verifying certificates. In certain embodiments there is the configuration file option full with valid certificate response. With the configuration file option full with valid certificate response the key manager creates a new row in the drive table for each data storage drive . . . that contacts the key server and serves keys to the data storage drive . . . with verification of certificates. Thus if a key request sender establishes connectivity knows the protocol presents at least one certificate and proves that it has possession of its corresponding private key then the key request sender is able to get keys. In certain embodiments there is a configuration file option full with valid certificate and within a range response. With the configuration file option full with valid certificate and within a range response the key manager creates a new row in the drive table for each data storage drive . . . that contacts the key server and serves keys to the data storage drive . . . with verification of certificates within a range e.g. a communications protocol endpoint address range . Ranging may be via a row in the drive table that is not used for information on any given data storage drive . . . e.g. for certificates but that sets effectively a policy on what criterion is to be met for a data storage drive . . . to be added to the drive table .

Various ranging techniques may be used in different embodiments. In certain embodiments a Drive S N range is used. That is wild cards may be used to specify which set of data storage drives . . . to accept. If a key request sender establishes connectivity knows the protocol presents a certificate from a data storage drive . . . in the Drive S N range and proves that it has possession of its corresponding private key then the key request sender is able to get keys. In certain embodiments the Drive S N range may be closely constrained. That is when a range is specified embodiments are more precise in which data storage drives . . . are allowed to get keys. By allowing wildcards or even a regular expression then complex matches on what is and is not allowed in may be defined. In certain embodiments to allow FRU replacements without having key server problems the Drive S N range may be very wide. In certain other embodiments a WWNN range is used. That is wild cards are in a drive table row in the WWNN column. In certain embodiments the WWNN range may be may be tightly specified i.e. more so than a Drive S N range . For example all 192 drives in a given library may fall within a range of 256 WWNN values and thus there may be at most two wild cards in a 16 byte WWNN range specification.

With reference to different forms of responding to the key request in certain embodiments there is a configuration file option partial response. With the configuration file option partial response the key manager enters a new row in the drive table in pending status which means that the key manager does not serve any keys until the data storage drive . . . is accepted i.e. indicated as to be accepted with a system administrator via a CLI command or GUI . The key manager sends an error response to the data storage drive . . . indicating that the data storage drive status is pending. As an example of a CLI command a certain number e.g. 192 pending data storage drives may be accepted with a single CLI command. This provides security because an attacker may get at most a pending entry into the drive table .

In certain embodiments there is a configuration file option error response. With the configuration file option error response the key manager responds with an error message and does not change the drive table .

As an alternative to the configuration file option there is an edge option. With the edge option when installing the data storage drives certain embodiments cause some edge i.e. something that causes a key request to be issued that sends to each data storage drive . . . of a logical library a diagnostic that attempts to connect to the key server . That is with the configuration file option the data storage drive . . . contacts the key server to obtain a keys and so entry into the drive table is as needed from the point of view of the data storage drive . . . and the key server has some flag or polity that allowed success.

With the edge option the data storage drives . . . are caused to contact the key server and thus to be entered or made pending in the drive table . In certain embodiments this allows success within a window of time e.g. Customer Engineer a filed service person call . In certain embodiments a system administrator who is physically present causes the edge e.g. via a command entered on a drive operator panel which provides a great deal of security as physical access to the data storage drives . . . is needed. In certain embodiments the edge may be caused remotely e.g. via a GUI so that no physical access to the data storage drives is needed to cause the edge. In certain other embodiments a routine calls out each data storage drive . . . in a logical library one after another either serially or in some other order but a serial order is not necessary e.g. a diagnostic may be sent to a next data storage drive . . . on a list without waiting for the data storage drive . . . before it to succeed fail .

With the edge option the key manager does not respond to key requests from a data storage drive . . . if the data storage drive . . . is not in the drive table with failure after a short timeout e.g. one minute . Since both Drive S N and WWNN are sent by the data storage drive . . . with a key request in environments in which a diagnostic is sent to the data storage drive . . . the data storage drive . . . is connected to the key server and the data storage drive . . . issues a key request to the key server the key manager is presented with the Drive S N and WWNN electronically. To capture this information the key manager creates a new row in the drive table .

With the edge option the key manager responds to a key request from a data storage drive . . . whether or not the data storage drive . . . has a drive entry with a drive identifier i.e. Drive S N and or WNNN in the drive table . That is the key manager responds to the key request whether or not the drive identifier is in the drive table and if the drive identifier is not in the drive table the key manager enters the drive identifier for the data storage drive . . . in the drive table . However there are different forms of responding to the key request.

In certain embodiments there is an edge option full response. With the edge option full response the key manager creates a new row in the drive table for each data storage drive . . . that contacts the key server and serves keys to the data storage drive . . . without verifying certificates. In certain embodiments there is the edge option full with valid certificate response. With the edge option full with valid certificate response the key manager creates a new row in the drive table for each data storage drive . . . that contacts the key server and serves keys to the data storage drive . . . with verification of certificates. Thus if a key request sender established connectivity knows the protocol presents at least one certificate and proves that it has possession of its corresponding private key then the key request sender is able to get keys.

In certain embodiments there is an edge option full with valid certificate and within a range response. With the edge option full with valid certificate and within a range response the key manager creates a new row in the drive table for each data storage drive . . . that contacts the key server and serves keys to the data storage drive . . . with verification of certificates within a range e.g. a communications protocol endpoint address range . Ranging may be via a row in the drive table that is not used for information on any given data storage drive . . . e.g. for certificates but that sets effectively a policy on what criterion is to be met for a data storage drive . . . to be added to the drive table .

In certain embodiments the range is established immediately before the diagnostic is sent and removed immediately afterwards. The edge option full with valid certificate and within a range response makes it easier and quicker to grant key access to a large number of data storage drives . . . . In certain embodiments the range may indicate the set of data storage drives . . . that are to be added to the drive table as fully valid rows. Thus ranging may take the place of the acceptUnknownDrives parameter with the range representing that for data storage drives . . . in the range the key manager does not check the data storage drives . . . but instead trusts these data storage drives . . . and adds them to the drive table . In certain alternative embodiments the range may be used to qualify which data storage drives . . . are added as pending rows and or which are added as accepted rows. This pending row technique may be helpful in an environment in which attacks may occur during installation.

With reference to different forms of responding to the key request in certain embodiments there is an edge option partial response. With the edge option partial response the key manager enters a new row in the drive table in pending status which means that the key manager does not serve any keys until the data storage drive . . . is accepted i.e. by a system administrator via a CLI command or GUI . The key manager sends an error response to the data storage drive . . . indicating that the data storage drive status is pending. Thus with the edge option and the edge option partial response embodiments provide a diagnostic by which the data storage drives . . . in some environment are caused to establish connectivity to the key server . As an example of a CLI command a certain number e.g. 192 pending data storage drives may be accepted with a single CLI command. This provides security because an attacker may get at most a pending entry into the drive table .

In certain embodiments there is an edge option error response. With the edge option error response the key manager responds with an error message and does not change the drive table . In such embodiments an error response flag may be statically set if desired to allow ease of attachment or not set to prevent a DoS attack.

In certain embodiments there is an edge option API response. An Application Programming Interface API is provided by these embodiments edge option API response the same application that is issuing the diagnostics is able to communicate with the key server and cause the key manager to add entries for data storage drives . . . to the drive table e.g. before send the diagnostic to the data storage drive . . . .

As an alternative to the configuration file option and the edge option there is a drive discovery option. With the drive discovery option there are existing applications such as Tivoli Productivity Center TPC available from International Business Machines IBM Corporation that already do drive discovery. Embodiments interface the drive discovery applications to the key server via an API and any discovered drives may be added to the drive table .

Thus in certain embodiments if a configuration file parameter e.g. acceptUnknownDrives is set to true the key manager upon receiving a key request adds a drive table row for any data storage drive . . . that connects to the key server and is not already in the drive table . Additionally the key manager requests the data storage drive . . . to present a valid certificate at that time i.e. the first time the data storage drive . . . contacts the key server . Thus the data storage drive . . . even though not in the drive table at the time of making the key request receives a response from the key manager . In certain embodiments a trigger causes a diagnostic be sent to each data storage drive . . .

In certain other embodiments the key manager supports the concept of pending drive table entries. In such embodiments the key manager adds any data storage drive that connects to the key server and is not already in the drive table as pending. The key manager does not provide keys to the data storage drive . . . until data storage drive . . . has been accepted e.g. the pending state has been changed to to be accepted .

In yet other embodiments the key manager supports a CLI extension that allows a user to list accept or clear pending drive table entries. Accepting a pending drive table entry means that the next time the key manager is contacted by the data storage drive . . . with the accepted entry the key manager will respond to the data storage drive . . . and query the certificate. In certain embodiments the key manager does not serve keys to the data storage drive . . . with the accepted entry until the certificate is verified.

In further embodiments if a configuration file parameter e.g. acceptUnknownDrives is set to false the key manager responds to key requests from data storage drives not in the drive table with an error message.

In certain embodiments the key manager supports the concept of pending drive table entries along with a CLI extension that allows a user to list accept or clear pending drive table entries. This provides security while reducing the amount of CLI work. With such embodiments the key manager may respond to data storage drive . . . queries e.g. with a request for a drive certificate or alternatively may not respond to the data storage drive . . . queries while the state is pending. Data storage drives . . . that do not have entries in the drive table may be introduced within some period of time e.g. by having each make a key request e.g. as part of the install process or may be added to the drive table whenever they first contact the key manager i.e. as opportunity allows .

Embodiments provide a technique for automatically filling the drive table while still allowing for administrator authorization to optionally be required before the data storage drives . . . corresponding to those automatically filled drive entries are able to get keys and hence provide a means for security.

z OS is a registered trademark or common law mark of International Business Machines Corporation in the United States and or other countries.

The described operations may be implemented as a method computer program product or apparatus using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof.

Each of the embodiments may take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. The embodiments may be implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the embodiments may take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium may be any apparatus that may contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The described operations may be implemented as code maintained in a computer usable or computer readable medium where a processor may read and execute the code from the computer readable medium. The medium may be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a rigid magnetic disk an optical disk magnetic storage medium e.g. hard disk drives floppy disks tape etc. volatile and non volatile memory devices e.g. a random access memory RAM DRAMs SRAMs a read only memory ROM PROMs EEPROMs Flash Memory firmware programmable logic etc. . Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

The code implementing the described operations may further be implemented in hardware logic e.g. an integrated circuit chip Programmable Gate Array PGA . Application Specific Integrated Circuit ASIC etc. . Still further the code implementing the described operations may be implemented in transmission signals where transmission signals may propagate through space or through transmission media such as an optical fiber copper wire etc. The transmission signals in which the code or logic is encoded may further comprise a wireless signal satellite transmission radio waves infrared signals Bluetooth etc. The transmission signals in which the code or logic is encoded is capable of being transmitted by a transmitting station and received by a receiving station where the code or logic encoded in the transmission signal may be decoded and stored in hardware or a computer readable medium at the receiving and transmitting stations or devices.

A computer program product may comprise computer useable or computer readable media hardware logic and or transmission signals in which code may be implemented. Of course those skilled in the art will recognize that many modifications may be made to this configuration without departing from the scope of the embodiments and that the computer program product may comprise any suitable information bearing medium known in the art.

The term logic may include by way of example software hardware firmware and or combinations of software and hardware.

Certain implementations may be directed to a method for deploying computing infrastructure by a person or automated processing integrating computer readable code into a computing system wherein the code in combination with the computing system is enabled to perform the operations of the described implementations.

The logic of describes specific operations occurring in a particular order. In alternative embodiments certain of the logic operations may be performed in a different order modified or removed. Moreover operations may be added to the above described logic and still conform to the described embodiments. Further operations described herein may occur sequentially or certain operations may be processed in parallel or operations described as performed by a single process may be performed by distributed processes.

The illustrated logic of may be implemented in software hardware programmable and non programmable gate array logic of in some combination of hardware software or gate array logic.

Input Output I O devices including but not limited to keyboards displays pointing devices etc. may be coupled to the system either directly or through intervening I O controllers .

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters .

The system architecture may be coupled to storage e.g. a non volatile storage area such as magnetic disk drives optical disk drives a tape drive etc. . The storage may comprise an internal storage device or an attached or network accessible storage. Computer programs in storage may be loaded into the memory elements and executed by a processor in a manner known in the art.

The system architecture may include fewer components than illustrated additional components not illustrated herein or some combination of the components illustrated and additional components. The system architecture may comprise any computing device known in the art such as a mainframe server personal computer workstation laptop handheld computer telephony device appliance virtualization device storage controller etc.

The foregoing description of embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the embodiments to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the embodiments be limited not by this detailed description but rather by the claims appended hereto. The above specification examples and data provide a complete description of the manufacture and use of the composition of the embodiments. Since many embodiments may be made without departing from the spirit and scope of the embodiments the embodiments reside in the claims hereinafter appended or any subsequently filed claims and their equivalents.

