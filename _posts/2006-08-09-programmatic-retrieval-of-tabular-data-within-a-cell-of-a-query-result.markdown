---

title: Programmatic retrieval of tabular data within a cell of a query result
abstract: A method, system and article of manufacture for processing a database query result that includes multiple data elements in a single result field. One embodiment provides a method of processing a query result. The method includes receiving a query result that includes at least one result field having multiple data elements that are in a many-to-one relationship with a second result field. The received query result is parsed to identify the multiple data elements from the first result field. Then, a result set is generated on the basis of the identified multiple data elements. The generated result set only includes one-to-one relationships between different result fields. Advantageously, the generated result set is suitable for programmatic access in order to allow an automated processing of the generated result set.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08316013&OS=08316013&RS=08316013
owner: International Business Machines Corporation
number: 08316013
owner_city: Armonk
owner_country: US
publication_date: 20060809
---
The present invention generally relates to data processing and more particularly to processing database query results.

Databases are computerized information storage and retrieval systems. A relational database management system is a computer database management system DBMS that uses relational techniques for storing and retrieving data. The most prevalent type of database is the relational database a tabular database in which data is defined so that it can be reorganized and accessed in a number of different ways. A distributed database is one that can be dispersed or replicated among different points in a network. An object oriented programming database is one that is congruent with the data defined in object classes and subclasses.

Regardless of the particular architecture a DBMS can be structured to support a variety of different types of operations. Such operations can be configured to retrieve add modify and delete information being stored and managed by the DBMS. Standard database access methods support these operations using high level query languages such as the Structured Query Language SQL . The term query refers to a set of words phrases or groups of words characterizing the data that a user may want to retrieve from a database.

Any requesting entity including applications operating systems and at the highest level users can issue queries against data in a database to obtain required information. Queries may be predefined i.e. hard coded as part of an application or generated in response to input e.g. user input . After a query is executed a query result is returned to the requesting entity. The requesting entity may wish to invoke further routines to analyze the data included in the query result.

However query results are typically returned in a format useful for presenting and displaying the results to a user. For example query results are often returned as an HTML or XML document or even more simply a text file of comma separated values. In this format markup tags may be used to render a display of the query result as a table with the one or more rows. In some cases a given cell of such a table may itself include multiple data elements. For instance a cell of a row of such a result table may include multiple data elements or values. Within such a row data from one cell may have a one to many relationship with data elements in the cell that contains multiple data elements. Further if multiple cells within a row contain multiple elements many to many relationships may exist for elements in such a row. However when returned in as an HTML or XML document among other formats the query results are not returned in manner that preserves the relational nature of the query results. For example elements from multiple database rows may be formatted and displayed as a single text string in a single row of a result table. Thus the referential integrity of the data is lost. This referential integrity however is required for programmatic access by routines configured to analyze the data from the table. Accordingly the referential integrity needs to be recreated to allow such a programmatic access.

Therefore there is a need for an efficient technique for providing programmatic access and retrieval of relational data within a result set where cells may include elements from multiple database rows.

The present invention is generally directed to a method system and article of manufacture for processing database query results and more particularly for processing of query results having multiple data elements in a single result field.

One embodiment of the invention includes a computer implemented method of processing a query result. The method generally includes receiving the query result wherein the query result includes a first result field having multiple data elements in a many to one relationship with a second result field and parsing the received query result to identify the multiple data elements from the first result field. The method generally further includes generating a result set from the identified multiple data elements wherein the generated result set includes one or more rows each row including a one to one relationship between one of the multiple data elements of the first result field and the second result field and returning the generated result set.

Another embodiment of the invention includes a computer readable medium containing a program which when executed by a processor performs operations for processing a query result. The operations may generally include receiving the query result wherein the query result includes a first result field having multiple data elements in a many to one relationship with a second result field and parsing the received query result to identify the multiple data elements from the first result field. The operations may generally further include generating a result set from the identified multiple data elements wherein the generated result set includes one or more rows each row including a one to one relationship between one of the multiple data elements of the first result field and the second result field and returning the generated result set.

Another embodiment of the invention includes a computing device having a processor and a memory containing a program for processing a query result. The program may be configured to perform an operation for generating a result set from data included with a result field of a query result. The operation may generally include receiving the query result wherein the query result includes a first result field having multiple data elements in a many to one relationship with a second result field and parsing the received query result to identify the multiple data elements from the first result field. The operation may generally further include generating a result set from the identified multiple data elements wherein the generated result set includes one or more rows each row including a one to one relationship between one of the multiple data elements of the first result field and the second result field and returning the generated result set.

The present invention is generally directed to a method system and article of manufacture for processing database query results and more particularly for processing database query results having multiple data elements stored in a single result field. In general queries are executed against one or more underlying databases. Typically a database query includes one or more result fields specifying what data elements should be returned in a result set. A query also typically specifies conditions used to evaluate whether a given element of data should be included in the result set. The result set includes the one or more result fields each having data retrieved from the underlying database for the result field that satisfies any conditions specified in the query.

In one embodiment an underlying result set may be returned in a tabular form having one or more rows and one or more columns defining a plurality of result fields. At least one result field of a given row may itself include data in tabular form. In other words the one result field may include multiple data elements or values. The multiple data elements may have a many to one relationship with other elements in the given row. For example consider a query related to the medical diagnosis related to a given patient. In a result table with data for many patients each patient s data may be listed in a single row and a field in each row may list multiple diagnoses for that patient.

According to one embodiment of the invention the multiple data elements are retrieved from the at least one result field and used to generate a separate result set. The generated result set may have a separate result field for each of the identified multiple data elements each separate result field having a one to one relationship to the given row. In one embodiment the generated result set is suitable for programmatic access by analysis routines to allow automated processing of the generated result set.

In the following reference is made to embodiments of the invention. However it should be understood that the invention is not limited to specific described embodiments. Instead any combination of the following features and elements whether related to different embodiments or not is contemplated to implement and practice the invention. Furthermore in various embodiments the invention provides numerous advantages over the prior art. However although embodiments of the invention may achieve advantages over other possible solutions and or over the prior art whether or not a particular advantage is achieved by a given embodiment is not limiting of the invention. Thus the following aspects features embodiments and advantages are merely illustrative and unless explicitly present are not considered elements or limitations of the appended claims.

One embodiment of the invention is implemented as a program product for use with a computer system. The program s of the program product defines functions of the embodiments including the methods described herein and can be contained on a variety of computer readable media. Illustrative computer readable media include but not limited to i non writable storage media e.g. read only memory devices within a computer such as CD ROM disks readable by a CD ROM drive on which information is permanently stored ii writable storage media e.g. floppy disks within a diskette drive or hard disk drive on which alterable information is stored. Other media include communications media through which information is conveyed to a computer such as through a computer or telephone network including wireless communications networks. The latter embodiment specifically includes transmitting information to from the Internet and other networks. Such computer readable media when carrying computer readable instructions that direct the functions of the present invention represent embodiments of the present invention.

In general the routines executed to implement the embodiments of the invention may be part of an operating system or a specific application component program module object or sequence of instructions. The software of the present invention typically is comprised of a multitude of instructions that will be translated by the native computer into a machine readable format and hence executable instructions. Also programs are comprised of variables and data structures that either reside locally to the program or are found in memory or on storage devices. In addition various programs described hereinafter may be identified based upon the application for which they are implemented in a specific embodiment of the invention. However it should be appreciated that any particular nomenclature that follows is used merely for convenience and thus the invention should not be limited to use solely in any specific application identified and or implied by such nomenclature.

Illustratively the computer is part of a networked system . In this regard the invention may be practiced in a distributed computing environment in which tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices. In another embodiment the computer is a standalone device. As used herein the term computer shall mean any computerized device having at least one processor. The computer may be a standalone device or part of a network in which case the computer may be coupled by communication means e.g. a local area network or a wide area network to another device i.e. another computer .

In any case one of ordinary skill in the art will understand that is merely one configuration for a computer system. Embodiments of the invention can apply to any comparable configuration regardless of whether the computer is a complicated multi user apparatus a single user workstation or a network appliance that does not have non volatile storage of its own.

The computer may include a number of operators and peripheral systems as shown for example by a mass storage interface operably connected to a storage device by a video interface operably connected to a display and by a network interface operably connected to the plurality of networked devices which may be representative of the Internet via a suitable network. Although storage is shown as a single unit it could be any combination of fixed and or removable storage devices such as fixed disc drives floppy disc drives tape drives removable memory cards or optical storage. The display may be any video output device for outputting viewable information.

Computer is shown comprising at least one processor which obtains instructions and data via a bus from a main memory . The processor could be any processor adapted to support the methods of the invention. In particular the computer processor is selected to support the features of the present invention.

The main memory is any memory sufficiently large to hold the necessary programs and data structures. Main memory could be one or a combination of memory devices including random access memory nonvolatile or backup memory e.g. programmable or flash memories read only memories etc. . In addition memory may be considered to include memory physically located elsewhere in the computer system for example any storage capacity used as virtual memory or stored on a mass storage device e.g. direct access storage device or on another computer coupled to the computer via bus . Thus main memory and storage device could be part of one virtual address space spanning multiple primary and secondary storage devices.

Requesting application is representative of any application including an operating system configured to issue queries against the data source . The queries issued by the application may be predefined i.e. hard coded as part of the application or may be generated in response to input e.g. user input . In one embodiment users may compose a query by interacting with a user interface provided by the application For example a graphical user interface may be configured to allow a user to create submit queries.

Furthermore in one embodiment the requesting application may be configured to programmatically access query results for processing. More specifically the requesting application may process a query result using routines or transmit the given query result to one or more other applications configured to process data returned in a query result.

Illustratively the requesting application issues a query against the data source illustrated by a dashed arrow to obtain a query result . To this end the requesting application accesses one of the database connectivity tools or for accessing data source . Illustratively the database connectivity tools and include a Web application an open Database connectivity ODBC driver a Java Database connectivity JDBC driver and a Java application programming interface Java API .

Web application is an application that is accessible by a Web browser and that provides functions beyond simply the static display of information. For example web application allows the requesting application to query the data source s . The ODBC driver provides a set of standard application programming interfaces to perform database functions such as connecting to the data source executing SQL functions and committing or rolling back database transactions. JDBC driver is an API for the Java programming language defining how a client may access a database. JDBC driver provides methods for querying and updating data in a database.

Illustratively the JDBC driver includes a result set generator that is configured to create an in memory representation of the query result as described in more detail below. In one embodiment result set generator may be implemented as a method call that returns a programmatic Java ResultSet or RowSet object or a reference to such an object defining the in memory representation . Note however that other possible implementations known or unknown are broadly contemplated. Java API provides methods that allow an application program e.g. requesting application ODBC or JDBC written in a high level language to use specific data or functions or interfaces provided by API .

Illustratively issued query is executed by the query execution unit against the data source . For instance the query is executed against a data table maintained in the data source . An exemplary data table is described in more detail below with reference to .

It should be noted that the query execution unit is shown as a single component for simplicity. However the query execution unit may include other components such as a query engine a query parser and a query optimizer. A query parser is generally configured to accept a received query input from a requesting entity such as the requesting application and then parse the received query. The query parser may then forward the parsed query to the query optimizer for optimization. A query optimizer is an application program which is configured to construct a near optimal search strategy known as an access plan for a given set of search parameters according to known characteristics of an underlying database e.g. the data source an underlying system on which the search strategy will be executed e.g. computer system of and or optional user specified optimization goals. But not all strategies are equal and various factors may affect the choice of an optimum search strategy. However in general such search strategies merely determine an optimized use of available hardware software components to execute respective queries. Once an access plan is selected the query engine may then execute the query according to the selected access plan.

When query is executed against the data source the query result may be returned to the requesting application . In some cases the query result may be formatted and displayed in a tabular form having one or more rows and one or more columns defining distinct result fields. For instance the query result may be returned as a text format such as an HTML or XML document or a text file of comma separated values. The markup tags in such a document may define how to render and display the results of the query arranged in a tabular display. An exemplary tabular query result is described in more detail below with reference to

In one embodiment the tabular query result may include a row that has a result field having tabular data . That is a row may include a result field that itself includes multiple data elements. The tabular data may have a many to one relationship with other data in that row. However the tabular data may be represented as a text string in the text based form e.g. an HTML document . Thus the query result may not be suitable for programmatic access by other routines of application .

In one embodiment result set generator may be invoked to provide an in memory representation of the query result that may be used for programmatic access to the query results. For example the result set generator may access the query result and identify the multiple data elements within a given cell of result . The result set generator then generates the in memory representation on the basis of the identified multiple data elements. For example the in memory representation may define a separate result table having a separate result field in a separate row for each of the identified multiple data elements. To establish referential integrity each row may include a reference to the corresponding primary key of the row that in the query result .

By way of example the separate result table may be a relational table in the form of a Java ResultSet or RowSet object which is suitable for programmatic access by corresponding analysis routines provided by API . As is known a RowSet is an instance of a Java RowSet class which in turn is part of a RowSet framework provided by the Java programming language. The JDBC driver implementation provides the ability to query one or more databases. The results of the query can be accessed with an implementation of RowSet interface which provides access to rows of data forming a query result. The rowset can be stored as a persistent data object. Thus the rowset can be accessed and modified as required independent of the one or more databases. For example method calls may be used to access data from a specific row and column or to iterate over values from an entire row column or the complete RowSet. Subsequently the modified rowset and the one or more databases can be synchronized to reflect the modifications performed on the rowset in the one or more databases.

The in memory representation is returned to the requesting application . Thus the query result can be accessed and processed programmatically by the requesting application using the in memory representation even though the original query result may be in a presentation and or display formant e.g. an XML or HTML document .

Method starts at step where a query against an underlying data source is received from a requesting application e.g. requesting application of . For example Table I shows an exemplary query composed in natural language.

At step the query received at step may be executed to obtain a query result. For example the query of Table I may be executed against data in the Diagnosis Information illustrated in Table II below.

As shown the Diagnosis Information table includes four columns First Name ID Diagnosis and Date line 001 and eight rows lines 002 009 . By way of example assume that the ID column is used as a primary key to associate each of the rows in lines 002 009 with a particular patient. Illustratively the rows in lines 002 009 are ordered with respect to the diagnosis dates in the Date column. Accordingly a chronological order of the diagnoses for the patients Mark line 002 Lindsay line 003 James lines 004 006 008 and 009 and Henry lines 005 and 007 is established in Table II. Note Influenza was diagnosed four times once for Lindsay line 003 and three times for James lines 004 008 and 009 . The exemplary Diagnosis Information table is further described below with reference to .

In response to executing the query from Table I the query result shown in Table III below may be obtained. In one embodiment the query result may be formatted and represented in tabular form.

Assume now that a researcher wants to use the exemplary query result of Table III in order to determine programmatically how many patients have had an Influenza diagnosis. However the referential integrity of the exemplary Diagnosis Information table is lost in the result table shown in Table III as the values in the Diagnosis result field are in a many to one relationship to the corresponding rows. Thus an analysis routine that counts the number of Influenza diagnoses would incorrectly return a diagnosis count of three. However actually only one patient has had Influenza diagnoses.

To this end the data included with the query result is parsed to identify result fields having more than a single data element. In the given example the result table may be parsed and to determine that the Diagnosis result field contains multiple data elements i.e. multiple values or expressions in rows 002 003 of Table III. At step an in memory representation may be generated on the basis of the determined multiple data elements. For example Table IV illustrates an exemplary in memory representation generated from the exemplary query result of Table III.

The generated in memory representation is returned to the requesting application. The requesting application may then programmatically access the query result using the in memory representation for further processing. For example a routine e.g. a method of API may be invoked to iterate over the rows in Table IV. Accordingly the analysis routine can ignore or remove the duplicates and determine as result for the researcher s request that only a single patient has had an Influenza diagnosis.

In contrast to the exemplary Diagnosis Information table of Table II above the rows and of table are illustratively ordered in ascending order with respect to patient identifier values included with the ID column . In the given example row corresponds to line 004 row to line 006 rows and to lines 008 009 rows and to lines 002 003 and rows to lines 005 and 007 of the exemplary table of Table II.

As can be seen from the exemplary query result only includes two rows and . However as was noted above the Diagnosis result field of the row referring to James includes four data elements Influenza Ulcer Influenza and Influenza . Similarly the Diagnosis result field of the row that referring to Henry includes two data elements Common Cold and Cancer .

As can be seen from table includes a separate row for each of the multiple data elements included in the Diagnosis column of rows and of table . Accordingly for a Diagnosis column rows were generated from row of query result table and rows were generated from row of table . Additionally the value of the ID column was included with each of the rows in an ID column . Thus referential integrity from the exemplary table of was recreated in the separate result table of .

Advantageously embodiments of the invention allow for the creation of a relational data structure from a query result. Once a query result is obtained the query result may be used to generate the relational data structure which may thereafter be used to provide programmatic access to the query result. Thus any analysis or other data processing routine may be used to process data from the query result.

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

