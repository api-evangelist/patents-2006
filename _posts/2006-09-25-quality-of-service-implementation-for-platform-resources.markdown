---

title: Quality of service implementation for platform resources
abstract: A method, computer readable medium, and system are disclosed. In one embodiment, the method comprises setting a quality of service (QoS) priority level value for one or more computer system platform resources, other than a central processor core, relating to a task running on the computer system, and determining whether the one or more computer system platform resources will be allocated to the task based on the QoS priority level setting.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08458711&OS=08458711&RS=08458711
owner: Intel Corporation
number: 08458711
owner_city: Santa Clara
owner_country: US
publication_date: 20060925
---
As multi core multi threaded processors become commonplace there is a strong desire in the computer industry for allowing the operating system and applications to have better control over the resources available in the platform. As more cores and computing power are added to computer platforms the rest of the platform resources which are shared across the applications running on these cores need to be well managed to create a balanced system. Today the level of differentiation of computer system services provided to applications running on a central processor is limited to the processor core using the Task Priority Register TPR . As application software goes through different task priority levels this register is set by the software to mark the current priority level of the processor. This information is used to avoid the processor being interrupted by lower priority events.

The processor hardware ensures the priority enforcement inside the core and is essentially a mechanism to manage the available compute resources. But when it comes to resources outside of the core currently there is no mechanism for the software to communicate service level requirements to potential platform level Quality of Service QoS mechanisms. This lack of fine grain management of the processor and platform resources may be exacerbated as more virtualization technologies are implemented and computer users consolidate their servers by running multiple disparate applications on the same machine. To address this QoS mechanisms outside the processor core are being developed at the component as well as at the platform level to provide ways for better management of the available resources. But without proper mechanisms to expose these capabilities to the OS and applications full potential of platform QoS may not be realized.

Embodiments of a method system and computer readable medium to implement quality of service priority level controls for platform resources are described. In the following description numerous specific details are set forth. However it is understood that embodiments may be practiced without these specific details. In other instances well known elements specifications and protocols have not been discussed in detail in order to avoid obscuring the present invention.

In one embodiment central processor has a single core . In another embodiment central processor has multiple cores multiple cores are not shown in this figure . The core is coupled to a cache memory that also resides in the central processor . Additionally central processor may include an advanced programmable interrupt controller APIC . The APIC has a number of control registers CR and other processor specific registers. In one embodiment the Task Priority Register TPR is a register located within APIC .

Processor memory interconnect provides the central processor and other devices access to the system memory . A system memory controller controls access to the system memory . In one embodiment the system memory controller is located within the north bridge of a chipset that is coupled to processor memory interconnect . In another embodiment a system memory controller is located on the same chip as central processor . Information instructions and other data may be stored in system memory for use by central processor as well as many other potential devices. I O devices such as I O devices and are coupled to the south bridge of the chipset through one or more I O interconnects and .

In one embodiment a software application running on the central processor may have a priority level that determines its execution importance relative to any other software applications. The priority level gives a software application a specified priority in being executed on the central processor . In different embodiments there may be one two four or many priority levels. In one embodiment the central processor may be set to only run programs that are at a certain priority level more frequently than programs with a lower priority. Also if a central processor is set to run software applications at a certain priority level any external interrupts that are at a lower priority level will not be allowed to interrupt the current execution.

A software application running on the central processor may run many tasks. In one embodiment a task is a certain portion of the execution of a software application. Each task within an application may be designated with a certain priority level. The software application can set the TPR to mark the current priority level of the central processor core. Setting the processor s TPR with a specific priority level value tells the central processor to block interrupts of lower priority. This can determine the interruptability of the tasks executing on the central processor .

Different software applications being executed by the central processor as well as different tasks executed within each application require different amounts and types of resources from the computer system platform. For example one task may be memory storage intensive another may be processor memory interconnect bandwidth intensive another may be input output I O intensive and yet another may be central processing unit CPU cache intensive. It is generally beneficial to allocate these different platform resources according to the need of the task running on the computer system. Thus in one embodiment the computer system shown in allows assigning independent priority levels to the cache interconnect memory I O and power resources within the system. The ability to prioritize these resources is in addition to the prioritization of the CPU core running the task.

In one embodiment the computer system in has a process by which software applications running on the computer system can communicate the priority requirement of the application to the platform regarding resources such as memory I O interconnects processor cache and system power. In one embodiment a platform priority register PQR Platform QoS Register is defined and is utilized similarly to the TPR. In this embodiment software running on the processor sets the PQR with values representing the platform priority requirement of the currently running task in regard to platform resources. In different embodiments the software may set the PQR to prioritize system memory I O the processor memory interconnect the processor s cache the platform power delivery system or a combination of two or more of those resources. In another embodiment the availability of additional platform resources apart from those listed are also being manipulated by the PQR.

The software application s memory and I O accesses going outside of the processor core are then tagged with priority class information based on the current PQR value. QoS enforcement mechanisms in the platform use this priority tag to allocate platform resources appropriate for this request. In different embodiments the platform QoS enforcement mechanisms may include logic at the resource that can read the tagged QoS information from the memory and I O accesses and adjust the resource s interaction with the access accordingly the platform QoS enforcement mechanisms may also include software logic in the operating system that can adjust resource utilization based on tagged QoS information or any other resource utilization adjustment logic that can be implemented on the platform. In one embodiment the tag information may include specific bits that are added to the memory IO access that can be utilized by the QoS logic to determine the priority level of the specific access.

The accesses are tagged through a platform QoS tagging procedure with the current value of the TPR. The platform QoS tagging procedure adds QoS information received from the TPR to the memory or I O access transaction. Thus the memory IO access has additional priority level information accompanying it equal to the TPR that the processor is running at. If the TPR specifies the priority level for the current task is high for the processor then the platform QoS tagging procedure adds a high priority tag to a memory access outside of the core. Therefore the memory IO access outside the core would be given high priority by any platform QoS enabled resource such as the cache the processor memory interconnect the system memory the I O or platform power delivery. In one embodiment the priority levels may be low medium and high. In this embodiment if the priority level is high in the TPR it requires that the process also gets high priority treatment from the platform.

In another embodiment Control Register 8 CR8 is utilized to save the priority level for platform QoS resources. CR8 is utilized within Intel Corporation s 64 bit extensions of the IA 32 architecture. The tagged memory IO accesses are then received by one or more QoS enabled resources and those resources can modify their interaction with the memory IO accesses accordingly. A QoS enabled resource can read the priority level in the tag information and determine which memory IO access should be given priority. For example if one memory IO access is tagged high priority it receives preference from the QoS enabled resource over another memory IO access that is tagged medium priority.

This process of tagging memory IO accesses with the current value of the TPR allows for the platform resources to be given the same priority level as the processor core. While this allows for high priority tasks to be given high priority across the platform it does not allow for differentiation of priority levels among the different platform resources as well as differentiation from the processor core priority level.

In one embodiment some of the software controlled bits 62 52 can be used as platform QoS bits by providing a bit mask in another model specific register MSR or CR. In another embodiment depending on the availability of the reserved bits 51 40 some of those bits could be defined as platform QoS bits. The specific utilization of what QoS platform resources may be enabled or not as well as the prioritization granularity depends specifically on the number of bits that are capable of being utilized.

In one embodiment when virtual memory is allocated in the computer system the priority level of each memory page is assigned and added to the associated PTEs. The priority can be changed later through OS or VMM calls. The PTE information including the platform resource priority bits is loaded into the translation lookaside buffer. Subsequent accesses to the page get tagged with this platform priority information.

Thus embodiments of a method system and computer readable medium to implement quality of service priority level controls for platform resources are described. These embodiments have been described with reference to specific exemplary embodiments thereof. It will be evident to persons having the benefit of this disclosure that various modifications and changes may be made to these embodiments without departing from the broader spirit and scope of the embodiments described herein. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

