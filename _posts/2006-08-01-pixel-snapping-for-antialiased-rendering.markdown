---

title: Pixel snapping for anti-aliased rendering
abstract: Various technologies and techniques are disclosed for improving output rendering in anti-aliased rendering scenarios. The system receives information regarding at least one visual element area which is important for symmetric appearance. The information can include at least one coordinate of a guideline that a client would like to be snapped towards a pixel grid. The system uses the information to perform a pixel snapping procedure to snap the points of visual element to a pixel grid to create an adjusted image. The adjusted image is rendered on a display device in an anti-aliased rendering scenario. APIs are provided for setting horizontal and vertical pixel snapping guidelines. The collections containing the snapping guidelines are accessed and used during the pixel snapping procedure.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08497874&OS=08497874&RS=08497874
owner: Microsoft Corporation
number: 08497874
owner_city: Redmond
owner_country: US
publication_date: 20060801
---
Anti aliasing is a technique that is used to make graphics and text easier to read and pleasing to the eye when viewed on a computer screen. Anti aliasing is a way of getting around the low dots per inch DPI resolution of the computer screen such as 72 DPI . Anti aliased rendering affects pixels on the edges of a rendered figure. It calculates the percentage of pixel area covered by the figure and composes a color value as a mixture of figure color and background color. Anti aliasing cannot improve the physical resolution of a display e.g. an anti aliased image on 72 DPI display will never be as crisp as on 1200 DPI but anti aliasing minimizes the difference between ideal and generated images and thus improves quality. In particular anti aliasing suppresses so called saw teeth edges that used to appear on tilted figure edges without anti aliasing.

One problem with anti aliasing however is that it can produce irregular soft and sharp rendering of an image on the screen depending on the location of edges. For example an edge that falls exactly between screen pixels appears sharp but an edge that falls in the middle of a screen pixel appears soft. This problem is implicitly created by device independent layout calculations. When device resolution is known layout calculations can place edges exactly onto the boundaries between pixel rows and columns. Device independency assumes the resolution is not known so edges will either coincide with the pixel grid or take some fraction of a pixel row. For example a vertical black line that is one pixel wide can appear as a column of black pixels while another similar line can appear as two columns of grey pixels due to half pixel offset.

An additional problem that can occur when using anti aliasing is seeping. Seeping occurs when two abutting objects have a common edge that is not aligned between a row or column of device pixels. The first rendered object fills the pixels on the edge with a mixture of background and foreground color. The second object will take these pixels as its background and in turn mix it with a second foreground color so that the initial background penetrates into the resulting color values. Seeping is especially unpleasant when objects have the same solid foreground color and are supposed to appear as a single shape while anti aliased rendering leaves undesired seams that remain visible even on high DPI devices.

Various technologies and techniques are disclosed for improving output rendering in anti aliased rendering scenarios. The system receives information regarding at least one visual element area which is important for symmetric appearance. The information can include at least one coordinate of a guideline that a client would like to be snapped towards on a pixel grid. The system uses the information to perform a pixel snapping procedure to snap the points of visual element to a pixel grid to create an adjusted image. The adjusted point coordinates are then used for rendering the visual element on a display device in an anti aliased rendering scenario.

APIs are provided for setting horizontal and vertical pixel snapping guidelines. The collections containing the snapping guidelines are accessed and used during the pixel snapping procedure. The guidelines are used to calculate offsets that are used to determine translation values for visual element points. In one implementation the pixel snapping procedure improves a rendering appearance of the outputted image.

This Summary was provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

For the purposes of promoting an understanding of the principles of the invention reference will now be made to the embodiments illustrated in the drawings and specific language will be used to describe the same. It will nevertheless be understood that no limitation of the scope is thereby intended. Any alterations and further modifications in the described embodiments and any further applications of the principles as described herein are contemplated as would normally occur to one skilled in the art.

The system may be described in the general context as a pixel snapping application for anti aliased rendering situations but the system also serves other purposes in addition to these. In one implementation one or more of the techniques described herein can be implemented as features within an operating system program such as MICROSOFT WINDOWS or from any other type of program or service that is responsible for analyzing and or outputting graphical elements for display on a display device. In another implementation one or more of the techniques described herein are implemented as features with other applications that deal with improving the rendering of output to a display device for viewing by a user.

As shown in an exemplary computer system to use for implementing one or more parts of the system includes a computing device such as computing device . In its most basic configuration computing device typically includes at least one processing unit and memory . Depending on the exact configuration and type of computing device memory may be volatile such as RAM non volatile such as ROM flash memory etc. or some combination of the two. This most basic configuration is illustrated in by dashed line .

Additionally device may also have additional features functionality. For example device may also include additional storage removable and or non removable including but not limited to magnetic or optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Memory removable storage and non removable storage are all examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by device . Any such computer storage media may be part of device .

Computing device includes one or more communication connections that allow computing device to communicate with other computers applications . Device may also have input device s such as keyboard mouse pen voice input device touch input device etc. Output device s such as a display device speakers printer etc. may also be included. These devices are well known in the art and need not be discussed at length here. In one implementation computing device includes anti aliased pixel snapping application which will be described in further detail in .

Turning now to with continued reference to an anti aliased pixel snapping application operating on computing device is illustrated. Anti aliased pixel snapping application is one of the application programs that reside on computing device . Alternatively or additionally one or more parts of anti aliased pixel snapping application can be part of system memory on other computers and or applications or other such variations as would occur to one in the computer software art.

Anti aliased pixel snapping application includes program logic which is responsible for carrying out some or all of the techniques described herein. Program logic includes logic for receiving obtaining information from the client to identify which areas are important for symmetric appearance e.g. one or more coordinates e.g. X of the vertical guideline s that the client would like to be snapped towards the pixel grid line logic for using the information coordinates obtained from the client to perform a pixel snapping procedure to apply a small shift to the points involved into rendering procedure e.g. snap an edge of a visual element falling between two device pixels directly onto one device pixel on the pixel grid logic for causing a minor scaling to be applied to geometrical elements so the overall image size is not changed much e.g. more than 1 pixel which occurs by snapping different guidelines with different offsets e.g. scaling absorbs shifts made by pixel snapping procedure . logic for placing the guideline onto a particular edge thereby causing the visual representation of the element to be 100 on one device pixel e.g. rather than touching that pixel partially which allows background color to seep through logic for using the same coordinate values to define equivalent guidelines for two abutting objects thereby causing abutting edges to be snapped to the same pixel grid line e.g. to also help resolve seeping issues and other logic for operating the application . In one implementation program logic is operable to be called programmatically from another program such as using a single call to a procedure in program logic .

Turning now to with continued reference to the stages for implementing one or more implementations of anti aliased pixel snapping application are described in further detail. is a high level process flow diagram for one implementation of anti aliased pixel snapping application . In one form the procedure of is at least partially implemented in the operating logic of computing device .

The procedure begins at start point with receiving obtaining information from the client to identify the visual elements e.g. which one or more areas are important for symmetric appearance and the horizontal vertical guidelines the guidelines are used to align the elements in the appropriate horizontal or vertical orientation stage . The term guideline as used herein refers to a user defined line utilized as a guide by which the system uses to position the visual element for the purpose of having the edges coincide with device pixels.

Using the information obtained from the client the system performs a pixel snapping procedure to snap the points of the visual element to a pixel grid to create an adjusted image e.g. to apply a small shift to the points involved in visual elements rendering stage . By defining several guidelines cause a minor scaling to the geometrical content of the visual elements to absorb the shifts so the overall image size is not changed much e.g. more than one pixel stage . The adjusted image is rendered on a display device e.g. with an improved appearance as a result of the pixel snapping stage . The procedure ends at point .

Turning now to a process flow diagram for one implementation of the system of illustrating the high level stages involved in snapping a visual element to a pixel grid is shown. In one form the procedure of is at least partially implemented in the operating logic of computing device . The procedure begins at start point with snapping a horizontal or vertical edge of the visual element falling between two device pixels directly onto one device pixel on the pixel grid stage . By snapping the edge of the visual element to the pixel grid the system renders the edge of the visual representation of the element to be 100 on one device pixel e.g. rather than having pixels containing a mixture of foreground and background colors stage . Alternatively or additionally by snapping the horizontal and vertical edges of the visual element to the pixel grid two abutting objects are landed on neighboring pixels e.g. to help resolve seeping issues stage . The procedure ends at end point .

Turning now to geometrical diagrams will be shown to graphically illustrate the pixel snapping procedure described in . The same reference numerals will be used to represent the same elements on . is a geometrical diagram for one implementation of the system of that illustrates applying a guideline to a pixel grid. Guideline is displayed adjacent to the line which is to be rendered on the display device. Line is currently located between two different device pixels and respectively .

In a process flow diagram is shown for one implementation illustrating the stages involved in using the pixel snapping APIs of to snap pixels to a pixel grid before anti aliased rendering. In one form the procedure of is at least partially implemented in the operating logic of computing device . The procedure starts at start point with providing an API for setting a collection of horizontal pixel snapping guidelines on a visual stage . An API is provided for setting a collection of vertical pixel snapping guidelines on a visual stage . The system uses the guidelines in the collections to snap pixels to a pixel grid before anti aliased rendering to improve a rendering appearance stage . The procedure ends at end point .

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims. All equivalents changes and modifications that come within the spirit of the implementations as described herein and or by the following claims are desired to be protected.

For example a person of ordinary skill in the computer software art will recognize that the client and or server arrangements user interface screen content and or data layouts as described in the examples discussed herein could be organized differently on one or more computers to include fewer or additional options or features than as portrayed in the examples.

