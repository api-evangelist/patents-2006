---

title: Subscribing for application messages in a multicast messaging environment
abstract: Methods, systems, and products for subscribing for application messages in a multicast messaging environment as disclosed that include: requesting, by a message receiving device, a stream administration server to initialize a message subscription for application messages from a message sending device; receiving, in the message receiving device from the stream administration server, a data communications endpoint of a multicast message stream from the message sending device; beginning to listen, by the message receiving device, for the application messages at the data communications endpoint; and notifying, by the message receiving device after beginning to listen for the application messages, the message sending device to publish the application messages at the data communications endpoint.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08850451&OS=08850451&RS=08850451
owner: International Business Machines Corporation
number: 08850451
owner_city: Armonk
owner_country: US
publication_date: 20061212
---
The field of the invention is data processing or more specifically methods systems and products for subscribing for application messages in a multicast messaging environment.

Messaging environments are generally available to provide data communication between message sending devices and message receiving devices using messages. A message is a quantity of data that includes one or more data fields and is passed from a message producer installed on a message sending device to a message consumer installed on a message receiving device. A message may represent for example numeric or textual information images encrypted information and computer program instructions.

A messaging environment may support point to point messaging publish and subscribe messaging or both. In a point to point messaging environment a message producer may address a message to a single message consumer. In a publish and subscribe messaging environment a message producer may publish a message to a particular channel or topic and any message consumer that subscribes to that channel or topic receives the message. Because message producers and message consumers communicate indirectly with each other via a channel or topic in a publish and subscribe environment message transmission is decoupled from message reception. As a consequence neither producers nor consumers need to maintain state about each other and dependencies between the interacting participants are reduced or eliminated. A publish and subscribe environment may therefore allow message publishers and message subscribers to operate asynchronously.

For further explanation of a messaging environment sets forth a block diagram illustrating a typical messaging environment for data communications that includes a message sending device a message receiving device and a message administration server . The message sending device is a computer device having installed upon it a message producer a set of computer program instructions configured for creating or transforming application messages. The message producer typically transmits the messages to the message administration server for delivery to a message receiving device. In the example of the message producer transmits messages to the message administration server on a message stream . The message sending device may produce the transmitted messages by generating the messages from data of the message sending device itself or data received from some other source. The message receiving device is a computer device having installed upon it a message consumer a set of computer program instructions configured for receiving and consuming application messages. The message consumer typically receives the messages from the message administration server . In the example of the message consumer receives the messages from the message administration server on a message stream . In the example of the message stream and the message stream are data communication channels implemented using for example the User Datagram Protocol UDP and the Internet Protocol IP .

In either a point to point messaging environment or a publish and subscribe messaging environment the messages transmitted from message sending devices to message receiving devices typically pass through the message administration server . The message administration server is computer device having installed upon it a message administration module computer program instructions configured for administering the messages transmitted from the message producer to the message consumer . Examples of message administration modules may include the IBM WebSphere MQ the Open Message Queue from Sun Microsystems and the OpenJMS from The OpenJMS Group. In a point to point messaging environment the message administration module provides message queuing for the message consumer as the message administration module receives messages addressed to the consumer from various message providers. In a publish and subscribe messaging environment the message administration module administers the various channels or topics to which message producers publish and message consumers subscribe. In either message environment the message administration module may also provide security services to ensure that the only messages arriving at the messaging consumer from the message producer are those messages that the message consumer is authorized to receive and that the message producer is authorized to send.

Current messaging environments such as for example the one described above with reference to have certain drawbacks. Messages transmitted to a message administration server from a message sending device for delivery to a message receiving device are delayed in the message administration server until the message administration server can process the messages. The message processing that occurs in the message administration server typically increases the overall messaging latency of the messaging environment and decreases the overall speed for transmitting data in the data communications environment. Messaging latency is the time period beginning when the message producer transmits a message and ending when the message consumer receives the message.

In many data communication environments even slight increases in messaging latency are costly. Consider for example a financial market data environment. A financial market data environment is a data processing environment used to communicate information about financial markets and participants in financial markets. In a financial market data environment a message is commonly referred to as a tick and represents financial market data such as for example financial quotes or financial news. Financial quotes include bid and ask prices for any given financial security. A bid refers to the highest price a buyer is willing to pay for a security. An ask refers to the lowest price a seller is willing to accept for a security. In a financial market data environment a message producer may provide quotes for the purchase or sale of financial securities based on real time financial market conditions and a message consumer may buy and sell financial securities based on financial quotes. When a message consumer buys or sells a financial security based on the quoted price provided by the message producer the ability of a message consumer to obtain the bid or ask in the quote for the financial security is largely influenced by messaging latency in the financial market data environment. The higher the messaging latency the less likely a buy or sell order generated by the message consumer will execute at or near the price stated in the financial quote. In fact a highly volatile security may fluctuate in price dramatically over a time period of a few seconds.

Current solutions to reduce messaging latency are to remove the message administration server from the messaging environment. In such current solutions the message sending devices send messages directly to message receiving devices. The drawback to such current solutions is that removing the message administration server removes the administration functionality provided by the message administration server from the messaging environment. Current solutions therefore effectively offer no solution in messaging environments where the administrative functions of a message administration server are required. Consider for example a multicast messaging environment in which the message receiving device has no information about the state or existence of the message sending devices and the message sending devices transmit application messages without regard to whether any devices are listening for the messages. In such an environment further consider that the message receiving device requires that the transmission of messages from the message sending device does not occur until after the message receiving device has established a message stream to receive the messages. Removing the message administration server from such a financial market data environment removes the centralized entity capable of providing information about the various message sending devices in the environment to the message receiving device and removes the queuing capability provided by the message administration server.

Methods systems and products for subscribing for application messages in a multicast messaging environment as disclosed that include requesting by a message receiving device a stream administration server to initialize a message subscription for application messages from a message sending device receiving in the message receiving device from the stream administration server a data communications endpoint of a multicast message stream from the message sending device beginning to listen by the message receiving device for the application messages at the data communications endpoint and notifying by the message receiving device after beginning to listen for the application messages the message sending device to publish the application messages at the data communications endpoint.

In some embodiments receiving a data communications endpoint may include receiving in addition to the data communications endpoint one or more alternate data communications endpoints. In such embodiments subscribing for application messages in a multicast messaging environment may also include identifying by the message receiving device a failure condition for the data communication endpoint and switching by the message receiving device in response to the failure condition from listening for the application messages at the data communication endpoint to listening for the application messages at one of the alternate data communication endpoints.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods systems and products for subscribing for application messages in a multicast messaging environment according to embodiments of the present invention are described with reference to the accompanying drawings beginning with . sets forth a network and block diagram illustrating an exemplary system for subscribing for application messages in a multicast messaging environment according to embodiments of the present invention. The system of operates generally for subscribing for application messages in a multicast messaging environment according to embodiments of the present invention as follows A message receiving device requests a stream administration server to initialize a message subscription for application messages from a message sending device . A message subscription is a group of application messages for which a message receiving device is authorized to receive from a message sending device. The message receiving device receives from the stream administration server a data communications endpoint of a multicast message stream from the message sending device . The message receiving device begins to listen for the application messages at the data communications endpoint. After beginning to listen for the application messages the message receiving device notifies the message sending device to publish the application messages at the data communications endpoint. The message receiving device may also notifying the message sending device to stop publishing the application messages at the data communications endpoint. The message receiving device may also request the stream administration server to close the message subscription. In the exemplary system of the message receiving device is implemented as a subscribing client device and the message sending device is implemented as a feed adapter.

The high speed low latency data communications environment illustrated in includes a high speed low latency data communications network . The network includes a feed adapter a stream administration server and a subscribing client device as well as the infrastructure for connecting such devices together for data communications. The network of is termed high speed low latency because the application messages sent between devices connected to the network on message streams administered by the stream administration server bypass the stream administration server . For example the application messages on the message stream from the feed adapter to the subscribing client device bypass the stream administration server . Although such messages are not delayed for processing in the stream administration server the stream administration server retains administration of the stream between devices connected to the high speed low latency data communications network .

Further contributing to the high speed low latency nature of network readers will note that the network does not include a router that is a computer networking device whose primary function is to forward data packets across a network toward their destinations. Rather each device provides its own routing functionality for data communication through a direct connection with the other devices connected to the network . Because the network does not include a computer networking device dedicated to routing data packets the network of may be referred to as a minimally routed network. Although the exemplary network illustrated in does not include a router such a minimally routed network is for explanation only. In fact some high speed low latency networks useful in subscribing for application messages in a multicast messaging environment according to embodiments of the present invention may include a router.

The high speed low latency data communications environment depicted in includes a multicast message stream . A multicast message stream is a multicast data communication channel between a communications endpoint of a sending device and a communications endpoint of at least one receiving device. A communications endpoint is composed of a network address and a port for a sending device or a receiving device. In a multicast data communication channel a one to many relationship exists between a destination address for a message and the communication endpoints of receiving devices. That is each destination address identifies a set of communication endpoints for receiving devices to which each message of the stream is replicated. A multicast data communication channel may be implemented using for example the User Datagram Protocol UDP and the Internet Protocol IP the Pragmatic General Multicast PGM protocol or any other multicast data communications protocols as will occur to those of skill in the art.

The exemplary system of includes a stream administration server connected to the high speed low latency data communications network through a wireline connection . The stream administration server of is a computer device having installed upon it a stream administration module an authentication module an authorization module and an authorization policy . A stream administration module is a software component that includes a set of computer program instructions configured for brokering establishment of a message stream from the feed adapter to the subscribing client device . The stream administration module may broker the establishment of the message stream by receiving a request from the subscribing client device to initialize a message subscription authenticating the subscribing client device authorizing the subscribing client device to receive application messages from the feed adapter on the message stream and providing to the subscribing client device a data communications endpoint of a message stream from the message sending device . In addition to brokering the establishment of the message stream the stream administration module also includes a set of computer program instructions for performing other administrative functions in the messaging environment such as for example notifying the feed adapter to start publishing messages on the message stream in response to a receiving a publication notification from the subscribing client device .

The authentication module of is a set of computer program instructions capable of providing authentication security services to the stream administration module through an exposed authentication application programming interface API . Authentication is a process of verifying the identity of an entity. In the exemplary system of the authentication module verifies the identity of the subscribing client device . The authentication module may provide authentication security services using a variety of security infrastructures such as for example shared secret key infrastructure or a public key infrastructure.

The authorization module of is a set of computer program instructions capable of providing authorization security services to the stream administration module through an exposed authorization API . Authorization is a process of only allowing resources to be used by resource consumers that have been granted authority to use the resources. In the example of the authorization module identifies the application messages that the subscribing client device is authorized to receive on the message stream . The authorization module of provides authorization security services using an authorization policy . The authorization policy is a set of rules governing the privileges of authenticated entities to send or receive application messages on a message stream. In a financial market data environment for example an authenticated entity may be authorized to receive application messages that include financial quotes for some financial securities but not other securities. The authorization policy may grant privileges on the basis of an individual entity or an entity s membership in a group.

In the exemplary system of feed adapter is connected to the high speed low latency data communications network through a wireline connection . The feed adapter is a computer device having the capabilities of converting application messages received on a feed adapter input stream having a first format to application messages having a second format for transmission on a feed adapter output stream to subscribing client devices. The feed adapter input stream is a message stream from a feed source to the feed adapter . The feed adapter output stream is a message stream administered by the stream administration server from the feed adapter to the subscribing client device .

In the example of the feed adapter receives application messages on the feed adapter input stream from a feed source . The feed source is a computer device capable of aggregating data into application messages and transmitting the messages to a feed adapter. In a financial market data environment for example a feed source may be implemented as a feed source controlled by the Options Price Reporting Authority OPRA . OPRA is the securities information processor for financial market information generated by the trading of securities options in the United States. The core information that OPRA disseminates is last sale reports and quotations. Other examples of feed sources in financial market data environment may include feed sources controlled by the Consolidated Tape Association CTA or The Nasdaq Stock Market Inc. The CTA oversees the dissemination of real time trade and quote information in New York Stock Exchange and American Stock Exchange listed securities. The Nasdaq Stock Market Inc. operates the NASDAQ Market Center which is an electronic screen based equity securities market in the United States. In a financial market data environment a feed adapter input stream is referred to as a financial market data feed. 

The feed adapter of has installed upon it a conversion module a converter table conversion function library a message library a message model messaging middleware and a transport engine . The conversion module is a set of computer program instructions for converting application messages received on the feed adapter input stream having a first format into application messages having a second format for transmission to subscribing devices on the feed adapter output stream .

The conversion module converts application messages from the first format to the second format according to the converter table . The converter table of is a data structure that specifies the converter functions capable of converting the application message from one format to another format. Utilizing multiple converter tables the conversion module may convert messages from a variety of input formats to a variety of output formats. In the example of the converter table specifies the converter functions capable of converting the application message received from the feed adapter input stream having the first format to application messages having the second format for transmission to subscribing client devices on the feed adapter output stream . The converter table of may be implemented using a structured document such as for example an eXtensible Markup Language XML document.

The conversion function library of is a loadable software module that contains one or more converter functions capable of converting data fields in an application message from one format to another format or converting values of data fields from one value to another value. The converter functions contained in the conversion function library may for example convert a 16 bit integer to a 32 bit integer convert a number stored in a string field to a 64 bit double floating point value increase the value of one data field by one or any other conversion as will occur to those of skill in the art. The conversion module accesses the converter functions through a set of converter function APIs exposed by the converter functions of the conversion function library . In the example of the conversion function library may be implemented as dynamically linked libraries available to the conversion module at runtime statically linked libraries linked into the conversion module at compile time dynamically loaded Java classes or any other implementation as will occur to those of skill in the art.

In the example of the application messages transmitted by the feed adapter have a format specified in a message model . The message model is metadata that defines the structure and the format used to create access and manipulate the application messages converted from the application messages not shown received from the feed source . That is the message model specifies a message format for interpreting application messages and includes one or more field specifications. Each field specification specifies a message field for storing data in an application message and includes field characteristics of the message field. In the example of the message model is established on both the feed adapter and the subscribing client device by the stream administration server when the stream administration server brokers a message stream to a subscribing client device. A message model may be implemented using a structured document such as for example an XML document a Java object C object or any other implementation as will occur to those of skill in the art.

In the example of the conversion module and the converter functions of the conversion function library process the data contained in the application messages using the message library . The message library is a software module that includes a set of functions for creating accessing and manipulating messages according to a message model . The message library is accessible to the conversion module the converter functions of the conversion function library and the messaging middleware through a message API exposed by the message library .

Before the conversion module of performs data processing on the application messages the conversion module receives application messages not shown having a first format from the feed source . The conversion module of may receive the source stream messages through a receiving transport engine not shown of the feed adapter . The receiving transport engine is a software module that operates in the transport layer of the network stack and may be implemented according to the UDP IP protocols the PGM protocol or any other data communication protocol as will occur to those of skill in the art. The receiving transport engine may provide the received application messages directly to the conversion module or to the messaging middleware which in turn provides the source stream messages to the conversion module .

After the conversion module of performs data processing on the application messages received from the feed source the conversion module provides the application messages having the second format to the messaging middleware . The messaging middleware of is a software component that provides high availability services between the feed adapter any backup feed adapter that may exist the subscribing client device and the feed source . In addition the messaging middleware of includes a set of computer program instructions configuring for subscribing for application messages in a multicast messaging environment according to embodiments of the present invention. The messaging middleware operates generally for subscribing for application messages in a multicast messaging environment according to embodiments of the present invention by receiving a notification to publish the application messages and increasing in response to receiving the notification to publish the application messages a value for a computer data element representing subscriber interest in the application messages. When the value representing subscriber interest is greater than zero the messaging middleware provides application messages having characteristics specified in the publication notification to the transport engine for transmission to the subscribing client device . The messaging middleware typically receives the publication notification from the stream administration server . The application messages provided to the transport engine are received from the conversion module . The conversion module interacts with the messaging middleware through a messaging middleware API exposed by the messaging middleware .

In the example of the feed adapter also provides the ability to stop publication of particular application messages on a message stream and stop the conversion of messages for which no subscribers desire publication. That is the messaging middleware also operates generally for subscribing for application messages in a multicast messaging environment according to embodiments of the present invention by receiving a notification to stop publishing the application messages decreasing in response to receiving the notification to stop publishing the application messages a value for a computer data element representing subscriber interest in the application messages determining whether the value for a computer data element representing subscriber interest in the application messages is below a predetermined threshold and notifying a data provider to stop providing the application messages to the message sending device if the value for a computer data element representing subscriber interest in the application messages is below the predetermined threshold. In the example of the data provider is implemented as the feed source . The feed adapter notifies the feed source to stop providing application messages when the value representing subscriber interest falls to zero because the feed adapter no longer has any subscribers interested in the application messages. To distinguish between various types of messages transmitted by the feed adapter the feed adapter may have multiple values each value representing the subscriber interest for a particular type of application message.

The transport engine of is a software component operating in the transport and network layers of the OSI protocol stack promulgated by the International Organization for Standardization. The transport engine provides data communications services between network connected devices. The transport engine may be implemented according to the UDP IP protocols PGM protocol or any other data communications protocols as will occur to those of skill in the art. The transport engine is a software module that includes a set of computer program instructions for transmitting application messages to the subscribing client device . The transport engine of may transmit the application messages by receiving the application messages from the messaging middleware encapsulating the application messages provided by the messaging middleware into transport packets and transmitting the packets through the message stream to the subscribing client device . The messaging middleware operates the transport engine through a transport API exposed by the transport engine .

The subscribing client device in exemplary system of connects to the high speed low latency data communications network through a wireline connection . The subscribing client device of is a computer device capable of subscribing to the message streams transmitted by various feed adapters. In a financial market data environment for example a subscribing client device may subscribe to a tick to receive the bid and ask prices for a particular security on a message stream provided by a feed adapter controlled by a financial securities broker.

In the example of the subscribing client device has installed upon it an application a message library a message model messaging middleware a stream administration library and a transport engine . The application is a software component that processes data contained in the application messages received from the feed adapter . The application may process the data for utilization by the subscribing client device itself for contributing the data to another feed adapter or for contributing the data to some other device. In a financial market data environment the application installed on the subscribing client device may be a program trading application that buys or sells financial securities based on the quoted prices contained in ticks. The application may also be a value adding application that contributes information to a tick such as for example the best bid and ask prices for a particular security that is not typically included in the ticks provided by the feed source . The subscribing client device may then transmit the ticks to a feed adapter for resale to other subscribing client devices.

The application processes the data contained in the application messages using the message library . The message library is software module that includes a set of functions for creating accessing and manipulating messages according to the message model that is installed on both the feed adapter and the subscribing client device . The message library is accessible to the application through a message API exposed by the message library .

The communications between the subscribing client device and the stream administration server may be implemented using a stream administration library . The stream administration library is a set of functions contained in dynamically linked libraries or statically linked libraries available to the application through a stream administration library API . Through the stream administration library the subscribing client device of may request to subscribe to messages from a feed adapter modify an existing message subscription or cancel a subscription. The stream administration library includes a set of computer program instructions configured for subscribing for application messages in a message environment according to embodiments of the present invention. The stream administration library operates generally for subscribing for application messages in a message environment according to embodiments of the present invention by requesting a stream administration server to initialize a message subscription for application messages from a message sending device receiving in the message receiving device from the stream administration server a data communications endpoint of a multicast message stream from the message sending device beginning to listen for the application messages at the data communications endpoint and after beginning to listen for the application messages notifying the message sending device to publish the application messages at the data communications endpoint. When the stream administration library receives the data communications endpoint the stream administration library may also receive in addition to the data communications endpoint one or more alternate data communications endpoints.

The stream administration library also operates generally for subscribing for application messages in a message environment according to embodiments of the present invention by notifying the message sending device to stop publishing the application messages at the data communications endpoint requesting the stream administration server to close the message subscription. Functions of the stream administration library used by the application may communicate with the stream administration server through network by calling member methods of a CORBA object calling member methods of remote objects using the Java Remote Method Invocation RMI API using web services or any other communication implementation as will occur to those of skill in the art.

 CORBA refers to the Common Object Request Broker Architecture a computer industry specifications for interoperable enterprise applications produced by the Object Management Group OMG . CORBA is a standard for remote procedure invocation first published by the OMG in 1991. CORBA can be considered a kind of object oriented way of making remote procedure calls although CORBA supports features that do not exist in conventional RPC. CORBA uses a declarative language the Interface Definition Language IDL to describe an object s interface. Interface descriptions in IDL are compiled to generate stubs for the client side and skeletons on the server side. Using this generated code remote method invocations effected in object oriented programming languages such as C or Java look like invocations of local member methods in local objects.

The Java Remote Method Invocation API is a Java application programming interface for performing remote procedural calls published by Sun Microsystems . The Java RMI API is an object oriented way of making remote procedure calls between Java objects existing in separate Java Virtual Machines that typically run on separate computers. The Java RMI API uses a remote procedure object interface to describe remote objects that reside on the server. Remote procedure object interfaces are published in an RMI registry where Java clients can obtain a reference to the remote interface of a remote Java object. Using compiled stubs for the client side and skeletons on the server side to provide the network connection operations the Java RMI allows a Java client to access a remote Java object just like any other local Java object.

Before the application processes the data contained in the application messages the application receives the messages from the messaging middleware which in turn receives the application messages from the feed adapter through the transport engine . The messaging middleware is a software component that provides high availability services between the subscribing client device the feed adapter any backup feed adapters and the stream administration module . The messaging middleware provides such high availability services by receiving the data communication endpoint of the message stream and one or more alternate endpoints from the stream administration library . The messaging middleware includes a set of computer program instructions for subscribing for application messages in a multicast messaging environment according to embodiments of the present invention by identifying a failure condition for the data communication endpoint and switching in response to the failure condition from listening for the application messages at the data communication endpoint to listening for the application messages at one of the alternate data communication endpoints. The application and the stream administration library interact with the messaging middleware through a messaging middleware API .

The transport engine of is a software component operating in the transport and network layers of the OSI protocol stack promulgated by the International Organization for Standardization. The transport engine provides data communications services between network connected devices. The transport engine may be implemented according to the UDP IP protocols PGM protocol or any other data communications protocols as will occur to those of skill in the art. The transport engine is a software component for receiving application messages from the feed adapter . The transport engine receives the application messages by receiving transport packets through the message stream from the feed adapter unencapsulating the application messages from the received packets and provides the application messages to messaging middleware of the subscribing client device . In the example of the messaging middleware operates the transport engine through a transport API exposed by the transport engine .

The servers and other devices illustrated in the exemplary system of are for explanation not for limitation. Devices useful in subscribing for application messages in a multicast messaging environment may be implemented using general purpose computers such as for example computer servers or workstations handheld computer devices such as for example Personal Digital Assistants PDAs or mobile phones or any other automated computing machinery configured for data processing according to embodiments of the present invention as will occur to those of skill in the art.

The arrangement of servers and other devices making up the exemplary system illustrated in are for explanation not for limitation. Although the connections to the network of are depicted and described in terms of wireline connections readers will note that wireless connections may also be useful according to various embodiments of the present invention. Furthermore data processing systems useful according to various embodiments of the present invention may include additional servers routers other devices and peer to peer architectures not shown in as will occur to those of skill in the art. Networks in such data processing systems may support many data communications protocols including for example Transmission Control Protocol TCP Internet Protocol IP HyperText Transfer Protocol HTTP Wireless Access Protocol WAP Handheld Device Transport Protocol HDTP and others as will occur to those of skill in the art. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

Subscribing for application messages in a multicast messaging environment in accordance with the present invention in some embodiments may be implemented with one or more message receiving devices stream administration servers and message sending devices. These devices and servers are in turn implemented to some extent at least as computers that is automated computing machinery. For further explanation therefore sets forth a block diagram of automated computing machinery comprising an exemplary message receiving device useful in subscribing for application messages in a multicast messaging environment according to embodiments of the present invention. The message receiving device of includes at least one computer processor or CPU as well as random access memory RAM which is connected through a high speed memory bus and bus adapter to processor and to other components of the message receiving device.

Stored in RAM is an application messages message model a message library a messaging middleware a stream administration library and a transport engine . Each application message is a quantity of data that includes one or more data fields and is transmitted from one device to another on a message stream. As mentioned above a message may represent numeric or textual information images encrypted information computer program instructions and so on. In a financial market data environment for example a message is commonly referred to as a tick and represents financial market data such as for example financial quotes or financial news. Each application message may be implemented using a structured document such as for example an XML document a Java object C object or any other implementation as will occur to those of skill in the art. The message model is metadata that defines the structure and format of the messages . The message model may also be implemented using a structured document such as for example an XML document a Java object C object or any other implementation as will occur to those of skill in the art. The application the message library the messaging middleware the stream administration library and the transport engine illustrated in are software components that is computer program instructions that operate as described above with reference to the subscribing client device of .

Also stored in RAM is an operating system . Operating systems useful in message receiving devices according to embodiments of the present invention include UNIX Linux Microsoft NT IBM s AIX IBM s i5 OS and others as will occur to those of skill in the art. The operating system the application the messages the message model the message library the messaging middleware and the transport engine in the example of are shown in RAM but many components of such software typically are stored in non volatile memory also for example on a disk drive .

The exemplary message receiving device of includes bus adapter a computer hardware component that contains drive electronics for high speed buses the front side bus the video bus and the memory bus as well as drive electronics for the slower expansion bus . Examples of bus adapters useful in message receiving devices useful according to embodiments of the present invention include the Intel Northbridge the Intel Memory Controller Hub the Intel Southbridge and the Intel I O Controller Hub. Examples of expansion buses useful in message receiving devices useful according to embodiments of the present invention may include Peripheral Component Interconnect PCI buses and PCI Express PCIe buses.

The exemplary message receiving device of also includes disk drive adapter coupled through expansion bus and bus adapter to processor and other components of the exemplary message receiving device . Disk drive adapter connects non volatile data storage to the exemplary message receiving device in the form of disk drive . Disk drive adapters useful in message receiving devices include Integrated Drive Electronics IDE adapters Small Computer System Interface SCSI adapters and others as will occur to those of skill in the art. In addition non volatile computer memory may be implemented for a message receiving device as an optical disk drive electrically erasable programmable read only memory so called EEPROM or Flash memory RAM drives and so on as will occur to those of skill in the art.

The exemplary message receiving device of includes one or more input output I O adapters . I O adapters in message receiving devices implement user oriented input output through for example software drivers and computer hardware for controlling output to display devices such as computer display screens as well as user input from user input devices such as keyboards and mice. The exemplary message receiving device of includes a video adapter which is an example of an I O adapter specially designed for graphic output to a display device such as a display screen or computer monitor. Video adapter is connected to processor through a high speed video bus bus adapter and the front side bus which is also a high speed bus.

The exemplary message receiving device of includes a communications adapter for data communications with other computers and for data communications with a high speed low latency data communications network . Such data communications may be carried out serially through RS 232 connections through external buses such as a Universal Serial Bus USB through data communications networks such as IP data communications networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a data communications network. Examples of communications adapters useful for subscribing for application messages in a multicast messaging environment according to embodiments of the present invention include modems for wired dial up communications IEEE 802.3 Ethernet adapters for wired data communications network communications and IEEE 802.11b adapters for wireless data communications network communications.

Although is discussed with reference to exemplary message receiving devices readers will note that automated computing machinery used to implement exemplary stream administration servers and exemplary message sending devices useful in subscribing for application messages in a multicast messaging environment according to embodiments of the present invention are similar to the exemplary message receiving device of . That is such exemplary stream administration servers and feed adapters include one or more processors bus adapters buses RAM video adapters communications adapters I O adapters disk drive adapters and other components similar to the exemplary message receiving device of as will occur to those of skill in the art.

For further explanation sets forth a flowchart illustrating an exemplary method of subscribing for application messages in a multicast messaging environment according to embodiments of the present invention. The method of includes requesting by a message receiving device a stream administration server to initialize a message subscription for application messages from a message sending device. The message receiving device may request a stream administration server to initialize a message subscription for application messages from a message sending device by transmitting a subscription initialization request to the stream administration server. The subscription initialization request may be implemented as an XML document a call to a member method of a RMI object on the message receiving device or any other implementation as will occur to those of skill in the art. For example consider the following exemplary subscription initialization request implemented as a member method of a RMI object 

The exemplary function initialize subscription instructs the stream administration server to initialize the message subscription for application messages having characteristics specified by the value of topic. The exemplary function initialize subscription returns a pointer to a computer memory address where a data structure representing a data communication endpoint exists. Readers will note that the exemplary function described above is for explanation and not for limitation. In fact other exemplary functions as will occur to those of skill in the art may also be useful in subscribing for application messages in a multicast messaging environment according to embodiments of the present invention.

The subscription initialization request of includes topics of the application messages that the message receiving requests to receive from the message sending device. A topic represents the characteristics of the messages that the message receiving device requests to receive. Each application message typically includes a topic data field describing the information contained in the application message. Using a topic a message receiving device may specify the group of messages that the message receiving device requests to receive from a message sending device. In a financial market data environment for example a message receiving device may use a topic to request to receive ticks from an OPRA feed source that contains quotes of an IBM option traded on the Chicago Board Options Exchange CBOE that includes the best bid and best ask for the IBM option on the CBOE.

The subscription initialization request of also includes security credentials for the message receiving device. As part of initializing the message subscription the stream administration server typically authenticates the identity of the message receiving device and determines whether the message receiving device is authorized to receive the requested application messages. The security credentials may be implemented as a digital signature in a public key infrastructure a security token or any other security data as will occur to those of skill in the art for authenticating the identity of the originator of the subscription initialization request . Examples of security token may include those security tokens described in the web services specification entitled Web Services Security WS Security developed by IBM Microsoft and VeriSign or the web services specification entitled Web Services Trust Language WS Trust developed by IBM Microsoft VeriSign OpenNetworks Layer 7 Computer Associates BEA Oblix Reactivity RSA Security Ping Identity and Actional.

If the stream administration server determines that the message receiving device is authorized to receive the requested application messages the stream administration server may then continue to initialize the message subscription of application messages specified in the subscription initialization request . That is the stream administration server may create or modify data structures in the stream administration server used to administer the message subscription start processes on the stream administer server used to carry out the administration of the message subscription. The stream administration server may also identify and execute service providers used to manage the message sending devices and obtain from one or more message sending devices network addresses to which the message sending devices will transmit the application messages specified in the subscription initialization request and perform any other subscription initialization as will occur to those of skill in the art.

The method of also includes receiving in the message receiving device from the stream administration server a data communications endpoint of a multicast message stream from the message sending device. The data communications endpoint represents a data structure that includes a network address at which the message receiving device may listen for application messages from the message sending device. As mentioned above the stream administration server typically obtains the network address to which a message receiving device may listen for application messages from the message sending device. The data communications endpoint of may be implemented according to the UDP IP protocols the PGM protocol or any other data communications protocols as will occur to those of skill in the art.

The method of also includes beginning to listen by the message receiving device for the application messages at the data communications endpoint . The message receiving device may begin to listen for the application messages at the data communications endpoint according to the method of by calling a function from a transport engine API of a transport engine installed on the message receiving device that starts listening for application messages at the endpoint . Consider the following exemplary function useful for subscribing for application messages in a multicast messaging environment according to embodiments of the present invention 

The exemplary function transport listen instructs the transport engine of the message receiving device to listen for application message at a data communications endpoint identified by the value for the endpoint ID. The exemplary function transport listen returns an address in computer memory for a buffer in which the transport engine places application messages received through the data communications endpoint. Readers will note that the exemplary function described above is for explanation and not for limitation. In fact other exemplary functions as will occur to those of skill in the art may also be useful in subscribing for application messages in a multicast messaging environment according to embodiments of the present invention.

The method of also includes notifying by the message receiving device after beginning to listen for the application messages the message sending device to publish the application messages at the data communications endpoint. After beginning to listen for the application messages the message receiving device may notify the message sending device to publish the application messages at the data communications endpoint according to the method of by transmitting a message publication notification to the stream administration server. The stream administration server then in turn may instruct the message sending device to publish messages at the network address specified in the data communication endpoint . The message publication notification may be implemented as an XML document a call to a member method of a RMI object on the message receiving device or any other implementation as will occur to those of skill in the art. Readers will note that notifying the message sending device to publish the application messages after the message receiving device begins to listen for the application messages advantageously ensures that message receiving device will not miss the first messages transmitted after the subscription is initialized.

Often in multicast messaging environments a failure will occur on a message sending device that prevents the device from properly transmitting application messages to message receiving device. When such a failure occurs the message receiving device may switch from listening for application messages from the failed message sending device at one data communications endpoint to listening for application messages from another message sending device at an alternate data communications endpoint. For further explanation therefore sets forth a flowchart illustrating a further exemplary method of subscribing for application messages in a multicast messaging environment according to embodiments of the present invention that includes switching by the message receiving device in response to the failure condition from listening for the application messages at the data communication endpoint to listening for the application messages at an alternate data communication endpoints .

The method of is similar to the method of . That is the method of includes requesting by a message receiving device a stream administration server to initialize a message subscription for application messages from a message sending device receiving in the message receiving device from the stream administration server a data communications endpoint of a multicast message stream from the message sending device beginning to listen by the message receiving device for the application messages at the data communications endpoint and notifying by the message receiving device after beginning to listen for the application messages the message sending device to publish the application messages at the data communications endpoint. The example of is also similar to the example of in that the example of includes a subscription initialization request and a message publication notification .

In the method of receiving a data communications endpoint of a multicast message stream from the message sending device includes receiving in addition to the data communications endpoint one or more alternate data communications endpoints . Each alternate data communications endpoint represents a data structure that includes a network address at which the message receiving device may listen for application messages from an alternate message sending device. As mentioned above the stream administration server typically obtains the network addresses at which a message receiving device may listen for application messages from the alternate message sending devices. The data communications endpoint of may be implemented according to the UDP IP protocols the PGM protocol or any other data communications protocols as will occur to those of skill in the art.

The method of also includes identifying by the message receiving device a failure condition for the data communication endpoint . The failure condition represents a set of constraints for the data communication endpoint that specify when a message receiving device should switch to an alternate endpoint . For example the failure condition may specify that the message receiving device should switch to an alternate endpoint if no messages are received through the endpoint after a predetermined time period. For further example the failure condition may specify that the message receiving device should switch to an alternate endpoint when the message receiving device receives a failure notification message from a message sending device. The message receiving device may identify a failure condition for the data communication endpoint according to the method of by periodically determining whether any constraints for the data communication endpoint of the failure condition have occurred. If any of the constraints of the failure condition have occurred then the message receiving device has identified a failure condition .

The method of also includes switching by the message receiving device in response to the failure condition from listening for the application messages at the data communication endpoint to listening for the application messages at one of the alternate data communication endpoints . The message receiving device may switch from listening for the application messages at the data communication endpoint to listening for the application messages at one of the alternate data communication endpoints according to the method of by calling functions from a transport engine API of a transport engine installed on the message receiving device that stop listening for application messages at the endpoint and start listening for application messages at one of the alternate endpoints . For example consider the following exemplary functions useful for subscribing for application messages in a multicast messaging environment according to embodiments of the present invention 

The exemplary function transport stop listen instructs the transport engine of the message receiving device to stop listening for application messages at a data communication endpoint identified by the value for the endpoint ID. As described above the exemplary function transport listen instructs the transport engine of the message receiving device to listen for application message at a data communications endpoint identified by the value for the endpoint ID. The exemplary function transport listen returns an address in computer memory for a buffer in which the transport engine places application messages received through the data communications endpoint. Readers will note that the exemplary functions described above are for explanation and not for limitation. In fact other exemplary functions as will occur to those of skill in the art may also be useful in subscribing for application messages in a multicast messaging environment according to embodiments of the present invention.

In a financial market data environment message sending devices are often implemented as feed adapters capable of converting application messages having a first format from a feed source to application messages having a second format for transmission to message receiving devices such as for example subscribing client devices. The financial costs of operating a feed adapter largely depends on the number of application messages the feed adapter receives from the feed source. It is advantageous therefore for the feed adapter to only receive the application messages for which the feed adapter has subscribers. As such the feed adapter monitors the number of subscribers for each type of application message transmitted by the feed adapter. For further explanation therefore sets forth a flowchart illustrating a further exemplary method of subscribing for application messages in a multicast messaging environment according to embodiments of the present invention that includes increasing by the message sending device in response to receiving the notification to publish the application messages a value for a computer data element representing subscriber interest in the application messages.

The method of is similar to the method of . That is the method of includes requesting by a message receiving device a stream administration server to initialize a message subscription for application messages from a message sending device receiving in the message receiving device from the stream administration server a data communications endpoint of a multicast message stream from the message sending device beginning to listen by the message receiving device for the application messages at the data communications endpoint and notifying by the message receiving device after beginning to listen for the application messages the message sending device to publish the application messages at the data communications endpoint . The example of is also similar to the example of in that the example of includes a subscription initialization request and a message publication notification .

The method of also includes receiving in the message sending device a notification to publish the application messages. The message sending device may receive the message publication notification from the message sending device through the message administration server or directly from the message sending device itself. Typically the stream administration server or the message sending device transmits the message publication notification to the message sending device through an administrative data communications connection implemented using UDP IP TCP IP or any other data communications protocols as will occur to those of skill in the art.

The method of also includes increasing by the message sending device in response to receiving the notification to publish the application messages a value for a computer data element representing subscriber interest in the application messages. The message sending device may increase the value according to the method of by incrementing the value by one for each message publication notification received. Using the value the message sending device may monitor the number of subscribers for the application messages transmitted by the device.

The method of describes the response of a message sending device to receiving a message publication notification. Turning now to describes the response of a message sending device to receiving a notification to stop publishing application messages. Therefore sets forth a flowchart illustrating a further exemplary method of subscribing for application messages in a multicast messaging environment according to embodiments of the present invention that includes notifying by the message receiving device the message sending device to stop publishing the application messages at the data communications endpoint. The message receiving device may notify the message sending device to stop publishing the application messages at the data communications endpoint according to the method of by transmitting a stop publication notification to the stream administration server. The stream administration server then in turn may instruct the message sending device to stop publishing the messages at the network address specified in the data communication endpoint. The stop publication notification may be implemented as an XML document a call to a member method of a RMI object on the message receiving device or any other implementation as will occur to those of skill in the art.

The method of also includes receiving in the message sending device a notification to stop publishing the application messages. The message sending device may receive the stop publication notification from the message sending device through the message administration server or directly from the message sending device itself. Typically the stream administration server or the message sending device transmits the stop publication notification to the message sending device through an administrative data communications connection implemented using UDP IP TCP IP or any other data communications protocols as will occur to those of skill in the art.

The method of includes decreasing by the message sending device in response to receiving the notification to stop publishing the application messages a value for a computer data element representing subscriber interest in the application messages. The message sending device may decrease the value according to the method of by decrementing the value by one for each stop publication notification received.

The method of also includes determining by the message sending device whether the value for a computer data element representing subscriber interest in the application messages is below a predetermined threshold . The predetermined threshold represents a value used to identify when the message sending device should notify a data provider to stop providing application messages. Typically the predetermined threshold is set to one. The message sending device may determine whether the value is below a predetermined threshold by comparing the value with the predetermined threshold . If the value is less than the predetermined threshold then the value is below a predetermined threshold . If the value is greater than or equal to the predetermined threshold then the value is not below a predetermined threshold .

The method of includes notifying by the message sending device a data provider to stop providing the application message to the message sending device if the value for a computer data element representing subscriber interest in the application messages is below the predetermined threshold . The message sending device may notify the data provider to stop providing the application message to the message sending device according to the method of by transmitting a stop data notification to the data provider. The message sending device typically transmits the stop data notification to the data provider through an administration message stream implemented using UDP IP TCP IP or any other data communications connection as will occur to those of skill in the art. The stop data notification may be implemented as an XML document a call to a member method of a RMI object on the message sending device or any other implementation as will occur to those of skill in the art. Readers will note that notifying a data provider to stop providing the application message to the message sending device if the value for a computer data element representing subscriber interest in the application messages is below the predetermined threshold advantageously prevents a message sending device from acquiring application messages for retransmission for which no message receiving device is subscribed.

The method of also includes requesting by the message receiving device the stream administration server to close the message subscription regardless of whether or not the value is below the predetermined threshold . The message receiving device may requests the stream administration server to close the message subscription according to method of after notifying the message sending device to stop publishing the application messages. Requesting the stream administration server to close the message subscription according to the method of allows the stream administration server to reallocate any computer resources utilized to initialize and administer the message subscription for the message receiving device.

The message receiving device may request the stream administration server to close the message subscription according to method of by calling a function from an API of a stream administration library installed on the message receiving device that closes the message subscription. For example consider the following exemplary function useful for subscribing for application messages in a multicast messaging environment according to embodiments of the present invention 

The exemplary function close subscription instructs the stream administration server to close the message subscription identified by the value for the subscription ID. The exemplary function close subscription may be part of a remote Java RMI object or a CORBA object instantiated on the message receiving device. Readers will note that the exemplary function described above is for explanation and not for limitation. In fact other exemplary functions as will occur to those of skill in the art may also be useful in subscribing for application messages in a multicast messaging environment according to embodiments of the present invention.

In view of the explanations set forth above in this document readers will recognize that subscribing for application messages in a multicast messaging environment according to embodiments of the present invention provides the following benefits 

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for subscribing for application messages in a multicast messaging environment. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on signal bearing media for use with any suitable data processing system. Such signal bearing media may be transmission media or recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as for example Ethemets and networks that communicate with the Internet Protocol and the World Wide Web as well as wireless transmission media such as for example networks implemented according to the IEEE 802.11 family of specifications. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

