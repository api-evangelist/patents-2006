---

title: Application programming interface for antivirus applications
abstract: In one embodiment, an antivirus uses a secure call path that includes an antivirus system call table containing a reference to an operating system kernel routine. The call path may also include an antivirus device driver that has access to the antivirus system call table. The antivirus may send a service request to the operating system kernel routine by way of the call path to perform file manipulations for virus scanning, for example. Advantageously, the call path gets around possible rootkit infestations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08484734&OS=08484734&RS=08484734
owner: Trend Micro Incorporated
number: 08484734
owner_city: Tokyo
owner_country: JP
publication_date: 20060822
---
The present invention relates generally to data processing and more particularly but not exclusively to application programming interfaces.

Generally speaking a computer operating system is a program that manages computer resources and other programs which are referred to as application programs. A kernel is the core of the operating system and provides basic services for all other components of the operating system and application programs. Application programs and the kernel employ different and distinct regions of computer memory. Application programs are user level programs and accordingly run in user mode in user mode space of the memory. On the other hand the kernel runs in kernel mode in kernel mode space of the memory which is generally restricted to kernel operations. Kernel mode is a privileged mode of processor execution in that it typically grants access to all system memory and all the processor s instructions.

Operating systems typically provide an interface that allows an application program in user mode to invoke kernel routines that perform low level operations typically reserved for the kernel. Examples of these kernel routines include those for file manipulations such as creating reading or modifying files. An antivirus employs kernel routines to detect and remove computer viruses. For example an antivirus may request the service of a kernel routine to open a file in order to scan that file for computer viruses.

A rootkit comprises computer readable program code designed to conceal running processes files or system data. Rootkits may be used to surreptitiously modify parts of the operating system or install themselves as drivers or kernel modules. Increasingly rootkits are being used by virus coders as malicious code or part of malicious code. shows a flow diagram schematically illustrating how a rootkit may intercept service requests to kernel routines. The example of is the same as that of except that a rootkit intercepts calls to the OS kernel routines . The rootkit compromises the call path from the antivirus to the OS kernel routines . For example the rootkit may not perform the requested call to the OS kernel routines thereby rendering the antivirus ineffective.

In one embodiment an antivirus uses a secure call path that includes an antivirus system call table containing a reference to an operating system kernel routine. The call path may also include an antivirus device driver that has access to the antivirus system call table. The antivirus may send a service request to the operating system kernel routine by way of the call path to perform file manipulations for virus scanning for example. Advantageously the call path gets around possible rootkit infestations.

These and other features of the present invention will be readily apparent to persons of ordinary skill in the art upon reading the entirety of this disclosure which includes the accompanying drawings and claims.

In the present disclosure numerous specific details are provided such as examples of apparatus components and methods to provide a thorough understanding of embodiments of the invention. Persons of ordinary skill in the art will recognize however that the invention can be practiced without one or more of the specific details. In other instances well known details are not shown or described to avoid obscuring aspects of the invention.

Computer viruses worms Trojans rootkits and spyware are examples of malicious codes that have plagued computer systems throughout the world. Although there are technical differences between each type of malicious code malicious codes are collectively referred to herein as viruses. 

The OS System Service Descriptor Table SSDT also known as an OS system call table is a kernel table that contains the addresses of OS kernel routines in the Microsoft Windows operating system. In the example of the service request by the antivirus eventually reaches the OS SSDT see which points to NTCreateFile in kernel mode space see . The NTCreateFile executes and services the request by the antivirus . A rootkit can maliciously modify the call path from the antivirus in user mode to the NTCreateFile in kernel mode compromising the effectiveness of the antivirus .

Referring now to there is shown a schematic diagram of a computer in accordance with an embodiment of the present invention. The computer shown in the example of may be employed as a client computer or a server computer for example. The computer of may have less or more components to meet the needs of a particular application. As shown in the computer may include a processor such as those from the Intel Corporation or Advanced Micro Devices for example. The computer may have one or more buses coupling its various components. The computer may include one or more user input devices e.g. keyboard mouse one or more data storage devices e.g. hard drive optical disk USB memory a display monitor e.g. LCD flat panel monitor CRT a computer network interface e.g. network adapter modem and a main memory e.g. RAM . In the example of the main memory includes software i.e. computer readable program code components of an operating system and the antivirus . Components of the operating system and the antivirus may be executed by the processor .

In one embodiment the operating system comprises the Microsoft Windows operating system e.g. Windows XP Windows 2000 and Windows 2003 operating systems . The operating system includes an OS application programming interface API for allowing application programs executing in user mode to send service requests to programs executing in kernel mode. The OS API includes an OS kernel routines interface and a driver control . The OS kernel routines interface are APIs specifically designed by the vendor of the operating system to allow application programs to send service requests to OS kernel routines . That is the conventional call path between an application program and an OS kernel routine is through the OS kernel routines interface . Conventional application programs are thus configured to send service requests to OS kernel routines by calling into the OS kernel routines interface see also .

The driver control is an API that allows application programs in user mode to communicate with device drivers executing in kernel mode. A device driver comprises computer readable program code for controlling a hardware device. In the Microsoft Windows operating system an application may use a driver control to send control codes to a device driver. An example driver control in the Microsoft Windows operating system is the NtDeviceloControlFile function. As will be more apparent below the antivirus may send a service request to an OS kernel routine by way of a call path through a driver control and an antivirus system call table i.e. AV SSDT instead of the conventional call path through an OS kernel routines interface and OS SSDT .

The antivirus may comprise computer readable program code for detecting malicious code. The antivirus may include a scan module an AV kernel components interface and AV kernel components see also . The AV kernel components may comprise an AV kernel module and an antivirus System Service Descriptor Table AV SSDT .

The scan module may comprise computer readable program code for scanning data for computer viruses. The antivirus may scan the file stored in a data storage device for example. The scan module may employ a suitable conventional algorithm for scanning data without detracting from the merits of the present invention. The mechanics of scanning data for viruses in general is well known and employed by antivirus products from a variety of vendors including Trend Micro Inc. for example.

The AV kernel components interface may comprise computer readable program code configured to allow components of the antivirus operating in user mode to communicate with components of the antivirus operating in kernel mode. More specifically in one embodiment the AV kernel components interface works in conjunction with the AV kernel components to allow the scan module to send service requests to an OS kernel routine . In one embodiment the AV kernel components interface comprises a library for the Win32 subsystem of the Microsoft Windows operating system. The library may comprise functions that use the Kernel32.dll to call into NTDLL.dll to send driver control codes to the AV kernel module which is configured as a device driver. Because the AV kernel components interface is not part of the standard Microsoft Windows operating system the AV kernel components interface is accessible only to the antivirus and related components. This advantageously prevents rootkits and other programs from interfering with the operation of the antivirus .

As shown in the AV kernel components may comprise the AV kernel module and the AV SSDT . The AV kernel module may comprise a device driver operating in kernel mode. Unlike a conventional device driver the AV kernel module is configured to access the AV SSDT to initiate execution of the OS kernel routine as per a service request by the scan module . In one embodiment the AV kernel module is registered as device driver in Microsoft Windows operating system by the Service Control Manager SCM . This allows the AV kernel module to operate in kernel mode allowing it to access kernel data and information. The AV kernel module may be configured to allocate kernel memory space for the AV SSDT and build the AV SSDT in that kernel memory space.

The AV SSDT may comprise a system call table containing a listing of pointers to addresses of OS kernel routines . The AV SSDT may thus be used to initiate execution of an OS kernel routine . As shown in the AV SSDT is separate from the OS SSDT which application programs generally use to gain access to services of OS kernel routines . In one embodiment unlike the OS SSDT the AV SSDT is used exclusively by the antivirus and related components that have access to the AV kernel components interface . That is in one embodiment the AV SSDT is not accessible to other application programs. This advantageously prevents rootkits from modifying or corrupting the AV SSDT .

In the example of the scan module opens the file see for virus scanning by calling a function for opening files. This function for opening files may be provided as a library service by the AV kernel components interface . The function for opening the file is AV CreateFile in this example. In response to the function call by the scan module the AV kernel components interface sends control codes and parameters to the AV kernel module . The control codes may include the pointer to the corresponding OS kernel routine corresponding to AV CreateFile which is NtCreateFile in this example. The parameters may be those accepted by NtCreateFile for opening a file e.g. name of the file . In one embodiment the AV kernel components interface sends the control codes and parameters to the AV kernel module by calling into the kernel32dll.dll see which invokes the NTDLL.dll see to pass the control code and parameters to the AV kernel module executing in kernel mode as a device driver. In one embodiment the NTDLL.dll does so using the NtDeviceloControlFile function which is typically employed to communicate with device drivers in the Microsoft Windows operating system. The AV kernel module receives the control codes and parameters and uses the control codes to find the pointer to the NtCreateFile in the AV SSDT . From the AV SSDT the NtCreateFile executes to service the request by the scan module to open the file . Thereafter the scan module scans the now opened file for computer viruses.

While specific embodiments of the present invention have been provided it is to be understood that these embodiments are for illustration purposes and not limiting. Many additional embodiments will be apparent to persons of ordinary skill in the art reading this disclosure.

