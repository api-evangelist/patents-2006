---

title: Application updating in a home automation data transfer system
abstract: An automation network includes automation network devices connected to the network and a system level interface that interfaces with a transport layer and an application layer of the automation network. A method is disclosed that programs an automation network device in communication with an automation network, where the automation network includes an access point coupled with an external network. The method includes receiving application upgrade data at the access point, where the application upgrade data includes upgrade data associated with a target automation network device in communication with the automation network. Application upgrade data is transmitted through the home to the target automation network device. A next application upgrade data packet to be transmitted across the automation network is requested from the target automation network device. An application stored in the target automation network device is programmed, using an application upgrade data command transmitted to the target home automation network device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07640351&OS=07640351&RS=07640351
owner: Intermatic Incorporated
number: 07640351
owner_city: Spring Grove
owner_country: US
publication_date: 20061031
---
The present application claims the benefit of priority of U.S. Provisional Application Ser. No. 60 733 514 Data Transfer System filed Nov. 4 2005 the contents of which are incorporated by reference in their entirety herein.

This application is related to U.S. patent application Ser. No. 11 590 644 Device Types and Units for a Home Automation Data Transfer System U.S. patent application Ser. No. 11 590 643 Proxy Commands and Devices for a Home Automation Data Transfer System U.S. patent application Ser. No. 11 590 685 Messaging in a Home Automation Data Transfer System and U.S. patent application Ser. No. 11 590 670 Remote Device Management in a Home Automation Data Transfer System and U.S. patent application Ser. No. 11 590 672 Protocol Independent Application Layer for an Automation Network all filed on the same day herewith the contents of which are all incorporated by reference in their entirety herein.

The present invention is related to automation network organization. In particular the present invention is related to updating applications in an automation network.

In developing a series of home automation devices a large part of development may be spent in repetitive tasks to create network interface software. These tasks may include adding and removing nodes from the network testing network connectivity and updating network topology. A number of developers may develop offshoot products based on the home automation network. A large amount of time may be spent in training these developers on the underlying protocol and on these repetitive tasks.

The current home automation network models may place the PC at the center of the home automation system. Users are required to have a PC running all the time to ensure proper operation. Once the PC is removed from the system network and application software become difficult to upgrade in the field.

Further home automation networks have in the past been designed from and engineering point of view and may require large bandwidth to operate. The user interface and system understanding may require a large amount of technical background. Existing product development platforms may require the developer to understand the underlying network protocol or mandate rewrites of software to accommodate new networks on which the applications operate.

Existing software development platforms may not be portable to multiple network protocols. Porting the applications may not be possible if the network were expanded across different protocols. Also interconnecting multiple network protocols requires that a specialized device be made to make each device look like its analog in the other protocol.

A system layer interface is disclosed. The system layer interface may operate between a transport layer and an application layer in a network stack model. The system layer interface provides an abstraction interface to implement the system layer and applications to interface with the network transport layer without requiring the developer to understand or work with the network transport layer functionality directly. By providing a library of commands and or functions for application development related to an underlying network and by storing detailed information about devices in the network this abstraction may simplify the network interface and may enable rapid software development for use with the network. The system layer interface allows access to the underlying network and hardware while still maintaining the abstraction.

A method is disclosed that programs an automation network device in communication with an automation network where the automation network includes an access point coupled with an external network. The method includes receiving application upgrade data at the access point where the application upgrade data includes upgrade data associated with a target automation network device in communication with the automation network. Application upgrade data is transmitted through the home to the target automation network device. A next application upgrade data packet to be transmitted across the automation network is requested from the target automation network device. An application stored in the target automation network device is programmed using an application upgrade set command transmitted to the target automation network device. The disclosed method may allow an efficient upgrade of processors in the target network device without requiring knowledge of the underlying network transport functions.

Other systems methods features and advantages of the invention will be or will become apparent to one with skill in the art upon examination of the following figures and detailed description. It is intended that all such additional systems methods features and advantages be included within this description be within the scope of the invention and be protected by the following claims.

An application layer such as a protocol independent product may reside at the highest level of the network abstraction layers. The application layer may interface directly to and perform common application services for the application processes. The application services may provide semantic conversion between associated application processes. Examples of applications for a home automation network may include user selected room environment set up text messaging GUI s for the network scene scheduling and other GUI based applications a developer may provide for a network such as applications for Z Wave hardware enabled products using a Z Wave enabled ASIC manufactured by Zensys from Copenhagen DK and for Z Wave and protocol independent application layer hardware and or software enabled products manufactured by Intermatic from Spring Grove Ill. U.S. A software interface layer such as the system layer interface resides between the first protocol network core and or the second protocol network core and the application layer in the network abstraction . The system layer interface may provide the library of commands and or functions to allow developers to create applications that may utilize the first protocol network core and or the second protocol network core without having to know the protocols for the first protocol network core and or the second protocol network core . The system layer interface may also provide logic and or libraries to store detailed information and descriptions of devices interfaced to the network underlying the system layer interface which may also allow a developer to create applications without needing to know the network transport layer protocols.

The system layer interface may allow the development of future applications or such as scene setting and status setting in a home automation network firmware upgrades device unit descriptions and or device type descriptions proxy command functions and core libraries or software upgrades such as core upgrades and for the first protocol network core and the second protocol network core respectively. The system layer interface may provide a software development kit utilizing the libraries of commands and or functions to generate these new applications and core functions. The system layer interface may also provide command libraries to implement data transfer through bridging between the first protocol network core and the second protocol network core or any other network cores. The system layer can provide this bridging functionality without user intervention or knowledge.

The system layer interface may be encoded in a computer readable medium such as a floppy disk compact disc CD digital versatile disc DVD or may be stored in non volatile memory such as Flash EPROMs EEPROMs MRAM FRAM hard disk drive holographic memory or other solid state memory. The system layer interface may be loaded into a volatile memory such as DRAM or SRAM for execution. The system layer interface may be encoded for transmission in a propagated signal as a series of instructions. The system layer interface may be encoded as logic either as software for execution by a processor or as logic circuits for executing the code comprising the system layer interface . The system layer interface may interface with or integrate with an embedded processor microprocessor ASIC memory device memory controller and or other semiconductor devices.

The system layer interface may be configured to supersede particular network layer protocols. By providing a high level language to describe underlying network interactions a programmer may then not need to know the protocols of the networks within the network system . The system layer interface provides a protocol independent abstraction interface to implement the application layer. The system layer interface may provide interfaces to the network transport layer without requiring the developer to understand or work with the network transport layer functionality directly. By providing a library of commands and or functions for application development related to an underlying network and by storing detailed information about devices in the network this abstraction may simplify the network interface and may enable rapid software development for use with the network.

The system layer interface may allow access to the underlying network and hardware while still maintaining the abstraction. The system layer interface may allow implementation of advanced feature sets that may utilize the hardware directly. The system layer interface may accelerate device implementation and allow core functionality to be added. Examples of software applications that may be developed with the system layer interface may include human readable device description unit assignment scene definition and activation for home automation systems two way status information system messaging network room organization for a home automation system and firmware upgrades.

The system layer interface may be configured to interface with the network system to allow data transfer within the network system and maintain cohesion between the networks. The network system may comprise a plurality of networks and in communication with each other. The networks and may operate with transport protocols different from each other or they may run the same protocols. For example network may comprise a home automation network such as a Z Wave network network may comprise a Zigbee network network may comprise a TCP IP network and network may include a second Z Wave network. Other examples of networks include Echelon networks WiFi networks Bluetooth networks WiMax networks cellular networks such as Global System for Communications GSM Code Division Multiple Access CDMA Time Division Multiple Access TDMA Advanced Mobile Phone Systems AMPS point to point networks such a Canopy network microwave based networks radio spectrum networks hospital and home healthcare networks such Wireless Medical Telemetry Service WMTS networks and other RF and wired networks.

The networks and may include network nodes in communication with the networks. For examples nodes and may be in communication with network nodes and may be in communication with network node may be in communication with network and node may be in communication with network . The nodes and may be coupled wirelessly or through a wired interfaced with each other. Examples of nodes include home or office automation devices servers routers desktop computers laptop notebook or portable computers personal digital assistants PDAs cellular telephones smart phones mobile electronic devices mainframes network appliances and or network computers or other network devices.

The networks and may each include a plurality of connection modules such as bridges and . The bridges and may provide a connection between each of the networks. The bridges and may comprise one to one connections between the networks or may comprise broadcast nodes. Though the bridges illustrated in show connections between a first network and a second network other connections between the networks and may be possible. The bridges and are configured to transfer data between the networks using commands such as transport layer commands. The bridges and may format convert or encapsulate the data to transmit the data to another network. The system layer interface may be configured to direct a bridge in transmitting data without a programmer knowing the transport protocols associated with the bridge or networks. The bridges and may comprise routers hubs servers broadcast devices or other interface modules.

The system layer interface may include a node map and a bridge table . The node map may store the list of nodes and interfaced to the network system . The system layer interface may use the node map to locate a particular node a set of nodes or other combinations of nodes. The bridge table may be configured to store data related to the bridges and . The bridge table may retain information related to bridge location network protocols transport layer protocols available transmission inputs and outputs for the bridge and other network bridge data. The bridge table may be used by the system layer interface to determine a network interface mapping for the nodes.

The system layer interface may be used to route data between nodes. For example the system layer interface may provide commands and or applications to route data from node to node . The system layer interface may determine locations of node and node retained in the node map . The system layer may then determine a sequence or a combination of bridges that may allow data transfer between node and node . For example based on data retained in the bridge table the system layer interface may be used to route data via bridge to bridge . As another example the system layer interface may route data via bridge to bridge . The specific way the data is transferred through each protocol is determined by that protocol. Other data routing schemes may be possible. The system layer interface provides the commands and or instructions to implement the data transfer including data formatting conversion frequency conversion data encapsulation encryption and or other network transport functions. The abstraction contained in the system layer interface may allow a programmer to develop applications for nodes in the network system without having to know the network protocols of each network. To the programmer the nodes may all appear functionally to be running a same protocol scheme related to the application interface provided by the system layer interface . Using the node table both products developed with the abstraction layer and without it can be utilized in routing messages as each particular network protocol allows.

The node map and the bridge table may comprise a database such as a structured query language SQL database or other relational database an ordered list of data structures a text file or other data file. The node map and the bridge table may also comprise records each record containing fields together with a set of operations for searching sorting recombining and other functions. The node map and the bridge table may be stored in a non volatile memory such as an EPROM EEPROM Flash or other semiconductor and or solid state memory such as bubble memory MRAM FRAM or holographic memory. The node map may also be stored in a volatile memory such as a DRAM or SRAM a removable medium such as a floppy disk CD DVD Syquest Zip a hard disk drive or a magneto optical drive.

The system layer interface may store detailed information describing devices in a network. Examples of such information include whether the device understands the system layer interface protocol what commands each device in the network may accept the battery or power level of each device whether the device supports messaging and if so if scrolling messages are supported and the length of the message supported as well as the status of the outputs of every device in the network. The system layer interface may provide a central location for defining every scene in a home automation network. This may allow a user of the network to edit scenes for devices with limited user interfaces with those that have complicated graphical user interfaces GUI s . The system layer interface may be provided through a protocol independent application layer product network or software system.

In addition to nodes in a network nodes that are not network system aware may be brought into the network system when a network system aware node is added into the network system . In other words even though a node doesn t know about the other networks in the network system the network system knows about the node. This allows any network system aware node in the network control and interface with all the nodes in the network system . The system layer interface may be used to manage the connection and interface of nodes added to the network system . The system layer interface may update the node map and or the bridge table to allow the network system to be made aware of the added node.

The present system may allow for a decentralized home commercial industrial hospital home healthcare or other automation network with a network abstraction layer that allows for rapid product development and the ability to change the underlying network protocol without massive rewrite of software. The present system may also allow for the ability to upgrade network and application firmware using the network and without a PC.

The system layer interface may be configured to interface with different types of networks. One example network for which the system layer interface may be suitable is a home automation network. The system layer interface may be configured to interact with other network examples as well. illustrates a home network environment which may include a number of electrical and electronic appliances such as lights controlled by a network of node devices or slave devices and controllers . The home network environment may include one or more distinct rooms though these rooms may be joined or portioned as desired. The controllers may activate the slave devices by communicating across the network from room to room. Slave devices and controllers may be powered by battery devices such as standard alkaline battery cells rechargeable battery cells like NiCd or Li ion cells or powered by connection to wall outlets.

The network is configured to route commands and signals between different controllers and slave devices in the network. Communication includes wireless such as radio frequency RF microwave infrared or other wireless communication and or wired communications. The controllers are devices that may be in communication with the network and may be activated and manipulated by buttons present on the controller . A user may press the buttons on the controllers to send commands to the slave devices in the network to change a state of a component of the slave device such as a relay or triac. The controller may also be activated in other ways such as by voice. Since the slave device may supply power to the electrical or electronic appliance a change in state of the component of the slave device may in turn change the state of the electrical or electronic appliances.

The system layer interface may provide a library of functions to implement commands. The commands may be used to interface with the underlying network transport layer. The interface may provide commands for a user interface to the hardware of the network and commands to implement network structure. User defined commands may include the implementation of the slave devices described above user interfaces scene activation scene dimming and status. Examples of network structure commands include starting network activity adding or removing devices setting up routing between devices and identifying devices. The system layer interface may also provide functions for passing information from the network to a user such as request functions interpretation function and indicator commands for the devices. The system layer interface may also include links references or pointers to the command libraries. The command libraries may be linked to the system layer interface at compilation during run time or may be integrated with the system layer interface . The command libraries may comprise dynamic link libraries DLLs or static libraries.

A human readable device name may be implemented by the system layer interface . The device name may be a specific instance of a device type and may be changed dynamically. For example the switch which may be located in a home office may be designated with a device name of Home Office Wall Switch. The PIR which may be located at a garage may be designated with a device name of Garage PIR. The device names may be controlled within the network and may be locally updated or maintained. The human readable device descriptions may be associated with a hash table of values so that a value such as a single byte value may identify a device. This value may be transmitted in packets of data between devices such as between a switch in a home automation network and a controller with a display outputting the device description. The human readable device description may provide more information than the information provided by the network transport layer so a user of the network will not need to be familiar with the transport protocol and or identification scheme of the network devices. This is an additional advantage of the abstraction provided by the system layer interface .

The list of strings of human readable text for the descriptions may be stored in each of the devices to be identified. The list of strings may be stored in a non volatile memory such as an EPROM EEPROM Flash or other semiconductor and or solid state memory such as bubble memory MRAM FRAM or holographic memory. The list of strings may also be stored in a volatile memory such as a DRAM or SRAM a removable medium such as a floppy disk CD DVD Syquest Zip a hard disk drive or a magneto optical drive. The memory may be resident in the network or may be remotely located or in communication with the network .

Devices to be included in the network may be programmed with an updated list before installed in the network. If the known devices in the network encounter a device that has an unknown device type the known devices ask the unknown device for the unknown device text description i.e. the human readable description and may add this text description to the known devices stored list of description strings. The device type descriptions may be controlled centrally and one device type ID may correspond to one device type description. Therefore new descriptions may only need to be handled once when encountered by the network.

The system layer interface may also provide a process to implement human readable units. Human readable units may provide an interface for a device status. Units may be similar to device types and may be associated with a hash table comprising single alphanumeric values associated the human readable units. Human readable units may provide enhanced descriptions for device status. A binary switch such as a light switch has a single binary output or device unit of either ON or OFF. A passive infrared sensor PIR sensor may have two binary outputs one to arm or disarm the sensor and a second for a switch. If only two labels are available for the PIR such as ON OFF may be confusing. The system layer interface may provide a process to add additional status labels for enhanced description of the device status. With the PIR the interface may provide device units or labels such as ON OFF for the switch and ACTIVE DISABLED for the sensor. The user may then be able to distinguish the different states of the PIR.

A further example of a device that may use human readable units provided by the system layer interface is a fan controller. If the fan controller has three speeds such as low medium and high the device status may be encoded with a string providing information about these states. The string may be organized so that the first character of the string may specify the maximum value of the device status for a particular level such as 0 33 as the range for low . The next character may describe the status such as low medium or high . The strings may be null terminated. In the fan controller example any first character reading between 0 to 33 corresponds to a low status a reading between 34 to 66 corresponds to a medium status and a reading between 67 to 99 may correspond to a high status. The human readable units for a device status may be parsed into any number of states i.e. 5 levels 50 levels etc . With the system layer interface providing human readable units for the devices the network may not need to develop new protocols for each of these device status levels.

The network identifies network devices in communication with the network at act . The network may query the network devices in serial or in parallel. In some exemplary embodiments the network may receive a transmission from each of the network devices indicating their presence. The network determines at act if an updated list of human readable device types or units is found in one or more of the network devices identified in act . The network may compare the updated list from the list determined at act .

If the network determines that there is not an updated list of device types or units the network determines at act if there are unknown device types in the network devices identified. When the network determines there are unknown device types the network queries the unknown new device type from a network device at act . The network may determine the string properties such as length whether the string is text or alphanumeric and whether it is null terminated. The network adds the new device type to the list of human readable device types at act .

If the network determines at act that there is an updated list of human readable device types the network updates the list of human readable device types stored in the hash table at act . The network may replace the original hash table with an updated hash table or the network may add entries or update entries in the hash table. The network may transmit the updated list to the network devices or to other network nodes coupled to the network . The network may back up or perform error checking on the updated hash table to ensure data consistency.

After the list of human readable device types is updated or when the network determines that there are no unknown device types in the network devices or after the new device type has been added to the list of device types the network accesses the hash table and assigns human readable device types and names to the network devices at act . The network may perform other acts in addition to the process described in such as data transport scene setting or other network operations.

The system layer interface may provide a process for categorizing network devices into logical groupings. A network that contains a series of devices may be organized as appropriate based on the user s desired structuring. For example an office may comprise a series of devices such as personal computers printers scanners copiers fax machines laptops wireless devices and other electronic devices. An office manager may desire to organize the electronic office devices into functional groups such as those devices used by the accounting marketing and legal department. As another example a home automation network may comprise devices controllers and servers associated with particular rooms in a house or property environment. A user may want to group the devices based on rooms or buildings if multiple buildings are present on the property. The interface may provide a method to implement a room organization. Like device types and units rooms may be based on a hash table. The interface may generate a hash table associating an identifier such as one or more alphanumeric characters with a logical grouping such as a room office area or functional unit. The interface may then assign selected devices the logical grouping identifier within the hash table. Each network may have its own list of logical groupings created through a GUI or other user interface.

The system layer interface may implement proxy commands and proxy devices. A proxy device is a device designated by the system layer interface to accept commands and or messages to be relayed or transmitted through another medium to another device. The medium may run a protocol different from the protocol that the proxy device or other network devices may be running. In a home automation network the use of proxy commands by the system layer interface may enable battery powered devices not actively communicating with the network to receive application layer commands through a listening device designated as a proxy by the interface. For example a home automation network may provide a handheld remote that may be placed in a base charger.

The handheld may request through the serial connection between the handheld remote and the base charger that the base charger be designated a proxy device for the handheld remote. The base charger informs the system layer interface through a data packet that the base charger is now the proxy device for that handheld remote. Information and or commands that the network may transmit to the handheld remote may be sent to the base charger which then passes the commands through the serial connection to the handheld remote. This allows a handheld which is not actively in network to conserve battery and so may be seen as static device and updated in real time.

The system layer interface may facilitate interaction between different protocols even if the protocols operate on different media.

The system layer interface provides proxy commands to implement proxy device organization. Proxy Commands may be used to pass commands from one device to another through an alternate media like a serial port. A Proxy Request Command packet illustrated below may be used to send a request for any destinations for whom the recipient is a proxy.

The network identifies network devices in communication with the network at act . The network may query the network devices in serial or in parallel. In some exemplary embodiments the network may receive a transmission from each of the network devices indicating their presence.

The network determines if a proxy device is designated by a network device at act . For example a handheld remote associated with a battery charger base may designate the battery charger to be the proxy device associated with the handheld remote. The handheld remote may communicate with the battery charger using a serial connection. The handheld may request through the serial connection between the handheld remote and the base charger that the base charger be designated a proxy device for the handheld remote. The base charger informs the system layer interface through a data packet that the base charger is now the proxy device for that handheld remote.

If the network determines that there are no proxy devices in the network the network may route data packets such as commands or messages to a network device directly at act . If in contrast the network determines that a proxy device has been designated the network may transmit a proxy get command to the destination network device to which data packets are to be sent at act . The network determines if a data packet is received from the proxy device at act indicating that the proxy device is ready to accept commands or messages on behalf of the associated network device. If the data packet is not received the network may wait for the data packet at act . If the data packet is received from the proxy device the network routes commands and or messages to the network device via the proxy device at act . Using the example above information and or commands that the network may transmit to the handheld remote may be sent to the base charger which then passes the commands through the serial connection to the handheld remote. Other network devices may be used as well as designated as proxy devices. The network device may communicate with the proxy device through a wired or wireless connection. Examples of wired connections include coaxial RCA twisted pair USB Firewire and other wired connections. Examples of wireless connections include Bluetooth WiFi Zigbee cellular infrared IrDa WiMax microwave and satellite transmissions.

The system layer interface may be used to implement methods for transferring large amounts of data around an underlying network. The method utilizes the transport layer of the base underlying network. The method may be used to transmit GUI updates application updates application enhancements network updates or any other large information packets required for transmission between devices. These updates may originate within the underlying network or from a source external to the underlying network. Updates may be distributed through the Internet compact disc CD releases wired or wireless interfaces to the network or through devices installed in the network that are configured to update other devices in the network.

The system layer interface may be utilized to generate installer software code equipped with a current copy of software to be utilized by or on the network. After installation of the network and or network devices the installer software code may update devices on the network to ensure the devices have the latest software. Existing device GUI s may be updated when new software is provided with new devices installed in the network. Application programmers may utilize the system layer interface to develop applications that interface or function in or on the network. These applications may be distributed through the Internet through a wired or wireless interface to the network or as software or firmware installed on devices that may interface with the network.

The system layer interface may provide commands to implement the upgrade process. A command may be sent along with a data transfer command. Examples of commands include request and data commands. A request command may be used to request the next packet to be sent across the network. A data command may be used to program the firmware or software of a target device. Examples of data transfer commands include firmware upgrade commands software upgrade commands and bulk data commands. These commands may specify what type of data is to be processed.

The commands for data transfer may be configured as packets with a number of byte length identifying fields. Examples of identifying fields may include the data transfer command type the identification of the device to be upgraded identifier fields for the next packets to be processed such as an index of the packet requested and used for addressing error checking fields comprising data used for error checking data type fields used when bulk data is transferred in the network and payload fields comprising the firmware software or bulk data to be programmed or transferred .

The device may request a next packet to be transmitted across the network using a request command. The request command may be transmitted initially to start the application upgrade process. The request command may be sent after the initial packets of data related to the application upgrade data are received at the device.

The transmission may be accomplished by the transport layer functions provided by the underlying network . The system layer interface may also be used to coordinate or implement functions for the transmission. The processed data is received by the device intended for upgrade at act . The intended device may then store the received data at act in a memory such as a non volatile flash memory EPROM EEPROM or other semiconductor or solid state memory. The device may then verify the received data such as by performing a checksum or other integrity check on the data at act . The device may process the application upgrade data at act . A data command may be used to program the firmware or software of a target device. The data command may be transmitted along with the application upgrade data or may be separately transmitted.

The device may reprogram or upgrade its firmware or other applications based on the received firmware upgrade data. Auxiliary processors in the device or auxiliary processors interfaced to devices within the network may also be reprogrammed or upgraded.

The system layer interface may be utilized to develop messaging applications. Messaging may be implemented as process for transmitting packets of data comprising human understandable information e.g. audio speech tactile from one node in the network to another node in the network. The packets of data include postable user readable data. The messages may include character or alphanumeric strings. Examples of messages include the states of devices connected to the network scene information from a home automation network alarms alerts and scheduled events that may be reported. A device in the network that supports messaging may pass a message to a message output device such as an LCD equipped switch controller monitor or remote for example. Other output devices include a speaker a Braille terminal haptic interfaces force feedback interfaces text message devices or other human understandable output devices.

The network identifies network devices in communication with the network at act . The network may query the network devices in serial or in parallel. In some exemplary embodiments the network may receive a transmission from each of the network devices indicating their presence. The network determines at act whether the message display device has a non zero messaging display size. If the message display device does not have non zero display size the network does not designate the device as an output display device that may be used by the network . The message display device may be assigned by the network when a device is included or installed in the network and when the display device has a non zero messaging display size. The network determines a new message display device messaging revision level of the message display device at act . When a message display device is added to the network the network compares the new message display device messaging revision level with the most current messaging revision level stored in the network at act . If the new message display device messaging revision level is not current than the existing network stored revision level the network maintains the current output display device at act . If the new message display device messaging revision level is more current than the existing network stored revision level the new message display device is designated as the output for network system messages to be displayed at act and the currently designated messaging display device is de designated as the messaging display device. The network routes network system messages to be displayed to the output display device at act .

The network determines at act if the message to be displayed is too long for the message display device to display such as if the string length of the network system message is longer than the display size of the output display device. If the network system message is too long the message may be scrolled at act . Otherwise the output display device may display the network system message without scrolling at act . If the message is too long for device s memory the message may be truncated and an ellipsis . . . may be added to the end of the message.

If messaging is not implemented on an existing network the system layer interface may provide a process for transmitting and routing messages in a network. The interface may provide commands and or functions for nodes within the network to request a message from another node to send a message from one node to another node within the network and or to interpret the message received at a node. The interface may provide libraries of commands and or functions to establish the structure of the messages such as the length supported and whether the messages may scroll. The application programmer may not need to develop a new interface with or within the underlying network to develop a messaging application for the network. The system layer interface abstraction removes the need to accommodate for the network maintenance and transport protocol and may allow a network independent application development environment.

The system layer interface may provide a method for updating a remote device in a network as illustrated in . The network may include a network such as described in U.S. patent application Ser. No. 11 227 988 System for Home Automation filed Sep. 15 2005 which is incorporated herein by reference. The remote device may be a handheld remote for a home automation network as depicted in . The remote device may also include other portable or remote devices that are in communication with a network such as portable digital assistants PDA s cellular phones laptops portable music or video players radios and or other entertainment devices. The method may query devices in the network to determine if there are devices that have not communicated their status to the network recently at act . This act may accomplished by a status server in the home automation network and the devices may be remote controllers communicating with the home automation network. If the method determines that a device has not communicated its status recently the network will designate the non responsive device as a lost device at act . The method may then determine at act if a new remote device has been added to the network. If the method determines that a new device has been added to the network the method will determine at act if there are lost devices in the network. If there are lost devices the method may query the scene server for lost device scene information at act and may update at act the new device with the lost device s scene information from the network scene server. The lost device may not be removed from the network. It may remain designated as a lost device. The lost device may be re integrated with the network if the lost device is found again or resumes communication with the network. If there are no lost devices or after a lost device s scene information has been copied to the new device the network may prepare to process the next instruction at act .

Like the methods shown above the sequence diagrams may be encoded in a signal bearing medium a computer readable medium such as a memory programmed within a device such as one or more integrated circuits or processed by a controller or a computer. If the methods are performed by software the software may reside in a memory resident to or interfaced to the network a communication interface or any other type of non volatile or volatile memory interfaced or resident to the network. The memory may include an ordered listing of executable instructions for implementing logical functions. A logical function may be implemented through digital circuitry through source code through analog circuitry or through an analog source such as through an analog electrical audio or video signal. The software may be embodied in any computer readable or signal bearing medium such as a home automation network carrier wave for use by or in connection with an instruction executable system apparatus or device. Such a system may include a computer based system a processor containing system or another system that may selectively fetch instructions from an instruction executable system apparatus or device that may also execute instructions.

A computer readable medium machine readable medium computer data signal propagated signal medium and or signal bearing medium may comprise any means that contains stores communicates propagates or transports software for use by or in connection with an instruction executable system apparatus or device. The machine readable medium may selectively be but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. A non exhaustive list of examples of a machine readable medium would include an electrical connection electronic having one or more wires a portable magnetic or optical disk a volatile memory such as a Random Access Memory RAM electronic a Read Only Memory ROM electronic an Erasable Programmable Read Only Memory EPROM or Flash memory electronic or an optical fiber optical . A machine readable medium may also include a tangible medium upon which software is printed as the software may be electronically stored as an image or in another format e.g. through an optical scan then compiled and or interpreted or otherwise processed. The processed medium may then be stored in a computer and or machine memory.

While various embodiments of the invention have been described it will be apparent to those of ordinary skill in the art that many more embodiments and implementations are possible within the scope of the invention. Accordingly the invention is not to be restricted except in light of the attached claims and their equivalents.

