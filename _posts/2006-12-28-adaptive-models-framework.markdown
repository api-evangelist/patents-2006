---

title: Adaptive models framework
abstract: A system for extending a business object used in a user interface. The system includes a service layer comprising the business object. The system also includes a models framework comprising a meta model including business data of the business object, wherein the meta model is extended for use in the user interface. The system further includes a processing engine for generating the user interface, wherein the processing engine provides a platform for extending the meta model for use in the user interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07702650&OS=07702650&RS=07702650
owner: SAP AG
number: 07702650
owner_city: Walldorf
owner_country: DE
publication_date: 20061228
---
The present invention relates generally to an enterprise application. More particularly the present invention relates to an enterprise application having an adaptive models framework.

There is and will continue to be advances and changes in how enterprises conduct business. Whether these advances and changes occur through growing competition and globalization mergers and acquisitions or revamping of business models the key for success will often depend on how quickly the enterprise s information technology IT organization can adapt to evolving business needs. Therefore a major challenge to these enterprises is how they handle change.

For organizations to enable business agility they must ensure that enterprise applications are not only high performance business engines driving efficiencies but also that they become flexible building blocks of future business systems. A recent promising solution has risen in the form of services. A service such as a Web service or program may represent a self contained self describing piece of application functionality that can be found and accessed by other applications. A service may be self contained because the application using the service does not have to depend on anything other than the service itself and may be self describing because all the information on how to use the service can be obtained from the service itself. The descriptions may be centrally stored and accessible through standard mechanisms.

Instead of requiring programmers to establish and maintain links between applications services may be loosely coupled making connections simpler and more flexible and allowing application architects to more easily find and understand services offered by other cooperative applications. However a problem that exists with services is that they are often designed to expose functionality of individual applications and thus may be too limited to be efficient building blocks for enterprise wide business processes. A solution to this shortfall has been the migration to a Service Oriented Architecture SOA . The SOA may use an open architecture middleware which builds on the benefits of services. An example of an SOA can be found in the Enterprise Services Framework ESF which is commercially available from SAP AG Walldorf Germany. The term SOA may also be used to refer to distributed objects architecture such as CORBA Common Object Request Broker Architecture and DCOM Distributed Component Object Model .

An SOA may enable the abstraction of business objects modeled as services also referred to as enterprise services from actual applications. Aggregating services into business level enterprise services may provide more meaningful building blocks for the task of automating enterprise scale business scenarios. Enterprise services allow IT organizations to efficiently develop composite applications e.g. applications that compose functionality and information from existing systems to support new business processes or scenarios.

An SOA may also enable the use of an enterprise services repository. The enterprise services repository may store relevant preexisting enterprise services and may make them available for use by for example selected partners and customers. By using the enterprise services repository these selected partners and customers can use the preexisting enterprise services to facilitate the implementation of new services and corresponding business objects. The term business object BO represents a physical or logical object that may be significant to a business such as a purchase order. An object generally refers to a software bundle of variables e.g. data and related methods. For example in object oriented programming an object may be a concrete realization instance of a class that consists of data and the operations associated with that data. An example of a business object is a purchase order business object having data and related methods. When a purchase order business object is instantiated a user may interact with the purchase order by for example providing data for fields in the purchase order.

As well known in the art a business object may be extended to define the object more narrowly and thus support additional features that may have business significance. For example an employee object which is an instantiation of an employee class may consist of basic data that may be common to all employees and the operations associated with that data. The basic data may include an employee ID a base salary a start date and so forth. In order to support a subclass of an employee such as a manager the employee object may be extended to introduce a more narrowly defined business object such as a manager object. By extending the employee object the manager object may inherit data that may be common to all employees such as an employee ID a base salary a start date and so forth. Moreover additional data that may be pertaining only to a manager may be added to the manager object. Additional operations associated with the additional data may also be introduced into the manager object. Similarly the manager object may further be extended to introduce an even more narrowly defined business object such as an executive manager object. The flexibility of object oriented programming based on object extension and inheritance may be essential in capturing real world scenarios.

Enterprise services based on business objects however face limitations when the services are used in user interface scenarios. In particular user interface related features such as success or error messages copy or paste and save or load draft have no business significance. User interface scenarios may thus not be conveniently represented as or supported by enterprise services without impacting the design of the underlying business objects.

Moreover because business objects are physical or logical objects that may be significant to a business business objects are typically normalized. Thus information needed for a user interface scenario may need to be fetched from many different business objects. Also business objects may not be flexible enough to be used in one or more user interface scenarios. For example although business objects may be extended to support additional functionality that has business significance they may not be extended conveniently to support additional functionality for a particular user interface. The extending business objects may be limited to define real world scenarios.

In the view of the foregoing there is a need for systems and methods that allow enterprise services and business objects to be more conveniently used in user interface scenarios. Further there is a need for systems and methods that allow enterprise services and business objects to be extended in an adaptive way.

Consistent with embodiments of the invention a system for extending a business object used in a user interface is provided. The system includes a service layer comprising the business object. The system also includes a models framework comprising a meta model including business data of the business object wherein the meta model is extended for use in the user interface. The system further includes an engine for generating the user interface wherein the pattern engine provides a platform for extending the meta model.

In another embodiment a method for extending a business object used in a user interface is provided. The method includes implementing a models framework comprising a meta model including business data of the business object wherein the meta model is extended for use in the user interface. The method also includes implementing a platform for extending the meta model for use in the user interface. The method further includes generating the user interface based on the meta model.

In yet another embodiment a computer readable medium including instructions to configure a computer to implement a method for extending a business object used in a user interface is provided. The computer readable medium includes instructions for implementing a models framework comprising a meta model including business data of the business object wherein the meta model is extended for use in the user interface. The computer readable medium also includes instructions for implementing a platform for extending the meta model for use in the user interface. The computer readable medium further includes instructions for generating the user interface based on the meta model.

It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and should not be considered restrictive of the scope of the invention as claimed. Further features and or variations may be provided in addition to those set forth herein. For example embodiments consistent with the present invention may be directed to various combinations and subcombinations of the features described in the following detailed description.

Reference will now be made in detail to the invention examples of which are illustrated in the accompanying drawings. Implementations set forth in the following description do not represent all implementations consistent with the claimed invention. Instead they are merely some examples consistent with certain aspects related to the invention. Wherever possible the same reference numbers will be used throughout the drawings to refer to the same or like parts.

Pattern engine may include one or more processors such as computers to interface with other computers such as end user adaptive models framework and server system . In one embodiment pattern engine may be an Abap Pattern Engine which is commercially available from SAP AG Walldorf Germany and may run on an Abap server which is also commercially available from SAP AG Walldorf Germany. Pattern engine may connect to end user and server system through network connections and respectively. Pattern engine may generate a user interface based on user interface design data and present user interface to end user . As described in more detail below user interface of pattern engine may provide an interface allowing end user to interact with server system .

User interface data may be based on meta entities of adaptive models framework as described in more detail below with respect to . User interface data may include composition and configuration data which are described in more detail below with respect to . Adaptive models framework may be an architectural layer between pattern engine and enterprise services or business objects of server system and thus may not represent a physical machine. To this end meta entities of adaptive models framework may assist enterprise services and business objects to be extended adaptively and used more conveniently in creation of user interface design data as described in more detailed with respect to .

Server system may include one or more processors such as computers to interface with other computers such as pattern engine . Server system may be implemented as or as part of an SOA. In one embodiment server system may be implemented as an Enterprise Services Framework ESF . However while system may be described as implemented in an ESF systems consistent with the invention may be implemented in other types of environments. Server system may run on a server such as an Abap server supporting an SOA. As shown in server system may further include a service manager and an enterprise services repository that may contain enterprise services and business objects . User interface may call service manager for a service request. Service manager may use enterprise services based on business objects in response to the service request received from user interface .

Enterprise services repository may be implemented as a storage device for storing information associated with enterprise services and business object . Enterprise services may include one or more enterprise services which as described above may represent a self contained self describing piece of application functionality that can be found and accessed by other applications. Enterprise services may be based on one or more business objects .

In one embodiment enterprise services repository may also store information associated with meta entities of adaptive models framework in a base form which as known in the art may be a form before the meta entities may have been used to support enterprise services and business objects . After the meta entities of adaptive models framework may have been used to extend enterprise services and business objects for user interface scenarios the meta entities of adaptive models framework may be stored as part of user interface design data in a runtime repository of pattern engine . The meta entities of adaptive models framework are described in more detail below with respect to .

Network connections and may be any type of communications mechanism and may include alone or in any suitable combination a telephony based network a local area network LAN a wide area network WAN a dedicated Intranet wireless LAN the Internet an Intranet a wireless network a bus or any other communication mechanisms. Further any suitable combination of wired and or wireless components and systems may provide network connections and . Moreover network connections and may be embodied using bidirectional unidirectional or dedicated communication links. Network connections and may also implement standard transmission protocols such as Transmission Control Protocol Internet Protocol TCP IP Hyper Text Transfer Protocol HTTP Simple Object Access Protocol SOAP Remote Procedure Calls RPC or other protocols.

In addition models and may be meta models. A meta model may be a type of a meta data model a meta process model a transformation model or any combination of these models. A meta data model may include additional information about the data that the model may contain a meta process model may include additional information about the processes or methods that the model may support and a transformation model may include additional information about the transformations of data that the model may support. In one exemplary embodiment models and may be meta data models and may contain additional information about the business data that models and may contain which may be reduced content of the business data of business objects and respectively. With this approach models and may be used to express additional semantics of already existing business data of business objects and without impacting the design of business objects and .

As shown in model may include model nodes and . Model nodes and may provide access to the business data of model . For example model nodes and may be sales item model nodes that may provide access to sales item data of model . Similarly model may include model nodes and and model nodes and may provide access to the business data of model . For example model nodes and may be product item model nodes that may provide access to product item data of model . Model nodes and may include one or more data record. For example model node may have a data record and model node may have data records and . Similarly model node may have data records and and model node may have a data record . Because these model nodes may be part of models and which may be meta models model nodes and may contain additional information about the business data. For example in one exemplary embodiment each data record in these model nodes may have a unique key identifier that identifies the business data. Using the unique key identifier in these data records the business data may be retrieved from models and directly without a query. In addition navigation between model nodes may be enabled with the additional information about the business data. For example an association which may be an meta entity that may contain additional information about business association may enable navigation between model nodes and with support of the unique key identifier of the data records.

In another exemplary embodiment the unique key identifier of these data records may be used to map data records between two distinct models and . For example data record may be identified as RECORD001 and data record may be identified as RECORD005. Using the key identifiers of data records and two data records may be mapped or linked. For example any update to data record may update data record . Such data mapping information may be stored within meta models and as meta data.

In addition data binding between a field of user interface and a piece of the business data may be enabled. For example user interface may be designed so that a specific piece of the business data from business may be displayed in a specific field of user interface . Any change to the piece of the business data may be reflected in the field of user interface . Similarly any change made to the field of user interface may require an update to the piece of the business data. To this end model may include model nodes and to include the business data of business object with any information related to the data binding between the business data and user interface . Such data binding information may be stored as meta data within model .

Moreover in yet another exemplary embodiment the business data of business object may need to be transformed to fit for user interface . Any additional information to support such transformation may be stored as meta data within model . For example business object may include a weight of a product in pounds. Model may include model nodes and to include the business data of business object with any information needed to convert the weight of product from pounds to kilograms for user interface .

With this approach model driven data binding data mapping and data transformation which may not typically be available to business objects and may be provided by the meta entities of adaptive models framework without impacting the underlying design of business objects and . Instead of changing the underlying design of the business objects and the business data of the business objects and may be included in models and with any additional information as meta data to give effects of model drive data binding data mapping and data transformation of business objects and .

Model nodes may also be associated with other model nodes. For example as explained above association depicts that model node may be associated with model node . Association may correspond to business object BO association . Association of adaptive models framework however may be a meta entity and may include additional information about BO association . Association may have information about a source model node and a target model node. For example association may have model node as a source model node and model node as a target model node. In addition association may have an association cardinality which may describe the relationship between model nodes that participate in association . An associate cardinality may be used to enforce a real world business rule. For example the association cardinality of association may enforce a one to one relationship between model nodes and and may be used to enforce a real world business rule for user interface such as every sale item has exactly one product. 

As shown in adaptive model framework may also include an action . Action may be a specific user interface operation that may be performed on model node . Action may be a meta process model and may contain additional information about the specific user operation. For example action may include an action cardinality to define a relationship. Action may include a model node to return the result from the specific user operation. Such model node may be a result model node. Action may be one of several action types. For example action may be a type of a standard action or a type of a query action.

Similarly is a block diagram illustrating an exemplary query operation that may not require any input parameters. Query operation may be any operation that may involve retrieving business data from models such as models and . In one embodiment query operation may be performed by a UI operation and a query action . UI operation may execute the main query of query operation which may return retrieved data. Query action may be a meta entity of adaptive models framework and may be allowed to include additional information to support UI operation . For example standard action may take the retrieved data from the main query and return it as a result model node .

A solution manager may design a user interface with a UI wizard . UI wizard may be a standalone application. In one embodiment UI Wizard may download enterprise services repository ESR meta data from enterprise services repository at a dedicated time. ESR meta data may include meta entities of adaptive models framework in a base form which as described above with respect to may be a form before the meta entities may have been used to support enterprise services and business objects . Enterprise services repository may be located anywhere or distributed among multiple locations. After the download no further connection to enterprise services repository may be necessary.

In another embodiment solution manager may use UI wizard to create his own UI views of business objects and without downloading ESR meta data . Solution manager may then use the UI data models to design a complete user interface. ESR meta data which may include meta entities of adaptive framework may then be downloaded for the purpose of mapping the UI views towards their corresponding business objects and . Alternatively without downloading ESR meta data the mapping of the UI views towards their corresponding business objects and may take place within pattern engine after solution manager may provide user interface data from the design to pattern engine .

UI wizard may also include components definitions . Components definitions may be meta data containing additional information about user interface components and may also include a preview tool to get WYSIWYG support as well known in the art in UI wizard .

After solution manager may complete user interface design in UI wizard solution manager may provide user interface data from the design to pattern engine . Configuration mediator may then extract models and component definitions from the uploaded user interface data. Models may include meta entities such as models and action and association of adaptive models framework . As explained in detail above with respect to models may include or be allowed to include additional information about the business data of business objects and . As explained in detail above with respect to models may include or be allowed to include additional information to support business operations. To this end models which may be composed of meta entities of adaptive models framework may be enhanced in an adaptive way by applying model extension logic . Models may be extended to include additional information about specific business data and the additional information may then be used to support additional user interface functionality. With additional information available beside the core business data models may behave in a predetermined way when a specific event may occur. With this approach without directly extending business objects and models which may include the business data of business objects and may be extended to give effects of extending business object and .

In one embodiment model extension logic may be provided in predefined breakout scenarios and models may be extended to provide additional user interface functionality based on the predefined breakout scenarios. In addition because meta entities of adaptive models framework may be meta data models transformation models or a combination of both types as explained above in detail with respect to model driven data binding data mapping and data transformation may also be extended or adapted by using model extension logic . Moreover because meta entities of adaptive models framework may be meta data models meta process model or a combination of both types as explained above in detail with respect to business operations such as business operations and may be extended or adapted by using model extension logic .

In another embodiment model extension logic may be provided as custom extension logics and models may be extended to provide additional user interface functionality based on custom extension logics which may include logics that may not be in predefined breakout scenarios. For example semantic messages change notifications and dynamic properties of business objects and may be overlaid by extending or adapting models and of adaptive models framework by applying custom extension logics. Custom extension logics may be provided by any developers as the developers may see them necessary to provide any custom functionality in compliance with architectural contract definitions. Similarly user interface control and behavior logics in components definitions may be enhanced in adaptive way by applying UI extension logic . For example UI extension logic may add company Z s logo automatically to a user interface when the user interface may be designed and marked as a user interface for the company Z. UI extension logic may be also provided in predefined breakout scenario and or custom extension logics.

After applying model extension logic to models and applying UI extension logic to components definitions models and components definitions may be compiled by compiler . Configuration and composition may then be generated by generator and stored in runtime repository . Configuration and composition may collectively represent user interface design data . Configuration may include meta data that may define user interface components such as physical layout and fields. Composition may include meta data that may describe user interface control and behaviors such as guided activities.

Pattern components may use adaptation runtime and generic client proxy GCP to access business objects in enterprise services repository . Configuration components may be generated at runtime by pattern engine runtime based on configuration and composition . Pattern engine runtime may be a Web Dynpro Runtime which is commercially available from SAP AG Walldorf Germany. End user may use a browser to access user interface presented by pattern engine runtime . Browser may include a smart client and an internet browser such as Internet Explore from Microsoft and Firefox from Mozilla.

One of ordinary skill in the art will recognize that while illustrates the above stages in a particular order the order in which the stages are carried out is irrelevant. Systems consistent with the invention may carry out the stages in any order without departing from the scope of the present disclosure.

Other embodiments of the invention will be apparent to those skilled in the art from consideration of the specification and practice of the invention disclosed herein. It is intended that the specification and examples be considered as exemplary only with a true scope and spirit of the invention being indicated by the following claims.

