---

title: Methods and apparatus for modifying a backup data stream including a set of validation bytes for each data block to be provided to a fixed position delta reduction backup application
abstract: Methods and apparatus for modifying a data stream of backup data to be provided to a fixed position delta reduction backup method are disclosed. When the data stream is received, at least a portion of the data stream is parsed into a plurality of data blocks and a plurality of sets of validation bytes, wherein each of the plurality of data blocks corresponds to one of the plurality of sets of validation bytes. One or more modified data streams are then generated such that the plurality of data blocks are separate from the plurality of sets of validation bytes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07676509&OS=07676509&RS=07676509
owner: i365 Inc.
number: 07676509
owner_city: Santa Clara
owner_country: US
publication_date: 20060201
---
The present invention relates to modifying a backup data stream to be processed by a fixed position delta reduction backup process. More particularly the present invention relates to modifying a backup data stream to be processed by a fixed position delta reduction backup method where the backup data stream includes a set of validation bytes for each data block.

In order to backup data data backups are often performed via what is commonly referred to as a backup application. During a data backup the backup application sends the data to be stored either to a local storage medium or via a network interface for remote transmission. The amount of data that is stored by the backup application varies with the method implemented by the backup application. For instance some backup applications backup all data in the specified directory database or file while other applications attempt to increase the efficiency of the backup process by storing only the data that has been modified since the last backup. One commonly used method is the fixed position delta reduction method which determines which fixed position segments of data have been modified since the last backup and stores the data reflecting those changes. In other words the fixed position delta reduction method determines which segments of data have been modified by comparing one segment of data at a fixed position in a file or data stream received during a current backup with the segment of data previously at that same fixed position in the file or data stream during the last backup for that particular file.

The process via which a backup application implementing a fixed position delta reduction method executes and the effectiveness of that process varies with the format in which data is stored. Specifically data associated with a particular file or database may be retrieved in the form of separate physical organized streams or in a single stream including a plurality of data segments i.e. blocks . Unfortunately there are a number of problems that are introduced into a backup application implementing a fixed position delta reduction backup method when data is retrieved from a system providing a backup data stream including a plurality of data blocks where each of the data blocks has an associated set of validation bytes.

In order to illustrate the effectiveness of a fixed position delta reduction backup application for a system implementing a backup data stream including a plurality of data blocks each having an associated set of validation bytes the operation of the fixed position delta reduction backup application will be described with reference to . is a diagram illustrating an exemplary data stream including a plurality of blocks of data. As shown in backup data is typically sent to the backup application as a data stream. In this example a database or Application Programming Interface API transmits the data stream to a fixed position delta reduction backup application for storing to a storage medium . As shown the data stream includes data blocks and where each of the data blocks has an associated set of validation bytes.

When a data stream is received via an application implemented by an IBM iSeries platform the data stream includes a set of validation bytes for each block of data. More particularly the set of validation bytes includes a Cyclic Redundancy Check CRC value. Since each set of validation bytes generated by an IBM iSeries platform also includes an unknown seeding component the set of validation bytes associated with each data block will change with each request to the API. As a result the validation bytes will appear to be changed data to the fixed position delta reduction backup application regardless of whether the corresponding data block has been modified.

As shown in each set of validation bytes in the data stream includes an unknown seed component. More particularly the set of validation bytes for the data blocks and of the data stream includes a CRC that is calculated using an unknown seed seed that changes from one data backup to the next data backup. When a second request is submitted to the API a second data stream is received which again includes a set of validation bytes for each of data blocks and . Each set of validation bytes in the second data stream includes a CRC that is calculated using an unknown seed seed that changes from one data backup to the next data backup. Thus the CRC and therefore the set of validation bytes associated with a particular data block will differ from one backup session to the next regardless of whether the contents of the data block have changed. As a result when the set of validation bytes associated with each data block in the modified data stream is compared to the corresponding set of validation bytes of the original data stream represented by corresponding arrows the sets of validation bytes appear to have been modified or to be new data. As set forth above the fixed position delta reduction backup application monitors segments of data for changes. Since each segment of the data stream being backed up typically includes both a data block and a set of validation bytes and possibly other data block s and associated set s of validation bytes the detection in the change of a set of validation bytes typically requires that the data blocks in that segment also be stored.

In this example the set of validation bytes associated with blocks and of the modified data stream are compared to the corresponding set of validation bytes associated with data blocks and in the original data stream respectively. Since the unknown seed component used to generate the CRC of each set of validation bytes of the data stream differs from that of each set of validation bytes of the data stream the sets of validation bytes appear to have changed. The sets of validation bytes therefore appear to the backup application to be modified data resulting in the storing of the segment s of the data stream including the validation bytes and the corresponding data blocks and . Thus for data streams including a set of validation bytes associated with each of a plurality of data blocks each of the data blocks may be perceived as new or modified data upon a determination that the associated set of validation bytes in the same segment of the data stream has changed. As a result the detection of this new data requires that all of the new data be written to a local storage medium or transmitted via a network interface for storing to a remote storage medium in order to perform a complete backup. Accordingly this new data is stored unnecessarily resulting in an inefficient processing of backup data provided to the fixed position delta reduction backup application.

The inefficiencies introduced into the fixed position delta reduction backup process for systems implementing a backup data stream including a set of validation bytes associated with each data block may go unnoticed for a single file that has been edited resulting in the storing or re transmission of a larger portion of the file than necessary. However for a database application backing up a large number of files in the database the amount of data that is stored or re transmitted by a fixed position delta reduction backup application could be significant. As a result these undesirable characteristics could have a significant impact on the time in which a fixed position delta reduction backup application completes for a single data backup session in a system implementing data transmitted in the form of a stream including a plurality of data blocks each having an associated set of validation bytes. Since many common database programs such as that implemented on an IBM iSeries provide data during data backup in the form of a stream including a set of validation bytes for each data block where the set of validation bytes changes with each data backup this is particularly problematic.

A number of fixed position delta reduction methods have been developed for use in backup applications. Those fixed position delta reduction methods that have been developed for use with systems implementing fixed length data blocks include those described in U.S. Pat. No. 5 990 810 entitled Method for partitioning a block of data into subblocks and for storing and communicating such subblocks issued Nov. 23 1999 to Ross Williams and in U.S. Pat. No. 5 745 906 entitled Method and apparatus for merging delta streams to reconstruct a computer file issued Apr. 28 1998 to Mark Squibb both of which are incorporated herein by reference. However none of the existing methods are effective in reducing the inefficiencies resulting from the characteristics set forth above.

In view of the above it would be beneficial if the inefficiencies introduced into a fixed position delta reduction backup process as a result of the generation of a backup data stream including a set of validation bytes for each data block could be eliminated.

Methods and apparatus for modifying a data stream of backup data to be provided to a fixed position delta reduction backup method are disclosed. This is accomplished in part by modifying a stream of backup data prior to processing the backup data stream via a fixed position delta reduction backup method. By modifying the stream of backup data the amount of data that is detected by the fixed position delta reduction backup method as new or changed is minimized. Accordingly the amount of data that is stored by the fixed position delta reduction backup method to complete a data backup is substantially reduced.

In the following description the disclosed embodiments are described with reference to a fixed position delta reduction backup application. More specifically a backup data stream is modified prior to providing one or more modified backup data streams to the fixed position delta reduction backup application. However it is important to note that the disclosed embodiments may also be implemented by the fixed position delta reduction backup application. In other words since the disclosed embodiments and the fixed position delta reduction backup process may be implemented by a single application the modified data stream may be processed by the corresponding fixed position delta reduction backup method without requiring that the modified data stream s be provided to a separate application.

In accordance with one aspect of the invention a data stream including a set of validation bytes for each data block is received. When the data stream is received at least a portion of the data stream is parsed into a plurality of data blocks and a plurality of sets of validation bytes wherein each of the plurality of data blocks corresponds to one of the plurality of sets of validation bytes and each of the plurality of sets of validation bytes includes a signature. A signature may be calculated for example by calculating a cyclic redundancy check CRC or checksum. One or more modified data streams are then generated such that the plurality of data blocks are separate from the plurality of sets of validation bytes. As a result the data change detected by a fixed position delta reduction backup application is reduced resulting in a reduction in the amount of data that is stored by the fixed position delta reduction backup application to complete a data backup.

In accordance with one embodiment a single modified data stream is generated such that the plurality of sets of validation bytes are appended to the plurality of data blocks in a contiguous manner. In another embodiment two different modified data streams are generated where the first modified data stream includes the plurality of data blocks and the second modified data stream includes the plurality of sets of validation bytes.

In accordance with another embodiment the set of validation bytes associated with each data block changes from one data backup to the next data backup. In other words the set of validation bytes is not entirely based upon the contents of the corresponding data block. For instance each set of validation bytes may include a signature calculated using a seed component that changes from one backup session to the next. A seed may include for example a date and or time component. Alternatively each set of validation bytes may include a value that is transmitted separately from the signature where the value changes from one backup session to the next. For instance such a value may include a date and or time component.

In accordance with yet another embodiment each set of validation bytes is a fixed length. Similarly each of the data blocks is a fixed length data block. In other words the length of a fixed length data block is a specific predetermined length. The length may be fixed with respect to position e.g. with respect to other data blocks as well as with respect to time. Stated another way the length is fixed with respect to position when each of the fixed length data blocks includes a predetermined identical number of bytes of data. The length is fixed with respect to time when the length of a data block remains the same across time and therefore across multiple data backups.

As set forth above each data block is described as being a fixed length with respect to position as well as with respect to time across multiple backups. However it is important to note that the data blocks may be fixed length only with respect to position or with respect to time. Moreover the data blocks may also be of variable length with respect to position and or with respect to time.

In accordance with yet another embodiment the disclosed embodiments are applied to an IBM Series platform. Each set of validation bytes is 16 bytes and each data block is 64 kilobytes. When backup data is requested a request is sent via an Application Programming Interface API . The data stream includes separate 1 megabyte portions i.e. buffers . Each 1 megabyte portion includes individual data blocks each followed by a validation segment i.e. set of validation bytes . Each validation segment includes a signature. The signature may be calculated using a seed component or alternatively the validation segment may further include a separate value where the seed component value changes from one backup session to the next.

In accordance with another aspect of the invention the invention pertains to a system operable to perform and or initiate any of the disclosed methods. The system includes one or more processors and one or more memories. At least one of the memories and processors are adapted to provide at least some of the above described method operations. In yet a further embodiment the invention pertains to a computer program product for performing the disclosed methods. The computer program product has at least one tangible computer readable medium and computer program instructions associated with at least one of the computer readable product configured to perform at least some of the above described method operations.

These and other features and advantages of the present invention will be presented in more detail in the following specification of the invention and the accompanying figures which illustrate by way of example the principles of the invention.

Reference will now be made in detail to a specific embodiment of the invention. An example of this embodiment is illustrated in the accompanying drawings. While the invention will be described in conjunction with this specific embodiment it will be understood that it is not intended to limit the invention to one embodiment. On the contrary it is intended to cover alternatives modifications and equivalents as may be included within the spirit and scope of the invention as defined by the appended claims. In the following description numerous specific details are set forth in order to provide a thorough understanding of the present invention. The present invention may be practiced without some or all of these specific details. In other instances well known process operations have not been described in detail in order not to unnecessarily obscure the present invention.

The disclosed embodiments enable a backup data stream that is received from a system generating a set of validation bytes i.e. validation segment for each data block where the set of validation bytes changes with each data backup to be efficiently processed by a fixed position delta reduction backup method. This is accomplished in part by modifying the backup data stream prior to passing it to the fixed position delta reduction backup method. By modifying the backup data stream the amount of data that is perceived by the fixed position delta reduction backup method to be new or changed is minimized. In this manner inefficiencies typically introduced into the fixed position delta reduction backup process when a backup data stream includes sets of validation bytes that vary with each backup are eliminated.

As set forth above the set of validation bytes associated with each data block changes with each backup execution. More particularly each set of validation bytes includes a component that changes from one backup to the next. For instance each set of validation bytes may include a signature that is calculated using a seed component that changes from one data backup to the next data backup. For instance the seed component may include a date and or time. A signature may be generated for example by calculating a cyclic redundancy check CRC or checksum. Alternatively each set of validation bytes may include a value that is transmitted separately from the signature where the value changes from one data backup to the next data backup. For example such a value may include a date and or time component.

In accordance with one embodiment the backup data stream is modified such that the data blocks are separated from the corresponding sets of validation bytes. More particularly at least a portion of the data stream is parsed into a plurality of data blocks and a plurality of sets of validation bytes where each of the plurality of data blocks corresponds to one of the plurality of sets of validation bytes. One or more modified data streams are then generated such that the plurality of data blocks are separate from the plurality of sets of validation bytes. For instance the plurality of sets of validation bytes may be appended to the plurality of data blocks such that a single modified stream is generated. As another example two different modified data streams may be generated where the first modified data stream includes the plurality of data blocks and the second modified data stream includes the corresponding plurality of sets of validation bytes. Thus while all data blocks in a segment of the data stream including a set of validation bytes would in a conventional approach be detected as new data by a fixed position delta reduction application by separating the sets of validation bytes from the plurality of data blocks only the sets of validation bytes will be treated as new data by the fixed position delta reduction backup application.

Data associated with a particular file or database may be stored in variable length data blocks or fixed length data blocks. The length of a data block may vary or be fixed with respect to position e.g. with respect to other data blocks and or time e.g. over time .

A variable length data block for which the length varies with respect to time may be any length which varies with the content of the data block. In other words the length of a variable length data block for which the length varies over time may increase or decrease over time. When data is stored in variable length data blocks where the length varies with respect to position each of the variable length data blocks may include any number of bytes of data. In other words each data block may include a different number of bytes of data and therefore the length of the data blocks need not be the same. A variable length data block for which the length varies with respect to position need not vary with respect to time and vice versa.

The length of a fixed length data block is a specific predetermined length. The length is fixed with respect to other data blocks when each of the fixed length data blocks includes a predetermined identical number of bytes of data. The length is fixed with respect to time when the length of a data block remains the same across time and therefore across multiple data backups. A fixed length data block for which the length is fixed with respect to position need not be fixed with respect to time and vice versa. Many common database programs divide databases into fixed length data blocks where the length is fixed with respect to both position and time.

The disclosed embodiments may be implemented with systems storing data in the form of fixed length data blocks or variable length data blocks. In systems implementing variable length data blocks the length may vary with respect to position e.g. with respect to other data blocks and or time e.g. across multiple data backups . Moreover the disclosed embodiments may also be implemented with systems storing data in the form of fixed length data blocks where the length is fixed with respect to only position or time.

In some embodiments the backup data stream includes one or more segments each of which includes a plurality of data blocks and corresponding sets of validation bytes. These segments may be separated logically and may be referred to as logical components. Each logical component may be defined as a logically distinct segment within a file or database such as a backed up file within a backup dump file or a database file tablespace within a database dump stream. One method for separating logical components in a data stream is disclosed in U.S. patent application Ser. No. 11 280 545 entitled Methods and Apparatus for Modifying a Backup Data Stream including Logical Partitions of Data Blocks to be Provided to a Fixed Position Delta Reduction Backup Application naming Boldt et al. as inventors filed on Nov. 15 2005 which is incorporated herein by reference for all purposes. Alternatively the segments may be separated into equal length portions as will be described in further detail below with reference to the IBM iSeries platform.

Regardless of the manner in which the segments of a data stream are distinguished each of the segments includes one or more data blocks where each of the data blocks is followed by an associated set of validation bytes. In accordance with one embodiment the backup data stream is received from an IBM iSeries platform. The backup data stream is typically obtained via an Application Programming Interface API which is referred to as the SAV API. The portions of the data stream are typically 1 megabyte in length. Each of the data blocks in a particular portion of the data stream is 64 kilobytes in length while each associated set of validation bytes consists of 16 bytes. Moreover each set of validation bytes includes a value that changes from one data backup to the next or alternatively a signature calculated using a seed component that changes from one data backup to the next.

In accordance with one embodiment when the sets of validation bytes obtained from a megabyte portion of a data stream received from an IBM iSeries platform are concatenated a segment including the sets of validation bytes is generated. The segment is then appended to the data blocks obtained from that portion of the data stream. As a result the segment of validation bytes is 256 bytes. A number of padding bytes e.g. zeros may be used to pad the segment of validation bytes. This may be desirable for example in order to pad a 256 byte segment of validation bytes to generate a 32 kilobyte segment thereby maintaining consistent 32 kilobyte boundaries.

The data that is provided to or obtained by a fixed position delta reduction backup application be obtained from a database or file. In accordance with one embodiment a plurality of data blocks are obtained from a database and a set of validation bytes is generated for each data block. Thus the data and corresponding sets of validation bytes may correspond to one or more files stored in a database.

Data associated with a file or database may be received by a backup application as one contiguous stream of data. For instance as set forth above the backup application may call an application programming interface API offered by a database engine to request backup data. In response the database API will send the backup data as a stream to the requesting application.

Each object file or database and therefore each stream of backup data associated with a file or database includes one or more segments i.e. partitions . As set forth above each of the segments may be a logical component or a fixed length segment. In accordance with one embodiment the length of each of the partitions and each of the data blocks is a fixed length. However it is important to note that in other embodiments the length of each of the partitions and each of the data blocks may vary with respect to one another.

The at least a portion of the data stream is then parsed to generate one or more modified data streams such that the sets of validation bytes are separated from the plurality of data blocks at . For instance each of the sets of validation bytes may be removed from the portion of the data stream leaving only the data blocks. As another example each of the data blocks may be removed from the portion of the data stream resulting in a contiguous stream including the sets of validation bytes. One method of parsing a data stream or portion thereof such that the plurality of sets of validation bytes are separated from the plurality of data blocks will be described in further detail below with reference to . The one or more modified data streams may then be provided e.g. transmitted to a fixed position delta reduction backup application at .

Where the entire data stream is parsed to generate a single set of modified data streams there are no remaining portions at and the process ends at . Alternatively it may be desirable to generate a different set of modified data streams for each portion of the data stream. Thus as shown at steps may be repeated for any remaining portions of the data stream.

When the fixed position delta reduction backup application receives a modified data stream the fixed position delta reduction backup application determines which data blocks to store to remote or local storage. For instance the fixed position delta reduction backup application may determine which data blocks have been modified e.g. changed added or deleted by calculating signatures associated with the data blocks in the current modified data stream and comparing the calculated signatures to previously stored signatures associated with a previous backup of the same file or database. The fixed position delta reduction backup application also replaces the previously stored signatures with the newly calculated signatures enabling the fixed position delta reduction backup application to detect changes made to the file or database since the most recent backup. Accordingly since the sets of validation bytes have been separated from the data blocks the fixed position delta reduction backup application will be able to correctly compare signatures of each of the data blocks with those signatures that have previously been stored by the fixed position delta reduction backup application for those data blocks. Since the sets of validation bytes that are received by the delta reduction backup application will differ from those previously received by the delta reduction backup application due to the changing seed component or value the sets of validation bytes will be perceived as new or modified data by the delta reduction backup application and stored.

Once the fixed position delta reduction backup application determines which data has been modified since the last data backup the fixed position delta reduction backup application stores the modified data. This data may be sent to a local data storage medium or may be sent via a network interface for transmission to a remote storage medium.

As described above with reference to when a backup data stream is received it is parsed to generate one or more modified data streams. is a process flow diagram illustrating an exemplary method of parsing a backup data stream as shown at block of . In order to separate the sets of validation bytes from the data blocks as they are encountered a string variable representing the SET OF PREVIOUSLY OBTAINED DATA BLOCKS is initialized to NULL at while a string variable representing the SET OF PREVIOUSLY OBTAINED SETS OF VALIDATION BYTES is initialized to NULL at .

At least a portion of a backup stream is obtained at . If there are more data blocks at the process continues at to obtain the next data block. The obtained data block is then concatenated e.g. appended to the SET OF PREVIOUSLY OBTAINED DATA BLOCKS at . The set of validation bytes associated with the obtained data block is obtained at and concatenated e.g. appended to the SET OF PREVIOUSLY OBTAINED SETS OF VALIDATION BYTES at . The process continues at for all remaining data blocks and corresponding sets of validation bytes in the data stream.

As set forth above one or more modified data streams are generated such that the plurality of data blocks are separate from the plurality of sets of validation bytes. This may be accomplished by generating a single data stream or two or more different data streams. More particularly as shown at the SET OF PREVIOUSLY OBTAINED SETS OF VALIDATION BYTES may be concatenated e.g. appended to the SETS OF PREVIOUSLY OBTAINED DATA BLOCKS to generate a single modified data stream. In other words the sets of validation bytes may be placed at the end of the modified data stream in a contiguous manner. Alternatively as shown at two different modified data streams may be generated where a first data stream includes the SETS OF PREVIOUSLY OBTAINED SETS OF VALIDATION BYTES and a second data stream includes the SETS OF PREVIOUSLY OBTAINED SETS OF DATA BLOCKS.

As described above once a data stream has been provided to a fixed position delta reduction backup application the data stream is processed by the fixed position delta reduction backup application and the data that has been modified since the last backup is stored by the fixed position delta reduction backup application to local or remote storage. In some instances it is necessary or desirable to restore the backup data that has previously been stored by the fixed position delta reduction backup application. When the fixed position delta reduction backup application retrieves the stored data it is necessary to reverse the method that was previously performed to modify the backup data stream that was provided to the fixed position delta reduction backup application.

At if a single modified data stream has been generated the sets of validation bytes are separated from the sets of data blocks in the modified data stream. More particularly the set of data blocks is initialized to NULL at . If there are more data blocks at the next data block is obtained at and appended to the set of data blocks at . The process repeats at until all of the data blocks have been encountered. The sets of validation bytes that were previously appended to the set of data blocks may then be obtained at from the modified data stream.

At if two different modified data streams have been generated one of the modified data streams includes the data blocks while the other of the modified data streams includes the sets of validation bytes. Thus the data stream that includes the data blocks is identified at . Therefore the set of data blocks may be obtained from this first modified data stream at while the sets of validation bytes may be found in the second modified data stream at .

Once the data blocks and sets of validation bytes have been identified the original backup data stream may be restored. This may be accomplished by reversing the changes that were initially made to modify the backup data stream. Once the original backup data stream is restored it may be provided via an API to the system that originated the backup data stream enabling a file or portion thereof corresponding to the backup data stream to be restored.

As described above with reference to a backup data stream may be restored. However it may also be desirable to restore a portion of the original backup data stream which may be transmitted separately to the originator of the original backup data stream or may be concatenated to other restored portions of the data stream prior to being transmitted to the originator of the original backup data stream. This may be accomplished for example where a set of modified data streams e.g. a single or two different modified data streams are generated for each portion of the original backup data stream. The set of modified data streams may therefore each be processed to separate the sets of validation bytes from the data blocks as set forth above with reference to . The sets of validation bytes and the data blocks for each portion of the original backup data stream may be combined for all portions or maintained separately for each portion. The original backup data stream may then be generated e.g. restored as set forth above with reference to from the data blocks and corresponding sets of validation bytes. For instance if the sets of validation bytes and the data blocks for all of the portions of the backup data stream are combined the original backup data stream may be restored as described above with reference to . Alternatively if the sets of validation bytes and the data blocks for each portion of the original backup data stream are maintained separately from those for other portions of the original backup data stream each portion of the backup data stream may be separately restored. The restored portions may be separately transmitted or concatenated prior to transmission to restore the original backup data stream.

It is important to note that the file restore process operates to reverse the stream modification method previously performed to modify the backup data stream. Thus the process illustrated in corresponds to a system in which the processes set forth above have been performed to modify a backup data stream. Thus it is important to note that the file restore process will differ depending upon the format of the backup data stream received and the combination of steps performed to modify the backup data stream. Accordingly the above described embodiments are merely illustrative and other methods of modifying a backup data stream may be performed to separate sets of validation bytes from the corresponding data blocks.

Generally the techniques of the present invention may be implemented on software and or hardware. In a specific embodiment of this invention the technique of the present invention is implemented in software. Thus the present invention relates to machine readable media that include program instructions state information e.g. tables etc. for performing various operations described herein. Examples of machine readable media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROM disks magneto optical media such as floptical disks and hardware devices that are specially configured to store and perform program instructions such as read only memory devices ROM and random access memory RAM . The invention may also be embodied in or associated with a tangible computer readable medium in which a carrier wave travels over an appropriate medium such as airwaves optical lines electric lines etc. Examples of program instructions include both machine code such as produced by a compiler and files containing higher level code that may be executed by a computer using an interpreter.

The present invention may be implemented on any suitable computer system. illustrates a typical general purpose computer system suitable for implementing the present invention. The computer system may take any suitable form.

The computer system includes any number of processors also referred to as central processing units or CPUs that may be coupled to memory devices including primary storage device typically a read only memory or ROM and primary storage device typically a random access memory or RAM . As is well known in the art ROM acts to transfer data and instructions uni directionally to the CPUs while RAM is used typically to transfer data and instructions in a bi directional manner. Both the primary storage devices may include any suitable computer readable media.

A secondary storage medium which is typically a mass memory device may also be coupled bi directionally to CPUs and provides additional data storage capacity. The mass memory device is a computer readable medium that may be used to store programs including computer code data and the like. Typically the mass memory device is a storage medium such as a hard disk which is generally slower than primary storage devices . Alternatively the mass memory device may be a storage device such as a SCSI storage device.

The CPUs optionally may be coupled to a computer or telecommunications network e.g. an internet network or an intranet network using a network connection as shown generally at . With such a network connection it is contemplated that the CPUs might receive information from the network e.g. data associated with a restore process or might output information to the network e.g. data that has been processed by a fixed position delta reduction backup process or data that has been modified prior to being processed by a fixed position delta reduction backup application in the course of performing the above described method steps. Thus backup data may be transmitted over a network to be processed or to be stored to or retrieved from a remote storage device. For instance the network may be a storage area network SAN such as a fibre channel SAN. Accordingly the invention may be installed for use across a network such as the Internet thereby enabling data retrieval from and backup to disparate sources.

Although the foregoing invention has been described in some detail for purposes of clarity of understanding it will be apparent that certain changes and modifications may be practiced within the scope of the appended claims. For instance although the embodiment described refers to fixed length data blocks and partitions the disclosed embodiments may be implemented in systems storing data in the form of variable length data blocks where the length of the data blocks vary with respect to one another as well as in systems in which data is stored in the form of logical segments and or in which the length of the segments varies with respect to one another. Therefore the described embodiments should be taken as illustrative and not restrictive and the invention should not be limited to the details given herein but should be defined by the following claims and their full scope of equivalents.

