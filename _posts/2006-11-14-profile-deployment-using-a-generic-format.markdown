---

title: Profile deployment using a generic format
abstract: A network enabled computer receives connection profile information in a generic form and creates one or more native mode profiles to establish connections. By accepting profile information in a generic form, profile information can be readily provided from one or more ways, including from a policy server, through a user interface or from a third party application. The profile information can be provided with an order of precedence so that profile information from different sources may be combined appropriately. Additionally, the profile information may be provided in an extensible format to allow profile information to be distributed to multiple computers, even if some have different hardware or software configurations and are not programmed to recognize extensions of the profile information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08060620&OS=08060620&RS=08060620
owner: Microsoft Corporation
number: 08060620
owner_city: Redmond
owner_country: US
publication_date: 20061114
---
This application claims the benefit under 35 U.S.C. 120 of U.S. Provisional Application Ser. No. 60 850 114 entitled DATA MODEL AND DATA OPERATIONS FOR CENTRALIZED DEPLOYMENT OF WIRELESS CLIENTS filed on Oct. 5 2006 which is herein incorporated by reference in its entirety.

For a computer to connect to a network as a client the computer must be configured with settings that are compatible with the network. Configuration may involve identifying the network to which a connection is to be established as well as setting operating characteristics of the computer to be compatible with those of the network. For example the computer must be configured to communicate using a protocol and with security settings compatible with that of the network.

The settings needed to configure a computer for access to a particular network are frequently stored in a profile stored in the computer. When a connection is requested to that network the profile may be read from computer memory and the information in the profile may be used to configure the hardware and software elements so that they operate in a manner compatible with the network.

Known computer operating systems incorporate tools that allow users to create network profiles. Using these tools a user may create a profile for each network to which the user may want to connect.

Requiring a computer user to create network profiles may be undesirable for multiple reasons. Many users lack sophisticated knowledge of network operation to enable them to appropriately specify a profile. Additionally in an enterprise a network administrator may want all client computers configured with certain settings for network access. Alternatively or additionally a network administrator may wish to specify that some or all of the client computers on a network be configured so that they do not gain access to undesirable networks.

To facilitate the creation of network profiles a client computer may be constructed with a profile manager. The profile manager may receive information on network profiles in a generic format. The profile manager may create native mode network profiles based on the generic profile information. Providing generic profile information allows profile information to be obtained from many sources. Sources for profile information may include a group policy server commands entered through a scripting utility a user interface or a third party software module.

The profile information alternatively or additionally may be formatted in accordance with an extensible schema. The extensible schema may allow computers that receive and process the profile information to identify and ignore extensions to the profile information that they are not programmed to process. In this way both forwards and backwards compatibility may be provided which can facilitate widespread distribution of profile information to multiple clients deployed at different times.

By facilitating the creation and manipulation of network connection profiles ease of use of a networked computer system may be improved from the perspective of both users of individual client computers and a network administrator. Profile information may be provided in a format that is easy to manipulate manually or under computer control. A profile manager may use this profile information to create specific profiles in a native format. A configuration service may use the profiles in native format to establish network connections as in a conventional network computer system.

The profile information may be in a generic format not specific to an implementation of a configuration service. By developing a computer that can accept profile information in a generic format users and third parties without knowledge of the native format used by a configuration service can provide profile information allowing profile information to be readily provided from multiple sources.

One source of profile information may be a group policy agent that can automatically retrieve policy information from a group policy server. In this way a network administrator of an enterprise network may post profile information that each computer should use. This information may be automatically deployed through group policy agents in client computers throughout the enterprise to provide consistent network connectivity using profiles specified by the network administrator.

Moreover the easy to use format for the profile information may also be extensible. By providing an extensible format forward and backward compatibility may be provided between configuration services in computers and the profile information. For example if a computer contains hardware that accepts configuration settings in a profile that were not previously used the schema used to represent the profile information may be extended to accept parameters describing settings for the added capabilities. Conversely if the schema for the profile information is extended to include information specifying settings relating to capabilities that some newer computers support other computers that do not support those capabilities may recognize the extension of the schema and simply ignore it.

Multiple clients of which clients and are illustrated may be connected to network . Each client computer may be connected to the network in any suitable way. For example client computers and are illustrated to be connected to network using wired connections. In contrast client computer is shown connected to network through a wireless connection.

Once clients connect to network they may access backend infrastructure such as backend infrastructure server . Backend infrastructure server may be a server storing data for the enterprise or providing other functions.

Though is a greatly simplified representation of a network it illustrates a benefit of providing profile information in a generic format. A network administrator may desire to configure each of the client computers and to support certain types of network connections or to disallow certain types of network connections. For example an undesirable wireless network may operate in the in the vicinity of client computers on enterprise network . Undesirable wireless network may represent a network which if accessed could compromise the security of the enterprise network or for which access from client computers within the enterprise is otherwise undesirable. For this reason a network administrator of enterprise network may desire to specify profiles for client computers equipped for wireless connectivity that do not allow those computers to connect to undesirable network .

As another example the network administrator may wish to provide client computers with network profiles so that they can connect to desired networks. Or a network administrator may wish to provide profiles that take advantage of new security features to all computers within the enterprise that support those security features even if all computers do not. In these and other scenarios it may be desirable for each client computer to be provided with network profiles.

Rather than individually program each client computer with the desired profiles a network administrator may load generic profile information onto policy server . Group policy agents within each client computer may download this information. By incorporating a profile manager into the client computer to convert the generic profile information to a native profile for use in that client computer all of the client computers connected to the network may be readily configured.

Further because the generic profile information is specified in a format defined by an extensible schema both old and new computers connected to the network may nonetheless receive and operate on the generic profile information. For example client computer may be a newer computer than client computer . Client computer may be configured with a network interface card that supports advanced encryption options that a network interface card in client computer does not support. A network administrator may provide generic profile information that specifies settings for these advanced encryption options which client computer may process and apply. Though client computer receives the same generic profile information which it cannot process client computer may nonetheless recognize that the advanced encryption options are an extension of the profile information and ignore them without errors in operation.

Turning to a block diagram of a connection service that may exist inside client computers such as client computers and is illustrated. Connection service may be implemented in software in a client computer. In the specific example configuration service may be a component of the operating system of the client computer implemented using known programming techniques.

However connection service may be implemented in any suitable way. In the illustrated embodiment connection service is implemented as a plurality of software modules that interact to configure a client computer and establish a connection over a network.

In the embodiment shown connection service includes an automatic configuration module . Automatic configuration module has a programming interface that allows a user interface module to interact with automatic configuration module . User interface module may display a user interface through which automatic configuration module may provide information to a computer user. Additionally user interface module may receive input from that user directing automatic configuration module to establish a connection to a network or to establish or modify a network profile.

Automatic configuration module may interact with profile manager which supplies a profile to automatic configuration logic for use in establishing a network connection. Alternatively automatic configuration module may provide information to profile manager specifying changes in a profile maintained by profile manager .

Automatic configuration module may include components that perform functions useful in forming connections. For example ACL module may include access control settings associated with network connections and profiles managed by profile manager . The access control settings maintained within module may indicate whether a specific user is authorized to perform a requested operation on a profile. Access control settings may be particularly useful in an enterprise setting where multiple users may sequentially or simultaneously access the same physical computer.

User session monitor module provides information to automatic configuration module concerning which user is actively using a computer configured for multiple users. User session monitor module for example may provide information to automatic configuration module indicating that a user has ended a session which may trigger automatic configuration module to close all connections that are authorized only for use by that user. Also session information provided by user session monitor module may be used to determine whether the current user interacting with automatic configuration module through user interface is authorized to perform an action requested by a command provided through user interface or to otherwise enable automatic configuration module to perform functions depending on a user session.

Other modules within automatic configuration module may specify the format of information provided to a user. This information may also be tailored based on the information provided by user session monitor module . As one example anchoring components may specify a preferred order of networks to which a connection is to be established. The preferred order may be used to control connection attempts or may be used to control the order in which information is displayed to a user.

Profile manager stores profiles and provides profile information to automatic configuration module . Profile manager may obtain information on profiles used by connection service in any suitable way. In some embodiments profile manager may receive profile information in a generic format to convert it to native format profiles.

Turning to a block diagram of a computer operating according to an embodiment of the invention is illustrated. Computer is shown connected to a network . Physical connection to the network is made through network interface card . Network interface card may be a conventional network interface card providing a physical interface to whatever media is used to connect to network . For example network interface card may be a wired or a wireless network interface card.

In the embodiment illustrated in computer includes a network interface card that establishes a physical link to network . Network interface card may be a conventional network interface card or implemented in any other suitable fashion. In the embodiment of computer establishes a physical link wirelessly through an access point. In contrast computers and may establish a physical link through a copper wire fiber optic cable or any other suitable medium.

Computer contains driver that acts as an interface between network interface card and other software components within computer . Driver may be any suitable driver. For example a suitable driver is described in currently pending U.S. patent application Ser. No. 10 306 169 published as US2004 0103278A1 which is hereby incorporated by reference in its entirety. Such a driver provides an interface to networking components used to facilitate communications for applications such as applications and . In the example illustrated driver provides an interface to stack which in turn provides a mechanism for applications and to communicate over network . Stack may be implemented as a conventional stack or may be implemented in any other suitable way.

Driver additionally provides a mechanism for services installed on computer to communicate over network separately from the mechanisms used by applications such as applications and . In the specific example driver is implemented in two portions. One portion is within operating system and a second portion is outside operating system . Operating system may be any suitable operating system for computer and may include utilities and services such as an automated configuration service. In the specific example illustrated the portion of driver outside of operating system may be provided by a vendor supplying the hardware for network interface card . The portion of driver outside of operating system may provide hardware specific control of network interface card . The portions of driver within operating system may provide a conventional interface to stack allowing data transmitted over network to be exchanged with applications such as and . In addition the portions of driver within operating system may have access to management and control packets used for communications over network . As a result driver may provide a range of information concerning communications over network to services within operating system . This information may be provided in any suitable way.

Driver is also configured to interact with connection service such as through an interface of any suitable construction. Connection service may configure the hardware and software within driver and network interface card to make a connection over a network such as network . To form that connection connection service may use a profile specifying settings for the hardware and software within computer to be compatible with network . The profile may be provided by profile manager .

In the illustrated embodiment connection service may also receive information from hardware module which may be provided by an independent hardware vendor separately from operating system . Information provided by hardware module may be specific to network interface card and may be used by connection service to apply a profile. For example if network interface card supports communication functions that are not a part of a formal or de facto standard that operating system is coded to support information about those capabilities may be provided by hardware module . Information may be in the form of data identifying those capabilities or may be in the form of control information. For example hardware module may execute one or more methods used to configure or control network interface card .

Connection service may otherwise be implemented as a conventional connection service in a computer. It may receive a profile and apply settings in that profile to create a connection. However computer differs from a conventional computer in that profile information may be obtained from one or more sources. In the embodiment illustrated profile manager receives generic profile information and uses it to form native mode profiles that connection service may process when establishing network connections.

In the embodiment of generic profile information includes LAN profile information WLAN profile information LAN policy information and WLAN policy information . As shown LAN profile information and WLAN profile information is obtained through a programming interface . Programming interface may in turn be connected to a user interface or a third party application is . Accordingly LAN profile information or WLAN profile information may be provided by a user interacting with computer through a user interface device controlled by user interface . Or LAN profile information and WLAN profile information may be obtained from a third party application provided separately from operating system that specifies connection profile information even if that application is developed without knowledge of the native mode format used by connection service to represent a profile.

In the embodiment illustrated LAN policy information and WLAN policy information is derived from group policy agent . Group policy agent connects to a network through stack and may download policy information from a policy server such as policy server . As with LAN profile information and WLAN profile information LAN policy information and WLAN policy information may be developed without knowledge of the native mode format used by connection service to represent a profile and may even be provided to multiple computers that use different native mode representations of profiles.

In the embodiment illustrated LAN profile information defines one or more profiles computer may use to connect to a wired local area network LAN . Likewise WLAN profile information contains information on one or more profiles that computer may use to make a connection to a wireless network. LAN policy information contains information on one or more policies on connections that should or should not be formed over a wired LAN to which computer may be connected. Similarly WLAN policy information specifies information about connection that should or should not be formed to a wireless network.

Profile manager may use WLAN profile information LAN profile information LAN policy information and WLAN policy information to form one or more profiles that connection service may use to establish connections. This policy information may have an order of precedence and may be combined in accordance to its order of precedence. For example policy information may be given a higher precedence than profile information.

It is not necessary that all types of information be present. For example if connection service is a wireless connection service profile information concerning a wired LAN may be omitted. Accordingly LAN profile information and LAN policy information may optionally be omitted. However LAN profile information and LAN policy information is illustrated in to demonstrate that the sources and types of policy information represented in a generic form is not a limitation on the invention.

In the embodiment illustrated each type of profile information may be represented in a different format. In the pictured embodiment each type of information is represented with a schema that defines allowable information elements. The information elements are tagged allowing easy manipulation of the information in the generic format. As a specific example generic profile information may be stored in one or more XML files. In the embodiment illustrated each type of profile information is stored in a separate XML file in accordance with a schema for that type. Further a separate file may be used for each instance of a type of profile information. For example if information is provided for multiple networks a separate file may be used for information associated with each network.

By storing the information in XML files for example user interface may readily create displays of the profile information allowing a user to edit the profile information. In the embodiment illustrated LAN profile information and WLAN profile information are accessible through API allowing a user or third party application to manipulate that data. Conversely in the embodiment shown LAN policy information and WLAN policy information is not accessible to programming interface so that it is not editable by a user. However in alternative embodiments all profile information may be editable.

Generic profile information may be stored in any suitable form. In some embodiments generic profile information is stored as XML files according to one or more XML schema. illustrates schema that may be used to store generic profile information of the types illustrated in . A separate schema is provided for each type of generic profile information. illustrates a separate WLAN policy schema a LAN policy schema a WLAN profile schema and a LAN profile schema .

Providing separate schema for each type of information may simplify the process of defining schema containing multiple different types of information. For example configuring a network interface card for connection to a wireless networks requires specification of different settings than to configure a network interface card to a wired network. Also connection to a wireless network may entail greater security risks resulting in different policy information being specified for such networks.

Additionally providing separate schema allows an order of precedence to be specified for the different types of information. For example WLAN policy schema and LAN policy schema may take precedence over WLAN profile schema and a LAN profile schema .

In the embodiment illustrated WLAN policy schema and LAN policy schema specify elements that may appear in an XML file specifying policy aspects of the profiles that may be created on the client computer. This policy information may specify connections that may be formed or connections that may not be formed or conditions under which connections may be formed. In the illustrated embodiment information relating to policies defining connections that may or may not be formed is separated from the information defining settings used to form those connections. This type of segmentation allows policy information to be provided from a different source than the connection information. It also allows the policy information to be treated differently. For example illustrates that policy information is not editable by a user of a computer receiving that policy information. However the specific segmentation of the profile information is not a limitation on the invention. Policy and connection information may be combined or separated or provided in any other suitable fashion.

In the embodiment illustrated WLAN policy schema specifies data elements including a policy name a description one or more global flags and connections for which that policy may be used. In the example of profile information is specified hierarchically. Therefore identification of a connection may be made by reference to WLAN profile schema indicating that a connection may be identified in a file according to WLAN policy schema by reference to an XML file holding data for a connection in accordance with WLAN profile schema . However the specific mechanism by which a connection is identified is not a limitation on the invention.

In the example of WLAN policy schema incorporates a network filter element. In an XML file constructed according to WLAN policy schema the network filter element may include a list of specific networks to which connections are allowed and or a list of networks to which connections are not allowed. A profile manager processing such an XML file may selectively form profiles for use in establishing connections that are consistent with the values specified for the network filter element.

LAN policy schema similarly defines elements of a policy that may be used for establishing connections to a wired LAN. LAN policy schema specifies elements similar to those specified in WLAN policy schema . However in the illustrated embodiment LAN policy schema does not include a network filter element. Such an element may be omitted in connection with a wired LAN because physical control over an office or other facility in which an enterprise network is deployed may preclude undesired connections to a wired LAN and network filtering may be less valuable in that context. However in other embodiments LAN policy schema may have the same form as WLAN policy schema . More generally all of the schema illustrated in are for purposes of illustration. Any schema may have additional different or fewer elements than depicted.

In the embodiment illustrated WLAN profile schema specifies entries that collectively define a configuration to establish a wireless connection. Likewise LAN profile schema contains entries that collectively define a configuration for making a wired connection. The specific values of the elements specified in an XML file according to the schema specify parameters for those settings. In the embodiment illustrated WLAN profile schema and LAN profile schema have different structures reflecting the different types of information that are used to establish a wireless versus a wired connection. However the invention is not so limited and the same schema may be used for different network types.

In use WLAN profile schema and LAN profile schema may be used to create XML files containing values of the elements in the schema that may be applied within a computer to configure that computer for a specific network connection. In the example of WLAN profile schema specifies elements such as a connection name an SSID configuration a connection type a connection mode information about connectivity and information about specific hardware modules denoted as IHV.

WLAN schema may also specify security information. In the embodiment illustrated the schema are defined according to a hierarchy with some types of information being defined in schema that are referenced by other schema. In the example of security information is defined by a separate schema. Accordingly WLAN profile schema references security schema . In this example security schema defines a schema for storing configuration information used by a device wanting to authenticate according to the IEEE 802.1X protocol. However one or more security schema may be provided and referenced in WLAN profile schema or any other profile schema that may be defined.

In a similar fashion though not shown information about non standardized hardware configurations could be provided within WLAN profile schema or may be incorporated hierarchically by reference to another schema. Any other type of information may likewise be incorporated in WLAN profile schema directly or by reference to another schema.

As a further example of elements that may be defined in a schema WLAN profile schema is also shown to include an auto switch element. The auto switch element is an example of an element that provides control information for software that establishes a connection using a profile created based on WLAN profile schema . In this example when the auto switch element is present in an XML file a computer that recognizes that element will automatically reconfigure to connect to a different network when a better network becomes available.

LAN profile schema similarly defines elements that may be included in an XML file providing profile information for a wired network connection. In this example LAN profile schema includes elements to specify a name and security. As with WLAN profile LAN profile specifies security information hierarchically by reference to another schema. In this example IEEE 802.1X security schema is the only security schema illustrated but in other embodiments different additional security schema may be specified.

Regardless of the specific form of the schema the schema may be used to establish profiles which may in turn be used to establish network connections. illustrates a functional block diagram of the interactions that may occur in creating profiles for network connections. shows a generic profile store . In the illustrated embodiment generic profile store includes two portions. XML files A and B are stored in persistent portion A. XML file C is stored in cache B.

In the illustrated embodiment profile information obtained from group policy agent is stored in cache B. Profile information stored in cache B is updated periodically. The update frequency may be driven by the operation of group policy agent . The specific update frequency is not a limitation on the invention but for example may be approximately 90 minutes. Accordingly information in cache B may be changed periodically when group policy agent may download information from a policy server. However during intervals when group policy agent is unable to download information information in cache B may be retained so that policy information is nonetheless available for use in forming profiles.

In contrast information stored in persistent storage A is intended to remain until altered or deleted. In the embodiment illustrated profile information is stored in persistent portion A through a programming interface . Interactions by a user may be communicated from a user interface through programming interface . The interactions may create delete or alter any of the XML files in persistent portion A. In the illustrated embodiment in which generic profile information is stored as XML files conventionally available tools for creating editing or deleting XML files may be provided through programming interface .

Also as shown in third party applications may create edit or delete XML files A and B in persistent storage portion A. However in the embodiment illustrated neither a user nor a third party application has access to XML file C stored in cache B.

Regardless of how each XML file is created profile manager may perform a validation function on the files. A validate schema function may be performed each time an XML file is created or edited. Validate schema function determines whether the XML file as created or edited is consistent with the defined schema. For example if XML file A is a WLAN profile schema validate schema function may determine that it contains elements and or values consistent with WLAN profile schema .

To provide extensibility validate schema function determines only whether the XML file is inconsistent with the schema for that type of file. It does not identify as an error files that have additional elements not specified in the schema that validate schema function applies. In this way extensions to a schema made after the programming to implement validate schema function was developed are not rejected as erroneous. However if validate schema function detects an XML file that is inconsistent with the schema for that file type that XML file may be removed from generic profile store or other suitable error handling processing may be performed.

The XML files in generic profile store are used to create native mode profiles that are ultimately stored in native mode profile store . Processing within profile manager converts the XML files in generic profile store into native mode profiles. Form profile function may read an XML file from generic profile store and construct a native mode profile from the information in that file. If form profile function encounters elements in the XML file that it is not programmed to process an ignore function may be performed on those elements. In the embodiment illustrated an ignore function does not represent an error condition. Rather ignore function signifies that form profile function may continue forming a native mode profile without using the elements it is not programmed to recognize. In this way XML files based on a schema that has been extended can be used by computers not programmed to recognize the extensions.

Compatibility function is also performed as part of forming a native mode profile that may be applied to establish a connection. Compatibility function involves comparing the profile information for the profile being converted to native mode to any policy information that may be included in generic profile store . If the connection is to a network prohibited by policy information or otherwise incompatible with operation on the computer on which profile manager resides that native mode profile may be rejected by reject function . Unlike ignore function in which processing continues to create a native mode profile when reject function is performed no native mode profile is formed. In this way a computer is precluded from connecting to prohibited networks or prohibited from attempting to connect using a profile that is incompatible with policy information.

The timing of the functions illustrated is not critical to the invention. For example compatibility function maybe performed before or after form profile function .

If formation of a native mode profile is not rejected a native mode profile may be stored in native mode profile store . Native mode profile store may be stored in any suitable computer readable media. In this example each profile is stored as a data structure in a native mode used by connection service . The specific form on that data structure is not critical to the invention and any suitable form may be used. For purposes of illustration native mode profiles . . . are illustrated in native mode profile store . Each of the native mode profiles . . . may have the same format. In the illustrated embodiment each profile has a plurality of fields. For example one field may identify a network to which the profile applies. Other parameters may specify hardware or software settings within the computer on which the process of is performed. Additionally credential or other security information that may be used to log on to a network optionally may be stored in profile. In some embodiments all or portions of each profile is encrypted as stored in memory. For example only credential and security information of a profile may be encrypted. Though the invention is not limited in this regard and any portion or portions of the profiles may be encrypted to provide a suitable level of security. The profiles may be encrypted in a format that connection service may un encrypt. In this way unauthorized changes or access to profiles may be avoided. However the specific format used to store native mode profiles is not a limitation on the invention and any suitable format may be used.

In other embodiments scripting utility may operate on profiles in native mode profile store . In such an embodiment scripting utility may be implemented based on knowledge of a specific native mode format used to store profiles in native mode profile store . In contrast user interface and third party application may be created using generic knowledge of a schema for profile information without specific knowledge of the native mode format used to store profiles.

Connection service accesses native mode profile store to obtain a profile for a network to which it is attempting to establish a connection. In the embodiment illustrated a user provides input through user interface to connection service . This input may specify a network to which a connection is desired. In response to user input specifying a network connection connection service may access native mode profile store . If a profile exists for the specified network connection service may retrieve it from native mode profile store . However if no profile exists connection service may access profile manager indicating that a native mode profile should be create for the specified network. The form profile function in profile manager may be performed in response to such an interaction from connection service .

Turning to an exemplary window presented via user interface is shown. Specifically window displays icons A and A representing profiles for two wireless networks named Frasier and MSFTWLAN respectively. Properties are also shown for each profile including security type B B and radio type C C . The window illustrates the types of information about a connection a user may wish to edit.

Information for the display of may be obtained from either generic mode profile store and may be obtained through an interface such as user interface which allows generic mode profiles to be edited. In other embodiments the information may be derived from native mode profile store using any suitable interface.

Having thus described several aspects of at least one embodiment of this invention it is to be appreciated that various alterations modifications and improvements will readily occur to those skilled in the art.

Such alterations modifications and improvements are intended to be part of this disclosure and are intended to be within the spirit and scope of the invention. Accordingly the foregoing description and drawings are by way of example only.

The above described embodiments of the present invention can be implemented in any of numerous ways. For example the embodiments may be implemented using hardware software or a combination thereof. When implemented in software the software code can be executed on any suitable processor or collection of processors whether provided in a single computer or distributed among multiple computers.

Further it should be appreciated that a computer may be embodied in any of a number of forms such as a rack mounted computer a desktop computer a laptop computer or a tablet computer. Additionally a computer may be embedded in a device not generally regarded as a computer but with suitable processing capabilities including a Personal Digital Assistant PDA a smart phone or any other suitable portable or fixed electronic device.

Also a computer may have one or more input and output devices. These devices can be used among other things to present a user interface. Examples of output devices that can be used to provide a user interface include printers or display screens for visual presentation of output and speakers or other sound generating devices for audible presentation of output. Examples of input devices that can be used for a user interface including keyboards and pointing devices such as mice touch pads and digitizing tables. As another example a computer may receive input information through speech recognition or in other audible format.

Such computers may be interconnected by one or more networks in any suitable form including as a local area network or a wide area network such as an enterprise network or the Internet. Such networks may be based on any suitable technology and may operate according to any suitable protocol and may include wireless networks wired networks or fiber optic networks.

Also the various methods or processes outlined herein may be coded as software that is executable on one or more processors that employ any one of a variety of operating systems or platforms. Additionally such software may be written using any of a number of suitable programming languages and or conventional programming or scripting tools and also may be compiled as executable machine language code or intermediate code that is executed on a framework or virtual machine.

In this respect the invention may be embodied as a computer readable medium or multiple computer readable media e.g. a computer memory one or more floppy discs compact discs optical discs magnetic tapes flash memories circuit configurations in Field Programmable Gate Arrays or other semiconductor devices etc. encoded with one or more programs that when executed on one or more computers or other processors perform methods that implement the various embodiments of the invention discussed above. The computer readable medium or media can be transportable such that the program or programs stored thereon can be loaded onto one or more different computers or other processors to implement various aspects of the present invention as discussed above.

The terms program or software are used herein in a generic sense to refer to any type of computer code or set of computer executable instructions that can be employed to program a computer or other processor to implement various aspects of the present invention as discussed above. Additionally it should be appreciated that according to one aspect of this embodiment one or more computer programs that when executed perform methods of the present invention need not reside on a single computer or processor but may be distributed in a modular fashion amongst a number of different computers or processors to implement various aspects of the present invention.

Computer executable instructions may be in many forms such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.

Various aspects of the present invention may be used alone in combination or in a variety of arrangements not specifically discussed in the embodiments described in the foregoing and is therefore not limited in its application to the details and arrangement of components set forth in the foregoing description or illustrated in the drawings. For example aspects described in one embodiment may be combined in any manner with aspects described in other embodiments.

Use of ordinal terms such as first second third etc. in the claims to modify a claim element does not by itself connote any priority precedence or order of one claim element over another or the temporal order in which acts of a method are performed but are used merely as labels to distinguish one claim element having a certain name from another element having a same name but for use of the ordinal term to distinguish the claim elements.

Also the phraseology and terminology used herein is for the purpose of description and should not be regarded as limiting. The use of including comprising or having containing involving and variations thereof herein is meant to encompass the items listed thereafter and equivalents thereof as well as additional items.

