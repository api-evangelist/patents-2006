---

title: Method and data processing system for managing user roles
abstract: The illustrative embodiment provides a computer implemented method, a data processing system, and a computer program product for managing user roles. A customization application receives a request to modify a user role for an application. In response to the request, the customization application allows a user to modify a set of features associated with the user role to form a set of customized features. A role database stores the set of customized features for the user role. The user roles in the role database are available for use by a plurality of users of the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07676498&OS=07676498&RS=07676498
owner: International Business Machines Corporation
number: 07676498
owner_city: Armonk
owner_country: US
publication_date: 20060605
---
The present invention relates generally to an improved data processing system and in particular to a method and apparatus for managing user roles. Still more particularly the present invention relates to a computer implemented method data processing system and computer program product for managing user roles.

Typically a single application provides more functionality than most users require. As a result many features in an application are rarely if ever used by an individual user. In some cases only ten percent of the features within an application are ever used. Consequently many features in an application only add clutter and take up space on a user s monitor without providing additional value to the user. The situation is exacerbated for applications that allow for extensions or plug ins as the number of features can grow without bounds depending on which extensions are installed.

In some applications users are able to choose which features to display on their personal graphical user interface. A user may choose to display certain toolbars and not others. Other applications provide the user some ability to customize which buttons appear in the toolbars. However in general the user has either limited or no ability to customize the graphical user interface. Even when users do have the capability for some customization the customization process is cumbersome and requires users to customize their graphical user interfaces in detail. As a result little incentive exists for users to take advantage of the customizations.

Recently several applications have made the process of customization easier. One application introduced the idea of turning on and off groups of functions. Another application introduced the idea of customizing based on the identified programming skill of a user. However in both applications users are still limited on the amount of customization which can be incorporated. In the described applications developers of the application or plug ins predetermine the functions that are within each group. The user typically does not have any control or input on the groupings of the functions. The user can only customized the available functions based on the predefined groupings even if the groupings may not be exactly what is needed by the user. Furthermore a user typically does not have the ability to share any of the changes and customizations with other users that may have the same needs as the user. As a result the utility of the customization tools is still severely limited.

The illustrative embodiment provides a computer implemented method a data processing system and a computer program product for managing user roles. A customization application receives a request to modify a user role for an application. In response to the request the customization application allows a user to modify a set of features associated with the user role to form a set of customized features. A role database stores the set of customized features for the user role. The user roles in the role database are available for use by a plurality of users of the application.

With reference now to the figures and in particular with reference to exemplary diagrams of data processing environments are provided in which embodiments of the illustrative embodiment may be implemented. It should be appreciated that are only exemplary and are not intended to assert or imply any limitation with regard to the environments in which the illustrative embodiment may be implemented. Many modifications to the depicted environments may be made without departing from the spirit and scope of the illustrative embodiment.

With reference now to the figures depicts a pictorial representation of a network of data processing systems in which the illustrative embodiment may be implemented. Network data processing system is a network of computers in which embodiments of the illustrative embodiment may be implemented. Network data processing system contains network which is the medium used to provide communications links between various devices and computers connected together within network data processing system . Network may include connections such as wire wireless communication links or fiber optic cables.

In the depicted example server and server connect to network along with storage unit . In addition clients and connect to network . These clients and may be for example personal computers or network computers. In the depicted example server provides data such as boot files operating system images and applications to clients and . Clients and are clients to server in this example. Network data processing system may include additional servers clients and other devices not shown.

In the depicted example network data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages. Of course network data processing system also may be implemented as a number of different types of networks such as for example an intranet a local area network LAN or a wide area network WAN . is intended as an example and not as an architectural limitation for different embodiments of the illustrative embodiment.

With reference now to a block diagram of a data processing system is shown in which aspects of the illustrative embodiment may be implemented. Data processing system is an example of a computer such as server or client in in which computer usable code or instructions implementing the processes for embodiments of the illustrative embodiment may be located.

In the depicted example data processing system employs a hub architecture including north bridge and memory controller hub NB MCH and south bridge and input output I O controller hub SB ICH . Processing unit main memory and graphics processor are connected to NB MCH . Graphics processor may be connected to NB MCH through an accelerated graphics port AGP .

In the depicted example local area network LAN adapter connects to SB ICH . Audio adapter keyboard and mouse adapter modem read only memory ROM hard disk drive HDD CD ROM drive universal serial bus USB ports and other communication ports and PCI PCIe devices connect to SB ICH through bus and bus . PCI PCIe devices may include for example Ethernet adapters add in cards and PC cards for notebook computers. PCI uses a card bus controller while PCIe does not. ROM may be for example a flash binary input output system BIOS .

HDD and CD ROM drive connect to SB ICH through bus . HDD and CD ROM drive may use for example an integrated drive electronics IDE or serial advanced technology attachment SATA interface. Super I O SIO device may be connected to SB ICH .

An operating system runs on processing unit and coordinates and provides control of various components within data processing system in . As a client the operating system may be a commercially available operating system such as Microsoft Windows XP Microsoft and Windows are trademarks of Microsoft Corporation in the United States other countries or both . An object oriented programming system such as the Java programming system may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system Java is a trademark of Sun Microsystems Inc. in the United States other countries or both .

As a server data processing system may be for example an IBM eServer pSeries computer system running the Advanced Interactive Executive AIX operating system or the LINUX operating system eServer pSeries and AIX are trademarks of International Business Machines Corporation in the United States other countries or both while LINUX is a trademark of Linus Torvalds in the United States other countries or both . Data processing system may be a symmetric multiprocessor SMP system including a plurality of processors in processing unit . Alternatively a single processor system may be employed.

Instructions for the operating system the object oriented programming system and applications or programs are located on storage devices such as HDD and may be loaded into main memory for execution by processing unit . The processes for embodiments of the illustrative embodiment are performed by processing unit using computer program product which may be located in a memory such as for example main memory ROM or in one or more peripheral devices and .

Those of ordinary skill in the art will appreciate that the hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the illustrative embodiment may be applied to a multiprocessor data processing system.

In some illustrative examples data processing system may be a personal digital assistant PDA which is configured with flash memory to provide non volatile memory for storing operating system files and or user generated data.

A bus system may be comprised of one or more buses such as bus or bus as shown in . Of course the bus system may be implemented using any type of communication fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture. A communication unit may include one or more devices used to transmit and receive data such as modem or network adapter of . A memory may be for example main memory ROM or a cache such as found in NB MCH in . The depicted examples in and above described examples are not meant to imply architectural limitations. For example data processing system also may be a tablet computer laptop computer or telephone device in addition to taking the form of a PDA.

The illustrative embodiments provide a computer implemented method a data processing system and a computer program product for managing user roles. A customization application receives a request to modify a user role for an application. In response to the request the customization application allows a user to modify a set of features associated with the user role to form a set of customized features. A role database stores the set of customized features for the user role. The user roles in the role database are located in a local storage or a remote storage shared by a plurality of different users and is available for use by a plurality of users of the application.

User interface is any device that allows a user to interact with framework . Examples of user interface include a video display monitor or a PDA display. Typically users interact with user interface using a keyboard or a mouse. Additionally users typically work with various graphical user interfaces on user interface to manage and control features within framework .

Framework embodies program code that is loaded and resides in the main memory of data processing system . The main memory is similar to main memory of . Framework is a defined support structure in which another software application may be organized developed and deployed. Framework allows developers to build an application on an existing platform rather than creating an application from the beginning. Framework connects various components of a software project such as support programs code libraries script language or other software to enable a user to build a new application. In these examples framework can be any software framework such as a browser the Eclipse software a product managed by the Eclipse Foundation Incorporated of Ottawa Ontario Canada or the Rational Application Developer software Rational is a trademark of International Business Machines Corporation in the United States other countries or both .

In the illustrative embodiment framework includes initialization code role database customization application and user interface container . Initialization code is an algorithm executed when a platform initializes or is turned on. Depending upon the implementation initialization code also initializes framework application plug in and plug in and role database . Initialization code may also provide an opportunity for application plug in and plug in to perform any necessary initialization tasks such as initializing critical memory locations and starting software services. In the illustrative embodiment initialization code extracts information such as user roles and the functions associated with the user roles from application plug in and plug in and .

Application is any software application including a plug in or extensible software. Application is any software application that provides a large number of functions for a variety of user types and is built on top of framework . For example any Microsoft Office software Microsoft is a trademark of Microsoft Corporation in the United States other countries or both and many Eclipse based applications such as Rational Application Developer can be considered software applications with a large number of functions for a variety of user types. In the illustrative embodiment application is an individual software application.

Plug ins and are software applications that support additional features within the original software application such as application . For example a plug in may allow an integrated development tool to support a different programming language provide additional fonts support an animated movie or extend the base of an internet browser by adding an additional toolbar. Other plug ins may also further extend plug ins and .

In the illustrative embodiment application plug in and plug in each provides default user role information. The default user role information is information that is predefined and preprogrammed in application plug in and plug in . The default user role information includes a list of default user roles and the functions associated with each default user role. A user role is a role that can be adopted by a user and has a specific set of functions and responsibilities associated with the role. For example some applications have a novice intermediate and advanced user role. In other applications the user role may relate to the titles existing in an organization such as business analyst developer or tester. In either situation specific functions are associated with each user role type. For example a novice user may only have access to view save and print an application while an advanced user may have access to change and customize all components within the application. Likewise a business analyst may have access to tools supporting the definition of business models and business processes while a developer may have access to tools supporting the creation and modification of the algorithms associated with the application.

Typically the provider of the application that a plug in supports does not create the plug in. Therefore in some circumstances the default user role information in an application may differ from the default user role information in a plug in. However in other circumstances the default user role information in an application and plug in may be the same. In the illustrative embodiment application plug in and plug in each provide a separate list of default user role information.

Initialization code extracts the default user role information from within application plug in and plug in . The default user role information may be stored in a table a flat file an Extensible Markup Language XML file a relational database management system or any combination thereof. If the definitions for the default user role information are stored in a flat file or an Extensible Markup Language XML file the initialization code uses a text parsing method to extract the information. If the definitions for the default user role information are stored in a relational database management system the appropriate Application Programming Interfaces APIs are used to extract the information. However the illustrative embodiment is not limited to the described embodiment. One of ordinary skill in the art will recognize that other techniques for extracting information from application plug in and plug in also exist.

After extracting the information initialization code sends the extracted default user role information to role database . Role database is a repository that collects stores and reconciles user role information. Role database can be a table a flat file an Extensible Markup Language XML file a relational database management system or any combination thereof.

Role database contains two sets of user role information default and customized. In general in the illustrative embodiment application plug in and plug in provide the default user role information. Initialization code extracts the default user role information from application plug in and plug in . Role database accepts the default user role information from initialization code .

Role database accepts customized user role information from customization application . Customized user role information is any previously modified default user role information. The modification may be to the original default user role information to default user role information already modified by a user or any newer version of the default user role information. Modified default user role information is any information in which a user changed such as added information deleted information or information that is associated with another user role. A customization is any modification to the default user role information.

The illustrative embodiment provides that the customized user role information may include customized user role information only default user role information only or a combination of customized and default user role information. The type of information included in the customized user role information depends upon the amount of information that a user modifies. If a user does not modify any of the default user role information then role database copies and saves the default user role information as the customized user role table. If a user modifies all the default user role information then the customized user role information includes only the modifications made by the user. If however a user only modifies some of the default user role information then the customized user role information will include both the modified information as well as the default user role information that remained unchanged.

In an alternative embodiment the customized user role information may not exist at all if a user does not modify any of the default user role information. Thus instead of copying the default user role information into customized user role information only the default user role information will exist in role database . One of ordinary skill in the art can easily adapt role database to include only the default user role information. In the illustrative embodiment role database copies the default user role information into the customized user role information.

The illustrative embodiment also allows role database to be updated with new default user role information. Updates of default user role information will occur when a newer version of application plug in or plug in interacts with data processing system . If a newer version of application plug in or plug in is introduced the customized user role information is updated and merged with the updated default user role information.

Initialization code manages the updated information from application plug in and plug in . Initialization code compares the default user role information from application plug in and plug in with the default user role information stored in the role database . The default user role information stored in role database is the information residing in role database since the last time application plug in and plug in interacted with data processing system . The default user role information from application plug in and plug in is the present or updated version of the default user role information.

If initialization code determines that additional default user role information exists in the updated version of application plug in or plug in initialization code adds the new information to the customized user role information in role database . For default user role information that is deleted or no longer existing in application plug in or plug in initialization code removes the corresponding default entries from the customized user role information in role database . For functions whose user role associations have changed initialization code will first determine if a user previously modified the user role association with that function. To determine whether the user role was modified initialization code first compares the customized user role information in the role database with the default user role information stored in role database . If the customized user role information is the same as the default user role information in role database then no modification occurred for the particular function. In that circumstance initialization code deletes and replaces the corresponding entries in the customized user role information with the updated user role information from application plug in or plug in . However if the customized user role information differs from the default user role information in role database then initialization code retains the customized user role information and role database sends a message to the user indicating that a different or updated version of application plug in and plug in is available.

In an alternative embodiment initialization code instead of role database can send a message to the user indicating that a different or updated version of application plug in or plug in is available. In yet another embodiment initialization code may send a message to user interface container and allow user interface container to contact the user regarding the changes.

Once the user receives the message the user through user interface is given the opportunity to determine whether to retain the customized user role information or replace the customized user role information with the updated default user role information. A user may also choose to further modify the updated user role. Role database adds the information to the customized user role information.

After the customized user role information is updated the default user role information stored in role database is replaced with the updated default role information. The updated default user role information is used when application plug in or plug in is updated in future.

In an alternative embodiment customization application may manage the updated information. In this embodiment customization application will first import the default user role information from role database and the updated default user role information from application plug in or plug in . Customization application will then compare the default user role information from role database with the default user role information from application plug in or plug in . Customization application will then use a similar process for updating the old default and customized user role information. After updating the user role information customization application will then send the updated information to role database . Role database will then replace the old user role information with the new user role information.

A user can create customized user role information using customization application . Typically any user whether an individual user or a system administrator can modify the default user roles. Once customized user role information is created a user can share the customized user role information with other users.

Role database sends customized user information to user interface container . User interface container stores manages and determines which features are displayed to a user on user interface . In the illustrative embodiment user interface container includes features and . A feature is a graphical representation of a function from a particular software application such as application plug in and plug in . A feature is typically displayed on a graphical user interface. Examples include a save document icon a views toolbar or a command menu. In the illustrative embodiment feature is a views toolbar and feature is an icon for compiling a program. However user interface container is not limited to the illustrative embodiments. User interface container may contain more or less features with each feature representing a plurality of functions.

In use user interface container receives a communication from the user at user interface on what role the user is requesting. The user role can be pre determined prior to platform initialization or is dynamically specified by the user at user interface . A user role is dynamically specified if the user role is specified at any time after the platform is initialized. Before user interface is displayed to the user the information in role database is sent to user interface container . Application plug in and plug in also sends all available features to user interface container . User interface container then matches the features with the functions listed in role database for a particular role. Only the features associated with functions that are relevant for the user role specified by the user are then sent to user interface for use with application plug in and plug in .

In the illustrative embodiment the role database includes customized user roles table and default user role table . Customized user roles table is a table created by a user for the application. A user utilizes a customization application such as customization application of to create a table such as customized user roles table . Default user roles table is a table of the default user roles and the associated functions for the default user roles. Default user roles table is provided by a particular version of an application or plug in such as application plug in and plug in of . Customized user role table is typically based upon the information provided by default user roles table .

Customized user roles table includes user role column user interface feature column plug in column and plug in version column . User role column contains entries of the user roles that are customized from a list of default user roles. User interface feature column is a list of functions the user has designated for each user role. In the illustrative embodiment user interface feature column is a list of menu items available for each user role. In other embodiments user interface feature column may include a list of perspectives or views available to each user role. Plug in column lists from which plug in user interface feature originates. Plug in version column lists the version of the plug in listed in plug in column that supplies the function listed in the user interface feature column.

Each row in the rows through represents an association between a user role and a function. In other words the function listed in the row is associated with the user role specified in the row. In the illustrative embodiment row shows that a user in the architect user role has an associated impact analysis function. The impact analysis function is provided by the program analysis plug in version 6.0.1. Row illustrates a user in the developer user role that has an associated function to run unit test. The run unit test function is provided by the test plug in version 6.0.1.Row demonstrates a Java developer with an associated function of Java compile. The Java compile function originates from Java plug in version 6.0.1.2. Rows through depicts a developer for a Java Platform Enterprise Edition also known as a J2EE developer with associated functions to deploy and build Enterprise Java Beans EJB . The functions originate from Java Platform Enterprise Edition J2EE plug in version 6.0.1.1. Row illustrates a deployer with an associated function to build Enterprise Java Beans EJB . The function originates from Java Platform Enterprise Edition version 6.0.1.1. In an alternative embodiment a given user role in customized user roles or user interface feature in user interface feature column may appear in multiple rows in customized user role table as a user role can be associated with many user interface features and a user interface feature may be associated with many user roles.

Default user roles table is similar to customized user roles table except that each entry in default user role table contains the default user role and the default functions associated with the user role as provided by a particular application or plug in. Default user roles table includes user roles column user interface feature column plug in column and plug in version column . User roles column contains entries for all the default user roles. The default user roles are pre defined by an application and the installed plug ins. User interface feature column are the default functions associated with the user roles listed in user role column . In the illustrative embodiment user interface feature column is a list of menu items available for each user role. Plug in column lists the plug in from which the function in the user interface feature column originates. Plug in version column lists the version of the plug in listed in plug in column that supplies the function listed in the user interface feature column .

Rows through show the default functions associated with each default user role. Row indicates that the impact analysis function is associated with the architect user role. The user role and the associated functions are provided and defined by program analysis plug in version 6.0.1. Row shows the developer role associated with the run unit test function. The user role and the associated functions are provided and defined by test plug in version 6.0.1. Row demonstrates the Java developer associated with the Java compile function with the function originating from the Java plug in version 6.0.1.2. Row shows the developer for the Java Platform Enterprise Edition J2EE associated with to build Enterprise Java Beans EJB . The user role and the associated function are provided and defined by Java Platform Enterprise Edition plug in version 6.0.1.1. Row illustrates the deployer user role associated with the function to deploy Enterprise Java Beans EJB . The user role and the associated functions are provided and defined by Java Platform Enterprise Edition plug in version 6.0.1.1.

Customized user role table is used by a user interface container such as user interface container of to determine the user interface features that should appear in a user interface such as user interface of . Default user roles table is used in conjunction with the customized user role table to determine exactly which user roles and associated functions are customized. To determine which rows are customized an algorithm executed in the processor of a data processing system compares the information in rows through against the information in rows through . The information that is different indicates the user roles that are customized. For example in the illustrative embodiment the Impact Analysis feature in row Run Unit Test feature in row and Java Compile feature in row correspond with the same user default user roles in corresponding rows and . Therefore the architect developer and Java developer user roles are not customized in customized user role table . On the other hand Enterprise Java Bean EJB Deploy is associated with the Java Platform Enterprise Edition J2EE Developer role in customized user role table . Similarly the Enterprise Java Bean Build role is associated with both the Java Platform Enterprise Edition J2EE Developer role and the Deployer role in customized user role table . The same associations do not exist in default user role table . For example rows and do not show the same associations. Therefore in the illustrative embodiment Java Platform Enterprise Edition J2EE Developer role and the Deployer are customized user roles.

The illustrative embodiments are not limited to the depicted example. For example a customized user role can be associated with multiple user interface features. Additionally the same user interface feature can be associated with multiple user roles. Moreover one of ordinary skill in the art will recognize other methods for comparing two sets of information.

In the illustrative embodiment the user interface container includes the features listed in table . A feature is the graphical representation of a function typically displayed as a graphical user interface. Examples of a user interface feature include menu items views and perspectives. In the illustrative embodiment table illustrates user role and the available perspective view and menu features for the user role. The determination of which features are available to a user is based upon information contained in a role database. The role database gathers and lists all the user roles and the functions associated with the user roles.

The user interface container takes the information from the role database and translates the functions into a feature. The features are provided to the user interface container directly by an application or plug in. The association of the function to the feature is typically encoded within the application or plug in. The association may also be described as a text file database or any other similar format within an application or plug in. If the information for the specified user role is modified in the role database the user interface container presents a set of customized features to the user. If the information in is not modified the user interface container presents a set of default features to the user.

In the illustrative embodiment perspective is the predefined layout of user interface features that are intended to support particular tasks and are available to a user in the corresponding user roles listed in the user role column . View is the type of view available within each perspective available to a user in user role . Menu is a list of the menus that will be displayed to a user in user role . Rows through illustrate the available features for each user role.

In these illustrative examples the architect user role described in rows and can choose between the business model and the Unified Modeling Language UML perspectives. For the architect in the business model perspective shown in row the displayed features are a class diagram a sequence diagram and an impact analysis menu. For the architect in the unified modeling language perspective shown in row the displayed features are a class diagram a sequence diagram and an impact analysis menu. For the developer user role shown in row the displayed features are a unit test perspective sequence diagram unit test view and run unit tests menu. For the Java developer shown in row the displayed features are a Java perspective Java source editor view and Java compile menu. For the Java Platform Enterprise Edition J2EE developer shown in row a Java Platform the displayed features are Enterprise Edition J2EE perspective Java Platform Enterprise Edition J2EE server view and a Enterprise Java Beans EJB build and deploy menu.

The illustrative embodiments are not limited to the depicted example. More or less features and user roles may also be included in the user interface container. Additionally the features illustrated may be modified to match other user roles not illustrated in the depicted example.

In the illustrative embodiment graphical user interface includes file menu edit menu and user role menu . User role menu lists the customized list of user roles for the specific user. In the illustrative embodiment user role menu lists four user roles business analyst architect developer and tester . In another embodiment user role menu may list different user roles such as novice expert or guru. In the illustrative embodiment the user selects to operate in architect user role.

In the illustrative embodiment graphical user interface is a menu displayed after the user initializes the data processing system. The user selects a user role in graphical user interface after initialization. In another embodiment the role of the user may be automatically designated prior to the data processing system initializes. In yet another illustrative embodiment the role of the user may be determined at the time the user signs into a data processing system.

In the illustrative embodiment architect graphical user interface includes two windows business model perspective window and new wizard window . In the illustrative embodiment business model perspective window contains two types of user interface features perspectives and views. The perspectives available are business model perspective and Unified Modeling Language UML perspective . In the illustrative embodiment a user can select a perspective by selecting the business model perspective or Unified Modeling Language UML perspective . In the illustrative embodiment the user selected business model perspective .

Business model perspective window also includes modeling view sequence diagram view and class diagram view . In the illustrative embodiment the listed views are only visible when business model perspective is selected. Thus a different set of views will be displayed if Unified Modeling Language UML perspective is selected.

New wizard window is a dialog window that provides a user with the opportunity to create a new file such as new class diagram or new sequence diagram . New wizard window is a separate feature defined by a user interface container such as user interface container of . Within new wizard window a user can select class diagram feature and sequence diagram feature . New wizard window also includes OK button and Cancel button . OK button allows a user to accept the feature selected in new wizard . Cancel button allows a user to abort a selection.

Architect graphical user interface is not limited to the illustrative embodiment. For example an OK and cancel button may also exist in business model perspective . Additionally depending upon the amount of customization architect graphical user interface may have more or less windows and features within each window. Architect graphical user interface may also vary depending on the defaults provided by the application or plug in. Architect graphical user interface is provided for illustrative purposes only and not meant to limit the illustrative embodiment.

In the illustrative embodiment developer graphical user interface includes two windows Java perspective window and new wizard window . In the illustrative embodiment Java perspective window contains two types of user interface features perspectives and views. The perspectives available are Java perspective and unit test perspective . In the illustrative embodiment both perspectives are buttons and a user can select a perspective by selecting a button. In the illustrative embodiment the user selected Java perspective .

Java perspective window also includes unit test view Java source view sequence diagram view and class diagram view . In the illustrative embodiment the listed views are only visible when Java perspective is selected. Thus a different set of views will be displayed if unit test perspective is selected.

New wizard window is a dialog window that provides a user with the opportunity to create a new file such as new class diagram new sequence diagram Java class or J unit test cases . New wizard window is a separate feature defined by a user interface container such as user interface container of . New class diagram new sequence diagram Java class or J unit test cases are features that can be selected by a user. New wizard window also includes OK button and Cancel button . OK button allows a user to accept the feature selected in new wizard . Cancel button allows a user to abort a selection.

Developer graphical user interface is not limited to the illustrative embodiment. Depending upon the amount of customization developer graphical user interface may have more or less windows and choices within each window. Developer graphical user interface may also vary depending on the defaults provided by the application or plug in. Developer graphical user interface is provided for illustrative purposes only and not meant to limit the illustrative embodiment.

In the illustrative embodiment customization application includes customized role database default roles and functions algorithm to create customization and algorithm to update database . A user interacts with user interface often through the use of a keyboard or mouse to create customized role database . Customized role database is the database of user roles and associated functions created by a user using customization application . Customized role database can be a table a flat file an Extensible Markup Language XML file a relational database management system or any combination thereof. Customized user role table of is an illustrative embodiment of customized role database .

Customization application reads the default roles and functions from the application and the plug ins. Default roles and functions is a list of user roles and associated functions residing in an application or plug in. To create customized role database a user modifies or changes the default roles and functions. For example a user may modify which function is associated with a particular user role or delete a particular function for a user role. In another embodiment a user may choose to change the names of the default role or function to match the roles within a business organization. Each modification and change is saved and eventually forms customized role database . The user can further modify any customized database as often as desired.

Algorithm to create customization is a computer implemented process code for enabling a user to create customized role database . Algorithm to create customization provides the tools and interfaces to change default roles and functions .

Algorithm to update database is a computer implemented process code for enabling a user to modify an already existing role database. The modification may be based simply on the desire of a user to modify the role database or based on the existence of an updated version of an application or plug in. If an updated version of an application or plug in exists algorithm to update database enables a user to modify customized role database according to the changes in the updated version or allow the user to retain the original customizations. The illustrative embodiment provides a mechanism for algorithm to update database to notify the user of a change because of an updated version of an application or plug in.

Customize user roles window includes user role view and functions view . In the illustrative embodiment user role view shows two types of developer roles which may be customized by a user COBOL role or Java role . In the illustrative embodiment the user selected to modify Java role .

In the illustrative embodiment functions view enables a user to customize current functions associated with a particular user role. Current function lists build function and display function as the functions currently associated with Java developer role . To add a function to current function a user selects add function button which in turn displays a list of additional functions that may be associated with Java developer role . The list of additional functions is provided by the specific application and installed plug ins that the user is currently customizing. To remove a function from current function the user selects remove function button .

 Export button allows a user to share the customizations with another user. OK button saves the changes made by the user in customize user roles windows . Cancel button erases the changes made by a user to customize user roles window .

To inherit a function means to adopt the functions associated with a particular user role. For example COBOL user role includes individual functions associated with COBOL user role plus functions associated with developer user role . Similarly Java user role includes individual functions associated with Java user role plus functions associated with developer user role . Likewise Java Platform Enterprise Edition J2EE user role includes individual functions associated with Java Platform Enterprise Edition J2EE user role plus functions associated with Java user role . Since Java user role also include functions from developer user role then Java Platform Enterprise Edition J2EE user role also includes functions associated with developer user role .

Hierarchy simplifies the definition and customization of a user by allowing a user role to inherit the functions of another user role. The ability to inherit functions allows a user to create a customized user database with user roles that build upon previous user roles. The inherit function allows a user to pick groups of functions to adopt rather than requiring the user to choose from a list of individual functions each time the user customizes a user role. The inherit function is a mechanism to efficiently create a customized user database. Furthermore any customizations done to a user role in a higher level will automatically be inherited by the lower level user roles. The automatic inheritance feature further simplifies the customization process.

Customize user roles window includes user roles view and functions view . In the illustrative embodiment user role view shows three types of developer roles which may be customized by a user COBOL role Java role and Java Platform Enterprise Edition J2EE role . In the illustrative embodiment user role view is structured in a hierarchy of user roles. Developer role is the first level COBOL role and Java role are in the second level and Java Platform Enterprise Edition J2EE role is in the third level. COBOL role inherits the functions for developer role . Similarly Java role inherits the functions for developer role . Java Platform Enterprise Edition J2EE role inherits the functions for Java role . Since Java Platform Enterprise Edition J2EE role inherits functions from Java role Java Platform Enterprise Edition J2EE role also inherits the functions from developer role . In the illustrative embodiment the user chooses to modify Java role .

In the illustrative embodiment functions view allows a user to modify current function . Current function lists Java compile function and open type hierarchy function as the functions currently associated with Java developer role . To add a function to current function a user selects add function button which in turn displays a list of additional functions that may be associated with Java developer role . The list of additional functions is provided by the specific application or plug ins that the user is currently customizing. To remove a function from current function the user selects remove function button .

Inherited functions lists the functions inherited by Java role . In the illustrative embodiment Java role inherits the functions of developer role . Thus inherited functions are the functions associated with developer role . In the illustrative embodiment inherited functions include build function debug function and profile function . Each of the functions in inherited function are available to the developer role the Java role and the Java Platform Enterprise Edition J2EE role which inherits from the Java role . Through the inheritance process if the user customizes the functions for developer role the modifications will be reflected in inherited functions when the user chooses to customize Java role . Similarly if the user customizes the functions for the Java role the modifications will be reflected in the inherited functions of the Java Platform Enterprise Edition role .

 Export button enables a user to share the customizations with another user. OK button saves the changes made by the user in customize user roles windows . Cancel button erases the changes made by a user to customize user roles window .

The illustrative embodiments are not limited to the depicted example. Other features may be included in or removed from the graphical user interface. Additionally alternative embodiments of the illustrative embodiment could allow the user to share and access customized user roles with multiple users.

The process begins with the role database receiving default roles and functions from the newer version of the application step . A determination is then made as to whether a customized database exists step . If a customized database does not exist no output to step then the customized user role table is populated with the updated default user roles and functions step . The role database is then sent to a user interface container step with the process terminating thereafter.

Returning to step if a customized database does exist yes output to step then the role database receives the customized database of customized user roles from a customization application step . The role database then compares the default roles and functions currently residing in the role database against the updated default roles and functions from the newer version of the application step . A determination is then made as to whether a new function exists in the newer version of the application step . If a new function does exist yes output to step then the function is added to the customized user role table step . A determination is then made as to whether there are more functions to compare step . If there are more functions to compare yes output to step then the process returns to step and repeats step through . If however there are no more functions to compare no output to step then the role database is sent to the user interface container step with the process terminating thereafter.

Returning to step if a new function does not exist no output to step a determination is made as to whether a function has been deleted from the newer version of the application step . If a function has been deleted yes output to step then the function is removed from the customized user role table step . A determination is then made as to whether there are more functions to compare step . If there are more functions to compare yes output to step then the process returns to step and repeats step through . If however there are no more functions to compare no output to step then the role database is sent to the user interface container step with the process terminating thereafter.

Returning to step if a function has not been deleted no output to step then a determination is made as to whether the user role associated with the function has changed step . If the user role associated with the function has changed yes output to step then a determination is made as to whether the function has been customized in the customized user role table step . If the function has not been customized no output to step then the corresponding entry in the customized user role table is updated with the updated information step . A determination is then made as to whether there are more functions to compare step . If there are more functions to compare yes output to step then the process returns to step and repeats step through . If however there are no more functions to compare no output to step then the role database is sent to the user interface container step with the process terminating thereafter.

Returning to step if the function has been customized yes output to step then the role database sends a message to the user that a newer version of the application now exists and the user role associated with a function is changed in the newer version step . A determination is then made as to whether there are more functions to compare step . If there are more functions to compare yes output to step then the process returns to step and repeats step through . If however there are no more functions to compare no output to step then the role database is sent to the user interface container step with the process terminating thereafter.

Returning to step if the user role associated with the function has not changed no output to step then determination is then made as to whether there are more functions to compare step . If there are more functions to compare yes output to step then the process returns to step and repeats step through . If however there are no more functions to compare no output to step then the role database is sent to the user interface container step with the process terminating thereafter.

The process begins with the user interface container receiving features from an application step . The user interface container then receives a role database for the application step . The user interface container also receives a selection of a user role for an application from a user step . The selected user role is compared against the role database step . A determination is then made as to whether a set of customized features for the selected user role exists in the role database step . If a set of customized features exists yes output to step then the user role interface sends the set of customized features to the user interface step with the process terminating thereafter. However if a set of customized features does not exist no output to step then the user role interface sends the default features associated with the selected user role to the user interface step with the process terminating thereafter.

The process beings with a determination as to whether the user wishes to create or update a customized role database step . If the user wishes to create a customized role database create output to step then the customization application determines which application and plug in set the user wishes to work with step . Then the customization application obtains the default roles and functions from the selected application or plug in step . The customization application then organizes the default roles and functions into a graphical user interface step and sends the graphical user interface to a user interface step . The customization application then receives a list of functions with modified user roles from the user interface step and creates a customized database for the user for the particular application or plug in step . The customized database is then saved step with the process terminating thereafter.

Returning now to step if the user wishes to update a customized role database update output to step then the customization application loads the customized database requested by the user step . A determination is then made as to whether a new version of the application or plug in exists step . If a new version of an application or plug in exists yes output to step then the customization application obtains the new version of default roles and functions from the application or plug in step . The customization application then compares the updated default roles with the default roles stored in the role database step . The customization application then sends a list of functions with the customized user roles along with the changed default user role information to a user interface step . The customization application then receives modifications to the customized database step and saves the modifications into the customized database step with the process terminating thereafter.

Returning now to step if the application or plug in has not been updated no output to step then the customization application sends the customized database to the user interface step receives the modifications to the customized database step and then saves the modifications step with the process terminating thereafter.

The illustrative embodiments provide a computer implemented method a data processing system and a computer program product for managing user roles. A customization application receives a request to modify a user role for an application. In response to the request the customization application allows a user to modify a set of features associated with the user role to form a set of customized features. A user modifies a set feature by changing a set of default features or an existing set of customized features. The set of default features are provided by the application. A user has the option to modify none of a portion of or all the default features. A user may modify features from any updated versions of an application as well. Furthermore a user may use an inherency function to adopt the features of another user role.

A role database stores the set of customized features for the user role. The role database may be located in a local storage such as the memory of the data processing system for the user or on a remote server that is shared by a number of different users. The user roles in the role database are available to the number of different users for use with an application.

The ability to customize user roles provides a customer or user with the capability to easily modify the features within an application. The user is not limited to customizing only predetermined groups of features but has the ability to innovatively modify any feature within the application. For example a user may create a whole new set of features associated with a particular user role or simply modify the names of a user role or feature. As a result a user can determine the level of complexity with which the customer wishes to interact with a particular application. Additionally a user has the flexibility to control the number of features available to the user and what features to display on the user interface. Since the customizations can be shared with other users other users can also benefit from existing customizations without having to modify their own user interfaces from the beginning.

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any tangible apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

