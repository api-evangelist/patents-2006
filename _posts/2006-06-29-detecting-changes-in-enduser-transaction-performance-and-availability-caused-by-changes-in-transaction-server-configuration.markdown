---

title: Detecting changes in end-user transaction performance and availability caused by changes in transaction server configuration
abstract: A method, apparatus, and computer program product for automatically detecting changes in end-user transaction performance and availability caused by a transaction server configuration change. When a configuration change to an element in a distributed computing system is proposed, a set of instrumented synthetic transactions in the distributed computer system is initiated. Access to managed resources by the synthetic transactions is tracked to produce a list of utilized resources for the transaction. The utilized resources are then categorized according to criteria including associating the utilized resources with respective transactions. The initiating, tracking, and categorizing steps are repeated after a proposed configuration change using a selected subset of the set of transactions. The effect of the proposed configuration change is then displayed for the selected subset of the set of transactions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09122715&OS=09122715&RS=09122715
owner: International Business Machines Corporation
number: 09122715
owner_city: Armonk
owner_country: US
publication_date: 20060629
---
The present invention relates generally to an improved data processing system and in particular to a method for detecting changes in end user transaction performance and availability caused by transaction server configuration changes.

Performance monitoring is often used in optimizing the use of software in a system. A performance monitor is generally regarded as a facility incorporated into a processor to assist in analyzing selected characteristics of a system by determining the state of the machine at a particular point in time. One method of monitoring system performance is to monitor the system using a transactional based view. The execution path of a transaction as it passes through an array of hosts systems application Web and proxy servers Web application servers middleware database management software and legacy back office software may be monitored and performance characteristic data compiled and stored in a data repository for historical analysis and long term planning. Sources of performance and availability problems may be isolated as they occur so that these problems can be corrected before they produce expensive outages and lost revenue.

One way in which this data may be compiled in order to test the performance of a system is to simulate customer transactions and collect performance data to help assess the health of electronic business components and configurations. Some performance monitors permit electronic business owners who need to ensure that their Web sites are available and meet performance targets to simulate customer transactions occurring on their Web sites by recording and playing back the transactions. A recording component captures performance data about actual user transactions that are executed against elements e.g. Web servers or Web application servers of the business environment. A playback component executes the recorded transactions to simulate actual user activity. These simulated transactions are known as synthetic transactions. Recording playback of transactions allows a business owner to determine the manner by which transactions are processed by the various elements of the electronic business and thus which processes are causing problems and where the processes may be improved.

Change management which is the process of developing a planned approach to change in an organization is a critical piece of a customer s enterprise system. When a performance or availability problem with a critical e business transaction is detected a customer typically wants to know what changes have been made to the infrastructure that could be the source of the problem. As one example if there is a problem in a Java 2 Platform Enterprise Edition J2EE transaction in a WebSphere Application Server WAS the system administrators are queried and asked to identify any configuration changes that have been made to WebSphere. Consequently the particular configuration changes which may have negatively impacted the J2EE transaction may then be identified. Websphere applications such as WAS are available from International Business Machines Corporation. WAS is a J2EE application server that provides an operating environment for e business applications that perform transactions over the Internet. Thus as the configuration and applications deployed to WebSphere and other J2EE servers comprise a critical piece of a customer s infrastructure it would be advantageous to minimize impacts caused by changes to WebSphere configurations.

Upon identifying configuration changes made to the system however there is currently no way to automatically isolate the specific transactions that are affected by a given configuration change. For example if the configuration of a particular Java Message Service JMS server is changed in a customer s infrastructure a system administrator has no way of determining which of the customer s transactions could be negatively impacted based on this change. In addition these configuration changes are typically performed at night when fewer transactions that rely on the resource are generated. For example an administrator may enter the desired configuration changes into a maintenance window at 2 00 am. However the administrator will not know if the configuration change has caused any performance or availability issues until a later time such as when the end users start to use the system again at 8 00 am in the morning.

Thus the current art does not provide real time results of the impact a configuration change will have on the end user s transactions. Furthermore although some of the e business applications may be identified and regression tested with the infrastructure changes it is difficult to assess the full potential impact of the changes. As a result changes to a customer s infrastructure may be under tested before deployment.

The illustrative embodiments provide a method apparatus and computer program product for automatically detecting changes in end user transaction performance and availability caused by a transaction server configuration change. When a configuration change to an element in a distributed computing system is proposed a set of instrumented synthetic transactions in the distributed computer system is initiated. Access to managed resources by the synthetic transactions is tracked to produce a list of utilized resources for the transaction. The utilized resources are then categorized according to criteria including associating the utilized resources with respective transactions. The initiating tracking and categorizing steps are repeated after a proposed configuration change using a selected subset of the set of transactions. The effect of the proposed configuration change is then displayed for the selected subset of the set of transactions.

With reference now to the figures and in particular with reference to exemplary diagrams of data processing environments are provided in which illustrative embodiments may be implemented. It should be appreciated that are only exemplary and are not intended to assert or imply any limitation with regard to the environments in which different embodiments may be implemented. Many modifications to the depicted environments may be made.

With reference now to the figures depicts a pictorial representation of a network of data processing systems in which illustrative embodiments may be implemented. Network data processing system is a network of computers in which embodiments may be implemented. Network data processing system contains network which is the medium used to provide communications links between various devices and computers connected together within network data processing system . Network may include connections such as wire wireless communication links or fiber optic cables.

In the depicted example server and server connect to network along with storage unit . In addition clients and connect to network . These clients and may be for example personal computers or network computers. In the depicted example server provides data such as boot files operating system images and applications to clients and . Clients and are clients to server in this example. Network data processing system may include additional servers clients and other devices not shown.

In the depicted example network data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages. Of course network data processing system also may be implemented as a number of different types of networks such as for example an intranet a local area network LAN or a wide area network WAN . is intended as an example and not as an architectural limitation for different embodiments.

With reference now to a block diagram of a data processing system is shown in which illustrative embodiments may be implemented. Data processing system is an example of a computer such as server or client in in which computer usable code or instructions implementing the processes may be located for the illustrative embodiments.

In the depicted example data processing system employs a hub architecture including a north bridge and memory controller hub MCH and a south bridge and input output I O controller hub ICH . Processor main memory and graphics processor are coupled to north bridge and memory controller hub . Graphics processor may be coupled to the MCH through an accelerated graphics port AGP for example.

In the depicted example local area network LAN adapter is coupled to south bridge and I O controller hub and audio adapter keyboard and mouse adapter modem read only memory ROM universal serial bus USB ports and other communications ports and PCI PCIe devices are coupled to south bridge and I O controller hub through bus and hard disk drive HDD and CD ROM drive are coupled to south bridge and I O controller hub through bus . PCI PCIe devices may include for example Ethernet adapters add in cards and PC cards for notebook computers. PCI uses a card bus controller while PCIe does not. ROM may be for example a flash binary input output system BIOS . Hard disk drive and CD ROM drive may use for example an integrated drive electronics IDE or serial advanced technology attachment SATA interface. A super I O SIO device may be coupled to south bridge and I O controller hub .

An operating system runs on processor and coordinates and provides control of various components within data processing system in . The operating system may be a commercially available operating system such as Microsoft Windows XP Microsoft and Windows are trademarks of Microsoft Corporation in the United States other countries or both . An object oriented programming system such as the Java programming system may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system Java and all Java based trademarks are trademarks of Sun Microsystems Inc. in the United States other countries or both .

Instructions for the operating system the object oriented programming system and applications or programs are located on storage devices such as hard disk drive and may be loaded into main memory for execution by processor . The processes of the illustrative embodiments may be performed by processor using computer implemented instructions which may be located in a memory such as for example main memory read only memory or in one or more peripheral devices.

The hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the illustrative embodiments may be applied to a multiprocessor data processing system.

In some illustrative examples data processing system may be a personal digital assistant PDA which is generally configured with flash memory to provide non volatile memory for storing operating system files and or user generated data. A bus system may be comprised of one or more buses such as a system bus an I O bus and a PCI bus. Of course the bus system may be implemented using any type of communications fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture. A communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. A memory may be for example main memory or a cache such as found in north bridge and memory controller hub . A processing unit may include one or more processors or CPUs. The depicted examples in and above described examples are not meant to imply architectural limitations. For example data processing system also may be a tablet computer laptop computer or telephone device in addition to taking the form of a PDA.

One or more servers such as server may provide Web services of an electronic business for access by client devices such as clients and . A transaction performance monitoring system is provided for monitoring performance of components of the Web server and its enterprise back end systems in order to provide data representative of the enterprise business performance in handling transactions. In one exemplary embodiment this transaction performance monitoring system is IBM Tivoli Monitoring for Transaction Performance TMTP which measures and compiles transaction performance data including transaction processing times for various components within the enterprise system error messages generated and the like.

The illustrative embodiments provide an improved transaction performance monitoring system for detecting changes in end user transaction performance and availability caused by transaction server configuration changes. The monitoring system discovers in real time when a configuration change has been made to a customer s infrastructure and then determines how these infrastructure changes may potentially impact end user transaction performance and availability. A report is then provided to the system administrator which details the impact the particular changes will have on the end user transactions. Thus the monitoring system may immediately detect when an infrastructure change is made to the enterprise system poll all of the transactions which may potentially be affected by the detected change and report the effect of the change to the administrator in business terms. For example the administrator may be notified that due to the change an end user cannot login to a Web site add a book to the user s cart etc.

The monitoring system may employ various transaction processing technologies for identifying transactions in an enterprise. In one example dynamically inserted just in time instrumentation JITI probes may be positioned at various entry points in the enterprise system to discover the transactions and identify the Uniform Resource Locators URLs specified in the end user transactions. An end user transaction is a transaction that a customer uses to accomplish a business goal. An exemplary method of using JITI probes to identify URLs in the transactions may be found in co pending U.S. patent application Ser. No. 10 965 214 filed on Oct. 14 2004. The JITI probes may monitor the recorded transactions and determine which applications and resources each transaction relies on to perform its function. The JITI probes track the resource lookup type functionality specified in the transactions. In one example the resource lookup type functionality may be Java Naming and Directory Interface JNDI is an API for directory services which allows for the discovery and lookup of data and objects via a name. Thus the monitoring system uses a resource lookup type functionality to link each transaction to the resources it accesses. This transaction resource link information is stored in a database and categorized according to transactional boundaries.

A notification listener is also employed in the monitoring system to immediately detect changes to a customer s infrastructure. The managed resources are monitorable items in that they use a publish subscribe paradigm to announce configuration changes to their properties. Thus by subscribing to these monitorable items the notification listener may be notified when a configuration change occurs. In one example each resource within the transaction server s configuration is a Java Management Extension JMX MBean. JMX is a Java technology that supplies tools for managing and monitoring applications system objects devices e.g. printers and service oriented networks. An MBean managed bean is a Java object that represents a manageable resource such as an application a service a component or a device. As MBeans have a publish subscriber paradigm the notification listener may subscribe to listen to particular MBeans. Consequently if properties of one of the MBeans changes the MBean fires an event to the subscribers of the MBean. Thus the notification listener receives a notification from an MBean that a particular resource configuration change has occurred and this notification provides the trigger that informs the monitoring system that the changes to the resource should be tested with regard to all of the transactions that may be affected by the change. The change to the resource and the potentially affected transactions are automatically tested by the monitoring system by running the recorded transactions to determine if the change has negatively affected the performance or availability of the transactions. This determination may be made by comparing each recorded transaction against a baseline transaction such as a transaction recorded prior to the configuration change. A report may then be generated which illustrates the potential transaction outcomes of the configuration change on the transactions performance and availability. The system administrator may use the report to decide whether to manually rollback the configuration change based on the performance and availability evaluation. Thus with the monitoring system in the illustrative embodiments a system administrator may be immediately informed of a configuration change in the transaction servers and the potential consequences the change will have on the transactions that use the changed resource.

The monitoring system described in the illustrative embodiments provide many advantages over existing systems such as allowing a system administrator to obtain real time results of a transaction server configuration change. The monitoring system may also provide a system administrator with scenarios of optimization to determine if transaction performance is better or worse because of the change. For example when a particular configuration on a resource is set the monitoring system may poll all of the recorded transactions which use the resource to immediately determine if transaction performance has been improved by the configuration change. If the performance has improved the system administrator may keep the change. If performance did not improve the system administrator may try another configuration to the resource.

Turning now to an exemplary diagram of an electronic business system transaction performance monitoring architecture is shown in accordance with an illustrative embodiment of the present invention. Client devices are examples of client devices such as clients in . Transaction server is an example of a server such as servers and in . Client devices may communicate with transaction server in order to obtain access to services provided by the back end enterprise computing system resources . Monitoring server is provided for monitoring the processing of transactions by the transaction server and back end enterprise computing system resources .

Transaction server back end enterprise computing system resources and monitoring server are part of an enterprise system. Client devices may submit requests to the enterprise system via transaction server causing transactions to be created. The transactions are processed by transaction server and back end enterprise computing system resources with monitoring server monitoring the performance of transaction server and back end enterprise computing system resources as they process the transactions. The components of transaction server and back end enterprise computing system resources may include both hardware and software components. For example the components may include host systems JAVA Server Pages servlets entity beans Enterprise Java Beans data connections and the like. Each component may have its own set of performance characteristics which may be collected and stored by monitoring server in order to obtain an indication as to how the enterprise system is handling transactions. This performance monitoring involves collecting and storing data regarding performance parameters of the various components of transaction server and back end enterprise computing system resources . For example monitoring of performance may involve collecting and storing information regarding the amount of time a particular component spends processing the transaction a SQL query component information including class name and instance ID in the Java Virtual Machine JVM memory usage statistics any properties of the state of the JVM properties of the components of the JVM and or properties of the system in general.

JITI resides within transaction server process . In this illustrative example JITI is shown to be implemented in Web Services Enterprise Java Beans EJB JMS Java Database Connectivity JDBC code and Java Naming and Directory Interface JNDI registry. JITI custom instruments the user s code to add JITI s own logic to the user s code without requiring users to make any code changes on themselves. A JITI probe is a program that is inserted at a customizable entry point URL for the purpose of monitoring or collecting data about a business transaction. JITI tracks the Uniform Resource Locators URLs visited by customers and collects data related to system performance. When a call is made by one of these component codes a JITI probe is inserted into the call. Thus a JITI probe will be inserted into each DB2 call the user s code makes each JMS call the user s codes makes etc. A JITI monitoring agent such as monitoring agent passively listens to each call to determine the URL for the transaction as well as each sub transaction associated with that URL. In other words JITI is used to passively identify what URLs are involved in a transaction and what sub transactions e.g. DB2 JMS Web Service Remote Method Invocation RMI calls are initiated from those URLs. The monitored transaction data obtained by monitoring agent may be uploaded to monitoring server .

Monitoring server may also allow administrators to record and playback business transactions occurring on their Web sites. A recording component captures performance data about actual user transactions that are executed against elements e.g. Web servers Web application servers of the business environment. A playback component executes the recorded transactions to simulate actual user activity. These simulated transactions also known as synthetic transactions are used to ensure performance and availability of critical e business applications. For example monitoring server informs synthetic transaction engines playback agents in the enterprise which recorded transactions are scheduled to be played back. Monitoring server sends transaction playback schedules and transaction specifics to synthetic transaction playback agents . Synthetic transaction engine playback agents pull these transactions from database and play them back. Synthetic transaction playback agent sends the results of the playback to monitoring server .

JITI probes in a resource lookup component such as JNDI registry monitor each recorded synthetic transaction during playback to determine which resources within a J2EE application server the transactions utilize. JNDI is an application programming interface API for directory services which allows for the discovery and lookup of data and objects via a name. The JITI probes track the lookups of the managed resources that each transaction relies on to perform its function. Monitoring agent obtains the lookup information from the JITI probes and links each transaction to the managed resources the transaction utilizes. Monitoring agent then uploads a list of the managed resources for each transaction to monitoring server where the list is stored in a database such as database .

The managed resource information is categorized by monitoring server . A separate thread within monitoring server runs at a configurable interval to periodically categorize the resource information along transactional boundaries. This categorized resource information is also stored in database . WebService is also provided within monitoring server to allow administration console hosted within transaction server host to query database via monitoring server . The categorized list in the database is queried when a managed resource or application is subsequently modified and monitoring server uses the categorized resource information to determine potential transactional outcomes and return the information to the system administrator via administration console . For instance JITI probes may detect that the transaction identified by the URL http myhost BuyBook uses three JNDI resources such as jms BookBuyQueue jdbc BookInStockCatalog and the ejb BuyBookBean . These three JNDI resources may then be associated in the monitoring server database with the http myhost BuyBook transaction and categorized. Another transaction http myhost Login only may be detected as using the jdbc UserInfo resource . This transaction resource association is also stored in the monitoring server database and categorized. Consequently if the jdbc BookInStockCatalog resource is updated the potential impact report will list the http myhost BuyBook transaction but not the http myhost Login transaction.

Notification listener is registered within transaction server process to listen to resource configuration changes. As previously mentioned one example of a monitorable resource item using a publish subscribe paradigm to announce configuration changes to its properties is a Java Management Extension JMX MBean. A JMX MBean is a Java object that represents a manageable resource. Notification listener subscribes to listen to specific MBeans. An MBean notification is sent to the notification listener whenever the resource has been updated within the transaction server configuration. Notification listener parses the MBean notification to determine which resource configuration has changed. This notification provides the trigger that informs the monitoring system that the changes to the resource should be tested with regard to all of the transactions that may be affected by the change. Although a MBean notification is used in this particular example any other monitorable item having a publish subscribe paradigm may be used to announce to the notification listener that a configuration change has occurred.

The resource configuration change and the potentially affected transactions are automatically tested by monitoring server by using synthetic transaction playback agents to run the recorded transactions. Potentially affected transactions are the transactions that utilize the changed resource. The potentially affected transactions are played back to determine if the resource change has negatively affected the performance or availability of the transactions. This determination may be made by comparing each recorded transaction against a baseline transaction. For example a baseline may contain averages between the new transaction performance measurements after the configuration change was made e.g. take 10 samples over 2 hours or the baseline may contain minimum maximum or average values of the transaction s performance measured before the configuration changes were made. The monitoring system is aware of all previously recorded transactions so any previously recorded transaction may be used as the baseline transaction.

The transactional outcomes of the configuration change on performance and availability may be presented to an administrator in a report within administration console . In this manner a system administrator may be immediately informed of a configuration change and the potential consequences the change will have on the transactions that utilize the changed resource. The system administrator may use the information in the report to determine whether to manually rollback the configuration change based on the performance and availability evaluation.

The monitoring system in the illustrative embodiments may test the performance and availability of all of the transactions which are potentially affected by a detected configuration change. Thus while existing methods may manually test only commonly used transactions before deployment after a resource change the monitoring system in the illustrative embodiments provides more complete testing by rerunning all of the potentially affected transactions to verify that the change has not caused a performance of availability problem regardless of how often a transaction is used.

In this illustrative example configuration change impact panel comprises information regarding the specific resource that has been modified. Configuration change impact panel includes various columns such as JNDI name object type difference transactions impacted and potential cost . JNDI name comprises the names of the resources referenced by the transaction such as ejb Buy Book Bean . Object type specifies the type of the resource. Difference specifies the number of configuration changes that were made to the resource. Transactions impacted specifies the number of transactions affected by the changes. Potential cost may be calculated by adding up the dollar value of each of the transactions potentially affected by the change. Initially the value of the average profit that the business receives for each transaction may be manually input by the administrator through the monitoring administration user interface. The average profit value of each transaction is then stored in a database and associated with the corresponding transaction. Based on the average number of transactions a maximum potential cost is calculated and immediately displayed to the administrator in potential cost column in configuration change impact panel . For instance if a given transaction runs 100 times a day and the transactions earn an average of 2 per transaction the maximum potential cost to the business of modifying a transaction server configuration item that would negatively impact the transactions would be 200 per day. Potential cost column assumes a worst case scenario wherein the transaction is totally unavailable for the day based on the configuration change and thus calculates all of the profit the business would lose in that worst case scenario.

Based upon the information in configuration change impact panel the administrator may persist the changes to the configuration repository by selecting accept changes button . If the administrator does not want to keep the configuration changes the administrator may select cancel button . The administrator may also select schedule report button to schedule the affected transactions for playback over a certain time period. Although the synthetic transactions may be executed once or twice to obtain performance information running the transactions over an extended time period allows one to more fully perceive what the outcomes of the configuration change will be. At a later point in time the administrator may retrieve and view the transaction time comparison reports that were created for these affected transactions as shown below in .

In this illustrative example transactions impacted table comprises various columns including transaction name potential cost and sniff test results . Transaction name provides the names of the transactions such as Buy Book which will be impacted by the configuration change. The potential cost that the change will have on the particular transaction is displayed in potential cost . The sum of the individual transaction cost values in potential cost column should equal the total potential cost value for the resource in potential cost column in . Sniff test results specify the outcome that the configuration change will have on the specific transaction. For instance Buy Book transaction has a potential availability problem due to the change while Login transaction is unaffected by the change. Thus when the desired configuration changes are applied temporarily to the transaction server instance the affected transactions are quickly scheduled for playback with the changes and outcome of the changes on the transactions are analyzed and provided to the user in the sniff test results column in . While a transaction is running sniff test results may display pending in table .

In this illustrative example number of changes table comprises various columns including property name old value and new value . Property name specifies the name of the property in the resource which was changed in the configuration. Old value specifies the value of the property prior to the change and new value specifies the value of the property after the change was made.

Report table is also shown to comprise various columns including date of configuration change overall status administrator responsible for change and affected transactions . Date of configuration change may specify the dates and times of day on which a configuration change was made. Overall status specifies the outcome that the configuration change has on the affected transactions. Administrator responsible for change column lists the system administrator who made the configuration change. Affected transactions specify the number of transactions that are impacted by the configuration change.

In this illustrative example table comprises various columns including transaction name actual profit and detailed report . Transaction name provides the names of the transactions which will be impacted by the configuration change. Detailed report specifies the outcome that the configuration change has on a particular transaction. By selecting a value in detailed report column the transaction details and the impact the change has on the transaction is displayed to the administrator in a transaction time comparison graph report such as shown in . The actual profit which is the amount of additional money the business will make or lose per day based on the configuration change is reported in actual profit . For example actual profit column for Buy Book transaction shows a value of minus 200 000 per day which means that this much profit was lost due to the configuration change. In contrast actual profit column for the Login transaction has a value of 50 000 which means that the profit per day increased by this amount due to the configuration change. Selecting a value in actual profit column will display the impact to the profit values that the configuration change will have on the transaction in a throughput graph report such as shown below in .

In transaction time comparison graph report illustrates the impact the configuration change will have on the performance of a transaction such as transaction Buy Book from Catalog . In this illustrative example the x axis is the time of day and the y axis is the transaction time in seconds . New transaction line represents a playback of a synthetic transaction which was recorded after the configuration changes were made or a changed configuration benchmark. Baseline transaction line represents a playback of a synthetic transaction recorded prior to the configuration changes were made or a prior configuration benchmark. Transaction time comparison graph report shows a comparison of new transaction and baseline transaction which takes into account the time of day thereby allowing an administrator to identify the transactions that are faster or slower in the changed configuration benchmark as compared to the prior configuration benchmark due to the changes at any point in time. For instance as shown new transaction has a higher transaction time than baseline transaction during particular times of the day e.g. between 0 and 16 00 hours . The administrator may then decide whether to reverse the change in their transaction server configuration based upon the performance information in the report.

In throughput graph report may be presented to an administrator via administration console in to illustrate the impact a configuration change has on the transaction throughput and thus profit values of transactions over a certain period of time. Throughput graph report may be launched from a report window in administration console which contains a list of current scheduled reports.

Throughput graph report illustrates the impact the configuration change will have on the profit values of the transactions. In this illustrative example the x axis is the time of day and the y axis is the actual profit of the processed transactions. The y axis is calculated by multiplying the new and old throughput i.e. how many transactions are processed per minute of the transaction versus the average profit value of each transaction that the administrator has entered. New transaction line represents a playback of a synthetic transaction which was recorded after the configuration changes were made. Baseline transaction line represents a playback of a synthetic transaction recorded prior to the configuration changes were made. Throughput graph report shows a comparison of profit values of new transaction and the profit values of baseline transaction at different times of the day. As shown the profit made by the business after the configuration change is greater at the start and close of the business day due to increased throughput but the transaction throughput slows down during the middle part of the day. Thus overall the business receives less money by making the configuration change.

In business profit graph report may be presented to an administrator via administration console in to illustrate the change in total profit values due to a configuration change over a certain period of time. Business profit graph report may be launched from a report window in administration console which contains a list of current scheduled reports.

Business profit graph report illustrates the business impact the configuration change. In this illustrative example the x axis is the time of day and the y axis is the delta profit value of the configuration change for the business. Thus line represents the overall profit value of the new transactions and the baseline transactions affected by the configuration change over the report period of time. The delta profit value may be calculated by subtracting the profit values of the baseline transactions from the profit values of the new transactions. In this illustrative example the total profit to the business of implementing the proposed configuration change is calculated to be 80 000 per day.

The process begins with initiating a set of instrumented synthetic transactions in a distributed computer system step . The synthetic transaction may be obtained by dynamically inserting JITI probes at various entry points in the distributed computer system in order to discover monitor and record customer transactions. Each synthetic transaction is then monitored during playback to track the transactions accesses to managed resources step . The monitoring system tracks the resources the transactions access by using JITI probes to identify the resource lookups in the transactions in order to link each transaction to the resources it uses to perform its functions. Once the lookups for the transactions are known a monitoring agent uploads this list of managed resources to the monitoring server where it is stored in a database step . The list of managed resources may then be categorized by the monitoring server step such as by periodically running a separate thread in the monitoring server at a configurable interval to categorize the information along transactional boundaries.

A notification listener detects configuration changes that have been made to a managed resource step . The notification listener parses the notification to determine what particular resource configuration or application has changed step . Based on changes the monitoring server automatically uses the categorized resource information to run the specific synthetic transactions associated with the changed resources to verify that the changes have not caused performance or availability problems step . The monitoring server may perform this verification by comparing the new synthetic transaction to a baseline transaction to identify performance issues.

One or more reports comprising the transaction performance and availability measurements for the resource changes is then provided to the administrator step . These reports may be presented to the administrator via an administrative console in the transaction server. Based on the transaction performance information in the reports the administrator may determine whether to persist the configuration changes to the configuration repository or to manually rollback the configuration changes step .

The process begins with receiving a request from an administrator to initiate a configuration change to a resource step . When a configuration change is received but prior to committing the change to the configuration repository a published Web service such as WebService in queries the list of categorized resources obtained in step in in order to identify the transactions that will be affected by the particular configuration change step . A list of potentially affected transactions and information regarding the impact the resource change will have on the performance of the associated transactions is immediately provided to the administrator in one or more reports step . Based on the transaction performance information in the reports the administrator may determine whether to change the configuration settings to optimize the transactional performance and availability of the system step .

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any tangible apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

