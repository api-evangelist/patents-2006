---

title: Geometry-based search engine for navigation systems
abstract: A computer-implemented method for determining a requested map location includes providing a database holding a plurality of map objects having respective descriptors and loci. A search query including one or more query terms that describe the requested map location is accepted. One or more matched map objects are identified in the database such that the respective descriptors of the matched map objects each match at least one of the query terms. The respective loci of the matched map objects are processed to determine the requested map location.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07574428&OS=07574428&RS=07574428
owner: Telmap Ltd
number: 07574428
owner_city: Hertliya Pituach
owner_country: IL
publication_date: 20060321
---
This application claims the benefit of U.S. Provisional Patent Application 60 725 883 filed Oct. 11 2005 which is incorporated herein by reference.

The present invention relates generally to map processing systems and particularly to methods and systems for geometry based identification of map locations.

Various applications involve identifying and displaying geographical map locations. An exemplary application is a mobile navigation application that presents navigational information to a mobile user. Several mobile navigation systems and methods are known in the art. For example U.S. Pat. No. 6 917 878 whose disclosure is incorporated herein by reference describes a method for navigation that includes storing map data on a server. The map data includes vector information delineating roads in a map. A portion of the vector information corresponding to an area in which a user of a mobile client device is traveling is downloaded from the server to the client device. Approximate position coordinates of the user are found using a location providing device associated with the client device. The approximate coordinates are corrected in the client device using the downloaded vector information so as to determine a location of the user on one of the roads in the map. A navigation aid is provided to the user of the client device based on the determined location.

As another example U.S. Pat. No. 6 898 516 whose disclosure is incorporated herein by reference describes a method for displaying a map on a mobile client device. The method includes storing map data on a server the map data defining objects appearing in the map and comprising vector coordinates of the objects in a predetermined frame of reference. Upon receiving at the server a request from the client device to provide a map of an area along a route on which a user of the client device is to travel a heading of travel of the user on the route is determined and the vector coordinates are transformed on the server into a rotated frame of reference which is approximately aligned with the heading of the user. A portion of the map data corresponding to the area along the route and including the transformed vector coordinates is downloaded to the client device from the server. An image of the area of the map in the rotated frame of reference is rendered on the client device based on the downloaded map data.

Embodiments of the present invention provide methods and systems for determining a map location requested by a user. The user typically enters a search query comprising one or more query terms that describe the requested map location.

A search engine attempts to match the query terms to map objects stored in an object database. The database holds a plurality of map objects with respective verbal descriptors and loci typically expressed as a range or collection of map coordinates of the objects. The search engine identifies in the object database one or more map objects whose descriptors contain terms that match at least one of the query terms. The search engine then processes the loci of the matched map objects to determine the requested map location typically by finding an area of overlap of the loci.

In some embodiments the matched map objects are rendered onto a common grid using the coordinates of the loci. Each grid is assigned a cumulative score according to the number of matched map objects that overlap the grid cell. The grid cell having the highest cumulative score is determined to be the requested map location.

In some embodiments the search engine is part of a mobile navigation system that accepts search queries and displays navigational information to the user such as a requested map location or a recommended driving route.

In some embodiments the search query is entered as free text thus reducing the amount of text to be entered by the user. Generally the order in which the query terms appear in the query is insignificant. The search engine may apply an approximate string matching process when comparing the verbal descriptors of the map objects to the query terms. The use of approximate string matching provides tolerance to spelling mistakes and data entry errors. The free text interface and the use of approximate string matching make the methods and systems described herein particularly suitable for implementation in mobile terminals having limited interface capabilities such as personal digital assistants PDAs and mobile phones.

There is therefore provided in accordance with an embodiment of the present invention a computer implemented method for determining a requested map location including 

identifying in the database one or more matched map objects such that the respective descriptors of the matched map objects each match at least one of the query terms and

In an embodiment identifying the one or more matched map objects includes identifying at least two matched map objects and processing the respective loci includes identifying an area of overlap of the loci as the requested map location. In another embodiment identifying the area of overlap includes rendering the respective matched map objects onto a common grid using the loci identifying grid cells overlapped by at least one of the rendered map objects assigning respective scores to the identified grid cells based on a number of the matched map objects that overlap each of the identified grid cells and determining the requested map location responsively to the scores. Assigning the scores may include assigning respective weights to the matched map objects and assigning the scores to the overlapped grid cells responsively to the weights.

In another embodiment rendering the matched map objects to the grid includes representing the grid using a dynamic data structure so as to allocate memory only to overlapped grid cells when assigning the scores. The dynamic data structure may include one or more binary search trees.

In yet another embodiment providing the database includes representing a first map object using first logical cells having a first area and representing a second map object using second logical cells having a second area different from the first area and rendering the respective matched map objects onto the grid includes overlaying the first and second logical cells onto the grid cells of the common grid.

In still another embodiment identifying the one or more matched map objects includes comparing at least some of the map objects in the database to at least one of the query terms using an approximate string matching process.

In an embodiment accepting the search query includes accepting free text input including the one or more query terms.

In another embodiment providing the database includes associating the map objects with respective data layers and identifying the one or more matched map objects includes searching for the one or more matched map objects only within a subset of the data layers.

In an embodiment the method includes displaying a map including the requested map location to a user. Additionally or alternatively the method may include providing to a user navigational instructions for traveling to the requested map location.

There is additionally provided in accordance with an embodiment of the present invention apparatus for determining a requested map location including 

a database which is arranged to hold a plurality of map objects having respective descriptors and loci 

a user input device which is arranged to accept a search query including one or more query terms that describe the requested map location and

a processor which is arranged to identify in the database one or more matched map objects such that the respective descriptors of the matched map objects each match at least one of the query terms and to process the respective loci of the matched map objects to determine the requested map location.

There is also provided in accordance with an embodiment of the present invention a computer software product for determining a requested map location the product including a computer readable medium in which program instructions are stored which instructions when read by a computer cause the computer to accept a search query including one or more query terms that describe the requested map location to identify in a database holding a plurality of map objects having respective descriptors and loci one or more matched map objects such that the respective descriptors of the matched map objects each match at least one of the query terms and to process the respective loci of the matched map objects to determine the requested map location.

The present invention will be more fully understood from the following detailed description of the embodiments thereof taken together with the drawings in which 

Additionally or alternatively terminal may display other types of navigational information based on search queries entered by the user. For example the user may request terminal to display a recommended driving route between an origin map location and a destination map location. In these embodiments the user inputs two search queries defining the origin and destination map locations. Terminal then processes the search queries and displays on display a recommended navigation route between the origin and the destination.

The exemplary embodiment of terminal shown in is implemented using a portable digital assistant PDA . The methods and devices described herein can alternatively be implemented using a mobile phone a laptop computer or any other suitable mobile computing platform. The methods described herein reduce the amount of data that should be entered by the user in order to specify the desired map locations. The methods are also tolerant to errors in the input data. As such the methods described herein are particularly suitable for implementing in computing platforms having only basic user input devices such as mobile phones and PDAs. These methods are also particularly suitable for use in a mobile environment such as when the user is driving because they reduce the time and attention needed for data entry.

In some embodiments terminal comprises a global positioning system GPS receiver which provides the current location coordinates of the terminal to processor . GPS receiver may comprise a separate unit external to terminal or be implemented as an integral part of the terminal. Terminal can use the location coordinates provided by GPS receiver to provide the navigational information. For example the user may request terminal to display a recommended navigation route starting from the current location of the terminal to a desired destination map location. When terminal comprises GPS receiver the user may input only a single search query defining the destination map location. The map location of the origin is determined using the coordinates provided by the GPS receiver.

The configurations of terminal and of system shown in A and B are exemplary configurations chosen for the sake of conceptual clarity. Alternative terminal and or system configuration for implementing the methods and systems disclosed herein will be apparent to those skilled in the art after reading the present description.

Typically processor comprises a general purpose computer which is programmed in software to carry out the functions described herein. The software may be downloaded to the computer in electronic form over a network for example or it may alternatively be supplied to the computer on tangible media such as CD ROM.

The map objects stored in database may comprise any object that can be displayed on a map. In the description that follows map objects are classified according to their dimensionality to point objects polylines and polygons. Point objects comprise zero dimensional objects such as junctions buildings gas stations hotels restaurants and other points of interest POI . Polylines comprise objects such as streets railway lines and rivers which can be represented by one or more connected linear segments. Polygons comprise two dimensional objects such as parks lakes neighborhoods cities and zip code areas. In general each map object is represented in database in terms of the locus of the object i.e. one or more coordinates that define the location shape and or area covered by the object on the map. In some embodiments a map object may comprise a composite object comprising a combination of polylines polygons and or points.

Object database holds a record for each map object. The record comprises textual descriptors such as an object name and a free text description of the object. Each textual descriptor may comprise one or more words. The record may comprise additional object attributes such as a classification of the object to a particular data layer. The record also comprises the locus of the object. For example the record of a point object comprises the location coordinates of the object on the map. For polyline objects the record typically comprises a sequence of location coordinates defining the endpoints of the segments of the object. For polygon objects the record typically comprises a definition of the area of the map covered by the object. The area definition can be expressed as a sequence of coordinates defining vertices of a polygon whose interior comprises the locus of the object.

In some embodiments map objects are associated with specific data layers. For example all streets may be defined as a separate layer buildings and points of interest may be considered another separate data layer. Natural landmarks such as lakes rivers and mountains can be classified as yet another separate data layer. The geometry based search methods described herein enable integration of the various data layers since the query terms entered by the user may belong to any data layer. In some embodiments the scope of the search can be confined to a desired subset of the data layers.

When entering a search query user typically specifies the requested map location in terms of nearby map objects. The user enters a search query comprising one or more query terms. Each query term comprises a keyword that describes a map object. The keywords are typically entered as free text and are separated by spaces. Unlike some known search engines that use form based input using categorized fields the free text interface simplifies the data entry process and reduces the number of keystrokes required. The interface is thus particularly suitable for mobile terminals having limited interface capabilities.

Unlike some known search engines in which the search query should be entered as an address having a particular order of words i.e. number street city and state in a particular order in the methods described herein the order in which the query terms appear in the search query is generally insignificant. This aspect of free text entry is useful for example for tourists or other users who may be unaware of locally used address formats.

For example if the user wishes to display a map of the intersection of Camden street and Greenland road in London he or she may enter the search query CAMDEN GREENLAND. The same logic applies to two dimensional objects as well. For example the search query EUSTON REGENTS can be used to specify the part of Euston road adjacent to Regents Park in London. Although each individual query term may relate to multiple map objects and locations the intersection of all query terms is often unique and can be used to determine the requested map location.

In some embodiments data layers are also identified by names and or textual descriptors. The user may enter a query term describing a particular data layer in order to search for any map objects associated with the data layer. For example the search query RESTAURANT RIVER wherein both RESTAURANT and RIVER comprise names of data layers can be used to specify a search for any restaurant that is located nearby any river. The search query CAMDEN RIVER can be used to search for a section of Camden street adjacent to or crossing a river without explicitly naming the river. Appropriate data layer definitions can be used to search for example for a cinema having a nearby car park and located next to a French restaurant.

Processor of terminal accepts the free text search query and performs a geometry based search process in database in order to determine a map location that best matches the query terms of the search query.

After accepting the search query processor searches database and collects the records of all map objects whose names or other textual descriptors match at least one of the query terms. In some embodiments processor matches the query terms against the object name. Processor may also match the query terms against any of the textual descriptors such as a free text description of the object stored in the record.

In some cases the query terms entered by the user may comprise spelling and or data entry errors for example when input device is non optimal for text entry when the user is driving or when the user is a tourist who is not accustomed to the language used in object names and descriptions. In order to enable a certain tolerance to spelling and data entry errors in the search query processor may apply an approximate string matching method when matching the query terms to object names and descriptors.

Several approximate string matching methods that can be used by processor are known in the art. For example the well known Soundex algorithm comprises a phonetic method for indexing words by their sound when pronounced in English. The Soundex algorithm is described for example in U.S. Pat. Nos. 1 261 167 and 1 435 663 whose disclosures are incorporated herein by reference. Another known phonetic string matching method is the Metaphone algorithm. The Metaphone method is described for example by Binstock and Rex in Metaphone A Modern Soundex in Practical Algorithms for Programmers 1Edition Addison Wesley June 1995 pages 160 170 which is incorporated herein by reference. The Metaphone method is further discussed in a paper by Philips entitled Hanging on the Metaphone Computer Language 7 12 December 1990 pages 9 43 which is incorporated herein by reference. Another phonetic retrieal method is described by Gadd in PHONIX The Algorithm Program 24 4 October 1990 pages 363 366 which is incorporated herein by reference.

Some known string matching methods often referred to as N gram similarity methods define the similarity between two words according to the number of 1 . . . n letter sequences common to both words. Other methods often referred to as edit distance methods define the similarity between two words according to the minimum number of insertions deletions and substitutions needed to transform one word to the other. Several known search and comparison methods are compared and evaluated in a paper by Pfeifer et al. entitled Retrieval Effectiveness of Proper Name Search Methods Information Processing and Management 32 6 November 1996 pages 667 679 which is incorporated herein by reference.

Using any suitable approximate string matching method processor searches database and collects the map objects whose names and or other textual descriptors match at least one of the query terms of the search query.

Rendering a point object typically comprises rendering a single grid cell. In some embodiments a point object is defined as having a locus that covers several grid cells. In such embodiments the appropriate number of grid cells is rendered onto the grid. Rendering a polyline object typically comprises rendering each of its segments. Several suitable line rendering methods that can be used for this purpose are known in the art such as for example the Bresenham line drawing algorithm described by Bresenham in Algorithm for Computer Control of a Digital Plotter IBM Systems Journal 4 1 1965 pages 25 30 which is incorporated herein by reference.

Rendering polygon objects can be implemented using any suitable polygon rendering method known in the art such as for example scan line methods that use active edge tables. An exemplary polygon rendering method is described by Bouknight in A Procedure for Generation of Three Dimensional Half Toned Computer Graphics Presentations Communications of the ACM 13 9 September 1970 pages 527 536 which is incorporated herein by reference.

In some cases certain grid cells are overlapped by more than a single matched object. For example shows a grid cell A that is overlapped by both objects B and C. In principle grid cells that are overlapped by a higher number of matched map objects are considered more relevant to the search query and vice versa. In order to estimate the relevance of different grid cells to the search query each overlapped grid cell is assigned a cumulative score indicating the number of matched map objects that overlap the cell. Grid cells that are overlapped by a larger number of matched map objects will thus receive a higher score.

In some embodiments each map object is assigned a weight value indicating its significance to the search process. In these embodiments the weight of each overlapping object is added to the cumulative score of the grid cells it overlaps. Thus different map objects can be defined so as to contribute different weights to the cumulative scores.

After all matched map objects are rendered onto the grid and all cumulative scores are assigned processor identifies the grid cell having the highest cumulative score and identifies it as the map location requested by the search query. In the present example grid cell A is the only grid cell overlapped by two objects. All other overlapped grid cells are overlapped by a single object. Thus processor identifies grid cell A as the requested map location.

In some embodiments processor retains and displays the matched map objects that overlap the requested map location and discards the remaining matched objects. For example shows only matched objects B and C that overlap grid cell A. Object A which does not relate to the requested map location is discarded.

In some cases matching the query terms with the map objects in database may produce only a single matched map object. In such cases the locus of the single matched map object is typically regarded as the requested map location. The single object may be rendered onto grid and the grid cells overlapped by the object returned as the requested map location.

As demonstrated by in some cases multiple grid cells may receive the same maximum cumulative score. In some embodiments when the maximum score grid cells are sufficiently close to one another they may be collectively regarded as the requested map location. Otherwise when processor identifies two or more alternative maximum score grid cells all respective map locations may be displayed to the user either as text or as a map display. The user may be asked to select the desired map location to be displayed out of the alternative results. Additionally or alternatively processor may request the user to enter additional information e.g. an additional query term for resolving the ambiguity. The search process is then refined using the additional query term. The refining process can be repeated until a single result is obtained.

In some embodiments the search process described above provides an estimated map location whose accuracy is on the order of the grid cell size. The accuracy of the estimated map location is often insufficient for displaying the exact map location to the user or for navigating to the location. In these embodiments resolving the desired map location with sufficient accuracy involves additional operations. For example once the grid cell corresponding to the map location is found all map objects overlapping the grid cell can be searched in order to accurately locate the desired map location within the cell. Additionally or alternatively any other suitable method can be used to accurately determine the desired map location using the search results.

In general the performance of the geometry based search process described herein is affected by the size of grid cells i.e. the resolution of grid . On one hand large area grid cells enable the search process to identify and render matched objects located at grater distances from one another e.g. a street that passes nearby a park but not directly adjacent to it. On the other hand large area grid cells produce a higher number of irrelevant results. Typically larger and fewer grid cells enable faster computation time but the location accuracy of the results will often be lower.

Although grid comprises identical size grid cells different map objects may be defined using different size grid cells to allow greater flexibility in the search process and to improve its performance. For example map objects describing cities and neighborhoods can be defined using larger grid cells in comparison with the grid cells used for defining streets or buildings. In some embodiments each map object is defined using logical grid cells whose size may vary from one object to another. When rendering the object onto the grid each of the logical grid cells covers one or more of grid cells of grid .

The implementation of the search process and its performance are also influenced by the size of grid i.e. the geographical area represented by the grid. In some embodiments grid is implemented as a static memory array in a memory of processor . The term static means that memory is allocated to grid cells regardless of whether they are used i.e. overlapped by a matched map object and assigned a score . Although this implementation is straightforward it requires a large amount of memory in order to represent the area of interest e.g. a city with reasonable resolution.

In many practical cases it is desirable to reduce the memory space used by grid to remain within feasible memory space requirements. Memory size reduction is desirable when the processing is performed locally in terminal as well as when the processing is performed in a remote server such as map server in the configuration of above. For this purpose in some embodiments the grid is implemented in a dynamic data structure in which memory is allocated only to currently used grid cells. For example a dynamic grid can be implemented using two binary search trees one tree for each coordinate of the grid. For example in C language using the standard template library STL a dynamic grid can be defined by the definition

Note that the std map class is implemented using an approximately balanced red black tree as is known in the art. Red black trees are described for example by Cormen et al. in Introduction to Algorithms 2edition MIT Press Massachusetts September 2001 pages 273 277 which is incorporated herein by reference. Red black trees are also described by Hinze in Constructing Red Black Trees Proceedings of the Workshop on Algorithmic Aspects of Advanced Programming Languages WAAAPL 99 Pans France September 1999 pages 89 99 which is incorporated herein by reference.

Using the dynamic binary trees memory is allocated only to grid cells having non zero values. The computational complexity of adding a new grid cell or of updating the score of a grid cell is O log n wherein n denoted the total number of grid cells in the grid. The following exemplary code creates a grid object denoted grid and adds a grid cell having the coordinates 10 10 and a score of 0.5 

The method begins with terminal accepting a search query from user via input device at an input step . Processor of terminal initializes grid at an initialization step . Processor splits the search query into individual query terms at a term generation step .

Processor now scans object database and collects all map objects whose name or other textual descriptors match at least one of the query terms at a search step . The matching of object names and descriptors to query terms can use an approximate string matching process such as one of the processes cited above in order to provide tolerance to spelling and data entry errors.

Processor renders the matched map objects onto grid at a rendering step . During the rendering process processor accumulates the cumulative scores of grid cells overlapped by the rendered map objects as demonstrated in the examples of and A C above. Processor identifies the grid cell having the maximum cumulative score at a result identification step . Processor outputs the requested map location at an output step . Typically processor displays map of the vicinity of the requested map location on display to user . The method then loops back to input step for accepting another search query from the user.

In some embodiments the geometry based search process can be used in a process of recommending to the user a navigation route between requested origin destination map locations.

Processor performs a geometry based search process to determine the origin map location at an origin search step . Processor then performs another geometry based search process to determine the destination map location at a destination search step . Both search processes typically follow the method of above.

After determining the origin and destination map location processor determines the recommended navigation route between them at a route generation step . Any suitable method for generating the recommended route can be used for this purpose. Processor then displays the route to the user typically as a sequence of maps and driving directions displayed on display . The processor may provide any other suitable type of navigational instructions for traveling to the destination map location.

The specific methods used for route generation and map display in the methods of are considered outside the scope of the present patent application. Exemplary methods for providing and displaying maps on a mobile terminal are described for example in the above cited references. Additional methods for displaying a map that includes a plurality of layers is described in U.S. Pat. No. 6 904 360 whose disclosure is incorporated herein by reference.

User navigates the recommended route at a navigation step . In some embodiments terminal uses the coordinates measured and provided by GPS receiver to verify that user actually follows the recommended route. Processor may provide corrections and additional driving directions as appropriate.

Although the embodiments described herein mainly refer to geometry based searching in mobile navigation systems the disclosed methods and systems can be used in any application that involves identification of map location or objects based on user queries. Such applications may comprise for example web based mapping and location finding systems. Although the search method described above process the loci of the matched objects by rendering the objects onto a common grid any other suitable method can be used. For example various geometrical distance functions can be defined based on the loci of map objects.

It will thus be appreciated that the embodiments described above are cited by way of example and that the present invention is not limited to what has been particularly shown and described hereinabove. Rather the scope of the present invention includes both combinations and sub combinations of the various features described hereinabove as well as variations and modifications thereof which would occur to persons skilled in the art upon reading the foregoing description and which are not disclosed in the prior art.

