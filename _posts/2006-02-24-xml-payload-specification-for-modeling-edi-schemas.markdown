---

title: XML payload specification for modeling EDI schemas
abstract: Modeling an electronic data interchange (EDI) document using extensible Markup Language (XML) at runtime. A plurality of structural elements is identified in the EDI document. A plurality of corresponding data values is identified from the identified plurality of structural elements in the EDI document. A plurality of annotations is generated for a plurality of rules included in the EDI document. The plurality of rules defines operations associated with the plurality of corresponding data values. The determined data values and the generated annotated is transformed into an XML schema corresponding to the EDI document. The XML schema is processed at runtime.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07685208&OS=07685208&RS=07685208
owner: Microsoft Corporation
number: 07685208
owner_city: Redmond
owner_country: US
publication_date: 20060224
---
Electronic data interchange EDI is one of the ways businesses use for exchanging computer to computer business information based on approved formatting standards and schemas. For example millions of companies around the world transmit data associated with business transactions e.g. purchase orders shipping air bills invoices or the like using EDI to conduct commerce.

In a typical EDI transaction model a large business entity or an EDI integration broker trades with numerous partners and has the technical capability to handle numerous EDI transaction data in various EDI formats and schemas. These entities also known as hubs transact with one or more suppliers also known as spokes . Each of the spokes typically is a relatively small business entity that is only capable of dealing with one hub.

Before the spokes attempt to initiate transactions via EDI with the hub the hub typically transmits various EDI schemas to the spokes so that the spokes may properly format the EDI transactions according to the EDI schemas. Currently EDI schemas are large in size and the file size for each EDI schema typically ranges from 1 MB to 3 MB. In addition the hub or large trading partners customarily transmit a large amount of schemas to the spokes without taking into considerations of the spokes lack of hardware capability. As such thousands of such schemas which may occupy several Gigabytes in bandwidth during transmission are transmitted from the hub to the spokes.

In addition to transmitting a large amount of schemas which consume the spokes transmission bandwidth related systems or techniques define EDI schemas using a linear or flat file based to represent EDI schemas. These types or models of representation while having a simple composition do not have the full capability to represent additional and sometimes have critical information associated with EDI schemas. As such the spokes and the hub alike may not maximize the full benefit of the convenience of EDI transactions.

Embodiments of the invention enhance the previous approaches and practices of representing EDI schemas by describing a structured EDI documents using eXtensible Markup Language XML configurations. By modeling an EDI payload as XML payload during runtime embodiments of the invention reduce the time in developing schemas and transformation maps. In addition alternative embodiments generate annotations in the XML EDI schemas including information associated with a plurality of validation rules that exists in the EDI data.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Referring first to a block diagram illustrates a system for conducting electronic data interchange EDI transactions according to an embodiment of the invention. The system includes a hub linked to and communicating with one or more spokes . In one embodiment the hub includes a server computer or a computing device serving one or more processors e.g. processor or processing units for executing computer executable instructions for serving the spokes . In one example the spokes include a computing device having one or more components included in or coupled with a computer as shown in .

In one example the hub also includes a memory area for storing one or more EDI schemas such as an EDI schema . Initially the hub and the spokes establish agreements as to the EDI formats or standards to be used for transmitting transaction data therebetween. Once the parties determine the particular EDI formats or standards to use the hub selects the appropriate EDI schemas to be transmitted to the spokes . In another example the hub may choose to select all EDI schemas for all types of transactions such as purchase orders bills of lading invoices payrolls or the like to the spokes . Although the communications between the hub and the spokes can be a private or public communications network a wired or wireless network the spokes typically lack the hardware resources to handle large amount of EDI schemas sent from the hub . In addition the type and bandwidth of computing network communications for the spokes are not equipped to handle such demand imposed by the thousands of EDI schemas which can reach several Gigabytes in data size.

Referring now to a block diagram illustrates a structured EDI schema using XML according to an embodiment of the invention. As discussed above related practices would represent EDI schema using a simplified linear or flat configuration. Table 1 illustrates three EDI transactions in a structured EDI schema embodying aspects of the invention in the left column and the corresponding three transactions in the traditional EDI representation 

As illustrated the flat EDI schema uses more characters and thus occupies more data size than a structured EDI schema in the left column. In one embodiment the structure of EDI schemas is represented using XML which enables faster processing during runtime and easy configuring editing and modifying by users using known XML editing tools.

In one example an EDI schema is identified by a DocType which may include a combination of namespace and root node name. In one example DocType is defined as TargetNamespace RootNodeName. In the example where X12 standard is used X12 schemas use the following format X12 Schemas X12 Version TsId which indicates that 1 . all X12 schemas have a root node name that starts with X12 2 . Version represents the version information of the document and it is a dynamic piece of information which is configuration or instance driven and 3 . TsId stands for transaction ID of the document being processed and is always read from the input instance.

As another example another well known standard EDIFACT includes the following format for representing the EDIFACT schemas EDIFACT Schemas Efact Version Tsid which indicates that 1 . all EDIFACT schemas have root node name that starts with Efact 2 . Version represents the version information of the document and it is a dynamic piece of information which is configuration or instance driven and 3 . TsId stands for transaction ID of the document being processed and is always read from the input instance.

As shown in an EDI schema in a structural overview may include one or more root nodes . Each root node includes a sequence of loops and segments as children. Loops may include one or more nested sub loops or sub segments .

Similarly the segment may include one or more component data elements and data elements . In one embodiment an XML payload schema representing an EDI schema may possess the following structure 

In one embodiment in modeling the EDI schemas using XML a plurality of schema rules are applied to configure the XML schema. For example the plurality of rules may include 

2. Every ComplexType would use sequence compositor. In one example the ComplexType is a construct for modeling hierarchical data entities. Each ComplexType may use sequence choice or any compositor to group its children and each compositor may be used according to the following 

In one embodiment an EDI schema uses only the sequence compositor. In an alternative embodiment choice and any compositor would not be used. The ComplexType may only be included elements as children.

3. Starting from the root node of the document any element that includes substring Loop would be considered a Loop element. Otherwise it would be considered a segment see additional discussion below .

5. Segments can have children and grand children in the structured XML schema. For example only descendants at distance 1 and 2 from the segment node would be permitted as part of the structure.

6. One or more annotations are generated to represent the rules in the EDI schemas. For example the annotations may be used to represent one or more of the following 

b Trigger field information to be used with schemas associated with compliance with Health Insurance Portability and Accountability Act HIPAA 

d Split point information rules. For example the split point information indicates information when the EDI schema or EDI transactions satisfying requirements of EDI schemas have split into multiple sub documents.

In one embodiment the XML schema is structured using one or more two or three character tags. is a diagram illustrating a XML schema embodying aspects of the invention. For example a panel illustrates one or more two or three character tags. For example tags include ST BEG CUR .

In one embodiment based on the name of the segment element the first three characters may be considered as a tagId. In an alternative embodiment if the third character of the three character tag is a   character the segment ID would only be the first two characters. In addition if one of the two characters includes a character a compilation error would occur. For instance 

In another embodiment one or more special rules may apply to a set of segment tags. For example tags such as ISA IEA etc. have special significance and they are called control segments. Similarly tags such as ST and SE are both control and data segments. The list below provides an exemplary set of control segment tags 

In another example embodiments of the invention enhance the functionality of EDI schemas by accounting for one or more rules using annotations. For example in handling one or more cross field validation rules rules are expressed as annotations at segment level nodes. Every segment includes an optional list of rules which are also known as RuleSet. For example a panel illustrates one or more annotation tags in a structured XML schema. As an illustration a set of exemplary rules are described in the following paragraphs 

Unlike previous representation or model of EDI schemas embodiments of the invention provide a rich set of information for describing rules associated with EDI schemas using XML.

As illustrated above each rule has a subject attribute an optional qualifier attribute and a list of subject elements. For example each of the rules is defined based on values of subjects qualifier pairs 

In one embodiment the operands of a rule are data elements found within a segment. In this embodiment during the rule evaluation a specific value of an operand is not needed. Rather what is needed is the information whether the data element was valued or not. Using the system in as an example during parsing or serialization by a parser serializer on encountering a segment the parser serializer may keep track of the data elements that had a non blank value. After segment processing is over the parser serializer may be able to evaluate all rule operands and hence execute the RuleSet. In the situation where errors occurred in processing the rule operands one or more error codes are issued. As an example an exemplary set of suitable error codes is described below corresponding to particular rule violations 

Error code 2 Conditional required data element missing This would be reported when a Conditional rule is violated. The reported field number would be the one that is the first one in the order defined in rule which is absent.

Error code 10 Exclusion condition violated This would be reported when an Exclusion rule is violated. The reported field number would be the first one in the order defined in rule that makes at least 2 fields valued.

Error code 14 BTS EDI specific Cross field validation rule violated This error would be raised for all other kinds of rules and would be raised under the following circumstances 

b Required rule This can be violated only if all subjects are absent. In this type of scenario the first field mentioned in the rule would be reported as having caused the violation 

c List rule This can be violated when qualifier is present and all subjects are absent. In such case the first field mentioned in the rule would be reported as having caused the violation.

Also in modeling the EDI schemas embodiments of the invention proper consider the various data types include in EDI schemas. As an example one or more data types in X12 format are described below 

X12 defines a number of data types. Such types would be recognized by parser serializer. They would have the capability to validate such types and perform any necessary transformation. However a document schema can have any kind of simple type associated with it. If it is not an Edi data type it would be validated codes routings computer executable instructions such as XmlValidatingReader depending on schema validation flag being turned on or not.

1. N This is an integer data type with an optional length restriction. A simple element of this type should have a simple type that is a restriction on a type with local name N . And N is essentially an xs string.

Similarly in describing schemas in EDIFACT format an EDIFACT schema defines a number of data types such as one of the following 

1. a This is an alphabetic data type with a length restriction. A simple element of this type should have a simple type that is a restriction on a type with local name a . And a is essentially an xs string.

As discussed previously one of the rules annotated by the XML schema embodying aspects of the invention is reference designators. The reference designators exist at field level and they refer to a number in metadata dictionary which can be used during error debugging. Engine would report this information during parsing at AK502 level. For example it would report the designator value if present in the schema. The following annotation is used at field level. AK502 is an optional field if annotation is not present it would not be valued. The following exemplary XML statements illustrate an example of reference designator 

Similarly one of the rules the trigger field information is annotated according to an embodiment of the invention. This annotation may exist at a loop or segment level to identify the field inside a segment that serves as a trigger field. And also the value that should result in a trigger transition. This information is used in HIPAA schemas to generate more user friendly Xml. The annotation is as shown below In this example the TS270A12100A Loop is a trigger loop. The trigger segment may be written in XML as NM1 InformationSourceName TS270A12100A and the trigger field is NM101 EntityIdentifierCode. The trigger value could be any of 2B 36 GP P5 or PR. The following illustrates the exemplary XML statement or code 

For example an element component identifies a plurality of structural elements in the EDI document at . At a data component determines a plurality of corresponding data values from the identified plurality of structural elements in the EDI document. At an annotation component generates annotations for a plurality of rules included in the EDI document. The plurality of rules defines operations associated with the plurality of corresponding data values. A transformation component modifies or transforms the determined data values and the generated annotated into an XML schema corresponding to the EDI document at . At a payload component processes the XML schema at runtime.

The computer typically has at least some form of computer readable media. Computer readable media which include both volatile and nonvolatile media removable and non removable media may be any available medium that may be accessed by computer . By way of example and not limitation computer readable media comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer storage media include RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that may be used to store the desired information and that may be accessed by computer . Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. Those skilled in the art are familiar with the modulated data signal which has one or more of its characteristics set or changed in such a manner as to encode information in the signal. Wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media are examples of communication media. Combinations of any of the above are also included within the scope of computer readable media.

The system memory includes computer storage media in the form of removable and or non removable volatile and or nonvolatile memory. In the illustrated embodiment system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. For example illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media. also shows a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that may be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive and magnetic disk drive and optical disk drive are typically connected to the system bus by a non volatile memory interface such as interface .

The drives or other mass storage devices and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components may either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies.

A user may enter commands and information into computer through input devices or user interface selection devices such as a keyboard and a pointing device e.g. a mouse trackball pen or touch pad . Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are connected to processing unit through a user input interface that is coupled to system bus but may be connected by other interface and bus structures such as a parallel port game port or a Universal Serial Bus USB . A monitor or other type of display device is also connected to system bus via an interface such as a video interface . In addition to the monitor computers often include other peripheral output devices not shown such as a printer and speakers which may be connected through an output peripheral interface not shown .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to computer . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. LAN and or WAN may be a wired network a wireless network a combination thereof and so on. Such networking environments are commonplace in offices enterprise wide computer networks intranets and global computer networks e.g. the Internet .

When used in a local area networking environment computer is connected to the LAN through a network interface or adapter . When used in a wide area networking environment computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external is connected to system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to computer or portions thereof may be stored in a remote memory storage device not shown . By way of example and not limitation illustrates remote application programs as residing on the memory device. The network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Generally the data processors of computer are programmed by means of instructions stored at different times in the various computer readable storage media of the computer. Programs and operating systems are typically distributed for example on floppy disks or CD ROMs. From there they are installed or loaded into the secondary memory of a computer. At execution they are loaded at least partially into the computer s primary electronic memory. Aspects of the invention described herein includes these and other various types of computer readable storage media when such media contain instructions or programs for implementing the steps described below in conjunction with a microprocessor or other data processor. Further aspects of the invention include the computer itself when programmed according to the methods and techniques described herein.

For purposes of illustration programs and other executable program components such as the operating system are illustrated herein as discrete blocks. It is recognized however that such programs and components reside at various times in different storage components of the computer and are executed by the data processor s of the computer.

Although described in connection with an exemplary computing system environment including computer embodiments of the invention are operational with numerous other general purpose or special purpose computing system environments or configurations. The computing system environment is not intended to suggest any limitation as to the scope of use or functionality of any aspect of the invention. Moreover the computing system environment should not be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment. Examples of well known computing systems environments and or configurations that may be suitable for use with aspects of the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics mobile telephones network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

Embodiments of the invention may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include but are not limited to routines programs objects components and data structures that perform particular tasks or implement particular abstract data types. Aspects of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

An interface in the context of a software architecture includes a software module component code portion or other sequence of computer executable instructions. The interface includes for example a first module accessing a second module to perform computing tasks on behalf of the first module. The first and second modules include in one example application programming interfaces APIs such as provided by operating systems component object model COM interfaces e.g. for peer to peer application communication and extensible markup language metadata interchange format XMI interfaces e.g. for communication between web services .

The interface may be a tightly coupled synchronous implementation such as in Java 2 Platform Enterprise Edition J2EE COM or distributed COM DCOM examples. Alternatively or in addition the interface may be a loosely coupled asynchronous implementation such as in a web service e.g. using the simple object access protocol . In general the interface includes any combination of the following characteristics tightly coupled loosely coupled synchronous and asynchronous. Further the interface may conform to a standard protocol a proprietary protocol or any combination of standard and proprietary protocols.

The interfaces described herein may all be part of a single interface or may be implemented as separate interfaces or any combination therein. The interfaces may execute locally or remotely to provide functionality. Further the interfaces may include additional or less functionality than illustrated or described herein.

In operation computer executes computer executable instructions such as those illustrated in the figures such as to implement aspects of the invention.

The order of execution or performance of the operations in embodiments of the invention illustrated and described herein is not essential unless otherwise specified. That is the operations may be performed in any order unless otherwise specified and embodiments of the invention may include additional or fewer operations than those disclosed herein. For example it is contemplated that executing or performing a particular operation before contemporaneously with or after another operation is within the scope of aspects of the invention.

Embodiments of the invention may be implemented with computer executable instructions. The computer executable instructions may be organized into one or more computer executable components or modules. Aspects of the invention may be implemented with any number and organization of such components or modules. For example aspects of the invention are not limited to the specific computer executable instructions or the specific components or modules illustrated in the figures and described herein. Other embodiments of the invention may include different computer executable instructions or components having more or less functionality than illustrated and described herein.

When introducing elements of aspects of the invention or the embodiments thereof the articles a an the and said are intended to mean that there are one or more of the elements. The terms comprising including and having are intended to be inclusive and mean that there may be additional elements other than the listed elements.

As various changes could be made in the above constructions products and methods without departing from the scope of aspects of the invention it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.

