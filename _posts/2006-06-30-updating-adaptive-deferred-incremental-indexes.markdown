---

title: Updating adaptive, deferred, incremental indexes
abstract: An index update component updates an index of a database in response to a query to the database referencing the index. An index control record tracks the last time the index was referenced and state of the index compared to the state of the database. An index deletion component deletes indexes in the database that have not been referenced for a period of time.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07917499&OS=07917499&RS=07917499
owner: Microsoft Corporation
number: 07917499
owner_city: Redmond
owner_country: US
publication_date: 20060630
---
In existing messaging systems such as electronic mail systems key performance metrics are human interactive response time and message throughput. Interactive response time is the time it takes the system to respond to the demands placed on it by a user. Message throughput is how efficiently the system can process demands from the user as well as handling all asynchronous interactions such as receiving and sending mail from other users.

To improve human response time current systems utilize indexing. An index is an auxiliary access structure of the database that physically organizes part of the data in such a way that it can be quickly and efficiently accessed in a certain pattern. Messaging data is accessed in many different patterns such as displaying the contents of a folder containing recently received mail inbox searching for mail from certain person or looking for mail that has been previous classified into some category or stored in a folder.

Because there are many different access patterns for messaging data there may be many different indexes over the same data. And an index that provides fast access to data in the inbox most often will not provide fast search for all mail from a certain person. As the amount of data stored in the messaging systems grows the indexes become absolutely essential for maintaining acceptable response times.

While indexes are essential they do suffer from several serious draw backs. First to keep the indexes for the messaging data current the indexes are synchronously maintained as the data is modified added to or deleted from. For example as data is added to the messaging data the indexes are updated to reflect the new data as data is deleted from the messaging data the indexes are updated to reflect the data removed data and as the messaging data is updated the indexes are updated to reflect the updated values of the data. As the rate of change of the messaging data increases or as the number of indexes to be maintained increases the cost of keeping the indexes current becomes problematic. Current messaging systems often spend over 40 of their input output I O operations doing nothing more than maintaining these indexes.

Second the access pattern at data modification time when the indexes are updated cannot match all the access patterns indexed. Therefore the I O necessary to maintain those indexes are often effectively random relative to the data modification itself.

Next indexes are maintained even if they are not being used. For example suppose a user wants to sort their data on three different properties sort on who it was from when it was received and what is the subject because that will allow them to find a particular message quickly because they remember who it was from roughly when it was received relative to other messages from the same person and they will recognize the subject when they see it. To sort the data in that way an index may be created used once and never used again. For some period after it is created the index is maintained.

Lastly indexes must be explicitly created modified or destroyed by a knowledgeable user because the absence of an index will cause unacceptable performance characteristics e.g. interactive response time and message throughput and the presence of an unused index causes unacceptable load on the system. Such users are very expensive because the amount of knowledge and experience necessary to balance on the edge of the too few is bad but too many is bad knife is significant and hence the number of people who can do it are very rare and in high demand.

Embodiments of the invention include systems and methods for adaptive incremental deferred database indexing. In an embodiment an index is updated in response to a query to the database. The index is updated if the state of the index is different than the state of the database.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

The server typically has at least some form of computer readable media. Computer readable media which include both volatile and nonvolatile media removable and non removable media may be any available medium that may be accessed by server . By way of example and not limitation computer readable media comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer storage media include RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that may be used to store the desired information and that may be accessed by server .

Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. Those skilled in the art are familiar with the modulated data signal which has one or more of its characteristics set or changed in such a manner as to encode information in the signal. Wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media are examples of communication media. Combinations of any of the above are also included within the scope of computer readable media.

In one embodiment a user accesses the electronic messaging application through a messaging client application executed on a client computer . The server may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device a handheld device a personal digital assistant PDA or other common network node and typically includes many or all of the elements described above relative to server . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. LAN and or WAN may be a wired network a wireless network a combination thereof and so on. Such networking environments are commonplace in offices enterprise wide computer networks intranets and global computer networks e.g. the Internet .

The electronic messaging application has access to a storage device containing a messaging database and one or more indexes associated with the messaging database . In another embodiment a cluster of servers provide a single database image or a single database virtualization of the messaging database . The server may also include other removable non removable volatile nonvolatile computer storage media. For example illustrates the storage device that reads from or writes to non removable nonvolatile magnetic media. Other removable non removable volatile nonvolatile computer storage media that may be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like.

The messaging database contains messages and data associated with the electronic messaging application . Additionally the electronic messaging application has access to an index update component and an index request component . The drives or other mass storage devices and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the server . In for example storage device is illustrated as storing application programs other program modules or components and data .

The user accesses the messaging data through queries that reference an index of the messaging database via the email client application . In one embodiment queries include one or more of the following a database query a database search a database interrogation a searched update and other database accesses. The searched update is a request to update the database based on a search. For example for the searched update delete any messages Sam has received from Bob the database is searched for messages from Bob received by Sam and the messages identified by the search are deleted.

When the query is received by the electronic messaging application on the server the index update component determines if the referenced index is current. If the index is current the query is submitted to the messaging database and control is returned to the electronic messaging application . In another embodiment the query is modified so that the index is utilized when the query is submitted to the messaging database . Thus in this embodiment the query is modified to force use of the index . Advantageously the system is database vender neutral because the index is created by using the messaging database but the index is independent of the messaging database .

If the index is not current the index update component updates the index before submitting the query to the messaging database . Advantageously the index update component updates the indexes at the time they are referenced and not at the time the messaging database is modified. Since this is the time the data is accessed the index access path I O is less random. Additionally if an index is referenced infrequently or never referenced system performance is not impacted because the index is updated when referenced and not as modifications are applied to the messaging database . In another embodiment the index update component opportunistically and asynchronously updates the index at times when it is not referenced. Advantageously by executing the index update component during periods of low database activity the amount of maintenance necessary to update the index at reference time is minimized using otherwise wasted system capacity. One skilled in the art recognizes that other characteristics can be used to determine when the index update component should execute. The period of low database activity may be a declarative time e.g. between 3 a.m. and 4 a.m. or determined by current state of the system. For example the index update component executes if the storage media is currently operating at less than 50 of rated capacity the processing units are currently operating at less than 30 of rated capacity and there is more than 1 MB of free memory. These parameters are all observable by interrogating the state of the system.

The index update component determines if the index is current by comparing the state of the messaging database to the state of the index . If the states are the same then the index is current. In one embodiment a change number associated with the messaging database and a change number associated with the index are compared to determine if the index is current. The change number is a unique increasing sequential number used to track transactions or database modifications applied to the messaging database .

Database modifications include additions deletions and changes to the messaging database . The database modifications to the messaging database are tracked and assigned a strictly increasing number to each modification e.g. the change number . One skilled in the art will recognize there are many ways of tracking such changes for example in one embodiment this change tracking mechanism is a physical database recovery log and in another embodiment it may be a logical events or actions table. Additionally the database modifications are arranged so that they can be efficiently retrieved in change order and in a format that records the insertion deletion and modification of data in the messaging database . In one embodiment the database modifications are formatted so they may be filtered based on a subset of the data in the messaging database . The subset of data is indicated by any metadata that identifies a subset of data indexed. For example in one embodiment of the electronic messaging application the metadata includes a mailbox identifier and a folder identifier within the mailbox. For other applications in other embodiments the metadata includes a table name and an index key range within the table.

In one embodiment an index deletion component deletes indexes that are not being utilized. In this embodiment a last referenced date is associated with the index . The last referenced date is updated when a query referencing the index is submitted to the messaging database . The index deletion component deletes any index that has not been referenced within a certain period of time. For example suppose the messaging database includes two indexes I last referenced on Jan. 1 2006 and I last referenced on Mar. 1 2006. If the index deletion component is configured to delete indexes that have not been referenced in 60 days and the current data is Apr. 1 2006 the index deletion component will delete I and not I. Furthermore because the index deletion component is independent of the electronic messaging application and index update component the index deletion component can be scheduled to execute during periods of low database activity. By deleting indexes that are not being utilized system resources e.g. disk space are freed for other purposes. One skilled in the art recognizes that other characteristics can be used to determine when the index deletion component should execute. The period of low database activity may be a declarative time e.g. between 3 a.m. and 4 a.m. or determined by current state of the system. For example the index deletion component executes if the storage media is currently operating at less than 50 of rated capacity the processing units are currently operating at less than 30 of rated capacity and there is more than 1 MB of free memory. These parameters are all observable by interrogating the state of the system.

According to another aspect of the invention if the index does not exist for the query the index request component generates an unsatisfied request record to track indexes that would have been utilized had they existed. An index creation component creates new indexes from the unsatisfied request records . This allows the system to track access patterns at run time to determine what indexes are needed but do not exist. Additionally the index creation component is independent of the database query and thus it can be executed during periods of low database activity. Advantageously the penalty for creating an index that is not utilized by a query is minimal because the index will not effect system performance because it will not be updated and eventually the index will deleted by the index deletion component . Also no skilled human intervention is required to create the index . One skilled in the art recognizes that other characteristics can be used to determine when the index creation component should execute. The period of low database activity may be a declarative time e.g. between 3 a.m. and 4 a.m. or determined by current state of the system. For example the index creation component executes if the storage media is currently operating at less than 50 of rated capacity the processing units are currently operating at less than 30 of rated capacity and there is more than 1 MB of free memory. These parameters are all observable by interrogating the state of the system.

Generally the data processors of server are programmed by means of instructions stored at different times in the various computer readable storage media of the computer. Programs and operating systems are typically distributed for example on floppy disks or CD ROMs. From there they are installed or loaded into the secondary memory of a computer. At execution they are loaded at least partially into the computer s primary electronic memory. Aspects of the invention described herein includes these and other various types of computer readable storage media when such media contain instructions or programs for implementing the steps described below in conjunction with a microprocessor or other data processor. Further aspects of the invention include the computer itself when programmed according to the methods and techniques described herein.

For purposes of illustration programs and other executable program components are illustrated herein as discrete blocks. It is recognized however that such programs and components reside at various times in different storage components of the computer and are executed by the data processor s of the computer.

At a check is made to see if the index exists. In one embodiment metadata is created for each index in the messaging database . The metadata is searched to determine if the index referenced in the query exists. For notational convenience Structured Query Language SQL Data Definition Language DDL is used to represent the following embodiment for schema for this metadata and other schema illustrated herein.

For example to represent an index on the message receive time and subject the following SQL statements are executed to create two records in the IndexDefinition table 

Furthermore one skilled in the art of databases recognizes that variations of the schema that record the same information could also be used for the metadata and other schema illustrated herein.

If the index does not exist the query is executed at without the index . If the index exists in one embodiment a check is made to determine if the index contains the subset of data associated with the query at . In another embodiment index control records as shown in are accessed to determine if the index contains the subset of data by referencing the data subset field. If the subset of data does not exist within the index the query is executed without an index at . In an alternative embodiment an unsatisfied request is generated by the index request component before the query is executed.

At a check is made to determine if the index is current for the data subset. In one embodiment the index is not current if the change number associated with the index is less than the change number associated with the messaging database . If the index is current the query is executed with the index at .

If the index is not current database modifications are applied to the index at . In one embodiment a modification corresponding to the database modification is applied to the index . Database modifications to the messaging database are tracked in a sequential manner. Examples of database modifications include a reliable eventing queue a recovery log a change history. In general any mechanism that tracks changes in a sequential manner assigns a strictly increasing number to each change allows the data to be efficiently retrieved in change order provides the data in a form capable of being filtered and records insertion deletion and modification to the messaging database may be utilized. The following is one embodiment of a reliable events table in SQL DDL notation 

The baseDataIdentifier field identifies the base data being changed so it can be quickly retrieved. Examples include a primary key a record identifier a message identifier or any other unique way to identify the data being affected. After the database modifications have been applied to the index the query is executed with the index at .

An index identifier identifies the index of the messaging database . In one embodiment the index identifier indexNum in the index definition table described above corresponds to an index of the messaging database .

The index change number lastUpdateCN indicates the change number associated with the index . The index change number indicates the last database modification applied to the index and is used to determine if the index is current by comparing the index change number to a change number associated with the messaging database . The index change number is a sequential increasing number. If the change number associated with the messaging database is greater than the index change number the index is not current. Examples of change numbers include Messaging Application Programming Interface MAPI change number log sequence number LSN or log relative byte offset LRBA .

In one embodiment the index control record includes a dataset identifier dataSubset . The dataset identifier is used to identify the subset of messaging database data in the index . Any metadata to identify the subset of data indexed may be used including a mailbox identifier and folder identifier within that mailbox a table name and an index key range within a table a property of the data a comparison value and comparator and an expression containing properties of the data comparison values and comparators. For example all the mail from Bob is a subset of data identified as all the messages containing a property from where the value of the from property is equal to Bob . In another example all the mail received between 1 p.m. and 2 p.m. yesterday containing the word hippo in the subject property routed through china where the message was not encrypted is a subset of data identified as all messages where the receive time property is greater than 1 p.m. and less than 2 p.m. there exists a substring within the subject property matching hippo where the route taken property includes china and the encrypted property is not true. Identifying a subset of messaging database data allows for enhanced performance because when the index is referenced the query will be for a subset of the data and the index update component will update the index for the specified subset instead of the entire index .

In another embodiment the index control record includes a last referenced time lastReferenceTime . The last referenced time indicates the last time the index was referenced in the query. In one embodiment the index deletion component accesses each index control record and compares the last referenced time to the current date and time. If the last referenced time indicates that the index has not been used for a period of time the index is deleted. In the embodiment where the data subset identifier is used the data in the index for the subset set of messaging database data is deleted. The index itself will be deleted if no other subset of data is within the index .

At a check is made to determine if the index exists. In one embodiment metadata is created for each index in the messaging database . The metadata is searched to determine if the formulated index exists for the messaging database . In this embodiment the metadata is stored in the index definition table described above.

If the formulated index exists the query is executed at with the index . However if the formulated index does not exist the formulated index is saved as an unsatisfied request record at so it can be tracked by the index creation component . The unsatisfied request record includes the date and time the query would have utilized had it existed and an index definition used to define the index. In one embodiment the unsatisfied request record includes a data subset identifier as described above. In this embodiment a check is made to determine if the formulated index exists for a subset of data associated with the request. If the formulated query exists the query is executed with the index at . However if the formulated index does not exist an unsatisfied request record is generated for the index for the subset of the data at . illustrates one embodiment of a computer readable medium of the unsatisfied request record.

At the query is executed without the index . At the index is created as a function of the saved unsatisfied request record . In one embodiment the index is created during a period of low database activity. In another embodiment the index is created when a threshold of unsatisfied request records is met. For example the index may be created if two or more unsatisfied request records exist for the index . It should be apparent to one of average skill in the art that that are a multitude of other heuristics for selecting an optimal time to create the index .

A Request Time field requestTime identifies the date and time that the index would have been utilized by a query if it had existed. The Request Time field allows the system to track multiple requests for the same index. It also allows the system to calculate the frequency of the request for a particular index. Both of these characteristics can be used to determine when a new index should be created or the priority for creating indexes . For example suppose the index creation component is scheduled to execute during a three hour period of low database activity. Also assume that the index creation component is to stop after the three hour period even if all indexes for the unsatisfied requests have not been created. The index creation component accesses the unsatisfied requests and determines which index has been requested the most and creates that index first. Also if two or more indexes have been requested the same number of times the index creation component can determine the request time to determine which index was requested last and create that index first.

The Index Definition field keyOrder property sortAscending contains values that allow the index creation component to create the index for the messaging database . In one embodiment the index control record includes a dataset identifier dataSubset . As described above the dataset identifier is used to identify the subset of messaging database data in the index . When the index creation component creates the index it will populate the index with data indicated by the dataset identifier . Further if the index already exists the index creation component will populate the index with the subset of data indicated by the dataset identifier .

In operation server executes computer executable instructions such as those illustrated in the figures to implement aspects of the invention.

The order of execution or performance of the operations in embodiments of the invention illustrated and described herein is not essential unless otherwise specified. That is the operations may be performed in any order unless otherwise specified and embodiments of the invention may include additional or fewer operations than those disclosed herein. For example it is contemplated that executing or performing a particular operation before contemporaneously with or after another operation is within the scope of aspects of the invention.

Embodiments of the invention may be implemented with computer executable instructions. The computer executable instructions may be organized into one or more computer executable components or modules. Aspects of the invention may be implemented with any number and organization of such components or modules. For example aspects of the invention are not limited to the specific computer executable instructions or the specific components or modules illustrated in the figures and described herein. Other embodiments of the invention may include different computer executable instructions or components having more or less functionality than illustrated and described herein.

When introducing elements of aspects of the invention or the embodiments thereof the articles a an the and said are intended to mean that there are one or more of the elements. The terms comprising including and having are intended to be inclusive and mean that there may be additional elements other than the listed elements.

Having described aspects of the invention in detail it will be apparent that modifications and variations are possible without departing from the scope of aspects of the invention as defined in the appended claims. As various changes could be made in the above constructions products and methods without departing from the scope of aspects of the invention it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.

