---

title: Method and system for providing a version-independent interface
abstract: A method and system for exposing a version-independent interface to a computer resource. The interface system exposes a version-independent interface to a computer resource, such as a database or computer program. The interface system also provides a version-dependent interface to the computer resource that is typically not exposed. When the computer resource is modified, the version-dependent interface may be modified, but the version-independent interface might not be modified. When the version-dependent interface is modified, a mapping is generated (in some cases automatically) between the version-independent interface and the version-dependent interface. When an accessing computer program uses the version-independent interface to request services of the computer resource, the system uses the mapping to map the request to a request that is appropriate for the version-dependent interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07930685&OS=07930685&RS=07930685
owner: Siebel Systems, Inc.
number: 07930685
owner_city: San Mateo
owner_country: US
publication_date: 20060912
---
The present patent application is a continuation of U.S. patent application Ser. No. 10 247 258 filed on Sep. 18 2002 now U.S. Pat. No. 7 107 594 entitled Method and System for Providing a Version Independent Interface to a Computer Resource which claims the benefit of provisional U.S. patent application Ser. No. 60 392 248 filed on Jun. 27 2002 entitled Method and System for Providing a Version Independent Interface and is incorporated by reference herein in its entirety and for all purposes.

The described technology relates generally to interfaces to computer resources and particularly to updating of such interfaces.

Computer resources such as databases and application programs often expose interfaces through which computer programs can access the computer resources. For example a word processing program may expose an interface e.g. an application programming interface through which other computer programs can invoke the services of the word processing program. Through the exposed interface the other computer programs can invoke the services of the word processing program to for example display a document within a window of the other computer program. As another example a database may provide an object oriented interface through which other computer programs can access data within the database. If the database is relational then the object oriented interface may provide access to an object for each table within the database. The object may have functions for retrieving and modifying the rows within the table.

The use of interfaces to access computer resources helps ensure that accessing computer programs can be developed independently of the actual implementation of the computer resource. In particular the interface defines the way the computer resource is accessed independent of its implementation. Although some modifications can be made to an implementation without changing the interface many modifications require a resulting change in the interface. In particular some exposed interfaces are generated automatically. For example a relational database may have an object oriented interface generated automatically. Every time the schema of the relational database is modified however a new object oriented interface is generated. This automatic generation of the interface may decrease the costs for the provider of the relational database but it may increase costs for the provider s customers because of the need to frequently change their accessing computer programs.

When an interface is modified the accessing computer programs typically need to be changed to accommodate the modifications to the exposed interface. The cost of and time needed to change these computer programs can be quite high especially when many computer programs access the interface. The developers of such accessing computer programs may bear the entire cost of changing the accessing computer programs. These developers may be customers of the providers of the computer resources or they may sell accessing computer programs to customers of the providers. To help reduce the costs to their customers providers of such computer resources may try to minimize the modifications made to exposed interfaces that necessitates changing the accessing computer programs. As a result many providers of computer resources may delay making modifications as long as possible. Such delay however may deprive the provider of needed revenue and the provider s customers of the enhanced features of the modified computer resources.

It would be desirable to allow providers of computer resources a greater range of modifications that can be made to their computer resources without necessitating a modification to the exposed interface.

A method and system for exposing a version independent interface to a computer resource is provided. In one embodiment the interface system exposes a version independent interface to a computer resource such as a database or computer program. The interface system also provides a version dependent interface to the computer resource that is typically not exposed. When the computer resource is modified the version dependent interface may be modified but the version independent interface might not be modified. When the version dependent interface is modified a mapping is generated between the version independent interface and the version dependent interface. In particular the elements e.g. tables objects fields and data members of the version independent interface are mapped to elements of the version dependent interface. When an accessing computer program uses the version independent interface e.g. invokes a function of an API to request services of the computer resource the system uses the mapping to map the request to a request that is appropriate for the version dependent interface. In this way the underlying computer resources can be modified in such a way that would normally change their exposed interfaces but because of the use of the version dependent interface the version independent interface and the mapping the exposed version independent interface does not need to be modified and thus the accessing computer programs do not need to be changed.

A method and system for automatically mapping hierarchically organized information from a source hierarchy to a destination hierarchy may be used to generate the mapping between a version dependent interface and a version independent interface. The hierarchically organized information may represent an object oriented interface to a relational database or other computer resource. The source hierarchy may represent an internal interface and the destination hierarchy may represent an external interface. The hierarchy in one embodiment may be a tree like organization. In one embodiment the system provides an explicit mapping from a component e.g. object and table of the source hierarchy to a component of the destination hierarchy. The components of a hierarchy may be uniquely identified by the names of the components in the path from the root of the hierarchy to the component. The system may automatically map components of the source hierarchy which are not explicitly mapped e.g. by a person to components of the destination hierarchy. In particular the system may identify a corresponding component of the destination hierarchy that has the same name as the component of the source hierarchy. If so the system automatically maps the two components referred to as implicit mapping. Components may correspond when their ancestor components map to corresponding ancestor components of the hierarchies. In addition when components are mapped i.e. explicitly or implicitly their fields e.g. data members of objects may be automatically mapped when the fields have the same name. Also the component names and field names may be assigned aliases to assist in the automatic mapping of elements e.g. components and fields with matching names or aliases. The use of implicit mapping may assist a developer of an accessing computer program to customize a version independent or external interface.

This automatic mapping may be used to help developers of accessing computer programs customize the computer resources. In the case that the computer resource is a relational database the developer may want to add an additional field to the relational database. After adding the field the developer may run a program to automatically generate the version dependent interface that represents a source hierarchy. The version dependent interface will have the new field. The developer can then customize the version independent interface or destination interface to add the new field. The developer can use the same map that was used to map the interfaces before adding the new field to map the interfaces after adding the new field. The new field will be automatically mapped assuming the field name in the interfaces match. Such automatic mapping simplifies the customization of computer resources by developers of accessing computer programs and simplifies the adding of the customizations to new versions of the computer resources.

The automatic mapping also helps developers apply their customizations to upgraded versions of the computer resources. When a developer receives the upgraded version and its new mapping between the version dependent interface and the version independent interface the developer can apply the customizations to the upgraded version. The developer can however use the new mapping without modification just like the developer used the previous mapping without modification. The fields added by the customization will be automatically mapped to the customized version independent interface. Thus the developer need not change the mapping or the custom version independent interface when a computer resource is upgraded.

In this example the exposed interface provides access to a data model which in this example is a relational database via the object relational layer .

The accessing application invokes the functions defined by the exposed interface. In one embodiment the object relational layer may provide an object for each table in the relational database as defined by schema . For example if the schema defines an account table with a name field and an organization field then the object may be named account and include methods to add a new account record to the account table to delete an account record from the account table or to modify an account record of the account table. The parameters of the methods may include the values for the name field and the organization field. The interface layer may include an interface for each table defined by the schema. The following is an example definition of an interface for the account object.

The version dependent interface represents a modification to the data model in which an organization table has been added as a child table of the account table . In addition a division field has been added to the account table and the name of the contact table has been changed to the contact information table . In this example the primary record of the organization table of the version dependent interface is explicitly mapped to the organization field of the account table of the version independent interface as indicated by solid line . In addition the contact information table is explicitly mapped to the contact table as indicated by solid line . The account table the address table and the name field of the account table of the version dependent interface can be automatically mapped to the corresponding elements in the version independent interface as indicated by the dashed lines. In this example there is no element of the version independent interface that corresponds to the new division field of the version dependent interface and thus the new division field is not mapped. In this case if a developer of an accessing computer program wants to access the division field then the developer could add that field to the account table and the field would be mapped automatically. The elements of a version dependent interface may be explicitly mapped to elements of a version independent interface as described in U.S. patent application Ser. No. 09 818 015 entitled Declarative Data Transformation Engine filed on Mar. 26 2001 which is hereby incorporated by reference.

From the above it will be appreciated that various embodiments of the invention have been described for purposes of illustration. One skilled in the art will appreciate that modifications may be made without deviating from the spirit and scope of the invention. Accordingly the invention is not limited except as by the appended claims.

