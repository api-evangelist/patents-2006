---

title: Accelerated video encoding
abstract: A video encoding acceleration service to increase one or more of the speed and quality of video encoding is described. The service acts as an intermediary between an arbitrary video encoder computer program application and arbitrary video acceleration hardware. The service receives one or more queries from the video encoder to identify implementation specifics of the video acceleration hardware. The service interfaces with the video acceleration hardware to obtain the implementation specifics. The service communicates the implementation specifics to the video encoder. The implementation specifics enable the video encoder to: (a) determine whether one or more of speed and quality of software encoding operations associated with the video encoder can be increased with implementation of a pipeline of one or more supported encoding pipeline configurations and capabilities, and (b) implement the pipeline by interfacing with the service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07929599&OS=07929599&RS=07929599
owner: Microsoft Corporation
number: 07929599
owner_city: Redmond
owner_country: US
publication_date: 20060224
---
Multimedia content production and distribution operations typically include video encoding. Video encoding processes are typically very data and computationally intensive. As a result video encoding processes can be very time consuming. For example it may take several tens of hours for a software encoder to encode a high quality high definition movie. Since quality and speed of video encoding processes are significant factors for successful multimedia content production and distribution pipelines systems and techniques to increase the speed at which high quality video content can be encoded would be useful.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the detailed description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

In view of the above a video encoding acceleration service to increase one or more of the speed and quality of video encoding is described. The service acts as an intermediary between an arbitrary video encoder computer program application and arbitrary video acceleration hardware. The service receives one or more queries from the video encoder to identify implementation specifics of the video acceleration hardware. The service interfaces with the video acceleration hardware to obtain the implementation specifics. The service communicates the implementation specifics to the video encoder. The implementation specifics enable the video encoder to a determine whether one or more of speed and quality of software encoding operations associated with the video encoder can be increased with implementation of a pipeline of one or more supported encoding pipeline configurations and capabilities and b implement the pipeline by interfacing with the service.

Systems and methods for accelerated video encoding provide a video encoding acceleration service. This service allows an arbitrary video encoder application to interface in a device independent manner with arbitrary video acceleration hardware to define and implement a substantially optimal video encoding pipeline. To accomplish this the service exposes video acceleration VA application program interfaces APIs . These APIs encapsulate a model of the video encoding process. To define an encoding pipeline the video encoder application uses the VA APIs to query implementation specifics e.g. capabilities etc. of available video graphics acceleration hardware. The video encoder evaluates these specifics in view of the application s particular video encoding architecture software implemented to identify any encoding operations that could benefit e.g. speed and or quality benefits from being accelerated in hardware. Such operations include for example motion estimation transform and quantization operations and inverse operations such as Motion compensation inverse transforms and inverse quantization. The API also allows the video encoder to design an encoding pipeline that substantially minimizes dataflow transitions across buses and processors associated with the host computing device and the acceleration hardware and thereby further increase encoding speeds. The API also allows the acceleration hardware to influence the location of the data to improve local caching e.g. the video acceleration hardware may functional more efficiently on memory local to the video hardware .

Based on these evaluations the video encoder designs a customized video encoding pipeline that performs some number of encoding operations in software and some number of encoding operations using the acceleration hardware i.e. at least a subset of the operations that could benefit from being hardware accelerated . The encoder application then uses the API to create the pipeline and encode video content. This customized pipeline is substantially optimized as compared to a completely software implemented pipeline because certain encoding operations are accelerated and data transitions between the host and the acceleration hardware are minimized. Additionally processing time freed up by accelerating certain aspects of the encoding process and minimizing data transitions allow the host processor s to perform higher quality encoding operations with freed up processing cycles. The API is also designed to allow components to operate in parallel so that computational resource usage can be maximized.

These and other aspects of the systems and methods for accelerated video encoding are now described in greater detail.

Although not required the systems and methods for accelerated video encoding are described in the general context of computer executable instructions program modules being executed by a computing device such as a personal computer and graphics video encoding acceleration hardware. Program modules generally include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types.

In this implementation video encoder is an arbitrary video encoder. This means that the particular architecture operation data formats etc implemented and or utilized by video encoder are arbitrary. For example video encoder may be distributed by a third party an OEM etc. Additionally although shows video encoding acceleration service independent of the operating system portion of other program modules in one implementation video encoding acceleration service is part of the operating system.

Video processing modules receive compressed or uncompressed input video data . When input video data is compressed already encoded video processing modules decode the input video data to produce decoded source video data. Such decoding operations are performs by a decoder module.

In another implementation partially decoded data could also be retained to further assist the encoding process. For purposes of exemplary illustration such a decoder module is shown as a respective portion of other video processing modules . Thus decoded source video data is represented either by input video data that was received in a decoded state or represented with results of decoding input video data that was received in an encoded state. Decoded source video data is shown as a respective portion of other program data .

To design and implement a customized video encoding pipeline that can be used to encode decoded source video data into encoded video data video encoder interfaces with video encoding acceleration service via video acceleration VA APIs . To define an encoding pipeline the video encoder application uses respective ones of the VA API e.g. IVideoEncoderService to obtain implementation specifics of available acceleration hardware . Such implementation specifics include for example 

Responsive to receiving such requests from the video encoder video encoding acceleration service queries the video acceleration hardware for the requested implementation specifics and returns information associated with the corresponding responses from the acceleration hardware to the video encoder . Video encoding acceleration service interfaces with the video acceleration hardware using a corresponding device driver. Such a device driver is shown as respective portion of other program modules .

Video encoder evaluates the implementation specifics supported by acceleration hardware in view of the application s particular video encoding architecture software implemented to identify any encoding operations that could benefit e.g. speed and or quality benefits from being accelerated in hardware select a search profile to encapsulate a trade off between video encoding quality and speed minimize data transitions across buses and between processors etc. Exemplary operations that may benefit from hardware acceleration include for example motion estimation transform and quantization. For example one reason to perform quantization in hardware is to minimize dataflow between pipeline stages.

Referring to the exemplary video encoding pipeline of and in this particular implementation video encoder takes as input some form of compressed or uncompressed video data input video data . The video encoder is configured to convert the input data to another compressed form. For example such operations may include converting uncompressed YUV video data to compressed MPEG 2 or it may include transcoding video data from MPEG 2 data format to WMV data format. For purposes of exemplary illustration assume that the transcoding operations include a full or partial decompression stage followed by an encode stage there are more efficient models which by pass decompression and work purely in the transform DCT space .

A number of video compression formats make use of motion estimation transform and quantization to achieve compression. Of the compression stages motion estimation is typically the slowest step including a massive search operation where an encoder e.g. video encoder attempts to find the closest matching reference macroblock for macroblocks in a given image. Once the optimal motion vectors are determined for each of the macroblocks the encoder computes the differential residues based on the previously coded image and the optimal motion vector. The motion vector along with the differential residue is a compact representation of the current image. The motion vector data is further represented differentially. The host encoder can optionally request the re evaluation of motion vectors by the video acceleration hardware to find a macroblock with a smaller combined motion vector and or residual. The resulting differential motion vector data and the residual data are compacted for example using techniques like run length encoding RLE and differential coding e.g. Huffman and Arithmetic coding to generate the final coded stream of bits encoded video data .

Referring again to in one implementation video encoder is a multi threaded application providing for full utilization of acceleration hardware . In this implementation when determining which video encoding operations are to be accelerated in hardware video encoder may structure the particular pipeline configuration such that both processor and acceleration hardware is fully utilized. For example when video encoding pipeline motion estimation operations are being performed by hardware for a particular frame of video data the pipeline may be configured to perform entropy or arithmetic or Huffman coding operations in software by the host on a different frame of video data. An exemplary single motion vector pipeline can be implemented representing the particular pipeline configuration selected structured. Exemplary multiple motion vector relatively complex pipelines can be implemented wherein video encoder requests multiple motion vectors from acceleration hardware and selects one motion vector pipeline based on various parameters.

With respect to selecting a search profile the quality of motion vectors refers to a bitrate of a stream generated by the use of the motion vectors. High quality motion vectors are associated with low bitrate streams. The quality is determined by the completeness of the block search the quality of the algorithm the distance metric used etc. High quality motion vectors should be used to perform high quality video encode operations. To address this video encoding acceleration service provides a generic construct called a search profile to encapsulate a trade off between quality and time. The search profile also includes meta data to identify the search algorithm used by the acceleration hardware etc. Video encoder chooses a particular search profile based on the particular requirements of the encoder s implementation.

With respect to minimizing data transitions across buses and between processors an encode process implemented by a video encoding pipeline configuration will typically include several processing stages each of which may or may not be accelerated via acceleration hardware . In cases where video encoder determines to utilize hardware acceleration in successive stages of the encode pipeline it may not be necessary to move data from acceleration hardware based memory to the system memory associated with the host computing device and then back to acceleration hardware based memory for the next stage and so on.

More particularly while pointers to various types of video and motion vector data may be transferred back and forth between the host computing device and the acceleration hardware actual data is copied to system memory only when the data pointer a D3D9 Surface pointer is explicitly locked using IDirect3DSurface9 LockRect.

Exemplary interfaces for locking a surface are known e.g. the well known IDirect3DSurface9 LockRect.interface . Thus in cases where two encoding pipeline stages follow one another and host computing device does not need to do perform any intermediate processing host computing device can decide not to Lock the allocated buffer between the processing stages. This will prevent a redundant memory copy of data and thereby avoid unnecessary data movement transfers. In this manner video encoder is able to design a video encoding pipeline that substantially minimizes data transfers across buses and between processors and thereby further increase video encoding speeds.

At this point video encoder has evaluated the implementation specifics supported by acceleration hardware in view of the application s particular video encoding architecture software implemented to identify any encoding operations that could benefit from being accelerated in hardware selected a search profile minimized data transitions across buses and between processors and or so on. Based on these determinations video encoder selects a particular pipeline configuration to encode decoded source video data and thereby generate encoded video data . Next video encoder interfaces with video encoding acceleration service to create an encoder object to implement the selected pipeline CreateVideoEncoder API . In this implementation an encoder object e.g. a regular COM object is created by identifying the selected pipeline configuration and one or more of the following a format for the output encoded bitstream the number of input and output data streams associated with the pipeline configuration static configuration properties a suggested number of buffers surfaces for association with the different I O streams based on the selected pipeline configuration and a driver specified allocator queue size based on resources a graphics device driver is able to gather and other parameters. Queue size and the number of data buffers are essentially referring to the same thing one is suggested the other is actual .

Next video encoder uses the created encoder object to interface with the video encoding acceleration service to encode the decoded source video data. To this end the encoder object submits execute requests to acceleration hardware IVideoEncode Execute API .

In view of the above system allows arbitrary implementations of video encoder applications to define and create video encoding pipeline configurations during runtime to take full advantage of available video encoding acceleration hardware to increase encoding speed and quality. As part of these runtime configuration operations the video encoder can use VA APIs to specify that the encoding pipeline is to implement iterative directed searching multiple search passes of increasing refinement define and use generically selectable search strategies e.g. selecting a search algorithm based on quality metrics independent of any knowledge of details about the actual algorithm been employed utilize format independent methodologies e.g. where a video encoder is unaware of the particular image format of input video data and the acceleration hardware is unaware of the compressed output format for the encoded video data to control searching adapt data sizes e.g. where the video encoder selects a macro block size based on a search algorithm and so on.

At block video encoder receives input video data . If the input video data is not compressed the input video data represents decoded source video data. At block if the input video data is compressed video encoder decompresses the input video data to generate decoded source video data. At block video encoder interfaces with VA API to query acceleration hardware for capabilities and video encoding pipeline configuration implementation specifics. At block video encoder evaluates the supported capabilities and implementation specifics within the context of the implementation of the video encoder to identify video encoding operations associated with the particular implementation of the video encoder that may benefit from hardware acceleration make encoding speed and or quality decisions minimize data transitions across busses and between processors and or so on.

At block video encoder creates an encoding object that implements an encoding pipeline configured to execute the identified video encoding operations that may benefit from hardware acceleration in acceleration hardware implement the speed quality tradeoffs e.g. via a selected search profile and minimize data flow transitions. At block video encoder uses the created encoder object to encode the decoded source video data according to the sequence of operations and encoding architecture delineated by the customized video encoding pipeline generated at block . These encoding operations of block generate encoded video data .

Although the systems and methods for accelerated video encoding have been described in language specific to structural features and or methodological operations or actions it is understood that the implementations defined in the appended claims are not necessarily limited to the specific features or actions described.

For example although API s of have been described within the context of encoding video data APIs can be used outside of the encoding context for hardware acceleration of other functions such as edge detection motion vector based noise reduction image stabilization sharpening frame rate conversion velocity computation for computer vision applications etc. For instance with respect to noise reduction in one implementation video encoder computes motion vectors for all macroblocks of decoded source image data. Then video encoder utilizes motion magnitude direction and correlation to motion vectors of surrounding macroblocks to determine whether there is a local object motion in the input image. In this implementation the video encoder of then utilizes the magnitude of the vector to direct object tracking filtering aggressiveness or average shifts of a particular object to reduce statically random noise.

In another example with respect to image stabilization in one implementation video encoder computes motion vectors for all macroblocks and decoded source data. Video encoder then determines whether there is global motion in the image. This is accomplished by correlating all motion vector values and determining whether the correlated values are similar. If so then video encoder concludes that there is global motion. Alternatively the video encoder utilizes a large macroblock size and determines if there is overall motion of the large macroblock. After determining whether global motion is present if video encoder also finds that the global motion vector tends to be jerky across frames video encoder concludes that there is camera jerkiness and compensates for this before starting noise filtering and encoding operations.

Accordingly the specific features and operations of system are disclosed as exemplary forms of implementing the claimed subject matter.

