---

title: Method for displaying and formatting messages in web applications using JavaServer Faces
abstract: Methods, machine-accessible media, and systems for displaying and formatting messages in web applications using JavaServer Faces (JSF). A JSF FacesMessage is intercepted before the FacesMessage is sent to a JSP page for display. The FacesMessage may be intercepted by a phase listener monitoring the JSF phases to obtain information from the message. The method may also be extended to handle application-specific messages. A managed bean receives the message information and creates a JSP page segment that provides formatting to the information. The newly created JSP page segment is then displayed in the JSP page instead of the FacesMessage. Preferably, the formatting within the JSP page segment includes additional content selected from a message icon, a message identification code, an additional message segment, and combinations thereof. Furthermore, the JSP page segment may optionally provide advanced features, such as clickable image links for additional information or help.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07895607&OS=07895607&RS=07895607
owner: International Business Machines Corporation
number: 07895607
owner_city: Armonk
owner_country: US
publication_date: 20061102
---
The present invention relates to displaying and formatting messages in a web application developed using JavaServer Faces JSF .

In the Java 2 Platform Enterprise Edition J2EE Web components like Java servlets and JavaServer Pages JSP provide dynamic extension capabilities for a Web server. Servlets are Java programming language classes that dynamically process requests and construct responses. JSP pages are text based documents that execute as servlets but allow a more natural approach to creating static content. Although servlets and JSP pages can be used interchangeably each has its own strengths. Servlets are best suited for service oriented applications and the control functions of a presentation oriented application such as dispatching requests and handling non textual data. JSP pages are more appropriate for generating text based markup such as HTML Scalable Vector Graphics SVG Wireless Markup Language WML and XML.

Web components are supported by the services of a runtime platform called a web container. A container provides an interface between the component and low level platform specific functionality that supports the component. Before a web component enterprise bean or application client component can be executed it must be assembled into a module and deployed into its container. A Web container manages the execution of JSP page and servlet components for J2EE applications. More specifically a web container provides services such as request dispatching security concurrency and life cycle management and provides web components with access to application programming interfaces APIs such as naming transactions and email. Both the web components and their container run on the web server. When the web server runs the Java 2 Platform Enterprise Edition J2EE it may be referred to as a J2EE server.

Since the introduction of Java Servlet and JSP technology additional Java technologies and frameworks for building interactive web applications have been developed. JavaServer Faces JSF for example is becoming the new standard for building server side user interfaces for Web applications. JavaServer Faces technology includes a set of APIs for representing user interface UI components and managing their state handling events and input validation defining page navigation and supporting internationalization and accessibility. A JavaServer Pages JSP custom tag library is also included for expressing a JavaServer Faces interface within a JSP page.

However JSF tags provide very little flexibility for formatting the message for display. For example is an illustration of a graphical display produced by a JSP page having received prior art FacesMessages generated in accordance with . The FacesMessages are displayed as text in messages respectively.

However it is very difficult to satisfy the dynamic formatting requirements of advanced web applications using existing JSF methods. Therefore there is a need for a method to display messages in an easy formattable manner. It would be desirable to have a method that combines the simplicity of using FacesMessage with advanced display and formatting features.

The present invention provides a method of displaying and formatting messages in a web application developed using JSF and a machine accessible medium containing instructions which when executed by a machine cause the machine to perform operations in accordance with the method. The method comprises the steps of intercepting a JSF FacesMessage before the FacesMessage is sent to a JSP page for display interpreting the message information in the FacesMessage creating a JSF managed bean for storing the interpreted message information creating a JSP page segment that provides formatting to the interpreted message information and displaying the JSP page segment in the JSP page instead of the FacesMessage. Preferably the formatting within the JSP page segment includes additional content selected from a message icon a message identification code and an additional message segment. Furthermore the formatting within the JSP page segment may optionally include a clickable image link such that the method may further comprise displaying an additional message segment related to the information upon activation of the clickable image link.

In a preferred embodiment the step of intercepting a JSF FacesMessage includes monitoring JSF phases. In one embodiment the method further comprises sending the JSF FacesMessage to the JSP page for display using the or command in a separate segment from the JSP page segment that was created. Optionally the JSF FacesMessage is used to point to a component related to the information in the JSP page segment.

The invention also provides a system for displaying messages. The system comprises a phase listener for intercepting a JSF FacesMessage before the FacesMessage is sent to a JSP page for display a Managed Bean for creating a JSP page segment that formats information from the FacesMessage and a JSP page configured to display the JSP page segment instead of the FacesMessage. Optionally the Managed Bean may format the JSP page segment to include additional content selected from a message icon a message identification code and an additional message segment. Furthermore the Managed Bean may format the JSP page segment to include a clickable image link wherein an additional message segment related to the information is displayed upon activation of the clickable image link. Preferably the PhaseListener monitors JSF phases.

In one embodiment of the system the JSP page also displays the JSF FacesMessage in a separate segment outside the JSP page that was created. In another embodiment the JSP page displays a pointer directed at a component related to the information in the JSP page segment wherein the pointer is outside the JSP page segment that was created. The system will typically include a web application server running a Java servlet that displays content through JSP.

In yet another embodiment the invention may process an application specific message to be displayed through one of the foregoing embodiments such as a method including the steps of intercepting a JSF FacesMessage before the FacesMessage is sent to a JSP page for display creating a JSP page segment that provides formatting to information from the Managed Bean and displaying the JSP page segment in the JSP page instead of the FacesMessage. The JSP segment used for displaying the message information can also be further constructed into a custom tag library using the current implementation.

The present invention provides improved methods machine accessible media and systems for displaying and formatting messages in web applications using JavaServer Faces JSF . A JSF FacesMessage is intercepted before the FacesMessage is sent to a JSP page for display. The FacesMessage may be intercepted by a phase listener that monitors the JSF phases in order to obtain information from the message. A Managed Bean receives the message information and creates a JSP page segment that provides formatting to the information. The newly created JSP page segment is then displayed in the JSP page instead of the FacesMessage. Preferably the formatting within the JSP page segment includes additional content selected from a message icon a message identification code and an additional message segment. Furthermore the formatting within the JSP page segment may optionally include a clickable image link such that the method may further comprise displaying an additional message segment related to the information upon activation of the clickable image link. Certainly the formatting may include the use of borders background colors fonts images style classes and other well known formatting capabilities.

Optionally the JSF FacesMessage may still be used in some instances or for other purposes. For example the FacesMessage may be used for display in the same or different JSP page using the or command in a segment other than the newly created JSP page segment. Optionally the FacesMessage is used to point to a component related to the information in the JSP page segment.

In one embodiment a message display flag is enabled when the phase listener detects a FacesMessage or by directly accessing an enableMsgs method in the message bean. The flag is detected by the message bean such that the flag controls the rendering of the message as a JSP page segment. Accordingly the JSP page segment containing the message will only be displayed when this flag is enabled.

The method is preferably carried out in a web application server for providing a web client with access to a web application. The web application includes a Java servlet that is supported by Java such as the Java 2 Platform Enterprise Edition J2EE JavaServer Pages JSP JavaServer Faces JSF and a JSP Standard Tag Library JSTL which are all deployed in a web container installed on the web application server. The Web application server preferably operates a conventional server software program such as International Business Machines WebSphere for administering the web application program. The web server may include or communication with a database. The methods and systems described can provide an advanced web application with dynamic content including enhanced message displays.

The detailed examples described herein show only the case for displaying a single message i.e. the first FacesMessage object detected by a PhaseListener for each request . However the present invention encompasses the interpreting and displaying of multiple messages in a JSP page if multiple FacesMessages are generated for each request.

The JSF phases include Restore View Apply Request Values Process Validations Update Model Value Invoke Application and Render Response . The PhaseListener monitors the application level phases receives a copy of the information in the FacesMessage object and provides this information to the MessageBean which is a JSF managed bean. The MessageBean may then include the information along with formatting instructions and other optional information into a JSP page segment Message.jsp that is included in a JSP page . As shown by line the FacesMessage may also be used in a more conventional manner at another point in a JSP page.

Faces messages can be generated in any of the JSF phases but validation and conversion messages are usually generated in the Process Validation phases. Application specific messages are added in the Invoke Application phases and are generated in the form of FacesMessage objects . The PhaseListener monitors all events and FacesMessages generated and determines whether the message is a system message generated by system validation or whether the message is an application specific message generated by an application implementation. The PhaseListener then sets the proper information to the MessageBean . The MessageBean parses the information in the FacesMessage and fetches information such as message ID message message icon link additional message etc. needed in formatting the display. For example the MessageBean may extract a message specific to the client language from a message catalog and store the message for formatting and display. A JSP page segment is constructed to display the information obtained from the MessageBean in a more controllable format based on customer requirements. New display styles can be added to this JSP page segment. This JSP page segment can be embedded to any JSF JSP page to display any possible messages generated from the system and or the application.

A typical message contains 1 a message ID 2 a default message 3 possible parameters for substituting in a real translated message from a message catalog 4 additional detail messages and 5 the severity of the message. However the FasesMessage object only contains two fields i.e. a summary field and a detail field in which to save this information from the message. Accordingly this information is concatenated into a single string. The message bean may execute a method for composing substitute parameters a message ID and a summary message string. One example of such a method is as follows 

An application specific message or custom application message can be composed and added by an application. An exemplary method for generating an application specific message may be implemented as follows 

After the PhaseListener has intercepted the FacesMessage the PhaseListener then assigns the information including the composed summary message string the detail message string and the client locale. A flag in the message bean for controlling whether to display the message will be set to true. The enableMsg method in the MessageBean will be called and this method may then de compose the summary message string and the detail message string based on the rules used for composing these strings in composeSummaryMsg and composeDetailMsg methods. Accordingly the message bean is able to extract 1 the message ID 2 the default message 3 the possible parameters for substituting in a real translated message from a message catalog and 4 the additional detail messages. A message catalog may be loaded based upon the client locale so that the MessageBean can extract translated messages consistent with the client locale for display.

In response to receiving message information from the FacesMessage via the PhaseListener the Message Bean makes the following attributes available for extraction and display 

These message attributes can be used by a JSP page segment . An exemplary JSP page segment is as follows 

The JSP page also includes a code segment that includes an tag in order to display a summary of the FacesMessage as an asterisk . In this example the summary was established as an asterisk by programming within the PhaseListener. The asterisk serves as a pointer indicating which component the error message is related to.

It should be appreciated that the present invention may be implemented in software that is stored as executable instructions on a computer readable medium on the Web application server such as in mass storage device or in memory . The Web application server system is shown having a Web application server program a Java programs including a Java servlets JSP JSF JavaBeans a tag library a PhaseListener object and a MessageBean object and a database stored in mass storage device . The Web application server is thus suitable for processing receiving and responding to HTTP requests using JavaServer Faces in a manner that a FacesMessage is obtained by a PhaseListener and provided to a MessageBean for creating a JSP page segment with advanced formatting and additional content or detail in accordance with .

The communications network is the medium used to provide communications links between the Web application server and any number of various devices and computers individually represented as computer . The communications network may include permanent connections such as wire or fiber optic cables or temporary connections made through telephone or wireless communications. A registered user s computer and the Web application server may be represented by a variety of types of computing devices such as mainframes personal computers personal digital assistants PDAs smart phones etc. The server system may include additional servers clients routers and other devices not shown. In the example of the network system may include the Internet a worldwide collection of networks and gateways that use the TCP IP suite of protocols to communicate with one another . Of course the Web application server may also communicate over a number of different types of networks such as for example an intranet a local area network LAN or a wide area network WAN .

The present invention can be implemented on a variety of hardware platforms and can be implemented in a variety of software environments. A typical operating system may be used to control program execution within the data processing system. Furthermore although the preferred embodiment described below includes a browser at the registered user s computer as the agent that exchanges data in the security protocols with the Web application server the agent at the registered user s computer does not have to be a conventional browser such as Netscape Navigator or Microsoft Internet Explorer . In order to optionally secure the information transmitted to and from the server the user s computer may be capable of Public Key Infrastructure PKI technology exchanged in a security protocol such as the Secure Sockets Layer SSL version 3.0 and above.

The Web application server preferably operates a conventional server software program such as International Business Machines WebSphere for administering the Web application program. The server software includes application programs that enable the server to manage a web application program.

The computer network may be the Internet an intranet or other network. The server may be a Web application server WAS a server application a servlet process or the like. Optionally the registered user s device submits an HTTP request to the Web application. The application server generates a graphical user interface that is displayed on a graphical display screen by the browser on the device .

It should be recognized that the invention may take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In particular embodiments including those embodiments of methods the invention may be implemented in software which includes but is not limited to firmware resident software and microcode.

Furthermore the invention can take the form of a computer program product accessible from a computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W DVD read only memory DVD ROM and DVD read write DVD R W .

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modems and Ethernet cards are just a few of the currently available types of network adapters.

The terms comprising including and having as used in the claims and specification herein shall be considered as indicating an open group that may include other elements not specified. The term consisting essentially of as used in the claims and specification herein shall be considered as indicating a partially open group that may include other elements not specified so long as those other elements do not materially alter the basic and novel characteristics of the claimed invention. The terms a an and the singular forms of words shall be taken to include the plural form of the same words such that the terms mean that one or more of something is provided. The term one or single may be used to indicate that one and only one of something is intended. Similarly other specific integer values such as two may be used when a specific number of things is intended. The terms preferably preferred prefer optionally may and similar terms are used to indicate that an item condition or step being referred to is an optional not required feature of the invention.

It will be understood from the foregoing description that various modifications and changes may be made in the preferred embodiment of the present invention without departing from its true spirit. It is intended that this description is for purposes of illustration only and should not be construed in a limiting sense. The scope of this invention should be limited only by the language of the following claims.

