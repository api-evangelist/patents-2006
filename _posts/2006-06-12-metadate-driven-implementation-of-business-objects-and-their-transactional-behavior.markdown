---

title: Meta-date driven implementation of business objects and their transactional behavior
abstract: Systems, methods and computer readable media are provided for the creation of a business object. In one exemplary embodiment, the method may include defining the shell of a business object utilizing meta-data stored within a repository. The method may also include storing the defined business object shell within the repository. Moreover, the method may include generating a business object template utilizing the business object shell, meta-data, and hooks for calling generic business logic, and modifying the hooks to insert the generic business logic.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08001521&OS=08001521&RS=08001521
owner: SAP AG
number: 08001521
owner_city: Walldorf
owner_country: DE
publication_date: 20060612
---
The present invention generally relates to data processing. More particularly the present invention relates to systems and methods for implementing business objects and their transactional behavior using meta data.

There is and will continue to be advances and changes in how enterprises conduct business. Whether theses advances and changes occur through growing competition and globalization mergers and acquisition or a revamping of business models the key for success will often depend on how quickly the enterprise s information technology IT organization can adapt to evolving business needs. Therefore a major challenge to these enterprises is how they handle these changes from an IT standpoint.

For IT organizations to enable business agility they must ensure that enterprise applications are not only high performance business engines driving efficiencies but also that they become flexible building blocks of future business systems. One solution to achieve this goal is the use of a Service Oriented Architecture SOA . SOA refers to a software architectural framework that encourages the creation of loosely coupled services that communicate and pass information between the applications or modules. An implementation example of an SOA is the Enterprise Service Architecture ESA developed by SAP AG of Walldorf Germany. In particular the ESA is implemented through NetWeaver an integration and application platform also developed by SAP AG. Other examples of SOA enabling platforms are NET developed by Microsoft and Web Sphere developed by IBM.

Specific examples of the loosely coupled services used within an SOA are services. A service such as a Web service represents a self contained self describing piece of application functionality that can be found and accessed by other applications. A service is self contained because the application using the service does not have to depend on anything other than the service itself and self describing because all the information on how to use the service can be obtained from the service itself. The descriptions are centrally stored and accessible through standard mechanisms to all applications that would like to invoke the service.

Because services are generally granular in nature services may be aggregated into enterprise services which provide more meaningful building blocks for the task of automating enterprise scale business scenarios. Enterprise services allow IT organizations to efficiently develop composite applications defined as applications that compose functionality and information from existing systems to support new business processes or scenarios. Enterprise services may communicate using standard mechanisms can be described in a central repository and are created and managed by tools provided by the application platform. The repository may be used to store all relevant pre existing enterprise services and to make them available to selected partners and customers.

An invocation of a service or enterprise service typically involves the service s interaction and manipulation of data specifically data in the form of business objects stored within a repository or database such as a enterprise service repository. The term business object when used in SOA represents a physical or logical object of significance to a business such as a sales order. The description and creation of a business object may be accomplished through the use of meta data. Meta data is data that describes other data. For the most part the creation of a business object using meta data is done manually and therefore requires a great deal of time and resources.

In some systems meta data is used to create only the shell e.g. the look and layout of the business object. As a result the business object contains no real business logic. Generally business logic refers to a set of methods or procedures used to manage a business function. For example business logic may be used to check the transactional data of a business object before that transactional data is stored in a persistent database. In other words business logic refers to the set of business specific rules that help identify the structure and behavior of the business object along with the pre and post conditions that must be met when a business object exposes its behavior to other objects in the system. Because in the above system the business object lacks any real business logic a developer or user of the business object will have to manually create the business logic. Further a developer will have to manually locate places within the business object that require business logic.

In other systems there is some automatic generation of logic for a business object. However in those systems the logic that is generated is limited to buffer logic. Buffer logic refers to methods and procedures used to manage the database access and the state handling of a business object. The buffer logic generated in these systems is generic buffer logic. Generic buffer logic refers to logic that allows database access and state handling operations to be performed in the same way irrespective of the business object that is involved. The development of business objects may be facilitated by centrally storing the generic buffer logic and allowing access to developers. However as in the previously discussed system this system would also require a developer to manually create the business logic that pertains to the business object and manually locate the places within the business object that require business logic.

Accordingly there is a need to utilize meta data with little or no human interaction to create not only the shell of a business object but also a business object template for the implementation of the business object. This may be accomplished through the use of an adapter that utilizes business object meta data previously stored in a repository of the enterprise. The business object template may provide a business object that is ready to run with hooks indicating where business logic may be added. A developer may utilize these hooks to modify the business object in order to provide the additional business logic. Thus the technical work of knowing wherein to add the business logic is provided by the adapter through the hooks of the business object template.

In accordance with principles of the present invention as embodied and broadly described herein methods systems and computer program products are provided for the creation of generic business logic through the utilization of meta data.

According to one embodiment a method is provided for creating a business object. The method may comprise defining the shell of a business object utilizing meta data stored within a repository storing the defined business object shell within the repository generating a business object template utilizing the business object shell meta data and hooks for calling generic business logic and modifying the hooks to insert the generic business logic.

In another aspect of the invention a computer readable medium containing instructions to configure a processor to perform a method of creating a business object is disclosed. The computer readable medium may include instructions for defining the shell of a business object utilizing meta data stored within a repository storing the defined business object shell within the repository generating a business object template utilizing the business object shell meta data and hooks for calling generic business logic and modifying the hooks to insert the generic business logic.

In another aspect of the invention a system for creating a business object is disclosed. The system may comprise a processor and a memory wherein the processor and the memory are configured to perform the method of defining the shell of a business object utilizing meta data stored within a repository storing the defined business object shell within the repository generating a business object template utilizing the business object shell meta data and hooks for calling generic business logic and modifying the hooks to insert the generic business logic.

It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention as described. Further features and or variations may be provided in addition to those set forth herein. For example the present invention may be directed to various combinations and subcombinations of the disclosed features and or combinations and subcombinations of several further features disclosed below in the detailed description.

Reference will now be made in detail to the invention examples of which are illustrated in the accompanying drawings. The implementations set forth in the following description do not represent all implementations consistent with the claimed invention. Instead they are merely some examples consistent with certain aspects related to the invention. Wherever possible the same reference numbers will be used throughout the drawings to refer to the same or like parts.

At present the development of a business object requires the manual creation and design of the business logic contained within the business object. This development not only includes the creation of specific business logic pertaining to specific business functions for a particular business object but also knowing all the locations where specific business logic is needed. However as will be further disclosed in the present invention there exists generic locations within a business object for the placement of certain generic business logic.

The existence of these generic locations may be explained further by using a sales order as an exemplary embodiment of a business object. As discussed above meta data may be used to create the shell e.g. the look and layout of a sales order. However in order to define the business functions of the sales order such as how data is inputted to the sales order how data is manipulated and how and where data is saved business logic is needed. At present this business logic is developed manually by a developer. In the development of a software application a developer is generally dealing with multiple types of business objects such as sales orders invoices business partners and the like. For each of these business objects the developer must generate different business logic. The business logic generated will be different from business object to business object because of the type of business object and or the specific client requirements for that business object. This type of business logic is herein referred to as specific business logic. However there exists some similarity within a business object concerning where certain business logic is needed. The similarity is a result of the fact that certain business functions should be performed at certain points during a transaction involving the business object. For example business logic that performs the checking of data associated with a transaction referred to herein as transactional data of a business object for completeness plausibility and or consistency is generally performed after transactional data is retrieved.

Embodiments consistent with the present invention recognize this similarity and utilize previously existing meta data such as meta data stored in a repository to create a business object template that may aid a developer in the development of the business object.

The foregoing discussion is intended to introduce and provide initial clarity for some of the aspects associated with the present invention. Further details of the above mentioned functionality and additional aspects features and embodiments of the present invention are described below.

System may be implemented as part of a services oriented architecture SOA which as discussed above is an architectural framework that is designed to include and utilize one or more services although any other architectural framework may be used. The services are accessible to other parts of the system such as client system and users of client system by means of user interface and through a communication mechanism such as the Internet intranet or any other type of network. The services may be retrieved from an external service provider or may be stored internally within the repository .

Service provider may be implemented as a server or storage device used by a service developer to store and share its developed services with others. Service provider may also be implemented as a system for the development of a service by a developer. The developed services may be subsequently stored within the developing system within repository or within both. Service provider may further be implemented as a service provider class which may make use of other classes or other services. The service provider class provides services to run the business object. As used herein services to run the business object refers to functions that interact with a business object such as query read create update delete associational retrieving actions transactional services and the like. Service provider may have access to the data tools and logic stored within the repository in order to facilitate the service provider in the development of services . It should be noted that although shows a single client system a single server system and a single service provider a plurality of client systems server systems and service providers may be used. Moreover the components depicted in may be distributed among multiple locations.

Further service provider may make the developed services available to other applications or programs . These developed services may be made available as a service such as a Web service or any other type of application accessible through a network.

Client system may include one or more processors such as computers to interface with server system . User interface may provide an interface to allow a user to interact with services and business objects . For example user interface may be a software application that utilizes the functionality and data of services stored in repository . In some implementations SAP Web Dynpro commercially available from SAP AG Walldorf Germany is used as a model based development environment for generating user interface although other development environments may also be used. User interface may call an application programming interface API of a proxy such as generic client proxy through network connection to for example interact with available services and business objects via the service manager .

Network connections may include alone or in any suitable combination a telephony based network a local area network LAN a wide area network WAN a dedicated intranet wireless LAN the Internet a wireless network a bus or any other communication mechanism. Further any suitable combination of wired and or wireless components and systems may provide network connections . Moreover network connections may be embodied using bi directional unidirectional or dedicated communication links. Network connections may also implement standard transmission protocols such as Transmission Control Protocol Internet Protocol TCP IP Hyper Text Transfer Protocol HTTP Simple Object Access Protocol SOAP Remote Procedure Call RPC or other protocols.

Server system may include one or more processors such as computers to interface with other computers such as client system . Server system may also include service manager main memory database and repository . The repository is the design time repository of service objects for system . These service objects may include the services themselves business objects and meta data . Other design time service objects such as business logic and buffer logic are stored in service provider . In the embodiment wherein service provider comprises a service provider class service provider may contain a specific service provider class and a generic service provider class . Business logic not only comprises specific business logic stored in specific service provider class but also may comprise a set of generic business logic stored in generic service provider class . Generic service provider class also stores buffer logic . This set of generic business logic may be utilized by varying types of business objects . In this embodiment buffer logic is generic in that it may also be used by varying types of business objects . However buffer logic may also contain buffer logic that is specific to a business object .

It should be noted that although repository is illustrated as being located in server system it may be alternatively located in a separate central system. Server system may then access the repository through the use of a proxy and the actual implementation of the services by a service provider class.

Repository also comprises meta data which is used as the building block for the other service objects. Meta data may be defined as data about data. For example meta data may refer to information about the data itself such as content quality condition origin size formatting characteristics of data and the like. The eXtensible Markup Language XML is a specific example of meta data because it is a format used to define other data objects. Meta data may include a schema. A schema is the organization or structure such as the organization of a database or the structure of an object in an object oriented program. In object oriented programming modeling i.e. the analysis of objects that are used in a business or other context and the identification of the relationships among these data objects leads to a schema which can be stored in repository as a schema. The schema can be depicted visually as a structure or a formal text oriented description e.g. script . For example meta data may be in the form of database tables. The meta data may include information such as the number of nodes in a business object the name s of the nodes the position of a node in the business object hierarchy the structure of a node associations actions and default queries on a node.

Referring again to repository is open to input from many contributors such as service provider who may store or develop services within the repository . Once in the repository the services may be available for reuse. Database stores the transactional data of the enterprise upon which the user interface interacts via the functionality of services .

Using a software application capable of performing the function of supply chain management as an non limiting example of a user interface an exemplary operation of a service call is discussed. A function of the supply chain management application may include the creation of a sales order and in turn this functionality is represented by a service that is stored in repository . In order for user interface to retrieve this required service generic client proxy may call the API of service manager at server system . When the API of service manager is called service manager may call a procedure through an API to instantiate the required service . As used herein the term instantiate means in an object oriented programming environment deploying customizing running and or executing an application function or object. Also as used herein the term instance means one or more copies of an application function or object that has been instantiated.

The service instance A is executed in main memory . Service may in turn instantiate one or more business objects . In this exemplary embodiment because a service that utilizes a sales order is instantiated a business object that represents the sales order is also instantiated. The business object instance A is also executed in main memory . The business object instance A may comprise business logic instance A and buffer logic instance A. As discussed above business logic refers to the set of business specific rules that help define the business functions of the business object which in this case is a sales order along with the pre and post conditions that must be met when an object exposes its behavior to other objects in the system. On the other hand the buffer logic refers to methods and procedures to manage the access of business object to the database and the state handling of the business object during the transaction. In this example the business logic instance A comprises not only specific business logic but also one or more generic business logic from the set of generic business logic stored within service provider . Also in this example the buffer logic instance A comprises generic buffer logic although specific buffer logic may be utilized.

After creation of the service instance A there may be an exchange of data and or commands between the service instance A and the user interface in order to perform the transaction of creating a sales order. For performance of the transaction various access methods to database is provided by generic client proxy or a local client proxy not illustrated which may be called by user interface . For example user interface may require data regarding the existing inventory of the goods to be sold by the sales order. The data pertaining to the inventory may be stored as transactional data in database . Generic client proxy or the local client proxy may provide the method by which the inventory quantity is accessed and retrieved by the purchase order. The transactional data may be held in main memory during the performance of the transaction. After the sales order is completed resultant transactional data for example a reduction in inventory by the number of items sold by the sales order is stored to database . Buffer logic instance A may perform state handling during the transactional event. For example buffer logic instance may perform the holding locking updating inserting and or deleting of data within database during the transactional event.

However prior to the transactional data being saved business logic instance A may be utilized to check the transactional data for completeness plausibility and or consistency. Further business logic instance A may enrich the transactional data by adding additional information to the transactional data before the data is saved in database . As used herein enrich refers to the method of adding data that may be derived or calculated from other data. For example the identity of a sales representative may be derived from the customer name and the geographic sales region of a particular sales transaction. The above set of methods and procedures are herein referred to as check and enrich. The check and enrich business function is a business function that may be utilized by varying business objects . Therefore the idea to have a method such as check and enrich is generic. However the actual implementation of the check and enrich method is specific since specific business logic will be needed to perform the method. The specific business logic utilized may depend for example on the type of business object. As a result runtime transaction buffer framework RTTBF adapter may create a business object template that is preconfigured with hooks that will call specific business logic relating to the necessary method of check and enrich for the particular business object . As used herein hooks refer to breakpoints within the logic that may be changed by a program developer to call other logic such as business logic.

Logic may include generic logic that is performed by RTTBF adapter but may not be a buffered method because the logic circumvents all buffers. For example the method Query is used to lookup business objects . That is Query may search all customers by name employees by location and the like. For the search to be effective it is done directly in the persistent layer i.e. database and circumvents the buffer layer. The method entitled Routing ESF to Buffer Logic is used to route calls between the system and RTTBF adapter . That is a call from the service manager may be made using an interface description that may be different from the interface of the RTTBF adapter . Therefore the method Routing ESF to Buffer Logic provides routing and mapping from the language of the system to the language of the RTTBF adapter .

Buffer logic as discussed above perform logic methods for database access operations that may be used by varying business objects . Examples of such buffer logic relate to functions pertaining to a transaction with database transactional context such as when a transaction creates reads updates and or deletes referred to as CRUD transactional data in database or any state handling of the transaction or database .

Functions of the transactional context may include functions such as SELECT BY RELATION and REFRESH BY RELATION. SELECT BY RELATION may serve to access an instantiated business object using one of its relations and REFRESH BY RELATION may serve to refresh the data stored within an instantiated business object using one of its relations. CRUD create update retrieve and delete refers to the main methods that are needed for database access. These functions are related in the sense of buffered operations to Structured Query Language SQL methods. That is Create is related to INSERT Read to SELECT Update to UPDATE and Delete to DELETE. State handling refers to functions that may protect transactional data stored in database if multiple database access operations are requested simultaneously. For example multiple buffer logic instances A may be created due to multiple service requests. These buffer logic instances A may attempt to perform data save operations for saving transactional data in database simultaneously. State handling functions may assure that writing transactional data by one buffer logic instance A may be prevented if the data is being read by another buffer logic instance A. State handling functions may also restrict transactional data from being read from database if that data has already been loaded for use in a transaction by another buffer logic instance A.

The method INSERT of buffer logic may serve to create a new instance of a business object . The method UPDATE may serve to update one or more data values of an already instantiated business object stored in main memory . The method DELETE of buffer logic may serve to delete an instantiated business object that may be stored in main memory . The method SELECT may serve to access an instantiated business object stored in main memory by means of its access key .

Inserted or updated data may be persistently written to database by the method SAVE of buffer logic . However prior to data being saved a hook may be used to call the generic business logic check and enrich stored in generic business logic class . As discussed above the generic business logic check and enrich may check the transactional data for completeness plausibility and or consistency. Further it may enrich the transactional data by adding additional information to the transactional data .

The check of the transactional data performed by the generic business logic check and enrich may be triggered by variety functions performed by buffer logic . As discussed above the use of a method such as check and enrich is generic while the implementation may require specific business logic. Therefore RTTBF adapter places hooks within the transaction event at instances in which the check and enrich method may be called. For example generic check and enrich hooks may be utilized whenever there is a change to the transactional data in a buffered state stored at relations table and or transactional data table . This may occur for example when the buffer logic instance A performs the functions of INSERT UPDATE or DELETE on transactional data stored within application data table S. . This may also occur when the buffer logic instance A performs the function of SELECT or SELECT BY RELATION on transactional data stored within application data table S. . The generic check and enrich hook may also be inserted before the SAVE function is performed by buffer logic instance A S. . In addition after the SAVE function is performed to insert data to application table and before database is modified a generic logic check and enrich hook may be inserted S. . Further after the SELECT function is performed to remove copy data from application table and before the data is stored in application data table and or elations table a generic logic check and enrich hook may be inserted S. .

Other generic business logic hooks that may be utilized by the present invention are complex actions based on CRUD and an event handler based on CRUD. In particular actions are coarse granular changing operations while CRUD is fine granular. For example a CRUD update may include changing the address of an employee or changing the number of books to be ordered. On the other hand an example of action may include booking a flight where a lot of data could be created or changed such as the flight data the customer data the booking data etc. Further actions may redirect these changes to the fine granular services of each object involved such as UPDATE e.g. to update the number of free airline seats or CREATE e.g. to create a passenger list .

As discussed above state handling refers to the transactional state of each business object involved in a transaction. However system may also include event handling. Event handlers are mainly used for cross business object transactions. For example when a business object sales order is changed an event is triggered and other business objects such as purchase orders may register this event and thus corresponding changes in the purchase order could be triggered by this event.

As illustrated development system may include graphical user interface objects to facilitate a developer in the navigation and operation of the development system . Through the selection of tab development system may aid a developer in the creation of the structure i.e. shell of the business object . Through the selection of tab development system may aid a developer in the creation of a business function of the business object .

The business logic used to define the business functions of the business object are entered in data fields . The first data field contains the root node of the business object . The root node of a business object refers to the business object node that may not have any parent node but may have children nodes. All other nodes of a business object may form a tree of business object nodes with the root node as the root of the tree. A business object root node may contain key information of its associated business objects such as the identification of the business objects the names of the business objects and the like. A business object may also contain queries that may return elements of its root node and queries that may use the retrieved root node information to access other associated business object nodes.

The providerclass data field includes specific business logic that is manually generated by a developer or service provider . The specific business logic provides specific business functions for the business object that may be based upon variables such as the type of business object the functionality of the application calling the business object and or client requests.

The providerinterface data field includes data types pertaining to the interface methods that are utilized by a particular service provider to interface with a business object . Typically multiple service provider interfaces are provided but for simplicity only one is illustrated. Further the interface methods may be independent of the business object however as illustrated there are also some interface methods that are specific to certain business objects .

The adapter class data field includes the generic business logic and buffer logic provided by adapter class . In particular a developer may automatically add the business functions provided by the RTTBF Adapter with little need to develop or modify code.

The creation of a business object may also involve the modification of the business object template to include specific business logic S. . Specific business logic may be used for example to define a specific business function of a business object . For example in the case of a sales order business object the specific business function may define what department within an enterprise is to be credited with the proceeds from the sale of a specific item. The specific business logic may be generated by a developer or service provider and stored in service provider S. .

The creation of a business object may further involve modifying the hooks included in the business object template to call generic business logic S. . The above may be combined to form a completed business object . Further modification of the business object template may also include the addition of buffer logic used to define the methods and procedures used to manage the database access and the state handling of the business object during a transaction. Further the modifications may be done manually or through the use of development software such as the software illustrated in .

The foregoing description has been presented for purposes of illustration. It is not exhaustive and does not limit the invention to the precise forms or embodiments disclosed. Modifications and adaptations of the invention will be apparent to those skilled in the art from consideration of the specification and practice of the disclosed embodiments of the invention.

Further the described implementations include software but systems and methods consistent with the present invention may be implemented as a combination of hardware and software or in hardware alone. Examples of hardware include computing or processing systems including personal computers servers laptops mainframes micro processors and the like. Additionally although aspects of the invention are described as being stored in memory one skilled in the art will appreciate that these aspects may also be stored on other types of computer readable media such as secondary storage devices for example hard disks floppy disks or CD ROM the Internet or other propagation medium or other forms of RAM or ROM.

Computer programs based on the written description and methods of this invention are within the skill of an experienced developer. The various programs or program modules may be created using any of the techniques known to one skilled in the art or can be designed in or by means of the Java programming language C HTML XML or HTML with included Java applets or in SAP R 3 or ABAP. One or more of such software sections or modules may be integrated into a computer system or existing e mail or browser software.

Moreover while illustrative embodiments of the invention have been described herein the scope of the invention includes any and all embodiments having equivalent elements modifications omissions combinations e.g. of aspects across various embodiments adaptations and or alterations as would be appreciated by those in the art based on the present disclosures. The limitations in the claims are to be interpreted broadly based on the language employed in the claims and not limited to examples described in the present specification or during the prosecution of the application. Further the steps of the disclosed methods may be modified in any manner including by reordering steps and or inserting or deleting steps without departing from the principles of the invention. It is intended therefore that the specification and examples be considered as exemplary only with a true scope and spirit of the invention being indicated by the following claims and their full scope of equivalents.

