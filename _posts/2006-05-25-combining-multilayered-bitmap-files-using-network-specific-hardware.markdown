---

title: Combining multi-layered bitmap files using network specific hardware
abstract: Images and video can be produced by compositing or alpha blending a group of image layers or video layers. Increasing resolution or the number of layers results in increased computational demands. As such, the available computational resources limit the images and videos that can be produced. A computational architecture in which the image layers are packetized and streamed through processors can be easily scaled so to handle many image layers and high resolutions. The image layers are packetized to produce packet streams. The packets in the streams are received, placed in queues, and processed. For alpha blending, ingress queues receive the packetized image layers which are then z sorted and sent to egress queues. The egress queue packets are alpha blended to produce an output image or video.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08125486&OS=08125486&RS=08125486
owner: Los Alamos National Security, LLC
number: 08125486
owner_city: Los Alamos
owner_country: US
publication_date: 20060525
---
This patent application claims the priority and benefit of U.S. Provisional Patent Application No. 60 776 317 filed on Feb. 23 2006 entitled Combining Multi layered Bitmap Files Using Network Specific Hardware and which is incorporated herein by reference in its entirety.

The United States government has certain rights to the present disclosure in accordance with contract W 7405 ENG 36 with the National Nuclear Security Administration of the United States Department of Energy.

Embodiments relate to the fields of image processing image alpha blending and image compositing. Embodiments also relate to the fields of network processing stream processing and packetizing image data.

Digital images can be produced using imaging sensors computer graphics or both. Image sensors can be used to directly capture digital representations of an imaged scene. For example a digital still camera can produce a digital image while a digital video recorder DVR can produce a digitized video of an imaged time varying scene. For simplicity the term digital image shall be used to refer to both digital still images and digital video images. Computer graphics techniques can also be used to render digital images of scenes that do not exist in reality. Computer graphics techniques can also be used to combine digital images.

Image compositing is the process of combining multiple image layers into a single image. One type of image layer is an image having a specified z value . For example a foreground image layer can contain a person s image while a background image layer can contain a simulated space scene. The foreground image can have a z value equaling 0 while the background can have a z value of 1. The z values indicate that the foreground image is in front of the background image. Image compositing techniques can be used to combine the foreground image and the background image to produce an image of the person in front of the simulated space scene.

Another type of image layer is an image having a z value associated with every pixel in the image. Returning to the example above the image layer containing a person s image can have a z value equaling fifty associated with every pixel while the space scene image layer can have z values ranging from 0 to 100. Image compositing can produce an image with the person inside the space scene.

More complex images can be produced by compositing many layers. One way to composite layers is to z sort and alpha blend them. Z sorting determines which pixel is in front of another pixel and alpha blending combines the pixels. A foreground pixel and a background pixel can be blended using the following equation 1 where is the foreground alpha value Vis the foreground pixel value Vis the background pixel value and Vis the alpha blended pixel value. Gray scale images usually use a single number to represent each pixel value while color images usually use three numbers to represent each pixel value. The three numbers for color pixels are often red green and blue saturation values. Those skilled in the art of digital image processing are familiar with alpha blending techniques for alpha blending and the application of alpha blending to large number of image layers.

Computational requirements limit what can be displayed to a user because the computational requirements for blending images increase as image resolution increases and as the number of layers increase. Addressing bottlenecks in computational power and data transmission can result in providing greater computational resources for blending more image layers having higher resolution.

The following summary is provided to facilitate an understanding of some of the innovative features unique to the embodiments and is not intended to be a full description. A full appreciation of the various aspects of the embodiments can be gained by taking the entire specification claims drawings and abstract as a whole.

Systems and methods that result in an easily scalable image processing structure can be realized by breaking image layers into packets and streaming the packets through a series of processors.

An image layer can be transmitted as a packet stream. Clearly a set of image layers can be transmitted as a set of packet streams. The packets themselves can be raw data packets or formatted data packets. Internet Protocol IP packets are formatted data packets. User Datagram Protocol UDP packets and Transmission Control Protocol TCP packets are particular types of IP packets. Those skilled in the art of image transmission know of systems and methods for packetizing and transmitting image layers as streams of IP UDP and TCP packets.

It is therefore an aspect of the embodiments to obtain at least two packet streams. A packet stream is a sequence of packets that are transmitted and received one after another. Each packet contains pixels and a z value. Each pixel contains an alpha value and a pixel value. A gray scale pixel has a single pixel value while a color pixel value usually has three values such as values corresponding to red green and blue saturation values.

It is also an aspect of the embodiments to load ingress queues with the packets from the packet streams. Network processors are specialized computer processors that are designed to efficiently receive queue and process multiple independent packet streams. A processor can receive a packet and store it directly in memory. The processor queues the stored packet by putting a data pointer into the queue with the data pointer pointing to the stored packet. A separate ingress queue can be used for each packet stream.

The packets can be reordered as they are received as they are placed into the ingress queue or after they are placed in the ingress queue. For example each packet can be checked to see if it is out of order because each packet has a packet number. A packet that arrives too early can be held in temporary storage until its immediate predecessor is received. The early packet can then be queued.

It is an additional aspect of the embodiments to take the packets from the ingress queues to z sort them to produce z sorted packets and to send the z sorted packets to egress queues. The number of egress queues should equal the number of ingress queues. The packets can be synchronized by waiting until the ingress queues have packets that are ready for z sorting. Packets can be ready when all the ingress queues hold packets having the same packet number.

It is another aspect of the embodiments to take the z sorted packets from the egress queues and to alpha blend them to produce output packets. The output packets have a packet number and at least one pixel value.

Images can be produced from the output packets by essentially reversing the process by which image layers are packetized. Those skilled in the art of packetizing images are also aware of systems and methods for producing images from packets. The images can then be displayed on a display device.

The packets can also have a frame number. A digital video is made of a series of digital images that are displayed sequentially. Each digital image is a frame of the digital video. The frame number specifies where a particular image belongs in a digital video image sequence.

The particular values and configurations discussed in these non limiting examples can be varied and are cited merely to illustrate embodiments and are not intended to limit the scope of the invention.

Images and video can be produced by compositing or alpha blending a group of image layers or video layers. Increasing resolution or the number of layers results in increased computational demands. As such the available computational resources limit the images and videos that can be produced. A computational architecture in which the image layers are packetized and streamed through processors can be easily scaled so to handle many image layers and high resolutions. The image layers are packetized to produce packet streams. The packets in the streams are received placed in queues and processed. For alpha blending ingress queues receive the packetized image layers which are then z sorted and sent to egress queues. The egress queue packets are alpha blended to produce an output image or video.

Similarly image plane is packetized to produce packet stream that contains packets including packet packet and packet N . The packets in different streams are usually different even if they have the same packet number. For example packet and packet are different because each is part of a different packet stream. Image plane is packetized to produce packet stream that contains packets including packet packet and packet N . As such image plane has been packetized into N packets.

Each packet such as packet of packet stream can contain a z value a packet number a frame number and pixels. Z values as discussed above are used to determine which pixel or image layer is in front of another pixel or image layer. The packets in a packetized image plane can carry a z value when all the pixels in an image plane have the same z value. As such packet is illustrated as having a z value equal to because all of the image plane pixels have a z value equaling 1. The packet number is illustrated as equaling 2 because packet is the second packet in packet stream . The frame number can be used to indicate to which frame in a video the packet belongs.

The packet also contains M pixels such as pixel pixel and pixel M . A pixel contains information for a dot in an image. Pixel is illustrated as containing a red saturation value a green saturation value a blue saturation value a z value and an alpha value . As discussed above the packet can contain a z value when all the pixels in the packetized image plane have the same z value. The pixels can also contain a z value. Pixels should contain a z value whenever the packets do not. As such pixel can contain a z value but doesn t need to because packet contains a z value. If there were no z value contained in packet then pixel would need to contain a z value. The alpha value can be used for alpha blending the pixel with other pixels that are behind it.

The packets are then z sorted. Observe that packet stream contains packets having a z value of 1 those in packet stream have a z value of 100 those in packet stream have a z value of 77 and those of packet stream have a z value of 50. Z sorting results in the packets in ingress queue being sent to egress queue those in ingress queue being sent to egress queue those in ingress queue being sent to egress queue and those in ingress queue being sent to egress queue .

The packets in the egress queues are then alpha blended . The result is a packet stream having output packets such as output packet output packet and output packet N . The output packets can be assembled into an image or a video. Furthermore the output packet stream can be treated as a packetized image layer and be composited or alpha blended with other image layers.

In the first flow packets are waited for . The ingress queues can be loaded after packets arrive. The packets can then be reordered and synchronized . After synchronization the packets are ready ingress packets because all the packets having the same packet number are in ingress queues and are ready for further processing. The second flow waits for ready ingress packets z sorts them and sends them to egress queues . A third flow waits for ready egress packets alpha blends them and sends them . Egress packets are ready when all the packets having the same packet number are in egress queues. The fourth flow receives the output packets converts them into images and displays the images .

The packets can then be reordered and synchronized before being sent to egress queues. The packets in ingress queue are sent to egress queue those in ingress queue are sent to egress queue those in ingress queue are sent to egress queue and those in ingress queue are sent to egress queue .

The packets in the egress queues are then z sorted per pixel . For example every packet stream can have a pixel of packet in frame number . Given four packet streams there are four such pixels. The four pixels can be sorted based on each pixel s z value.

The pixels are alpha blended resulting in an output packet stream having output packets such as output packet output packet and output packet N . The output packets can be assembled into an image or a video. Furthermore the output packet stream can be treated as a packetized image layer and be composited or alpha blended with other image layers.

Embodiments can be implemented in the context of modules. In the computer programming arts a module e.g. a software module can be implemented as a collection of routines data structures firmware and hardware that perform particular tasks or implement a particular abstract data type. Modules generally can be composed of two parts. First a software module may list the constants data types variable routines and the like that can be accessed by other modules or routines. Second a software module can be configured as an implementation which can be private i.e. accessible perhaps only to the module and that contains the source code that actually implements the routines or subroutines upon which the module is based. Thus for example the term module as utilized herein generally refers to software modules or implementations thereof. Such modules can be utilized separately or together to form a program product that can be implemented through signal bearing media including transmission media and recordable media.

The examples discussed above are intended to illustrate aspects of the embodiments. The phrases an embodiment some embodiments or certain embodiments do not necessarily refer to the same embodiment or any specific embodiment.

It will be appreciated that various of the above disclosed and other features and functions or alternatives thereof may be desirably combined into many other different systems or applications. Also that various presently unforeseen or unanticipated alternatives modifications variations or improvements therein may be subsequently made by those skilled in the art which are also intended to be encompassed by the following claims.

