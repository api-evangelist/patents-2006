---

title: Method and computer program for device configuration
abstract: A method and computer program are provided for graphically configuring devices in a control area network that includes providing one or more application programming interfaces, creating one or more graphical objects on a computer display using a graphical user interface, and associating one or more functions of an application programming interface with one or more of the devices using the graphical user interface. Each application programming interface corresponds to a class of devices and includes a set of functions. Each class of devices includes one or more devices. At least one of the graphical objects represents one or more of the devices.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09063739&OS=09063739&RS=09063739
owner: Open Invention Network, LLC
number: 09063739
owner_city: Durham
owner_country: US
publication_date: 20060905
---
The present document claims the benefit of the earlier filing date of U.S. provisional patent application Ser. No. 60 715 252 entitled METHOD AND COMPUTER PROGRAM FOR DEVICE CONFIGURATION filed in the U.S. Patent and Trademark Office on Sep. 7 2005 having common inventors as the present document and is related to pending U.S. non provisional patent application Ser. No. 11 222 885 entitled METHOD SYSTEM AND COMPUTER PROGRAM USING STANDARD INTERFACES FOR INDEPENDENT DEVICE CONTROLLERS filed in the U.S. Patent and Trademark Office on Sep. 9 2005 the entire contents of each of these applications is incorporated herein by reference.

The present invention relates to graphical user interfaces and more particularly relates to a method and computer program for configuring devices using a graphical user interface.

Through the use of a control system various equipment or appliances in an environment such as a home or business can be computer controlled to form an automated environment. The controlled equipment may include heating ventilation and air conditioning HVAC systems lighting systems audio visual systems telecommunications systems security systems surveillance systems and fire protection systems for example. The equipment may be coupled to equipment controlling devices that are linked to a computer based master controller through the use of a control area network. One or more user interface devices such as a touch panels may also be linked to the control area network to accept user input and display current system status.

The configuration of devices generally and devices used in control area networks often requires the manual configuration and coding of such devices. Control System programming is a multi step process requiring detailed knowledge of the system components and their relationships. The addition of new and custom devices that are encountered in the field adds to this complexity. Adding control for these devices is a complex process.

However there does not currently exist a way to configure these devices that is efficient and able to handle configurations that range from simple to complex. Thus there does not exist an efficient way in the prior art to configure such devices.

Accordingly one aspect of the present invention is to provide a method for graphically configuring devices in a control area network that includes providing one or more application programming interfaces creating one or more graphical objects using a graphical user interface and associating at least one of the application programming interfaces. At least one of the application programming interfaces corresponds to a class of devices and includes a set of functions. Each class of devices includes one or more devices. At least one of the graphical objects represents one or more of the devices. Associating at least one of the application programming interfaces includes associating one or more of the functions of at least one of the application programming interfaces with one or more of the devices using the graphical user interface.

Another aspect one aspect of the present invention is to provide a computer program embodied in a computer readable medium for graphically configuring devices in a control area network that includes a first computer code for providing one or more application programming interfaces a second computer code for creating one or more graphical objects using a graphical user interface and a third computer code for associating at least one of the application programming interfaces. At least one of the application programming interfaces corresponds to a class of devices and includes a set of functions. Each class of devices includes one or more devices. At least one of the graphical objects represents one or more of the devices. Associating at least one of the application programming interfaces includes associating one or more of the functions of at least one of the application programming interfaces with one or more of the devices using the graphical user interface.

Referring now to the drawings wherein like reference numerals designate identical or corresponding parts throughout the several views preferred embodiments of the present invention are described.

The present invention provides a user with the ability configure devices using one or more graphical user interfaces GUI . A GUI commonly represents data as graphical icons. Using the present invention a user may easily design program integrate and optionally document a complete system configuration using a drag and drop GUI environment. The configuration computer program is designed from the user interface point of view and adaptable to many different configurations including one or more master controllers.

The configuration computer program may be used by a user to graphically specify one or more control systems any controlled devices and the interconnection therebetween. The configuration program may also be used to graphically describe the user interface and the system relationship functionality and operation. The configuration program may further be used to generate and transfer all appropriate information for system operation to the controller and or appropriate devices.

Using the configuration computer program a control system is configurable to include multiple hardware and device classes including but not limited to central controllers expansion modules or cards user interface devices and third party device classes. Hardware and device classes may be supplied by AMX corporation AMX . Hardware and device classes may also include third party products. For instance third party device classes may include but are not limited to audio conference audio processor audio tape audio tuner camera CD ROM computer control digital media player or server document camera DSS DVD DVR HVAC lighting monitor motor picture frame pool pre amp or surround processor receiver security set top box slide projector spa switcher TV VCR video conference video processor video projector volume controller weather classes and any other device class.

The configuration computer program can utilize a database of existing system devices or create new device classes on the fly. The database may be organized in any manner or form. For instance the data content may be organized by device class and contain available connectivity options control modules and their functions if applicable as well as any events such as hardware events that may be triggered and handled in a user defined manner. The database and access thereto may be configured such that updates are independent of new releases of the software.

In one embodiment the device database is implemented in XML to facilitate easy manual content additions or updates. The database includes the ability to version and drop in a new database without the need for a new software release of the configuration computer program. The configuration computer program may be configured to recognize a database update when the configuration computer program is restarted or the user may choose to reload the database manually.

The configuration computer program may be configured to read the database contents upon startup and store the information into internal memory structures that will be made available to the application layer also in a read only fashion. The database contents may be keyed by device class and model number with access either to the entire set of data or to a given device class. Acceptable device classes include but are not limited to 

The data gathered for each device may contain but is not limited to device description connectivity options programmable tactile buttons and other programmable device events. Acceptable connectivity options include but are not limited to 

The present invention may utilize Duet modules and IR files. An IR file is a collection of representations of infrared IR waveforms that are transmitted by an IR remote control. Each IR waveform is unique to a function of the remote control. A Duet module is a software library that includes one or more device specific protocol implementations and a mechanism to provide control of such devices. The control mechanism may utilize any technology including but not limited to metadata. In one embodiment a third party device database may be created by scanning predetermined standard path locations for Duet modules and IR files. For example the Duet modules and IR files may be respectively stored at the standard path locations 

The user may optionally specify one or more additional paths for Duet modules and IR files. User paths may be configured to be searched before the standard locations and in any order listed. If a module for a given device exists in multiple locations in the search paths the first instance encountered may be entered into the database. However other arrangements are possible such as entering the last instance encountered. The database may optionally be rebuilt each time the configuration computer program initializes or during execution thereof as manually operated by the user. Upon changes to the search path or the manual operation by the user the configuration computer program may be configured to perform a refresh of the database. A refresh of the database is much faster operation than a full rebuild. A refresh of the database removes the database control options or devices that no longer exist adds new control options or devices and updates existing control options or devices if changes have been made since the last refresh. The user interface elements which allow the user to change search paths perform a full database rebuild or perform a database refresh may be configured to be available to the user only when no project is open. Further database maintenance may be configured to not be allowed once a project has been created or opened.

In one embodiment the devices and control options used are verified against the current state of the database. If a device or control option cannot be found several options are available to the user including but not limited to performing a database refresh replacing the missing device with a user defined device of its device class or aborting the open operation. If a missing module or IR file has been added to one of the search paths since the last database refresh performing a database refresh may fix the project automatically. If the missing module or IR file no longer exists locally but the user would like to open the project replacing the missing device with a user defined device of its device class replaces references to the missing items with a user defined device. This device may then either be removed from the system by the user replaced with another device or its control mechanism may be defined by the user.

The configuration computer program may be used to create an Integrated Development Environment IDE in which a control system can be designed programmed and commissioned. Control System programming is a multi step process requiring detailed knowledge of the system components and their relationships. However the present invention simplifies this process. The configuration computer program may be configured to handle a wide variety of devices with the ability to handle new and custom devices as they are encountered in the field. Using the present invention the addition of device control is thereby simplified.

The configuration computer program may be used to design a system and the relationship between the components. The configuration computer program provides a user with the ability to choose from a variety of AMX and or third party devices to be controlled. For instance such devices may be controlled by control devices central controllers or user interfaces.

In one embodiment the configuration computer program automatically creates standard programming. Custom programming may also be added to provide for advanced control system functionality. The configuration computer program easily allows a user to specify advanced programming and to modify existing advanced programming. Such programming may be configured to be automatically generated.

The configuration computer program is capable of configuring the user interfaces in the system. For each device to be controlled the configuration computer program generates a series of user interface elements on one or more user interfaces to control the device and connect those elements to standard programming. Such standard programming may be automatically generated. The configuration computer program allows a user to customize the user interface design by adding or removing elements or changing the execution flow from one set of elements to another set of elements.

Upon completion of the system design programming and user interface generation the configuration computer program allows the user to download the generated file that relates to the control system and its peripherals. The configuration computer program may also be optionally configured to generate a report showing the system interconnects. Using this report a user may easily wire the system according a system design as configured by the configuration computer program.

The configuration computer program thus allows a user to easily design program and commission the control system programming following a series of simple steps. The design and programming process is flexible enough to accommodate custom elements while keeping the process simple.

Prior to the present invention there did not exist a way for a user to design program and commission a system with a wide variety of devices and the ability to add new devices in the field as needed using a simple operation.

Referring to flow charts illustrating the process of configuring one or more devices are shown. At block a user begins a development project. This may include the user creating a new project associated with this development project. At block the user may use the configuration computer program to select one or more devices. These devices may include but are not limited to central controllers expansion devices and user interface devices. The user may select one or more AMX devices or third party devices to control.

In one embodiment an assistant may be used to guide the user in selecting a central controller and one or more user interfaces and or devices. The assistant may be configured to allow the user to select a basic system configuration including but not limited to a controller a touch panel and one or more keypads. The assistant allows the user to design more complex systems in a simple operation by automatically configuring popular device configurations. Possible assistants include but are not limited to a basic system assistant a network assistant a system expansion assistant a residential assistant a commercial assistant an education assistant and a multi dwelling unit assistant as generally shown in .

One possible non limiting example of an assistant is a basic system assistant dialog as shown in . As shown in a user may use the basic system assistant dialog to configure a controller a touch panel and two keypads. The basic system assistant dialog provides a method to get the project started. The user may view a graphical device selection dialog as shown in by selecting a selection button e.g. selection button .

Selecting one or more devices as shown in may include the following steps. At block the user chooses a device type. Device types include but are not limited to control system devices and controlled devices. If the user selects a control system device then the user next selects a device category at block . If the user selects a controlled device then the user may next optionally filter the displayed devices by device category and or manufacturer at block . If the user desires to filter the displayed devices then only those devices that match the desired filter are displayed at block . At blocks and the desired device is respectively located and then added to the design of the system.

One possible non limiting example of selecting one or more devices is illustrated in . A user may be presented with an initial screen having a toolbar that includes device categories represented as tabbed view areas . . . . Each of the device categories has a device type of either a control system device or a controlled device. The user selects a device category by selecting a tabbed view from the toolbar and is presented with a list of devices. As shown in the user has selected a device category of Central Controllers which is represented by one or more visual icons each representing different devices.

Alternatively as shown in the user has selected a device category of Devices from the toolbox . In this configuration the Devices device category is associated with controlled devices and the user is presented with a textual list of devices shown as a collapsible tree. shows a tabbed view of the Devices device category after it has been filtered for a particular manufacturer brand. Only those devices that match the desired filter are displayed.

After the user has selected the desired device either textually or using the visual icon representing a particular device the device may be added to the design of the system by any number of means including but not limited to right clicking on the icon and using a right menu option double clicking on the icon or dragging the icon into a workspace area . The user may then see the properties associated with a particular selected device in a properties window . An enlarged view of the properties window is shown in . The user may start a new system by adding or removing devices from the workspace area or open and or modify an existing system.

A previously noted the configuration computer program may be used by the user to add the devices to the design of the system connect these devices to the central controller and specify the relationships between the devices of the system. Connection nodes may be configured such that only compatible signal types may be connected.

At block the selected devices are connected to the central controller. Optionally the configuration software program may be configured to automatically connect system components using a best fit approach given at least some of the components in the system and the available signal types for the connections if any and the signal types applicable to the components. The connection of devices of block is shown in detail in . At block a determination is made as to whether an active connection mode or best fit approach has been activated. If the active connection mode has been activated then at block the output connection types on one or more devices in the system are checked against respective input connection types for matches. Likewise the input connection types on one or more devices in the system are checked against respective output connection types for matches at block . The best fit approach may be configured to search devices in a hierarchal device category order that is most likely to find a compatible connection. If the active connection mode has not been activated then at block a determination is made as to whether the user wishes to manually perform a one time auto connection or best fit approach. If the user desires a one time auto connection then blocks and are performed. If the user does not desire an auto connection the user may manually connect a desired connection point on a first device to a desired connection point on a second device at block . One possible non limiting example of connecting devices is shown in . As shown in the devices are manually connected to target devices by dragging a connection line from a desired connection point on a first device to a desired connection point on a second device.

At block a determination is made as to whether the connection types on the first and second devices are compatible. If connection types are incompatible then the connection is disallowed at block . Otherwise a determination is made as to whether the connection can accept the additional connection at block . If connection cannot accept the additional connection then the connection is disallowed again at block . Otherwise a connection is established between the first and second devices at block .

Selected devices may require additional control information such as Infra Red IR codes the configuration computer program allows the user to easily capture this information. At block a determination is made as to whether the IR codes of the devices need to be captured. If one or more devices need to be captured then at block the capture of one or more IR waveforms that are associated with the one or more devices begins.

The capture of one or more IR waveforms of block is shown in detail in . At block one or more IR functions to target are selected. At block a determination is made as to whether the user desires to capture or clear an IR waveform. If the user desires to clear an IR waveform then the waveform is removed at block . Otherwise the user is prompted to enter a waveform at block . The configuration computer program waits for a new waveform and then stores the captured waveform respectively at blocks and . This repeats until of the target function have been captured at block . Optionally at block the user may be prompted to enter device specific control properties. At block the IR waveform is saved to disk or other storage or network device.

During the capture of device IR codes the configuration computer program may be configured to allow the user to specify a list of codes to be captured. An assistant may then be used to guide the user through the capture of the device IR codes with minimal or no additional input from the user.

One possible non limiting example of capturing of one or more IR waveforms is illustrated in . As shown in a capture IR codes dialog is presented to allow the user to select one or more functions to be captured. Upon selecting the Capture Selected Functions button the waits to receive one or more IR waveforms as shown in . The user may also customize IR properties as shown in .

At block a determination is made as to whether an automation beyond a simple control is required. If there is such a requirement then an automation script may be developed using a conventional means such as a codebuilder at block .

In one embodiment device controls may be customized using metadata or similar means. In this configuration the user may specify the behavior of a device in a simply way using metadata. The configuration computer program may be configured to present the user with the list of all applicable metadata that is available. The user can then customize the values as needed for each device.

The configuration computer program may be configured to automatically add basic device control programming and to connect the user interfaces to any device including AMX and third party devices. If additional programming is necessary for a user interface then the user may add to or customize existing programming by selecting functions from the devices in the system and customizing each function through its available parameters. Programming elements such as waits and if else end if blocks allow the user to build complex automation scripts.

A codebuilder may be used to program all available events for a selected device. From the system view the available events represents one or more of the supported functions for a specific device. The available event may be organized as basic advanced and custom functions. From the touch panel or keypad views the available events represent those events accessible from that specific user interface device. All views for a given device may be configured to share programming information. For example if the user invoked codebuilder with a DVD device selected from a touch panel view and programmed a macro for the Play event the configuration computer program may also program the Play event for a keypad in the system.

For each event a default handler may be pre populated with a call to an appropriate module function. Under most circumstances this will be the Push handler. If desired the user may also create or remove Release and Hold handlers for an event as long as one handler exists for the event. The defined handlers may be configured to not be represented in the list of available events but instead be represented in the main handler definition area. Any events that have been modified by the user may be denoted as such visually in the events list.

To build the steps in an event handler codebuilder may be configured to provide a toolbox with General Action and Status items. General items may include but are not limited to IF ELSE and WAIT constructs. Generally there will be no looping constructs. However such looping construct may be made available without departing from the present invention. The Action items represent the available functions for the devices currently in the system that perform an action. The Action items may be organized by device and then by basic and advanced. The Status items may be organized by device and then by basic and advanced for available functions for the devices currently in the system that do not perform an action but return status information about the device for the purpose of creating conditionals. Both the Action and Status items may also be configured to be filtered to only show functions available for the device currently being programmed instead of all devices currently in the system.

From the toolbox items may be added to the handler definition by drag and drop by double click or by menu items. Drag and drop operations allow the item to be placed wherever desired within the currently defined steps and the insertion point of the item may be visually represented. If an item in the toolbox is double clicked it may be added to the end of the steps in the current handler. Optionally a menu item may exist to allow a selected item to be added to the end and one to allow a selected item to be inserted before the currently selected handler step. General and Action items may be added or inserted anywhere in the handler steps. IF ELSE items may be nested to a predetermined number of levels. Status items may either be dropped onto an existing IF ELSE construct or added as a new step. If dropped onto an IF ELSE the status will be added to the current chain of status items in the IF. A predetermined number of status items may be combined into a single IF statement. If added as a new step the Status item will automatically be put into an IF ELSE construct. In one embodiment IF ELSE items may be nested five 5 levels deep and up to five 5 status items may be combined into a single IF statement.

Once added to the handler definition one or more steps may be selected to be moved removed or copied. If either the IF ELSE or ENDIF items of an IF ELSE construct are selected the entire construct with all contained steps may also be selected. Move operations may be configured to only be allowed if a single step or multiple contiguous steps have been selected. Paste operations may be configured to only be allowed if either no steps or a single step is selected. Having no steps selected will add the copied steps to the end and having a single step selected will insert the copied steps before the selected step. Parameter or IF ELSE conjunction editing may be configured to only be allowed if a single step or IF ELSE construct is selected. For IF ELSE constructs the user may define the main IF as either IF or IF NOT. For additional status items in an IF the user may define the conjunction as AND AND NOT OR or OR NOT.

In one embodiment the undo redo operation may be configured to be available from within codebuilder for the following actions add remove event handler add insert handler step move handler step remove handler step and edit handler step. These actions may be undone individually for the duration of the current codebuilder session. The user may discard or commit any changes made. If the changes are committed they may be configured to become available as a single action in the main application undo redo stack. Whether committed or discarded the actions in the codebuilder undo redo stack may be cleared upon the termination of codebuilder and not be available the next time codebuilder is invoked.

Because the steps for any given event handler may contain calls to functions across multiple devices configuration computer program may be configured to not provide means to copy or export device and or programming information such that it can be pasted or imported into another project.

An automation script is shown in detail in . At block a desired device event to be programmed is selected. At block a determination is made as to whether a handler for the desired event exists. If the desired event handler does not exist then the event handler may be created at block . If the desired event handler does exist then the event handler is selected at block . The category of a step or operation to add is selected at block . Step or operations include but are not limited to general function and status. At blocks and the desired step or operation is located and added to an appropriate position within the handler. Adding the desired step or operation may be accomplished by any number of means including but not limited to double clicking an icon or dragging and dropping an icon representing the desired step or operation. At block a determination is made as to whether a step or operation parameter needs to be modified. If the step or operation parameter needs to be modified then the user may modify the parameter values for that step or operation at block . The process continues until all of the desired steps and events have been added as shown at blocks and . One possible non limiting example of an automation script is illustrated in . As shown in one or more handlers e.g. Push Handler Release Handler and Hold Handler may be configured using a code builder . A user may select general IF ELSE ENDIF or WAIT from toolbar . Functions and Status steps or operations may also be selected as shown in .

At block the user interface navigation that is desired may be established for any keypads and touch panel devices as they relate to respective devices and their supported functionality. The configuration program may be configured to automatically generate the user interface elements to control a device based on the available functions for the device. The configuration computer program allows the user to customize the control of a device by adding and removing user interface elements including but not limited to menus second tier sub menus buttons place holders and other predetermined or prepackaged features. Prepackaged features include but are not limited to Internet web pages weather information and electronic surveillance and security. The configuration program may be configured to graphically represent user interface elements and their respective relationship to physical or virtual device displays e.g. the display of a VCR device may include play record stop rewind and forward buttons .

One possible non limiting example of establishing user interface navigation for keypads and touch panel devices is illustrated in . A user may be presented with an user interface navigation screen having a toolbar that includes navigational categories represented as tabbed view areas. As shown in the user has selected a navigational categories of Navigation from the toolbar which is represented by one or more visual icons each representing navigation menus of different configurations for a respective keypad or touch panel device.

At block the configuration computer program generates one or more project files based upon the completed design. These project files may include programming and user interface. The configuration computer program may optionally offer the user the option to download these files to the control system its peripherals and or system devices. One possible non limiting example of generating and transferring system files is shown in .

Optionally the configuration computer program may generate a system report that represents the completed design at block . The system report may include but is not limited to control equipment information control MSRP information control equipment and addressing information third party device information system wiring information module and IR file information touch panel and keypad button programming information and device event programming information. The system report may be generated manually or part of an automated process. The system report may be output to a disk or other storage device locally or remotely over a network or a printer. The system report may be output in numerous output formats including but not limited to HTML XML ASCII text or PDF formats. One possible non limiting example of selecting the options available for a system report is shown in .

Once the project has been created the project information may be saved in a file such as a File System In A File FSF file as discussed below. Thereby multiple project files and possibly hundreds of files may be stored in a single file to ease file management and the transport of the project from one computer to another. However the project information is not required to be stored in a single file and may be transferred by any other similar means. For instance the project information may be stored in multiple files or instead directly transferred over a network without storing the project information in a disk file at all.

At block a determination is made as to whether a transfer of project files to relevant devices is desired at this time. If such a transfer is desired by the user then at block the one or more project files are transferred to such devices. The user may select from several options including generating and transferring system files generating system files or transferring previously generated system files. The project development ends at block . As previously noted one possible non limiting example of generating and transferring system files is shown in .

Referring to possible non limiting examples of the configuration computer program are shown. An initial screen of the configuration computer program according to the present invention is shown in . The initial screen displays a list of central controllers and methods to either start a new system or to open an existing system. The basic system assistant dialog provides a method to get the project started as shown in . Graphical device selection dialogs present the user with ease of selection as shown in . As shown in a user may collapse one or more toolboxes on the screen into tabs that open when the mouse hovers over them. Thus an open palette area is presented to the user. The user may use this open palette are to design the system. For instance a mouse hovering over the networking tab is shown in . Devices such as the ABS and master controllers can be expanded so that specific port connection can be establish as shown in . A user may collapse the device to reclaim portions of the screen for further screen design as shown in . A properties control window allows the user to quickly edit and view device properties as shown in . As shown in one or more controls may be custom positioned within the viewing area by dragging a control by its title bar. The result of docking the properties of a control is shown in . shows the new positions for the control window. As shown in a user may bring up an IR capture menu. For instance the user may bring up a right click menu by right clicking on one or more IR controlled devices. As shown in a user may optionally bring up a top menu selection. A simple intuitive assistant may be used to guide the user through the capture process one button at a time. One or more custom device properties for a device may also be edited and used to assist the user in establishing device specific behaviors within a class of device as shown in . For instance a VCR s Rewind to Stop time may be set to 1800 seconds or 3 minutes. Each item may be configured to include a descriptive text area also known as the property documentation that may be used to provide necessary documentation for setting each item. The descriptive text area may be used to ease the workflow by overcoming the requirement of examining a paper manual or opening a help window.

As shown in by selecting a codebuilder menu item the user is able to develop automation code using high level macro like elements such as if then else statements and waits as displayed in the General tab on the right. The user may utilize these elements by dragging them to the desired location in a selected Handler. For instance as shown in the Push Handler action may be configured such that a particular action is taken when a button is pushed. For example shows that if statement and wait actions are taken when the button is pushed. Other handlers may also be configured. For instance Release Handler and Hold Handler actions may be configured such that particular actions are taken when a button is respectively released and held.

As shown in the items available on a Functions tab provides the user with a full range of capabilities for each device within the system. For example as shown in the user may develop a Push Handler for a VCR and set the state of a security system when the button is pushed. For instance enabling the alarm while watching a movie. A variety of functions may be displayed on this screen including but not limited to Power Move Switch and Source.

As shown in the Status tab may allow a user to query the device status from any device within the system such that the appropriate conditional logic may be created.

As shown in a user interface navigation for keypads and touch panel devices may be established using a drag and drop graphical user interface. A user may be presented with an user interface navigation screen having a toolbar that includes navigational categories represented as tabbed view areas.

As shown in the user may be respectively prompted to manually configure and generate a system report and to generate and transfer system files.

The project files created and used by the application may be stored in a proprietary FSF format. The FSF format eases file maintenance for the numerous files that may be required for a system. Prior to inclusion in the FSF file format XML based files may be compressed for size and security purposes. One exemplary configuration for an XML file used for a Touch Panel design is shown in .

According to the present invention project information or other useful information may be saved in a File System In A File FSF file. FSF is a general use file format that is used for archiving or combining multiple files of any size and or type into a single FSF file. The FSF format allows adding updating extracting and removing of contained files more quickly than traditional techniques. The FSF format is well suited for embedded use by applications which would otherwise have to maintain project directories of multiple files. A FSF file maintains a map of free and used blocks similar to the method employed by a file system. As with a true file system the FSF allows file data to not be stored non contiguously but sparely throughout the available space. Unused blocks may be efficiently removed at any time through a block packing and or defragmenting algorithm.

A FSF file begins with a 12 byte header used to identify the file as an FSF file and to indicate the block number of the first file entry block 

For instance an FSF file may be identified with an file ID equal to NULL byte followed by the string FSFILE and another NULL bytes. However other arrangements may be used to identify the file as an FSF file.

The remainder of the file format is a collection of blocks of data that contain a predetermined number of bytes of data storage. For instance each block may contain 512 bytes of data storage. The file format also includes the block number of the current next and previous blocks if applicable and the number of bytes of data actually stored in the block 

A block may have many different forms including but not limited to a usage block a file entry block of a file data block. The different forms differ in the contents of the block data.

A usage block maintains the map of free and used blocks for a given range of blocks in the file. The bits of the bytes in the block data represent the usage for a block of data in the file.

For instance a single usage block may track up to 4096 blocks 8 bits per byte 512 bytes . Block the first block in the file may be configured as a usage block to track blocks through . If the file grows beyond blocks a new usage block may be allocated at block to track blocks through . In this way usage blocks may be configured at multiples of i.e. blocks etc. and the first bit of the first byte of every usage block s data may be set to indicate that the block is being used by itself 

The previous and next block values indicate the previous and next usage blocks if applicable. The bytes used value may be used to track the byte in which the first free block is located for speed in finding free blocks.

A file entry block identifies the beginning of a stored file and stores in the block data the file path creation time modification time file system flags the first block of the file the size of the file in blocks and the size of the file in bytes 

The previous and next block values indicate the previous and next file entry blocks if applicable. The bytes used value is optional and may be unused.

A file data block contains part of the actual data for a stored file. The previous and next block values indicate the previous and next file data blocks for the file if applicable. The bytes used value indicates the number of bytes used of the available block data. Generally the data blocks are configured to use the entirety of the available block data storage. However the last data block for a file may have a bytes used value other than the other data blocks.

The present invention thus includes a computer program which may be hosted on a storage medium and includes instructions which perform the processes set forth in the present specification. The storage medium can include but is not limited to any type of disk including floppy disks optical disks CD ROMs magneto optical disks ROMs RAMs EPROMs EEPROMs flash memory magnetic or optical cards or any type of media suitable for storing electronic instructions.

Obviously many other modifications and variations of the present invention are possible in light of the above teachings. The specific embodiments discussed herein are merely illustrative and are not meant to limit the scope of the present invention in any manner. It is therefore to be understood that within the scope of the disclosed concept the invention may be practiced otherwise then as specifically described.

