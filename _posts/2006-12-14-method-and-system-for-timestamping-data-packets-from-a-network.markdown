---

title: Method and system for time-stamping data packets from a network
abstract: A method for timestamping data packets from a network involves receiving a first data packet from the network, obtaining, from a clock, a timestamp indicating an arrival time of the first data packet, where a network interface controller (NIC) includes the clock, providing the timestamp and the first data packet to a client operatively connected to the NIC, computing a network property using the timestamp, selecting a network protocol based on the network property, and transmitting a second data packet via the NIC using the network protocol.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08102852&OS=08102852&RS=08102852
owner: Oracle America, Inc.
number: 08102852
owner_city: Redwood City
owner_country: US
publication_date: 20061214
---
Subject matter contained herein may be related to subject matter contained in copending U.S. patent application Ser. Nos. 11 639 042 entitled Method and System for Using Bayesian Network Inference for Selection of Transport Protocol Algorithm Method and System for Bi level Congestion Control for Multipath Transport 11 638 904 Method and System for Network Stack Tuning 11 638 858 Method and System for Profiling and Learning Application Networking Behavior 11 638 891 and Method and System for Bandwidth Allocation Using Router Feedback 11 639 090 respectively and filed on Dec. 14 2006 in the names of the same inventors and having the same assignee as the present application the entire contents of which are hereby incorporated in their entirety.

A network interface controller NIC is a hardware device that provides network access to a computer system. Specifically the NIC includes a network interface for receiving data packets from a network. The NIC further includes logic for processing data packets and transferring data packets into system memory for use by clients in the computer system. The specific method by which data packets are transferred generally depends on the NIC hardware the computer system s underlying architecture which operating system is running on the computer system and or other similar factors.

For example the computer system may determine whether data packets are available for transfer to the computer system by periodically polling the NIC to determine the NIC s status e.g. ready waiting error etc. . If polling indicates that the NIC has received a data packet then the data packet is transferred from the NIC into system memory. Alternatively the NIC may issue an interrupt to the computer system when a data packet is received. Specifically the interrupt may instruct the computer system to begin transferring the data packet into system memory. As network bandwidth usage increases interrupts occur more frequently and may divert processing cycles from execution of other tasks.

Further the computer system may use a method known as programmed input output PIO whereby the computer system processor is responsible for executing instructions to transfer data packets into system memory. In such cases transferring data packets may divert processing cycles from execution of other tasks. To avoid processing overhead required by PIO the computer system may instead use direct memory access DMA whereby the NIC writes data packets directly into system memory with little or no computer system processing required. Processing overhead may further be reduced by grouping data packets. That is data packets may be transferred from the NIC in groups rather than individually.

Regardless of the specific method used to transfer data packets the computer system may use a system clock to assign timestamps to data packets. Specifically the timestamp assigned to each data packet corresponds to a time when the system clock is accessed. If data packets are grouped especially if polling is used the computer system does not have any way of determining the arrival times of individual data packets in the group. Accordingly the same timestamp is generally assigned to all data packets in the group.

Even if timestamps are associated with individual data packets a delay exists between the data packet s arrival and the time when the timestamp is obtained from the system clock. The delay may vary significantly depending on conditions in the computer system e.g. processing load interrupt priorities bus load contention etc. . Thus the accuracy of the timestamps and of dispersions between the timestamps may also vary significantly. Further assigning timestamps may divert processing cycles from execution of other tasks especially if estimation of timestamp dispersions is required.

In general in one aspect the invention relates to a method for timestamping data packets from a network. The method comprises receiving a first data packet from the network obtaining from a clock a timestamp indicating an arrival time of the first data packet wherein a network interface controller NIC comprises the clock providing the timestamp and the first data packet to a client operatively connected to the NIC computing a network property using the timestamp selecting a network protocol based on the network property and transmitting a second data packet via the NIC using the network protocol.

In general in one aspect the invention relates to a network interface controller NIC . The NIC comprises a network interface configured to receive a data packet from a network a clock configured to generate a timestamp indicating an arrival time of the data packet and a processor configured to obtain the timestamp from the clock and provide the timestamp and the data packet to a client operatively connected to the NIC.

In general in one aspect the invention relates to a method for installing firmware on a network interface card NIC . The method comprises accessing a computer readable medium to obtain the firmware and storing the firmware on the NIC wherein the firmware comprises executable instructions for timestamping data packets from a network by receiving a first data packet from the network obtaining from a clock a timestamp indicating an arrival time of the first data packet wherein the NIC comprises the clock and providing the timestamp and the first data packet to a client operatively connected to the NIC.

Other aspects of the invention will be apparent from the following description and the appended claims.

Specific embodiments of the invention will now be described in detail with reference to the accompanying figures. Like elements in the various figures are denoted by like reference numerals for consistency.

In the following detailed description of embodiments of the invention numerous specific details are set forth in order to provide a more thorough understanding of the invention. However it will be apparent to one of ordinary skill in the art that the invention may be practiced without these specific details. In other instances well known features have not been described in detail to avoid unnecessarily complicating the description.

In general embodiments of the invention provide a method and system for timestamping data packets from a network. A data packet is received from a network by a NIC. The NIC includes a clock and uses the clock to obtain a timestamp indicating an arrival time of the data packet. The timestamp and the data packet are then provided to a client operatively connected to the NIC.

Embodiments of the invention may be implemented on virtually any type of computer regardless of the platform being used. For example shows a diagram of a computer system in accordance with one or more embodiments of the invention. The computer system includes a system processor associated system memory a storage device a system clock and numerous other elements and functionalities typical of today s computers not shown . The computer system may also include input means such as a keyboard and a mouse and output means such as a monitor . Those skilled in the art will appreciate that these input and output means may take other forms. Further the computer system may be a mobile device such as a cellular telephone personal digital assistant PDA portable multimedia device etc.

Further the computer system includes a NIC providing a connection to a network . The network may be a local area network LAN a wide area network WAN such as the Internet any other similar type of network or any combination thereof. More specifically the NIC includes a network interface configured to send and receive data packets to and from devices in the network . The NIC may be a wireless NIC a wired NIC such as an Ethernet controller or any other type of NIC. Those skilled in the art will appreciate that the computer system may include multiple NICs not shown which may be operated independently and or cooperatively.

In one or more embodiments the NIC further includes a NIC processor firmware configured to store executable instructions for use by the NIC processor and a NIC clock configured to generate timestamps indicating arrival times of data packets. A timestamp may take many different forms. For example the timestamp may include a Julian date a time interval e.g. nanoseconds microseconds milliseconds seconds etc. since an earlier data packet was received any other similar type of time measurement or any combination thereof. As another example the NIC clock may include a counter where the frequency of the counter is known and the timestamp is inferred from the known frequency and the current state of the counter. The counter s frequency may also be variable for example if the NIC includes power management functionality. Timestamps are discussed in detail below.

In one or more embodiments the NIC processor is configured to process data packets according to executable instructions stored in the firmware . Specifically the firmware may include executable instructions for causing the NIC processor to obtain a timestamp from the NIC clock indicating an arrival time of a data packet and transfer both the data packet and the timestamp into system memory . If the system processor is responsible for transferring data packets from the NIC then the firmware may not include executable instructions for transferring data packets. Further the firmware may include executable instructions for causing the NIC processor to modify the timestamp and or data packet e.g. by modifying a packet header converting the timestamp to a standard time format storing the data packet and timestamp in separate data structures etc.

The firmware may be embedded in electrically erasable programmable read only memory EEPROM flash memory a micro drive any other similar type of storage in the NIC or any combination thereof. To install firmware e.g. on a NIC e.g. the firmware is typically first stored on a computer readable medium such as a compact disc CD a diskette a flash drive a tape a file or any other computer readable storage device. The computer readable medium is accessed to obtain the firmware and the firmware is then stored on the NIC. In one or more embodiments firmware is installed on the NIC to allow the NIC to perform an embodiment of the method described in .

In one or more embodiments the NIC receives instructions from a NIC device driver loaded into system memory . Specifically the NIC device driver provides a layer of abstraction between a system kernel and the NIC . The system kernel provides a standard interface for software applications to use the NIC . In a typical scenario a software application issues an instruction to the system kernel via a network application programming interface API call. The system kernel forwards the network API call to the NIC device driver and the NIC device driver translates the network API call into instructions compatible with control logic stored in the NIC . Alternatively the system kernel may be configured to issue instructions directly to the NIC without any intervening device driver.

Those skilled in the art will appreciate that one or more elements of the aforementioned computer system may be located at a remote location and connected to the other elements over a network. Further the computer system may be located in a distributed system having multiple nodes where each portion of the computer system e.g. system processor system memory storage device input and or output means etc. may be located on a different node within the distributed system. In one or more embodiments the node corresponds to a computer system. Alternatively the node may correspond to a processor with associated physical memory. The node may alternatively correspond to a processor with shared memory and or resources.

As discussed above the NIC processor is configured to obtain a timestamp from a NIC clock indicating an arrival time of a data packet. The NIC processor may further be configured to modify the timestamp and or data packet. show diagrams of timestamps and data packets in accordance with one or more embodiments of the invention.

As shown in a data packet may include a data payload and a packet header storing information about the data packet . Specifically the packet header may include a source Internet Protocol IP address a destination IP address routing information e.g. a number of network hops a size of the data payload network protocol information a checksum any other similar type of packet information or any combination thereof.

Further the NIC processor may place a timestamp indicating an arrival time of the data packet in the packet header . In one or more embodiments placing the timestamp in the packet header allows the data packet to be transferred into system memory in exactly the same manner as a non timestamped data packet. Upon accessing the data packet in system memory a client may then process the packet header to obtain the timestamp . Any client not using the timestamp may simply ignore the additional header information.

Alternatively the NIC processor may transfer timestamps and data packets into system memory separately i.e. in separate data structures. For example as shown in one or more timestamps e.g. timestamp A timestamp N are stored in data structure X and one or more data packets e.g. data packet A data packet N are stored in data structure Y . Data structure X and data structure Y may be the same type of data structure or may be different types of data structures. For example data structure X and or data structure Y may be lists e.g. implemented as arrays vectors etc. hash tables any other similar type of data structure or any combination thereof.

More specifically each timestamp in data structure X may correspond to a data packet in data structure Y . For example the first timestamp in data structure X may indicate an arrival time of the first data packet in data structure Y the second timestamp in data structure X may indicate an arrival time of the second data packet in data structure Y etc.

In one or more embodiments separating timestamps and data packets into separate data structures allows data packets to be transferred into system memory prior to the corresponding timestamps or vice versa. For example data packets may have higher transfer priority in real time network applications bandwidth sensitive applications etc. Timestamps may then be transferred into system memory during idle time. Further placing timestamps in a separate data structure may allow the timestamps to be transferred to a digital signal processing DSP co processor in the NIC where the DSP co processor is configured to calculate timestamp dispersions in the frequency domain using Fourier transforms.

In Step a NIC receives a data packet from a device in a network. The device may be located anywhere in the network. Further the data packet may be associated with any type of network application such as voice over Internet Protocol VoIP streaming audio and or video telephony peer to peer networking a file transfer a web based software application or any other similar type of network application.

As discussed above regarding the NIC includes a NIC clock. In Step the NIC obtains a timestamp from the NIC clock. Specifically the timestamp indicates an arrival time of the data packet received in Step . As discussed above the timestamp may take many different forms such as a Julian date a time interval since an earlier data packet was received a timestamp inferred from a counter etc. Tables 1 2 show examples of timestamps in accordance with one or more embodiments of the invention. Specifically Table 1 shows an example of a Julian date timestamp and Table 2 shows an example of an interval timestamp.

Those skilled in the art will appreciate that timestamps may be represented in decimal notation binary notation hexadecimal notation alphanumeric notation any other similar notation or any combination thereof. In one or more embodiments timestamps are represented as Integers.

In one or more embodiments obtaining a timestamp from the NIC clock ensures that individual data packets are assigned individual timestamps. Further offloading timestamping to the NIC may eliminate inaccuracies caused by transfer delays when a system clock is used for timestamping. Therefore the timestamps associated with each data packet are more accurate than if the data packets were timestamped using the system clock either individually or as a group.

Specifically timestamping individual data packets provides finer granularity than timestamping groups of data packets. For example granularity between data packets may be measured in microseconds while granularity between groups of data packets may be measured in milliseconds. Accordingly more accurate timestamps may allow for computation of more accurate network properties. Computation of network properties is discussed in detail below.

Further obtaining a timestamp from the NIC clock may improve performance of tasks executing in the computer system. Specifically by offloading timestamping from the system processor and system clock to the NIC processor and NIC clock more system processing cycles are available for execution of other tasks. For example in cases where the NIC s clock has a variable frequency counter offloading timestamping frees system processing cycles that would otherwise be required to estimate timestamp dispersions.

Continuing with discussion of in Step the timestamp may be converted to a standard time format. Specifically the timestamp as obtained from the NIC clock may be in a different format than required by a client in the computer system. Accordingly the NIC processor may convert the timestamp to a format compatible with the client. For example a Julian date timestamp may be converted to an alphanumeric date time format e.g. Nov. 9 2005 13 00 25.372 . As another example if the NIC clock includes a counter the known frequency and current state of the counter may be used to obtain a timestamp in a standard time format. Alternatively the timestamp may be converted by a client after obtaining the timestamp from system memory. Different types of clients are discussed below.

Further as discussed above the NIC processor may store the timestamp in a data structure. Specifically in Step the NIC processor may store the timestamp in the data packet s header and or in Step the NIC processor may store the timestamp in a separate data structure e.g. a list a hash table etc. with other timestamps. The NIC processor may also store the data packet in a separate data structure with other data packets.

In Steps and the NIC provides the timestamp and the data packet to a client in the computer system. Specifically the NIC transfers the timestamp and the data packet into system memory for access by the client. As discussed above the timestamp and the data packet may be transferred into system memory in a single data structure or in separate data structures. That is Steps and may be performed simultaneously or separately.

For purposes of this discussion a client refers to any software process configured to obtain the timestamp and the data packet from system memory after the transfer is complete. In one or more embodiments the client may be a NIC device driver. Alternatively the client may be a system kernel or a process executing therein. Those skilled in the art will appreciate that many different types of software processes may be configured to obtain timestamps and data packets from system memory.

In one or more embodiments in Step a network property is computed using the timestamp. The network property may be computed by the NIC processor i.e. prior to transferring the timestamp into system memory by the client or by any other process executing in the computer system. Further the network property may be computed using only a single data packet using multiple data packets and or using other sources of information such as a current status of the NIC e.g. ready waiting error etc. the type of NIC used a routing table a hosts file etc. For example the network property may include a packet arrival rate e.g. a number of megabits per second a burst length a peak bandwidth capacity available bandwidth network link speed a round trip time RTT a packet send receive delay point to point network path capacity a data loss rate any other similar type of network property or any combination thereof.

In one or more embodiments the network property is computed based on data packet dispersions i.e. differences in timestamps between consecutive data packets. Computing network properties based on dispersions is known in the art although timestamp granularity is traditionally limited to groups of data packets for reasons discussed above. The following is one example of computing point to point network path capacity based on individual data packet dispersions and should not be construed as limiting the scope of the invention.

Suppose data packets P1 P2 and P3 arrive at the NIC sequentially each data packet having 100 bytes i.e. 800 bits and belonging to the same data flow. The data packets receive timestamps in microseconds T1 4 T2 9 and T3 13 respectively. Thus the dispersions between the data packets can be computed as T2 T1 5 and T3 T2 4 giving a mean dispersion of 4.5 microseconds. Because the data packets belong to the same data flow the point to point network path capacity can be computed as 800 bits 4.5 10seconds 177 Mbps approximately.

Continuing with discussion of in one or more embodiments in Step a network protocol is then selected based on the network property. Specifically the network property may be used to determine an optimal network protocol for the network application associated with the data packet. The network protocol selected may be transmission control protocol TCP Tahoe TCP Reno TCP Vegas TCP NewReno TCP Hybla TCP Westwood TCP Selective Acknowledgement Options SACK Hamilton TCP HTCP High Speed TCP HSTCP Binary Increase Congestion BIC TCP Cubic BIC CUBIC TCP Fast Active Queue Management Scalable TCP FAST Scalable TCP STCP Smart Acknowledgement ACK Dropper SAD User Datagram Protocol UDP or any other similar TCP or non TCP network protocol.

In one or more embodiments the NIC includes functionality e.g. executable instructions in firmware to use the timestamp obtained in Step to select the network protocol. Alternatively the network protocol may be selected by a NIC device driver a system kernel or any other similar process. For example network properties may be forwarded to a network profiling service and the network profiling service may then select the network protocol. Examples of network profiling services can be found in copending U.S. patent application Ser. Nos. 11 639 042 entitled Method and System for Using Bayesian Network Inference for Selection of Transport Protocol Algorithm and Method and System for Bi level Congestion Control for Multipath Transport 11 638 904 and filed on Dec. 14 2006 in the names of the same inventors and having the same assignee as the present application the entire contents of which are incorporated above in their entirety.

In one or more embodiments a single network property is used to select the network protocol. For example Table 3 shows an example of how RTT point to point network path capacity data loss rate and or available bandwidth might be used individually to select a network protocol. Those skilled in the art will appreciate that Table 3 is provided for exemplary purposes only and should not be construed as limiting the scope of the invention.

Alternatively multiple network properties may be used to select the network protocol. For example Table 4 shows an example in which the network protocol selected might change as network properties for a receiving LAN i.e. a LAN where the receiving NIC is located change. For the purposes of this example network properties for the source of the data packet and any intermediary network components are assumed to be constant.

Specifically in Table 4 a network link speed packet send receive delay and data loss rate i.e. a rate at which data packets are lost in transit to the receiving LAN are available for the receiving LAN. Combinations of these network properties are used to select a network protocol. Those skilled in the art will appreciate that Table 4 is provided for exemplary purposes only and should not be construed as limiting the scope of the invention.

In one or more embodiments selecting a network protocol may involve referencing a lookup table generating a Bayesian network any other similar type of analysis or any combination thereof. For example the network protocol may be based on a comparison of obtained network properties against a set of simulated network scenarios. Further discussion of analyzing network properties can be found for example in copending U.S. patent application Ser. Nos. 11 639 042 entitled Method and System for Using Bayesian Network Inference for Selection of Transport Protocol Algorithm Method and System for Bi level Congestion Control for Multipath Transport 11 638 904 Method and System for Network Stack Tuning 11 638 858 Method and System for Profiling and Learning Application Networking Behavior 11 638 891 and Method and System for Bandwidth Allocation Using Router Feedback 11 639 090 and filed on Dec. 14 2006 in the names of the same inventors and having the same assignee as the present application the entire contents of which are incorporated above in their entirety.

In one or more embodiments selecting a network protocol in Step is facilitated by accurate timestamping of individual data packets. Specifically as discussed above obtaining timestamps from a NIC clock may improve the accuracy of network properties on which the selection is based.

Having selected a network protocol in Step the selected network protocol may then be used in Step to transmit a data packet to a device in the network via the NIC.

In one or more embodiments the transmitted data packet is associated with the same connection as the data packet obtained in Step . That is the network protocol used for the connection may effectively be changed on the fly. In one or more embodiments the determination about whether to change the network protocol on the fly depends on the type and or duration of the connection. For example changing the network protocol on the fly may be helpful during large file transfers or in other cases where a potential performance gain outweighs the overhead of changing network protocols.

Alternatively the transmitted data packet may be associated with a different connection than the data packet obtained in Step . Specifically in one or more embodiments the selected network protocol is used in a subsequent connection with the same device that sent the data packet received in Step . In one or more embodiments selecting a network protocol on a per device basis allows for data transmissions to be optimized according to the specific network paths to each device. The transmitted data packet may alternatively be associated with a connection to a different device altogether.

In one or more embodiments changing network protocols using one or more embodiments described above improves performance of the network application with which the transmitted data packet is associated. Specifically by using the selected network protocol the network application may achieve faster transmission a more constant transmission rate lower latency higher bandwidth availability any other similar type of performance benefit or any combination thereof. For example if the network application requires real time performance the network protocol selected may help to ensure that data packets are transmitted at an approximately constant rate. As another example a file transfer may be accelerated by selecting a network protocol that allows larger data payloads to be sent. Those skilled in the art will appreciate that many different types of performance benefits may be gained by selecting an appropriate network protocol.

Further changing network protocols using one or more embodiments described above may improve performance of a network application not specifically associated with the transmitted data packet. For example if the network protocol reduces network bandwidth used by the network application with which the transmitted data packet is associated another network application may be able to use the freed bandwidth.

In one or more embodiments one or more of the aforementioned performance improvements is enhanced by the increased granularity provided by offloading data packet timestamping to a NIC clock and a NIC processor.

While the invention has been described with respect to a limited number of embodiments those skilled in the art having benefit of this disclosure will appreciate that other embodiments can be devised which do not depart from the scope of the invention as disclosed herein. Accordingly the scope of the invention should be limited only by the attached claims.

