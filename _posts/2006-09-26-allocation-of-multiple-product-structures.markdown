---

title: Allocation of multiple product structures
abstract: A system, method, and computer program for allocating product structures, comprising the steps of representing a product with at least one product structure; mapping a domain relationship from said at least one product structure; and deriving a fulfilled product structure through said mapping and appropriate means and computer-readable instructions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08224471&OS=08224471&RS=08224471
owner: Siemens Product Lifecycle Management Software Inc.
number: 08224471
owner_city: Plano
owner_country: US
publication_date: 20060926
---
The present application claims priority of U.S. provisional application Ser. No. 60 720 780 filed Sep. 27 2005 which is incorporated herein by reference.

The presently preferred embodiment of the innovations described herein relate generally to product design. More specifically the presently preferred embodiment relates to allocating multiple product structures.

Hierarchical product structures consisting of various product constituents such as assembly components are typically used to model the product content in product life cycle management PLM products. These product structures can be revised as the product design matures and changes over the life cycle of the product and can be configured for various product configurations. Each of these product structures captures a particular aspect of the product and is commonly referred to as a product structure.

A product is often represented using more than one product structure in cases where multiple representations are desirable. For example electro mechanical products are modeled using multiple product structures e.g. using functional models logical models and one or more physical models. Similarly when a product design involves systems engineering methodology a separate product structure is created to manage each aspect of system design such as requirements functional behavior and physical model. Other models may be created to model various aspects of the product such as electrical models connectivity models etc. When a product is modeled using multiple product structures as outlined above one of the challenges is to correctly model and track changes to these components and the impact of those changes across the various structures.

What is needed is a method of modeling relationships between the elements of the multiple product structures such that the traceability between the elements can be determined for various product configurations and revisions.

To achieve the foregoing and in accordance with the purpose of the presently preferred embodiment as broadly described herein the present application provides a method allocating product structures comprising the steps of representing a product with at least one product structure mapping a domain relationship from said at least one product structure and deriving a fulfilled product structure through said mapping. The method wherein said product structure is a bill of material. The method wherein said bill of material is to one of a functional model a physical model and a logical model. The method wherein said domain relationship is one of a fulfillment an implemented by and a realization of. The method wherein said domain relationship is a fulfillment from a first product structure to at least one more product structure. The method wherein said domain relationship is a first product structure implemented by at least one other product structure. The method wherein said domain relationship is a first product structure that provides the realization of at least on other product structure. The method wherein said domain relationship is conditional based upon a defined rule set. The method wherein a revision history is maintained for said mapping step.

Another advantage of the presently preferred embodiment is to provide a method for allocating multiple product structures comprising the steps of allocating a component in a first product structure based on a rule set wherein said allocation is to an absolute occurrence of said component and tracking a plurality of revisions of said allocation for recall. The method wherein said allocating step is to an absolute occurrence.

And another advantage of the presently preferred embodiment is to provide a method for allocating multiple product structures comprising the steps of connecting an allocation to at least one source component having a source BOM view with a plurality of target components each having a target BOM view connecting a structure map to said source BOM view with said target BOM view and relating at least one domain relationship from said source BOM view to said target BOM view. The method further comprising the step of revising said components independently from said allocation.

And still another advantage of the presently preferred embodiment is to provide a computer program product tangibly embodied in a machine readable medium to perform a method comprising instructions for representing a product with at least one product structure instructions for mapping a domain relationship from said at least one product structure and instructions for deriving a fulfilled product structure through said mapping. The computer program product wherein said product structure is a bill of material. The computer program product wherein said bill of material is to one of a functional model a physical model and a logical model. The computer program product wherein said domain relationship is one of a fulfillment an implemented by and a realization of. The computer program product wherein said domain relationship is a fulfillment from a first product structure to at least one more product structure. The computer program product wherein said domain relationship is a first product structure implemented by at least one other product structure. The computer program product wherein said domain relationship is a first product structure that provides the realization of at least one other product structure. The computer program product wherein said domain relationship is conditional based upon a defined rule set. The computer program product wherein a revision history is maintained for said mapping step.

And yet another advantage of the presently preferred embodiment is to provide a data processing system having at least a processor and accessible memory to implement a method for allocating product structures comprising means for representing a product with at least one product structure means for mapping a domain relationship from said at least one product structure and means for deriving a fulfilled product structure through said mapping.

Other advantages of the presently preferred embodiment will be set forth in part in the description and in the drawings that follow and in part will be learned by practice of the presently preferred embodiment. The presently preferred embodiment will now be described with reference made to the following Figures that form a part hereof. It is understood that other embodiments may be utilized and changes may be made without departing from the scope of the presently preferred embodiment.

The numerous innovative teachings of the present application will be described with particular reference to the presently preferred embodiments. It should be understood however that this class of embodiments provides only a few examples of the many advantageous uses of the innovative teachings herein. The presently preferred embodiment provides among other things a system and method of allocating multiple product structures. Now therefore in accordance with the presently preferred embodiment an operating system executes on a computer such as a general purpose personal computer. and the following discussion are intended to provide a brief general description of a suitable computing environment in which the presently preferred embodiment may be implemented. Although not required the presently preferred embodiment will be described in the general context of computer executable instructions such as program modules being executed by a personal computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implementation particular abstract data types. The presently preferred embodiment may be performed in any of a variety of known computing environments.

With reference to an exemplary system for implementing the presently preferred embodiment includes a general purpose computing device in the form of a computer such as a desktop or laptop computer including a plurality of related peripheral devices not depicted . The computer includes a microprocessor and a bus employed to connect and enable communication between the microprocessor and a plurality of components of the computer in accordance with known techniques. The bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. The computer typically includes a user interface adapter which connects the microprocessor via the bus to one or more interface devices such as a keyboard mouse and or other interface devices which can be any user interface device such as a touch sensitive screen digitized pen entry pad etc. The bus also connects a display device such as an LCD screen or monitor to the microprocessor via a display adapter . The bus also connects the microprocessor to a memory which can include ROM RAM etc.

The computer further includes a drive interface that couples at least one storage device and or at least one optical drive to the bus. The storage device can include a hard disk drive not shown for reading and writing to a disk a magnetic disk drive not shown for reading from or writing to a removable magnetic disk drive. Likewise the optical drive can include an optical disk drive not shown for reading from or writing to a removable optical disk such as a CD ROM or other optical media. The aforementioned drives and associated computer readable media provide non volatile storage of computer readable instructions data structures program modules and other data for the computer .

The computer can communicate via a communications channel with other computers or networks of computers. The computer may be associated with such other computers in a local area network LAN or a wide area network WAN or it can be a client in a client server arrangement with another computer etc. Furthermore the presently preferred embodiment may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices. All of these configurations as well as the appropriate communications hardware and software are known in the art.

Software programming code that embodies the presently preferred embodiment is typically stored in the memory of the computer . In the client server arrangement such software programming code may be stored with memory associated with a server. The software programming code may also be embodied on any of a variety of non volatile data storage device such as a hard drive a diskette or a CD ROM. The code may be distributed on such media or may be distributed to users from the memory of one computer system over a network of some type to other computer systems for use by users of such other systems. The techniques and methods for embodying software program code on physical media and or distributing software code via networks are well known and will not be further discussed herein.

Allocations among the product structures are also configurable based upon rules in the product structure based on what the components point to from or based on user definable criteria regarding the product. is an illustration of a conditional allocation relationship. By attaching conditions on relationships the user can configure various allocations in and out of a product. Referring to a condition on A1 is If Model Sport and Color Green then Type Coupe. On a second allocation A2 If Model Sport and Color Blue then Type Sedan. For a conditional allocation example if the functional component has criteria X then the design component should be Y in the design model otherwise the design object should be Z in the design model. The conditions are flexible enough so that a relationship can be defined such that it would not point to anything should a certain set of criteria be true or not true allowing the allocation to be configured out. Multiple allocation sets between product structures can co exist and the context for each allocation set can be represented by an Allocation Context . For example in the allocation A1 the context could be mapped for cost optimization. In a similar example for the allocation A2 the context could be mapped for performance optimization. In the presently preferred embodiment allocations are created through an application programming interface API as a special type of relationship between absolute occurrences of specific components in a functional model to one or more absolute occurrences of the corresponding components in a physical model or design model . The allocation is related to the absolute occurrence of the component so that it is revision independent of the source component. Specifying the relationship in this manner enables the system to allow for allocations to change from revision to revision of the functional model while maintaining relationships between absolute occurrences in various revisions of the design model . Product structures are represented as configurable hierarchical occurrences between components. The absolute occurrence represents an individual component in a product structure independently from its location in the over all product to provide a mechanism to relocate the component anywhere in the hierarchy and retain its relationships.

In the case of conditional relationships a group of allocations are defined with an option set that is relevant for the modeled product. Various conditions are defined using the option set e.g. to describe a car model then the variant conditions could require a particular condition. Because the targets of these relations are part of the physical structure configuration rules can be applied to that structure. If an allocation is unfulfilled one of two responses are prompted. The first is to report an error stating that a target structure is not configured properly because there are unfulfilled allocations. The second is to add the allocated components to the configuration essentially overriding the structure rules. Adding these components can be done by evaluating the allocations getting a list of allocated components and then applying a new configuration rule to the target structure stating that components in the list are always configured in.

Turning now to an implementation object model is an illustration of a UML class diagram for allocating multiple product structures. Referring to an Allocation class shares the source product structure and the target product structure with a StructureMapRev class an ImanType class and an AbsOccurrence class . A StructureMap class associates to a BOM view of a source structure and a target structure from a PSBOMview class and owns by composition association the StructureMapRev class . The StructureMap class also shares the source product structure and the target product structure with the ImanType class and the PSBOMview class . The StructureMapRev class is shared by the Allocation class and the StructureMap class . The Allocation class is given an Iman Method place holder to implement specific domain relationship behavior. Every time the user wants to discover whether the Allocation class is configured in or not a registered method e.g. areYouConfigured is invoked on the Allocation class and the answer is returned to the ImanType class whether to configure.

The presently preferred embodiment may be implemented in digital electronic circuitry or in computer hardware firmware software or in combinations thereof. An apparatus of the presently preferred embodiment may be implemented in a computer program product tangibly embodied in a machine readable storage device for execution by a programmable processor and method steps of the presently preferred embodiment may be performed by a programmable processor executing a program of instructions to perform functions of the presently preferred embodiment by operating on input data and generating output.

The presently preferred embodiment may advantageously be implemented in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from and to transmit data and instructions to a data storage system at least one input device and at least one output device. The application program may be implemented in a high level procedural or object oriented programming language or in assembly or machine language if desired and in any case the language may be a compiled or interpreted language.

Generally a processor will receive instructions and data from a read only memory and or a random access memory. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of nonvolatile memory including by way of example semiconductor memory devices such as EPROM EEPROM and flash memory devices magnetic disks such as internal hard disks and removable disks magneto optical disks and CD ROM disks. Any of the foregoing may be supplemented by or incorporated in specially designed ASICs application specific integrated circuits .

A number of embodiments have been described. It will be understood that various modifications may be made without departing from the spirit and scope of the presently preferred embodiment such as configuring the source BOM view and the target BOM view independently from each other and to then allocate them both and see what components are left unallocated. Further only the source BOM view can be configured along with a series of allocations to then define the target structure. It is also understood that product structures could be a system structure an electrical structure manufacturing operations applicable to a product and or its product structures or simulation models applicable to a product and or its structures for example. Therefore other implementations are within the scope of the following claims.

