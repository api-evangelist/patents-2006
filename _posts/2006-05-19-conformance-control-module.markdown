---

title: Conformance control module
abstract: Systems, methods and computer readable media are provided for the conformance testing of services through the utilization of a conformance control module. In one exemplary embodiment, the method may include comparing meta-data returned by the service to predetermined parameters to determine whether the meta-data conforms to the predetermined parameters. The method may also include determining a conformance violation exists when the comparison indicates the meta-data does not conform to the predetermined parameters. The method may further include determining a conformance violation does not exist when the comparison indicates the meta-data does conform to the predetermined parameters. Moreover, the method may include continuing execution of the service based on the results of the comparisons made.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08060863&OS=08060863&RS=08060863
owner: SAP AG
number: 08060863
owner_city: Walldorf
owner_country: DE
publication_date: 20060519
---
The present invention generally relates to the field of software testing and software testing environments. More specifically the invention relates to methods systems and computer program products for testing the conformance of a service based upon requirements set forth in a service contract.

One of today s most pressing challenges for enterprises is the integration of their existing heterogeneous information technology IT landscapes. For example a typical enterprise may comprise a wide array of individual modules or software applications supporting different functions and business units written in different programming languages and running on different operating systems. The integration of these modules to the point where information may be readily shared has proved to be a daunting task. However a fairly recent solution to this problem has emerged in the form of a Service Oriented Architecture SOA . SOA refers to a software architectural framework that encourages the creation of loosely coupled services that communicate and pass information between the modules. An implementation example of an SOA is the Enterprise Service Architecture ESA developed by SAP AG of Walldorf Germany. In particular the ESA is implemented through NetWeaver an integration and application platform also developed by SAP AG. Other examples of SOA enabling platforms are NET developed by Microsoft and WebSphere developed by IBM.

Specific examples of the loosely coupled services used within an SOA are services. A service such as a Web service represents a self contained self describing piece of application functionality that can be found and accessed by other applications. A service is self contained because the application using the service does not have to depend on anything other than the service itself and self describing because all the information on how to use the service can be obtained from the service itself. The descriptions are centrally stored and accessible through standard mechanisms to all applications that would like to invoke the service.

Because services are generally granular in nature services may be aggregated into enterprise services which provide more meaningful building blocks for the task of automating enterprise scale business scenarios. Enterprise services allow IT organizations to efficiently develop composite applications defined as applications that compose functionality and information from existing systems to support new business processes or scenarios. Enterprise services may communicate using standard mechanisms can be described in a central repository and are created and managed by tools provided by the application platform. The enterprise services repository may be used to store all relevant pre existing enterprise services and to make them available to selected partners and customers. As used herein the term service shall include both Web services and enterprise services.

The description of the requirements of a service may be accomplished through the use of a service contract. For example the service contract may be implemented using the Web Services Description Language WSDL which enables definitions that describe how to access a service and what operations the service will perform. The service contract may also be implemented using the Enterprise Services Description Language ESDL which extends the WSDL by allowing the description of services that interact with business objects. A business object is a contained collection of data business operations and rules stored within a runtime repository. For example a business object may be an entire order processing system or a small process within an information system.

The use of service contracts is greatly beneficial in a truly open SOA environment. In such environments where the user of the service and the service provider are loosely coupled neither entity i.e. the service user or the service provider may know much about the other entity and thus a service contract may be warranted. For example neither implementation details of the service nor usage scenarios of the service may be known to the other party. This may occur when an enterprise is using a service developed by a third party service provider or when a business unit within the enterprise is using a service developed by another business unit. A service contract is thus helpful in that the service contract specifies to any and all users of the service the functional requirements of the service e.g. the functionality the service provides and what type of data or business object it will return .

Testing the conformance of services against the functionality described in their service contracts is an important part of a software development process as it guarantees a certain productivity and quality in software engineering. In almost all business cases the conformance of the service in relation to its service contract is essential for the service consumers and the service infrastructure. The service provider must guarantee the appropriate support of these service contracts and constraints.

In general a regular test application such as the Business Object Browser available in SAP s ESA may be sufficient for an application developer to test the runtime behavior of a service during implementation. This may be accomplished by navigating through the business object model and executing queries or actions. Unfortunately the application developer has to do this testing manually. Moreover such testing only focuses on the construction areas the developer is working on currently and does not cover the validation of the contract and the constraints the service must fulfill.

Accordingly there is a need to provide a conformance control module CCM for testing the conformance of a service at runtime and design time. The CCM may comprise service contract requirements that must be fulfilled by a service in order that it may be deemed conformant. The service contract requirements are predefined and vary based upon the functionality of the service being called. In addition in order for a service to be deemed conformant there may be necessary constraints including states phases and conditions which are needed for each service call. Further the service contract requirements may be separated by different interface methods that manage specific semantics such as data access transaction control value sets actions etc.

The CCM may also log the complete service sequence which contains all relevant information of the service to implement a conformance test. This logged information may be subsequently used to reproduce the conformance test. In addition in the case of a runtime conformance test it may be necessary for the application developer to be notified of the places of the non conformance within the service.

In accordance with principles of the present invention as embodied and broadly described herein methods systems and computer program products are provided for the testing of services through the utilization of a conformance control module.

According to one embodiment a method is provided for performing a conformance test of a service. The method may comprise comparing meta data returned by the service to predetermined parameters to determine whether the meta data conforms to the predetermined parameters determining a conformance violation exists when the comparing step indicates the meta data does not conform to the predetermined parameters determining a conformance violation does not exist when the comparing step indicates the meta data does conform to the predetermined parameters and continuing execution of the service based on the results of the determining steps.

In another aspect of the invention computer readable medium containing instructions to configure a processor to perform a method of performing a conformance test of a service is disclosed. The method may comprise comparing meta data returned by the service to predetermined parameters to determine whether the meta data conforms to the predetermined parameters determining a conformance violation exists when the comparing step indicates the meta data does not conform to the predetermined parameters determining a conformance violation does not exist when the comparing step indicates the meta data does conform to the predetermined parameters and continuing execution of the service based on the results of the determining steps.

In another aspect of the invention a conformance control module for performing a conformance test of a service is disclosed. The conformance control module may comprise a conformance control engine adapted to provide interfaces with the back end components of a Service Oriented Architecture SOA a database storage device for logging conformance information and for non conformance analysis by the service developer and a conformance reporting engine adapted to provide interfaces for the analysis and presentation of the logged conformance information stored in the database storage device.

It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention as described. Further features and or variations may be provided in addition to those set forth herein. For example the present invention may be directed to various combinations and subcombinations of the disclosed features and or combinations and subcombinations of several further features disclosed below in the detailed description.

Reference will now be made in detail to the invention examples of which are illustrated in the accompanying drawings. The implementations set forth in the following description do not represent all implementations consistent with the claimed invention. Instead they are merely some examples consistent with certain aspects related to the invention. Wherever possible the same reference numbers will be used throughout the drawings to refer to the same or like parts.

System may be implemented as part of an SOA which as discussed above is a architectural framework that is designed to include and utilize one or more services although any other architectural framework may be used. The services are accessible to other parts of the system such as client systems and their corresponding users by means of user interface and through a communication mechanism such as the Internet or intranet. The services may be retrieved from an external third party service provider or may be stored internally within the enterprise and retrieved using local client proxy . Service provider may be implemented as a server or storage device used by a third party service developer to store and share its developed services with others. Service provider may also be implemented as a central server or storage device used by multiple service developers to store and register their services. It should be noted that although shows a single client system and a single server system a plurality of client systems and server system may be used. Moreover the components depicted in may be distributed among multiple locations.

Client system may include one or more processors such as computers to interface with server system . User interface may provide an interface to allow a user to interact with other applications and business objects. For example user interface may be a software application such as a browser. In some implementations SAP Web Dynpro commercially available from SAP AG Walidorf Germany is used as a model based development environment for generating user interface although other development environments may also be used. User interface may call a Application Programming Interface API of a proxy such as generic client proxy through network connection to for example interact with available services via the service manager proxy and the remote processing engine .

Network connections may include alone or in any suitable combination a telephony based network a local area network LAN a wide area network WAN a dedicated intranet wireless LAN the Internet and intranet a wireless network a bus or any other communication mechanisms. Further any suitable combination of wired and or wireless components and systems may provide network connections . Moreover network connections may be embodied using bi directional unidirectional or dedicated communication links. Network connections may also implement standard transmission protocols such as Transmission Control Protocol Internet Protocol TCP IP Hyper Text Transfer Protocol HTTP SOAP Remote Procedure Call RPC or other protocols.

Generic client proxy and service manger proxy are proxies that provide a predefined interface that may be called by user interface at client system . Remote processing engine manages an interface that allows user interface to use a service operating on a remote machine such as server system . In some implementations a service manager proxy may be used along with the remote processing engine to provide a buffer to the user interface and the service manager . When instantiated generic client proxy may provide an interface such as a RPC or SOAP interface managed by the remote processing engine to another remote processing engine residing on the server system . Remote processing engine and remote processing engine may be used to manage the communications between client system and server system by providing functionality for receiving messages e.g. a request for a service from client system processing the messages on server system and returning the results. For example if the message from client system includes a request for a service remote processing engine will invoke service manager . The service manager provides the interface between the remote processing engine and the service provider . When the service manager receives a service request from remote processing engine the service manager may call a procedure through an API to instantiate one or more of the one or more services provided by service provider or another business unit within the enterprise via local client proxy . Results of the service request are returned to remote processing engine which in turn returns the results to client system via remote processing engine .

Service manager may connect to runtime repository which stores objects such as business objects including data and meta data for the business objects that may be acted upon or manipulated by a called service. Meta data may be defined as data about data and are used as the building blocks for business objects. For example meta data may refer to information about the data itself such as content quality condition origin size formatting characteristics of data and the like. Runtime repository may be any one of a number of commercially available repositories and may employ any of a number of commercially available databases systems such as Microsoft Access dbase Oracle Sybase etc. For example repository may store a list of business object nodes including an identifier ID and data content.

As noted above a business object is a contained collection of data business operations and rules. On the other hand a business object node refers to a portion of a business object. Thus if a purchase order is used as an example of a business object then the header of the purchase order may be considered the business object node. Further the ID of a business object refers to an identifying memory address of a business object node that uniquely identifies individual business object nodes within repository . The memory address may be used to access and read data content of a particular business object node. For example an ID of a business object node may consist of a directory structure and filename associated with the business object node. In general a business object may contain many business object nodes. These business object nodes may form a so called tree structure defined by parent child business object node associations. The root node of a business object refers to the business object node that may not have any parent node but may have children nodes. All other nodes of a business object may form a tree of business object nodes with the root node as the root of the tree. A business object root node may contain key information of its associated business objects such as the identification of the business objects the names of the business objects and the like. A business object may also contain queries that may return elements of its root node and queries that may use the retrieved root node information to access other associated business object nodes.

The description of a service may be accomplished through the use of programming languages such as WSDL or ESDL. In particular ESDL allows the descriptions of services that interact with business objects. For example the service when called may instantiate one or more business objects. The term instantiate means in an object oriented programming environment deploying customizing running and or executing an application on an object of a particular class. The service and corresponding business objects may be called using a message formatted based on ESDL or WSDL. The call including the ESDL or WSDL formatted message may form the basis of the service contract by defining the interaction between a client system the service and corresponding business objects along with properties of the business objects and nodes . That is the service contract provides the definition of the formats and or protocols needed to interact with a service and a business object instantiated by the service. The testing of the conformance of a service against the predefined requirements set forth in its corresponding service contract may be accomplished by CCM .

The CCM which resides on server system is separated from the runtime environment of client . The appropriate interfaces for controlling the CCM and feedback notifications are provided by the SOA enabled system through network connections . Moreover the complete runtime of the CCM is integrated into the backend i.e. server system of the SOA enabled system . In particular the CCM is realized as a plug in with the SOA enabled system with hooks located before and after each service call by the service manager . As used herein the term hooks refers to placeholders for callback functions that instantiate CCM . Further as used herein a callback function refers to executable code that calls a function or executable code of another application.

As illustrated in the CCM interfaces with the service manager . For each service manager interface method between the local client proxy interface method handler interface method and service provider interface method depending on the service provider adapter used i.e. the service called the CCM provides conformance testing of the called service.

The specific operation of the conformance testing performed by the CCM may depend on the service being called. In the particular case of a service call to service provider as illustrated in the exemplary sequence diagram the conformance testing performed by the CCM may depend on the interfaces that the service provider adapter provide for each service provider . The service provider adapter serves as an interface between the service manager and the service provider and thus allows the service manager to invoke the services provided by the service provider . The interface is specific to each called service and contains the data that describes the service contract and requirements for that service. Thus based upon the signature of the called service and the interface the CCM recognizes the service being called and performs testing in accordance with the called service and its corresponding service contract. Additional service contracts may be introduced and or modified by a particular service provider adapter utilized by a service provider . For example the service contract may be modified to add or delete requirements that are necessary for a service to be designated as conformant. In order to also support these different types of adapters within the CCM interfaces are implemented by the service provider adapter which provide notifications and logging services.

Service handler is comprised of software routines that may process for example a service s request for messaging dynamic properties change notifications e.g. making data associated with a business object read only changeable mandatory invisible and the like transactions locking repository access context management and the like. A service contract of a service may for example set forth that necessary constraints including states phases and conditions of the runtime repository that may be needed for each service call. Therefore for each interface method of the service handler the CCM provides conformance testing to ensure that the runtime repository is in the proper state and or phase as is set forth in the service contract. These interfaces methods may be called within the service handler implementations as illustrated in the exemplary sequence diagram .

Although most conformance tests will be processed because of interface methods with the service provider adapter and the service handier a requirement may be added that only business objects of the same business unit may be accessed via the local client proxy . In particular this requirement may necessitate that the local client proxy functions with the CCM as illustrated in the exemplary sequence diagram . To prepare for additional requirements the CCM provides appropriate conformance testing for each interface method of the local client proxy . These interface methods are called within implementations of the local client proxy.

The conformance control engine comprises a service runtime monitor several validation units a logging engine and an adapter mediator . The service runtime monitor provides an interface which may be called by the service manager or the service provider adapter . Within the conformance control engine the service runtime monitor may log the call to service provider and manage the duration and instances of the adapter mediator .

Because the service provider adapter may implement sophisticated behavior and therefore may introduce complete new service provider interfaces the adapter may require well defined interfaces to ensure the conformance of the service provider . The adapter mediator represents a bridge between the service provider adapter and the conformance control engine . Hence the adapter mediator provides the connections and notification interfaces for the service provider adapter .

In addition the other components of the conformance control engine such as the handler validation unit tests the correct handler usage within service calls. The service validation unit observes the conformance of a single service by comparing conditions prior to the service being called and after the service is called. Conditions that are compared may include the content and or form of data and meta data stored within runtime repository . The state validation unit inspects the overall service contract conformance of the service provider . The logging engine provides the interfaces for accessing the content of the database storage device and the abstraction of the underlying database schema.

Through the utilization of the components of the conformance control engine the CCM is capable of performing a variety of conformance tests of called services based upon their service contracts. For example the CCM may test a service based on the data or meta data it returns or modifies in runtime repository . In particular the data may be in the form of a business object as discussed above. The CCM may also test a service based upon the sequence of functionalities called within a service or by multiple services. For example a service may provide a retrieve functionality and another service may provide a retrieve by association functionality. The retrieve service performs the functionality of retrieving a designated business object from runtime repository . The retrieve by association service performs the functionality of identifying a parent identifier of a business object node and retrieving the corresponding children nodes. A service contract may set forth that the retrieve service be called prior to the retrieve by association service. The CCM is therefore capable of tracking the sequence of services called in order to perform this conformance test. In addition the CCM is capable of performing conformance testing of a service based on the state of the runtime repository . The service contract may describe a state model which may be used to control access to business objects and determine when a requesting service may read or write a business object s data without conflicting or interfering with the access of other services to the same data. For example if a service tries to modify a business object the modification may be prevented if another service is already in the process of modifying the same business object. The CCM may perform this conformance testing of the service by monitoring the state of the runtime repository when the service is called and during implementation of the service.

Database storage device stores conformance information used for non conformance analysis by the service provider developers. In general non conformant behavior may result in a termination of the service but in special circumstances the non conformance may be so insignificant that it is not appropriate to cancel further processing. The threshold of non conformance severity that will result in termination of the of the service may be included as part of the coding for the conformance test performed. For example a called service may include a parameterized query function with one parameter of the query being that the data returned from the query will be in a sorted format However if the data returned is instead returned in an unsorted format the test may be coded to provide that such a non conformance should not result in a termination of the service. In either case information regarding conformance or non conformance may be logged within database storage device . This information may be viewed with a browser and or analyzed with some form of tool support i.e. software capable of modeling or simulating a process by the application developer later for diagnostic purposes and or to inform the responsible service provider about non conformance. An example of tool support is NetWeaver Developer Studio developed by SAP AG.

In step for each interface method e.g. through an API between the service manager and the service provider adapter and for each interface method with the service handler the CCM performs a conformance test. Further as previously noted the CCM may also perform a conformance test for each interface method with the local client proxy when business objects or services from a different business unit is attempted to be accessed. As discussed above the CCM may perform the conformance test of the called service based on comparison of the data meta data and or identifier that the service returns or modifies with the requirements set forth in the service contract. A determination of the data meta data and or identifier that the service returns or modifies may be made by checking the content and or form of data and meta data stored within runtime repository prior to the service being called during the service call and after the service is called. The CCM may also perform the conformance test based on a comparison of the sequence of the service call or the state of the runtime repository with the service contract requirements.

In step a determination is made as to whether the conformance test has detected a conformance violation. As outlined below the actual conformance violation will depend on the specific requirements outlined in the service contract for the corresponding service. For example a specific contract requirement may specify that a service will not import a business object node ID without the existence of a corresponding exporting business object node root ID. In this example the CCM will perform a pre method test i.e. prior to the service being called of runtime repository to ensure that each node ID within runtime repository correlates to an exporting root ID a business object node root ID is an identifier for a node portion of a business object . The CCM may also perform a post method test i.e. subsequent to the service being called to ensure for example that for any business object node root IDs imported by the service a corresponding exporting business node root ID also exists. If this is not the case the CCM may determine that there is a conformance violation. In this instance the pre method test and the post method test are performed by the CCM by comparing the meta data stored in runtime repository at different time intervals in conjunction with the requirements of the service contract. If a conformance violation has not been detected the service is allowed to be implemented step . However if a conformance violation has been detected a determination may be made as to the severity of the conformance violation step . If the conformance violation is deemed not to be severe the service operation may be allowed to continue and the violation is logged within database storage device step . Severe conformance violations may result in the immediate termination of the service and the logging of the violation within database storage device step .

The conformance tests performed in step by CCM will necessarily depend on a variety of factors such as the contract requirement for the corresponding service being called or the general required performance of the service. Further the testing may be done on a service level a contract conformance level or a business object level. By way of example below are a couple of the different levels of testing and the types of conformance testing that may be performed by the CCM as part of step .

An example of a service is labeled as Keys and Root identifiers. The functionality performed by this service relates to the importing of a business object node IDs. An exemplary contract requirement for this service may set forth that for each importing business object node ID an exporting business object node root ID also exists. When this service is called the CCM tests to ensure that for each importing business object node ID an exporting business object node root ID also exists. If a corresponding business object node root ID is missing the CCM logs this service as non conformant and stores an indication of non conformance in database storage device .

Another example of a service is labeled as Query. The functionality performed by this service relates to performing searches of business objects located in runtime repository . An exemplary contract requirement for this service may set forth that an implementation of this service should not raise any change notifications e.g. a change to the contents of a business object stored in runtime repository or dynamic properties due to the state model constraints. The CCM may monitor change notifications and dynamic properties in the scope of the query service implementation log them as non conformant and store an indication of non conformance in database storage device .

Moreover although the above describes specific services and specific conformance tests performed on these services by CCM CCM may also perform other conformance control tests on other services as depicted in Table 1.

The foregoing description has been presented for purposes of illustration. It is not exhaustive and does not limit the invention to the precise forms or embodiments disclosed. Modifications and adaptations of the invention will be apparent to those skilled in the art from consideration of the specification and practice of the disclosed embodiments of the invention. For example the level of conformance testing that may be performed by the CCM may be expanded upon to include not only more conformance tests within a particular service but also conformance tests on services not listed herein.

Further the described implementations include software but systems and methods consistent with the present invention may be implemented as a combination of hardware and software or in hardware alone. Examples of hardware include computing or processing systems including personal computers servers laptops mainframes micro processors and the like. Additionally although aspects of the invention are described as being stored in memory one skilled in the art will appreciate that these aspects may also be stored on other types of computer readable media such as secondary storage devices for example hard disks floppy disks or CD ROM the Internet or other propagation medium or other forms of RAM or ROM.

Computer programs based on the written description and methods of this invention are within the skill of an experienced developer. The various programs or program modules may be created using any of the techniques known to one skilled in the art or can be designed in or by means of Java C HTML XML or HTML with included Java applets or in SAP R 3 or ABAP. One or more of such software sections or modules may be integrated into a computer system or existing e mail or browser software.

Moreover while illustrative embodiments of the invention have been described herein the scope of the invention includes any and all embodiments having equivalent elements modifications omissions combinations e.g. of aspects across various embodiments adaptations and or alterations as would be appreciated by those in the art based on the present disclosures. The limitations in the claims are to be interpreted broadly based on the language employed in the claims and not limited to examples described in the present specification or during the prosecution of the application. Further the steps of the disclosed methods may be modified in any manner including by reordering steps and or inserting or deleting steps without departing from the principles of the invention. It is intended therefore that the specification and examples be considered as exemplary only with a true scope and spirit of the invention being indicated by the following claims and their full scope of equivalents.

