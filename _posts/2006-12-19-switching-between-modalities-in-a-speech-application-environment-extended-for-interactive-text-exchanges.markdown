---

title: Switching between modalities in a speech application environment extended for interactive text exchanges
abstract: The present solution includes a method for dynamically switching modalities in a dialogue session involving a voice server. In the method, a dialogue session can be established between a user and a speech application. During the dialogue session, the user can interact using an original modality, which is either a speech modality, a text exchange modality, or a multi mode modality that includes a text exchange modality. The speech application can interact using a speech modality. A modality switch trigger can be detected that changes the original modality to a different modality. The modality transition to the second modality can be transparent to the speech application. The speech application can be a standard VoiceXML based speech application that lacks an inherent text exchange capability.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07921214&OS=07921214&RS=07921214
owner: 
number: 07921214
owner_city: 
owner_country: 
publication_date: 20061219
---
The present invention relates to the field of automated speech systems and more particularly to switching between modalities in a speech application environment extended for interactive text exchanges.

Interactive Voice Response IVR systems are often used to provide automated customer service via a voice channel of a communication network. IVR systems permit routine customer requests to be quickly efficiently and automatically handled. When a request is non routine or when a caller has difficulty with the IVR system a transfer can be made from the IVR system to a customer service representative. Even when human interactions are needed the IVR system can obtain necessary preliminary information such as an account number and a reason for a call which can ensure callers are routed to an appropriate human agent and to ensure human to human interactive time is minimized. Successful use of IVR systems allows call centers to be minimally manned while customers are provided a high level of service with relatively low periods spent in waiting queues.

IVR systems especially robust ones having natural language understanding NLU capabilities and or large context free grammars represent a huge financial and technological investment. This investment includes costs for purchasing and maintaining IVR infrastructure hardware IVR infrastructure software and voice applications executing upon this infrastructure. An additional and significant reoccurring cost can relate to maintaining a sufficient number of voice quality channels to handle anticipated call volume. Further each of these channels consumes an available port of a voice server which has a limited number of costly ports. Each channel also consumes a quantity of bandwidth needed for establishing a voice quality channel between a caller and the IVR system.

One innovative solution for extending an IVR infrastructure to permit text based interactive services is detailed in co pending patent application Ser. No. 11 612 996 entitled Using an Automated Speech Application Environment to Automatically Provide Text Based Interactive Services. More specifically the co pending application teaches that a chat robot object referred to as a Chatbot can dynamically convert text received from a text exchange client to input consumable by a voice server and can dynamically convert output from the voice server to text appropriately formatted for the client. From a perspective of the voice server the text based interactions with the text exchange client are handled in the same manner and with the same hardware software that is used to handle voice based interactions. The co pending solution allows for a possibility of switching between modalities without interrupting a pre existing communication session which is the subject matter of this application.

It should be appreciated that conventional solutions for providing voice and text exchange services implement each service in a separate and distinct server. Each of these servers would include server specific applications tailored for a particular modality. For example a VoiceXML based application controlling voice based interactions can execute on a speech server and a different XML based application controlling text based interactions can execute on a text exchange server.

Any attempt to shift from a text session to a voice session or vice versa would require two distinct servers applications and communication sessions to be synchronized with each other. For example if a voice session were to be switched to a text session a new text session would have to be initiated between a user and a text exchange serve. The text exchange server would have to initiate an instance of a text exchange application for the session. Then state information concerning the voice session would have to be relayed to the text exchange server and or the text exchange application. Finally the speech application executing in the speech server would need to be exited and the original voice session between the speech server and a user terminated.

No known system or set of systems provides a dynamic intra communication session modality switching capability that would permit switching from a text exchange modality to a voice modality and vice versa. Further no known teachings exist concerning even a desirability to dynamically switch between a text exchange modality and a voice modality during an automated communication session possibly due to assumed complications believed to be inherent with such a capability.

A solution that permits a participant engaged in an automated communication session to dynamically switch between a text exchange interaction and a voice based interaction and vice versa at will without disturbing a dialogue state of the automated communication session. Further the solution permits the participant to institute a dual mode for the communication session which accepts input and or provides output to different devices each associated with a different modality. Hence a dual mode communication session is different from a multi mode communication session. In a multi mode communication session multiple interactive modalities are associated with a single device client application. Notably the solution can additionally allow users to dynamically switch to and from multimodal interactive modes during the communication session. The solution allows for the switching of interaction modes in a manner transparent to the automated server controlling session dialogue and in a manner transparent to the session controlling application.

The present solution can be implemented in the context of a speech application environment that is extended for text based interactive services. The speech application environment can include a Chatbot server which manages chat robot objects or Chatbots. Chatbots can dynamically convert text received from a text exchange client to input consumable by a voice server and to dynamically convert output from the voice server to text appropriately formatted for the client. A text input API of the voice server can be used to directly accept text so little to no conversion may be required between text exchange client output and voice server input. Output of the voice server can be in a voice markup format from which the Chatbot can extract text i.e. remove markup tags which is conveyed to the text exchange client.

The present invention can be implemented in accordance with numerous aspects consistent with the material presented herein. For example one aspect of the present invention can include a method for dynamically switching modalities in a dialogue session involving a voice server. In the method a dialogue session can be established between a user and a speech application executing within a voice server. During the dialogue session the user can interact using an original modality which is either a speech modality a text exchange modality or a multi mode modality that includes a text exchange modality. The speech application can interact using a speech modality. A modality switch trigger can be detected that changes the original modality to a different modality. The modality transition to the different modality can be transparent to the voice server and to the speech application. Voice markup output from the voice server can also be dynamically converted to text exchange messages. The speech application can be a standard speech application that lacks an inherent text exchange capability.

Another aspect of the present invention can include a different method for dynamically switching modalities in a dialogue session involving a voice server. An automated dialogue session can be identified involving a text exchange client and a speech application. The dialogue session can also involve a Chatbot server and a voice server. During the dialogue session the text exchange client can exchange text exchange messages over a first communication channel with the Chatbot server. In the second communication channel the Chatbot server can send text which the Voice server can consume using a text input API. The voice server can return text matched against a speech grammar to the Chatbot server. The Chatbot server can dynamically convert output of the Voice server to input consumable by a speech application. Then it derives corresponding text messages that are consumable by the text exchange client. The Chatbot server can detect a modality switch trigger. This detection can cause a third communication channel between the Chatbot server and voice device to be automatically established. Bidirectional voice messages for the automated dialogue session can thereafter be conveyed between the voice device and the voice server over a combination of the second communication channel and the third communication channel.

Yet another aspect of the invention can include a system for providing text exchange services that includes a text exchange client a voice client a speech application environment a Chatbot server and a modality switching engine. The text exchange client can send and receive real time text exchanges over a text exchange channel. The voice client can send and receive speech over a voice channel. The speech application environment can include an automated speech response application that permits users to interact in real time over a voice channel. The Chatbot server can establish a communication session involving the text exchange client and the automated speech response application. The Chatbot server can dynamically convert voice markup messages provided by the speech application to text messages. A text input API of the voice server can permit the voice server to consume text. The modality switching engine can dynamically switch a modality through which a user interacts with the automated speech response application. A dynamic modality switch can switch an activation state of the text exchange client and or the voice client. For example when a modality switch occurs a user previously interacting with a text exchange client can seamlessly interact with a voice client such as a telephony device.

It should be noted that various aspects of the invention can be implemented as a program for controlling computing equipment to implement the functions described herein or a program for enabling computing equipment to perform processes corresponding to the steps disclosed herein. This program may be provided by storing the program in a magnetic disk an optical disk a semiconductor memory any other recording medium or can also be provided as a digitally encoded signal conveyed via a carrier wave. The described program can be a single program or can be implemented as multiple subprograms each of which interact within a single computing device or interact in a distributed fashion across a network space.

The method detailed herein can also be a method performed at least in part by a service agent and or a machine manipulated by a service agent in response to a service request.

The speech enabled application can be a VoiceXML application such as an application for an Interactive Voice Response System IVR often deployed at contact centers. The text exchange client interface can be an interface for any type of text exchange communications such as Instant Message IM communications chat communications text messaging using SAMTIME TRILLIAN YAHOO MESSENGER and the like. The voice interface can be any interface over which real time speech communications occur. For example interface can include but is not limited to a telephone input output I O interface a mobile communication device e.g. cell phone I O interface a two way radio I O interface and or a Voice over Internet Protocol VOIP interface.

The voice server like most voice servers can include a text mode interface which is typically used by developers system maintainers and or trainers of a speech recognition engine. For example a set of proprietary restricted or standardized e.g. MRCPv2 INTERPRET Application Program Interfaces APIs can be used for the interface . This set of APIs which are typically not available or accessible within a production environment can be enabled to create a text input channel that consumes considerably fewer computing resources that a voice channel which is typically established with the voice server operating in a production environment. In most cases the text mode interface is present but dormant within production voice servers . Interface can be enabled for text based interactions with Chatbot server.

Use of interface occurs in a manner transparent to the application server and therefore has no affect on application . That is application and application server remain unaware that the voice server is processing text input via interface as opposed to voice input. The output produced by voice server and sent to Chatbot server can be the same in either case. Further the output produced by the application server and sent to the Chatbot server can be the same. Thus multiple communication sessions one or more being text based sessions that use interface and others being voice based sessions can be concurrently handled by application server . System can be implemented without infrastructure changes to application server and without changes to voice server assuming interface is present and without changing code of speech enabled applications . This is true even though the application may lack explicitly coded support for text exchange interactions and would be unable to support such interactions without the disclosed invention. Further the text exchange interface can be any off the shelf text exchange software which needs not be modified to operate as shown in system .

In system the Chatbot server can fetch voice markup associated with a speech enabled application which it executes. The Chatbot server can also relay textual input from interface to sent text consumable by voice server via interface . The voice server can match the input against a recognition grammar and generate text output for the Chatbot server . The Chatbot server can use this output when it executes the application. The application processes this output which can produce a responsive output typically in a form of a Voice markup segment such as VoiceXML which can further employ the use of the W3C Speech Synthesis Markup Language or SSML . When performing text exchange operations normal speech synthesis operations performed by the voice server can be bypassed. The Chatbot server can dynamically convert the responsive output from the markup into textual output which interface handles. For example textural content contained between markup tags can be extracted from the application markup i.e. the markup tags can be omitted and included within a text message.

From within interface a user can opt to be transferred to a different communication modality and or to a live operator which results in Chatbot server performing a switching operation. This switching can occur in a manner transparent to application server and application and a dialogue state of an existing communication session can be seamlessly maintained.

To illustrate the transfer request can be a request to change an interactive interface from text exchange interface to voice interface . The voice interface can be provided through a separate device such as a phone. Upon receiving the request Chatbot server can send a connection terminated notice to interface . The Chatbot server can then open a voice channel between itself and voice interface over which an optional introductory notice can be conveyed. Voice input can then be routed as input to Chatbot server . The Chatbot server sends the voice input to the voice server which produces text result . The Chatbot server can generate new markup after processing result which is sent not shown to voice server which returns not shown voice output. The voice output can be conveyed to voice interface by Chatbot server as voice output .

A transfer request to an agent can then be sent from interface . The request can specify whether a voice communication or a live text exchange is preferred assuming an option for a live text exchange is available. A live text exchange request can cause Chatbot server to switch interactive interfaces from interface to interface .

Upon receiving the agent transfer request the Chatbot server can connect a user to live agent through an appropriate communication channel. The agent can automatically receive information from Chatbot server regarding the current communication session. For example a user s name account information and the like can be presented to agent which can shorten human to human communication times.

It should be noted that optional notice and can come directly from the Chatbot server instead of from voice server or from application . It should also be noted that transfer requests not shown back to the text transfer interface from voice interface can be made to Chatbot server which operate in substantially the same fashion and which do not interrupt a continuing dialogue with voice server .

Further modality changes can be initiated from the application . For example the application can determine conditions for transferring to a live operator over a voice channel are met. The Chatbot server can detect these conditions and can automatically open a channel to voice interface if necessary.

In one contemplated arrangement system can implement dual mode as well as multi mode communications. A dual mode communication concurrently enables interface and . Output from server can be provided as both voice output via interface and as text output via interface .

A multi mode communication allows both voice and text input output to be conveyed through a single interface. For example text exchange interface can be a multi mode interface capable of receiving speech input and presenting speech output. Multi mode output e.g. text and speech can be presented over a multi mode interface .

The voice server can include a text input API which is typically used by developers system maintainers and or trainers of a speech recognition engine. This set of APIs which are typically not available or accessible within a production environment can be enabled to permit the voice server to directly consume text which requires considerably fewer computing resources than those needed to process voice input which server typically receives.

As shown client can send a request to Chatbot server to initialize a text modality channel. Chatbot server can send a channel initialization message to voice server to establish a session. Server can positively respond causing a channel to be established between servers and . Chatbot server can then establish the requested text channel with client . After step the Chatbot server can send a request to application server which causes a speech enabled application to be instantiated. That is application markup can be conveyed to Chatbot server for execution.

Application initiated prompt can occur when the ChatBot Server executes the speech enabled application . Server can convert markup provided by application into pure text represented by text prompt which is sent to client . For example prompt can be written in markup and can include text context. The converting can extract the text context omitting the markup tags and generate a text prompt which only includes the text context. Client can respond to the prompt via the text channel. Server can relay response which can be identical to response to voice server . The voice server can match response against a speech grammar via programmatic action which results in text result . The voice server can convey text result to the Chatbot server . Chatbot server uses this output when it executes the application logic of executing Application which results in markup being generated. The Chatbot server can convert textual content contained within generated markup into a text result which is sent to client .

Interactions can continue in this fashion until client sends a switch code to the Chatbot server . The switch code can specify that a modality switch from the text exchange modality to a voice modality is to occur. A telephone number for a voice device can be provided. This telephone number can also be looked up from a previously stored profile or dialogue session store. Once the Chatbot server finds the number it can call the voice client thereby establishing a voice channel. The original channel with client can then be optionally closed . That is concurrent text and voice input output from each client is permitted for a common communication session.

Voice input can be conveyed from voice client to Chatbot server which relays the voice input to voice server . Voice server can speech recognize the input and provide recognition results to the Chatbot server . The executing speech enabled application can apply application logic to the results which generates markup which is conveyed to voice server . Voice output can be generated from the markup which is conveyed through Chatbot server to voice client as voice output .

Eventually client can send an end session request to Chatbot server which closes the channel to the voice server as well as the channel .

To illustrate a communication session can be established between customer and application using an original modality. The original modality can be a voice modality which uses voice interface to connect to Chatbot server over channel which connects to voice server over channel which in turn connects to application server . The original modality can also be text exchange modality which uses text exchange interface to connect to Chatbot server over channel which ultimately connects to application server .

Sometime during the communication session a modality switching event can occur. This event causes an activation state of one or more of the interfaces and to change. For instance a text to voice modality switch can involve dynamically opening voice channel and closing text exchange channel . A voice to text modality switch can involve dynamically opening text exchange channel and closing channel . Either way channel remains open and unchanged and the modality change can occur in a manner completely transparent to application server or executing IVR application .

In one arrangement the modality switch can be customer initiated via an active interface or . A user can enter a special switching code or command such as switch voice or switch text. The switching engine of Chatbot server can interpret this code and perform an appropriate switching action. The modality switch can require a telephone number or other identifier be conveyed to Chatbot server . For example when switching from interface to interface a phone number associated with interface can be provided e.g. switch voice 555 2222 . Alternatively profile information for customer or a current dialogue session can be maintained within data store . This profile information can include relevant contact numbers such as phone number for connecting to voice device .

In another arrangement the modality switch can be initiated by server . For example the IVR application can initiate a transfer request to speak with a human agent such as the one below.

For example text exchange interface can be active and a transfer can be initiated to a live agent over a voice channel. The Chatbot server can convey a hyperlink to customer that is displayed in interface . Clicking on the hyperlink can signify that the Chatbot server is approved to initialize a voice session. The Chatbot server can look up previously stored user preferences to determine which number to call to establish a voice channel . A user can also be prompted for a phone number when no such number is available to the Chatbot server . Once the Chatbot server establishes voice channel channel can be closed and the Chatbot server can disengage by merging channel and channel . The application server can then execute the transfer.

As shown the system of includes a network which communicatively links communication device Chatbot server application server and enterprise server . The network can include any of a variety of components wired and or wireless that together permit digitally encoded information contained within carrier waves to be conveyed from any communicatively linked component to any other communicatively linked component.

The communication device can be any communication device linking a customer to network . Devices can include for example mobile telephones line based phones computers notebooks computing tablets personal data assistants PDAs wearable computing devices entertainment systems interactive media devices and the like. Specific categories of devices include a text exchange device a voice communication device and a multi mode device .

A text exchange device can be a computing device capable of real time interactive text exchanges. These text exchanges include online chatting instant messaging and text messaging. A communication device can be any device capable of real time voice communication over network . This includes VoIP based communication traditional circuit switched communications two way radio communications and the like. A multi mode device is a device capable of engaging in text exchanges and in voice communications. Some multi mode devices are restricted to one mode of communication at a time while others are able to communicate across multiple modes concurrently.

Chatbot server can be a VoiceXML server or equivalent device that dynamically converts text exchange messages from device to messages consumable by voice server . Use of a text input API which lets voice server accept text may permit text from device to be directly consumed by voice server . Chatbot server can also dynamically convert output from voice server to output consumable by the speech application and then making it presentable within interface .

For each managed communication session the Chatbot server can instantiate a Chatbot object . The Chatbot object can include a SIP servlet and one or more interpreters such as Call Control Extensible Markup Language CCXML interpreter a Voice Extensible Markup Language VoiceXML interpreter an Extensible Hypertext Markup Language XML plus voice profiles X V interpreter a Speech Application Language Tags SALT interpreter a Media Resource Control Protocol MCRP interpreter a customized markup interpreter and the like. The SIP servlet can map incoming SIP requests to appropriate interpreters.

A communication session handled by Chatbot object can involve multiple different communication channels such as channel and channel . Channel can be a communication channel established between Chatbot server and device . Channel can be a communication channel established between Chatbot server and voice server . Appreciably application server is not aware of a communication modality and channel type that a customer uses to communicate with server . A special text input API can be used to permit voice server to directly consume textual input provided by Chatbot server .

The conversion engine of server can perform any necessary conversions to adapt output from text exchange device to input consumable by voice server . Typically no significant conversions are necessary for text consumed by the voice server which provides access to text mode interaction functions via API . Appreciably text mode interaction functions are typically used by developers during a testing and development stage but are being used here at runtime to permit the voice server to directly handle text. For example the Internet Engineering Task Force IETF standard Media Resource Control Protocol version 2 MRCPv2 contains a text mode interpretation function called INTERPRET for the Speech Recognizer Resource which would permit the voice server to directly handle text.

The application server will typically generate voice markup output such as VoiceXML output which a voice server converts to audio output. The conversion engine can extract text content from the voice markup and can convey the extracted text to communication device over channel .

Application server can be an application server that utilizes modular components of a standardized runtime platform. The application server can represent a middleware server of a multi tier environment. The runtime platform can provide functionality for developing distributed multi tier Web based applications. The runtime platform can also include a standard set of services application programming interfaces and protocols. That is the runtime platform can permit a developer to create an enterprise application that is extensible and portable between multiple platforms. The runtime platform can include a collection of related technology specifications that describe required application program interfaces APIs and policies for compliance.

In one embodiment the runtime platform can be a JAVA 2 PLATFORM ENTERPRISE EDITION J2EE software platform. Accordingly the application server can be a J2EE compliant application server such as a WEBSPHERE application server from International Business Machines Corporation of Armonk N.Y. a BEA WEBLOGIC application server from BEA Systems Inc. of San Jose Calif. a JBOSS application server from JBoss Inc. of Atlanta Ga. a JOnAS application server from the ObjectWeb Consortium and the like. The runtime platform is not to be construed as limited in this regard and other software platforms such as the .NET software platform are contemplated herein.

The IVR application can be an application that permits callers to interact and receive information from a database of an enterprise server . Access to the VoiceXML server which has been extended for Chatbot can accept user input using touch tone signals voice input and text input. The IVR application can provide information to the user in the form of a single VoiceXML application that can be used by any modality including DTMF voice and chat. The voice markup can also be directly conveyed to conversion engine where it is converted to text presentable in interface .

The IVR application can present a series of prompts to a user and can receive and process prompt responses in accordance with previously established dialogue menus. Speech processing operations such as text to speech operations speech to text operations caller identification operations and voice authorization operations can be provided by a remotely located voice server . Without the intervention of Chatbot server IVR application would be unable to interact with text exchange device since it lacks native coding for handling text exchange input output.

The present invention may be realized in hardware software or a combination of hardware and software. The present invention may be realized in a centralized fashion in one computer system or in a distributed fashion where different elements are spread across several interconnected computer systems. Any kind of computer system or other apparatus adapted for carrying out the methods described herein is suited. A typical combination of hardware and software may be a general purpose computer system with a computer program that when being loaded and executed controls the computer system such that it carries out the methods described herein.

The present invention also may be embedded in a computer program product which comprises all the features enabling the implementation of the methods described herein and which when loaded in a computer system is able to carry out these methods. Computer program in the present context means any expression in any language code or notation of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following a conversion to another language code or notation b reproduction in a different material form.

