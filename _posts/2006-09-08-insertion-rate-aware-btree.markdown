---

title: Insertion rate aware b-tree
abstract: Systems, methods, and other embodiments associated with insertion rate responsive b-trees are described. One system embodiment includes a capacity logic to detect a divide condition for a leaf node and an insert logic to determine an insertion level for the leaf node. The system embodiment may include an allocation logic to selectively allocate a set of leaf nodes. Characteristics of the set (e.g., number of members) may depend on the divide condition and the insertion level. The system embodiment may include a partition logic to move a partition key from the leaf node to a parent and to associate the partition key with the set of leaf nodes. A fuzzy index logic may provide key-based addressing to the set of leaf nodes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08204912&OS=08204912&RS=08204912
owner: Oracle International Corporation
number: 08204912
owner_city: Redwood Shores
owner_country: US
publication_date: 20060908
---
In computer science a b tree is a type of tree data structure. Unlike a binary tree where each node has exactly two children a b tree node may have a variable number of children. The number of children may vary within a range defined for the b tree.

B trees are used in applications including databases file systems and so on. Thus a b tree child node may store for example a key and a row identifier. In one example the entries in a b tree child node may be arranged in order by key value. In the example each key in a non child node e.g. branch block has an associated child node that is the root of a sub tree containing nodes with keys less than or equal to the key but greater than the preceding key. A node may also have an additional right most child that is the root for a sub tree containing all keys greater than any keys in the node.

As data is inserted into a b tree a node may become full. Thus a node may be split to accommodate subsequent data insertions. Prior Art illustrates an example of this splitting. At time T a b tree may include a root node that has a child node . Child node may itself have two child nodes e.g. a child node a child node . At time Tit may be determined that an insertion has caused the child node to become full. Thus at time T a median key may be identified in the child node . At time T the median key may be relocated to the node and an additional child node may be allocated and linked to the b tree. A subset e.g. half of the keys that appeared in the child node at time Twill be located in the child node at time T. For example keys with values less than that of the median key may be located in the child node . Similarly a subset e.g. half of the keys that appeared in the node at time Twill be located in the child node at time T. For example keys with values greater than or equal to that of the median key may be located in the child node at time T.

At certain times a b tree may develop a hot spot . A hot spot describes a region e.g. leaf node that is experiencing a level of insertion activity that creates contention issues and or other issues. For example consider an online transaction processing system OLTP that handles transactions having sequentially increasing order numbers that are used as a key index. When the OLTP experiences a certain level of activity the rightmost block may become a hot spot because an undesirable level of insertion activity may be focused in that rightmost block. Under these conditions performing an operation like a split may lead to undesirable performance. While a rightmost block is identified it is to be appreciated that other nodes may become hot spots under other conditions.

Example systems and methods concern an insertion rate sensitive b tree. Insertion rate sensitivity may be provided by replacing conventional two way node splitting with n way node splitting n being an integer greater than one . The n way node splitting facilitates providing a fuzzy index to distribute hot spot access and thus cool off that hot spot. Instead of splitting a full node into two half full nodes example systems and methods may hi split a node leaving a full to nearly full node behind and empty to nearly empty node s ahead. Example system and methods may also allocate n physical nodes instead of one additional physical nodes. To facilitate cooling off the hot spot e.g. reducing an insertion rate per node the n physical nodes may be treated as a single logical node but may have key based access moderated by a hash function that distributes accesses for the single logical node between the n physical nodes.

In one example whether n way splitting occurs depends on if the node to be split is a hot spot. A hot spot may be detected for example by examining the insertion activity associated with the node. In one example the breadth of the n way splitting may depend on the degree to which the insertion activity indicates a hot spot. For example a first node identified as having a first level of insertion activity may cause a first n way split e.g. n five while a second node identified as having a second higher level of insertion activity may cause a second n way split e.g. n ten .

The following includes definitions of selected terms employed herein. The definitions include various examples and or forms of components that fall within the scope of a term and that may be used for implementation. The examples are not intended to be limiting. Both singular and plural forms of terms may be within the definitions.

 Machine readable medium as used herein refers to a medium that participates in directly or indirectly providing signals instructions and or data that can be read by a machine e.g. computer . A machine readable medium may take forms including but not limited to non volatile media e.g. optical disk magnetic disk volatile media e.g. semiconductor memory dynamic memory and transmission media e.g. coaxial cable copper wire fiber optic cable electromagnetic radiation . Common forms of machine readable mediums include floppy disks hard disks magnetic tapes. RAM Random Access Memory ROM Read Only Memory CD ROM Compact Disk ROM and so on.

In some examples database is used to refer to a table. In other examples database may be used to refer to a set of tables. In still other examples database may refer to a set of data stores and methods for accessing and or manipulating those data stores.

 Data store as used herein refers to a physical and or logical entity that can store data. A data store may be for example a database a table a file a list a queue a heap a memory a register a disk and so on. In different examples a data store may reside in one logical and or physical entity and or may be distributed between multiple logical and or physical entities.

 Logic as used herein includes but is not limited to hardware firmware software stored on a machine readable medium and or combinations thereof to perform a function s or an action s and or to cause a function or action from another logic method and or system. Logic may include a software controlled microprocessor discrete logic e.g. application specific integrated circuit ASIC an analog circuit a digital circuit a programmed logic device a memory device containing instructions and so on. Logic may include a gate s a combinations of gates other circuit components and so on. In some examples logic may be fully embodied as software stored in a machine readable medium. Where multiple logical logics are described it may be possible in some examples to incorporate the multiple logical logics into one physical logic. Similarly where a single logical logic is described it may be possible in some examples to distribute that single logical logic between multiple physical logics.

An operable connection or a connection by which entities are operably connected is one in which signals physical communications and or logical communications may be sent and or received. An operable connection may include a physical interface an electrical interface and or a data interface. An operable connection may include differing combinations of interfaces and or connections sufficient to allow operable control. For example two entities can be operably connected to communicate signals to each other directly or through one or more intermediate entities e.g. processor operating system logic software . Logical and or physical communication channels can be used to create an operable connection.

 Signal as used herein includes but is not limited to electrical signals optical signals analog signals digital signals data computer instructions processor instructions messages a bit a bit stream or other means that can be received transmitted and or detected.

 Software as used herein includes but is not limited to one or more computer instructions and or processor instructions that can be read interpreted compiled and or executed by a computer and or processor. Software causes a computer processor or other electronic device to perform functions actions and or behave in a desired manner. Software may be embodied in various forms including routines modules methods threads and or programs. In different examples software may be embodied in separate applications and or code from dynamically linked libraries. In different examples software may be implemented in executable and or loadable forms including but not limited to a stand alone program an object a function local and or remote a servelet an applet instructions stored in a memory part of an operating system and so on. In different examples computer readable and or executable instructions may be located in one logic and or distributed between multiple communicating co operating and or parallel processing logics and thus may be loaded and or executed in serial parallel massively parallel and other manners.

Suitable software for implementing various components of example systems and methods described herein may be developed using programming languages and tools e.g. Java C C C SQL APIs SDKs assembler . Software whether an entire system or a component of a system may be embodied as an article of manufacture and maintained or provided as part of a machine readable medium. Software may include signals that transmit program code to a recipient over a network or other communication medium.

 User as used herein includes but is not limited to one or more persons software computers or other devices or combinations of these.

Some portions of the detailed descriptions that follow are presented in terms of method descriptions and representations of operations on electrical and or magnetic signals capable of being stored transferred combined compared and otherwise manipulated in hardware. These are used by those skilled in the art to convey the substance of their work to others. An method is here and generally conceived to be a sequence of operations that produce a result. The operations may include physical manipulations of physical quantities. The manipulations may produce a transitory physical change like that in an electromagnetic transmission signal.

It has proven convenient at times principally for reasons of common usage to refer to these electrical and or magnetic signals as bits values elements symbols characters terms numbers and so on. These and similar terms are associated with appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise it is appreciated that throughout the description terms including processing computing calculating determining displaying automatically performing an action and so on refer to actions and processes of a computer system logic processor or similar electronic device that manipulates and transforms data represented as physical electric electronic magnetic quantities.

While Prior Art illustrates conventional b tree splitting illustrates an example of insertion rate aware b tree splitting. As data is inserted into a b tree a node may become full. Thus a node may be split n ways n being an integer greater than one to accommodate insertions. At time T a b tree may include a root node that has a child node . Child node may itself have two child nodes e.g. a child node a child node . At time Tit may be determined that an insertion has caused the child node to become full. Thus at time T a hi split key may be identified in the child node . The hi split key may be positioned to create an unequal partition. Thus in one example a full or substantially full leaf node may be left behind while a newly allocated leaf node s may be empty or substantially empty.

At time T the hi split key may be relocated to the node and an additional set of child nodes e.g. . . . may be allocated and linked to the b tree. Depending on the location of the hi split key substantially all keys that appeared in the child node at time Twill be located in the child node at time T. Thus child nodes through may be substantially empty at time T. Additionally access to the set of child nodes may be distributed using a hash function. Thus rather than having a single half full node to accept insertions a set of substantially empty nodes with distributed access is available. This facilitates cooling off a hot spot.

Example methods may be better appreciated with reference to flow diagrams. While for purposes of simplicity of explanation the illustrated methods are shown and described as a series of blocks it is to be appreciated that the methods are not limited by the order of the blocks as some blocks can occur in different orders and or concurrently with other blocks from that shown and described. Moreover less than all the illustrated blocks may be required to implement an example method. In some examples blocks may be combined separated into multiple components may employ additional not illustrated blocks and so on. In some examples blocks may be implemented in logic. In other examples processing blocks may represent functions and or actions performed by functionally equivalent circuits e.g. an analog circuit a digital signal processor circuit an application specific integrated circuit ASIC or other logic device. Blocks may represent executable instructions that cause a computer processor and or logic device to respond to perform an action s to change states and or to make decisions. While the figures illustrate various actions occurring in serial it is to be appreciated that in some examples various actions could occur concurrently substantially in parallel and or at substantially different points in time.

Method may also include at identifying a hi split key in the leaf node. The location of the hi split key may be determined for example by a user configured parameter. In different examples the hi split key may be a last key in the leaf node a next to last key in the leaf node a first key in the leaf node a second key in the leaf node and so on. Thus the hi split key may facilitate providing insertion rate responsiveness to right most growing characteristic b trees left most growing characteristic b trees and so on.

Method may also include at moving the hi split key from the leaf node to a parent of the leaf node and at allocating n leaf nodes n being an integer greater than one. In different examples n may take on different values. For example n may be three five ten and so on. Allocating more than one leaf node facilitates reducing contention in a hot spot by providing more locations and more blocks than are conventionally available for insertions. In one example the n leafs nodes may be allocated from contiguous physical disk locations. This may facilitate for example performing a range scan on a b tree where all n leaf nodes are read with a single input output operation. More generally pages of memory associated with the n leaf nodes may be allocated so that as many of the pages as possible belong to a contiguous region on a disk. In one example all of the pages may belong to a contiguous region on a disk. Allocating pages in this way may facilitate reducing the number of input output operations required to read in the pages associated with the n leaf nodes. In one example it may only require a single i o operation.

Method may also include at relating the hi split key to a hash function. The hash function may provide and control key based access to the n leaf nodes. While n physical nodes are allocated the hash function facilitates making the n leafs nodes appear and operate as a single logical leaf node. Thus actions like look ups ranging operations and so on may interact with the hi split enabled b tree. The hash function therefore may facilitate easing contention and cooling off a hot spot. Reducing contention may include for example having the hash function distribute and control insertions to members of the n leaf nodes based on a key associated with the insertion. The hash function may similarly control lookups to members of the n leaf nodes based on a key associated with the lookup.

An addressing scheme applied to the set of keys associated with the set of n leaf nodes may facilitate distributing insertions and thus may facilitate reducing contention cooling off a hot spot and so on. In one example a locally linear but globally non linear scheme may be used. For example a subset of a set of keys associated with the n leaf nodes may be addressed sequentially within members of the n leaf nodes. However the entire set of keys associated with the n leaf nodes may not be addressed sequentially across the n leaf nodes. In this way issues associated with a right left most growing characteristic may be mitigated.

Method may be employed in different settings. By way of illustration method may operate on a b tree that is part of a cluster database. The cluster database may use a shared cache architecture. The cluster database may for example be a member of an enterprise grid having multiple cluster databases. To maintain consistency between the cluster databases the enterprise grid may synchronize the cluster databases using a cluster interconnect.

Different applications may use method . By way of illustration method may operate on a b tree that supports an online transaction processing OLTP system a decision support system DSS and so on. While an OLTP and a DSS are described it is to be appreciated that other applications may also interact with method and or a hi split enabled b tree that is insertion rate sensitive.

While illustrates various actions occurring in serial it is to be appreciated that various actions illustrated in could occur at least partially in parallel. By way of illustration a first process could detect a leaf split condition a second process could identify and move a hi split key a third process could allocate n leaf nodes and a fourth process could relate the hi split key to the hash function to provide and control access to the n leaf nodes. While four processes are described it is to be appreciated that a greater and or lesser number of processes could be employed and that lightweight processes regular processes threads and other approaches could be employed.

In one example a method is implemented as processor executable instructions and or operations. Thus in one example a machine readable medium may store executable instructions that if executed by a machine e.g. processor may cause the machine to perform a method. The method may include detecting a leaf split condition for a leaf node in a b tree that is hi split enabled and also detecting that an insertion rate associated with the leaf node exceeds an insertion threshold. The method may also include identifying a hi split key in the leaf node and moving the hi split key from the leaf node to a parent of the leaf node. The method may also include selectively allocating a set of leaf nodes where the size of the set depends on the insertion rate. The method may also include relating the hi split key to a hash function that provides and controls key based access to the n leaf nodes which makes the n leafs nodes operate as a single logical leaf node. While the above method is described being stored on a machine readable medium it is to be appreciated that other example methods described herein may also be stored on a machine readable medium.

Method includes at detecting that an insertion rate associated with the leaf node exceeds an insertion threshold. The insertion threshold may be associated with a user configurable parameter that describes a condition a user wishes to address and or prevent. For example a user may decide that an insertion rate above a certain number of insertions per second indicates a hot spot that needs to be cooled. Therefore in different examples the insertion threshold may be based on insertions per period of time on a ratio of insertions to the leaf node versus insertions to the b tree over a period of time and so on. While insertions per second and a ratio of node insertions to overall insertions are described it is to be appreciated that the insertion threshold may be based on other factors.

Under a first set of conditions a threshold may be exceeded by a first amount while under a second set of conditions a threshold may be exceeded by a second e.g. greater amount. Thus method includes at determining a value for n based on the amount e.g. degree by which the insertion rate associated with the leaf node exceeds the insertion threshold. For example if the insertion rate is barely exceeded n may be set to a smaller number e.g. three but if the insertion rate is significantly exceeded n may be set to a larger number e.g. ten . While three and ten are described it is to be appreciated that other values for n may be determined based on the degree to which an insertion threshold is exceeded. Additionally in one example n may have a binary quality. If the insertion threshold is exceeded n may be a first number e.g. ten while if the insertion threshold is not exceed n may be a second number e.g. one .

System may also include an insert logic to determine an insertion level for the leaf node. The insertion level may be for example a count of insertions per period of time a relative rate that describes how busy the leaf node is compared to other leaf nodes and or the rest of the b tree and so on. In one example the insertion level may be compared to a user defined and or user configurable parameter to determine whether to perform a hi split and or an n way split.

System may also include an allocation logic to selectively allocate a set of leaf nodes based on the divide condition and the insertion level. In one example the allocation logic may determine a split type and or a number of members for the set of leaf nodes based on the insertion level. For example if the insertion level is below a threshold value then a normal split may be performed. The normal split may not be a hi split and may result in only a single new leaf node being allocated. However if the insertion level is above a threshold value then a hi split may be performed and a plurality of new leaf nodes may be allocated. By way of illustration when a threshold is exceeded five new leaf nodes may be allocated.

System may also include a partition logic to move a partition key from the leaf node to a parent of the leaf node. The partition logic may also associate the partition key with the set of leaf nodes. Associating the partition key with the set of leaf nodes may include for example logically linking a hash function to the partition key so that accesses e.g. lookups insertions to the set of leaf nodes are distributed and controlled by the hash function.

System may also include a fuzzy index logic to provide key based addressing to an entry in the set of leaf nodes. In one example the key based addressing distributes addresses between members of the set of leaf nodes based on a hashing function applied to a key. By way of illustration a key associated with a key rowid pair may be processed by a hash function to produce a hash value. The hash value may identify one of the set of leaf nodes into which the key rowid pair is to be inserted. In this way sequential keys which are likely in certain OLTP applications may be distributed between the set of leaf nodes and thus alleviate for example a rightmost growing condition.

Generally describing an example configuration of computer processor may be a variety of various processors including dual microprocessor and other multi processor architectures. Memory may include volatile memory and or non volatile memory. Non volatile memory may include for example ROM Read Only Memory PROM Programmable ROM EPROM Erasable PROM and EEPROM Electrically Erasable PROM . Volatile memory may include for example RAM Random Access Memory synchronous RAM SRAM dynamic RAM DRAM synchronous DRAM SDRAM double data rate SDRAM DDR SDRAM and direct RAM bus RAM DRRAM .

Disk may be operably connected to the computer via for example an input output interface e.g. card device and an input output port . Disk may be for example a magnetic disk drive a solid state disk drive a floppy disk drive a tape drive a Zip drive a flash memory card and or a memory stick. Furthermore disk may be a CD ROM Compact Disk ROM a CD recordable drive CD R drive a CD rewriteable drive CD RW drive and or a digital video ROM drive DVD ROM . Memory can store processes and or data for example. Disk and or memory can store an operating system that controls and allocates resources for computer .

Bus may be a single internal bus interconnect architecture and or other bus or mesh architectures. While a single bus is illustrated it is to be appreciated that computer may communicate with various devices logics and peripherals using other busses e.g. PCIE PCI Express USB Universal Serial Bus Ethernet . Bus can be types including for example a memory bus a memory controller a peripheral bus an external bus a crossbar switch and or a local bus. The local bus may be for example an industrial standard architecture ISA bus a microchannel architecture MSA bus an extended ISA EISA bus a peripheral component interconnect PCI bus a USB bus and a small computer systems interface SCSI bus.

Computer may interact with input output devices via i o interfaces and input output ports . Input output devices may be for example a keyboard a microphone a pointing and selection device cameras video cards displays disk network devices and so on. Input output ports may include for example serial ports parallel ports and USB ports.

Computer can operate in a network environment and thus may be connected to network devices via i o interfaces and or i o ports . Through the network devices computer may interact with a network. Through the network computer may be logically connected to remote computers. Networks with which computer may interact include but are not limited to a local area network LAN a wide area network WAN and other networks. In different examples network devices may connect to LAN technologies including for example fiber distributed data interface FDDI copper distributed data interface CDDI Ethernet IEEE 802.3 token ring IEEE 802.5 wireless computer communication IEEE 802.11 and Bluetooth IEEE 802.15.1 . Similarly network devices may connect to WAN technologies including for example point to point links circuit switching networks e.g. integrated services digital networks ISDN packet switching networks and digital subscriber lines DSL .

Interfaces in API can include but are not limited to a first interface that communicates an insertion threshold data a second interface that communicates an index micro partition data and a third interface that communicates a hash function data. The insertion threshold data may describe for example conditions that control whether a two way split or an n way split is performed. The micro partition data may provide for example information concerning block addresses for blocks allocated in an n way split. The hash function data may describe for example a hash function entry point hash function parameters and so on.

In one example data structures and or methods may be stored on a machine readable medium and or in a data store. Thus in one example a machine readable medium may store an object. In computer science an object is a single logical entity that includes a set of data structures and a set of methods for interacting with the set of data structures. The data structures may expose public data and may hide private data.

To the extent that the term includes or including is employed in the detailed description or the claims it is intended to be inclusive in a manner similar to the term comprising as that term is interpreted when employed as a transitional word in a claim. Furthermore to the extent that the term or is employed in the detailed description or claims e.g. A or B it is intended to mean A or B or both . The term and or is used in the same manner meaning A or B or both . When the applicants intend to indicate only A or B but not both then the term only A or B but not both will be employed. Thus use of the term or herein is the inclusive and not the exclusive use. See Bryan A. Garner A Dictionary of Modern Legal Usage 624 2d. Ed. 1995 .

To the extent that the phrase one or more of A B and C is employed herein e.g. a data store configured to store one or more of A B and C it is intended to convey the set of possibilities A B C AB AC BC and or ABC e.g. the data store may store only A only B only C A B A C B C and or A B C . It is not intended to require one of A one of B and one of C. When the applicants intend to indicate at least one of A at least one of B and at least one of C then the phrasing at least one of A at least one of B and at least one of C will be employed.

