---

title: System and method for automated on demand replication setup
abstract: A method of automatic replication setup is disclosed. The method allows the business application user to focus on the requirements posed by the business application and to abstract from the low level infrastructure details. Information specific to the databases and infrastructure design decisions can be provided by a subject matter expert. By automating the requirements analysis and infrastructure setup process, the time to deliver can be decreased significantly and the potential for errors reduced.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07814459&OS=07814459&RS=07814459
owner: International Business Machines Corporation
number: 07814459
owner_city: Armonk
owner_country: US
publication_date: 20060710
---
IBM is a registered trademark of International Business Machines Corporation Armonk N.Y. U.S.A. Other names used herein may be registered trademarks trademarks or product names of International Business Machines Corporation or other companies.

This invention relates to data replication and particularly to automated data replication setup for movement of business data from a source data system to a target data system.

Before our invention changes in business applications have required significant amounts of support and intervention from database administrators for replication of data within a business application system or from one business application system to another.

A business application generates or processes vast amounts of data that is located in one or more databases. Regardless of whether the application is an in house project an off the shelf application or a vendor provided application there is usually a need to move or distribute some or all of the data to one or more databases to allow for further processing.

The most common reasons for this need may include separation of operational systems from analytical systems performance multiple analytical systems that address varying business questions such as sales and trend analyses and delivery of information into other systems for various purposes such as reporting.

Some business applications may provide their own data movement tools if the underlying data structure is rather static and simple. However business applications can be dynamic by nature. They can provide the business user with the ability to create business level objects modify business level objects and define relationships between the business level objects. Business applications may also allow users to create high volumes of business level objects and business level relationships as well. These relationships among and between business level objects may change over time. Accordingly there is often a need to utilize external data movement tools such as in house scripting and custom code in house frameworks specific to in house structure and policies off the shelf extract transform and load ETL tools and ETL and replication tools provided with relational database management systems RDBMS .

Internally the business level objects and relationships are mapped to persistent storage structures such as tables and columns as managed and used by RDBMSs for example. Changes to the underlying storage structure can have a direct impact on the data movement configuration. Currently replication of a data structure that has undergone structural changes may require significant attention and database administration skills beyond those of the typical business user.

The shortcomings of the prior art are overcome and additional advantages are provided through the provision of an automatic method to setup the replication of business application data containing changes in the data structure without the need for highly skilled database administration.

System and computer program products corresponding to the above summarized methods are also described and claimed herein.

Additional features and advantages are realized through the techniques of the present invention. Other embodiments and aspects of the invention are described in detail herein and are considered a part of the claimed invention. For a better understanding of the invention with advantages and features refer to the description and to the drawings.

As a result of the summarized invention technically we have achieved a solution that automates the process of analyzing and implementing the data movement requirements of a business application thereby minimizing the amount of manual tasks required to define and monitor the replication environment by automatically determining the necessary deployment options. This minimization is extremely important to the value of this invention. This value is evident when one considers the amount of manual work that is involved in setting up data movement for a single table and then additionally setting up replication for 10s or 100s of tables per application or even 10s or 100s of applications. This invention provides business users with the ability to make changes at the business level and have those changes reflected in the underlying data movement replication infrastructure with a reduction in the need for intervention or assistance from a database administrator. This further allows the invention to serve as a data movement and transformation provider for any business application that can provide a logical model description of the business data relationships and mappings to the underlying storage structure. The solution provides a simplified and seamless data movement service that manages the specific data movement and transformation infrastructure details. For example the solution takes care of writing deployment code writing code to start and stop the data movement and writing code to handle change management. The solution also enables an organization to take advantage of improvements in technology such as new or improved data movement technologies for existing applications and use these improvements on previously deployed systems. Finally the solution provides a customization mechanism to enable an advanced database administrator to make adjustments to the out of the box solution.

The detailed description explains the preferred embodiments of the invention together with advantages and features by way of example with reference to the drawings.

From a business application point of view it is desirable that a data movement tool support the following automatic creation of the underlying infrastructure for data movement based on business level objects and relationships deployment of the underlying database infrastructure adaptation to various topologies and technologies such as RDBMS differences operating system differences data movement technology differences and various source to target configurations adjustment to the data movement tool infrastructure to support new and changed business concepts or measures and error recovery.

Ideally a business application user or administrator is able to inspect the status such as stopped running or halted for example and modify for example start stop pause the data movement tool using a familiar business level perspective instead of the internal data movement perspective which usually requires significant database administration skills. To support this administration scenario the data movement tool may provide metadata about the underlying infrastructure to be used by the business application interface to self manage the complexity and details of the utilized data movement technology.

When setting up replication between data sources one or more databases and data targets the same or other databases business application administrators are exposed to an enormous amount of technical detail. These details include but are not limited to the available replication technology concepts and how to use the tools that are provided by those technologies. Without the proper skills a business application administrator has to defer most tasks to a database administrator or some other highly technical individual. Aside from the aspect of exposing a business application user to too many technical details the setup task itself is can be time consuming and error prone. Most of today s tools being used to setup replication require the same manual steps to be repeated for every table requiring replication increasing the potential for errors. Taking into consideration how quickly the business application needs and available technologies can change further underlines the advantage an automated data movement and transformation infrastructure setup can deliver.

The present invention addresses the shortcomings listed above allowing the business application user to focus on the requirements posed by the business application and abstracting from the low level infrastructure details. Information specific to the databases and infrastructure design decisions like site specific guidelines that are based on best practices can be provided by a subject matter expert. By automating the requirements analysis and infrastructure setup process the time to deliver can be decreased significantly and the potential for errors reduced. The method of automatic replication setup provided by the invention shall herein be referred to as a Replication Manager.

Referring now to a general flow chart to illustrate the method by which the invention is practiced inputs required and outputs generated in response to the method are depicted. A processing machine the processing machine having a program storage device input devices and an output device is also depicted.

The general flow of the method begins by loading inputs . Following the loading of the inputs the inputs are analyzed in order to determine the structure of an optimal enriched model alternatively referred to as an enriched business application model . Subsequent to the analyzing of the inputs the method continues with building the enriched business application model and identifying tasks to build a task model . Continuing the method maps the task model to change artifacts and deployment artifacts that create or alter the data movement infrastructure. Saving the enriched business application model as a historical enriched business application model enables the method to process it as input should another version of model need to be processed. Finally the artifacts are deployed and the historical enriched business application model associated with those artifacts marked as deployed.

Replication Manager s inputs comprise of the business application model to be processed a system configuration description user preferences code template libraries and task to sub task mappings . Optionally an enriched historical application model is used as well if the same business application model has been processed and the infrastructure been updated using the previously created change artifacts . The historical enriched business application models can either be retrieved from a repository or reverse engineered from an existing data movement infrastructure setup. Replication Manager s output will differ depending on whether an enriched business application model has been previously deployed or not.

Input the business application model described for example using a markup language defines the business level information via business application object definitions the requirements for data movement and optionally transformation the relationships between the business information and the underlying database storage structures and the relationships between the database structures. The data movement and transformation information is not specific to the underlying technologies being used allowing the user to abstract from the highly technical details. Essentially business level information is mapped to groups of data sources such as tables and relationships between those sources and targets. These relationships between source and target database structures define the requirements for the data movement transformation services that will be provided by the underlying infrastructure. The relationships between source and target business level objects can be expressed as a simple association a specific transformation which can be passed straight through to a specific transformation technology or as complicated as a high level language which can be translated or converted to a determined transformation technology. Using the latter further enhances the logical separation of the business application specification and technology implementation details.

The information stored in the business application model does not contain any details about the underlying software such as the type of operating system or the relational database system used to store the data. Therefore further abstraction from the data source specification is allowed. Note that this additional layer of abstraction is optional which implies that the system configuration information could also be stored in the business application model. Input the system configuration description defines the data sources and data target configuration details such as operating system attributes RDBMS type and version and available data movement technologies supporting source and target database combinations. Only technologies that support the specified system configuration description and meet the user preferences are taken into consideration by Replication Manager when steps and are executed.

Given a system configuration description multiple data movement technologies may qualify for use by Replication Manager. User preferences allow the experienced administrator to customize the behavior of the analysis steps and to override any defaults. For example given the choice of two technologies Replication Manager might always choose one over the other given the current constraints. By specifying discriminating preferences an administrator can alter that behavior. If supported by the template libraries user preferences can also allow for the customization of the generated change artifacts without having to modify the libraries containing the code generation templates or having to alter the generated change artifacts manually during post processing. By supporting customization using pass through or variable type parameters a template can easily be adjusted to meet guidelines set by a database administrator for example when it comes to assigning names to database objects or tables to table spaces.

Changes in the business application model also result in changes in the enriched business application model . Should any of those changes require an update of the data movement transformation infrastructure for this business application model certain tasks have to be processed and the appropriate change artifacts to be created. Input the task mappings essentially links different types of change in the model to the blueprints of the change artifacts . The task mappings can be customized to accommodate the changing needs resulting from the emerging of new technologies or introduction of best practices.

Input the code template libraries serves as container for a set of code templates. A library contains parameterized code templates that are uniquely identified by template keys. Template keys will contain attributes including at least one of sub task attributes source operating system attributes target operating system attributes and database management system source and target type attributes. Note however that template keys do not have to be necessarily unique across libraries. A code template contains one or more statements in a language that is interpreted by an API provided by the target technology. For example a code template to create a temporary table in a database could contain one or more SQL statements. An advanced administrator can add new code templates or alter existing code templates to customize the predefined libraries if the configuration options available through the user preferences do not provide the level of customization necessary.

Input the historical enriched business application model is the output of a previous invocation of Replication Manager which used an earlier version of the same business application model as the input. There are three general processing scenarios that Replication Manager supports. Depending on the scenario input may or may not be used. First a business application model is processed for the first time. No historical enriched business application model exists yet implying that no data movement transformation infrastructure for this model has been setup before. Input is not used. Second another version of the same business application model has been processed before and the data movement transformation infrastructure has been set up. Input is used. Third another version of the same business application model has been processed before and the data movement transformation infrastructure has been set up. The user s preferences disable change management support implying that a completely new data movement transformation infrastructure has to be set up.

Based on above described inputs and Replication Manager determines in steps and which data movement technologies should be used to move data from the source to the target and whether any data transformations are necessary. Once one or more data movement technologies have been selected the enriched business application model is built .

First the business application model specification marked by the dotted line box describing the business object to data structure mappings relationships and constraints. The specification is independent from the business application system and expressed using a markup language such as XML. For example such a specification may describe in which tables and columns business level object X is stored in the source and the target database and which relationships and constraints are defined on those tables and columns. Based on this information Replication Manager can determine which data movement transformations need to be performed and how to perform them using the available technologies.

Second the data movement transformation infrastructure object specification which describes the technologies being used and how these technologies are configured. For example Replication Manager might determine from the business application model specification that data from table A in database DB A needs to be moved to table B in database DB B. Based on a set of rules a particular replication technology such as DB2 UDB SQL replication is selected and the appropriate model objects representing the SQL replication components Capture Apply created. In their entirety these model objects contain all information capture and apply name subscription set name table space assignments etc necessary to configure those components. This information is associated with information from the business application model and will later be used to generate the change artifacts that actually modify the existing system.

Third the Replication Manager metadata which is required for the enriched business application model analysis and processing steps.

Some information from the enriched business application model is made available through a metadata application programming interface API . A client application like the business application administrative user interface can access and utilize this metadata API to provide the user with the capability to administer monitor the data movement infrastructure using the familiar business object perspective instead of the underlying proprietary data movement perspective.

The enriched business application model contains all information necessary to setup alter the data movement transformation infrastructure but it does not include the actual change artifacts which will perform that work. These artifacts are created based on the other output of the build process the task model .

During the model build phase the business application model specification is compared with the latest processed and deployed enriched business application model version of the same model if this model has been processed previously . If this model has not been processed previously or has not been deployed previously input is compared against an empty model causing each model object to be treated like a new addition. Any model differences such as additions modifications or deletions of database objects are identified and recorded in the current enriched business application model and if necessary the appropriate tasks created.

Referring now to a visual representation depicts differences C through Cn between business application model M2 version and version . Once detected the difference is classified either as significant potentially requiring an infrastructure change or insignificant no infrastructure change necessary . The significant difference results in the creation of one or more tasks . In the example given all differences were considered significant and thus the following tasks created Task and Task for difference C Task through Task for difference C and so forth. Examples of significant model differences are the introduction of new tables or the modification of existing tables.

The task represents a high level unit of work such as registering a table for replication and does not contain the information of how this unit of work is implemented. However it does provide access to information necessary for the unit of work implementation. displays two tasks Task and Task each one accepting inputs. Depending on its definition a task may require zero to n different inputs . Each input is associated with one of the following references to the enriched business application model references to the historical enriched business application model and other runtime information that could be of relevance during artifact generation such as a customization setting that allows the user to affect directly the generated change artifact without having to physically alter a template in code libraries .

The provided model references allow for the navigation within the models for the purpose of retrieval of pre and post change model specification values required to process the code templates.

In the example shown Task accepts n inputs with Input through Input n 2 being associated with the historical enriched business application Input n 1 being associated with the enriched business application and Input n being associated with some other input reference. Task has m inputs assigned with Input through Input m 1 referring to the enriched business application model and Input m some other runtime input.

These references allow for the navigation within the models for the purpose of retrieval of pre and post change model specification values required to populate the code templates. Optionally a task may also contain references to user preferences allowing for template customization without having to physically alter any code template libraries .

Tasks that have been created by the enriched business application model build process are added to task model in the order they were created. Once the model build process has completed the generated task model is processed to appropriately reflect enriched business application model changes in the business application data movement transformation infrastructure. The task model can contain zero no changes where found in this version of the business application model to n tasks with no restriction as to how many times the task occurs. The Replication Manager task model is specific to exactly one enriched business application model version and exactly one historical enriched business application model if one existed and only exists during the execution of the model build phase and the artifact generation phase .

Referring now to a simple task model TM comprising tasks T T T T T T and T is depicted. In the simple task model implementation tasks are processed in the order they were added to the model . Therefore the tasks in TM will be processed in the following order T T T T T T T. Note however that tasks are not necessarily executed in this order if tasks have priorities assigned. Doing so allows for the decoupling of the model build process execution order from the change artifact execution order which might be necessary if non trivial dependencies between tasks exist. If tasks T through T had higher priorities assigned than tasks T and T the task model would be processed in the following order T T T T T T T assuming that priority T priority T . . . priority T .

Tasks are associated with model changes and cannot be modified directly. To allow for extension and customization a task T is therefore mapped to zero to n sub tasks STn using task mapping . A task to sub task mapping defines which sub tasks need to be processed when a task is processed the order in which the sub tasks are to be processed and where the sub tasks output which is a change artifact is to be deployed on the source or target system.

Replication Manager externalizes these mappings which can be expressed using a markup language and enables the advanced administrator to alter the out of the box behavior of the invention by adding modifying or removing task to sub task mappings.

Referring now to visual mappings for Task and Task x are depicted. Task mapping maps Task to sub tasks ST ST . . . through STz and Task x to ST and ST . During processing each sub task inherits the inputs that were assigned to its parent task. In the example shown task is mapped to z sub tasks ST ST ST . . . STz each one having access to inputs Input . . . Input n that were assigned to parent task . Task x maps to two sub tasks ST and ST that inherit the parent inputs Input . . . Input m .

Whereas the generated task abstracts from the data movement transformation technology being used the sub task is specific and will resolve to exactly one code template which has been registered with input the code template libraries . Replication Manager s code template libraries are managed internally in a hierarchical form ordered from lowest to highest level as shown in . The base library containing a set of out of the box templates represents the top level and custom libraries can be added by means of plug and play as a child of the base library or as the child of another custom library. A code template contains one or more statements in a language that is interpreted by an application program interface API provided by the target technology. For example the code template to create a temporary table in a database could contain one or more structured query language SQL statements.

Referring now to the relationships between tasks sub tasks code templates and change artifacts are depicted. When task model is processed in task mappings are loaded and each task mapped to its sub tasks . For each sub task a template key is calculated factoring in the sub task identifier and the system configuration description . Using this key the corresponding template is loaded from one of the code template libraries. The code template libraries are searched in ascending order locating the lowest level code template library containing the derived template key starting with the custom libraries. Doing so ensures that the out of the box templates are only used if no matching template could be located in any user or third party provided library.

A code template contains commands in a language that is interpreted by the utilities used to setup the data movement transformation infrastructure. Typical examples for such commands include SQL scripts which are statements that create alter or drop database objects or manipulate database object content insert update delete Proprietary language commands or scripts as defined by the data movement applications such as ASNCLP for DB2 SQL Replication and Operating system scripts or shell commands.

Place holders in the template are replaced with calculated or retrieved values originating from the enriched business application model and optionally if it exists the previously processed and deployed historical enriched business application model . To access those values templates take advantage of navigation references the invoking task provides. In addition templates can access any public information like user preferences that has been associated with the task. The populated code template represents the change artifact and is stored for later execution.

A special set of templates in library defines the deployment framework necessary to execute the generated change artifacts and to provide logging and error recovery services.

Successful completion of change artifact generation step causes the enriched business application model to be stored in step as historical enriched application model . Any failures during execution of steps or will cause all outputs to be discarded to return the system to a consistent state and processing is terminated.

Unless all deployment framework artifacts contained in have been executed successfully the information stored in the enriched business application model is not consistent with the data movement infrastructure. To prevent this error scenario a newly created enriched business application model is marked as not deployed by default. After successful deployment of all deployment framework artifacts the infrastructure is appropriately reflected by the enriched model and the appropriate metadata information updated.

In an embodiment the Replication Manager can be used without any adjustments. However an administrator can directly define the effect that a specific business model change will have on the data movement artifacts being generated by changing the sub task mappings and templates stored within the library . Additionally the Replication Manager may include a utility or wizard that interactively walks the administrator through the process of adding changing or removing task to sub task mappings as well the process of adding changing or removing code templates in to be used when generating artifacts in .

Referring now to in conjunction with more detailed examples of flow charts of the general flow chart is depicted. In an embodiment the method will begin with receiving a plurality of inputs including a first business application model containing business application objects such as a specification definition for any required data movement and optionally transformation a list of historical enriched business application models and their deployment status e.g. deployed not deployed a system configuration description defining the source and target data source types and configurations user preferences identifying key settings that will affect the subsequent Replication Manager behavior code template libraries and task to subtask mappings .

The method continues with searching for the previously processed and deployed historical enriched business application model based upon the first business application model . Following decision block is loading of the most recently previously deployed historical enriched business application model or creating the first instance of the historical enriched business application model if no previously deployed enriched business application model associated with the current business application model was found. Evaluation of decision block is also affected by user preference specifying whether all existing deployments should be ignored for the purpose of creating a completely new data movement transformation infrastructure.

Next identifying suitable data movement or transformation technologies based upon technology previously selected in historical enriched business application model system configuration description defining the source and target database configurations and which data movement technologies are available and user preferences which may include exclude or rank available technologies listed in the system configuration description . Selection of data movement technologies has a direct impact on the enriched business application core model to be created in step and the subsequent analysis and population process.

Continuing with comparison of the business application model and the historical or previously deployed enriched business application model which was loaded in or created in the method determines and identifies objects within the first business application model that have been added modified or removed relative to objects contained within the previously processed and deployed historical enriched business application model. Proceeding further the method populates the enriched business application model by adding objects to the enriched business application model or modifying or removing existing model objects to reflect changes between the first business application model and the previously processed and deployed historical enriched business application model and creates and generating a task model comprising of tasks for all significant model object changes each task identifying a potential change in the data movement transformation infrastructure in response to the new business application requirements to trigger the generation of change management artifacts in the next step.

Evaluating decision box the method determines whether task model contains at least one task indicating that changes in the current data movement transformation infrastructure are necessary. If necessary assigning inputs to each task where inputs are references to the newly built enriched business application model references to the previously deployed historical enriched business application model and other information made available by Replication Manager. In the absence of any tasks the method saves the populated enriched business application model and stops execution .

Having all model changes identified the method resolves and loads the customizable task to sub task mappings . Proceeding further the method identifies for each task in task model the sub tasks that need to be executed to generate the change artifacts that alter the data movement transformation infrastructure. Factoring in the system configuration description and the sub task identifiers the method calculates lookup keys and derives a template key for each resolved sub task based on the sub tasks information and identifying the code template for each derived template key from the hierarchical code libraries matches those look up keys against the template keys registered in code template library . The code templates are loaded and subsequently populated with data from the enriched business application model data from the historical enriched business application model and other relevant information made available by the sub tasks. Populated code templates are stored as change artifacts . Also generated for each change artifact is a deployment artifact entry in a deployment artifact . These deployment artifacts are also known as master scripts. Each change artifact is associated with a deployment type using this deployment type along with error specifications associated with the sub task a lookup in the code template library is performed and the appropriate code template is populated and added to the deployment artifact which is responsible for deploying the change artifacts recognizing error conditions and taking appropriate steps for error recovery if needed.

In an embodiment Replication Manager can optionally consolidate the generated change and deployment artifacts into for subsequent deployment to set up the data movement transformation infrastructure between sources and targets into packages that can be created using any available packaging or compression utility such as TAR GZIP ZIP or JAR. Automatic artifact packaging provides two key benefits First if Replication Manager doesn t have connectivity to the source or target systems for which the change artifacts were created an administrator can manually transfer the packages to those systems extract them and perform deployment locally. Second the originally created artifacts for each business application model version are preserved and can easily be used as backups. Such a backup can for example be used to clone a system like it is done in development test and production systems.

Checking the completion status for all output is discarded and processing terminated if any errors occurred.

Upon successful artifact generation the enriched business application model is saved as the latest version of the historical enriched business application for business application model . The next invocation of Replication Manager will retrieve this version as input if the same business application model is processed again.

Change artifact deployment is performed either manually or automatically depending on the user preferences and whether deployment prerequisites are met. Upon successful deployment the enriched historical business application is marked as deployed indicating that it can be used as a baseline the next time a new version of the same business application model is processed and the method is completed.

Replication Manager allows business applications to abstract from the underlying proprietary data movement transformation infrastructure should the need arise to move data from a source to a target even if a heterogeneous data source target topology is used. In its simplest embodiment only very basic information has to be specified the source and target data structures as well as the relationships between them. In itself Replication Manager is not specific to the type of technology being used. The Replication Manager logic can be customized or extended by advanced administrators or data movement professionals by adding or altering task mappings and auxiliary code template libraries. By leveraging this technology new architectures technologies best practices and policy decisions can be utilized. Support for multiple source target combinations is included meaning that data can be moved from source A to target B and from target B to target C as long as the business application model specification contains the appropriate mapping information.

The program storage device is configured to embody a program or instructions executable by the processing machine to perform the method illustrated by the flow charts . While an embodiment has been depicted with data stored upon the data storage device local to the processing machine it will be appreciated that the scope of the invention is not so limited and that the invention will also apply to alternate program storage devices that are readable by the processing machine such as a storage device connected to the processing unit via a network for example.

The capabilities of the present invention can be implemented in software firmware hardware or some combination thereof.

As one example one or more aspects of the present invention can be included in an article of manufacture e.g. one or more computer program products having for instance computer usable media. The media has embodied therein for instance computer readable program code means for providing and facilitating the capabilities of the present invention. The article of manufacture can be included as a part of a computer system or sold separately.

Additionally at least one program storage device readable by a machine tangibly embodying at least one program of instructions executable by the machine to perform the capabilities of the present invention can be provided.

The flow diagrams depicted herein are just examples. There may be many variations to these diagrams or the steps or operations described therein without departing from the spirit of the invention. For instance the steps may be performed in a differing order or steps may be added deleted or modified. All of these variations are considered a part of the claimed invention.

While the preferred embodiment to the invention has been described it will be understood that those skilled in the art both now and in the future may make various improvements and enhancements which fall within the scope of the claims which follow. These claims should be construed to maintain the proper protection for the invention first described.

