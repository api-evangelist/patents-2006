---

title: System and method for assigning symbolic names to data streams
abstract: Various embodiments of methods and systems for assigning symbolic names to data streams within a file are disclosed. In one embodiment, a method involves receiving a request to access a file that includes multiple data streams and then selecting one of the data streams to be accessed, based on the symbolic name. In response to identifying that one of the data streams is associated with the symbolic name, that data stream is accessed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07953879&OS=07953879&RS=07953879
owner: Symantec Operating Corporation
number: 07953879
owner_city: Mountain View
owner_country: US
publication_date: 20060131
---
This invention relates to data processing systems and more particularly to managing multiple data streams within a file.

User data is organized into files. Various different types of files e.g. word processing files text files image files audio and or video files multimedia files and the like are used by different applications. Each file regardless of type has a name which is a string of alphanumeric characters. By specifying that name e.g. by selecting that file name from an open menu within an application the user can access the information that is stored within the file.

Each file can include multiple data streams. Each data stream can include some sort of data e.g. text images audio or video data and the like . Typically an application that accesses a particular type of file will open the unnamed data stream when opening files. For example a word processing application will open the unnamed data stream which includes text and formatting entered by a user when opening a word processing file. Other named data streams can store other information. For example some word processing applications use a separate data stream to store information identifying file characteristics e.g. author amount of editing time creation time file attributes and the like of a file. In general data streams can be used to store any type of information and this information need not be the same as the type of information stored by the default data stream.

Data streams can be used to store different versions of a file. For example an application such as a word processing application or a backup application can periodically create a point in time copy of user data within a file as a new data stream within the file itself. As another example a user could store several different versions of the same data as different data streams within the same file.

As the use of data streams becomes more commonplace the traditional system of opening the unnamed data stream by default may become somewhat limiting. As an example when each data stream stores a complete version of the user data stored in the file it will be desirable to open a data stream other than the unnamed data stream by default. For example it may be desirable to instead open the most recently created or edited data stream by default. Thus new techniques for managing data streams are desired.

Various embodiments of methods and systems for assigning symbolic names to data streams within a file are disclosed. In one embodiment a method involves receiving a request to access a file that includes multiple data streams and then selecting one of the data streams to access based on a symbolic name. In response to identifying that one of the data streams is associated with the symbolic name that data stream is accessed.

The foregoing is a summary and thus contains by necessity simplifications generalizations and omissions of detail consequently those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting. Other aspects inventive features and advantages of the present invention as defined solely by the claims will become apparent in the non limiting detailed description set forth below.

While the invention is susceptible to various modifications and alternative forms specific embodiments of the invention are provided as examples in the drawings and detailed description. It should be understood that the drawings and detailed description are not intended to limit the invention to the particular form disclosed. Instead the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the invention as defined by the appended claims.

Volume can include one or more physical storage devices e.g. in one embodiment volume is implemented on a storage array that includes several independent hard drives . Application can access e.g. create delete read and write files stored on volume .

Computing device is configured to execute software implementing various applications e.g. application file system and the like . In such embodiments computing device can include a workstation personal computer server Personal Digital Assistant PDA cell phone storage network switch storage device storage array controller or any other device configured to execute software implementing such applications. Alternatively computing device can be implemented from hardware e.g. logic devices such as programmable logic devices PLDs field programmable gate arrays FPGAs and the like configured to perform the functions of such applications or from a combination of hardware and software implementing the functionality of the applications.

Application is an application that accesses user data stored in files . It is noted that although only a single application is shown in multiple applications may execute on computing device and access files . Examples of such applications include word processing applications database applications graphics and or video editing or and or display applications audio processing and or display applications backup applications web server applications and the like.

File system organizes data into files and or directories a directory is a special type of file . The particular set of one or more directories and or files that file system organizes can also be referred to as a file system. File system generates and uses file metadata when organizing and accessing the information that makes up files . It is noted that a file system need not include any user files e.g. when the file system is created the file system may include only a single file which defines the root directory of the file system . In one embodiment file system is VERITAS File System available from Symantec Corporation of Cupertino Calif. . It is noted that a file system is itself an application.

File system includes a symbolic data stream name module . Symbolic data stream name module is configured to create delete and or modify symbolic names e.g. in response to requests received from an application .

Each symbolic name is as a tag or identifier that can be used to identify a data stream. When a symbolic name is created symbolic data stream name module generates metadata e.g. part of metadata corresponding to the symbolic name. A user can specify the value of the symbolic name e.g. a string of alphanumeric characters . Each symbolic name created via symbolic data stream name module is associated with a data stream within a file. Accordingly the metadata will identify both the symbolic name and the data stream associated with that symbolic name. If the symbolic name is deleted symbolic data stream name module deletes the metadata that describes the deleted symbolic name. A user can modify a symbolic name via symbolic data stream name module in order to change the value of the symbolic name and or to change the data stream associated with that symbolic name.

File metadata includes symbolic names N and pointer N . Each pointer is associated with a respective symbolic name e.g. pointer is associated with symbolic name pointer is associated with symbolic name and pointer N is associated with symbolic name N . It is noted that the number of symbolic names and pointers is the same i.e. there is one pointer for each symbolic name but the number of data streams and symbolic names can differ e.g. there can be more symbolic names than data streams .

Each pointer N stores information identifying either another symbolic name or a non symbolic name. When an application opens or otherwise attempts to access e.g. to close a data stream identified by a symbolic name the file system will use the symbolic name to select the pointer associated with that symbolic name. The application can then open the data stream identified by the associated pointer. If the pointer specifies a non symbolic data stream name the application will open that data stream. If the pointer specifies another symbolic name the file system will look up that symbolic name to find the associated pointer. This process can be repeated until a pointer identifying a non symbolic name is located. The non symbolic name can then be returned to the application.

Whenever an application such as application of or user attempts to access a data stream the application or user can specify a non symbolic data stream name or a symbolic data stream name or no name at all. The appropriate data stream to access is then identified based on the name or symbolic name if any provided. The selected data stream is then processed displayed to a user or otherwise handled by the application. For example if a word processing application opens a particular data stream that particular data stream will be displayed in an editing window for a user to view and or edit.

When no data stream name is provided the file system can direct the application to open the unnamed data stream. Alternatively the file system can be configured to direct applications to open the data stream associated with a particular symbolic name e.g. the symbolic name default in situations in which no name is provided. When a non symbolic data stream name is specified the file system can direct the application to open the data stream identified by that non symbolic name.

When a symbolic name is specified or implied e.g. when no name is provided a symbolic name such as default can be implied the file system accesses the metadata associated with the file and searches for the pointer associated with the specified or implied symbolic name. If the pointer identifies a data stream the file system directs the application to open that data stream. If the pointer identifies another symbolic name the file system searches the metadata for the pointer associated with the other symbolic name. This process can repeat until a non symbolic name is obtained.

Data streams N can be used to store a variety of different information. For example in one embodiment data streams can be used to implement file level versioning. In such an embodiment each time that a new point in time copy of user data is created that point in time copy is stored as a new data stream within the file. For example initially the user data can be stored in the unnamed data stream. When the first point in time copy is created e.g. at noon on December 13 a new data stream named Dec13 can be created and the first point in time copy is stored in the Dec13 data stream within the file. The first point in time copy is a copy of the user data that was stored in the unnamed data stream at noon on December 13.

Each point in time copy can be a full copy of the user data or a copy of only the portions of the user data that have been modified since the last point in time copy was generated e.g. such incremental copies can be created using copy on write COW techniques . Each new version point in time copy of the user data is thus stored in a different data stream.

If an application wants to be able to open the most recent version of the user data without analyzing all of the data streams the application can create a symbolic name e.g. MostRecentVersion for the most recent data stream. Each time a new data stream is created the application can update the pointer associated with the symbolic name MostRecentVersion to identify the newly created data stream. Thus when the Dec13 is created the pointer associated with symbolic name MostRecentVersion can be updated to identify Dec13. 

Additionally if the file is restored to a previous version the restore can be effected by simply updating the pointer associated with the Default data stream to identify the data stream containing the restore version. For example if the file is restored to the version created at noon on Dec. 13 2005 the pointer associated with the Default data stream can be updated to identify Dec13. In this manner the default version of the file is restored to the version created on December 13 without the need to physically copy any data from one data stream to another.

In addition to a MostRecentVersion symbolic name other symbolic names such as Stable Reviewed Verified and the like can be created. If a data stream is reviewed verified locked from further editing or the like the pointer associated with the appropriate symbolic name can be updated to identify that data stream. It is noted that several different symbolic names can identify the same data stream.

In other embodiments one data stream e.g. data stream stores a movie file while other data streams e.g. data streams N can be used to store different audio tracks e.g. each in a different language . A user can specify a language preference e.g. French and based on that preference the application can update a pointer associated with a DefaultLanguage symbolic name to identify the data stream that stores the preferred language. If the user changes her language preference the DefaultLanguage pointer can be updated to point to the data stream that stores the appropriate audio track. Once the pointer associated with the DefaultLanguage symbolic name is updated based on the user preference any other application that is configured to use the DefaultLanguage symbolic name when accessing the audio track will automatically be redirected to the appropriate language for the user.

Similarly in some embodiments each data stream N can store a different translation of a document in order to provide multi lingual support. A user can specify a preferred language and a pointer associated with a Default symbolic name can be updated to point to the data stream that contains the user s preferred language. When the user reads the file the data stream containing the preferred language will be opened by default.

In still other embodiments one data stream e.g. an unnamed data stream can store user data while other data streams can be used to hold meta information about the user data e.g. one data stream can store relevant search keywords for the user data another can store appropriate digital signatures or checksums and still another can store file access statistics and the like . Depending upon the user s viewing preference one of these data streams can be identified by the pointer associated with the Default symbolic name. Additionally if multiple versions of a certain type of information e.g. user data statistics or the like are maintained different symbolic names e.g. current old recent and the like can be associated with the data streams storing different versions of that type of information.

In another embodiment one data stream can store the full content of a document e.g. a resume or article while another data stream stores an abstract. A user can specify a viewing preference for either full content or abstracts and the pointer associated with the Default symbolic name can be updated to identify the appropriate data stream.

In yet another embodiment each data stream can store a different view of the file e.g. publisher s view editor s view general public view and the like . Each user can be identified as a particular type of viewer e.g. a publisher an editor a member of the general public and the like . Based on the type of viewer accessing the file the pointer associated with the Default symbolic name can be updated to point to the appropriate data stream for that type of viewer.

A user or application can assign a non symbolic name to a data stream using conventional techniques. The file system provides an application programming interface API to symbolic data stream name module that allows users or applications to interact with symbolic data stream name module in order to create modify and delete symbolic names that are associated with data streams within files.

In the examples described above symbolic data stream names are strings which are maintained as part of file system metadata that are associated with pointers to symbolic or non symbolic data stream names. In alternative embodiments the symbolic data stream names can be implemented using symbolic link or shortcut mechanisms. For example a user can create a symbolic link that references a named data stream within a file e.g. the symbolic link can include a path name that identifies both the file and the named data stream . When the user opens the symbolic link the named data stream referenced by the symbolic link is opened. In this example the name of the symbolic link acts as the symbolic data stream name. As another example a user can create a shortcut e.g. represented by an icon on a desktop that references a named data stream within a file. When the user selects the icon e.g. by clicking or double clicking on the icon the named data stream referenced by the shortcut will be opened. The icon and or name of the shortcut acts as the symbolic data stream name in this example. In both of these examples the symbolic link or shortcut is a file identified by a name and or icon that stores information identifying a file as well as a named data stream within a file. In some embodiments such symbolic links and shortcuts can also identify other symbolic links and or other symbolic data stream names instead of directly identifying a file and or named data stream within the file.

As illustrated computing device includes one or more processors e.g. microprocessors PLDs Programmable Logic Devices or ASICs Application Specific Integrated Circuits configured to execute program instructions stored in memory . Memory can include various types of RAM Random Access Memory ROM Read Only Memory Flash memory MEMS Micro Electro Mechanical Systems memory and the like. Computing device also includes one or more interfaces . Processor memory and interface are coupled to send and receive data and control signals by a bus or other interconnect.

Interface s can include an interface to a storage device e.g. volume on which files and associated metadata e.g. including symbolic data stream names and pointers are stored. Interface s can also include an interface to a network for use in communicating other devices. Interface s can also include interfaces to various peripheral Input Output I O devices.

The program instructions and data implementing file system can be stored on various computer readable media such as memory . In some embodiments such software is stored on a computer readable medium such as a CD Compact Disc DVD Digital Versatile Disc hard disk optical disk tape device floppy disk and the like . In order be executed by processor the instructions and data implementing file system are loaded into memory from the other computer readable medium. The instructions and or data can also be transferred to computing device for storage in memory via a network such as the Internet or upon a carrier medium.

As shown symbolic data stream name module can include a variety of different modules such as symbolic name creation module symbolic name deletion module and symbolic name modification module . Symbolic name creation module is used to create new symbolic names. When a new symbolic name is created for a file symbolic name creation module stores the new symbolic name e.g. received from a user or an application as part of a request to create a new symbolic name as part of the metadata associated with the file. In some embodiments when creating a file file system will automatically cause symbolic name creation module to create a default symbolic name and update the pointer associated with the default symbolic name to point to the unnamed data stream.

When creating a new symbolic name symbolic name creation module also allocates storage for a pointer associated with the symbolic name in the file metadata. If the pointer value is provided as part of the request to create the symbolic name the value can be stored in the storage allocated for the pointer at creation time.

The pointer value for a symbolic name can include the name of a named data stream or another symbolic name. For example symbolic name Default can be associated with named data stream Dec14 by specifying Dec14 as the pointer value associated with Default. 

Similarly symbolic name StableVersion can be associated with symbolic name Current by specifying Current as the pointer value associated with StableVersion. Symbolic name Current is in turn associated with named data stream Dec15. If an application attempts to open StableVersion the file system will search the metadata associated with the file to locate the pointer value associated with symbolic name StableVersion. The file system will identify that the pointer value is another symbolic name Current and will accordingly access the metadata that is allocated to symbolic name Current. Since the pointer value associated with symbolic name Current identifies a named data stream Dec15 the file system will cause the application to open named data stream Dec15. Accordingly when the application attempts to open a data stream by specifying symbolic name StableVersion the application will open named data stream Dec15. 

When creating a new symbolic name symbolic name creation module will allocate metadata to store the value of the symbolic name as well as a pointer value. The value of the symbolic name is specified at creation time and stored as part of the metadata. The pointer value can be specified at creation time or at a later time. When a pointer value is specified the data stream identified by that pointer value becomes associated with the symbolic name. For example a data stream named Properties can be associated with the symbolic name EditInfo by storing the data stream name Properties as the pointer value associated with symbolic name EditInfo. 

In one embodiment symbolic name creation module can be used to create both named data streams and symbolic names for data streams. Symbolic name creation module can identify which action to perform create a new named data stream or create a new symbolic name based on the request. For example if a special flag or other parameter or if a particular value of such a flag or parameter is included in the request symbolic name creation module will create a new symbolic name otherwise symbolic name creation module will create a new named data stream. When a symbolic name is created storage for a pointer value is allocated as part of the metadata but no new data stream is allocated. In contrast when a named data stream is created a new data stream is allocated as part of the specified file but no storage for a pointer value is allocated as part of the metadata. Thus named data streams are actual data streams while symbolic names are simply tags or identifiers that can be associated with data streams.

Symbolic name deletion module is configured to delete symbolic names. When a request to delete a symbolic name is received e.g. from an application symbolic name deletion module deallocates the storage for the specified symbolic name and the pointer associated with the symbolic name. Thus symbolic name deletion module can delete the specified symbolic name and the associated pointer value from the metadata associated with the file.

In some embodiments symbolic name deletion module is also configured to delete named data streams. Symbolic name deletion module can differentiate between requests to delete named data streams and requests to delete symbolic names based on flags or other parameters supplied in the request for deletion. When a named data stream is deleted the actual data stream is deleted from the file e.g. by deallocating storage that previously stored that data stream . In contrast when a symbolic name is deleted only metadata used to store the symbolic name and associated pointer value is deleted. The data stream that was previously identified by that symbolic name is not deleted.

Symbolic name modification module is used to atomically modify an existing symbolic name. Symbolic name can be modified either to change the symbolic name or to change the value of the pointer associated with the symbolic name by specifying the symbolic name the new value of the symbolic name and or the new value of the pointer.

Symbolic name modification module can be used to change which data stream is associated with a particular symbolic name. For example an application can modify symbolic name Default by specifying a new pointer value Dec14. Prior to the modification the pointer value is Dec13. Dec13 and Dec14 are values that identify two different named data streams. Prior to the modification symbolic name Default is associated with named data stream Dec13 subsequent to the modification symbolic name Default is associated with named data stream Dec14. 

It is noted that symbolic name modification module is optional. In other embodiments symbolic names can be modified by first deleting the existing symbolic name and then creating a new symbolic name using the deletion and creation modules.

To associate a symbolic name with a data stream the user or application provides the file system with the symbolic name as well as the name of the data stream. e.g. during symbolic name creation or modification. To open a particular data stream the user or application generates a file open request that specifies a symbolic name associated with that data stream.

The method begins at when file creation is initiated. During the file creation process the file system creates at least one data stream e.g. an unnamed data stream within the file as shown at . Information within each data stream can be accessed independently of information within other data streams however all of the data streams are stored as part of the same file.

The file system then associates a default symbolic name with one of the data streams as shown at . For example the file system can associate the symbolic name Default with the unnamed data stream.

A symbolic name can be associated with a data stream by updating a pointer associated with the symbolic name to identify the data stream e.g. by setting the value of the pointer to equal the non symbolic name of the data stream . Both the symbolic name and the pointer are stored as part of the metadata that is associated with the file that includes the data stream. For example the symbolic name Default can be associated with the unnamed data stream by storing Unnamed or another value that identifies the unnamed data stream as the pointer value associated with symbolic name Default. 

Operation can be performed during file creation time or alternatively at a time subsequent to the file s creation. In the latter scenario operation can be performed in response to a request generated by a user or application.

At one or more additional symbolic names are associated with one or more of the data streams in the file in the same way that the default symbolic name is associated with a data stream. It is noted that more than one symbolic name can be associated with the same data stream. Operation can be performed in response to a symbolic name creation or modification request generated by a user or application.

Additionally a symbolic name can be indirectly associated with a data stream by associating the symbolic name with another symbolic name. The other symbolic name is already associated with the data stream. For example if the symbolic name Current is associated with named data stream Version7 the symbolic name UserView can be indirectly associated with the named data stream Version7 by associating UserView with Current. However if Current is modified so that it is associated with another named data stream this modification will also affect UserView i.e. after the modification of Current UserView will also be associated with the other named data stream .

In another example one view named Dec14 can be associated with symbolic name View1. View1 can in turn be associated with the Current symbolic name. Accordingly when an application requests the Current data stream the application will open Dec14. A day later a data stream named Dec15 is created and associated with symbolic name View2. The Current symbolic name is then associated with View2. Now when the application requests the Current data stream the application will open Dec15. 

It is noted that the operations shown in can be performed in a different order in other embodiments. Additionally some embodiments may eliminate certain operations for example in some embodiments a default symbolic name is not provided or perform other operations instead of and or in addition to those disclosed in .

The method begins at when the file system receives a request to open a file. If no symbolic name is specified in the request as determined at the file system identifies the data stream associated with the default symbolic name e.g. by accessing a pointer associated with the default symbolic name as shown at . At the file system opens the data stream identified at .

If the request to open the file does specify a symbolic name the file system identifies the data stream associated with the symbolic name as shown at . The file system identifies the data stream associated with the symbolic name by accessing the metadata associated with the file. The file system can lookup the symbolic name in the metadata associated with the file. Once the symbolic name is located the file system can access the pointer associated with the symbolic name. The value of the pointer is then used to identify the associated data stream.

The pointer can directly identify the named data stream. For example the value of the pointer can be the name of the named data stream. In this situation it is determined at that the value of the pointer is not a second symbolic name. Consequently the file system identifies that the named data stream is associated with the symbolic name as shown at .

The pointer can also identify a named data stream indirectly. For example the value of the pointer for a first symbolic name can be a second symbolic name. In this situation it is determined at that the value of the pointer is a second symbolic name. That second symbolic name can in turn have a pointer that directly identifies a named data stream. Consequently the pointer associated with the second symbolic name is accessed as shown at step and this pointer is used to identify the named data stream as shown at step . In this situation the pointer for the first symbolic name indirectly identifies the named data stream.

Thus the file system can use the value of a pointer associated with the specified symbolic name to identify an associated data stream. The identified data stream is then opened as shown at .

It is noted that the method of is provided as an example and that other embodiments can be implemented differently. For example in some embodiments a default symbolic name may not be implemented. Those embodiments can open the unnamed data stream instead of opening the data stream associated with the default symbolic name.

Although the present invention has been described in connection with several embodiments the invention is not intended to be limited to the specific forms set forth herein. On the contrary it is intended to cover such alternatives modifications and equivalents as can be reasonably included within the scope of the invention as defined by the appended claims.

