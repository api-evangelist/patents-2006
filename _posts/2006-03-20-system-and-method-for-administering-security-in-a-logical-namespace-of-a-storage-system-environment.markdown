---

title: System and method for administering security in a logical namespace of a storage system environment
abstract: A system and method administers security in a logical namespace of a storage system environment. A remote agent performs an integral security-related role within a management framework that is directed to off-loading administration of privileges from a namespace and storage management (NSM) server for namespace and storage management. NSM server rights are defined and assigned to a user of the NSM server in accordance with a security administration feature of the management framework. In addition, a multi-stage authentication procedure is provided to ensure that a user has the appropriate rights to perform operations on the NSM server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08151360&OS=08151360&RS=08151360
owner: NetApp, Inc.
number: 08151360
owner_city: Sunnyvale
owner_country: US
publication_date: 20060320
---
The present invention is related to the following commonly assigned U.S. patent application Ser. No. 11 384 711 titled System and Method for Integrating Namespace Management and Storage Management in a Storage System Environment filed herewith which application is hereby incorporated by reference.

The present invention relates to storage systems and more specifically to a logical namespace service configured to administer security in a storage system environment.

A storage system typically comprises one or more storage devices into which information may be entered and from which information may be obtained as desired. The storage system includes an operating system that functionally organizes the system by inter alia invoking storage operations in support of a storage service implemented by the system. The storage system generally provides its storage services through the execution of software modules such as processes. The storage system may be implemented in accordance with a variety of storage architectures including but not limited to a network attached storage environment a storage area network and a disk assembly directly attacked to a client or host computer. The storage devices are typically disk drives organized as a disk array wherein the term disk commonly describes a self contained rotating magnetic media storage device. The term disk in this context is synonymous with hard disk drive HDD or direct access storage device DASD .

The storage system may be further configured to operate according to a client server model of information delivery to thereby allow many clients to access information stored on the system. In this model the storage system may be embodied as file server executing an operating system such as the Microsoft Windows operating system hereinafter Windows operating system . Furthermore the client may comprise an application executing on an operating system of a computer that connects to the server over a computer network such as a point to point link shared local area network wide area network or virtual private network implemented over a public network such as the Internet. Each client may request the services of the server by issuing storage access protocol messages in the form of packets to the server over the network. By supporting a plurality of storage e.g. file based access protocols such as the conventional Common Internet File System CIFS and the Network File System NFS protocols the utility of the server is enhanced.

To facilitate client access to the information stored on the server the Windows operating system typically exports units of storage e.g. CIFS shares. As used herein a share is equivalent to a mount point or shared storage resource such as a folder or directory that stores information about files or other directories served by the file server. A Windows client may access information in the directory by mounting the share and issuing a CIFS protocol access request that specifies a uniform naming convention UNC path to the share. The UNC path or pathname is an aspect of a Windows networking environment that defines a way for a client to refer to a unit of storage on a server. The UNC pathname is prefixed with the string to indicate resource names on a network. For example a UNC pathname may comprise a server name a share directory name and a path descriptor that collectively reference a unit of storage or share. Thus in order to access the share the client typically requires knowledge of the specific physical location i.e. the identity of the server exporting the share.

Instead of requiring the client to provide the specific identity of the file server exporting the share it is desirable to only require a logical pathname to the share. That is it is desirable to provide the client with a globally unique pathname to the share without reference to the file server. The conventional Distributed File System DFS namespace service provides such a solution in a Windows environment through the creation of a namespace that removes the specificity of server identity. DFS is well known and described in DCE 1.2.2 1997 which is hereby incorporated by reference. As used herein a namespace is a view of shared storage resources such as shares from the perspective of a client. The DFS namespace service is generally implemented using one or more DFS servers and distributed components in a network.

Using the DFS service it is possible to create a unique pathname in the form of a UNC pathname for a storage resource that a DFS server translates to an actual location of the resource share in the network. However in addition to the DFS namespace provided by the Windows operating system there are many other namespace services provided by various operating system platforms including the NFS namespace provided by the conventional Unix operating system. Each service constructs a namespace to facilitate management of information using a layer of indirection between a file server and client accessing a shared storage resource share on the server. For example a share may be connected or linked to a link point link in DFS terminology or a mount point in NFS terminology to hide the machine specific reference to the share. By referencing the link point the client can automatically access information on the storage resource of the specific machine. This allows an administrator to store the information on any server in the network by merely providing a reference to the information or share . However these namespaces are typically services created on heterogeneous server platforms which leads to incompatibility and non interoperability with respect to management of the namespaces by the user. For example the DFS namespace service is generally limited to Windows based operating system platforms whereas the NFS namespace service is generally limited to Unix based operating system platforms.

The Virtual File Manager VFM developed by NuView Inc. and available from Network Appliance Inc. NetApp provides a namespace service that supports various protocols operating on various file server platforms such as NetApp filers and DFS servers. The VFM namespace service is well known and described in 4.0 2001 2003 and 4.0 2001 2003.

A storage system environment may be organized as a group of machines such as general purpose computers and specialized servers on a network that is administered as a unit or domain with common rules and procedures. A domain controller manages access to a set of network resources by users of the machines in the domain. To that end the domain controller also provides security e.g. rights privileges and authentication services for the users in the domain such that a user need only log into the domain to gain access to the resources which may be located on one or more machines in the network. An example of such a storage system environment is a Windows environment wherein the domain controller is typically embodied as a primary domain controller PDC server. The PDC server provides the security service through management of a master user database for the domain.

The concept of a domain not only allows a user to access resources on different is machines in e.g. a first domain but also allows the user to access network resources in a second domain in accordance with a trust relationship. A trust relationship is thus an arrangement between the two domains such as Windows domains that allows the first domain to recognize all users of the second domain. In this arrangement the user need only log into the first domain to obtain access to the resources in the second domain. Upon establishing the trust relationship users i.e. user accounts are granted privileges i.e. rights to perform certain operations in domains other than the one in which they were created. As used herein a privilege denotes the right of user to perform certain operations such as the right to access a share as mandated by the user s account.

Typically a namespace server must establish a pre configured i.e. static trust relationship with each host machine in a domain to enable management of a particular namespace. That is the server typically requires a tightly coupled arrangement and corresponding direct communication with the operating system of each host machine in order to establish the trust relationship. As a result the namespace server must have sufficient privileges to each host machine with which it operates and thus must centrally administer the privileges for all machines in the domain. Such centralized administration of privileges presents a potential security point of failure in that if the namespace server is compromised the host machines with which it operates may also be compromised. The present invention is directed in part to alleviating this potential security point of failure.

The disadvantages of the prior art are overcome by providing a system and method for administering security in a logical namespace of a storage system environment. A remote agent of an integrated management framework is installed on a host machine of a first domain in the storage system environment and is configured to operate with at least a subset of privileges assigned to an administrator of the machine and or of that domain. A namespace and storage management NSM server resides in a second domain and cooperates with the remote agent to dynamically establish a trust relationship with the host machine of the first domain thereby enabling remote agent based namespace and storage management across multiple domains of the storage system environment.

According to an aspect of the invention the remote agent performs an integral security related role within the management framework that is directed to off loading administration of privileges from the NSM server for namespace and storage management. Offloading of such privilege administration allows the integrated management framework to remotely establish the trust relationship between the NSM server and host machine thereby obviating the need for a pre configured i.e. static trust relationship across the domains. Advantageously this aspect of the invention obviates the need for the NSM server to centrally administer privileges for host machines in any of the domains on which the remote agents reside and thus eliminates a potential security point of failure.

Another aspect of the present invention is directed to the ability to define and assign rights to a user of the NSM server in accordance with a security administration feature of the integrated management framework. According to this aspect of the invention NSM server rights include i a namespace management right that enables the user to perform namespace management operations ii a data migration right that enables the user to perform data migration from one share to another share and iii a data protection right that enables the user to configure a data protection failover policy. In addition a multi stage authentication procedure is provided to ensure that a user has the appropriate rights to perform operations on the NSM server.

Each client may comprise an application executing on an operating system of a general purpose computer that interacts with the file servers in accordance with a client server model of information delivery. That is the client may request the services of a server and the server may return the results of the services requested by the client by exchanging packets over the network . The client may issue packets including storage e.g. file based access protocols such as the Common Internet File System CIFS protocol or Network File System NFS protocol over the Transmission Control Protocol Internet Protocol TCP IP when accessing information in the form of e.g. files and directories.

To facilitate client access to the information stored on the server a file server executing e.g. the Windows operating system typically exports units of storage e.g. CIFS shares. A client may access information of the share by mounting the share and issuing a CIFS protocol access request that specifies a uniform naming convention UNC path to the share. Although the illustrative embodiment is directed to a Windows file server that is accessed using the CIFS protocol the invention described herein is not so limited and may also apply to other servers such as Unix filer servers and NetApp filers that are accessible using other file access protocols such as the NFS protocol. The client connects to file server when accessing the share typically by specifying the IP address or identity of the file server.

However instead of requiring that the client know the specific identity of the server in order to access the share a namespace server such as the conventional Distributed File System DFS server provides a namespace service that removes the specificity of server identity. Using the DFS service a unique pathname in the form of a UNC pathname is created for the share that the DFS server translates to an actual location of the share in the network. Moreover in a typical Windows environment wherein a group of machines is organized as a domain a domain controller such as a primary domain controller PDC provides security e.g. rights privileges and authentication services for the machines. Note that the PDC and DFS server may reside on separate machines or as in the illustrative embodiment described herein may reside on the same machine as separate services.

For example assume a client application issues a CIFS request to access information of a share stored on a file server in the environment . The request is passed through various layers of the client s operating system including e.g. a CIFS redirector. Before issuing a CIFS packet directed to a UNC pathname specified by the client application the redirector contacts a DFS server to determine whether there is a different actual pathname needed to access the information. At that time the DFS server performs a PDC lookup operation to determine whether the client has the appropriate privileges to access the data. If so the actual pathname is provided to the redirector which then uses that pathname to create the CIFS packet for transmission over the network to the appropriate file server. The DFS namespace service thus provides a level of indirection to a share that resides on a file server in the environment . Upon receiving the packet the file server verifies that the client has the appropriate privileges to access the information.

Although the illustrative embodiment is directed to a DFS namespace service provided by the Windows operating system executing on a DFS server the invention described herein is not limited and may also apply to other namespace services such as the NFS namespace provided by the Unix operating system executing on a conventional Name Information Service NIS server. Each service constructs a namespace to facilitate management of information using a layer of indirection between a file server and client accessing a shared storage resource share on the server. However these namespace services are created on heterogeneous server platforms which lead to incompatibility and non interoperability with respect to management of different namespaces by e.g. an administrator user .

In the illustrative embodiment a namespace and storage management NSM server is provided that integrates namespace management and storage management in storage system environment . The NSM server includes an integrated management framework that provides an underlying infrastructure that supports various heterogeneous storage access protocols within a single logical namespace service. To that end the NSM server cooperates with a NSM console and a remote agent to create the integrated management framework. As described herein the integrated management framework in turn allows the NSM server to interact with any namespace server such as a DFS server configured to handle CIFS protocol requests or a NIS server configured to handle NFS protocol requests directed to namespace services.

An operating system portions of which is typically resident in memory and executed by the processing elements functionally organizes the server by inter alia invoking operations in support of storage services implemented by the server. In the illustrative embodiment the operating system is preferably the Windows operating system although it is expressly contemplated that any appropriate operating system such as the Unix operating system may be enhanced for use in accordance with the inventive principles described herein. The operations invoked by the operating system are illustratively namespace and storage operations in support of an integrated management framework provided by the server. It will be apparent to those skilled in the art that other processor and memory means including various computer readable media may be used for storing and executing program instructions pertaining to the invention described herein.

The NSM server generally provides its storage services through the execution of software modules such as processes. These services are illustratively implemented as separately scheduled processes and or daemons that execute in user space of operating system to provide the integrated management framework . As used herein a process refers to an instance of a program being executed by e.g. the processor and a thread is an instance of a sequence of the process s program code. is a schematic block diagram of the integrated management framework in accordance with the present invention. The integrated management framework provides a logical namespace service that is based on extensions to underlying storage management technology and other technological components. Notably these extensions are embodied as library functionality.

In the illustrative embodiment the underlying storage management technology is embodied as DataFabric Manager DFM technology available from Network Appliance Inc. Sunnyvale Calif. and described in DataFabric Manager 3.2 Administration Guide 1994 2004 which is hereby incorporated by reference. Broadly stated the DFM technology comprises a set of coordinating processes including an application programming interface API server a scheduler an Event daemon a Monitor including a Discovery daemon and a database interface DBI configured to interact with an embedded database . The present invention extends the capabilities of these processes to create the integrated namespace and storage management framework through the addition of NSM library functionality . As described herein the NSM library is illustratively implemented as various library modules each of which provides namespace and storage management actions embodied as APIs.

The integrated management framework exposes a set of interfaces e.g. an API interface that is used by the NSM console and a command line interface CLI used by a communication protocol. Illustratively the communication protocol is embodied as an XML over HTTP mechanism for APIs primarily because of its ability to describe data conveyed over the network as well as the transport without describing the actual storage access protocol. An example of a communication protocol that may be advantageously used with the present invention is the ZAPI protocol available from Network Appliance Inc. Such a protocol is also easily extensible and flexibly agnostic to binary formats of specific servers and clients to thereby operate efficiently in a heterogenous environment.

In the illustrative embodiment the integrated management framework facilitates configuration and management of pathnames in the logical namespace. That is the underlying infrastructure of the framework allows a user to manage various pathnames exported by heterogeneous namespace service and protocol implementations within the logical namespace. This aspect of the framework involves creation of a layer of abstraction that presents to a client a notion of the logical namespace that is accessible via a particular storage access protocol. As noted the various heterogeneous namespace services are not interoperable with respect to user management the integrated framework as described further herein extracts logical views e.g. pathnames from the namespaces exported by the heterogeneous services stores those pathnames in database and then configures the pathnames so that they are accessible in the logical namespace via the storage access protocol.

In storage and networking environments some operations can only be executed if a user such as a system administrator is logged into a server on which the operations are to be performed e.g. the NSM server. In other words a remote operation that is to be invoked on the server can only be performed if the user is logged into the server. The NSM console and remote agent of the integrated management framework address this problem. Illustratively the NSM console is a component of the framework that includes a JAVA based interface and the remote agent is a software module installed on a host machine such as a server which manages a particular namespace e.g. a DFS server. Using the communication protocol the NSM console issues APIs to the NSM server which in turn issues APIs that are invoked on the remote agent to perform actions requested by the user.

Essentially the remote agent is a thin web server that includes programmatic glue to enable installation of plug in modules plug ins that provide certain functionality of the remote agent. To that end the plug in module is embodied as software code that operates within the context of the remote agent process and provides an interface to the host platform. In the illustrative embodiment described herein plug in modules include a namespace plug in that allows remote access and management of data e.g. pathnames by the NSM server and a migration plug in that provides a migration capability of the remote agent .

For example the namespace plug in is installed on a remote agent of a host machine such as server that manages a particular namespace in accordance with the integrated management framework the plug in has the intelligence to communicate with the server to manage the logical namespace by e.g. creating the namespace creating and or deleting link points of the namespace etc. The novel plug in module provides an interface from the integrated management framework architecture to the architecture of its host machine. To that end the remote agent may comprise an API server that cooperates with an API service on Windows platforms or a daemon process on Unix platforms to receive API requests from the NSM server and translate them into host machine calls such as Win32 APIs or Unix system calls.

Illustratively the remote agent is installed on a machine that hosts a DFS server of a Windows DFS environment. The namespace management plug in module may in turn be installed on the remote agent to enable communication with the NSM server when accessing namespace information stored on the DFS server. Specifically the NSM server issues APIs in connection with the communication protocol to instruct the remote agent to perform certain actions. For example in order to construct or change pathnames in the uniform namespace a user interacts with the NSM console to access that namespace by in effect invoking a set of APIs on the NSM server which in turn invokes a set of APIs on the remote agent . Once the NSM server has cooperated with the DFS server to construct the pathnames those servers are no longer involved in client data accesses.

Although the illustrative embodiment describes installation of the remote agent on a server that hosts a DFS service of a Windows environment it should be noted that the remote agent could also be used to monitor other server platforms such as NFS NIS systems. That is the novel remote agent functionality and security architecture facilitates portability to multiple operating system platforms or hosts such as Windows Unix and Solaris so that the integrated management framework can manage namespace and storage objects of those hosts. The remote agent is illustratively constructed without the use of operating system specific code and is adapted to operate on various operating system platforms through the use of operating system calls and APIs specific to each platform. For example a remote agent that resides on a Windows host machine uses Windows operating systems calls and APIs e.g. Win32 APIs to communicate with the host machine.

It should be noted that the underlying directory data structures used in the logical namespace of the present invention reside on the namespace server providing the particular namespace service such as a DFS server. That is the namespace server implements the basic namespace the NSM server provides a service for configuring that namespace. To that end the NSM server cooperates with the remote agent to acquire a copy of the namespace directory structures from the namespace server and stores the copy on the embedded database . The NSM server then cooperates with the NSM console to allow a user to manipulate configure the copy. Once configuration is complete the server cooperates with the remote agent to push store the manipulated copy of directory structures back to the namespace server .

The Monitor is illustratively embodied as a multi threaded process having a collection of individual monitor threads each of which is scheduled by the scheduler . The Monitor cooperates with the remote agent to communicate with one or more machines devices in the storage system environment using SNMP RSH etc to collect any type of storage or data namespace object information e.g. volume and or qtree information as well as information about namespace servers available in the environment and to that end functions as a data collector. Illustratively each monitor thread is configured to collect information about a particular object in the environment. Extensions to the Monitor are directed to namespace and agent management each of which is illustratively embodied as an individual monitor thread.

As data is collected the Monitor determines whether it needs to notify any processes of some resulting condition. For example an individual monitor thread may detect a threshold and the occurrence of some type of event. As used herein an event is a synchronous notification with a severity attribute. By configuring thresholds the NSM server can determine when an event occurs. An example of a threshold is if volume capacity is greater than 50 generate an event out of space . If a threshold is exceeded the Monitor communicates with the Event daemon to notify it of that event. Thus the Monitor is configured to detect certain events and in response generate is event notifications to the Event daemon . The Event daemon then determines what if any further action is needed e.g. send an SMTP alert an email an SNMP trap and records the event in the embedded database .

The embedded database is illustratively implemented as a Sybase relational database that exports a set of Simple Query Language SQL function calls that enable storage retrieval of data such as namespace objects to from the database. A schema of the database is configured to efficiently capture characteristics of a namespace independent of the storage access protocol such as NFS or CIFS. The database is illustratively organized as a plurality of tables each of which can be accessed by processes within the NSM server. The DBI is illustratively embodied as a SQL interface to the database and its associated tables although it will be understood to those skilled in the art that the DBI may be embodied as any other type of database protocol interface depending on the actual implementation of the database e.g. an Oracle database.

The API server is illustratively embodied as a multi threaded process that is configured to implement the APIs used by the NSM console to access the database and manipulate information stored thereon. The API server also implements the communication protocol APIs used to interact with the remote agent . Accordingly extensions to the API server are primarily directed to those APIs required to manipulate the database and the remote agent. For example APIs are invoked by a user via the NSM console to manipulate modify update the embedded database . The API server updates the database with respect to user configuration requests and the Monitor periodically queries polls the database for any state information change. Depending upon the change the API server may cooperate with the Monitor to instruct data collection from the remote agent . After receiving the collected information from the remote agent the Monitor updates the database and the Event daemon .

The present invention relates to a system and method for administering security in a logical namespace of a storage system environment. A remote agent of the integrated management framework is installed on a host machine of a first domain in the storage system environment and is configured to operate with at least a subset of privileges assigned to an administrator of the machine and or of that domain. The NSM server resides in a second domain and cooperates with the remote agent to dynamically i.e. in real time establish a trust relationship with the host machine of the first domain thereby enabling remote agent based namespace and storage management across multiple domains of the storage system environment. As described herein remote agent based management provides a number of advantageous capabilities including improved security by limiting the risk and damage associated with compromising of the NSM server as well as the flexibility to interface the NSM server to multiple host operating system platforms.

According to an aspect of the invention the remote agent performs an integral security related role within the management framework that is directed to off loading administration of privileges including access rights from the NSM server for namespace and storage e.g. migration management. Offloading of such privilege administration allows the integrated management framework to remotely establish the trust relationship between the NSM server and host machine e.g. server thereby obviating the need for a pre configured i.e. static trust relationship across the domains e.g. to enable management of a particular namespace . Advantageously this aspect of the invention obviates the need for the NSM server to centrally administer privileges for host machines in any of the domains on which the remote agents reside and thus eliminates a potential security point of failure. In other words if the NSM server is compromised or breached the breach will not affect the other host machines accessible via the logical namespace.

When managing a particular namespace e.g. DFS the NSM server does not communicate directly with the host machine e.g. server but rather communicates to with the remote agent that is resident on and running local to that server. As such the NSM server does not issue any host based e.g. Windows system calls and thus does not require a tightly coupled arrangement and corresponding direct communication with the operating system of the host machine in order to establish the trust relationship. Instead the NSM server delegates the responsibility of those system calls to the remote agent through API messages of the communication protocol according to the invention transfer of these API messages to the remote agent remotely and dynamically establishes the trust relationship. The remote agent then issues appropriate system calls into the operating system of the host machine. The agent is thus used as a common infrastructure to perform operations including storage resource management operations on machines that are loosely coupled to the NSM server .

Notably the remote agent is configured to operate with at least a subset of the privileges including access rights to network resources assigned an administrator of the server on which it is installed and or of the domain in which the server is located. In other words if the server in a Windows domain has administrative privileges to access other machines in the same or other domains than the remote agent may also have such privileges. The assignment of such privileges is necessary because the remote agent illustratively becomes part of the software running on the server host machine on which it is installed. Therefore a requirement of the integrated management framework is that the remote agent be configured to operate under the privileges of the administrator of a host machine server e.g. a domain controller in a particular domain. In this case the remote agent may have access to all machines in the domain so that it can perform e.g. share creation deletion etc. Moreover since it resides on the domain controller for the domain the remote agent has the appropriate privileges to perform namespace operations on a namespace server.

Unlike previous systems the NSM server does not require sufficient privileges to each host machine with which it operates and thus does not have to centrally administer those privileges. By distributing the administration of privileges to each remote agent residing on a host machine the integrated management framework off loads the processing and management needed to administer those privileges from a centralized server. Distribution of such administration is also desirable and thus advantageous because it is generally cleaner to grant privileges to software running locally on a host machine rather than granting such privileges to software running externally to outside of the machine. Furthermore since the security privilege attributes along with other platform specific requirements are encapsulated into the remote agents and not the NSM server this aspect of the invention advantageously enables operation of the integrated management framework within a heterogeneous environment having different namespace server platforms.

In Step the NSM server initiates execution of a job relating to e.g. namespace auto population using the remote agent. An example of such job execution is described in previously incorporated U.S. patent application Ser. No. 11 384 711. Broadly stated the NSM server invokes one or more APIs within one or more packets and in Step transfers the API packet to the remote agent. The API packet includes a function call instructing the agent to execute the namespace job by e.g. generating appropriate APIs to instruct the remote agent to discover shares that are accessible in the network. Since the remote agent has the same or at least a subset of administrative privileges in the domain as the server on which it is installed the remote agent in Step issues one or more system calls to the operating system of the host machine e.g. server to execute the job and discover the shares by inter alia retrieving appropriate data files from the e.g. PDC server and copying them to the NSM server . The procedure then ends at Step .

It should be noted that there may be restrictions as to the specific operations that the NSM server can perform with respect to namespace and storage management in a domain. For example the NSM server may only be able to issue and process certain namespace and storage management operations such as namespace creation share discovery and share creation. Thus the NSM server may instruct the remote agent via APIs to manage the namespace on the server in the second domain by among other things discovering shares because the remote agent has the appropriate privileges. However the NSM server may not issue other operations independent of namespace and storage management to the remote agent such as independent operations to remove delete files on the server. This feature of the invention provides another security safeguard by restricting the operations that the NSM server and remote agent can execute in a domain. Thus if the NSM server is compromised there is only the restricted set of operations that the remote agent can perform.

Another aspect of the present invention is directed to the ability to define and assign rights to a user of the NSM server in accordance with a security administration feature of the integrated management framework . Broadly stated the NSM server has its own way of managing security using rights wherein according to the integrated management framework a right denotes the ability of a user system administrator to execute features of the NSM server. That is depending upon the type of features that the NSM server provides exports the NSM server rights allow a user to perform operations on the NSM server. Note that without the right the user cannot perform the specific operations.

According to this aspect of the invention NSM server rights include i a namespace management right that enables the user to perform namespace management operations such as create namespaces create links etc. ii a data migration right that enables the user to perform data migration from one share to another share and iii a data protection right that enables the user to configure a data protection failover policy. In addition a multi stage authentication procedure is provided to ensure that a user has the appropriate rights to perform operations on the NSM server.

In the illustrative embodiment a system administrator primary user installs the NSM server and by default has all NSM server rights. Other secondary or sub administrators are granted some or all of the above rights by the primary user. Notably previous namespace servers generally do not have a concept of such distinct rights i.e. a user has all or no rights for its server . For example assume a primary user wants to perform a namespace operation using the NSM server. The user must first have a namespace right to perform the operation and if so the user can invoke the namespace operation on the server which causes the NSM server to issue the namespace operation to the appropriate remote agent for execution. Note that the remote agent has no concept of the NSM server rights it is only concerned with obtaining the appropriate host machine privileges to execute the NSM specific operations on the host. That is assume further that the namespace operation is directed to creation of a share. In order to create the share the remote agent must have the appropriate privileges access rights and or domain name password on its host machine.

Indications of the NSM server rights that are extended to a primary user administrator and one or more sub administrators are stored in the embedded database . A multi stage authentication procedure is provided to ensure that the administrator and or sub administrator has the appropriate rights to perform operations on the NSM server. In the illustrative embodiment a CLI process of CLI and API server among other processes of the integrated management framework cooperate to implement the novel multi stage authentication procedure.

However if it is determined that the user has the appropriate rights the DBI sends a notification of authorization to the API server in Step . In Step the API server performs a second stage of authentication comprising a second look up operation into the database . The second level of authentication is needed because the NSM console which communicates directly with the API server can be launched instantiated from any machine including a machine that is remote from the NSM server whereas the CLI is closely coupled to e.g. residing on the NSM server. Thus the second stage of authentication ensures that an NSM console user cannot bypass rights checking. In Step a determination is made as to whether the user has the appropriate NSM server rights to perform the operation. If not the DBI sends an error message to the API server indicating insufficient user rights in Step and the procedure ends at Step . Otherwise the DBI sends a notification of authorization to the API server in Step and the procedure ends at Step .

In sum a system and method is provided for administering security in a logical namespace of a storage system environment. In one aspect of the invention the remote agent performs an integral security related role within the management framework that is directed to off loading administration of privileges from the NSM server for namespace and storage management. In another aspect NSM server rights are defined and assigned to users of the NSM server in accordance with a security administration feature of the integrated management framework. In yet another aspect of the invention a multi stage authentication procedure is provided to ensure that a user has the appropriate rights to perform operations on the NSM server.

The foregoing description has been directed to specific embodiments of this invention. It will be apparent however that other variations and modifications may be is made to the described embodiments with the attainment of some or all of their advantages. For instance it is expressly contemplated that the procedures processes and or modules described herein may be implemented in hardware software embodied as a computer readable medium having program instructions firmware or a combination thereof. Accordingly this description is to be taken only by way of example and not to otherwise limit the scope of the invention. Therefore it is the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the invention.

