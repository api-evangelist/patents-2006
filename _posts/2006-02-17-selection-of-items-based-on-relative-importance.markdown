---

title: Selection of items based on relative importance
abstract: Methods and systems for prioritizing items and displaying those items in a single view of a personal information management (PIM) application are disclosed. PIM software can prioritize items for display in the single view based on a comparison of the date of creation of the item versus the amount of time remaining to complete the item. PIM software may also take into account a priority level of the item. As an item has less time remaining as compared to the date of creation, the likelihood the item will be included in the single display increases. Any item whose due date is ‘today’ may be included in the single view. Items without due dates might not ever appear in the single view. Users can thus get a quick overview of items that need to be taken care of that day, without being inundated with items that can wait until another day.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07809599&OS=07809599&RS=07809599
owner: Microsoft Corporation
number: 07809599
owner_city: Redmond
owner_country: US
publication_date: 20060217
---
Personal information management PIM software has made great strides in recent years. People use PIM software everyday to manage their email tasks calendars and contacts among other information. Businesses rely heavily on PIM software as well. However as users manage more and more information in PIM software it becomes more difficult for users to ascertain critical information from non critical information. That is users suffer from information overload and it becomes more difficult for users to differentiate what they need to know right now versus what can wait for some time in the future. In addition while individuals may use PIM software for personal use many users are reluctant to use PIM software in their personal lives as opposed to their business or professional lives because the use of PIM software in and of itself makes those users feel as if they are at work. 

Some PIM software applications have attempted to address the information overload problem by presenting users with a screen that attempts to present only currently relevant information. For example the Microsoft Outlook brand PIM includes an Outlook Today view which presents the user with three different lists one each for upcoming calendar events incomplete tasks and a count of unread email messages. However Microsoft Outlook does not filter the information to a degree useful to many users. For example Microsoft Outlook displays all calendar events within the next 4 days regardless of importance. If a user has more calendar events within the next 4 days than fit on the screen Microsoft Outlook still lists them all and the user must scroll the screen to review them. As another example Microsoft Outlook displays all as yet unfinished tasks in the Outlook Today screen. Again if more tasks are unfinished than fit on one screen Microsoft Outlook still lists them all and the user must scroll the screen to review them. Finally with respect to email Microsoft Outlook only lists the number of read and or unread messages the Outlook Today screen does not provide email subject or sender information. Thus a user must review three different lists and combine and filter the lists based on the user s own knowledge of each item to figure out what is relevant information because the Outlook Today screen does not provide a sufficiently filtered single list.

In addition to the above many PIM software applications are not suited for a 10 second user interface. A 10 second user interface generally refers to a user interface where a user can learn the information he or she is looking for in an extremely short period of time e.g. under a minute and ideally in about 10 seconds. Summary screens on current PIM software such as the Outlook Today screen are overloaded with information through which a user must parse and are unsuitable for a 10 second user interface.

The following presents a simplified summary of the invention in order to provide a basic understanding of some aspects of the invention. This summary is not an extensive overview of the invention. It is not intended to identify key or critical elements of the invention or to delineate the scope of the invention. The following summary merely presents some concepts of the invention in a simplified form as a prelude to the more detailed description provided below.

Aspects of the present invention are directed to a view that provides a user with a list of prioritized items regardless of whether each item is a task an appointment a link to a website to review or a communication from some other person or even some other item. The view may be prioritized according to what is deemed most important and what is urgent optionally based also in part on the date the item was created. The view may present the information that the user most immediately needs to know. As items are added to a list information is gathered that will allow the system to display those items when the user needs to see them. This information may be shown along with appointments that need to be attended in the near future. Other information such as pictures web links news feeds tasks or communication from another person may also be incorporated into the list of filtered information items.

A first aspect of the invention provides methods systems and or computer readable media storing a method for selecting heterogeneous items for display in a common list in an information management application. The method may include determining a relevance for each of multiple items based on a present date. The determination may be performed by comparing to the present date a creation date and due date for each of the items. The method may then select a subset of the items for output in a single list immediate view on a display based on the determining step.

Another illustrative aspect includes one or more computer readable media storing a database and computer executable instructions. The database stores multiple items each item having a corresponding creation date and due date. The computer executable instructions when executed perform a method for selecting a subset of the items for display in a single list immediate view provided by an information manager software application. The method may include determining a relevance of each item by analyzing the creation date and the due date of each item with respect to a present date selecting a subset of the items based on the analyzing step and displaying the selected subset of the items in the single list immediate view on a video display device.

Other aspects of the invention select items for display in a common list in an information management application by determining a relevance for item based on a present date by comparing a creation date and due date for each of the items to the present date to determine which items have the smallest percentage of time remaining from the creation date to the due date. That subset if then displayed in a single list on a display. When an electronic communication is received from a member of a group to which a user of the information management application belongs information corresponding to the received electronic communication is displayed on the single list based on the sender of the electronic communication belonging to the group irrespective of whether the electronic communication otherwise would have had a relevance level warranting display in the single list.

In the following description of the various embodiments reference is made to the accompanying drawings which form a part hereof and in which is shown by way of illustration various embodiments in which features may be practiced. It is to be understood that other embodiments may be utilized and structural and functional modifications may be made.

Aspects are operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with aspects of the invention include but are not limited to personal computers server computers portable and hand held devices such as personal digital assistants PDAs tablet PCs or laptop PCs multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

Aspects of the invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Aspects of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an illustrative system for implementing one or more aspects of the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus Advanced Graphics Port AGP bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through an non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . Computer may also include a digitizer for use in conjunction with monitor to allow a user to provide input using a stylus input device . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

One or more aspects of the invention may be embodied in computer executable instructions i.e. software such as in a notification manager software object routine or function collectively referred to herein as a notification manager stored in system memory or non volatile memory as application programs program modules and or program data . The software may alternatively be stored remotely such as on remote computer with remote application programs . Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types when executed by a processor in a computer or other device. The computer executable instructions may be stored on a computer readable medium such as a hard disk optical disk removable storage media solid state memory RAM etc. As will be appreciated by one of skill in the art the functionality of the program modules may be combined or distributed as desired in various embodiments. In addition the functionality may be embodied in whole or in part in firmware or hardware equivalents such as integrated circuits field programmable gate arrays FPGA and the like.

A programming interface or more simply interface may be viewed as any mechanism process protocol for enabling one or more segment s of code to communicate with or access the functionality provided by one or more other segment s of code. Alternatively a programming interface may be viewed as one or more mechanism s method s function call s module s object s etc. of a component of a system capable of communicative coupling to one or more mechanism s method s function call s module s etc. of other component s . The term segment of code in the preceding sentence is intended to include one or more instructions or lines of code and includes e.g. code modules objects subroutines functions and so on regardless of the terminology applied or whether the code segments are separately compiled or whether the code segments are provided as source intermediate or object code whether the code segments are utilized in a runtime system or process or whether they are located on the same or different machines or distributed across multiple machines or whether the functionality represented by the segments of code are implemented wholly in software wholly in hardware or a combination of hardware and software.

Notionally a programming interface may be viewed generically as shown in or . illustrates an interface Interface as a conduit through which first and second code segments communicate. illustrates an interface as comprising interface objects I and I which may or may not be part of the first and second code segments which enable first and second code segments of a system to communicate via medium M. In the view of one may consider interface objects I and I as separate interfaces of the same system and one may also consider that objects I and I plus medium M comprise the interface. Although show bi directional flow and interfaces on each side of the flow certain implementations may only have information flow in one direction or no information flow as described below or may only have an interface object on one side. By way of example and not limitation terms such as application programming interface API entry point method function subroutine remote procedure call and component object model COM interface are encompassed within the definition of programming interface.

Aspects of such a programming interface may include the method whereby the first code segment transmits information where information is used in its broadest sense and includes data commands requests etc. to the second code segment the method whereby the second code segment receives the information and the structure sequence syntax organization schema timing and content of the information. In this regard the underlying transport medium itself may be unimportant to the operation of the interface whether the medium be wired or wireless or a combination of both as long as the information is transported in the manner defined by the interface. In certain situations information may not be passed in one or both directions in the conventional sense as the information transfer may be either via another mechanism e.g. information placed in a buffer file etc. separate from information flow between the code segments or non existent as when one code segment simply accesses functionality performed by a second code segment. Any or all of these aspects may be important in a given situation e.g. depending on whether the code segments are part of a system in a loosely coupled or tightly coupled configuration and so this list should be considered illustrative and non limiting.

This notion of a programming interface is known to those skilled in the art and is clear from the provided detailed description. There are however other ways to implement a programming interface and unless expressly excluded these to are intended to be encompassed by the claims set forth at the end of this specification. Such other ways may appear to be more sophisticated or complex than the simplistic view of but they nonetheless perform a similar function to accomplish the same overall result. We will now briefly describe some illustrative alternative implementations of a programming interface.

FACTORING A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown some interfaces can be described in terms of divisible sets of functionality. Thus the interface functionality of may be factored to achieve the same result just as one may mathematically provide 24 or 2 times 2 times 3 times 2. Accordingly as illustrated in the function provided by interface Interface may be subdivided to convert the communications of the interface into multiple interfaces InterfaceA InterfaceB InterfaceC etc. while achieving the same result. As illustrated in the function provided by interface I may be subdivided into multiple interfaces I I I etc. while achieving the same result. Similarly interface I of the second code segment which receives information from the first code segment may be factored into multiple interfaces I I I etc. When factoring the number of interfaces included with the 1st code segment need not match the number of interfaces included with the 2nd code segment. In either of the cases of the functional spirit of interfaces Interface and I remain the same as with respectively. The factoring of interfaces may also follow associative commutative and other mathematical properties such that the factoring may be difficult to recognize. For instance ordering of operations may be unimportant and consequently a function carried out by an interface may be carried out well in advance of reaching the interface by another piece of code or interface or performed by a separate component of the system. Moreover one of ordinary skill in the programming arts can appreciate that there are a variety of ways of making different function calls that achieve the same result.

REDEFINITION In some cases it may be possible to ignore add or redefine certain aspects e.g. parameters of a programming interface while still accomplishing the intended result. This is illustrated in . For example assume interface Interface of includes a function call Square input precision output a call that includes three parameters input precision and output and which is issued from the 1st Code Segment to the 2nd Code Segment. If the middle parameter precision is of no concern in a given scenario as shown in it could just as well be ignored or even replaced with a meaningless in this situation parameter. One may also add an additional parameter of no concern. In either event the functionality of square can be achieved so long as output is returned after input is squared by the second code segment. Precision may very well be a meaningful parameter to some downstream or other portion of the computing system however once it is recognized that precision is not necessary for the narrow purpose of calculating the square it may be replaced or ignored. For example instead of passing a valid precision value a meaningless value such as a birth date could be passed without adversely affecting the result. Similarly as shown in interface I is replaced by interface I redefined to ignore or add parameters to the interface. Interface I may similarly be redefined as interface I redefined to ignore unnecessary parameters or parameters that may be processed elsewhere. The point here is that in some cases a programming interface may include aspects such as parameters which are not needed for some purpose and so they may be ignored or redefined or processed elsewhere for other purposes.

INLINE CODING It may also be feasible to merge some or all of the functionality of two separate code modules such that the interface between them changes form. For example the functionality of may be converted to the functionality of respectively. In the previous 1st and 2nd Code Segments of are merged into a module containing both of them. In this case the code segments may still be communicating with each other but the interface may be adapted to a form which is more suitable to the single module. Thus for example formal Call and Return statements may no longer be necessary but similar processing or response s pursuant to interface Interface may still be in effect. Similarly shown in part or all of interface I from may be written inline into interface I to form interface I . As illustrated interface I is divided into Iand I and interface portion Ihas been coded in line with interface I to form interface I . For a concrete example consider that the interface I from performs a function call square input output which is received by interface I which after processing the value passed with input to square it by the second code segment passes back the squared result with output. In such a case the processing performed by the second code segment squaring input can be performed by the first code segment without a call to the interface.

DIVORCE A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown in one or more piece s of middleware Divorce Interface s since they divorce functionality and or interface functions from the original interface are provided to convert the communications on the first interface Interface to conform them to a different interface in this case interfaces InterfaceA InterfaceB and InterfaceC. This might be done e.g. where there is an installed base of applications designed to communicate with say an operating system in accordance with an Interface protocol but then the operating system is changed to use a different interface in this case interfaces InterfaceA InterfaceB and InterfaceC. The point is that the original interface used by the 2nd Code Segment is changed such that it is no longer compatible with the interface used by the 1st Code Segment and so an intermediary is used to make the old and new interfaces compatible. Similarly as shown in a third code segment can be introduced with divorce interface DI to receive the communications from interface I and with divorce interface DI to transmit the interface functionality to for example interfaces Iand I redesigned to work with DI but to provide the same functional result. Similarly DI and DI may work together to translate the functionality of interfaces I and I of to a new operating system while providing the same or similar functional result.

REWRITING Yet another possible variant is to dynamically rewrite the code to replace the interface functionality with something else but which achieves the same overall result. For example there may be a system in which a code segment presented in an intermediate language e.g. Microsoft IL Java ByteCode etc. is provided to a Just in Time JIT compiler or interpreter in an execution environment such as that provided by the .Net framework the Java runtime environment or other similar runtime type environments . The JIT compiler may be written so as to dynamically convert the communications from the 1st Code Segment to the 2nd Code Segment i.e. to conform them to a different interface as may be required by the 2nd Code Segment either the original or a different 2nd Code Segment . This is depicted in . As can be seen in this approach is similar to the Divorce scenario described above. It might be done e.g. where an installed base of applications are designed to communicate with an operating system in accordance with an Interface protocol but then the operating system is changed to use a different interface. The JIT Compiler could be used to conform the communications on the fly from the installed base applications to the new interface of the operating system. As depicted in this approach of dynamically rewriting the interface s may be applied to dynamically factor or otherwise alter the interface s as well.

It is also noted that the above described scenarios for achieving the same or similar result as an interface via alternative embodiments may also be combined in various ways serially and or in parallel or with other intervening code. Thus the alternative embodiments presented above are not mutually exclusive and may be mixed matched and combined to produce the same or equivalent scenarios to the generic scenarios presented in . It is also noted that as with most programming constructs there are other similar ways of achieving the same or similar functionality of an interface which may not be described herein but nonetheless are represented by the spirit and scope of the invention i.e. it is noted that it is at least partly the functionality represented by and the advantageous results enabled by an interface that underlie the value of an interface.

Various aspects described herein are directed to methods and systems for the selection of items to be displayed in an immediate view of an information manager software application. As used herein an information manager application refers to an application designed to manage personal family group and or business information as well as communications. Examples of such software include personal information management PIM applications such as but not limited to Outlook by Microsoft Corporation of Redmond Wash. Lotus Notes by IBM Corp. of Armonk N.Y. and GroupWise by Novell Inc. of Waltham Mass. Other personal information management PIM applications may be used as well or instead and such applications are not limited to merely personal information management but may include family information management business information management group information management and the like. All such software is generically referred to herein as PIM software or a PIM application e.g. residing in computer memory and or in system memory .

An immediate view refers to a particular view or screen display of information stored in the PIM software filtered to present a user with a list of items selected based on the respective relative importance levels of the items. The immediate view may be a single list of items for display on a screen display having a 10 second user interface such that the user can learn and or identify time critical items in a relatively short period of time e.g. under a minute and according to one aspect ideally in about ten 10 seconds. The immediate view may also be displayed on a 10 foot user interface i.e. a user interface intended to be viewed and controlled from a distance farther than a typical location from which a user sitting in front of a desktop computer controls the desktop computer using a mouse and keyboard. A 10 foot user interface generally refers to a user interface for a television or other device where the user controls the device from across a room and the 10 foot user interface generally includes larger fonts larger graphics larger selection areas etc.

Items for display in the immediate view can include any item or object identified within the PIM software in use where the item has a creation date a due date and a priority level. The due date and priority levels may be optional as further discussed below. All items inherently have a creation date based on the date they were instantiated. Examples of items include but are not limited to inter user communications e.g. email instant message etc. calendar events tasks contacts lists e.g. grocery lists honey do lists to do lists etc. notes web links bills due and the like. In addition an item is not restricted to being only one of the aforementioned types. For example a grocery list could be both a list and a task. The PIM software may represent the grocery list as a task having a list associated with it or a list of individual tasks. The particular representation or type of an item is unimportant provided that the item has a creation date due date and or priority level as discussed below. Each item may also be associated with an owner e.g. the user or users responsible for completing that item.

The immediate view may also be considered to have a 10 foot user interface depending on the size of the display screen on which it is displayed. That is whether a user interface is a 10 foot user interface may depend on the screen size as compared to the amount of information displayed on the screen. For example if the immediate view is displayed on a screen having a 40 inch diagonal e.g. a television set immediate view would certainly be considered to have at least a 10 foot user interface. However if immediate view is displayed on a screen having a 3 inch diagonal e.g. a smartphone or PDA then immediate view would not be considered as having a 10 foot user interface. The size of the display screen however is secondary to the information selected for inclusion thereon.

As is evident in immediate view includes items of various types. However as discussed above the types of items included in the immediate view are secondary to the manner in which they are selected for inclusion in the immediate view. Because in most scenarios a PIM application will maintain and track more items than fit in an immediate view the PIM software determines what items to include in the immediate view. Each item may be stored in an item database e.g. in program data . PIM software selects items for display in the immediate view based on relative importance of each item optionally modified by a user defined importance level of each item.

Table stores the items displayed in immediate view as well as additional items that the system filtered out of immediate view based on the principles described herein. In table record corresponds to item record corresponds to item record corresponds to item record corresponds to item and record corresponds to item . Records corresponds to items filtered out of immediate view as further described below.

PIM software or some other software module analyzes each item to determine whether to display each item in immediate view . At a high level the decision is based in part on a comparison of when the item was created versus when the item is due optionally based further on the item s priority. PIM software ranks items based on the results of the comparison. According to one illustrative aspect PIM software may determine a percentage of time left to complete an item versus when the item was created. The highest ranking items then may be selected for display in immediate view .

As illustrated in on Jan. 24 2006 PIM software might determine that the item defined in record has 0 time remaining because Jan. 24 2006 is its due date. Record also due on Jan. 24 2006 also has 0 time remaining. Similarly record reoccurs every Tuesday and Jan. 24 2006 is a Tuesday so record also has 0 remaining. Record has 12 of the time remaining from when the item was created as compared to when the item is due. Record which occurs every Tuesday and Thursday also has 0 . Record has no due date and thus may be determined to have 100 time remaining. Record has 32 time remaining. Record has 66 time remaining. Record may require special handling as it occurs every Wednesday. The time remaining for recurring items may be determined based on the original creation date or based on the last occurrence of the item. That is the creation date for the item may be reset periodically to be the date of the most recent occurrence. Using this logic record has a time remaining of 14 . PIM software may include in immediate view those items having the lowest percentages of time remaining. Immediate view depicted in illustrates the 5 items having the lowest percentages of time remaining. Only five items are included in this example because only 5 items fit under the three different chunks of time in the example of .

PIM software may also incorporate the priority of an item into the determination of whether to include the item in immediate view . For example PIM software may create an adjusted time value based on the priority level. PIM software may adjust the percentage time remaining down when the priority is high creating a smaller adjusted time value than the original percentage time remaining thereby increasing the chance that the item is included in immediate view . PIM software may adjust the percentage time remaining up when the priority is low creating a larger adjusted time value than the original percentage time remaining thereby decreasing the chance that the item is included in immediate view . PIM software might not adjust the percentage time remaining at all when the priority is medium creating an adjusted time value equal to the original percentage time remaining.

Other algorithms may alternatively be used where the decision whether an item is displayed in the immediate view is based on some combination of an analysis of the creation date the due date and or further adjusted or altered based on priority. For example PIM software might display higher priority items at the top of the list instead of grouping items in chunky time as shown in or PIM software might simply list items chronologically regardless of priority. PIM software may increase the priority of an item as the due date nears. For example if an item has less than X e.g. 20 time remaining PIM software might increase the priority level one increment or change the item from non urgent to urgent. In still another alternative PIM software might select all items having less than Y time remaining for display in immediate view where Y is some predetermined or user selected value e.g. 25 .

According to an illustrative aspect PIM software might only include items for display in immediate view when the items meet minimum threshold criteria regardless of whether enough items meet those criteria to fill up immediate view . If only a single item meets the minimum threshold criteria then only that item would be displayed in immediate view . The Y criteria discussed above is one such illustration of a minimum threshold criteria which could be used. In other embodiments PIM software keeps selecting additional items until immediate view is full or otherwise meets some predefined minimum number of items. In one embodiment all items that are due to be done today are shown. If after selecting all items due today there is room left in immediate view for additional items any algorithm may be used to determine which items and when those items may appear in the immediate view. For example a must do task that was assigned to be completed next week may appear on the list some days prior to the end of that assigned time period. In yet another alternative if there are no must do or high priority tasks remaining for the current day to display in immediate view immediate view or a portion thereof may remain empty thereby communicating to the user than no high priority or must do tasks remain for the day. If there are more items to display than immediate view has room to display immediate view may include a numeric or graphical indicator indicating that additional items exist and or how many additional items remain. In some embodiments immediate view may be divided into sections e.g. a must do section and another section representing other not as critical items such as in a calendar format as illustrated in .

With reference to Table 1 below illustrates an example of a 24 hour scenario with hypothetical user actions and system responses according to one or more illustrative aspects described herein. Immediate view in this example includes a tasks i.e. must do section and a calendar section. In Table 1 italics represent items displayed with less prominence relative to other items.

As illustrated above PIM software might age items off the list when their due date time has passed. Alternatively PIM software waits for the user to mark items complete before ageing the item off the immediate view. PIM software might assume that once an item s due date time has passed the user has taken care of that item or no longer needs to know about the item. Thus PIM software may update the immediate view in real time to always display applicable items. The user can review the aged item in a separate more detailed PIM view the details of which are not relevant herein.

As indicated above an item need not have a due date. PIM software might handle such items in a variety of ways. According to one illustrative aspect PIM software might assign an item without a user assigned due date an arbitrary due date e.g. one or two months years from the date of creation and the item is then processed as described above. According to another illustrative aspect an item without a user assigned due date might be precluded from appearing on the immediate view and a user could thus only review that item in a separate more detailed view.

In still yet another embodiment PIM software might only include an item without a due date in immediate view when there is space remaining in the immediate view after selection of other items meeting the minimum threshold criteria discussed above. PIM software might suggest items without due dates to the user when there is space available in immediate view . The implication being that if immediate view is not full then the user might have room in his her schedule to work on one of the items not having a due date. Alternatively where items are displayed in chunky time PIM software might include an item without a due date in a chunk of time e.g. morning afternoon evening in which there are no items otherwise displayed or less than a predetermined number of items. In immediate view PIM software might never add items to the must do section unless the items must be completed that day. In this manner the user knows that if the must do section is empty then there are no time sensitive or critical items remaining for that day. If time and or space is available in the calendar section of immediate view PIM software might suggest items in the calendar section. For example if the calendar is empty for an evening PIM software might suggest the user work on a previous entered long term project such as scanning in family photos or ripping the user s CD collection to his or her computer for personal private noncommercial use.

PIM software might also include additional features or data in immediate view . For example as shown in and PIM software might include the current date and time and also an indication of the day s weather. Weather may be obtained using any of a variety of web services over the Internet. The indication of the weather is particularly useful in that it assists the user in determining which items are feasible to complete or not complete when they are weather dependent. For example when the item corresponding to record soccer practice is displayed an indication that the weather is rainy might prompt the user to check to see if soccer practice has been canceled. Alternatively at the time of creation of an item or while editing an item a user might indicate whether the item is weather dependent and optionally what type of weather is preferred. For example a user might indicate that the desired weather for soccer practice is not raining while the desired weather for school carpool is not precipitating and not freezing. Desired weather for ski vacation might be snowing and the desired weather for get suntan might be sunny and hotter than 80 degrees Fahrenheit. When an item is weather dependent and that item is displayed in immediate view PIM software might raise an alert or flag to notify the user that the weather is adverse to the desired weather for that item so the user can take appropriate action if necessary. In addition to date time and weather PIM software may also or alternatively display other information such as real time data received over a network RSS feeds and the like.

PIM software might also include in immediate view an indication of new communications e.g. by displaying an envelope or other icon along with a number of new emails instant messages or other communications. PIM software may further display a visualization or animation when an event occurs e.g. a new email or message is received. If the newly received communication meets the criteria to be included in immediate view PIM software may also include the newly received message in immediate view based on a creation date due date and or priority included in the message. Alternatively as illustrated in Table 1 an incoming communication might always be immediately displayed as a high priority item or the incoming communication might be given a priority based on the sender or content of the incoming communication. For example where PIM software is used in a group or family environment the incoming communication might only receive a high priority or be immediately displayed where the sender is part of the recipient s family or group respectively. Thus if the PIM software is in use by a group such as a Boy Scout troop then an incoming communication from another member of the Boy Scout troop might be given high priority and immediately be displayed in the immediate view whereas an incoming communication from a friend or acquaintance not in the Boy Scout troop might be routed to a conventional electronic communication inbox that the recipient can check at his or her leisure.

In some embodiments PIM software may be usable with multiple groups and sub groups. For example the primary users of PIM software might include the members of a family e.g. mother father child1 and child2 . The family may be referred to as the primary group. Each member of the primary group may also belong to one or more other groups such as a dinner club Boy Scout troop soccer team dance team etc. When an incoming communication is received PIM software might display not only who the communication is directed to but also the group to which it pertains. Thus suppose that child1 has Dance Rehearsal at 8 pm listed on the calendar section of immediate view . When the Dance Rehearsal item was created the user indicated to PIM software that Dance Rehearsal is related to the Dance Team group. If an incoming communication is received from any other member of the Dance Team prior to Dance Rehearsal PIM software may display the incoming communication as high priority and or on the must do list and may flag the Dance Rehearsal item as having a related communication. The recipient user e.g. child1 or the parents can then immediately review the incoming communication by selecting the item from the must do list. Group set up and administration may be handled by any variety of techniques. For example group email lists or groups of contacts can be used as the basis to define a group. As another example when members of a common group e.g. a family use a common instance of PIM software when one member of the group creates deletes or updates an item the other modification may be automatically appear to the views provided to other members of the group using the same instance of the PIM software.

As indicated above each item may include a field indicating an owner or user responsible for completing the item or multiple users owners for an item. Such a field is useful e.g. when the PIM software manages information for a group of individuals collectively such as a family or organization e.g. a Boy Scout troop . PIM software may include an indication of the owner of each item in immediate view . PIM software may color code items depending on owner or provide some other graphical or textual indication of the owner. Each member of the group can thus quickly view not only their own items but also those items of other members of the group and easily determine which items are relevant to each user e.g. soccer practice may include a parent and child in the family .

Thus using one or more of the above described aspects PIM software can determine what a user needs to know at the present date time in real time e.g. right now. The PIM software provides in the immediate view a single list of items of multiple types integrated in one view based on aging and or prioritization characteristics of each item. Aspects may be used to prioritize tasks based on whether they are must do or optional or if they have not been given either of these classifications e.g. medium priority above . The combination of the time element and priority allows the PIM software to display the items that should and or need to be done very soon. Items thus appear in the context of the day when they need to be seen where items that have been prioritized to the top of the list are displayed in the immediate view.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

