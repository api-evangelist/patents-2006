---

title: Embedded virtual serial port
abstract: A system comprising a communication (COM) port server that, together with a COM port client, establishes COM port redirection over a network and communicates data with a serial port, at least one embedded application which is configured to communicate data via a serial port, and at least one virtual serial port application communicatively coupled to the embedded application and the COM port server. The virtual serial port application translates data communicated between the COM port server and the embedded application as if the COM port server and the embedded application were connected by a serial communication link.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07761621&OS=07761621&RS=07761621
owner: Digi International Inc.
number: 07761621
owner_city: Minnetonka
owner_country: US
publication_date: 20060914
---
This document relates generally to devices and systems that communicate via a network and in particular to communication among applications over the network.

Computers communicate with other computers and with peripheral devices. shows a block diagram of a host computer and an end device such as a printer for example. In the example shown a host application communicates with an end device application over a serial communication link . Both the host computer and the end device communicate over the serial communication link using serial ports and serial port drivers to control communications over serial ports and .

Sometimes it can be difficult to connect an end device directly to a host computer. This may be because the distance between the end device and the host computer is too great or because host computer lacks the serial ports needed to connect to the end device . In such situations system designers often turn to a device server. Device servers allow a host computer to communicate with devices. An example is shown in . Typically the devices are connected by serial communication lines to one or more device servers and an application running on a host computer communicates with the serial devices over the network using the device server . More than one host computer can communicate over the network with the same device connected to the device server .

To manage the devices device servers are configured to accommodate the various device types. As the number of different types of devices connected through networks increases network configurations can quickly become complicated.

This document describes both devices and methods used to manage devices on a computer network. One system embodiment includes a communication COM port server that together with a COM port client establishes COM port redirection over a network and communicates data with a serial port at least one embedded application which is configured to communicate data via a serial port and at least one virtual serial port application communicatively coupled to the embedded application and the COM port server. The virtual serial port application translates data communicated between the COM port server and the embedded application as if the COM port server and the embedded application were connected by a serial communication link.

One method embodiment includes establishing COM port redirection software emulating at least one COM port connection to the COM port server on the communications device and emulating a serial port driver on the communications device. Establishing COM port redirection software includes initiating a COM port client on a host computer and a COM port server on a communications device emulating at least one COM port connection includes storing data received from the host computer in a buffer and emulating a serial port driver includes taking data from the buffer and translating the data into a predefined format such that at least one embedded application executing on the communication device communicates with the COM port client using the emulated serial port.

In the following detailed description reference is made to the accompanying drawings which form a part hereof and in which is shown by way of illustration specific embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the present invention.

This document discusses among other things systems and methods for communicating data among devices on a network. Devices that communicate serially can be network enabled by connecting them to a device server and installing a serial driver on a host computer to provide serial port redirection. shows a block diagram of portions of a client server system that uses serial port redirection. The system includes an end device coupled to a device server via a serial communication link through serial ports . The device server and the end device include serial ports and serial port drivers to control the communications over serial ports . The system also includes a host computer . A host application that executes on the host computer communicates with an end device application by communicating with the device server over a network . To provide serial port redirection a communication COM port client is included in the host computer and a COM port server is included in the device server . Serial port data from the host application is sent via the network to the device server . From there it is routed directly to the serial port which is connected to the end device . The device server typically increases the cost of the system and raises maintenance issues. Also the end hardware devices can become costly to maintain if the hardware is older is no longer supported by the original manufacturers or is in low supply.

Because it is desirable to allow use of any existing communication protocol and avoid having to create a new communication protocol for the system the embedded application communicates via a serial port. A virtual serial port application is included in the communications device to translate data communicated between the COM port server and the embedded application . This translation makes it appear that the COM port server and the embedded application were connected by a serial communication link.

In some embodiments the virtual serial port application includes a serial port driver in communication with the embedded application and a memory buffer . The serial port driver is a pseudo device driver that implements the standard serial device interfaces e.g. open read write close etc. . The embedded application interacts with the serial port driver as if it was a standard serial port. However instead of reading from or writing to a physical device the serial port driver sends and receives data through a virtual endpoint and the memory buffer then to the COM port server and over the network . Thus the embedded application uses the same interface to communicate over a physical serial port or a virtual serial port. The COM port client communicates data to the embedded application over the network . Serial port data from the host application is sent via the network to the COM port server . From there it is routed directly to the memory buffer which is connected to the serial port driver in communication with the embedded application .

Because the serial port driver is a pseudo driver the communications device is flexible in regards to communication protocols. The serial communication protocol used by the COM port server can be different from the serial communication protocol used by the embedded application . In one embodiment the serial port driver and the memory buffer provide a mapping of the protocol use by the embedded application to the protocol of the COM port server . Typical serial interface settings such as baud rates flow control a number of stop bits and the like do not need to be configured between the host computer and the other communications device . This allows communication between devices and systems that otherwise could not communicate because of serial interface incompatibility.

It should be noted that the system is not a client server system. In a client server system as much processing as possible is offloaded from a device server onto an end device. Here the communications device includes some characteristics of a client server and some characteristics of the end device.

The host computer includes a COM port client that together with the COM port server of the communications device implements COM port redirection. With COM port redirection it appears to a host application that a serial device connected to the COM port server is local to the host computer . Because the communications device includes a virtual serial port application it appears to the host application that an end device is connected locally to the host computer. However the end device is instead replaced with an embedded application .

The COM port client includes a driver to communicate with the COM port server via the network . In some embodiments the driver includes an application programming interface API by which the host application program is granted full control of a remote COM port connection including hardware and software flow control. In some embodiments the network connection between the host computer and the communications device is a bytestream connection and the network uses a TCP IP protocol running on top of an Ethernet protocol. In some embodiments the host computer includes a daemon to execute on the host computer . The daemon uses a STREAMS interface to establish a bidirectional bytestream connection between the driver and the communications device . An approach for providing communication port redirection is described in U.S. Pat. No. 6 047 319 entitled Network Terminal Server with Full API Implementation filed Jul. 17 1996 which is incorporated herein by reference.

In some embodiments the communications device includes a plurality of embedded applications that each emulates an end device. In one such embodiment the host application program communicates with the embedded applications over the network using a plurality of COM port servers and virtual serial port applications . The driver of the COM port client maps a plurality of COM ports servers of the communications device to a plurality of virtual serial port applications . In another embodiment the system includes a plurality of communications devices and the COM port client maps a plurality of COM port servers of a plurality of communications devices to a plurality of virtual serial port applications .

There does not have to be a one to one correspondence between the number of embedded applications that run on the communications device and the number of virtual serial port applications . In some embodiments the communications device includes at least one embedded application that communicates over a plurality of serial ports. A plurality of virtual serial port applications are provided to translate data communicated between a plurality of COM port servers and the embedded application . The host application program communicates with the embedded application via a network and the plurality of virtual serial port applications .

In some embodiments the embedded application emulates an application specific display driver and the communications device includes a video port such as a VGA or SVGA video port to couple to a display. In one example the display is an ASCII terminal display. In another example the display is a vt220 terminal display. A video signal is sent from the communications device to the display. This allows the communications device to implement an application specific display. Examples of an application specific display include without limitation a kitchen display a point of sale display a public information display and a digital advertising display.

A kitchen display is used in a fast food restaurant to display food orders taken at a register. An application running on a host system sends commands to a terminal to display the order on a terminal screen. Typically the commands are sent over a serial line to the terminal such as a VT220 terminal for example. An example of portions of an embodiment of a system that includes an application specific display is shown in . The system includes a VGA or LCD display or monitor a communications device and a host computer .

The communications device replaces the VT220 terminal and any device server. The communications device includes two physical serial ports com 0 and com 1 and one virtual serial port vcom 0 and device driver interface DDI . The communications device also includes a COM port server in communication with two serial endpoints and a virtual endpoint . A terminal emulator embedded application reads commands from a serial port processes the commands and updates the attached display . In this case the terminal emulator embedded application is reading from the virtual serial port .

The host computer includes an operating system OS and a host application . The host application sends VT220 display commands to a terminal via a serial port. The host computer includes a COM port client with three virtual COM ports configured for a remote device. The first two virtual COM ports COM and COM represent the two physical serial ports on the communications device . The third virtual COM port COM represents the virtual serial port on the communications device . The host application is configured to send VT220 display commands to the virtual COM port . The flow of display commands from the host application to the terminal emulator embedded application on the communications device is indicated by the arrows and dashed lines in the FIG.

The host application sends VT220 commands to the virtual COM port as serial data. The COM port client sends the serial data to the COM port server running on the communications device over the network and the Ethernet connections . The COM port client routes the serial data to the virtual endpoint . The virtual endpoint puts the serial data in a shared memory buffer and then signals to the virtual serial port driver a serial port mirror driver that data is available.

The terminal emulator embedded application continually performs reads on the virtual serial port . If data is available in the shared memory buffer the virtual serial port driver removes it from the shared memory buffer and sends it to the terminal emulator embedded application . The terminal emulator embedded application processes the commands in the data and displays the orders on the attached VGA or LCD display . It then repeats the process by reading more commands. Similarly data can flow the other way from the terminal emulator embedded application on the communications device to the host application .

Returning to in some embodiments the embedded application emulates a universal serial bus USB . This allows a host application program that was written to communicate with a serial port to communicate with a USB port. For example suppose that a host application program prints to a serial printer. To replace the serial printer with a USB printer the communications device includes a USB port. The serial printer data can be redirected to the embedded application on the communications device to convert the serial data stream and communicate with a new USB printer using the USB port. Although a printer was used in the example the same setup can be used to convert any serial port communication to a USB communication.

In some embodiments the embedded application emulates one or more serial port drivers. This provides serial port replication. For example if the host application program prints to a serial printer the serial data stream can be sent on to the serial printer using the same or a different serial communication protocol. The serial data stream can also be replicated to one or more additional serial ports included with the communications device . It also allows the serial data stream to be duplicated to a data traffic logging facility to log the serial data traffic.

In some embodiments the embedded application emulates a global positioning system GPS input output I O module. Many GPS modules communicate with other devices using a serial data link. A serial data stream being sent from or to an embedded application which is functioning as the GPS I O module can be redirected over a network to the host application program . In some embodiments the communications device includes a GPS. The GPS communicates with the embedded application which emulates the I O module.

At the method includes emulating at least one serial port driver on the communications device. The serial port driver is communicatively coupled to the COM port server. In some embodiments the emulating includes taking data from the memory buffer and translating the data into a predefined format. The data is translated such that at least one embedded application executing on the communications device communicates with the COM port client using the emulated serial port driver.

The COM port server and the embedded application communicate by reading and writing to the memory buffer instead of reading and writing to a physical serial port. The embedded application may communicate using more than one serial port. Thus in some embodiments the method includes emulating a plurality of serial port drivers on the communications device. The serial port drivers are connected to a plurality of COM port servers. The embedded application communicates data with the application program executing on the host computer over the network using a plurality of emulated COM port connections and emulated serial port drivers. More than one embedded application may execute on the communications device at the same time.

Establishing redirection software allows data from an application program executing on the host computer to be redirected via the network to an emulated COM connection. The network communicatively couples the host computer to the communications device. In some embodiments establishing redirection software includes using a driver that executes in the host computer. In some embodiments establishing redirection software includes giving the application program full control of the emulated COM port including hardware and software flow control using an application programming interface API . In some embodiments the method includes establishing a bidirectional bytestream connection over the network between the driver that executes on the host computer and the COM port server on the communications device.

A network can include a host computer communicating with a plurality of additional communications devices over the network. In some embodiments the method includes emulating at least one COM port connection of a second communications device redirecting data from an application executing on the host computer via the network to the emulated COM port connection of the second communications device using the driver and emulating at least one serial port driver on the second communications device in communication with the emulated COM port connection. An embedded application executing on the second communications device communicates with the emulated COM port over the emulated serial port. Data is communicated over the network between the application program on the host computer and the embedded application of the second communications device.

According to some embodiments the embedded application emulates a hardware device that communicates using a serial port. In some embodiment examples the emulated hardware device includes an application specific display driver. In some examples the emulated hardware device includes a universal serial bus USB . In some examples the method includes emulating a serial port using the embedded application to provide serial port replication. In some examples the emulated hardware device includes a GPS I O module.

The accompanying drawings that form a part hereof show by way of illustration and not of limitation specific embodiments in which the subject matter may be practiced. The embodiments illustrated are described in sufficient detail to enable those skilled in the art to practice the teachings disclosed herein. Other embodiments may be utilized and derived therefrom such that structural and logical substitutions and changes may be made without departing from the scope of this disclosure. This Detailed Description therefore is not to be taken in a limiting sense and the scope of various embodiments is defined only by the appended claims along with the full range of equivalents to which such claims are entitled.

Such embodiments of the inventive subject matter may be referred to herein individually and or collectively by the term invention merely for convenience and without intending to voluntarily limit the scope of this application to any single invention or inventive concept if more than one is in fact disclosed. Thus although specific embodiments have been illustrated and described herein it should be appreciated that any arrangement calculated to achieve the same purpose may be substituted for the specific embodiments shown. This disclosure is intended to cover any and all adaptations or variations or combinations of various embodiments. Combinations of the above embodiments and other embodiments not specifically described herein will be apparent to those of skill in the art upon reviewing the above description.

The Abstract of the Disclosure is provided to comply with 37 C.F.R. 1.72 b requiring an abstract that will allow the reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition in the foregoing Detailed Description it can be seen that various features are grouped together in a single embodiment for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description with each claim standing on its own.

