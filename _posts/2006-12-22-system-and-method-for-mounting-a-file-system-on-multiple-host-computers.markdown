---

title: System and method for mounting a file system on multiple host computers
abstract: Various embodiments of a system and method for enabling multiple computers to mount a file system are described herein. The file system may be mounted on one computer, and a snapshot copy of the file system may be created and mounted on a second computer. Data for a particular file in the file system may be stored at particular storage locations on a storage device. In response to a read request to access data for the particular file through the file system, the data stored at the particular storage locations may be read and returned. Similarly, in response to a read request to access data for the particular file through the snapshot copy of the file system, the data stored at the particular storage locations may be read and returned.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08082230&OS=08082230&RS=08082230
owner: Symantec Operating Corporation
number: 08082230
owner_city: Mountain View
owner_country: US
publication_date: 20061222
---
This invention relates generally to file systems. More particularly the invention relates to a system and method for mounting a file system on multiple host computers.

Computer systems generally store files on storage devices such as disk drives tape drives or optical drives where the files are organized as a file system. File systems typically use directories or folders so that each file is located in one of the directories. The directories are often organized as a hierarchy. For example a file system may have a root directory the root directory may have sub directories and the sub directories of the root directory may in turn have sub directories etc. Each file in the file system may have a pathname that specifies the hierarchical sequence of directories that lead to the file.

Software applications executing on the computer system typically request the file system to create files and write data to the files. The data written to the files is also referred to herein as user data. In addition to the user data that is written to the files the file system also maintains metadata for managing the user data. For example the metadata may include file descriptors e.g. inodes or other data structures that correspond to the various files in the file system. The inode for a file stores information about the file such as the number of bytes in the file protection and permission information a link count that specifies the number of hard links to the file storage locations of data blocks for the file s user data the dates and times when the file was created last accessed and modified etc.

Each directory may have a table of directory entries that maps the names of the files in that directory to their corresponding metadata e.g. inodes or other file descriptors . A software application may access a file if it knows the pathname of the file. For example the sequence of directories leading to the file may be traversed until the file s directory is reached and the table of directory entries for the file s directory may be consulted to map the name of the file to the file s corresponding inode or other metadata. The file s metadata may then be accessed and the information stored therein may be used to access the file s user data. For example as noted above the metadata may specify storage locations e.g. addresses of data blocks e.g. data blocks on a disk drive or other storage device that hold the file s user data. Thus the data blocks may be accessed for example to read data from the file or to append new data to the file.

In some applications it would be desirable to mount a file system on multiple computer systems. However two different computer systems typically cannot mount the same file system without introducing the potential for corrupting the file system or returning the wrong data on a file read.

Various embodiments of a system and method for mounting a file system are disclosed. The file system may include metadata for managing user data stored in a plurality of files. According to one embodiment of the method the file system may be mounted on a first computer. Mounting the file system enables access to the plurality of files through the file system.

A snapshot copy of the file system may be created and the snapshot copy of the file system may be mounted on a second computer. Mounting the snapshot copy of the file system enables access to the plurality of files through the snapshot copy of the file system. For example the plurality of files may include a first file having user data stored at selected storage locations specified by the metadata of the file system. In response to the snapshot copy of the file system receiving a read request to access the first file the user data stored at the selected storage locations may be read.

While the invention is susceptible to various modifications and alternative forms specific embodiments thereof are shown by way of example in the drawings and are described in detail. It should be understood however that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.

Various embodiments of a system and method for enabling multiple computers to mount a file system are described herein. The file system may be mounted on one computer and a snapshot copy of the file system may be created and mounted on a second computer. As described in detail below the snapshot copy of the file system may be created without copying the user data for the files in the file system. For example the user data for a first file in the file system may be stored at particular storage locations e.g. storage locations on a storage device. In response to a read request to access user data for the first file through the file system the data stored at the storage locations may be read and returned. Similarly in response to a read request to access user data for the first file through the snapshot copy of the file system the data stored at the storage locations may be read and returned. Thus the exact same data stored at the same storage locations is returned whether the file is accessed through the file system mounted on the first computer or the snapshot copy of the file system mounted on the second computer.

The memory may be configured to store program instructions and or data. In particular the memory may store I O software which may be executed by the processor . The I O software may be operable to perform input output operations to read data from and or write data to the files in a file system or snapshot copy of a file system . The I O software may also implement the methods described below for mounting and using a snapshot copy of the file system. In some embodiments the I O software may execute in conjunction with storage system software executing on the storage system as described below. In various embodiments the I O software and storage system software may include any of various types of software for performing input output operations such as file system software volume manager software etc.

It is noted that the processor is representative of any type of processor. For example in one embodiment the processor may be compatible with the 86 architecture while in another embodiment the processor may be compatible with the SPARC family of processors. Also in one embodiment the computer system may include multiple processors .

The computer system may also include one or more input devices for receiving user input from a user of the computer system . The input device s may include any of various types of input devices such as keyboards keypads microphones or pointing devices e.g. a mouse or trackball .

The computer system may also include one or more output devices for displaying output to the user. The output device s may include any of various types of output devices such as LCD screens or monitors CRT monitors etc.

The computer system may also include a network connection through which the computer system couples to the storage system and possibly also to other computer systems . The network connection may include any type of hardware for coupling the computer system to a network e.g. depending on the type of network. In various embodiments the computer systems may be coupled to the storage system and or coupled to each other via any type of network or combination of networks. For example the network may include any type or combination of local area network LAN a wide area network WAN an Intranet the Internet etc. Exemplary local area networks include Ethernet networks Fiber Distributed Data Interface FDDI networks and token ring networks. Also each computer may be coupled to the network using any type of wired or wireless connection medium. For example wired mediums may include Ethernet fiber channel a modem connected to plain old telephone service POTS etc. Wireless connection mediums may include a satellite link a modem link through a cellular service a wireless link such as Wi Fi a wireless connection using a wireless communication protocol such as IEEE 802.11 wireless Ethernet Bluetooth etc.

In the illustrated embodiment the storage system includes a processor coupled to a memory . The memory may store storage system software which is executed by the processor . The storage system software may store data on and or read data from the storage devices e.g. in response to a request from the I O software executing on a computer .

Although illustrate an embodiment in which the computers couple to a shared storage system on which files in a file system are stored in other embodiments the computers may not couple to a shared storage system . For example in one embodiment each computer may have its own separate storage device s e.g. such as illustrated in . Thus instead of storing the files in a file system on a shared storage system the files may be stored on the storage device of one of the computers . A second computer may mount a snapshot copy of the file system. In response to read requests to access files through the snapshot copy of the file system the second computer may communicate with the first computer on which the original file system is mounted in order to read the data from the storage device of the first computer .

In a request to mount the file system on a second computer or a request to mount a snapshot copy of the file system on the second computer on a second computer may be received. For example an application program executing on the second computer may call an API provided by the I O software in order to request that the file system be mounted on the second computer.

In response to the request to mount the file system on the second computer a snapshot copy of the file system may be created as indicated in . The snapshot copy of the file system also referred to herein as the snapshot file system is a point in time representation of the file system at the snapshot copy time is created. Thus the snapshot file system represents the state of the file system at the time the snapshot file system is created.

The snapshot file system is preferably performed without copying the user data of the file system. As described below in one embodiment creating the snapshot file system may comprise creating an instant snapshot without copying either the user data or the metadata of the file system. In another embodiment the metadata of the file system may be copied to the snapshot file system but the user data is not copied.

In the snapshot copy of the file system may be mounted on the second computer. Mounting the snapshot copy of the file system enables access to the plurality of files through the snapshot copy of the file system. For example various application programs executing on the second computer may perform read requests to read data from files through the snapshot copy of the file system.

Thus the method of may enable the file system to be mounted on the first computer at the same time a snapshot copy of the file system is mounted on the second computer. It is noted that in further embodiments additional snapshot file systems may be mounted on other computers e.g. so that a plurality of snapshot file systems are mounted on a plurality of different computers.

In one embodiment the second computer may only use the snapshot file system for reading data from the files but may not write data to the files through the snapshot file system. For example the snapshot file system may be mounted on the second computer for read accesses only. The first computer may be able to read data from the files and or write data to the files. For example the file system may be mounted on the first computer for read accesses and or write accesses. However the user data in the files may be of a fixed nature such that once the snapshot file system is created the user data is not changed. However as described below in some embodiments the first computer may still add new data to the file system e.g. by creating new files even after the snapshot file system has been created.

For example suppose that the file system includes a first file having user data stored at selected storage locations. The metadata A includes metadata that specifies the storage locations at which the user data for the first file is stored. For example the metadata A may specify logical or physical addresses or other storage locations at which the user data for the first file is stored. Thus the metadata B also specifies the storage locations at which the user data for the first file is stored since the metadata B is a copy of the metadata A. In response to a read request to access the first file the metadata B may be accessed. More particularly the portion of metadata B that corresponds to the first file and specifies the storage locations at which the user data for the first file is stored may be accessed. The user data stored at the specified storage locations may then be read. Thus the snapshot file system may effectively enable the second computer to access the files in the file system while the file system is already mounted on the first computer and without creating a separate copy of the user data.

When a request to read a file through the snapshot file system is received metadata corresponding to the file may be read from the metadata A for the file system . Thus the metadata needed for accessing files through the snapshot file system may be read from the metadata A for the original file system as necessary.

In some embodiments the computer system A may add new user data to the user data A in the file system after the instant snapshot copy of the file system has been mounted on the computer system B. For example the computer system A may add one or more new files to the file system . Adding new user data to the user data A may require changes to the metadata A in the file system . In this situation the portion of metadata A which is required to change may be copied into the metadata B of the snapshot file system e.g. using a copy on write technique so that the snapshot file system retains a copy of the metadata as it was when the instant snapshot was performed.

In some embodiments metadata may be copied from the metadata A in the file system to the metadata B in the snapshot file system at the block level. For example as illustrated in when the instant snapshot file system is created space for metadata B for the instant snapshot file system may be allocated but the space may initially be empty or uninitialized e.g. may not yet store any metadata. If a write request received through the file system requires a change to a block A in the metadata A then the block A may be copied to the metadata B e.g. may be copied into the space allocated for the metadata B in the snapshot file system as illustrated in . Similarly a subsequent change to a block B in the metadata A e.g. caused by another write request may cause the block B to be copied to the metadata B in the snapshot file system as illustrated in . Thus as illustrated in after performing one or more write operations through the file system after the snapshot file system has been created the metadata B of the snapshot file system may have a partial copy of the metadata A as it existed at the time the instant snapshot was performed to create the snapshot file system .

The system may store a map table data structure or other information indicating which blocks or portions of metadata have been copied into the metadata B of the snapshot file system . When a read request is received through the snapshot file system the system may use the map table data structure to determine whether the snapshot file system has metadata corresponding to the requested data e.g. may determine whether such metadata has previously been copied from the metadata A of the file system to the metadata B of the snapshot file system . If so then the system may read the user data referenced by the corresponding portion of metadata B of the snapshot file system and return the user data it references in response to the read request. Otherwise the system may read the corresponding metadata in the metadata A of the file system and return the user data it references in response to the read request. Regardless of whether the metadata A of the file system or the metadata B of the snapshot file system is used to look up the user data the user data is read from the user data A of the file system since the snapshot file system does not have user data of its own.

As discussed above in some embodiments a copy on write technique may be utilized to copy blocks or other organizational units of metadata from a file system to a snapshot copy of the file system e.g. so that the original blocks of metadata of the file system are preserved in the snapshot copy of the file system. Thus the metadata blocks copied into the snapshot copy of the file system reflect the state of the metadata blocks at the time the snapshot copy of the file system was created and thus indicate where given portions of user data were stored at the time the snapshot copy of the file system was created. As described above a read request to access a given file through the snapshot copy of the file system may be received and the metadata blocks copied into the snapshot copy of the file system may be used to read the user data for the file where the metadata blocks copied into the snapshot copy of the file system reference the storage locations where the user data was stored at the time the snapshot copy of the file system was created. Thus in some situations in order to read the correct user data in response to the read request the user data of the original file system may need to remain at the same storage locations where it was stored at the time the snapshot copy of the file system was created. Thus in some embodiments the system may be configured to prevent the user data of the original file system from being reorganized after the snapshot copy of the file system is created. For example the system may keep track of the fact that the snapshot copy of the file system has been created and may prevent operations that would move user data to new storage locations from being performed. For example in one embodiment the system may prevent operations such as defragmentation operations shrink operations grow operations or write operations that would cause user data blocks to be moved or reorganized.

As discussed above when a file system is mounted for writing on one computer system and a snapshot of the file system is mounted for reading on another computer system it may be necessary to copy metadata from the original file system to the snapshot of the file system when the original file system is written to. In one embodiment the I O software may implement a software interface that enables a write operation to specify whether the data being written is user data or metadata. Thus if the write operation specifies that the data is user data then the data is simply written as usual. If however the write operation specifies that the data is metadata then the metadata may be copied to the snapshot of the file system before it is changed as discussed above.

In another embodiment the user data and the metadata may be stored in separate storage areas. For example in one embodiment user data for the file system may be stored in one volume and metadata for the file system may be stored in another volume. Thus the system can know whether metadata or user data is being written depending on which volume is being written to.

The system is discussed above in terms of mounting a file system on a first computer system where the first computer system can read and or write to the file system and mounting a snapshot of the file system on a second computer system where the second computer system can only read from but not write to the snapshot of the file system. It is noted that in further embodiments any number of computer systems may mount respective snapshots of the file system for reading. For example the file system may be mounted on a first computer system where the first computer system can read and or write to the file system and three different snapshots may be created and mounted on three other computer systems where the three other computer systems use their respective snapshots for reading user data from the file system similarly as discussed above.

It is also noted that a given computer system may be operable to both mount a file system for writing and mount a snapshot of another file system for reading. Thus in a system such as illustrated in multiple of the computer systems may act as writers and multiple of the computer systems may act as readers. However for any given file system there is preferably only one writer.

Although only one computer system at a time may mount a given file system for writing in some embodiments the file system may be moved to different computer systems over time. For example a first computer may mount the file system for writing and the file system may later be un mounted from the first computer and re mounted for writing on a second computer . Thus for example different computer systems may be selected at different times to host the file system for writing. Any of various criteria may be used to determine which computer system to select for hosting the file system such as the availability of processor time or various other types of computing resources or characteristics of the available computer systems .

Various embodiments of the system described above may be used in any of various types of applications in which it is desired to mount a file system on multiple host computers. illustrates one example in which the system is used in a backup application e.g. where the system includes multiple backup server computers for writing new backup images and or reading existing backup images. In the example of a backup server B has mounted a file system for writing and has written a backup image A e.g. where the backup image A is represented as one or more files in the file system . Since the backup image A is not expected to change over time other backup servers can mount snapshot copies of the file system in order to read the backup image A at the same time the file system is mounted for writing by the backup server B. For example the backup server A has mounted a snapshot file system A as a snapshot copy of the file system . The snapshot file system A may enable the backup server A to read the backup image A where the actual user data is read as described above. Similarly the backup server C has mounted a snapshot file system B as another snapshot copy of the file system . Thus multiple backup servers can read from the backup image A while the file system is mounted for writing on the backup server B.

As described above after the snapshot file systems A and B have been created the backup server B may still write new data to the file system . For example as shown in the backup server B has created a second backup image B in the file system e.g. where the second backup image B is represented as one or more new files. As described above metadata may be copied from the file system to the snapshot file systems A and B in response to writing the new files for the second backup image B.

It is noted that various embodiments may further include receiving sending or storing instructions and or data implemented in accordance with the foregoing description upon a computer readable memory medium. Generally speaking a computer readable memory medium may include storage media or memory media such as magnetic or optical media e.g. disk or CD ROM volatile or non volatile media such as RAM e.g. SDRAM DDR SDRAM RDRAM SRAM etc. ROM etc. for storing program instructions. Such a computer readable memory medium may store program instructions received from or sent on any transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as network and or a wireless link.

Although the embodiments above have been described in considerable detail numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications.

