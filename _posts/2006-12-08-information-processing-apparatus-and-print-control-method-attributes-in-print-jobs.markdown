---

title: Information processing apparatus and print control method attributes in print jobs
abstract: An apparatus and method for controlling printing including setting a print attribute to a specific page or a specific page range in a print job, permitting an application to produce print data, analyzing the print data and searching for a page break code in a case where the application is permitted to produce the print data and the print attribute in the print job is set, and inserting, into the print data, a print attribute command to specify the print attribute, wherein the print attribute command is inserted according to the result of the search for the page break code.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07952730&OS=07952730&RS=07952730
owner: Canon Kabushiki Kaisha
number: 07952730
owner_city: Tokyo
owner_country: JP
publication_date: 20061208
---
The present invention relates to an information processing apparatus and a print control method that applies to a print system in which a client computer installed with an application and a printer driver is connected to a printer via a communication medium. More specifically the present invention relates to an information apparatus and a print control method configured to change print attribute in the case where different print attributes are set to specific pages in a midpoint of a print job with respect to print data produced by the application.

There is a demand that in performing printing through an application by using a printer driver a print attribute different than a print attribute for an entire job should be set to a specific page or a specific page range.

For example in producing a document including a plurality of chapters there is a case where it is desired that a color paper is used only for a first page of a chapter and a white paper is used for other pages. In this case the setting is such that a white paper is used for the entire job and a color paper is used only for a first page of a chapter. The latter setting for the color paper is different than the print attribute setting for the entire job. Further there is a case where it is desired that a setting different than the print attribute setting for the entire job is performed to specific page or page range with respect to paper size one sided printing or two sided printing finishing or color setting.

In this regard in recent years a printer driver is capable of performing a print attribute setting to a specific page or page range that is different from the print attribute setting for the entire job. Thus printing can be implemented by changing the print attribute at a page break and applying different print attributes to respective pages. Japanese Patent Application Laid Open No. 2004 126871 discusses a system in which a rendering command of a document is issued from an application to a rendering unit i.e. graphic device interface hereinafter referred to as GDI of an operating system hereinafter referred to as an OS and a printer driver receives a metafile that the GDI produces so as to produce print data. In a system like this a printer driver converts a received metafile into print data according to print settings made page by page. In addition Japanese Patent Application Laid Open No. 2003 058334 discusses a technique in which intermediate data that a GDI produces is spooled the intermediate data is edited according to a setting as to a number of copies for each page and a print instruction is issued via the GDI again so as to produce print data whose number of copies is separately set for each page.

As described above a typical printer driver receives a rendering command from an application via a GDI so as to produce a print job by packing print data for each page which is produced based on the received rendering command.

Meanwhile in recent years an application itself directly produces a page description language PDL code so as to send the produced PDL code via a printer driver. For example an application produced by Adobe Systems Inc. is capable of producing print data having a postscript hereinafter referred to as PS format. The PS data can also be produced by a printer driver. However with respect to a document image produced by the application of Adobe Systems Inc. when a rendering command is issued according to a GDI of an OS a quality of the image is degraded because the image quality depends on a function of the GDI.

For example a GDI does not reproduce gradation very well. Accordingly in conforming to a GDI rendering command in Microsoft Windows it is necessary to segment a rendering command by a unit in which lightness and color tint are stepwise changed. Accordingly it is difficult to perform gradation such as tone reproduction.

In the technique in which an application itself produces print data high quality print data can be produced without conforming to a rendering function of a GDI. In such a print processing system in which an application produces print data that can be interpreted by a printing apparatus a system like this is called a pass through system a rendering unit of an OS and a printer driver do not process the print data. In the pass through system a printer driver does not perform analysis and editing to print data and accordingly a print attribute cannot be changed while a print job is being performed.

In order to eliminate this defect Japanese Patent Application Laid Open No. 2002 091728 discusses a technique in which when a specific print setting such as N up and bookbinding is specified through a user interface screen of a printer driver use of a pass through processing system is inhibited so that the printer driver can produce print data instead of allowing an application to produce print data. Since a printer driver inhibits an application to use a pass through processing system a print attribute can be changed page by page in addition to performing N up printing and a bookbinding printing. However in this case just as in the case of a conventional technique an application needs to issue a rendering command by using a rendering function that depends on a GDI of an OS which degrades print quality.

As described above in a pass through processing system of a conventional technique an application itself directly produces a PDL code and a printer driver does not perform any processing. Accordingly a print attribute cannot be changed while a print job is being executed.

In addition in processing where a printer driver produces print data an application issues a rendering command in conformity to a rendering processing capacity of an OS. Accordingly quality of a document produced by a high performance application is undesirably degraded.

In order to eliminate these defects there is a method of producing a print job called a job ticket system . In the job ticket system print data produced by an application is sent to a printer together with a job ticket that includes a print attribute for each page. The job ticket refers to data that include settings for print attributes. The job ticket is added to a header portion of a print job and sent to a printer separate from print data for each page. In this manner the print data itself is produced by an application and accordingly the high image quality can be maintained. In addition a print setting can be changed while a print job is being performed because print settings for each page are described in the job ticket.

However in the job ticket system a printer needs to analyze a job ticket. Accordingly a function for changing a print attribute during a print job cannot be provided to a general purpose printing apparatus.

The present invention is directed to a technique that can be applied to a general purpose printing apparatus in which even if an application produces print data a printer driver adds a command to change a print attribute to print data. Accordingly the print attribute can be changed during a print job.

According to an aspect of the present invention an information processing apparatus configured to execute an application that issues a rendering command so as to print a document and a print control program serving as a printer driver that produces a print job including print data that a printing apparatus can interpret based on the rendering command includes a print attribute setting unit configured to set a print attribute to a specific page or a specific page range in the print job according to an instruction by a user issued through a print setting screen of the print control program a permission unit configured to permit the application to produce print data that the printing apparatus can interpret an analysis unit configured to analyze the print data produced by the application and search for a page break code when the application is permitted by the permission unit to produce the print data and when the print attribute setting unit sets the print attribute for a specific page or a specific page range in the print job and a command insertion unit configured to insert a print attribute command to specify the print attribute into the print data produced by the application so as to provide the specific page or the specific page range with the print attribute according to a result of search for the page break code by the analysis unit.

Other features of the present invention will be apparent from the following description taken in conjunction with the accompanying drawings in which like reference characters designate the same or similar parts throughout the figures thereof.

Various exemplary embodiments features and aspects of the invention will be described in detail below with reference to the drawings. It should be noted that the relative arrangement of the components the numerical expressions and numerical values set forth in these embodiments do not limit the scope of the present invention unless it is specifically stated otherwise.

Referring to a printing system according to the present exemplary embodiment includes a client personal computer PC a client PC and a printer which are mutually connected via a network . In this printing system two client PCs are illustrated in to show that a plurality of client PCs exist on the network . Since the two client PCs have a same configuration only the client PC is described below as a representative of the client PCs.

The client PC is installed with applications for producing a document and a printer driver that produces print data that the printer can interpret. The printer interprets the print data that is input through the network so as to perform print processing of printing data for each page according to print attributes.

Referring to the host computer includes a CPU that operates based on a document processing program that is stored in a program ROM area of a ROM or in an external memory . The CPU controls processing of a document that includes a graphic an image a text and a table in a mixed manner and print processing performed based on the document processing including processing according to each exemplary embodiment of the present invention as described below.

The CPU controls each device that is connected to a system bus . The program ROM area of the ROM and the external memory respectively store a program of an OS for controlling the CPU and the like. A font ROM area of the ROM and the external memory respectively store font data and the like that is used in the document processing. A data ROM area of the ROM and the external memory store various data used in the document processing. A RAM functions as a main memory and a work area for the CPU .

A keyboard controller KBC controls a key input from a keyboard KB and a pointing device not shown . A CRT controller CRTC controls a display by a CRT display CRT . A disk controller DKC controls access between the external memory and a hard disk HD and a floppy disk FD .

The external memory stores a boot program various applications font data a user file an editing file and a print control program hereinafter referred to as a printer driver of the present invention. A printer controller PRTC is connected to the printer via an interactive interface in order to perform processing for controlling communication with the printer .

The CPU opens various windows on the CRT according to commands instructed by a user using the keyboard or pointing device in order to perform various data processing. To perform a printing operation a user opens a window related to print settings in order to perform setting of a printer and setting of the printer driver as to a print processing method including selection of a print mode.

The printer is controlled by a printer CPU . The printer CPU outputs an image signal as print output information to a printing unit printer engine which is connected to a system bus via a printing unit interface I F based on a control program stored in a ROM or an external memory .

The control program for the CPU is stored in a program ROM area of the ROM . In a font ROM area of the ROM font data used in producing the print output information is stored. In a data ROM area of the ROM in the case of a printer that does not include the external memory such as a hard disk HD information utilized on a computer is stored.

The CPU is capable of processing communication with a computer via an input unit . Thus the CPU is capable of notifying information in a printer to the host computer . A RAM functions as a main memory and a work area for the CPU . Memory capacity can be expanded using an optional RAM connected to an additional port not shown . The RAM is used as an output information expansion area an environmental data storage area and a non volatile RAM NVRAM .

Access to the external memory and an IC card is controlled by a memory controller MC . The external memory is connected as an optional memory to store font data an emulation program and form data. The input unit includes a switch for an operation on an operation screen and an LED display device. The printer can include an NVRAM not shown to store printer mode setting information that is sent from an operation unit .

The printing unit is an electrophotographic engine. Accordingly the print data recorded onto a medium such as a paper by dots of a toner. The printing method of the present invention is not limited to the electrophotographic system. For example the present invention can be applied to any printing apparatus in which dots are formed to perform printing such as an inkjet printer.

Referring to a print dialog screen is displayed when a user selects a print command from the application and is used for performing a setting as to an output destination and a simple print setting. Among setting items in the print dialog screen is a field by which a user selects a printer driver for the output destination that is a target of printing. An IP address of the printing apparatus is set to each printer driver as a port of the output destination. The selection field allows a user to select the device the user desires to use as the output destination for a print job.

A page setting control field is used for selecting what page or pages from the document are to be printed. A print count setting control field is used for specifying the number of copies of the page s selected in the page setting control field that are to be printed. The user increases or decreases the number of copies by selecting the appropriate arrow of the print count setting control field . A property button is used to set detailed properties associated with the device selected in the sending destination selection field . In response to selection of the property button by a user various detailed setting screens as illustrated in are displayed on a display screen of the client PC .

When a user selects an OK button printing according to the settings selected by the user and or the default settings is initiated. Selection of a cancel key results in cancellation of the printing.

In the operation screen tab keys such as a page setting finishing and print quality are shown. The user selects the tab keys to perform settings as to various different detailed print output conditions.

A paper orientation setting field allows a user to set whether the document to be printed in a portrait vertical orientation or a landscape horizontal orientation. A copy number setting field allows a user to set the number of prints to be made for a print job.

In the operation screen illustrated in a printing method setting field allows a user to select a printing method which includes but is not limited to one sided printing two sided printing and bookbinding printing. A binding margin setting field allows a user to set a bookbinding orientation of the document to be printed. The bookbinding orientation includes but is not limited to a long edge left a long edge right a short edge top and short edge bottom .

When a user selects a restore defaults key any print details settings made via the operation screen are returned to default values. When the user selects an OK key any print detail settings made via the operation screen become effective and then the screen returns to the screen illustrated in . When the user selects a cancel key any print detail settings are canceled and the screen returns to the screen illustrated in .

Although not illustrated in when a user selects the paper feed tab the user can specify properties associated with the way paper is fed into the printer . When a user selects the print quality tab the user can select and or set properties affecting the appearance of the document such as resolution and halftone when the document is printed.

Referring to a top cover back cover setting button is a button for setting a top cover and a back cover separate from a document body. An insert paper button is a button for a setting as to a paper to be inserted separate from a document body. A page exception setting button is a button for performing a setting for a specific page or a specific range of pages different from the job setting.

A special settings list displays a list of items and settings different from the job settings that are set by above described buttons. A left column is a page column that indicates a specific page or a specific page range to which the setting is performed. A center column indicates an item for the setting. A right column displays a content of the setting.

With respect to a group of special settings that are enumerated in the special setting list when the same settings are set for adjacent pages or page ranges the lists of items can be combined using a combining button . The lists are combined in a manner such that a user selects the adjacent settings to be combined from among the special settings list and then selects the combining button . In addition if there is a setting that a user wishes to delete from the special settings list the user selects the settings to be deleted and then selects a delete button .

If the user wishes to change a content of setting among the special settings enumerated in the special setting list the user selects the settings to be changed and then selects a setting button to change the setting. The contents of the screen displayed in the screen of is only an example and any other items that would allow setting of printing attributes can be displayed. When the user selects an OK key any settings made via the operation screen become effective and then the screen returns to the screen illustrated in . When the user selects a cancel key any settings are canceled and the screen returns to the screen illustrated in .

Referring to a control field is a field for setting pages and a page range. If a specific page is specified the user inputs the same page number to both an item first page number of exception and an item last page number of exception and the value set by the controls described below are applied only to the specified page. A control field is used for performing settings for the page and or page range set in the control field which are different than the settings for a job. The user can set a paper type a paper size and whether one sided printing or two sided printing is applied.

A control field is also used for performing settings for the page and or page range set in the control field which are different than the settings for a job. In the control field the user can perform a setting related to color. More specifically the user can set a color mode a half tone and an input profile. When the user selects an OK key after performing settings via control fields and the selected settings are applied. In order to cancel the applied settings the user selects a cancel key . When the user selects the cancel key the printer driver discards the settings for each of the control fields and and then terminates the display illustrated in .

The dialog illustrated in includes a device setting tab. By using the device setting tab in the dialog the user performs a setting as to device configuration information and the printer driver. A control field is used for setting a mounting state of paper feed options. A control field is used for setting a mounting state of paper discharge options. A control field is used for performing a setting for the printer driver. More specifically the user performs a setting as to whether an output of a page description language PDL code from the application is permitted or inhibited. The control field includes alternative items namely an alternative that always permits the PDL output from the application an alternative that always inhibits the PDL output and an alternative that indicates whether the PDL output is permitted or inhibited.

The operation mechanism for the PDL code output from the application is described below with reference to and . When the user selects an OK key after performing settings through control fields and the selected settings are implemented. To cancel the applied settings the user selects a cancel key . Upon selection of the cancel key the printer driver discards the settings and then terminates the display illustrated in .

As described above the user selects an OK button on the screens described above in order to implement the various output conditions i.e. print attributes that were set via those screens. In the print job the print attributes associated with a specific page and or specific range of pages which are different than the print attributes associated with the entire job are specified as a print command in the print data.

The printer driver includes a user interface driver and a graphic driver . The user interface driver displays a user interface and stores a setting. The graphic driver converts a print rendering command instructed from the application through the OS into print data that can be interpreted by a printer. The user interface driver displays the print setting dialog and the property sheet as illustrated in when the print setting is instructed from the application through the OS .

Printer driver setting storage area is controlled by the OS . The print attributes that the user sets using the user interface driver are stored in the printer driver setting storage area . The user interface driver the graphic driver and the application software can access the printer driver setting storage area through the OS to read the print attributes that the user sets.

The host computer is connected to a printer through a communication medium such as a local area network via a communication interface I F of the host computer and a communication I F of the printer . The graphic driver is capable of sending print data to the printer via the OS . In addition the graphic driver is capable of acquiring printer configuration information and printer status information through the OS .

The following is a description of the processing starting from the selection of a print menu from an application menu through a print attribute setting on the printer driver to an output of the print job at the printer .

The processing for setting the print attributes through the client PC is described with reference to . The application referred to here is a common application. The application corresponds to a type that issues a command for rendering a document to a rendering unit GDI of the OS .

First in step S when the user selects a menu for a print setting from a menu of the application software the client PC displays the print dialog screen illustrated in . When the user selects the property button in the print dialog screen then in step S the application calls an application programming interface API of the OS . The API is called to instruct the printer driver to display a property sheet for setting a print attribute. Upon receiving the instruction in step S the user interface driver of the printer driver displays the property sheet for setting the print attribute illustrated in .

Then in step S the user specifies the desirable print attribute setting on the property sheet and the dialog screens illustrated in and then the printer driver inputs the values set for each print attribute. After performing the print attribute setting the user selects the OK button in order to implement the set print attribute. Upon selecting of the OK button in step S the user interface driver calls the API of the OS to store the values in the printer driver setting storage area set for the print attribute by the user. Thus the setting of the print attribute and the storing of the values set for the print attribute are completed.

Next the print processing processing for producing a print job in the client PC is described with reference to .

In printing a document the user selects a print menu from a menu of the application software . In step S the application software calls the API of the OS when an instruction to perform printing from the print menu is given by the user. Then the printer driver receives an instruction to start the printing which is a print request. The print setting dialog illustrated in is displayed in the course of the processing. Upon receiving the print request the OS instructs the printer driver to start printing.

Next in step S the printer driver reads the print attribute setting values stored in the printer driver setting storage area in response to the instruction to start the printing. Then the application software issues a rendering command to a graphic engine GDI of the OS . Then in step S the OS outputs a rendering function to the printer driver . The printer driver receives the rendering command through the OS .

Flow then proceeds to step S where the graphic driver of the printer driver produces print data of each physical page from the input rendering command according to the read print command. Note that the physical page has a page size equivalent to a size of one page of a print paper. A logical page has a page size equivalent to a size of one page in the rendering command for the document that an application outputs. When one page per sheet is specified in the page layout one physical page is equivalent to one logical page. When two pages per sheet is specified in the page layout one physical page is equivalent to two logical pages.

Then in step S the printer driver performs wrapping with a job control language such as a job language JL based on the produced print data of each physical page to produce a print job. Then in step S the printer driver outputs the produced print job via a spooler not shown of the OS . Thus the print job is sent to the printer via the network .

By performing the processing as described above the user can set the print attributes and output the print job to the printer .

The following description relates to an application that produces the PDL code by itself. Hereinafter the application that produces the PDL code by itself is referred to as a pass through application . The application that produces the PDL code by itself is called as a pass through application because the PDL code that the application produces by itself is output to pass through a printer driver without being processed by the printer driver.

First in step S the user selects the print menu from the application menu which results in a print request being issued from an application program through an OS to a printer driver . When necessary the user sets the print attributes. The flow of setting the print attributes is the same as the flow illustrated in thus the detailed description is omitted herein. Then in step S the application program inquires of the printer driver whether the printer driver supports a pass through print processing system. A user can set whether the application supports the pass through print processing system. Accordingly the printer driver switches between permitting or inhibiting the application from using the pass through print processing system based on the setting values in item illustrated in .

If in step S the printer driver responds that the printer driver does not support the pass through printing the processing advances to step S. The printing process of step S is the same as print processing described above with respect to thus a detailed description is omitted herein. If in step the printer driver responds that the printer driver supports the pass through printing i.e. that the pass through printing is permitted the processing advances step S.

In step S the application program issues an instruction to a graphic driver of the printer driver to start printing. Then in step S the graphic driver reads print attribute setting values stored in a printer driver setting storage area . The application then acquires the set print attributes from the printer driver .

Then in step S the application produces PDL code by itself according to the acquired print attributes. Then the OS and the printer driver transfer and output the PDL code without editing the PDL code through a pass through printing path . In general because most of the PDL code data is produced by the application the data produced by the application is sent to the printer driver and a printer in different transfer packets. Finally in step S the printer interprets and renders the print attribute code and the print code to perform printing and then the processing ends.

One difference from the structure illustrated in is an inner structure of a graphic driver that configures the printer driver. The inner structure is described in detail with reference to . Another difference is a page break code table . The page break code table is a table of codes used for the PDL code produced by the pass through application itself. The page break code table is described in detail with reference to .

Referring to a column indicates a pass through application name a column indicates a pass through application version and a column indicates a page break code of the PDL code produced by the pass through application. For example a row indicates that the PDL code produced by a version of an application A is showpage . Accordingly as is described below the printer driver needs to switch between page break codes that serve as references for determining a page break depending on the type of application that issues a print request.

The method for setting print attributes by the user is the same as the flow chart of and the method for instructing start of printing is the same as the flow chart of . Accordingly the flow chart of describes the operation of the printer driver for the processing in step S in .

First in step S the printer driver determines whether a pass through switch of a printer driver user I F is turned on. This determination is made based on setting values for the printer driver user I F that are stored in a printer driver setting storage area and are acquired by the printer driver through an OS . The pass through switch of the printer driver is the control field illustrated in . The switch is used for deciding whether the production and sending of the PDL code by the pass through application is permitted. According to operation of the switch the printer driver responds to the pass through application in response to an inquiry regarding pass through support status issued from the pass through application to the printer driver.

If the switch is set to permit the PDL output from the application the printer driver responds to the pass through application that the printer driver supports the pass through output . When the switch is set to inhibit the PDL output from the application the printer driver responds to the pass through application that the printer driver does not support the pass through output. The switch exists in the user I F of the printer driver because if the application itself produces the PDL code and the printer driver performs the pass through processing a high performance function of processing by the printer driver cannot be used. For example poster printing a function for enlarging and outputting a one page document into plural sheets such as 2 2 sheets cannot be used in this case and accordingly the switch for determining whether the pass through printing is permitted or inhibited is provided to the user I F.

If the pass through switch of the printer driver is set to inhibit the pass through printing in step S the processing advances to step S to perform normal printing system and then the processing ends. If the pass through printing by the printer driver is permitted in step S the processing advances to step S. In step S the printer driver acquires an application name and an application version by an application name version acquirement module of a graphic driver . The printer driver is capable of acquiring the application name and the application version through an API of an OS.

In step S an application type determination module of the graphic driver of the printer driver determines whether the application is a pass through application. This determination is made by scanning the application name in the page break code table of the pass through application in . In scanning the page break code table the printer driver accesses a page break code table area through the OS .

If the application name acquired in step S is not a pass through application normal printing is performed. Accordingly the processing advances to step S to perform the normal printing and then the processing ends. If the application is a pass through application in step S the processing advances to step S.

For description purposes it is presumed that an application having an application name application C and a version is acquired. In step S the printer driver determines whether different print attribute settings are performed for each page or each page range in a special setting sheet of the printer driver user I F. This determination is performed in a manner such that a print setting status determination module of the graphic driver accesses the printer driver setting storage area through the OS . In this example different print attributes are set to each page range as shown in the special setting list and accordingly the processing advances to step S.

When different attributes are not set per each page or page range in step S the printer driver does not need to change the print attribute by the page break and accordingly the processing advances to step S. In step S the printer driver performs normal pass through printing that is sends the PDL data that the pass through application produces as is to the printer.

In step S the printer driver acquires a page break code of an application from the page break code table using the application name and the version number as the key. As described above for description purposes the application name is application C and the version is 1 . Accordingly the printer driver acquires the page break code showpage illustrated in .

Next in step S the printer driver acquires the PDL data from the pass through application. Then in step S the printer driver searches the PDL code acquired by step S for the page break code showpage acquired by step S. A page break code search module of the graphic driver performs the search. If the page break code showpage is not included in the PDL code the processing advances to step S. In step S the printer driver sends PDL code to the printer as is.

If the page break code showpage is included in the PDL code the processing advances to step S to count the pages. The counting of pages is performed by a page counting module of the graphic driver . Next in step S a determination is made whether there is any page that needs a change in print attribute. If it is determined a change is necessary the processing advances to step S. In step S the printer driver inserts print attribute setting code immediately after the page break code showpage . Insertion of the print attribute changing code is performed by a print attribute changing code insertion module of the graphic driver . Then the processing advances to step S where the print attribute changing code is sent to the printer.

Finally in step S a determination is made whether printing has completed. If printing has completed the process ends. If printing has not completed flow proceeds back to step S. Steps S through S are repeated in order to produce PDL code by the pass through application by which the printer driver acquires the PDL data to analyze the PDL data. The pass through application does not produce the PDL code all at once but rather via several operations.

Next description of inserting print attribute changing code after the page break code is described illustrates a structure of a print code that a conventional printer driver produces. The print code implements a setting of print attributes page by page by adding a print attribute setting code generally called a job ticket to a header portion of a PDL code produced by a pass through application that includes a page break code. In this method the print attributes for each page are described in the job ticket . Accordingly the changing of print attributes per each page or each page range is implemented without editing the PDL code that the pass through application produces. However in the job ticket system a special configuration for interpreting the job ticket needs to be provided to a printer. Thus a print attribute changing processing for a specific page by the job ticket system cannot be implemented in a typical printer.

An example of operation according to the present embodiment will now be described. In the setting illustrated in pages and are set to be printed by two sided printing. Thus the print attribute needs to be switched to two sided printing after the page break code of page . illustrates the PDL code produced by version of application C. Referring to a page break code showpage is a page break code that appears first. In this case through the determination of steps S and S the print attribute code for changing the attribute to two sided printing is inserted after the page break code showpage . illustrates a code into which a code for two sided printing is inserted. Referring to the code includes a page break code showpage for a first page and a code setpagedevice for changing the attribute to two sided printing that is inserted after the page break code . By using the code the print attribute can be changed in a midpoint of a page in the case of the PDL code produced by the pass through application. Thus different print attributes can be set page by page or per each page range.

As described above the printer driver searches the PDL code produced by the pass through application for an appropriate page break code and inserts the print attribute changing code into the PDL code and thus different print attributes can be set to a specific page or a specific page range.

A second exemplary embodiment of the present invention will now be described. The print system of the second embodiment is similar to that of the first exemplary embodiment and thus only the differences will be described herein.

The setting of print attributes by the user is performed according to the flow chart of and the instruction to start printing is provided according to the flow chart of . Accordingly the flow chart of describes the operation of the processing in step S in according to the present embodiment. First in step S the printer driver determines whether the pass through switch of the printer driver user I F is turned on. In order to make this determination the graphic driver acquires setting values for the printer driver user I F stored in the printer driver setting storage area through the OS . If it is determined that the pass through switch of the printer driver is set to inhibit the pass through printing flow proceeds to step S where normal printing is performed. Upon completion of the printing the process ends.

If it is determined that the pass through printing by the printer driver is permitted the processing advances to step S. In step S the printer driver acquires an application name by using an application name acquirement module of the graphic driver . Then in step S an application type determination module of the graphic driver of the printer driver determines whether the application is a pass through application. The determination is made by scanning the application name in the pass through application table illustrated in . The table stores a list of pass through applications. In scanning the application name the printer driver accesses a page break code table through the OS for the pass through application table.

If the application name acquired by step S is not the pass through application flow proceeds to step S where normal printing is performed and then the processing ends. If in step S the application is the pass through application the processing advances to step S. In step S the printer driver determines whether different print attributes are set for each page or each page range in a special setting sheet of the printer driver user I F. If different print attributes are set per each page or page range as illustrated in the special setting list in the processing advances to step S. However if different attributes are not set for each page or each page range in step S the printer driver does not need to change the print attribute at the page break and the processing advances to step S. In step S the printer driver performs a normal pass through printing that is an operation for sending the PDL data as is that the pass through application produces to the printer.

In step S the graphic driver of the printer driver acquires the PDL data produced by the pass through application. Then in step S a simple interpreter module of the graphic driver detects the page break code.

Next the operation for detecting the page break code will be described. In an exemplary case when a pass through application outputs PDL code the pass through application substitutes the page break code showpage with another character string at a header portion of the PDL code. A character string in is an example of a substituted character string. In the code showpage is substituted with a shorter code sp . This substitution is performed by a simple interpreter module which is created by removing portions such as a rendering portion and a device control portion from an interpreter for receiving and rendering the print code installed on printer. The processing in the present embodiment is performed without relying on the determination as to the page break code described in the first embodiment. The simple interpreter module performs processing of the code for example and detects the page break code.

Returning to if in step S the PDL code includes no page break instruction the processing advances to step S. In step S the printer driver sends the PDL code as is to the printer. If in step S the PDL code includes a page break instruction the processing advances to step S to count the pages. The page counting is performed by a page counting module of the graphic driver .

In step S if the page is determined to be the page whose print attributes are to be changed the processing advances to step S. In step S the printer driver inserts print attribute changing code after the code corresponding to the page break code. Insertion of the print attribute changing code is performed by a print attribute changing code insertion module of the graphic driver . Then the processing advances to step S to send the code to the printer.

An exemplary example of above described operation will not be provided. In the setting illustrated in two sided printing is set for pages and . Accordingly the print attribute needs to be changed to two sided printing after the page break code for page . illustrates the PDL code produced by application C. The simple interpreter module processes the code and then recognizes that the code sp is a page break instruction. A code sp is a page break instruction that appears first.

In the present example the print attribute code for changing the attribute to two sided printing is inserted after the code sp . illustrates a code into which a two sided printing code is inserted. Referring to the code includes a page break code sp for page and a code setpagedevice for changing the attribute to two sided printing that is inserted after the page break code . By using the code changing of the print attribute in a midpoint of a page can be performed in the case of the PDL code produced by the pass through application. Thus different print attribute setting can be performed either page by page or per each page range.

As described above the printer driver searches the PDL code produced by the pass through application for an appropriate page break code and inserts the print attribute changing code into the PDL code. Thus different print attributes can be set either to a specific page or a specific page range.

The present invention can be applied to a system including a plurality of devices such as but not limited to a computer an interface device a reader a printer etc. In addition the present invention can also be applied to an apparatus such as but not limited to a copying machine a printer a facsimile.

The features and aspects of the present invention can also be implemented by providing the system or the device with a storage medium which stores a program code implementing the procedures of the flow charts of each of the embodiments and by causing a computer of the system or the device to read and execute the program code stored in the storage medium. The program code itself which is read from the storage medium implements the function of the embodiments described above and accordingly the storage medium storing the program code constitutes the present invention. For the storage medium for supplying such program code a floppy disk a hard disk an optical disk a magneto optical disk a CD ROM a CD R a magnetic tape a nonvolatile memory card a ROM and the like can be used.

In addition the function according to the embodiments described above is implemented by the processing in which an OS or the like operating on the computer carries out a part of or the entire of the actual processing based on the instruction given by the program code.

In another aspect of the embodiments of the present invention after the program code read from the storage medium is written in a function enhancing board inserted in the computer or a memory which is provided in a function enhancing unit connected to the computer the CPU and the like provided in the function enhancing board or the function enhancing unit carries out apart of or the entire of the processing to implement the function of the embodiment as described above.

As described in the embodiments above in the case where an application produces print data that a printing apparatus can interpret an instruction for changing the print attribute in a specific page or a specific page range can be added to the print data using a print control program as the printer driver. Thus print settings can be changed on a page by page basis in a typical printing apparatus.

While the present invention has been described with reference to exemplary embodiments it is to be understood that the invention is not limited to the disclosed exemplary embodiments. The scope of the following claims is to be accorded the broadest interpretation so as to encompass all modifications equivalent structures and functions.

This application claims priority from Japanese Patent Application No. 2005 370099 filed Dec. 22 2005 which is hereby incorporated by reference herein in its entirety.

