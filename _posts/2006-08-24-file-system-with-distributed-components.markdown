---

title: File system with distributed components
abstract: A distributed file system is disclosed which may include one or more input/output (I/O) nodes and one or more compute nodes. The I/O nodes and the compute nodes may be communicably coupled through an interconnect. Each compute node may include applications to perform specific functions and perform I/O functions through libraries and file system call handlers. The file system call handlers may be capable of providing application programming interfaces (APIs) to facilitate communication between the plurality of I/O nodes and the applications. The file system call handlers may use a message port system to communicate with other compute nodes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07933875&OS=07933875&RS=07933875
owner: Sun Microsystems, Inc.
number: 07933875
owner_city: Santa Clara
owner_country: US
publication_date: 20060824
---
An embodiment of the invention relates to the storage of data and more particularly to a distributed file system architecture.

Computer systems have long been used to manage business related information. However costs associated with storage communication and information processing prohibited the use of computers to store and to manage other kinds of data. When costs came down it became feasible to digitize and store other forms of data including digitized data. Digitized data primarily consists of digitized visual images audio and video although is not limited to those types of data. Advanced information management system structures are implemented to store and manage digitized data.

In very large scale computer systems having many independent processing nodes problems exist in which fast access is unable to be provided to files in the system from a particular processing node.

Various embodiments of the invention relate to a distributed file system. In one embodiment the distributed file system may include one or more input output I O nodes and one or more compute nodes. The I O nodes and the compute nodes may be communicably coupled through an interconnect. According to one embodiment each compute node may include applications to perform specific functions and perform I O functions through libraries and file system call handlers. The file system call handlers may be capable of providing application programming interfaces APIs to facilitate communication between the plurality of I O nodes and the applications. In some embodiments the file system call handlers may use a message port system to communicate with other compute nodes.

In one embodiment an input output I O node may be communicably coupled to one or more compute nodes. The I O node may include a distribution manager and a file manager. The distribution manager in one embodiment may be capable of locating a directory manager after receiving a file request from a file system call handler associated with a compute node. The directory manager may coordinate access to a single directory and performing all lookup operations. According to one embodiment the file manager may be responsible for files being accessed by an application running on one of the one or more compute nodes may delegate responsibility for a whole file or a range within the file to a subset of the one or more compute nodes.

In one embodiment a distribution manager provides a lookup service for compute nodes and input output I O nodes which are communicably coupled. The distribution manager may be configured to receive a request asking for access to a file located within a distributed file system determine a file manager port number associated with the requested file and return the file manager port number to the requesting component. In one embodiment the received request from a requesting component is transmitted via a message port. Once the file manager port number is returned to the requesting component the requesting component may communicate directly with a storage manager associated with the requested file.

A distributed file system is disclosed. In the following description numerous details are set forth. It will be apparent however to one skilled in the art that embodiments of the present invention may be practiced without these specific details. In other instances well known structures devices and techniques have not been shown in detail in order to avoid obscuring the understanding of the description. The description is thus to be regarded as illustrative instead of limiting.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least an embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

Also select embodiments of the present invention include various operations which are described herein. The operations of the embodiments of the present invention may be performed by hardware components or may be embodied in machine executable instructions which may be in turn utilized to cause a general purpose or special purpose processor or logic circuits programmed with the instructions to perform the operations. Alternatively the operations may be performed by a combination of hardware and software.

Moreover embodiments of the present invention may be provided as computer program products which may include machine readable medium having stored thereon instructions used to program a computer or other electronic devices to perform a process according to embodiments of the present invention. The machine readable medium may include but is not limited to floppy diskettes hard disk optical disks CD ROMs and magneto optical disks read only memories ROMs random access memories RAMs erasable programmable ROMs EPROMs electrically EPROMs EEPROMs magnetic or optical cards flash memory or other types of media or machine readable medium suitable for storing electronic instructions and or data. Moreover data discussed herein may be stored in a single database multiple databases or otherwise in select forms such as in a table .

Additionally embodiments of the present invention may be downloaded as a computer program product wherein the program may be transferred from a remote computer e.g. a server to a requesting computer e.g. a client by way of data signals embodied in a carrier wave or other propagation medium via a communication link e.g. a modem or network connection . Accordingly herein a carrier wave shall be regarded as comprising a machine readable medium.

In one embodiment file system call handlers communicate with I O nodes . Call handlers provide applications APIs defined by the Portable Operating System Interface POSIX as well as other interfaces designed to improve performance of both serial and parallel I O operations. Call handlers take advantage of shared memory to share state across node boundaries as well as use a message port system to communicate with other compute nodes and I O nodes .

The message port system is the primary communication mechanism for the file system. However shared memory may be used for all data transfer. In one embodiment file system messages are treated as asynchronous remote procedure calls. Whenever a message is received an available thread runs the requested code on the destination node and will generally send a reply message after completion.

Messages sent to the local node bypass the interconnect which is useful as the many components of the file system including one for each open file are mapped onto a relatively small number of I O nodes allowing many operations to be performed locally. In a further embodiment the file system uses a logging mechanism to ensure that requests sent to an I O node can be recovered if that node fails. This recovery process is described below in more detail.

File system scalability is achieved by distributing and load balancing components across I O nodes . Thus I O nodes include various components or managers to carry out functions. File system components can be thought of as objects in an object oriented programming style. The components are state information together with the methods which operate on that state. In particular the components are very lightweight e.g. creating a component requires only that its state be allocated and initialized and that a message port be created for method requests . A message sent to a component simply invokes a procedure with that components state as a parameter.

In one embodiment components are identified by a unique name. For directories and files the name is the file number. For storage managers the name is the unique ID of the storage device. Several components have a globally unique name within the file system e.g. a distribution manager .

According to one embodiment I O node includes one or more distribution managers one or more file managers one or more directory managers one or more storage managers and a RAS component . A distribution manager provides a lookup service for compute nodes and I O nodes to find where messages for other file system components should be directed.

File system call handlers use the distribution manager to locate the directory managers and file managers responsible for files being accessed by the application. Many system calls are essentially passed through to the underlying manager. illustrates the system call from call handlers . Read and write operations however can be optimized through a technique called delegation. A file manager can delegate responsibility for a whole file or a range within the file to a group of compute nodes . The file system call handlers within that group can then communicate directly with the storage managers initiating I O to disk on their own. illustrates the system call from call handlers using delegation.

Referring back to distribution managers also start instances of file system components when necessary. For instance the first time that a directory is accessed the distribution manager will select an I O node as the home of that directory instantiate a directory manager on that node for the directory and supply the address of that manager a message port to the node which had requested access to the directory. The distribution manager is located using a global well known message port. This is in the system wide message port namespace. The distribution manager is initialized registering its location under this well known name as part of file system bootstrap. Once distribution manager is running all other file system components are located through its services.

At processing block the distribution manager requests that an operating environment on the selected I O node create a new file manager for file X. At processing block the file manager is initialized and is assigned a message port. At processing block the new port is returned to the requesting component. The requesting component may then communicate directly with the new file manager.

Lookup results are cached by the requesting component so that the distribution manager is normally accessed only the first time that a file or directory is accessed by an application . In one embodiment the use of shared memory allows all threads or processes within an application even an MPI application to share this cache. Since the services managed by the distribution manager rarely move between nodes there is no provision for invalidating caches. Rather an attempt to send a message to an invalid message port will fail prompting the sender to query the distribution manager for the new location of the manager.

Referring back to file manager and storage manager along with file system call handlers and a device driver are data path components. illustrates one embodiment of the data path components. A file manager coordinates access to a single file. In most cases where a file has been opened only by one application read and write operations are delegated to the group of compute nodes on which that application runs. In one embodiment the use of object storage enables the storage devices to manage their own allocation of space and help to ensure a consistent state for the file system in the event of failure.

In some cases the file manager cannot delegate access to an entire file. For instance multiple jobs may have opened the file or the file may be shared via parallel NFS pNFS . In such instances the file manager remains involved with file I O coordinating cache and metadata consistency and enforcing POSIX atomicity rules between jobs. In this case the file manager can choose either to delegate access to ranges of the file or to perform all read and write calls on behalf of its clients.

The file manager is responsible for ensuring POSIX atomicity when required by applications this is the default for applications written in the C language and those which invoke the POSIX interfaces directly . Applications which do not require atomicity can disable the associated locking through a call to the file manager or through the use of appropriate APIs within libraries such as MPI IO. Note that for delegated files the file system call handlers manage atomicity.

A storage manager coordinates access to a single object storage device. The storage manager is invoked by the file manager and directory managers but can also be invoked directly by file system call handlers if the file manager has delegated a portion of a file. This allows most read and write operations to be performed with a single round trip message.

If there are multiple physical paths to the device the storage manager is responsible for load balancing and recovery from path failures which leave the device connected along at least one path. Note that the RAS component discussed below is responsible for determining the existence of a fault and coordinating response to the fault. If multiple paths exist for failover all paths should be controlled by the same storage manager.

Storage managers do not aggregate multiple devices into a single storage unit e.g. they are not volume managers . A storage manager need not be located on the node to which the storage device is attached. A storage manager is independent from the device driver and can reside on an I O node while controlling a storage device attached to a compute node which provides flexibility in system configuration.

Referring back to directory manager along with file system call handlers file managers storage manager and device driver are meta data components. illustrates one embodiment of metadata components. A directory manager coordinates access to a single directory. All lookup operations are performed by the directory manager which thus must be able to handle a heavy load. To facilitate this directories may be fully cached in the memory of an I O node while they are in use. Updates may be performed very quickly on the in memory structures while a log is used to ensure file system integrity. The log can be stored on non volatile RAM when available for even faster performance.

As discussed above RAS component is implemented to determine the existence of faults and to coordinates a response to the fault. illustrates one embodiment of a RAS component . RAS component includes a topology manager resiliency manager and reverse mapping manager . The topology manager handles the file system s knowledge of connectivity and fault domains. Topology manager does not discover this information itself acting instead as an interface to an administrative environment s RAS and connectivity functions.

The topology manager is used for a variety of purposes including determining all available paths to storage devices finding storage in separate fault domains and monitoring changes in system state due to faults during operation. As discussed above topology manager does not detect the faults nor respond to them other than by updating its mappings. Rather topology manager determines faults by registering for notifications from the RAS subsystem of the administrative environment and propagates them to the resiliency manager as well as to other interested file system components such as storage managers .

The resiliency manager is responsible for ensuring that all file system data and metadata is protected from failures. In one embodiment a user or application may disable such protection which may be useful to increase performance for transient data of low value e.g. debugging output or short lived temporary files . After a topology change or other fault the resiliency manager determines which file system objects have been affected. This may be user data or file system metadata on either stable storage or NVRAM. Resiliency manager manages the process of restoring redundancy e.g. re mirroring data invoking the data scheduler as needed. In the event of the loss of data resiliency manager notifies the appropriate file system components and informs the RAS subsystem which can present that information to the administrator.

The reverse mapping manager is used by the resiliency manager to determine which file system objects reside on a given piece of media e.g. disk tape or NVRAM . In the event of media failure the resiliency manager uses this information to drive the reconstruction or notification process. This information is also used in other cases where knowledge of the objects on media is required for instance when taking storage out of service. In one embodiment this information cannot be stored on the media in question as it is needed if the media becomes unavailable. Reverse mappings are kept up to date by components which allocate storage space for instance file and directory managers as well as a data scheduler.

The file system includes a data management component that supports multiple pools of storage e.g. high speed disk high capacity disk tape etc. . illustrates one embodiment of data management components . Data management components include data scheduler data movers catalog manager as well as storage manager and device driver .

The data scheduler implements policy based data management for tiers of storage. Data scheduler ensures that multiple copies of data exist for RAS based on policies set by the administrator. Data scheduler invokes data movers to copy data between storage tiers based on access patterns or other policies. Frequently accessed files can be moved to faster storage tiers while infrequently accessed files may be moved to slower storage tiers. The data scheduler is also responsible for media migration. Migration is used to protect against media deterioration move data to new classes of media and to reclaim space on sequential media.

Data movers are responsible for copying data from one storage tier to another. The storage tiers may utilize disk tape or other media. Data movers take advantage of third party copy whenever possible to avoid impacting the I O nodes . The catalog manager keeps information about individual pieces of media e.g. disk or tape . Information kept includes an estimate of space utilization an error history for use by the RAS components and possibly a performance history as well. Space utilization is updated when media is taken offline or periodically by storage managers. For sequential media obsolete space is also tracked. In addition to the components described above the file system can interface with an external resource manager which allows integration of shared resources such as tape libraries with other file systems.

The file system includes semantic access component that assists in propagating metadata automatically to a private database. Further the semantic access component supports interfaces to allow users to add metadata to this database. Metadata from well structured files can be added automatically via plug ins. The database enables fast criteria based searching such as date ranges user and project identification etc.

Updates are made in the background so that file system performance is unimpeded. A semantic database can be extended to include metadata derived from file contents. Metadata extraction plug ins enable new extraction methods to be defined by a file system administrator. The plug ins may be automatically invoked by the update manager when file contents change. A semantic access schema manager works with plug ins to allow the database schema to be extended for new types of metadata.

In a further embodiment system may be a distributed computing system. In other words one or more of the various components of the system may be located in a physically separate location than the other components of the system . Such components may be accessed and connected via a network to the other components

In accordance with an embodiment of the present invention the computer system includes a Sun Microsystems computer utilizing a SPARC microprocessor available from several vendors including Sun Microsystems Inc. of Santa Clara Calif. . Those with ordinary skill in the art understand however that any type of computer system may be utilized to embody the present invention.

Also instead of a single processor two or more processors whether on a single chip or on separate chips can be utilized to provide speedup in operations. It is further envisioned that the processor may be a complex instruction set computer CISC microprocessor a reduced instruction set computing RISC microprocessor a very long instruction word VLIW microprocessor a processor implementing a combination of instruction sets and the like.

The network interface provides communication capability with other computer systems on a same local network on a different network connected via modems and the like to the present network or to other computers across the Internet. In various embodiments of the present invention the network interface can be implemented utilizing technologies including but not limited to Ethernet Fast Ethernet Gigabit Ethernet such as that covered by the Institute of Electrical and Electronics Engineers IEEE 801.1 standard wide area network WAN leased line such as T1 T3 optical carrier 3 OC3 and the like analog modem digital subscriber line DSL and its varieties such as high bit rate DSL HDSL integrated services digital network DSL IDSL and the like cellular wireless networks such as those implemented by utilizing the wireless application protocol WAP time division multiplexing TDM universal serial bus USB and its varieties such as USB II asynchronous transfer mode ATM satellite cable modem and or FireWire.

Moreover the computer system may utilize operating systems such as Solaris Windows and its varieties such as CE NT 2000 XP ME and the like HP UX IBM AIX PALM UNIX Berkeley software distribution BSD UNIX Linux Apple UNIX AUX Macintosh operating system Mac OS including Mac OS X and the like. Also it is envisioned that in certain embodiments of the present invention the computer system is a general purpose computer capable of running any number of applications such as those available from companies including Oracle Siebel Unisys Microsoft and the like.

It should be appreciated that in the foregoing description of exemplary embodiments of the invention various features of the invention are sometimes grouped together in a single embodiment figure or description thereof for the purpose of streamlining the disclosure aiding in the understanding of one or more of the various inventive aspects. This method of disclosure however is not to be interpreted as reflecting an intention that the claimed invention requires more features than are expressly recited in each claim. Rather as the following claims reflect inventive aspects lie in less than all features of a single foregoing disclosed embodiment. Thus the claims following the detailed description are hereby expressly incorporated into this detailed description with each claim standing on its own as a separate embodiment of this invention.

The foregoing description has been directed to specific embodiments. It will be apparent to those with ordinary skill in the art that modifications may be made to the described embodiments with the attainment of all or some of the advantages. Therefore it is the object of the appended claims to cover all such variations and modifications as come within the spirit and scope of the invention.

