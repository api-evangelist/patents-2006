---

title: Restoring electronic information
abstract: Systems and methods are provided for automatic detection of data loss to system or a particular application. In one implementation a method is provided. The method includes identifying a loss of data associated with a current view. An alert is generated identifying the loss of data. A user is prompted to initiate a history view to restore the lost data, the history view including at least a first visual representation of an earlier version of the current view.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09009115&OS=09009115&RS=09009115
owner: Apple Inc.
number: 09009115
owner_city: Cupertino
owner_country: US
publication_date: 20060804
---
This application is generally related to the following jointly owned and co pending patent applications each incorporated herein by reference in its entirety 

A hallmark of modern graphical user interfaces is that they allow a large number of graphical objects or items to be displayed on a display screen at the same time. Leading personal computer operating systems such as Apple Mac OS provide user interfaces in which a number of windows can be displayed overlapped resized moved configured and reformatted according to the needs of the user or application. Taskbars menus virtual buttons and other user interface elements provide mechanisms for accessing and activating windows even when they are hidden behind other windows.

With the sophisticated tools available users are encouraged not only to create and save a multitude of items in their computers but to revise or otherwise improve on them over time. For example a user can work with a certain file and thereafter save its current version on a storage device. The next day however the user could have had second thoughts about the revisions or could have come up with new ideas and therefore open the file again.

The revision process is usually straightforward if the user wants to add more material to the file or make changes to what is there. But it is typically more difficult for a user who has changed his her mind about changes that were previously made and wants the file back as it was once before. Application programs for word processing typically let the user undo previous edits of a text at least up to a predefined number of past revisions. The undo feature also usually is configured so that the previously made revisions must be undone in reverse chronological order that is the user must first undo the most recently made edit then the second most recent one and so on. If the user saves and closes the document and thereafter opens it again it can not be possible to automatically undo any previous edits.

Systems and methods are provided for automatic detection of data loss to system or a particular application. In one implementation the system prompts a user to the occurrence of data loss and suggests invoking a backup system interface to recover the lost data.

In general in one aspect a method is provided. The method includes identifying a loss of data associated with a current view. An alert is generated identifying the loss of data. A user is prompted to initiate a history view to restore the lost data the history view including at least a first visual representation of an earlier version of the current view.

Implementations of the method can include one or more of the following features. The method can further include receiving while a current view is displayed a user input requesting that a history view associated with the current view be displayed. The method can further include receiving while the history view is displayed a user input requesting that the current view be modified according to the earlier version. The method can further include modifying in response to the user input the current view according to the earlier version. Identifying a loss of data can include comparing current data with previous data. The previous data can be associated with a backup. Identifying a loss of data can include monitoring for events indicating data loss or examining an application for lost data when opened. Generating an alert can include presenting an alert notification the alert notification indicating data can have been lost and where the alert notification provides one or more options for restoring the lost data.

In general in one aspect a method is provided. The method includes invoking an application. A current view of the application in a user interface is presented. A loss of data associated with the application is identified. An alert is generated identifying the loss of data. A user is prompted to initiate a history view to restore the lost data the history view including at least a first visual representation of an earlier version of the current view of the application.

Implementations of the method can include one or more of the following features. The application can be a music application and the lost data can be a playlist. The application can be a messaging application and the lost data can be one or more e mail messages. The application can be a messaging application and the lost data can be a calendar. The application can be a messaging application and the lost data can be a contacts list. The application can be a messaging application and the lost data can be a buddy list.

In general in one aspect a method is provided. The method includes detecting a loss of data associated with a system. An alert is generated identifying the loss of data. The user is prompted to initiate a history view to restore the lost data the history view including at least a first representation associated with the lost data. The lost data can be user preference data or can be system setting data.

In general in one aspect a method is provided. The method includes evaluating a current view of an application. A determination is made that a loss of data has occurred to the current view of the application relative to a past view of the application. The current view of the application is suspended. One or more past views of the application are presented. A past view of the application is reinstated into the current view to restore the lost data.

Implementations can include one or more of the following features. The evaluating can be performed when the application is invoked. The method can further include alerting the user to the data loss and prompting the user to restore the lost data.

In general in one aspect a method is provided. The method includes determining that an application has lost data. A prior state of the application is retrieved. A preview of the prior state is presented. The prior state of the application is restored.

The details of the various aspects of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the invention will become apparent from the description the drawings and the claims.

The computer also includes a local storage device and a graphics module e.g. graphics card for storing information and generating graphical objects respectively. The local storage device can be a computer readable medium. The term computer readable medium refers to any medium that includes data and or participates in providing instructions to a processor for execution including without limitation non volatile media e.g. optical or magnetic disks volatile media e.g. memory and transmission media. Transmission media includes without limitation coaxial cables copper wire fiber optics and computer buses. Transmission media can also take the form of acoustic light or radio frequency waves.

While modifications of a user interface view are described herein with respect to a personal computer it should be apparent that the disclosed implementations can be incorporated in or integrated with any electronic device that has a user interface including without limitation portable and desktop computers servers electronics media players game devices mobile phones email devices personal digital assistants PDAs embedded devices televisions other consumer electronic devices etc.

Systems and methods are provided for modifying an interface view e.g. a user interface view . The systems and methods can be stand alone or otherwise integrated into a more comprehensive application. In the materials presented below an integrated system and method for modifying a user interface view is disclosed.

Though discussion is made with reference to modifying a user interface view those of ordinary skill will recognize that such a view can be based on various data structures files processes and other aspects of information management. It follows that modification to file structures data and the like is also contemplated in order to achieve the modification to the user interface view. In other words while the restoration of the user interface view from one state to another can be the most apparent change from the user s perspective this is accomplished through the corresponding changes in the underlying system content.

One of ordinary skill in the art will recognize that the engines methods processes and the like that are described can themselves be an individual process or application part of an operating system a plug in an application or the like. In one implementation the system and methods can be implemented as one or more plug ins that are installed and run on the personal computer . The plug ins are configured to interact with an operating system e.g. MAC OS X WINDOWS XP LINUX etc. and to perform the various functions as described with respect to the Figures. A system and method for modifying a user interface view can also be implemented as one or more software applications running on the computer . Such a system and method can be characterized as a framework or model that can be implemented on various platforms and or networks e.g. client server networks wireless networks stand alone computers portable electronic devices mobile phones etc. and or embedded or bundled with one or more software applications e.g. email media player browser etc. .

The computer includes the backup component that allows for the storage of versions of the computer s files or other items for example within the local storage or in an external storage repository. In one implementation the backup component also allows a user to select any of the stored versions and use it to initiate a restoration of that version in the computer.

Each application program can include an application programming interface API . The architecture can utilize API techniques to access application programs and enhance them with further functionality. For example the API can link several applications together for providing a single service on all linked applications. Particularly the time machine architecture can utilize API techniques to enhance application programs with the time machine functionality. The API tools can link several applications to the time machine engine by using an API for providing a similar menu or icon for each application. For example the API can be used by the time machine when generating a backup version of a current state of the application. As another example the API can be used when the application is restored through the time machine to a state that corresponds to a backup version. Although API is shown in as part of application programs the API can be separate from the application programs . For example the API can be separately located and made available by the system for use by one or more of the application programs .

In one implementation the backup component provides backup and restoration capability for the system. Many different items or elements can be the subject of a back up in the system. For example folders files items information portions directories images system parameters playlists address books e mails e mail folders application states preferences and the like all can be candidates for archiving. Other types are also possible. In this example the backup component includes a local storage device and an external storage device . Versions can be stored on either of them. Any number of local and or external storage devices can be used by the backup component for storing versions. In one implementation no local storage is provided.

In one implementation one copy of original data e.g. folders files items information portions directories images system parameters playlists address books e mails e mail folders application states and the like is stored in the system in addition to the original i.e. a backup copy . When one or more subsequent copies are made each one can contain only the differences between the current data version and the original backup copy thereby saving storage space. In some implementations the storage devices and can be used to store the backup copy of the data as well as links pointing to the data in the backup copy or other backup data from a subsequent backup operation. The links can be hard links which reference or point to physical data or as another example can be symbolic links that reference another file on the storage device.

For example a song file can be stored on the local storage device . At some point in time a backup song file has been created from the song file . In everyday use when a person listens to the song corresponding to these song files it is from the song file i.e. the original version that the music is retrieved. Should the song file disappear or become corrupt the backup song file can be used.

The backup song file can contain data that differs from the original song file such as data containing incremental changes that have occurred to the original song file over time. In addition backup song files can contain a link pointing to a first backup of the song file . For example the song file can include the first backup of data while the backup song file can include changes made since the first backup of data and a link pointing to the first backup of data. In some situations the backup data does not differ and it can therefore be sufficient to store only the link to the first backup song file in the backup song file .

The backup component can interact with one or more of the applications using the corresponding API. In one implementation this can provide backing up of that application s files state or other items and can provide for user restoration of a selected backed up version to name two examples. In one implementation the backup component runs as a background task on an operating system that is not visible to the user. The backup component can be capable of operating on data belonging to any and all user accounts on the system.

The backup component includes an activity monitoring engine . In one implementation the activity monitoring engine monitors for changes within applications e.g. application files or state that are targeted for a backup operation. A change can also include the addition of new files or other data structures or deletion of existing ones. For example the activity management engine can be responsible for verifying the integrity of a playlist in a music file management program or for verifying that a corresponding song file exists for a listed song.

In one implementation the activity monitoring engine is capable of discerning between a substantive change e.g. the text within a document has been modified and a non substantive change e.g. the play count within an iTunes playlist has been updated or several changes cancel each other out through its interaction with the application programs . The activity monitoring engine can for example create a list of modified elements to be used when a backup event is eventually triggered. In one implementation the activity monitoring engine can monitor the system for periods of inactivity. The activity monitoring engine can then trigger a backup event during a period of time in which the backup activity won t cause a system slowdown for an active user.

A preference management engine specifies some operating parameters of the backup component . In one implementation preference management engine contains user specified and or system default application parameters for the backup component . These can include settings for the details of capturing and storing the views. For example the preference management engine can determine the frequency of the backup capture the storage location for the backup versions the types of elements e.g. files or other items that are eligible for backup capture and the events which trigger a backup capture periodic or event driven etc. . In one implementation the preference management engine can detect that a new storage device is being added to the system and prompt the user whether it should be included as a backup repository. Files and other items can be scheduled for a backup operation due to location e.g. everything on the C drive and within D photos a correlation with specific applications e.g. all pictures music e mail in an inbox an address book and system settings or a combination of strategies. Different types of items can be scheduled to be stored on different devices or on different segments of a storage device during a backup operation. In one implementation the backup component stores the versions in a format corresponding to a file system structure.

A backup management engine coordinates the collection storage and retrieval of views performed by the backup component . For example the backup management engine can trigger the activity monitoring engine to watch for activities that satisfy a requirement specified in the preference management engine .

A change identifying engine locates specific files or other items within to determine if they have changed. The change identifying engine can be capable of discerning a substantive change from a non substantive change. For example the change identifying engine can identify a loss of data associated with a user s current view. In one implementation the change identifying engine traverses a target set of files or other items comparing a previous version to the current version to determine whether or not a modification has occurred. In addition the change identifying engine can generate an alert identifying the loss of data and prompt the user to initiate a previous version of the current view to restore the lost data. For example the change identifying engine can be responsible for verifying whether a data loss has occurred in a music file management program or for verifying that a corresponding song file is unchanged for a listed song.

A backup capture engine locates views e.g. elements files or other items that are to be backed up. The backup capture engine can invoke the activity monitoring engine and or the change identifying engine for example to generate a capture list. The backup capture engine can then store copies of these elements in one or more targeted storage repositories. The backup capture engine can track multiple version copies of each item included in the backup repository.

The backup component includes a backup restoration engine to restore previous versions of views e.g. files or other items . In one implementation the backup restoration engine provides a user interface e.g. a graphical user interface where a user can select the item s to be restored.

As shown in a user has launched an iTunes application window available from Apple Computer in Cupertino Calif. which is currently presented in the foreground and a chat application and a mail application that are presented in the background. In particular the iTunes application window is here displaying contents of the user s library which lists the user s songs. The iTunes application can be used for accessing playing and organizing media such as digital music pictures and video files.

The time machine engine can be activated to back up or restore content within the iTunes application or another application. Additionally the time machine engine can be activated to back up or restore other data such as system data and preferences. In one implementation the user can activate a time machine session from the user interface using a user selectable time machine icon in the application launch bar . As another example the time machine session can be activated from the menu bar . The menu bar can include a time machine options menu in addition to the activation selection. The time machine options menu can include selections allowing a user to specify data to include in a particular backup operation. For example in iTunes the user can identify which content to include in the backup e.g. playlists but not play counts purchased songs but not others etc. . In addition the user can recover songs that were previously included but are now missing from the iTunes library. For example if at least one backup of the missing songs has been made at an earlier date the user can enter the time machine to search for the missing songs or files in a backup snapshot of the iTunes application. This provides for restoration of a view corresponding to that prior time. As used herein a snapshot refers to a backup element stored in a historical archive that includes a backup of selected items or content as specified by the backup component .

The time machine engine can proactively detect lost data when an application is launched. For example when the iTunes application is launched a system e.g. the application a part of the operating system a backup system etc. can examine the application files for lost data such as data corruption or missing data files. Data loss can occur for example as a result of an application system failure virus or inadvertent deletion. When data is missing the time machine engine can generate an alert identifying the lost data and provide a way for the user to restore the data using the time machine interface. Thus the API that connects particular applications to the time machine engine can be used in generating the alert. In some implementations the time machine compares previous data from an earlier backup with the current to identify lost data e.g. the content of an iTunes library in an earlier backup can be compared with the current library . In other implementations the system e.g. the backup daemon monitors changes and can generate the alert when particular changes are detected. For example the system can monitor constantly in the background e.g. by monitoring system events. For example after a failure event the backup system can determine whether or not data has been lost. If so the backup system can prompt the user to restore the lost data using the time machine snapshots to select a prior intact version of the lost data.

In one implementation the can detect lost data associated with other applications. For example when launching a messaging program lost data can be detected such as lost e mail messages lost contact information from a contacts list e.g. names and addresses of contacts or lost calendar data. In another implementation the lost data can be from a buddy list of a messaging program e.g. instant messaging .

Alternatively the system can detect lost data associated with a computer system such as lost system settings or preferences. For example preferences can include preferences associated with input devices e.g. keyboard and mouse settings system settings e.g. display device preferences printer preferences and user interface settings e.g. preferences defining a look and feel of the user interface such as colors background images and screensaver preferences . Thus system data can also be recovered after a system failure event.

The time machine backup engine includes functionality to identify the kinds of data that will be protected. The time machine backup engine can also have defined therein events that trigger recovery. Such events can distinguish between permanent and non permanent data loss. For example a recovery event can be the creation of a backup that differs from a prior backup in a predefined way and the detection of this condition results in a trigger. Other recovery events are possible. In one implementation a set of rules is used to determine whether not identified data loss triggers recovery.

A determination of data loss can be made upon the initiation of an application upon a specific user input or at a predefined time to name a few examples. Here assume that data loss is detected for the iTunes application window . shows an example of an alert message generated by the system when lost data is detected. As shown the alert notifies the user that iTunes cannot locate a particular song file listed in the library and that this could be because data has been moved or deleted. In some implementations the alert can indicate that the data is present in the system but corrupted in some way. The user has the option of selecting a restore button to enter the time machine interface to restore the lost files i.e. using a snapshot of a recent backup . Alternatively the user can select a cancel button to cancel the alert and return to the application. Other user options can be used.

The time machine interface here includes a presentation window a timeline and function buttons. The timeline includes a number of snapshots. The time machine user interface can also include function buttons. For example the interface can include arrow buttons and and an associated scroll bar to allow the user to navigate to additional snapshots not shown in the current timeline window. Thus there can be a large number of snapshots from which to select. As shown the presentation window is displaying the current state of the iTunes application because a current snapshot has been selected highlighted in the timeline. The current snapshot can be a default selection. The presentation window can show the contents corresponding to the currently selected snapshot or a portion thereof.

In this particular example the timeline contains a date beneath each snapshot indicating when the snapshot was taken. In some implementations the user can select items or content within the snapshots. The selection functionality can be used in earlier snapshots such as snapshot to restore missing data to the state associated with the current snapshot .

The timeline can include a number of snapshots representing earlier versions or states of the iTunes library that have been backed up. Each snapshot provides a screenshot representation of the earlier version of the iTunes library at a particular point in time. In some implementations the timeline includes a visual representation of backup elements such as a miniature version of the earlier state. The timeline can appear across the top portion of the time machine interface as shown . Alternatively the timeline does not appear in the top portion of the time machine interface until a user moves their cursor to or otherwise activates the timeline e.g. by activating the top portion of the interface .

The interface can include a restore button that when selected restores the view to the selected state represented by the selected snapshot or to a selected portion thereof to name two examples. In some implementations this terminates the session of the time machine. A user can select one element in a snapshot and then select the restore button to modify the current version of the element selected e.g. restore the state of the view . For example in iTunes the user can select one or more songs to restore and this can trigger the restore button to display a more precise message such as restore selection only. 

In one implementation a changed items only checkbox control filters the snapshots to show only those that differ from the current state. In one implementation the checkbox control does not refer to the incremental changes between snapshots in the timeline but rather when invoked acts to omit those snapshots whose states are identical to the current state of the iTunes library from presentation in the timeline. For example if the most recent snapshot is identical to a snapshot that occurs earlier in time selecting the changed items only checkbox control in one implementation causes the time machine to cease displaying one of these versions e.g. by removing the snapshot from the timeline. This can help the user to view only snapshots that contain changes to the current version

An information button provides information regarding the selected snapshot. In one implementation selecting the information button opens a panel display. The panel display can provide information including the date and time the snapshot was made the location of actual contents in a snapshot the size of the snapshot and a comment section to name a few examples. A close button can be selected to exit the time machine and return the user to the user interface . In some implementations the time machine engine can automatically close upon a particular snapshot being restored. In some implementations the user can minimize the time machine for purposes of navigating to other applications such as an email application or a web browser.

As shown in the current snapshot is selected and displayed in the time machine interface . The library entry for the missing song file indicated in What You Waiting For is presented at the top of the user s library. However as indicated in the above description of the alert message indicates that the actual data for the song file could not be located. In some implementations the song file could have been deleted moved or otherwise modified causing the backup system to generate the alert. For example when several versions of song file libraries are maintained on one system e.g. multiple users creating their own libraries the song files can have been overwritten with different song files for one particular user. In some implementations a particular user s song files can be corrupted by a system or application error. For example the song names can appear in the user s library but the underlying song file can be missing. Therefore the user may wish to select another snapshot than the current snapshot and attempt to restore the missing or corrupted file.

The above examples involve backup versions of music libraries. Many different types of applications content items elements or processes can be backed up and made accessible through a time machine engine.

In the above description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding. It will be apparent however to one skilled in the art that implementations can be practiced without these specific details. In other instances structures and devices are shown in block diagram form in order to avoid obscuring the disclosure.

In particular one skilled in the art will recognize that other architectures and graphics environments can be used and that the examples can be implemented using graphics tools and products other than those described above. In particular the client server approach is merely one example of an architecture for providing the functionality described herein one skilled in the art will recognize that other non client server approaches can also be used. Some portions of the detailed description are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

An apparatus for performing the operations herein can be specially constructed for the required purposes or it can comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program can be stored in a computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions and each coupled to a computer system bus.

The algorithms and modules presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems can be used with programs in accordance with the teachings herein or it can prove convenient to construct more specialized apparatuses to perform the method steps. The required structure for a variety of these systems will appear from the description. In addition the present examples are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages can be used to implement the teachings as described herein. Furthermore as will be apparent to one of ordinary skill in the relevant art the modules features attributes methodologies and other aspects can be implemented as software hardware firmware or any combination of the three. Of course wherever a component is implemented as software the component can be implemented as a standalone program as part of a larger program as a plurality of separate programs as a statically or dynamically linked library as a kernel loadable module as a device driver and or in every and any other way known now or in the future to those of skill in the art of computer programming. Additionally the present description is in no way limited to implementation in any specific operating system or environment.

The subject matter described in this specification can be implemented as one or more computer program products i.e. one or more modules of computer program instructions encoded on a computer readable medium for execution by or to control the operation of data processing apparatus. The instructions can be organized into modules or engines in different numbers and combinations from the exemplary modules described. The computer readable medium can be a machine readable storage device a machine readable storage substrate a memory device a composition of matter effecting a machine readable propagated signal or a combination of one or more them. The term data processing apparatus encompasses all apparatus devices and machines for processing data including by way of example a programmable processor a computer or multiple processors or computers. The apparatus can include in addition to hardware code that creates an execution environment for the computer program in question e.g. code that constitutes processor firmware a protocol stack a database management system an operating system or a combination of one or more of them. A propagated signal is an artificially generated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus.

While this specification contains many specifics these should not be construed as limitations on the scope of what may be claimed but rather as descriptions of features specific to particular implementations of the subject matter. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

The subject matter of this specification has been described in terms of particular embodiments but other embodiments can be implemented and are within the scope of the following claims. For example the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example the processes depicted in the accompanying figures do not necessarily require the particular order shown or sequential order to achieve desirable results. In certain implementations multitasking and parallel processing may be advantageous. Other variations are within the scope of the following claims.

