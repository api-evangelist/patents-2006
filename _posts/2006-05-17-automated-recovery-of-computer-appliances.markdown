---

title: Automated recovery of computer appliances
abstract: Aspects of the invention provide methods and architectures for enhancing the reliability of computer appliances and reducing the possibilities that human intervention is necessary in the event of a system failure or failure condition. The provided architecture is extensible and provides a generalized framework that is adaptable to many different types of computer appliances. One aspect of the invention provides a boot up redundancy component to ensure that a computer appliance can be appropriately booted. In the described embodiment the appliance hard drive is configured with multiple partitions that can be utilized to boot the appliance thereby reducing the chances that the appliance will not boot. In addition, an architecture is disclosed that comprises one or more resource monitoring components that monitor an associated appliance resource for a failure condition. The resource monitoring components are programmed to attempt to remedy certain failure conditions that they detect. An appliance monitoring service is also provided and is programmed to attempt to remedy failure conditions that are not remedied by one or more of the resource monitoring objects.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07409584&OS=07409584&RS=07409584
owner: Microsoft Corporation
number: 07409584
owner_city: Redmond
owner_country: US
publication_date: 20060517
---
This application claims priority under 35 U.S.C. 120 as a continuation of U.S. patent application Ser. No. 10 842 263 filed May 10 2004 which claims priority is a divisional of U.S. Pat. No. 6 754 855 filed Dec. 1 1999 which is titled Automated Recovery of Computer Appliances the entire disclosures of which are hereby incorporated by reference in their entirety.

This invention relates generally to computer appliances and more particularly concerns automated recovery and reliability methods and systems.

Computer appliances are becoming ever more popular. A computer appliance is a computing device that is similar in some respects to a general purpose computer. That is a computer appliance can typically have many of the same constituent components that a general purpose computer has e.g. one or more microprocessors storage devices memory an operating system and the like . Computer appliances are different however because they typically have a fixed function that does not or cannot vary. Specifically computer appliances are designed and programmed to implement very specific types of functionality. Many different types of computer appliances can exist. For example a server appliance can be designed to implement functionalities that include file sharing Internet sharing and print sharing. Other types of appliances can include set top boxes that are used in connection with viewing multimedia presentations on a television or hardware systems that are designed to control a home security system. In addition to having a fixed functionality computer appliances are often characterized in that they sell for a price that is much less than that of a general purpose computer. This is due at least in part to the fact that computer appliances are designed to do only a limited number of things. In addition computer appliances are often of a form factor that can be transparent to the owner or user. That is a user can simply tuck the computer appliance away and after a while may not even be aware that it exists except for the fact that the appliance is implementing a functionality that the user desires . Another characterizing feature of some computer appliances is that they can lack a user display and or other mechanisms that allow a user to interact with them e.g. a keyboard mouse input etc. . This is much different from a general purpose computer that typically has a display through which it can communicate with a user and user mechanisms such as a keyboard and mouse input. This is an important distinction when consideration is given to the problems that the current invention is directed to solving.

Computer appliances by their very nature are designed to execute software. That is specific software applications and operating systems can be designed for operation in connection with the different appliances. And because the functionalities of appliances can vary widely so too can the software applications and operating systems with which they are used. Often times software applications such as device drivers and operating systems for these computer appliances are designed by third parties known as original equipment manufacturers or OEMs . As careful as designers of software and operating systems are however there are still instances when the software or a particular resource tat is designed to operate on the appliance will fail. A resource refers to any type of hardware software or firmware resource that is used by the appliance to implement its functionality. For example hardware resources can include without limitation communication lines printers and the like. Software resources can include without limitation software applications memory managers and the like.

It is highly desirable that computer appliances operate in a dependable reliable manner. If a computer appliance experiences a system failure for whatever reason an end user is not usually going to be able to fix it other than perhaps by shutting the appliance down and restarting it . This is quite different from a general purpose computer which in many instances will use the display to advise the user that there has been a particular system failure and might display a graphic user interface GUI to step the user through a remedial procedure. Many times though the general purpose computer s system failure will require specialized knowledge which the end user simply does not have. In that case the end user may have to contact a 1 800 help line to have a trouble shooter fix the problem. At any rate system failures typically require human intervention.

In the context of many computer appliances system failures are even more difficult to fix because of the absence of a display or user interface to advise the user of a problem.

Accordingly this invention arose out of concerns associated with improving the operability and reliability of computer appliances and further enhancing the user experience thereof.

Two primary goals for an ideal computer appliance are that 1 it run for an extended period of time i.e. months without user intervention and 2 it run without a disruption of user services.

To achieve these and other goals aspects of the invention provide methods and architectures for enhancing the reliability of computer appliances and reducing the possibilities that human intervention is necessary in the event of a system failure or failure condition. The provided architecture is extensible and provides a generalized framework that is adaptable to many different types of computer appliances.

One aspect of the invention provides a boot up redundancy component to ensure that a computer appliance can be appropriately booted. In the described embodiment a single hard disk is configured for use in a single computer appliance. A second disk mirror disk can also be used to enhance reliability. In this case the system BIOS will boot from the secondary disk which is configured exactly like the primary disk if the primary disk fails e.g. a hardware failure . A first operating system is resident on the single hard disk and is configured for booting the computer appliance. In addition a second operating system is resident on the single hard disk and is configured for booting the computer appliance. The second operating system serves as a back up for the first operating system in the event that the computer appliance cannot be booted from the first operating system.

Another aspect of the invention provides an appliance booting method that first attempts to boot the appliance from a first partition of a hard drive containing a first operating system. If this attempt is unsuccessful then a second attempt to boot the computer appliance is made from a second partition of the hard drive. The second partition contains a second operating system that is configured as a back up operating system for the first operating system. The backup operating system can serve as a pristine operating system in that it only functions to restore the first or primary operating system to a working state or a fully functional system providing end user services. The preferable configuration is for the backup operating system to serve as a pristine operating system. A pristine operating system restores the primary operating system by quick formatting the primary operating system partition and then installing a copy of the primary operating system onto the newly formatted partition. The pristine operating system can also restore configuration settings of end user services when service configuration checkpointing i.e. saving changes to service configuration in a location accessible from both the primary and pristine operating systems is employed from the primary operating system.

Another aspect of the invention makes use of a boot count variable . The boot count variable is a variable that keeps track of the number of times attempts are made to boot a particular appliance. Each time an attempt is made to boot the appliance from a selected disk partition the boot count variable is incremented. When the boot count variable reaches a certain threshold value after the appliance has not been successfully booted from the selected disk partition another disk partition is utilized if available to attempt to boot the appliance. In this manner software redundancy is provided and reliability is enhanced.

Another aspect of the invention provides an architecture for use in monitoring for and attempting to remedy failure conditions that are associated with various resources of a computer appliance. In the described embodiment one or more resource monitoring components are provided. Individual resource monitoring components are programmed to monitor the status of an associated computer appliance resource and to detect a failure condition in which the resource cannot be used by the computer appliance for its intended purpose. At least some of the resource monitoring components are programmed to attempt to remedy the failure condition in the event that the resource monitoring component detects a failure condition. An appliance monitoring service is provided and is configured to be in communication with the resource monitoring components. The appliance monitoring service is programmed to attempt to remedy failure conditions that cannot be remedied by the resource monitoring components. In the described embodiment the resource monitoring components are implemented as programming objects having callable interfaces. In addition the appliance monitoring service comprises an appliance monitor object and a global recovery object having callable interfaces. The appliance monitoring object can be called by one or more of the resource monitoring objects to report a resource failure condition. The appliance monitoring object can then call the global recovery object which contains a collection of recovery algorithms that can be implemented to recover the appliance.

Embodiments of the invention provide an automated flexible extendable appliance recovery system that greatly reduces that chances that human intervention is needed to recover an appliance that has experienced a system failure. In addition the inventive methods and systems reduce the possibility that a particular system failure will disrupt end user services.

Computer appliance includes one or more processors or processing units a system memory and a bus that couples various system components including the system memory to processors . The bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. The system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer appliance such as during boot up is stored in ROM .

Computer appliance further includes a hard drive for reading from and writing to one or more hard disks not shown . Some computer appliances can include a magnetic disk drive for reading from and writing to a removable magnetic disk and an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM or other optical media. The hard drive magnetic disk drive and optical disk drive are connected to the bus by an SCSI interface or some other appropriate interface. The drives and their associated computer readable media provide nonvolatile storage of computer readable instructions data structures program modules and other data for computer appliance . Although the exemplary environment described herein employs a hard disk a removable magnetic disk and a removable optical disk it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer such as magnetic cassettes flash memory cards digital video disks random access memories RAMs read only memories ROMs and the like may also be used in the exemplary operating environment.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM including an operating system one or more application programs other program modules and program data . In some computer appliances a user might enter commands and information into computer appliance through input devices such as a keyboard and a pointing device . Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. In some instances however a computer appliance might not have these types of input devices. These and other input devices are connected to the processing unit through an interface that is coupled to the bus . In some computer appliances a monitor or other type of display device might also connected to the bus via an interface such as a video adapter . Some appliances however do not have these types of display devices. In addition to the monitor computer appliances might include other peripheral output devices not shown such as speakers and printers.

Computer appliance can but need not operate in a networked environment using logical connections to one or more remote computers or other computer appliances such as a remote computer . The remote computer may be another personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to computer appliance although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment computer appliance is connected to the local network through a network interface or adapter . When used in a WAN networking environment computer appliance typically includes a modem or other means for establishing communications over the wide area network such as the Internet. The modem which may be internal or external is connected to the bus via a serial port interface . In a networked environment program modules depicted relative to the computer appliance or portions thereof may be stored in the remote memory storage device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Generally the data processors of computer appliance are programmed by means of instructions stored at different times in the various computer readable storage media of the computer. Programs and operating systems are typically distributed for example on floppy disks or CD ROMs. From there they are installed or loaded into the secondary memory of a computer appliance. At execution they are loaded at least partially into the computer appliance s primary electronic memory. The invention described herein includes these and other various types of computer readable storage media when such media contain instructions or programs for implementing the steps described below in conjunction with a microprocessor or other data processor. The invention also includes the computer appliance itself when programmed according to the methods and techniques described below.

For purposes of illustration programs and other executable program components such as the operating system are illustrated herein as discrete blocks although it is recognized that such programs and components reside at various times in different storage components of the computer and are executed by the data processor s of the computer.

Aspects of the invention provide computer appliances having enhanced reliability as measured by mean time between system failures . Software redundancy is provided in the form of multiple operating systems that can be used to attempt to boot the computer appliance. The terms boot booting and boot up as used in the context of this document are intended to include those activities undertaken by a computer appliance to bring it into an operational state from either an unpowered state or a powered but unresponsive or problematic state. A cold boot is typically initiated by simply turning the appliance on and usually includes a Power On Self Test POST that checks system memory. A warm boot is typically initiated from a powered state and does not usually include the POST check. The warm boot is typically initiated when the computer appliance is unresponsive or has experienced a system failure from which recovery is not possible other than through a warm boot. The boot process which is built into the computer appliance s BIOS component however initiated then proceeds to load the system files needed to bring the computer appliance s operating system or user interface into a state of readiness.

In the described embodiment one or more hard disks are partitioned to include their own operating systems. The computer appliance first attempts to boot from a first of the hard disk partitions. If this attempt fails then a second of the partitions is utilized to attempt booting the appliance. In the described embodiment a primary operating system possibly having user defined settings and a pristine operating system having the manufacturer s default settings are provided on a common hard disk. If booting fails from the partition containing the primary operating system the pristine system is used to restore the primary operating system. In this manner booting is attempted from the partition containing the pristine operating system. In addition aspects of the invention can restore to the extent possible the user defined settings that might have been set on the primary operating system. In addition further hardware software redundancy is provided in the form of a mirror disk that includes copies of the primary and pristine operating systems. In the event that the computer appliance cannot be booted from the disk containing the primary and pristine operating systems the appliance or more accurately the appliance s BIOS component attempts to boot from the mirror disk. In the event that boot up fails from both of these disks the computer appliance enters a diagnostic mode in which the system failure can be addressed in a more specific manner that is unique to the particular appliance. By providing for software redundancy particularly when booting an appliance the likelihood that a system failure would prevent the appliance from operating for its intended purpose is reduced.

In a particular implementation the concept of a boot count variable is utilized as an accounting measure to track the number of boot attempts that are made relative to any one of the hard disk partitions. Each time an attempt is made to boot the appliance from a selected disk partition the boot count variable is incremented. When the boot count variable reaches a certain threshold value after the appliance has not been successfully booted from the selected disk partition a determination is made as to whether there is another disk partition that can be utilized to boot the appliance. If there is another disk partition the boot count variable is reset and booting is again attempted using the next disk partition. This process continues until there are no more disk partitions from which to boot. At that point the appliance can enter the diagnostic mode. In this manner attempts to boot an appliance can be made a measurable number of times before switching over to another disk partition. All of this processing takes place without the need for human intervention.

In another implementation a unique extendable architecture is provided for use in monitoring for and attempting to remedy failure conditions that are associated with various resources of a computer appliance. In the described embodiment one or more resource monitoring components are provided. Individual resource monitoring components are programmed to monitor the status of an associated computer appliance resource and to detect a failure condition in which the resource cannot be used by the computer appliance for its intended purpose. At least some of the resource monitoring components are programmed to attempt to remedy the failure condition in the event that the resource monitoring component detects a failure condition. An appliance monitoring service is provided and is configured to be in communication with the resource monitoring components. The appliance monitoring service is programmed to attempt to remedy failure conditions that cannot be remedied by the resource monitoring components. In the described embodiment the resource monitoring components are implemented as programming objects with interfaces that can be called for example to initiate their monitoring functions.

In addition the appliance monitoring service comprises an appliance monitor object and a global recovery object having callable interfaces. The appliance monitoring object can be called by one or more of the resource monitoring objects to report a resource failure condition e.g. in the event that the failure condition is one that cannot be remedied by the resource monitoring object. Responsive to receiving a call from a resource monitoring object the appliance monitoring object can then call the global recovery object which contains a collection of recovery algorithms that can be implemented to recover the appliance.

Aspects of the invention provide an automated flexible extendable appliance recovery system that greatly reduces the chances that human intervention is needed to recover an appliance that has experienced a system failure. In addition the inventive methods and systems reduce the possibility that a particular system failure will disrupt end user services.

In this example each of disk s are allocated into different portions or partitions that contain code that implements an operating system. In the context of this document a computer appliance s operating system is considered to include without limitation all of the software code that is necessary in order for the appliance to implement its designed functionality. As functionalities between appliances can differ so too can the operating systems that are programmed to implement those functionalities. Thus the inventive subject matter has applicability to a wide variety of operating systems.

In the present example disk has been allocated to include two partitions that have code stored thereon that implements the computer appliance s operating system. Partition contains a so called primary first operating system and partition contains a so called secondary or second pristine operating system. Similarly partition contains a primary or third operating system and partition contains a secondary or fourth pristine operating system. Partitions contain user data that can be used to adjust settings in the operating system i.e. the primary operating system . The primary operating systems may have user settings that have been set by a particular user. The pristine operating systems in this example are operating systems that come with the manufacturers settings. The secondary operating systems can serve as a pristine operating system in that it only functions to restore the first or primary operating system to a working state. Alternately the secondary operating systems can function as a fully functional operating system that provides end user services. The preferable configuration is for the backup operating system to serve as a pristine operating system. A pristine operating system restores the primary operating system by quick formatting the primary operating system partition and then installing a copy of the primary operating system onto the newly formatted partition. The pristine operating system can also restore configuration settings of end user services when service configuration checkpointing i.e. saving changes to service configuration in a location accessible from both the primary and pristine operating systems is employed from the primary operating system.

Each of partitions contain code that implements an operating system that is configured for use in booting up the computer appliance. The second operating system that is resident on partition serves as a back up operating system for the first operating system that is resident on partition . Similarly the fourth operating system that is resident on partition serves as a back up operating system for the third operating system that is resident on partition . The BIOS component of the computer appliance is programmed to or is programmable to first attempt to boot the appliance using a primary operating system. In the event that the appliance cannot be booted from a primary operating system the BIOS component is programmed or programmable to attempt to boot the computer appliance with one of the back up operating systems.

As an example consider the following When a computer appliance attempts to boot up the BIOS component will first attempt to boot using the primary operating system that is resident on partition of the main disk . If for some reason during boot up the boot up operation fails the BIOS component is programmed to attempt to boot the appliance using the secondary operating system that is resident on partition of main disk . Continuing if the boot up operation fails using the secondary operating system of partition then the BIOS component is programmed to attempt to boot the appliance using the primary operating system that is resident on partition of mirror disk . If this boot up operation fails then in this example the last resort is for the BIOS component to attempt to boot the appliance using the operating system that is resident on partition of mirror disk .

The primary goal of this system is to place the computer appliance into an operating state without the need for any human intervention. This is achieved in the described embodiment by having software redundancy in the form of multiple operating systems that can be accessed by the BIOS component during the boot up process.

Step initiates the boot up process for an appliance. At step the appliance attempts to boot up from a first partition of the hard drive. An exemplary first partition might comprise partition . Step determines whether the boot was successful. For a boot to be successful an appliance should be placed into a desired operating state. In this operating state an appliance should be able to perform all or most of the functions for which it is intended. There may be some instances when an appliance will be considered to have booted successfully yet it might lack some of its intended functionality. Because appliances can vary greatly in their functionalities the functionalities that can be lacking and still result in a successful boot will vary as well. If step determines that the boot has been successful then operation of the appliance will continue step . If on the other hand step determines that the appliance has not booted successfully then step attempts to boot the appliance from a second partition of the hard drive. An exemplary second partition might comprise partition . Step then determines whether the boot was successful. If the boot was successful then operation of the appliance continues step . If on the other hand the boot is not successful then step attempts to boot the appliance from a third partition of the hard drive. The third partition might comprise partition of hard disk . Step then determines whether the boot is successful. If it is then operation of the appliance continues step . If the boot is not successful then step attempts to boot the appliance from a fourth partition of the hard drive. This partition might comprise partition of hard disk . If the boot is successful step then operation of the appliance continues step . If on the other hand the boot is unsuccessful then the appliance enters a diagnostic mode step .

In the illustrated example the code that implements the boot up redundancy can be adapted to many different appliances. These appliances will necessarily have varying considerations as to what constitutes a successful boot. In addition these appliances will have variances as to what constitutes a diagnostic mode. Accordingly one of the aspects of the inventive methods and systems provides a generalized framework for handling many different types of appliances. The framework is adaptable for example by OEMs that design software or hardware for the appliances so that the appliances behave in a manner that is consistent with the designer s intentions yet still conform to some degree of redundancy that assures better reliability. For example an appliance can be modular in the sense that OEMs can design and use pluggable drivers e.g. printer drivers display drivers soft power drivers and the like that essentially plug into the appliance. The redundancy system described above and below can in line with the plugability of the appliance be adapted to accommodate the different drivers that the OEMs might design. In this sense one of the advantageous features of the described embodiment is its adaptability to different appliance scenarios.

In the described embodiment a so called boot count variable is defined and used as an accounting measure in administering the boot up redundancy function. The boot count variable tracks the number of boot attempts for a particular appliance. If the boot count variable reaches or exceeds a predetermined or predefined threshold value then the appliance BIOS is programmed to boot from another disk partition. If there is no other disk partition from which to boot the appliance enters a diagnostic mode. In some instances OEMs or manufacturers can set the threshold value to whatever value is appropriate for their particular appliance.

The above exemplary boot up process ensures that an appliance s BIOS component will have at least one other disk partition from which to boot in the event that the appliance fails to boot for whatever reason from the first attempted disk partition. Having a boot count variable that is measured against a definable threshold value gives a degree of tolerance for the appliance in that booting can be attempted from a selected disk partition any number of practical times before moving on. This helps to ensure that a glitch in the first attempted boot up from a selected disk partition does not preclude using that same disk partition to make second and or additional attempts to boot the appliance.

The described embodiment makes use of various software hardware components to reduce the chances that a computer appliance will need human intervention in the event that a system failure occurs. These components all work together to achieve this goal. The components can be arranged and considered in four groups. It will be appreciated that the described groupings of components is not intended to limit the invention in any way. Accordingly other groupings of components that achieve the above stated goal can be used without departing from the spirit and scope of the invention.

A first of the groups can be considered as the redundant operating system with recovery capabilities. This group was described in connection with . A second of the groups can be considered as the system BIOS operation an example of which was described above in connection with . The third and fourth component groups can be considered as resource monitoring services and as a monitoring timer respectively. These last two groups are described in connection with .

Resource monitor is a software component that functions to detect failure conditions associated with various appliance resources and attempts to adapt to or fix them. In the described embodiment individual appliance resources are monitored by individual resource monitoring components. Monitoring takes place during the boot up process as well as during operation of the appliance after a running state is achieved. The monitoring components are programmed to monitor the status of an associated computer appliance resource and to detect a failure condition in which the resource might not or cannot be used by the computer appliance for its intended purpose. Individual resource monitoring components are also programmed to attempt to remedy one or more failure conditions in the event that one is detected. In the illustrated example two exemplary resource monitoring components are shown implemented as programming objects e.g. COM objects with one or more interfaces that can be called by other components. An interface can be considered as a collection of one or more semantically related methods that can be called. Individual interfaces are illustrated by the plug notation in the figure. In the illustrated example each resource monitoring object has three interfaces that are discussed in more detail is below.

Appliance monitoring service is a system wide monitor that is programmed to attempt to remedy failure conditions that cannot be remedied by one or more of the resource monitoring components. In the illustrated example the appliance monitoring service includes two components an appliance monitor and a global recovery policy module

The appliance monitor is implemented in this example as a programming object having one or more interfaces. The appliance monitor implements a state machine that essentially maintains a global state of the appliance i.e. initializing running recovering shutting down and the like . The inputs to the state machine originate from the resource monitoring components as well as other appliance aware services. The action routines for the state machine events handle boot count manipulation the boot count and fail over mechanisms described above system event log reporting appliance power off appliance reset and invocation of the global recovery policy module

Global recovery policy module is implemented as a plug in component that implements resource recovery algorithms. Input into the global recovery policy module consists of a set of attributes properties that describe a specific resource failure condition. The module then reacts to the failure condition by running a recovery algorithm. The level of service disruption caused by a global recovery operation can run the gamut from no disruption the user is unaware that a problem has occurred to a total disruption worst case fail over to an alternate operating system . A primary function of the global recovery policy module is to handle failure conditions that cannot be handled by an associated resource monitoring object. The global policy module is pluggable in that it can be modified as required to deploy updated resource recovery algorithms.

Monitoring timer is a mechanism that is used to detect software failures. In the described embodiment the monitoring timer detects failures in the resource monitoring components . In this particular example the monitoring timer is configured to receive periodic notifications pings that are generated and sent from a special resource monitoring component in accordance with a definable frequency. The absence of such notifications is indicative of the failure of the resource monitoring service. In the described embodiment all of the resource monitoring components are in process. Hence if a resource monitoring component misbehaves causes an unhandled exception for example then the resource monitoring service is terminated. This is turn will terminate the periodic notifications that are being generated and sent by the special resource monitoring component. When this happens the system assumes that there has been a software failure and the system is reset i.e. rebooted . This prevents failures in the resource monitoring components from hanging the system.

Step initiates the boot up process for an appliance and step initializes one or more of the resource monitoring components . After the resource monitoring components have been initialized each resource monitoring component monitors its associated resource step . At step each of the resource monitoring components having an associated resource to monitor determine whether there is a failure condition. The step can be implemented by having the resource monitoring component poll its associated resource or methods that return metrics about the resource s operation. Examples of this are given below. If no failure is detected then the method returns to step and continues monitoring the associated resource. If on the other hand step detects a failure then step determines whether it is of the type of failure that can be remedied or fixed by the individual resource monitoring component. Each of the individual resource monitoring components can be programmed to make this determination. If the failure condition is one that can be remedied by an associated resource monitoring component then step attempts to fix the failure condition. If on the other hand step determines that the failure condition cannot be remedied by the resource monitoring component then step notifies the appliance monitoring service . In the described embodiment notification takes place by calling an interface on the appliance monitoring object as will become apparent below. The appliance monitoring object then receives the notification step from the resource monitoring component and invokes the global recovery policy object step . As indicated above the global recovery policy object maintains a collection of recovery algorithms that can be used to attempt to recover the resource. The recovery algorithms are designed to make decisions concerning whether the operating system has failed whether a reboot can recover the system or whether recovery can be accomplished in place without rebooting and with little or no end user service disruption .

Consider the following example of a server appliance that executes a subsystem of Microsoft s WIN32 operating system. The server appliance is designed to have filing sharing Internet sharing and print sharing capabilities. In the illustrated example there are four resource monitoring components a virtual machine monitor a paged memory monitor a process monitor and a WMI service monitor.

The Virtual Machine Monitor VMM is responsible for controlling the operation of a virtual machine that includes a local display driver monitoring timer driver soft power switch driver and a non volatile RAM driver. The VMM resource monitoring object RMO controls the following virtual machine functions based on system status information it receives from the appliance monitoring service e.g. in 

The VMM RMO begins monitoring timer pings upon being initialized by the appliance monitoring service. The VMM stops timer pings during appliance shutdown. The timer represents a hardware supported system failure detection and recovery mechanism. If it does not receive a periodic keep alive ping call from the software it reacts by rebooting the system.

The VMM RMO begins polling the soft power switch driver upon being initialized by the appliance monitoring service. The VMM stops polling the soft power switch driver when the appliance is shutting down.

Certain system states shutting down booting initializing etc. are reflected at the server appliance local display if present . The VMM RMO registers for appliance state notifications and reports system states to the Local Display components as appropriate.

The System Memory Monitor SMM is responsible for tracking system paged virtual memory utilization and reacting to low memory conditions. The System Memory Monitor operates by polling an ntdll.dll service GlobalMemoryStatus at 200 millisecond intervals the poll interval is configurable . The GlobalMemoryStatus function returns metrics about system memory utilization including the amount of free space in the page file. If the amount of free space in the page file is less than 10 10 is a configurable trigger value of the total page file size then the SMM advises the appliance monitoring service that a critical error has occurred. The goal of this mechanism to detect memory exhaustion before memory allocation requests begin to fail. The reason for this mode of operation is that many applications do not properly recognize and react to memory allocation failures.

In this example the resource monitoring component cannot remedy the failure condition. Specifically memory resources cannot be directly recovered by the SMM. Instead the SMM notifies the appliance monitoring service that a critical error has occurred i.e. OUT OF MEMORY . The critical error is then fed into the appliance state machine that reacts by invoking the global recovery policy module . The global recovery policy module handles an out of memory problem by terminating services in the critical service set i.e. the set of service applications providing end user services . Once services have been terminated the appliance state machine sends out a state change notification from RECOVERING to RUNNING . If the SMM determines that the problem was addressed upon receiving the state change notification page file space is below threshold levels then it continues with its monitoring chores and the services in the critical service set are automatically restarted by the appliance monitoring service. Otherwise the SMM asks for an appliance reset disruptive recovery .

The Process Monitor is responsible for detecting unhandled process exceptions. The Process Monitor reacts to process exceptions by informing the appliance monitoring service that a critical system error has occurred.

In this example the Process Monitor is implemented as a Windows executable svrappeh.exe that is invoked by the NT Executive when an unhandled ti exception occurs AeDebug key points at svrappeh.exe . The Process Monitor uses the Win32 debug application program interfaces APIs to glean information from the problematic process. Information about the process is then provided to the appliance monitoring service the Process Monitor performs no recovery functions itself after which the problematic process is terminated.

Process interdependencies can form a very complex graph which is not necessarily acyclic especially when COM is employed for inter process communication consider the case where process X has a COM reference to process Y then process Y fails leaving process X unable to perform its intended function . Although it may be possible to track these dependencies from outside the core operating system it is probably not feasible to do so the implementation of such a mechanism might prove extremely rigid capable of handling only a subset of the possibilities or it might prove difficult to maintain over time given changes to operating system interfaces and mechanisms . Accordingly process recovery is as follows 

If the appliance is in the RUNNING state log the process error and continue deem the process failure as non critical . If the process that failed is an element of the critical services set it will be restarted by the Services Monitor a subcomponent of the appliance monitoring service .

If the Appliance is in the INITIALIZING state then treat the failure as a critical error. While in the initializing state all critical errors result in a reboot of the appliance. If the problem persists across boots then BIOS will attempt to boot from the pristine operating system. The pristine operating system can operate by disabling the errant process in the primary operating system depending on whether or not the errant process disrupts end user services or notifing the end user via the local display which may be as simple as a back lit icon that a critical error has occurred.

The WMI Service Monitor is responsible for detecting instances where winmgmt.exe on Windows NT SP5 enters a state where it disallows local connections. While winmgmt.exe is in this state several appliance components cannot operate properly resulting in service disruption. This state may be caused by one or more errant in process WMI provider components.

The WMI Service Monitor polls winmgmt.exe and attempts to establish a local connection to WMI at a configurable interval e.g. 45 seconds. If a connection cannot be established a critical error service failure is reported to the appliance monitoring service. The appliance monitoring service responds to the critical service failure by invoking the global recovery policy module . The global recovery policy module handles a service failure by terminating the process of the errant service and the processes of any services dependent upon it. The services are then automatically restarted by the appliance monitoring service.

The described embodiment makes use of a number of application program interfaces APIs examples of which are illustrated in .

The following table illustrates exemplary interfaces that are or can be exported by the appliance monitor object and each resource monitoring object e.g. resource monitoring objects .

This interface is provided so that resource monitors that wish to receive appliance events can receive them.

This interface is exported by the appliance monitor object and is used by the resource monitoring objects to report initialization status. The interface includes the following enumeration 

This is the primary interface on the appliance monitor object and includes the following enumeration 

Components that monitor system wide resources must export this interface SO that the resource monitoring is activated before other system components are started.

Aspects of the invention described above provide an automated flexible extendable appliance recovery system that greatly reduces the likelihood that human intervention is needed to recover an appliance that has experienced a system failure. In addition the inventive methods and systems reduce the possibility that a particular system failure will disrupt end user services.

Although the invention has been described in language specific to structural features and or methodological steps it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features or steps described. Rather the specific features and steps are disclosed as preferred forms of implementing the claimed invention.

