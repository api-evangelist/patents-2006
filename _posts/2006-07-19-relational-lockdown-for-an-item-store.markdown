---

title: Relational lockdown for an item store
abstract: Various mechanisms are provided for the lockdown of an item store. For example, a method is provided that comprises of disabling access to a relational engine for a set of users associated with a filing system utilizing the relational engine to manipulate data in an item store. Following such disabling of access, an exception is created by allowing access to the relational engine for users of the filing system based on a set of privileges the users have been assigned. The disabling of access can be accomplished by removing system users from ownership roles, and the allowing of access can be accomplished by providing certificates to users that have associated set of privileges granted to the users.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08250094&OS=08250094&RS=08250094
owner: Microsoft Corporation
number: 08250094
owner_city: Redmond
owner_country: US
publication_date: 20060719
---
A portion of the disclosure of this patent document may contain material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent files or records but otherwise reserves all copyright rights whatsoever. The following notice shall apply to this document Copyright 2004 2006 Microsoft Corp.

The present subject matter relates to the field of computing and more particularly to file and or storage systems although such systems correspond to merely an exemplary and non limiting field of the presently disclosed subject matter.

Storage and management systems such as WinFS Microsoft Windows Future Storage or Microsoft Windows File System for example allow different kinds of data to be identified by metadata and use this metadata to set up relationships among data thereby giving a semantic structure to it. These relationships can then be used by a relational database to enable searching and dynamic aggregation of such data allowing it to be presented in a variety of ways. In one setup WinFS can include a relational database engine derived from the Microsoft SQL Server database platform to facilitate such manipulation of data.

One problem associated with this setup is data model integrity. WinFS items are persisted as relational objects using a well defined item data model. Items can be retrieved using T SQL views and modified using a robust update infrastructure. The update infrastructure enforces security and safeguards the integrity of item data model. Arbitrary SQL access to an item store may result in compromise of the integrity of data model. Thus it would be advantageous to provide mechanisms to maintain data model integrity.

Another problem associated with this setup is the disclosure of intellectual property. A significant intellectual property of the item store implementation lies in the layout of object persistence and the implementation of the update infrastructure. Arbitrary SQL access to the item store will expose the patterns for object persistence and details of update infrastructure. This exposure may result in loss of advantage with competitors in similar technological spaces. Thus it would be advantageous to provide mechanisms that prevent the disclosure of intellectual property.

Yet another problem associated with the aforementioned setup is security. A full fledged relational engine increases the security attack surface area in the item store. Security vulnerabilities in the relational engine can be exposed in operating system clients and servers with installations of item store. In addition awareness of implementation details may lead to leveraged security attacks. Thus it would be advantageous to provide mechanisms that maintain the security of WinFS data.

In short mechanisms are needed whether systems methods computer readable media and so on that addresses these shortcomings of the prior art.

In one aspect of the presently disclosed subject matter mechanisms are provided for the relational lockdown of an item store. For example a two stage process can be used 1 disabling access to a relational engine for a set of identities users associated with a filing system utilizing the relational engine to manipulate data in an item store and 2 following such disabling allowing access to the relational engine for at least one identity of the filing system based on a set of privileges the identity has been assigned.

More specifically disabling access to the relational engine can comprise of removing all identities from roles that specify ownership of items in the item store. On the other hand allowing access can comprise of providing access to said relational engine by using security certificates. Such security certificates can sign any commands intended for the relational engine thus marking these commands. Such markings in turn can convey to the relational engine what set of privilege users have and thus what data manipulation on the item store to allow and which to disallow.

It should be noted that this Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Certain specific details are set forth in this description and accompanying figures to provide a thorough understanding of various aspects of the presently disclosed subject matter. However certain well known details often associated with computing and software technology are not set forth in this disclosure in order to avoid unnecessarily obscuring these various aspects. Further those of ordinary skill in the relevant art will understand that they can practice other aspects of the presently disclosed subject matter without one or more of the details described below. Finally while various methods are described with reference to steps and sequences in this description the description as such is for providing a clear implementation of the aforementioned aspects and the steps and sequences of steps should not be taken as required to practice this subject matter.

Although the concepts ideas and features described herein are described in an exemplary fashion with respect to how they are implemented in a file system called Microsoft Windows Future Storage or Microsoft Windows File System WinFS and the Microsoft Windows Vista operating system formerly code named Longhorn implementations in and applicability to other operating and file systems are contemplated entirely possible and apparent to those skilled in the art based on the exemplary descriptions provided herein. Provided in this section is an overview of WinFS drawn largely from sources such as http www.msdn.com and other derivative sources thereof such as http en.wikipedia.org wiki WinFS which includes description of the data storage data model type system relationships rules access control data retrieval search and data sharing aspects of WinFS.

WinFS is a data storage and management system based on relational databases developed by Microsoft Corp. headquartered in Redmond Wash. for use as an advanced storage subsystem for the Microsoft Windows operating system. Implemented on top of the NT File System NTFS one of the file systems for the Microsoft Windows NT operating system WinFS is a centralized data store for the Microsoft Windows platform.

In WinFS artificial organization using names and location is done away with and a more natural organization is created than in hierarchical or desktop search systems namely one using rich properties to describe the data in files and the relation of that data with other data. By creating a unified datastore WinFS promotes sharing and reuse of data between different applications. One advantage of any prior art is that any application or even the file browser can understand files created by any application. Addition of rich properties gives further meaning to the data such as which persons appear in which pictures and the person an e mail was addressed to. But instead of viewing the pictures and e mails and files WinFS recognizes picture and e mail to be specific types of data which are related to person using the relation of some person. So by following the relation a picture can be used to aggregate e mails from all the persons in the picture and conversely an e mail can aggregate all pictures in which the addressee appears in. WinFS extends this to understand any arbitrary types of data and the relations that hold them together. The types and relations have to be specified by the application that stores the data or the user and WinFS organizes the data accordingly.

WinFS stores data in virtual locations called stores. A WinFS store is a common repository where every application will store their data along with its metadata relationships and information on how to interpret the data. In this way WinFS does away with the folder hierarchy and allows searching across the entire repository of data.

WinFS store can actually be a relational store where applications can store their structured as well as unstructured data. Based on the metadata type of data and also the relationships of the data with other data as can be specified by the application or the user WinFS will assign a relational structure to the data. By using the relationships WinFS can aggregate related data. WinFS provides a unified storage but stops short of defining the format that is to be stored in the data stores. Instead it supports data to be written in application specific formats. But applications have to provide a schema that defines how the data should be interpreted. For example a schema could be added to allow WinFS to understand how to read and thus be able to search and analyze say a contact. By using the schema any application can read data from any other application and also allows different applications to write in each other s format by sharing the schema.

Multiple WinFS stores can be created on a single machine. This allows different classes of data to be kept segregated. For example official documents and personal documents can be kept in different stores. WinFS by default provides only one store named DefaultStore. WinFS stores are exposed as shell objects akin to virtual folders which dynamically generates a list of all items present in the store and presents them in a folder view. The shell object also allows for the searching of information in the datastore.

WinFS does not have to be a physical file system. Rather it can provide rich data modeling capabilities on top of the NTFS file system. It can use NTFS to store its data in physical files. WinFS can also use a relational engine which may be derived from Microsoft SQL Server for example in order to provide a data relations mechanism since the relation system in WinFS is similar to the relation system used in relational databases. WinFS stores can be SQL Server database .MDF files with a FILESTREAM attribute set. These files can be stored in a secured folder named System Volume Information placed into the volume root and in folders under the folder WinFS with names of GUIDs of these stores.

WinFS also can allow programmatic access to its features for example via a set of Microsoft NET .NET application programming interfaces APIs that enables applications to define custom made data types define relationships among data store and retrieve information allow advanced searches and so on. The applications can then use novel ways of aggregating data and presenting the aggregated data to the user.

A data unit that is stored in a WinFS store is called a WinFS item. A WinFS item also contains information on how the data item is related with other data. A WinFS Item can further consist of sub entities called Fragments. WinFS allows Items and Fragments to be related together in different ways. The different types of relationships are 

WinFS helps in unification of data and thus it reduces redundancies. If different applications store data in a non interoperable way data has to be duplicated across applications which deal with same data. For example if more than one e mail application is used the list of contacts must be duplicated across the two. So when there is any need for updating contact information it must be done at two places. If by mistake it is not updated in one of the applications it will continue to have outdated information. But with WinFS an application can store all the contact information in a WinFS store and supply the schema in which it is stored. Then other applications can use the stored data. By doing so duplicate data is removed and with it the hassles of manually synchronizing all instances of the data are obviated.

WinFS models data using the data items along with its relationships fragments and rules governing its usage. WinFS needs to understand the type and structure of the data items so that the information stored in the data item can be made available to any application that requests it. This is done by the use of schemas. For every type of data item that is to be stored in WinFS a corresponding schema needs to be provided which will define the type structure and associations of the data. These schemas are defined for example using Extensible Markup Language XML . XML allows designers to create their own customized tags enabling the definition transmission validation and interpretation of data between applications and between organizations.

Predefined WinFS schemas include schemas for messages contacts calendars file items etc. and also includes system schemas that include configuration programs and other system related data. Custom schemas can be defined on a per application basis in situations where an application wants to store its data in WinFS but not share the structure of that data with other applications. Or they can be made available across the system.

One key difference between WinFS and other file systems is that WinFS knows the type of each data item that it stores where the type specifies the properties of the data item . The WinFS type system can be closely associated with the .NET Framework s concept of classes and inheritance. A new type can be created by extending and nesting any predefined types.

For example shows a block diagram illustrating an exemplary type hierarchy. Shown is item that has three other item types deriving from it contact document and picture . Item can be a type that serves as a base class for other items namely contact type which may contain various contact information name address etc. document type that may contain various documentation information and picture type which may have various digital images. The three aforementioned types and may have a specified relationship to the item type for instance some inheritance relationship .

In particular WinFS provides four predefined base types Items Relationships ScalarTypes and ComplexTypes sometimes referred to as NestedTypes . An Item is the fundamental data object which can be stored and a Relationship is the relation or link between two data items. Generally since all WinFS items should have a type the type of item stored defines its properties. The properties of an Item may be a ScalarType which defines the smallest unit of information a property can have or a ComplexType which is a collection of more than one ScalarTypes and or ComplexTypes. All WinFS types are made available as .NET Common Language Runtime CLR classes. CLR is the core runtime engine in the Microsoft .NET Framework for executing applications.

Any object represented as a data unit such as contact picture document etc can be stored in a WinFS store as a specialization of the Item type. By default WinFS provides Item types for Files Contacts Documents Pictures Audio Video Calendar and Messages. The File Item can store any generic data which is stored in file systems as files. The file item may not be specialized derived from but a WinFS schema can be provided to extend it using fragments that are added on to particular instances of File items. A file Item can also support being related to other Items. A developer can extend any of the WinFS types other than File item or the base type Item to provide a type for his or her custom data.

Referring next to shown is a block diagram illustrating an example use of the predefined types in defining a new type. The data contained in an Item is defined in terms of properties or fields which hold the actual data. For example an Item Contact may have a field Name which is a ScalarType and one field Address a ComplexType or NestedType which is further composed of two ScalarTypes Street and City . To define this type the base class Item is extended and the necessary fields are added to the class. A ComplexType field can be defined as another class which contains the two ScalarType fields. Once the type is defined a schema is defined which denotes the primitive type of each field. For example the Name field can be a string the Address field is a custom defined Address class. And both of the ScalarTypes can be strings. Furthermore other primitive types that WinFS supports are Integer Byte Decimal Float Double Boolean and DateTime and so on. The schema will also define which fields are mandatory and which are optional. The Contact Item defined in this way will be used to store information regarding the Contact by populating the properties field and storing it. If more properties on the item need to be added such as last conversed date this type can be simply extended to accommodate them. Item types for other data can be defined similarly.

Referring next to shown is a block diagram illustrating an exemplary relation stored as a reference to a particular row in the table of an item. WinFS creates a table for all defined Items . All the fields defined for the Picture Item form the columns of the table and all instances of the Picture Item are stored as rows in the table for the respective Item . A Relation is stored as a reference to the particular row in the table of the Contact Item which holds the instance of the target Item with which the current Item is related. All Items can be exposed as .NET CLR objects with uniform interface providing access to the data stored in the fields. Thus any application can retrieve object of any Item type and can use the data in the object without worrying about the physical structure the data was stored in.

Items can be related to one more other items giving rise to a one to one relationship or with more than one item resulting in a one to many or many to one relationship. The related items in turn may be related to other data items as well resulting in a network of relationships which is called a many to many relationship. Creating a relationship between two items creates another field in the data of the items concerned which refers to the row in the other item s table where the related object is stored.

Referring next to shown is a block diagram illustrating an exemplary relationship between two items . A Relationship represents a mapping between any two items namely a Source Item e.g. a picture item and a Target Item e.g. a contact item . From the point of view of the Source item the relationship is an Outgoing Relationship whereas from the point of view of the target item it is an Incoming Relationship. Relationships are bidirectional which means that if the Source is related to a Target the Target is also related to the Source .

WinFS includes Rules which are executed when certain conditions are met. WinFS rules work on data and data relationships. For example a rule can be created which states that whenever an Item is created which contains field Name and if the value of that field is some particular name a relationship should be created which relates the Item with some other Item. WinFS rules can also access any external application. For example a rule can be built which launches a Notify application whenever a mail is received from a particular contact. WinFS rules can also be used to add new properties fields to existing data Items.

WinFS rules are also exposed as NET CLR objects. As such any rule can be used for any other purposes. They can be even extended by inheriting them to form a new rule which consists of the condition and action of the parent rule plus something more or new.

Even though all data is shared everything does not have to be equally accessible. WinFS uses Microsoft Windows authentication system to provide two data protection mechanisms. First there is share level security that controls access to the WinFS share. Second there is item level security that supports Microsoft Windows NT compatible security descriptors. The process accessing the item must have enough privileges to access it. Also in Microsoft Windows Vista there is the concept of integrity level for an application. A higher integrity data cannot be accessed by a lower integrity process.

The primary mode of data retrieval from a WinFS store is searching for the required data and enumerating through the set of Items that has been returned. WinFS also supports retrieval of the entire collection of Items that is stored in the WinFS store or returning a subset of it which matches the criteria that has been queried for.

WinFS makes all data available as CLR objects. So the data retrieved which is encapsulated as an object has intrinsic awareness of itself. By using the abstraction provided by use of objects it presents a uniform interface to hide its physical layout and still allow applications to retrieve the data in an application independent format or to get information about the data such as its author type and its relations.

For each Item that has been returned WinFS can also return a set of Relations which specify the Relations the Item is involved in. WinFS can return all the relations of the Item or can return Relations that conform to a queried criterion. For each pair or Item and Relation WinFS can retrieve the Item which forms the other end of the Relation. Thus by traversing the Relations of an Item all the Items that are related with the Item can be retrieved.

WinFS application programming interface API provides a class called the ItemContext class which is used to query for and update WinFS Items. The criterion for the query is expressed using an ESQL Entity SQL query string which is derived from Transact SQL TSQL and extends it with additional support for rich types collections and objects. As an example the following query will return a collection of messages located in a folder given the folder s ItemId itemId and that has a Title that starts with a specified string 

The above statement is very similar to a transact SQL statement with the addition of a new operator of Type. Joins order by group by aggregate functions nested queries can also be used in ESQL. ESQL however does not have to provide 100 compatibility with TSQL. An ESQL query can specify a single search condition or a compound condition. ESQL queries can also be used with relations to find related data.

WinFS allows easy sharing of data between applications. Additionally there may be a provision to share data among multiple WinFS stores as well which might reside on different computers by copying to and from them. A WinFS item can also be copied to a non WinFS file system. But unless that data item is put back into WinFS store it won t support the advanced services provided by WinFS.

WinFS APIs also provide some support for sharing with non WinFS applications. WinFS exposes a shell object to access WinFS stores. This object which maps the WinFS items to a virtual folder hierarchy can be accessed by any application. Non WinFS file formats can be stored in WinFS stores as well using the File Item provided by WinFS. Importers can be written which convert specific file formats to WinFS Item types.

WinFS data can also be manually shared using network shares by sharing the legacy shell object. In addition WinFS provides synchronization services to automatically synchronize Items in two or more WinFS stores subject to some predefined condition such as share only photos or share photos which have an associated contact. The stores may be in the same computer or on different computers. Synchronization is done in a peer to peer mode eliminating the need to any central authority to manage the synchronization. Whenever a synchronization is initiated which can be either manual or automatic or scheduled WinFS can enumerate the changes i.e. it finds out which Items are new or changed and therefore in need of synchronization and then it can update them accordingly . If two or more changes are conflicting WinFS can either resort to automatic resolution of the conflict based on predefined rules or it can defer them for manual resolution.

In the kernel mode if such a WinFS system is coupled to an operating system it may interact with a CLR module and a storage module that may contain a host of other modules performing a variety of tasks as those of skill in the art will readily appreciate distributed file system transactional NTFS identity and security system transactions volume shadow copy service data protection module client side caching redirectors and so on as shown in . However the WinFS system depicted in can work with any operating system not necessarily the kernel illustrated in . Additionally the WinFS system can also act as a standalone module working by itself or capable of interfacing with other modules and applications.

The scope of access may differ for such programs for security business intellectual property protection and other reasons. A lockdown mechanism can monitor the type of access in question whether the access comprises functions such as Select Insert Update Delete Grant Deny Revoke Creation operations such as CreateTable and so on. The lockdown mechanism not only might prevent certain access by the WinFS program but it may posit the types of access the WinFs program or other programs can engage in.

The lockdown mechanism can employ a two step process i.e. it may comprise of two stages 1 disallowing all access by WinFS users and then 2 based on this blanket disallowance make some exceptions to allow a limited set of privileges by WinFS users.

Regarding the first disallowance stage a typical security model such as SQL gives carte blanche to the owner of an object. All the WinFS objects may be owned by special user namely a data base owner DBO and members of a system administration sysadm role can be mapped to DBO in all databases. Therefore members of the sysadm role have full access to the SQL securable objects on which WinFS item may be stored . Built in administrators BAs by default members of the sysadm role and hence BAs have full permissions on all WinFS objects Tables Procedures etc. . To deny relational access to administrators on WinFS the lockdown mechanism removes BAs and other such administrators from SQL sysadm role i.e. a group . The removal of BA from sysadm and the lack of public grants equally guarantee denial of relational support to WinFS users including administrators.

Regarding the second allowance stage the lockdown mechanism may use security certificates to allow limited access by WinFS users. A security certificate is typically issued by a trusted organization or entity called a certification authority CA after the CA has verified that the entity is who it says it is. Certificates can contain different types of data. For example an X.509 certificate includes the format of the certificate the serial number of the certificate the algorithm used to sign the certificate the name of the CA that issued the certificate the name and public key of the entity requesting the certificate and the CA s signature.

Such certificate based cryptographic signing gives two fundamental assurances the identity of the signer and integrity of the content. For example signing a procedure may grant it definer s rights in addition to invoker s rights. At a given time the rights for say a SQL context are the rights of the SQL principal combined with the rights of the code. The following is the meta level instructions to create a certificate and sign a sample procedure. The steps below grant execute to a procedure enabling the caller to insert data into a table e.g. customer that the user does not have direct INSERT permission on 

When a signable object is signed by a certificate the user e.g. DemoCertUser becomes a secondary principal in the security token while executing that module. All the permissions associated with the DemoCertUser are automatically applicable in the execution context of the procedure. This provides an efficient mechanism to selectively grant special permissions while executing certain modules that are otherwise unavailable to the calling user.

Furthermore counter signatures are relevant when a signed module invokes another module. There are instances where it is useful to have the secondary context preserved while executing the callee and cases where the secondary context should be dropped from the security context while executing the callee.

Counter signatures are applied to the callee. When the caller who is signed with a certificate invokes a callee that is countersigned with the same certificate rights derived from the certificate are preserved while executing the callee. If the callee is not countersigned with the same certificate rights derived from the certificate are dropped while executing the callee. If one invokes the countersigned module directly it does not inherit any rights by virtue of the associated countersign certificate. So countersignatures extend user permissions for a module only if it is called by another module signed by the same certificate. For both signing and countersigning an offline mechanism can be used which applies precomputed signatures obviating the need for the presence of a public key this system.

If the certificate is appropriate per the discussion above access to the storage engine is allowed. Either direct permissions grants to a certificate signing or ownership chaining countersigning can be used for all DML and DDL operations required by WinFS implementation in the store DDL may be required for components like schema installations etc . Store side components functions and procedures in base filesystem etc. that require additional SELECT access to a Row Level Security RLS protected rows in the tables can be signed with the base security certificate that is granted the exempt RLS privilege. The RLS infrastructure honors this privilege and lets the caller bypass RLS giving seamless query access to relevant tables. Direct grants ownership chaining and RLS exempt together facilitate comprehensive relational support for WinFS components for e.g. CreateItem .

In another aspect of the lockdown mechanism a group of users may have an associated set of privileges. These users may be associated with a set of respective certificate users which are connected with a set of respective certificates. These certificates are tied to markers signatures or tokens that sign any give piece of code. The markers are presented at the relational engine and access to the store is either allowed or disallowed based on the markers. Or put another way access is granted or denied based on the union of all the privileges that users have.

The blanket disallowance of access by any users to WinFS by the lockdown mechanism and then the granting of a limited set of privileges to these users to access the item store allows the lockdown mechanism to tightly control any manipulations on items in the store. Thus any piece of code presented to an API such as Update APIs is signed with a certificate and then as a result of this action the code has a marker which ties back to the set of privileges a user may have. Access or denial thereof is then based on what access privileges such a user has.

Referring to shown is a block diagram representing an exemplary computing device suitable for use in conjunction with implementing the systems and methods described above. For example the computer executable instructions that carry out the processes and methods for a relational lockdown for an item store may reside and or be executed in such a computing environment as shown in . The computing system environment is only one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the presently disclosed subject matter. Neither should the computing environment be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment . For example a computer game console may also include those items such as those described below for use in conjunction with implementing the processes described above.

Aspects of the presently disclosed subject matter are operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the this subject matter include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

Aspects of the presently disclosed subject matter may be implemented in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Aspects of the presently disclosed subject matter may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

An exemplary system for implementing aspects of the presently disclosed subject matter includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through an non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through a output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

It should be understood that the various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the presently disclosed subject matter or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the presently disclosed subject matter. In the case of program code execution on programmable computers the computing device generally includes a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may implement or utilize the processes described in connection with the presently disclosed subject matter e.g. through the use of an API reusable controls or the like. Such programs are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

Although exemplary embodiments may refer to utilizing aspects of the presently disclosed subject matter in the context of one or more stand alone computer systems the said subject matter is not so limited but rather may be implemented in connection with any computing environment such as a network or distributed computing environment. Still further aspects of the presently disclosed subject matter may be implemented in or across a plurality of processing chips or devices and storage may similarly be effected across a plurality of devices. Such devices might include personal computers network servers handheld devices supercomputers or computers integrated into other systems such as automobiles and airplanes.

In light of the diverse computing environments that may be built according to the general framework provided in the systems and methods provided herein cannot be construed as limited in any way to a particular computing architecture. Instead the presently disclosed subject matter should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the appended claims.

Referring next to shown is an exemplary networked computing environment in which many computerized processes may be implemented to perform the processes described above. For example parallel computing may be part of such a networked environment with various clients on the network of using and or implementing the defining and extracting of a flat list of search properties from a rich structured type. One of ordinary skill in the art can appreciate that networks can connect any computer or other client or server device or in a distributed computing environment. In this regard any computer system or environment having any number of processing memory or storage units and any number of applications and processes occurring simultaneously is considered suitable for use in connection with the systems and methods provided.

Distributed computing provides sharing of computer resources and services by exchange between computing devices and systems. These resources and services include the exchange of information cache storage and disk storage for files. Distributed computing takes advantage of network connectivity allowing clients to leverage their collective power to benefit the entire enterprise. In this regard a variety of devices may have applications objects or resources that may implicate the processes described herein.

This network may itself comprise other computing entities that provide services to the system of and may itself represent multiple interconnected networks. In accordance with an aspect of the presently disclosed subject matter each entity and may contain discrete functional program modules that might make use of an API or other object software firmware and or hardware to request services of one or more of the other entities and .

It can also be appreciated that an object such as may be hosted on another computing device . Thus although the physical environment depicted may show the connected devices as computers such illustration is merely exemplary and the physical environment may alternatively be depicted or described comprising various digital devices such as PDAs televisions MP3 players etc. software objects such as interfaces COM objects and the like.

There are a variety of systems components and network configurations that support distributed computing environments. For example computing systems may be connected together by wired or wireless systems by local networks or widely distributed networks. Currently many networks are coupled to the Internet which provides an infrastructure for widely distributed computing and encompasses many different networks. Any such infrastructures whether coupled to the Internet or not may be used in conjunction with the systems and methods provided.

A network infrastructure may enable a host of network topologies such as client server peer to peer or hybrid architectures. The client is a member of a class or group that uses the services of another class or group to which it is not related. In computing a client is a process i.e. roughly a set of instructions or tasks that requests a service provided by another program. The client process utilizes the requested service without having to know any working details about the other program or the service itself. In a client server architecture particularly a networked system a client is usually a computer that accesses shared network resources provided by another computer e.g. a server. In the example of any entity and can be considered a client a server or both depending on the circumstances.

A server is typically though not necessarily a remote computer system accessible over a remote or local network such as the Internet. The client process may be active in a first computer system and the server process may be active in a second computer system communicating with one another over a communications medium thus providing distributed functionality and allowing multiple clients to take advantage of the information gathering capabilities of the server. Any software objects may be distributed across multiple computing devices or objects.

Client s and server s communicate with one another utilizing the functionality provided by protocol layer s . For example HyperText Transfer Protocol HTTP is a common protocol that is used in conjunction with the World Wide Web WWW or the Web. Typically a computer network address such as an Internet Protocol IP address or other reference such as a Universal Resource Locator URL can be used to identify the server or client computers to each other. The network address can be referred to as a URL address. Communication can be provided over a communications medium e.g. client s and server s may be coupled to one another via TCP IP connection s for high capacity communication.

In light of the diverse computing environments that may be built according to the general framework provided in and the further diversification that can occur in computing in a network environment such as that of the systems and methods provided herein cannot be construed as limited in any way to a particular computing architecture or operating system. Instead the presently disclosed subject matter should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the appended claims.

Lastly while the present disclosure has been described in connection with the preferred aspects as illustrated in the various figures it is understood that other similar aspects may be used or modifications and additions may be made to the described aspects for performing the same function of the present disclosure without deviating therefrom. For example in various aspects of the disclosure mechanisms for a relational lockdown for an item store as disclosed. However other equivalent mechanisms to these described aspects are also contemplated by the teachings herein. Therefore the present disclosure should not be limited to any single aspect but rather construed in breadth and scope in accordance with the appended claims.

