---

title: Distributed meta data management middleware
abstract: A meta data management system for use with a surveillance system includes a user interface that allows users to define rules to manage meta data from distributed devices. An application programming interface provides an application access to system data and control information. A mechanism allows the application to transparently and seamlessly integrate with different types of databases by transparently allocating and searching the data that are physically distributed at different devices.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07567956&OS=07567956&RS=07567956
owner: Panasonic Corporation
number: 07567956
owner_city: Osaka
owner_country: JP
publication_date: 20060215
---
The present disclosure generally relates to surveillance systems and relates in particular to meta data management middleware for use with surveillance systems.

The statements in this section merely provide background information related to the present disclosure and may not constitute prior art.

A surveillance system is usually composed of different types of devices. Each device provides certain functionalities image data and meta data information. To control those devices to acquire the data from devices and to store those data information into the data sources the surveillance system application developers need to make a great deal of effort to learn and implement different access APIs and data access modules for particular data sources in order to integrate the entire surveillance system. Thus the development cost for such systems can be quite high.

In addition since the meta data may be distributed all over the network of the surveillance systems it is difficult for the application programs to know where those data resided and it is inefficient for the application programs to search each instance of data. For example when a surveillance system is deployed different databases that store the meta data are likely used for such a system. This database diversity requires each application to define different types of data schema for the different databases. XML has emerged as a standard data exchange approach for many applications. Thus these applications require the data management involving XML. However the existing data source management continues to be relational or other types of DB. The current system lacks of a bridge to satisfy the requirement of these new XML based applications leveraging existing data sources such as a relational DB. This lack causes high deployment costs.

A meta data management system for use with a surveillance system includes a user interface that allows users to define rules to manage meta data from distributed devices. An application programming interface provides an application access to system data and control information. A mechanism allows the application to transparently and seamlessly integrate with different types of databases by transparently allocating and searching the data that are physically distributed at different devices.

Further areas of applicability will become apparent from the description provided herein. It should be understood that the description and specific examples are intended for purposes of illustration only and are not intended to limit the scope of the present disclosure.

The following description is merely exemplary in nature and is not intended to limit the present disclosure application or uses.

A Meta Data Management MDM system serves as a platform to support a system integrator to easily manipulate the meta data from the devices. MDM is a rule driven component that allows users to define rules to manage the meta data from the devices. This capability makes the system more customizable for different business needs e.g. customizing the recognized subjects as avoided or preferred depending on different business needs . MDM can rely on the P2P communication protocol to provide distributed searching capability.

Referring to a surveillance system architecture can include a number of devices A L. When a number of devices of different applications are deployed over a distributed network the MDM Meta Data Management A F and MDM Proxy A D are created to facilitate the communications interoperability and management among the devices and applications.

Turning now to the Meta Data Management Proxy MDM Proxy communicates with Meta Data Management for those devices M N that can not directly communicate with Meta Data Management using a Meta Data Management Protocol. XML has emerged as the standard data exchange format for the many applications. XML can therefore be used to define communication protocols which allow many different kinds of peers to participate in one protocol. The data input into or output from Meta Data Management can be formatted as XML. Meta Data Management Proxy can convert the device data to XML format.

The Meta Data Management Proxy can be developed as a rule engine to execute the rules defined by the applications. A rule engine can have three types of components including device drivers A and B condition evaluators and action interpreters. Condition evaluators and action interpreters can be combined in the form of rule agents A and B. A rule and a device driver are formatted as XML files. They are managed as XML files in the configuration server. They can be dynamically loaded from a configuration server. Since each device M N can have its own communication protocol the device driver can collect data from each device parse the data and generate one or more events. The condition evaluator can evaluate and check the defined condition to trigger the execution of the associated actions. The rule engine can invoke actions which are defined and implemented by the applications.

For example the action interpreting component can implement Meta Data Management communication protocol to send meta data that are extracted from devices to Meta Data Management. Action interpreting component can also implement other communication protocols to communicate with other network devices. Since Meta Data Management Proxy is running as a rule engine the applications have the flexibility to extend the Meta Data Management Proxy capability beyond the communication.

Referring now to Meta Data Management MDM provides an easy interface for the application to access system data and control information and can provide the mechanism for the application to transparently and seamlessly integrate with the different types of databases DBs A C. Meta Data Management can be implemented as a library that handles various system information video information control information authentication information and other types of information.

Meta Data Management Library MDM Library can have several components. For example it can have a communication component that can implement P2P communication protocol to provide a distributed communication environment for the distributed access data functionality. The MDM Library can also have a Rule Engine which executes the rules application logic defined by applications. Further MDM Library can have a query manager that can generate a unique query identification execute queries maintain query data source sessions and aggregate the query results from the distributed data source. Still further MDM Library can have a cache manager that manages the meta data object in memory from a data source using for example FIFO LFU and or LRU management policies for fast search and event correlation. Yet further MDM Library can have a schema manager that can record and maintain the peer group s schemas to support the query manager in performing the distributed search. Finally the MDM Library can have multiple DB adaptors A C that can provide one or more bridges to let a relational DB or other type of DB handle XML based application data.

Communications between MDMs can be implemented using a peer to peer P2P communication model. Developing JXTA to establish a P2P communication model in a distribute computation environment allows archiving of real time pattern matching from the distribute environment. The P2P communication model has decentralized autonomous and distributed computation characteristics that enable the devices or clients to take initiative rather than always being passively invoked.

Turning now to the rule engine can receive an event A C from the communication component evaluate the condition and perform an action according to the result of evaluation of the condition. The rule engine can have a generic event handler that can read a rule or rules specifying how many event handlers exist and the configuration for each event handler. Next it can load a template for each event handler and fit all properties into the template from the configuration. Finally it can let each event handler handle the event. Each event handler feeds the event to rule execution engine.

Regarding condition checking rule engine evaluates the condition at A C when it receives the event from a generic event handler. The implementation of conditions can be left to the user thus providing a lot of flexibility to the user. For example the user can set a property which can load a specific parser for an event. It can check the schema and return the evaluation result.

Regarding actions solution integrator can implement any kind of action A C for the surveillance system application. For example a correlation action can correlate the meta data from different devices fuse the information and perform target tracking.

In an example of operation an application process can instantiate at a new rule agent which can load at a rule set from configuration server and fill an event rule table at . Meanwhile application process can at create a new thread which can execute a device driver at to get data from the device and signal an event. Thread can then get at a rule object from rule agent and begin at a rule execution process . Execution process can proceed by passing at an evaluable condition to a condition checking process and receive results in return. Rule execution process can then issue action execution commands to an action execution process and receive results which are relayed at to thread .

Cache manager can create and delete cache object based on the configuration data. The configuration data can include the max size of the cache and what kind of policy such as FIFO LRU and or LFU is used for managing the cache. Cache information can be kept in a cache table.

The cache can have two major functions. One function can be to store objects and provide the concurrently and thread safe accessing methods to operate on objects. Another function which can be a separate thread can be to maintain cached objects based on the FIFO or LRU or LFU policy.

A cache object can maintain the meta data and a working set of meta data objects to provide fast and synchronized access control into elements of meta data objects retrieved from the Data source. Read operation can traverse and access different elements of the meta data in memory directly without going in and out of the DB for a large data file. The cache manager can provide a minimal level of access control needed to maintain the data consistency on top of DB. The cache manager can provide methods for the rule engine to cache the rules in memory and cache meta data for correlation and fast searching.

Turning now to query manager can be created as a single instance which can be shared by multiple applications in the same JVM. A query manager object can have a table named for example SessioninfoTable to keep at active query sessions information which can be stored in a Sessioninfo object. The query manager can also have a table named for example AdaptorInfoTable to cache at adaptors and collections information configured in a schema manager configuration file. Query manager can get the timeout configuration parameter for each session and can authenticate a query application.

In operation an MDM security service can perform a security check with query manager . Meanwhile an MDM lookup service can provide and or reference at configuration data and distributed data source information via query manager . Thus query manager can be configured to handle security checks and lookup query functions.

Turning now to MDM can be configured into peer groups. For example MDM A and MDM D can be configured in a first peerGroup while MDM A and MDM B can be configured in a second peer group . Meanwhile MDM B and MDM C can be configured in a third peer group and MDM C MDM E and MDM F can be configured in a fourth peer group .

When MDMs are initialized they can advertise their resources to the peer group. Based on the example configuration MDM A can be interested in requests from MDM D and MDM B while MDM B can be interested in query requests from MDM A and MDM C. Similarly MDM C can be interested in requests from MDM B MDM E and MDM F.

When the application creates the data source schema the query manager of each MDM can send the data source schema information to the peer group and schema manager can keep the schema information and correlated peer information in a table. Thus each MDM can have schema from the peer group. If the application issues a query from one MDM e.g. from MDM A the query manager of MDM A can send the request to MDM C and MDM B since MDM A is in the same peer group with MDM D and MDM B. The query manager of MDM B can check with its schema manager to see if there is another peer having the same schema. For example the schema manager of MDM B can find out that MDM C has the same schema so that the query request can also be sent to MDM C and so on. The query manager of MDM A can wait for the results from MDM D and MDM B aggregate the results and send the aggregated results back to the application.

The schema manager can manage the schemas to support the distributed search. It can maintain a Hash table to support concurrent addition deletion update and query of the schema information correlated with peer information.

The DB adaptors can map an XML request from the MDM core to a local query format of metadata repository management and translate the results to an XML format. A metadata repository layer can store the metadata and support multi connections to a data base management system.

Various embodiments of the meta data management middleware can provide several advantages. For example the middleware can provide interoperability of various device data. In particular it can use universal XML to support different types of device data for different application domains to format device driver program and rules to support the dynamic configuration of program structure and behavior inside of a running program and unify database via access application program interfaces to support changeable data sources. Also it can provide distributed search capabilities including an independent distributed search function from a data source implementation and a flexible and efficient searching mechanism. Finally it can provide lower costs and faster implementation for two reasons. Firstly it can provide easy APIs and universal XML model so that implementation costs can be very low compare to the middleware package from database vendors. Secondly since MDM is a light weight middleware it can reduce the time of implementation work.

