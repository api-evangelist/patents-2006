---

title: Method and apparatus for synchronizing applications for data recovery using storage based journaling
abstract: Disclosed is a method to synchronize the state of an application and an application's objects with data stored on the storage system. The storage system provides API's to create special data, called a marker journal, and stores it on a journal volume. The marker contains application information, e.g. file name, operation on the file, timestamp, etc. Since the journal volume contains markers as well as any changed data in the chronological order, IO activities to the storage system and application activities can be synchronized.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07555505&OS=07555505&RS=07555505
owner: Hitachi, Ltd.
number: 07555505
owner_city: Tokyo
owner_country: JP
publication_date: 20060228
---
The present application is a Continuation application of U.S. application Ser. No. 10 627 507 filed Jul. 25 2003 which is herein incorporated by reference for all purposes.

Several methods are conventionally used to prevent the loss of data. Typically data is backed up in a periodic manner e.g. once a day by a system administrator. Many systems are commercially available which provide backup and recovery of data e.g. Veritas NetBackup Legato Networker and so on. Another technique is known as volume shadowing. This technique produces a mirror image of data onto a secondary storage system as it is being written to the primary storage system.

Journaling is a backup and restore technique commonly used in database systems. An image of the data to be backed up is taken. Then as changes are made to the data a journal of the changes is maintained. Recovery of data is accomplished by applying the journal to an appropriate image to recover data at any point in time. Typical database systems such as Oracle can perform journaling.

Except for database systems however there are no ways to recover data at any point in time. Even for database systems applying a journal takes time since the procedure includes 

Recovering data at any point in time addresses the following types of administrative requirements. For example a typical request might be I deleted a file by mistake at around 10 00 am yesterday. I have to recover the file just before it was deleted. 

If the data is not in a database system this kind of request cannot be conveniently if at all serviced. A need therefore exists for processing data in a manner that facilitates recovery of lost data. A need exists for being able to provide data processing that facilitates data recovery in user environments other than in a database application.

In accordance with an aspect of the present invention a storage system exposes an application programmer s interface API for applications program running on a host. The API allows execution of program code to create marker journal entries. The API also provides for retrieval of marker journals and recovery operations. Another aspect of the invention is the monitoring of operations being performed on a data store and the creation of marker journal entries upon detection one or more predetermined operations. Still another aspect of the invention is the retrieval of marker journal entries to facilitate recovery of a desired data state.

The backup and recovery system shown in includes at least one storage system . Though not shown one of ordinary skill can appreciate that the storage system includes suitable processor s memory and control circuitry to perform IO between a host and its storage media e.g. disks . The backup and recovery system also requires at least one host . A suitable communication path is provided between the host and the storage system.

The host typically will have one or more user applications APP executing on it. These applications will read and or write data to storage media contained in the data volumes of storage system . Thus applications and the data volumes represent the target resources to be protected. It can be appreciated that data used by the user applications can be stored in one or more data volumes.

In accordance with the invention a journal group JNLG is defined. The data volumes are organized into the journal group. In accordance with the present invention a journal group is the smallest unit of data volumes where journaling of the write operations from the host to the data volumes is guaranteed. The associated journal records the order of write operations from the host to the data volumes in proper sequence. The journal data produced by the journaling activity can be stored in one or more journal volumes JVOL .

The host also includes a recovery manager RM . This component provides a high level coordination of the backup and recovery operations. Additional discussion about the recovery manager will be discussed below.

The storage system provides a snapshot SS of the data volumes comprising a journal group. For example the snapshot is representative of the data volumes in the journal group at the point in time that the snapshot was taken. Conventional methods are known for producing the snapshot image. One or more snapshot volumes SVOL are provided in the storage system which contain the snapshot data. A snapshot can be contained in one or more snapshot volumes. Though the disclosed embodiment illustrates separate storage components for the journal data and the snapshot data it can be appreciated that other implementations can provide a single storage component for storing the journal data and the snapshot data.

A management table MT is provided to store the information relating to the journal group the snapshot and the journal volume s . and the accompanying discussion below reveal additional detail about the management table.

A controller component is also provided which coordinates the journaling of write operations and snapshots of the data volumes and the corresponding movement of data among the different storage components . It can be appreciated that the controller component is a logical representation of a physical implementation which may comprise one or more sub components distributed within the storage system .

The Journal Header comprises an offset number JH OFS . The offset number identifies a particular data volume in the journal group . In this particular implementation the data volumes are ordered as the 0data volume the 1data volume the 2data volume and so on. The offset numbers might be 0 1 2 etc.

A starting address in the data volume identified by the offset number to which the write data is to be written is stored to a field in the Journal Header to contain an address JH ADR . For example the address can be represented as a block number LBA Logical Block Address .

A field in the Journal Header stores a data length JH LEN which represents the data length of the write data. Typically it is represented as a number of blocks.

A field in the Journal Header stores the write time JH TIME which represents the time when the write request arrives at the storage system . The write time can include the calendar date hours minutes seconds and even milliseconds. This time can be provided by the disk controller or by the host . For example in a mainframe computing environment two or more mainframe hosts share a timer and can provide the time when a write command is issued.

A sequence number JH SEQ is assigned to each write request. The sequence number is stored in a field in the Journal Header . Every sequence number within a given journal group is unique. The sequence number is assigned to a journal entry when it is created.

A journal volume identifier JH JVOL is also stored in the Journal Header . The volume identifier identifies the journal volume associated with the Journal Data . The identifier is indicative of the journal volume containing the Journal Data. It is noted that the Journal Data can be stored in a journal volume that is different from the journal volume which contains the Journal Header.

A journal data address JH JADR stored in the Journal Header contains the beginning address of the Journal Data in the associated journal volume that contains the Journal Data.

A journal type field JH TYPE identifies the type of journal entry. The value contained in this field indicates a type of MARKER or INTERNAL. If the type is MARKER then the journal is a marker journal. The purpose of a MARKER type of journal will be discussed below. If the type is INTERNAL then the journal records the data that is the subject of the write operation issued from the host .

Journal Header and Journal Data are contained in chronological order in their respective areas in the journal volume . Thus the order in which the Journal Header and the Journal Data are stored in the journal volume is the same order as the assigned sequence number. As will be discussed below an aspect of the present invention is that the journal information wrap within their respective areas .

The management table shown in illustrates an example management table and its contents. The management table stores a journal group ID GRID which identifies a particular journal group in a storage system . A journal group name GRNAME can also be provided to identify the journal group with a human recognizable identifier.

A journal attribute GRATTR is associated with the journal group . In accordance with this particular implementation two attributes are defined MASTER and RESTORE. The MASTER attribute indicates the journal group is being journaled. The RESTORE attribute indicates that the journal group is being restored from a journal.

A journal status GRSTS is associated with the journal group . There are two statuses ACTIVE and INACTIVE.

The management table includes a field to hold a sequence counter SEQ . This counter serves as the source of sequence numbers used in the Journal Header . When creating a new journal the sequence number is read and assigned to the new journal. Then the sequence number is incremented and written back into the management table.

The number NUM DVOL of data volumes contained in a give journal group is stored in the management table.

A data volume list DVOL LIST lists the data volumes in a journal group. In a particular implementation DVOL LIST is a pointer to the first entry of a data structure which holds the data volume information. This can be seen in . Each data volume information comprises an offset number DVOL OFFS . For example if the journal group comprises three data volumes the offset values could be 0 1 and 2. A data volume identifier DVOL ID uniquely identifies a data volume within the entire storage system . A pointer DVOL NEXT points to the data structure holding information for the next data volume in the journal group it is a NULL value otherwise.

The management table includes a field to store the number of journal volumes NUM JVOL that are being used to contain the data journal header and journal data associated with a journal group .

As described in the Journal Header Area contains the Journal Headers for each journal likewise for the Journal Data components . As mentioned above an aspect of the invention is that the data areas wrap. This allows for journaling to continue despite the fact that there is limited space in each data area.

The management table includes fields to store pointers to different parts of the data areas to facilitate wrapping. Fields are provided to identify where the next journal entry is to be stored. A field JI HEAD VOL identifies the journal volume that contains the Journal Header Area which will store the next new Journal Header . A field JI HEAD ADR identifies an address on the journal volume of the location in the Journal Header Area where the next Journal Header will be stored. The journal volume that contains the Journal Data Area into which the journal data will be stored is identified by information in a field JI DATA VOL . A field JI DATA ADR identifies the specific address in the Journal Data Area where the data will be stored. Thus the next journal entry to be written is pointed to by the information contained in the JI  fields .

The management table also includes fields which identify the oldest journal entry. The use of this information will be described below. A field JO HEAD VOL identifies the journal volume which stores the Journal Header Area that contains the oldest Journal Header . A field JO HEAD ADR identifies the address within the Journal Header Area of the location of the journal header of the oldest journal. A field JO DATA VOL identifies the journal volume which stores the Journal Data Area that contains the data of the oldest journal. The location of the data in the Journal Data Area is stored in a field JO DATA ADR .

The management table includes a list of journal volumes JVOL LIST associated with a particular journal group . In a particular implementation JVOL LIST is a pointer to a data structure of information for journal volumes. As can be seen in each data structure comprises an offset number JVOL OFS which identifies a particular journal volume associated with a given journal group . For example if a journal group is associated with two journal volumes then each journal volume might be identified by a 0 or a 1. A journal volume identifier JVOL ID uniquely identifies the journal volume within the storage system . Finally a pointer JVOL NEXT points to the next data structure entry pertaining to the next journal volume associated with the journal group it is a NULL value otherwise.

The management table includes a list SS LIST of snapshot images associated with a given journal group . In this particular implementation SS LIST is a pointer to snapshot information data structures as indicated in . Each snapshot information data structure includes a sequence number SS SEQ that is assigned when the snapshot is taken. As discussed above the number comes from the sequence counter . A time value SS TIME indicates the time when the snapshot was taken. A status SS STS is associated with each snapshot valid values include VALID and INVALID. A pointer SS NEXT points to the next snapshot information data structure it is a NULL value otherwise.

Each snapshot information data structure also includes a list of snapshot volumes used to store the snapshot images . As can be seen in a pointer SVOL LIST to a snapshot volume information data structure is stored in each snapshot information data structure. Each snapshot volume information data structure includes an offset number SVOL OFFS which identifies a snapshot volume that contains at least a portion of the snapshot image. It is possible that a snapshot image will be segmented or otherwise partitioned and stored in more than one snapshot volume. In this particular implementation the offset identifies the isnapshot volume which contains a portion segment partition etc of the snapshot image. In one implementation the isegment of the snapshot image might be stored in the isnapshot volume. Each snapshot volume information data structure further includes a snapshot volume identifier SVOL ID that uniquely identifies the snapshot volume in the storage system . A pointer SVOL NEXT points to the next snapshot volume information data structure for a given snapshot image.

Further in accordance with the invention a single sequence of numbers SEQ are associated with each of one or more snapshots and journal entries as they are created. The purpose of associating the same sequence of numbers to both the snapshots and the journal entries will be discussed below.

Continuing with the recovery manager might define in a step a journal group JNLG if one has not already been defined. As indicated in this may include identifying one or data volumes DVOL for which journaling is performed and identifying one or journal volumes JVOL which are used to store the journal related information. The recovery manager performs a suitable sequence of interactions with the storage system to accomplish this. In a step the storage system may create a management table incorporating the various information shown in the table detail illustrated in . Among other things the process includes initializing the JVOL LIST to list the journal volumes which comprise the journal group Likewise the list of data volumes DVOL LIST is created. The fields which identify the next journal entry or in this case where the table is first created the first journal entry are initialized. Thus JI HEAD VOL might identify the first in the list of journal volumes and JI HEAD ADR might point to the first entry in the Journal Header Area located in the first journal volume. Likewise JI DATA VOL might identify the first in the list of journal volumes and JI DATA ADR might point to the beginning of the Journal Data Area in the first journal volume. Note that the header and the data areas may reside on different journal volumes so JI DATA VOL might identify a journal volume different from the first journal volume.

In a step the recovery manager will initiate the journaling process. Suitable communication s are made to the storage system to perform journaling. In a step the storage system will make a journal entry for each write operation that issues from the host .

With reference to making a journal entry includes among other things identifying the location for the next journal entry. The fields JI HEAD VOL and JI HEAD ADR identify the journal volume and the location in the Journal Header Area of the next Journal Header . The sequence counter SEQ from the management table is copied to associated with the JH SEQ field of the next header. The sequence counter is then incremented and stored back to the management table. Of course the sequence counter can be incremented first copied to JH SEQ and then stored back to the management table.

The fields JI DATA VOL and in the management table identify the journal volume and the beginning of the Journal Data Area for storing the data associated with the write operation. The JI DATA VOL and JI DATA ADR fields are copied to JH JVOL and to JH ADR respectively of the Journal Header thus providing the Journal Header with a pointer to its corresponding Journal Data. The data of the write operation is stored.

The JI HEAD VOL and JI HEAD ADR fields are updated to point to the next Journal Header for the next journal entry. This involves taking the next contiguous Journal Header entry in the Journal Header Area . Likewise the JI DATA ADR field and perhaps JI DATA VOL field is updated to reflect the beginning of the Journal Data Area for the next journal entry. This involves advancing to the next available location in the Journal Data Area. These fields therefore can be viewed as pointing to a list of journal entries. Journal entries in the list are linked together by virtue of the sequential organization of the Journal Headers in the Journal Header Area .

When the end of the Journal Header Area is reached the Journal Header for the next journal entry wraps to the beginning of the Journal Header Area. Similarly for the Journal Data . To prevent overwriting earlier journal entries the present invention provides for a procedure to free up entries in the journal volume . This aspect of the invention is discussed below.

For the very first journal entry the JO HEAD VOL field JO HEAD ADR field JO DATA VOL field and the JO DATA ADR field are set to contain their contents of their corresponding JI  fields. As will be explained the JO  fields point to the oldest journal entry. Thus as new journal entries are made the JO  fields do not advance while the JI  fields do advance. Update of the JO  fields is discussed below.

Continuing with the flowchart of when the journaling process has been initiated all write operations issuing from the host are journaled. Then in a step the recovery manager will initiate taking a snapshot of the data volumes . The storage system receives an indication from the recovery manager to take a snapshot. In a step the storage system performs the process of taking a snapshot of the data volumes. Among other things this includes accessing SS LIST from the management table . A suitable amount of memory is allocated for fields to represent the next snapshot. The sequence counter SEQ is copied to the field SS SEQ and incremented in the manner discussed above for JH SEQ . Thus over time a sequence of numbers is produced from SEQ each number in the sequence being assigned either to a journal entry or a snapshot entry.

The snapshot is stored in one or more snapshot volumes SVOL . A suitable amount of memory is allocated for fields . The information relating to the SVOLs for storing the snapshot are then stored into the fields . If additional volumes are required to store the snapshot then additional memory is allocated for fields .

Recovering data typically requires recover the data state of at least a portion of the data volumes at a specific time. Generally this is accomplished by applying one or more journal entries to a snapshot that was taken earlier in time relative to the journal entries. In the disclosed illustrative embodiment the sequence number SEQ is incremented each time it is assigned to a journal entry or to a snapshot. Therefore it is a simple matter to identify which journal entries can be applied to a selected snapshot i.e. those journal entries whose associated sequence numbers JH SEQ are greater than the sequence number SS SEQ associated with the selected snapshot.

For example the administrator may specify some point in time presumably a time that is earlier than the time the target time at which the data in the data volume was lost or otherwise corrupted. The time field SS TIME for each snapshot is searched until a time earlier than the target time is found. Next the Journal Headers in the Journal Header Area is searched beginning from the oldest Journal Header. The oldest Journal Header can be identified by the JO  fields and in the management table. The Journal Headers are searched sequentially in the area for the first header whose sequence number JH SEQ is greater than the sequence number SS SEQ associated with the selected snapshot. The selected snapshot is incrementally updated by applying each journal entry one at a time to the snapshot in sequential order thus reproducing the sequence of write operations. This continues as long as the time field JH TIME of the journal entry is prior to the target time. The update ceases with the first journal entry whose time field is past the target time.

In accordance with one aspect of the invention a single snapshot is taken. All journal entries subsequent to that snapshot can then be applied to reconstruct the data state at a given time. In accordance with another aspect of the present invention multiple snapshots can be taken. This is shown in where multiple snapshots are taken. In accordance with the invention each snapshot and journal entry is assigned a sequence number in the order in which the object snapshot or journal entry is recorded. It can be appreciated that there typically will be many journal entries recorded between each snapshot . Having multiple snapshots allows for quicker recovery time for restoring data. The snapshot closest in time to the target recovery time would be selected. The journal entries made subsequent to the snapshot could then be applied to restore the desired data state.

If the free space falls below a predetermined threshold then in a step some of the journal entries are applied to a snapshot to update the snapshot. In particular the oldest journal entry ies are applied to the snapshot.

Referring to the Journal Header of the oldest journal entry is identified by the JO HEAD VOL field and the JO HEAD ADR field . These fields identify the journal volume and the location in the journal volume of the Journal Header Area of the oldest journal entry. Likewise the Journal Data of the oldest journal entry is identified by the JO DATA VOL field and the JO DATA ADR field . The journal entry identified by these fields is applied to a snapshot. The snapshot that is selected is the snapshot having an associated sequence number closest to the sequence number of the journal entry and earlier in time than the journal entry. Thus in this particular implementation where the sequence number is incremented each time the snapshot having the sequence number closest to but less than the sequence number of the journal entry is selected i.e. earlier in time . When the snapshot is updated by applying the journal entry to it the applied journal entry is freed. This can simply involve updating the JO HEAD VOL field JO HEAD ADR field JO DATA VOL field and the JO DATA ADR field to the next journal entry.

As an observation it can be appreciated by those of ordinary skill that the sequence numbers will eventually wrap and start counting from zero again. It is well within the level of ordinary skill to provide a suitable mechanism for keeping track of this when comparing sequence numbers.

Continuing with after applying the journal entry to the snapshot to update the snapshot a check is made of the increase in the journal volume free space as a result of the applied journal entry being freed up step . The free space can be compared against the threshold criterion used in step . Alternatively a different threshold can be used. For example here a higher amount of free space may be required to terminate this process than was used to initiate the process. This avoids invoking the process too frequently but once invoked the second higher threshold encourages recovering as much free space as is reasonable. It can be appreciated that these thresholds can be determined empirically over time by an administrator.

Thus in step if the threshold for stopping the process is met i.e. free space exceeds threshold then the process stops. Otherwise step is repeated for the next oldest journal entry. Steps and are repeated until the free space level meets the threshold criterion used in step .

If such a snapshot can be found in step then the earlier journal entries can be removed without having to apply them to a snapshot. Thus in a step the JO  fields JO HEAD VOL JO HEAD ADR JO DATA VOL and JO DATA ADR are simply moved to a point in the list of journal entries that is later in time than the selected snapshot. If no such snapshot can be found then in a step the oldest journal entry is applied to a snapshot that is earlier in time than the oldest journal entry as discussed for step .

Still another alternative for step is simply to select the most recent snapshot. All the journal entries whose sequence numbers are less than that of the most recent snapshot can be freed. Again this simply involves updating the JO  fields so they point to the first journal entry whose sequence number is greater than that of the most recent snapshot. Recall that an aspect of the invention is being able to recover the data state for any desired point in time. This can be accomplished by storing as many journal entries as possible and then applying the journal entries to a snapshot to reproduce the write operations. This last embodiment has the potential effect of removing large numbers of journal entries thus reducing the range of time within which the data state can be recovered. Nevertheless for a particular configuration it may be desirable to remove large numbers of journal entries for a given operating environment.

Another aspect of the present invention is the ability to place a marker among the journal entries. In accordance with an illustrative embodiment of this aspect of the invention an application programming interface API can be provided to manipulate these markers referred to herein as marker journal entries marker journals etc. Marker journals can be created and inserted among the journal entries to note actions performed on the data volume production volume or events in general e.g. system boot up . Marker journals can be searched and used to identify previously marked actions and events. The API can be used by high level or user level applications. The API can include functions that are limited to system level processes.

The Manager component can be configured to monitor operations on all or parts of a data volume production data store such as a database a directory one or more files or other objects of a the file system. A user can be provided with access to the Manager via a suitable interface e.g. command line interface GUI etc. The user can interact with the Manager to specify objects and operations on those objects to be monitored. When the Manager detects a specified operation on the object it calls an appropriate marker journal function via the API to create a marker journal to mark the event or action. Among other things the marker journal can include information such as a filename the detected operation the name of the host and a timestamp.

The Driver component can interact with the storage system accordingly to create the marker. In response the storage system creates the marker journal in the same manner as discussed above for journal entries associated with write operations. Referring for a moment to the journal type field JH TYPE can be set to MARKER to indicate that journal entry is a marker journal. Journal entries associated with write operations would have a field value of INTERNAL. Any information that is associated with the marker journal entry can be stored in the journal data area of the journal entry.

With a write command the Manager component can also specify to read special information from the storage system . In this case the write command indicates information to be read and following a read command to the CMD device actually reads the information. Thus for example a pair of write and read requests to the CMD device can be used to retrieve a marker journal entry and the data associated with the marker journal.

An alternative implementation is to extend the SCSI command set. For example the SCSI standard allows developers to extend the SCSI common command set CCS which describes the core set of commands supported by SCSI. Thus special commands can be defined to provide the API functionality. From these implementation examples one of ordinary skill in the relevant arts can readily appreciate that other implementations are possible.

The Manager component can provide its own API to the user . The functions provided by this API can be similar to the marker journal functions provided by the API of the Driver component . However since the Manager component provides a higher level of functionality its API is likely to include functions not needed for managing marker journals. It can be appreciated that in other embodiments of the invention a single API can be defined which includes the functionality of API s and

The Driver component communicates with the storage system to initiate the desired action. As illustrated in typical actions include among others generating marker journals periodically retrieving journal entries and recovery using marker journals.

Following is a list of functions provided by the API s according to an embodiment of the present invention 

Objects can be monitored for certain actions. For example the Manager component can be configured to monitor the data volume for user specified activity data operations to be performed on objects contained in the volume. The object can be the entire volume a file system or portions of a file system. The object can include application objects such as files database components and so on. Activities include among others closing a file removing an object manipulation creation deletion etc of symbolic links to files and or directories formatting all or a portion of a volume and so on.

A user can specify which actions to detect. When the Manager detects a specified operation the Manager can issue a GENERATE MARKER request to mark the event. Similarly the user can specify an action or actions to be performed on an object or objects. When the Manager detects a specified action on a specified object a GENERATE MARKER request can be issued to mark the occurrence of that event.

The user can also mark events that take place within the data volume . For example when the user shuts down the system she might issue a SYNC command in the case of a UNIX OS to sync the file system and also invoke the GENERATE MARKER command to mark the event of syncing the file system. She might mark the event of booting up the system. It can be appreciated that the Manager component can be configured to detect and automatically act on these events as well. It is observed that an event can be marked before or after the occurrence of the event. For example the actions of deleting a file or SYNC ing a file system probably are preferably performed prior to marking the action. If a major update of a data file or a database is about to be performed it might be prudent to create a marker journal before proceeding this can be referred to as pre marking the event.

The foregoing mechanisms for manipulating marker journals can be used to facilitate recovery. For example suppose a system administrator configures the Manager component to mark every delete operation that is performed on file objects. Each time a user in the host performs a file delete a marker journal entry can be created using the GENERATE MARKER command and stored in the journal volume . This operation is a type where it might be desirable to pre mark each such event that is a marker journal entry is created prior to carrying out the delete operation to mark a point in time just prior to the operation. Thus over time the journal entries contained in the journal volumes will be sprinkled with marker journal entries identifying points in time prior to each file deletion operation.

If a user later wishes to recover an inadvertently deleted file the marker journals can be used to find a suitable recovery point. For example the user is likely to know roughly when he deleted a file. A GET MARKER command that specifies a time prior to the estimated time of deletion and further specifying an operation of delete on objects of file with the name of the deleted file as an object can be issued to the storage system . The matching marker journal entry is then retrieved. This journal entry identifies a point in time prior to the delete operation and can then serve as the recovery point for a subsequent recovery operation. As can be seen in all journal entries including marker journals have a sequence number. Thus the sequence number of the retrieved marker journal entry can be used to determine the latest journal entry just prior to the deletion action. A suitable snapshot is obtained and updated with journal entries of type INTERNAL up to the latest journal entry. At that point the data state of the volume reflects the time just before the file was deleted thus allowing for the deleted file to be restored.

Then in a step the recovery volume is set to an offline state. The term recovery volume is used in a generic sense to refer to one or more volumes on which the data recovery process is being performed. In the context of the present invention offline is taken to mean that the user and more generally the host device cannot access the recovery volume. For example in the case that the production volume is being used as the recovery volume it is likely to be desirable that the host be prevented at least from issuing write operations to the volume. Also the host typically will not be permitted to perform read operations. Of course the storage system itself has full access to the recovery volume in order to perform the recovery task.

In a step the snapshot is copied to the recovery volume in preparation for the recovery operation. The production volume itself can be the recovery volume. However it can be appreciated that the recovery manager can allow the user to specify a volume other than the production volume to serve as the target of the data recovery operation. For example the recovery volume can be the volume on which the snapshot is stored. Using a volume other than the production volume to perform the recovery operation may be preferred where it is desirable to provide continued use of the production volume.

In a step one or more journal entries are applied to update the snapshot volume in the manner as discussed previously. Enough journal entries are applied to update the snapshot to a point in time just prior to the occurrence of the file deletion. At that point the recovery volume can be brought online. In the context of the present invention the online state is taken to mean that the host device is given access to the recovery volume.

Referring again to according to another aspect of the invention periodic retrievals of marker journal entries can be made and stored locally in the host using the GET MARKER command and specifying suitable criteria. For example the Driver component might periodically issue a GET MARKER for delete operations performed on file objects. Other retrieval criteria can be specified. Having a locally accessible copy of certain marker journals reduces delay in retrieving one marker journal at a time from the storage system . This can greatly speed up a search for a recovery point.

From the foregoing it can be appreciated that the API definition can be readily extended to provide additional functionality. The disclosed embodiments typically can be provided using a combination of hardware and software implementations e.g. combinations of software firmware and or custom logic such as ASICs application specific ICs are possible. One of ordinary skill can readily appreciate that the underlying technical implementation will be determined based on factors including but not limited to or restricted to system cost system performance the existence of legacy software and legacy hardware operating environment and so on. The disclosed embodiments can be readily reduced to specific implementations without undue experimentation by those of ordinary skill in the relevant art.

