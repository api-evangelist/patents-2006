---

title: Automatic generation of test cases from error data
abstract: Some embodiments of a method and apparatus for automatically generating test cases from error data have been presented. In one embodiment, the method includes providing a graphical user interface (GUI) to allow a user to submit a report of an error in a program. The report may be partially written in a natural language. Further, the method may include receiving the report from the user via the GUI and processing the report to generate a test case to reproduce the error.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07844861&OS=07844861&RS=07844861
owner: Red Hat, Inc.
number: 07844861
owner_city: Raleigh
owner_country: US
publication_date: 20061127
---
Embodiments of the present invention relate to software development and more specifically to automatic generation of test cases from error data.

One important phase in software development is testing. Testing of a program helps to uncover errors in the program which may be revised accordingly to correct the error. Then the program may be tested again to determine if the errors have been corrected.

One common way to test a program is to execute a test program against that program. This test program may be a series of operations or instructions some or all of which may run manually or automatically. Typically a test case is developed based on one or more errors identified in a program such that by executing the program in the test case a software developer may check if the errors identified have been corrected. A test case in general includes a set of instructions and or inputs to the program to cause the program to perform a predetermined task and or to output a predetermined result. If the program performs the predetermined task and produce the predetermined result as intended then the program passes the test. If the program does not perform the predetermined task as intended e.g. the program outputs a different result execution of the program stalls etc. then the program fails the test.

Conventionally software developers have to compose the test cases themselves in computer programming languages. Recently some developer interface in one conventional integrated development environment IDE for software has been provided to allow software developers to compose test cases via a graphical user interface GUI thus making test case composition easier for software developers. However software developers still need at least some knowledge of the specific computer programming language e.g. Java usable in the IDE in order to be able to compose test cases via the GUI.

Described herein is a method and apparatus for automatically generating test cases from error data. In one embodiment a graphical user interface GUI is provided to allow a user to submit a report of an error in a program. The report may be partially written in a natural language and thus may be non programming language specific. Then the report may be processed to generate a test case to reproduce the error.

In the following description numerous details are set forth. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed descriptions below are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a machine readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions and each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the operations described herein. The required structure for a variety of these systems will appear from the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

In some embodiments the client machine presents a GUI at block to receive a report of an error in a program which is also referred to as an error report. A program as used herein refers to a set of one or more instructions routines modules libraries or the like which when executed by a processing device e.g. a central processing unit a processor a processing core etc. cause the processing device to perform some predetermined action and or tasks. Further an error in a program in the current description generally refers to a fault or a mistake in the program that prevents the program from working as intended e.g. the program stalls during execution the program outputs an unexpected result etc. . The error in the program is also commonly referred to as a bug. The GUI presented on the client machine may be generated by the error tracking server the test case generator and or the test framework .

In some embodiments the GUI includes a display having a form or a template with one or more editable fields for the user to input information about the error. Alternatively the GUI may include multiple displays or pages presented via one or more windows. Further the GUI may be presented to one of the users hereinafter user A via a network access application running on the client machine such as an Internet browser an electronic mail engine etc.

Via the GUI user A may submit the error report in a natural language at block . A natural language as used herein generally refers to a language written or spoken by humans for general purpose communication as opposed to constructs such as computer programming languages machine readable or machine executable languages or the languages used in the study of formal logic such as mathematical logic. Some examples of a natural language include English German French Russian Japanese Chinese etc. In one embodiment the error report may be in a pseudo natural language which may include one or more words and or phrases in a natural language as well as logical and or mathematical constructs e.g. sn 0000 givename

After the error report has been submitted via the GUI at the client machine the client machine may transfer the error report to the error tracking server . The error tracking server may store the error report at block . In some embodiments the test case generator retrieves the error report from the error tracking server and parses the error report at block . One exemplary embodiment of a parsed error report is shown in . Referring to the parsed error report is in extensible markup language XML .

Referring back to the test case generator may input predetermined keywords using an application programming interface API at block . For instance the test case generator may import a file containing a collection of keywords using the API. Further there may be a different set of keywords for each natural language supported by the test case generator . Using the parsed error report and the keywords the test case generator may generate a proposed test case at block . In some embodiments the test case generator searches the error report to find the keywords in the error report if any. Based on the keyword s found in the parsed error report the test case generator may generate the proposed test case by adding some predetermined instructions and or inputs to the test case. In some embodiments the proposed test case is written in a computer programming language or a script language generally readable and or understandable by one skilled in the software programming art. Alternatively the proposed test case may be written in machine executable test code. One exemplary embodiment of a proposed test case generated is shown in . Referring to the proposed test case generated is in UNIX shell script.

Referring back to the test case generator may send the proposed test case to the client machine to allow one of the users hereinafter user B to verify the test case. For instance the client machine may display the proposed test case via the GUI at block such as a GUI of an Internet browser. Alternatively the client machine may generate a file or a document containing the proposed test case which may be viewed using a document viewing application and or be transmitted to a printer for printing. Note that user A and user B may or may not be the same person. In some cases user A and user B are different persons and user A may not have any knowledge of a computer programming language or script language in which the test case is written in while user B has some knowledge of the computer programming language or the script language in order to verify the proposed test case.

As user B verifies the proposed test case at block user B may provide feedback on the proposed test case at block . In addition user B may modify the proposed test case at block . In some embodiments user B may input the feedback and or the modified test case via a GUI such as a GUI of an Internet browser. The Internet browser may receive the feedback and or the modified test case and then may forward the feedback and or the modified test case to the test case generator . At block the test case generator generates a final test case based on the proposed test case and the user feedback if any according to one embodiment of the invention. Alternatively the test case generator may generate a final test case based on the modified test case. In some embodiments the final test case is written in machine executable test code.

In some embodiments the test case generator transmits the final test case to the test case database which stores the final test case. A test server in the test framework may retrieve the final test case from the test case database and may execute the final test case at block .

As mentioned above the error report is in a natural language and the user is not required to have any knowledge of any specific computer programming language in order to submit the error report. As such user A does not have to worry about the syntax and or other nuances of different computer programming languages thus making the error reporting process and the test case generation process described above easy to use. Providing a user friendly error reporting process may encourage users of the program to report errors which is important for quality assurance as well as maintenance and future development of the program. Moreover the automated test case generation process helps to substantially seamlessly couple the error reporting process to the program testing process thus making it easier to test the program after revising the program to determine if the error reported has been corrected.

The error tracking server may include an error report database . The test case generator may include a processing module and an API which are coupled to each other. The processing module may further include a parser . The test server may include a test case execution engine . The test case generator may be implemented on a server. A server as used herein generally refers to a machine or a computer coupled to a network e.g. the network to perform one or more predetermined tasks and or to manage some predetermined resources over the network. The server may include a server front end responsible for network communication plug ins for server functions such as access control and replication a basic directory tree containing server related data and a database back end plug in responsible for managing the storage and retrieval of test case related data in the test case database and or the error report database . In some embodiments the servers and may be implemented using a single server.

Note that any or all of the components and the associated hardware illustrated in may be used in various embodiments of the system . However it should be appreciated that other configurations of the system may include more or fewer devices than those shown in .

In the following discussion the client machine is discussed in detail as an example to illustrate the concept. In some embodiments the client machine includes a GUI . The GUI may receive from a user a report of an error of a program hereinafter referred to as the error report. For instance the GUI may include a form or a template having multiple editable fields for the user to enter data or information of the error in a natural language. For example the user may enter a description of the error a set of one or more operations to reproduce the error an expected result from executing the program an actual result from executing the program etc. Further the GUI may be presented to the user via a network access application such as an Internet browser. Since the information of the error is in a natural language thus the error report is non programming language specific. Then the client machine may send the error report via the network to the error tracking server . The error tracking server may store the error report in the error report database . The test case generator may retrieve the error report from the error report database such as by using a query language e.g. structured query language SQL etc. .

In some embodiments the parser within the processing module in the test case generator parses the error report. For example a collection of keywords related to some API function calls may be used to translate the natural language in the error report into an automated test case. The automated test case may be written in scripting language to be interpreted for execution or a programming language to be compiled for execution. In one embodiment the parser finds the keywords in the error report. Then the API creates a set of instruction stubs using the data provided by a tester in the operations to reproduce the error. The data may include files to import results expected and instructions to be executed and tested etc. In another example the parser scans the error report to find predetermined keywords in the error report. Then the parser may generate an intermediate form of test case such as the parsed error report in XML in based on some predetermined information. For instance the predetermined information may include a list of primary keywords such as verbs e.g. import search modify etc. and the arguments associated with the primary keywords e.g. ldif file for import search filter for search etc. . In some embodiments the test case generator may use a default value if no argument is given for a primary keyword found in the error report.

In some embodiments the API in the error tracking server inputs a collection of predetermined keywords. For instance the API may import a file containing the collection of keywords. The keywords may be related to specific aspects and or characteristics of the program such as float loop import attached etc. For example the processing module may search the raw content of the error report to determine if any of the keywords is in the error report. Based on the keywords found the processing module may generate a parsed result which is converted to the proposed test case for reproducing the error. For instance a set of predetermined instructions and or inputs may be added to the proposed test case if a predetermined keyword or a predetermined combination of keywords is found in the parsed error report. The proposed test case may be written in a predetermined computer programming language that is compiled before execution e.g. C C Java etc. or in a predetermined script language that is interpreted as the test case is being executed e.g. UNIX shell script perl python etc. . Alternatively the proposed test case may be written in machine executable test code such as assembly code binary code etc.

In some embodiments the test case generator sends the proposed test case to the client machine which outputs the proposed test case to the user to allow the user to verify the test case. For instance the client machine may display the proposed test case to the user via the GUI . Alternatively the client machine may output the proposed test case into a file or a document printable and or viewable using a document viewing application e.g. a file in Portable Document Format PDF .

In some embodiments the user may modify the proposed test case via the GUI . For instance the user may edit the proposed test case via the GUI . Alternatively the user may edit the proposed test case using another application operable on the client machine such as a word processing application e.g. Microsoft Word OpenOffice.org Writer etc. . The client machine may then send the modified test case to the test case generator . The test case generator may use the modified test case as the final test case. Alternatively the test case generator may further process the modified test case to generate a final test case.

In an alternate embodiment the user inputs feedback to the client machine via the GUI as illustrated in . The client machine may forward the feedback to the test case generator . The test case generator may modify the proposed test case based on the feedback to generate a final test case for reproducing the error reported. The final test case may include machine executable test code.

In some embodiments the test case generator sends the final test case to the test case database via the network . The test case database may store one or more other test cases in addition to the final test case. Then the test server may access the test case database to retrieve the final test case. The test server may execute the final test case to attempt to reproduce the error reported.

In an alternate embodiment the test case generator provides a GUI to allow a user e.g. a test case developer to submit the error report without using the client machines . Then the test case generator may process the error report as described above to automatically generate a test case to reproduce the error reported.

In some embodiments the GUI includes a template having multiple editable fields. Referring to the GUI includes an editable field to allow the user to enter a summary of the error the user has found. A test case generator e.g. the test case generator in may put the summary entered into a test case as a comment. The GUI may further include an editable field to allow the user to enter the name or identifier of the program or the product in which the error is found. Furthermore the GUI may include an editable field to allow the user to enter a version number of the program or the product in which the error is found. In some embodiments the GUI further includes an editable field for the user to enter a detailed description of the error or problem the user has encountered. The test case generator may put the description entered into the test case as a comment.

Referring to the GUI further includes an editable field to allow the user to enter one or more steps or operations to reproduce the error. The steps or operations to reproduce the error may include one or more predetermined keywords. Further the GUI may include an editable field to allow the user to enter the actual result of executable the program and another editable field to allow the user to enter the expected result. The test case generator may parse the steps or operations to reproduce the error the actual result and the expected result to generate the test case as described above.

As such the template in the GUI may guide the user to input information about the error in a natural language for composing the error report which may be submitted via a web page to an error tracking server e.g. the error tracking server in . The test case generator may retrieve the error report from the error tracking server and may automatically generate a test case having machine executable code to reproduce the error. Details of some embodiments of the automatic generation of test case have been described above.

The exemplary computer system includes a processing device a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processing device represents one or more general purpose processing devices such as a microprocessor a central processing unit or the like. More particularly the processing device may be complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or processor implementing other instruction sets or processors implementing a combination of instruction sets. Processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processing device is configured to execute the processing logic for performing the operations and steps discussed herein.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a machine accessible storage medium also known as a machine readable storage medium on which is stored one or more sets of instructions e.g. software embodying any one or more of the methodologies or functions described herein. The software may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system the main memory and the processing device also constituting machine accessible storage media. The software may further be transmitted or received over a network via the network interface device .

While the machine accessible storage medium is shown in an exemplary embodiment to be a single medium the term machine accessible storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine accessible storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term machine accessible storage medium shall accordingly be taken to include but not be limited to solid state memories optical and magnetic media etc.

Thus some embodiments of a method and apparatus for automatically generating test cases from error data have been described. It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

