---

title: Managed application execution application programming interface and schema
abstract: Managed application programming interfaces (APIs), schemas and procedures receives a managed API call from an application, and maps the managed API call to an unmanaged API call. Managed data types and managed data objects of the managed API call are mapped to corresponding unmanaged data types and data objects. A request resulting from the unmanaged API call is dispatched to and interpreted by an unmanaged programming language interpreter, which executes the request in an unmanaged programming language. An unmanaged response to the request is mapped to a corresponding managed response, which is provided to the managed application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07921432&OS=07921432&RS=07921432
owner: Microsoft Corporation
number: 07921432
owner_city: Redmond
owner_country: US
publication_date: 20060317
---
Integration of other systems and applications is an important feature of any server based product that automates processes and manages data. In particular with an enterprise resource planning ERP system there is often a need to support systems and applications that are based upon different programming languages. A client application based upon a particular interoperability standard such as Component Object Model COM allowed integration with an ERP system based upon a programming language such as X different from the programming language of the client application. The ERP system included an interoperability component which provided a mechanism for the client application to invoke client side classes provided an execution environment for client side classes and allowed client side classes to call server side classes and vice versa where the client side and server side classes were written in a programming language different from the client application. For example an ERP server having a COM interoperability component exposed X based ERP components to client applications that were written in a non X programming language but based upon the COM interoperability standard. COM based client applications could integrate with the enterprise resource planning server despite different programming languages and X code was executed from the COM execution environment.

In many cases applications were built based on different type systems or datatypes e.g. strings decimal handling values etc. than the type system of the ERP server. For example applications were built based on managed code. Generally managed code is programming code that has its execution managed by a generalized multi language reflective execution engine such as .NET framework Common Language Runtime CLR . By contrast any language that is not a managed code may be referred to as an unmanaged language such as X . Likewise any application that is not based upon a managed code may be referred to as an unmanaged application. In some cases unmanaged may also be understood as native. A managed programming language generally has a different type system than unmanaged programming languages. Accordingly parameter types data types object types etc. are different among managed and unmanaged programming languages and applications. As a result an enterprise resource planning server should support different programming languages that utilize and support different type systems such as managed and unmanaged programming languages when interacting with applications and executing requests.

The unmanaged interoperability component such as a COM based interoperability component did not have a managed application programming interface API and did not easily integrate with client applications based on managed code. In order to write managed code that interacted with the unmanaged interoperability component managed applications utilized unmanaged e.g. COM wrappers around managed e.g. .NET Framework objects and the unmanaged wrappers were used to interact with the unmanaged API of the interoperability component. The use of unmanaged wrappers required an additional layer of code in order to bridge the managed application and the unmanaged interoperability component and increased the complexity of the managed application. Further requests and data types from the managed application required mapping also referred to as marshalling from the managed application to the unmanaged interoperability standard e.g. COM and then from the unmanaged interoperability standard to the unmanaged programming code e.g. X within the enterprise resource planning server. As a result the use of wrappers was inefficient and ineffective because the managed application s usability and maintainability could be impacted and the managed application s overall performance could be degraded.

A managed interoperability component allows managed application to interact directly with an unmanaged programming language using a managed API. Broadly an API call of a first type system such as a managed API call is received and mapped to a corresponding API call of a second type system such as an unmanaged API call. Managed data objects may be mapped to corresponding unmanaged data objects managed data types may be mapped to corresponding unmanaged data types and managed parameters may be mapped to corresponding unmanaged parameters. The use of these calls and schemas is expected to increase the integration between applications based on a type system such as managed applications and ERP systems based on a different type system such as unmanaged programming languages while maintaining or improving the client application s usability maintainability and overall performance.

Although the following text sets forth a detailed description of numerous different embodiments it should be understood that the legal scope of the description is defined by the words of the claims set forth at the end of this disclosure. The detailed description is to be construed as exemplary only and does not describe every possible embodiment since describing every possible embodiment would be impractical if not impossible. Numerous alternative embodiments could be implemented using either current technology or technology developed after the filing date of this patent which would still fall within the scope of the claims.

It should also be understood that unless a term is expressly defined in this patent using the sentence As used herein the term is hereby defined to mean . . . or a similar sentence there is no intent to limit the meaning of that term either expressly or by implication beyond its plain or ordinary meaning and such term should not be interpreted to be limited in scope based on any statement made in any section of this patent other than the language of the claims . To the extent that any term recited in the claims at the end of this patent is referred to in this patent in a manner consistent with a single meaning that is done for sake of clarity only so as to not confuse the reader and it is not intended that such claim term by limited by implication or otherwise to that single meaning. Finally unless a claim element is defined by reciting the word means and a function without the recital of any structure it is not intended that the scope of any claim element be interpreted based on the application of 35 U.S.C. 112 sixth paragraph.

Much of the inventive functionality and many of the inventive principles are best implemented with or in software programs or instructions and integrated circuits ICs such as application specific ICs. It is expected that one of ordinary skill notwithstanding possibly significant effort and many design choices motivated by for example available time current technology and economic considerations when guided by the concepts and principles disclosed herein will be readily capable of generating such software instructions and programs and ICs with minimal experimentation. Therefore in the interest of brevity and minimization of any risk of obscuring the principles and concepts in accordance to the present invention further discussion of such software and ICs if any will be limited to the essentials with respect to the principles and concepts of the preferred embodiments.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM FLASH memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programmings other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programmings other program modules and program data . Note that these components can either be the same as or different from operating system application programmings other program modules and program data . Operating system application programmings other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and cursor control device commonly referred to as a mouse trackball or touch pad. A camera such as web camera webcam may capture and input pictures of an environment associated with the computer such as providing pictures of users. The webcam may capture pictures on demand for example when instructed by a user or may take pictures periodically under the control of the computer . Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through an input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a graphics controller . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programmings as residing on memory device .

The communications connections allow the device to communicate with other devices. The communications connections are an example of communication media. The communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. A modulated data signal may be a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Computer readable media may include both storage media and communication media.

Generally managed refers to a method of cooperation between executing code and the runtime such that at any point of execution the runtime may stop an executing processor and retrieve information specific to the current processor instruction address. As such managed code may be any code or programming language that has its execution managed by a generalized multi language reflective execution engine and a managed application may be any application built using managed code. By contrast unmanaged may refer to anything that is not managed. For example unmanaged code may be any code or programming language that is not managed and an unmanaged application may be any application that is not developed based on managed code or programming language.

System is a client system that includes a network communication device including but not limited to a personal computer telephone a personal digital assistant a set top box television and entertainment system and the like. In one example the network communication device may include or be operatively coupled to a client application which may be a managed application having a different type system than what is utilized for execution by the server system . In one example the managed application is built using .NET and executes in the .NET Common Language Runtime CLR or another generalized multi language reflective execution engine that allows application code of various programming languages to run. The managed application may generate calls or requests to the server system to access an unmanaged component in the server system or cause execution of an unmanaged software application in the server system including but not limited to an operating system an application and the like.

System includes a database operatively coupled to the server system . Data within the database may be managed by the server system and or applications stored within the database may be accessed by the server system . In one example using the above system the server may enable a managed client application to interact with an unmanaged server programming language and in particular may enable a managed client application to interact directly with an unmanaged programming language of the server system while bypassing an interoperability standard such as COM. A managed API call from a managed client application is mapped or marshaled from the managed language such as .NET to the unmanaged language of the server system such as X . The resultant request associated with the call is dispatched to an unmanaged language interpreter resident locally in the interoperability component for execution. Alternatively the unmanaged language interpreter may be resident remotely in an application object server which may be an application server that executes application logic for the client and the request may be executed remotely.

Although the client system is shown to include one network communication device it should be understood that different numbers of network communication devices may be utilized. Likewise the server system may include different numbers of servers and the database system may include different numbers of databases. Further while the server the network communication device and the database are each shown to be provided within their own systems it should be understood that the server the network communication device and or the database may be provided within the same system. It should also be understood that multiple systems may be provided including hundreds or thousands of client systems. Although the following disclosure generally describes the interaction between one server and one client system it should be understood that multiple servers may operate simultaneously each with one or more client network communication devices and or with one or more client systems.

Further although the following disclosure generally describes the integration and interaction between a managed programming execution language and an application written therefrom and an unmanaged programming language and a system based therefrom it should be understood that the following disclosure is equally applicable to the interaction between applications systems and languages of different type systems which defines how a programming language classifies values and variables into various types and how the programming language manipulates and interacts those values and variables or otherwise provide rules for the semantics of variables and values. For example different types systems may results in different parameter types different data types and different data objects. As a result an API call may include data objects data types and or data parameters based upon a programming language having a different type system than the programming language of the system responding to the API call. Various examples of computer code are provided below some of which are written in .NET programming language X programming language which is a simple object oriented interpretive language or C programming code although various other programming languages including other object oriented languages may be utilized.

The managed API layer provides a set of managed APIs and API methods which may be publicly exposed to provide access to the unmanaged execution language of the server system from managed programming languages of managed client applications. In other words the managed API layer provides an entry point for various managed API calls from the managed client application which calls a particular managed API method. Generally the managed API layer does not have any implementation in the unmanaged programming language.

The managed API implementation layer may provide a runtime environment for requests associated with calling the managed APIs. The managed API implementation layer may include a set of classes and helper functions defined in the managed language that uses the transition layer to access and execute the unmanaged programming language. In particular the managed API implementation layer implements the managed API layer by taking the managed API calls from the managed API layer and passing the calls to the transition layer .

The transition layer may engage in type marshaling which marshals a managed API call from a managed layer e.g. the managed API implementation layer to an unmanaged layer e.g. the interpreter layer by mapping the managed API call to a corresponding unmanaged API call. In other words the transition layer provides interoperability between managed and unmanaged data types or data objects by bringing the call or request from a managed layer to an unmanaged layer and vice versa. In particular a managed API call may include data objects which include data types which in turn include parameters though the API call may include any combination of data object data types and parameters. The data objects data types and parameters of the API call may be based on a managed programming language that supports a different type system than the server system . The transition layer may map managed parameters managed data types and or managed data objects to corresponding e.g. equivalent unmanaged parameters unmanaged data types and or unmanaged data objects in the unmanaged programming language. As such the transition layer may map a managed API call to a corresponding e.g. equivalent API call understood by an unmanaged layer by changing the parameters data types and or data objects from managed to unmanaged and likewise may map parameters data types and or data objects of an unmanaged response to the API call to a response understood by a managed layer.

The interpreter layer is an unmanaged interpreter layer which may interpret and execute a request in the unmanaged programming language either locally in the kernel of the managed interoperability component or remotely in the kernel of an application object server.

At block the transition layer may map the managed API call to a corresponding unmanaged API call. In particular the parameters data types and or data objects may be changed from managed to unmanaged. For example a managed parameter of the managed API call is mapped to a corresponding unmanaged parameter of the corresponding unmanaged API call. Likewise a managed data type of the managed API call is mapped to a corresponding unmanaged data type of the corresponding unmanaged API call. Further a managed data object of the managed API call is mapped to a corresponding unmanaged data object of the corresponding unmanaged API call.

Whether or not the transition layer maps all or some of parameters data types or data objects depends on the construction of the managed API call. For example an API call with only parameters and data types would not result in mapping object types. Further the construction of the managed API call may depend on the order in which mapping occurs. For example a managed API call with multiple data objects some or all of which may include one or more data types some or all of which in turn may include one or more parameters may result in the routine parsing out each data object parsing out each data type of each data object and parsing out each parameter of each data type with mapping occurring at each level. It should be understood that even with multiple data objects data types and or parameters the mapping thereof may be done concurrently e.g. multiple data objects concurrently data types of different data objects concurrently etc. . Further it should be understood that an API call need not necessarily include all of data objects data types and parameters not does an API necessarily include parameters nested within data types or data objects and data types nested within data objects. As such the routine is capable of mapping any API call of a type system to another API call of another type system regardless of its construction.

Once all of the parameters data types and or data objects have been mapped to unmanaged parameters data types and or data objects the transition layer may dispatch the request associated with the unmanaged API call to the unmanaged programming language interpreter such as an X interpreter at block . The unmanaged programming language interpreter may be resident in the managed interoperability component at block or in a remote application object server at block . The unmanaged programming language interpreter may then execute the request in the unmanaged programming language.

The following provides examples of managed API calls which may be sent by a managed application and received via the server system . As mentioned the calls may be implemented using extensible markup language such as XML and all calls may be defined by the server system to simplify and provide a common interface for different calls. Although C style notation is used to described the schemas the schemas are not limited thereto.

As explained above the managed application programming interface layer may expose a variety of managed application programming interfaces which may be implemented in a variety of managed classes Server ServerBuffer ServerContainer ServerObject ServerRecord. The Server class provides methods for connecting to the server system creating managed objects class objects record objects container objects and buffer objects executing transactions etc. The ServerBuffer class provides methods for adding and retrieving data to and from a server system buffer. ServerBuffer objects may be used with ServerContainer objects. The ServerContainer class provides methods for reading and modifying containers. The ServerObject class provides methods for calling methods of Server objects.

Object types supported within the Server ServerObject and ServerRecord classes are provided in the following tables with the corresponding variant type shown for each managed type.

When a method returns an object the object can be of one of the following managed data types the variant type is shown just for information 

The following provides examples of some of the methods used for the managed application programming interfaces within the managed application programming interface layer and corresponding unmanaged API methods. Each of the classes provides a method to invoke the corresponding unmanaged request to perform a function in response to the managed API call as described above. Although X style notation is used to described the schemas the schemas are not limited thereto.

At block the transition layer may marshal the response from the unmanaged programming language interpreter layer to the managed API implementation layer . In particular the transition layer may map the parameters data types and or data objects of the response from unmanaged to corresponding managed parameters data types and or data objects such that the data object is understood by the managed client application. Marshalling the response may be performed in a similar manner as provided for marshalling the managed API call with the exception that the mapping occurs from an unmanaged response to a corresponding managed response. Once all of the unmanaged parameters have been mapped to managed parameters the unmanaged data types have been mapped to managed data types and the unmanaged data objects have been mapped to managed data objects as needed the transition layer dispatches the managed response to the managed API implementation layer and at block the managed API implementation layer forwards the managed response to the managed client application.

Although the forgoing text sets forth a detailed description of numerous different embodiments of the invention it should be understood that the scope of the invention is defined by the words of the claims set forth at the end of this patent. The detailed description is to be construed as exemplary only and does not describe every possibly embodiment of the invention because describing every possible embodiment would be impractical if not impossible. Numerous alternative embodiments could be implemented using either current technology or technology developed after the filing date of this patent which would still fall within the scope of the claims defining the invention.

Thus many modifications and variations may be made in the techniques and structures described and illustrated herein without departing from the spirit and scope of the present invention. Accordingly it should be understood that the methods and apparatus described herein are illustrative only and are not limiting upon the scope of the invention.

