---

title: Network accessible trusted code
abstract: In one embodiment, a computer system performs a method for accessing a trusted assembly from a virtualized location. A computer system detects receipt of a request to access an assembly. The address of the assembly is expressed in the request as a virtualized location. The computer system resolves the virtualized location to a physical location where the assembly is physically stored. The resolving includes accessing an information store that maintains the current physical location corresponding to the requested assembly's virtualized location. The computer system determines whether the requested assembly qualifies as a trusted assembly by verifying that the assembly sufficiently complies with information encoded within the assembly. Lastly, upon determining that the requested assembly is trusted, the computer system accesses the requested assembly from the physical location.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08006281&OS=08006281&RS=08006281
owner: Microsoft Corporation
number: 08006281
owner_city: Redmond
owner_country: US
publication_date: 20061221
---
Computers are used all over the world to perform a wide variety of tasks. Computers perform these tasks by processing software code which contains commands that are interpreted and executed by the computer. Software code is typically written by a developer using one or more scripting or programming languages. Because most software programs are quite complex and involve the interaction of multiple functions variables and processes application programming interfaces and shared libraries have been developed to allow a developer to incorporate common functionality into the program without having to write the code for it. This also helps to cut down on the size of a software program which in turn increases program processing efficiency. Thus shared libraries are commonly used in many of today s software applications.

Many times in a computer system with a variety of installed applications a shared library or assemblies cache i.e. a store of compiled executable code will be secured to allow the various programs read and execute access but deny them write access typically only a system administrator will have write access to the assemblies cache . This prevents programs from overwriting assemblies in the cache. In such cases the assemblies cache is said to be trusted. Thus virtually any software program installed on the computer system can read and execute assemblies from the assemblies as cache without having to verify the integrity or authenticity of each assembly. The assemblies themselves are inherently trusted because the assemblies are located in the trusted assemblies cache. Avoiding authenticity checks in this manner also increases program processing efficiency.

To take advantage of shared assemblies developers typically include metadata in the software program that points to the trusted assemblies cache. At runtime an assembly from the cache can be read and or executed by any function or routine in the program as part of normal program processing. An assembly can be called multiple times during the processing of a software program. In some cases multiple functions may read and execute or attempt to execute an assembly at the same time. Some operating systems have a means for creating instances of assemblies and providing each program its own instance of the assembly. For example using instances of assemblies multiple programs may simultaneously access an assembly that writes characters and or images to a display screen.

Thus because trusted assemblies caches are convenient and lead to more efficient software program processing they have become mainstream in modem software development. Assemblies caches however are limited as to the locations in which they can be deployed. Currently the trusted assemblies cache location is predefined in the software program and cannot be modified without changes to the program code of the software program. Furthermore the trusted assemblies cache is located on the same computer system as the software applications that are accessing the assemblies in the cache.

Embodiments of the present invention are directed to accessing a trusted assembly from a virtualized location. In one embodiment a computer system performs a method for accessing a trusted assembly from a virtualized location. A computer system detects receipt of a request to access an assembly. The address of the assembly is expressed in the request as a virtualized location. The computer system resolves the virtualized location to a physical location where the assembly is physically stored. The resolving includes accessing an information store that maintains the current physical location corresponding to the requested assembly s virtualized location. The computer system determines whether the requested assembly qualifies as a trusted assembly by verifying that the assembly sufficiently complies with information encoded within the assembly. Lastly upon determining that the requested assembly is trusted the computer system accesses the requested assembly from the physical location.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Embodiments of the present invention are directed to accessing a trusted assembly from a virtualized location. In one embodiment a computer system performs a method for accessing a trusted assembly from a virtualized location. A computer system detects receipt of a request to access an assembly. The address of the assembly is expressed in the request as a virtualized location. The computer system resolves the virtualized location to a physical location where the assembly is physically stored. The resolving includes accessing an information store that maintains the current physical location corresponding to the requested assembly s virtualized location. The computer system determines whether the requested assembly qualifies as a trusted assembly by verifying that the assembly sufficiently complies with information encoded within the assembly. Lastly upon determining that the requested assembly is trusted the computer system accesses the requested assembly from the physical location. The embodiments of the present invention may comprise a special purpose or general purpose computer including various types of computer hardware as discussed in greater detail below.

Embodiments within the scope of the present invention also include computer readable media for carrying or having computer executable instructions or data structures stored thereon. Such computer readable media can be any available media that can be accessed by a general purpose or special purpose computer. Such computer readable media can be divided into two separate categories computer readable storage media and communication media. Computer readable storage media comprise physical or recordable type computer readable media including RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other similar storage medium which can be used to store desired program code means in the form of computer executable instructions or data structures and which can be accessed by a general purpose or special purpose computer. Communication media on the other hand comprises signals or carrier waves. For example when information is transferred or provided over a network or another communications connection either hardwired wireless or a combination of hardwired or wireless to a computer the computer properly views the connection as a communication medium. Combinations of the above should also be included within the scope of computer readable media.

Computer executable instructions comprise for example instructions and data which cause a general purpose computer special purpose computer or special purpose processing device to perform a certain function or group of functions. Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

Computer system also includes software programs . Software programs may include any type of software program that may be run on a computer system. For example software programs may include word processing software accounting software gaming software developing software or any software program that might use a trusted assembly. Oftentimes trusted assemblies are used to perform menial tasks that are frequently used by programs. For example software programs may use an executable linking file such as a .dll file to draw a menu to a computer screen or print a document. As another example each software program on computer system may use the same linking file to communicate with the video card so as to display the desired menu on the display device. In some embodiments such a linking file may be a trusted assembly and may be stored in local trusted assemblies cache .

In some embodiments of the present invention the requested trusted assembly is not physically located on the computer system. For example one or more trusted assemblies may be located in remote trusted assemblies cache on computer system . Furthermore in some embodiments the trusted assembly may be divided into one or more portions. Each portion may be stored on one or more other computer systems. For example a trusted assembly may be divided into three portions it should be noted that this number of portions was arbitrarily chosen and that the number of portions could be larger or smaller where each portion is stored on a separate computer system. In this example as illustrated in computer architecture trusted assembly portion is stored on computer system . Trusted assembly portion is stored on computer system and trusted assembly portion is stored on computer system . It should be noted that no portions all three portions or any combination of assembly portions could be stored on any one or a combination of computer systems and .

In some embodiments computer system is configured to communicate with other computer systems that store portions of trusted assemblies. Thus when computer system receives a request for a trusted assembly computer system can communicated with those computers on which the assembly portions are stored and can receive those portions. In some embodiments the trusted assembly portions e.g. trusted assembly portions are sent to software programs on computer system . In other cases the entire requested trusted assembly will be located in one physical location e.g. in remote trusted assemblies cache or on one of computer systems or . In such cases the entire assembly e.g. trusted assembly can be transmitted across network . Thus as will be explained in greater detail below software programs may access trusted assemblies stored locally or remotely depending on the physical location of the trusted assembly.

Method includes an act of detecting receipt of a request to access an assembly wherein the address of the assembly is expressed in the request as a as virtualized location act . For example computer system may detect receipt of a request to access an assembly e.g. trusted assembly where the address of the assembly is expressed in the request as a virtualized location. A virtualized location as the term is used herein is information that does not necessarily on its own imply any information regarding the corresponding physical local but it is information from which a program may derive the actual physical location of an assembly or other object. The location information may be modified by a user or software program to indicate a change in the assembly s name location or other characteristic of the assembly.

In some embodiments the virtualized location corresponds to multiple physical locations. For example in cases where a trusted assembly has been divided into more than one portion the trusted assembly may be physically stored on more than one computer system. For example trusted assembly portion may be stored on computer system . Trusted assembly portion may be stored on computer system and trusted assembly portion may be stored on computer system . Thus in such a case the virtualized location could be used to identify that the corresponding requested trusted assembly is divided into three portions and to identify where each portion is located. In some embodiments each portion may be stored multiple times in different geographically dispersed locations. Thus if one of the computer systems that stored a trusted assembly portion were to fail the portion would also be stored on a separate computer system in a geographically dispersed location. Storing trusted assemblies in this manner greatly strengthens a system s fault tolerance. In other cases where the requested trusted assembly is stored without division the virtualized location could be used to infer the single physical location of the stored assembly. As was the case with divided or distributed assemblies whole assemblies may also be stored in duplicate form on multiple computer systems in geographically dispersed locations so as to increase fault tolerance.

In some embodiments a string identifier is used to identify the physical location of a requested assembly. A string identifier is electronically stored information integrated into the assembly that identifies characteristics of the assembly. For example a trusted assembly may have a string identifier that indicates the assembly s name size date of last modification encryption type and any other characteristic that may be used to identify the assembly.

Method also includes an act of resolving the virtualized location to a physical location where the assembly is physically stored the resolving comprising accessing an information store that maintains sufficient information from which the current physical location s of the requested assembly may be derived using the requested assembly s virtualized location act . For example computer system may resolve the virtualized location to a physical location e.g. local trusted assemblies cache or remote trusted assemblies cache . Resolving may include accessing information store which maintains the current physical location corresponding to the requested assembly s virtualized location. Information store can also be stored at a network location from which the physical location corresponding to the requested assembly s virtualized location is periodically downloaded locally as a performance optimization. In some cases the physical location is a network location. For instance the physical location of the trusted assembly may be accessible via network e.g. computer systems and . In other cases the virtualized location is a local location e.g. local trusted assemblies cache .

In some cases it may be possible to change the physical location of the assembly while maintaining the same virtualized location. For example software programs may be configured to reference a certain virtualized location for example using a string identifier such as a UUID Universally Unique Identifier . Over time the physical location of the assembly may change for example from remote trusted assemblies cache to local trusted assemblies cache or to computer system etc. with or without the user s knowledge and without informing software programs of the change. Because the software programs are configured to reference a certain virtualized location which remains the same the physical location within the virtualized location can change without the user s awareness.

Method includes an act of determining whether the requested assembly qualifies as a trusted assembly by verifying that the assembly sufficiently complies with information encoded within the assembly act . For example computer system may determine whether the requested assembly qualifies as a trusted assembly by verifying that the assembly sufficiently complies with information encoded within the assembly. In some cases an assembly may trust all assemblies or portions of assemblies located at a trusted virtualized location. For example once a particular virtualized location is known to be a trusted location a software program can then trust any assembly files located in that location e.g. remote trusted assemblies cache .

As mentioned above in some embodiments the information encoded within the assembly includes information in the assembly s string identifier. A string identifier may include the assembly s name type date of last modification and any other characteristics. These characteristics may be verified to determine whether the as requested assembly is the one that was expected and can therefore be trusted. In some cases the information encoded within the assembly includes security metadata. Similar to the string identifier as explained above security metadata may include information and or characteristics of the assembly that can be used to verify that the requested assembly is a trusted assembly. Digital certificates may also be used as the information encoded within the assembly. In such cases trust is granted based on whether the digital certificate is verified as being authentic. Security metadata can also include a signed verification for the assembly and other security implementations such as AUTHENTICODE signed assemblies.

Furthermore information encoded in computer system or computer programs may include rules and or policies used to resolve the assembly s physical location. In cases where an assembly is trusted based on its physical and or virtual location the requested assembly may be trusted because the rules and or policies were used to determine the location of the assembly. In some embodiments such rules and policies may be user customizable. That is a user may customize the rules and or policies that determine how to resolve an assembly s physical location from its virtual location. In some cases customizing a customizable rule and or policy includes selecting the names of assemblies that are to be trusted. Thus in such cases a computer system may know that an assembly is trusted because the processed rule has indicated that the name of the assembly is a trusted name. In still other cases customizing a customizable rule may include selecting the number of assemblies that are to be trusted.

Method includes upon determining that the requested assembly is trusted YES in decision box an act of accessing the requested assembly from the physical location act . For example computer system may upon determining that the requested assembly is trusted access the requested assembly from the physical location e.g. remote trusted assemblies cache . In some cases the requested assembly will have been updated since its last use. In some embodiments computer system automatically requests file updates. Such a request for updates may be transparent to the user. In this manner the user continually receives the latest version of the assembly without having to actively search for it. If the assembly is not trusted NO in decision box appropriate action may be taken act such as halting the program until a trusted assembly can be found. Or alternatively the assembly could still be loaded and executed but at a reduced level of trust. Thus in some embodiments computer architecture may additionally be used as a general mechanism for loading arbitrary but untrusted code from a virtualized location.

In an alternative embodiment a computer system e.g. computer system performs a method for accessing a trusted program file from an addressable location. The method includes an act of receiving a communication wherein the communication includes a request to access a program file. The address of the program file is expressed in the request as a first addressable location. The method includes an act of resolving the first addressable location to a second addressable location where the program file is physically stored at the second addressable location and the resolving includes accessing an information store that maintains the current physical location of a program file corresponding to the requested program file s first addressable location. The method includes an act of determining whether the requested program file qualifies as a trusted program file by verifying that the program file at least sufficiently complies with information encoded within the program file. Lastly if it is determined that the requested program file is trusted the method includes an act of accessing the requested program file from the second location.

Method includes an act of installing a software program wherein the act of installing the software program results in an installation of a subset but not all of files helpful to implement one or more portions of the software program s functionality act . For example software programs may be installed where the installation results in an installation of a subset but not all of files helpful to implement one or more portions of the software programs functionality. For instance in cases where a large application is to be installed it may be advantageous to initially install only those files that are necessary or helpful to run the program. Later as time goes by and the user begins to use different uninstalled portions of the program the program may be configured to install additional files as will be explained in greater detail below.

Method includes an act of receiving from the software program a request for an assembly act . For example computer system may receive a request for an assembly from one of software programs . In some cases multiple software programs may simultaneously send requests to use one or more assemblies. The requests may be for the same assembly or for different assemblies

Method includes an act of querying a local assembly cache for the requested assembly act . For example computer system may query local trusted assembly cache for the requested assembly. As explained above local trusted assembly cache may be a repository for trusted assemblies stored on as computer system .

Method includes upon determining that the requested assembly is not stored in the local assembly cache an act of using a network protocol to retrieve the requested assembly from a virtualized location act . For example computer system may determine that the requested assembly is not stored in local trusted assembly cache NO in decision box and use a network protocol to retrieve the requested assembly from a virtualized location. As explained above the virtualized location may include information indicating the physical location of the requested assembly. Computer system may retrieve the requested assembly from the physical location indicated by the virtualized location using a network protocol on network . If computer system determines that the requested assembly is stored in local trusted assemblies cache YES in decision box computer system can access the requested assembly from the local cache act . Additionally or alternatively at decision point there could be a subsequent check for an updated version of the requested assembly as is shown in the diagram at . For example if a local version of the trusted assembly exists in local trusted assemblies cache computer system may nonetheless decide to check and see if there is a newer version of that assembly available.

Method includes an act of using the network protocol to determine whether an updated version of the requested assembly exists decision box . For example Hypertext Transfer Protocol HTTP may be used to determine whether an updated version of the requested assembly exists. HTTP has built in properties that allow it to automatically query the computer system with which it is communicating to discover whether updated files exist. If no updated version of the requested assembly exists NO in decision box appropriate action may be taken act such as retrieving the current version of the requested assembly. If an updated version of the requested assembly does exist YES in decision box the updated version of the requested assembly may be accessed by the network protocol e.g. HTTP act and sent via network to computer system . In some embodiments once an updated version of the requested assembly that was not initially in the local cache may be cached in local trusted assemblies cache so that the next time one of software programs needs this particular assembly the assembly will be available in local cache thus saving time in retrieving the assembly. Other network protocols may be used in place of or in addition to HTTP in the example above. For instance Distributed File System DFS may be used to determine whether an updated version of the requested assembly exists. DFS may also be beneficial for fault tolerance and load balancing of virtualized assemblies.

Thus embodiments of the present invention describe accessing a trusted assembly from a virtualized location A computer system can resolve a request to access an assembly using a virtualized location. The computer system determines whether the requested assembly qualifies as a trusted assembly and if trusted the computer system accesses the requested assembly from the physical location.

The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is therefore indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

