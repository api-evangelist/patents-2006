---

title: Method and user interface for enhanced graphical operation organization
abstract: A computer-implemented method and user interface for organizing graphical operations and displaying performance data of a graphics processing pipeline. More specifically, embodiments provide a convenient and effective mechanism for enhancing graphics processing by automatically determining and grouping graphical operations with similar state attributes relating to one or more units of the graphics pipeline. As such, pipeline adjustments for reducing execution time of one graphical operation may benefit other graphical operations with similar state attributes, thereby reducing the number of pipeline adjustments and allowing more careful selection of graphical operations to increase performance and reduce image degradation. Also, the display of the grouped graphical operations also provides information for determining the troublesome operations. In one embodiment, the groups are ranked by their respective execution time. Additionally, other forms of performance data may be displayed for graphical operations with similar state attributes, thereby providing additional information to guide enhancement operations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08436864&OS=08436864&RS=08436864
owner: Nvidia Corporation
number: 08436864
owner_city: Santa Clara
owner_country: US
publication_date: 20060801
---
The present application is related to U.S. patent application Ser. No. 11 498 207 filed Aug. 1 2006 entitled USER INTERFACE AND METHOD FOR GRAPHICAL PROCESSING ANALYSIS naming Raul Aguaviva Jeffrey Kiel Sebastien Domine and Will Ramey as inventors assigned to the assignee of the present invention. That application is incorporated herein by reference in its entirety and for all purposes.

The present application is related to U.S. patent application Ser. No. 11 497 863 filed Aug. 1 2006 entitled A METHOD AND SYSTEM FOR CALCULATING PERFORMANCE PARAMETERS FOR A PROCESSOR naming Raul Aguaviva Jeffrey Kiel and Sebastien Domine as inventors assigned to the assignee of the present invention. That application is incorporated herein by reference in its entirety and for all purposes.

The need to improve the efficiency of graphics processing units GPUs running graphical applications has always been a concern of software developers. For example developers often look to increase frame rate by reducing the execution time of graphical operations of an application. However optimizing GPU performance is a daunting task given the limited number of performance tools available and the limited number of features that the conventional tools offer.

In an attempt to reduce graphical operation execution time conventional performance tools may indicate a graphical operation with the largest execution time. Using this information a developer may then modify the operation of pipeline units of the GPU to more efficiently process the graphical operation by reducing the execution time. The developer may then tackle the graphical operation with the next highest execution time and so on until the application performs at an acceptable frame rate.

Although this approach seems logical developers generally find it time consuming tedious without appreciable performance increases and problematic. For example conventional performance tools using this methodology require a developer to spend inordinate amounts of time locating troublesome operations and then optimizing the GPU pipeline for each troublesome graphical operation. Additionally many tweaks are often required which increases the probability that bottlenecks and or underutilization of pipeline units may occur. And even if performance increases are realized compromises made to increase performance at the cost of the rendered image quality may leave the graphical application in an unacceptable state.

Accordingly a need exists to more conveniently and effectively reduce the execution time of graphical operations of graphical applications. Additionally a need exists to reduce the number of graphics pipeline adjustments made when enhancing the processing of a graphical application. A need also exists to make adjustments to a graphics pipeline which improve performance yet maintain the image quality. Embodiments of the present invention provide novel solutions to these needs and others as described below.

Embodiments of the present invention are directed to a computer implemented method and user interface for organizing graphical operations and displaying performance data of a graphics processing pipeline. More specifically embodiments provide a convenient and effective mechanism for enhancing graphics processing by automatically determining and grouping graphical operations with similar state attributes relating to one or more units of the graphics pipeline. As such pipeline adjustments for reducing execution time of one graphical operation may benefit other graphical operations with similar state attributes thereby reducing the number of pipeline adjustments and allowing more careful selection of graphical operations to increase performance and reduce image degradation. Also the display of the grouped graphical operations also provides information for determining the troublesome operations. In one embodiment the groups are ranked by their respective execution time. Additionally other forms of performance data may be displayed for graphical operations with similar state attributes thereby providing additional information to guide enhancement operations.

In one embodiment a computer implemented method for organizing a plurality of graphical operations includes accepting a first user input selecting a programmable state associated with a graphics pipeline unit wherein the programmable state is assignable to a plurality of state attributes. The programmable state may comprise at least one of a pixel shader program a vertex shader program a blending setting a render target characteristic and a pixel shader constant. The plurality of graphical operations are accessed wherein each graphical operation of the plurality of graphical operations comprises at least one of the plurality of state attributes. The plurality of graphical operations are automatically grouped into a plurality of state groupings wherein each of the plurality of state groupings comprises graphical operations with at least one common state attribute of the programmable state. As such automatically grouping graphical operations into state groupings enables the targeting of larger numbers of detrimental graphical operations which may benefit from fewer graphics pipeline adjustments e.g. given the common state attributes shared by the state grouping thereby enhancing graphical application performance while maintaining or improving image quality.

In another embodiment a computer implemented user interface includes a first on screen window for designating a programmable state associated with a graphics pipeline unit wherein the programmable state is assignable to a plurality of state attributes. The interface also includes a second on screen window operable to display a plurality of state groupings and associated execution data wherein each state grouping includes a plurality of graphical operations sharing a common state attribute of a designated state as indicated in the first window. A third on screen window is operable to display a plurality of graphical operations and associated execution data wherein the plurality of graphical operations are of a state grouping identified in the second window.

Reference will now be made in detail to embodiments of the present invention examples of which are illustrated in the accompanying drawings. While the present invention will be discussed in conjunction with the following embodiments it will be understood that they are not intended to limit the present invention to these embodiments alone. On the contrary the present invention is intended to cover alternatives modifications and equivalents which may be included with the spirit and scope of the present invention as defined by the appended claims. Furthermore in the following detailed description of the present invention numerous specific details are set forth in order to provide a thorough understanding of the present invention. However embodiments of the present invention may be practiced without these specific details. In other instances well known methods procedures components and circuits have not been described in detail so as not to unnecessarily obscure aspects of the present invention.

Some portions of the detailed descriptions which follow are presented in terms of procedures logic blocks processing and other symbolic representations of operations on data bits within a computer memory. These descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. In the present application a procedure logic block process or the like is conceived to be a self consistent sequence of steps or instructions leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually although not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated in a computer system.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussions it is appreciated that throughout the present invention discussions utilizing the terms such as identifying defining determining performing processing comparing repeating creating modifying assigning moving establishing using calculating adding accessing generating accepting grouping displaying sorting depicting assigning programming executing or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

As shown in computer system platform comprises northbridge component for coupling CPU to system memory and graphics processing unit GPU . GPU comprises a portion of at least one graphics pipeline for processing graphical operations to render graphical data for display e.g. on a display device coupled to computer system etc. . The rendered data may be stored within frame buffer for access by components of computer system and or other systems. Additionally computer system comprises southbridge component coupled to northbridge component for enabling the reading and writing of data to storage device . Further southbridge component enables computer system to communicate with other systems or devices via I O interface .

In one embodiment of the present invention computer system may be implemented as a desktop computer system or server computer system having one or more powerful general purpose CPU removably coupled with a motherboard. A graphics card may couple to the motherboard for performing graphics processing tasks where the graphics card may comprise GPU and or frame buffer . Alternatively frame buffer may be removably coupled with the graphics card to enable variation of frame buffer size memory type etc. for varying graphics performance. Similarly GPU may be removably coupled with the graphics card.

Alternatively computer system may be implemented as a set top video game console device such as for example the Xbox 360 available from Microsoft Corporation of Redmond Wash. or the Playstation 3 available from Sony Computer Entertainment Corporation of Tokyo Japan. Further computer system may be implemented as a portable computing system such as a laptop computer personal digital assistant PDA cellular phone etc.

Although computer system is depicted in with certain components to simplify the discussion it should be understood that computer system may comprise additional and or alternative components devices buses etc. in other embodiments. Additionally it should be appreciated that elements of computer system may be alternatively grouped e.g. southbridge integrated with northbridge etc. . Additionally although elements of computer system are depicted as a discrete components in it should be appreciated that they may be alternatively implemented as a discrete integrated circuit dies e.g. mounted directly on the motherboard graphics card etc. or as components included within the integrated circuit die of a computer system chipset component e.g. integrated within northbridge southbridge etc. .

As shown in vertex setup unit receives vertices from the CPU e.g. of and assembles all the data required for vertex shader unit to run a given vertex program. For example vertex setup unit may gather information about a given vertex which may include its position normal color smoothing attributes etc. Once this information is assembled it is passed to the vertex shader unit where a vertex program is run to transform the vertices from model space to camera space calculate lighting perform skinning change the shape or size of the primitive being drawn change the position or orientation of the primitive being drawn etc. Using information from vertex shader unit the triangle setup unit may then collect and convert the vertices into triangles. The triangles are then assembled such that they may effectively be converted to pixels by later states of pipeline .

Data from triangle setup unit is fed to pixel shader unit for application of pixel shader programs to pixels associated with the triangles. For example pixel shader programs may perform per pixel lighting bump mapping etc. where the pixel shader programs may access pixel shader constants during execution. Pixel shader unit may output to several e.g. four render targets or separate buffers where the render targets may be accessed for later use e.g. input as textures combined displayed etc. . Thereafter the data stream is fed to ROP unit for performing blending operations with what is currently within frame buffer . The blending may be performed in accordance with blending settings e.g. alpha blending enabled alpha test enabled alpha test value stencil enabled etc. provided to ROP unit . After rasterization operations are performed by ROP unit the data may be written to frame buffer .

Given that data is passed from one unit to another within pipeline units of pipeline may operate in parallel. For example while vertex setup unit is gathering information for vertex shader unit texture unit may communicate with frame buffer and send texture data to vertex shader unit . Similarly texture unit may communicate with frame buffer and send texture data to pixel shader unit while triangle setup unit assembles triangles to be shaded. As such pipeline offers software developers the flexibility and adaptability needed to increase the efficiency and utilization of each unit of the pipeline such that graphical applications perform well on GPU .

Depending upon how a graphical operation needs to use a specific unit of a graphics pipeline the unit can be programmed to operate in accordance with different rendering states or states . A state is defined by one or more state attributes used by the graphical operation where the state may be programmed by changing one or more state attributes used by the graphical operation. Additionally the state may be unit specific where the state attributes defining the state correspond to one unit of the graphics pipeline. Alternatively a given state may apply to multiple units where the state attributes defining the state correspond to more than one unit of the graphics pipeline.

Although pipeline is depicted in with specific pipeline units it should be appreciated that a larger or smaller number of units may be used in other embodiments. Additionally the units of pipeline may be alternatively grouped and or coupled in other embodiments. Moreover it should be appreciated that units of pipeline may be implemented by hardware and or software where hardware implemented portions may be implemented on one or more components of computer system e.g. GPU CPU etc. .

Although graphical operation is shown with only five state attributes it should be appreciated that it may contain a larger or smaller number of state attributes in other embodiments. Moreover although a single graphical operation is shown in it should be appreciated that one or more graphical operations may share the same state attributes.

Accordingly state attributes of a graphical operation e.g. of being processed influence how units of the graphics pipeline process the data fed to the unit. For example a first graphical operation may comprise a first set of state attributes e.g. state attributes PS VS RO RT and PSC encompassed by an oval whereas a second graphical operation may comprise a second set of state attributes e.g. state attributes PS VS RO RT and PSC encompassed by a rectangle . Thus units of a graphics pipeline may process the first and second graphical operations similarly for shared state attributes e.g. RO and PSC and differently for state attributes that are not shared between the graphical operations e.g. PS VS and RT associated with the first graphical operation and PS VS and RT associated with the second graphical operation .

Since graphical operations with similar state attributes are processed similarly by units of the graphics processing pipeline it is advantageous to group graphical operations sharing common state attributes e.g. into state groupings such that a tweak or modification to one graphical operation of a state grouping may similarly benefit other graphical operations of the same state grouping. For example the first graphical operation may be grouped into a first state grouping with other graphical operations sharing common state attributes . Similarly the second graphical operation may be grouped into a second state grouping with other graphical operations sharing common state attributes . As such the first and second state groupings provide valuable information to the software developer about how the graphics pipeline e.g. of will process the graphical operations.

For example time and money may be wasted when tweaking two graphical operations of the same state grouping given the possibility that a first tweak may reduce the effectiveness of the second tweak e.g. taking into account that the operations may be processed similarly by the graphics processing pipeline . As such it can be more advantageous to tweak a graphical operation from each state grouping e.g. the first and second graphical operations since one tweak is less likely to reduce the effectiveness of another given the processing differences between state groupings. Moreover a tweak to one graphical operation of a state grouping may benefit others of the same state grouping thereby increasing the number of graphical operations benefited by the same number of tweaks. Thus time and money is saved when using state groupings of graphical operations to make performance enhancements to a graphical application.

As shown in the state attributes associated with each state grouping were pulled from selected state attribute categories . For example the first state grouping comprises graphical operations with common state attributes e.g. PS VS and RO where common state attributes fall with selected state attribute categories e.g. pixel shader attributes vertex shader attributes and raster operations attributes . Similarly the second state grouping comprises graphical operations with common state attributes e.g. PS VS and RO where common state attributes also fall with selected state attribute categories e.g. pixel shader attributes vertex shader attributes and raster operations attributes .

Accordingly the number and type of common state attributes that graphical operations of a state grouping will share may be varied by selecting different combinations of state attribute categories where this selection may be manual e.g. by a user or automatic e.g. by a hardware or software component . For example if only the pixel shader and vertex shader attribute categories were selected in another embodiment the first state grouping e.g. into which the first graphical operation may be placed would share at least the state attributes PS and VS whereas the second state grouping e.g. into which the first graphical operation may be placed would share at least the state attributes PS and VS. Alternatively if only the raster operations and pixel shader constant state attribute categories were selected then both the first and second graphical operations would be grouped together in the same state grouping given that each shares a common state attribute e.g. RO and PSC from each of the selected categories. As such state attributes e.g. associated with graphical operations being grouped that fall within non selected state attribute categories may be ignored.

In addition to varying the number and type of shared state attributes for each state grouping the selection of different state attribute categories may alter the number of graphical operations within each state grouping. For example a selection of an additional state attribute category may reduce the number of graphical operations within a given state grouping given that all graphical operations within that state grouping must share an additional state attribute e.g. from the additional selected attribute category . As such the number of graphical operations within a state grouping can be decreased while increasing the similarity of the grouped graphical operations thereby increasing the likelihood that a modification to a graphical operation will similarly benefit other graphical operations of the state grouping.

Moreover by selecting specific categories a developer is able to determine how the graphical operations are similar thereby providing additional insight and control for further enhancement to the graphical application. For example if it is determined that a specific graphics processing pipeline unit is causing processing inefficiency or some other performance drawback state attribute categories related to that unit may be selected to group graphical operations which most heavily influence that unit s performance. The number of selected attribute categories can then be varied to change the number and processing similarity of the grouped graphical operations. As such a minimal number of coding modifications may be performed to the state grouping of graphical operations where the modifications are likely to create a significant performance improvement given the processing similarity of the grouped graphical operations.

Although the preceding discussion refers to a selection of state attribute categories by a software developer it should be appreciated that the selection may be made manually by a user or automatically by a coding algorithm e.g. residing within storage device memory etc. of . It should also be appreciated that the coding algorithm making the selection may be part of an application separate from the graphical application to which performance enhancements and graphical operation modifications are being made.

As shown in the graphical operations are automatically grouped based on common state attributes within a given set of state attribute categories e.g. of . As such although graphical operations within different state groupings may share attributes outside of selected state attribute categories only graphical operations sharing state attributes within the selected categories are grouped. For example the bottom most graphical operations of state groupings and share four of the five state attributes depicted but share only two e.g. PS and VS of the three state attributes within the selected attribute categories. As such the graphical operations are placed into different state groupings.

Although depicts a specific number of graphical operations state groupings and graphical operations per state grouping it should be appreciated that a larger or smaller number may be involved in other embodiments. Additionally it should be appreciated that a larger or smaller number of selected state attribute categories may be used in other embodiments and that a variation in the number of selected state attribute categories can affect the number of state groupings and graphical operations within each of the resulting state groupings.

After selecting a graphics pipeline state a plurality of graphical operations are accessed in step . The accessed graphical operations may comprise those of a frame of a graphical application. Additionally the graphical operations may be stored in a computer system memory e.g. of for access by a GPU e.g. and for use in conjunction with processing a data stream. Each graphical operation may comprise one or more state attributes e.g. for defining a state of a pipeline unit.

As shown in step involves automatically grouping one or more of the accessed graphical operations into a plurality of state groupings based on the state attributes defining the state selected in step . The state groupings may comprise graphical operations with common state attributes where one or more of the common state attributes are those that define the selected state.

After grouping the graphical operations into a plurality of state groupings execution data is displayed in step for at least one state grouping such that a graphical operation having significant execution time may be identified. The execution data may comprise execution times for one or more state groupings where the execution time for a state grouping may be the sum of the execution times for one or more graphical operations making up the state grouping. Alternatively the execution data may comprise pixel quantities for one or more state groupings where the pixel quantity for a state grouping may be the sum of the pixel quantities associated with one or more of the graphical operations making up the state grouping. Additionally the data may be automatically sorted or ranked to uniquely depict the state grouping with the largest execution time and or the largest number of associated pixels. Alternatively the data may be manually sorted by a user based on identifiers representing the state groupings and or execution data corresponding to the state groupings.

As shown in step involves accepting a second input selecting at least one of the plurality of state groupings formed in step . The second input may be either a manual e.g. user input or an input generated automatically by a hardware or software component.

In response to the second input execution data is displayed in step for at least one graphical operation within a state grouping selected in step such that a largest decrease in processing performance may be identified. The execution data may comprise execution times for one or more graphical operations. Alternatively the execution data may comprise pixel quantities associated with one or more graphical operations. Further the execution data may comprise graphical object e.g. primitives etc. quantities associated with one or more graphical operations. Additionally the data may be automatically sorted to uniquely depict the graphical operation with the largest execution time largest number of associated pixels and or the largest number of associated graphical objects. Alternatively the data may be manually sorted by a user based on identifiers representing the graphical operations and or execution data corresponding to the graphical operations.

As shown in step involves accessing and determining state attributes for a first graphical operation based on the state attribute categories selected in step . As such the determined state attributes are those of the graphical operation that fall within selected state attribute categories. For example referring back to the determined state attributes for the first graphical operation can be PS VS and RO since these state attributes fall within selected state attribute categories and are associated with the first graphical operation.

After determining state attributes for a first graphical operation a new state grouping may be created for the first graphical operation and the first graphical operation may be placed into that grouping in step . Thereafter step involves accessing and determining state attributes for a next graphical operation based on the state attribute categories selected in step . As such the determined state attributes are those of the graphical operation that fall within selected state attribute categories. For example referring back to the determined state attributes for the next e.g. second graphical operation can be PS VS and RO since these state attributes fall within selected state attribute categories and are associated with the second graphical operation.

As shown in a determination is made in step as to whether the state attributes for the next graphical operation determined in step match those of an existing state grouping. If the determined state attributes for the next graphical operation are found to match those of an existing state grouping then the next graphical operation may be placed in that state grouping in step . Alternatively if the determined state attributes for the next graphical operation do not match an existing state grouping a new state grouping may be created for the next graphical operation and the next graphical operation may be placed into that grouping in step .

Step involves making a determination as to whether another graphical operation exists which has not yet been grouped. If another graphical operation which has not yet been grouped is found then steps through may be performed again for that graphical operation. If another graphical operation to be grouped is not found then process may terminate.

As shown in selectable elements may comprise graphical elements within a single window. Alternatively elements may comprise one or more windows with graphical elements disposed therein. Alternatively elements may comprise one or more selectable buttons icons or the like. As such the selection of one or more of elements may be initiated by a user interacting with user interface e.g. with an input device etc. . Alternatively the selection may be made automatically by a hardware or software component where the component initiating the selection may be associated with an application generating user interface .

Window depicts a listing of execution data for a plurality of state groupings where each row of the execution data corresponds to a different state grouping. Each state grouping listed in window may contain a plurality of graphical operations with one or more common state attributes where all the graphical operations of all state groupings may comprise a graphical frame in one embodiment. The first column in window lists a number of graphical operations for each state grouping. The second column lists an execution time for the state grouping where the execution time for the state grouping may be the sum of the execution times for one or more graphical operations making up the state grouping. The third column lists a pixel quantity for the state grouping where the pixel quantity for the state grouping may be the sum of the pixel quantities associated with one or more of the graphical operations making up the state grouping.

As shown in user interface comprises sorting elements for manually sorting the execution data within window . A sorting element is provided for each of the respective columns of execution data for sorting the rows of execution data based upon the data with a column corresponding to a selected or activated sorting element. Alternatively the execution data displayed within window may be automatically sorted e.g. to uniquely depict or highlight the state grouping with the largest execution time and or the largest number of associated pixels . The automatic sorting and display of the execution data in window may be in response to a selection of one or more of selectable elements .

Window depicts a listing of execution data for a plurality of graphical operations where each row of the execution data corresponds to a different graphical operation. The graphical operations listed in window may share one or more common state attributes where the graphical operations may form a state grouping e.g. one listed and selected in window . The first column in window lists graphical operation numbers to serve as identifiers for each graphical operation for which execution data is listed in window . The second column lists a graphical object e.g. primitives etc. quantity for each graphical operation. The third column lists an execution time for each graphical operation. The fourth column lists a pixel quantity for each graphical operation.

As shown in user interface comprises sorting elements for manually sorting the execution data within window . A sorting element is provided for each of the respective columns of execution data for sorting the rows of execution data based upon the data with a column corresponding to a selected or activated sorting element. Alternatively the execution data displayed within window may be automatically sorted e.g. to uniquely depict or highlight the graphical operation with the largest number of graphical objects the largest execution time and or the largest number of associated pixels . The automatic sorting and display of the execution data in window may be in response to a selection of one or more of selectable elements . Alternatively the execution data displayed within window may be automatically sorted in response to a selection of one or more state grouping depicted within window .

Accordingly user interface provides a convenient and efficient tool for grouping graphical operations into state groupings which share one or more common state attributes where such a grouping enhances graphical application performance analysis. Additionally user interface enables the regrouping of graphical operations based upon a different combination of selected state attribute categories thereby enabling the variation of the number and type of shared state attributes for each state grouping as well as the number and processing similarity of graphical operations within each state grouping. Further user interface displays execution data for state groupings and graphical operations within a state grouping thereby enabling the identification of state groupings and or graphical operations causing significant performance decreases in the graphical application.

As shown in in addition to organizing and displaying state groupings of graphical operations with common state attributes user interface provides several ways to identify one or more graphical operations such that corresponding performance information may be displayed e.g. in performance information display area . In other embodiments multiple display areas may be used where each area may display different performance information. The performance information e.g. as displayed in corresponding to one or more identified graphical operations may provide insight into how one or more units of a graphics processing pipeline e.g. of are processing a data steam e.g. a graphical application fed through the graphics pipeline. Additionally a display of a portion of the identified graphical operations is provided e.g. in window such that additional insight into the data stream may be gained. As such user interface provides various types and forms of information about a data stream fed through a graphics processing pipeline thereby enabling analysis and modification of the data stream to increase processing performance.

As shown in one or more graphical operations may be identified by selecting an identifier in window corresponding to a graphical operation state grouping. Alternatively a selection of an identifier in window corresponding to a graphical operation of a state grouping may identify the selected graphical operation. A graphical operation may also be identified by moving slider along slider path to cycle through a grouping e.g. a graphical frame of graphical operations. Slider may be moved by activating e.g. placing a mouse cursor over slider and depressing a mouse button the slider and dragging it e.g. with a movement of the mouse it along slider path . Additionally a graphical operation may be identified by selecting either the step forward button or the step backward button where the buttons may cause the identification of a graphical operation at a predetermined offset from a currently identified frame within a graphical operation ordering e.g. as defined by a graphical frame .

A graphical operation may also be automatically identified in response to a selection or activation of one or more elements of user interface . For example the selection of one or more of selectable elements may cause a state grouping e.g. in window and or graphical operation within the state grouping e.g. in window to be automatically identified e.g. to uniquely depict a grouping and or graphical operation causing a largest decrease in processing performance . Alternatively an identification of a state grouping within window may cause one or more graphical operations within the identified state grouping to be identified e.g. in window .

As shown in the display of performance data within display area may be modified by drop down menu . In response to a selection of a menu item of menu a different depiction of the performance data corresponding to the selected menu item may be displayed. A portion of each depiction e.g. as shown in may present different performance data or alternatively depict similar performance data in a different form e.g. bar graph line graph etc. .

Export button provides the ability to export execution and performance information for viewing in alternative forms. The exported data may form text and or graphical images. As such another application and or user interface may be used to access and present the exported data.

Advanced button enables the presentation of additional information e.g. in a separate pop up window relating to the processing of the data stream by various pipeline units of the graphics processing pipeline. The information may be used to gain additional insight into the processing of the data stream such that modifications can be made to state attributes defining the state of one or more pipeline units.

In addition to presenting execution and performance data for a given graphical operation and or state grouping of graphical operations user interface also provides a graphical rendering in window of the one or more identified graphical operations. Elements and or windows of user interface may overlay portions of window thereby obscuring one or more portions of the underlying rendering. Selection of selectable element may hide a predetermined number or amount of the windows and or elements to enable additional viewing area for the rendering. Alternatively the rendering may be displayed in a separate window and or element of user interface .

As shown in the rendering depicted in window may be modified by drop down menu . In response to a selection of a menu item of menu a different depiction of rendering information corresponding to the selected menu item may be displayed. For example data within the frame buffer corresponding to one or more identified graphical operations may be displayed within window . Alternatively rendering information corresponding to one or more identified graphical operations may be displayed where the rendering information comprises one or more rendered objects in a wireframe view. And in other embodiments other selections from menu may enable the display of other characteristics e.g. depth complexity alpha channel for the frame buffer etc. of rendered objects corresponding to one or more identified graphical operations.

As shown in bottleneck analysis for a plurality of graphical operations is expressed in units of time. Information subset represents an execution duration for a plurality of graphical operations where the plurality of graphical operations may comprise a graphical frame a state grouping of graphical operations with similar state attributes and or an identified graphical operation e.g. chosen from the frame and or state grouping . For example bar represents an execution duration for graphical operations of an entire frame whereas bar represents an execution duration for an identified graphical operation e.g. identified using portions of user interface of . Additionally bar represents an execution duration for a state grouping of graphical operations where the state grouping may include the identified graphical operation to which bar corresponds.

As shown in information subset represents data flow impedance information expressed in units of time for specific units e.g. the vertex assembly unit vertex shader unit pixel shader unit texture unit and raster operations unit of the graphics processing pipeline. For example bar represents a duration for which the ROP unit e.g. of impeded the flow of data through the graphics processing pipeline e.g. of when executing a plurality of graphical operations comprising a graphical frame. Bar represents a duration for which the ROP unit impeded the flow of data through the graphics processing pipeline when executing a plurality of graphical operations comprising an identified graphical operation e.g. identified using portions of user interface of . Additionally bar represents a duration for which the ROP unit impeded the flow of data through the graphics processing pipeline when executing a plurality of graphical operations comprising a state grouping of graphical operations where the state grouping may include the identified graphical operation to which bar corresponds. And as shown in information subset may include similar data flow impedance information for other units of the graphics pipeline e.g. vertex assembly unit vertex shader unit pixel shader unit texture unit etc. .

In one embodiment data flow impedance duration for a specific pipeline unit may be calculated in accordance with the following equation Accordingly the data flow impedance duration T is the sum of Tand Tminus T. Trepresents a time period in which the specific pipeline unit is active e.g. operating on data etc. whereas Trepresents a time period in which the pipeline unit is full. Trepresents a time period when the specific pipeline unit is paused and unable to transfer data due to an inability of another pipeline unit to receive data. Additionally T T Tand Tmay be gathered and computed as described in U.S. patent application Ser. No. 11 497 863 filed Aug. 1 2006 entitled A METHOD AND SYSTEM FOR CALCULATING PERFORMANCE PARAMETERS FOR A PROCESSOR naming Raul Aguaviva Jeffrey Kiel and Sebastien Domine as inventors assigned to the assignee of the present invention which is hereby incorporated by reference.

Although specific subsets of information are shown in it should be appreciated that the information may be alternatively presented in other embodiments. For example a larger or smaller number of execution duration and or data flow impedance bars may be included for each pipeline unit in other embodiments. Additionally information for a larger or smaller number of pipeline units may be presented in other embodiments. Moreover although information is presented as a bar graph it should be appreciated that the information may be alternatively presented e.g. using a line graph pie chart scatter plot etc. in other embodiments.

As shown in data flow impedance information is expressed in units of percentage e.g. bottleneck percentage for a plurality of graphical operations where a bottleneck percentage for a specific pipeline unit may be the data flow impedance duration for the specific pipeline unit divided by an execution duration for the plurality of graphical operations e.g. as expressed by information subset of . The plurality of graphical operations may comprise a graphical frame a state grouping of graphical operations with similar state attributes and or an identified graphical operation e.g. identified using portions of user interface of . The identified graphical operation may be one of the graphical operations comprising the frame and or state grouping.

As shown in the solid bars e.g. represent bottleneck percentages for a first pipeline unit over a plurality of graphical operations e.g. graphical operation graphical operation and graphical operation . The dashed bars e.g. represent bottleneck percentages for a second pipeline unit over a plurality of graphical operations e.g. graphical operation graphical operation and graphical operation . As such shows simultaneous data flow impedance information in the form of bottleneck percentage for multiple pipeline units for the execution of a plurality of graphical operations.

In one embodiment bottleneck percentage for a specific pipeline unit may be calculated in accordance with the following equation 

Although presents data flow impedance information for only two pipeline units it should be appreciated that a larger or smaller number of pipeline units may be presented in other embodiments. Additionally although presents data flow impedance information for only three graphical operations it should be appreciated that a larger or smaller number of graphical operations may be presented in other embodiments.

As shown in utilization analysis for a plurality of graphical operations is expressed in units of time. Information subset represents an execution duration for a plurality of graphical operations as explained above with respect to where the plurality of graphical operations may comprise a graphical frame e.g. as represented by bar a state grouping of graphical operations with similar state attributes e.g. as represented by bar and or an identified graphical operation e.g. as represented by bar .

As shown in information subset represents utilization information expressed in units of time for specific units e.g. the vertex assembly unit vertex shader unit pixel shader unit texture unit and raster operations unit of the graphics processing pipeline. For example bar represents a duration for which the ROP unit e.g. of is utilized when executing a plurality of graphical operations comprising a graphical frame. Bar represents a duration for which the ROP unit is utilized when executing a plurality of graphical operations comprising an identified graphical operation e.g. identified using portions of user interface of . Additionally bar represents a duration for which the ROP unit is utilized when executing a plurality of graphical operations comprising a state grouping of graphical operations where the state grouping may include the identified graphical operation to which bar corresponds. And as shown in information subset may include similar data flow impedance information for other units of the graphics pipeline e.g. vertex assembly unit vertex shader unit pixel shader unit texture unit etc. .

Although specific subsets of information are shown in it should be appreciated that the information may be alternatively presented in other embodiments. For example a larger or smaller number of execution duration and or utilization bars may be included for each pipeline unit in other embodiments. Additionally information for a larger or smaller number of pipeline units may be presented in other embodiments. Moreover although information is presented as a bar graph it should be appreciated that the information may be alternatively presented e.g. using a line graph pie chart scatter plot etc. in other embodiments.

As shown in data flow impedance information is expressed in units of percentage e.g. utilization percentage for a plurality of graphical operations where a utilization percentage for a specific pipeline unit may be the utilization duration for the specific pipeline unit divided by an execution duration for the plurality of graphical operations e.g. as expressed by information subset of . The plurality of graphical operations may comprise a graphical frame a state grouping of graphical operations with similar state attributes and or an identified graphical operation e.g. identified using portions of user interface of . The identified graphical operation may be one of the graphical operations comprising the frame and or state grouping.

As shown in the solid bars e.g. represent utilization percentages for a first pipeline unit over a plurality of graphical operations e.g. graphical operation graphical operation and graphical operation . The dashed bars e.g. represent utilization percentages for a second pipeline unit over a plurality of graphical operations e.g. graphical operation graphical operation and graphical operation . As such shows simultaneous utilization information in the form of utilization percentage for multiple pipeline units for the execution of a plurality of graphical operations.

In one embodiment utilization percentage for a specific pipeline unit may be calculated in accordance with the following equation 

Although presents utilization information for only two pipeline units it should be appreciated that a larger or smaller number of pipeline units may be presented in other embodiments. Additionally although presents utilization information for only three graphical operations it should be appreciated that a larger or smaller number of graphical operations may be presented in other embodiments.

Step involves accessing performance data for the plurality of graphical operations. The performance data may comprise data flow impedance information e.g. as described with respect to . Alternatively the performance data may comprise utilization information e.g. as described with respect to . In other embodiments the performance data may comprise execution duration information e.g. as described with respect to pixel quantity information e.g. as described with respect to and or graphical object quantity information e.g. as described with respect to .

After accessing the performance data for the plurality of graphical operations the performance data may be displayed in step to enable graphics processing analysis of an application for which the performance data was obtained. The performance data may be displayed in one or more display areas e.g. of of a user interface e.g. of . In one embodiment the performance data may be displayed as shown in . In other embodiments the performance data may be alternatively displayed by combining different types of data to display and or presenting the data in a different form e.g. using other graphs charts etc. .

