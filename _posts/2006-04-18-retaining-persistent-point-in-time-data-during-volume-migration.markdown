---

title: Retaining persistent point in time data during volume migration
abstract: Provided is a method and system for performing volume migrations while retaining persistent point in time data of the migrated volume. Specifically, by using a collective persistent point in time data map that describes a collection of persistent point in time data of a volume to be migrated, the collective persistent point in time data map and volume data can be migrated during a quiesced period of user activity. Then, during a non-quiesced period of user activity, the persistent point in time data can be transferred to the location of the migrated volume in real-time.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08005793&OS=08005793&RS=08005793
owner: NetApp, Inc.
number: 08005793
owner_city: Sunnyvale
owner_country: US
publication_date: 20060418
---
Embodiments of the present invention relate to storage systems and in particular to transferring volumes between storage systems.

A storage system can retain persistent point in time data to enable the quick recovery of data after data has perhaps been corrupted lost or altered. For example a user accessing a document file may alter the document save the document file and later have remorse that the document should not have been altered. To recover the unaltered document the user may access or be given access to persistent point in time data of the unaltered document by a storage system administrator. Exemplary persistent point in time data is stored in a Snapshot available in technology offered by Network Appliance Inc. of Sunnyvale Calif.

When transferring logically organized data between two storage systems such as data logically organized in volumes persistent point in time data and current versions of the data can be transferred between the storage systems. However during the transfer of volumes between the storage systems transferring all persistent point in time data may increase the time to perform the data migration thus causing one or both of the storage systems to be unavailable for user access. Further data migration of volumes between multiple storage systems may cause more than two systems to be unavailable.

A solution to increase the availability of the storage systems during data migration is to transfer a portion of the persistent point in time data thus reducing the time users have no access to the storage systems. However this is not an optimal solution because persistent point in time data that are not migrated may be needed. For example if the migrated current versions of the data and the migrated persistent point in time data do not contain the unaltered data sought by a user then the user may become dissatisfied.

Accordingly what is needed is a method and system to provide high availability of storage systems during data migration while retaining all persistent point in time data.

Embodiments of the present invention provide a method and a system for retaining all persistent point in time data during volume migration. In one exemplary embodiment a storage system can organize data in logical constructs called volumes. Further the volumes are stored on a collection of disks that is accessible by the storage system. Associated with each volume is persistent point in time PPT data which provides read only access to data organized by the volume. Thus data stored on the disks can be perceived as being a collection of current data and PPT data. Such data includes for example a document written by a user to the disks.

During the operation of a group of storage systems such as storage systems organized as a clustered computing environment it may become necessary to transfer a volume from one storage system to another storage system or to transfer a volume within one storage system. Such migrations of volumes between storage systems can be performed reliably and with minimal storage system unavailability with the use of a collective PPT data map which is a logical organization of all the PPT data associated with a volume. By transmitting a volume and the collective PPT data map from a source storage system to a destination storage system user access to data is minimally impacted.

For example in an embodiment of a method for transferring data between a first system and a second system the method includes logically comparing a plurality of PPT data maps of the first system and identifying a collective persistent point in time data map. Further the method includes transmitting the collective persistent point in time data map from the first system to the second system such that the second system implements a policy. The method also permits the transfer of control from the first system to the second system such that data requests to access data stored on the first system are handled by the second system.

In an exemplary embodiment of a clustered system the clustered system includes a first node that is configured to store a volume to be migrated. Further the clustered system includes a second node that is configured to store the migrated volume such that the second node includes a collective persistent point in time data map for the migration of persistent point in time data from the first node to the second node.

Alternatively in an embodiment of a system for retaining data during a volume migration the system includes a memory module that is configured to store a collective persistent point in time data map. The system also includes means for preventing a block allocation on a target storage system that would conflict with a block transfer from a source storage system.

Further in an embodiment of a computer readable media containing instructions for execution on a processor for the practice of retaining persistent point in time data during a volume migration from a source volume to a target volume the embodiment includes determining a collective persistent point in time data map. The embodiment also implements a policy while referencing the collective persistent point in time data map and permits access to data of the target volume while transferring persistent point in time data from the source volume to the target volume.

Other aspects of the invention will become apparent from the following detailed description taken in conjunction with the accompanying drawings which illustrates by way of example the principles of the invention.

A storage system can organize data in logical constructs called volumes. Further the volumes are stored on a collection of disks that is accessible by the storage system. Associated with each volume is persistent point in time PPT data which provides read only access to data organized by the volume. Thus data stored on the disks can be perceived as being a collection of data and PPT data. Data includes for example a document written by a user to the disks. During the operation of a group of storage systems such as storage systems organized as a clustered computing environment it may become necessary to transfer a volume from one storage system to another storage system. Such migrations of volumes between storage systems can be performed reliably and with minimal storage system unavailability with the use of a collective PPT data map which is a logical organization of all the PPT data associated with a volume. By transmitting a volume and the collective PPT data map from a source storage system to a destination storage system user access to data is minimally impacted. Further details describing the transfer of PPT data which retains PPT data instead of discarding PPT data during volume migration are hereinafter described.

In accordance with an embodiment of the invention is a diagram illustrating a cluster having a plurality of nodes capable of migrating volumes. The nodes comprise various functional components that cooperate to provide a distributed storage system architecture. To that end each node is generally organized as a network element N blade or N module and a disk element D blade or N module . The N module includes functionality that enables the node to connect to clients over a connection system while each D module connects to one or more storage devices such as disks or a disk array . The nodes are interconnected by a cluster switching fabric which in the illustrative embodiment may be embodied as a Gigabit Ethernet switch. It should be noted that while there is shown an equal number of N and D modules in the illustrative cluster there may be differing numbers of N and or D modules in accordance with various embodiments of the present invention. For example there may be a plurality of N modules and or D modules interconnected in a configuration of a cluster that does not reflect a one to one correspondence between the N and D modules. As such the description of a node comprising one N module and one D module should be taken as illustrative only.

The clients may be general purpose computers configured to interact with the node in accordance with a client server model of information delivery. For example interaction between the clients and nodes can enable the provision of storage services. That is each client may request the services of the node and the node may return the results of the services requested by the client by exchanging packets over the connection system which may be a wire based or wireless communication system. The client may issue packets including file based access protocols such as the Common Internet File System CIFS protocol or Network File System NFS protocol over the Transmission Control Protocol Internet Protocol TCP IP when accessing information in the form of files and directories. Alternatively the client may issue packets including block based access protocols such as the Small Computer Systems Interface SCSI protocol encapsulated over TCP iSCSI and SCSI encapsulated over Fibre Channel FCP when accessing information in the form of blocks.

Each node is illustratively embodied as a dual processor storage system executing a storage operating system that preferably implements a high level module such as a file system to logically organize the information as a hierarchical structure of named directories files and special types of files called virtual disks hereinafter generally blocks on the disks. However it will be apparent to those of ordinary skill in the art that the node may alternatively comprise a single or more than two processor system. Illustratively one processor can execute the functions of the N module on the node while the other processor can execute the functions of the D module . It should also be appreciated that processors may include multiple processing cores thus improving the processing speed of the processors

The memory illustratively comprises storage locations that are addressable by the processors and adapters for storing software program code and data structures associated with the present invention. The processor and adapters may in turn comprise processing elements and or logic circuitry configured to execute the software code and manipulate the data structures. The storage operating system portions of which is typically resident in memory and executed by the processing elements functionally organizes the node by inter alia invoking storage operations in support of the storage service implemented by the node . It will be apparent to those skilled in the art that other processing and memory means including various computer readable media may be used for storing and executing program instructions pertaining to the invention described herein.

The network adapter comprises a plurality of ports adapted to couple the node to one or more clients over point to point links wide area networks virtual private networks implemented over a public network Internet or a shared local area network. The network adapter thus may comprise the mechanical electrical and signaling circuitry needed to connect the node to the network. Illustratively the connection system may be embodied as an Ethernet network or a Fibre Channel FC network. Each client may communicate with the node over the connection system by exchanging discrete frames or packets of data according to pre defined protocols such as TCP IP.

The storage adapter cooperates with the storage operating system executing on the node to access information requested by the clients . The information may be stored on any type of attached array of writable storage device media such as video tape optical DVD magnetic tape bubble memory electronic random access memory micro electro mechanical and any other similar media adapted to store information including data and parity information. However as illustratively described herein the information is preferably stored on the disks of the disk array . The storage adapter comprises a plurality of ports having input output I O interface circuitry that couples to the disks over an I O interconnect arrangement such as a conventional high performance FC link topology.

In accordance with an exemplary embodiment of the present invention storage of information on each disk array is preferably implemented as one or more storage volumes that comprise a collection of physical storage disks cooperating to define an overall logical arrangement of volume block number vbn space on the volume s . Each logical volume is generally although not necessarily associated with its own file system. The disks within a logical volume file system are typically organized as one or more groups wherein each group may be operated as a Redundant Array of Independent or Inexpensive Disks RAID . Most RAID implementations such as a RAID 4 level implementation enhance the reliability integrity of data storage through the redundant writing of data stripes across a given number of physical disks in the RAID group and the appropriate storing of parity information with respect to the striped data. An illustrative example of a RAID implementation is a RAID 4 level implementation although it should be understood that other types and levels of RAID implementations may be used in accordance with the inventive principles described herein.

To facilitate access to the disks the storage operating system of implements a write anywhere file system that cooperates with one or more virtualization modules to virtualize the storage space provided by the disks . A file system logically organizes the information as a hierarchical structure of named directories and files on the disks. Each on disk file may be implemented as set of disk blocks configured to store information such as data whereas the directory may be implemented as a specially formatted file in which names and links to other files and directories are stored. The virtualization module s allow the file system to further logically organize information as a hierarchical structure of blocks on the disks that are exported as named logical unit numbers luns .

In the illustrative embodiment the storage operating system is preferably the NetApp Data ONTAP operating system available from Network Appliance Inc. of Sunnyvale Calif. that implements a Write Anywhere File Layout WAFL file system. However it is expressly contemplated that any appropriate storage operating system may be enhanced for use in accordance with the inventive principles described herein. As such the storage operating system should be taken broadly to refer to any storage operating system that is otherwise adaptable to the teachings of this invention.

In addition the storage operating system includes a series of software layers organized to form a storage server that provides data paths for accessing information stored on the disks of the node . To that end the storage server includes a file system module for managing volumes a RAID system module and a disk driver system module . The RAID system manages the storage and retrieval of information to and from the volumes disks in accordance with I O operations while the disk driver system implements a disk access protocol such as e.g. the SCSI protocol. A volume includes zero or more persistent point in time PPT data . The PPT data are read only data that are point in time references to the volume s data e.g. an hour ago week ago month age etc. . PPT data cannot be modified and can be deleted thus providing a snapshot or a history of data.

It should be appreciated that in some exemplary embodiments the snapshot is based on technology offered by Network Appliance Inc. of Sunnyvale Calif. Alternative embodiments may implement a logical volume manager that use copy on write methods that permit the creation of persistent point in time data of block accessible devices such as disks. Such technology regarding copy on write methods are contemplated by exemplary embodiments of the present invention for which the details are well known to those of ordinary skill in the art.

When migrating volumes and PPT data between nodes the transfer of multiple PPT data can cause node unavailability during the migration. However by utilizing a PPT data map that collectively describes multiple PPT data during the volume migration node unavailability can be minimized. Further details regarding the transfer of volumes the PPT data map and PPT data are described with reference to .

The file system implements a virtualization system of the storage operating system through the interaction with one or more virtualization modules illustratively embodied as e.g. a virtual disk vdisk module not shown and a SCSI target module . The vdisk module enables access by administrative interfaces such as a user interface of a management framework not shown in response to a user system administrator issuing commands to the node . The SCSI target module is generally disposed between the FC and iSCSI drivers and the file system to provide a translation layer of the virtualization system between the block lun space and the file system space where luns are represented as blocks.

The file system is illustratively a message based system that provides logical volume management capabilities for use in access to the information stored on the storage devices such as disks . That is in addition to providing file system semantics the file system provides functions normally associated with a volume manager. These functions include i aggregation of the disks ii aggregation of storage bandwidth of the disks and iii reliability guarantees such as mirroring and or parity RAID . The file system illustratively implements the WAFL file system hereinafter generally the write anywhere file system having an on disk format representation that is block based using e.g. 4 kilobyte kB blocks and using index nodes inodes to identify files and file attributes such as creation time access permissions size and block location . The file system uses files to store meta data describing the layout of its file system these meta data files include among others an inode file. A file handle i.e. an identifier that includes an inode number is used to retrieve an inode from disk.

Broadly stated all inodes of the write anywhere file system are organized into the inode file. A file system fs info block specifies the layout of information in the file system and includes an inode of a file that includes all other inodes of the file system. Each logical volume has an fsinfo block that is preferably stored at a fixed location within e.g. a RAID group. The inode of the inode file may directly reference point to data blocks of the inode file or may reference indirect blocks of the inode file that in turn reference data blocks of the inode file. Within each data block of the inode file are embedded inodes each of which may reference indirect blocks that in turn reference data blocks of a file.

Operationally a request from the client is forwarded as a packet over the connection system and onto the node where it is received at the network adapter . A network driver of layer or layer processes the packet and if appropriate passes it on to a network protocol and file access layer for additional processing prior to forwarding to the write anywhere file system . Here the file system generates operations to load retrieve the requested data from disk if it is not resident in core i.e. in memory . If the information is not in memory the file system indexes into the inode file using the inode number to access an appropriate entry and retrieve a logical vbn. The file system then passes a message structure including the logical vbn to the RAID system the logical vbn is mapped to a disk identifier and disk block number disk dbn and sent to an appropriate driver e.g. SCSI of the disk driver system . The disk driver accesses the dbn from the specified disk and loads the requested data block s in memory for processing by the node. Upon completion of the request the node and operating system returns a reply to the client over the connection system .

It should be noted that the software path through the storage operating system layers described above needed to perform data storage access for the client request received at the node may alternatively be implemented in hardware. That is in an alternate embodiment of the invention a storage access request data path may be implemented as logic circuitry embodied within a field programmable gate array FPGA or an application specific integrated circuit ASIC . This type of hardware implementation increases the performance of the storage service provided by node in response to a request issued by the client . Moreover in another alternate embodiment of the invention the processing elements of adapters may be configured to offload some or all of the packet processing and storage access operations respectively from processor to thereby increase the performance of the storage service provided by the node . It is expressly contemplated that the various processes architectures and procedures described herein can be implemented in hardware firmware or software.

As used herein the term storage operating system generally refers to the computer executable code operable on a computer to perform a storage function that manages data access and may in the case of a node implement data access semantics of a general purpose operating system. The storage operating system can also be implemented as a microkernel an application program operating over a general purpose operating system such as UNIX or Windows NT or as a general purpose operating system with configurable functionality which is configured for storage applications as described herein.

In addition it will be understood to those skilled in the art that the invention described herein may apply to any type of special purpose e.g. file server filer or storage serving appliance or general purpose computer including a standalone computer or portion thereof embodied as or including a storage system. Moreover the teachings of this invention can be adapted to a variety of storage system architectures including but not limited to a network attached storage environment a storage area network and disk assembly directly attached to a client or host computer. The term storage system should therefore be taken broadly to include such arrangements in addition to any subsystems configured to perform a storage function and associated with other equipment or systems. It should be noted that while this description is written in terms of a write any where file system the teachings of the present invention may be utilized with any suitable file system including a write in place file system.

In an illustrative embodiment the storage server is embodied as D module of the storage operating system to service one or more volumes of the disk array . In addition the multi protocol engine is embodied as N module to i perform protocol termination with respect to a client issuing incoming data access request packets over the connection system as well as ii redirect those data access requests to any storage server of the cluster . Moreover the N module and D module cooperate to provide a highly scalable distributed storage system architecture of the cluster . To that end each module includes a cluster fabric CF interface module adapted to implement intra cluster communication among the modules including D module to D module communication for data container striping operations.

The protocol layers e.g. the NFS CIFS layers and the iSCSI FC layers of the N module function as protocol servers that translate file based and block based data access requests from clients into CF protocol messages used for communication with the D module . That is the N module servers convert the incoming data access requests into file system primitive operations commands that are embedded within CF messages by the CF interface module for transmission to the D modules of the cluster . Notably the CF interface modules cooperate to provide a single file system image across all D modules in the cluster . Thus any network port of an N module that receives a client request can access any data container within the single file system image located on any D module of the cluster .

Further to the illustrative embodiment the N module and D module are implemented as separately scheduled processes of storage operating system however in an alternate embodiment the modules may be implemented as pieces of code within a single operating system process. Communication between an N module and D module is thus illustratively effected through the use of message passing between the modules although in the case of remote communication between an N module and D module of different nodes such message passing occurs over the cluster switching fabric . A known message passing mechanism provided by the storage operating system to transfer information between modules processes is the Inter Process Communication IPC mechanism. The protocol used with the IPC mechanism is illustratively a generic file and or block based agnostic CF protocol that comprises a collection of methods functions constituting a CF application programming interface API . Examples of such an agnostic protocol are the SpinFS and SpinNP protocols available from Network Appliance Inc.

In an exemplary embodiment luns blocks directories qtrees and files may be contained within flexible volumes such as dual vbn flexible volumes that in turn are contained within the aggregate . The aggregate is illustratively layered on top of the RAID system which is represented by at least one RAID plex depending upon whether the storage configuration is mirrored wherein each plex comprises at least one RAID group . Each RAID group further comprises a plurality of disks e.g. one or more data D disks and at least one P parity disk. Whereas the aggregate is analogous to a physical volume of a conventional storage system a flexible volume is analogous to a file within that physical volume. That is the aggregate may include one or more files wherein each file contains a flexible volume and wherein the sum of the storage space consumed by the flexible volumes is physically smaller than or equal to the size of the overall physical volume.

A file stored as blocks on the disks is readable writeable while the PPT data of the file is read only. Within a volume the PPT data and the data of the file share the same blocks i.e. if examining the on disk representation inside a flexible volume then the metadata of PPT data and the data would point to the same block numbers for storing the data for the file as further illustrated in . In order to manipulate one of those blocks e.g. a write operation the file system allocates a new block copies the contents from the old block to the new block modifies the new block and adjusts the file to use the new block for data access.

However when the file system writes to a block there is an allocation of a block from somewhere else in the flexible volume. Thus when a block containing data is modified a new target block is allocated. Repeated block modifications therefore cause multiple new block modifications. To track the modification of data and the creation of PPT data of the data the file system can use a volume allocation map and PPT data map respectively which are bitmaps representing one bit per block in the flexible volume. For example a one in the bitmap indicates whether the bitmap is using a block in any given time. It should be appreciated that in alternative embodiments a zero can indicate a block in use.

Thus if a file comprises ten blocks then the bitmap of the PPT data would illustrate ten bits set to indicate 10 blocks are in use. It should be appreciated that multiple bitmaps exist for multiple PPT data . Thus the multiple bitmap contents indicate which blocks are in use. In an exemplary embodiment of the invention the PPT data maps are called snapmaps. Blocks are freed and available for allocation as indicated by the bitmaps when the data in the blocks are deleted.

A file system layout is provided that apportions an underlying physical volume into one or more virtual volumes or flexible volume of a storage system such as node . In an exemplary embodiment the underlying physical volume is an aggregate comprising one or more groups of disks such as RAID groups of the node . The aggregate has its own physical volume block number pvbn space and maintains meta data such as block allocation structures within that pvbn space. Each flexible volume has its own virtual volume block number vvbn space and maintains meta data such as block allocation structures within that vvbn space. Each flexible volume is a file system that is associated with a container file the container file is a file in the aggregate that contains all blocks used by the flexible volume. Moreover each flexible volume comprises data blocks and indirect blocks that contain block pointers that point at either other indirect blocks or data blocks.

In one embodiment pvbns are used as block pointers within buffer trees of files such as file stored in a flexible volume. This hybrid flexible volume embodiment involves the insertion of only the pvbn in the parent indirect block e.g. inode or indirect block . On a read path of a logical volume a logical volume vol info block has one or more pointers that reference one or more fsinfo blocks each of which in turn points to an inode file and its corresponding inode buffer tree. The read path on a flexible volume is generally the same following pvbns instead of vvbns to find appropriate locations of blocks in this context the read path and corresponding read performance of a flexible volume is substantially similar to that of a physical volume. Translation from pvbn to disk dbn occurs at the file system RAID system boundary of the storage operating system .

In an illustrative dual vbn hybrid flexible volume embodiment both a pvbn and its corresponding vvbn are inserted in the parent indirect blocks in the buffer tree of a file. That is the pvbn and vvbn are stored as a pair for each block pointer in most buffer tree structures that have pointers to other blocks e.g. level L indirect blocks inode file level L blocks. For example in a root top level inode such as an embedded inode references indirect e.g. level blocks . Note that there may be additional levels of indirect blocks e.g. level level depending upon the size of the file. The indirect blocks and inode contain pvbn vvbn pointer pair structures that ultimately reference data blocks used to store the actual data of the file.

The pvbns reference locations on disks of the aggregate whereas the vvbns reference locations within files of the flexible volume. The use of pvbns as block pointers in the indirect blocks provides efficiencies in the read paths while the use of vvbn block pointers provides efficient access to required meta data. That is when freeing a block of a file the parent indirect block in the file contains readily available vvbn block pointers which avoids the latency associated with accessing an owner map to perform pvbn to vvbn translations yet on the read path the pvbn is available.

As previously described above the PPT data map performs a similar function of identifying blocks in use or not in use. Grouping the PPT data maps together produces a collective PPT data map . For example the collective PPT data map can be created by performing a logical operation between the existing PPT data maps . An exemplary logical operation is a logical OR operation but it should be appreciated that any suitable logical operation for creating the collective PPT data map is possible as long as the collective PPT data map represents the blocks in use and not in use in the PPT data maps . When migrating the volume from a source node to a destination node the collective PPT data map is transferred along with the volume s current data blocks without the PPT data maps .

In accordance with an embodiment of the invention is a diagram illustrating a collective PPT data map of persistent point in time data. Specifically a D module of a source node may include multiple volumes such as volume A and volume . It should be appreciated that any number of volumes can be managed by the D module in exemplary embodiments. By performing a volume migration of volume A from the source node to the destination node with the collective PPT data map the high latency costs associated with transferring multiple PPT data and PPT data maps individually can be avoided. For example volume B of the D module in the destination node can be the migrated volume A such that as soon as volume B is created users can begin accessing data organized by volume B without waiting for the transfer of all PPT data of volume A from the source node to the destination node.

When performing a volume migration a system administrator or a user with administrative privileges may determine that the source node disks are over utilized or that the node may have inadequate memory or network capacity by examining statistics related to the performance of the source node. It should be appreciated that well known methods of gathering such statistics are possible such as using a network analyzer software application and the like.

Once the system administrator decides to transfer a volume such as volume A from one node to another the system administrator can use a command line interface CLI and or a web based graphical user interface GUI to initiate the volume migration operation. In an alternative exemplary embodiment an automated system is capable of making a decision to transfer a volume. For example a policy based management system may automatically transfer volumes when a certain condition exists such as disk space over utilization. After initiating the volume migration operation a volume can be viewed as a set of read write r w blocks and a list of PPT data such that each PPT data contains read only files.

In an exemplary embodiment the r w portion of volume A is selected by the file system and transmitted to the destination node if the r w portion is not being modified. Specifically this can be performed by examining the volume allocation map to identify which blocks of the r w volume are in use. The blocks in use are transferred from the source node to the destination node via for example the cluster switching fabric to populate volume B. When using flexible volumes it should be appreciated that the blocks transferred from the source node to the destination node will have the same logical identifier in the metadata such as described in a buffer tree but the actual physical location of the blocks used on the disks between the two nodes can differ. Alternatively when using traditional volumes an extra step can include mapping the blocks from the source node to the destination node such that identical physical blocks can be used.

For example volume A may use four blocks of current data not shown such as block B block B block B and block B. After the initiation of the migration of volume A from the source node to the destination node a persistent point in time image includes information that block B block B block B and block B are in use. The four blocks are transferred from the source node to the destination node such that volume B is populated. However access to volume A continues such that by the end of the block transfers to volume B block B may no longer contain current data. Instead the current data may reside in block B.

At this point in time access to volume A is suspended and the current persistent point in time data is compared with respect to block B block B block B and block B. This examination leads to the discovery that block B contains current data to be transferred. Accordingly block B is transferred from volume A to volume B and the identity of the destination node is replaced with the identity of the source node. It should be appreciated that access to the source node is no longer permitted after the identity transfer in order to prevent network congestion data inconsistencies and the like. In other exemplary embodiments as described in relation to the identities of the nodes can be switched. Thereafter the suspension is released and access to volume B begins.

While access is permitted to volume B blocks identified by the collective persistent point in time data map are not used to allocate blocks in volume B. For example block B and block B of volume A may be used by old persistent point in time data. Since block B and block B were not previously transferred the blocks are migrated after volume B becomes the live volume for permitted access. In embodiments of the present inventions without the collective persistent point in time data map block B and block B may have been allocated during write operations. However since the collective persistent point in time data map behaves as a placeholder for the blocks of volume A that were not previously migrated block B and block B are prevented from being erroneously allocated on volume B during write operations. Thus block B and block B can be safely transferred from volume A to volume B thus preventing data inconsistencies.

Then in operation the storage operating system of the target node creates a target volume. Specifically volume creation on the target node is the same process as volume creation on the source node. For example the storage operating system establishes a volume allocation map and other metadata structures such as described with the buffer trees in reference to . Thereafter in operation the storage operating system of the source node may create more PPT data. If there are more PPT data then the next operation continues to . Otherwise the next operation is to block access to the source and target volumes.

In operation the source volume transmits the differences between the PPT data maps to the target volume and performs an update to the target volume. Then returning to access by users to the source and target volumes are blocked in operation . This quiesced period of blocked user access to the nodes occurs briefly and decreases node unavailability by the use of the collection of PPT data maps described by the collective PPT data map. During the quiesced period softlocks or the like may be used to block user access to the nodes. Such softlocks or software locks may be for example a boolean variable such as mutex. 

During operation the storage operation system of the source node determines the differences between the source volume allocation map which indicates the blocks in use by the source volume and the most recent PPT data map. Then in operation the source node transmits the differences between the source volume allocation map and the most recent PPT data map to the target volume of the target node and performs an update to the target volume. Further the r w block contents of the volume are also transmitted from the source volume to the target volume.

Thereafter in operation the source node and the target node switch identities which switches the identities of the source volume and target volume. The effect of switching identities is that once the quiesced period ends user access resumes on the target volume and not the source volume. It should be appreciated that the process to switch identities includes and is not limited to switching node names and IP addresses if the target node will replace the source node.

However if both the source and target nodes will remain active for user access then addresses of a volume database not shown can be updated to reflect that user access to the migrated volume should occur on the target node after the volume migration. For example in one exemplary embodiment of a cluster an N module communicates with a client. Each N module of the distributed storage system can communicate with a D module. Thus a source volume of source D module can be migrated to a target D module. A distributed volume database not shown accessible to all N modules contains location information of particular volumes that reside on a particular D module. Thus swapping identities such as the switch described above can be an update of entries in the distributed volume database.

In an exemplary embodiment of the present invention the storage operating system of the source node calculates a collective PPT data map in operation . For example the collective PPT data map may be created by performing a logical operation such as a logical OR operation between the collection of the PPT data map contents. Thus if in bitmap location 3 4 row 3 column 4 of an n n bitmap of two PPT data maps there exists a 0 then the corresponding 3 4 bitmap location of the collective PPT data map would indicate a 0. It should be appreciated that other suitable operations are possible for determining the contents of a collective PPT data map as long as the resulting collective PPT data map indicates a representation of the collection of PPT data.

Thereafter in operation the source node transmits the collective PPT data map to the target node. Then in operation the quiesced period ends and user access is restored to the source and target volumes. Accordingly the quiescent period is brief and exists during the processing of bitmaps such as the creation of the collective PPT data map. At this point users may access the source node and the target node such as a non migrated volume on the source node and the migrated volume on the target volume.

During the on the fly real time operation of the nodes wherein user access is permitted more than one PPT data may be created in operation on the source node. Specifically during this non quiesced period the collective PPT data map is a placeholder for the upcoming PPT data transfer from the source node to the target node. By using this placeholder new PPT data can be created continuously without accidental conflicting block allocations between the new PPT data and the source PPT data to be migrated. Further a rule possibly implemented as a policy can be that during PPT data migration a block is available for allocation on the target volume if and only if the volume allocation bitmap and the collective PPT data map indicate that the corresponding bitmap location is clear i.e. indicates a 0. Accordingly the rule prevents a block allocation on the target volume when a block is marked as in use in the collective PPT data map.

An advantage to users by using the collective PPT data map and the policy is that new PPT data can be created while transferring old PPT data from the source node to the target node. Thus there is very little latency from the user perspective during the volume migration because potentially gigabytes worth of PPT data are not being migrated during the quiesced period. In alternative embodiments not all PPT data may be migrated. For example certain PPT data may be selected for migration while others are retained on the source node. Alternatively some PPT data may be deleted thus obviating the need to migrate the deleted PPT data.

The operations herein described are purely exemplary and imply no particular order. Further the operations can be used in any sequence when appropriate and can be partially used. With the above embodiments in mind it should be understood that the invention can employ various computer implemented operations involving data stored in computer systems. These operations are those requiring physical manipulation of physical quantities. Usually though not necessarily these quantities take the form of electrical magnetic or optical signals capable of being stored transferred combined compared and otherwise manipulated.

Any of the operations described herein that form part of the invention are useful machine operations. The invention also relates to a device or an apparatus for performing these operations. The apparatus can be specially constructed for the required purpose or the apparatus can be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular various general purpose machines can be used with computer programs written in accordance with the teachings herein or it may be more convenient to construct a more specialized apparatus to perform the required operations.

The invention can also be embodied as computer readable code on a computer readable medium. The computer readable medium is any data storage device that can store data which can be thereafter be read by a computer system. Examples of the computer readable medium include hard drives accessible via network attached storage NAS Storage Area Networks SAN read only memory random access memory CD ROMs CD Rs CD RWs magnetic tapes and other optical and non optical data storage devices. The computer readable medium can also be distributed over a network coupled computer system so that the computer readable code is stored and executed in a distributed fashion. The computer readable medium can also be distributed using a switching fabric such as used in compute farms.

The foregoing description has been directed to particular embodiments of this invention. It will be apparent however that other variations and modifications may be made to the described embodiments with the attainment of some or all of their advantages. Specifically it should be noted that the principles of the present invention may be implemented in non distributed file systems. Furthermore while this description has been written in terms of N and D modules the teachings of the present invention are equally suitable to systems where the functionality of the N and D modules are implemented in a single system. Alternately the functions of the N and D modules may be distributed among any number of separate systems wherein each system performs one or more of the functions. Additionally the procedures processes and or modules described herein may be implemented in hardware software embodied as a computer readable medium having program instructions firmware or a combination thereof. Therefore it is the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the invention.

