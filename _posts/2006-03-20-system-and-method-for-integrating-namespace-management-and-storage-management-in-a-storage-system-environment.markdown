---

title: System and method for integrating namespace management and storage management in a storage system environment
abstract: A system and method integrates namespace management and storage management in a storage system environment. According to the invention, an integrated management framework provides an underlying infrastructure that supports various heterogenous storage access protocols within a single, logical namespace service. The logical namespace service is based on extensions to underlying storage management processes that cooperate to create the integrated management framework. Notably, these extensions are embodied as novel library functionality.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09118697&OS=09118697&RS=09118697
owner: NetApp, Inc.
number: 09118697
owner_city: Sunnyvale
owner_country: US
publication_date: 20060320
---
The present invention relates to storage systems and more specifically to a logical namespace service configured to facilitate namespace and storage management in a storage system environment.

A storage system typically comprises one or more storage devices into which information may be entered and from which information may be obtained as desired. The storage system includes an operating system that functionally organizes the system by inter alia invoking storage operations in support of a storage service implemented by the system. The storage system generally provides its storage services through the execution of software modules such as processes. The storage system may be implemented in accordance with a variety of storage architectures including but not limited to a network attached storage environment a storage area network and a disk assembly directly attached to a client or host computer. The storage devices are typically disk drives organized as a disk array wherein the term disk commonly describes a self contained rotating magnetic media storage device. The term disk in this context is synonymous with hard disk drive HDD or direct access storage device DASD .

The storage system may be further configured to operate according to a client server model of information delivery to thereby allow many clients to access information stored on the system. In this model the storage system may be embodied as file server executing an operating system such as the Microsoft Windows operating system hereinafter Windows operating system . Furthermore the client may comprise an application executing on an operating system of a computer that connects to the server over a computer network such as a point to point link shared local area network wide area network or virtual private network implemented over a public network such as the Internet. Each client may request the services of the server by issuing storage access protocol messages in the form of packets to the server over the network. By supporting a plurality of storage e.g. file based access protocols such as the conventional Common Internet File System CIFS and the Network File System NFS protocols the utility of the server is enhanced.

To facilitate client access to the information stored on the server the Windows operating system typically exports units of storage e.g. CIFS shares. As used herein a share is equivalent to a mount point or shared storage resource such as a folder or directory that stores information about files or other directories served by the file server. A Windows client may access information in the directory by mounting the share and issuing a CIFS protocol access request that specifies a uniform naming convention UNC path to the share. The UNC path or pathname is an aspect of a Windows networking environment that defines a way for a client to refer to a unit of storage on a server. The UNC pathname is prefixed with the string II to indicate resource names on a network. For example a UNC pathname may comprise a server name a share directory name and a path descriptor that collectively reference a unit of storage or share. Thus in order to access the share the client typically requires knowledge of the specific physical location i.e. the identity of the server exporting the share.

Instead of requiring the client to provide the specific identity of the file server exporting the share it is desirable to only require a logical pathname to the share. That is it is desirable to provide the client with a globally unique pathname to the share without reference to the file server. The conventional Distributed File System DFS namespace service provides such a solution in a Windows environment through the creation of a namespace that removes the specificity of server identity. DFS is well known and described in DCE 1.2.2 1997 which is hereby incorporated by reference. As used herein a namespace is a view of shared storage resources such as shares from the perspective of a client. The DFS namespace service is generally implemented using one or more DFS servers and distributed components in a network.

Using the DFS service it is possible to create a unique pathname in the form of a UNC pathname for a storage resource that a DFS server translates to an actual location of the resource share in the network. However in addition to the DFS namespace provided by the Windows operating system there are many other namespace services provided by various operating system platforms including the NFS namespace provided by the conventional Unix operating system. Each service constructs a namespace to facilitate management of information using a layer of indirection between a file server and client accessing a shared storage resource share on the server. For example a share may be connected or linked to a link point link in DFS terminology or a mount point in NFS terminology to hide the machine specific reference to the share. By referencing the link point the client can automatically access information on the storage resource of the specific machine. This allows an administrator user to store the information on any server in the network by merely providing a reference to the information or share . However these namespaces are typically services created on heterogeneous server platforms which leads to incompatibility and non interoperability with respect to management of the namespaces by the user. For example the DFS namespace service is generally limited to Windows based operating system platforms whereas the NFS namespace service is generally limited to Unix based operating system platforms.

The Virtual File Manager VFM developed by NuView Inc. and available from Network Appliance Inc. NetApp provides a namespace service that supports various protocols operating on various file server platforms such as NetApp filers and DFS servers. The VFM namespace service is well known and described in 4.0 2001 2003 and 4.0 2001 2003. Broadly stated the VFM namespace service facilitates management of information on shared storage resources i.e. namespace management in a heterogeneous platform environment. However the VFM service does not truly facilitate management of the storage resources on storage devices adapted to provide the information i.e. storage management . In particular with respect to control i.e. creation and scheduling of storage resources on storage devices of e.g. NetApp filers the VFM service can merely use existing storage resources.

Thus there is a need for a namespace service that allows a user to manage differs ent namespaces provided by storage systems such as servers in a computer network. In addition there is a need for a namespace service that facilitates namespace management as well as storage management among servers in the computer network.

The disadvantages of the prior art are overcome by providing a system and method for integrating namespace management and storage management in a storage system environment. According to the invention an integrated management framework includes an underlying infrastructure that supports various heterogeneous storage access protocols within a single logical namespace service. In addition the logical namespace service enables integration of storage management i.e. the function of managing individual storage objects with namespace data management i.e. the function of managing individual namespace objects to thereby improve the performance and availability of the service. The logical namespace service is based on extensions to underlying storage management processes that cooperate to create the integrated management framework. Notably these extensions are embodied as novel library functionality.

Specifically the integrated management framework facilitates configuration and management of pathnames in the logical namespace. That is the underlying infrastructure of the framework allows a user to manage various pathnames exported by heterogeneous namespace service and protocol implementations within the logical namespace. This aspect of the framework involves creation of a layer of abstraction that presents to a client a notion of the logical namespace that is accessible via a particular storage access protocol. To that end the integrated framework extracts logical views e.g. pathnames from the namespaces exported by the heterogeneous services stores those pathnames and then configures the pathnames so that they are accessible in the logical namespace via the storage access protocol.

In accordance with an aspect of the present invention the underlying storage management processes are further extended to provide a novel policy architecture directed to the ability to integrate namespace and storage management in the logical namespace. The policy architecture illustratively comprises a policy a task and a job. As used herein a policy is a static entity that comprises rules for performing a specific action e.g. configuration of pathnames in the logical namespace. A task is a static entity that comprises parameters needed to execute the policy whereas a job is an executable entity or an executing instance of the task. Advantageously each entity of the policy architecture is independent of the other which allows increased flexibility and efficiency among tasks and jobs particularly with respect to minor changes to a policy.

Each client may comprise an application executing on an operating system of a general purpose computer that interacts with the file servers in accordance with a client server model of information delivery. That is the client may request the services of a server and the server may return the results of the services requested by the client by exchanging packets over the network . The client may issue packets including storage e.g. file based access protocols such as the Common Internet File System CIFS protocol or Network File System NFS protocol over the Transmission Control Protocol Internet Protocol TCP IP when accessing information in the form of e.g. files and directories.

To facilitate client access to the information stored on the server a file server executing e.g. the Windows operating system typically exports units of storage e.g. CIFS shares. A client may access information of the share by mounting the share and issuing a CIFS protocol access request that specifies a uniform naming convention UNC path to the share. Although the illustrative embodiment is directed to a Windows file server that is accessed using the CIFS protocol the invention described herein is not so limited and may also apply to other servers such as Unix filer servers and NetApp filers that are accessible using other file access protocols such as the NFS protocol. The client connects to file server when accessing the share typically by specifying the IP address or identity of the file server.

However instead of requiring that the client know the specific identity of the server in order to access the share a namespace server such as the conventional Distributed File System DFS server provides a namespace service that removes the specificity of server identity. Using the DFS service a unique pathname in the form of a UNC pathname is created for the share that the DFS server translates to an actual location of the share in the network. For example assume a client application issues a CIFS request to access information of a share stored on a file server in the environment . The request is passed through various layers of the client s operating system including e.g. a CIFS redirector. Before issuing a CIFS packet directed to a UNC pathname specified by the client application the redirector contacts the DFS server to determine whether there is a different actual pathname needed to access the information. If so the DFS server returns that actual pathname to the redirector which then uses that pathname to create the CIFS packet for transmission over the network. The DFS namespace service thus provides a level of indirection to a share that resides on a file server in the environment .

Although the illustrative embodiment is directed to a DFS namespace service provided by the Windows operating system executing on a DFS server the invention described herein is not limited and may also apply to other namespace services such as the NFS namespace provided by the Unix operating system executing on a conventional Name Information Service NIS server. Each service constructs a namespace to facilitate management of information using a layer of indirection between a file server and client accessing a shared storage resource share on the server. However these namespace services are created on heterogeneous server platforms which lead to incompatibility and non interoperability with respect to management of different namespaces by e.g. an administrator user .

In accordance with the invention a namespace and storage management NSM server is provided that integrates namespace management and storage management in storage system environment . The NSM server includes an integrated management framework that provides an underlying infrastructure that supports various heterogeneous storage access protocols within a single logical namespace service. To that end the NSM server cooperates with a NSM console and a remote agent to create the integrated management framework. As described herein the integrated management framework in turn allows the NSM server to interact with any namespace server such as a DFS server configured to handle CIFS protocol requests or a NIS server configured to handle NFS protocol requests directed to namespace services.

An operating system portions of which is typically resident in memory and executed by the processing elements functionally organizes the server by inter alia invoking operations in support of storage services implemented by the server. In the illustrative embodiment the operating system is preferably the Windows operating system although it is expressly contemplated that any appropriate operating system such as the Unix operating system may be enhanced for use in accordance with the inventive principles described herein. The operations invoked by the operating system are illustratively namespace and storage operations in support of an integrated management framework provided by the server. It will be apparent to those skilled in the art that other processor and memory means including various computer readable media may be used for storing and executing program instructions pertaining to the invention described herein.

The NSM server generally provides its storage services through the execution of software modules such as processes. These services are illustratively implemented as separately scheduled processes and or daemons that execute in user space of operating system to provide the integrated management framework . As used herein a process refers to an instance of a program being executed by e.g. the processor and a thread is an instance of a sequence of the process s program code. is a schematic block diagram of the integrated management framework in accordance with the present invention. The integrated management framework provides a logical namespace service that is based on extensions to underlying storage management technology and other technological components. Notably these extensions are embodied as novel library functionality.

In the illustrative embodiment the underlying storage management technology is embodied as DataFabric Manager DFM technology available from Network Appliance Inc. Sunnyvale Calif. and described in 3.2 1994 2004 which is hereby incorporated by reference. Broadly stated the DFM technology comprises a set of coordinating processes including an application programming interface API server a scheduler an Event daemon a Monitor including a Discovery daemon and a database interface DBI configured to interact with an embedded database . The present invention extends the capabilities of these processes to create the integrated namespace and storage management framework through the addition of NSM library functionality . As described herein the NSM library is illustratively implemented as various library modules each of which provides namespace and storage management actions embodied as APIs.

The integrated management framework exposes a set of interfaces e.g. an API interface that is used by the NSM console and a command line interface CLI used by a communication protocol. Illustratively the communication protocol is embodied as an XML over HTTP mechanism for APIs primarily because of its ability to describe data conveyed over the network as well as the transport without describing the actual storage access protocol. Such a protocol is also easily extensible and flexibly agnostic to binary formats of specific servers and clients to thereby operate efficiently in a heterogeneous environment.

In the illustrative embodiment the integrated management framework facilitates configuration and management of pathnames in the logical namespace. That is the underlying infrastructure of the framework allows a user to manage various pathnames exported by heterogeneous namespace service and protocol implementations within the logical namespace. This aspect of the framework involves creation of a layer of abstraction that presents to a client a notion of the logical namespace that is accessible via a particular storage access protocol. As noted the various heterogeneous namespace services are not interoperable with respect to user management the integrated framework as described further herein extracts logical views e.g. pathnames from the namespaces exported by the heterogeneous services stores those pathnames in database and then configures the pathnames so that they are accessible in the logical namespace via the storage access protocol.

In storage and networking environments some operations can only be executed if a user such as a system administrator is logged into a server on which the operations are to be performed e.g. the NSM server. In other words a remote operation that is to be invoked on the server can only be performed if the user is logged into the server. The NSM console and remote agent of the integrated management framework address this problem. Illustratively the NSM console is a component of the framework that includes a JAVA based interface and the remote agent is a software module installed on a host machine such as a server which manages a particular namespace e.g. a DFS server. Using the communication protocol the NSM console issues APIs to the NSM server which in turn issues APIs that are invoked on the remote agent to perform actions requested by the user.

Essentially the remote agent is a thin web server that includes programmatic glue to enable installation of plug in modules plug ins . An example of a plug in is a namespace management module that allows remote access and management of data e.g. pathnames by the NSM server . Notwithstanding the particular namespace the integrated management framework involves installation of a remote agent on a server that manages the particular namespace and interacts with the NSM server via APIs expose by the remote agent.

Illustratively the remote agent is installed on a machine that hosts a DFS server of a Windows DFS environment. The namespace management plug in module may in turn be installed on the remote agent to enable communication with the NSM server when accessing namespace information stored on the DFS server. Specifically the NSM server issues APIs in connection with the communication protocol to instruct the remote agent to perform certain actions. For example in order to construct or change pathnames in the logical namespace a user interacts with the NSM console to access that namespace by in effect invoking a set of APIs on the NSM server which in turn invokes a set of APIs on the remote agent . Once the NSM server has cooperated with the DFS server to construct the pathnames those servers are no longer involved in client data accesses.

It should be noted that the underlying directory data structures used in the logical namespace of the present invention reside on the namespace server providing the particular namespace service such as a DFS server. That is the namespace server implements the basic namespace the NSM server provides a service for configuring that namespace. To that end the NSM server cooperates with the remote agent to acquire a copy of the namespace directory structures from the namespace server and stores the copy on the embedded database . The NSM server then cooperates with the NSM console to allow a user to manipulate configure the copy. Once configuration is complete the server cooperates with the remote agent to push store the manipulated copy of directory structures back to the namespace server .

The Monitor is illustratively embodied as a multi threaded process having a collection of individual monitor threads each of which is scheduled by the scheduler . The Monitor cooperates with the remote agent to communicate with one or more machines devices in the storage system environment using SNMP RSH etc to collect any type of storage or data namespace object information e.g. volume and or qtree information as well as information about namespace servers available in the environment and to that end functions as a data collector. Illustratively each monitor thread is configured to collect information about a particular object in the environment. Extensions to the Monitor described herein are directed to namespace and agent management each of which is illustratively embodied as an individual monitor thread.

As data is collected the Monitor determines whether it needs to notify any processes of some resulting condition. For example an individual monitor thread may detect a threshold and the occurrence of some type of event. As used herein an event is a synchronous notification with a severity attribute. By configuring thresholds the NSM server can determine when an event occurs. An example of a threshold is if volume capacity is greater than 50 generate an event out of space . If a threshold is exceeded the Monitor communicates with the Event daemon to notify it of that event. Thus the Monitor is configured to detect certain events and in response generate event notifications to the Event daemon . The Event daemon then determines what if any further action is needed e.g. send an SMTP alert an email an SNMP trap and records the event in the embedded database .

The embedded database is illustratively implemented as a Sybase relational database that exports a set of Simple Query Language SQL function calls that enable storage retrieval of data such as namespace objects to from the database. As described herein a schema of the database is configured to efficiently capture characteristics of a namespace independent of the storage access protocol such as NFS or CIFS. The database is illustratively organized as a plurality of tables each of which can be accessed by processes within the NSM server. The DBI is illustratively embodied as a SQL interface to the database and its associated tables although it will be understood to those skilled in the art that the DBI may be embodied as any other type of database protocol interface depending on the actual implementation of the database e.g. an Oracle database.

The API server is illustratively embodied as a multi threaded process that is configured to implement the APIs used by the NSM console to access the database and manipulate information stored thereon. The API server also implements the communication protocol APIs used to interact with the remote agent . Accordingly extensions to the API server are primarily directed to those APIs required to manipulate the database and the remote agent. For example APIs are invoked by a user via the NSM console to manipulate modify update the embedded database . The API server updates the database with respect to user configuration requests and the Monitor periodically queries polls the database for any state information change. Depending upon the change the API server may cooperate with the Monitor to instruct data collection from the remote agent . After receiving the collected information from the remote agent the Monitor updates the database and the Event daemon .

One of the underlying storage management services provided by the coordinating processes is script management which involves the execution of a script according to a schedule. In accordance with an aspect of the present invention the capabilities of these processes are further extended to provide an enhancement to script management that forms the basis of a novel policy architecture directed to e.g. the ability to integrate namespace and storage management in the logical namespace. Illustratively the processes of the integrated management framework that implement the policy architecture include among others i the Monitor and its notion of thresholds and ii the scheduler which defines the periods at which the Monitor and a script e.g. a piece of code that runs other code execute. In essence the policy engine of the integrated management framework is embodied as the ability of the NSM server to schedule scripts that perform a set of operations.

In the illustrative embodiment the policy architecture comprises a policy a task and a job. As used herein a policy is a static entity that comprises rules for performing a specific action e.g. configuration of pathnames in the logical namespace or discovery of file servers in the storage system environment. A task is a static entity that comprises parameters e.g. action points on which the policy operates needed to execute the polis icy whereas a job is an executable entity or an executing instance of the task. In other words a policy is defined as the taking of some action in response to the occurrence of some condition e.g. if X then Y . Note that the condition may comprise a scheduling event or a monitoring event. A task therefore is a policy plus a schedule and a job is an instance of a task.

For example assume a user wants to create new physical storage as a share and further wants to attach the share to a link point of the logical namespace. Assume also that the physical storage is resident on a particular unit of storage such as a qtree of a filer and that the user wants to replicate mirror the share to another filer. The process of creating the storage on the qtree exposing the storage as a share attaching the share to a link point and mirroring the share can be performed as a policy on the NSM server. According to an aspect of the invention the integration between namespace and storage management is leveraged through the policy architecture.

Notably each entity of the policy architecture is independent of the other which allows increased flexibility and efficiency among tasks and jobs. Moreover the independent entity architecture is advantageous with respect to minor changes to a policy which content typically comprises more information than a task or job. Instead of creating a new policy to accommodate a minor change the novel policy architecture of the present invention necessitates only modification to the task or job associated with the policy. In contrast a policy used in previous systems is the entity that is executed and as such must be changed or a new policy created to accommodate any minor change which may result in substantial consumption of resources.

Since there are many such properties that may be executed on the NSM server the present invention enables the user to create and define a policy using an offline temp plate at the NSM console wherein the behavior of the property is specified and stored as a policy. The offline template is implemented by the console via a graphical user interface GUI policy creation wizard . Broadly stated the policy creation wizard leads the user through various screens prompting the user to select behaviors for related attributes and properties.

Specifically in Step the NSM console sends a packet containing one or more function calls associated with one or more XML policy detail tags to the NSM server where they are received by the API server. In Step the API server spawns an API server thread to process the function call. In Step an XML parser within the API server extracts the policy details properties and attributes from each XML tag and provides them to the API thread which translates the call into one or more specific actions that take place within the NSM server. To that end the thread interfaces with the NSM library and in particular to one of the NSM library modules each of which may be linked to different process within the NSM server. Accordingly an NSM library module is linked into the API server thread such that delegation of logic used to perform the translated actions occurs within the context of the API server .

For example in Step the API server thread cooperates with a library module of the NSM library to translate the function call received from the NSM console into an API that e.g. stores the policy details associated properties and or attributes in the embedded database . Note that one or more tables of the database may be configured to store policies and their associated details properties and attributes . Alternatively the function call may be translated into an API that initiates action by the remote agent. Other examples of actions provided by the translated APIs may include updating the tables of the embedded database with new data validating access to the data and or retrieving the data when access has been validated.

When cooperating with the NSM library to store data into the database the API server thread invokes an API at the DBI at Step . The API invoked by the API thread is illustratively embodied as a SQL function call into the embedded database that stores i information and parameters details relating to the policy created by the user or alternatively ii information retrieved by the NSM server in response to discovery operations performed by the remote agent. In the former case the API server thread receives XML tags parses them and cooperates with the NSM library to invoke appropriate SQL APIs to e.g. store the information and parameters of the policy in the database via the DBI . Alternatively the thread may cooperate with the NSM library to invoke APIs that are embodied as API function calls to the remote agent that instructs the agent to perform specific actions on the machine hosting that agent.

Upon storing the properties and attributes of the policy in the appropriate table of the database the DBI generates a unique identifier ID that is associated with the stored policy and details in Step . The unique name and ID are thereafter used to query the database to access the stored policy. In Step the NSM server returns an acknowledgement including the unique ID associated with the unique name of the policy to the NSM console for use by the user. When subsequently accessing the policy at the NSM server the user provides the unique name of the policy which is translated at the DBI to the unique ID to thereby enable access to the policy in the database . The SQL function call command specifies the location table entry and format of the data for storage in the database. The procedure then ends at Step .

Notably the integrated namespace and storage management service provided by the framework is primarily realized within the embedded database . In other words a pre existing schema of the underlying storage management technology employed by the NSM server is configured to perform storage management actions such as monitoring volumes filers etc. For example assume the NSM server executes a storage management policy that specifies find all agents in a particular subnetwork of the storage system environment wherein the subnetwork subnet includes a plurality of DFS servers. The NSM console invokes an API on the API server that requests discovery of agents in the subnet. The API server updates the database schema so that when the Monitor polls the database it notices that the schema has changed to request discovery of agents in the subnet. The Monitor and Discovery daemon then instructs the remote agent to poll all IP addresses of machines hosting agents in that subnet.

Another example of a storage management policy involves discovery of storage objects such as host machines file servers and or filers. Assume that operating system versions of filers are organized into different groups. A storage management policy may specify discovery of all filers in the storage system environment and upon discovery examination of their operating system versions. Thereafter the policy may specify organization of each storage operating system version of each filer into a corresponding group. Illustratively there may be separate tables within the embedded database for namespace and storage management functions although this is not a requirement and other optimized database table arrangements are possible .

According to the invention this pre existing schema is extended to include namespace actions such as e.g. discovery and population of pathname information into the logical namespace as described further herein. This aspect of the present invention is advantageous because it enables integration of storage management i.e. the function of managing individual storage objects with namespace data management i.e. the function of managing individual namespace objects to thereby improve the performance and availability of the service. Because these management functions are integrated certain cooperative actions may be performed that otherwise could not. For instance consider a storage administrator that is primarily concerned with whether a file server and its associated storage are operational and a data administrator that is primarily concerned with whether the data on the storage of the server is accessible. Using the teachings of the present invention a single administrator can employ the integrated management framework to initiate actions that ensure the availability of the data on some reliable storage in the environment.

Once the policy is created the user can create a task associated with the created policy using a GUI task creation wizard of the NSM console. Note that in general a task may be associated with one or more parameters such as source and destination machines e.g. in the case of data migration . However in the illustrative embodiment described herein a task is associated with a schedule provided by the scheduler therefore one of the screens of the task creation wizard requests a schedule as to the frequency at which the user wants the task to run as a job e.g. everyday once a week etc. That is during creation of the task the user specifies the schedule at which the task should be executed. Such schedule details of the policy are stored in the database and a module of the NSM library e.g. the namespace library module interacts with the scheduler to ensure that a new job of the task is created and executed as specified by the schedule details.

The policy architecture e.g. policy task and job provides flexibility of creating tasks of different types associated with different policies. Once created a task can be scheduled for execution at any time immediately or later . In one embodiment the scheduler constantly polls the database to determine whether there is a task that needs be run and if so initiates execution of the task. The task then executes as a job and the job is monitored in terms of whether the task successfully executes.

According to the invention the remote agent is integrated with a novel plug in module configured to perform one or more independent functions. The plug in module is embodied as software code that operates within the context of the remote agent process and provides an interface to the host platform. An illustrative example of a plug in is the namespace plug in that has the intelligence to communicate with a host machine such as a namespace server to manage the logical namespace by e.g. creating the namespace creating and or deleting link points of the namespace etc. The novel plug in module provides an interface from the integrated management framework architecture to the architecture of its host machine. To that end the remote agent comprises an API server that cooperates with an API service on Windows platforms or a daemon process on Unix platforms to receive API requests from the NSM server and translate them into host machine calls such as Win32 APIs and or Unix system calls.

For namespace auto population the namespace plug in is installed on a host machine that manages the namespace such as a Windows DFS server or a Unix NIS server and is configured to create a new link point within the logical namespace. Note that creation of a new link point does not require a policy. That is creation of a new link point by a user is an immediate action invoked through the wizard or CLI and that does not require a policy or scheduling i.e. the use of the scheduler .

According to an aspect of the invention the namespace plug in has the machinery needed to implement the rules to perform namespace discovery and population. For example the rules of the namespace policy may specify discovery of CIFS shares in the network to which the DFS server has access and whose names match to a policy provided expression. Upon discovery of such matching shares the rules further specify populating the shares as targets into particular link points on the logical namespace. The remote agent then creates the link points and inserts the matching CIFS shares as targets into those link points and then formats the target link point information into packets for transmission to the NSM server. The information is then stored in the embedded database so that the NSM server can manage the namespace. Specifically the database is updated by the Discovery daemon of the Monitor running on the NSM server. The Discovery daemon is responsible for discovering information such as storage entities and populating the embedded database with that discovered information. To that end the Discovery daemon cooperates with the remote agent to receive the information and thereafter interact with the NSM library to invoke calls to update the database.

Typically the Discovery daemon runs on a schedule specified by the user via an option. A typical example of a scheduled discovery function is to probe all host machines and or servers within the network to determine their shares and then communicate with the DFS server to determine the namespace and link points associated with the discovered shares. In addition the Discovery daemon may be scheduled to search the network by IP address to discover the types of machines that are accessible i.e. whether the machines at those addresses are filers DFS servers or whether they have remote agents. The Discovery daemon then populates the embedded database with that discs covered information.

The Monitor examines the database to determine which shares on the machines have been previously discovered and thereafter sends scheduled probes or pings in accordance with global option settings by a user to these machines to determine whether the shares are accessible. The Monitor then updates the status of each of these machines shares in the database. In addition the Monitor may examine the database for entities that have already been discovered and then periodically or according to a schedule obtain the status of those discovered entities. For example assume that a particular namespace has been discovered. The Monitor cooperates with the remote agent to probe entities of the namespace to determine whether there have been any changes since the last time status was obtained or if no status has been obtained since the discovery process had run to discover the entities. In response the remote agent returns a data structure e.g. a tree to the Monitor showing the status of the entities in the namespace.

The Monitor thereafter stores the information in the database and determines monitors whether there any changes by e.g. walking the tree. Upon discovering any changes the Monitor initiates an event that is processed by the Event daemon . The Event daemon in turn generates an event notification to the user indicating that the namespace has changed. Examples of event notifications generated by the Event daemon as specified by the user are email or paging messages. Here the Event daemon creates an appropriate packet using a network protocol stack of the operating system and forwards the packet over the network adapter of the NSM server to the network.

Alternatively the initiated event may be processed by the Event daemon and accessed pulled by the NSM console which displays the event on its GUI. For example assume the Monitor is constantly monitoring the state of an entity via API communication with the remote agent instructing it to return the status of that particular entity. In response the remote agent returns the status to the Monitor which examines the status to determine whether the state of the entity has changed since the last time it was monitored. If so the Monitor sends a message to the Event daemon indicating that an event has occurred and the Event daemon stores the event into the embedded database . Note that the event is stored in a protocol agnostic manner i.e. the information stored in the protocol specific data structure of the event is extracted so that the stored event information is not in a storage access protocol e.g. DFS specific format and thus can be easily adapted to another storage access protocol e.g. NFS format. The Event daemon then generates an event notification to the console which pulls the event.

Note that the operations of the Monitor and Discovery daemon may also be affected by policies e.g. a policy that creates rather than discovers a namespace. Assume a user system administrator creates a new root of the logical namespace on an existing DFS server. The user interacts with the NSM console to provide details of the root to be created on the DFS server. The NSM console forwards the details as an API packet to the API server of the NSM server. The API server then cooperates with the NSM library to generate API requests to the remote agent running on the machine that is hosting the DFS server. Thereafter the remote agent communicates with the DFS server to create the namespace root and returns a response to the NSM console via the NSM server. Here neither the Monitor nor the Discovery daemon is involved with this flow at this time however since the namespace root has been created that namespace can be discovered by these processes in a subsequent discovery cycle.

In accordance with another aspect of the invention the integrated management framework extends a concept of grouping as implemented by the underlying storage management processes and directed to managed storage objects e.g. volumes files and filers . To that end the extended concept of grouping in the integrated management framework is directed to a set of managed namespace objects including e.g. remote agents shares e.g. CIFS shares namespaces namespace servers. The managed objects of a set group may share one or more characteristics that facilitate execution of one or more operations on the group as a whole. Thus a set of CIFS shares may be organized as a group and a policy such as a data protection or data migration policy may be applied to the group of CIFS shares wherein each CIFS share group member is automatically affected by the policy. Note that processes of the integrated management framework used to implement grouping may include among others the NSM console e.g. an NSM console application the CLI the API server the NSM library and the database .

In response the NSM console invokes an API call on the API server instructing the NSM server to create the group from the selected CIFS shares Step . The API server then forwards a create group function call to a library module of the NSM library that is delegated the responsibility of handling the call. In Step the library module interacts with the database e.g. to create a data structure such as a table for storing the details defining the group. Illustratively the table is created wherein each entry has a list of CIFS shares members that belong to a particular group having a particular name. The table is illustratively labeled groups and the multiple entries of the table are indexed by group name. In addition there may be pointers or references to the particular to CIFS shares that belong to the group. The procedure then ends at Step .

Once a group is formed the integrated management framework enables performance of certain operations at the group level. Such operations may include listing of events that have been generated by members of the group generation of group specific reports and monitoring of status at the group level. is a flowchart illustrating a procedure for enabling an administrator to monitor the status of a created group of managed objects in accordance with the present invention. The procedure starts at Step and proceeds to Step where in response to an administrator request the NSM console invokes an API call on the API server that instructs the NSM server to provide the status of the created group. The API server delegates the call to an appropriate NSM library module which in Step queries the database to i determine the members of the group and ii the status of each member. Note that in the illustrative embodiment the Monitor records the status of each share in a separate status table of the database. Accordingly each entry of the group s table may include links or references from each individual CIFS share to an entry of the status table that stores the current status of that share. In Step the NSM server interacts with the NSM console to display the status of each group member to the administrator e.g. via a browser. The procedure then ends at Step .

Notably this aspect of the invention defines a novel set of managed objects remote agents shares namespaces namespace servers that is different from the set of managed objects defined by the underlying storage management technology. These managed objects have their own properties such as the types of operations that can be performed on the objects the types of attributes that describe the managed objects and the types of status that can be associated with the managed objects. Advantageously the grouping of the novel managed objects allows an administrator to perform an operation on multiple objects at the same time instead of having to access each of those objects individually. This grouping aspect of the invention extends the infrastructure of the underlying storage management technology to include namespace managed objects to thereby enable a more efficient user friendly namespace and storage management tool. That is the integrated management framework enables grouping of both storage managed objects e.g. volumes files and filers as well as namespace managed objects shares remote agents and namespaces .

In sum the invention extends the functions of the underlying storage management coordinating processes to provide the novel integrated management framework architecture described herein. In one aspect of the invention the functions of these processes are extended to provide a policy architecture comprising policy tasks and jobs. This inventive aspect involves the manner in which i policies are created ii jobs and tasks are created and spawned from a policy and iii the integrated management framework architecture including the NSM server executes and implements the policy task and job to provide an integrated namespace and storage management function. In another aspect of the invention the functions of the processes are extended to provide a group of managed namespace objects that may share one or more characteristics that facilitate execution of operations on the group as a whole.

While there has been shown and described an illustrative embodiment of a system and method for integrating namespace management and storage management in a storage system environment it is to be understood that various other adaptations and modifications may be made within the spirit and scope of the invention. For example in an alternate embodiment of the invention the remote agent may be installed on a machine that hosts a Name Information Service NIS with AutoMounter maps of a NFS environment. The NIS service generally functions as a repository for storing inter alia user identities names and distributed objects for use by a client. The remote agent and namespace management plug in module are installed on a NIS server configured to manage a NFS namespace and the NSM server invokes APIs on the agent to manipulate the AutoMounter maps.

In yet another alternate embodiment the remote agent may be installed on a machine that hosts a volume location database VLDB in a distributed storage system architecture of a node cluster available from Network Appliance Inc. Sunnyvale Calif. Here the remote agent and namespace management plug in module are installed on an M host of the cluster and the NSM server invokes APIs on the agent to manipulate a distributed system namespace which may further extend across one or more clusters with heterogeneous servers.

The foregoing description has been directed to specific embodiments of this invention. It will be apparent however that other variations and modifications may be made to the described embodiments with the attainment of some or all of their advantages. For instance it is expressly contemplated that the procedures processes and or modules described herein may be implemented in hardware software embodied as a computer readable medium having program instructions firmware or a combination thereof. Accordingly this description is to be taken only by way of example and not to otherwise limit the scope of the invention. Therefore it is the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the invention.

