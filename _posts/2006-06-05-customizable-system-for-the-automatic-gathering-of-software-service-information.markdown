---

title: Customizable system for the automatic gathering of software service information
abstract: The present invention provides methods and systems for a customizable collector application, which automates multiple diagnostic techniques to obtain sets of diagnostic information. The collector application is easily customizable for use by different products, and may reduce the diagnostic information gathering to a single session. This includes gathering all of the required sets of information about a product problem, the hardware environment, the maintenance levels of the operating system environment, and the involved middleware, both local and distributed. In addition, the collector application has a reusable framework designed to have minor external customization for each product that requires its' service. The output of the collector application may be provided in a format, such as XML, that is viewable by another application, such as browser.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07996730&OS=07996730&RS=07996730
owner: International Business Machines Corporation
number: 07996730
owner_city: Armonk
owner_country: US
publication_date: 20060605
---
The present invention relates to gathering diagnostic information. In particular the present invention relates to methods and systems for gathering diagnostic information in a customizable manner for each supported application.

Computer systems are constantly growing more complex to the point that it is extremely difficult to diagnose these systems. Software now presents a wide variety of configuration options programming interfaces APIs software dependencies performance tuning etc. Typically these complex computer systems comprise several layers of architectural abstractions. Each layer may have a number of components that interact with each other in a virtually infinite number of ways. Thus this complexity makes diagnosis of the system very difficult.

Gathering sufficient diagnostic data on a complex stack of software can be both labor intensive and error prone. It is usually an iterative multi pass process conducted between a remote service representative and the user experiencing the problem. These problems are exacerbated if the computer system topology is distributed or client server.

Frequently the diagnostic process requests data that is not available to the user as it pertains to hardware and software in the stack the operating system middleware including database and communication software a specific application or user interface with which the user is not familiar. Often the service representative knows and uses diagnostic techniques. These techniques however are generally beyond the technical depth of the end user.

Getting the necessary diagnostic information requires educating the end user about information gathering. Because many users are unable to figure out what has gone wrong with their system the user is often hostile or unable to gather as much information as is needed to efficiently isolate the problem. This information gathering dialog can thus be tedious expensive frustrating and time consuming.

Due to this multi step manual process and frequent user hostility the service representative is often disinclined to acquire all of the potentially needed facts in the initial dialog. Collecting full information involves walking the end user through complex diagnosis on a number of related interdependent components in the stack. Because each diagnostic test is an imposition on the end user the service representative tries to run the fewest possible tests. Consequently too little information is often obtained in the initial call resulting in a back and forth dialog between service representative and end user which again exacerbates the frustration of the user. Each iteration of this dialog can eventually contribute to the complete diagnosis yet all the while the system is inoperable or operating poorly.

Accordingly it may be desirable to provide methods and systems that can automatically and efficiently gather diagnostic information from a computer system. In addition it may be desirable to provide methods and systems that can gather diagnostic information in a manner that is easy and transparent for the user.

In accordance with one feature of the invention a method is provided for gathering diagnostic information in a customized manner for a target running on a computer. A specification file is received and the specification file identifies sets of diagnostic information requested by the target to be collected from the computer. The sets of diagnostic information are then collected based on the specification file. The sets of diagnostic information may then be provided in a format that is specified in the specification file.

In accordance with another feature of the invention a computer is configured to gather sets of diagnostic information for a target that is running on the computer. The computer generally comprises a memory and a processor. The memory comprises a specification file that identifies sets of diagnostic information requested by the target to be collected from the computer. The specification file also customizes a collector application for the target. The processor runs the collector application which reads the specification file collects the sets of diagnostic information requested by the target and formats the diagnostic information into an output based on the specification file.

In accordance with another feature of the invention a diagnostic system can be customized for a target running on a first computer. The system generally comprises a collector application and a viewer application. The collector application runs on the first computer and is customized by an external specification file specifying sets of diagnostic information requested by the target. The collector application collects the sets of diagnostic information requested by the target and formats the diagnostic information into an output based on the specification file. The viewer application receives the diagnostic information output from the collector application and provides a view of the diagnostic information.

Additional features of the invention will be set forth in part in the description which follows and in part will be obvious from the description or may be learned by practice of the invention. The features of the invention will be realized and attained by means of the elements and combinations particularly pointed out in the appended claims. It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention as claimed.

The present invention provides methods and systems provide a customizable collector application which automates multiple sets of diagnostic techniques. The customizable collector application has a reusable framework that permits customization as part of its service. This application is customizable for use by different products and can reduce the diagnostic information gathering to a single session or relatively few sessions . When a computer system is experiencing a problem such as an error or poor performance a collector application may be invoked to collect sets of diagnostic information. The collector application may be customized using a specification file that is external to the collector application. The specification file may be specifically configured to diagnose problems with a product or component herein referred to as the target of the collector application running on the computer system.

The diagnostic information gathering by the collector application may include for example gathering all of the required information about a problem the hardware environment the maintenance levels of the operating system environment and the involved middleware both local and distributed. The collector application may then output the diagnostic information in a readily portable form such as an extensible markup language XML file. The format of the XML file may be specified in the specification file. A user or technician may then view the diagnostic information using a standard browser either remotely or locally on the system being diagnosed.

One skilled in the art will recognize that the customizable collector software may eliminate the need for an iterative human dialog and the manual gathering packaging and transportation of diagnostic information. In addition the collector software can eliminate the common human errors in executing diagnostic information gathering techniques and errors in transcription. Further the collector software can be customized to diagnose not only deterministic or predictable issues but non deterministic issues as well since substantially complete diagnostic information can be collected in one invocation of the collector software. Regardless of how many individual detailed diagnostics are required the end user can invoke the collector software by executing a single command. This can facilitate far faster less expensive resolution of the user problem and restoration of the business function. Of course one skilled in the art will recognize that embodiments of the present invention may provide a number of benefits and advantages over the prior art.

Reference will now be made in detail to exemplary embodiments of the invention which are illustrated in the accompanying drawings. Wherever possible the same reference numbers will be used throughout the drawings to refer to the same or like parts. The present disclosure now begins with reference to .

Accordingly system is shown comprising a target system of concern by the user and a remote viewer which are coupled together via a network . Network may comprise a local area network or wide area network or a combination of networks. In addition the components of system may communicate with each other using known protocols such as the transport control protocol and internet protocol TCP IP and hypertext transport protocol HTTP .

The components of system may be implemented on separate devices or may be implemented on one or more of the same devices or systems. For example as noted above target system and viewer may be implemented on separate systems. However target system and viewer may run on the same machine and run under a common operating system. Such implementations may be useful for example when the user is interested in self diagnosing their own systems. Alternatively system may have one or more of its components implemented on multiple machines that run different operating systems. The components of system shown in will now be described in turn.

Target system may refer to any device or plurality of devices. For example target system may simply be a personal computer workstation or terminal. Alternatively target system may be a server a database server an application server and the like. Such devices and systems are well known to those skilled in the art.

Although shows a single target system system may include any number of target systems. As also shown target system may further comprise a target a collector application and a specification file . These components will now be briefly described.

Target generally refers to any software or component of software that runs on target system . Target may be on many types of computer system environments and many types of computer systems. For example target may be an application running on a UNIX based operating system or a database application such as the DB2 Universal Database system from IBM Corporation.

Collector application refers to an application or piece of software that collects diagnostic information regarding target . Collector application is a customizable piece of software which automates multiple sets of diagnostic techniques. In some embodiments collector application is configured to reduce diagnostic information gathering to a single session or relatively few sessions and gather all of the required information about a product problem with target .

In general diagnostic information refers to information that identifies the cause or nature of a problem with target . The problem may range from an execution failure to poor performance. For example the diagnostic information may include information that indicates the hardware environment of target system the maintenance levels of the operating system environment and the involved middleware both local to target system and distributed. One skilled in the art will also recognize that collector application may collect sets of diagnostic information for any number of targets simultaneously. For example collector application may be requested to gather diagnostic information for a plurality of targets that interact with each other.

Collector application may be customizable and utilize an extensible framework for use by any number of products that have a target such as target running on target system . That is collector application may run as a service on target system that runs and configures itself accordingly to the needs of the target being diagnosed. In some embodiments collector application uses a reusable framework designed to allow its customization for each product that requires its service using an external specification file . For example collector application may be initiated via a command prompt for a .bat file execution i.e. for Java implementations or .sh file execution i.e. for UNIX implementations etc. An example for collector application written in Java is provided below.

Specification file provides a list that identifies the diagnostic information requested for target and may indicate services needed to diagnose target . For example target or a consumer such as a user at target system or a technician that wishes to employ the services of collector application may provide specification file .

Specification file may be provided in a variety of well known ways such as a download from a website on network an email a file transfer operation and the like. For example specification file may be maintained at a central location that is accessible via network but which is available for download to target system . Alternatively specification file may be included with target during its installation. Of course one skilled in the art will recognize that there are a wide variety of ways to generate and distribute specification file .

In some embodiments specification file may comprise a set of standard sections for the hardware environment operating system the middleware environment and product specific areas for target to collect. Specification file may also supports the specification of various operating systems file systems and middleware commands to execute. Additionally specification file may include custom diagnostic code that augments the information collected by collector application including additional materials that target can specify to facilitate adequate coverage of the diagnostic information. Furthermore specification file may include code that is subject to a conditional which if satisfied results in an output and the cumulative results comprise the diagnostic information sought. For example this feature can be employed by other processes or devices to query another system and have the response formatted in the way that specification has specified.

In addition specification file may indicate the packaging and manner of transportation of the diagnostic information. For example in some embodiments specification file may specify XML as the standard format for the output packaging by collector application . The output may then be output to for example viewer via email file transfer protocol etc. For example below is an example of an XML formatted output that may be produced by collector application .

Viewer provides an interface for diagnosing target system . For example viewer may be employed as an administrative interface by a support center. Viewer formats and displays all of the information gathered by collector application and allows browsing of the diagnostic information collected at target system .

Viewer may be implemented using a variety of devices and software. For example viewer may be implemented on a personal computer workstation or terminal. In addition viewer may run under a Windows operating system or through a browser application such as Internet Explorer by Microsoft Corporation or Netscape Navigator by Netscape Communications Corporation. In the embodiment shown viewer runs through a browser such as Internet Explorer or Netscape Navigator that communicates with target system using HTTP secure HTTP HTTPs secure sockets layer SSL and the like. Although shows a single viewer system may include any number of viewers. Alternatively viewer may run directly on target system .

Processor may include cache for storing frequently accessed information. Cache may be an on chip cache or external cache. Target system may also be provided with additional peripheral devices such as a keyboard mouse or printer not shown . In the embodiment shown the various components of target system communicate through a system bus or similar architecture.

Although illustrates one example of the structure of target system the principles of the present invention are applicable to other types of processors and systems. That is the present invention may be applied to any type of processor or system. For example target system may comprise multiple processors such as those provided by the Intel Corporation or may comprise multiple computers that are linked together.

Operating system OS may be installed in memory for example from local storage and is an integrated collection of routines that service the sequencing and processing of programs and applications by target system . OS may provide many services for target system such as resource allocation scheduling input output control and data management. OS may be predominantly software but may also comprise partial or complete hardware implementations and firmware. Well known examples of operating systems that are consistent with the principles of the present invention include the z OS operating system LINUX and UNIX.

Main memory serves as the primary storage location for target system . For example main memory may be implemented in the form of a random access memory RAM a read only memory ROM or combination of both. As shown memory is shown with target collector application and specification file being loaded. Of course one skilled in the art will recognize that these components may be swapped in out of memory based on the operations of target system .

Local storage serves as a mass storage device for target system . Such devices are well known to those skilled in the art. For example local storage may be implemented as a hard disk drive an optical drive a tape drive and the like.

Input output controller couples target system to other devices and network . For example input output controller may comprise well known hardware firmware and software for network communications such as an Ethernet interface a universal serial bus interface and the like. Other devices and software for input output controller are well known to those skilled in the art.

Now that some exemplary systems have been described the present disclosure will now describe various processes and methods that are consistent with the principles of the present invention. The flow diagram depicted herein is provided by way of example. There may be variations to these diagrams or the steps or operations described herein without departing from the spirit of the invention. For instance in certain cases the steps may be performed in differing order or steps may be added deleted or modified. All of these variations are considered to comprise part of the present invention as recited in the appended claims. Reference will now be made to .

In general illustrates an exemplary process flow for gathering diagnostic information from target system related to the running of target . Collecting diagnostic information can involve guiding a user through complex diagnosis on a number of related interdependent components in a stack running on target system . Because each diagnostic test can be an imposition often times too little information may be collected from the user. Thus it may be desirable minimize the amount of involvement by the user and automate some or all of this process. Embodiments of the present invention can remove or reduce the need for an iterative dialog between the user at target system and a support center. In addition embodiments of the present invention can automate the gathering packaging and transport of the diagnostic information. Hence the user at target system does need to have detailed knowledge about diagnostic techniques or various information gathering techniques such as transcription.

Furthermore a support center may have an enhanced ability to understand and evaluate any problems at target system because embodiments of the present invention can provide a more complete and automated information gathering process. In some embodiments regardless of the number of individual diagnostic tests that may be needed collector application can be customized for each target system or each target and configured to run automatically to perform any number of diagnostic tests based on the execution of one command or a single invocation. In particular collector application may provide a relatively generic service platform that is a reusable and customizable framework for each supported application such as target . Thus embodiments of the present invention can also collect diagnostic information within a single or fewer sessions.

This process may be run upon request by the user when target system experiences problems such as during install or normal use. Alternatively collector application may be normally a hidden or dormant application. That is collector application may be normally inactive and activated on an as needed basis by the user or a technician.

The process flow may be initiated by invoking collector application from the command prompt at target system via a .bat file for those embodiments of collector application that are Java applications . As another example collector application may be initiated using a .sh file for when collector application is implemented on UNIX based systems. The user or technician may also be prompted to provide various necessary arguments that collector application may require. These arguments may differ for different targets. Alternatively collector application may be automatically invoked in response to an event such as a system or application failure or based on a predetermined time interval. Processing by collector apparatus may begin at stage .

In stage collector application receives the specification file . For example as noted above the user or a technician may be prompted to enter the location of specification file . Collector application may then receive the specification file in variety of ways. In particular the specification file may be downloaded from a web site or file transfer protocol site that is accessible from network . Alternatively specification file may have previously been stored locally on target system such as in storage . One skilled in the art will recognize that collector application may receive specification file in a variety of other ways that are consistent with the principles of the present invention such as accessing a disk. Processing may then flow to stage .

In stage collector application customizes itself based on specification file and gathers the sets of diagnostic information requested. A set of diagnostic information may be any group or amount of information resulting from a diagnostic test or other form of information gathering technique. In some embodiments collector application is implemented as a Java program which is made customizable by providing a Java interface that can be tailored to target . For example collector application may search for one or more of several versions of target or run a query such as a DB2 query and capture output of the query in order to obtain various sets of diagnostic information. In some embodiments collector application may employ a Java Database Connectivity JDBC application programming interface that enables it to execute SQL statements. This allows collector application interact with any SQL compliant database such as a relational database management system. Collector application may also support Open Database Connectivity ODBC methods.

Collector application may also run commands when collecting the sets of diagnostic information. For example collector application may run a DB2 administrative service command on a remote DB2 instance of a database in target system via TCP IP and capture the output. Collector application may also run other commands such as DB2 commands on a local DB2 instance of a database in target system . In addition collector application may run various local operating system commands such as DOS UNIX commands and capture their output or capture the contents of any system file such as log file trace file text file etc. This feature thus permits collector application to make calls to an existing executable that is to collect information rather than recreating functions that may already be available for other reasons. Collector application may also collect diagnostic information that a utility on target system already gathers. One skilled in the art will recognize that collector application may gather any type of diagnostic information. Once the diagnostic information has been collected processing may flow to stage .

In stage collector application provides the sets of diagnostic information it has gathered into a form requested by the user or technician as indicated in specification file . For example in some embodiments collector application is configured to provide the sets of diagnostic information in the form of an XML file. Collector application may then provide the XML file via email or a file transfer protocol operation. Collector application may also store the diagnostic information locally on target system where it can be viewed by viewer . A user or technician may then use viewer to browse through the diagnostic information in order to diagnose target system .

In some embodiments viewer can be run via a command prompt script such as Viewer.bat for Java applications or Viewer.sh for UNIX applications at target system or at another computer that is remote from target system such as at a workstation in a support center. The user or technician may then operate viewer to browse the XML files contents for example in a tree form. One skilled in the art will recognize that viewer may provide a wide variety of graphical user interfaces for presenting the diagnostic information.

The present invention can be included for example in an article of manufacture e.g. one or more computer program products having for instance computer usable media. This media has embodied therein for instance computer readable program code means for providing and facilitating the capabilities of the present invention. The articles of manufacture can be included as part of the computer system or sold separately. Additionally at least one program storage device readable by machine tangibly embodying at least one program of instructions executable by the machine to perform the capabilities of the present invention can be provided.

For example collector application may be provided as part of a larger product or software application. In particular as noted previously collector application may be written as a Java application which is instantiated in the code of another application such as target . Target may then call methods to capture the sets of diagnostic information desired.

Other embodiments of the invention will be apparent to those skilled in the art from consideration of the specification and practice of the invention disclosed herein. It is intended that the specification and examples be considered as exemplary only with a true scope and spirit of the invention being indicated by the following claims.

