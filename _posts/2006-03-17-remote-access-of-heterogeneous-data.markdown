---

title: Remote access of heterogeneous data
abstract: A method and system for providing remote access to heterogeneous information sources from computing devices including but not limited to personal computers, laptop computers, PDAs, cellular telephones is presented. A middle-tier server is provided in a multi-tier environment for allowing a data-centric approach to accessing, modifying and updating content located at remote data sources. The middle-tier server provides functionality for a mobile (or similar) user to perform a search query, request for document and/or data, update remote data, and perform commands on remote data sources. In addition, the middle-tier server manages the authentication of the user in sessioned or sessionless mode. In particular, search query results are processed such that the results answer a search query. That is, rather than simply providing a list of document matches, the middle-tier server extracts information from the document that answers the search query most appropriately. Finally, the middle-tier server, using user preferences, device capabilities and settings, transforms the result, document or data into an appropriate format that is suitable for the device, user and communication network. This allows the user to easily process and view the document on a (possibly limited capacity/functionality) device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07882122&OS=07882122&RS=07882122
owner: Capital Source Far East Limited
number: 07882122
owner_city: 
owner_country: HK
publication_date: 20060317
---
This invention generally relates to the fields of mobile communication information retrieval and data management. More particularly the present invention relates to a novel system that allows remote end users to rapidly and securely access and update information at heterogeneous data sources from a variety of devices in particular mobile devices.

Recent innovations in communication have led to the production and availability of a large variety of mobile devices. Innovations in information retrieval and database technologies have provided improved capabilities of handling information of a spectrum of heterogeneous formats. The availability of these mobile devices has essentially transformed methods of communication and information retrieval and has added an element of convenience to every day life. No longer is it required for an individual to transmit and receive information via a stationary unit. Additionally the advancements of information retrieval and database technologies have produced a variety of specialized database products from traditional relational database systems to document content management systems to multimedia database systems. These advancements have introduced the search capability from the Internet search to the desktop file search e.g. Google desktop search . As a result corporate entities and enterprises usually maintain more than one database e.g. linked by a middleware system such as IBM Websphere and need to handle information search and management of an increasing complexity. The production and availability of mobile devices have resulted in mobile devices changing from being a luxury item to an item of necessity. In fact corporate entities and enterprises are moving towards providing their workforces with ubiquitous access to networked corporate applications and a wide array of heterogeneous data sources such as for example e mail address books appointment calendars customer databases minutes of a meeting etc.

Problems with providing remote access to heterogeneous information sources are associated with accessing and presenting results from multiple systems. Accessing heterogeneous data systems involves interacting with their individual interfaces access control and authorization mechanisms. Further because many of the data repositories have different structures the types of queries that are sent to one repository might be very different from the queries that would be sent to another repository. Finally due to these different structures or formats it is usually necessary to launch different computer software to present the contents of the results. For example document management systems and Internet search engines return their matched results in a similar way i.e. a list of links pointing to the locations of the corresponding documents or web pages respectively. By clicking on a link the application associated with the format of the document or page is invoked and used to present its content. Problems arise when an individual is searching for a contact phone number urgently. The individual will have to browse through the content of each matched results until the answer is found. The problem is worse when the number of matches is large.

Although many systems provide remote access to data sources through an Internet connection e.g. via a Web browser or wireless connection interface e.g. via Wireless Application Protocol the remote access usually involves programming efforts i.e. to build client programs or interfaces for each system . Furthermore these custom built access interfaces are usually distinct from one another. As a result users will have to interact with different user interfaces when they access different applications. Similarly for remote data repositories that have built in remote access support these systems present unique or proprietary interfaces to the user once connected.

Further because many of the data repositories have different structures the types of queries that a user would present to one repository might be very different from the queries that would be put to another repository. The situation becomes worse when a developer is trying to write a program that can access data from heterogeneous information sources which provide a unique proprietary API Application Programming Interface . Middleware software provides an easy way to connect to multiple data repositories. However they only provide a generic API to access these systems without attempting to dispatch the queries and integrate the query results according to the structures or semantics of the data. Accordingly although much information is available over the Internet much of the information is stored in dissimilar systems. Thus a person wanting to search several of these systems must access each of them separately and organize all the received information locally after it has been downloaded.

Along with the problem of accessing information from different remote data sources users frequently have access to different devices each having different data access and display abilities requirements. For example certain cellular telephone handsets have the ability to receive e mail but do not have a built in word processor to display a Microsoft Word document. Certain mobile phone handsets can play music in MP3 format but cannot process songs in WMA format. Also many PDAs Personal Digital Assistants do not have the ability to edit any document or update enterprise databases but can retrieve or even maintain personal data such as emails calendars and contact address. Other PDAs have the ability to access to the enterprise network through their Virtual Private Network VPN . Some systems or networks allow users to download their e mail headers to a remote device and read some portion or all of the e mail. However while most devices are able to display the body of an email properly most fail to display render email attachments that may be of arbitrary formats. Hence the ability for users to access maintain and dynamically utilize information is heavily dependent on the device being used.

Working with data that requires launching multiple applications is cumbersome and tedious especially on a mobile device. It involves interacting with a limited device to invoke each application. Within each application the corresponding document data file has to be identified selected loaded edited and then saved. Due to the limitations of the display of a device which may impose a limit on the number of applications visible at any one time the transition from one application to anther is usually not seamless and involves many repetitive steps. Furthermore individual applications have unique user interfaces and functionalities that can reduce the productivity of mobile device users.

Further certain organizations limit and maintain access to the information maintained in an enterprise. For example many corporations control e mail access using a dedicated server e.g. VPN server having restricted access including using firewalls and encryption. Access to this information requires making the information available under conditions imposed and maintained by the corporation. Once the users connect to the dedicated server each remote data source still normally requires the user authorization and access control information. Even for the same user this information could be different for different remote data sources. Therefore a more convenient secure access scheme without compromising the degree of security is needed for remote accessing information from mobile devices. This is especially necessary for mobile users that need information immediately and from a device with limited resources .

For purposes of this application a corporation or other entity public private or otherwise is referred to as an enterprise. As used herein an enterprise represents any entity maintaining or controlling information at a remote location from a user. Examples of enterprises include a secure corporate network a dedicated server or a publicly accessible web site network. Other enterprises may be employed which maintain and control certain information as may be appreciated by those of skill in the art.

Certain enterprises also have particular needs and preferences. For example some corporate enterprises may maintain a network that interfaces with offices in different countries and depending on the person accessing the information he or she may have a particular language preference. Certain enterprises also find it highly desirable to have a reconfigurable interface to provide updated graphics information and presence to network users. These user interfaces may change rapidly in some industries. A system offering information access should therefore be seamless and automatically transform data to an appropriate format. It should also offer user interfaces structured for the enterprise for use on a variety of devices.

Such a system should be easy to set up and maintain and use readily available hardware and software wherever possible. Further the system should provide for data access tracking data management data backup and efficient security and authorization.

It is therefore an object of the current invention to provide a single system and interface for offering convenient and efficient access to heterogeneous data including e mail calendar date book spreadsheets and legacy data in proprietary database systems. These terms are commonly known in the art wherein e mail represents electronic mail deliverable in a recognized format including attachments and other electronic mail attributes. Calendar date book data represents dates of meetings appointments holidays or other noteworthy events maintained in a searchable database type format. Spreadsheets represent financial records and statements in a tabular electronic format. Legacy data in proprietary database systems includes data stored in relational database systems or other type of database systems such as object oriented databases or multimedia databases. Access to the information should preferably be provided through a single and simple query interface.

It is another object of this invention to provide a new way of using software applications to manage data via remote devices including but not limited to personal computers laptop computers PDAs cellular telephones through a variety or mixture of various communication networks including but not limited to a modem communication network a broadband digital network a wireless network and a cellular network. This new way includes the steps of searching for the data and selecting series of applicable actions operations applications on the data.

It is a further object of this invention to provide for access to the desired information using any of a variety of devices including but not limited to a personal computer a laptop computer a PDA a cellular telephone through a variety or mixture of various communication networks including but not limited to a modem communication network a broadband digital network a wireless network and a cellular network. In particular the target remote devices for this invention are devices with limited processing power limited output display area and restricted input capabilities. For example PDAs cellular telephones etc. Although the present invention is applicable to all types of remote devices devices exhibiting these limitations are targeted because of the optimizations for format transformations and user and display preferences.

It is still a further object of the present invention to provide a system which recognizes the type of device requesting information and to transform the information to be displayed on the device in an appropriate format and layout. The format and layout used depends on various constraints requirements and preferences including but not limited to the preferences of the device user the system requirements of the device the availability of the software that support the format.

It is another object of the current invention to provide a central location for enabling a series of users using various devices to access information at multiple data sources that may be at the same enterprise or various enterprises. Such a central location should offer a single point of access to the information desired in a robust manner offer security and maintain access control for information stored in the heterogeneous data sources and provide for authentication and access tracking.

It is yet another object of the current invention to provide an interconnection between a central data location and the heterogeneous data sources such that the interconnection can quickly reliably and efficiently communicate between the central data location and each data source. Such communication involves transforming the queries and commands that originated from the device to a form that can be accepted and executed by the application programming interface API of the individual data source.

It is a further object of the current invention to provide a remote enterprise architecture that supports queries from and responses to the central data location for use in a multiple user and multiple device data access scheme. The remote enterprise architecture should permit rapid access to the information and transmission of the information while simultaneously maintaining firewall security and encryption requirements.

It is yet a further object of the current system to provide a user interface that can be easily customised by an enterprise. This allows for the maintenance of information or preferences of users. Further the user interface should preferably provide access to enterprise data via various devices and take into account enterprise and user preferences when interfacing with a user. If necessary information can be transformed accordingly and displayed to the user.

It is another object of the current invention to provide a new model for presenting remote data from heterogeneous data sources which includes searching collecting transforming and collating query results from these remote data sources. This model should transform the query results from the remote data sources into a suitable form that can be presented in the remote device. The transformation should address all the requirements preferences and constraints associated with a user device or enterprise.

Accordingly there is herein provided a method and system for providing remote access to heterogeneous information sources from computing devices including but not limited to personal computers laptop computers PDAs cellular telephones.

One aspect of the present invention is directed to a computer implemented method and system for accessing information in a distributed networked environment having multiple clients a middle tier server and one or more remote data repositories. The middle tier server may consist of multiple computers. The method includes the steps of allowing access to said middle tier server for client queries processing client queries including converting said queries to native query languages supported by the appropriate remote data repositories and dispatching said native queries to said remote data repositories and finally processing of native query results including integrating said native query results and converting said native query result into one or more data views where a data view is a single presentation of heterogeneous information content in a homogeneous form.

The method may further include the steps of determining client specific information including but not limited to display configuration list of installed software and their configuration and user profiles and configuration in said client maintaining query history for each client in said middle tier server accessing and maintaining client specific information in said middle tier server if necessary transforming said data view to an appropriate data view format based on said client specific information in said middle tier server adaptively compressing said data view based on said client specific information and network bandwidth in said middle tier server and if necessary decompressing said data view in said client.

A second aspect of the present invention is directed to a computer implemented method and system for accessing information in a distributed networked environment having multiple clients a middle tier server and one or more remote data repositories. The middle tier server may consist of multiple computers. The method includes the steps of allowing access to said middle tier server for client queries processing client queries allowing a user to modify query results directly and have said modifications applied to the content in the underlying data repositories.

API calls modules or commands may further invoke other applications commands or operations that can be accessed by Server . Furthermore the API calls modules or commands may operate on data repositories . The results or output of a client command can be stored at Server or at remote data repositories .

A third aspect of the present invention is directed to a computer implemented method and system for accessing information in a distributed networked environment having multiple clients a middle tier server and one or more remote data repositories. The middle tier server may consist of multiple computers. The method includes the steps of allowing access to said middle tier server for client commands where a client command is a list of one or more API calls modules or commands that may further invoke other applications commands or operations processing client commands where said client commands may operate on remote data repositories and transforming the result or output of said client command to an appropriate format depending on the capabilities and preferences of the device and user where said result or output can be stored at said middle tier server or remote data repositories.

It is an object of the current invention to provide a new solution for word processing. This will be achieved by searching for relevant information from remote data sources and allowing the user to paste the search results in an appropriate format automatically. All the advantages of remote information access from the current invention would be applied and add value during the task of word processing.

It is yet another object of the current invention to provide a new business model for remote data management. For example facility asset management people may use a mobile device to identity the location of the asset or facility by simply searching for the relevant information from the enterprise system or network through a remote device and update the information if necessary on the spot. While there are similar existing solutions around most of these solutions involve a proprietary system that is tailor made for that specific application with specific corporate requirements. Secondly all these solutions normally require a well defined and properly designed database e.g. with a rigid relational schema . It is an object of this invention to provide a solution for these applications without the need for a fixed database schema and custom made application framework. For instance some of the facility asset management information may be in relational databases while others are in spreadsheets or even emails.

Other objects features and advantages of the present invention will become more apparent from a consideration of the following detailed description and from the accompanying drawings.

The following detailed description of the embodiments of the present invention refers to the accompanying drawings that illustrate these. Other embodiments are possible and modifications may be made to the embodiments without departing from the spirit and scope of the invention. Therefore the following detailed description is not meant to limit the invention.

It will be apparent to one of ordinary skill in the art that an embodiment of the present invention as described below may be realized in a variety of implementations including the software firmware and hardware of the entities illustrated in the figures i.e. messaging servers data network and mobile devices . The actual software code or control hardware used to implement the present invention is not limiting of the present invention. Thus the operation and behavior of the present invention will be described without specific reference to the actual software code or hardware components. Such non specific references are acceptable because it is clearly understood that a person of ordinary skill in the art would be able to design software and control hardware to implement the embodiment of the present invention based on the description herein.

In light of the foregoing the preferred embodiment of the present invention generally relates to a system that allows a data centric approach to retrieving modifying updating and creating data and documents that may reside in one or more remote data sources in a mobile environment. The data centric approach allows users to search for the information they need regardless of the location and format of the information. They are then able to modify or update this information by choosing the available operations commands or applications. The availability of these operations commands or applications is determined by the authorization and access control of the information hardware limitations preferences and software availability. This is a data centric approach because the workflow of the user is tied to the information. This is in contrast to the current approach or application centric approach . When users modify a Microsoft Word document and email the document to their clients they would need to launch the appropriate application in this case Microsoft Word and then edit the document there. Afterwards they will need to launch the email program for example Microsoft Outlook to type up an email and attach the document that they just modified. The process becomes more complicated when multiple applications are involved in completing a task. This issue is exacerbated on mobile devices with a small display area. In such devices only one application can be displayed at one time. Switching between applications and modifying the same file on these devices can be very ineffective and tedious.

The preferred embodiment of the present invention is practiced in a three tier distributed processing architecture a shown in . Middle tier server provides access to remote data repositories for example messaging servers enterprise applications legacy databases services local files etc. . Mobile devices for example smart phones mobile phones cellular phones PDAs notebook computers etc. allow users to perform queries on content stored at repositories by sending requests to server through the Data Network for example the Internet or any wired or wireless communication network . The data transmission between the server and mobile devices can be encrypted for example using a Virtual Private Network VPN or transmitted through a security firewall . In the preferred embodiment mobile devices are connected to Data Network via a wireless communication network such as Wi Fi the 802.11 family of network General Packet Radio Service GPRS Bluetooth etc. Client program resides on mobile device to interface between user and server .

Furthermore in the present invention a remote data repository can be practiced as an Internet search engine e.g. Google Yahoo . Server is able to use the search technology in Internet search engines to identify matches within web pages and documents. However server performs additional processing on native search results from Internet search engines in order to perform query answering and automatic result transformation.

The present invention is directed to a computer system computer implemented method and computer program product for performing search and transformation in a multi tiered networked computer environment. The preferred embodiment of the invention is practiced on a personal computer PC such as an IBM PC compatible having an Intel microprocessor. Alternatively the invention can be practiced using a workstation or server such as the IBM RS 6000 Server or similar servers from Sun Microsystems or Hewlett Packard . The server is under the control of an operating system such as the Microsoft Windows NT Microsoft Windows 2000 Microsoft Windows XP IBM OS 2 IBM AIX Sun Solaris FreeBSD or Linux operating system. The preferred embodiment uses the Linux operating system. Alternatively in a multi tiered network the network will typically consist of many different computers and operating systems.

Alternatively the present invention can also be practiced using a network of multiple computers which may run different operating systems. In this embodiment modules or components of the present invention can be distributed and run on different computers. They can communicate with each other via standard communication protocols such as RPC or in the form of web services using for example Simple Object Access Protocol SOAP .

The present invention can also be practiced as an embedded software development library with an Application Programming Interface API to access the functionality. This allows the functionality to be embedded in other mobile and enterprise applications or systems. For example an email client can embed client program such that it can search email archives and automatically transform attachments to a preferred format.

Additionally the present invention can also be practiced in a peer to peer environment. In this case the client computer system and server computer system are the same system and forms a peer .

The components of a server computer system according to the preferred embodiment of the present invention are shown in . Information integration component which consists of repository interfacing component security integration component and result integration component manages access to remote data repositories . The repository interfacing component integrates the information content stored at remote data repositories by managing access to remote data repositories . Security integration component integrates the existing access control and authorizations from remote data repositories . The result integration component integrates query results that are originally in different forms into a single presentation format. The search component processes and executes the client search on remote data repositories . Transformation component converts the integrated query result into a format suitable for the client to process or view. Client specific database component manages device and user specific information based on information obtained from the device and the user s query history. Information obtained from the device includes but is not limited to display configuration the client s list of installed software and their configuration and user profiles and configuration. The communication component manages the adaptive compression of information content required to satisfy a client request. It uses client specific information from client specific database component to determine the level of compression required.

The components of a client computer system according to the preferred embodiment of the present invention are shown in . The client communication component allows the client to communicate with server . In the preferred embodiment the client uses the standard Simple Object Access Protocol SOAP connection protocol on top of Secure Sockets Layer SSL to provide secure data transmission. Client profile management component determines the hardware and software availability and configuration display configuration e.g. the size of the display of a mobile device and allows the user to specify values for configurable parameters. On receiving a compressed file from server decompression component decompresses the file to enable it to be processed and or displayed on screen by display layout optimization component . Display layout optimization component optionally displays a subset of the information content received from server to optimize the usability of the information presented to the user. For example although display component receives as input an entire document it may choose to display only the document headings to user due to the lack of screen real estate and allow user to navigate to the actual content via the document headings.

Additionally to satisfy the system requirements settings or architecture of the enterprise the present invention can be practiced in a way that some or all of the components within server are practiced at client devices by adjusting the ways that these components interacting with each other. Similarly some or all of client components can be practiced at server .

If the client request is a query server performs the preprocessing and analyzing of the client request in . Next Step involves repository interfacing component dispatching the client query to the appropriate remote data repositories and search component to determine the search results. A search query is specified by user using a search string e.g. john and number .

Result integration component then integrates the query results from the remote data repositories into one or more data view s in . A data view is a single presentation of heterogeneous information content in a homogeneous form. For example given a series of query results consisting of small fragments of a Microsoft Word document HTML file and Microsoft Excel document e.g. containing the address of customers step will integrate these results into a data view that is in a tabular form. Each entry in a data view is augmented with a direct link . A direct link allows the client or internal system process to have direct access to the underlying document or data stored in the remote data repository . In the preferred embodiment a direct link is practiced as a string representing a combination of parameter value pairs corresponding to the document or data stored in the remote data repository . For example according to the preferred embodiment a direct link for an Oracle database can be repository id MyOracle command select name phone from employees where repository id uniquely identifies MyOracle as the Oracle database to be accessed by server and command is the native query required to extract content data from the database. Another example a direct link for a local file repository can be repository id MyFiles command z my documents project employees.doc where repository id uniquely identifies MyFiles as the local file system to be accessed and command identifies the path on the file repository where the document is located.

Next the generated data view is converted in by transformation component to an appropriate format based on the client specific information obtained by client specific database component . Another embodiment of the present invention may combine steps and such that the data view generated is in a format that is suitable to the client specific information stored by client specific database component .

Referring to if the client request is for a specific document for example user follows a direct link from a data view server retrieves the required file from the appropriate remote data repository in .

Next optionally if transformation is required for the client to be able to display the content of the file transformation component performs the document transformation in step .

Optionally in step communication component manages adaptive compression of the final data view or file retrieved by a direct link before it is transmitted to the client. Display layout optimization step is practiced in client program . Based on user interaction or customization step optimizes the result output on screen to the user and allows the user to perform a local search on the result.

If the client request is to update documents or data in a remote data repository Step in processes the request. If the client request is to execute a client command Step processes the request. Repository interfacing component is responsible for step and .

Processing module consists of three main modules query dispatching and search module W retrieval module and update module . Processing module handles the processing of incoming requests based on API calls . Search queries document retrievals and document check ins are examples of incoming requests to repository interfacing module . Processing module accesses remote data repositories via a common API not shown in . A repository specific connector implements the common API. From connector implements the common API for messaging servers connector implements the common API for enterprise applications connector implements the common API for legacy databases connector implements the common API for services and connector implements the common API for local files .

Processing module also accesses and maintains repository and connector registry . In the preferred embodiment repository and connector registry is practiced as a configuration file containing repository type connector module entries. repository type identifies the type of remote data repository and connector module identifies the appropriate module implementation of the common API associated with repository type. In the preferred embodiment connectors and are practiced as Dynamic Link Libraries DLLs . Referring to assuming connector is representing by the DLL messaging.dll the entry in repository and connector registry is messaging server messaging.dll . By maintaining repository and connector registry other repository specific connectors can be easily plugged in to repository interfacing module to provide immediate access to new types of remote data repositories.

Each remote data repository instance has a repository structure associated with it. The repository structure represents the general format of the data stored in the repository. In the preferred embodiment a repository structure can be one of tabular loosely structured or semistructured in the database industry free form or mixed. For example relational databases have tabular structure. An example of a loosely structured repository is a messaging server that contains emails. Each email has a fixed structure in terms of the subject title date etc but also usually has an unstructured text body. A local file repository consisting of business documents e.g. letters reports etc in plain text is an example of a free form structured repository. A repository containing data with mixed structure can be a document management system that contains both tabular data and loosely structured data.

Additionally repository and connector registry contains repository id repository structure keywords entries where repository id uniquely identifies each remote data repository that server has access to. repository structure is the structure of the data in the data repository and keywords is a list of words that can be used to search and describe the corresponding repository also known as the metadata associated with the data repository . For example in the preferred embodiment the repository id repository structure keywords entry associated with a particular Oracle database could be dbID1 tabular employees wages age department .

Security Integration component performs client authentication in Step by maintaining a Secure Authentication Database as shown in . The data stored in Secure Authentication Database can be visualized as a set of mappings . Mappings map each username password pair to a list of remote data repository logons. In mappings maps userid password to useridX passwordX which provides access to Remote Data Repository X and useridY passwordY which provides access to Remote Data Repository Y. Mappings also contains access control policies for individual mobile devices and remote data repositories. For example some clients may have limited hour access to certain sensitive data repositories but have full access to their emails at the messaging server. In the preferred embodiment a client command allows user using mobile devices or an administrator of server to create and update mappings in Secure Authentication Database .

In the preferred embodiment Server is accessible by mobile devices in a sessioned or sessionless manner. Server in turn accesses each remote data repositories in a sessioned or sessionless manner. Sessioned access enables a given system to login to a target system by supplying a user name and password once and perform a series of actions on the target system before logging off. Sessionless access requires a given system to login to a target system by providing a user name and password for each action to be performed on the target system. Sessionless access may be enforced when the preferred embodiment of the present invention is deployed in a security critical domain or when remote data repositories contain sensitive information. Server determines the type of access to each remote data repository based on the type of access i.e. sessioned or sessionless from mobile device and the session capabilities of the repositories. By default when mobile device accesses server in sessioned mode server accesses remote data repositories in sessioned mode for efficiency purposes. In order to authenticate subsequent requests from each mobile devices within the same session in a sessioned access mode server assigns a unique identifier to the mobile device on the successful login of the device. Authentication across multiple requests within a single session is necessary due to the occasionally unreliable nature of a wireless connection. For example consider if mobile device accesses server in sessioned mode and server accesses legacy databases in sessionless mode server manages access to legacy databases . Server uses the unique identifier which was assigned on the successful login of the mobile device to obtain the login information for access to legacy databases . This login information is used to execute each action on legacy databases for sessionless access.

Note that in general each client connection is identified by a unique connection identifier. In the preferred embodiment the connection identifier is associated with user during authentication. For example when the user is connected in sessionless mode the connection identifier is used for subsequent requests until user explicitly terminates the connection.

A search request from a mobile device arrives at server as a search string. In the preferred embodiment user can specify a keyword search using a combination of boolean operators AND and OR in any combination of groupings. For example valid search strings are phone and number phone number john or number and john and phone or number . In the preferred embodiment Step parses the search string and normalizes the search string to its disjunctive normal form. That is the search string is converted into a series of AND expressions connected by OR operators. For example john and phone or number is normalized in Step to john and phone or john and number . From Step process each AND expression individually and the input to Step is a list of all the search results of all the AND expressions. For example from Step the search john and phone or john and number will be executed by processing the search john and phone through step followed by john and number . After executing both searches the results of both searches are combined into a single list as input to Step . Thus without loss of generality subsequent descriptions assume the search query is a simple AND expression.

Parsing the search string in Step identifies the search terms within the search query. For example from the search string phone number the search terms phone and number are identified. Subsequent steps will involve annotating these search terms.

After the search string is parsed Step caches the query and identifier of the target remote data repositories. The query is cached for optimization purposes. Standard ranking methods use cached queries to determine the rankings of results based on popularity. In the preferred embodiment in order to reduce communication costs between mobile devices and server the client application only includes the target data repositories to be queried in its initial request. Subsequent requests only contain the search string. Thus Step caches the identifier of the target data repositories i.e. repository id in order to process subsequent search requests.

Step performs stop word filtering while Step performs query expansion on the search query. Stop word filtering involves removing or ignoring certain common words. Step reduces the number of search terms while Step increases the number of expressions and hence the number of search terms. In the preferred embodiment query expansion includes the use of a thesaurus and stemming. The definitions for the thesaurus stemming and list of stop words can be practiced as a definition file that can be modified and updated by user . At step each resulting term expansion is annotated with its original search term.

For example suppose the stemming rules specify that apply can be expanded to applied apply and applying . A search query john and apply where john and apply are identified as search terms will become john and apply or john and applied or john and applying . Expanded search terms applied and applying are annotated with their original search term apply . This annotation is used in result integration step to provide consistency in query answering.

Finally in step determines the type and format required for each search term and annotates the search terms accordingly. In the preferred embodiment a type and format definitions file is defined to allow the user to specify the types and formats associated with a given search term. The type and format definitions file consists of two sections a type definition section and a search term definition section.

In the type definition section a data type name is matched to a list of formats and methods to convert data in one format to another. In the present invention the method to convert between data formats is practiced as the location of the plug in module that can perform the conversion. Format conversions may be required when presenting a consistent query result as determined in step .

In the search term definition section a search term is associated with a list of possible data types. For example suppose the data type dateType was defined in the type definition section the search term deadline can be associated with data type dateType in the search term definition section. Query dispatching and search step uses the data type annotations for each search term to identify search type matches from the data in a target remote data repository.

Instead of a definitions file the type and format definitions can be practiced in a relational database for efficiency. In the preferred embodiment the type and format definitions can be updated and maintained by user .

Step in performs query dispatching and search processing of a client search request. Referring to query dispatching and search module corresponds to the processing at Step .

At Step search results are annotated with a value or weight representing their relevance to answering the query. The weight value of a result can be determined based on query histories user preferences and the original ranking as provided by the native data repository if available .

For each target remote data repository a metadata search Step is performed. In the preferred embodiment if the data repository has a tabular structure the metadata search involves searching on the field names of the tabular data. For a loosely structured data repository in the preferred embodiment Step models each document or database as a tree or hierarchy augmented with information describing the data i.e. the metadata . A tree contains a hierarchy of nodes where each node represents data of a basic form . A form identifies the presentation format of a piece of data in terms of its layout and structure. In the preferred embodiment the possible basic form s of data includes tabular a text segment e.g. a paragraph sentence bulleted and numbered item format. The metadata can include the document or database name author name creation date etc. Similarly for data stored in repository that is of free form structure each document or data in the repository is associated with metadata describing the information associated with it e.g. document name author name creation date etc. .

If a full text index is available for the target remote data repository Step performs a search using the full text index. Otherwise Step performs a manual search for keyword matches. For data with tabular structure Step performs a manual search by querying each table. Additionally in the preferred embodiment Step only queries the columns of tables that have the correct data type. For data with loose structure Step traverses the tree hierarchy to perform the search. Similarly free form data is manually searched by scanning the text of the document or repository. The manual search on free form data for search terms can be implemented using standard string pattern matching algorithms from the field of information retrieval. For example these free form data can be indexed using inverted file index.

Step identifies the search methods to be applied to each remote data repository. The search method for data with tabular structure is tabular search the search method for data with loose structure is loosely structured search the search method for data with free form structure is free form search and the search method for data with mixed structure is defined by the repository connector as shown in .

For each search method if the search method is a tabular search Step performs a tabular search. If the search method is free form search Step processes the search. Step performs the loosely structured search. The step of processing of mixed structure search method not shown in will be described later.

Step combines the results obtained from Step or by performing a join as defined in relational databases . For relational databases the join involves combining the results based on their primary key and foreign key dependencies. These dependencies can normally be retrieved from the database system catalogs. Step performs the join by executing the associated query on the remote data repository. For all other data sources containing data with tabular structure e.g. spreadsheet data Step performs the join based on common attribute names. Alternatively the primary key and foreign key dependencies between data tables can be defined by user in a definitions file.

Step processes the join firstly by joining the two results that contain the least number of matches forming an intermediate result. Next the remaining results are joined to the intermediate result incrementally starting with results with the least number of matches. That is the results are joined two at a time to reduce the processing requirements of Step . Alternatively Step can perform the join on all results at once.

In another embodiment Steps or and Step can be combined. That is the tables in the remote data repository are incrementally queried for matches. Firstly two tables are queried for matches and their results are joined to form an intermediate result. Next the remaining tables are searched and joined incrementally to the intermediate result. That is the results are joined two at a time to reduce the memory requirements of Step .

Step identifies the minimal list of sentences or paragraphs that include at least one match corresponding to each search term. In the case where at least one search term cannot be found within a single sentence or paragraph a minimal region that contains at least one match corresponding to each search term is determined. Step defines a region to be a combination of one or more sentences or paragraphs. For example when user issues a request for search terms A and B and search term A is matched in a free form document at the first paragraph while search term B is matched in the same document at the second paragraph the first and second paragraph are identified by Step as the minimal region.

When the number of matches within a document or data exceeds a predefined threshold or the matches are distributed across the entire document or data Step returns the entire document as the native result. In the preferred embodiment the pre defined threshold can be specified by user and may be specified as the number of matches or a percentage value.

Each minimal region is checked if it contains data that matches the required search term types. If the search term type is not found within the minimal region the search is expanded to adjacent data forms within the document or data until the entire document or data is searched. Once a match is found the search term type matches together with the minimal region form the match result which is the input of Step . For example referring to suppose a client search request is for the search string john and number . Assuming is the original free form document in the data repository Step identifies sentences and as the minimal region. Step is unable to find a search term type in the minimal region. Thus it expands the search to adjacent sentences and paragraphs within document finding sentences and . Finally Step forms the match result which is the input of Step .

Referring to suppose the type and format definitions configuration as described in query analyzing and preprocessing does not contain any data types for search terms john and number . In this case the minimal region containing sentences and are returned as match results to Step .

Step uses the results or nodes obtained from Step or to identify match regions . A match region is identified by the minimal subtree which has descendants that include at least one result node corresponding to each search term. Alternatively in the case where a result node is the ancestor of another result node Step may identify the match region rooted at the latter result node rather than the former. Once the match regions have been identified the match region is adjusted for accuracy by using term type information if available . That is in the preferred embodiment matched nodes are processed in order of their depth in the matched region starting with the deepest matched node. For each matched node its descendants are checked if they contain data that match the required term types followed by the matched node s ancestors. If a term type match has not been found the rest of the nodes in the match region that have not been processed are checked for matching term types. The order that the nodes are processed is important because data that matches the required term type is assumed to be more relevant in a result node subtree than its ancestors. Similarly the rest of the nodes in a match region are less relevant than a result node s ancestors.

For steps and if search types are not defined in the type and format definitions configuration as described in query analysing and preprocessing for the search terms specified the process of matching term types is not executed.

Step performs a mixed structure search by processing the results obtained by step or step . Each result obtained from step or is identified as containing data of tabular form free form or loosely structured form. Thus each result can be processed and searched directly by step or depending on its structure of data.

Finally after the search has been performed Step post processes and caches the native search results. Step annotates each term in the native search result with its repository identifier query identifier data type display format and editable field. The repository identifier for each term is the unique identifier that identifies the target remote data repository. The query identifier is the native command used to retrieve or locate the term. The data type and display format of each term is determined by the term type definitions as described in Query Analyzing and Preprocessing . The editable field associated with each term in the native search result identifies whether the term can be updated or modified by the mobile client user. This information is obtained from the remote data repository via the repository connector e.g. connector or in . In the preferred embodiment the editable field can have values editable not editable and unknown . The editable field has the value unknown when Step is unable to determine if the term value can be modified. This can occur when the query is too complex. Alternatively the annotation for editable field can be associated with each native search result entry rather than each term in each native search result entry. The native result is cached at Step to enable ease in updating

Step identifies the form of the final result based on the requirements of the client profile preferences settings and parameters of mobile device and user . In the preferred embodiment Server identifies an ordered list of preferred forms based on the requirements mentioned above. By identifying the native result form s and final result form Server is able to determine the number of data view s to be generated in Step . For example suppose Step identifies the mobile client as having a preferred final result of tabular form followed by a preference for text paragraph form text sentence form and finally bullet form. Based on the forms of native results and and the list of preferred final result forms Step determines that a single data view should be generated. This is because although native results and are listed as preferred forms of the final result as determined by Server they can also be transformed into tabular form to suit the first preference as identified by Server in Step of the mobile device and user . Step identifies if a native result can be transformed from its original form to a target or preferred form based on a predefined threshold value which may be specified as a system default value or by an administrator of Server .

In the preferred embodiment the threshold values for transforming a source result form to a target result form are defined as follows 

The threshold value for determining if a result with a sentence form can be transformed to tabular form is defined by specifying the maximum number of words within the source sentence. If a native result with a sentence form has more than the threshold number of words Server determines that the native result cannot be transformed to tabular form. Native results with numbered bullet form can only be transformed to sentence form if the result has one sentence. In this case in the preferred embodiment the threshold value is a default value and cannot be modified by a user or administrator externally. Yes and No entries in the definition of threshold values above indicate that a transformation can and cannot be performed respectively. In these cases the threshold values cannot be specified externally. The threshold value for transforming a source result of tabular form to bullet form can be either Yes or No . If the transformation is allowed Server allows the user or administrator to specify how to convert tabular cells to bullet form e.g. one cell to one bullet or multiple cells to one bullet . In the preferred embodiment for native results that have more than one form each form has to satisfy the threshold value in order for Server to determine that the native result can be transformed to the target form . Alternatively Server may transform only the subset of each native result that satisfies the threshold values based on their form .

Referring to suppose native result cannot be transformed to tabular form because the number of words in result exceeds the threshold value. Step determines that data view s of two form s have to be generated a tabular form and sentence form.

After determining the number of data views to be generated Step transforms each native result form to the appropriate data view form. shows the details of Step . If the native result form is of an embedded form Server processes the embedded native result form. If each entry in the embedded native result is of the data types as required by the search terms the entry is decomposed appropriately in Step . As mentioned above search terms are associated with data types if possible that is search terms match data of a particular type . In the preferred embodiment if all entries in the embedded native result contain data of at least one of the data types required by the search terms the native result is decomposed. Alternatively in another embodiment the native result may be decomposed if all entries in the embedded native result contain data corresponding to all the data types required by the search terms. For example consider embedded result . In the preferred embodiment suppose the data type associated with the search terms John and number is a string consisting of whitespace and digits only. The native result will be decomposed in Step because all entries in the embedded native result i.e. the bullet list have the required data type. That is 9888 1111 and 9888 1112 have the data type of a string consisting of whitespace and digits only.

An embedded form is a basic form with a list of forms embedded in it. Decomposition involves creating a list of embedded forms such that each embedded form consists of a basic form with a single form embedded in it. That is each item in the embedded list of forms is associated with the outer basic form. For example embedded result is decomposed into 2 embedded results John Smith phone numbers as the outer basic form with 9888 1111 home as the single embedded bullet item and John Smith phone numbers as the outer basic form with 9888 1112 work as the single embedded bullet item.

Decomposition in Step is also performed on data containing mixed forms. Referring to native search result contains a series of sentence. Native search result is decomposed to intermediate result . Intermediate result contains results and . Step decomposes native search result by identifying the minimal region of data that matches at least one search term types and creates an intermediate result for each search term type region.

Finally in Step performs a shallow transformation on all native results including those that have been decomposed to the final data view form producing intermediate results. A shallow transformation involves changing the internal labeling of the type of a native result form from the original to the target form. For example in shows the intermediate results generated by server after shallow transformation. Each decomposed native result from embedded result is shallow transformed to tabular form and where the table consists of a single cell which holds data with an embedded bullet form. Native results and remain unchanged to and respectively because they are already of the correct final data view form. Native result which has been labelled by Step as a text sentence form is shallow transformed to be labelled as type tabular form where the table consists of a single cell in intermediate result .

Next in Step collates the results in each final data view. Referring to if the final data view is of tabular form server determines the number of columns in the final data view. In the preferred embodiment Step identifies the number of search terms T that have data types associated with them. Each intermediate result after shallow transformation is processed to determine the number of values t with data types excluding those with text data types within it in Step . For example referring to assuming the search terms John and number where number has an associated data type of a string consisting of whitespace and digits only T 1 and intermediate results and have t 1. Step calculates the number of columns required in the final result by determining the maximum value of t t max for all intermediate results and using the following formula Number of columns in final result T t max 1 Hence the number of columns in the final result from is 2. Using the number of columns in the final result as determined in Step Step partitions each intermediate result in the required number of columns if possible. That is Step identifies the data values in each intermediate result that have a given search term data type and moves those data values to the appropriate column and collects the remaining text into a single text form. For example in the preferred embodiment intermediate result has 9888 1111 identified as a data type of a string consisting of whitespace and digits only as required by the search terms. 9888 1111 is then moved to the next column cell and the data remaining is collected into a single text form John Smith phone number home as shown in .

Consider a search request using the search terms name and number which generates the intermediate result . Suppose Step identified John as a data type of a string consisting of a name which is also the data type for search term name but was unable to identify any data to match the data type for search term number . In this case if Step calculates the number of columns to be 3 due to the data in other intermediate results Step is unable to partition into 3 columns one for name one for number and another for the remaining text. The output of Step will be a data view with tabular form where the entry corresponding to will have John in the name cell mobile number is 0288459911 in the text cell and an empty number cell.

Additionally the number of columns in the final data view can have a pre defined upper bound on the client profile e.g. due to limited display size of the client device . If the value calculated in Step exceeds this upper bound each intermediate result will be partitioned into the pre defined number of columns as necessary. For example columns with the most number of empty cells will have their data merged with the single text form cell.

Step performs ranking and duplication elimination of each final data view . Each entry in the final data view is annotated with its weight value at Step . This weight value is used in Step to rank the entries within each data view . Duplicate elimination removes entries that have the same values for concise presentation. Duplicate elimination is a default setting in the preferred embodiment but can be disabled.

As a final step to the result integration process Step performs type coercion and data translation for each data view . Type coercion converts each data entry s values in the final data view to a consistent format across entries. This allows users of mobile devices to view process and manipulate data view s easily. From Step each entry is annotated with its data type and display format. For each data type the most common display format or the preferred display format is identified as the target display form. All values of that data type are converted to the target display format. Each entry value that is converted to the target display format has its annotation augmented with the new display format i.e. each entry is now annotated with the data type native display format and actual display format . This extra annotation is used by Step for processing a client check in request. For example shows a data view before and after type coercion for a search request using search terms deadline and date . Data view is one of the outputs of Step after the native results have been transformed and collated to a data view. Entries and have different display formats of date values. Step identifies entries and to have the most common display format. Thus all other date entry values are converted to that display format resulting in entries and . Additionally the type coercion can be defined by an external plug in process application or module. For example type coercion may involve translating different types of currency data into a common or preferred currency using an external plug in. Another example an external module can be used to translate multi language text entries into English.

As described in query analyzing and preprocessing the methods for converting between formats is defined by the type and format definitions configuration.

Furthermore Step translates search terms that are included in the final data view to their original search terms. Referring to the description on query analyzing and preprocessing during query expansion step expanded search terms are annotated with their original search term. Step uses the annotation containing the original search term to provide a consistent query result to user .

Step performs transformation of the final data view to a format that is determined from the client profile. Transformation component defines transformation clusters that comprise document formats and links between these document formats representing the ability to transform between the formats. At the core of each major transformation cluster is the document format that can be transformed to the core of another major transformation cluster. By defining the method of transformation between these major transformation clusters Step can transform all identified document formats to any other format.

For example shows a conceptual diagram of an example of transformation clusters. Major transformation cluster is the Microsoft Word format which has a bi directional link with XML transformation cluster indicating that Microsoft Word documents can be converted to XML documents and vice versa. Within the Microsoft Word transformation cluster bi directional links are present between the core format and document format WordPerfect 4.x and RTF . Document format WordPerfect 4.x in turn has a bi directional link with WordPerfect 3.x indicating that WordPerfect 4.x documents can be converted to WordPerfect 3.x and vice versa. XML major transformation cluster has a bi directional link with XHTML document format which in turn is bi directionally linked with HTML document format . Thus Step is able to transform a document from WordPerfect 3.x format to XHTML by first converting it to WordPerfect 4.x then to Microsoft Word then to XML and finally to XHTML.

Based on this architecture any new document formats that have not been built into Transformation component can be supported for transformation easily. This is possible because Transformation component will only have to define transformations to and from the new document format and all the core formats of each existing transformation cluster. After this definition the new document format can be the source or target transformation format for any transformation.

Note that the architecture illustrated in is applicable to all types of file formats such as image files e.g. JPEG TIFF voice or music files e.g. WMA MP3 and movie files e.g. AVI MPEG .

Transformation component also defines a list of direct link mappings shown in as . This list contains mappings that represent direct links between document formats. From indicates that there is a direct link from RTF to HTML which is indicated as a dashed arrow from to . This means that to transform an RTF document to HTML rather than perform the transformation via the Microsoft Word format and XML format Step is able to transform the RTF document directly. The same concept of transformation clusters is also used by Step in document transformation.

The original format or form of the final data view is one of the forms specified in result transformation . In the preferred embodiment it includes tabular a text segment e.g. a paragraph sentence bulleted and numbered item format. Step is different from the transformations performed in Step in that Step determines the final document format of the data view while Step determines the basic form of the data view . For example from Step may determine that the tabular data view should be transformed to a HTML document because mobile device is only able to view display or process HTML documents. From major transformation cluster represents all possible form s of a data view . The bi directional link between and indicate that all data view forms can be transformed to and from XML. Thus transforming a tabular data view to HTML involves converting the data view to XML then to XHTML and finally HTML format. Referring to the HTML result is displayed in .

As mentioned above a data view is augmented with a direct link . Standard applications will display a direct link as a clickable link that allows user to navigate to the target of the link e.g. a link in a HTML document . In the preferred embodiment in the case where the final format of the data view is unable to be represented as a clickable link that user can follow the string representing the direct link is shown in textual form instead. User can then use this string representation to access the document or data in the remote data repository manually by executing the string request on server via a client command rather than clicking and following a link .

To facilitate efficient communication between the mobile client and server compression algorithms can be employed to compress data transmitted between mobile device and server in Step in . De compression component at client program decompresses all compressed data responses received from server . For secure applications encryption can also be employed. This compression algorithm can be built into the system or as an external module plug in or application that interfaces with server .

Display layout optimization step is practiced in client program . Despite the output customization through document result format transformation in Step and based on the client profile further layout optimization may be necessary at the client. This is to handle situations when user changes their settings or preferences or interacts with the result search or document on the fly. For example when user enlarges the font size of text shown on the mobile device display the layout of the results has to be adjusted as necessary. Step also optionally optimizes the result output on screen to user and allows user to perform a local search on the result. In the preferred embodiment for example when a phone number appears in a result multiple times clicking on a phone number instance will cause Step to perform a local search on the results and highlight all identical instances. Furthermore Step can provide a quick method to jump to the next identical instance.

Additionally in the preferred embodiment based on the edit annotations of each entry in the query result as annotated in Step Step displays entries that are editable as editable fields in the query result. This restricts the user of mobile device to modifying only the entries that can be modified at the remote data repository. Although some modifications allowed by Step in the display may still not be able to be executed on the remote data repository e.g. due to the complexity of the query for a relational database this reduces the number of client check in error messages that user will encounter.

Display layout optimization step caches and stores a history of queries links or results that were requested by mobile device user. This enables fast invocation of a past query link or result. For example in the preferred embodiment the history is utilized in client program via the graphical user interface as a drop down list in the keyword search field enabling the user to select a past query quickly. The history list can be sorted by inverse chronological order where the first entry is the most recent client request. Alternatively step can maintain the amount of time a user spends accessing or processing a request result and use these timings to order the history entries.

Step in involves the retrieval of documents or data based on a client request. Depending on the remote data repository the document or data is to be retrieved from the client request associated with the direct link . Standard methods of document or data retrieval are used in Step via Repository interfacing component .

In the preferred embodiment if the remote data repository is a relational database consisting of several tables of rows and columns of data data retrieval would involve accessing the remote data repository executing the native query associated with the direct link and converting the native query results into a tabular document. If the remote data repository is a local file repository document retrieval would involve accessing the document using the file path as specified in the direct link .

Step performs document transformation when the client request is for a document or data from the remote data repository . Using the transformation clusters as described in Step for result transformation Step is able to transform any document from its original format to a target format. As with result transformation the target format in Step is determined based on the client profile and capabilities of mobile device . For example if the client requests for an XHTML document and the client is unable to view XHTML documents Step converts the XHTML document to RTF which the client can view. Here the target format is RTF. The transformation is done by converting the XHTML document to XML the converted XML document to Microsoft Word and finally the converted Microsoft Word document to RTF. The transformed document in the target format is transmitted to the client for processing.

In addition Transformation module i.e. Step can be practiced as a separate module which can be interfaced with other systems. For example when interfacing with a mail server an application that displays emails can provide a link to email attachments. The processing of these links will be delegated to Step which will transform the required attachment document to the appropriate document format. This feature is especially useful for mobile email users when their mobile devices have a limited number of applications installed that are able to retrieve the content of their email attachments.

In the preferred embodiment consider if Step retrieves data from a relational database and returns a tabular document to the client. When the client updates the tabular document and checks in the updated document Steps and save the tabular document to the remote relational database by updating the database based on the entries that have been modified added or removed. If an update of the database is not possible due to the complexity of the query that retrieved the tabular document user will be notified that the check in is not allowed.

If the client check in request is to modify a data value i.e. when the user modifies a data value directly in the search result Step determines a repository id command old value new value value to be used to update the remote data repository appropriately. repository id is the unique identifier used to identify a remote data repository and command is the native command or query used to retrieve the data that is being modified. For example if accessing local files command represents the file offset where the data value to be modified is located. If accessing relational databases command represents the SQL statement used to retrieve the data being modified. Alternatively for relational databases command can have a reference to the cursor of the executed SQL statement used to retrieve the data being modified. old value is the original value of the data in its original format before it was modified. new value is the new value of the data in its original format that is has been modified to. Referring to Step performs API calls using the repository id command old value new value value.

In Step of result integration data values which are converted to a target display format are annotated with their target display format. If the data value that is checked in is associated with a target display format annotation Step performs a conversion to convert the modified data value from the target display format to the original display format. This conversion is similar to the conversion in Step . Step accesses the appropriate remote data repository using the value of repository id and uses API calls to update data values in remote data repositories as necessary.

Referring to suppose the client changes the date at to 2005 09 28 Step determines the triple repository id MyDB1 cursorID 101 fieldID 4 15th Sep. 2005 28th Sep. 2005 . That is Step converts 2005 09 28 to its original date format 28th Sep. 2005 based on the annotations of the original data value 15th Sep. 2005 . The appropriate remote data repository with repository id MyDB1 is accessed and the data value at cursorID 101 fieldID 4 where cursorID 101 fieldID 4 is the value of command is changed from 15th Sep. 2005 to 28th Sep. 2005 .

All accesses to remote data repositories in Step and in are controlled by repository interfacing module in . In particular update module updates the target data repositories using the appropriate connector one of and based on repository and connector registry . Appropriate feedback is provided to mobile device user on completion of processing of the client check in request.

Note that the client is required to have the appropriate access permissions to modify add or remove any data or documents in the remote data repository . In the preferred embodiment if the client does not have the necessary permissions for the request feedback will be provided to the user via a message dialog displayed on mobile device . Additionally in the case where the modification of data or documents involve multiple remote data repositories the client is able to pre define the behaviour of Step if one or more of the updates are unable to be executed e.g. due to insufficient access permissions to the repository . That is the client can specify that if one or more of the updates are unable to be executed all updates should not be committed to the repositories or that only those that can be executed are committed.

In an alternative embodiment where display layout optimization in does not use the annotation information from Step and displays all entries as editable user is able to edit all entries even for remote data repositories that are read only. In this case appropriate feedback for all unsuccessful requests will be provided to the user.

Referring to Step processes client commands by maintaining a list of mappings matching a unique keyword to one or more API calls modules or commands that can be executed by Server . User may perform a client command request specifying a keyword with one or more terms that will be used as arguments to the API calls modules or commands. The API calls modules or commands may further invoke other applications commands or operations that can be accessed by Server . Furthermore the API calls modules or commands may operate on data repositories . The results or output of a client command can be stored at Server or at remote data repositories . The results or output is accessible to user via a list of results shown in containing one or more direct link s.

In the preferred embodiment the user interface presented to user for executing a client command is the same as the search query interface in . Alternatively the client command user interface can be practiced as a separate interface or mode.

In the preferred embodiment user can browse through available documents in a remote data repository rather than search for a specific document.

Referring to a client command is available to maintain repository and connector registry . Such client commands include adding a new repository id keywords entry to registry and modifying an existing repository id keywords entry.

A browse command is available to browse the summary of the files available in the remote data repositories . A summary of each file includes a direct link to the actual document last modified date etc. Server also allows user to retrieve a document based on a direct link specification i.e. the string representation of a direct link . This is necessary for manually following a direct link from a search result displayed on a limited mobile device. In particular suppose Server defines the mapping browse to the system command for retrieving the statistics or properties of all documents in a remote data repository . User can perform the client command browse C windows on a target local file data repository . In the preferred embodiment this returns a list of result entries containing an entry corresponding to the client command for locating all files in folder C windows and entries corresponding to the search results for the search terms browse and C windows . The result entries are collated in step result transformation . By following the direct link associated with the client command from the result entries user issues a client command request. Step processes the direct link associated with the client command by executing the command on remote data repositories . The client command output or result is returned to user in a method similar to processing a direct link i.e. Steps and in . That is the output or result is processed by Step document transformation to convert it to an appropriate format that can be processed by user . Thus the output format of the client command can be customized by defining transformations between the output format of a given command to the core format of each transformation cluster as described in .

Additionally other commands that server supports in the preferred embodiment include user account administration file management e.g. renaming removing files etc and saving search results locally or on server .

In an alternate embodiment the present invention can be practiced as a document processor program. Referring to the document processor program can reside on mobile device . Although only shows mobile devices as being able to access server other computer systems e.g. networked computers etc can access server via Data Network e.g. via an Intranet .

An example of the document processor program is shown in . User can perform a search and paste operation when editing a document. A search and paste operation allows user to perform a search using a search string on a series of remote data repositories . Based on the location of the cursor within the document search results are formatted to a target format and selected results can then be pasted into the document.

Referring to the alternate embodiment performs steps Authenticate analyzing and preprocessing query query dispatching and search result integration and optionally result transformation.

When user executes a search by clicking on Search button Step analyzes and preprocesses the search string. The target remote data repositories can be predefined or determined previously e.g. by user specifying a list of remote data repositories that contain bibliographic information . Next similar to the preferred embodiment Step performs query dispatching to the appropriate data repositories and performs a search for matches.

Finally result integration Step integrates all search results. In particular referring to Step performs the type coercion and data translation for each data view . In the alternate embodiment if the document processor program has context information about the format of the surrounding data Step uses this format to translate the native results rather than the most common format of results. For example in user has already typed in the first entry of the bibliography. Based on the location of the cursor in the application Step can derive the format of the first entry and use the format as the target format for data translation of each result.

Next user selects the result entries from results that they want to insert into the document at cursor . The results are pasted in the document when the Paste button is clicked. Depending on the cursor location it may be necessary to perform result transformation Step on the selected result entries. For example if the document being edited is a Microsoft Word document it is necessary to transform each selected result in from bulleted data view form to Microsoft Word format.

Note that each result entry also has a direct link details . In the alternate embodiment the direct link allows user to navigate to extra information about the result e.g. the search result before translation and coercion the remote data repository where the search result was obtained from etc .

By performing type coercion data translation and result transformation search results can be easily used by user by inserting the selected search result entries into the document.

There have been described and illustrated herein a method and system for wireless remote information retrieval and document and data updates. While a preferred embodiment of the invention has been described it is not intended that the invention be limited thereto as it is intended that the invention be as broad in scope as the art will allow and that the specification be read likewise. Thus while particular hardware and software has been disclosed in order to implement the invention it will be appreciated that other hardware and or software could be utilized to achieve substantially the same results in substantially the same manner. It will therefore be appreciated by those skilled in the art that yet other modifications could be made to the provided invention without deviating from its spirit and scope as so described.

