---

title: Extensible controls for a content data repository
abstract: An extensible control interface is provided to simplify access to the content management repository. Developers can write extension interfaces associated with new data types, where the extension interfaces extend the extensible control and are annotated with the control extension annotation. These new interfaces can specify the repository name and declare various methods annotated with annotations. Parameters of the various methods can also be annotated to supply needed information. Using an annotation process tool (APT), the developer can generate the bean and implementation classes and the methods can subsequently be called upon to perform operations on types in the repository. For example, the extensible control can take care of interacting with the type manager to perform the needed actions within the repository in order to create the new object classes and nodes. Object classes can be created on the first call, while node instances upon each call of the create method.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07805459&OS=07805459&RS=07805459
owner: BEA Systems, Inc.
number: 07805459
owner_city: Redwood Shores
owner_country: US
publication_date: 20061117
---
This application claims priority to U.S. Provisional Patent Application No. 60 737 621 filed Nov. 17 2005 entitled SYSTEM AND METHOD FOR PROVIDING A COMMUNITY FRAMEWORK IN A COLLABORATIVE COMPUTING ENVIRONMENT and U.S. Provisional Patent Application No. 60 742 186 filed Dec. 2 2005 entitled SYSTEM AND METHOD FOR PROVIDING A COMMUNITY FRAMEWORK IN A COLLABORATIVE COMPUTING ENVIRONMENT WITH SEARCH CONTROLS and this application is a Continuation in Part of U.S. patent application Ser. No. 11 366 268 filed Mar. 2 2006 entitled SYSTEM AND METHOD FOR PROVIDING EXTENSIBLE CONTROLS IN A COMMUNITIES FRAMEWORK all of which are all hereby incorporated herein by reference.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

This application is related and cross referenced to the following applications which are incorporated herein by reference 

U.S. patent application Ser. No. 11 366 268 entitled SYSTEM AND METHOD FOR PROVIDING EXTENSIBLE CONTROLS IN A COMMUNITIES FRAMEWORK by Cindy McMullen et al. filed on Mar. 2 2006.

U.S. patent application Ser. No. 11 601 553 entitled SYSTEM AND METHOD FOR PROVIDING EXTENSIBLE CONTROLS IN A COMMUNITIES FRAMEWORK by Ray Polk et al. filed on Nov. 17 2006.

U.S. patent application Ser. No. 11 367 519 entitled SYSTEM AND METHOD FOR PROVIDING GENERIC CONTROLS IN A COMMUNITIES FRAMEWORK by Cindy McMullen et al. filed Mar. 3 2006.

The invention relates generally to content management and in particular to data type creation within a content data repository.

Content and data management has become an integral part of a vast majority of various enterprises and other businesses struggling to keep up with the demands of today s ever changing technology. For example a typical enterprise utilizes a myriad of databases file systems applications and other means to manage its digital content. In a common scenario various vendors provide their own proprietary version of a content management application that extends a storage layer such as a relational database with service facilities that almost any modern content application requires.

With such growing popularity of content management systems the need for a common standardized way to access the repositories has become apparent. The current content repository for Java technology specification developed under the Java Community Process as JSR 170 attempts to provide a standard application programming interface API to meet such a need. JSR 170 API defines how an application and a content repository interact with respect to a number of content services. However even with such standard interfaces various difficulties remain for software developers using these systems.

For example the typical content management system has an API that the developer must learn in order to perform various tasks within the repository such as creating editing updating and removing data. When using the repository directly a developer must also typically describe and define the data types in a separate configuration file. Code can then be written that is aware of the defined data types and this code is typically stored in a separate location within the system. This presents dual code maintenance difficulties. For example when the developer wishes to modify or create new data types within the repository both of these files must typically be edited in order to bring about the appropriate changes.

What is needed is a more direct and user friendly approach to managing data within the content repository one that enables developers to easily create new data types as well as modify and access existing content.

The invention is illustrated by way of example and not by way of limitation in the figures of the accompanying drawings in which like references indicate similar elements. References to embodiments in this disclosure are not necessarily to the same embodiment and such references mean at least one. While specific implementations are discussed it is understood that this is done for illustrative purposes only. A person skilled in the relevant art will recognize that other components and configurations may be used without departing from the scope and spirit of the invention.

In the following description numerous specific details are set forth to provide a thorough description of the invention. However it will be apparent to those skilled in the art that the invention may be practiced without these specific details. In other instances well known features have not been described in detail so as not to obscure the invention.

Although a diagram may depict components as logically separate such depiction is merely for illustrative purposes. It can be apparent to those skilled in the art that the components portrayed can be combined or divided into separate software firmware and or hardware components. For example one or more of the embodiments described herein can be implemented in a network accessible device appliance such as a server. Furthermore it can also be apparent to those skilled in the art that such components regardless of how they are combined or divided can execute on the same computing device or can be distributed among different computing devices connected by one or more networks or other suitable communication means.

In accordance with various embodiments of the invention extensible controls are presented for allowing a developer to easily create and modify data types within the content repository. A control can be a reusable component that can encapsulate logic for use by various clients such as applications in order to gain access to various resources such as EJBs databases web services as well as other controls. Extensible controls can provide a simple and user friendly approach to managing data and performing various operations within the content repository.

In typical content management systems data types are usually described in some form of a configuration file. Code can then be written that is aware of the data types defined in this file e.g. various properties of the data type . Thus if a user wished to create a new data type or add new properties to an existing data type he or she must usually edit both of these sources i.e. the configuration file and the file containing the Java code. This form of dual code maintenance can be burdensome especially in cases where users do not have security access to perform both operations.

Extensible controls can govern both of these functions from a single source of information in a programmatic and unified way based on annotations placed on various methods. As an illustration the create method can be annotated with property information. Subsequently if a developer wished to add a new property to that create method he or she would need only to change that create method thereby adding a new property there rather than having to maintain dual code configuration information in several sources. Furthermore since controls can be overridden by users upon instantiation they can allow developers to change the data types or other features of the extensible controls. Thus for example at the time a control is instantiated a client or user can override some of the values that are defined in that control allowing for various changes to be implemented for a data type. The fact that the data is available via the annotation allows such extensibility of the various controls.

In various embodiments a CMX extensible control is provided to simplify access to the content management repository. As an illustration to create an object class and a node of a new type a developer can write an extension interface for that new type where the interface extends the CMX control and is annotated with the control extension annotation. This new interface can specify the repository name and declare a method annotated with a create annotation. One argument of this method can be annotated with a parent id annotation and another argument can be annotated with a property annotation to supply the needed type information. Using an annotation process tool APT a bean is generated from this new interface and the annotated create method can subsequently be called upon to create various new types in the repository. The CMX control can take care of interacting with the Type Manager to perform the needed actions within the repository in order to create the new type i.e. the object class and the node . The object class can be created on the first call and the node instances can be created upon each call of the create method.

As illustrated the control framework can include a basic CMX Control as well as the extension of this basic control Foo CMX Control interface which can be created by the developer for a new data type within the content data repository . Data within the repository is normally stored in a hierarchy of nodes and each of which can have one or more properties. A property object can represent the smallest granularity of content storage within the repository. In one embodiment the property has exactly one parent node and has no children nodes. The property can consist of a name and a value associated with the name.

Each node can contain data that is of a specific data type. The data type can be specified by a simple Java object that wraps the node and provides information about the data contained in the node. Thus the content type itself can be considered to be a bean type and all operations on the bean can be delegated to the node within the repository.

As an illustration in order to create the new data type an interface Foo CMX control can be provided. This interface can include a number of annotations . These annotations are used to specify the various properties of the new data type node in the repository. For example the Foo CMX control can have a create method annotated with the annotation Create so as to inform the CMX control that this method will be used to create a data type in the repository. Of course other such method definitions can be used to provide various other functionality such as findby update move and delete methods all of which can be appropriately annotated. Furthermore parameters on each of these methods can also be annotated to provide information about the properties for the new data type. For example the parameters of the create method above can be annotated with the Property annotation in order to specify what kind of properties the new data type will have.

The CMX control can contain logic to translate the various annotations of the Foo CMX control into the content management types and creating the node within the repository . In one embodiment the CMX control works with the Type manager of the repository in order to look for the content type lazily instantiate the type if it does not exist and instantiate an instance of the node once that type is created. In a similar fashion the process of updating deleting moving and finding and performing other types of actions within the repository can be done via the Type manager working with the CMX control.

In this manner extensible controls make finding a node by expression within the repository as simple as writing an annotation on an interface method or creating a new data type within the repository and a new instance of that type as simple as writing a create annotation defining properties and calling the method.

In various embodiments generic controls can also be provided as an abstraction layer above the extensible controls in order to encapsulate various business logic and high level functionality associated with various content.

As shown the generated CMX Control bean and the CMX Control Implementation class can implement the CMX Control interface . The CMX Control Impl can be further related to the Node Manager class which may have various methods such as the createNode method. The Node Manager can perform various CRUD operations as required by the system.

In one embodiment a developer may wish to create a new data type. For illustration purposes one such data type may be called Issues and another can be named foo. A developer can create an Issues CMX Control interface and annotate the methods and method parameters therein. This Issues CMX Control interface can extend the extensible control CMX Control interface. Similarly the developer can write a Foo CMX Control interface that is an extension of the original CMX Control and appropriately annotate its methods.

The APT and the compiler can generate the Issues CMX Control bean and the Foo CMX Control Bean classes both of which implement the extensible CMX control interface and extend from the CMX control bean which is also generated by the APT . These generated classes can take care of interacting with the content repository and creating reading and editing the various data types therein.

As illustrated in step a developer can first create a file and name it corresponding to the name of the new data type. An interface for the data type can then be defined in this file. For example this new interface can be the Foo CMX control and it should preferably extend the extensible control by having been annotated by the appropriate ControlExtension annotation. This annotation can refer the compiler to the extensible control and inform it that this new interface is an extension of the extensible control.

In step the developer can write method interfaces and annotate them appropriately. It should be noted the developer can be shielded from having to write any code that is specific to the content management system or know the details of how to create read update or delete nodes within the actual repository. For example the developer can add a create method and annotate the method with a create annotation. In step the developer can specify a type name for the new data type that is being created and optionally specify which existing data type this new type will extend.

In step the new file can be processed using the annotation processing tool APT and the java compiler in order to generate an implementation class and the bean. Thus following the example above a Foo CMX control Impl and a Foo CMX control Bean would be generated by the APT as shown in step .

In step this implementation class and bean can process the various annotations that are placed on the methods in the Foo CMX control and provide them to the control context. In step after processing the annotations they can make calls to the invoke method of the CMX control. In one embodiment the CMX control has a number of methods which correspond to the various annotations placed on the Foo CMX control methods. Thus as illustrated in step for every method call on Foo CMX control an invoke method is called upon in CMX control which then redirects those methods into the corresponding CRUD methods in the CMX control which handle the interaction with the Type Manager of the content repository.

A non limiting exemplary list of the various annotations used within the embodiments of the present invention is shown below 

One embodiment of this invention may be implemented using a conventional general purpose of a specialized digital computer or microprocessor s programmed according to the teachings of the present disclosure as will be apparent to those skilled in the computer art. Appropriate software coding can readily be prepared by skilled programmers based on the teachings of the present disclosure as will be apparent to those skilled in the software art. The invention may also be implemented by the preparation of integrated circuits or by interconnecting an appropriate network of conventional component circuits as will be readily apparent to those skilled in the art.

One embodiment includes a computer program product which is a storage medium media having instructions stored thereon in which can be used to program a computer to perform any of the features present herein. The storage medium can include but is not limited to any type of disk including floppy disks optical discs DVD CD ROMs micro drive and magneto optical disks ROMs Rams EPROM s EPRO Ms Drams Rams flash memory of media or device suitable for storing instructions and or data.

Stored on any one of the computer readable medium media the present invention includes software for controlling both the hardware of the general purpose specialized computer or microprocessor and for enabling the computer or microprocessor to interact with a human user or other mechanism utilizing the results of the present invention. Such software may include but is not limited to device drivers operating systems execution environments containers and user applications.

Embodiments of the present invention can also include providing code for implementing processes of the present invention. The providing can include providing code to a user in any manner. For example the providing can include transmitting digital signals containing the code to a user providing the code on a physical media to a user or any other method of making the code available.

Embodiments of the present invention can include a computer implemented method for transmitting code which can be executed at a computer to perform any of the processes of embodiments of the present invention. The transmitting can include transfer through any portion of a network such as the Internet through wires the atmosphere or space or any other type of transmission. The transmitting can include initiating a transmission of code or causing the code to pass into any region or country from another region or country. For example transmitting includes causing the transfer of code through a portion of a network as a result of previously addressing and sending data including the code to a user. A transmission to a user can include any transmission received by the user in any region or country regardless of the location from which the transmission is sent.

Embodiments of the present invention can include a signal containing code which can be executed at a computer to perform any of the processes of embodiments of the present invention. The signal can be transmitted through a network such as the Internet through wires the atmosphere or space or any other type of transmission. The entire signal need not be in transit at the same time. The signal can extend in time over the period of its transfer. The signal is not to be considered as a snapshot of what is currently in transit.

The foregoing description of preferred embodiments of the present invention has been provided for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations will be apparent to one of ordinary skill in the relevant arts. For example steps preformed in the embodiments of the invention disclosed can be performed in alternate orders certain steps can be omitted and additional steps can be added. The embodiments where chosen and described in order to best explain the principles of the invention and its practical application thereby enabling others skilled in the art to understand the invention for various embodiments and with various modifications that are suited to the particular used contemplated. It is intended that the scope of the invention be defined by the claims and their equivalents.

