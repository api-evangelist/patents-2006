---

title: Application specified steering policy implementation
abstract: A data plane architecture enables IP applications, hosted on any processor within a network element, to define steering policies that may be implemented in the data plane. The steering policies enable the applications to define steering policies containing both attributes and actions. The attributes are used to identify the packets and the actions are used to define how the data plane of the network element should handle the packets. The steering policies are implemented in the data plane of the network element by a data path policy steering process. The data path policy steering process operates to implement steering policies defined by applications to cause IP termination to occur at any processor on the network element or optionally at a processor off the network element.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07643496&OS=07643496&RS=07643496
owner: Nortel Networks Limited
number: 07643496
owner_city: St. Laurent, Quebec
owner_country: unknown
publication_date: 20061228
---
This application is a Continuation in Part of U.S. patent application Ser. No. 11 241 612 filed Sep. 30 2005 entitled Method And Apparatus For Specifying IP Termination In A Network Element the content of which is hereby incorporated herein by reference.

This application relates to network elements and more particularly to application specified steering policy implementation in a data plane of a network element.

Data communication networks may include many switches routers and other devices coupled to and configured to pass data to one another. These devices will be referred to herein as network elements . Data is communicated through the data communication network by passing protocol data units such as frames packets cells or segments between the network elements by utilizing one or more communication links. A particular protocol data unit may be handled by multiple network elements and cross multiple communication links as it travels between its source and its destination over the network.

The network elements on the communication network such as subscriber gateways provider edge network elements and provider network elements communicate with each other using predefined sets of rules referred to herein as protocols. Multiple protocols exist and are used to define aspects of how the communication network should behave such as how the network elements should identify each other on the network the format that the data should take in transit and how the information should be reconstructed once it reaches its final destination. Examples of several protocols include Asynchronous Transfer Mode ATM Frame Relay FR Ethernet Transport Control Protocol TCP Internet Protocol IP Point to Point Protocol PPP and Multi Protocol Label Switching MPLS although there are probably more than 100 other protocols as well that may be used to govern aspects of communications taking place over the network.

As networks have increased in size and sophistication the number of applications required to be supported on a given network element has increased dramatically. The applications generally allow the network element to process control and or data packets to allow particular protocols to be implemented and services to be provided by the network element. Depending on the particular application more than one instances of a given application may need to be started on a network element to enable traffic to be segregated or to enable load sharing to be implemented between the processors in the network element.

One way to enable a network element to handle larger numbers of applications is to provide multiple processors in the network element. A large network element may include several processors such as CPUs and Network Processing Units NPUs to enable it to handle the load placed on the network element in connection with handling data traffic and in connection with providing network services.

Although multiple processors may enable packets to be processed more efficiently the use of multiple processors requires the packets to be directed within the network element to the correct processor. Accordingly it would be advantageous to provide a way to enable applications to specify steering policies and to provide a way to implement the steering policies in a data plane of a network element.

Accordingly it would be advantageous to have an architecture that would enable IP applications to be hosted on any processor within a network element and define steering policies in the data plane that will enable actions to be defined for packets identified by particular applications. According to an embodiment of the invention IP applications are allowed to define steering policies containing both attributes and actions. The attributes are used to identify the packets and the actions are used to define how the network element should handle the packets. The steering policies are implemented in the data plane of the network element by a data path policy steering process. The data path policy steering process operates to implement steering policies defined by applications to cause IP termination to occur at any processor on the network element or optionally at a processor off the network element.

Policies are defined by applications and passed to a steering policy manager that validates the policy. If the policy is valid the policy is passed to one or more application agents configured to program the steering policy into the data path policy steering process. The data path policy steering process is configured to process packets received by the network element to determine if the packets match one or more steering policies and if so to cause the action s associated with the steering policies to be implemented with respect to those packets.

The following detailed description sets forth numerous specific details to provide a thorough understanding of the invention. However those skilled in the art will appreciate that the invention may be practiced without these specific details. In other instances well known methods procedures components protocols algorithms and circuits have not been described in detail so as not to obscure the invention.

In the embodiment shown in the network element generally includes a control plane and a data plane . The control plane is configured to control operation of the network element by specifying how the data plane should handle particular packets or classes of packets. The control plane generally includes control cards each of which includes one or more processors such as a CPU . The control cards may be interconnected with each other and with the data plane in a known manner.

The processors may host one or more applications routing entities and other processes. One or more of the processors may also implement aspects of a steering policy management system discussed in greater detail below. The steering policy management system may include for example an application ID generator a steering policy manager and a steering policy database although additional components may be included as well. Additionally the steering policy management system may be implemented on a single processor as shown may be distributed across more than one processor or may be implemented external to network element . The invention is not limited to the particular manner in which the steering policy management system is implemented in the control plane. Additional details of how the steering policy management system may be implemented from a control plane perspective are contained in the parent application referenced above the content of which is hereby incorporated herein by reference.

The network element also includes a data plane configured to handle packets of data on the communication network. The data plane generally includes one or more Input Output I O cards and one or more data cards . The data plane may also include components such as a switch fabric and other such components to enable packets to bet transferred between the cards of the data plane and between the data plane and control plane.

The I O cards are configured to connect to links in the communications network . The I O cards may include physical interfaces such as optical ports electrical ports wireless ports infrared ports or ports configured to communicate with other physical media as well as configurable logical elements capable of being programmed to implement interface definitions specified by an interface manager. Packets received over the I O cards are passed to the data cards for processing.

The data cards include one or more processors such as a CPU and a network processing unit . The CPU may host applications and other processes on the data card . The CPU may also implement an application agent via which steering policies defined by the applications may be passed to the network processing unit . The network processing unit may be more optimized to perform network processing on packets of data received via the I O cards. For example the network processing unit may implement a process to perform forwarding information base lookups for packets that arrive at the data card . According to an embodiment of the invention a data path policy steering process may be implemented in the network processing unit to enable the data plane to cause actions to be performed for packets matching steering policies defined by the applications and passed to the NPU by the application agent .

In the embodiment shown in an application may be started on one of the CPUs in the control plane or in one of the CPUs in the data plane . The application according to an embodiment of the invention includes a dataplane API configured to enable the application to interface with the dataplane to define steering policies as described in greater detail herein. Upon initiation the application will interface with an application ID generator via the dataplane API to obtain a unique application ID. The application ID is a globally unique identifier within the network element that will enable steering policies generated by the application to be associated with the application.

Once the application has been assigned an application ID the application may pass information to the API to cause the API to generate steering policies on behalf of the application that will enable IP packets to be terminated at one or more designated processors i.e. NPU and or CPU within the network element. Additional details about steering policies and a possible way of implementing the steering policies in the data plane are discussed in greater detail below.

Steering policies generated by the dataplane API on behalf of the applications are passed to a steering policy manager which validates the steering policies and causes the policies to be stored in a steering policy database . Additional details about how steering policies may be implemented from a control plane perspective are set forth in the parent application referenced above the content of which is hereby incorporated herein by reference. The invention is not limited to an implementation that is utilized in a VPN context or to an implementation containing all the details described in the parent application however as the data plane architecture described in greater detail below may be used in connection with many different control plane architectures.

If the steering policy is valid the dataplane API will pass the steering policy to one or more application agents on one or more of the CPUs . The application agent s will pass the steering policy to the NPU to cause the steering policy to be implemented by the data plane policy steering process so that IP packets meeting the attributes specified in the steering policy will be handled as defined by the actions set forth in the steering policy. By allowing the applications to interface with the dataplane API the data plane can operate with any application without requiring the application to be modified as the dataplane is changed and without requiring the dataplane to be reprogrammed each time a new application is developed to run on the network element.

In operation the NPU will receive packets perform a forwarding information base lookup and pass the packets to the policy steering process . The policy steering process determines if a particular packet matches one or more policies. If the packet matches a policy the action specified in the policy will be applied to the packet.

There are many actions that may be applied to a packet. For example the action may specify that the packet should be dropped. In this instance the steering policy process will drop the packet and not forward it. As another example the action may specify that the packet should be counted in a particular way in which case one or more counters will be incremented decremented accordingly. As yet another example the action may specify that the packet should be directed to particular destination such as a particular CPU NPU or a set of CPUs and or NPUs or should be load spread to a set of CPUs NPUs and or a set of CPUs and NPUs. The destination in this instance may be one or more of the CPUs in the control plane one or more CPUs in the data plane one or more CPUs in both the control and data plane and or one or more NPUs in the data plane. The destination may also be a network interface which will allow the packet to be passed outside of the box for further processing. As still yet another example the action may specify that further processing should be performed on the packet on a process established on the NPU that is implementing the policy steering process. Many different actions may be specified and the invention is not limited to only these several described example actions.

The action may include forwarding the packets to the application that generated the steering policy however the action does not necessarily need to require the packet to be terminated at the processor hosting the application that generated the policy. Thus for example an application may generate a policy that specifies that particular packets should be directed to another process for further processing. In this manner processing of packets may be implemented within the data plane while allowing applications resident in the control plane to specify how packets with particular attributes should be handled by the data plane.

Applications may create policies via the dataplane API containing both attributes and actions. The policies may specify filtering criteria attributes relevant to layers and or and may specify an action to be taken on the packets matching those criteria. The attributes may be specific or may contain wild card values. For example a policy may specify a particular source address SA and use a wildcard for the destination address DA . In this instance the policy will apply to all packets originating at the source address regardless of destination address. Where multiple attributes are set only an exact match will result in the policy action. Where no policy is specified the network element will continue to terminate the IP flows in a normal manner or in a default manner which may be specified by a management application interfaced to the network element or instantiated on one or more of the processors described herein.

According to an embodiment of the invention the policy steering process maintains a database of steering policies based on destination IP address. All steering policies associated with a particular destination IP address are stored together in the steering policy database. When a packet is received policy steering process will inspect the packet to determine the destination IP address and determine if any steering policies apply to the packet. If one policy applies the action associated with that policy will be applied to the packet. If more than one policy applies the packet will be inspected to determine if other attributes of the packet may be used to select from the applicable policies.

In the embodiment shown in the steering policy includes a header one or more attribute fields and one or more action fields . Other fields may be included in a steering policy as well and the invention is not limited to the example steering policy illustrated in .

The header may contain information configured to enable the steering policy to be identified within the network element. For example the header may contain a policy identifier field an optional virtual route identifier field and a steering type identifier field. Other fields may be included in the header as well and the invention is not limited to a header that contains this particular information.

The policy identifier field may contain a policy ID that is globally unique within the network element. For example as described above each application is provided with an application ID when instantiated on a processor so that steering policies associated with that application may be identified on the network element. The policy ID may be formed by concatenating the globally unique application ID which is unique within the network element with a policy instance number generated by the application and specified as a unique number to that application. Alternatively a policy ID generator may generate unique policy IDs and distribute the unique policy IDs to the applications in batches to be assigned by the applications as necessary. Other ways of generating policy IDs are possible as well and the invention is not limited to any particular way of generating unique policy IDs.

The virtual route ID field may be used where the policy is associated with a virtual routing entity for example where the policy is associated with a particular Virtual Private Network. Use of virtual route ID field in this instance may enable policies associated with particular VPNs to be identified quickly and thus may help from a management standpoint. The invention is not limited to an embodiment that is configured to use a virtual router ID field.

The steering type ID field is configured to be used to specify whether the steering policy is relevant to control or data traffic. Other information may be included in the header as well and the invention is thus not limited to an embodiment that uses this particular header format.

The steering policy may also include one or more attribute fields that may be used by the network element to identify the packets. For example the steering policy may have one or more fields configured to contain source address destination address protocol and port information and one or more fields configured to contain layer information such as tunnel IDs. Other sets of attribute information may be used to identify classes of packets as well such as protocol source IP address source port destination IP address and destination port fields. Thus the invention is not limited to the use of a particular set of fields as many different types of attributes may be used. Similarly the attribute information fields may enable other information to be specified as well via reserved fields and the invention is not limited to an implementation that uses this particular format for specifying the policy attributes.

The steering policy may also include a set of one or more action fields to be specified for the steering policy. The action portion of the steering policy in the illustrated embodiment includes three fields an action type field and an action data field . The action type may indicate whether the action will be for the network element to drop the packet forward the packet log the packet or take another type of action in connection with the packet.

The action data field may contain information indicating how the packet should be logged where the packet should be forwarded whether additional processing should occur in connection with the packet the type of additional processing and any other desired information that will enable the policy steering process to cause the packet to be forwarded to the correct processor and cause the correct actions to be taken in connection with that packet. For example if the action type field indicates that the packet should be forwarded the action data field may contain one or more addresses within or outside of the network element where the packet should be forwarded. The address may indicate a particular CPU NPU a set of CPUs NPUs the application that generated the policy another application that will perform additional processing on the packet or may be an address off the network element such as an interface address indicating an interface over which the packet should be forwarded. The action data field may also contain more than one address or a multicast address that will cause the packet to be sent to multiple processors in off the network element which may process the packet in parallel.

The parent application includes examples of steering policies that may be used in connection with an embodiment of the invention as well as a way for the control plane to validate steering policies and to store steering policies in a table format. Embodiments of the invention may be implemented using some of these details or alternatively other ways of validating steering policies and storing steering policies from a control perspective may be implemented. The invention is thus not limited to the particular details set forth in the parent application and is not limited by the particular manner in which the control plane determines which steering policies are valid and determines how to control operation of the network element to prevent different applications from generating mutually exclusive steering policies.

It should be understood that all functional statements made herein describing the functions to be performed by the methods of the invention may be performed by software programs implemented utilizing subroutines and other programming techniques known to those of ordinary skill in the art. Alternatively these functions may be implemented in hardware firmware or a combination of hardware software and firmware. The invention is thus not limited to a particular implementation.

The functional logical entities described herein may be embodied as one or more software programs implemented in control logic on a processor on the network element . The control logic in this embodiment may be implemented as a set of program instructions that are stored in a computer readable memory within the network element and executed on a microprocessor on the network element. However in this embodiment as with the previous embodiments it will be apparent to a skilled artisan that all logic described herein can be embodied using discrete components integrated circuitry such as an Application Specific Integrated Circuit ASIC programmable logic used in conjunction with a programmable logic device such as a Field Programmable Gate Array FPGA or microprocessor or any other device including any combination thereof. Programmable logic can be fixed temporarily or permanently in a tangible medium such as a read only memory chip a computer memory a disk or other storage medium. Programmable logic can also be fixed in a computer data signal embodied in a carrier wave allowing the programmable logic to be transmitted over an interface such as a computer bus or communication network. All such embodiments are intended to fall within the scope of the present invention.

It should be understood that various changes and modifications of the embodiments shown in the drawings and described herein may be made within the spirit and scope of the present invention. Accordingly it is intended that all matter contained in the above description and shown in the accompanying drawings be interpreted in an illustrative and not in a limiting sense. The invention is limited only as defined in the following claims and the equivalents thereto.

