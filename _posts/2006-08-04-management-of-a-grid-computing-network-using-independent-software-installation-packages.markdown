---

title: Management of a grid computing network using independent software installation packages
abstract: A grid computing network including a server node and several client nodes, of which at least one client node includes a core program to manage the computing modules of the client node, the computing modules being coded as data bundles including independent packages, the packages being executable by the core program independently. The core program is also coded as a data bundle including individual packages, wherein one single package of the computing module or the core program can be activated for other computing modules of the client node for the computing task of the computing module.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08510733&OS=08510733&RS=08510733
owner: Techila Technologies Oy
number: 08510733
owner_city: Tampere
owner_country: FI
publication_date: 20060804
---
This application is the National Stage of International Application No. PCT FI2006 050350 International Filing Date Aug. 4 2006 which designated the United States of America and which international application was published under PCT Article 21 2 as WO Publication No. WO 2007 017557 and which claims priority from Finnish Application No. 20055429 filed Aug. 8 2005.

The disclosed embodiments relate to grid networks especially to the management of a computing network implemented as a grid network.

The grid network is a distributed system which distributes computing and data resources via a wide area network WAN for example through the Internet. Thus the grid network enables combined and shared use of data networks computers databases and scientific instruments owned and managed by a number of different organizations.

The grid computing network is the most common embodiment of the grid network. In the grid computing network the computing tasks are performed between several client machines as a distributed batch run. The grid computing network is typically composed of at least one server node that controls the computation and typically of several client nodes each of them performing a determined part of the computation. The client nodes can be grouped separately into one or several client node clusters or groups wherein for example the client nodes i.e. individual computers participating in the grid network of one organization such as a university can form one cluster. The cluster typically comprises a front end node that controls the computation in the client nodes of the cluster as well as a maintenance node by means of which the administrators of the cluster and the server node can update the software and computing routines of the client nodes.

The intelligence of the grid computing network is primarily implemented by means of a so called intermediate software that functions as an application layer connecting the nodes and converts the commands of computing applications in such a form that can be understood by the devices. Thus servers and computers equipped with different operating systems can be made to operate in the same environment. Typically in the grid computing network the input data of the computing and the computing application in use are transferred to a client node by means of intermediate software which client node utilizes a core program of its own intermediate software to install and update the computing application performs the computing on the basis of the input data and transmits the results to a server node after the computing.

Thus in the client node the computing takes place by means of the core program of the intermediate software and the computing application said computing application typically comprising one or several computing modules designed for specific computing routines. The loading and updating of the core software and computing applications has traditionally been one of the bottlenecks in the use of grid computing networks and different kinds of intermediate software architectures have been developed to solve them.

One intermediate software architecture is known by the name UNICORE which architecture unlike most other intermediate software architectures determines a highly integrated grid computing environment in which the compulsory software components of both the server nodes and the client nodes have been specified with precision. UNICORE is a Java platform based application utilizing Java platform run time properties to update the computing modules. UNICORE comprises a so called plugin mechanism by means of which it is possible to add and update the computing modules in the client nodes during the run without having to update the core software itself. The UNICORE server node comprises a job preparation agent JPA for the computation tasks that provides a graphic user interface by means of which a user having administrator rights can determine the plugin module to be transmitted to a specific client node which plugin module is automatically installed. More specific description of the UNICORE system as well as other intermediate software architectures can be found in the address www.enacts.org gridenabling.pdf.

Although the highly integrated UNICORE architecture is perhaps the most sophisticated intermediate software in view of updating the computing modules it contains several deficiencies. Although the plugin mechanism enables automatic updating of the computing modules in the client node the maintainer of computing must however always determine the dependencies of the computing modules on the core software and other computing modules. The application programming interface API of UNICORE sets rather strict limitations to the way in which the plugin i.e. the computing module can use the core software and other computing modules. Furthermore the automatic updating of the plugin mechanism only functions in computing modules in order to update the core software itself it is necessary to interrupt all runs in the client node.

Now an improved arrangement has been developed to reduce the above mentioned problems. As different aspects of the disclosed embodiments we present a grid computing network a method for maintaining a grid computing network a client node for a grid computing network and a computer program product which are characterized in what will be presented in the independent claims. The dependent claims disclose advantageous embodiments of the disclosed embodiments.

The disclosed embodiments are based on the idea that computing modules are coded in a suitable manner as data bundles comprising independent computing packages. The data bundle forming the computing module also comprises a file that determines the other components necessary for executing said computing module. The data bundle forming the computing module can thus use the computing packages of other computing modules. Furthermore the core program of the intermediate software of the client node is also coded as a data bundle in a corresponding manner said data bundle comprising different control packages relating to the control of the computing. Thus it is possible to activate a single package from another data bundle in other words from another computing module or core program wherein said computing component does not have to be retrieved from the server. However a further idea of the disclosed embodiments is to transmit computing data and information on a computing module necessary in the computing task of said computing data to the client nodes as non bundled data in order to simplify the implementation in the client nodes and to save network resources.

Thus as a first aspect of the disclosed embodiments we present a grid computing network comprising a server node and several client nodes of which at least one client node comprises a core program to manage the computing modules of the client node wherein said computing modules and core program are coded as data bundles comprising independent packages said packages being executable by the core program independently such that a single package of the computing module or the core program can be activated into other computing modules of the client node for the computing task of said computing module and the server node is arranged to transmit computing data and information on at least one computing module necessary in the computing task of said computing data to the client nodes as non bundled data.

According to an embodiment the server node is arranged to transmit the information on the at least one necessary computing module together with the computing data.

According to an embodiment the server node is arranged to transmit the information on the at least one necessary computing module separately from the computing data wherein the said information includes identification data of the computing data.

According to an embodiment the client node is arranged to update any missing package necessary in the computing task of said computing data by activating said packages from another client node or server node.

According to one embodiment the data bundle forming the computing module also comprises a file that determines the other components necessary for executing said computing module.

According to one embodiment the functionalities of the grid computing network are determined in a Java platform based environment in which the data bundles have been coded as JAR files and the packages they comprise are executed in a Java virtual machine.

By means of the disclosed embodiments and its various embodiments it is possible to attain several advantages. Because the computing module already contains information coded therein on the components required by the computing module to function it is possible to establish the necessary dependencies to the missing components in the client node i.e. the computing maintenance server only transmits the computing module to the client node and it does not have to be aware of other computing nodes or their packages in the client node. Yet another advantage is that the packages retrieved for the client node in connection with the installation of the computing module can be utilized to bind the dependencies of subsequent computing modules and it is also possible to utilize packages provided by earlier computing modules. Thus the reuse of the same code considerably reduces the transfer of files from the server to the client node which reduces the loading of the network. This is further underlined by the idea of transmitting the computing data and the information on a computing module necessary in the computing task of said computing data to the client nodes as non bundled data whereby the client node can easily conclude the necessary computing modules and possibly reuse some of computing modules already downloaded. On the other hand no error prone and power consuming translation of the computing data back and forth from the Java platform is required.

Yet another advantage is that because the version dependencies of the packages of the computing module have been coded directly in the computing modules which dependencies can be interpreted and updated by the core program automatically the installation of the necessary package versions becomes substantially easier due to the automatic process and the number of human errors is correspondingly reduced. Because the intelligence of the system in view of the dependencies of the computing modules and reuse of the packages has been shifted largely to the client nodes it is thus also possible to save the resources of the server node. Furthermore when outdated computing modules are removed from the client node the system advantageously ensures that the packages to which active references exist are not accidentally removed which ensures undisturbed continuation of other computing processes. Thus it is also possible to avoid reloading of the same package from the server. Another significant advantage is that because the core program of the client node can also be updated during the run similarly to the computing modules it is not necessary to interrupt the computing in the client node for the duration of updating the core program.

Another aspect of the disclosed embodiments is a method for managing a grid computing network which grid computing network comprises a server node and several client nodes of which at least one client node comprises a core program for managing the computing modules of the client node said computing modules and the core program are coded as data bundles comprising independent packages which packages are independently executable by the core program such that a single package of the computing module or the core program can be activated into other computing modules of the client node for the computing task of said computing module the method comprising receiving in the client node computing data and information on at least one computing module necessary in the computing task of said computing data from the server node as non bundled data updating said at least one computing module in the client node checking from a file contained in the computing module whether other components are determined necessary for executing said computing module and activating the packages determined as necessary components from other computing modules of the client node or the core program for the computing task of said computing module.

As a third aspect of the disclosed embodiments we present a client node of a grid computing network comprising a core program for managing the computing modules of a client node means for loading a computing module into a client node said computing module and core program being coded as data bundles comprising independent packages which packages are independently executable by the core program such that a single package of the computing module or the core program can be activated into other computing modules of the client node for the computing task of said computing module the client node further comprising means for receiving computing data and information on at least one computing module necessary in the computing task of said computing data from the server node as non bundled data.

As a fourth aspect of the disclosed embodiments we present a computer program product which is stored in a computer readable medium and which can be executed in a data processing device to manage computing modules of a client node in a grid computing network said computer program product comprising a software code portion for loading a computing module in the client node the computing module being independently executable by the computer program product such that a single package of the computing module or the computer program product can be activated into other computing modules of the client node for the computing task of said computing module said computer program product further comprising a software code portion for receiving computing data and information on at least one computing module necessary in the computing task of said computing data from the server node as non bundled data.

The size of the computing modules may be several hundreds of kilobytes even several megabytes. The updating of such computing modules from the server node for example in a grid computing network comprising 500 client nodes takes place very slowly and causes huge loading on the network in several network interfaces.

Thus as an aspect of the disclosed embodiments we present a grid computing network in which for instance the updating of computing modules is considerably facilitated. In such a grid computing network the server node transmits computing modules to the client node said computing modules being coded in a suitable manner as data bundles comprising computing packages in other words computing routines algorithms raw data library files etc. The data bundle forming the computing module also typically comprises a file that determines other components necessary for executing said computing module. The data bundle forming the computing module can freely hand over its computing packages in the use of other computing modules so called export function and correspondingly it can use the computing packages of other computing modules so called import function . Furthermore the core program of the intermediate software of the client node is also coded as a data bundle in a corresponding manner said data bundle comprising different management packages relating to the control of computing. Thus it is possible to activate a single package from another data bundle into the computing module in other words from another computing module or core program and in a corresponding manner it is possible to update the core program of the client node automatically only for the necessary packages by activating said packages from another client node or server node.

The implementation of such a grid computing network requires a suitable application platform that enables coding of data bundles comprising packages in such a manner that the data bundles can activate packages of each other. According to one embodiment the functionalities of the grid computing network are determined in a Java platform based environment in which the data bundles have been coded as JAR files Java Archive files and the packages they comprise are run in a Java virtual machine JVM . All the application components relating to the computing are most advantageously run in the same Java virtual machine which saves memory and processor capacity.

According to one embodiment the functionalities of the grid computing network can be determined in a Microsoft .NET based environment which provides functionalities corresponding to the Java platform. However the Microsoft .NET application platform sets such a limitation that the client nodes can only be devices based on the Windows operating system whereas the Java platform also enables the use of devices based on other operating systems such as the Linux Unix Mac and OS X operating systems in the grid computing network.

In a Java platform based environment where the data bundles have been coded as JAR files it is advantageously possible to utilize a Manifest file belonging to each JAR file according to the Java platform specifications to determine other components necessary for executing said computing module. These other components must also be available either in other computing modules or in the core program of the client node in other words the other components are always packages of data bundles. If the packages determined as said packages are not available directly in other computing modules or in the core program the core program of the client node retrieves the necessary packages from the server node. The Manifest file comprises an Import Package field which is used for naming these components. The name and version number of the packages is determined in the Import Package field. Correspondingly the Manifest file comprises an Export Package field indicating the names and version numbers of the packages offered by said computing module in the use of other computing modules.

Although the system is advantageously implemented in a Java platform based environment in which data bundles are coded as JAR files the packages of the data bundles can also comprise non Java platform components. This is especially advantageous in grid computing in particular because software and computing data used in client nodes to perform the scientific computing itself are often programmed with certain programming languages especially suitable for computing such as Fortran. Because it is often difficult to translate such programming languages into the Java programming language it is possible to transfer data directly applicable in the computing in the packages of the data bundles for example as a binary file.

In a preferred embodiment the computing data and the information on the computing module s necessary in the computing of this particular computing data are transmitted from the server node to the client nodes as non bundled data. This non bundled data can preferably be transmitted to the client nodes without any computing module in the beginning whereby the client node can easily conclude the necessary computing modules on one hand and no error prone and power consuming translation of the computing data back and forth from the Java platform is required on the other hand. Once the client node has concluded which computing modules it should use it can then start the process of updating its computing modules if necessary and when the necessary computing modules and packets are activated it can start the actual computing process.

According to an embodiment the information on the necessary computing module s is transmitted together with the computing data packet e.g. as a common binary file including a particular field for the information on the necessary computing module s . This information preferably includes the name of the necessary computing module s its type identifier e.g. as an integer value a network address wherefrom to retrieve the module s if necessary e.g. as an URL address and a version number s of the necessary computing module s .

According to an embodiment the information on the necessary computing module s is transmitted separately from the actual computing data packet. Thereby the computing data packet sent to a client node includes only a name or other identifier of the computing data packet. Then the client node inquires the server node for further information on how to compute this particular computing data packet. The server node acknowledges the inquiry by sending the information relating to the necessary computing module s to the client node which then retrieves the necessary module s .

According to an embodiment the server node may instruct the client node to operate in a particular mode whereby the client node updates its computing modules to correspond those required in this particular mode. Thereafter the client node computes all the computing data packets received from the server node with these computing modules until the server node instructs the client node to change into another mode. This kind of computing management may be useful in the beginning of a large project upon selecting the client nodes for the project. On the other hand this also complicates the computing management somewhat since the server node must update information about each client node and the mode they are currently using. Furthermore the server node must also instruct the client nodes to change their mode at a right time.

The above embodiment of the client nodes operating in particular mode can also implemented such that the server node directly sends one or more computing modules to a client node and instructs the client node to use these computing modules in computing all the computing data packets it receives from the server node. Again the client node computes all the computing data packets received from the server node with these computing modules until the server node send new computing module s i.e. instructs the client node to change into another mode.

Naturally it is possible to bundle the computing data packet and the necessary computing module s into a common data bundle and send it to the client nodes. Then the client node carries out the computing of the computing data with the received computing module s and returns the results to the server node. However this kind of computing management is remarkably inefficient in view of network resources if implemented in a larger scale e.g. if the computing data packet is always transmitted as bundled data.

The version management of packages constitutes an important part in the updating of packages. The starting point has to be that a package having a smaller or similar version number is always compatible with a package having a larger version number.

When a new computing module is loaded in the client node to be taken in use the core program of the client node receives the computing module and installs it in the computer. Before the computing module can be taken in use its dependencies must be analyzed for example from a Manifest file. The computing module may need both packages and services of the system level and packages and services contained in other computing modules. The core software binds the other necessary components in the computing module by means of the import function whereafter the computing module can be activated.

The installation and uninstallation of the computing module may be implemented without interrupting the processes currently running in other computing modules independent of said computing module. Thus the computing module may offer packages of its own in the use of other computing modules by means of the export function. When the installation of the computing module is removed the dependencies of the packages offered in the use of other computing modules are checked and the removal of packages having export dependencies is prevented for as long as other computing modules are dependent of said packages. Thus it is possible to ensure continuing function of other computing modules.

By means of the update function of the core program it is possible to update the dependencies of the packages either in view of other computing modules or version numbers. The update function can also be used when removing the installation of a computing module from a client node wherein the dependencies of the packages offered in the use of other computing modules by means of the export function are first checked and the processes of computing modules relating to the dependencies are interrupted whereafter the dependencies of said packages are updated and their processes are started again. Due to this arrangement the dependencies between the components remain updated automatically.

Similarly it is also possible to update the core program of the client node without interrupting the computing processes running at a given time. It is possible to install new packages in the core software or to update outdated packages with new versions. When packages of the core software are being removed the dependencies between the packages are first checked i.e. their effect on the computing processes on the run and if such dependencies are discovered the computing process is terminated before the package is removed.

One distributed service platform model utilizing the Java JAR files and the run time properties of a virtual machine is a OSGi Open Services Gateway Initiative platform that determines a standardized model to manage network services. According to one embodiment the above described installation and update functions of the computing modules can be harmonized with the OSGi platform standard. This however requires the formation of various OSGi platform compatible service registers and security management mechanisms which is not essential in view of implementing the disclosed embodiments.

Different embodiments of the disclosed embodiments will be presented hereinbelow by means of examples. describes by means of a signalling chart an example of installing a computing module in a client node. The starting point of the example is a situation typical for grid computing in which a client node CL is released to perform computing tasks and reports this to a server S. The server S transmits computing data to the client node CL which computing data also contains information on the computing modules necessary in the computing. Thus it is discovered that the computing module M necessary in the computing is missing from the client node and in this case the core software of said client node CL requests said computing module from the server.

The server S transmits the computing module M to the client node CL and the core software of said client node installs said computing module. Before the computing module M can be activated the core software checks the dependencies of the computing module on other packages from a Manifest file of the computing module M In this context it is discovered that in order to function the computing module M requires packages com.company.service.log and com.company.ssl. These packages cannot be found in the register of the client node CL itself wherein the client node CL transmits a request on said packages to the server. The server S transmits the requested packages in JAR files to the client node CL which installs them. Thereafter the dependencies in the computing module M are in order and the computing module M can be activated.

The above described example illustrates the ease of installing the computing module according to the disclosed embodiments the computing module already contains information coded therein on the components required by the computing module to function and it is the task of the client node to establish the necessary dependencies to the missing components i.e. the computing maintenance server only transmits the computing module to the client node and it does not have to be aware of the other computing nodes or their packages in the client node.

The server S transmits the computing module M to the client node CL and the core software installs said computing module again. The dependencies of the computing module M on other packages are checked from a Manifest file of the computing module wherein it is discovered that in order to function the computing module M also requires packages com.company.service.log and com.company.ssl. However these packages have already been installed in the client node CL simultaneously with the installation of the computing module M wherein it is not necessary to retrieve them from the server. Further it is discovered that in order to function the computing module M also requires the algorithm com.company.service.nqueen. Because the computing module M has reported said algorithm as an export service in the register of the client node CL it is possible to take the algorithm com.company.service.nqueen in use directly in the computing module M. Thus in this case a service provided by another computing module is used.

This example illustrates the advantages attained inside the client node by the act of determining the dependencies of the packages automatically. The packages retrieved in the client node in connection with the installation of the preceding computing module can thus be utilized when binding the dependencies of subsequent computing modules and it is also possible to utilize the export services of preceding computing modules. The reuse of the same code considerably reduces the transfer of files from the server to the client node which reduces the loading of the network.

The core software reads the dependencies of the computing module M on other packages from a Manifest file wherein it is discovered that the computing module M also requires a package com.company.foo.FFT and version 1.1.0 in particular. Said package is already installed in the client node CL but its version number is 1.0.0. The core software discovers that the package must be updated and loads a new version of the package from the storage of the server S and installs the same. Similarly to the installation of the module M the core software now reads the dependencies of the package com.company.foo.FFT and discovers that now the new version of the package com.company.foo.FFT also requires a package com.company.foo.SSE version 1.0.0 which is not installed in the client node CL yet. Now the core software loads a new version of the package com.company.foo.SSE from the storage of the server S installs the same and checks its dependencies again. Thus it is discovered that the package com.company.foo.SSE is not dependent on others. As all the dependencies have now been fulfilled the computing module M is ready for use. Now the client node CL retrieves computing data from the server S and requests the computing module M to perform the computing.

This example illustrates the advantages attained on one hand by the coding of the version dependencies of the computing module packages directly into the computing modules and on the other hand by the intelligence in interpreting and updating these dependencies automatically. The installation of the necessary package versions becomes substantially easier due to the automatic process and the number of human errors is correspondingly reduced. In the above described action it is not necessary for the maintainer of computing to determine the dependencies of the computing modules after the coding of the computing module is finished.

The system administrator wishes to remove outdated unused computing modules and their packages from the client node. The system administrator discovers that the first installed computing module M is outdated and transmits an order to the client node CL to remove the same. The core software checks the register of the client node CL to ensure that the algorithm com.company.service.nqueen offered by the computing module M to others is still in use in the computing module M installed second. Thus only the remaining parts of the first computing module M are removed . In the future when it becomes necessary to remove the computing module M as well the algorithm com.company.service.nqueen provided by the computing module M is also removed automatically in this context if this algorithm is not in the use of any other computing module at that stage.

Thus the system advantageously ensures that packages to which active references exist are not accidentally removed which ensures undisturbed continuation of other computing processes. Thus it is also possible to avoid reloading of the same package from the server.

The same advantage is also attained in a situation in which the aim is to test the computing module with different kinds of computing algorithms. Let us assume that at first a computing module is produced whose size is 700 kilobytes and said computing module uses an algorithm com.company.service.nqueen which is only 50 kilobytes in size. Both the computing module and the algorithm are loaded in several client nodes for test computing. The computing module is tested with several initial values and the only aspect that must be changed as a result of the tests is said algorithm com.company.service.nqueen. If the entire 700 kilobytes software would be transmitted every time an algorithm is changed the network would face considerable loading.

In the present grid computing system excluding the algorithm all the rest of the computing module can be reused by means of the export function wherein a mere modified com.company.service.nqueen algorithm is transmitted from the server. The core software of the client nodes is capable of automatically utilizing once transmitted and installed computing module together with the recently transmitted algorithm com.company.service nqueen. When compared to systems of prior art in which programs can utilize only services of the system level and not the services of other programs it is possible to reduce the network loading into a fraction of what it could be.

The examples described above only illustrate the installation updating and removal of computing modules. However it must be noted that the core program of the intermediate software of the client nodes is also coded as a data bundle in a corresponding manner said data bundle comprising different management packages relating to the control of computing. Thus the core program itself can be updated one package at a time and it may also comprise dependencies on other packages and their different versions. Thus the examples described above also apply to the management of the core program of the intermediate software.

It should be noted that the structure of the grid network itself may be quite complex and it may differ for instance from the example illustrated for example in . One structure utilizing the updating possibility presented hereinabove is a tree structured grid network in which the nodal point functioning as a server node of one client node cluster also functions as a client node of a larger entity. For example client nodes individual computers belonging to the grid network of a certain department in a university may form one cluster and the server node controlling the function of said cluster can correspondingly function as a client node in a grid network covering the entire university and the server node controlling the function of this grid network can in turn function as a client node in a grid network covering all the universities in Finland etc.

The nodal points of the grid network i.e. the client and server nodes are advantageously computers servers or other data processing devices known as such that use an operating system known as such for example the Windows Mac OS X Linux or Unix operating system. According to such a data processing device typically comprises a central processing unit CPU memory MEM and an I O system I O . All the necessary information is stored in the memory MEM of the device. The memory MEM comprises a read memory portion which can be for example a ROM memory ROM Read Only Memory and a random access memory which can be composed of a RAM memory and or a FLASH memory. By means of the I O system I O the device communicates for example with other devices networks and with the user. The user interface UI that forms a part of the I O system I O comprises an interface necessary for communicating with the user for example a display a keyboard a loudspeaker and or a microphone. The I O system comprises especially a transmitter receiver unit Tx Rx which is arranged to transmit and receive information in accordance with various data transmission protocols with other nodes of the grid network. The information obtained from the different components of the device is transmitted to the central processing unit CPU that comprises one or several processors and which processes the obtained information in a desired manner.

The above described embodiments of the disclosed embodiments can be most advantageously implemented as a computer program SW which can be loaded in the memory MEM contained in the client node which program when executed in the processor CPU of the client node makes the client node to implement tasks according to the disclosed embodiments. The functions of the computer program SW may be distributed in several different software components that communicate with each other. The computer program may be stored in any memory means for example in the hard drive of a PC or in a CD ROM disc from which it can be loaded in the memory MEM of the client node. The computer program can also be loaded through a network for example by using a TCP IP protocol stack. It is also possible to use hardware solutions or a combination of hardware and software solutions to implement the inventive means.

It is obvious for a person skilled in the art that the basic idea of the disclosed embodiments can be implemented in various ways wherein the disclosed embodiments and its embodiments are not restricted to the examples described hereinabove but they may vary within the scope of the appended claims.

