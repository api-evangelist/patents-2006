---

title: System and method for providing a window management mode
abstract: A mode of managing windows in a graphical user interface in which the application windows may be presented in a tiled manner is provided. Upon invocation of the mode inactive application windows may be scaled down and organized in a manner so as to set them aside from the currently active application window while the active application window may remain at or near full size and be positioned in a centralized location in the desktop space.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07681143&OS=07681143&RS=07681143
owner: Microsoft Corporation
number: 07681143
owner_city: Redmond
owner_country: US
publication_date: 20060412
---
This application is a divisional of prior U.S. application Ser. No. 11 117 717 filed Apr. 29 2005 the entire contents of which are incorporated herein by reference.

Aspects of the present invention are directed generally to managing the presentation of user interface elements in or with an operating system. More particularly aspects of the present invention are directed to a method and system for applying a mode of operation for managing the presentation of application windows in or with an operating system.

As the use of computers in both the workforce and personal life has increased so has the desire to allow for easier use of them. Many operating systems today utilize a windows based configuration of application programs. Information is displayed on a display screen in what appears to be several sheets of paper.

As such application windows are a core user interface facility of all graphical user interface GUI systems. While application windows may vary in appearance across systems they share many common attributes such as the ability to be resized and repositioned and to exist among other application windows associated with different applications. Together multiple application windows can appear simultaneously on the screen layered on top of each other typically represented by the order each window was last accessed by the user.

When multiple windows are open at the same time locating navigating and switching quickly to the desired window can be difficult. For example the desired window may be partially or fully occluded by other open windows. Also the desired window may be minimized or hidden. These scenarios are commonly referred to as window management problems.

Window selection interfaces have been proposed to resolve such window management problems by minimizing the necessity to sort through the various open windows.

Window management solutions in the Windows XP brand operating system by Microsoft Corporation include the Taskbar and Alt Tab key combination which each presents a list of open windows in a representation different from the primary window. In the Taskbar a control representing each application window is duplicated and presented in a manner that avoids overlapping allowing for an indirect mechanism to select a specific application window even if the window is presently obscured. The Alt Tab keyboard combination invokes a secondary UI facility that like the Taskbar control presents a duplicate list of all open and available application windows from which the user can select from. These interfaces however do not allow the user to view content of a window without the window being selected.

Recently Apple Computing Inc. introduced Expos in the MAC OS X brand operating system. Expos provides a user with the ability to display all open windows as thumbnails on the desktop. In operation when the user types the F key Expos tiles all the open windows. Namely Expos scales the windows down to a size such that all the open windows are displayed in a non overlapping form. In another aspect Expose provides a user with the ability to display and view all open windows in a particular application in a non overlapping manner. Specifically when the user types the F key Expos tiles all of the open windows for the current application in a non overlapping form while fading to a gray all of the open windows associated with other applications. This facilitates the location and selection of a previously not visible application window but does not support user interaction with application windows while in this mode.

While Expos allows the user to view open windows simultaneously multiple windows are tiled on the screen which can still lead to some confusion. In addition Expos is a temporary state where once a user selects one of the tiled windows the user interface returns to the Z order state with the selected window located on top of the Z order.

In one proposed implementation for the MAC OS X brand operating system thumbnail controls for minimized application windows are presented in the Dock control and the active application window was presented by itself on the desktop space not occupied by the Dock control. To select another application to open a user could select a thumbnail control of the application window in the Dock and the system would open the application window on the Dock and minimize to the Dock the previously open application window.

It would be beneficial to provide a window management solution which allows a user to provide all application windows in a tile type format and to allow a user to switch windows in and out of focus while maintaining a tiled view of the application windows not in focus.

There is therefore a need to provide a window management solution that provides a facility in which application windows may be tiled and focus may be switched between tiled windows allowing a user to quickly and easily switch application windows in and out of focus.

The present invention addresses the window management problem by introducing a new mode of operation which can be invoked or removed at any time by the user. According to one aspect the invention provides a method for in which all inactive application windows may be scaled and organized in a manner as to set them aside from the currently active application window. In one implementation in response to a command invoking the new window management mode the active application window may remain at or near full size and be positioned in a centralized or ideal location relative to the inactive application windows.

Benefits that may be realized by such organization include providing a user with a tool to readily identify the active and inactive application windows which are currently available for interaction. By maintaining all inactive windows visible and available at any time the user can easily identify and quickly activate a desired application window. In addition a user may work with multiple application windows without the application windows becoming overlapped or obscured by other application windows. In addition user interactions with the active application window are unaffected while the new window management mode is invoked. Inactive application windows while scaled down in size remain live insofar as they can continue to update their content i.e. refreshing a web page or playing video . The user may not interact with inactive application windows until they are made the active application window.

In the following description of various illustrative embodiments reference is made to the accompanying drawings which form a part hereof and in which is shown by way of illustration various embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural and functional modifications may be made without departing from the scope of the present invention.

The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to random access memory RAM read only memory ROM electronically erasable programmable read only memory EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as ROM and RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disc drive that reads from or writes to a removable nonvolatile optical disc such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like.

The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disc drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a digital camera a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a pen stylus and tablet microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers can be used. The existence of any of various well known protocols such as TCP IP Ethernet FTP HTTP and the like is presumed and the system can be operated in a client server configuration to permit a user to retrieve web pages from a web based server. Any of various conventional web browsers can be used to display and manipulate data on web pages.

A programming interface or more simply interface may be viewed as any mechanism process protocol for enabling one or more segment s of code to communicate with or access the functionality provided by one or more other segment s of code. Alternatively a programming interface may be viewed as one or more mechanism s method s function call s module s object s etc. of a component of a system capable of communicative coupling to one or more mechanism s method s function call s module s etc. of other component s . The term segment of code in the preceding sentence is intended to include one or more instructions or lines of code and includes e.g. code modules objects subroutines functions and so on regardless of the terminology applied or whether the code segments are separately compiled or whether the code segments are provided as source intermediate or object code whether the code segments are utilized in a runtime system or process or whether they are located on the same or different machines or distributed across multiple machines or whether the functionality represented by the segments of code are implemented wholly in software wholly in hardware or a combination of hardware and software.

Notionally a programming interface may be viewed generically as shown in or . illustrates an interface Interface as a conduit through which first and second code segments communicate. illustrates an interface as comprising interface objects I and I which may or may not be part of the first and second code segments which enable first and second code segments of a system to communicate via medium M. In the view of one may consider interface objects I and I as separate interfaces of the same system and one may also consider that objects I and I plus medium M comprise the interface. Although show bi directional flow and interfaces on each side of the flow certain implementations may only have information flow in one direction or no information flow as described below or may only have an interface object on one side. By way of example and not limitation terms such as application programming interface API entry point method function subroutine remote procedure call and component object model COM interface are encompassed within the definition of programming interface.

Aspects of such a programming interface may include the method whereby the first code segment transmits information where information is used in its broadest sense and includes data commands requests etc. to the second code segment the method whereby the second code segment receives the information and the structure sequence syntax organization schema timing and content of the information. In this regard the underlying transport medium itself may be unimportant to the operation of the interface whether the medium be wired or wireless or a combination of both as long as the information is transported in the manner defined by the interface. In certain situations information may not be passed in one or both directions in the conventional sense as the information transfer may be either via another mechanism e.g. information placed in a buffer file etc. separate from information flow between the code segments or non existent as when one code segment simply accesses functionality performed by a second code segment. Any or all of these aspects may be important in a given situation e.g. depending on whether the code segments are part of a system in a loosely coupled or tightly coupled configuration and so this list should be considered illustrative and non limiting.

This notion of a programming interface is known to those skilled in the art and is clear from the foregoing detailed description of the invention. There are however other ways to implement a programming interface and unless expressly excluded these too are intended to be encompassed by the claims set forth at the end of this specification. Such other ways may appear to be more sophisticated or complex than the simplistic view of but they nonetheless perform a similar function to accomplish the same overall result. We will now briefly describe some illustrative alternative implementations of a programming interface.

A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown some interfaces can be described in terms of divisible sets of functionality. Thus the interface functionality of may be factored to achieve the same result just as one may mathematically provide 24 or 2 times 2 times 3 times 2. Accordingly as illustrated in the function provided by interface Interface may be subdivided to convert the communications of the interface into multiple interfaces InterfaceA InterfaceB InterfaceC etc. while achieving the same result. As illustrated in the function provided by interface I may be subdivided into multiple interfaces I I I etc. while achieving the same result. Similarly interface I of the second code segment which receives information from the first code segment may be factored into multiple interfaces I I I etc. When factoring the number of interfaces included with the 1st code segment need not match the number of interfaces included with the 2nd code segment. In either of the cases of the functional spirit of interfaces Interface and I remain the same as with respectively. The factoring of interfaces may also follow associative commutative and other mathematical properties such that the factoring may be difficult to recognize. For instance ordering of operations may be unimportant and consequently a function carried out by an interface may be carried out well in advance of reaching the interface by another piece of code or interface or performed by a separate component of the system. Moreover one of ordinary skill in the programming arts can appreciate that there are a variety of ways of making different function calls that achieve the same result.

In some cases it may be possible to ignore add or redefine certain aspects e.g. parameters of a programming interface while still accomplishing the intended result. This is illustrated in . For example assume interface Interface of includes a function call Square input precision output a call that includes three parameters input precision and output and which is issued from the 1st Code Segment to the 2nd Code Segment. If the middle parameter precision is of no concern in a given scenario as shown in it could just as well be ignored or even replaced with a meaningless in this situation parameter. One may also add an additional parameter of no concern. In either event the functionality of square can be achieved so long as output is returned after input is squared by the second code segment. Precision may very well be a meaningful parameter to some downstream or other portion of the computing system however once it is recognized that precision is not necessary for the narrow purpose of calculating the square it may be replaced or ignored. For example instead of passing a valid precision value a meaningless value such as a birth date could be passed without adversely affecting the result. Similarly as shown in interface I is replaced by interface I redefined to ignore or add parameters to the interface. Interface I may similarly be redefined as interface I redefined to ignore unnecessary parameters or parameters that may be processed elsewhere. The point here is that in some cases a programming interface may include aspects such as parameters which are not needed for some purpose and so they may be ignored or redefined or processed elsewhere for other purposes.

It may also be feasible to merge some or all of the functionality of two separate code modules such that the interface between them changes form. For example the functionality of may be converted to the functionality of respectively. In the previous 1st and 2nd Code Segments of are merged into a module containing both of them. In this case the code segments may still be communicating with each other but the interface may be adapted to a form which is more suitable to the single module. Thus for example formal Call and Return statements may no longer be necessary but similar processing or response s pursuant to interface Interface may still be in effect. Similarly shown in part or all of interface I from may be written inline into interface I to form interface I . As illustrated interface I is divided into Iand I and interface portion Ihas been coded in line with interface I to form interface I . For a concrete example consider that the interface I from performs a function call square input output which is received by interface I which after processing the value passed with input to square it by the second code segment passes back the squared result with output. In such a case the processing performed by the second code segment squaring input can be performed by the first code segment without a call to the interface.

A communication from one code segment to another may be accomplished indirectly by breaking the communication into multiple discrete communications. This is depicted schematically in . As shown in one or more piece s of middleware Divorce Interface s since they divorce functionality and or interface functions from the original interface are provided to convert the communications on the first interface Interface to conform them to a different interface in this case interfaces InterfaceA InterfaceB and InterfaceC. This might be done e.g. where there is an installed base of applications designed to communicate with say an operating system in accordance with an Interface protocol but then the operating system is changed to use a different interface in this case interfaces InterfaceA InterfaceB and InterfaceC. The point is that the original interface used by the 2nd Code Segment is changed such that it is no longer compatible with the interface used by the 1st Code Segment and so an intermediary is used to make the old and new interfaces compatible. Similarly as shown in a third code segment can be introduced with divorce interface DI to receive the communications from interface I and with divorce interface DI to transmit the interface functionality to for example interfaces Iand I redesigned to work with DI but to provide the same functional result. Similarly DI and DI may work together to translate the functionality of interfaces I and I of to a new operating system while providing the same or similar functional result.

Yet another possible variant is to dynamically rewrite the code to replace the interface functionality with something else but which achieves the same overall result. For example there may be a system in which a code segment presented in an intermediate language e.g. Microsoft IL Java ByteCode etc. is provided to a Just in Time JIT compiler or interpreter in an execution environment such as that provided by the .Net framework the Java runtime environment or other similar runtime type environments . The JIT compiler may be written so as to dynamically convert the communications from the 1st Code Segment to the 2nd Code Segment i.e. to conform them to a different interface as may be required by the 2nd Code Segment either the original or a different 2nd Code Segment . This is depicted in . As can be seen in this approach is similar to the Divorce scenario described above. It might be done e.g. where an installed base of applications are designed to communicate with an operating system in accordance with an Interface protocol but then the operating system is changed to use a different interface. The JIT Compiler could be used to conform the communications on the fly from the installed base applications to the new interface of the operating system. As depicted in this approach of dynamically rewriting the interface s may be applied to dynamically factor or otherwise alter the interface s as well.

It is also noted that the above described scenarios for achieving the same or similar result as an interface via alternative embodiments may also be combined in various ways serially and or in parallel or with other intervening code. Thus the alternative embodiments presented above are not mutually exclusive and may be mixed matched and combined to produce the same or equivalent scenarios to the generic scenarios presented in . It is also noted that as with most programming constructs there are other similar ways of achieving the same or similar functionality of an interface which may not be described herein but nonetheless are represented by the spirit and scope of the invention i.e. it is noted that it is at least partly the functionality represented by and the advantageous results enabled by an interface that underlie the value of an interface.

For purposes of this invention desktop space is an area of a display that allows for the display of windows corresponding to application programs i.e. application windows. Desktop space in provides such an example. The taskbar at the bottom of the display indicates the windows that are currently in use which may be visible or minimized. A taskbar is a specific implementation of an on screen window remote control used to list and enable manipulation of windows such as activating moving hiding and minimizing. It will be appreciated that the desktop space is separate from and does not overlap controls on the display such as the taskbar.

Window may be represented by taskbar button . Window may be represented by taskbar button . Window may be represented by taskbar button . Window may be represented by taskbar button . Window may be represented by taskbar button . Taskbar buttons and represent application windows which have been hidden or minimized. An application window in the Z order may become hidden when one or more application windows in the Z order completely obscure the subject application window. Also an application window may become hidden automatically after a predetermined time of inactivity. For example if a user has not interacted with an application window for thirty minutes that application window may be removed from the desktop space but remain accessible to the user through a taskbar button corresponding to the application window. An application window may become minimized in response to a user command. As shown in the example five windows are shown open in the desktop space while eight windows including three hidden or minimized windows are visually represented on the taskbar . The taskbar button order may indicate the order in which the corresponding windows were first opened from left to right not shown .

The display scenario in illustrates a common problem with graphical user interface systems. In at least application windows and are partially obscured by one or more other application windows positioned above them in the Z order. As such the content and the accessibility of the underlying application windows may be difficult to discern.

According to aspects of the invention a new mode of operation for window management is introduced. In certain aspects the new mode may be invoked or removed at any time by a user. For example a user may issue a command such as a keyboard or mouse command to invoke or activate the mode and similarly to deactivate the mode. In one aspect the new window management mode of operation may be invoked from a display scenario . For purposes of this description the new mode of operation will be described as if it were invoked from display scenario shown in . It will be appreciated that the mode may be invoked from many different display scenarios at any time. Alternatively the new window management mode of operation may be configured as a default mode. Invocation of the window management mode may not impact typical user interaction with application window content and controls i.e. buttons and text fields . In at least some aspects a user may conduct all tasks while in this new mode of operation which she could have conducted with the application windows in the display scenario .

According to some aspects the mode provides a method for managing the presentation of inactive windows where the inactive application windows are scaled down in size and organized in a manner as to set them aside from the currently active window. For purposes of this invention the term scaled down will be defined to mean a reduction in size to sufficiently differentiate the inactive application windows from the active application window for example the inactive application windows could be reduced 50 or more in size. The degree of scaling allows for the inactive application windows to be clearly delineated from the active application windows yet is not so drastic that the scaled down application windows are unrecognizable. The degree of scaling may be preset or may fall within a prescribed range depending on the number of inactive application windows or may be some other function depending on the inactive application windows. In certain aspects it is preferable that scaling be done to maintain the relative aspect ratios to aid users in identifying the scaled down application windows.

Benefits that may be realized by such organization include providing a user with a facility to readily identify the active and inactive application windows which are currently available for interaction. By maintaining all inactive windows visible and available at any time the user can easily identify and quickly activate a desired application window. In addition a user may view or work with multiple application windows without any of the application windows being overlapped or obscured by other application windows.

According to some aspects upon invoking the mode of operation the active application window is rendered at or near full size and may be positioned in a location on the desktop space relative to the inactive application windows. In certain aspects the location may be dynamically determined by the computer system based on the available desktop space the size of the active application window and the number of total windows. In this instance the system may be considered to be determining an ideal location. Alternatively the location may be preconfigured by the user. For purposes of this invention full size refers to the size of the application window prior to invocation of the mode and near full size refers to at least 80 of full size and may be greater than full size.

From an operations standpoint according to one aspect invocation of the mode does not impact the underlying functionality of the application windows. For example user interactions with the active application window will not be affected when the mode is invoked. Although inactive application windows are scaled down in size they remain live and have their content continually updated i.e. refreshing a web page or playing video . However in some aspects user interaction with an inactive application window does not occur until that application window is made active.

Other aspects of the invention allow an inactive application window to become the active window by swapping positions with an active application window in response to a user selecting the inactive application window. In these aspects the inactive application window when selected is resealed to at or near full size and switches relative positions with the previously active application window which is scaled down in size. This behavior is somewhat analogous to the known behavior of selecting an inactive application window which is below an active application in the Z order where the inactive application window becomes the topmost window in the Z order and active.

In response to invocation of the mode all inactive application windows whether displayed hidden or minimized may be scaled and positioned in the desktop space such that all of the windows are visible and none of the application windows overlap. The active application window is rendered at or near full size and may be repositioned within the desktop space for example to accommodate display of the scaled down inactive application windows. Referring to the active application window is the same application window which was active and at the top of the Z order in . The inactive application windows rendered in scaled down form include each application window which was at least partly visible in the desktop space in including application windows and as well as application windows and which were hidden or minimized and correspond to taskbar buttons and in . In the the display scenario shows the inactive application windows rendered in a row in the desktop space above the taskbar control though this presentation style is merely illustrative.

In some aspects of the invention upon invocation of the mode the active application window may be repositioned to a predetermined position or a position determined based upon the current conditions. The current conditions may include among other things the number of inactive application windows the degree of scaling of the inactive application windows the positions in the desktop space where the scaled down windows will be rendered in response to the command invoking the mode the orientation of the screen e.g. portrait and the total area of the desktop space. Generally speaking an algorithm may be used to consider one or more of the aforementioned conditions to determine the positioning of the active application window. In some aspects the active application window may be centered within the available desktop space based on the boundaries of the desktop space and the location where the inactive application windows will be rendered. shows the active application window in such a centered location. Alternatively the position at which the active application window is rendered may be preconfigured by the user or the user may select the parameters that affect where the active application window is positioned.

Following invocation of the new mode the user can still continue to interact with the active application window in the typical manner. In at least one aspect no window or control interactions are affected by invocation of the new window management mode. Also in certain aspects the window management mode may be toggled off using a command such as a command similar to those described for invoking the mode. When the mode is toggled off from the display scenario the display scenario may return to the display scenario . Alternatively the inactive application windows which were previously minimized or hidden may be rendered in the desktop space in the Z order. Of course interactions with the application windows in the new mode of operation may impact how and if the application windows are rendered in the desktop space and where in the Z order the application windows are positioned when the mode is toggled off.

Selection of an inactive application window from the row of scaled down inactive application windows or its corresponding taskbar button in swaps that window the active application window . Thus a user issuing a command such as through a pointing device selecting the scaled down inactive application window or selecting the taskbar button corresponding to the inactive application window causes the inactive application window and the active application window to swap relative positions in the desktop space as depicted in . In this instance the inactive application window is made the active application window and rendered at or near full size in the same relative position that the previously active application window occupied. Also the application window is made an inactive application window and rendered in a scaled down form in the row of inactive application windows in the desktop space . The swapping of relative positions may be carried out with the application windows transitioning by animation from one position to the other. For example simultaneously the inactive application window may grow scales up to replace the active application window while the active application window shrinks scales down to replace the previously inactive application window. As implicitly described with respect to aspects of the invention provide a dedicated facility for inactive application windows separate and apart from the taskbar by which a user can select an application window for interaction.

It will be appreciated that the inactive application windows may be rendered in different presentation styles such as in a horizontal orientation with a row at the top of the desktop space or in a vertical orientation with a column down the side of the desktop space such as shown in a combination of a column and a row or any other orientation which allows a user to readily identify the active application window and each of the inactive application windows. According to one aspect where a user has two display monitors the active application window may be rendered on one display screen and the inactive applications may be scaled down and rendered on the second display screen. In order to accommodate application windows of differing sizes and orientations the facility that manages the presentation of the inactive application windows can collectively scale all or individually reposition windows to ensure all windows remain in the desktop space . In instances where many inactive windows are included it may be appropriate to render the active application window below but near the full size of the application window. It will be appreciated that a user may issue a command when in a presentation style e.g. horizontal orientation such as to change to a presentation style e.g. vertical orientation such as in . Such changes between alternate presentation styles may occur by an animated transition. Also the active application window may change relative positions when the presentation styles change to be in a more central location with respect to the desktop space such as shown between .

According to another aspect of the invention additional application windows may be removed from the facility managing the list of inactive application windows. To accommodate users who are familiar with managing multiple open application windows or users who wish to exploit the power of multiple open application windows i.e. for drag and drop tasks the new mode may allow additional application windows to be included with the active application window. In this instance an inactive application window may be removed from the list of inactive application windows which are scaled down and instead be rendered at or near full size with active application window. While this aspect re introduces application window management problems it does on a user controlled basis with a smaller more manageable set of application windows.

An example of this implementation will be described with reference to . According to a user by issuing a special command such as a right click while hovering over an inactive application window or keyboard input may identify an additional window to be rendered at or near full size with the active application window. In the example of application window was the active application window when in response to a user command selecting application window to be removed from the list of inactive application windows managed by the facility application window was rendered at or near full size and became the active application window overlapping the previously active application window . A user may then perform operations involving two windows such as drag and drop operations with both application windows at or near full size. In this instance a user may interact with the application windows and in the same manner as a user might interact with the application windows in the desktop space of . For example selection of application window would move that window to the top of the Z order overlapping application window . Other inactive application windows may be added to this group by using the special command. This special command may be toggled off in which case each application window not in focus would be rendered in a scaled down form with the other inactive application windows which remain on the facility s list of inactive application windows.

If the user were to issue a normal selection command selecting inactive application window in similar what was described with respect to inactive application window selected would swap relative positions in the desktop space with the application window and would become the active application window and overlap the application window .

If in step no inactive application window is selected then at step the operating system determines whether the window management mode has been terminated or otherwise turned off. If the mode has been terminated then in step the application windows are rendered as appropriate in a Z order presentation where certain windows may not be displayed in the Z order and may be hidden or minimized depending on the circumstances. Thereafter the process ends.

If in step a special command request multi window operation has been selected such as described with respect to control shifts to step in . In step the selected inactive application window is removed from the list of inactive application windows managed by the window management facility. In step the current active application window is made inactive and the selected application window is made active. In step the selected application window is rendered at or near full size overlapping the previously active application window. Thereafter control returns to step in .

In another implementation of the present invention various aspects of the present invention may be performed by an application programming interface API . For example public APIs may interface with an operating system to allow an operating system to provide the various features of the present invention. In one embodiment a software architecture stored on one or more computer readable media for processing data representative of a Z ordering of overlapping windows on a computer display includes at least one component configured to render the application window at the top of the Z order at or near full size in a desktop space and render each application window below the top of the Z order in a scaled down form in the desktop space wherein none of the rendered application windows overlap one another and at least one application program interface to access the component. An API may receive a request to manage the application windows by rendering the active application window at or near full size and scaling down the inactive application windows in size access the necessary function s to perform the operation and then send the results back to an operating system. The operating system may use the data provided from the API to perform the various features of the present invention.

In another implementation a programming interface operable with an operating system can perform the steps including intercepting an instruction to a destination module to render the active application window at the top of a Z order and the inactive application windows below the active application window and providing an instruction to the destination module to render the active application window at or near full size in the desktop space and to render the inactive application windows in a scaled down form in the desktop space such that none of the rendered application windows overlap one another.

While illustrative systems and methods as described herein embodying various aspects of the present invention are shown it will be understood by those skilled in the art that the invention is not limited to these embodiments. Modifications may be made by those skilled in the art particularly in light of the foregoing teachings. For example each of the elements of the aforementioned embodiments may be utilized alone or in combination or subcombination with elements of the other embodiments. It will also be appreciated and understood that modifications may be made without departing from the true spirit and scope of the present invention. The description is thus to be regarded as illustrative instead of restrictive on the present invention.

