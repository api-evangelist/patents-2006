---

title: Methods, systems, and computer program products for recreating events occurring within a web application
abstract: A method, system, and computer program product for re-creating events occurring within a Web application is provided. The method includes receiving a request to perform an action from a client system accessing the Web application over a network. The method also includes generating a log file for the client system and recording the request and a timestamp of the request in the log file. The method further includes collecting client system information, executing the request, and recording the client system information and request execution details in the log file. Upon the occurrence of a triggering event, the method includes generating scripts to re-create the request and the request execution details, executing the scripts within the Web application and the operating environment of the client system that is re-produced using the client system information, and recording and evaluating results of execution of the scripts to identify any issues or evaluate client system experiences with the Web application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07805675&OS=07805675&RS=07805675
owner: International Business Machines Corporation
number: 07805675
owner_city: Armonk
owner_country: US
publication_date: 20060519
---
IBM is a registered trademark of International Business Machines Corporation Armonk N.Y. U.S.A. Other names used herein may be registered trademarks trademarks or product names of International Business Machines Corporation or other companies.

This invention relates to system diagnostics and particularly to methods systems and computer program products for re creating events occurring within a Web application.

Debugging a program found in a Web application by a customer can be a very difficult task. Due to the number of different execution paths that the user may have taken before actually seeing the bug in question can create a scenario that is very difficult if not impossible for the developers to reproduce. As a result debugging these problems consumes valuable time and resources.

Current solutions provide some assistance however their nature effectively changes the environment in which the error originally occurred. These changes to the environment can affect the Web application and in some cases change the way in which the problem in question manifests itself. Client side solutions typically record the user s actions to the client via a Web browser plug in. Since the actions are recorded on the client s machine the usage information is not available to developers for debugging. Server side solutions test only the server side code and therefore any problems related to the browser cannot be re produced.

What is needed therefore is a solution that can re create a user s experience during execution of a Web application in order to identify and address any issues that are manifested during the execution.

The shortcomings of the prior art are overcome and additional advantages are provided through the provision of a method for re creating events occurring during execution of a Web application. The method includes receiving a request to perform an action from a client system accessing the Web application over a network. The method also includes generating a log file for the client system and recording the request and a timestamp of the request in the log file. The method further includes collecting client system information executing the request and recording the client system information and request execution details in the log file. Upon the occurrence of an event trigger the method includes generating scripts to re create the request and the request execution details executing the scripts within the Web application and the operating environment of the client system that is re produced using the client system information and recording and evaluating results of execution of the scripts to identify any issues or evaluate client experiences with the Web application.

System and computer program products corresponding to the above summarized methods are also described and claimed herein.

Additional features and advantages are realized through the techniques of the present invention. Other embodiments and aspects of the invention are described in detail herein and are considered a part of the claimed invention. For a better understanding of the invention with advantages and features refer to the description and to the drawings.

As a result of the summarized invention technically we have achieved a solution that re creates a user s experience during execution of a Web application in order to identify and address any issues that are manifested during the execution or assess the user s experiences with the Web application. The user s experience is re created by recording user events and environmental information which are used in generating scripts that emulate the user s experience and operating environment within the same Web application in order to re produce any issues that were manifested during the user s experience or to evaluate the user s experiences with the Web application.

The detailed description explains the preferred embodiments of the invention together with advantages and features by way of example with reference to the drawings.

The logging and replay activities provides the capability to re create a user s experience during execution of a Web application in order to identify and address any issues that are manifested during the execution and or assess performance details. The issues and performance information may be evaluated and prioritized by developers associated with the Web application in order to address serious issues in a timely manner.

Referring now to a system upon which the logging and replay activities may be implemented in exemplary embodiments will now be described. The system of includes a host system in communication with client systems A B over one or more networks .

Host system may be a high speed processing device e.g. a mainframe computer that handles large volumes of processing requests from client systems A B. In exemplary embodiments host system functions as an applications server Web server and database management server. In exemplary embodiments the host system is implemented by a Web enterprise that provides services to Internet users such as communications e.g. email instant messaging chat rooms etc. search engine online shopping games and news to name a few. While only a single host system is shown in the system of it will be understood that multiple host systems may be implemented each in communication with one another via direct coupling or via one or more networks. For example multiple host systems may be interconnected through a distributed network architecture.

Client systems A B may comprise desktop or general purpose computer devices that generate data and processing requests e.g. a request to perform a search . For example user systems may request Web pages Web forms documents links etc. that are stored in a storage device that is accessible to the host system e.g. storage device . In exemplary embodiments client systems A B execute one or more applications for accessing information and services over a network e.g. networks . For example each of client systems A B implements a Web browser application A B respectively for communicating with network entities such as host system . In addition client systems A B implement input output devices e.g. display screen mouse keyboard microphone etc. . Client system A is operated by a general user of the Web application services provided by host system . For example client system A may be operated by a consumer who has a registered email account with the Web enterprise of host system . In exemplary embodiments client system B is operated by a developer or software tester of applications executing on the host system e.g. Web application .

Network s may be any type of communications network known in the art. For example network s may be an intranet extranet or an internetwork such as the Internet or a combination thereof. Network s may be wireless wireline or a combination thereof.

In exemplary embodiments host system executes various applications including a Web server application server and database management engine. Other applications e.g. business applications may also be implemented by host system as dictated by the needs of the enterprise of the host system .

As indicated above host system executes one or more applications for providing information and or services to users such as client system over a network. In exemplary embodiments host system executes a Web application that provides this information and or services e.g. online purchasing search engine games public phone book address book communications such as email instant messaging discussion or chat groups etc. . A Web application refers to software that is accessed via a Web browser over a network. While only one Web application is shown in for ease of explanation it will be understood that any number of Web applications may be implemented by host system .

Web application executes in conjunction with a recording module and a re creation module also referred to herein as replay module . Recording module and re creation module may be implemented as a plug in to Web application e.g. via an application programming interface where Web application is a commercial off the shelf product. Alternatively the functionality of recording module and re creation module may be built in to the Web application . In addition the recording module and re creation module may be configured to operate using an enable feature and disabled as needed .

Recording module collects and logs user generated events i.e. events initiated by a user of client system A . These user generated events are recorded in a log file and stored in a storage device e.g. storage device . User generated events may include link selection changing HTML form elements user interface element selections form submission mouse movements e.g. capturing mouse generated events recording mouse position for movements multi media selections etc. Recording module also collects and records client system information from the client system A such as browser type e.g. Netscape Navigator Internet Explorer browser version themes plug ins etc. Other client system information collected includes Internet connectivity data central processing unit CPU usage data memory usage data running applications data system services etc. The collecting and logging activities may be implemented using e.g. Servlet logging techniques Java Script event listeners mouse tracking tools browser plug ins software logging tools etc. The log file stores the information using a data structure such as the data structure shown in .

Host system is also in communication with storage device . Storage device may comprise one or more repositories of information utilized by the Web application . For example storage device may store Web pages Web forms documents images etc.

Turning now to a process for implementing the logging and replay activities will now be described in exemplary embodiments. At step the Web application e.g. search engine email program etc. is accessed by a user at client system A and the recording module if enabled is initialized. At step the Web application receives a request e.g. a search request request to access data or forms etc. from the client system A and the recording module generates a log file and stores the log file in storage device . The log file is unique to the client system A and may be distinguished using an identifier such as the IP address of the client system. For example a sample data structure used in capturing client system information is shown in . The data structure of identifies the Web application via WEB APPLN ID field . The client system A is identified via CLIENT ID field .

At step request information is stored in the log file. The request may be recorded in EVENT ID field along with a timestamp of the request e.g. in TIMESTAMP field . As indicated above the request may be a request for a Web page a Web form a search etc. The request is captured as a user generated event based upon the client system A inputs e.g. mouse clicks keyboard entries etc. .

At step the recording module collects browser information for the client system A e.g. browser type stored in BROWSER TYPE field and browser version stored in BROWSER VERSION field . This information is used by the re creation module to re produce the client system information as will be discussed further herein. This browser information collected is stored in the log file at step .

At step the recording module collects client system operating environment information. This operating environment information includes for example Internet connectivity data CPU usage memory usage running applications and system services to name a few. The operating environment information of the client system A is recorded in the log file at step via e.g. CLIENT ENVIRONMENT field . Optionally the recording module may also collect server environment information that is operating environment information associated with the host system at the time the client system request is received. This server environment information is collected at step and recorded in the log file at step e.g. via WEB ENVIRONMENT field .

At step the Web application processes the request. The processing that occurs is dependent upon the nature of the request. For example if the request is directed to a search request the processing includes e.g. accessing one or more databases of content in storage device and searching the database s based upon information provided in the request. The request execution may include retrieving and transmitting a Web page retrieving transmitting or receiving a Web form or performing an algorithm. The execution of the request or request execution details are captured and stored in the log file at step .

At step it is determined whether a triggering event has occurred. A triggering event activates the re creation module as described herein. A triggering event may be an issue detected relating to an error or performance degradation that occurs during the request processing. For example an issue may be a decrease in processor speed a failure of the Web application to complete the request execution an abnormal termination of the Web application or other application executing during the request execution etc. The issue may be identified when the client system transmits an error notification prompted by a message received at the client system A. The issue may alternatively be identified by the host system based upon processing details captured during execution of the request or other similar means. Some issues have known causes. If the issue has an identified cause the host system may transmit a notification to the client system A that addresses the issue and possible solutions.

In alternative exemplary embodiments the triggering event may be a request from developer client system B to recreate the request execution details and user environment that has been captured in record . For example a developer or human factors engineer may prompt the re creation module in order to perform remote usability testing whereby a remotely located test subject e.g. client system A can be observed navigating through a Web application without the need for screen sharing technology e.g. Netmeeting . In this scenario the request execution details and user environment is recreated in real time regardless of the presence or absence of any error conditions.

If no triggering event has occurred at step it is determined whether additional requests for the Web application exist at step . If so the process returns to step where another request is received by the Web application . Otherwise the Web application is exited at step .

If there is a triggering event at step e.g. a request from developer client system B or an issue detected with no known cause it is recorded in the log file at step via e.g. TRIGGER FLAG field and TRIGGER TYPE field and the replay module is initiated either automatically or by a developer at client system B at step . The replay module may be initiated immediately after detecting the triggering event or may be implemented e.g. for many detected issues at some future time.

At step the replay module accesses the log file for the client system A which presented the issue via e.g. the CLIENT ID field . The replay module generates scripts to emulate the user s experience using the information captured in the log file at step . Thus the browser type browser version operating environment etc. may be re produced along with the user generated events e.g. requests and request execution details in order to re produce the an that occurred during the user s experience or simply to review evaluate the user s experience with the Web application. The scripts are executed at step and this execution of the scripts occurs within the same Web application as that which was executed when the triggering event occurred. Results of the execution of the scripts are evaluated by the developer at client system B in order to identify any issues and determine its cause or to evaluate characteristics of the user s experience with the Web application .

The process returns to step whereby the Web application determines whether there are any additional requests to be processed.

The issues may be prioritized by the developer in order to evaluate and resolve more serious issues before addressing less serious issues.

The capabilities of the present invention can be implemented in software firmware hardware or some combination thereof.

As one example one or more aspects of the present invention can be included in an article of manufacture e.g. one or more computer program products having for instance computer usable media. The media has embodied therein for instance computer readable program code means for providing and facilitating the capabilities of the present invention. The article of manufacture can be included as a part of a computer system or sold separately.

Additionally at least one program storage device readable by a machine tangibly embodying at least one program of instructions executable by the machine to perform the capabilities of the present invention can be provided.

The flow diagrams depicted herein are just examples. There may be many variations to these diagrams or the steps or operations described therein without departing from the spirit of the invention. For instance the steps may be performed in a differing order or steps may be added deleted or modified. All of these variations are considered a part of the claimed invention.

While the preferred embodiment to the invention has been described it will be understood that those skilled in the art both now and in the future may male various improvements and enhancements which fall within the scope of the claims which follow. These claims should be construed to maintain the proper protection for the invention first described.

