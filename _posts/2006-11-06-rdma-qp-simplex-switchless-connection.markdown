---

title: RDMA QP simplex switchless connection
abstract: A local RDMA (Remote Direct Memory Access) network adapter that comprises a simplex switchless connection with a counterpart QP on a remote RDMA network adapter in an example is selected for a Queue Pair (QP). An apparatus in an example comprises a requester RDMA (Remote Direct Memory Access) session fail-over coordinator on a coherency domain that adds a session fail-over header to a front of a data payload sent by an RDMA computer program from the coherency domain. Upon termination, of an RDMA adapter not coherent with the coherency domain and in a communication path of the data payload, before delivery to the RDMA computer program of a receive completion notification for the data payload, the session fail-over header is employable by a responder RDMA session fail-over coordinator to reconstruct the receive completion notification.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08233380&OS=08233380&RS=08233380
owner: Hewlett-Packard Development Company, L.P.
number: 08233380
owner_city: Houston
owner_country: US
publication_date: 20061106
---
RDMA Remote Direct Memory Access technology allows accessing of memory on a remote system in which the local system specifies the remote location of the data to be transferred. Employing an RDMA Network Interface Controller RNIC on the remote system allows the access to take place without interrupting the processing of the CPU s on the system. An RNIC comprises a network I O adapter or embedded controller for example with iWARP and Verbs functionality.

Referring to the BACKGROUND section above an exemplary recovery approach and or scheme serves to recover all RDMA Remote Direct Memory Access connections from RDMA adapter failures. An exemplary recovery is transparent to applications using RDMA. An exemplary implementation works for multiple types of RDMA devices for example InfiniBand e.g. available through the InfiniBand Trade Association and RDMA over Ethernet iWARP devices.

Turning to a plurality of exemplary implementations of an apparatus comprise exemplary communication and or network fabrics and or topologies. An exemplary fabric comprises links switches and routers that connect a set of nodes with RDMA Remote Direct Memory Access protocol implementations. The exemplary implementations of in an example may be considered to comprise non point to point and or switched topologies. The exemplary implementation of in an example may be considered to comprise a point to point and or switchless topology. The apparatus in an example comprises a plurality of nodes such as nodes and and zero or more switches such as no switches or switches and or . An exemplary topology of the apparatus provides a redundant fabric to any node in the apparatus . An exemplary fail over automatically switches over to a redundancy upon failure of an element in the primary fabric.

The node in an example comprises a server and a plurality of adapters such as a primary RDMA adapter and a secondary RDMA adapter . The node in an example comprises a server and a plurality of adapters such as a primary RDMA adapter and a secondary RDMA adapter . An exemplary RDMA adapter comprises a network card network adapter and or NIC network interface card and or controller . For example the RDMA adapters comprise RDMA Network Interface Controllers RNICs . Exemplary servers in an example comprise one or more processors such as CPUs central processing units and one or more memories such as memories and or . The memory in an example stores computer programs. The memory in an example comprises data storage. An exemplary memory is accessible through RDMA operations. The memories in an example comprise contiguous memory and or partitions of a same memory on a server .

In one or more exemplary implementations one or more features described herein in connection with one or more of the nodes and or and or one or more parts thereof apply and or are extendible analogously to the other and or one or more other instances of nodes in the apparatus . In one or more exemplary implementations one or more features described herein in connection with one or more of the switches and or and or one or more parts thereof apply and or are extendible analogously to one or more of the others and or one or more other instances of switches in the apparatus . In one or more exemplary implementations one or more features described herein in connection with one or more of the servers and or and or one or more parts thereof apply and or are extendible analogously to the other and or one or more other instances of servers in the apparatus . In one or more exemplary implementations one or more features described herein in connection with one or more of the adapters and or and or one or more parts thereof apply and or are extendible analogously to one or more of the others and or one or more other instances of servers in the apparatus . In one or more exemplary implementations one or more features described herein in connection with one or more of the memories and or and or one or more parts thereof apply and or are extendible analogously to the other and or one or more other instances of memories in the apparatus . In one or more exemplary implementations one or more features described herein in connection with one or more of the RDMA applications and or one or more parts thereof apply and or are extendible analogously to the other and or one or more other instances of RDMA applications in the apparatus

Exemplary adapters and or may serve as a requester and or responder. A requester in an example comprises an adapter that initiates an operation such as a Send an RDMA write or an RDMA read. A responder in the example comprises the adapter that receives the message sent by the requester. An exemplary perspective on an operation may consider an adapter local or remote. A requester in an example may be local if a scenario is viewed by the requester. A requester in an example may be remote if a scenario is viewed by the responder. A responder in an example may be local if a scenario is viewed by the responder. A responder in an example may be remote if a scenario is viewed by the requester.

Turning to an exemplary server comprises memory that comprises one or more RDMA algorithms procedures programs processes mechanisms coordinators modules codes logics and or applications middleware and a plurality of drivers such as RDMA NIC device drivers and . An exemplary RDMA application may be implemented as kernel resident and or operating system resident logic and or may comprise user level programs for example user interface logic residing in user level program files with additional and or remaining logic residing in the kernel and or underlying operating system.

Exemplary middleware comprises RDMA middleware and operating system OS services . In one example the middleware may comprise session fail over coordinator algorithm code computer program computer process computer procedure mechanism application logic and or module . For example the session fail over module comprises a modification and or an add on software module to the middleware in an existing RDMA stack. In another example the session fail over module interacts with the middleware for example in any manner as long as the session fail over module is transparent to the RDMA application and the RDMA application continues working for example without modification whether or not the session fail over module is present in the middleware . An exemplary session fail over module may be implemented as kernel resident and or operating system resident logic and or may comprise user level programs for example user interface logic residing in user level program files with additional and or remaining logic residing in the kernel and or underlying operating system. In an exemplary implementation a precise location of the session fail over module may depend on the location of the RDMA applications and or a policy decision and or any policy decision made in the middleware . In an exemplary implementation all systems and or components participating in an exemplary fail over solution comprise the session fail over module for example they have the session fail over module installed thereon.

An exemplary session fail over module need not have device dependent and or specific knowledge and or information for example with respect to the RDMA adapter . In a further exemplary session fail over module a number of enhancements and or optimizations are possible for example through knowledge of the RDMA adapter . For example if the session fail over module has control over Steering Tag STag or Rkey in InfiniBand it may be desirable and or easier to allocate identical values for the target memory buffer handle provided to the primary and secondary adapters respectively.

Referring to an exemplary Steering Tag STag comprises a handle that is employable to identify a memory buffer that is a target of placement of a data payload . For example the memory on the server comprises the memory buffer and the memory on the server comprises the memory buffer . A tagged message in an example references a handle such as the Steering Tag STag . An exemplary handle comprises a type of smart pointer.

An exemplary STag comprises an identifier of a Memory Window or Memory Region. The STag in an example comprises an STag Index and an STag Key. The Consumer in an example forms the STag by combining the Stag Index with the STag Key. An exemplary STag Key comprises the least significant eight bit portion of an STag. This field of an STag in an example may be set to any value by the Consumer when performing a Memory Registration operation such as Bind Memory Window Fast Register Memory Region and Register Memory Region. An exemplary STag Index comprises the most significant twenty four bits of an STag. This field of the STag in an example is managed by the RDMA Network Interface Controller RNIC Interface RI for example the RDMA adapters and is treated as an opaque object by the Consumer. The Consumer in an example comprises a software process that communicates using RDMA Verbs for example to interact with the functionality of the RNIC Interface. An exemplary Consumer comprises an application program or an operating system OS adaptation layer such as in the memory which provides some API application programming interface .

STags in an example are employable to access memory on any system for example local or remote. In an exemplary RDMA send the requester does not reference STag of the receive buffer on a different system. The responding RDMA adapter is presented with a set of receive buffers including their associated STags by the RDMA application on the responding node. Upon receiving the requester s data the responding RDMA adapter uses the STag of a receive buffer among the buffers posted by the RDMA application to locate the receive buffer and write the data to it for example in an untagged message from the requester. In an exemplary RDMA write the requester does directly reference the STag of the remote buffer. The remote RDMA adapter simply uses the STag passed by the requester to locate and write to the buffer for example in a tagged message. In an exemplary RDMA read the requester does directly reference the STag of the remote buffer. The remote RDMA adapter simply uses the STag passed by the requester to locate and read from the buffer for example in a tagged message. In an exemplary RDMA send or an exemplary RDMA write the requester is presented with the STag of the buffer to send data from by the RDMA application on the requesting node. In an exemplary RDMA read the requester is presented by the RDMA application on the requesting node with the STag of a buffer to receive the data read from the remote buffer.

For an exemplary RDMA write operation from the server to the server the STag and or handle is employable in an example when an application such as the RDMA application on the server references blocks of memory or objects managed by another system and or server for example the server . The RDMA application on the server in an example receives the data payload from the memory buffer on the server into the memory buffer on the server . The RDMA application such as the one in the server in an example receives from the RDMA NIC device driver on the server an STag value for a specific memory buffer mapped on the RDMA adapter of the server that is to receive the data payload from the memory buffer on the server into the memory buffer on the server . The RDMA application on the server communicates the STag to the RDMA application on the server for example via an application specific technique and or approach as will be understood by those skilled in the art. The RDMA application located on the server in an example initiates an RDMA write operation that sends the data with specification of the STag value to target the memory buffer on the server .

For an exemplary read operation by the server from the server the STag and or handle is employable in an example when an application such as the RDMA application on the server references blocks of memory or objects managed by another system and or server for example the server . The RDMA application on the server in an example receives the data payload into the memory buffer on the server from the memory buffer on the server . The RDMA application such as the one in the server in an example receives from the RDMA device driver on the server an STag value for a specific memory buffer mapped on the RDMA adapter of the server in order to prepare for getting the data payload into the memory buffer on the server from the memory buffer on the server . The RDMA application on the server communicates the STag to the RDMA application on the server for example via an application specific technique and or approach as will be understood by those skilled in the art. The RDMA application located on the server in an example initiates an RDMA operation that sends the RDMA read request with specification of the STag value to target the memory buffer on the server .

An exemplary session fail over module virtualizes the RDMA adapters and and presents as one single RDMA adapter to the RDMA application . The RDMA application such as the one in the server in an example receives from the session fail over module a single value of STag for a specific memory region mapped on both the RDMA adapters and . The session fail over module maps the region on both the primary adapter and the secondary adapter . The RDMA application in server communicates this STag to a remote RDMA application such as the one in the server . The remote RDMA application in an example initiates an RDMA operation specifying the STag to target the associated memory region such as the buffer in the server . An exemplary rationale and or benefit of keeping the STag as seen by the RDMA application unchanged in an example is to ensure the RDMA application is unaware of the fail over. An exemplary RDMA device driver instances on the server provide identical STag values to the session fail over module for the region mapped on the primary adapter and the secondary adapter so that the exemplary session fail over module simply relays the STag to the RDMA application .

In exemplary contrast if the actual STag values programmed into the RDMA adapters are different in an example then only one STag value would be returned to the RDMA application in an exemplary transparent implementation by the session fail over module . The session fail over module in the server in an example would need to translate the STag to the right value depending on which RDMA adapter or is in use for the connection.

STag in an example may be used by an RDMA adapter on the responder node . STag as seen by an RDMA application may comprise an identical or single value for example to promote and or guarantee transparency to the RDMA application . An exemplary session fail over module in an example may accomplish and or promote transparency to the RDMA application by using the identical or single on both a primary responder RDMA adapter and a secondary responder RDMA adapter for example with help of RDMA device knowledge. In another example the session fail over module may accomplish and or promote transparency to the RDMA application by using two STag values one on the primary responder and another on the secondary responder. For example the requester session fail over module may translate the single value for STag passed by the requester node RDMA application into the appropriate value for example depending on whether the primary responder or secondary responder is used.

Turning to an exemplary RDMA connection using any two of the RDMA adapters comprises two Queue Pairs QPs . The two QPs comprise a QP on the RDMA adapter such as the RDMA adapter and a QP on the RDMA adapter such as the RDMA adapter . The QPs in an example are associated with each other by a standard connection establishment protocol. The two QPs in an example allow the Consumer such as the RDMA application on the node to interact with the Consumer such as the RDMA application on the node . The two queues as the pair in an exemplary QP comprise the Send Queue SQ and the Receive Queue RQ . Each queue in an example stores a Work Queue Element from the time the Work Queue Element is posted until the time the Work Queue Element is completed. An exemplary Send Queue SQ comprises PostSQ Work Queue Elements that have specific operation types such as Send Type RDMA Write or RDMA Read Type Operations as well as STag operations such as Bind and Invalidate. An exemplary Receive Queue RQ comprises Work Queue Elements that describe the Buffers into which data from incoming Send Operation Types may be placed.

An exemplary QP is present on each of two communicating RDMA adapters . QP is present on the adapter and in an example communicates with QP present on the adapter . QP is present on the adapter and in an example communicates with QP present on the adapter . QP is present on the adapter and in an example communicates with QP present on the adapter . QP is present on the adapter and in an example communicates with QP present on the adapter . An RDMA connection in an example comprises a pair of communicating QPs such as QP and QP . Once an RDMA connection exists between two adapters the connection in an example eventually times out or dies when one of the adapters fails. An exemplary implementation pre creates a set of backup QPs using the secondary adapters and migrates the traffic onto the secondary adapters for example as a backup if one of the primary adapters should fail. An exemplary RDMA session comprises a primary and a few backup QPs for every user requested connection as described herein. The number of connections may vary by topology. Resources other than QPs in an example may also be duplicated.

Referring to adapter failures particularly the ones that are fatal in an example may cause the host software and or any component outside the domain of the RDMA adapter such as the middleware or RDMA device driver on the server to lose the precise state of the failed adapter. Without an upper level protocol it may be difficult and or impossible in an example for the host to match the data sent and data received. The session fail over module in an example provides inserts and or injects an RDMA read following every Send operation from the RDMA application for example to flush the data on the responder and or remote coherency domain. For example the session fail over module on the server provides inserts and or injects an RDMA read following every Send operation from the RDMA application to the RDMA application on the server to flush the data all the way up into the coherency domain of the server .

An exemplary coherency domain is one where the participating components in a server see coherent read and write of data from all the components. For example the CPUs on the nodes in a cache coherent system do not have a data integrity problem if one CPU wrote some data to part of the memory while the other CPU s had a copy of a previous version of the data in their cache for example as additional parts of the memory . The other CPU s would learn of the update automatically. An exemplary way of handling this situation is to invalidate the other caches so at the next review or access of the data the CPUs fetch the data from the location of the data in the memory .

In an exemplary context of a fabric of coherent systems interconnected by RDMA hardware an RDMA write or send from the server to the server is not coherent. As an illustration of exemplary incoherency the server could consider the operation done when the server may not yet have seen the update from the server . The RDMA adapter on the server in an example may fail to notify the server of the receipt of the data from the server by the time the server considers the operation done making the server go out of synchronization and or coordination with the server for example with respect to some data. The standard RDMA protocols do not require that the operations be coherent. A completion notification of a subsequent RDMA read operation in an example guarantees the data associated with the RDMA write or Send operation reached the coherency domain of the responding server . The session fail over module on the node in an example interprets the RDMA read completion following an indication of acknowledgement of the RDMA read operation from the RDMA adapter on the node and as a guarantee of delivery of the data previously sent with the RDMA write or Send operation from the node to the node . The RDMA read completion in an example comprises a transport level acknowledgement of completion of the RDMA read operation . An exemplary interpretation by the session fail over module of the RDMA read completion as an acknowledgement of the RDMA read request serves as a substitute for an absent protocol in the standard RDMA protocols that would otherwise guarantee delivery of the previously sent data to the remote coherency domain by an indication from the remote coherency domain of direct acknowledgement of the sent data.

In an exemplary implementation the requester RDMA adapter does not assume the Send operation is done until the completion notification of the following RDMA read is received from the responder RDMA adapter . A receive completion notification associated with the Send operation in an example is posted on the responding node by the responding adapter . This receive completion notification for the Send operation in an example may not be posted immediately and may potentially happen after sending acknowledgement for the Send operation as well as response to the following RDMA read operation to the requesting adapter as the RDMA read completion . While the requester node can tell from the RDMA read completion that the data from the Send operation was placed in the memory of the responder node the requester node in an example cannot guarantee the receive completion associated with the Send Queue operation was also placed in the memory of the responder node because the responding adapter could have failed and or died after placing the data associated with the Send Queue operation but prior to writing the receive completion associated with the Send Queue operation. To notify the responder side RDMA application on the node of the data received from the Send operation responder side middleware on the node in an example reconstructs the receive completion associated with the Send operation from a special header for example a session fail over header added and or attached to the beginning and or front of the Send message by the requester side middleware on the node . Additional exemplary description of the session fail over header is presented herein.

Referring to primary and secondary adapters are connected to two different switches providing divergent paths through the fabric. If one switch fails the secondary adapters and the secondary switch take over. An exemplary implementation comprises a backup RDMA connection between the secondary adapters . If a link between a primary adapter and the primary switch fails or the primary adapter fails in an example the secondary adapter takes over on that node while the primary adapter is still used on the node that did not lose the link. An exemplary implementation comprises two additional backup connections. A first exemplary backup connection occurs between the adapters and for example to take care of failure of the primary adapter on the server . A second exemplary backup connection occurs between the adapters and for example to take care of failure of the primary adapter on the server . These additional backup connections in an example communicate via the inter switch links between the switches and . An exemplary implementation comprises the primary primary connection between the adapters and for normal operation. An exemplary implementation comprises a total of four connections for every user requested connection for example adapter to adapter adapter to adapter adapter to adapter and adapter to adapter . More than one pair of primary and secondary adapters in an example can be connected in a similar and or analogous fashion for example to meet increased bandwidth requirements.

An exemplary implementation distributes the load by assigning the different primary RDMA adapters to different instances of RDMA applications . For example if sixteen instances of an RDMA application are present in a server with four pairs of primary and secondary adapters each pair of adapters in an example can be used by every four instances of the RDMA application . Similar and or analogous distribution may be achieved on other servers such as as well. Because of the full connectivity in a switched topology any instance of an RDMA application on any node in an example is able to talk to any other instance of the RDMA application on any other node .

Referring to an exemplary implementation employs two ported adapters . Primary and secondary ports of each adapter in an example are connected to two switches for example providing divergent paths through the fabric. If one switch fails or a link or port between a primary adapter and the primary switch fails the secondary ports take over for example through employment of Auto Port and or Path Migration APM on InfiniBand IB or an implementation of an automatic port migration on iWARP. If the primary adapter fails in an example the secondary adapter takes over on that node while the primary adapter is still used on the node that did not see adapter failure.

Referring to primary and secondary adapters are connected in a point to point and or switchless topology and or fashion for example providing divergent paths. If primary link fails or the primary adapter fails the secondary adapters take over on secondary link . More than one pair of primary and secondary adapters can be connected in a similar and or analogous point to point and or switchless topology and or fashion for example to meet increased bandwidth requirements for example as traffic is distributed on more adapters. Unlike switched topologies an exemplary implementation omits full connectivity of any adapter being able to talk to any other adapter in the fabric. For example all resources for an application instance cannot be created in a single adapter hoping any remote application instance in the fabric will be able to communicate with the single adapter. Owing to this constraint a middleware implementation lacking a special mechanism of binding RDMA applications to multiple RDMA adapters would not be able to distribute the traffic from more than one instance of an RDMA application over multiple active adapters such as on the server for example limiting the maximum achievable bandwidth to the capacity of one RDMA adapter.

In an exemplary implementation therefore most of the resources such as Protection Domain PD Memory Region Window MR MW Completion Queue CQ are multiply present on all adapters in the system. The multiple CQs in an example are aggregated into a higher level software completion queue for the RDMA application to think there is one virtual CQ. For exemplary communication between a local RDMA application and a remote RDMA application their respective QPs need to be present on the adapters that are physically connected. However an exemplary Shared Receive Queue SRQ in an example cannot be meaningfully partitioned across the adapters without making the RDMA application aware of the presence of multiple adapters. An exemplary perspective may consider an RDMA application local or remote.

An illustrative description of an exemplary perspective of an RDMA application located on the server as local and an RDMA application located on the server as remote is presented herein for explanatory purposes. When an application s SRQ is resident on an adapter in an example all the QPs tied to the SRQ are also resident on the same adapter. This basically and or largely determines the remote adapter on which the QP counterparts are resident for the same connection. In an example if local RDMA application chose an adapter that happens to be not physically connected with an adapter that remote RDMA application chose for its SRQ then the send queue operations for a connection need follow the location of the remote process and or RDMA application rather than a locally selected location for their SRQs. An exemplary implementation employs two simplex connections for each connection sought by the RDMA application . If a primary adapter fails the remote primary adapter also loses connectivity. Hence all SRQs and associated QPs on the primary adapters will move to an alternate adapter. This will determine the new locations for the corresponding send queues.

Referring to an exemplary connection between any two of the RDMA adapters comprises two Queue Pairs QPs for example one QP on each side of the connection. Exemplary Queue Pairs QPs comprise QPs . An exemplary RDMA session comprises a plurality of connections. Referring to an exemplary implementation comprises four full duplex connections for example QP to QP between adapters and QP to QP between adapters and QP to QP between adapters and and QP to QP between adapters and . Data is transferred in both directions on the same connection in an exemplary full duplex connection. Referring to an exemplary implementation comprises three full duplex connections for example QP to QP between adapters and and QP to QP between adapters and QP to QP between adapters and . The exemplary implementation presented with reference to in an example omits a connection QP to QP between adapters and as unneeded for example because of employment of Auto Port and or Path Migration APM on InfiniBand IB or an implementation of an automatic port migration on iWARP.

Referring to an exemplary implementation comprises two dual simplex or half duplex connections per session. If the primary SRQ for a local RDMA application is on the RDMA adapter while the primary SRQ for a remote RDMA application is on the RDMA adapter there is no physical connectivity between the RDMA adapters on which the primary SRQs are resident. So one simplex unidirectional connection from QP to QP for the remote RDMA application to send data to the local RDMA application paired with another simplex unidirectional connection from QP to QP for the local RDMA application to send data to the remote RDMA application in an example are required desired needed and or provided. For example one simplex switchless connection comprises a local QP used as send queue and a counterpart remote QP used as receive queue and another simplex switchless connection may comprise a local QP used as receive queue and a counterpart remote QP used as send queue. Similar and or analogous sets of connections to the secondary RDMA adapters are required desired needed and or provided for example if the secondary adapters chosen for a local RDMA application and a remote RDMA application on the respective nodes are also not physically connected. Data is transferred in only one direction on an exemplary simplex or half duplex connection. For exemplary communication in both directions the two simplex or half duplex connections each carry data in one direction. An exemplary approach defers a choice of a local RDMA adapter for a QP to be used as a send queue for a local RDMA application until a time of connection establishment when a choice of a remote RDMA adapter for a QP to be used as receive queue for a remote RDMA application may be determined selected known and or identified. A choice of a local RDMA adapter for a QP to be used as receive queue for the local RDMA application in an example may also be communicated to the remote counterpart session fail over module for example so a choice of a remote RDMA adapter for a QP to be used as send queue for the remote RDMA application may be determined selected known and or identified by the remote session fail over module . The session fail over module in an example manages creating and maintaining the two simplex primary connections and two simplex secondary connections.

An exemplary local RDMA application on the server may need and or desire to communicate with multiple processes on the server . Keeping the SRQ for the local RDMA application on the RDMA adapter in an example does not completely avoid a desire and or need to create dual simplex connections with all the processes for example even though it does help with respect to the remote RDMA application that has its SRQ on the RDMA adapter . In one or more exemplary situations where the communicating processes happen to have their SRQs on the RDMA adapters that are physically connected a duplex connection may replace two simplex connections.

The number of backup resources is different for example depending on the type of resource and or topology in one or more exemplary implementations. A Protection Domain PD in an example is employable for tracking the association of Queue Pairs QPs Memory Windows MWs and Memory Regions MRs . PDs in an example are set by a Privileged Consumer to provide protection of one RDMA application from accessing through the RNIC the memory being used by another RDMA application . An exemplary Completion Queue CQ comprises a sharable queue that comprises one or more entries for example Completion Queue Entries. A CQ in an example may be employable to create a single point of completion notification for multiple Work Queues. The Work Queues associated with a Completion Queue in an example may be from different QPs and of differing queue types e.g. SQs or RQs . An exemplary and or optional Shared Receive Queue SRQ allows the Receive Queues from multiple QPs to retrieve Receive Queue Work Queue Elements from the same shared queue as needed.

An exemplary RDMA session comprises a set of related RDMA resources owned by an instance of an RDMA application . For example an RDMA session comprises a PD all QPs MRs MWs and SRQs on the PD and all CQs associated with the QPs on the PD. Depending on an exemplary usage model of an RDMA application some of the resources may not be required in a session. For example a simple session may comprise a PD QPs MRs and CQs. An exemplary RDMA application such as a user level process or thread has access to a dedicated RDMA session.

An exemplary Memory Window MW comprises a subset of a Memory Region for example which may be remotely accessed in a logically contiguous fashion. A Memory Window in an example may be identified by an STag a Base TO tagged offset and a length and also may reference an underlying Memory Region and may have Access Rights. An exemplary Memory Region MR comprises an area of memory that the Consumer wants the RNIC to be able to locally or locally and remotely access directly for example in a logically contiguous fashion. A Memory Region in an example may be identified by an STag a Base TO and a length and may be associated with a Physical Buffer List through the STag.

Referring to the exemplary implementations represented by upon a request by an RDMA application to create an RDMA resource exemplary duplicated resources are prepared before an adapter failure would occur. The session fail over module in an example creates two Protection Domains PDs for example one on each adapter . The session fail over module in an example creates two Completion Queues CQs for example one on each adapter . The session fail over module in an example creates two Shared Receive Queues SRQs for example one on each adapter . The session fail over module in an example creates two Memory Windows MWs and Memory Regions MRs for example one on each adapter . The session fail over module in an example creates Queue Pairs QPs for example as described herein with reference to . An exemplary implementation represented by may comprise four QPs and an exemplary implementation represented by may comprise three QPs. For example the remaining available network paths in the event of failure of a network component determines the need to have a connection on the paths as will be appreciated by those skilled in the art.

Referring to the exemplary implementation represented by upon a request by an RDMA application to create an RDMA resource exemplary duplicated resources are prepared before an adapter failure would occur. Analogously to the exemplary implementations represented by the session fail over module in the exemplary implementation represented by in an example creates two Shared Receive Queues SRQs for example one on each adapter . In contrast to the exemplary implementations represented by the session fail over module in the exemplary implementation represented by in an example creates on every adapter one each of Protection Domain PD Completion Queue CQ Memory Window MW and Memory Region MR . For example if node had four RDMA adapters a total of four PDs four CQs four MWs and four MRs one on each of adapters is created for every PD CQ MW and MR respectively requested by the RDMA application . The session fail over module in an example creates Queue Pairs QPs as described herein with reference to . An exemplary implementation represented by may comprise a primary simplex receive QP and a secondary simplex receive QP on the same local adapter as that of the primary SRQ and the secondary SRQ respectively and may reserve two other simplex send QPs for example deferring the adapter choice until the connection is created depending on the remote adapter chosen for the receive QPs on the connection. The local adapter to be chosen for the simplex send QPs for a connection in an example is physically connected to the remote adapter chosen for the simplex receive QPs of the remote RDMA application .

Referring to the session fail over module in an example adds an extra header such as session fail over header . The session fail over module on the requesting node in an example adds and or attaches the session fail over header to the beginning and or front of the data payload of the RDMA application for example through employment of an additional data gather element that describes a buffer receiving the session fail over header . The session fail over module on the responding node in an example employs an additional data scatter element that describes a buffer to serve as a receive buffer area for the session fail over header . The data scatter element is added to the beginning and or front of the matching receive buffer posted by the RDMA application on the responding node. The session fail over header in an example is employable by the session fail over module to reconstruct a receive completion on the server if the adapter on the server failed and or died prior to delivering the completion notification for the received data. An exemplary session fail over header comprises an exemplary total size limit of thirty two bytes.

An exemplary session fail over header is employed only in an RDMA Send operation from the RDMA application and specifically omitted in an RDMA write operation from the RDMA application . An exemplary rationale for omitting is to avoid writing the header information into the RDMA write target buffer exposed and owned by the RDMA application on the responding node. The RDMA write target buffer exposed by the RDMA application on the responding node in an example may not be able to accommodate both the header information and the data payload from the RDMA application on the requesting node. Owing to an exemplary transparency of the session fail over header to the RDMA application on the responding node the RDMA application on the responding node in an example might have allocated an RDMA write target buffer that is large enough to hold only the data payload sent by the RDMA application on the requesting node. Omitting the session fail over header in an example is acceptable in view of an exemplary absence of a requirement to generate receive completion on the responding node upon an RDMA write operation from the requesting node.

An exemplary session fail over header comprises all and or substantially all information as in a standard receive completion associated with the Send operation. An exemplary MESSAGE ID comprises an ID of the message. An exemplary SESSION ID ENDPOINT NUMBER serves to identify the session if data delivered to a Shared Receive Queue. An exemplary MESSAGE LENGTH comprises length of the data payload . Exemplary MESSAGE FLAGS may comprise and or resemble standard message flags. An exemplary LAST ACKED acknowledged MESSAGE ID comprises piggy backed session level acknowledgements if follow on RDMA read is issued less often than in every operation. An exemplary WORK REQUEST TYPE is presented if a Work Request Type is otherwise returned in the receive Completion Queue Entry of the RDMA adapter. The WORK REQUEST TYPE is set by the session fail over module prior to posting a send queue operation on the RDMA adapter and retrieved by the session fail over module on the responding node.

An illustrative description of an exemplary operation of an implementation of the apparatus is presented for explanatory purposes. is a representation of an exemplary logic flow for exemplary session fail over of an implementation of the apparatus . At STEP in an example the session fail over module makes a determination that a session is impacted by a failed RDMA adapter for example local or remote. An exemplary approach may be undertaken and or technique applied for each session in the event of a network failure. If a given session is not impacted for example because the session is without RDMA resources using the path of the network that failed the session in an example does not need to undergo migration. At STEP in an example the session fail over module makes a determination whether the adapter failure is local. If yes the session fail over module in an example waits for the RDMA application sessions to stop accessing the failed adapter and puts the RDMA applications to sleep. When a session does need to undergo migration exemplary care may be taken so that the session does not access the failed adapter in case of a local adapter failure. This may involve disabling inadvertent access to the adapter s registers etc. and making the RDMA application on the local node wait until the migration is complete.

At STEP in an example the session fail over module drains each CQ on the failed RDMA adapter and moves the entries to first level software CQs . The pending completions in an example are retrieved and moved to the first level software CQs . At STEP in an example if any memory window binds are complete the session fail over module re binds reliably on the backup QPs . An exemplary Bind Memory Window operation is posted on the send queue of a QP which instructs the RDMA adapter to allow remote access to a subset of a Memory Region. At STEP in an example the session fail over module sets the two connection state parameters LAST RELIABLY SENT MSGID and LAST RELIABLY RECEIVED MSGID for each connection in the session and reports them to the remote node in an exemplary REPORT. If the adapter failure is remote or upon completion of STEP in a case of local adapter failure STEP in an example proceeds to STEP .

STEP in an example is reached when a REPORT is received by the session fail over module on the local node from the remote node. In an exemplary approach a REPORT may be sent from the node to the node at STEP and another REPORT may be sent from the node to the node at the end of STEP . An exemplary implementation performs similar and or analogous processing of the REPORT for example regardless whether a REPORT is received by the node or the node . A few exemplary differences in processing of REPORT may exist for example based on whether the node received REPORT or the node received REPORT in response to the REPORT that the node sent to the node . At STEP in an example the session fail over module determines if a REPORT has already been sent for the connection from the local node to the remote node when a REPORT is received. This can happen in an example when there is a local adapter failure on node and the session fail over module on node proceeded from STEP to STEP for a connection after sending a REPORT for the connection from the local node to the remote node . If a REPORT has not been sent for the connection yet but only received at STEP the session fail over module in an example drains the CQ associated with the connection and moves the entries to first level software CQs. The session fail over module on node in an example may have landed at STEP when there is a remote adapter failure on node and the session fail over module on node sent a REPORT for a connection while the session fail over module on node effectively skipped and proceeded to STEP for the connection.

Further at STEP in an example if any memory window binds are complete the session fail over module re binds reliably on the backup QPs . The session fail over module in an example updates LAST RELIABLY SENT MSGID and LAST RELIABLY RECEIVED MSGID on the connection. The session fail over module in an example executes the remainder of STEP regardless whether a REPORT has been sent for this connection. AT STEP in an example the session fail over module determines if LAST RELIABLY SENT MSGID in the REPORT received exceeds the LAST RELIABLY RECEIVED MSGID setting on the connection. If yes the session fail over module takes care of lost receive completions for the data successfully received by looking into the buffers posted on the QPs and SRQs. The session fail over module in an example scans the receive buffer header area posted to QPs and SRQs for completions not reported in the CQ . This is the area in an example that receives the session fail over header sent across by the session fail over module on the remote node. Successful receive operations in an example are indicated by an appropriate bit in the MESSAGE FLAGS of the session fail over header .

The session fail over module on the local node in an example creates software completions in the corresponding first level CQ after looking into the receive buffer header area for the messages considered to be reliably sent as reported by the remote node in REPORT. The session fail over module in an example updates LAST RELIABLY RECEIVED MSGID on the connection. The session fail over module in an example re posts on the corresponding backup QP the receives seen as uncompleted after reconstructing the receive completions for the messages considered to be reliably sent for example as reported by the remote node in REPORT. If local adapter failure the session fail over module in an example re posts on SRQs on the corresponding backup RDMA adapter the receives seen as uncompleted after reconstructing the receive completions for the messages considered to be reliably sent for example as reported by the remote node in REPORT for example if the QP or connection is the last to be migrated among the QPs associated with the SRQ. If remote failure only the session fail over module in an example marks old primary receive queues of QPs as stale. This in an example causes any future receive completions from the old primary QPs to be dropped after switching to the backup QPs .

At STEP in an example the session fail over module makes a determination whether any pending sends exist without local send completions on the CQ . At STEP in an example the session fail over module looks into LAST RELIABLY RECEIVED MSGID for example in the REPORT reported by the remote node for this connection. If any of the responses to the follow on RDMA reads injected by the session fail over module have been lost in the fabric LAST RELIABLY RECEIVED MSGID from the remote node reliably indicates whether the RDMA sends from the RDMA application that are preceding the follow on RDMA read from the session fail over module actually were successfully received by the remote coherency domain. On the other hand if in an example the RDMA application initiates an RDMA write followed by an RDMA send and the session fail over module injected the follow on RDMA read after either operation it is possible for the remote RDMA adapter to die and or fail right before the RDMA Send can be processed successfully. This in an example causes the requesting session fail over module to record the RDMA write as completed whereas the responding session fail over module would not have seen the RDMA write for example because an RDMA write message does not comprise the session fail over header. So the LAST RELIABLY RECEIVED MSGID reported by the responding session fail over module in an example will be one lower than the LAST RELIABLY SENT MSGID recorded by the requesting session fail over module . The maximum of the LAST RELIABLY SENT MSGID recorded by the requesting session fail over module and the LAST RELIABLY RECEIVED MSGID reported by the responding session fail over module in an example indicates the last message seen as completed by either session fail over module.

Based on this information the session fail over module in an example makes a determination whether more RDMA sends or more RDMA writes have completed. If yes the session fail over module in an example creates software completions for the completed operations on the appropriate first level software CQ. The session fail over module in an example updates LAST RELIABLY SENT MSGID on the connection. The session fail over module in an example makes a determination whether any binds were done prior to the completed sends. If yes the session fail over module in an example creates software completions for the completed binds and re binds the memory windows reliably on the backup QPs. A Bind Memory Window operation is posted on the send queue of a QP which instructs the RDMA adapter to allow remote access to a subset of a Memory The session fail over module in an example makes a determination whether only a remote RDMA adapter failed. If yes the session fail over module in an example marks send queues of old primary QPs stale. This in an example causes any future send completions from the old primary QPs to be dropped after switching to the backup QPs . If a REPORT has not been sent already for the connection but only received at STEP in an example the session fail over module communicates LAST RELIABLY SENT MSGID and LAST RELIABLY RECEIVED MSGID of the connection to the appropriate remote node in REPORT.

The session fail over module on node in an example can enter STEP upon receipt of REPORT from the session fail over module on node that sent REPORT upon completion of STEP . At STEP in an example if a REPORT has already been sent by the session fail over module at STEP the session fail over module reposts on the backup QP the messages with MESSAGE ID less than LAST RELIABLY SENT MSGID setting on the connection and sends a MIGRATED message to the remote node . Upon receiving MIGRATED message from the session fail over module on node or upon completion of STEP by sending the MIGRATED message to the remote node STEP in an example proceeds to STEP .

At STEP in an example the session fail over module determines if there are some outstanding RDMA sends or RDMA writes posted by the RDMA application that never made it to the remote node. It is possible for the session fail over module in an example to deem an RDMA write posted by the RDMA application never made it to the remote node because of the failure to receive the completion of a follow on RDMA read injected by the session fail over module when the data payload of the RDMA write operation was actually successfully written to the responding node coherency domain. This situation in an example could happen when the responder RDMA adapter failed just after completing the processing of the RDMA write operation but before processing the follow on RDMA read operation. An exemplary approach may suggest and or specify that an RDMA application on the responding node rely on the receive completion of only a subsequent RDMA Send operation to indicate prior RDMA write operations have successfully completed on the responding node. So an exemplary session fail over module on the requesting node may consider that the RDMA write operation never made it to the remote node. The session fail over module in an example subsequently reposts on the backup QP the outstanding RDMA sends and RDMA writes posted by the RDMA application that never made it to the remote node. This serves to place the QP or connection in MIGRATED state. Once all the connections in a Session are in MIGRATED state the Session in an example is considered to be in MIGRATED state. The session fail over module puts the session application back in operation.

An exemplary implementation comprises an RDMA Remote Direct Memory Access network adapter located at an interface of a requester node coherency domain that sends an RDMA read request to a responder node coherency domain to flush into the responder node coherency domain data previously sent by the RDMA network adapter.

The RDMA network adapter is not coherent with the requester node coherency domain. The RDMA network adapter comprises a requester RDMA network adapter. The requester RDMA network adapter is not coherent with the requester node coherency domain. A responder RDMA network adapter is located at an interface of the responder node coherency domain. The responder RDMA network adapter is not coherent with the responder node coherency domain. The requester RDMA network adapter sends the data to the responder RDMA network adapter. The requester RDMA network adapter sends the RDMA read request to the responder RDMA network adapter to flush the data into the responder node coherency domain.

The RDMA network adapter comprises a requester RDMA adapter located at the interface of the requester node coherency domain. A responder RDMA network adapter is located at an interface of the responder node coherency domain. An RDMA computer program is located in the requester node coherency domain that sends the data to the requester RDMA network adapter that in turn sends the data to the responder RDMA adapter that in turn sends the data to the responder node coherency domain. The RDMA computer program comprises an RDMA user level computer application that sends the data to the requester RDMA network adapter that in turn sends the data to the responder RDMA adapter that in turn sends the data to the responder node coherency domain.

The RDMA computer program sends the data as an RDMA Send Queue operation to the requester RDMA network adapter that in turn sends the data as the RDMA Send Queue operation to the responder RDMA adapter that in turn sends the data as DMA Direct Memory Access write to the responder node coherency domain. The data comprises selected data. The RDMA computer program sends the selected data as an RDMA Send Queue operation to the requester RDMA network adapter that in turn sends the selected data as the RDMA Send Queue operation in a same RDMA connection to the responder node coherency domain. A session fail over computer program after the RDMA computer program sends the selected data to the requester RDMA network adapter sends the RDMA read request to the RDMA network adapter that in turn sends the RDMA read request in the same RDMA connection to the responder RDMA adapter that in turn reads random and or inconsequential data as DMA read from the responder node coherency domain to flush the selected data into the responder node coherency domain.

The session fail over computer program comprises a requester session fail over computer program that is located in server middleware of the requester node coherency domain. A responder session fail over computer program is located in server middleware of the responder node coherency domain. The responder RDMA adapter reads the random and or inconsequential data as the DMA read from memory exposed by the responder session fail over computer program.

The session fail over computer program comprises a session fail over user level computer application that sends the RDMA read request to the requester RDMA network adapter that in turn sends the RDMA read request in the same RDMA connection to the responder RDMA adapter that in turn reads the random and or inconsequential data as the DMA read from the responder node coherency domain to flush the selected data into the responder node coherency domain.

The RDMA network adapter sends the data in a same RDMA connection to the responder node coherency domain. The RDMA network adapter sends the RDMA read request in the same RDMA connection to the responder node coherency domain to flush the data into the responder node coherency domain.

A session fail over computer program sends the RDMA read request independently of any and or substantially all device specific RDMA adapter information to the RDMA network adapter that in turn sends the RDMA read request to the responder node coherency domain to flush the data into the responder node coherency domain.

A session fail over computer program performs an RDMA read operation after every Send Queue operation or RDMA write operation from an RDMA computer program to send a corresponding RDMA read request to the RDMA network adapter that in turn sends the RDMA read request to the responder node coherency domain to flush into the responder node coherency domain data from a corresponding Send Queue operation or RDMA write operation.

The RDMA network adapter comprises a primary requester node RDMA network adapter located at the interface of the requester node coherency domain wherein a secondary requester node RDMA network adapter is located at the interface of the requester node coherency domain. A primary responder node RDMA network adapter is located at an interface of the responder node coherency domain wherein a secondary responder node RDMA network adapter is located at the interface of the responder node coherency domain. A responder node session fail over computer program associates an identical value of a target memory buffer handle with the primary responder node RDMA network adapter and the secondary responder node RDMA network adapter. The requester node session fail over computer program sends an RDMA write request or RDMA read request originating in an RDMA computer program and tagged with the identical value of the target memory buffer handle to the primary or secondary requester node RDMA network adapter that in turn sends the RDMA write request or RDMA read request tagged with the identical value of the target memory buffer handle to the primary or secondary responder node RDMA network adapter that in turn performs a corresponding DMA write operation to or DMA read operation from the responder node coherency domain.

The RDMA network adapter comprises a primary requester node RDMA network adapter located at the interface of the requester node coherency domain. A secondary requester node RDMA network adapter is located at the interface of the requester node coherency domain. A primary responder node RDMA network adapter is located at an interface of the responder node coherency domain. A secondary responder node RDMA network adapter is located at the interface of the responder node coherency domain. A responder node session fail over computer program associates a first value of a target memory buffer handle with the primary responder node RDMA network adapter and a second value of the target memory buffer handle with the secondary responder node RDMA network adapter. The responder node session fail over computer program selects a single value from the first and second values of the target memory buffer handle coordinated with a corresponding one active adapter of the primary and secondary responder node RDMA network adapters. The responder node session fail over computer program returns the single value of the target memory buffer handle to a responder node RDMA computer program. The requester node session fail over computer program sends an RDMA write request or RDMA read request originating in a requester node RDMA computer program and tagged with the single value of the target memory buffer handle to the primary or secondary requester node RDMA network adapter that in turn sends the RDMA write request or RDMA read request tagged with the single value of the target memory buffer handle to the one active adapter of the primary and secondary responder node RDMA network adapters that in turn performs a corresponding DMA write operation to or DMA read operation from the responder node coherency domain.

Upon a single failure of the RDMA network adapter one or more sessions on only the RDMA network adapter undergo a total migration to a secondary RDMA network adapter to effect a fail over. One or more sessions on corresponding additional non failed RDMA network adapters continue to employ the corresponding additional non failed RDMA network adapters. Upon a failure of a network switch in a communication path with the RDMA network adapter automatic port migration is employable to effect a fail over and alleviate from a session fail over computer program a responsibility to handle the failure of the network switch.

An exemplary implementation comprises an RDMA Remote Direct Memory Access computer program located in a requester node coherency domain that interprets an indication of acknowledgement of an RDMA read request from an RDMA network adapter on a responder node coherency domain as a guarantee of delivery of data previously sent from the requester node coherency domain to the responder node coherency domain.

The indication of acknowledgement of the RDMA read request from the RDMA network adapter on the responder node coherency domain comprises a transport level acknowledgement of completion of the RDMA read request from the RDMA network adapter on the responder node coherency domain. The RDMA computer program interprets the transport level acknowledgement of completion of the RDMA read request from the RDMA network adapter on the responder node coherency domain as the guarantee of delivery of the data previously sent from the requester node coherency domain to the responder node coherency domain. The RDMA computer program comprises an RDMA user level computer application that interprets the indication of acknowledgement of the RDMA read request from the RDMA network adapter on the responder node coherency domain as the guarantee of delivery of the data previously sent from the requester node coherency domain to the responder node coherency domain.

An exemplary implementation comprises a session fail over coordinator that associates an identical value of a target memory buffer handle with a primary RDMA Remote Direct Memory Access network adapter and a secondary RDMA network adapter located at an interface of a requester node coherency domain. The session fail over coordinator sends one or more RDMA requests tagged with the identical value of the target memory buffer handle to the responder node coherency domain to ensure an RDMA computer program and or user level computer application located in the responder node coherency domain or in the requester node coherency domain is unaware of a fail over to the secondary RDMA network adapter that the session fail over coordinator performs upon a failure of the primary RDMA network adapter.

An exemplary approach selects or a Queue Pair QP a local RDMA Remote Direct Memory Access network adapter that comprises a simplex switchless connection with a counterpart QP on a remote RDMA network adapter.

A choice of the local RDMA network adapter for the QP is deferred until an establishment of a switchless connection that selects the remote RDMA network adapter for the counterpart QP. The QP is employable as a send queue for a local RDMA computer program. A choice of the local RDMA network adapter for the QP as the send queue for the local RDMA computer program is deferred until an establishment of a switchless connection with the counterpart QP on the remote RDMA network adapter that is employable as a receive queue for a remote RDMA computer program. At a local session fail over computer program the establishment of the simplex switchless connection with the counterpart QP on the remote RDMA network adapter is employed to select the local RDMA network adapter for the QP as the send queue for the local RDMA computer program.

A choice of a local RDMA network adapter for a QP as a receive queue for the local RDMA computer program is communicated to allow selection and or identification of a remote RDMA network adapter for a counterpart QP as a send queue for the remote RDMA computer program. At a remote session fail over computer program the choice of the local RDMA network adapter for the QP as the receive queue is employed to select the remote RDMA network adapter for the counterpart QP as the send queue for the remote RDMA computer program.

At a remote session fail over computer program the choice of the local RDMA network adapter for the QP as the receive queue is employed to select the remote RDMA network adapter for the counterpart QP as the send queue for the remote RDMA computer program. At a remote session fail over computer program the choice of the local RDMA network adapter for the QP as the receive queue is employed to establish a simplex switchless connection between the local RDMA network adapter for the QP as the receive queue and the remote RDMA network adapter for the counterpart QP as the send queue for the remote RDMA computer program. The local RDMA computer program comprises a local RDMA user level computer application. The remote RDMA computer program comprises a remote RDMA user level computer application. A choice of the local RDMA network adapter for the QP as the send queue for the local RDMA user level computer application is deferred until the establishment of the switchless connection with the counterpart QP on the remote RDMA network adapter that is employable as the receive queue for the remote RDMA user level computer application. The QP is employable as a send queue for a local RDMA computer program. At a local session fail over computer program an identification of the counterpart QP as a receive queue for a remote RDMA computer program is employed to establish a simplex switchless connection between the local RDMA network adapter for the QP as the send queue for the local RDMA computer program and the remote RDMA network adapter for the counterpart QP as the receive queue for the remote RDMA computer program.

An exemplary implementation comprises a requester RDMA Remote Direct Memory Access session fail over coordinator on a coherency domain that adds a session fail over header to a front of a data payload sent by an RDMA computer program from the coherency domain. Upon termination of an RDMA adapter not coherent with the coherency domain and in a communication path of the data payload before delivery to the RDMA computer program of a receive completion notification for the data payload the session fail over header is employable by a responder RDMA session fail over coordinator to reconstruct the receive completion notification.

The requester RDMA session fail over coordinator makes a determination the data payload comprises a data payload of an RDMA Send operation. The requester RDMA session fail over coordinator adds the session fail over header to the front of the data payload of the RDMA Send operation based on the determination the data payload comprises a data payload of an RDMA Send operation. The requester RDMA session fail over coordinator makes a determination a particular data payload sent by the RDMA computer program comprises a data payload of an RDMA write operation. The requester RDMA session fail over coordinator omits the session fail over header from the particular data payload of the RDMA write operation based on the determination the particular data payload comprises a data payload of an RDMA write operation.

The requester RDMA session fail over coordinator avoids compromise of transparency of the requester RDMA session fail over header from a perspective of a responder RDMA computer program through omission of the session fail over header from the front of the data payload of the RDMA write operation to avoid writing data into an RDMA write target buffer associated with the responder RDMA computer program. The coherency domain comprises a requester coherency domain. Upon a determination by the requester RDMA session fail over coordinator of termination of an RDMA adapter not coherent with the coherency domain and in a communication path of the data payload of the RDMA write operation before completion of a follow on RDMA read operation injected by the requester RDMA session fail over coordinator and wherein the completion serves to signify to the requester RDMA session fail over coordinator a delivery completion of the data payload of the RDMA write operation the requester RDMA session fail over coordinator causes a repeat RDMA write operation from the requester coherency domain. The RDMA computer program comprises an RDMA user level computer application wherein the requester RDMA session fail over coordinator adds the session fail over header to the front of the data payload sent by the RDMA user level computer application from the coherency domain.

An exemplary implementation comprises a requester RDMA Remote Direct Memory Access session fail over coordinator on a coherency domain that effects transparency from a perspective of an RDMA computer program from the coherency domain through addition of a session fail over header to a front of a data payload of an RDMA Send operation sent by the RDMA computer program and addition of a corresponding scatter gather element and or extra receive buffer area in a matching RDMA Receive operation on a responding node to correctly receive the session fail over header on the responding node and omission of the session fail over header from a front of a data payload of an RDMA write operation sent by the RDMA computer program. Upon termination of an RDMA adapter not coherent with the coherency domain and in a communication path of the data payload of the RDMA Send operation before delivery to the RDMA computer program of a receive completion notification for the data payload RDMA Send operation the session fail over header is employable by a responder RDMA session fail over coordinator to reconstruct the receive completion notification.

A completion queue holds completions drained by the session fail over coordinator while the RDMA application is unready to consume the completions. The completion queue comprises a first level completion queue CQ . The requester RDMA session fail over coordinator automatically forwards a dequeue attempt by the RDMA computer program to an underlying completion queue CQ when no more completions remain on the first level completion queue CQ . The completion queue comprises a first level completion queue CQ . The requester RDMA session fail over coordinator makes the first level completion queue CQ transparent to the RDMA computer program through creation of a perception the first level completion queue CQ as an underlying completion queue CQ . The RDMA computer program comprises an RDMA user level computer application. The requester RDMA session fail over coordinator effects transparency from the perspective of the RDMA user level computer application from the coherency domain.

An implementation of the apparatus in an example comprises a plurality of components such as one or more of electronic components mechanical components hardware components and or computer software components. A number of such components can be combined or divided in an implementation of the apparatus . An exemplary component of an implementation of the apparatus employs and or comprises a set and or series of computer instructions written in or implemented with any of a number of programming languages as will be appreciated by those skilled in the art.

An implementation of the apparatus in an example encompasses an article. The article comprises one or more computer readable signal bearing media. The article comprises means in the one or more media for one or more exemplary and or desirable functions approaches and or procedures.

An implementation of the apparatus in an example employs one or more computer readable signal bearing media. A computer readable signal bearing medium in an example stores software firmware and or assembly language for performing one or more portions of one or more implementations. An example of a computer readable signal bearing medium for an implementation of the apparatus comprises the recordable data storage medium of the memories of the servers . A computer readable signal bearing medium for an implementation of the apparatus in an example comprises one or more of a magnetic electrical optical biological and or atomic data storage medium. For example an implementation of the computer readable signal bearing medium comprises one or more floppy disks magnetic tapes CDs DVDs hard disk drives and or electronic memory. In another example an implementation of the computer readable signal bearing medium comprises a modulated carrier signal transmitted over a network comprising or coupled with an implementation of the apparatus for instance one or more of a telephone network a local area network LAN a wide area network WAN the Internet and or a wireless network.

The steps or operations described herein are examples. There may be variations to these steps or operations without departing from the spirit of the invention. For example the steps may be performed in a differing order or steps may be added deleted or modified.

Although exemplary implementation of the invention has been depicted and described in detail herein it will be apparent to those skilled in the relevant art that various modifications additions substitutions and the like can be made without departing from the spirit of the invention and these are therefore considered to be within the scope of the invention as defined in the following claims.

