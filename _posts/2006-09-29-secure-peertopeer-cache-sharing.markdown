---

title: Secure peer-to-peer cache sharing
abstract: A system, apparatus, method, and computer-readable medium are provided for secure P2P caching. In one method, a requesting peer obtains a hash of requested data from a server. The requesting peer then transmits a request for the data to other peers. The request proves that the requesting peer has the hash. If a caching peer has the data, it generates a reply to the request that proves that it has the requested data. If the requesting peer receives a reply from a caching peer, the requesting peer establishes a connection to the caching peer and retrieves the data from the caching peer. If the requesting peer does not receive a reply to the request from any other peer, the requesting peer establishes a connection to the server and retrieves the data from the server. The requesting peer stores the data for use in responding to requests from other peers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07617322&OS=07617322&RS=07617322
owner: Microsoft Corporation
number: 07617322
owner_city: Redmond
owner_country: US
publication_date: 20060929
---
As a result of economic globalization many enterprises operate a main corporate office along with many remote office sites called branch offices. In order to provide network connectivity between all of the offices of an enterprise a wide area network WAN is typically utilized. A WAN is a computer network that covers a wide geographic area and that may include many computers operating in different geographic locations. For instance a company based in the Western hemisphere may utilize a WAN to provide connectivity to branch offices located in the Eastern hemisphere.

A large portion of the information technology IT budgets of corporations around the world is expended on establishing and maintaining the technology in and network connectivity of branch offices. In particular a large portion of these budgets is expended on the purchase and maintenance of WAN links to branch offices. The trend toward globally disbursed offices is expected to increase the use of WANs along with the associated costs to enterprise. As a result it is generally desirable to improve WAN utilization in order to reduce WAN maintenance costs.

Various technologies are currently utilized to maximize WAN utilization and thereby reduce the associated WAN link costs. For instance technologies like data compression quality of service QoS traffic shaping transmission control protocol TCP optimization wide area file services WAFS caching and others may be utilized to maximize WAN utilization. In many cases these technologies are aggregated into a network appliance that resides at each branch office. Unfortunately these devices are often expensive and also require administrative supervision that may not be available at a branch office. More troubling however is the fact that these current solutions do not operate well in environments where end to end security is necessary.

It is with respect to these considerations and others that aspects of a method system apparatus and computer readable medium for secure peer to peer P2P cache sharing are described herein.

A system apparatus method and computer readable medium are provided herein for secure P2P cache sharing. According to one aspect of the disclosure provided herein the utilization of a network link is maximized by securely caching data at peer computers. Because the caching described herein is performed below the application layer of the network stack the caching process does not require a costly network appliance modification of client or server application programs or additional administrative support.

According to one method described herein peer computers operating within a P2P network include a cache manager program. The cache manager program executes in conjunction with a network protocol stack on the peer computers and acts as a proxy for application protocol data requests. In response to receiving such a request the cache manager is operative to contact a server computer to retrieve a hash value also referred to herein as a hash for the requested data. A hash value is the result of the application of a hash function to the requested data. The server computer will only provide the hash value for the requested data when the requesting peer computer on which the cache manager is executing has the appropriate access rights to the data. For instance the server computer may check an access control list ACL for the requested data or perform another type of security check before providing the hash value for the requested data to the cache manager.

Once the cache manager has obtained the hash value for the requested data the cache manager transmits a broadcast request for the data to other peer computers on the network. The broadcast request allows the requesting computer to determine whether another peer computer called the caching peer computer has the requested data. The broadcast request includes data sufficient to prove that the requesting peer has possession of the hash value for the requested data. Because possession of the hash value for the requested data implies the right to possession of the requested data itself this is accomplished without transmitting the hash value for the requested data.

In one implementation the broadcast request includes a hash of the hash value for the requested data random data generated by the requesting peer computer and an identifier for the requesting peer computer. In this implementation the broadcast request also includes a hash of the hash value for the requested data concatenated with the random data generated by the requesting peer a timestamp and the identifier for the requesting peer computer. Utilizing the data contained in the broadcast request the cache manager executing on other peer computers can determine whether the requesting peer computer is actually in possession of the hash value for the requested data. The data in the broadcast request also assists the other peer computers in determining whether they are in possession of the requested data.

If a cache manager executing on another peer computer determines that the requesting peer computer is in possession of the hash value for the requested data and that it has the requested data the cache manager executing on the caching peer computer generates a reply to the request. The reply contains data sufficient to prove possession of the requested data by the caching peer computer without transmitting the hash value for the requested data. In particular according to one implementation the reply contains a hash of the hash value for the requested data along with random data generated by the caching peer computer. The reply also contains a hash of the hash value for the requested data concatenated with the random data generated by the caching peer computer the identifier for the requesting peer computer an identifier for the caching peer computer and the timestamp.

If the requesting peer computer receives a reply to the request from a caching peer computer the cache manager executing on the requesting peer computer utilizes the contents of the reply to determine whether the caching peer computer actually possesses the requested data. If so the requesting peer computer establishes a secure network connection to the caching peer computer and retrieves the requested data from the caching peer computer over the secure connection. If the requesting peer computer does not receive a reply to the request from any other peer computer the requesting peer computer establishes a connection to the server computer from which it obtained the hash and retrieves the requested data from the server computer.

Once the requesting peer computer has obtained the requested data either from another peer computer or from the server computer the requesting peer computer may store the requested data in a cache and index the data using a hash of the hash value for the requested data. The peer computer can then utilize the stored data to respond to requests from other peer computers for the data. In this manner each peer computer acts as both a requesting peer computer and a caching peer computer.

The above described subject matter may also be implemented as a computer controlled apparatus a computer process a computing system or as an article of manufacture such as a computer program product or computer readable medium. The computer program product may be a computer storage media readable by a computer system and encoding a computer program of instructions for executing a computer process. The computer program product may also be a propagated signal on a carrier readable by a computing system and encoding a computer program of instructions for executing a computer process. These and various other features will be apparent from a reading of the following Detailed Description and a review of the associated drawings.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

The following detailed description is directed to systems methods and computer readable media for secure P2P cache sharing. While the subject matter described herein is presented in the general context of program modules that execute in conjunction with the execution of an operating system and application programs on a computer system those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Those skilled in the art will also recognize that the software components described herein may also be implemented in hardware such as through the use of application specific integrated circuits ASICs field programmable gate arrays FPGAs custom hardware or other types of hardware devices.

As described herein program modules generally include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the subject matter described herein may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. The subject matter described herein is also described as being practiced in a distributed computing environment where tasks are performed by remote processing devices that are linked through a communications network and wherein program modules may be located in both local and remote memory storage devices. It should be appreciated however that the implementations described herein may also be utilized in conjunction with stand alone computer systems and other types of computing devices.

In the following detailed description references are made to the accompanying drawings that form a part hereof and which are shown by way of illustration specific embodiments or examples. Referring now to the drawings in which like numerals represent like elements through the several figures aspects of a computing system and methodology for secure P2P cache sharing will be described.

The network architecture shown in is a typical network architecture utilized by businesses to connect a main corporate campus or office and multiple remote locations or branch offices. It should be appreciated however that the network environment shown in is merely illustrative and that the implementations described herein may be utilized to securely transfer data between computer systems operating in any type of network environment. As a result the network architecture shown in and described herein should be considered merely illustrative and not limiting in any fashion.

The WAN illustrated in includes a main corporate network to which the content server is directly connected. The main corporate network in turn is connected to a distributed public computing network such as the Internet . The branch office networks A C are also connected to the Internet . The branch office networks A C are local area networks LANs suitable for locally connecting two or more computer systems. For instance the peer computers A C are connected to the branch office network A and the peer computers D F are connected to the branch office network B. It should be appreciated that more or fewer branch office networks may be utilized than shown in and that more or fewer peer computers may be connected to each branch office network. It should also be appreciated that other networks not shown in may be utilized to complete the network path between the peer computers A F and to the content server .

According to implementations described herein the peer computers A F are operative to create a P2P networking system. A P2P networking system is a network that relies primarily on the computing power bandwidth and storage of participants in the network rather than concentrating it in a relatively low number of servers. As will be described in greater detail below the P2P networking system created by the peer computers A F is operative to cache data at some or all of the peers A F and to provide the cached data to other peer computers in a secure manner. In this way data retrieved from the content server over the WAN can be cached within a branch office network. At the time of a subsequent request for the data from one of the peer computers A F the cached data is utilized rather than again retrieving the data from the content server over the WAN. In this manner the amount of network traffic sent over the WAN is reduced. Additional details regarding this process are provided below with respect to .

Each of the peer computers A F illustrated in comprises a standard desktop laptop handheld server or other type of computer system. As will be discussed in detail below each of the peer computers A F includes a cache manager program that coordinates the process of securely caching data at the peer computers A F and of retrieving requested data from the P2P cache or from the content server as necessary. Additional details regarding the software and hardware utilized in the peer computers A F and their operation will be provided below with respect to .

The content server computer illustrated in comprises a standard server computer operative to receive and respond to requests from the peer computers A F for content stored at or available to the content server . The content may comprise any type of digital data including but not limited to electronic mail e mail messages data files stored at the content server or elsewhere Web pages stored at the content server or on the Internet personal information manager PIM data such as calendar events contacts tasks or notes or other types of data. As will be described in greater detail below the content server assists in the caching of data at the peer computers A F by providing hash values that uniquely describe data requested by the peer computers A F. Also if requested data is not cached by one of the peer computers A F the content server will directly provide the requested data to the requesting peer computer. Additional details regarding the hardware and software utilized in the content server and their operation will be described below with respect to .

Referring now to additional details will be provided regarding the embodiments presented herein for securely caching data in a P2P system. In particular is a software architecture diagram illustrating aspects of the network protocol stacks utilized by the peer computers A F and the content server . With regard to the content server an application A is executed by the server at the top of the protocol stack. The application A comprises a server application for receiving and responding to requests for content stored at the server or another networked location. For instance in one implementation the application A comprises a Web server application for receiving and responding to requests for Web pages and data referenced therein. Alternatively the application A may comprise an e mail server application a file server application or any other type of server side application program.

The application protocol A executes just below the application A. The application protocol A is an application specific protocol. For instance where the application A is a Web server application the application protocol A may be the Hypertext Transfer Protocol HTTP . Where the application A is an e mail server application the application protocol A may be the Messaging Application Programming Interface MAPI protocol. Where the application A is a file server application the application protocol A may be the Common Internet File Services CIFS protocol. It should be appreciated that the application protocols described herein with reference to are merely illustrative and that other appropriate application protocols may be utilized to provide protocol services for other types of server side application programs.

The server also executes a proxy just below the application protocol A in the network protocol stack. The proxy utilizes one or more protocol specific shims A C that receive and respond to requests from a cache manager A executing on the peer computers A F. In particular the protocol specific shims A C generate signatures called hash values of content downloadable from the content server . A hash value is the result of the application of a hash function to the requested data. In one implementation described herein the hash function utilized by the shims. A C is a cryptographically secure one way hash function. This implies that the hash function is collision free i.e. different input data will not generate an identical hash and that hash values cannot be utilized to generate the input data that generated the hash. Such hash functions are known to those skilled in the art. Additional details regarding the use of the hash values generated by the shims A C will be provided below with respect to .

According to another implementation the hash value may comprise a keyed hash message authentication code HMAC with a unique key for each block of data. In this implementation a secret is generated and maintained by the server and utilized to generate the HMAC. The secret is also communicated to each peer computer along with the HMAC. In one implementation a given block of data always utilizes the same secret per server computer. In another implementation the per block secret may be shared between server computers. The use of a HMAC with a unique key for each block of data prevents brute force attacks where some of the plain text may be known.

It should be appreciated that for some protocols and applications like CIFS for instance a separate server may provide the functionality described herein as being performed by the protocol specific shims A C. For other protocols this functionality may be provided by an add on to the application A that utilizes the protocol. For instance in the case of MAPI communication between a client application executing on one of the peer computers and an e mail application executing on the content server there is a protocol specific shim B on the server . A proxy executing on the peers communicates with the shim B to request the hash values for requested data. In one implementation the proxy executing on the peer computers is the cache manager A. The operation of the shims A C and the cache manager A is described in greater detail below.

As also shown in the Transmission Control Protocol Internet Protocol TCP IP layer A sits below the proxy . As known in the art the TCP IP layer A implements the TCP protocol and the Internet Protocol that together guarantee reliable and in order delivery of data from sender to receiver. Details regarding the TCP IP layer A are known to those skilled in the art. It should be appreciated that the network protocol stacks illustrated in for the peer computers A B and the content server may include additional protocol layers not shown in . These protocol layers are commonly understood in the art.

It should be appreciated that each of the peer computers A F may from time to time operate as both a requesting peer computer and a caching peer computer. These roles may also be performed simultaneously. That is at any given time a single peer computer may act as a requesting peer computer with respect to one request and as a caching peer computer with respect to other requests. In alternative implementations the caching functionality may be turned off for some of the peer computers A F thereby causing these peers to only act in the role of a requesting peer computer.

The networking protocol stacks utilized by the peers A B also include the client application programs B C respectively. These client application programs include but are not limited to a personal information manager desktop client a file transfer program a Web browser or any other type of application program. The network protocol stacks utilized by the peer computers A B provided herein also include an application protocol B C respectively. The application protocols B C perform similar functions on the peers as those described above with respect to the content server . The TCP IP layers B C of the peer computers A B respectively also perform similar functions as those described above with respect to the content server .

As mentioned briefly above each of the peer computers A B includes a cache manager A B respectively as a part of its network protocol stack. The cache manager executes between the application protocol and the TCP IP layer in the stack. The cache manager A executing on a requesting peer such as the peer A is operative to receive a request for data from the application protocol B. In response to such a request the cache manager A contacts the proxy and requests a hash for the requested data. Because possession of a hash value for the requested data is proof of entitlement to the requested data itself the proxy determines whether the cache manager A is entitled to the data. For instance the proxy may cause an ACL to be examined to determine if the peer A is entitled to the data. If the peer A is entitled to possession of the data the proxy returns the hash value for the requested data to the cache manager A.

Once the cache manager A has obtained the hash value for the requested data the cache manager A transmits a broadcast request to other peer computers to determine if any other peer computers have the requested data. The broadcast request includes data sufficient to prove that the requesting peer has possession of the hash value for the requested data without transmitting the hash value itself. The broadcast request also includes data to assist each of the peer computers in determining whether they have the requested data. Additional details regarding the data transmitted in such a request are provided below with respect to .

If a peer computer has the requested data such as the peer computer B in for instance the cache manager executing on the peer generates a reply to the request and transmits the reply to the requesting peer. The reply includes data sufficient to prove that the caching peer is also in possession of the hash value for the requested data and the requested data itself without transmitting the hash value. Additional details regarding the data transmitted in the reply generated by the caching peer are provided below with respect to .

When the requesting peer receives a reply from one of the caching peer computers the requesting peer verifies that the reply is valid. If so the requesting peer establishes a secure connection to the caching peer and retrieves the requested data. If no caching peers provide a reply to the request the cache manager A of the requesting peer contacts the proxy to obtain the requested data directly from the content server . Once the requesting peer has the requested data the data is cached at the requesting peer for use in responding to requests from other peers for the data. It should be appreciated that this process may be repeated many times to obtain a single data file. For instance the process may be repeated for each block or sector of a file until the entire file has been obtained. Additional details regarding this process are provided below with respect to .

It should be appreciated that the logical operations described with reference to are implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance requirements of the computing system. Accordingly the logical operations described herein are referred to variously as operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination.

The routine begins at operation where the application B executing on the requesting peer A requests data from the application protocol B. In turn the application protocol B requests the data from the cache manager A at operation . In response to receiving such a request the cache manager A requests a hash value for the requested data from the appropriate protocol specific shim executing on the content server . This occurs at operation .

The routine begins at operation where the proxy executing on the content server receives the request for the hash value from the cache manager A. From operation the routine continues to operation where the content server determines whether the requesting peer A is entitled to the requested data. This may occur for instance through the examination of an ACL or other type of data structure defining access rights for the peer computers or their users. If the requesting peer A is entitled to the data the routine continues from decision operation to operation shown in and described below. If the requesting peer A is not entitled to the data the routine continues from operation to operation where an error is returned to the requesting peer A. The error is processed by the requesting peer A at operations and . From operation the routine continues to operation where it ends.

At operation the proxy and the appropriate protocol specific shim generate the hash value for the requested data using the hash function described above. Once the hash value has been generated the content server returns the hash value to the cache manager A of the requesting peer A. The routine then continues to operations and described below.

At operation of the routine the requesting peer A receives the hash value from the content server . The routine then continues to operation where the requesting peer A transmits a broadcast message to the other peer computers A F to determine if any of the peer computers A F has the requested data. As discussed briefly above the broadcast message includes data sufficient to prove that the requesting peer A has the hash value without transmitting the hash value itself in the request.

According to one implementation the data structure shown in is transmitted in the broadcast message. As shown in the data structure includes a hash of the concatenation of the hash value for the requested data received from the content server a number used once NONCE for the requesting peer A a time stamp and an identifier for the requesting peer. A NONCE comprises random data and is utilized to assist in the prevention of a replay attack and to match replies to the broadcast request. The time stamp is also included to assist in the prevention of a replay attack. The identifier comprises a unique identifier for the requesting peer A such as an IP address or fully qualified domain name for the requesting peer A. The broadcast request also includes a hash of the hash for the requested data the NONCE for the requesting peer A the time stamp and the identifier for the requesting peer A. As will be described in detail below the caching peer B utilizes the contents of the data structure to determine whether the requesting peer A is in possession of the hash value for the requested data without requiring the hash value to be sent in the request.

According to one implementation the hash of the hash for the requested data may comprise a hash of the hash concatenated with a constant string. For instance the constant string MS P2P Caching may be concatenated with the hash. The peer computers may index hash values generated in this manner in order to permit the quick determination as to whether they have the block in question. In the embodiment wherein a HMAC is utilized the hash of the hash for the requested data will utilize the secret obtained from the server instead of the constant string.

The routine begins at operation where the caching peer B receives the broadcast message transmitted by the requesting peer A. The routine then continues to operation where the caching peer B attempts to locate the requested data using the hash of the hash for the requested data provided in the broadcast request. This is possible because in one implementation the caching peer B indexes cached data using the hash of the hash value for the stored data. In this manner a quick determination can be made by each caching peer B as to whether it actually has the requested data.

If at operation the caching peer B determines that it does not have the requested data the routine continues to operation where it ends. If the caching peer B determines that it has the requested data the routine continues from decision operation to operation . At operation the caching peer B verifies that the requesting peer is actually in possession of the hash value for the requested data. In one implementation this is performed by generating a hash of the hash of the requested data which the caching peer B will have if it has the requested data the NONCE for the requesting peer A the time stamp and the identifier for the requesting peer A. The resulting value is then compared to the hash transmitted by the requesting peer A in the broadcast request. If the two values match then the requesting peer A is actually in possession of the hash value for the requested data and is entitled to receive the data itself from the caching peer B.

If the caching peer B cannot verify that the requesting peer A is in possession of the hash value for the requested data the routine continues from operation to operation where it ends. If the caching peer B verifies that the requesting peer A is in possession of the hash value for the requested data the routine continues from operation to operation . At operation the caching peer B generates a reply to the requesting peer A. The reply includes data sufficient to prove possession of the requested data by the caching peer computer without transmitting the hash value for the requested data.

According to one implementation the data structure shown in is transmitted in the reply. As shown in the data structure includes a hash of the hash value for the requested data a NONCE generated by the caching peer B the identifier for the requesting peer A an identifier for the caching peer B and the time stamp . The data structure also contains the hash of the hash value for the requested data concatenated with the NONCE of the caching peer B. As will be described in greater detail below the data stored in the data structure is utilized by the requesting peer A to verify that the caching peer B actually has the requested data.

From operation the routine continues to operation where the cache manager A determines if any replies were received to the broadcast message. If no replies were received then none of the peer computers has the requested data cached. Accordingly in this case the routine continues from operation to operation where a secure connection is established with the content server and the requested data is retrieved from the content server directly. The content server transmits the data to the requesting peer A at operation of the routine . When the requesting peer A receives the data the routine continues to operation where the cache manager A stores the requested data and indexes the data utilizing a hash of the hash value for the requested data. In this manner the data is indexed and cached for use in responding to requests for the data from other peers. The cache manager A also returns the requested data to the application B. The routine then continues to operation where it ends.

If at operation the cache manager A determines that a reply was received to the broadcast message the routine continues from operation to operation where the reply is received. It should be appreciated that multiple replies may be received and processed in the manner described herein. Moreover when multiple replies are received the requesting peer A may choose which of the responding caching peers to retrieve the data from based on a variety of factors including which of the caching peers has the most data the speed or latency of the network connection to the caching peers and other factors.

At operation of the routine the requesting peer A determines whether a valid reply was received by the caching peer B. In one implementation this is accomplished by generating a hash of the hash value for the requested data the NONCE generated by the caching peer A the identifier for the requesting peer A the identifier for the caching peer B and the time stamp . The generated hash is then compared to the hash transmitted in the reply. If the two values match the reply is valid and the requested data may be retrieved from the caching peer B. Accordingly if the requesting peer A determines that the reply is invalid the routine branches from operation to operation where it ends. If the reply is valid the routine continues to operation .

At operation the requesting peer A establishes a secure network connection to the caching peer B such as for instance through the use of a Secure Sockets Layer SSL connection. Also at operation the requesting peer A retrieves the requested data from the caching peer B. In particular in the embodiment where a HMAC is utilized the requesting peer A transmits the hash of the hash of the data concatenated with the secret to the caching peer B. The per block secret must also be sent to the caching peer B. The caching peer B then utilizes the secret to verify the authorization of the requesting peer A. If the authorization of the requesting peer A is verified the caching peer B establishes the connection and transmits the requested data at operation of the routine . Once the requested data has been received at the requesting peer A the data is indexed cached and returned to the application B at operation . The routine then continues to operation where it ends.

Referring now to an illustrative computer architecture for a computer utilized in the various embodiments presented herein will be discussed. The computer architecture shown in illustrates a conventional desktop laptop computer handheld or server computer and may be utilized to embody the peer computers A F or the content server described above. The computer architecture shown in includes a central processing unit CPU a system memory including a random access memory RAM and a read only memory ROM and a system bus that couples the memory to the CPU . A basic input output system containing the basic routines that help to transfer information between elements within the computer such as during startup is stored in the ROM . The computer further includes a mass storage device for storing an operating system application programs and other program modules which will be described in greater detail below.

The mass storage device is connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer readable media provide non volatile storage for the computer . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer readable media can be any available media that can be accessed by the computer .

By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer .

According to various embodiments the computer may operate in a networked environment using logical connections to remote computers through a network such as the WAN described above with respect to . The computer may connect to the network through a network interface unit connected to the bus . It should be appreciated that the network interface unit may also be utilized to connect to other types of networks and remote computer systems. The computer may also include an input output controller for receiving and processing input from a number of other devices including a keyboard mouse or electronic stylus not shown in . Similarly an input output controller may provide output to a display screen a printer or other type of output device also not shown in .

As mentioned briefly above a number of program modules and data files may be stored in the mass storage device and RAM of the computer including an operating system suitable for controlling the operation of a networked computer such as the WINDOWS XP or WINDOWS VISTA operating systems from MICROSOFT CORPORATION of Redmond Wash. The mass storage device and RAM may also store one or more program modules. In particular the mass storage device and the RAM may store the software components illustrated in and described above with reference to such as the client application B the cache manager B the hashes B and the data B received from other peers or the content server . In the case of the content server the mass storage device may be utilized to store the server application A the proxy the protocol specific shims the hashes A and the data A. Other data and program modules may also be stored on the mass storage device of the peers A F and the content server .

Based on the foregoing it should be appreciated that systems methods apparatus data structures and computer readable media for secure P2P caching are provided herein. Although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims. The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

