---

title: Hybrid data object model
abstract: Computer implemented method, system and computer usable program code for processing a data object, for example, for searching for, creating or updating a data object. A computer implemented method for processing a data object includes receiving a request for the data object. A static portion and a dynamic portion for the data object are determined, and an instruction for the static portion and an instruction for the dynamic portion are processed separately. To search for a data object, a result from processing an instruction for the static portion and a result from processing the instruction for the dynamic portion are merged to form a hybrid data object. To create or update a data object, a result from processing an instruction for the static portion and a result from processing the instruction for the dynamic portion is saved in a database.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08146054&OS=08146054&RS=08146054
owner: International Business Machines Corporation
number: 08146054
owner_city: Armonk
owner_country: US
publication_date: 20061212
---
The present invention relates generally to the data processing field and more particularly to a computer implemented method system and computer usable program code for searching for creating and updating a data object.

Information Technology Infrastructure Library ITIL is a framework of best practice approaches intended to facilitate the delivery of high quality information technology IT services. In order to facilitate the integration and automation of ITIL best practices ITIL specifies the use of CMDB Configuration Management Database to leverage a single source of information. A CMDB is a unified or federated repository of information related to all the components of an information system. The IBM Tivoli CMDB for example is a fundamental software component that provides a specific level of data integration across Tivoli products.

A CMDB tends to be a highly customized part of a customer s IT operational environment. While CMDB provides a significant number of class types for customers to store configuration and product related information customers will typically have additional data which they would like to include in their own environment. The ability to be able to extend the CMDB is an important feature for a successful CMDB product.

In order to enable customers to add additional configuration and process related attributes in their own environments it is necessary for CMDB to provide a dynamic extension solution. Such a solution should involve a generic extension approach that does not require new code to be added and does not require recompilation deployment of the product. A dynamic SDO data object provides flexibility by providing a generic API Application Programming Interface and runtime data type binding. However it also introduces performance overhead. In addition by switching to a purely dynamic SDO data object implementation it is necessary to rewrite a significant amount of code.

There is accordingly a need for a mechanism to enable a CMDB database to be extended in an efficient flexible manner to facilitate searching creating and updating a data object.

Exemplary embodiments provide a computer implemented method system and computer usable program code for processing a data object for example for searching for creating or updating a data object. A computer implemented method for processing a data object includes receiving a request for the data object. A static portion and a dynamic portion for the data object are determined and an instruction for the static portion and an instruction for the dynamic portion are processed separately. To search for a data object a result from processing an instruction for the static portion and a result from processing the instruction for the dynamic portion are merged to form a hybrid data object. To create or update a data object a result from processing an instruction for the static portion and a result from processing the instruction for the dynamic portion is saved in a database.

With reference now to the figures and in particular with reference to exemplary diagrams of data processing environments are provided in which illustrative embodiments may be implemented. It should be appreciated that are only exemplary and are not intended to assert or imply any limitation with regard to the environments in which different embodiments may be implemented. Many modifications to the depicted environments may be made.

With reference now to the figures depicts a pictorial representation of a network of data processing systems in which illustrative embodiments may be implemented. Network data processing system is a network of computers in which embodiments may be implemented. Network data processing system contains network which is the medium used to provide communications links between various devices and computers connected together within network data processing system . Network may include connections such as wire wireless communication links or fiber optic cables.

In the depicted example server and server connect to network along with storage unit . In addition clients and connect to network . These clients and may be for example personal computers or network computers. In the depicted example server provides data such as boot files operating system images and applications to clients and . Clients and are clients to server in this example. Network data processing system may include additional servers clients and other devices not shown.

In the depicted example network data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages. Of course network data processing system also may be implemented as a number of different types of networks such as for example an intranet a local area network LAN or a wide area network WAN . is intended as an example and not as an architectural limitation for different embodiments.

With reference now to a block diagram of a data processing system is shown in which illustrative embodiments may be implemented. Data processing system is an example of a computer such as server or client in in which computer usable code or instructions implementing the processes may be located for the illustrative embodiments.

In the depicted example data processing system employs a hub architecture including a north bridge and memory controller hub MCH and a south bridge and input output I O controller hub ICH . Processing unit main memory and graphics processor are coupled to north bridge and memory controller hub . Processing unit may contain one or more processors and even may be implemented using one or more heterogeneous processor systems. Graphics processor may be coupled to the MCH through an accelerated graphics port AGP for example.

In the depicted example local area network LAN adapter is coupled to south bridge and I O controller hub and audio adapter keyboard and mouse adapter modem read only memory ROM universal serial bus USB ports and other communications ports and PCI PCIe devices are coupled to south bridge and I O controller hub through bus and hard disk drive HDD and CD ROM drive are coupled to south bridge and I O controller hub through bus . PCI PCIe devices may include for example Ethernet adapters add in cards and PC cards for notebook computers. PCI uses a card bus controller while PCIe does not. ROM may be for example a flash binary input output system BIOS . Hard disk drive and CD ROM drive may use for example an integrated drive electronics IDE or serial advanced technology attachment SATA interface. A super I O SIO device may be coupled to south bridge and I O controller hub .

An operating system runs on processing unit and coordinates and provides control of various components within data processing system in . The operating system may be a commercially available operating system such as Microsoft Windows XP. Microsoft and Windows are trademarks of Microsoft Corporation in the United States other countries or both. An object oriented programming system such as the Java programming system may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system . Java and all Java based trademarks are trademarks of Sun Microsystems Inc. in the United States other countries or both.

Instructions for the operating system the object oriented programming system and applications or programs are located on storage devices such as hard disk drive and may be loaded into main memory for execution by processing unit . The processes of the illustrative embodiments may be performed by processing unit using computer implemented instructions which may be located in a memory such as for example main memory read only memory or in one or more peripheral devices.

The hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the illustrative embodiments may be applied to a multiprocessor data processing system.

In some illustrative examples data processing system may be a personal digital assistant PDA which is generally configured with flash memory to provide non volatile memory for storing operating system files and or user generated data. A bus system may be comprised of one or more buses such as a system bus an I O bus and a PCI bus. Of course the bus system may be implemented using any type of communications fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture. A communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. A memory may be for example main memory or a cache such as found in north bridge and memory controller hub . A processing unit may include one or more processors or CPUs. The depicted examples in and above described examples are not meant to imply architectural limitations. For example data processing system also may be a tablet computer laptop computer or telephone device in addition to taking the form of a PDA.

Exemplary embodiments provide a computer implemented method system and computer usable program code for processing a data object for example for searching for creating or updating a data object. A computer implemented method for processing a data object includes receiving a request for the data object. A static portion and a dynamic portion for the data object are determined and an instruction for the static portion and an instruction for the dynamic portion are processed separately. To search for a data object a result from processing an instruction for the static portion and a result from processing the instruction for the dynamic portion are merged to form a hybrid data object. To create or update a data object a result from processing an instruction for the static portion and a result from processing the instruction for the dynamic portion is saved in a database.

In general the exemplary embodiments provide an extended data object that is composed of both static and dynamic components. The exemplary embodiments take advantage of benefits of a static CMDB transfer object and a SDO dynamic data object to create a hybrid data object model for CMDB.

Each hybrid data object has two sections a static section and a dynamic section. The static section includes a predefined common configuration and process class type attributes. The static section provides the baseline and valuable attributes to all users. The name and data type of these attributes are known at development time. The dynamic section provides flexibility to users to add needed attributes after a program is deployed i.e. the newly added attributes are unknown at development time. Exemplary embodiments also maximize the CMDB transfer data object model for the predefined attributes and at the same time take advantage of dynamic SDO data object model to provide flexibility to allow customers using generic APIs to set get attributes after a program has been deployed.

As shown in static data object is a set of data objects that are predefined or are known prior to executing a set of instructions i.e. that are defined at compilation time. Dynamic data object on the other hand is a set of data objects that are defined at runtime and that are used as the basic building blocks of programs. Each object is capable of receiving messages processing data and sending messages to other objects. Exemplary embodiments merge the static and dynamic data objects into hybrid data object .

Management application generally includes SDO data object SDO Data Object Factory existing static client APIs new generic client APIs and metadata cache .

SDO data object is an enhancement of the current CMDB transfer object i.e. CdbManagedElement and subclasses . By providing SDO features on the existing transfer object existing static clients and new dynamic clients use the same transfer object implementation which eases the transition to the dynamic interfaces by existing static clients. With this implementation some data is stored statically in the transfer object e.g. predefined attributes of managed element like description and extended attributes are stored dynamically. The generic SDO interface can be used for all attributes however including predefined attributes. The CMDB transfer object is extended to the hybrid data object and provides useful methods for CMDB users. For example SDO data object provides a single API call to provide a group of attribute names and values of a class type in HashMap format. This provides a convenient and efficient way to get name value pair information for users who do not need data type information.

SDO Data Object Factory comprises a factory used by new generic client APIs to obtain SDO data objects of a particular type. This prevents new CMDB API clients from having to statically bind to any particular transfer object implementation. Generic clients can ask SDO Data Object Factory for an SDO Data Object of a particular type e.g. ComputerSystem and SDO Data Object Factory will return a SDO Data Object of the requested type e.g. a CdbComputerSystem . Each instance of the class type is a hybrid SDO data object that includes static components and dynamic components as illustrated in . Inasmuch as all transfer objects implement an SDO Data Object interface generic clients are never aware that they are dealing with a particular implementation class e.g. CdbComputerSystem . Rather they only know they are dealing with an SDO Data Object interface.

Existing static client APls are provided for client management applications and end users to take action on core class types and extensions. These include 

Metadata cache stores client meta data information and is used by SDO client APls to perform data type checking. At client start up time SDO Client APls create the meta data cache by using Meta Data Manager APls and store it in memory. The meta data cache will be refreshed only when the SDO Client APls detect a new class type or attribute type. It is intended to avoid the necessity of frequent Meta Data Manager APls client server calls so as to improve efficiency.

Static and generic client APls and send a request and input data as a list of SDO data objects through RMI IIOP Java RMI interface over CORBA system to CMDB J2EE server . CMDB server processes the request takes necessary database actions and sends the returning data as a list of SDO data objects back to the client based on the type of client API calls. The existing static client APIs continue to work with the new SDO data objects because the SDO data objects are implemented as CdbManagedElement transfer objects which are understood by the static client APIs.

Main Beans provide a non transactional remote interface to all CMDB APIs. Main beans delegate work to database beans . Database Beans provide a transactional local interface to all CMDB APIs. The database beans perform parameter checking database connection handling and exception handling. The database beans delegate work to database facades and .

Static database facades are existing database facades in CMDB that process static attributes including core managed element and CI attributes as well as statically defined extension classes and attributes. Both static and generic APIs update all core and statically defined extension classes and attributes using existing static database facades .

Dynamic database facade is a new database facade for processing dynamic attributes. The generic APIs will update all core and statically defined extension classes and attributes using existing static database facades and then use the dynamic database facade to process dynamic attributes.

Static Attributes is a group of static attributes created for the core class types by a development team. The client request of these attributes will be handled by ME Managed Element and Core Class Type DAOs Data Access Objects .

All class types include the common managed elements attributes. They are stored in separate predefined tables in CMDB for example MNGD ELEMENT. For add update requests of all the core class types ME DAO Managed Element Data Access Object is used to handle the managed elements attributes.

For statically defined extensions there is one DAO created for each extension class type referred to as Static extension DAOs . They are used to handle the requests of the static attributes of core extension class types together with the ME DAO . For example if the client request is to add ComputerSystem data ME DAO and the ComputerSystem DAO one of DAOs will be used to handle the request related to all the static attributes defined in the ComputerSystem class.

Extended Attributes are new extended attributes created for the core class types or new extended class types by other product teams or customers. The client request of these attributes via the new generic APIs will be handled by the SDO component.

JDBC SQLJ JDBC is the industry standard for database independent connectivity between the Java programming language and a wide range of databases and SQLJ is an ISO standard for embedding SQL statements in Java programs is used by static extension DAOs and ME DAO to take database actions.

In accordance with an exemplary embodiment CMDB Mediator is implemented as an SQL generator that forms an SQL statement at runtime based on a client request including the CMDB object meta data object and filter object information. The generator dynamically creates the following categories of SQL statements select insert and update. Delete is not needed in this implementation because the core delete SQL statements will automatically delete extension data rows due to cascade deletes. 

CMDB mediator has four sub components including mediator metadata data parser JDBC SQL engine and data object builder .

Database connection to CMDB database is obtained from a connection pool. If more than one component is used to interact with database data for each class type one single database connection is used for one transaction to ensure the data consistency. For example in order to handle a request for an extended core class type with dynamically extended attributes ME DAO static extension DAO and SDO components will all be used but only one database connection is used for the transaction.

Server meta data information is stored in meta data cache and is used by database bean to differentiate the core and dynamic extended class types and to process client request parameters and convert results set to SDO data objects. Metadata cache is managed by metadata manager .

The data object then passes to CMDB mediator including mediator and metadata data parser to form SQL statement . JDBC SQL engine takes database actions via database connection to CMDB database . The resultset is converted to a data object by data object builder and the data object is returned to the client as shown at .

The static attributes and the extended attributes are then processed separately. Specifically Static attributes are processed through static database facade and data access object to define a predefined SQL statement. JDBC SQLJ takes database actions via database connection to CMDB database .

Meanwhile the extended attributes are processed through dynamic database facade and CMDB mediator including mediator and metadata data parser to form SQL statement . JDBC SQL engine takes database actions via database connection to CMDB database .

The Resultset of the static attribute processing is converted to static data object while the Resultset of the dynamic attribute processing is converted to dynamic data object by data object builder . The static and extended data objects are then combined to provide hybrid data object which is returned to the client.

Workflows for creating or updating a data object are similar to the workflows illustrated in and for searching for a data object. In particular a Set Dynamic Attributes workflow would be the same as the Get Extended Attribute workflow of except that after separately processing the static and dynamic portions the results of the separate processing are saved in CMDB database . In a similar manner a Set Hybrid Data Object workflow that includes both static and dynamic attributes would be that same as the Get Attribute Map workflow of except that after separately processing the static and dynamic portions the results of the separate processing are saved in CMDB database .

Exemplary embodiments thus provide a computer implemented method system and computer usable program code for processing a data object for example for searching for creating or updating a data object. A computer implemented method for processing a data object includes receiving a request for the data object. A static portion and a dynamic portion for the data object are determined and an instruction for the static portion and an instruction for the dynamic portion are processed separately. To search for a data object a result from processing an instruction for the static portion and a result from processing the instruction for the dynamic portion are merged to form a hybrid data object. To create or update a data object a result from processing an instruction for the static portion and a result from processing the instruction for the dynamic portion is saved in a database.

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any tangible apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be i an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device storage medium or ii a propagation medium. Examples of a computer readable storage medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

