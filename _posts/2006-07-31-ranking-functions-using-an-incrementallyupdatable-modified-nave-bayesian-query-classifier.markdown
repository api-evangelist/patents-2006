---

title: Ranking functions using an incrementally-updatable, modified na√Øve bayesian query classifier
abstract: Methods of ranking documents on a network using an incrementally-updatable system are disclosed. Computer readable storage media having stored computer-executable instructions for performing a method of ranking documents on a network using an incrementally-updatable system are also disclosed. Further, computing devices containing at least one application module comprising application code for performing methods of ranking documents on a network using an incrementally-updatable system are disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07620634&OS=07620634&RS=07620634
owner: Microsoft Corporation
number: 07620634
owner_city: Redmond
owner_country: US
publication_date: 20060731
---
Ranking functions that rank documents according to their relevance to a given search query are known. In many known systems query classifiers are used to boost the search results of the ranking function. Known query classifiers utilize machine learning techniques such as Maximum Entropy Na ve Bayes Conditional Random Fields and Support Vector Machines to model user performance. Typically the process used for building and deploying models is to gather a lot of data perform off line data processing over the entire range of data build the models and then deploy the models. These known processes can be computationally expensive. Further in these processes there is typically a delay from the time data is gathered to when the data is actually utilized in the deployed models.

Efforts continue in the art to develop ranking functions and ranking function components that provide better search results for a given search query compared to search results generated by search engines using known ranking functions and ranking function components.

Described herein are among other things various technologies for ranking documents on a network using an incrementally updatable query classifier. The incrementally updatable query classifier does not require computationally expensive off line data processing but simply requires periodic updating of a minimum number of query classifier variables. The incrementally updatable query classifier utilizes real time user search query and response data and may also comprise a time decay component that weighs more recent user events greater than past user events. The incrementally updatable query classifier alone or in combination with other ranking function components may be used by a search engine to rank multiple documents in order typically in descending order based on document relevance relative to query search terms.

This Summary is provided to generally introduce the reader to one or more select concepts describe below in the Detailed Description section in a simplified form. This Summary is not intended to identify key and or required features of the claimed subject matter.

To promote an understanding of the principles of the methods and processes disclosed herein descriptions of specific embodiments follow and specific language is used to describe the specific embodiments. It will nevertheless be understood that no limitation of the scope of the disclosed methods and processes is intended by the use of specific language. Alterations further modifications and such further applications of the principles of the disclosed methods and processes discussed are contemplated as would normally occur to one ordinarily skilled in the art to which the disclosed methods and processes pertains.

Methods of ranking documents on a network using an incrementally updatable query classifier are disclosed. The relevance of each document to a given search query is calculated using an incrementally updatable query classifier that utilizes real time user data for each inputted query chosen result data combination. The document relevance for each document as determined by the query classifier alone or in combination with other ranking function components may be used to rank documents within a given network space e.g. a corporate intranet space or the Internet . An exemplary search process in which the disclosed methods may be used is shown as exemplary process in .

As discussed in more detail below the methods of ranking documents comprises utilizing real time user response data or document usage data related to actual usage e.g. viewing of one or more documents within a network space by one or more users. The document usage data is generated and stored by application code on a web server which is separate from a given search engine. For example document usage data may be maintained by a web site so that each time a user requests a URL the server updates a usage counter or count value. The usage counter may maintain document related data obtained for a given time interval such as last week last month last year or the lifetime of a given document or set of documents. Application code may be used to obtain the usage data from the web site via i a special application programming interface API ii a web service request or iii by requesting an administration web page that returns usage data for every URL on the web site.

The document relevance may be used to rank documents within a network space and provide the ranked search results to a user. For example a method of ranking documents on a network may comprise the steps of determining a document relevance for each document on the network using the incrementally updatable query classifier and ranking the documents in a desired order typically in descending order based on the document relevance of each document relative to a user inputted search query.

Application programs using the methods disclosed herein may be loaded and executed on a variety of computer systems comprising a variety of hardware components. An exemplary computer system and exemplary operating environment for practicing the methods disclosed herein is described below.

The methods disclosed herein are operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the methods disclosed herein include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The methods and processes disclosed herein may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. The methods and processes disclosed herein may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the methods and processes disclosed herein includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including but not limited to system memory to processing unit . System bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media as used herein.

System memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

Computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. Hard disk drive is typically connected to system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies.

A user may enter commands and information e.g. one or more search query terms or words into computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to processing unit through a user input interface that is coupled to system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device e.g. for providing search results to a user for viewing is also connected to system bus via an interface such as a video interface . In addition to monitor computer may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

Computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . Remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment computer is connected to LAN through a network interface or adapter . When used in a WAN networking environment computer typically includes a modem or other means for establishing communications over WAN such as the Internet. Modem which may be internal or external may be connected to system bus via user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Methods and processes disclosed herein may be implemented using one or more application programs including but not limited to a server system software application e.g. WINDOWS SERVER SYSTEM software application a search ranking application and an application for generating maintaining and storing usage data of documents within a network space e.g. WINDOWS SHAREPOINT Services application any one of which could be one of numerous application programs designated as application programs application programs and remote application programs in exemplary system .

As mentioned above those skilled in the art will appreciate that the disclosed methods of ranking documents given a particular search query may be implemented in other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics networked personal computers minicomputers mainframe computers and the like. The disclosed methods of ranking documents may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

As discussed above methods of ranking documents on a network using an incrementally updatable query classifier are provided. The disclosed methods of ranking documents on a network utilize a modified Na ve Bayesian model as described below.

Bayes rule states that the probability of A given B P A B is related to the probability of B given A P B A and may be shown by the relationship When B consists of a lot of features f . . . f the Na ve Bayesian approximation reduces to 

In the disclosed methods of ranking documents the query classifier model utilizes a similar formulation which predicts the occurrence of an Asset e.g. a chosen document or hit given a search Query where the features are the terms or words in the search query. The Query Classifier model used herein is shown by the formula 

By summing the probabilities of not seeing the terms of a given search query across all words in the vocabulary and subtracting the sum of the probabilities from the terms seen in the search query the formulation becomes 

Since the probability of not seeing a word in a given search query is equal to 1 minus the probability of seeing the word in the given search query the formulation becomes 

By expanding each term using the following equations log Asset log Asset log log Asset log Asset log Asset the formulation becomes 

 Asset is the number of times a given Asset e.g. a given document on the network is selected for viewing by any user 

 w Asset is the number of times a given Asset e.g. a given document on the network and a search query term w of a search query have been matched by any user.

 w Asset is the sum of the number of times that a given Asset e.g. a given document on the network and any search query term w of the search query have been matched by any user.

By knowing the values of the terms Asset w Asset and w Asset for each asset and each search query asset combination the values of log Asset and log w Asset can be calculated and the above formula I may be used to provide document relevance scores i.e. probabilities of retrieving a given asset or document based on a given search query for documents within a network space.

As discussed above the actual usage or user response data e.g. the values of the terms Asset and w Asset may be obtained from one or more files that store actual usage data for one or more documents on a network. The actual usage data may be stored along with the document as a document component or may be stored in a data storage file separate from the actual document. Data storage and retrieval may be accomplished using any known method including but not limited to web service calls Structured Query Language SQL systems etc. For example a remote storage system may be used to store actual usage data including for example the number of requests to each document on a given network across all users.

From step exemplary method proceeds to step wherein the pre calculated stored values w Asset and log w Asset are retrieved from a database for each query component w e.g. printing problems and color . From step exemplary method proceeds to step wherein the pre calculated stored values Asset log Asset and w Asset are retrieved from the data storage database. From step exemplary method proceeds to step wherein the usage data from steps and namely 1 values w Asset and log w Asset for each query term asset combination and 2 values Asset log Asset and w Asset for each asset are utilized in formula I provided above to determine the document relevance of each document in the network space relative to the search query.

From step exemplary method proceeds to step shown in wherein all documents are ranked in descending order of relevance. Exemplary method then proceeds to step wherein at least a portion of the search results are displayed to the user. From step exemplary method proceeds to step wherein the user selects e.g. clicks on a given search result e.g. asset for viewing.

Once a particular document or search result e.g. asset is selected for viewing exemplary method proceeds to step wherein the count values Asset w Asset and w Asset are updated to reflect the user response. It should be noted that the process of updating count values Asset w Asset and w Asset may occur at any time after the user selects a given search result e.g. asset . For example the count values may be updated immediately or may be updated at some time following the actual selection of a given search result. The count values may be updated for example every hour or a single time during a 24 hour period. If the values are not updated immediately a log is maintained over a given time period e.g. for a 24 hour time period to temporarily store user response data during the time period. At the end of each time period application code is used to update each count value.

From step exemplary method proceeds to step wherein the values log Asset and log w Asset are calculated. From step exemplary method proceeds to step wherein the updated values from steps and i.e. Asset w Asset w Asset log Asset and log w Asset are stored in the database replacing the previously stored values.

From step exemplary method proceeds to decision block wherein a determination is made by the user whether to view other search results provided in step . If a determination is made by the user to view other search results provided in step exemplary method proceeds to step wherein the user returns to the search results provided in step . From step exemplary method returns to step and proceeds as described above.

Returning to decision block if a determination is made by the user at decision block not to view other search results provided in step exemplary method proceeds to decision block . At decision block a determination is made by the user whether to perform a new search. If a determination is made by the user to perform a new search exemplary method proceeds to step wherein exemplary method returns to step and proceeds as described above. If a determination is made by the user at decision block not to perform a new search exemplary method proceeds to step wherein exemplary method ends.

The above described method of providing ranked search results to a user in an incrementally updatable system may further comprise a time decay component wherein more recent query asset data is given more weight when computing values Asset w Asset w Asset log Asset and log w Asset compared to older query asset data. For example the query term Trojan might have meant something very different 2000 years ago as oppose to what the term meant several years ago when a sports team named Trojan won a college football title and what the term meant recently when the Trojan Horse virus appeared as a computer virus. Having a time decayed component in the disclosed methods provides a bias toward more recent user preferences as well as more recent events.

When utilizing the time decay component a weighing multiplier is used to weight more recent events to a greater extent than past events. An exemplary weighing multiplier comprises wherein is a number less than 1.0 and t is an integer representing the age of a query and or asset count value component e.g. t may represent a given 24 hour period so that t 0 would represent the last 24 hour period t 1 would represent the previous 24 hour period t 2 would represent the 24 hour period prior to the t 1 24 hour period etc. . The above described count values used in Formula I may be set to equal the following values 

In each of the above count values as t increases i.e. the age of the query and or asset component increases the value of decreases resulting in older components of a given count value being given less weight than more current count value components. For example in an exemplary embodiment in which the frequency is a 24 hour period brand new queries i.e. queries during the last 24 hour period are given a weight of 1 while a query that is a day old i.e. queries during the previous 24 hour period is given a weight of and a query that is 100 days old is given a weight of . By setting to a value such as 0.995 in the above model the weight of a given query decays gradually over a period of 2 years.

In order to update the count values at the end of a given time period e.g. at the end of a 24 hour period the count values simply need to be recalculated as follows Asset new Asset 0 Asset old Asset new Asset 0 Asset old and Asset new Asset 0 Asset old wherein 

 Asset new w Asset new and w Asset new represent the incrementally updated values for the counts Asset w Asset and w Asset respectively 

 Asset 0 w Asset 0 and w Asset 0 represent the number of occurrences within the last time period e.g. the last 24 hour period for the counts Asset w Asset and w Asset respectively and

 Asset old w Asset old and w Asset old represent the cumulative count values prior to the last time period e.g. the count values more than 24 hours ago for the counts Asset w Asset and w Asset respectively. Such a method using an incrementally updatable time decay model is further described with reference to .

As shown in exemplary method starts at start block and proceeds to step wherein a user selects a weighing multiplier wherein is a number less than 1.0 and t is an integer representing the age of a query and or asset count value component. From step exemplary method proceeds to step wherein a user selects a frequency in which all count values Asset w Asset and w Asset are updated. Typically all count values are updated once during a 24 hour period i.e. each unit of time represented by t is a 24 hour time period however a user may choose any desired frequency such as a count value update every hour i.e. each unit of time represented by t is an hour of time .

From step exemplary method proceeds to step wherein the time and date is monitored so that a given query and user response may be dated. From step exemplary method proceeds to step wherein the count values are incrementally updated e.g. updated at the end of a given frequency period as described above. In this step all that is required to incrementally update each count value is to add new query asset combination data i.e. Asset 0 w Asset 0 and w Asset 0 data with a weight of 1.0 to the previously stored count value i.e. Asset old w Asset old and w Asset old time decayed by a factor of . As discussed above the updated count values equal Asset new Asset 0 Asset old Asset new Asset 0 Asset old and Asset new Asset 0 Asset old .

From step exemplary method proceeds to step wherein the values of log Asset and log w Asset are calculated and all updated values are stored in the database. From step exemplary method proceeds to decision block as shown in wherein a determination is made by a user whether to perform a search. If a determination is made by a user to perform a search at decision block exemplary method proceeds to step wherein the above described steps to of exemplary method shown in are performed. From step exemplary method proceeds to step wherein the user selects e.g. clicks on a given search result e.g. asset for viewing.

Once a particular document or search result e.g. asset is selected for viewing exemplary method proceeds to step wherein the values Asset 0 w Asset 0 and w Asset 0 are updated to reflect the user response. The Asset 0 w Asset 0 and w Asset 0 values are temporarily stored until the end of a frequency period e.g. the end of a 24 hour period . As discussed above the frequency period may be any desired length of time but is typically a 24 hour period. At the end of each time period application code is used to update each count value Asset w Asset and w Asset so as to provide incrementally updated count values Asset new w Asset new and w Asset new as described in step .

From step exemplary method proceeds to decision block wherein a determination is made by the user whether to view other search results provided in i.e. step of exemplary method which is a component of step of exemplary method . If a determination is made by the user to view other search results provided in step exemplary method proceeds to step wherein the user returns to the search results provided in step . From step exemplary method returns to step and proceeds as described above.

Returning to decision block if a determination is made by the user at decision block not to view other search results provided in step exemplary method proceeds to decision block . At decision block a determination is made by the user whether to perform a new search. If a determination is made by the user to perform a new search exemplary method proceeds to step wherein exemplary method returns to step and proceeds as described above. If a determination is made by the user at decision block not to perform a new search exemplary method proceeds to decision block wherein a determination is made by application code whether based on the selected frequency in step the count values Asset w Asset and w Asset need to be updated. If a determination is made by application code that the count values need to be updated i.e. a frequency time period has ended exemplary method returns to step and proceeds as described above. If at decision block a determination is made by application code that the count values do not need to be updated exemplary method returns to step and proceeds as described above.

Returning to decision block if a determination is made by the user at decision block not to perform a search exemplary method proceeds to step wherein exemplary method returns to decision block and proceeds as described above.

The above described methods of ranking documents in response to a search query using an incrementally updatable system with or without a time decay component may be used alone or in combination with other ranking function components so as to provide ranked search results to a user. When used in combination with other ranking function components any known ranking function component or components may be used. Known ranking function components may include but are not limited to i a field weighted ranking function component as described in U.S. patent application Ser. No. 10 804 326 entitled FIELD WEIGHTING IN TEXT DOCUMENT SEARCHING filed on Mar. 18 2004 the subject matter of which is incorporated herein by reference in its entirety ii a click distance ranking function component as disclosed in U.S. patent application Ser. No. 10 955 983 entitled SYSTEM AND METHOD FOR RANKING SEARCH RESULTS USING CLICK DISTANCE filed on Aug. 30 2004 the subject matter of which is incorporated herein by reference in its entirety iii a biased click distance ranking function component as disclosed in U.S. patent application Ser. No. 11 206 286 entitled RANKING FUNCTIONS USING A BIASED CLICK DISTANCE OF A DOCUMENT ON A NETWORK filed on Aug. 15 2005 the subject matter of which is incorporated herein by reference in its entirety iv a URL depth of a document or v any combination of i to iv .

Computing systems are also disclosed herein. An exemplary computing system contains at least one application module usable on the computing system wherein the at least one application module comprises application code loaded thereon wherein the application code performs a method of ranking documents on a network using the above described incrementally updatable query classifier with or without a time decay component. The application code may be loaded onto the computing system using any of the above described computer readable medium having thereon computer executable instructions for ranking documents on a network using the above described incrementally updatable query classifier with or without a time decay component as described above.

While the specification has been described in detail with respect to specific embodiments thereof it will be appreciated that those skilled in the art upon attaining an understanding of the foregoing may readily conceive of alterations to variations of and equivalents to these embodiments. Accordingly the scope of the disclosed methods computer readable medium and computing systems should be assessed as that of the appended claims and any equivalents thereto.

