---

title: Database access server with compression translator
abstract: A database access server includes a network interface device and a processing device coupled to the network interface device via a bus. The network interface device receives a data request that includes a data identifier. The processing device retrieves data having the data identifier. The processing device determines if the retrieved data is compressed. The processing device decompresses the retrieved data if the retrieved data is compressed. The processing device sends the uncompressed retrieved data in response to the data request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07647350&OS=07647350&RS=07647350
owner: Red Hat, Inc.
number: 07647350
owner_city: Raleigh
owner_country: US
publication_date: 20060906
---
Embodiments of the present invention relate to data processing and more specifically to a database access server with a compression translator.

A database may be used to store items of information in a manner that permits a particular item to be accessed efficiently. The database and the mechanism to retrieve items from the database may be part of a database server. The mechanism to accept requests for items in the database from a user and to display requested items to the user may be part of a client.

The database server and the client may each be a process that is carried out by a machine such as a computer. The database server and the client may be processes on the same machine or they may be processes on separate machines that are communicatively coupled. Either or both of the database server and the client processes may be carried out by a plurality of machines that are communicatively coupled.

A database access server may be used to communicatively couple a client and a database server. The database access server may allow the client to access the database server without knowing the implementation of the database server. The database access server may allow the client to access a plurality of database servers as though they were a single database server.

The database access server may be a process that is carried out by a machine such as a computer. The database access server may be a process on the same machine as the database server or it may be a process on a separate machine that is communicatively coupled to the one or more machines providing the database server. The database access server may communicatively couple the client server to the database server.

An exemplary database server is a Lightweight Directory Access Protocol LDAP directory server. LDAP is a set of open protocols used to access centrally stored information over a network. It is based on the X.500 standard for directory sharing but is less complex and resource intensive. Like X.500 LDAP organizes information in a hierarchal manner using directories. These directories can store a variety of information and can enable access to the information from any machine on the LDAP enabled network.

The LDAP server can use a variety of databases to store a directory each optimized for quick and copious read operations. When an LDAP client application connects to an LDAP server it can either query a directory or attempt to modify it. In the event of a query the server either answers the query or if it can not answer locally it can refer the query to an LDAP server which does have the answer. If the client application is attempting to modify information in an LDAP directory the server verifies that the user has permission to make the change and then adds or updates the information.

The main benefit of using LDAP is that information for an entire organization can be consolidated into a central repository. LDAP supports a number of back end databases in which to store directories. This allows administrators the flexibility to deploy the database best suited for the type of information the server is to disseminate. Because LDAP has a well defined client Application Programming Interface API the number of LDAP enabled applications are numerous and increasing in quantity and quality.

Embodiments of a database access server with a compression translator are described herein. A database access server includes a network interface device and a processing device coupled to the network interface device via a bus. The network interface device receives a data request that includes a data identifier. The processing device retrieves data having the data identifier. The processing device determines if the retrieved data is compressed. The processing device decompresses the retrieved data if the retrieved data is compressed. The processing device sends the uncompressed retrieved data in response to the data request. In one embodiment the database access server is a Lightweight Directory Access Protocol LDAP directory server.

In the following description numerous details are set forth. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

The presently disclosed system and method can be implemented using hardware software or a combination of hardware and software. Specifically the disclosed system and method can be implemented using either object oriented programming languages like the Java and C programming languages or procedural programming languages such as the C programming language. The disclosed system and method can be implemented using a computer system with a single personal computer or a network of multiple computers.

Some portions of the detailed descriptions which follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions and each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

A machine accessible storage medium which may also be referred to as a computer readable medium includes any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer . For example a machine accessible storage medium includes read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices electrical optical or acoustical.

Reference will now be made in detail to exemplary embodiments of the disclosed system which are also illustrated in the accompanying drawings. Although the description includes exemplary embodiments it can be easily seen that other embodiments are possible and changes can be made to the embodiments described without departing from the spirit of the disclosed system and method.

The database access server may include a client interface with client input ports and client output ports. The client ports may be coupled to a variety of client devices by network connections such as an Internet connection. The network connections may be wired or wireless . The wireless connections may be provided by a wireless gateway that is coupled to the client interface by a wired connection . Client devices may be connected to the client interface indirectly by a link to another client device that serves as a gateway to the database access server . Client devices through may include personal computers personal digital assistants PDAs portable music players cellular telephones on demand radios and similar devices.

A client input port in the client interface of the database access server may receive a data request for an item. The data request may include a data identifier to identify the desired item to be retrieved from the database server . The database access server may receive the data request using a Lightweight Directory Access Protocol LDAP .

As shown in LDAP represents a database as a directory that is a tree of directory entries . An entry consists of a set of attributes. An attribute has a name which is an attribute type or attribute description and one or more values. An attribute may have a subtype. The attributes are defined in a schema.

Each entry has a unique identifier its Distinguished Name DN . The DN may be composed of a number of parts that indicate where the directory entry is placed in the directory tree . For example an entry for the Moonlight Sonata may have the following DN 

 MoonlightSonata may be the Relative Distinguished Name RDN of the database entry music and com may be domain components DC of the DN.

A database may contain a very large number of entries. The storage space required by a database may be considerable. The present invention allows one or more classes of items to be defined such that items in the defined class are stored in a compressed format. The invention further provides for a compression translator so that an item retrieved from the compressed class is decompressed before being sent in response to a request so that the compression of some classes of items is transparent to requesters. This may allow an existing database system to be compressed when it grows to a large size without affecting the users of the system.

In some embodiments the data identifier indicating the item to be retrieved may be represented in an LDAP attribute. The item to be retrieved might or might not be stored in a compressed form. For example a compressed file to be retrieved from an entry may have the following LDAP attribute 

Returning to the database access server further includes control logic and a compression translator . The control logic receives a data request identifying a desired data item. The control logic sends the request to the database server to locate and retrieve the requested item. The database access server retrieves the data over a data access link that communicatively couples the database access server and the database server . The database access server further determines if the retrieved data is compressed. The database access server may determine if the retrieved data is compressed by referring to a configuration or schema for the database. In another embodiment a tag or subtype may be a part of each item to indicate the compression type.

If the retrieved data is compressed the control logic directs the compression translator to decompress the retrieved data. The uncompressed retrieved data is sent to a client output port in the client interface to be transmitted to the client in response to the data request. It will be appreciated that if the retrieved data is not compressed it is sent in the same form as retrieved.

In some cases a requester may want the retrieved data to be sent in the compressed format if it is stored compressed to reduce the network bandwidth requirement. This may be supported in an LDAP database access server by using a subtype of compressed in the data request. This will be handled according to the invention by sending the retrieved data in the format as retrieved without decompression. In another embodiment the data request may include a request for a specific format compression. This may require the compression translator to translate the retrieved data from the compression format used for storage into the requested transmission format.

An exemplary system using the invention could be a system for delivering music files to clients. The music files could be maintained by a database server in which each file is maintained as an element of an item in the database. Each item could include identifying tags to allow the desired music file to be retrieved from the database. The identifying tags might include the title of the music the performing artist the composer and the like.

The music files may be compressed to conserve storage space. The compression may be selected to preserve the quality of the music. For example the Free Lossless Audio Codec FLAC may be used for audio compression. The FLAC compresses the audio data without removing any information from the audio stream. It is suitable both for everyday playback and audio archival. FLAC may achieve compression rates of 30 50 .

A database entry including a compressed music file might appear in part as follows using LDAP Data Interchange Format LDIF for representing LDAP directory content 

In one embodiment the compression types for the files in the database are the same for all files. In another embodiment the files may have various compression types such as when the files are provided from a variety of sources in a variety of formats with differing levels of quality. In still another embodiment the music files may be stored in a database with items that do not include music files. The non music items may include compressed files where a different compression type suitable to the file type is used. For example still photographs may be stored with Joint Photographic Expert Group JPG compression. In still another embodiment items in the database may contain more than one file where each file may be of a different type and have a different compression type.

Client devices may require that music files be delivered with specific compression types as supported by the client device. The compression type may be selected for efficient processing by the client device and or efficient delivery over the connection to the database access server. It may be desirable to use a compression type that provides a more compressed format than the compression type of the files stored in the database. Lossy codecs can achieve ratios of 80 or more by discarding data from the original stream. Examples of lossy compression types include Windows Media Audio WMA Motion Picture Experts Group Audio Layer 3 MP3 Ogg Vorbis OGG and Advanced Audio Coding AAC .

Compression types required by client devices may depend on the use that will be made of the files. For example the client device may be able to save music files to be played at a later time and to play music files immediately as they are delivered to the client device streaming . It may be desirable to use a more compressed format optimized for immediate playback for files to be played immediately in a streaming mode. A less compressed format that provides a higher quality of sound may be used for files to be saved.

Because of the variety of compression types required by client devices which may vary depending on the operating mode of the client device it may not be practical for the database access server to determine what file format is appropriate for delivery to the client device. Hence in one embodiment the client device is allowed to request the type of compression for the file to be sent by the database access server to the client device.

Referring to a client may request an attribute using an LDAP Universal Resource locater URL . For example the client may have identified that a desired file is in the entry having the following DN 

The database access server receives the LDAP URL as a data request. The LDAP cn attribute MoonlightSonata provides a data identifier. The subtype aac indicates the compression type being requested. The requested file may be stored with a different compression type from the requested compression type. For example the file for MoonlightSonata may be stored with the FLAC compression type. The database access server retrieves the requested file without regard to the requested compression format.

The control logic of the database access server retrieves data having the data identifier from the database server . The control logic determines if the retrieved data is compressed. The control logic may consult a database configuration or schema to determine if the data is compressed examine the retrieved data or receive an indication of the compression type of the retrieved data from the database server .

The control logic causes the retrieved data to be decompressed by the compression translator . The compression translator may decompress the retrieved data using the compression type as stored and then compress it according to a requested compression type. The reformatted data is sent to the requesting client in response to the data request.

A data request that includes a data identifier and a first compression type is received at block . At block data having the data identifier and a second compression type is retrieved. The retrieved data was compressed according to the second compression type. If the second compression type is not the same as the first compression type block the retrieved data is reformatted to create reformatted data compressed according to the first compression type block . The reformatted data is sent in response to the data request block .

Data for storage as an item is received at block . At block it is determined if the item is configured to be stored in a compressed format. If so the data is compressed block . The received data compressed if necessary is then stored block .

The exemplary computer system includes a processing device a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processing device represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processing device may be complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or processor implementing other instruction sets or processors implementing a combination of instruction sets. Processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processing device is configured to execute the processing logic for performing the operations and steps discussed herein.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a machine accessible storage medium on which is stored one or more sets of instructions e.g. software embodying any one or more of the methodologies or functions described herein. The software may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system the main memory and the processing device also constituting machine accessible storage media. The software may further be transmitted or received over a network via the network interface device .

The machine accessible storage medium may also be used to store LDAP repository data entries . LDAP repository data entries may also be stored in other sections of computer system such as static memory .

While the machine accessible storage medium is shown in an exemplary embodiment to be a single medium the term machine accessible storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine accessible storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term machine accessible storage medium shall accordingly be taken to include but not be limited to solid state memories optical and magnetic media and carrier wave signals.

While certain exemplary embodiments have been described and shown in the accompanying drawings it is to be understood that such embodiments are merely illustrative of and not restrictive on the broad invention and that this invention not be limited to the specific constructions and arrangements shown and described since various other modifications may occur to those ordinarily skilled in the art.

