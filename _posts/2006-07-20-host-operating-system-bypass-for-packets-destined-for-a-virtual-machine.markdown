---

title: Host operating system bypass for packets destined for a virtual machine
abstract: A method for processing packets that includes receiving a first packet for a first virtual machine by a network interface card (NIC), classifying the first packet using a hardware classifier, where the hardware classifier is located on the NIC, sending the first packet to a first one of a plurality of receive rings based on the classification, sending the first packet from the first one of the plurality of receive rings to a first virtual network interface card (VNIC), sending the first packet from the first VNIC to a first interface, and sending the first packet from the first interface to the first virtual machine, where the first virtual machine is associated with the first interface, where the first VNIC and the first virtual machine are executing on a host.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08005022&OS=08005022&RS=08005022
owner: Oracle America, Inc.
number: 08005022
owner_city: Redwood City
owner_country: US
publication_date: 20060720
---
The present application contains subject matter that may be related to the subject matter in the following U.S. applications filed on Apr. 22 2005 and assigned to the assignee of the present application Method and Apparatus for Managing and Accounting for Bandwidth Utilization Within A Computing System with U.S. application Ser. No. 11 112 367 Method and Apparatus for Consolidating Available Computing Resources on Different Computing Devices with U.S. application Ser. No. 11 112 368 Assigning Higher Priority to Transactions Based on Subscription Level with U.S. application Ser. No. 11 112 947 Method and Apparatus for Dynamically Isolating Affected Services Under Denial of Service Attack with U.S. application Ser. No. 11 112 158 Method and Apparatus for Improving User Experience for Legitimate Traffic of a Service Impacted by Denial of Service Attack with U.S. application Ser. No. 11 112 629 Method and Apparatus for Limiting Denial of Service Attack by Limiting Traffic for Hosts with U.S. application Ser. No. 11 112 328 Hardware Based Network Interface Per Ring Resource Accounting with U.S. application Ser. No. 11 112 222 Dynamic Hardware Classification Engine Updating for a Network Interface with U.S. application Ser. No. 11 112 934 Network Interface Card Resource Mapping to Virtual Network Interface Cards with U.S. application Ser. No. 11 112 063 Network Interface Decryption and Classification Technique with U.S. application Ser. No. 11 112 436 Method and Apparatus for Enforcing Resource Utilization of a Container with U.S. application Ser. No. 11 112 910 Method and Apparatus for Enforcing Packet Destination Specific Priority Using Threads with U.S. application Ser. No. 11 112 584 Method and Apparatus for Processing Network Traffic Associated with Specific Protocols with U.S. application Ser. No. 11 112 228.

The present application contains subject matter that may be related to the subject matter in the following U.S. applications filed on Oct. 21 2005 and assigned to the assignee of the present application Method and Apparatus for Defending Against Denial of Service Attacks with U.S. application Ser. No. 11 255 366 Router Based Defense Against Denial of Service Attacks Using Dynamic Feedback from Attacked Host with U.S. application Ser. No. 11 256 254 and Method and Apparatus for Monitoring Packets at High Data Rates with U.S. application Ser. No. 11 226 790.

The present application contains subject matter that may be related to the subject matter in the following U.S. applications filed on Jun. 30 2006 and assigned to the assignee of the present application Network Interface Card Virtualization Based On Hardware Resources and Software Rings with U.S. Pat. No. 7 672 299 Method and System for Controlling Virtual Machine Bandwidth with U.S. Pat. No. 7 613 132 Virtual Switch with U.S. Pat. No. 7 643 482 System and Method for Virtual Network Interface Cards Based on Internet Protocol Addresses with U.S. Pat. No. 7 684 423 Virtual Network Interface Card Loopback Fastpath with U.S. Pat. No. 7 630 368 Bridging Network Components with U.S. Pat. No. 7 634 608 Reflecting the Bandwidth Assigned to a Virtual Network Interface Card Through Its Link Speed with U.S. Pat. No. 7 792 140 Method and Apparatus for Containing a Denial of Service Attack Using Hardware Resources on a Virtual Network Interface Card with U.S. Pat. No. 7 966 401 Virtual Network Interface Cards with VLAN Functionality with U.S. Pat. No. 7 742 474 Method and Apparatus for Dynamic Assignment of Network Interface Card Resources with U.S. Pat. No. 7 613 198 Generalized Serialization Queue Framework for Protocol Processing with U.S. Pat. No. 7 715 416 Serialization Queue Framework for Transmitting Packets with U.S. application Ser. No. 11 479 143.

The present application contains subject matter that may be related to the subject matter in the following U.S. applications filed on Jul. 20 2006 and assigned to the assignee of the present application Low Impact Network Debugging with U.S. application Ser. No. 11 489 926 Reflecting Bandwidth and Priority in Network Attached Storage I O with U.S. Pat. No. 7 836 212 Priority and Bandwidth Specification at Mount Time of NAS Device Volume with U.S. application Ser. No. 11 489 934 Notifying Network Applications of Receive Overflow Conditions with U.S. application Ser. No. 11 490 821 Multi Level Packet Classification with U.S. Pat. No. 7 848 331 Method and System for Automatically Reflecting Hardware Resource Allocation Modifications with U.S. Pat. No. 7 788 411 Multiple Virtual Network Stack Instances Using Virtual Network Interface Cards with U.S. Pat. No. 7 788 257 Method and System for Network Configuration for Containers with U.S. Pat. No. 7 912 926 Network Memory Pools for Packet Destinations and Virtual Machines with U.S. application Ser. No. 11 490 486 Method and System for Network Configuration for Virtual Machines with U.S. application Ser. No. 11 489 923 Multiple Virtual Network Stack Instances with U.S. Pat. No. 7 894 453 and Shared and Separate Network Stack Instances with U.S. application Ser. No. 11 489 933.

Network traffic is transmitted over a network such as the Internet from a sending system e.g. a computer system to a receiving system e.g. a computer system via a physical network interface card NIC . The NIC is a piece of hardware found in a typical computer system that includes functionality to send and receive network traffic. Typically network traffic is transmitted in the form of packets where each packet includes a header and a payload. The header contains information regarding the source address destination address size transport protocol used to transmit the packet and various other identification information associated with the packet. The payload contains the actual data to be transmitted from the network to the receiving system.

Each of the packets sent between the sending system and receiving system is typically associated with a connection. The connection ensures that packets from a given process on the sending system reach the appropriate process on the receiving system. Packets received by the receiving system via a NIC associated with the receiving system are analyzed by a classifier to determine the connection associated with the packet.

Typically the classifier includes a connection data structure that includes information about active connections on the receiving system. The connection data structure may include the following information about each active connection i the queue associated with the connection and ii information necessary to process the packets on the queue associated with the connection. Depending on the implementation the connection data structure may include additional information about each active connection. Such queues are typically implemented as first in first out FIFO queues and are bound to a specific central processing unit CPU on the receiving computer system. Thus all packets for a given connection are placed in the same queue and are processed by the same CPU. In addition each queue is typically configured to support multiple connections.

Once the classifier determines the connection associated with the packets the packets are sent to a temporary data structure e.g. a receive ring on the NIC and an interrupt is issued to the CPU associated with the queue. In response to the interrupt a thread associated with the CPU to which the serialization queue is bound retrieves the packets from the temporary data structure and places them in the appropriate queue. Once packets are placed in the queue those packets are processed in due course. In some implementations the queues are implemented such that only one thread is allowed to access a given queue at any given time.

In general in one aspect the invention relates to a method for processing packets. The method comprises receiving a first packet for a first virtual machine by a network interface card NIC classifying the first packet using a hardware classifier wherein the hardware classifier is located on the NIC sending the first packet to a first one of a plurality of receive rings based on the classification sending the first packet from the first one of the plurality of receive rings to a first virtual network interface card VNIC sending the first packet from the first VNIC to a first interface and sending the first packet from the first interface to the first virtual machine wherein the first virtual machine is associated with the first interface wherein the first VNIC and the first virtual machine are executing on a host.

In general in one aspect the invention relates to a method for processing a packet. The method comprises registering a first network interface card NIC with a host querying the first NIC by a first device driver associated with the first NIC to obtain first hardware information associated with the first NIC registering a second NIC with the host querying the second NIC by a second device driver associated with the second NIC to obtain second hardware information associated with the second NIC receiving the packet for a virtual machine by the first NIC classifying the packet using a hardware classifier wherein the hardware classifier is located on the first NIC sending the packet to one of a plurality of receive rings based on the classification wherein the one of the plurality of receive rings is located on the first NIC sending the packet from the one of the plurality of receive rings to a virtual network interface card VNIC sending the packet from the VNIC to an interface and sending the packet from the interface to the virtual machine associated with the interface wherein the first hardware information is advertised by the first device driver in a first format wherein the second hardware information is advertised by the second device driver in a second format and wherein the first format is the same as the second format.

In general in one aspect the invention relates to a system. The system comprises a first network interface card NIC comprising a first plurality of receive rings and a first hardware classifier wherein the first NIC is configured to receive a first packet for a first virtual machine classify the first packet using the first hardware classifier and send the first packet to a first one of a first plurality of receive rings based on the classification and a host operatively connected to the first NIC comprising a first virtual network interface card VNIC a first interface operatively connected to the first VNIC the first virtual machine operatively connected to the first interface wherein the host is configured to obtain the first packet from the first one of the first plurality of receive rings send the first packet to the first VNIC send the first packet from the first VNIC to the first interface and send the first packet from the first interface to the first virtual machine.

Other aspects of the invention will be apparent from the following description and the appended claims.

Specific embodiments of the invention will now be described in detail with reference to the accompanying figures. Like elements in the various figures are denoted by like reference numerals for consistency.

In the following detailed description of embodiments of the invention numerous specific details are set forth in order to provide a more thorough understanding of the invention. However it will be apparent to one of ordinary skill in the art that the invention may be practiced without these specific details. In other instances well known features have not been described in detail to avoid unnecessarily complicating the description.

In general embodiments of the invention relate to a method and system for programming a classifier hardware or software to route packets to a virtual machine. In one embodiment of the invention the aforementioned routing allows the packets to be forwarded to the virtual machine without the host having to determine to which virtual machine to send the packets. Said another way embodiments of the invention off load the classification of the packets from an application residing on the host to network interface card NIC hardware or a Media Access Control MAC level component in the host.

In addition embodiments of the invention provide a mechanism for discovering NICs and obtaining the hardware information associated with the NICs. In general the hardware information corresponds to information about various hardware resources e.g. receive rings transmit rings hardware classifier functionality as well as information about the various control functions that may be used to control the aforementioned hardware resources.

In one embodiment of the invention the hardware classifier is configured to analyze the incoming network traffic typically in the form of packets received from the network not shown . In one embodiment of the invention analyzing individual packets includes determining to which of the HRRs each packet is sent. In one embodiment of the invention analyzing the packets by the hardware classifier includes analyzing one or more fields in each of the packets to determine to which of the HRRs the packets are sent. As an alternative the hardware classifier may use the contents of one or more fields in each packet as an index into a data structure that includes information necessary to determine to which HRR that packet is sent.

The hardware classifier may be implemented entirely in hardware i.e. the hardware classifier may be a separate microprocessor embedded on the NIC . Alternatively the hardware classifier may be implemented in software stored in memory e.g. firmware etc. on the NIC and executed by a microprocessor on the NIC .

In one embodiment of the invention the host may include the following components a device driver a software ring one or more virtual network interface cards VNICs one or more virtual network stacks VNSs one or more packet destinations one or more interfaces and one or more virtual machines . Each of the aforementioned components is described below.

In one embodiment of the invention the device driver provides an interface between the HRRs and the host . More specifically the device driver exposes the HRRs to the host such that the host or more specifically a process executing on the host may obtain packets from the HRRs .

In one embodiment of the invention the software ring includes a software classifier and a number of software receive rings SRR e.g. . In one embodiment of the invention the software classifier has the same functionality as the hardware classifier . However instead of sending the classified packets to a HRR the software classifier forwards classified packets to one of the SRRs . The SRRs are configured to temporarily store the received packets after being classified by the software classifier . In one embodiment of the invention the software ring resides in a Media Access Control MAC layer of the host .

In one embodiment of the invention each of the VNICs is associated with either a SRR or a HRR . The VNICs provide an abstraction layer between the NIC and the various packet destinations or virtual machines executing on the host . More specifically each VNIC operates like a NIC . For example in one embodiment of the invention each VNIC is associated with one or more Internet Protocol IP addresses one or more Media Access Control MAC addresses optionally one or more ports and is optionally configured to handle one or more protocol types. Thus while the host may be operatively connected to a single NIC packet destinations and virtual machines executing on the host operate as if the host is bound to multiple NICs. In one embodiment of the invention the VNICs reside in a Media Access Control MAC layer of the host .

Each of the VNICs is operatively connected to a corresponding VNS . In one embodiment of the invention each VNS includes functionality to process packets in accordance with various protocols used to send and receive packets e.g. Transmission Communication Protocol TCP Internet Protocol IP User Datagram Protocol UDP etc. . Further each VNS may also include functionality as needed to perform additional processing on the incoming and outgoing packets. This additional processing may include but is not limited to cryptographic processing firewall routing etc.

In one embodiment of the invention each VNS includes network layer and transport layer functionality. In one embodiment of the invention network layer functionality corresponds to functionality to manage packet addressing and delivery on a network e.g. functionality to support IP Address Resolution Protocol ARP Internet Control Message Protocol etc. . In one embodiment of the invention transport layer functionality corresponds to functionality to manage the transfer of packets on the network e.g. functionality to support TCP UDP Stream Control Transmission Protocol SCTP etc. . The structure and functionality of the VNSs is discussed in .

As discussed above the host includes one or more packet destinations . In one embodiment of the invention the packet destination s corresponds to any process or group of processes executing on the host that is configured to send and or receive network traffic. Further the packet destination s does not include an internal network stack i.e. there is no network stack within the packet destination rather the packet destination is associated with a VNS .

Examples of packet destinations include but are not limited to containers services e.g. web server etc. As shown in the VNS is associated with a packet destination . In one embodiment of the invention each packet destination is associated with a single VNS . Alternatively each packet destination is associated with one or more VNSs .

In one embodiment of the invention each VNS is associated with a bandwidth allocation. Those skilled in the art will appreciate that if there is only one VNS bound to the packet destination then the bandwidth allocation of the VNS corresponds to the bandwidth allocated to the packet destination . In one embodiment of the invention the bandwidth allocation corresponds to the number of packets the packet destination may receive in a given time interval e.g. megabytes per seconds . The bandwidth allocation for a given packet destination is enforced by the VNS operating in polling mode discussed in .

In one embodiment of the invention the VNIC may be bound to a virtual machine e.g. Xen Domain instead of a packet destination . In such cases the VNIC is bound to an interface e.g. a Xen interface where the interface enables the VNIC to communicate to with the virtual machine. In one embodiment of the invention each of the aforementioned virtual machines includes its own network stack e.g. 134 136 138 and includes its own operating system OS instance which may be different than the OS executing on the host. In one embodiment of the invention each virtual machine is associated with its own MAC address and IP address which may be static or obtained using Dynamic Host Configuration Protocol DHCP . Further the VNIC associated with the virtual machine e.g. VNIC is associated with VM in includes the same MAC address and IP address as virtual machine with which it is associated.

In one embodiment the IP layer is configured to receive packets from the VNIC associated with the VNS e.g. VNS receives packets from VNIC in . Further the IP layer is configured to receive packets from the transport layer . In one embodiment of the invention the IP layer is configured to perform IP level processing for both inbound and outbound packets.

Continuing with the discussion of the inbound VSQ is configured to receive packets from the IP layer . The inbound VSQ corresponds to a queue data structure and is configured to queue packets received from the IP layer prior to the packets being processed by the transport layer . In one embodiment of the invention the inbound VSQ may be used to control the number of packets being received by the packet destination e.g. associated with the VNS. The inbound VSQ may control the bandwidth by limiting the number of packets in the VSQ and preventing additional packets from entering the VNS until the inbound VSQ has less than a threshold number of packets.

In one embodiment of the invention the transport layer is configured to process inbound and outbound packets in accordance with Transmission Control Protocol TCP User Datagram Protocol UDP or both UDP and TCP. Other protocols may be supported by the transport layer .

In one embodiment of the invention the outbound VSQ is a queue data structure configured to receive packets from the packet destination e.g. with which the VNS is associated. Further the outbound VSQ is configured to store packets prior to sending the received packets to the transport layer . In one embodiment of the invention the outbound VSQ is also configured to control the flow of packets from the packet destination e.g. associated with the VNS to the VNS . In one embodiment of the invention the outbound VSQ or a related process is configured to block an application from sending packets to the outbound VSQ if the packet destination e.g. is attempting to issue packets at a higher rate than the outbound bandwidth allocated to the packet destination e.g. . Further the outbound VSQ or a related process is configured to notify the packet destination e.g. when it is no longer blocked from issuing packets to the VNS .

In one embodiment of the invention the inbound VSQ and outbound VSQ are each configured to enforce the manner in which packets are processed. Specifically the inbound VSQ and outbound VSQ may be configured to enforce the packet processing requirements imposed by the transport layer . For example TCP requires serial processing of packets. Thus the inbound VSQ and outbound VSQ may require all threads accessing the inbound VSQ and outbound VSQ to conform to a mutual exclusion policy. In one embodiment of the invention the mutual exclusion policy requires that only one thread may access the VSQ inbound or outbound at a time. Thus if two threads are attempting to access a given VSQ inbound or outbound one thread must wait until the other thread has finished accessing the VSQ inbound or outbound .

Alternatively if the transport layer only supports UDP then the inbound VSQ and outbound VSQ may be configured to allow concurrent access. Said another way two or more threads may concurrently access the VSQ inbound or outbound . In one embodiment of the invention if the transport layer is configured to process both TCP and UDP packets then the inbound VSQ and outbound VSQ are configured to conform to the more stringent standard e.g. TCP if the transport layer supports both TCP and UDP .

In one embodiment of the invention the inbound VSQ and the outbound VSQ are implemented as a single bi directional VSQ. In such cases the bi directional VSQ includes a single set of configuration parameters discussed above to enforce the manner in which packets are processed. Further the enforcement of the configuration parameters is performed on a VSQ basis as opposed to a per direction basis . For example if the bi directional VSQ enforces a mutual exclusion policy then only one thread may access the bi directional VSQ at a time.

Continuing with the discussion of the device driver subsequently discovers the NIC and then registers the NIC with the host Step . Registering the NIC with the host may include but is not limited to notifying the host that the NIC is operatively connected to the host and that the host or processes executing on the host may use the NIC to send and receive packets. At this stage the host is aware that the NIC is operatively connected to the host but typically does not have sufficient information about the various hardware resources within the NIC i.e. hardware classifier in the NIC or sufficient information to program the NIC.

The device driver subsequently obtains hardware information from the NIC Step . In one embodiment of the invention hardware information corresponds to information about the hardware resources on the NIC. The hardware resources may include but are not limited to hardware receive rings HRRs e.g. in transmit receive rings TRRs not shown in and a hardware classifier e.g. in . The TRRs correspond to outbound queues typically First In First Out FIFO queues in the NIC used to handle outbound packets i.e. packets received from the host and destined for another host on the network . In one embodiment of the invention the device driver may obtain a listing of all HRRs and TRRs available on the NIC.

In one embodiment of the invention the hardware information may also include information about various control functions and related information used to control the aforementioned hardware resources on the NIC. The following is a non exhaustive list of control functions and related information which may be obtained from the NIC i a listing of the properties of each of the HRRs and TRRs on the NIC the properties may includes information about the maximum number of packets each of the HRRs and TRRs may store ii a function entry point for each of the HRRs where the function entry point is used to individually poll discussed below each of the HRRs iii an interrupt control function for each of the HRRs where the interrupt control functions allow Interrupt Mode discussed below to be enabled or disabled on a per HRR basis iv a message signaled interrupt MSI control function for each of the HRRs where the MSI control function provides information about the level of MSI available for each HRR as well as functionality to assign an HRR to a specific MSI and v a control function to program the hardware classifier.

In one embodiment of the invention the control function to program the hardware classifier corresponds to one or more application programming interfaces APIs used to program the hardware classifier to forward packets for specific virtual machines and or packet destinations to specific HRRs. The aforementioned API is typically used by the host to program the classifier.

In one embodiment of the invention the hardware information is advertised by the device driver to the host. Further the hardware information is supplied to the device driver in a standardized format. Thus the hardware information for two distinct NICs is advertised to the host in the same format though the content is different . Further in one embodiment of the invention the host expects the hardware information in the standardized format.

In one embodiment of the invention the standardized format specifies the order in which hardware resources within the hardware information are advertised to the host. For example the standardized format may require that the hardware information is advertised in the following order i HRRs ii TRRs and iii hardware classifier. Further for each of the aforementioned hardware resources the standardized format may require certain pieces of information provided in a specific format. For example the standardized format may require the following information for each HRR i a function entry point ii an interrupt control function to enable or disable interrupt mode for the HRR and iii level of MSI available.

In one embodiment of the invention the host maintains a copy of the hardware information obtained from each NIC operatively connected to the host.

Once the number of VNICs to be created has been determined the number of hardware receive rings on the NIC is assessed Step . VNICs are subsequently created in the host where the number of VNICs created corresponds to the number of VNICs determined in Step Step . Next a determination is made about whether there are fewer HRRs than VNICs on the host Step . If there are fewer HRRs than VNICs on the host then a software ring is created in the host and subsequently associated with one of the HRRs Step .

A set of software receive rings SRRs is then created within the software ring Step . The VNICs are then bound to the SRRs Step . More specifically the VNICs that cannot be bound to the HRRs are bound to the SRRs. Then the remaining VNICs are bound to the HRRs Step . The hardware classifier in the NIC and the software classifier if host includes a software ring are programmed Step . In one embodiment of the invention programming the hardware classifier and software classifier includes specifying to which HRR or SRR to send the received packets. The hardware classifier may be programmed using an API advertised by the device driver see above . Those skilled in the art will appreciate that steps in may be a different order.

In one embodiment of the invention programming the hardware classifier includes specifying that all packets for a specific packet destination or virtual machine are sent to a specific HRR. In one embodiment of the invention the hardware classifier is programmed using the MAC address and optionally the IP address associated with the virtual machines. Thus all packets with a specific MAC address and optionally an IP address are sent to a specific HRR. As discussed the HRRs are bound to VNICs or software rings. Thus packets sent to specific HRRs are subsequently sent to the appropriate VNIC or software ring.

In the case where the packets are sent to the software ring the software classifier in the software ring performs additional classification. In one embodiment of the invention the software classifier includes the same functionality as the hardware classifier and is programmed using the same criteria e.g. MAC addresses IP addresses etc. as the hardware classifier.

In one embodiment of the invention VNICs are preferably bound to an HRR if an HRR is available and the hardware classifier in the NIC is configured to perform the level of classification required by the host. In such cases one HRR is bound to a software ring and the other HRRs are bound to VNICs. In one embodiment of the invention each of the aforementioned VNICs is associated with a virtual network stack VNS . Further each VNS is associated with a bandwidth allocation.

As stated above software rings can be arbitrarily created on top of HRR or SRRs. As a result different structures involving software rings can be created to handle the same number of VNICs using the method shown in .

A determination is then made about whether the receive ring is associated with a software ring Step . In one embodiment of the invention the receive ring is associated with the software ring if packets from the receive ring are sent from the receive ring to the software ring. If the receive ring is associated with a software ring then the packets are forwarded to a software classifier in the software ring Step . The process then proceeds to Step . If Step is entered from Step then classifier in Step now corresponds to a software classifier and all references to receive rings in Steps correspond to SRRs. Said another way when Steps are initially performed the classifier corresponds a hardware classifier and the receive rings correspond to HRRs. However if the HRR is bound to a software ring see Step then in all subsequent executions of Steps the classifier corresponds to a software classifier and all references to receive rings in Steps correspond to SRRs.

If the receive ring is not associated with a software ring then a determination is made about whether the receive ring HRR or SRR is associated with a virtual machine or a packet destination Step . The receive ring is associated with the virtual machine if the receive ring sends via a VNIC received packets to an interface which in turn sends packets to a virtual machine. Similarly the receive ring is associated with a packet destination if the receive ring via a VNIC sends packets to a VNS which in turn sends packets to a packet destination.

If the receive ring is associated with a packet destination the process proceeds to Step . Alternatively if the receive ring is associated with a virtual machine then the process proceeds to Step . With respect to Step a determination is made about whether the VSQ associated with the VNS is operating in polling mode or interrupt mode.

If the VSQ is operating in polling mode then the packets remain in the receive ring HRR or SRR until the VSQ requests a specified number of packets from the receive ring Step . In one embodiment of the invention the VSQ does not request any packets when there are packets already queued on the VSQ. In one or more embodiments of the invention the VSQ retrieves all packets from the receive ring when a request is made for packets.

Those skilled in the art will appreciate that the receive rings store a finite number of packets. Thus if the receive rings receive packets at a faster rate than the rate at which the corresponding VSQ requests the packets the receive rings will eventually fill completely with packets and packets received after this point are dropped until packets on the receive rings are requested and processed. In one embodiment of the invention the rate at which packets are requested from the receive ring SRR or HRR and the number of packets requested are determined by the bandwidth allocation of the VNS bound to the receive ring. In one embodiment of the invention a function entry point associated with the receive ring is used to poll the specific receive ring HRR or SRR .

Alternatively if the VSQ is operating in interrupt mode or the VNIC is associated with a virtual machine then an interrupt is issued to a processor i.e. a processor bound to the VSQ that is bound to the VNS associated with the receive ring or to a processor bound to a virtual machine Step . In one embodiment of the invention if the receive ring is an SRR and it is bound to a VNIC then the interrupt as recited in Step is a software interrupt as opposed to a hardware interrupt as recited in Step which is generated when the HRR is bound to a VNIC. The packets are then sent to the VNIC Step . In one embodiment of the invention if the VSQ is operating polling mode then the VSQ which includes the function entry point uses the function entry point to obtain the packet from the receive ring and place it in the appropriate VNIC. Alternatively if the VSQ is operating in interrupt mode then the device driver or NIC executes the function entry point to send the packet from the receive ring to the appropriate VNIC.

The VNIC subsequently forwards the packets to the appropriate VNS or Interface Step where the packets are processed and then sent to the packet destination or virtual machine Step . In one embodiment of the invention processing the packet by the interface includes flipping the content of the packet such that the most significant bit becomes the least significant bit. Once the packet has been processed by the interface it is placed in the address space associated with the virtual machine. In one embodiment of the invention processing the packet by the VNS is described in .

In one embodiment of the invention the method shown in allows packets for the virtual machines to be sent to the appropriate virtual machine without requiring the host operating system to perform any additional classification. The functionality to send the packets to the appropriate virtual machine is enabled by the ability to program the hardware classifier to direct packets for a specific virtual machine to a specific HRR.

As discussed above in some cases there may not be a sufficient number of HRRs to allow each virtual machine to be mapped to a unique HRR. In such cases the packets for a number of virtual machines are sent to a specific HRR. Packets from the specific HRR are then sent to a software ring where the software ring performs additional classification and sends the packets to the appropriate SRR. The SRRs subsequently send packets using interrupt or polling mode to the appropriate VNICs which in turn forward packets towards the appropriate packet destination or virtual machine.

An embodiment of the invention may be implemented on virtually any type of computer regardless of the platform being used. For example as shown in a networked computer system includes a processor associated memory a storage device and numerous other elements and functionalities typical of today s computers not shown . The networked computer may also include input means such as a keyboard and a mouse and output means such as a monitor . The networked computer system is connected to a local area network LAN or a wide area network via a network interface connection not shown . Those skilled in the art will appreciate that these input and output means may take other forms. Further those skilled in the art will appreciate that one or more elements of the aforementioned computer may be remotely located and connected to the other elements over a network. Further software instructions to perform embodiments of the invention may be stored on a computer readable medium such as a compact disc CD a diskette a tape a file or any other computer readable storage device.

While the invention has been described with respect to a limited number of embodiments those skilled in the art having benefit of this disclosure will appreciate that other embodiments can be devised which do not depart from the scope of the invention as disclosed herein. Accordingly the scope of the invention should be limited only by the attached claims.

