---

title: Graphics system employing pixel mask
abstract: The system includes a bounds primitive rasterizer that rasterizes a bounds primitive into a selection of primitive pixels. The selection of primitive pixels bounds a shape to be rendered to a screen. The system also includes a pixel mask generator that generates a pixel mask for the shape. The pixel mask includes mask pixels that each corresponds to one of the primitive pixels. A mask pixel is a covered pixel when the shape covers at least a threshold portion of the mask pixel and is an uncovered pixel when the shape does not cover the mask pixel. The system also includes a pixel screener configured to retain primitive pixels that correspond to covered mask pixels and to discard primitive pixels that correspond to uncovered mask pixels.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07652677&OS=07652677&RS=07652677
owner: QUALCOMM Incorporated
number: 07652677
owner_city: San Diego
owner_country: US
publication_date: 20060803
---
The present invention relates generally to graphics systems for rendering images and more particularly to graphics software interfaces.

Graphics systems often rasterize different shapes into pixels. During rasterization the graphics system identify which pixels fall within the shape. The process of identifying the pixels that fall within the shape becomes more difficult as the shape becomes more complex. Features that can contribute to the complexity of a shape include smooth curves concave geometry self intersection and holes. Graphics systems can deal with these complex shapes by converting the shape into multiple simpler shapes or by directly rasterizing the complex shapes. These solutions are inefficient and can be difficult to implement in hardware. For these reasons there is a need for an improved graphics system.

A graphics system is configured to retain a pixel in a rasterized bounds primitive when a corresponding pixel from a pixel mask is a covered pixel. The system is also configured to discard the pixel when the corresponding pixel is an uncovered pixel. The corresponding pixel is a covered pixel when a shape bounded by the bounds primitive covers at least a threshold portion of the corresponding pixel. The corresponding pixel is an uncovered pixel when the shape does not cover the corresponding pixel.

An embodiment of the system includes a bounds primitive rasterizer that rasterizes a bounds primitive into a selection of primitive pixels. The selection of primitive pixels bounds a shape to be rendered to a screen. The system also includes a pixel mask generator that generates a pixel mask for the shape. The pixel mask includes mask pixels that each corresponds to one of the primitive pixels. A mask pixel is a covered pixel when the shape covers at least a threshold portion of the mask pixel and is an uncovered pixel when the shape covers less than the threshold portion of the mask pixel. The system also includes a pixel screener configured to retain primitive pixels that correspond to covered mask pixels and to discard primitive pixels that correspond to uncovered mask pixels. The system also includes a pixel attribute generator that generates pixel attributes for the retained pixels and refrains from generating pixel attributes for the discarded pixels.

The graphics system is configured to rasterize a shape into a pixel mask. The pixel mask has a plurality of mask pixels that each corresponds to a pixel on a display screen. Each mask pixel is a covered pixel or an uncovered pixel. A mask pixel is a covered pixel when the shape covers at least a threshold portion of the mask pixel and is an uncovered pixel when the shape does not cover the mask pixel. The graphics system is also configured to rasterize a bounds primitive into a selection of primitive pixels that bound the shape. Each primitive pixel corresponds to a pixel on the display screen and accordingly to a mask pixel. The system retains primitive pixels that correspond to covered mask pixels and to discard primitive pixels that correspond to uncovered mask pixels. The system can generate pixel attributes for the retained pixels and refrain from generating pixel attributes for the discarded pixels.

The graphics system can employ software and or firmware to generate the pixel mask while employing hardware to rasterize the bounds primitive and screen the primitive pixels. Software and or firmware are better suited for identifying pixels that fall within complex shapes than hardware. As a result employing software and or firmware to generate the pixel mask employs a more efficient resource to identify pixels that fall within a shape and frees up the hardware for other applications. Accordingly employing software and or firmware to generate the pixel mask provides a more efficient graphics system.

The electronics are also in communication with one or more user interfaces . Suitable user interfaces include but are not limited to buttons knobs keys keypads keyboards and a mouse. A user of the graphic system can employ the one or more user interfaces to provide commands to the electronics . The electronics can execute the commands and display the results of the command on the display . Examples of commands include a change in the viewpoint from which the image is viewed. Accordingly the electronics can change the image on the display as required by the change in viewpoint. In executing commands the electronics can operate the system completely or partially in accordance with software interfaces including but not limited to Open Graphics Library OpenGL OpenGLES and Direct3D etc. OpenGL is described in a document entitled The OpenGL Graphics System A Specification Version 2.0 dated Oct. 22 2004.

The electronics include a controller . A suitable controller includes but is not limited to a general purpose processor a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions attributed to the electronics and or the controller . A general purpose processor may be a microprocessor but in the alternative the controller may include or consist of any conventional processor microcontroller or state machine. A controller may also be implemented as a combination of computing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration.

The electronics include a memory in communication with the controller . The electronics can store data for the image and data for rendering the image in the memory . The memory can be any memory device or combination of memory devices suitable for read write operations.

In some instances the electronics include a computer readable medium in communication with the controller . The computer readable medium can have a set of instructions to be executed by the controller . The controller can read and execute instructions included on the computer readable medium. The controller executes the instructions such that the electronics perform desired functions such as executing a command provided by the user. Although the computer readable medium is shown as being different from the memory the computer readable medium can be the same as the memory . Suitable computer readable media include but are not limited to optical discs such as CDs magnetic storage diskettes Zip disks magnetic tapes RAMs and ROMs.

As will be described in more detail below some functions of the electronics may be executed using hardware while other functions are executed using firmware and or software. When the electronics implement a function using firmware and or software the electronics employ a processor to execute instructions on a computer readable medium. For instance the electronics can employ a processor reading software written on a RAM implement a function. In contrast when the electronics implement a function in hardware the hardware does not execute instructions on the computer readable medium.

In some instances the graphics system is configured to communicate wirelesly with a network. Accordingly the controller can optional be in communication with a transceiver . The controller can employ the transceiver to send and or receive messages to a network. As an alternative to the transceiver the electronics can be in communication with a receiver and a transmitter. When the graphics system is configured to communicate wirelessly with a network the electronics can operate in accordance with a wireless communications standard such as Code Division Multiple Access CDMA Time Division Multiple Access such as Global System for Mobile Communications GSM or some other wireless communication standard.

Suitable graphic systems include but are not limited to cellular phones access terminals handsets personal digital assistants PDA laptop computers video game units and personal computers. Although illustrates the electronics the display and the one or more user interfaces positioned integrated into a single device in a case the electronics the display and or the one or more user interfaces can be included in different devices and or can be located remotely from one another. Additionally or alternately different components of the electronics can be included in different devices.

The texture type can be the same across the shape. For instance the entire shape can be covered with a particular type of texture. Examples of texture include but are not limited to wood textures brick textures and stone textures.

In some instances the graphics system converts the shape description to screen coordinates. Accordingly the diagram labeled B in illustrates the screen shape in screen coordinates. The transformation to screen coordinates can include one or more transformations. For instance when the shape description is in three dimensions the graphics system can transform the object shape description to world coordinates from the world coordinates to eye coordinates from eye coordinates to homogeneous perspective eye coordinates from this representation through homogeneous divide to screen coordinates and finally from the screen coordinates a viewport transformation maps these coordinates to device specific coordinates which are directly mapped to some in memory layout. The transformation from the shape description to the world coordinates can effectively place all shapes in a common world. The eye coordinates are the coordinates of the 3D objects relative to a computed view point. Typically the transformation of the shape to world coordinates and then to eye coordinates is performed as a single transformation that can be done through a single modelview matrix transformation. The transformation from the eye coordinate system to the homogeneous eye coordinate system causes objects that are further from the viewpoint to appear smaller than closer objects after the homogeneous divide. The transformation from eye coordinates to screen coordinates can generally be done through a projection matrix and the homogeneous divide can be implicit and can be designed into the hardware. The screen coordinate system is nominally a 2D system after a homogeneous normalization is performed although some 3D information may be retained for hidden surface and perspective correct interpolation calculations. The device coordinates represent a direct mapping of the image that is to be rendered on the screen. In some instance the device coordinates can serve as the screen coordinates and or the screen coordinates serve as the device coordinates. When the shape description is in two dimensions one or more of the above transformations may not be required. For instance the transformation into eye coordinates and perspective eye coordinates may not be required when the shape description is two dimensional.

The electronics use the screen coordinates to generate a bounds primitive that bounds the screen shape. For the purposes of illustration the diagram labeled C illustrates the shape illustrated by dashed lines and the perimeter of the bounds primitive with solid lines. The solid lines bound the shape in screen coordinates. The bounds primitive can have a shape commonly employed by primitives. For instance the bounds primitive can be a polygon such as a triangle square or rectangle. The bounds primitive can defined by data associated with each vertex of the primitive. Each vertex can be associated with data for various attributes such as position color values and texture coordinates. Color attributes are generally specified by a red value a green value and a blue value r g b . Texture coordinates are generally specified by horizontal and vertical coordinates s and t on a texture map. In screen coordinates position attributes are generally specified as a horizontal coordinate and a vertical coordinate x y but can also optionally include a depth coordinate z for use in hidden surface removal.

The electronics rasterize the bounds primitive into primitive pixels. The diagram labeled D in illustrates the screen shape rasterized into primitive pixels. Accordingly diagram D represents the primitive rasterization. Each primitive pixel corresponds to a pixel on the screen.

The electronics also use the screen shape to generate a pixel mask. The electronics generate the pixel mask by rasterizing the screen shape into mask pixels such that each mask pixel is divided into one or more pixel regions. For the purposes of illustration the diagram labeled E in illustrates the screen shape rasterized into mask pixels such that each mask pixel includes a single pixel region. As a result the mask pixels and the pixel regions are the same.

The mask pixels correspond to a pixel on the screen. Accordingly at least a portion of the mask pixels each correspond to a primitive pixel and at least a portion of the primitive pixels are each associated with one or more pixel regions from the pixel mask. In some instances each of the primitive pixels are each associated with one or more pixel regions from the pixel mask. In some instances each of the mask pixels each correspond to a primitive pixel and each of the primitive pixels corresponds to a mask pixel.

The electronics can employ one or more coverage criteria to generate regional coverage data that indicates whether each pixel region is a covered region or an uncovered region. An example of a suitable coverage criterion is whether any portion of the screen shape falls within a pixel region. For instance a pixel region can be a covered region when a portion of the screen shape falls inside of the pixel region and a pixel region can be an uncovered region when the screen shape falls entirely outside of the pixel region. The example coverage criterion was applied to diagram E on . The uncovered regions are shown as white while the covered regions are shown as gray. Accordingly the pixel mask includes covered regions and uncovered regions.

Other test criteria can be employed. For instance the test criteria can employ a coverage threshold percentage. A pixel region will be a covered region if the screen shape covers more than the threshold percentage of the pixel region and a pixel region will be an uncovered region if the screen shape covers less than the threshold percentage of the pixel region.

The electronics can employ one or more secondary coverage criteria to generate pixel coverage data which indicates whether a mask pixel is a covered pixel or an uncovered pixel. For instance the electronics can classify a mask pixel as a covered pixel when the number of pixel regions for that mask pixel that are covered region is at least equal to a region threshold. The electronics can classify a mask pixel as an uncovered pixel when the number covered regions for that mask pixel below the region threshold. A suitable region threshold includes but is not limited to 1.

Application of the one or more secondary coverage criteria is optional. For instance when the mask pixels include a single pixel region application of the one or more secondary coverage criteria need not be employed. For instance the covered regions will be classified as covered pixels for screening and the uncovered regions will be classified as uncovered pixels for the purposes of screening. Additionally application of the one or more secondary coverage criteria can be combined with application of the one or more criteria. For instance the electronics can identify covered regions for a mask pixel until the number of covered regions rises to the region threshold. Once the number of covered regions meets to the region threshold the mask pixel is classified as a covered pixel and if the total number of covered regions for the mask pixel falls below the region threshold the mask pixel is classified as an uncovered pixel.

The coverage criteria and the secondary coverage criteria result in at least a threshold portion of each covered pixels being covered by the shape. For instance the coverage criteria and the secondary coverage can ensure that at least a threshold number of pixel regions are covered regions for a mask pixel to be a covered pixel or that at least a coverage threshold percentage of the pixel regions are covered in order for the mask pixel to be a covered pixel. The coverage criteria and the secondary coverage criteria can also ensure that uncovered pixels are not covered by the shape. Additionally the coverage criteria and the secondary coverage criteria can ensure that less than the threshold portion of each uncovered pixels is covered by the shape.

The electronics employ the pixel mask to screen the primitive pixels for additional processing. For instance the electronics consider each of the primitive pixels that corresponds to a mask pixel for further processing. Each primitive pixel that corresponds to a mask pixel is compared to the corresponding mask pixel. When the corresponding mask pixel is an uncovered pixel the primitive pixel will not represent a portion of the shape on the screen and is accordingly a discarded pixel that is not processed further. When the corresponding mask pixel is a covered pixel the primitive pixel may represent a portion of the shape on the screen and is accordingly a retained pixel that is processed further. In some instances whether a retained pixel represents a portion of a shape on the screen is a result of the subsequent processing of the retained pixel.

Examples of further processing of retained pixels include determination of pixel attributes. Each retained pixel can be associated with a set of pixel attributes. Examples of pixel attributes include color values and texture coordinates. For instance retained pixels can each be associated with color values R G and B and or with texture coordinates such as s and t. Suitable methods for generating the pixel attributes include interpolation between the vertices of the bounds primitive. For instance texture coordinates and color values can be interpolated between the vertices of the bounds primitive. Each of the bounds primitive vertices can be associated with a set of vertex attributes such as R G B s t. The pixel attributes can be generated by interpolating between the vertices. In some instances interpolation includes interpolating spatial gradients of the texture coordinates. An example of a spatial gradient of a texture coordinate is the partial derivative ds dx where ds is the change in the texture coordinate per and dx is a move in the x direction in pixel coordinates. Accordingly these gradients reflect the rate of change of texture coordinates relative to pixel coordinates. Suitable interpolation techniques include but are not limited to spherical linear interpolation bi linear interpolation tri linear interpolation nearest neighbor interpolation and Phong interpolation.

In some instances the electronics perform set up processing before performing the interpolation and before performing the screening and or before performing the interpolation and after performing the screening. During the set up processing the electronics can generate parameters for the subsequent interpolation of attributes such as color and or texture. For instance the electronics can generate coefficients of equations used for the interpolation. In some instances electronics generate the spatial gradients of the texture coordinates during the set up processing.

In some instances additional processing that can be performed on a retained pixel includes texture mapping. The spatial gradients of texture coordinates can be employed in the texture mapping. For instance each texture can be associated with a plurality of MIP multum in parvo maps that each has a different resolution of textels. The spatial gradients of texture coordinates can be used to identify the MIP map that is correct for a particular primitive pixel or for a particular collection of primitive pixels.

Additional processing that can be performed on a retained pixel can also include blending. The blending can include anti aliasing. After blending the electronics can render the image on the display screen.

In some instances the electronics process a portion of the data in hardware and process another portion of the data using software and or firmware. For instance the electronics can employ software and or firmware to convert the shape description to screen coordinates to generate the pixel mask and to generate the bounds primitive while employing hardware to rasterize the bounds primitive to perform set up processing to perform the pixel screening and to perform interpolation. In one example the electronics employ software and or firmware to generate the pixel masks while employing hardware to rasterize the bounds primitive and screen the primitive pixels.

When the pixel mask is generated using software and or firmware and the primitive pixels are screened using hardware the pixel coverage data can be generated using the hardware or using the software and or firmware. For instance the software and or firmware can be used to consider the pixels regions to identify covered and uncovered pixels and can send the hardware a bit associated with each pixel. The bit can indicate whether the pixel is a covered pixel or an uncovered pixel. The hardware can then consider the bit in screening the primitive pixels. Alternately the software and or firmware can be used to send the hardware a single bit associated with each of the pixel regions for a mask pixel. The bit can indicate whether the pixel region is a covered region or an uncovered region. The hardware can consider the bit for one or more of the pixel regions to determine whether the mask pixel is a covered pixel or an uncovered pixels. Alternately the software and or firmware can be used to count the number of covered pixel regions for a mask pixel and can send the hardware bits that indicate the number of covered regions for the mask pixel. The hardware can employ the bits to determine whether the mask pixel is a covered pixel or an uncovered pixel. Alternately the software and or firmware can be used to count the number of uncovered pixel regions for a mask pixel and can send the hardware bits that indicate the number of uncovered regions for the mask pixel. The hardware can employ the bits to determine whether the mask pixel is a covered pixel or an uncovered pixel. Sending the number of covered regions or uncovered regions to the hardware can increase the efficiency of the data transfer to the hardware by reducing the number of bits that must be sent to the hardware. For instance the number of covered regions can be indicated by n bits where 2is the number of pixel regions in a mask pixel. As a result when the number of covered regions are sent to the hardware only n bits need to be sent to the hardware rather than 2.

The software and or the firmware can be configured to transfer blocks of data to the hardware. In many instances the amount of data in a block exceeds the amount of data associated with a single mask pixel. Accordingly sending the hardware data for single pixels can result in an inefficient transfer of data to the hardware. As a result the pixel mask can be divided into tiles. Each tile includes a plurality of the mask pixels and has the same diensions n pixels by m pixels . The tiles sizes can be defined such that the data for each tile can be transferred to the hardware in one of the blocks. As a result the tiles permit efficient transfer of data to the hardware.

When the pixel mask is generated using software and or firmware and the primitive pixels are screened using hardware the data for the mask pixels is sent to the hardware in the same sequence that the hardware screens the primitive pixels. As a result the sequence of data transfer to the hardware assures that the hardware is screening a primitive pixels the hardware is employing data for the corresponding mask pixel. When the pixel mask is divided into tiles the tile dimensions can be selected so transfer of data for the tile to the hardware results in the hardware receiving the data for the pixel masks in the correct sequence.

When the pixel mask is generated using software and or firmware and the primitive pixels are screened using hardware the software can provide the attributes for the vertices of the bounds primitive to the hardware along with the locations of the vertices. Software can also be employed to determine the attributes at the vertices. For instance the attributes can be generated by the interfaced software application through an Application Programming Interface API such as an OpenGL API. Alternately the attributes can be generated by a programmable shader which can set the texture position color and attribute information using coefficients to a globally specified function. The attributes would be computed as part of the process of transforming the shape description to screen coordinates.

The electronics can approximate the portion of a mask pixel covered by the screen shape by dividing each pixel into a plurality of pixel regions. For instances the electronics can determine the fractional coverage of mask pixels or can determine one or more parameters that indicate the fractional coverage of each mask pixel. illustrates the screen shape from rasterized such that each mask pixel is divided into four pixel regions. The diagram labeled B in illustrates a single mask pixel. The diagram labeled D illustrates the mask pixel of diagram B divided into four pixel regions. The diagram labeled F in illustrates the mask pixel of diagram B divided into sixteen pixel regions. Each pixel region has the same shape and size. A portion of a shape is shown covering the pixel illustrated in diagram B diagram B and diagram F. As noted above each pixel region can be acovered region or an uncovered region. The electronics can count the number of covered regions associated with a particular mask pixel. The number of pixel regions that are covered regions indicates the fractional coverage of the mask pixel when the total number of pixel regions per mask pixel are known. For instance the number of mask regions that are covered pixels are the numerator in the fractional coverage while the total number of mask regions per mask pixel serves as the denominator.

The data indicating the fractional coverage can be employed for anti aliasing. For instance the fractional coverage can be employed in blending operations such as Porter Duff blending.

When the pixel mask is generated using software and or firmware and the primitive pixels are screened using hardware the software and or firmware can be used to determine the data indicating the fractional coverage and the data can be transferred to the hardware. For instance as noted above the software and or firmware can be used to count the number of covered pixel regions for a mask pixel and can send the hardware bits that indicate the number of covered regions for the mask pixel. The hardware can employ the bits to determine whether the mask pixel is a covered pixel or an uncovered pixel. Alternately the software and or firmware can be used to count the number of uncovered pixel regions for a mask pixel and can send the hardware bits that indicate the number of uncovered regions for the mask pixel. Alternately the hardware can be used to determine the data indicating the fractional coverage. For instance as noted above the software and or firmware can be used to send the hardware a single bit associated with each of the pixel regions for a mask pixel. The bit can indicate whether the pixel region is a covered region or an uncovered region. The hardware can then count the number of pixel regions that are covered regions.

At process block the electronics employ the screen shape to generate a pixel mask. Generating the pixel mask includes rasterizing the screen shape into mask pixels such that each mask pixel is divided into one or more pixel regions. Generating the pixel mask can include generating pixel coverage data which identifies covered regions and uncovered regions. At process block the electronics can optionally generate one or more parameters that indicate the fractional coverage of the mask pixels.

At process block the electronics select a primitive pixel. At determination block a determination is made whether the selected primitive pixel is a discarded pixel or a retained pixel. When the selected pixel corresponds to a mask pixel that is a covered pixel the selected pixel is a retained pixel. When the corresponding mask pixel is an uncovered pixel the selected pixel is a discarded pixel. Accordingly the electronics access data from process block when executing determination block .

When the electronics determine that the selected pixel is a retained pixel the electronics determine attributes for the selected pixel at process block . The pixel attributes can include color and texture for the retained pixel. For instance the electronics can interpolate the color and texture attributes for the selected pixel between the color and texture attributes between the color and texture attributes for vertices of the bounds primitive. At process block the electronics can perform texture mapping for the retained pixel.

The electronics proceed from process block to determination block . Additionally the electronics proceed to determination block when the electronics determine that the selected pixel is a discarded pixel at process block . At determination block the electronics make a determination whether each of the primitive pixels has been selected. When the determination is negative the electronics return to process block . When the determination is positive the electronics perform blending at process block . Blending can include employing the parameters that indicate fractional coverage to perform anti aliasing. For instance the parameters that indicate fractional coverage can be employed in Porter Duff blending. Accordingly the electronics can access data from process block when executing process block . The image is rendered on the screen at process block .

The electronics include a pixel mask generator for generating a pixel mask from the screen coordinates. The pixel mask is rasterized into mask pixels such that each mask pixel includes one or more pixel regions. The pixel mask can also identify which mask pixels are covered pixels and which pixels are uncovered pixels. Each primitive pixel corresponds to a mask pixel.

The electronics include a pixel screener configured to screen the primitive pixels for retained pixels and discarded pixels. When a primitive pixel corresponds to a mask pixel that is a covered pixel the primitive pixel is a retained pixel. When the corresponding mask pixel is an uncovered pixel the primitive pixel is a discarded pixel.

The electronics include a pixel attribute generator that generates attributes for the retained pixels. The pixel attributes can include the color and texture for the retained pixels.

The electronics include a blending module that can be configured to provide anti aliasing of the image. The blending module can optionally employ fractional coverage data for the retained pixels. Accordingly the electronics can optionally include a fractional coverage estimator configured to estimate the fractional coverage of the retained pixels. The electronics include an image rendering module for rending the image on the screen.

The electronics can include modules in addition to the illustrated modules. For instance the electronics can include a z buffer module. The z buffer module can ensure that overlapping shapes in the image overlap correctly. For instance the z buffer module can ensure that the shape closest to the front of the image is the image that is actually viewed on the screen. The z buffer module is most useful when the shape description is three dimensional and may not be required when the shape description is two dimensional.

Although the disclosures are in the context of a destination that is a two dimensional display screen the principles of the invention can be applied to destinations with higher orders of dimensionality. For instance the principles of the invention can be applied to three dimensional modeling technologies.

All or a portion of one or more methods described above can be executed by the graphics system and or by the electronics in the graphics system. Further the controller can cause the electronics and or the graphics system to execute all or a portion of one or more of the above methods. When the electronics include a computer readable medium the controller can execute the instructions on the computer readable medium. The instructions can cause the controller to execute all or the portion of one or more methods disclosed above. Additionally all or a portion of one or more of the above methods can be executed by systems and devices other than the graphics system.

Those of skill in the art would understand that information and signals may be represented using any of a variety of different technologies and techniques. For example data and instructions that may be referenced throughout the above description may be represented by voltages currents electromagnetic waves magnetic fields or particles optical fields or particles or any combination thereof.

Those of skill would further appreciate that the various illustrative logical blocks circuits and method steps described in connection with the embodiments disclosed herein may be implemented as electronic hardware computer software or combinations of both. To clearly illustrate this interchangeability of hardware and software various illustrative components blocks logic modules circuits and steps have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the scope of the present invention.

The various illustrative logical blocks logic modules and circuits described in connection with the embodiments disclosed herein may be implemented or performed with a general purpose processor a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor may be a microprocessor but in the alternative the processor may be any conventional processor controller microcontroller or state machine. A processor may also be implemented as a combination of computing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration.

The steps of a method described in connection with the embodiments disclosed herein may be embodied directly in hardware in a software module executed by a processor or in a combination of the two. A software module may reside in RAM memory flash memory ROM memory EPROM memory EEPROM memory registers hard disk a removable disk a CD ROM or any other form of computer readable medium known in the art. An exemplary storage computer readable medium is coupled to the processor such the processor can read information from and write information to the storage medium. In the alternative the storage medium may be integral to the processor. The processor and the storage medium may reside in an ASIC. The ASIC may reside in a user terminal. In the alternative the processor and the storage medium may reside as discrete components in a user terminal.

The previous description of the disclosed embodiments is provided to enable any person skilled in the art to make or use the present invention. Various modifications to these embodiments will be readily apparent to those skilled in the art and the generic principles defined herein may be applied to other embodiments without departing from the spirit or scope of the invention. Thus the present invention is not intended to be limited to the embodiments shown herein but is to be accorded the widest scope consistent with the principles and novel features disclosed herein.

