---

title: Delivering a customized service to a mobile device using a link
abstract: A method of delivering a user specific customized service to a mobile user device is disclosed. User specific customized service information is received over a first channel. An identifier for the user specific customized service is generated. A link is sent that includes the identifier of the user specific customized service over a second channel. The user specific customized service identifier is received. The user specific customized service over a third channel is sent.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08346223&OS=08346223&RS=08346223
owner: Flurry, Inc.
number: 08346223
owner_city: San Francisco
owner_country: US
publication_date: 20061107
---
This application claims priority to U.S. Provisional Patent Application No. 60 734 185 entitled REAL TIME GENERATION OF CUSTOMIZED APPLICATION EXECUTABLE DURING INSTALLATION PROCESS FOR MOBILE DEVICES filed Nov. 7 2005 which is incorporated herein by reference for all purposes and claims priority to U.S. Provisional Patent Application No. 60 846 285 entitled ADAPTIVE DEPLOYMENT OF APPLICATIONS FOR MOBILE DEVICES filed Sep. 20 2006 which is incorporated herein by reference for all purposes.

Installing applications for mobile devices pose significant challenges as each device is different and requires a different software implementation. Even more complicated are applications that are installed over a network onto the device based on a user s request since no prior knowledge of the device exists. One additional challenge is that mobile devices and mobile device networks evolve and change over time.

The conventional approach for the application installer is to compile an application multiple times once for each device type and allow the application user to choose one of the compiled programs based on her device type. There are several disadvantages with this approach First it requires a large amount of programming labor to research and compile the program for every device type. Second it requires all executables to be compiled ahead of time and the approach can only be applied to devices that exist at the time of compilation. Third it requires the network server provide sufficient storage for all of the versions of the application. Fourth it requires that the application user have correct knowledge of her device type. Fifth it cannot adapt to changing conditions in the mobile device carrier or network.

Therefore there exists a need for an efficient effective and adaptive way to install an application for a mobile device.

The invention can be implemented in numerous ways including as a process an apparatus a system a composition of matter a computer readable medium such as a computer readable storage medium or a computer network wherein program instructions are sent over optical or communication links. In this specification these implementations or any other form that the invention may take may be referred to as techniques. A component such as a processor or a memory described as being configured to perform a task includes both a general component that is temporarily configured to perform the task at a given time or a specific component that is manufactured to perform the task. In general the order of the steps of disclosed processes may be altered within the scope of the invention.

A detailed description of one or more embodiments of the invention is provided below along with accompanying figures that illustrate the principles of the invention. The invention is described in connection with such embodiments but the invention is not limited to any embodiment. The scope of the invention is limited only by the claims and the invention encompasses numerous alternatives modifications and equivalents. Numerous specific details are set forth in the following description in order to provide a thorough understanding of the invention. These details are provided for the purpose of example and the invention may be practiced according to the claims without some or all of these specific details. For the purpose of clarity technical material that is known in the technical fields related to the invention has not been described in detail so that the invention is not unnecessarily obscured.

In some embodiments the device database contains information such as a mobile device index an amount of memory on a mobile device certain capabilities of a mobile device and limitations of a mobile device. In some embodiments the application component data store contains the parts that can be assembled into variations of the program including device specific libraries configuration parameters security components and functional components. In some embodiments specifications from the device database map to a component or groups of components in the application components data store so that the installer server software can easily determine what components are needed for a given specification.

In a step a user of the service provider configures their service provider account over the network using user computer or mobile device . The service provider server assigns a user identifier for the service provider account. In some embodiments this step may be performed over the Internet using a web browser using Hypertext Transfer Protocol or HTTP with user computer or Wireless Application Protocol or WAP with mobile device or another mobile device.

In a step the service provider sends a customized pointer for the application to be installed to mobile device that contains the user identifier. The customized pointer is a pointer to a specific customized configuration of the application for the individual user. It is customized based on information typically entered by the user over the web using a browser in step . Other methods of interacting with a user are used in other embodiments. The application of customized configuration may include a standard compiled program plus configuration data. The application of customized configuration may also include a custom compiled program with embedded configuration data. Combinations of these techniques are also used. When the customized pointer is activated a customized install of the application is performed so that the user need not configure the application on his mobile phone. In some embodiments the customized pointer may be a Short Messaging Service or SMS message or email message customized to the service provider account configured in step .

In a step while the mobile device activates the pointer of step the mobile device is interrogated by the installer server software and creates a meta data signature based on the interrogation. In some embodiments the interrogation may be performed with an HTTP request to the mobile device and parsing the request response to create the meta data signature is performed by installer server software . In a step the service provider server custom compiles an application for the mobile phone based on the interrogation of step and sends the application to mobile device .

In a step the installer server software is sent a message if the application installed can be executed and attempts to repair any execution problems if this message indicates an error. It the message does not indicate an error the device database is updated with an installation success for the corresponding mobile device and its meta data signature and the template components and or parameters used in its compilation. In some embodiments a new template may be created in device database based on an installation success. In some embodiments this message may include a generic error message or a specific error message from the Mobile Information Device Profile 2.0 or MIDP 2.0 specification. In some embodiments applications written with Java 2 Platform Micro Edition or J2ME send an HTTP code.

In a step the installer server software is sent an initial communication over network when the application first executes and service provider server attempts to repair any connectivity problems if this communication is not received. It the communication is received successfully the device database is updated with an connectivity success for the corresponding mobile device and its meta data signature and the template components and or parameters used in its compilation. In some embodiments a new template may be created in device database based on a connectivity success. In some embodiments the application is written in Java and this communication is performed using the General Packet Radio Service or GPRS or Evolution Data Optimized EV DO service.

In a step if the application executes and can connect through the network to the service provider server the service provider continues to monitor and process feedback from the application from mobile device . Additional feedback may be sourced from use of the application s features a change in the mobile device a change in the network or other system changes. This feedback is used to update the device database for future installations with new mobile devices having the same or similar meta data signature. This step will be continually provided by the service provider server for an extended period of time.

In a step the installer server software sends a meta data request to mobile device . In some embodiments the meta data request may be done through an HTTP request. In some embodiments the meta data can contain the User Agent a unique string for any mobile device providing a unique identification of mobile device the X WAP Profile a Uniform Resource Locator or URL of the Resource Description Framework or RDF for the mobile device wherein the RDF follows the Open Mobile Alliance s layout for device information and the Via Information about the network gateway the mobile device is using to reach the network . 

In a step the installer server software receives the meta data from mobile device . The installer server software can then implement all some or none of the following steps through depending on the particular embodiment service provider and application In a step the installer server software determines from the received meta data whether fundamental requirements are available on mobile device . In some embodiments fundamental requirements include whether Java applications can be run on the mobile device or whether Internet access is available for applications on mobile device . In a step the installer server software parses the mobile device manufacturer and model from the received meta data.

In a step the installer server software parses the application language available from the received meta data. In some embodiments the installer server software parses what version of Java is used MIDP 1.0 or 2.0 from the received meta data. In some embodiments the installer server software parses what Java Application Programming Interfaces or APIs are available on mobile device from the received meta data. In a step the installer server software parses the amount of persistent memory in the mobile device from the received meta data and parses what amount of persistent memory is available for the application to be installed from the received meta data. In some embodiments the persistent memory can be in the form of flash memory Electrically Erasable Programmable Read Only Memory or EEPROM or a hard disk.

In a step the installer server software parses the amount of volatile memory in the mobile device from the received meta data and parses what amount of volatile memory is available for the application to be installed from the received meta data. In some embodiments the volatile memory can be in the form of Static Random Access Memory or SRAM or Dynamic Random Access Memory or DRAM . In a step the installer server software parses the screen size and number of colors of the mobile device from the received meta data. In some embodiments the number of colors can include a simple determination whether the mobile device has a monochrome or color display.

In a step the installer server software parses a list of predetermined features of the mobile device from the received meta data. In some embodiments the features may include a camera a Bluetooth wireless protocol interface or an address book in a specific format. In a step the installer server software parses the available protocols with which to interface the filesystem of the mobile device from the received meta data. In a step the installer server software parses whether SMS Multimedia Messaging Service or MMS and or video capability is available from mobile device from the received meta data.

In a step the installer server software parses the network provider for mobile device from the received meta data. In some embodiments the network provider can include the cellular phone network carrier for mobile device . In a step the installer server software parses the port numbers required for connection to network from the received meta data. In a step the installer server software parses whether the mobile device or network provider has any other application requirements for execution from the received meta data. In some embodiments the application requirements may include whether an application must be digitally signed in order to be executed. In a step the installer server software parses whether features available from mobile device are being blocked by the network provider from the received meta data. In a step the installer server software combines all some or none of the information parsed from steps through and creates a meta data signature based on a proper subset of this parsed information. This meta data signature can be generated regardless of whether the mobile device was previously unknown as it requires no a priori knowledge. In some embodiments the meta data signature have a hierarchical relationship for example a more generic meta data signature would indicate a color display and a more specific meta data signature related to the generic meta data signature would indicate a color display with 256 colors.

In a step the installer server software reviews the meta data signature from step . If it is determined at step that the mobile device is known because it has a corresponding entry for the meta data signature in the device database and if it is determined at step that the device does not support the application then control is transferred to step where the installer server software displays predefined content to the mobile device in lieu of the application executable binary indicating that the mobile device is not supported by the application. Such predefined content can be delivered in a format and protocol appropriate to the mobile device based on the meta data signature.

If it is determined at step that the mobile device is known because it has a corresponding entry for the meta data signature in the device database and if it is determined at step that the device does support the application then control is transferred to step . In a step the installer server software loads a corresponding device template that includes a set of predetermined application components that are currently optimal for that device. A template is used for simplicity as they reduce the computational burden on installer server software by supplying groupings of components that are common and known. In some embodiments the meta data signature mapping to templates is hierarchical for example a meta data signature indicating a color display would share components with a meta data signature indicating a color display with 256 colors. Control is transferred to step .

If it is determined at step that the mobile device is not known because it has no corresponding entry for the meta data signature in the device database then control is transferred to step . The benefit of the proposed system is that because no a priori information is required to set up this system a mobile device can be easily added to the device database without requiring changes to the application logic and this allows for straightforward addition of new devices and even handling of mobile devices not yet entered into the device database but whose meta data signatures match existing mobile devices.

In a step the installer server software adds components and sets parameters based on the parsed meta data and the user identifier in step . The parsed meta data can include meta data not part of the meta data signature. In some embodiments this parsed meta data not part of the meta data signature can include the amount of persistent memory currently available in mobile device . The user identifier can be looked up in the service provider system to set parameters including credentials . The benefit of allowing for credentials to be compiled into the application for a specific mobile device is that this integrated security is harder to circumvent and allows for more complex security protocols. In some embodiments the credentials include a user name and password associated with the service provider account. In some embodiments the credentials include an email address a password associated with an email address and or a mailserver configuration associated with an email address.

In a step the installer server software compiles the custom set of components and parameters identified in steps and into a single application executable. If it was determined from the parsed meta data that the mobile device or network provider requires digitally signed applications the installer server software digitally signs the application. The compilation in this step is specific to the platform for mobile device . In some embodiments if the mobile device platform is a J2ME platform the components would be compiled into a JAD JAR package. In a step the installer server software prepares to send the application executable device to the mobile device using a protocol appropriate to the mobile device as parsed by the meta data.

In the case where the mobile device is unknown In a step no template can be loaded with an unknown mobile device and the generic application boilerplate is not loaded with any components. In a step the application is built using components . In a step the configuration parameters including credentials are added to the application. In a step the components and parameters are compiled into a single executable and signed if necessary.

In the case where the mobile device is supported In a step the template corresponding to the mobile device s meta data signature is loaded into the generic application boilerplate . In a step specific components can be added to the template if necessary. In a step the configuration parameters including credentials are added to the application. In a step the components and parameters are compiled into a single executable and signed if necessary.

The order in which components are added do not matter as consolidation and linking does not occur until the step when compilation occurs. In some environments it is also possible that compilation and linking is a multi step process where some compilation takes place between steps . In these cases the flow is adjusted based on the platform supported by the device.

In a step the installer server software sends the normal version of the application which is not optimized for smaller size. If it is determined at step that installation of the normal version is successful then control is transferred to step . If it is determined at step that installation of the normal version is unsuccessful then control is transferred to step .

In a step the installer server software updates the device database for the mobile device and its meta data signature and recompiles an application executable following step but with a template and or components optimized for a small persistent memory. The installer server software sends this version to the mobile device . In some embodiments the installer server software cannot automatically re install this new version of the application but must send a retry message to the mobile device to start the process from step and in some embodiments this retry message is sent using a customized SMS message.

If it is determined at step that installation of the version sent in step is successful then control is transferred to step . If it is determined at step that installation of the version sent in step is unsuccessful then control is transferred to step .

In a step the installer server software updates the device database for the mobile device and its meta data signature and recompiles an application executable following step but a smaller version with a template and or components optimized for a smaller size with a normal persistent memory. The installer server software sends this version to the mobile device . In some embodiments the installer server software cannot automatically re install this new version of the application but must send a retry message to the mobile device to start the process from step and in some embodiments this retry message is sent using a customized SMS message.

If it is determined at step that installation of the version sent in step is successful then control is transferred to step . If it is determined at step that installation of the version sent in step is unsuccessful then control is transferred to step .

In a step the installer server software updates the device database for the mobile device and its meta data signature and recompiles an application executable following step but with a template and or components optimized for a smaller size with a small persistent memory. The installer server software sends this version to the mobile device . In some embodiments the installer server software cannot automatically re install this new version of the application but must send a retry message to the mobile device to start the process from step and in some embodiments this retry message is sent using a customized SMS message.

If it is determined at step that installation of the version sent in step is successful then control is transferred to step . If it is determined at step that installation of the version sent in step is unsuccessful then control is transferred to step .

If it is determined at step that the installer server software has tried all older versions of the language and or operating environment then control is transferred to step . If it is determined at step that the installer server software has not tried all older versions of the language and or operating environment then control is transferred to step .

In a step the installer server software prepares to repeat installation starting at step but with an older language and or operating environment. In some embodiments Java is the language used and the installer server software would try MIDP 1.0 instead of MIDP 2.0.

In a step the service provider server declares the installation a failure and records the mobile device and its meta data signature in the device database as an unsupported device.

In a step the device database is updated with an installation success for the corresponding mobile device and its meta data signature and the template components and or parameters used in its compilation. In some embodiments a new template may be created in device database based on an installation success.

In a step the installer server software does not receive an initial communication over network when the application first executes indicating a connectivity error when the application installed was executed. In a step the installer server software updates the device database for the mobile device and its meta data signature and recompiles an application executable following step but with a different port number. In some embodiments the installer server software cannot automatically re install this new version of the application but must send a retry message to the mobile device to start the process from step and in some embodiments this retry message is sent using a customized SMS message. If it is determined at step that installation of the version with a different port number is successful then control is transferred to step . If it is determined at step that installation of the version with a different port number is unsuccessful then control is transferred to step . In some embodiments step is repeated with several different tries for port numbers before control is transferred to step .

In a step the installer server software sends a message to the mobile device requesting the user contact their network provider with specific instructions and in some embodiments this message is sent using a customized SMS message. In some embodiments the specific instructions include contacting a cellular phone carrier to activate or purchase access to the Internet for mobile device . In some embodiments the specific instructions include contacting a cellular phone carrier to configure Java applications to use GPRS for mobile device . The final step in the specific instructions is a pointer to start the process from step . If it is determined at step that installation of the application based on following the specific instructions is successful then control is transferred to step . If it is determined at step that installation of the application based on following the specific instructions is unsuccessful then control is transferred to step .

In a step the service provider server declares the installation a failure and records the mobile device and its meta data signature in the device database as an unsupported device.

In a step the device database is updated with an installation success for the corresponding mobile device and its meta data signature and the template components and or parameters used in its compilation. In some embodiments a new template may be created in device database based on an installation success.

In a step a message is sent by the mobile device . If in step the message was that an error occurred control is transferred to step . If in step the message was that the application sent its state control is transferred to step .

In a step the installer server software receives the error message. In a step the installer server software parses the error message. For example an application can start receiving out of memory errors because the mobile device s meta data indicates it has more memory than it actually does. In these cases the installer server software will limit the memory usage for future installations to avoid this problem.

In a step the installer server software receives a message regarding the application state. In a step the installer server software parses the application state message. For example during normal operation it is useful for the application to send information such as the memory profile of the device and the timing of various application operations. This allows for more optimal planning of memory requirements for future installations by installer server software and provides useful benchmarks between devices.

In a step the installer server software creates adapted application compilation instructions based on its parsing of the message. In a step the installer server software updates the device database with the adapted instructions corresponding with the mobile device and its meta data signature.

Although the foregoing embodiments have been described in some detail for purposes of clarity of understanding the invention is not limited to the details provided. There are many alternative ways of implementing the invention. The disclosed embodiments are illustrative and not restrictive.

