---

title: Computer software adaptation method and system
abstract: A method is provided for creating and/or utilizing a computer software application. The method may include structuring the application into a first software layer and a second software layer and defining a plurality of data elements used by the application. The method may also include establishing the first software layer based on the data elements for processing the data elements and creating the second software layer including adaptation data to present the plurality of data elements modified by the adaptation data associated with the data elements. Further, the adaptation data may enable plural presentations of the data elements by the second software layer independently from the first software layer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07992128&OS=07992128&RS=07992128
owner: SAP AG
number: 07992128
owner_city: Walldorf
owner_country: DE
publication_date: 20060127
---
The present invention generally relates to the field of computer application software adaptation and more particularly to methods and systems for adapting software applications with minimum modifications.

Computer software programs or applications are often developed to solve a particular set of problems for potential users of the computer software programs. Because the users of the applications may use the applications to solve different problems or to solve the particular set of problems under specific circumstances which may be different from predicted circumstances during the development of the software applications adaptation of the software applications may be required for the applications to be used by the particular users to address their own needs.

On the other hand the software programs may be revised or upgraded by software developers or vendors. Because adaptations may be made by the users the users may require the revised or upgraded versions of the applications to work with the previously made adaptations with minimum or no effort to modify the software programs.

To address the issues of adaptation certain software vendors provide source code of the software applications along with tools required to manipulate the source code to the users. The users may modify the source code with the tools to make customized software builds and to deploy the adapted software applications. However such approaches may often involve a large effort to use the tools to understand the source code and or to make the adaptations. Further any revision or upgrade made by the software vendors may still require the applications to be modified in order to be used because the previously user made modification may be unworkable with the new changes in the applications made by the software vendors. Moreover software developers generally prefer not to release valuable source code.

Certain other software vendors on the other hand approach these issues by defining explicitly the options that can be adapted within the scope of the applications. These options may be pre thought and implemented as configuration data such as a set of values for a particular variable to address a specific use case. The applications may read the configuration data directly in a specific order or sequence to determine particular options. That is an application and its associated configuration data may be inseparable. Thus these options may not be changed without restarting the application.

In addition such approaches may often involve a large number of configuration tools and specific configurable options. Because pre thought and specific options cannot predict all use cases or circumstances certain adaptations of the applications may still need to be made in the applications themselves. In addition revisions or upgrades to the applications may also change the pre thought options or change the order of data thus causing the previously made adaptations incompatible with the revisions or upgrades. Such incompatibilities may increase significantly in complex applications such as user interface intensive applications.

In certain web based applications some software vendors may use features such as auto fill to eliminate the need for entering repetitive data by the users when filling out certain fields of a form or table. Such features may often provide default values of frequently used information such as names email addresses and street addresses on behave of the users. For example U.S. Patent Application Publication No. 2005 0257148 published on Nov. 17 2005 to Goodman et al. discloses an intelligent auto fill method in which machine learning techniques are used to automatically fill one or more fields across a diverse array of web forms. However such auto fill features may often be limited to providing default values of the frequently used information for the convenience of the users by analyzing the usage history of such information and may often fail to address relationships between the applications and adaptations of the applications.

Methods and systems consistent with certain features of the disclosed embodiments are directed to solving one or more of the problems set forth above.

One aspect of the present invention includes a method for creating a computer software application. The method may include structuring the application into a first software layer and a second software layer and defining a plurality of data elements used by the application. The method may also include establishing the first software layer based on the data elements for processing the plurality of data elements and creating the second software layer. The second software layer may include adaptation data to present the data elements modified by the adaptation data associated with the data elements. Further the adaptation data may enable plural presentations of the data elements by the second software layer independently from the first software layer.

Reference will now be made in detail to exemplary embodiments which are illustrated in the accompanying drawings. Wherever possible the same reference numbers will be used throughout the drawings to refer to the same or like parts.

User may include any actual user or users of application and or any appropriate computer programs or systems that interact with application . When an actual user is involved user may interact with application via various user interfaces UI such as a graphical user interface GUI or any other textual or visual interfaces.

Application may include an application domain and a framework . Application domain may include any appropriate type of functionality of interest under the control of application . In particular application domain may be defined by application programming interfaces APIs features programming languages and or other characteristics of application . Further application domain may include an application state .

Application state may include any state created by application . Application state may be determined by status of a set of data and or data controls of application such as a set of user interface UI elements and or UI controls etc. Operations of application may change values of the set of data and or data controls and may create a corresponding application state based on the values. A certain state may be of interest to user and may be presented to user through framework . On the other hand user may change the state of application e.g. application state through framework .

As shown in framework may be a separate entity from application domain . In other implementations the architecture may be different provided functionality consistent with the invention is implemented. Framework may provide certain data processing functions between application state and user such that adaptation of application may be made independently from application state or application domain . That is adaptation of application by user may be carried out by framework and changes in application domain or application state may have little or no impact on the adaptation made in framework . In one embodiment adaptation of application is implemented without any modification to application domain or application state . In another embodiment minimum changes may be made in application domain or application state such that certain features may be created or modified in application domain and or framework .

The separation between framework and application domain may depend on certain characteristics of application . For example if application is a local application framework and application domain may be implemented as separate software programs that may be executed on a same computer. On the other hand if application is a distributed application framework and application domain may be separate software programs executed on different computers or processors. Although shows that exemplary application includes both application domain and framework other configurations may also be used. For example framework may be created outside or independent from application such that more than one applications may be adapted by framework .

Framework may be associated with application domain or application state via data and controls . Data and controls may include any appropriate type of passive and or active data representations of the set of data and or data controls exchanged between framework and application domain . Passive data may refer to simple data used by software programs or applications and active data may refer to both data and computer programs or tools associated with the data for manipulating the data. For example data and controls may include data representation of UI elements and or UI controls exchanged between framework and application domain . However other data and controls such as XML HTML program code objects etc. may also be used.

Framework may include any appropriate type of software program and or software tool to provide certain treatments and or arrangements of data and controls associated with application state . For example framework may include a rendering control to render the UI elements and or UI controls for application state . Rendering control may for instance draw pixels or generate HTML pages corresponding to data and controls . Other types of rendering however may also be used. Further rendering control may also include software programs control other types of output to user such as text audio visual and or file outputs etc.

Framework may also include an input control to control information selected manipulated and or inputted from user . For example input control may include software programs gathering information provided by user such as information in a field of a form and or information inputted e.g. typed by the user for example in response to a particular output. Input control may provide information via data and controls such that application domain or application state may obtain such information from user .

Framework may also include adaptation data to allow user to make certain adaptations to framework which may be considered an adaptation of application . Adaptation data may refer to any data used to adapt a software application. In particular in UI related applications adaptation data may refer to any data related to changing the characteristics of UI elements and or controls of the UI related applications.

Adaptation data may include any appropriate type of information that may be provided to framework particularly to rendering control and or input control such that framework may behave in a way that meets a personalized requirement from user i.e. personalization data . For example if application uses UI elements and or UI controls to interact with user adaptation data may include information to personalize certain UI control properties. Non limiting examples of such control properties may include replacing UI controls using adequate substitutes showing and hiding UI controls replacing icons other objects and logos etc. moving UI controls changing one or more sequences of UI controls adding UI controls e.g. a link to a web page changing UI control state from enabled to disabled or from visible to invisible etc. applying default values for input enabled UI controls marking UI controls as required or mandatory changing labels of fields of UI controls changing number and sequences of columns in a table or list of UI controls changing the width of a column in a table or list of UI controls changing the heading of columns in a table or list of UI controls changing the order of tab items in a tab strip of UI controls disabling tab items of UI controls adding new tab items to a tab strip of UI controls change of terminologies of UI controls etc.

Adaptation data may be generated by any appropriate methods. For example adaptation data may be generated by user manually or via certain tools which may be included in or associated with framework . Adaptation data may also be generated automatically by other software programs. After adaptation data is generated rendering control may use adaptation data to render data and controls from application state to present the data to user . On the other hand input control may also use adaptation data to provide data from user to application state through data and controls .

The creation adaptations and or operations of application may be carried out by one or more computer systems. shows a functional block diagram of an exemplary computer system that may be used to perform the creation adaptations and or operations of application .

As shown in computer system may include a processor a random access memory RAM a read only memory ROM a console an input device a network interface a database and a storage . It is understood that the type and number of listed devices are exemplary only and not intended to be limiting. The number of listed devices may be changed and other devices may be added.

Processor may include any appropriate type of general purpose microprocessor digital signal processor or microcontroller. Processor may execute sequences of computer program instructions to perform various processes as explained above. Processor may be coupled to or access other devices such as RAM ROM console input device network interface database and or storage to complete executions of computer program instructions. The computer program instructions may be loaded into RAM for execution by processor from read only memory ROM or from storage . Storage may include any appropriate type of mass storage provided to store any type of information that processor may need to perform the processes. For example storage may include one or more hard disk devices optical disk devices or other storage devices to provide storage space.

Console may provide a graphic user interface GUI or other user interfaces to display information to users of computer system . Console may include any appropriate type of computer display device or computer monitor. Input device may be provided for users to input information into computer system . Input device may include a keyboard a mouse or other optical or wireless computer input device etc. Further network interface may provide communication connections such that computer system may be accessed remotely through computer networks via various communication protocols such as transmission control protocol internet protocol TCP IP hyper text transfer protocol HTTP etc.

Database may contain design parameters model data and or any information related to software applications. Database may include any type of commercial or customized database. Database may also include analysis tools for analyzing the information in the database.

Processor may execute certain software programs to create application and or adaptations of application and to execute application to perform certain functions provided by application . illustrates a flowchart of an exemplary application developing process consistent with certain disclosed embodiments. For illustrative purposes an exemplary address table application of is discussed along with the process illustrated in . show certain user interfaces of an address table application where user may be presented address data and may input certain address data.

As shown in processor may structure an computer software application under development into an application layer e.g. application domain application state etc. and an adaptation layer e.g. framework etc. step . Other structures however may also be used. For example processor may couple more than one application layers with one adaptation layer.

Processor may structure an application layer and an adaptation layer based on data elements functionalities of the application and or predetermined standards such as distributed computing standards etc. step . In one implementation the application layer corresponds to application domain and the adaptation layer corresponds to framework of . The application layer and the adaptation layer may share certain data elements e.g. data and controls of the application.

Processor may define all the data elements of application step . All data elements may refer to any possible data elements that may be shared or exchanged between application domain and framework . For example address table application in may include data elements such as first name last name city street country and save . User may enter information in each field of the address table and selects save to process the information entered. Processor may define the data elements including all the fields or elements e.g. first name last name city street country and save . Processor may define the data elements either automatically or under the instructions of a software developer.

After defining all the data elements step processor may establish an application layer e.g. application domain based on the data elements step . In the example of address table application processor may establish an application layer to process or handle the address information represented by all the data elements e.g. first name last name city street country and save . That is processor may establish application and application state by using available APIs and or other programming resources to process the address information such as to store to edit to parse and to analyze etc. the address information.

Processor may also create an adaptation layer e.g. framework to interact with user regarding the data elements step . That is processor may create framework e.g. rendering control and input control etc. using programming resources. Processor may implement framework in various ways. For example processor may implement rendering control as rendering adapters and rendering manager software programs. Any appropriate type of computer programming language may be used.

Further processor may determine data and controls representing all the data elements step . For example processor may determine first name last name city street and country as respective data fields of a table and may determine save as a button. The determined data and controls may be incorporated into application domain and framework in different data representations because application domain and framework may use different data representation methods. For example the data elements may be implemented as different structures and or classes in application domain and framework respectively. The structures and or class may carry all data fields such as all data fields of the address table.

Processor may also generate adaptation data and or adaptation tools for the adaptation layer e.g. framework step . In the example of address table application processor may generate adaptation data for each UI element and or control. Because each of UI elements and or UI controls may have properties such as visible enabled and a value etc. processor may set proper values or characteristics of the UI elements and or controls. Tools such as editors menus runtime pop up windows and or other editing or configuring tools may be included in the adaptation layer. In one embodiment tools may also be provided for each of the UI elements and or UI controls.

The values or characteristics may be provided to rendering control and or input control by means of data binding or by certain application code that read the values or characteristics to rendering control and or input control . The rendered data may be presented to user as shown in . For example address table application may be used by a customer that only operates in a certain country such as U.S. Thus the customer may want to adapt address application such that a default of US may be provided by address application and the customer does need to enter this information.

The customer may adapt address table application by assigning a value e.g. US to country . The assigning default value of US may be included in adaptation data . When rendering control renders the address table US may be provided to rendering control and may be presented to the customer automatically. On the other hand when the customer selects save even if the customer leave country blank input control may be provided with US regarding country . Thus application domain may still obtain US as the value of country without any modification. That is the input format to address table application is consistent while the presentation in both rendering and input of the address information may be different or in more than one formats.

In another example illustrated in country may be set to invisible so that the customer does not need to consider the field. When rendering control renders the address table rendering control may determine that country is invisible and should not be presented to the customer. However when the customer selects save adaptation data may still assign the value e.g. US to country even if the customer is not presented with country . Therefore input control may look up the adaptation data and still provide a default value of US regarding country to application domain . Thus application domain may still obtain US as the value of country without any modification to application domain or application state to deal with any missing data fields e.g. country . In this manner adaptation data has the effect of reconfiguring or specially configuring the display output to the user as oppose to simply inputting a default value in a display element.

In another example illustrated in address table application may be used by a customer that operates in a certain country where a different sequence for displaying first name and last name is used. The customer may adapt address table application by changing the sequence of first name and last name in adaptation data . When rendering control renders the address table rendering control may determine that first name and last name are exchanged and may present first name and last name in the exchanged order or format. On the other hand when the customer enters information in first name and last name and selects save input control may determine that first name and last name are exchanged and may change the sequence back to the original settings. Thus application domain may still obtain first name and last name in the same sequence the same consistent format without any modification to application domain or application state .

Returning to after adaptation data is generated step processor may integrate the application layer e.g. application domain application state etc. the adaptation layer e.g. framework and or the adaptation data into a complete application e.g. application step .

Once application is created user may use application and may also make adaptations of application . illustrates a flowchart of an exemplary application adaptation and operation process performed by processor under instructions of user and or application .

As shown in processor may initially set values of adaptation data to meet personalized requirements of user step . The values may be set offline i.e. statically or at runtime i.e. dynamically as well. If adaptation data is not available or created processor may also create adaptation data. As explained above each UI element and or UI control may be adapted separately. Each UI element and or control may associate a tool provided by framework that allows user to set and maintain adaptation data . Other configurations however may also be used.

Processor or user through processor may set values of adaptation data in different ways based on the type and characteristic of a particular UI element and or UI control and corresponding tools for adaptation. For example certain UI elements or controls may have associated editors to change values of adaptation data . Certain other UI elements or controls such as changing the sequence of columns in a table may be adapted by dragging a column to a different location in the table using input device e.g. a mouse etc. . Further certain other UI elements or controls such as input fields may be adapted by providing a generic context menu associated with each input field that allows setting desired values. Certain other UI elements or controls may also be adapted by using modal popup like windows for user to enter values. Other tools and methods may also be used.

After adaptation data is set step processor may start or execute application by starting or executing the application layer e.g. application domain application state etc. step and starting or executing the adaptation layer e.g. framework rendering control input control etc. step . As explained above the application layer and the adaptation layer may be executed on a same computer as separate programs or may be executed on different computers or different processors. Further if data and controls include active data i.e. a combination of data and associated software programs processor may also start the associated software programs of data and controls . For example in a distributed application certain data communication protocols and data representation protocols such as XML CORBA RPC RMI etc. may also be started.

Once application is started processor may perform interactions between application and user step . For example results from application may be presented to user and user may enter certain information to be processed by application . The presentation of the adaptation layer may be different because the information may be modified by adaptation data . User may choose or personalize a particular presentation by setting proper corresponding adaptation data . The input from user may be provided to application e.g. application state etc. in a consistent format because different input formats may be adjusted or modified according to adaptation data such that input information to application may be maintained in same format e.g. all fields of a data element may be provided to application . Further processor may determine whether user changes adaptation data step . If adaptation data is changed step yes processor may set adaptation data dynamically during the run time step . If adaptation data is not changed step no or after the adaptation data is set the process may continue.

Processor may determine whether application ends step . If application does not end step no processor may continue performing interactions between application and user starting at step . On the other hand if application ends step yes processor may store and maintain adaptation data step . As explained adaptation data may be set or maintained per UI control processor may set or store either simply name value pairs on the level of adapted UI element and or control properties or may have a specific schema for each UI element and or control class. Processor may store adaptation data in any appropriate type of storage such as data base for the purpose of data persistency separately from data of application . After adaptation data is stored and or maintained processor may complete the operation process.

Accordingly software developer can configure software applications with layers consistent with the principle of the present invention. Such a configuration permits users to adapt the software applications in a way that would reduce the need for making further adaptations when the developer releases revisions or upgrade to the software applications.

Other embodiments features aspects and principles of the disclosed exemplary methods and systems will be apparent to those skilled in the art and may be implemented in various environments and systems. For example third party software applications may be adapted by implementing a framework consistent with the present invention without changing the third party software applications. In another example a framework consistent the present invention may be implemented as an independent application that may be used to dynamically interact with other software applications to handle certain adaptation functionalities.

