---

title: Efficient isolation of backup versions of data objects affected by malicious software
abstract: A system for efficient isolation of backup versions of data objects affected by malicious software includes one or more processors and a memory coupled to the processors. The memory comprises program instructions executable by the processors to implement a backup manager configured to receive an indication that a data object is infected by malicious software. In response to the indication, the backup manager is configured to identify a particular backup version of the data object to be excluded from a data set to be used for a restore operation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08495037&OS=08495037&RS=08495037
owner: Symantec Operating Corporation
number: 08495037
owner_city: Mountain View
owner_country: US
publication_date: 20060221
---
This invention relates to computer systems and more particularly to secure backup and restore techniques used in computer systems.

Security of information technology IT assets is an ever growing concern in today s enterprises. As more and more of enterprise computing resources are linked directly and or indirectly to external networks such as the Internet the likelihood of various types of network intrusions and infections by malicious software such as viruses Trojan horses worms etc. is only expected to increase. Although a number of different techniques to enhance the security of enterprise computing environments have been implemented over the years such as various types of hardware and software firewalls virus detection tools and the like malicious software attacks continue to succeed at least temporarily from time to time often resulting in large productivity losses and or data loss. For example even though virus detection tools are frequently updated to recognize the latest viruses that have been identified new as yet undetected viruses are just as quickly being transmitted around the Internet by unsuspecting e mail users file sharers and other users. By the time a solution for a particular virus is developed and widely deployed it is often the case that the virus has already infected hundreds or even thousands of systems around the world.

In some scenarios for example where the computer systems at a particular enterprise are regularly backed up an infected version of a particular file or other data object may be inadvertently backed up. At the time the backup version of the file is created for example during a daily scheduled backup the existence of the virus may not have been detected. The fact that the file is infected may not be detected even if a full virus scan of the data set being backed up is performed since the virus detection tool used may not have been updated to recognize the virus.

For reasons such as those described above it is often possible that by the time a live or online version of a particular file is found to be infected by malicious software an infected backup version of the file may already have been created. The live version of the file may be quarantined and or deleted when it is found to be infected which may require a restoration of the file from a backup version. However if the restore operation happens to use an infected backup version the malicious software infection may be reintroduced into the live data of the IT environment.

Various embodiments of systems and methods for efficient isolation of backup versions of data objects affected by malicious software are disclosed. According to one embodiment a system includes one or more processors and a memory coupled to the processors. The memory comprises program instructions executable by the processors to implement a backup manager configured to receive an indication that a data object e.g. a live or online data object that is accessible to users and applications without requiring interaction with the backup manager is infected by malicious software. In response to the indication the backup manager is configured to identify a particular backup version of the data object to be excluded from a data set to be used for a restore operation. For example in one embodiment where multiple backup versions of a given data object may have been created over time the backup manager may be configured to perform an analysis to determine whether any of the backup versions are also infected or are highly likely to be infected e.g. if a backup version was created after the data object was last modified the backup version may be inferred to be infected . If a backup version is found to be suspect i.e. if it is determined that the backup version is infected or has a high probability of being infected in one embodiment the backup manager may be configured to generate metadata e.g. metadata stored in a backup catalog indicating that the backup version is not to be used for restores.

In some embodiments in response to the indication that a data object is infected by malicious software the backup manager may be configured to determine whether a backup version differs from the infected data object using an efficient difference analysis without for example actually scanning the backup version for malicious software and to use the results of the analysis to determine whether to prevent restores from the backup version. For example the backup manager may be configured to compare values of one or more attributes such as last modification times file sizes etc. of the infected object with the values of corresponding attributes of the backup version if the attribute values are identical the backup manager may infer that the backup version is highly likely to be infected by the same malicious software and may exclude the backup version from restores. In other embodiments the difference analysis may include a comparison of respective checksums and or signatures generated from the backup version and the infected data object and if the checksums or signatures for a backup version and the infected data object are identical the backup version may be excluded from restore data sets.

A number of different techniques may be used to provide the indication to the backup manager that a data object is infected by malicious software in different embodiments. For example in one embodiment the indication may be sent by a malicious software detector directly to the backup manager e.g. using a notification application programming interface API supported by the backup manager when the infection is detected. In another embodiment the backup manager may be configured to directly or indirectly query a malicious software detector to identify infected objects e.g. by inspecting a list of infected data objects that have been quarantined by the malicious software detector or by using an API supported by the malicious software detector. In some embodiments the indication that a data object is infected may include return values or error codes received by the backup manager in response to I O requests. In one such embodiment for example in response to receiving a generic error code e.g. an error code that does not specifically indicate that a malicious software infection has been detected in response to an I O request the backup manager may be configured to perform additional operations to determine additional information such as a specific source or cause of the error and a result of the additional operations may indicate that the data object and one or more backup versions of the data object are infected. In another embodiment specific error codes that indicate infection by malicious software may be returned. The return values and or error codes may be provided to the backup manager in response to read requests and or write requests or in various embodiments. For example in one embodiment an error code may be returned when the backup manager attempts to read an infected data object to create a backup version and in another embodiment an error code may be returned when the backup manager attempts to write a copy of an existing backup version of a data object into a live data set during a restore.

In some embodiments during restore operations for data objects that have been infected by malicious software the backup manager may be configured to automatically search for uninfected backup versions from which the data objects should be restored. Users may be notified when a suspect or infected backup version of a data object is encountered during a restore operation in one embodiment and permission to search for and restore from an uninfected version may be requested from the users.

While the invention is susceptible to various modifications and alternative forms specific embodiments are shown by way of example in the drawings and are herein described in detail. It should be understood however that drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed but on the contrary the invention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.

At a given point in time one or more data objects of the live data set may include updates that have not been yet been backed up. Each backup data set may include respective versions of one or more objects of the live data set e.g. corresponding to the current state of the live data set at the time the backup data set was created by backup manager . Not all backup data sets may include backup versions corresponding to each of the data objects currently present in live data set . In addition backup versions in different backup sets may correspond to the same data object e.g. if a particular data object A is updated on a Monday and then on a Tuesday of a particular week and backups of the live data set are created every night one backup version A of the data object A may be created and stored in a backup data set A on Monday night and another backup version B not shown in may be created and stored in a backup data set B also not shown in created on Tuesday night.

In response to a restore operation requested for one or more data objects e.g. in the event that the live versions of the data objects are lost damaged or corrupted backup manager may be configured to identify a set of backup versions from which the data objects are to be restored and restore the data objects using the identified set of backup versions. The set of backup versions from which the data objects are restored may be referred to herein as a restore data set or a data set used for the restore operation . It is noted that the set of backup versions included in a restore data set may not all have been created by the backup manager in a single backup operation and that backup versions from two or more different backup data sets may be used for a single restore operation. The backup manager may maintain configuration information e.g. information indicating which backup versions correspond to a given data object etc. in a backup catalog or backup database in some embodiments.

The backup manager may be configured to receive indications that one or more data objects have been infected by malicious software such as a virus Trojan horse worm spyware adware etc. from a variety of sources in different embodiments.

The term malicious software as used herein refers generally to any software that is intended to damage or disrupt the ability of a computer system to perform functions desired by the owners or managers of the computer system software that is intended to utilize resources of the computer system in a manner that is not desired by the owners or managers and or software intended to obtain information from the computer system without the consent of the owners or managers. In the depicted embodiment a malicious software detector may be configured to detect whether one or more data objects in the live data set are infected by malicious software and provide an indication to anyone who reads the data objects including the backup manager if an infection is detected. In response to receiving the indication the backup manager may be configured to determine whether one or more backup versions of the infected data object are to be excluded from data sets to be used for restore operations. In some embodiments the backup manager may be configured to perform analysis on selected backup versions to determine which if any of the backup versions are to be excluded from restores as described below in further detail.

Backup manager may thus be able to efficiently identify those specific backup versions that if used for restore operations may result in malicious software infections being reintroduced into the live data set and thus prevent such potentially damaging restore operations. Furthermore the security of restore operations may be enhanced using the techniques described above without requiring malicious software scans specifically for backup operations e.g. without scanning the set of data objects that are to be included in a backup data set or the backup versions after they have been generated. In addition the operations of the backup manager may be performed in some embodiments in a vendor neutral manner with respect to the malicious software detector that is any malicious software detection tool or mechanism may be employed without requiring an IT administrator to purchase or license a specific malicious software detection tool . Since many IT environments often have pre deployed malicious software detection tools a technique such as the one described above that avoids tight coupling of backup manager to a specific vendor or supplier of malicious software detection technology may help to reduce overall product licensing costs.

The backup manager may receive an indication that a data object for which backup versions may have been created earlier is infected by malicious software block . In some embodiments the indication may be sent by a malicious software detection tool as soon as the infection is discovered. In other embodiments there may be a delay between the detection of the infection and the indication being provided to the backup manager for example the backup manager may be configured to periodically inspect a list of infected objects e.g. objects quarantined by a virus detector tool to identify data objects that have been infected or the indication may be provided to the backup manager in a return value from a read or write request from the backup manager during a backup or restore operation.

In response to the indication the backup manager may be configured to identify one or more backup versions of the infected data object block . For example in response to an indication that a particular data object B has been infected configuration information maintained by the backup manager may allow it to generate a list of all the previously backed up versions e.g. including backup version K in of that data object B within various backup data sets from which restores are still permitted. The set of backup versions of the infected data object may then be arranged or sorted in some order e.g. in reverse chronological order based on the times at which they were created in some embodiments for analysis. In other embodiments the backup versions may be analyzed in the order in which they are found by the backup manager without an additional sorting step. During a given iteration of the analysis the backup manager may select the next backup version to be examined block and determine whether that backup version is suitable for restoration or not block . A number of different techniques may be used to determine whether the backup version is suitable for restoration in various embodiments as described below in further detail. In one embodiment for example one or more attributes of the backup version such as last modification time and or object size may be compared to corresponding attributes of the infected data object to make a determination whether the backup version differs from the infected version and the backup version may be excluded from restore operations if the attributes are identical.

If the backup version being analyzed is found to be unsuitable for restores the backup manager may mark it as such e.g. by generating metadata that indicates that the backup version is suspect or infected and is not to be restored block and storing the metadata in a backup database or backup catalog. The backup manager may be configured to implement a backup quarantine technique to mark the suspect or infected backup versions in some embodiments analogous to the quarantine techniques used by malicious software detectors such as virus scanners. In some embodiments the suspect or infected backup version i.e. the backup version found unsuitable for restores may be logically and or physically removed from the corresponding backup data set or moved to a special location designated for quarantined backup versions. If more backup versions of the infected data object remain to be analyzed as detected in block the operations corresponding to blocks and may be repeated until all backup versions that could potentially have been used for restoration have been analyzed and the analysis is complete block .

It is noted that in some embodiments the operations of the backup manager in response to the indication of an infection may vary in some respects from those illustrated in or may be performed in a different order than the order shown. In one embodiment where the analysis is performed in reverse chronological order for example as soon as a particular backup version is found to differ from an infected data object or from an infected backup version further analysis of earlier versions may be abandoned. For example in a scenario where three backup versions X Y and Z of a data object that has been found to be infected were created at respective times T T a and T a b the backup manager may be configured to analyze Z before Y and Y before X. If the analysis of backup version Z indicates that backup version Z differs from an infected version analysis of backup versions Y and X which were created earlier may not be required based on an inference by the backup manager that versions Y and X must also differ from the infected version. In another embodiment backup manager may be configured to use multiple threads of execution to perform the analysis so that one or more backup versions may be analyzed concurrently instead of being analyzed one by one. In one implementation instead of immediately analyzing the backup versions backup manager may be configured to mark all the backup versions of an infected data object as being suspect and the analysis may be performed asynchronously with respect to the indication that the data object is infected. For example in one implementation all backup versions of an infected data object may be placed on a to be analyzed queue when the backup manager receives the indication of the infection and the backup manager may be configured to examine as a background task when no high priority backups or restores are in progress which if any of the backup versions on the to be analyzed queue are to be excluded from restores. As described below in further detail in some embodiments just in time analysis of backup versions may be performed e.g. the fact that a particular backup version of a data object is infected may be determined during restore operations and if such an infection is found the particular backup version and or any other infected backup versions of the data object may be excluded from the restore.

In the depicted embodiment if the attribute values are identical the backup manager may be configurable to perform an additional check based on the actual contents of the data object and the backup version to determine whether the backup version should be excluded from restore operations. If such content based checking is to be performed as determined in block the backup manager may be configured to compare a signature e.g. a result of a mathematical function on the bytes of the object of the data object with the signature of the backup version . If the signature is identical as determined in block of the backup version may be inferred to have a very high probability of being infected block and may therefore be excluded from restore data sets. Similarly if the attribute values are identical and the backup manager is not configured to perform additional content based analysis as also determined in block the backup version may be excluded from restore operations. Any of a variety of different signature generation schemes such as various types of checksums or the MD5 algorithm may be employed in different embodiments. In some embodiments the backup manager may be configured to generate the signatures for the backup versions and or the data objects on demand i.e. when needed for the analysis illustrated in in other embodiments the backup manager may be configured to generate and store signatures in advance for at least some backup versions in preparation for possible difference analysis. In some embodiments content based techniques such as checksums signatures may be used without using attribute based techniques.

By using attribute based analysis and or signature based analysis as described above in some embodiments the amount of processing required to determine whether the backup version should or should not be used for restore may be reduced e.g. compared to the analysis and processing that may be required to scan the backup version. In some embodiments the backup manager may allow users to specify which specific techniques should be used to analyze the backup versions e.g. an administrator may use a configuration parameter to indicate a particular signature checksum algorithm is to be used. In one embodiment different analysis algorithms may be specified for different subsets of the live data set e.g. an administrator may specify that for any infected files in a directory D a checksum based analysis is required while for files in a directory D an attribute based analysis is sufficient. In one implementation the analysis of a backup version may be performed by invoking a malicious software detector e.g. instead of or in addition to relying on attribute analysis or signature analysis an actual scan of the backup version of the infected data object may be performed.

In some embodiments in response to a restore request the backup manager may be configured to identify a suitable uninfected backup version for a particular data object to be restored. is a flow diagram illustrating aspects of the operation of a backup manager during a restore operation in one such embodiment. The backup manager may receive a restore request block and identify a set of backup versions corresponding to the data objects to be restored block . For example the restore request may indicate that all the files in a particular directory or file system are to be restored using the latest available backup versions and the backup manager may assemble a list of the latest backup versions corresponding to the specified directory or file system. The backup manager may then be configured to restore each of the data objects for which an uninfected backup version is available. To perform the restoration the backup manager may be configured to examine each of the identified backup versions to determine whether it is suitable for restoration. In some embodiments the backup manager may have previously marked one or more of the backup versions as being unsuitable for restoration while in other embodiments the determination of whether a given backup version should or should not be restored may be made after the restore request is received.

As shown in block during iterative analysis of the set of backup versions from which restoration may potentially be performed the backup manager may examine the next backup version. If the backup version is found to be unsuitable for restoration as detected in block e.g. if it was previously marked as being suspect or infected or if a return value for an I O operation on the backup version indicates that it corresponds to an infected data object the backup manager may be configured to search for an uninfected backup version for the corresponding data object . If an uninfected backup version is found e.g. in a different backup data set than the one that contained the suspect or infected backup version as detected in block the backup manager may be configured to restore the data object from the uninfected backup version block . In some embodiments the backup manager may optionally inform the requester e.g. the user or application that requested the restore that an infected backup version was excluded from the restore and a different backup version which may have been backed up at an earlier point in time than the infected backup version was used for the restore.

In one embodiment if the backup manager finds that the backup version being examined is infected or suspect the backup manager may be configured to obtain explicit permission from the requester before restoring a different backup version e.g. a requesting user may be prompted for permission using a message such as Backup version of file C xyz a.txt dated Jan. 5 2006 is suspected to be infected by a virus. If restore from a backup version dated Jan. 4 2006 is acceptable please click on the Use latest uninfected version button. In some embodiments the backup manager may be configured to provide a configuration parameter set e.g. using a graphical interface a parameter file an environment variable or a command line option allowing users to indicate that the backup manager is permitted to restore from the latest available uninfected backup version without asking for explicit permission when an infected or suspect backup version is found.

If no clean backup version i.e. a version that is not infected and not suspected of being infected is available for a given data object as also detected in block the backup manager may be configured to notify the requesting user or application that no restorable backup version is available block . If the backup version being examined is found to be suitable for restore in operations corresponding to block the corresponding data object may be restored from the backup version block . If additional backup versions of the identified set of backup versions remain as detected in block the operations corresponding to blocks and or may be repeated until the entire set of backup versions corresponding to the restore request have been examined and the restore operation is completed block .

In some embodiments the indication that a given data object or one of its backup versions is infected may be provided to the backup manager in the form of return values or error codes when the backup manager attempts I O operations associated with the data object. is a flow diagram illustrating aspects of the operation of a backup manager in an embodiment where error codes from read operations may indicate infection by malicious software and is a flow diagram illustrating aspects of the operation of a backup manager in an embodiment in which error codes from write operations may indicate infection by malicious software. As shown in block of the backup manager may be configured to issue a read request e.g. a read system call on a particular data object e.g. as part of a requested backup. If the read request succeeds without an error i.e. if no error code is returned as detected in block the status of backup versions of the data object is unaffected block . If the read request results in an error indication as also detected in block however the backup manager may be configured to perform additional operations that may affect the status of backup versions of the data object . In some embodiments specific error messages that clearly indicate that the data object is infected may be provided e.g. an error code such as VIRUS INFECTION READ ERROR may immediately indicate to the backup manager that the data object is infected. If the error code specifies that the data object is infected as detected in block the backup manager may be configured to exclude any suspect or infected backup versions of the data object from restores block e.g. in some embodiments the backup manager may use the difference analysis techniques described earlier in conjunction with to identify suspect or infected backup versions. In some embodiments however a more generic error code e.g. ACCESS DENIED or simply READ ERROR may be returned which does not specifically indicate that the data object is infected by malicious software. If a generic error code is received as also detected in block the backup manager may be configured to perform one or more additional operations block to determine to determine whether malicious software infection caused the error or more generally to identify the cause or source of the error. If a result of the additional operations indicates that the data object is indeed infected as determined in block the backup manager may also exclude suspect infected backup versions of the data object from restores block . If the additional operations do not indicate that the data object is infected the status of backup versions of the data object may be left unchanged block . A variety of different additional operations corresponding to block may be performed by the backup manager in various embodiments when a generic error message is received for example the backup manager may inspect a set of data objects known to have been quarantined in one embodiment or the backup manager may query a malicious software detector using an API supported by the malicious software detector to determine whether the data object on which the read is requested is infected.

In addition to backup software memory and or storage devices may also store operating systems software and or software for various applications including malicious software detector in various embodiments. In some embodiments backup software may be included within an operating system a storage management software product or another software package while in other embodiments backup software may be packaged as a standalone product. In one embodiment backup software and malicious software detector may be combined into a single software package or product. In some embodiments the component modules of backup software may be distributed across multiple hosts or may be replicated at a plurality of hosts. In one embodiment part or all of the functionality of a backup manager may be implemented via one or more hardware devices e.g. via one or more Field Programmable Gate Array FPGA devices or in firmware.

Although the embodiments above have been described in considerable detail numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications.

