---

title: Inferring data types from compiler call site
abstract: Disclosed herein are methods and compilers for compiling code. The methods and compilers disclosed can compile a callable compilable unit of code free of declarations and assertions that identify attributes of arguments expressed therein. The attributes of the arguments in the callable compilable unit of code are inferred by the compilers and methods disclosed herein from information provided by a call site that calls a compiler to compile the callable compilable unit of code.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08843906&OS=08843906&RS=08843906
owner: The MathWorks, Inc.
number: 08843906
owner_city: Natick
owner_country: US
publication_date: 20061016
---
A compiler is a computer program or set of programs that translates one computer language i.e. source code into another computer language i.e. object code or target language . Commonly the output of the compiler has a form suitable for processing by other programs e.g. a linker but it may be a human readable text file.

Computer languages often contain constructs that take inputs and perform some computation based on those inputs. A common example of such a construct is a function. The type of inputs to a function is usually constrained by the language or the environment in which it is run. For example some functions may work with scalar and matrix inputs while other functions may only work with scalar inputs.

As such the compiler needs to know the attributes of each function argument e.g. data type array size and the like in order to compile the source code into the target language. Conventionally declarations or assertions in the source code are used to identify the attributes of the function arguments in the source code. In this manner by parsing the source code the compiler is able to identify the attributes of each function argument in the source code. In turn the compiler outputs the target language.

A conventional compiler and a conventional methodology of compiling code often rely on the source code to provide the attributes of each function argument in the source code. That is declarations and assertions in the source code determine and provide the conventional compiler with the attributes of each function argument. The source code is often partitioned for example into an interface and an algorithmic part. For C code the algorithms are often specified in a .c file whereas the interface information is often specified in an include a .h file. Such a collection of files is often referred to as source code. In other words the mechanism calling the conventional compiler to compile source code into a target language does not determine the attributes of one or more function arguments expressed in the source code rather the source code does for the conventional compiler.

Exemplary embodiments described herein provide compilers and methods of compiling source code that allow a compiler to determine the attributes of an argument of a callable compilable unit of code from a request or call to the compiler. That is a compiler can infer an attribute of the argument from information passed into the compiler by a call to the compiler. Thus the callable compilable unit of code can be free of declarations and assertions that would provide the compiler with attribute information of an argument expressed in the callable compilable unit of code expressed in the source code. In other words the site of the call to the compiler identifies the attributes of the argument and not the source code.

A compiler as disclosed herein can infer attributes of a callable compilable unit of code from examples assertions objects and the like that are passed into the compiler from a call site such as a Command Line Interface CLI or a call from an operating system or a call from code in a programming environment. This allows the compiler to compile a polymorphic function expressed in a source code and output a reduced polymorphic function expressed in the target language. The polymorphic function by definition includes at least one dynamically typed argument. After compilation using the supplied information at least one dynamic attribute of the at least one dynamically typed argument becomes a static attribute. That is the function in the target code has reduced polymorphism relative to the source function. For example the function with the reduced polymorphism can include at least one hybrid typed argument that has a static data type and a vector size that remains variable at run time.

As used herein a callable compilable unit of code is considered polymorphic in attribute if it accepts inputs with different values of that attribute. Some example attributes include size number of elements in an array type what does the input represent and complexity is the input complex or not . Nonetheless an attribute can include any aspect of the input including its value. When the source language is polymorphic in an attribute exemplary embodiments described herein disclose compiler methods that allow a user to constrain the attribute possibilities so that more efficient target code is generated.

The portability of source code between different programming environments can be improved by allowing the source code to be free of declarations and assertions identifying attributes of a callable compilable unit of code.

In one embodiment a method of compiling code is disclosed. The method includes the steps of defining a callable compilable unit of code in source code and passing information about an attribute of an argument into a compiler from outside of the callable compilable unit of code. That is the source code is free of the information about the attribute passed into the compiler. In turn at compile time the compiler infers the attribute of the argument in the callable compilable unit of code from the passed information and compiles the unit of code into a target language.

The method can include other steps including the step of compiling the callable compilable unit of code into the target language.

Another step that the method can include is the step of instructing the compiler to handle the argument as a constant. As such after compiling the callable compilable unit of code the target language is free of an argument corresponding to the argument in the callable compilable unit of code that was handled as a constant. Additionally the method can include the step of passing one or more parameters to the compiler to identify a value of the constant.

The method can include the steps of defining an attribute class for the argument and instantiating an object of the attribute class. In turn the method can include the step of passing the object to the compiler to provide the compiler with one or more properties of the argument.

In this embodiment the callable compilable unit of code is free of any of declarations or assertions representative of the attribute of the argument.

The method can include the step of instructing the compiler to handle the argument as a dynamically sized argument.

The compiler performing the method can infer the attribute of the argument from the information passed into the compiler.

The information about the attribute of the argument includes a representation of the attribute of the argument. The information about the attribute of the argument includes an instance of an object identifying the attribute of the argument. The information about the attribute of the argument includes an assertion. The information about the attribute of the argument includes an attribute representative of the datatype of the argument.

In another embodiment a computer readable medium holding computer executable instructions for performing a method of compiling code is disclosed. The instructions embodied on the medium include calling a compiler to pass information representative of an attribute of an argument expressed in a callable compilable unit of code into the compiler and passing the information to the compiler. That is the callable compilable unit of code and the source code is free of the information about the attribute passed into the compiler. In turn the compiler infers the attributes of the argument from the passed information and can compile the callable compilable unit of code into a target language.

The computer readable medium can include the instructions for compiling the callable compilable unit of code into the target language. Additionally the computer readable medium can include the instructions for instructing the compiler to handle the argument as a constant. As such after compiling the callable compilable unit of code the target language is free of an argument corresponding to the function argument in the callable compilable unit of code handled as a constant. The computer readable medium can include the instructions for passing one or more parameters to the compiler to identify a value of the constant.

Further the computer readable medium can include the instructions for instructing the compiler to get the argument from an object of an attribute class. The computer readable medium can include the instruction of instantiating an object of the attribute class. The computer readable medium can include the instruction for passing the object to the compiler to provide the compiler with one or more properties of the argument.

In one aspect the source code is free of any of declarations or assertions representative of the attribute of the argument.

The computer readable medium can include the instructions for instructing the compiler to handle the argument as a dynamically sized argument.

The information about the attribute of the argument includes a representation of the attribute of the argument. The information about the attribute of the argument includes an instance of an object identifying the attribute of the argument. The information about the attribute of the argument includes an assertion. The information about the attribute of the argument includes an attribute representative of the datatype of the argument.

In one embodiment a method of compiling callable compilable unit of code is disclosed. The method includes the steps of parsing a polymorphic function written in a callable compilable unit of code and compiling the callable compilable unit of code to translate the polymorphic function into a reduced polymorphic function in a target language. The polymorphic function has one or more arguments that are dynamically typed however the reduced polymorphic function has at least one argument that includes one or more properties of a static attribute and one or more properties of a dynamic attribute.

The method can include the steps of calling the compiler and passing to the compiler an example of each of the one or more arguments. The compiler infers the attribute for the argument from the example.

The method can include the steps of calling the compiler and passing to the compiler an assertion specifying a condition for at least one of the arguments. The compiler infers the attributes of the argument from the assertion.

The method can include the steps of calling the compiler and passing to the compiler an instance of an object identifying attributes of the one or more arguments. The compiler determines that attributes of the arguments from the object.

The method can include the step of compiling two or more versions of the target language. The compiler compiles the two or more versions of the target language based on different attributes of the one or more arguments.

In one embodiment a computer readable medium holding computer readable instructions that when executed cause a compiler to compile a callable compilable unit of code is disclosed. The instructions include parsing a polymorphic function written in a callable compilable unit of code and compiling the callable compilable unit of code to translate the polymorphic function into a reduced polymorphic function in a target language. The polymorphic function has at lease one dynamically typed argument and the reduced polymorphic function has a hybrid typed argument with an attribute that becomes static and an attribute that remains dynamic. For example the hybrid typed argument can have a static data type and a vector size that remains variable at run time.

The medium can include the instructions for calling the compiler and passing to the compiler an example of the argument. The compiler infers the attributes for the argument from the example.

The medium can include the instructions for calling the compiler and passing to the compiler an assertion specifying a condition for the argument. The compiler infers the attributes of the argument from the assertion.

The medium can include the instructions for calling the compiler and passing to the compiler an instance of an object identifying attributes of the argument. The compiler infers the attributes of the argument from the object.

The medium can include instructions for compiling two or more versions of the target language. The compiler compiles the two or more versions of the target language based on different attributes of the argument.

In one embodiment a computing device for use in compiling code is disclosed. The computing device includes a storage device holding a callable compilable unit of code expressed in source code and a compiler accepting as input the callable compilable unit of code and information from outside of the callable compilable unit of code and the source code identifying an attribute of an argument expressed in the callable compilable unit of code and generating as output a target language. The computing device can include an interface responsive to input from a user to call the compiler and input the information identifying the attribute of the argument in the callable compilable unit of code. The computing device can include a display device for use in displaying any of the interface the callable compilable unit of code or the target language. The computing device can include an input device for use by the user to provide the input to the user interface.

The callable compilable unit of code can be one of a text based code or a graphical model based code.

The target language can be one of a text based target language or a graphical model based target language.

The illustrative embodiments described herein provide compilers and methods of compiling a unit of code. The compilers and methods thereof improve portability of code between different programming environments by allowing a mechanism calling the compiler i.e. compiler call site to determine attributes of arguments expressed in the unit of code. This avoids the need to include declarations and assertions in the unit of code to determine and provide a compiler with the attributes of the arguments expressed in the unit of code.

The compilers and methods of compiling a unit of code disclosed herein allow a compiler to infer attributes of arguments expressed in the unit of code from examples objects assertions and the like that are passed to the compiler as part of the compiler call. That is the unit of code is substantially free of information for example declarations assertions and the like that identify one or more of the attributes of an argument expressed in the unit of code. In turn the compiler infers the attribute information of the arguments from the information passed in to the compiler. The compiler call site making the compiler call can be an operating system OS a user interface a function executable code and the like.

The compilers and methods of compiling a unit of code disclosed herein can translate a polymorphic function expressed in a unit of code into a hybrid or reduced polymorphic function in the target language. That is the polymorphic function can have a dynamically typed argument while after compilation into the reduced polymorphic function in the target language the function can have an argument with at least one static attribute and one dynamic attribute. For example after compilation of the polymorphic function the data type of the argument of the reduced polymorphic function becomes static while the vector size of the argument remains variable.

Before continuing below with the detailed discussion it is helpful to define a few terms as used herein.

As used herein the term unit of code or the term callable compilable unit of code refers to a function a method a procedure a module a program a sub routine a class constructor and the like.

The computing device may be electronic and include a Central Processing Unit CPU memory storage an input control a modem a network interface a display etc. The CPU controls each component of the computing device to provide the applications. The memory temporarily stores instructions and data and provides them to the CPU so that the CPU operates the computing device and runs the applications available to the computing device .

The computing device may include multiple CPUs for executing software loaded in the memory and other programs for controlling system hardware. Each of the CPUs can be a single or a multiple core processor A and B. The code loaded in the memory may run in a virtualized environment such as in a Virtual Machine VM . Multiple VMs may be resident on a single processor. Also part of the application could be run in hardware for example by configuring a field programmable gate array FPGA a programmable logic controller PLC or creating an application specific integrated circuit ASIC an application specific instruction set processor ASIP a system on chip SoC a multiple processor system on chip MPSoC etc. Further the part of the applications may be run on analog electronic devices or other resources may be used to run part of the application such as graphics processing units GPUs or dedicated hardware such as Fast Fourier Transform FFT processing blocks .

The storage may contain software tools for applications. Such an application may be a software system such as a software document processing application e.g. MS Word MS PowerPoint MS Excel etc. or a software technical computing application e.g. Simulink or MATLAB modeling environments . The storage can include code for the operating system OS of the device code for applications running on the operating system code for a compiler callable compilable unit of code developed using any of code and a target language output from a compiler .

The compiler accepts as input the callable compilable unit of code and information from outside of the callable compilable unit of code representative of attributes of arguments expressed in the callable compilable unit of code . In turn the compiler determines the attributes of the arguments expressed in the callable compilable unit of code from the information representative thereof and outputs the target language . In this manner the callable compilable unit of code can be free of declarations or assertions that identify the attributes of the arguments expressed in the callable compilable unit of code . The information from outside of the callable compilable unit of code representative of attributes of arguments expressed in the callable compilable unit of code can include but is not limited to examples assertions objects and commands.

One application executable by the computing system includes a first programming environment such as a graphical modeling environment like SIMULINK modeling environment from The MathWorks Inc. of Natick Mass. SIMULINK modeling environment provides a graphical and interactive environment by which engineers and other designers can use a model based design approach to design and develop code. With a model based design approach the first programming environment allows a block diagram model to be an implementation specification for generating code.

The applications can include a second programming environment such as MATLAB modeling environment from The MathWorks Inc. of Natick Mass. MATLAB modeling environment provides an intuitive language and a technical computing environment that enables the development of code. The MATLAB modeling environment integrates mathematical computing visualization and a technical language. MATLAB modeling environment provides core mathematics and advanced graphical tools for data analysis visualization and algorithm and application development. MATLAB modeling environment further provides a range of computing tasks in engineering and science from data acquisition and analysis to application development. Built in interfaces of MATLAB modeling environment enable users to access and import data from instruments files and external databases and programs. In addition MATLAB modeling environment enables the users to integrate external routines written in C C FORTRAN and Java with the MATLAB modeling environment applications.

Those skilled in the art will appreciate that other applications can be held by the storage for example a document processing application. The storage may also store data sets that can be loaded by the applications. The data sets can be for example a serialization artifact such as a file. Those of ordinary skill in the art will appreciate that parts of the applications can be stored in the CPU cache or memory as well much like the data sets and even the OS or they can be stored on the network described below with reference to .

The first programming environment can include an interface . The interface allows a user to interact with the first programming environment . Those skilled in the art will appreciate that the interface can take the form of a graphical user interface that provides a user of the computing system with textual and graphical information to allow the user to browse select create and modify code associated with first programming environment and to interact with the compiler . Those skilled in the art will also appreciate that the interface is also implementable as a command line interface or other suitable interface that allows a user to view and interact with the compiler .

The second programming environment can include an interface . The interface allows a user to interact with the second programming environment . Those skilled in the art will appreciate that the interface can take the form of a graphical user interface that provides a user of the computing system with textual and graphical information to allow the user to browse select create and modify code associated with second programming environment and to interact with the compiler . Those skilled in the art will also appreciate that the interface is also implementable as a command line interface or other suitable interface that allows a user to view and interact with the compiler .

The first programming environment and the second programming environment may support interprocess communications between each other through the use of an application programming interface a function call a method call a procedure call an object such as a Common Object Model object a block such as an embedded MATLAB modeling environment function block in SIMULINK modeling environment or any combination thereof.

The embedded MATLAB modeling environment function block in SIMULINK modeling environment contains a MATLAB modeling environment function in a SIMULINK modeling environment model. The function can accept multiple input signals and can produce multiple output signals. The embedded MATLAB modeling environment function block in SIMULINK modeling environment can also call subfunctions runtime library functions and other MATLAB modeling environment functions. Additionally the embedded MATLAB modeling environment function block in SIMULINK modeling environment provides a structure function and operation to generate executable code such as C code or an HDL representation for embedded applications such as VHDL or Verilog.

As such the embodiments described herein are well suited for use with an embedded MATLAB modeling environment function block in SIMULINK modeling environment. In this manner a user of the computing device the first programming environment or the second programming environment can call the compiler with a compiler call from the interface the interface the OS and the like to generate executable code corresponding to the functionality of the embedded MATLAB modeling environment function block. As part of the compiler call or as part of instructions or information passed to the compiler via the interface the interface the OS subsequent to the compiler call a user of the computing device the first programming environment or the second programming environment can pass information representative of the attributes of the arguments expressed in the embedded MATLAB modeling environment function block to the compiler . In turn the compiler determines the attributes of the function arguments expressed in the callable compilable unit of code from the passed information and compiles the callable compilable unit of code into a target language . Nonetheless those skilled in the art will appreciate that the teachings described herein are applicable to compiling of callable compilable unit of code from any programming environment. Examples of passing information representative of the attributes of the callable compilable unit of code arguments expressed in the callable compilable unit of code to allow the compiler to infer of determine the attributes of the arguments are discussed below.

The input control may interface with a keyboard a mouse a micro phone a camera such as a web camera and or other input devices including a neural interface. The neural interface accepts commands directly from the human or animal brain or brain cell culture without requiring physical movement and can be used to operate the computing device or other devices. The computing device may receive through the input control input data such as the input data for developing a model. The computing device may display on the display user interfaces for displaying the data generated from an application such as a document processing application or a technical computing application.

Those skilled in the art will recognize that the illustrative concepts discussed herein are applicable to object oriented programming frameworks such as C as well as structured programming formats including C FORTRAN and the like or a hybrid programming framework such as C having OO programming properties and structured programming properties as well as domain specific languages DSL .

In the network environment the servers and may provide the clients and with software components or products under a particular condition such as a license agreement. The software components or products may include those for providing the first programming environment the second programming environment or both. Additionally the servers and can provide compiling services to the clients and . In this embodiment the servers and each hold and support a compiler callable by the first programming environment the second programming environment or both. The compiler accepts as input the callable compilable unit of code and information from outside of the callable compilable unit of code representative of attributes of function arguments expressed in the callable compilable unit of code . In turn the compiler determines the attributes of function arguments expressed in the callable compilable unit of code from the information representative thereof and outputs the target language . In this manner the callable compilable unit of code can be free of declarations or assertions that identify the attributes of the function arguments expressed in the callable compilable unit of code . The information from outside of the callable compilable unit of code representative of attributes of function arguments expressed in the callable compilable unit of code can include but is not limited to examples assertions objects and commands.

In one example the client may perform the modeling of a dynamic system using a software component provided by the server and send the server the model for simulation. The server then returns the simulation results to the client and the client may subsequently display the data to the user with the information on the data.

In step a user of the computing device for example a programmer an engineer or a scientist expresses a function in the callable compilable unit of code . The user can use the first programming environment the second programming environment or both to express the function in the callable compilable unit of code . As used herein models developed in MATLAB modeling environment SIMULINK modeling environment or both are considered one type of a callable compilable unit of code suitable for use with the compiler . Further as used herein the target language can be any language different from the source code including but not limited to C C FORTRAN HDL representation C Python Java Basic and the like.

The function expressed in the callable compilable unit of code has at least one function argument and the function argument has attributes such as data type complexity array size structure double integer logical character cell function handle sample rate and the like. In accordance with the teachings disclosed herein the user of the computing device expressing the function in the callable compilable unit of code does not need to include a declaration an assertion or both in the callable compilable unit of code to identify the attributes of the function argument of the function expressed in the callable compilable unit of code . As will be discussed below in more detail information representative of the attributes of the function argument is passed to the compiler as part of a call to the compiler to compile the callable compilable unit of code into a target language or passed subsequent to the call to the compiler .

In step when the callable compilable unit of code is ready for compiling a call to the compiler is initiated to translate the callable compilable unit of code into the target language . The compiler call can be made by a call site such as the OS the first programming environment the second programming environment any application the user interface the user interface a function and the like. In this manner the compiler call can be used to pass information representative of the attributes of the argument of the function expressed in the callable compilable unit of code . The information representative of the attributes of the function argument can include examples of an attribute of the function argument an assertion that identifies the attributes of the function argument of the function or an object that identifies the attributes of the function argument of the function. Those skilled in the art will appreciate that the information representative of the attributes of the function argument can be passed as part of the compiler call or passed to the compiler subsequent to the compiler call or passed to the compiler from the compiler call site prior to the call to compile the callable compilable unit of code .

In step the compiler compiles the callable compilable unit of code into the target language and in doing so determines the attributes of the function argument expressed in the callable compilable unit of code from the information representative of the attributes of the function argument passed to the compiler .

In this manner compiling the callable compilable unit of code into the target language using the compiler or methods for compiling code as taught by the embodiments herein allows attributes of function arguments to be specified without requiring a user of the computing device to modify their callable compilable unit of code for example their MATLAB modeling environment function code or M code. As such the callable compilable unit of code remains free of declarations or assertions used to identify the attributes of a function argument which in turn provides a number of benefits. In other words the information provided by the compiler call site determines the attributes of the function argument of the function expressed in the callable compilable unit of code .

One benefit is the improved portability of the callable compilable unit of code to different programming environments. Another benefit is the ability to build different versions of the callable compilable unit of code with function arguments having different attributes according to the different versions without having to modify the callable compilable unit of code for each different version. Moreover if the user has generated code for testing a function in the callable compilable unit of code e.g. a test harness it is likely that most if not all the information representative of the attributes of the function argument have been written and are reusable to provide call site examples for the compiler .

To translate the M code function into the target language the compiler needs to have the following information about function arguments x1 and x2. That is the numeric datatype e.g. single double int32 complexity i.e. real or complex and size e.g. scalar N M matrix . In one embodiment examples of x1 and x2 are passed to the compiler from the compiler call site for example the second programming environment . One illustrative example suitable for providing the compiler with information representative of the attributes of x1 and x2 could be 

In accordance with the teachings described herein it is possible to have some function arguments expressed in the source code assume constant values at compile time. Such arguments could have no corresponding function arguments in the target language . Moreover it may be beneficial to instruct the compiler to handle an argument as a dynamically sized array at compile time. Dynamically sized arguments would spawn at least one other argument in the target language i.e. the current size of the argument . Both of these features constant valued arguments and dynamically sized arguments can be passed to the compiler using a number of different methodologies. For example by passing additional parameters to the compiler from the compiler call site defining corresponding properties in an attribute class or a hybrid approach using additional parameters and defining corresponding properties in an attribute class.

Accordingly the compiler can include a rule that allows the compiler to infer the attributes of a function argument from information representative of the attributes passed to the compiler from outside of the source code . For example the rule could read If the compiler argument is an attribute object the corresponding function argument is a variable otherwise the function argument is a constant with attributes and value identical to that of the compiler argument.

The callable compilable unit of code is written in a computer language that is compilable into the target language . Conversely in another embodiment the callable compilable unit of code can include or be associated with code that does not result in corresponding target code in the target language and is not considered to be part of the callable compilable unit of code as used herein.

For example the callable compilable unit of code can include or be the function myfun x . The function myfun x can be wrapped in a function wrapper function and can be expressed in the callable compilable unit of code as function myfun x . As such when the compiler compiles the callable compilable unit of code it produces target code only for the function myfun x and not the function wrapper. The compiler handles the function wrapper as an additional input passed to it by a compiler call site and not part of the callable compilable unit of code .

The wrapper function is one example of the kind of code that may be used to pass information to the compiler . As described above this information may include information about the parameter attributes or examples from which such attributes may be inferred. In an alternative embodiment the examples may be included in the same file and or stream of code as the callable compilable unit of code and may be passed to the compiler at the same time and through the same channel as the callable compilable unit of code . In one alternative embodiment the examples may be shown in comment sections of a file containing the callable compilable unit of code . In another alternative embodiment the examples may be set out by specific syntax as determined by one of skilled in the art.

While illustrative embodiments have been described herein one skilled in the art will appreciate that changes in form and detail that may be made without departing from the intended scope of the present invention as defined in the pending claims. For example the compiler of the present invention can translate a function with any number of arguments into a target language. Still further the compiler in addition to the functions and operations described above can perform any of the following operations lexing preprocessing parsing semantic analysis code optimizations and code generation.

