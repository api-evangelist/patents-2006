---

title: Method and apparatus for dynamic content generation
abstract: One embodiment of the present method and apparatus for synthesizing a data stream includes retrieving meta data from at least one decision tree, the decision tree comprising a plurality of interconnected nodes, and generating the data stream in accordance with the meta data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07856503&OS=07856503&RS=07856503
owner: International Business Machines Corporation
number: 07856503
owner_city: Armonk
owner_country: US
publication_date: 20061019
---
This invention was made with Government support under Contract No. H98230 04 3 0001 awarded by the U.S. Department of Defense. The Government has certain rights in this invention.

The present invention relates generally to data stream processing applications and relates more particularly to the synthesis of simulated data for use in testing Internet applications.

A wealth of Internet applications offer unprecedented opportunities for the enhancement of collaborative environments by enabling users to exchange organize and search through vast amounts of information. At the same time new challenges are inevitably presented in harnessing the capabilities of these applications while preventing their misuse. It is thus important to develop systems and tools that allow users to understand and make the most efficient and secure use of these applications.

Such tools and methods typically rely on test data generated using simulated information. Thus in turn it is important to be able to simulate information exchange resulting from the interactions of millions of individuals in a manner that is statistically and semantically realistic reproducible and controllable. Conventional methods for simulating test information however tend to be limited with regard to the types of data used to generate the simulated information as well as with regard to the types of activities that may be tested.

One embodiment of the present method and apparatus for synthesizing a data stream includes retrieving meta data from at least one decision tree the decision tree comprising a plurality of interconnected nodes and generating the data stream in accordance with the meta data.

To facilitate understanding identical reference numerals have been used where possible to designate identical elements that are common to the figures.

In one embodiment the present invention is a method and apparatus for dynamic content generation. Embodiments of the present invention enable the creation of artificial data streams that are statistically and semantically equivalent to original data streams used for statistical and semantic information analysis. The artificial data streams may be used for example to test Internet applications so that more efficient and effective use of the applications can be achieved.

Embodiments of the present invention operate on a generic data structure that represents content and use data derived from this generic data structure to synthesize the artificial data streams. The data structure which is described in further detail below comprises 1 a set of meta data content and 2 spatial and temporal statistical dependencies among the meta data content. Within the context of the present invention meta data content is understood to be a partial high level representation of the content in a particular programming language. For example meta data may comprise an extensible markup language XML record that contains a word or a feature vector describing a human voice with linear Prediction Cepstrum Coefficients. According to the present invention such meta data may be used to generate one or more of a variety of different types of data streams. For example the exemplary meta data described above could be fed to a text to speech synthesis application that translates the meta data into a waveform and streams the waveform as Voice over Internet Protocol VoIP Real time Transport Protocol RTP packets. Alternatively the textual representation of the same exemplary meta data could be fed to a messaging emulator that translates the meta data into a chat message.

Moreover embodiments of the present invention make use of data factories. Within the context of the present invention a data factory is understood to be any module that is capable of translating a meta data content representation into an actual data stream e.g. such as translating meta data content into a waveform or a chat message . Meta data content is fed piecewise to various data factories according to specified spatial and temporal statistical characteristics. For example meta data comprising two or more words can be further combined into meta data comprising a sentence according to probabilities that words appear in given sequences e.g. using an N gram model and potentially with temporal and contextual dependencies e.g. use different N gram models for written and spoken sentences . Meta data comprising sentences can be further combined into meta data comprising paragraphs and so on.

As illustrated the decision tree comprises a plurality of interconnected nodes hereinafter collectively referred to as nodes . Some of these nodes are root nodes i.e. node in some of the nodes are branching nodes some of the nodes are transform nodes and some of the nodes are leaf nodes i.e. nodes and . In one embodiment any node that is not a leaf node can be programmed to behave as a branching node and or a transform node. The nodes all conform to a common set of Application Programming Interfaces APIs with various methods for retrieving content and writing the retrieved content to buffers from where it can be processed by one or more data factories.

Branching nodes provide logic for branching. That is branching nodes allow content selection with respect to given branching logics. For example in one embodiment a branching logic may comprise one or more of a dictionary e.g. in which branching is performed according to independent probabilities an N gram model e.g. allowing probabilistic content selection conditioned on a history of up to N last branching decisions a script e.g. in which branching is executed according to a given sequence a schedule e.g. in which branching is conditioned on a current simulation time or more generally a select e.g. in which branching is dependent on an outcome of any random event . The select logic is sufficiently versatile that it can be used to generate other logics as well however other dedicated logics are necessary to achieve the desired tradeoff between efficiency and versatility.

Transform nodes have the ability to modify content generated by a child node before passing the content back to their respective parent nodes. For example in one embodiment a transform logic may comprise one or more of content concatenation encapsulation e.g. encapsulation into an IP header arbitrary length repetition of the content e.g. for generating random sentences stack logic e.g. for allowing persistence of randomly generated content and reuse across multiple streams and across time or logics for creating structured content. The stack logic allows a programmer to anywhere in a decision tree push content generated by a child node into a stack and later refer to the stack to regenerate or remove the content.

Leaf nodes are generator nodes that provide mechanisms for generating integers real values strings dates and other types of arbitrary binary data. Various models may be implemented to generate constant content or random variables with prescribed distribution probabilities e.g. uniform exponential or normal . As an example the leaf nodes of provide mechanisms for generating speech feature vectors i.e. FV FV . . . FVn that identify specific speakers. As an exemplary use of these feature vectors one of the feature vectors can be selected by a data factory for use in converting a text string into an audio stream with the voice of a speaker associated with the selected feature vector.

As will be described in further detail below generation of data streams in accordance with a decision tree such as the decision tree is achieved by traversing the decision tree using the branching logic to retrieve desired meta data from one or more leaf nodes . In one embodiment the content model comprising one or more decision trees is stored in an XML file and loaded into a runtime environment where the content model can be accessed by multiple data factories simultaneously. In the event that the content model comprises multiple decision trees each decision tree is designated by a unique identifier such as a name .

The method is initialized at step and proceeds to step where the method initializes a data factory. In one embodiment initialization of a data factory includes binding the data factory to at least one specific decision tree such as the decision tree illustrated in . The bound decision tree s contain the meta data that the data factory may use to generate data streams. In one embodiment the name of the decision tree s to which the data factory should be bound is provided in a configuration file or in the data factory s initialization method.

Once the data factory has been initialized the method proceeds to step and pulls content meta data from at least one of the decision trees to which the data factory is bound. In one embodiment meta data is pulled from a decision tree in accordance with an iterator associated with the data factory where an iterator is a generalization of a pointer with increment logic. That is an iterator is implemented to iterate over an arbitrarily long sequence of randomly generated elements. If an iterator points to one element in a range it is possible to increment the iterator so that it points to the next element in the range. An iterator also maintains a local state in order to determine the element to which it will point at a next increment. The operation of an iterator is described in further detail with respect to .

Once the content meta data has been pulled from the decision tree the method proceeds to step and generates a data stream in accordance with the pulled content meta data. The method then terminates in step .

The method is initialized at step and proceeds to step where the method examines the root node of the decision tree.

In step the method determines whether the root node is also a leaf node. If the method concludes in step that the root node is a leaf node the method proceeds to step and generates content meta data before writing the generated content meta data to a first buffer in step . As described above the content meta data in the first buffer may be used by a data factory to create actual payloads and protocol headers of data streams. The method then terminates in step .

Alternatively if the method concludes in step that the root node is not a leaf node the method proceeds to step and writes content annotation to a second buffer. This content annotation provides information about the decision path taken by the method through the decision tree and shows how content meta data is obtained. For example referring back to content annotations hereinafter collectively referred to as content annotations comprise contextual information indicating the identity of a speaker the speaker s mood and the conversation topic associated with a selected feature vector embodied in a leaf node . In one embodiment the content annotation is logged into a file. For instance considering as an example the content annotation may be appended to a VoIP packet. In another embodiment the content annotation is sent to a different channel where the content annotation can be used for benchmarking purposes e.g. as a ground truth to benchmark the analytics of a tested application . In one embodiment the method also writes content annotation to the second buffer when a leaf node is encountered. In an alternative embodiment content annotation is created by the parent node of the current node in which case the annotation is attached to the arc s connecting the parent node to the current node and not to the current node per se .

In step the method examines the next node in the decision tree in accordance with any branching logic specified by the current node. The method then returns to step and proceeds as described above depending on whether or not the next node is a leaf node.

Thus an iterator follows a decision path through a decision tree where the decision path results from the logics of the traversed nodes until the iterator reaches a leaf node. A complete decision tree traversal from root node to leaf node is executed at each atomic increment of the iterator. As a consequence the iterator iterates over a sequence of meta data content that is randomly generated by the leaf nodes of the decision tree.

In order to generate content annotations a programmer must specify a list of content annotations for a data factory s iterator and for at least some of the nodes of the content model. In one embodiment content annotations take the form of field name field value where the field name is any string and the field value is a macro that returns a value. The field value macro conforms to the same paradigm and encoding as the decision tree used to generate the content meta data. Thus as an iterator traverses a decision tree each traversed node is checked for annotation fields that have the same field name as the iterator s annotations and when a matching field name is found the values of the iterator s annotations are replaced with the values specified by the node s corresponding field value.

Representing content meta data in the form of a decision tree offers many advantages. For instance the decision tree structure offers a unified schema for expressing complex statistical properties. This allows spatio temporal correlations synchronizations and different specifications of content e.g. statistical properties like word length sentence length or the like to be captured. The compact nature of the content model also allows for easy implementation using powerful schematic languages like XML. The use of meta data content in the representation provides flexibility for the reuse and composition of different types of data streams from the same content model.

Additionally the modular nature of the content model allows a representation to be easily extended to support new content meta data types and new statistical properties because all nodes of a decision tree conform to a common API interface from which new types of decision logic and new types of meta data can be derived . Moreover a decision tree can be extended with dedicated decision logic that is optimized to enable efficient and compact representation and fast e.g. substantially real time meta data content generation.

The content model also supports free form annotation of content meta data which can be used to create user configurable logs of what content is generated and how it is generated. This information may be useful when executing benchmarking algorithms that deal with content analytics as this feature enables a user to lie mislead or be vague about generated content.

In addition the content model of the present invention is easily scalable as content synthesis using a decision tree can be implemented in a thread safe manner. That is a single decision tree may be accessed simultaneously by multiple data factories through their respective iterators. However since iterators locally maintain state information when making decisions simultaneous access is multithread safe and does not result in substantial performance degradation.

Alternatively the content synthesis module can be represented by one or more software applications or even a combination of software and hardware e.g. using Application Specific Integrated Circuits ASIC where the software is loaded from a storage medium e.g. I O devices and operated by the processor in the memory of the general purpose computing device . Thus in one embodiment the content synthesis module for generating artificial data streams described herein with reference to the preceding Figures can be stored on a computer readable medium or carrier e.g. RAM magnetic or optical drive or diskette and the like .

Thus the present invention represents a significant advancement in the field of testing and benchmarking intelligent information processing systems such as data stream processing systems. Embodiments of the present invention enable the creation of artificial data streams that are statistically and semantically equivalent to original data streams used to statistical and semantic information analysis. The artificial data streams may be used for example to test distributed information processing applications so that more efficient and effective use of the applications can be achieved.

While the foregoing is directed to the preferred embodiment of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

