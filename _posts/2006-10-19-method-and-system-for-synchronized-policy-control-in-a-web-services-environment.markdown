---

title: Method and system for synchronized policy control in a web services environment
abstract: Policy controls for Web service resource objects in a hierarchical resource space are loosely coupled so that policy changes are applied and enforced across the objects. This technique ensures that different policies are not applied unintentionally to the same resource (for example, one at the Web services entry level, and the other at the resource level). By synchronizing the object in the manner described, neither the entity that deploys the application nor the security administrator need to be aware of the differences between the various types of requests that occur within a Web services environment. In a representative embodiment, resource objects are linked within a hierarchical resource space to provide synchronized policy control, where the policy is an audit policy, a quality-of-service (QoS) policy, a service level agreement (SLA) policy, a governance policy, a compliance policy, a patch management/vulnerability management policy, a user management policy, or a rights management policy.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08291466&OS=08291466&RS=08291466
owner: International Business Machines Corporation
number: 08291466
owner_city: Armonk
owner_country: US
publication_date: 20061019
---
This application is related to U.S. Ser. No. 11 456 190 filed Jul. 8 2006 titled Method and system for synchronized access control in a Web services environment. 

A Web service is a software system identified by a URI whose public interface and bindings are defined and described using XML. Its definition can be discovered by other software systems. These systems may then interact with the Web service in a manner prescribed by the Web service definition using XML based messages conveyed by Internet protocols.

Typically a Web service is described using a standard formal XML notion called its service description. A service description typically conforms to a machine processable format such as the Web Services Description Language or WSDL . WSDL describes the public interface to necessary to interact with the service including message formats that detail the operations transport protocols and location. The supported operations and messages are described abstractly and then bound to a concrete network protocol and message format. A client program connecting to a Web service reads the WSDL to determine what functions are available on the server. Computing entities running the Web service communicate with one another using XML based messaging over a given transport protocol. Messages typically conform to the Simple Object Access Protocol SOAP and travel over HTTP over the public Internet or other reliable transport mechanisms such as IBM MQSeries technologies and CORBA for transport over an enterprise intranet . The Web service hides the implementation details of the service allowing it to be used independently of the hardware or software platform on which it is implemented and also independently of the programming language in which it is written. This allows and encourages Web services based application to be loosely coupled component oriented cross technology implementations. Web services typically fulfill a specific task or a set of tasks. They can be used alone or with other Web services to carry out a complex aggregation or a business transaction. A client program connecting to a Web service reads the WSDL to determine what functions are available on the server.

With the advent of Web services computing resources are exposed in an implementation neutral manner. Thus for example consider a reusable code component such as an enterprise Java bean or EJB. Typically an EJB is protected with access control decisions on a method call. When exposed as a Web service however the EJB is defined by the Web service name port and operation where the operation typically represents a method. Because of the way in which a Web service is described namely through the WSDL this operation may also correspond to the same functionality provided by a C based resource a CICS based resource or the like. This is another way of saying that a given functionality whether implemented by an EJB a C based resource a CICS based resource or the like can be described with a single WSDL. The overall resource is described by the abstract WSDL and then each particular implementation is described by a concrete binding of that WSDL.

It is known to allow for the application of access control policies such as access control lists or ACLs to a given resource at the level of a WSDL meaning that the same access control policies are applied to the resource regardless of its back end implementation. Such policies are typically applied to the resource in the context of a virtual representation called a protected object space. A protected object space is a logical and hierarchical portrayal of resources belonging to a domain. The application of security policy at the level of a WSDL is consistent with a best practice approach to access control where an access control decision preferably is made as close to the edge as possible. This technique however does introduce the potential that an entity offering the Web service has the same authorization decision implemented in two places namely an operation level decision at the Web service entry and a method level decision at an application level. This in turn introduces the possibility for two different access policies applied to the same resource with one policy applied at the Web services operation level and another policy applied at the application EJB level. As a consequence and to avoid potential conflicts access control policies currently must be manually tracked and managed by a security administrator.

Similar operating constraints exist throughout Web service environments in a non security related context and in particular where a given transaction has multiple touch points at a set of resources e.g. a Web server a Web service a Web application an MQ Queue or the like and where each of those resources has a policy e.g. an audit policy that is configured and administered by different entities. As in the access control environment the individual policies are manually tracked and managed and they are often inconsistent.

In an illustrative embodiment a method of synchronized policy control in a Web services environment includes the steps of generating a hierarchical resource space for a set of transaction resources. A set of one or more loose couplings are then defined e.g. using a visual mapping tool between corresponding elements in the hierarchical resource space. A set of mapping rules are defined by these couplings. The mapping rules define whether and how changes to the elements in one object in the hierarchical resource space affect elements in one or more other objects in the hierarchical resource space. At runtime a policy management tool is monitored. If a policy change e.g. an update occurs to an element in one of the resource space objects this change is parsed against the mapping rules. If as a result of the parsing a given mapping rule is implicated the change is applied to a corresponding element in the other resource space object. The changes may be one way or two way meaning that control changes are propagated in both directions .

The policy control may be of any type including without limitation an audit policy a quality of service policy a service level agreement SLA policy a rights management policy a governance policy a compliance policy a patch management vulnerability management policy a user management policy or the like.

The foregoing has outlined some of the more pertinent features of the invention. These features should be construed to be merely illustrative. Many other beneficial results can be attained by applying the disclosed invention in a different manner or by modifying the invention as will be described.

As is well known enterprises are adopting Web Services to ease application integration across heterogeneous environments within and across security domain boundaries. The Organization for the Advancement of Structured Information Standards OASIS has recently ratified various Web Services Security WSS standards to provide an extensible framework for providing message integrity confidentiality identity propagation and authentication. In a typical scenario illustrated in SOAP messages are sent from an initial SOAP sender to an ultimate SOAP receiver along a SOAP message path comprising zero or more SOAP intermediaries that process and potentially transform the SOAP message. The use of SOAP here is merely illustrative and it should not be taken to limit the scope of the present invention which does not depend on the particular transport mechanism used to transfer a protected message. The devices and are computing entities such as data processing systems each comprising hardware and software which entities communicate with one another over a network such as the publicly routed Internet an intranet an extranet a private network or any other communications medium or link. As described below a data processing system typically comprises one or more processors an operating system an application server one or more applications and one or more utilities. A given data processing system may be a sender or sending entity in which case the system is deemed to be on a sender side of the transmission or a receiver or receiving entity in which case the system is deemed to be on a receiver side. The applications on the data processing system provide native support for Web services including without limitation support for HTTP SOAP XML WSDL UDDI and WSFL among others. Familiarity with these technologies and standards is presumed. Further information regarding SOAP WSDL UDDI and WSFL is available from the World Wide Web Consortium W3C which is responsible for developing and maintaining these standards further information regarding HTTP and XML is available from Internet Engineering Task Force IETF .

A WSDL is an XML document comprising a set of definitions a definitions element at the root and a set of additional definitions inside the root. Services are defined using a set of elements which include types which provide data type definitions used to describe the messages exchanged messages which represent an abstract definition of the data being transmitted portType which is a set of abstract operations binding which specifies concrete protocol and data format specifications for the operations and messages defined by a particular portType and service which is used to aggregate a set of related ports. A WSDL thus describes a set of one or more endpoints operating on messages. Operations and messages are described abstractly and then bound to a concrete network protocol and format to create an endpoint. Thus an abstract portion of the WSDL represents a service interface and typically comprises the elements types message and portType a concrete portion of the WSDL represents a service implementation of the service interface and typically includes the service and binding elements. Thus the binding element typically is where the notion of concrete ness is introduced. In particular typically this is where a SOAP binding and a transport method are defined as illustrated in the example of which is a portion of a representative WSDL showing several of these elements for a Weather Forecast Web service. This WSDL includes a number of different bindings as well as a URL defined HTTP accessible resource at which the Web service is obtained. The information in the service element may be used to build a protected object space POS for a WSDL as will be described below e.g. by hanging the POS for the WSDL or WSDL binding under a specific service name address.

A Web services environment may be implemented in a system that includes an access manager which is a component that prevents unauthorized use of resources including the prevention of use of a given resource in an unauthorized manner. A representative access manager is the Tivoli Access Manager product which is available commercially from IBM and is represented in . Of course the identification of this commercial product is not meant to be taken as limiting. More broadly any system device program or process that provides a policy access service decision may be used for this purpose. Preferably the access manager provides access control capabilities that conform to The Open Group s authorization azn API standard. This technical standard defines a generic application programming interface for access control in systems whose access control facilities conform to the architectural framework described in International Standard ISO 10181 3. The framework defines four roles for components participating in an access request 1 an initiator that submits an access request where a request specifies an operation to be performed 2 a target such as an information resource or a system resource 3 an access control enforcement function AEF and 4 an access control decision function ADF . As illustrated an AEF submits decision requests to an ADF. A decision request asks whether a particular access request should be granted or denied. ADFs decide whether access requests should be granted or denied based on a security policy such as a policy stored in database . Components and comprise the access manager. Security policy typically is defined using a combination of access control lists ACLs protected object policies POPs authorization rules and extended attributes. An access control list specifies the predefined actions that a set of users and groups can perform on an object. For example a specific set of groups or users can be granted read access to the object. A protected object policy specifies access conditions associated with an object that affects all users and groups. For example a time of day restriction can be placed on the object that excludes all users and groups from accessing the object during the specified time. An authorization rule specifies a complex condition that is evaluated to determine whether access will be permitted. The data used to make this decision can be based on the context of the request the current environment or other external factors. For example a request to modify an object more than five times in an 8 hour period could be denied. A security policy is implemented by strategically applying ACLs POPs and authorization rules to those resources requiring protection. An extended attribute is an additional value placed on an object ACL or POP that can be read and interpreted by third party applications such as an external authorization service . The access manager authorization service makes decisions to permit or deny access to resources based on the credentials of the user making the request and the specific permissions and conditions set in the ACLs POPs authorization rules and extended attributes.

The goal of a security policy is to adequately protect business assets and resources with a minimal amount of administrative effort. First an administrator defines what resources should be protected. These resources may be any type of data object such as files directories network servers messages databases queues or Web resources. Then the administrator decides what users and groups of users should have access to these protected resources. Alternatively the administrator may decide what user roles should have access to these protected resources e.g. where a given identified user may have a role of bank teller . The administrator also decides what type of access should be permitted to these resources. Finally the administrator applies the proper security policy on these resources to ensure that only the right users can access them. Access to objects within a domain is controlled by applying a security policy to objects in a protected object space.

As is also known in the art an access manager such as illustrated in represents resources within a domain using a virtual representation referred to as a protected object space or POS . A protected object space is a logical and hierarchical portrayal of resources belonging to a domain. Typically the structure of a protected object space comprises two types of objects resource objects and container objects. Resource objects are the logical representation of actual physical resources such as files services web pages message queues and so on in a domain. Container objects are structural components that allow resource objects to be grouped hierarchically into distinct functional regions. Security policy can be applied to both types of objects. A protected object space has a root container object. Below the root container object are one or more container objects. Each container object represents an object space that consists of a related set of resources. These resources can be resource objects or container objects. The successful implementation of a security policy requires that the different content types are logically organized and that the appropriate ACL POP and authorization rules are applied . Prior implementations of this type of hierarchical protected object space have relied on these individual container objects being distinct and in effect mutually exclusive e.g. a resource that is managed under a message queue container cannot also be accessed under a web application container .

As illustrated in the concrete WSDL based protected object space is generated as well as managed by the access manager. In particular access manager has an associated Web services security management component that provides Web services specific access control enforcement functionality in response to access manager s access control decision functionality. In particular Web services security management component takes a WSDL description of a resource or set of resources and parses the entire WSDL description including both the concrete service implementation and abstract service interface descriptions. In the Tivoli Federated Identity Manager a wsdl2tfim command performs this object space creation in an automated manner although the creation of the protected object space from the WSDL can be performed in any convenient manner.

Typically a Web service uses one or more back end applications that perform the required service functionality. An application level resource typically also has an associated protected object space. illustrates a sample application server level protected object space for a set of back end resources. For illustrative purposes only the protected object space shown in represents a sample protected object space for an IBM WebSphere application server but of course clearly this tree structure POS representation can be applied to other application serving environments. The protected object space contains a root object used to anchor the POS a Web application server container a deployed resources object a role name object an application name object a cell name object a hostname object and a server name object . For illustrative purposes only the role name object is shown as having an associated ACL as does the server name object which has associated ACL . This protected object space reflects the deployment options for WebSphere application server based resources where multiple roles may be defined with a single ACL e.g. where this ACL may be overridden in some cases for a given server s hosting of a resource as shown with ACL for example .

As illustrated in the application specific POS is generated by the access manager. In particular access manager has an associated migration tool that generates the application specific POS from an EAR file input to the tool. In the Tivoli Access Manager a migrateEAR4 command performs this object space creation in an automated manner although the creation of the protected object space from the EAR or other back end code component can be performed in any convenient manner. Tivoli Access Manager for Business Integration has a similar tool that performs this object space creation in an automated manner for an MQSeries environment. A protected object space such as shown in results from operation of the migration tool .

According to one described embodiment access controls for a Web service which controls are based on abstract WSDL definitions are defined for a WSDL defined protected object space and as such are loosely coupled with the concrete WSDL binding derived from those definitions preferably on a per binding level. This WSDL defined POS is in turn loosely bound to a resource specific protected object space definition. This loose coupling is leveraged to allow changes e.g. updates to the abstract WSDL binding s protected object space to be transitively applied to the application specific protected object space. If appropriate changes to the resource specific protected object space may be applied to the WSDL s protected object space. Thus according to this embodiment the coupling may be one way typically from the WSDL POS to the resource level POS or two way from the WSDL POS to the resource level POS and vice versa . As will be seen this technique ensures that different security policies are not applied unintentionally to the same resource for example one at the Web services operation level and the other at the application EJB level . By synchronizing the protected object spaces in the manner described neither the entity that deploys the application nor the security administrator need to be aware of the differences between the Web service request and the application request.

A solution to this problem is illustrated in . In particular illustrates how a set of one or more loose couplings when achieved provide for a consistent management of ACLs and policy across these supposedly disparate protected object spaces. In particular the WSDL POS for the Weather Service has been mapped to the application server POS through the set of connectors and . Of course the number of connectors is merely illustrative. In this example the connector indicates that the WeatherForecast HTTP operation in the WSDL has an associated Forecaster group permission which correlates with the setForecast application in the POS . Likewise the connector indicates that the getTodayForecast operation in the WSDL has an associated Consumer user permission which correlates with the getForecasts application in the POS . Based on these loose couplings any permitted change to the ACL applied to the Weather Forecast HTTP operation in the WSDL is monitored and appropriately mapped to the setForecast application in the POS likewise any permitted change to the ACL applied to the getTodayForecast operation in the WSDL is monitored and appropriately mapped to the getForecast application in the POS . In this way the protected object spaces are updated in a consistent and synchronized manner. Access control policies are maintained irrespective of the type of request made whether a Web service request or an application specific request .

Thus the above described technique provides a method for providing synchronized access control in a Web services environment where a given authorization decision typically is implemented in several places e.g. at the Web service entry and within a given back end application. Generalizing the method of synchronized access control includes the process steps shown in . The method begins at step by generating a Web service protected object space from a WSDL. At step an application specific protected object space is generated from an application code base such as an enterprise archive file EAR or the like . Steps and may take place in an off line manner. These steps have been described and illustrated above at a high level e.g. see and . At step a set of one or more couplings are then defined between corresponding objects in the protected object spaces. Of course the identity of which objects are coupled across the protected object spaces necessarily will depend on the various operations and methods defined in the object spaces as well as the security policies associated therewith. These couplings may be defined programmatically or by a user directly e.g. using a visual mapping tool such as available from various commercial sources or via open source projects such as the Eclipse software development environment. A set of mapping rules is associated with the defined couplings. A convenient way to represent the mapping rules is to use an XML based policy language such as XACML or WS Policy. Thus in the example of a mapping rule indicates that changes to the getTodayForecast operation in the WSDL POS implicates the getForecast application in the application specific POS similar mapping rules are defined for the other identified couplings. The mapping rules define whether and how changes to the elements in one protected object space affect elements in the other protected object space. Once the one or more object coupling s are made security policy synchronization is effected in an automated manner by monitoring the protected object spaces for changes and selectively propagating those updates through the loose couplings. To this end each POS has associated therewith a listener or filter. The synchronization method waits at step for an update to an access control. Any update to the ACLs placed on the WSDL POS will trigger the method at step to parse the change against the set of mapping rules. If a given mapping rule is implicated the security policy change is applied to a corresponding object in the other protected object space. This is step . If no mapping rule is implicated the change is not propagated. The mapping rules define which changes are one way unilateral and which changes are two way bilateral . As noted above changes may be one way e.g. changes to the concrete WSDL protected object space are propagated to the application specific protected object space but not vice versa or two way meaning that access control changes are propagated in both directions . This completes the basic processing of the inventive method.

One of ordinary skill in the art will appreciate that the above described technique is not limited for use merely with propagating ACL changes across protected object spaces. More generally the technique may be used to synchronize any security policy whether implemented as an ACL a POP an authorization rule or an extended attribute across a first protected object space and a second protected object space or vice versa. Moreover the technique may also be used in a Web services environment to provide synchronized access policy based on a user s subscription parameters . In general the technique may be used to synchronize in an automated manner across any two or more hierarchical object spaces irrespective of what those object spaces represent. All that is required is a tool for defining the object couplings monitoring for changes to a given object attribute parsing the change against a set of mapping rules and then propagating the change.

In accordance with the present invention the access control related techniques described above are extended to provide synchronized control in one or more non security related contexts. These contexts may be quite varied but generally involve scenarios where a given transaction in the Web services environment involves multiple touch points typically a set of resources at which there is an option to enforce a given policy. While the types of policies may be quite varied representative examples include without limitation an audit policy a quality of service QoS policy a service level agreement SLA policy a rights management policy a governance policy a compliance policy a patch management vulnerability management policy a user management policy and the like.

In the non security related context the concept of a protected object space may be generalized as a hierarchical resource space which as used herein refers to a visual representation of a given service topology in the Web services environment. Examples of hierarchical resource spaces are set forth below. Like a protected object space a hierarchical resource space typically comprises a logical and hierarchical portrayal of resources typically belonging to a domain. The structure of a space may also comprise resource objects and container objects. As described above resource objects are the logical representation of actual physical resources such as servers services web applications message queues and so on in a domain. Container objects are structural components that allow resource objects to be grouped hierarchically into distinct functional regions. is a representative hierarchical resource space anchored by root where root has a number of children including MQ Queue object Web application object a Web services object and a Management container . Using an audit manager tool a given audit policy can be defined and applied to one or more these objects. In like manner a quality of service management tool can be used to define and apply a given quality of service policy to one or more of the objects and so on for other types of policies. A representative tool for QoS management includes for example Tivoli Composite Application Manager for SOA Real Time Transactions. Of course the successful implementation of a given policy requires that the different objects and their types are logically organized and that the appropriate policy related rules are applied . Prior implementations of this type of hierarchical resource space have relied on these individual container or resource objects being distinct and in effect mutually exclusive e.g. a resource that is managed under a message queue container cannot also be accessed under a web application container .

The present invention will now be described by way of an example involving audit policy control. It is assumed that a given transaction in the Web services environment involves multiple resources that need to be invoked in a given manner to complete the transaction and that one or more of those resources have audit policies associated therewith. illustrates one such scenario which is merely representative of one possible resource ordering wherein the transaction proceeds from Web server to Web service to Web application to MQ Queue . If this transaction is represented by a hierarchical resource space the resulting space may be as illustrated in . As can be seen this hierarchical resource space is similar to that shown in except that the Web server has been added. The Web server in corresponds to the server in . As also seen in the Web application object has associated therewith an Audit Policy A reference numeral while the Web server object has associated therewith an Audit Policy B reference numeral . This is an example of how multiple audit policies are applied to multiple objects. According to the present invention these policies which may be considered separate instances of a single policy are synchronized through a coupling as illustrated in . Note that the U in the drawing is intended to show set union functionality. This is merely representative of course as the manner in which policies are coupled or joined is not limited to any particular technique. Thus the type of policy and the direction of the synchronization may be defined as required by the particular application or Web services environment. In this example in terms of audit policy a given queue might require more information to be audited than might be audited on the edge the Web server as a result a more general audit policy the union join should be enforced at the Web server. As described above in the access control context the coupling may be defined programmatically or by a user directly e.g. using a visual mapping tool. Moreover preferably a set of mapping rules is associated with the defined coupling. A convenient way to represent the mapping rules is to use an XML based policy language such as XACML or WS Policy. The coupling may be one way or two way. In either case the coupling has the effect of adding the audit policy required by the Web application server Audit Policy A to the audit policy required by the Web server Audit Policy B . In this illustrative embodiment the coupling is made through a union or join. Typically policy propagation is accomplished through a union but this is not a requirement of the invention. The coupling insures that the Web server does not audit everything that is required to build a comprehensive end to end audit report for actions by the Web application. If the Web application later relaxes the information that is required to be collected then this change can be updated at the Web server where the union of the two policies may then also be relaxed. If Audit Policy B itself requires the information that has been relaxed by Audit Policy A it will still continue to be logged by the Web server.

As indicated above a given object in the hierarchical resource space may have any number of different policies associated therewith. Generalizing one of ordinary skill in the art will appreciate that the method of the present invention may be used in a Web services environment to provide one or more of the following depending on the policy at issue synchronized audit policy synchronized quality of service control synchronized service level control synchronized rights management control and so forth. In each case and in the manner previously described preferably the invention is used to provide such synchronization in an automated matter across any two or more resource objects in a hierarchical resource space or across two or more resource or container objects in different spaces using the basic steps of defining the one or more object couplings monitoring for changes to a given object attribute parsing the change s against a set of mapping rules and then propagating the changes as necessary. In this way a given policy is enforced within the Web services environment across multiple transaction touch points in a transparent automated manner.

Of course the present invention may be implemented in hierarchical resource spaces that define policies or policy instances at a much more fine grained level. illustrates one such hierarchical resource space. In this space root has the following children MQ Queue container Web application container Web services container and Web server container . MQ Queue has associated therewith Queues A and B as represented by resource objects and . Web application container has associated therewith Applications A and B as represented by resource objects and . Web Services container has associated therewith another Service Container object which in turn has associated therewith Services A and B as represented by resource objects and . Finally Web server container has associated therewith Servers A and B as represented by resource objects and . Thus in this example there are multiple web servers services applications queues and the like all of which can be derived within the same resource space. Moreover as can be seen the object space provides a tree hierarchy based representation of the Web service topology. like the simple case of illustrates representative transaction flows for this more complex service topology once again illustrating how one or more transactions may be invoked across the set of resources. In for example one transaction flow goes from Server B through Web application B through Service B through Queue A . Using the present invention one or more policies or policy instances are then managed i.e. synchronized across the object containers and resources.

Thus for example as illustrated in assume the server B resource object has associated therewith a quality of service QoS policy and that Application B resource object has a QoS policy . According to the invention in view of the representative transaction flow as shown in a coupling is provided between these objects to synchronize the QoS policies in the manner that has been previously described.

While the invention has been described in the context of resource objects such as Web servers applications services queues this is not a limitation. A given resource object or container may comprise a database resource a mainframe resource application resources an access control manager an identity manager a provisioning manager a policy manager and the like.

The techniques described above may be applied to all types of policies. How a particular policy is implemented is outside the scope of the present invention as such mechanisms and processes are well known in the art. Thus for example products such as Tivoli Intelligent Orchestrator Provisioning Manager may be used to touch configure one or more components in the hierarchical resource space and such tools are use to define administer manage and control the one or more policies. As has been described the present invention extends such products tools to facilitate the synchronization and automated coordination of policy across one or more transaction resources in a Web service environment. Typically these policies are coordinated in the manner described above i.e. by applying and then programmatically enforcing one or more mappings across a visual representation such as a hierarchical resource space. As is well known such representations can be generated from a network topology for an entire infrastructure or some portion thereof using well known tools.

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the inventive transform is implemented in software which includes but is not limited to firmware resident software microcode and the like. Furthermore as noted above the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain or store the program for use by or in connection with the instruction execution system apparatus or device. The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device . Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

One or more of the above described functions namely defining the couplings monitoring for policy updates and propagating changes across the hierarchical resource space may also be implemented as a service.

While the above describes a particular order of operations performed by certain embodiments of the invention it should be understood that such order is exemplary as alternative embodiments may perform the operations in a different order combine certain operations overlap certain operations or the like. References in the specification to a given embodiment indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic.

Finally while given components of the system have been described separately one of ordinary skill will appreciate that some of the functions may be combined or shared in given instructions program sequences code portions and the like.

