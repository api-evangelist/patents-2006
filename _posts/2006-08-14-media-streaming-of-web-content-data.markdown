---

title: Media streaming of web content data
abstract: Methods for streaming web content data via a computer-readable medium. The web content data comprises one or more media samples. The media samples are encoded in a streaming media format as a web component stream. The web component stream is combined with other component streams comprising additional data other than web content data into a presentation stream. The presentation stream is transmitted via a media server to a client. Rendering commands, which are included in one or more rendering samples encoded in the web component stream along with the media samples, coordinate synchronization between the media samples and the additional data when the client renders the presentation stream.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07577714&OS=07577714&RS=07577714
owner: Microsoft Corporation
number: 07577714
owner_city: Redmond
owner_country: US
publication_date: 20060814
---
The present invention relates to the field of media streaming. In particular this invention relates to a method for streaming web content data such as hypertext markup language HTML pages and images.

Conventional mechanisms for delivering web content data such as HTML pages or images to a client machine for viewing involve pulling the web content data e.g. HTML pages images or script from a web server when they are needed for display on the screen of the client machine. For the viewing experience of the client this can result in components of the web content data not being available at the correct time e.g. an image not yet completely downloaded at a time prescribed by the content author for display . Moreover requests for such web content data come in bursts resulting in spikes in network bandwidth demand when such data is being delivered over a network. Furthermore such conventional pull down mechanisms for web presentations lack synchronization and timing between multiple components of the presentation such as audio video and images. Synchronization and timing between multiple components of the presentation are very difficult and present many authoring timing and delivery issues. As an example web content data is delivered through a web server whereas audio and video content is delivered in one or more separate streams through a separate streaming server. As a result the content author would have to invest a substantial amount of time and effort to present the various types of content together in a synchronized manner to the client machine. As another examples the conventional pull down mechanisms generally allocate the fullest server bandwidth available for the downloading or pulling of web content data. As a result there is no idle bandwidth available for the delivery of audio and video data and audio and video data may not be delivered on time for synchronous playback with web content data.

Delivering web content data in this conventional mechanism as a real time or live presentation i.e. as a presentation occurs can be especially problematic. In a typical live presentation of web content data such as slides and images the web content data either need to be delivered ahead before the live presentation begins or are pulled from the web server as the live presentation is being conducted. In such cases every flip or trigger of the web content data can cause numerous pulling requests or hits to the web server thus requiring the web server to have higher bandwidth capacity. Therefore there is a need for delivering web content data in a single multicast stream bandwidth that is managed throughout its delivery and with lower bandwidth usage and costs. Moreover there is a need for a tool that enables a content author to synchronously present web content data to a client.

In the past some proprietary implementations provided split trigger mechanisms that trigger web content data into different frames within an HTML page to achieve the appearance of streamed multimedia delivery. Nevertheless such implementations may still cause sudden pulling requests that result in higher aggregate bandwidth and incoherence between multiple components of a presentation during seeking e.g. skip pause fast forward and fast rewind operations. Other proprietary implementations such as HTML TIME even though provided synchronization between multiple components of a presentation did not support streamed multimedia delivery and dynamic insertion of web content data for real time or live presentations. Furthermore enhanced television programming implementations such as ATVEF even though provided streamed multimedia delivery and tools for authoring live presentations did not provide mechanisms to avoid data loss over lossy transport. In addition these enhanced television programming implementations did not allow seeking capabilities that enhance the overall viewing experience of a client.

Some other streaming techniques have supported partial synchronization between multiple pieces of media. For example some proprietary implementations such as SMIL have streamed text and images synchronized with audio and video. However there is a need for an implementation that supports streaming of web content data such as HTML pages. Furthermore these prior streaming techniques did not provide for a single stream or single file implementation that allows scalability and smooth synchronization between multiple components. For example certain proprietary steaming techniques delivered image data in one stream text in another stream audio and video data in yet other separate streams and then attempted to synchronize all these data on a client machine. Such implementations did not provide effective synchronization and smooth delivery.

For these reasons streaming web content data in a single managed stream or single file implementation via a single media server is needed to address one or more of these and other disadvantages.

The invention includes a data schema for packaging web content data and for delivering the packaged data over a network to a client machine. In particular the invention addresses the problems of efficient delivery and timing in several ways. First the invention allows a content author to package web content data into a single synchronized web component stream and time line. In addition the invention facilitates the content author to encode the web content data for efficient delivery for the bandwidth and topology of a given network. As a result of the invention web content data is streamed over a network for efficient metered delivery. Finally synchronized playback of the web content data with other media such as audio and video data can be conducted at a client machine.

Through the invention authoring of web based presentation into a presentation stream or presentation file that synchronizes the delivery and playback of individual media components along a common time line is enabled. Having a presentation stream or presentation file enables delivery and playback synchronization seeking and portability that is much more effective than using the conventional pulling mechanisms. In addition the invention allows efficient delivery of web based presentation for unicast multicast or file delivery. The invention also allows bandwidth sensitive metered delivery over a network or from a file system device. Finally the invention enables playback of synchronized web based presentation by synchronizing web content data audio video and other media content in a presentation stream or presentation file.

Some key uses of this invention include but are not limited to corporate training product demonstration and distance learning. Furthermore the invention enables multicast live streaming unicast live streaming and unicast on demand streaming from a media server via a local area network LAN wide area network WAN or remote dial up connection navigation to sections of a presentation by an end viewer and archived presentation that is available for streaming after the fact or for download to local devices for mobile playback. However the flexible implementation of the invention can be used for general delivery of any content e.g. documents content or software to a client machine.

In accordance with one aspect of the invention a data field is encoded in a data signal for transmission over a communications channel. The data field includes web content data in a streaming media format. The web content data comprises a web component stream. The web component stream further comprises a media sample.

In accordance with another aspect of the invention a method authors and encodes a web component stream that comprises a media sample. The method includes setting a rendering time for the media sample. The method also includes setting a pre roll time for the media sample. The method further includes formatting the media sample into a web component stream as a function of the set rendering time and the set pre roll time.

In accordance with yet another aspect of the invention a method renders a web component stream. The method includes receiving the web component stream from a computer readable medium. The method also includes retrieving a media sample from the web component stream. The method further includes rendering the media sample.

In accordance with yet another aspect of the invention a method serves a web component stream. The method includes receiving the web component stream. The method also includes receiving a playback request from a client for the web component stream. The method further includes delivering the web component stream to the client in a single stream and or a single file implementation.

In accordance with yet another aspect of the invention a method streams web content data from a first computer to a second computer connected to the first computer via a media server. The method includes encoding on the first computer web content data that comprises a media sample into a web component stream and combining and or grouping the web component stream along with any other component stream comprising additional data other than web content data into a presentation stream and or a presentation file. The method also includes delivering the presentation stream and or the presentation file from the first computer to the media server. The method also includes requesting from the second computer to the media server a playback request for the presentation stream and or the presentation file. The method also includes delivering from the media server to the second computer the presentation stream and or the presentation file based on the playback request. The method further includes retrieving on the second computer the media sample from the web component stream included in the presentation stream and or the presentation file. Furthermore the method includes rendering the media sample on the second computer.

Referring now to the drawings there is generally indicated at an example of the structure and format of a presentation stream according to the invention. In particular generally indicates a data signal being transmitted over a time t having one or more data fields comprising data encoded in a streaming media format. In this example the data fields include an audio component stream a video component stream a web component stream and a script component stream although other streams or combinations of streams are also contemplated. Even though in this example the presentation stream is a collection of various component streams e.g. the various component streams are multiplexed to form a single presentation stream it is contemplated that the various component streams are not multiplexed into a presentation stream and are transmitted independently of each other via a plurality of communications channels. Also it is contemplated that the various component streams may share a single managed bandwidth for delivery to a client machine without being multiplexed into a presentation stream. Furthermore although in this example the presentation stream includes various component streams it is contemplated that only a web component stream is included in the presentation stream or that a web component stream comprises the sole data signal. As generally indicated at the web component stream further includes one or more media samples. The media samples each contains a type of data such as HTML joint photographic experts group JPEG graphics interchange format GIF etc. In one embodiment of the invention media samples that form a single rendering point of a presentation e.g. a single web page and various attachments to the web page that are to be presented at the same rendering time are sequentially transmitted in a time line as a group. For example the HTML sample the JPEG sample and the GIF sample of the web component stream together form a single rendering point of a presentation and are sequentially transmitted in a time line as a group of media samples . Generally immediately following this group of related media samples in a sequential time line is a rendering sample . The rendering sample includes rendering commands for this group of media samples . The rendering commands include among other things a rendering time for each of the related media samples . In particular the rendering commands include information indicating to a renderer when to render the media samples so that the rendering commands coordinate synchronization between the media samples and additional data other than web content data such as the audio component stream and the video component stream . In another embodiment of the invention if a single media sample forms a single rendering point e.g. a plain web page with no attachments a rendering sample is transmitted immediately after the single media sample in a sequential time line. Likewise the rendering sample includes a rendering command for the single media sample.

Referring to the structure of each media sample according to the invention is shown. Each media sample comprises two fields one field containing media data and the other field containing a header for the media sample . generally indicates in more detail the structure of the header of the media sample . As shown in the header includes tags indicating information regarding the media sample . The tags may indicate among other things a rendering time for the media sample a pre roll time for the media sample a send time for the media sample a type of the media sample a name of the media sample a size of the media sample a compression type of the media sample and a uniform resource locator URL for the media sample .

Another advantage of the web component stream format as shown in is that separate web content data delivery and content trigger mechanisms allow media samples to be delivered ahead of time and then triggered for display. Because several separate media samples may all need to be triggered for display simultaneously one cannot use end of content delivery to trigger the display of that content. For example in HTML sample IMAGE sample and IMAGE sample all need to be triggered simultaneously. Thus all of these media samples need to be completely delivered to a client machine before Rendering sample may trigger the rendering or display of these media samples altogether. The invention also enables handling of multiple web component streams so that different components of a presentation can be delivered independently. For example if two frames within a web page receive different components e.g. slides banners or ticker information each frame has a separate web component streaming track. There are several ways to implement delivery of multiple web component streams. In one embodiment of the invention multiple web component streams may be delivered independently of each other via a plurality of communications channels. In another embodiment of the invention multiple web component streams may be multiplexed and delivered as a presentation stream. In yet another embodiment of the invention multiple web component streams may share a single managed bandwidth for delivery to a client machine without being multiplexed into a presentation stream.

For some network configurations such as multicast packets from a web component stream can be lost. Using one way or sessionless protocols that have no back channel can mean data loss without recovery. Thus for the web component stream format of the invention media samples are redundantly encoded in a web component stream so that during a time period a particular media sample would appear at least twice in the web component stream. The invention defines a mechanism for redundantly writing data into a component stream so that if the data is lost or if a client joins a presentation in mid session the missed data is still delivered in a timely manner without any additional bandwidth requirement on the network. For example if a client connects through a media server for a live broadcast and misses a media sample the client may just wait for a redundant web component stream. In the case where the missed media sample is a redundant sample it will be transmitted again to the client automatically at the next redundant transmission.

There is also generally illustrated at a pre roll time . The pre roll time indicates how long a content author has to get data to a client before it can start showing the client that data. For live presentations a content author must calculate and set up a pre roll time because once a media server starts presenting a web component stream to a client the media server should be in a position to provide all media samples to the client in the future on time so that there is no interruption of the web component stream and the presentation is seamless. Thus the pre roll time is a value that indicates that a live presentation can begin after a certain period of time so that the presentation will be without interruption for the rest of the way throughout the presentation. Another advantage of the pre roll time is that the client only waits once for the initial pre roll time but does not have to wait during the rest of the presentation. By waiting the pre roll time a media sample should always have been delivered to the client machine before the rendering time of the media sample. In general pre roll time ranges from 3 to 40 seconds depending upon the intention of a content author and is generally calculated as the maximum size of a media sample divided by the network bandwidth available for data streaming.

As illustrated in the client requests to the media server a seeking operation e.g. pause skip fast forward fast rewind so that the whole presentation begins rendering at a seeking point . In response the media server looks at each web component stream individually and finds the last clean point preceding the seeking point in the time line for each of the web component streams. Similarly the media server looks at the video component stream and finds the last key frame preceding the seeking point in the time line. Thus the media server finds key frame for the video component stream clean point of BANNER AD sample for the banner component stream and clean point of SLIDE sample for the slides component stream . However the media server realizes that BANNER AD sample of the banner component stream may not be ready for rendering at the seeking point because the rendering sample of BANNER AD sample is encoded after the seeking point along the time line. Therefore the media server looks further back to clean point of BANNER AD sample as BANNER AD sample is ready to be rendered at the seeking point . After the media server finds a corresponding clean point or key frame for each of the component streams of the complete presentation the media server delivers to the client machine the media sample or video data that is encoded after the found clean point or key frame for each of the component streams. Thus the media server delivers to the client machine video data that is encoded after key frame in the video component frame . Furthermore the media server delivers to the client machine BANNER AD samples encoded after clean point in the banner component stream and SLIDE samples encoded after clean point in the slides component stream . After a pre roll time e.g. buffering time for data transmission BANNER AD sample of the banner component stream SLIDE sample of the slides component stream and the video data encoded after key frame in the video component stream are all ready to be rendered at the client machine. Block of indicates data that is delivered from the media server to the client machine during this pre roll time.

An advantage of ragged clean points handling is that all component streams within a presentation have independent clean points on them so that pre roll e.g. buffering can happen from a prior clean point for each component of the presentation. In this way a media server is able to deliver various components of the presentation to a client machine in a synchronous manner. Thus a client does not encounter a bad seeking experience where while video and audio data is being rendered on the client machine the slide or image to be presented simultaneously with the video and audio data is still not completely delivered and thus not ready to be rendered. Such a seeking experience may occur because it generally takes longer time to stream a slide or image than the time it takes to stream video or audio data.

Referring now to there is generally shown an exemplary timing diagram in block form illustrating the difference between a prior art web content data delivery scenario and the delivery of web content data via a web component stream scenario according to one embodiment of the invention. In this illustration time is indicated along the horizontal axis and bandwidth of each media sample being transmitted is indicated along the vertical axis. As indicated in graph A in the conventional web content data delivery scenario individual media samples are downloaded piece by piece with varying peak bandwidth that depends on the bandwidth utilization of the web server. Particularly because the network bandwidth is shared among multiple clients any sudden pulling or downloading requests from multiple clients may cause the web server to dedicate only a portion of the network bandwidth for each client thus resulting in jerky bandwidth utilization over time. For example graph A illustrates that IMAGE sample is delivered to a client with the greatest bandwidth utilization followed by HTML sample IMAGE sample and SLIDE sample which is delivered to the client with the least bandwidth utilization. In this example SLIDE sample is delivered to the client with the least bandwidth utilization because the web server may be responding to numerous pulling or downloading requests from other clients at the same time and thus allocating a portion of the network bandwidth for those clients. In addition because the web server may dedicate the full network bandwidth for sudden pulling or downloading requests from other clients no idle network bandwidth may be available for a particular client. This results in time gaps between downloading of individual media samples as exemplified by the time gap the occurred between the downloading of HTML sample and the downloading of SLIDE sample in graph A. Therefore the conventional scenario of graph A may result in prolonged overall download time of a presentation and longer delay for presentation playback.

In contrast in the web component stream scenario according to the invention as indicated in graph B individual media samples are encoded in a web component stream format such that the media samples are streamed within a substantially constant aggregate bandwidth and are substantially contiguous to each other in a sequential time line. For example IMAGE sample HTML sample SLIDE sample and IMAGE sample in the web component stream scenario of graph B are streamed within a substantially constant aggregate bandwidth and are substantially contiguous to each other in a sequential time line. This format enables a content author to assign a substantially constant aggregate bandwidth to the web component stream so as to avoid uneven bandwidth utilization and thus freeing up bandwidth on the network transmitting the media samples for more efficient bandwidth employment. In addition by encoding media samples in a continuous web component stream of contiguous media samples a client encounters better overall synchronization and less delay while media samples are retrieved for rendering as there is essentially no time gap between streaming of individual media samples. Thus the media samples along with other data such as audio and video data that together form a complete presentation are inside of a contained smooth bandwidth utilization which allows for networked delivery via a single media server and delivery via a computer storage medium having limited bandwidth capacity.

As also generally shown in the web component stream scenario of the invention may result in a more accurate rendering time than that of the conventional scenario because the web component stream scenario reduces the possibility of uneven bandwidth utilization. For example according to the invention IMAGE sample of the web component stream scenario begins streaming at t and is in the client machine ready to be triggered for rendering at t or thereafter which times are respectively earlier than the times at which the corresponding conventional IMAGE sample begins downloading at t and can be rendered at t. Also HTML sample of the web component stream scenario begins streaming at t and is in the client machine ready to be triggered for rendering at t or thereafter which times are respectively earlier than the times at which the corresponding conventional HTML sample begins downloading at t and can be rendered at t. Thus by using the web component stream scenario of graph B of the invention the media samples are streamed and stored in the client machine ready to be triggered for rendering at appropriate rendering times. In contrast in the conventional scenario of graph A the web server may not be able to completely deliver the media samples to the client machine on time for rendering due to the possibility of web server overload.

These advantages result in a more efficient use of the bandwidth on a network. For example if there are a large number of clients receiving the same presentation there will be a smooth network utilization because all clients essentially use a constant reduced aggregate bandwidth as shown by graph B of the network transmitting the presentation. In the conventional transmissions as shown by graph A every time a slide or page flips there are a large number of clients trying to get that slide or page which may cause lost data as a result of server overload. In addition the web component stream scenario of the invention enables the possibility of multicast which means that one can stream the web content data from a media server over a multicast to multiple clients with only one copy of that data on the network. By enabling multicast the invention further reduces the possibility of server overload and multiple pulling requests from multiple clients because there is only one network utilization rather than a dedicated connection for each client.

As generally represented by arrow in block A a the authoring application encodes the media samples into a web component stream and a web component stream . In addition rendering commands are packaged within rendering samples which are further encoded in the web component streams and . A rendering sample is encoded following a group of related media samples that form a single rendering point. In this way the rendering sample can trigger a renderer to render this group of related media samples simultaneously and in a synchronous manner. As also generally shown in block A a the authoring application may encode data other than web content data into separate component streams such as an audio component stream and or a video component stream . In one embodiment of the invention the authoring application may author the web content data in multiple languages and encode the authored web content data e.g. media samples in multiple web component streams with each web component stream corresponding to one of the multiple languages. In yet another embodiment of the invention the authoring application may also encode the web content data in a plurality of web component streams with each web component stream having an assigned bandwidth. In yet another embodiment of the invention the authoring application may encode the web content data in a plurality of web component streams with each web component stream corresponding to an assigned data quality level. In these embodiments each web component stream can be generally defined as being exclusive or independent from other web component streams in a presentation stream or presentation file based on the language bandwidth or quality level setting of the web component stream. The web component streams having the appropriate language bandwidth or quality level may then be automatically selected by a renderer on a client machine when the renderer requests the presentation stream or presentation file from a media server. By authoring web component streams having different languages bandwidths or quality levels in a presentation stream or presentation file for multiple target clients the invention enables scalability. Using the above described mechanism the authoring application may also enable scalability for other data such as audio and or video data.

As generally illustrated in block A a the authoring application delivers the web component streams and along with any other component streams that are to be included in the same presentation e.g. audio component stream and or video component stream to a format writer . In one embodiment of the invention the format writer may be a software component that writes the format of a web component stream and groups various component streams into a presentation stream or presentation file. The format writer may also perform other miscellaneous functions. In one embodiment of the invention the format writer may include clean points in the web component streams and to represent key frames for the web content data. As discussed above these clean points allow a media server to respond to seeking of a particular media sample by a client. In another embodiment of the invention the format writer may enable bandwidth sharing by allocating bandwidth to multiple component streams of varying bandwidth. The format writer may also arrange a plurality of media samples in a web component stream in a synchronized manner so that each media sample is rendered on a client machine at an appropriate time. Furthermore the format writer may create a header in the presentation file and store the rendering commands for the media samples in the header as represented by box . As represented by arrow the format writer delivers the presentation file to a media server via a communications channel or via a computer storage medium such as compact disk read only memory CD ROM . The presentation file may also be stored in a computer readable medium for future revision or other use.

One important aspect of the functionality of the format writer not illustrated in is that the format writer may apply digital rights management DRM encryption to the content of the presentation file. In general DRM is the act of encrypting a presentation file and then distributing that presentation file to a market e.g. over the Internet . The encrypted presentation file may be decrypted and viewable to anyone who owns the right to view the presentation file or is otherwise authorized to view the presentation file. Thus a client may not view video hear audio or render a media sample included in an encrypted presentation file unless the client owns the right or is otherwise authorized to playback the entire encrypted presentation file. Moreover the right to programmatically access the encrypted presentation file is generally restricted to authorized persons. For example an individual may have the right to render a media sample in a presentation file but may not copy or print that media sample unless the individual also has the right to copy or print it out. Thus an unauthorized person may not copy the encrypted presentation file for reselling or redistribution. One may apply DRM in a corporate environment where a content author may desire to limit the audience of a presentation. Furthermore a content author may license an encrypted presentation file on a computer readable medium without the risk that a licensee may make multiple copies of the presentation file and distribute them improperly.

Turning to an example of the real time scenario as generally illustrated by block A b a content author captures web content data and or media data using one or more multimedia devices as represented by box . For example the multimedia device may be a digital camera a digital recorder an application program that creates slides presentation or any other software or hardware device that allows the content author to generate or create web content data and or media data. The content author also sets a rendering time and a pre roll time for each piece of the web content data and or media data. A real time encoder encodes each piece of the web content data into a media sample in real time. As further indicated by arrow the media sample is encoded into a web component stream and or a web component stream . Media data such as audio and or video data are encoded into an audio component stream and or a video component stream . Similar to the authoring application of the offline scenario illustrated by block A a the real time encoder may also issue a rendering command calculate and set a send time calculate a substantially constant bandwidth assign a URL and arrange a time line layout for the media sample. In another embodiment of the invention the content author may provide scalability for the web content data and or media data using the mechanism described above.

The web component streams and which may be accompanied by the audio component stream the video component stream a script component stream and any other component streams is delivered to a format writer which corresponds to the format writer of the offline scenario illustrated by block A a. In the format writer redundant web content data may be written to the web component streams and so as to accommodate delivery over lossy transports. For example the format writer may continuously write a particular media sample to the web component streams or so that during a period of time that media sample would appear at least twice in the web component streams or . In addition the format writer may also include clean points in the web component streams and to represent key frames for the web content data. The format writer combines the various component streams into a presentation stream . As indicated by arrow the presentation stream is streamed to a media server. In this example the various component streams are multiplexed into the presentation stream . However it is contemplated that the various component streams are streamed independently of each other to a media server and or to a client machine via a plurality of communication channels. It is also contemplated that the various component streams may share a single managed bandwidth for delivery to a media server and or to a client machine without being multiplexed into a presentation stream. It should be noted that no matter which delivery mechanism is employed these component streams form a logical stream in a sense that they together form a complete and synchronous presentation.

In one embodiment of the real time scenario of the invention the format writer may apply DRM to the presentation stream in a manner similar to which the format writer of the offline scenario of block A a applies DRM to the presentation file. In another embodiment of the real time scenario the content author may broadcast or stream the presentation stream live and simultaneously record it on a computer readable medium. Thus the content author would have a complete reproduction available immediately after the live presentation. The content author may deliver the reproduction to a media server on demand to those who had missed the live presentation. In yet another embodiment of the real time scenario a media sample having a large file size may be broken up into pieces. A media sample that has been broken up into pieces is called a multi part sample. Furthermore each piece of a multi part sample may include a header with a tag indicating that it is a part of the multi part sample. By breaking up a large media sample into pieces the invention enables optimization of memory utilization because the media sample is read into the format reader and delivered to a client via a media server piece by piece. For example during a presentation if a client decides to skip rendering a particular multi part sample a media server may simply immediately begin delivering the next media sample in a time line without the need to finish downloading the full data size of the skipped multi part sample.

Referring next to there is generally illustrated an example of the operation of a media server serving a web component stream according to the invention. Generally the media server receives a presentation stream from a content author. In another embodiment of the invention the media server may receive a presentation file from a content author. After receiving the presentation stream or the presentation file from a content author the media server may receive a playback request from a client for the presentation stream or presentation file . It is also contemplated that the media server may receive the playback request for the presentation stream or presentation file prior to receiving the presentation stream or presentation file . In one embodiment of the invention the client may also request a language for the web content data and the media server may deliver to the client the web component stream having the requested language in the presentation stream or presentation file . For example the media server may exclude those component streams that do not have the requested language from the presentation stream or presentation file so that the media server provides to the client a component stream having the requested language. Similarly the client may also request a bandwidth or a quality level for the web content data and the media server may deliver a component stream having the requested bandwidth or the requested quality level in the presentation stream or presentation file . In addition as indicated by block the media server may also handle a seeking request from a client. As generally described above and illustrated in the media server responds to a seeking request from a client by handling ragged clean points among various web component streams in the presentation stream or presentation file .

In yet another embodiment of the invention the media server may provide DRM to the presentation stream or presentation file in a manner similar to that of the format writer or of . Furthermore the media server may provide content management to the presentation stream or presentation file . For example the media server may archive the presentation stream or presentation file or maintain individual component streams in a single archives Thus the media server may provide efficient media content management for future delivery to a client.

After receiving the playback request from the client the media server delivers the presentation stream or presentation file to the client. It is also contemplated that the media server may deliver the presentation stream or presentation file to the client before or without receiving the playback request from the client. The media server has a range of delivery options as represented by blocks and . In particular the delivery options of the media server may include but are not limited to progressive download progressive streaming unicast on demand unicast broadcast or multicast broadcast. For example the media server may enable unicast broadcast by dedicating a single connection for each client via transmission control protocol TCP . In another example the media server may enable multicast broadcast by allowing multiple clients to connect with the media server via user datagram protocol UDP . Since UDP does not provide for reliable and secure data delivery web content data may be lost while being delivered to the clients. However by streaming the web content data redundantly as noted above and illustrated by each of the clients receives the lost web content data automatically in a short period of time. In one embodiment of the invention the media server may also provide accelerated streaming which may result in less delivery time to the client. For example the media server may continuously stream web content data to the client if the media server detects that there is enough idle bandwidth available in the network connection. In yet another embodiment of the invention the media server may handle data resend error correction logging and all other standard streaming media server functions.

As generally illustrated by the presentation stream or presentation file is delivered to a format reader . In one embodiment of the invention the format reader may be a software component that is capable of reading the format of a presentation stream and web component stream. The format reader extracts a web component stream from the presentation stream or from the presentation file and delivers the extracted web component stream to a web component stream rendering filter . In addition the format reader may also extract another component stream comprising data other than web content data e.g. audio component stream and or video component stream from the presentation stream or presentation file and deliver the extracted component stream directly to a renderer. Such a renderer may be embedded in a browser or in a multimedia player . Furthermore there is generally a different renderer for each type of component stream. For example an audio component stream is delivered to an audio renderer such as an audio player application and a video component stream is delivered to a video renderer such as a video player application whereas both the audio renderer and the video renderer may be embedded in the browser or in the multimedia player of the client machine. Generally a client side player control controls the rendering time of the audio component stream and or the video component stream and coordinates synchronization with web content data. However it is contemplated that the presentation stream or the presentation file may only include web content data e.g. without audio and video data .

As further generally illustrated by the web component stream rendering filter handles retrieving a media sample from the extracted web component stream. In particular the web component stream rendering filter retrieves a media sample by extracting individual packets from the extracted web component stream and re constructing the media sample. As represented by arrow the retrieved media sample is written into a cache in a timely manner e.g. via cache application programming interface . For a media sample that has been encrypted using DRM it is decrypted and written into the cache if the client is authorized to render the media sample. In addition for a multi part sample the web component stream rendering filter may first create an entry in the cache and then re construct and write the multi part sample to the cache entry piece by piece as the web component stream rendering filter receives parts of the multi part sample. Furthermore for delivery via unicast if the multi part sample is not completely delivered the format reader and or the communications channel through which the presentation stream or presentation file is delivered may notify the media server to resend the missing pieces. Generally the multi part samples that are retrieved from the same presentation stream or from the same presentation file are stored in the cache within a single file. For security issues this prevents multi part samples not stored within the same file in the cache from being associated with other multi part samples from another file.

After the media sample has been stored in the cache a renderer such as the browser or the multimedia player may render the media sample at an appropriate time. In this example the retrieved media sample is written and stored in the cache before rendering. It is also contemplated that the retrieved media sample may not be written into the cache and instead may be delivered directly to the renderer for rendering. In general a rendering sample that is encoded in the web component stream along with the media sample includes a rendering command which includes a rendering time for the media sample and triggers the renderer to begin rendering the media sample. In another embodiment of the invention the rendering command may be included in the header of the presentation file . The player control issues the rendering command by sending a request to the renderer to retrieve the specified media sample out of the cache . For example the rendering command triggers the browser to display an HTML page and the HTML page in turn requests a particular media sample that has already been stored in the cache to be rendered. In one embodiment of the invention in retrieving the individual media samples from the cache the renderer such as the browser or the multimedia player references a particular media sample by appending a custom protocol to a URL of the media sample. The custom protocol may enable the renderer to search for the media sample only in the cache . Another advantage of the custom protocol is that it may create a security zone for the downloaded or streamed web content data. In particular every time a client renders a presentation stream or a presentation file a different security zone is created. In other words for every rendering session of a presentation stream or a presentation file there is a unique security zone so that different rendering sessions of presentation stream or presentation file cannot communicate with each other. For example by using a custom protocol to create a security zone as opposed to using the hypertext transfer protocol HTTP to access a media sample a client is prevented from accessing a restricted media sample by specifying a domain name as part of a web component stream. Thus media samples of a current rendering session of presentation stream or presentation file may not communicate with or access to media samples of a previous rendering session of presentation stream or presentation file. In addition different frames in a web page may not programmatically access or communicate with data from another frame unless the frames are retrieved from the same security zone. In practical applications this security aspect of the invention may prevent one frame from accessing or communicating with private corporation information that may be included in another frame within the same web page.

As described above after the media sample is stored in the cache it is invoked into the renderer e.g. on a web page and synchronized with all other data being rendered by the player control . The rendering command that is included in the rendering sample encoded in the web component stream indicates to the browser or multimedia player when and how to render the individual media sample. One may enable this aspect of the invention without any modification to the standard browser functionality for cache stuffing or file rendering. If the renderer renders the media sample successfully and if a subsequent redundant media sample is delivered to the client the format reader and or the web component stream rendering filter knows that the renderer has already rendered this media sample and ignores the redundantly delivered media sample. In addition the player control in conjunction with the web component stream rendering filter may handle all the seeking and playback requests from scripts in the renderer or from the client.

At the renderer such as the browser or the multimedia player the rendering commands for the media samples coordinate synchronization between the media samples and additional data other than web content data e.g. audio or video data . Therefore by delivering web content data and other data in a presentation stream or in a presentation file they will be rendered as part of a synchronized presentation. In one embodiment of the invention the client may also store a presentation stream or a presentation file in a computer readable medium such as local hard disk or CD ROM for local or mobile playback.

The computer typically has at least some form of computer readable media. Computer readable media which include both volatile and nonvolatile media removable and non removable media may be any available medium that can be accessed by computer . By way of example and not limitation computer readable media comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer storage media include RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store the desired information that can accessed by computer . Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. Those skilled in the art are familiar with the modulated data signal which has one or more of its characteristics set or changed in such a manner as to encode information in the signal. Wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media are examples of communication media. Combinations of the any of the above are also included within the scope of computer readable media.

The system memory includes computer storage media in the form of removable and or non removable volatile and or nonvolatile memory. In the illustrated embodiment system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. For example illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media. FIG. also shows a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards DVD digital video tape solid state RAM solid state ROM and the like. The hard disk drive and magnetic disk drive and optical disk drive are typically connected to the system bus by a non volatile memory interface such as interface .

The drives or other mass storage devices and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies.

A user may enter commands and information into computer through input devices or user interface selection devices such as a keyboard and a pointing device e.g. a mouse trackball pen or touch pad . Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are connected to processing unit through a user input interface that is coupled to system bus but may be connected by other interface and bus structures such as a parallel port game port or a Universal Serial Bus USB . A monitor or other type of display device is also connected to system bus via an interface such as a video interface . In addition to the monitor computers often include other peripheral output devices not shown such as a printer and speakers which may be connected through an output peripheral interface not shown .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to computer . The logical connections depicted in include a LAN and a WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and global computer networks e.g. the Internet .

When used in a local area networking environment computer is connected to the LAN through a network interface or adapter . When used in a wide area networking environment computer typically includes a modem a digital subscriber line DSL not shown or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external is connected to system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to computer or portions thereof may be stored in a remote memory storage device not shown . By way of example and not limitation illustrates remote application programs as residing on the memory device. It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Generally the data processors of computer are programmed by means of instructions stored at different times in the various computer readable storage media of the computer. Programs and operating systems are typically distributed for example on floppy disks or CD ROMs. From there they are installed or loaded into the secondary memory of a computer. At execution they are loaded at least partially into the computer s primary electronic memory. The invention described herein includes these and other various types of computer readable storage media when such media contain instructions or programs for implementing the steps described below in conjunction with a microprocessor or other data processor. The invention also includes the computer itself when programmed according to the methods and techniques described herein.

For purposes of illustration programs and other executable program components such as the operating system are illustrated herein as discrete blocks. It is recognized however that such programs and components reside at various times in different storage components of the computer and are executed by the data processor s of the computer.

Although described in connection with an exemplary computing system environment including computer the invention is operational with numerous other general purpose or special purpose computing system environments or configurations. The computing system environment is not intended to suggest any limitation as to the scope of use or functionality of the invention. Moreover the computing system environment should not be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include but are not limited to routines programs objects components and data structures that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

In operation a content author uses an authoring application that resides in a computer such as computer to execute computer executable instructions to create or capture web content data and format the web content data into a media sample which includes a header with tags indicating information relating to the media sample . The authoring application executes instructions to encode the media sample into a web component stream . The authoring application also executes instructions to encode a rendering sample which comprises a rendering command for the media sample in the web component stream . The authoring application further executes instructions to encode audio and video data into an audio component stream and a video component stream . The authoring application further executes instructions to deliver the web component stream along with the audio component stream and the video component stream and a script component stream to a format writer or . The format writer or executes instructions to combine these component streams into a presentation stream or group these component streams into a presentation file. The content author then uses the computer to execute instructions to deliver the presentation stream or the presentation file to a media server via a magnetic disk an optical disk a LAN or a WAN .

In operation a server computer such as computer or media server executes computer executable instructions to receive a presentation stream or a presentation file from a content author. The server computer may execute instructions to archive the presentation stream or the presentation file in the hard disk drive for future playback requests. The server computer further executes instructions to receive a playback or seeking request from a client. The server computer further executes instructions to deliver the presentation stream or the presentation file to the client via a magnetic disk an optical disk a LAN or a WAN .

In operation a client uses a computer such as computer to execute computer executable instructions to receive a presentation stream or a presentation file . The computer executes instructions to deliver the presentation stream or the presentation file to a format reader . The format reader executes instructions to retrieve a web component stream out of the presentation stream or presentation file . The format reader further executes instructions to deliver the retrieved web component stream to a web component stream rendering filter . In addition the format reader executes instructions to retrieve an audio component stream a video component stream and a script component stream from the presentation stream or presentation file and to deliver these component streams to a browser or multimedia player . The web component stream rendering filter executes instructions to retrieve individual media samples from the retrieved web component stream . The web component stream rendering filter further executes instructions to deliver the retrieved media samples to a cache . A player control that is embedded in the browser or multimedia player executes instructions to receive a rendering sample which includes rendering commands for the retrieved media samples . Responding to the rendering commands the player control further executes instructions to retrieve the media samples from the cache and to render the media samples on the browser or multimedia player . As the browser or the multimedia player executes instructions to render the media samples rendering commands that are included in the rendering sample execute instructions to coordinate synchronization between the media samples the audio component stream and the video component stream .

When introducing elements of the present invention or the embodiment s thereof the articles a an the and said are intended to mean that there are one or more of the elements. The terms comprising including and having are intended to be inclusive and mean that there may be additional elements other than the listed elements.

In view of the above it will be seen that the several objects of the invention are achieved and other advantageous results attained.

As various changes could be made in the above constructions products and methods without departing from the scope of the invention it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.

