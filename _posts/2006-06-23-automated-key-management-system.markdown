---

title: Automated key management system
abstract: A system for automated cryptographic key management comprises a key control system, a key management agent system, and a key system application program interface. A method for automated cryptographic key management is also disclosed. The method comprises the automatic generation of cryptographic keys by the key control system and distribution of such keys by the key control system to the key management agent system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08295492&OS=08295492&RS=08295492
owner: Wells Fargo Bank, N.A.
number: 08295492
owner_city: San Francisco
owner_country: US
publication_date: 20060623
---
This application is entitled to the benefit of and claims priority to provisional U.S. patent application Ser. No. 60 694 270 filed on Jun. 27 2005 which is incorporated herein by reference in its entirety.

The present invention relates generally to cryptographic key management and in particular to a system for automated cryptographic key management.

Institutions such as banks and retail establishments often conduct business electronically for example through the use of the internet. Thus such institutions and their customers require a secure environment that has the capability of managing cryptographic keys. Cryptographic keys are one form of information technology security.

Examples of cryptographic keys include symmetric keys and asymmetric keys. Symmetric keys may be used for example for encryption of data. Symmetric encryption involves using a single shared key among all users communicating with one another. A message is locked encrypted with a key and then the same key is used to unlock decrypt the message. In order to protect a message when using symmetric encryption it is vital to have a secure method to exchange the secret key to all users.

Asymmetric keys may be used for example for both encryption and authentication. Asymmetric encryption involves using a key pair to secure information. A key pair is comprised of a private key decryption key which is known only to a single user or a limited group of users and a public key encryption key which may be known by anyone. In order to encrypt and decrypt a message both the private key and public key of the key pair must be used. For example a message will be encrypted by a sender using the public key of the intended recipient of the message. Once the recipient receives the encrypted message his or her private key is used to decrypt the message.

A problem with the use of symmetric keys is that they must be changed or rotated periodically because they become more vulnerable to attack the more they are used. However even the use of asymmetric keys such as private keys public keys and certificates requires a change control and in most instances requires an application to be recycled to pick up a new key. In current systems all keys whether symmetric or asymmetric are rotated manually. The manual key delivery process is insecure and error prone. There is also need for a cryptographic key management system that supports asymmetric keys used for rotation as well as asymmetric keys used for authentication such as with a certificate authority.

There is also a need for a system that provides a simple and secure way for both middleware and mainframe applications to automatically store and retrieve keys. The term middleware application refers to a non mainframe application web app web service and the like such as a log in application for authenticating users. The term mainframe application refers to an application residing on a mainframe such as a credential managers that might be called by the log in application to validate a password.

Thus the need exists for a simple and secure system that provides all of the functionality and security features described above but also includes automated key distribution and rotation that is suitable for both symmetric and asymmetric keys without data performance or functionality loss. There is also a need for a computer or software application to securely obtain and rotate keys for use with secure communication with partner applications.

The present invention relates to a system for automated cryptographic key management. The system comprises a key control system a key management agent system and a key system application program interface.

The present invention also relates to a method for automated cryptographic key management. The method comprises the automatic generation of cryptographic keys by the key control system and the automatic distribution of such keys by the key control system to the key management agent system.

The system of the present invention is suitable for use with both symmetric and asymmetric keys. An advantage of the system of the present invention over existing systems using asymmetric keys for example is that the system of the present invention supports rotation of asymmetric keys used for encryption as well as rotation of asymmetric keys used for authentication such as with a certificate authority.

Further areas of applicability of the present invention will become apparent from the detailed description provided hereinafter. It should be understood that the detailed description and specific examples while indicating the preferred embodiment of the invention are intended for purposes of illustration only and are not intended to limit the scope of the invention.

The automated key management system of the present invention is a system that has the capability to manage symmetric and asymmetric public private encryption keys. This system involves the automatic distribution rotation and renewal of such keys.

Referring now to the drawings in which like numerals represent like components throughout the several views the preferred embodiments of the present invention are next described. The following description of the preferred embodiment s is merely exemplary in nature and is in no way intended to limit the invention its application or uses.

Preferably at least one key store is provided for each application on a machine . The use of individual key stores allows enhanced security by putting access controls such as operating system read rights on each key store . This prevents one application from seeing the keys belonging to another application . The use of individual key stores also allows secure key management in hoteled environments where many applications may execute on a single physical server . However if desired a lower security system may be provided through the use of a single key store by multiple applications .

Generally the application remains unaware of how the keys reached the key store the functions of loading tracking and backing up the keys are all performed without any interaction with the application . These tasks have traditionally been carried out manually wherein an operator manually ports the keys to the machine using a portable data storage means such as a floppy disk or the like. The present invention however utilizes an automated key management system described and illustrated hereinbelow that automates the distribution and rotation of all keys including both symmetric and asymmetric ones.

The key control system is the core of the system . A primary function of the key control system is to generate and then distribute or publish keys to the key management agent system . However the key control system interacts with both the key management agent system and the administrative interface receiving instructions from the administrative interface and instructing the key management agent system to perform certain functions.

The interface between the key control system and the key management agent system may be based on XML messages sent between the key management server and the key management agent system where each connection is preferably secured by Secure Socket Layers SSL . Oracle Corporation of Redwood Shores Calif. offers database systems suitable for use with the preferred embodiments of the present invention. The interface to the database system is preferably through a Java Oracle driver and is secured using Internal Protocol Security IPSec . A common library suitable for use with the preferred embodiments of the present invention may be easily developed by one of ordinary skill in the art. A cryptographic library suitable for use with the preferred embodiments of the present invention is RSA Security s cryptographic library.

A key control system including these components and methodology and suitable for use in the preferred embodiments of the present invention is described in commonly assigned U.S. patent application Ser. No. 11 019 069 the entirety of which is incorporated herein by reference. However it will appear that other types of key control systems may alternatively be used without departing from the scope of the present invention.

The key management agent system includes a plurality of key management agents KMAs . A separate key management agent is preferably disposed on each machine that is to communicate with the key control system . A key management agent referred to as a distributed key management agent is located on each distributed server type machine while a key management agent referred to as a mainframe key management agent is located on each mainframe type machine . Each key management agent in the key management agent system is a standalone service which waits for instructions from the key management server of the key control system and updates its respective key stores as necessary. It may also performs maintenance on its key stores such as regenerating passwords for protecting the key stores or the like again as instructed by the key management server .

Each distributed key management agent preferably includes in addition to one or more software modules a common library not shown used for logging and configuration purposes a cryptographic library not shown and a local property or configuration file not shown . Each key management agent which may be developed in Java version 1.4 communicates locally with its own property file and its obfuscated key store . The functionality between the distributed key management agent and the key management server involves commands sent to the key management server providing the key management server with results from key management server sent instructions. The interface between each distributed key management agent and the key management server is based on XML messages sent between the two components where each connection is secured by SSL. A common library suitable for use with the preferred embodiments of the present invention may be easily developed by one of ordinary skill in the art. A cryptographic library suitable for use with the preferred embodiments of the present invention is RSA Security s cryptographic library.

The mainframe key management agents are functionally similar to the distributed key management agents but typically utilize different code and messages in order to accommodate the different characteristics of mainframes . Each mainframe key management agent preferably includes in addition to one or more software modules a common library not shown used for logging and configuration purposes a cryptographic library not shown and a local property or configuration or configuration file not shown . Each mainframe key management agent which may be developed in the computer languages C and Assembler communicates locally with its own property file and a key database such as the Integrated Cryptographic Services Facility ICSF VSAM database. The functionality between the mainframe key management agent and the key management server involves commands sent to the key management server providing the key management server with results from key management server sent instructions. It also performs maintenance on the ICSF database as instructed by the key management server . The interface between each mainframe key management agent and the key management server is based on XML messages sent between the two components where each connection is secured by sockets with an encrypted payload. A common library suitable for use with the preferred embodiments of the present invention may be easily developed by one of ordinary skill in the art. A cryptographic library suitable for use with the preferred embodiments of the present invention is RSA Security s cryptographic library.

A number of commands may be sent from the key management server to the key management agent system . For example ping is a command that requests the key management agent receiving the message to respond regarding its health to determine whether or not the key management agent system is functioning properly or not data key is a command that instructs the key management agent system to load the provided keys into the appropriate application key stores full key list is a command that sends all the currently assigned keys to the key management agent system delete key is a command that instructs the key management agents to delete the specified key from the appropriate application key store set current key is a command that instructs the key management agent system to set the assigned key as the current key for the specified application.

A more limited number of commands may be sent from the key management agent system to the key management server . For example startup is a command that a KMA sends to the key control system saying that it was down and is restarting thereby triggering the key control system to send back a full key list message and reverse ping is a command that tests the communications channel originating from the key management agent system going to the key control system where the key management agent system opens a client socket to the key control system and tests that a startup message would be successful i.e. that communication would not be blocked by a firewall or other computer network restriction .

The foregoing commands are all useful for handling keys of both symmetric and asymmetric types and for monitoring overall system status. However unlike symmetric keys asymmetric keys may not be transmitted from the key control system to distributed key management agents without a valid certificate. This is because the SSL and other conventional transport standards which are preferably used for communications between the key control system and the KMAs currently require the use of an individualized valid certificate known for example as an X509 certificate in the SSL standard that has been verified by a trusted certificate authority CA .

The operation of certificates is well known in the art but for exemplary purposes the use of an X509 certificate in the system of the present invention is next explained. As is well known an X509 certificate can be identified by its distinguished name its DN and other configurable attributes as well as by a digital signature that must be verified by the trusted CA . In addition to the X509 certificate date validation the key control system and the distributed KMAs require that the peer certificate of the SSL connection have a specific DN. Because of these three requirements date DN and signature validation a KMA s certificate may become invalid through date expiration or a mismatch of the expected DN actual DN or expected CA. If any of these occur intervention is required to generate a new RSA key pair used just for authentication purposes submit the public key to the CA resulting in a new X509 certificate update the KMA with the new private key and X509 certificate and update the key control system with the new X509 certificate associating it with the necessary KMA .

Although this manual intervention may be carried out if necessary the system of the present invention preferably allows the certificates to be renewed automatically. This may be accomplished as follows. First the key control system determines that a particular KMA certificate is due to expire and sends a renew system certificate message to the corresponding KMA . The renew system certificate message triggers the KMA to attempt to renew its system certificate based upon the information provided in the message. The KMA begins this process by generating a new asymmetric key pair of size dictated by the system certificate message from the key control system . This key pair is not an application key but instead is used to provide security for the authentication process between the KMA and the key control system . The KMA adds this new private key to an authentication key store which is a data structure for securing keys not shown that is preferably separate from the application key stores and stores the updated key store in a conventional storage device such as the system hard drive of the distributed server . In addition the KMA will wrap the new public key and a certificate signing request in a system certificate request message. The certificate signing request is preferably in an industry standard form such as the well known PKCS10 format. The KMA also adds attribute insertions into the system certificate request message by querying the distinguished name of its current certificate from the properties file which is a configuration file of the KMA . Assuming all steps are completed successfully the KMA transmits the system certificate request message to the key control system and because the private key has been stored in the key store on the system hard drive destroys the in memory copy of the private key. On the other hand if any problems occur then the KMA instead responds to the key control system with an appropriate error message.

Upon receiving a certificate signing request message from a KMA the key control system will send the certificate signing request to the CA for signing. The CA signs and returns a certificate for the requesting KMA to the key control system . When the key control system receives this certificate it generates a system certificate response directed to the requesting KMA that forwards the signed public key for example an X509 certificate received from the CA to the KMA to be inserted into the KMA s authentication key store. The system certificate response also specifies the certificate chains of the certificate that the KMA should trust. The certificate chains will be inserted into the new authentication key store under aliases provided by the KMS . The private key which corresponds to the new certificate is retrieved from the KMA s current key store on the system hard drive. Upon receiving the new certificate the KMA creates a second new authentication key store comprising the certificate and the private key and encrypts the second new authentication key store under a new password. The KMA then writes this second new authentication key store to the system hard drive or other conventional storage device overlaying its current key store. Finally the KMA then resets its SSL server port and replies to the key control system with a success or failure message as appropriate.

Once a new certificate is activated on a KMA and properly registered with the key control system the key control system may begin using the certificate when distributing application keys to that KMA . This process is generally similar to that used to distribute symmetric keys but requires communication between the two components to be authenticated using the new certificate.

An advantage of the system of the present invention over existing systems using asymmetric keys for example is that the system of the present invention supports rotation of asymmetric keys used for encryption as well as asymmetric keys used for authentication such as with a certificate authority. Thus there may be two distinct uses for asymmetric keys within the system of the present invention namely authentication and encryption. With asymmetric keys used for authentication if the asymmetric keys are to become lost or corrupted a new key set can be generated and used in place of the original key set. Thus the asymmetric keys are not required to be escrowed when used for authentication. In contrast asymmetric keys used for encryption are used to encrypt data. If these asymmetric keys are lost the corresponding encrypted data is lost. Thus asymmetric keys used for this encryption purpose must be escrowed.

The key management processes described above are used to load keys into the key stores for retrieval by the applications . However the key system API provides the only means by which the various applications interface with the system . The key system API functions like a conventional API in that it may be used by any application to interface with the system . The functionality of the key system API includes but is not limited to retrieving an application s current symmetric key retrieving a specific symmetric key and retrieving a property value such as a database password stored in the key store . In addition although not required for embodiments of the automated system of the present invention that provide only symmetric key functionality the key system API preferably also includes the ability to retrieve an application s current and specified public private asymmetric key. Preferably the key system API is developed in a conventional version of Java or the like such as Java version 1.2 or greater or Microsoft.Net C with the particular language being selected based on its system implementation. The key system API utilizes only files stored on the local file system. The Java versions utilize a cryptographic library such as one available from RSA Security. The interface to the respective key store is based on language specific file input output I O . An application of the system utilizes the key system API to use a key system API specific command to retrieve a value from the corresponding key store of the API whether it is to retrieve a symmetric key an asymmetric key or a key property from the key store . The key system API is not used to access automated key management system provided keys from a mainframe .

The administrative interface KAdmin provides the administrator for the system with a user s interface to the automated key management system other means include database queries using a conventional database query language such as SQL . Among the purposes of the administrative interface are to provide detailed key management agent system information and other key information including but not limited to detailed key management agent information such as last communication assigned keys applications version information and the like to provide the ability to maintain a key management agent system by pinging deleting unregistering suspending unsuspending managing applications keys for the key management agent system editing values and the like to provide the ability to add to or register a new key management agent system to the automated key management system to provide detailed key information including which key management agent systems are using specified keys to provide the ability to delete refresh or extract keys to provide the ability to add new key series to the automated key management system to provide the ability to view key management server logs and the like. The administrative interface is preferably developed in Java version 1.4 or greater and utilizes WebSphere Application Server version 5.1 an Oracle database which stores automated key management system related data a common library not shown used for logging and configuration purposes and a local property or configuration file. The administrative interface interfaces with the key management server and is based on XML messages sent between the two components where each connection is secured by SSL. The administrative interface also interfaces with an Oracle database where each session is secured IPSec and a web browser where each session is secured by SSL. The functionality of the administrative interface involves establishing an SSL session and authenticating the user via a browser certificate communication communicating with the Oracle database to retrieve requested automated key management system data and communicating with the key management server to update the automated key management system data and or key management agent systems.

As indicated above the automated key management system of the present invention has the capability of using both symmetric and asymmetric keys . For symmetric keys such as AES 3DES or the like each key is identified by a key label. One suitable format for such key labels may be described using the following example 

A key descriptor is preferably also provided for each key . In one suitable format the key descriptor is similar to the key label but without the identifier on the end. For example the key descriptor for the exemplary key label described above would be 

A partial key label is preferably also provided for each key. In one suitable format the partial key label is similar to the key label but without the KLxx where xx is the decryptor s application ID. This label should be sent with the encrypted data to the decryptor. The decryptor will then concatenate KLxx and the partial key label to create the full key label. A routine available through the key system API provides access to the partial key label.

The important distinction between the key label the key descriptor and the partial key label is that the application that is encrypting the data uses the key descriptor to access the data key . The encrypting application then retrieves the partial key label for the data key used in the encryption and passes the encrypted data and partial key label to the decryptor. The decrypting application then concatenates KLxx to the partial key label as specified above and then uses the key label to access the appropriate data key .

The key system API may be used in a Java environment as follows. Applications needing to encrypt data first retrieve the current key from the Key System API by passing in the key descriptor described above i.e. KLAB.CD.AKEY.NULL.CONF . The data is encrypted using the corresponding key and the encrypted data is sent to the decrypting application together with the partial key label CD.AKEY.NULL.CONF.5434 . Code for encrypting the data may be easily developed by one of ordinary skill in the art.

Applications needing to decrypt data first receive the encrypted data and the partial key label CD.AKEY.NULL.CONF.5434 and then concatenate KLxx. xx is the decryptor s application ID to the partial key label to get the key label KLAB.CD.AKEY.NULL.CONF.5434 . The application may then retrieve the appropriate data key from the key system API by passing the key label same as previous and decrypt the data using the key . Code for decrypting the data may likewise be easily developed by one of ordinary skill in the art.

For asymmetric keys such as RSA PKI or the like each key is preferably identified to the key system API by a key label but this key label is preferably generally hidden from the user.

The following shows the specific actions that take place during a key refresh including the steps taken if a key management agent system is down or unavailable. Key rotation is designed so that failures can occur during the process without affecting individual applications . is a graphical illustration of a exemplary system in which two servers and a mainframe are all using a first key . In and subsequent drawings the key currently being used by a particular machine is marked by a c . For example as shown in an authentication type application having an application ID of AB may be installed on two servers . For purposes of this example the authentication application will be considered to encrypt passwords and send them on to the corresponding part of the AB application on the mainframe . Initially all passwords are assumed to be in sync and using the KLAB.CD.AKEY.NULL.CONF.1234 key . It should be noted that in this example the mainframe key management agent does not have a current key marked because the application there is assumed to be a decrypting application . As discussed hereinabove decrypting applications expect to receive the key label that was used to encrypt the data. Then the decrypting application can use the key system API to retrieve the appropriate key for decryption.

When a decision is made to rotate the authentication AB key KLAB.CD.AKEY.NULL.CONF the administrator uses the KAdmin to instruct the key management server to generate a new key and push or distribute it to all applicable key management agents . is a graphical illustration of the exemplary system of in which a second key has been pushed to the two servers and the mainframe . It should be noted that both Authentication installed servers are still encrypting with the original key because it is still current .

Next the key management server sends a message to the key management system to set the new key as current resulting in the situation shown in . Now the authentication applications on both servers are encrypting with the new key . Since the key label is sent with the encrypted data the authentication application on the mainframe will be able to encrypt data with either key during the transition period.

On the other hand the key management agent system in one of the servers may be down when the key management server sends the message to set the new key. is a graphical illustration of the exemplary system of in which the second key has not yet been made current in the key management agent of one of the servers . It should be noted that the AB application on the mainframe will still be receiving traffic encrypted with key iterations and . The mainframe will handle this correctly because it still has access to both the old key and the new key . In this case the key rotation operation would halt and the administrator would be notified via the KAdmin of the failure of the key management agent in the specified server . However once the key management agent of that server is restarted the new key would be received and key iteration could become the current key.

The situation illustrated in represents an important feature of the present invention. More particularly as exemplified by this scenario if during a key rotation a particular part of the system such as a particular KMA the KMS or a network connection between the key control system and one or more of the KMAs were to fail then middleware functions mainframe applications and the like will continue to function and be able to encrypt and decrypt data. This is because keys will only be triggered set to current once they have been successfully distributed to all necessary machines . Preferably the KMS sends a first message with the keys when the keys are sent to each KMA and sends a second message to each KMA instructing each KMA to set the keys to current when each KMA has successfully received the keys .

Once the new key has been successfully pushed to all necessary key management agents the administrator can use the KAdmin to instruct the key management server to send the delete key command to the key management agents thus removing the old key . is a graphical illustration of the exemplary system of in which the first key has been deleted from the two servers and the mainframe .

Based on the foregoing information it is readily understood by those persons skilled in the art that the present invention is susceptible of broad utility and application. Many embodiments and adaptations of the present invention other than those specifically described herein as well as many variations modifications and equivalent arrangements will be apparent from or reasonably suggested by the present invention and the foregoing descriptions thereof without departing from the substance or scope of the present invention. Accordingly while the present invention has been described herein in detail in relation to its preferred embodiment it is to be understood that this disclosure is only illustrative and exemplary of the present invention and is made merely for the purpose of providing a full and enabling disclosure of the invention. The foregoing disclosure is not intended to be construed to limit the present invention or otherwise exclude any such other embodiments adaptations variations modifications or equivalent arrangements the present invention being limited only by the claims appended hereto and the equivalents thereof. Although specific terms are employed herein they are used in a generic and descriptive sense only and not for the purpose of limitation.

