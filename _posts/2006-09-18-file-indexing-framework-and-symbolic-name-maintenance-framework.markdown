---

title: File indexing framework and symbolic name maintenance framework
abstract: The present invention provides a file management system that includes a file indexing framework that allows third parties to contribute index handlers that are responsible for populating index entries for the artifacts they own and/or generate. The framework manages the creation, maintenance, and update of the index, and calls the index handlers at appropriate times so they can parse files that they understand for values that need to be stored in the index. The framework also provides APIs for querying the standardized fields of the index, so applications can search for standard types of data contributed for any of the indexed files. The present invention also provides a mechanism to keep track of symbolic name associations for every file/entity in the system. Specifically, the present invention provides a session-based and transient shadow table of symbolic names previously used by the files (even beyond the lifetime of the files themselves).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07873625&OS=07873625&RS=07873625
owner: International Business Machines Corporation
number: 07873625
owner_city: Armonk
owner_country: US
publication_date: 20060918
---
In general the present invention relates to file management. Specifically the present invention provides a system for indexing files and for tracking symbolic names associated with files.

Many computer applications persist information by storing data in files. For example a software tool that allows a user to create different kinds of data objects may store representations of each into a separate file. However an application trying to find specific information that has been stored in one or more files faces two problems 1 searching for data in files becomes time consuming as the number and size of files increases and 2 only files with well known formats can be searched. The first problem can be addressed for the most part by indexing the contents of files parsing each file once to store the relevant contents of the file into an index and afterwards searching the index which presumably provides efficient search characteristics instead of each file individually. However this technique also can only be used for files with well known formats. Without a well known format the contents of a file cannot be parsed. A significant hurdle thus faces applications that wish to search or index arbitrary files with arbitrary formats. A trend in software is to support pluggable extensions which allows clients to provide their own specialized behavior to the software. This trend leads to the use of file formats understood only by a specific extension or the introduction of extensions specific data into extensible file formats. Unfortunately none of the existing systems are capable of treating extensions specific data on par with file data it is hard coded to understand.

Additional problems exist in the current art with respect to symbolic names for files. Specifically consider an interdependent environment where references are symbolic and not direct examples of which may include an XML based system. In such an environment references between entities are described through symbolic names where one entity references a symbolic name while another entity associates itself with the same symbolic name. At runtime the referenced symbolic name is resolved to the respective entity. The advantages of such an environment are clear and documented ranging from flexibility to pluggability. Nonetheless one common problem encountered in such a system is the issue of dangling references where a reference is un resolvable due to a missing dependency. This may occur when an entity being referenced symbolically is deleted or its associated symbolic name is modified. When the entity being referenced is deleted its association with the symbolic name is deleted with it. Even if the change was simply a modification of the associated symbolic name then the association with the original symbolic name is deleted. Accordingly the referencing entity is no longer capable of associating its dangling reference with the specific entity that was deleted. This means that there is no way to identify to a user of such an environment the reason that caused the dangling reference e.g. the name of the specific file that was deleted . Looking at the same issue from a different perspective it also means that when an entity s association with a symbolic name is deleted i.e. the entity is either deleted or simply associated with a different symbolic name there is no way to find all referencing entities that are affected after the fact since they only reference the deleted symbolic name and not the entity itself .

The invention introduces an indexing and search framework that allows third parties to contribute indexing extensions referred to herein as index handlers that are responsible for populating index entries for the artifacts they own and or generate. Each entry in the index represents a file and its contents. The index entries include a standardized list of fields such as file name and defined elements. These standardized fields allow similar data to be stored in a consistent way for each file which therefore essentially allows file content searches via searching of the index to be done in a consistent way for all files regardless of the format of those files. The framework manages the creation maintenance and update of the index and calls the index handlers at appropriate times so they can parse files that they understand for values that need to be stored in the index. The framework provides APIs for querying the standardized fields of the index so applications can search for standard types of data contributed for any of the indexed files.

The present invention also provides a mechanism to keep track of symbolic name associations for every file entity in the system. Specifically the present invention provides a session based and transient shadow table of symbolic names previously used by the files even beyond the lifetime of the files themselves . By maintaining symbolic name association information beyond the lifetime of the entity itself or its association the door is opened for other features that can use this information to track referencing entities and validate or even repair them as necessary even if the referenced entity no longer exists or is no longer associated with the specific symbolic name .

In one aspect of the present invention a method for indexing a file is provided. The method comprises registering an index handler corresponding to a particular file type calling the index handler when a change to a file having the particular file type is detected parsing the file with the index handler to obtain index information and writing the index information to an index entry corresponding to the file using an index writer.

In another aspect of the present invention the method further comprises passing the index handler the file after the change is detected and determining that the index handler is capable of parsing the file.

In another aspect of the present invention the method further comprises responsive to determining that the index handler is capable of parsing the file calling the index handler passing the index handler an index writer object with the file and the index handler calling the index writer using the index writer object to store the index information.

In another aspect of the present invention the method further comprises receiving a query for the file and searching the index entry based on the query.

In another aspect of the present invention a system for indexing a file is provided. The system comprises a handler registration system for registering an index handler corresponding to a particular file type a change notification system for receiving a notification of a change to a file having the particular file type a handler interface system for calling the index handler based on the notification wherein the index handler parses the file to obtain index information and an index writer that is called by the index handler for writing the index information to an index entry.

In another aspect of the present invention the handler interface system passes the index handler an index writer object.

In another aspect of the present invention the system further comprises a query processing system for receiving a query on the file and for searching the index entry based on the query.

In another aspect of the present invention the system further comprises an index containing the index entry wherein the index entry contains a standardized list of fields that contain the file information.

In another aspect of the present invention a program product stored on at least one computer readable medium for indexing a file is provided. The at least one computer readable medium comprises program code for causing a computer system to perform the following register an index handler corresponding to a particular file type call the index handler when a change to a file having the particular file type is detected parse the file with the index handler to obtain index information and write the index information to an index entry corresponding to the file using an index writer.

In another aspect of the present invention the at least one computer readable medium further comprises program code for causing the computer system to perform the following communicate with the index handler and pass the index handler the file after the change is detected.

In another aspect of the present invention the at least one computer readable medium further comprises program code for causing the computer system to perform the following call the index handler if the index handler is capable of parsing the file and pass the index handler an index writer object with the file.

In another aspect of the present invention the at least one computer readable medium further comprises program code for causing the computer system to perform the following receive a query for the file and search the index entry based on the query.

In another aspect of the present invention a method for deploying a system for indexing a file is provided. The system comprises providing a computer infrastructure being operable to register an index handler corresponding to a particular file type call the index handler when a change to a file having the particular file type is detected parse the file with the index handler to obtain index information and write the index information to an index entry corresponding to the file using an index writer.

In another aspect of the present invention a method for maintaining symbolic name integrity in a dynamic environment is provided. The method comprises detecting a new symbolic name associated with a file populating a primary table with the association of the new symbolic name to the file populating a shadow table with an association of a previous symbolic name to the file and using the shadow table to resolve a dangling reference to the file.

In another aspect of the present invention the method for maintaining symbolic name integrity in the dynamic environment further comprises using the shadow table to resolve a dangling reference to the file.

In another aspect of the present invention the method for maintaining symbolic name integrity in the dynamic environment further comprises deleting the association of the previous symbolic name to the file from the shadow table after a predetermined time period.

In another aspect of the present invention a system for maintaining symbolic name integrity in a dynamic environment is provided. The system comprises a name detection system for detecting a new symbolic name associated with a file a table population system for populating a primary table with the association of the new symbolic name to the file and for populating a shadow table with an association of a previous symbolic name to the file and a reference resolution system for using the shadow table to resolve a dangling reference to the file.

In another aspect of the present invention the system for maintaining symbolic name integrity in a dynamic environment further comprises a reference resolution system for using the shadow table to resolve a dangling reference to the file.

In another aspect of the present invention the table population system further deletes the association of the previous symbolic name to the file from the shadow table after a predetermined time period.

In another aspect of the present invention a program product stored on at least one computer readable medium for maintaining symbolic name integrity in a dynamic environment is provided. The at least one computer readable medium comprises program code for causing a computer system to perform the following detect a new symbolic name associated with a file populate a primary table with the association of the new symbolic name to the file and populate a shadow table with an association of a previous symbolic name to the file.

In another aspect of the present invention the at least one computer readable medium further comprising program code for causing the computer system to perform the following use the shadow table to resolve a dangling reference to the file.

In another aspect of the present invention the at least one computer readable medium further comprising program code for causing the computer system to perform the following delete the association of the previous symbolic name to the file from the shadow table after a predetermined time period.

In another aspect of the present invention a method for deploying a system for maintaining symbolic name integrity in a dynamic environment is provided. The method comprises providing a computer infrastructure being operable to detect a new symbolic name associated with a file populate a primary table with the association of the new symbolic name to the file and populate a shadow table with an association of a previous symbolic name to the file.

In another aspect of the present invention the computer infrastructure is further operable to use the shadow table to resolve a dangling reference to the file.

The drawings are not necessarily to scale. The drawings are merely schematic representations not intended to portray specific parameters of the invention. The drawings are intended to depict only typical embodiments of the invention and therefore should not be considered as limiting the scope of the invention. In the drawings like numbering represents like elements.

Referring now to a file management system according to the present invention is shown. As depicted system includes computer system deployed within a computer infrastructure environment . This is intended to demonstrate among other things that some or all of the teachings of the present invention could be implemented within a network environment e.g. the Internet a wide area network WAN a local area network LAN a virtual private network VPN etc. or on a stand alone computer system. In the case of the former communication throughout the network can occur via any combination of various types of communications links. For example the communication links can comprise addressable connections that may utilize any combination of wired and or wireless transmission methods. Where communications occur via the Internet connectivity could be provided by conventional TCP IP sockets based protocol and an Internet service provider could be used to establish connectivity to the Internet. Still yet computer infrastructure is intended to demonstrate that some or all of the components of system could be deployed managed serviced etc. by a service provider who offers to manage files according to the present invention.

As shown computer system includes a processing unit a memory a bus and input output I O interfaces . Further computer system is shown in communication with external I O devices resources and index . In general processing unit executes computer program code such as applications file indexing framework and symbolic name system which are stored in memory . While executing computer program code processing unit can read and or write data to from memory index and or I O interfaces . Bus provides a communication link between each of the components in computer system . External devices can comprise any devices e.g. keyboard pointing device display etc. that enable a user to interact with computer system and or any devices e.g. network card modem etc. that enable computer system to communicate with one or more other devices.

Computer infrastructure is only illustrative of various types of computer infrastructures for implementing the invention. For example in one embodiment computer infrastructure comprises two or more devices e.g. a server cluster that communicate over a network to perform the various process of the invention. Moreover computer system is only representative of various possible computer systems that can include numerous combinations of hardware. To this extent in other embodiments computer system can comprise any specific purpose article of manufacture comprising hardware and or computer program code for performing specific functions any article of manufacture that comprises a combination of specific purpose and general purpose hardware software or the like. In each case the program code and hardware can be created using standard programming and engineering techniques respectively. Moreover processing unit may comprise a single processing unit or be distributed across one or more processing units in one or more locations e.g. on a client and server. Similarly memory and or index can comprise any combination of various types of data storage and or transmission media that reside at one or more physical locations. Further I O interfaces can comprise any system for exchanging information with one or more external devices . Still further it is understood that one or more additional components e.g. system software math co processing unit etc. not shown in can be included in computer system . However if computer system comprises a handheld device or the like it is understood that one or more external devices e.g. a display and or index could be contained within computer system not externally as shown.

Index can be any type of system e.g. a database capable of providing storage for file information and or tables and of symbolic names under the present invention. To this extent index could include one or more storage devices such as a magnetic disk drive or an optical disk drive. In another embodiment index includes data distributed across for example a local area network LAN wide area network WAN or a storage area network SAN not shown . In a typical embodiment index includes one or more index entries that each correspond to a particular file. Along these lines each index entry includes a standardized list of fields that contains file information as extracted and indexed under the present invention

Shown in memory of computer system among other systems and tables are file indexing framework symbolic name system application s and index handler s . It should be understood that file indexing framework and symbolic name system could be provided independent of one another. For example they do not need to both be provided on a single computer system within the scope of the present invention. In addition it should be understood that file indexing framework and symbolic name system could be realized as multiple computer programs as shown or as a single computer program not shown . It should also be understood that the various systems and their sub systems of are shown as such for illustrative purposes only and that the same functionality could be implemented with a different configuration of systems and sub systems. In any event the functions of file indexing framework will be described first in conjunction with .

As depicted in file indexing framework includes handler registration system change notification system handler interface system index writer and query processing system . Among other things file indexing framework provides the following capabilities 1 registration mechanism for index handlers 2 infrastructure to initialize the contents of the index and update its contents as files are added changed and deleted 3 a delegation mechanism for calling index handlers to parse files they understand for relevant content this delegation provides the support for indexing arbitrary files with arbitrary formats 4 establishment of standardized fields in the index entry for a file 5 a set of index writer APIs to be called by index handlers to store standardized index values for a file and 6 another set of APIs shown in provided as part of query processing system to be called by applications to query the standardized index values. The term API is an acronym for application programming interface which enables a computer program to access a set of functions typically provided by another application or library without a detailed understanding of the internal workings of the functions being accessed. 

The index handlers are responsible for identifying files they understand parsing the contents of those files and identifying appropriate data to be stored in the index entries for those files. Some advantages over a non extensible file indexing system include 1 support for new file formats can be added by the provider of the file format without any changes to the indexing framework or applications querying the index 2 files storing data formats with built in extensibility mechanisms e.g. WSDL and SCDL can be indexed without changes to file indexing framework the code that indexes the base elements of the data standard or applications querying the index support for a particular extension can be added by the extension provider in the form of an index handler that only processes that extension and 3 applications can essentially search the contents of arbitrary files with arbitrary formats in a standard manner by searching standardized fields of index without knowledge of file formats or the runtime extensions for which they may be targeted.

A general description of the file indexing framework will now be given in conjunction with . Thereafter a more specific illustrative example will be given in . In general handler registration system allows third parties to register index handlers . Each index handler is typically associated with a particular file format. As changes to a file having a particular file format occur a notification will be received by change notification system . Under the present invention such a notification can come directly from applications or from an operating system level. In any event when such a notification is received handler interface system will call the associated index handler to determine whether index handler is capable of parsing the affected file. If so handler interface system will pass index handler the file along with an index writer object. Upon receipt index handler will parse the file to obtain index information. Such information can be any type of information that will identify the file and its contents. Once the index information is determined extracted index handler will call index writer to store the index information. Specifically index writer will write the index information to an index entry corresponding to the file. As indicated above each file typically has its own index entry in index . Each entry includes a standardized list of fields such as file name and elements defined in the file. Should a user later desire to search query index the user can submit a query that will be received and processed by query processing system . Specifically query processing system includes a set of query APIs that is adapted to receive queries from applications .

Referring now to a more specific example of these functions is shown. The example shown in is an indexing and search framework used to implement WebSphere Integration Developer WID 6.0. which is commercially available from IBM Corp. of Armonk N.Y. In general tooling in WID requires the following information which can be scattered across all files generated and referenced by WID 1 all element definitions of a certain type 2 all files that reference a specified file 3 all elements that reference a specified element 4 all elements referenced by a specified element and 5 all files that define a specified namespace. Implementing these searches without the use of an index is not a viable option from a performance standpoint because of the potential number of files that would need to be searched. More importantly WID is based on the Service Component Architecture SCA which is highly pluggable. SCA component import and export objects which are saved as files all contain extensible data that can be defined by a runtime extension. Similarly the implementation files that each component can reference in its extensible data are also specific to a runtime extension. Correctly indexing new component import or export types introduced by new runtime extensions would not be possible without an extensible indexing mechanism. The mechanism in this case is file indexing framework .

As mentioned above file indexing framework provides a registration mechanism that allows third parties to define index handlers A D. An index handler A D is responsible for generating index information for a file and is a class that implements a Java interface provided by file indexing framework . An index handler A D is generally specific to a single file type and is provided by the domain owner of the file type. An index handler A D must understand how to parse a file for meaning to identify elements definitions and references that are relevant to the WID tooling that will be querying index .

When creating an index entry for a file file indexing framework calls each index handler A D passing it the file being indexed. The index handler A D first determines if it is a file it understands how to parse. If so it returns true otherwise it returns false. If index handler A D returns true file indexing framework calls it again also passing it an index writer object. Index handler A D should then open the file parse it and call index writer with any data that should be stored in the index entry for the file. The index writer class provides convenient methods for storing information in standardized index fields as well as a method for storing data in handler specific index fields. Again index handler A D can return true or false this time to indicate if data it passed to the index writer should be saved or discarded. File indexing framework calls all handlers A D in the same manner. Index writer manages the merging of data supplied by multiple index handlers A D and stores all of the contributed index fields into an index entry for the file.

By passing all files to all index handlers A D file indexing framework supports the ability to index arbitrary files with a format understood only by specific index handlers A D which may be associated with specific runtime extensions. This allows file indexing framework and applications that query index to be independent of the file types being indexed. By allowing multiple index handlers A D to contribute information to an index entry file indexing framework supports the ability to index file formats that support extensibility. For example consider WSDL which has a built in extensibility mechanism. A basic index handler A for WSDL can index the definitions of element types defined as part of the WSDL standard. For example it can identify all port types defined in a given WSDL file. However this index handler A will not be able to anticipate data type extensions that others may provide which may appear in any WSDL file. WSDL extensions must instead be indexed by an additional index handler D supplied by the providers of those extensions. This additional index handler D does not need to index standard WSDL elements because those will be indexed by the base WSDL index handler A. Instead it only needs to contribute index data introduced by its own extensions. File indexing framework through the index writer will merge all index data into the index entry for the file. As a result the index entry for a WSDL file would contain the index field values contributed by the base WSDL index handler A along with those contributed by any index handlers D for WSDL extensions.

It should be understood that the exemplary index handlers A D shown in are depicted for illustrative purposes only. To this extent the present invention could be implemented with any type of technology.

Referring back to the functions of symbolic name system will be described in greater detail. Specifically in many systems today 1 every entity file is associated with a symbolic name and 2 entities files can reference symbolic names and hence other entities indirectly . This is shown in greater detail in . Specifically as shown in entity file A is associated with symbolic name SN while entity file B is associated with symbolic name SN . Further entity A references symbolic name SN . The following changes can occur in the symbolic name associations of such a system 1 The symbolic name association of an entity is modified i.e. the entity is associated with a different symbolic name e.g. entity B is associated with SN and 2 The symbolic name association of an entity is deleted e.g. the entity such as entity B is deleted .

Symbolic name system of provides a way to deal with such changes in a manner that would allow an advanced response to the changes by the system e.g. revalidation or re factoring of affected referencing entities . In general an aspect of the present invention provides tables and that track symbolic name associations for entities in the system. Specifically the mechanism of this aspect of the present invention is complemented with an analogous but transient shadow table responsible for tracking the previous state of symbolic name associations for entities. To this extent when a change occurs in a symbolic name association of an entry the change will be detected by name detection system . Upon detection the association of the entity file with the new symbolic name will be populated into primary table by table population system . Similarly the old previous association of the entity file will be populated into shadow table e.g. prior to the reflection of the change in the primary table . This provides the unique capability of not only looking up what an entity association is but also what an entity association was prior to the occurrence of the change. This enables various functions that require knowledge of the previous state such as the ability to find previously referencing entities that now have dangling references and either validate them to indicate errors or fix them to reference the correct symbolic names. Such lookup and or resolution functions can be facilitated by reference resolution system . In any event after a predetermined period of time table population system can update shadow table to remove older associations. This helps control the size of shadow table and helps ensure that stale associations are not maintained.

While shown and described herein as a file management system it is understood that the invention further provides various alternative embodiments. For example in one embodiment the invention provides a computer readable useable medium that includes computer program code to enable a computer infrastructure to manage files. To this extent the computer readable useable medium includes program code that implements each of the various process of the invention. It is understood that the terms computer readable medium or computer useable medium comprises one or more of any type of physical embodiment of the program code. In particular the computer readable useable medium can comprise program code embodied on one or more portable storage articles of manufacture e.g. a compact disc a magnetic disk a tape etc. on one or more data storage portions of a device such as memory e.g. a fixed disk a read only memory a random access memory a cache memory etc. and or as a data signal e.g. a propagated signal traveling over a network e.g. during a wired wireless electronic distribution of the program code .

In another embodiment the invention provides a business method that performs the process of the invention on a subscription advertising and or fee basis. That is a service provider such as a Solution Integrator could offer to remotely manage files. In this case the service provider can create maintain deploy support etc. a computer infrastructure such as computer infrastructure that performs the process of the invention for one or more customers. In return the service provider can receive payment from the target organization s under a subscription and or fee agreement and or the service provider can receive payment from the sale of advertising content to one or more third parties.

In still another embodiment the invention provides a computer implemented method for managing files. In this case a computer infrastructure such as computer infrastructure can be provided and one or more systems for performing the process of the invention can be obtained e.g. created purchased used modified etc. and deployed to the computer infrastructure. To this extent the deployment of a system can comprise one or more of 1 installing program code on a device such as computer system from a computer readable medium 2 adding one or more devices to the computer infrastructure and 3 incorporating and or modifying one or more existing systems of the computer infrastructure to enable the computer infrastructure to perform processes according to one or more aspects of the invention.

As used herein it is understood that the terms program code and computer program code are synonymous and mean any expression in any language code or notation of a set of instructions intended to cause a device having an information processing capability to perform a particular function either directly or after either or both of the following a conversion to another language code or notation and or b reproduction in a different material form. To this extent program code can be embodied as one or more of an application software program component software a library of functions an operating system a basic I O system driver for a particular providing and or I O device and the like.

The invention can take the form of an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc. Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any tangible apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution. Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

The foregoing description of various aspects of the invention has been presented for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed and obviously many modifications and variations are possible. Such modifications and variations that may be apparent to a person skilled in the art are intended to be included within the scope of the invention as defined by the accompanying claims.

For example the file indexing and symbolic name integrity functions described above could be provided separate and apart from one another in combination with one another. For example in the case of the latter file indexing framework calls index handlers to create an index entry for a file. The index entry can store any kind of information about the file but one of the standard fields supported by the index writer and index search APIs holds elements that are defined in the file. These elements can be specified in the form of symbolic names. In one embodiment the file indexing framework is used to support an application that displays data to the user as logical artifacts pieces of data defined in one or more files rather than as physical artifacts i.e. files . Application can use index queries to resolve a symbolic name to the file it is defined in as well as resolve a reference to a symbolic name into a file reference. In some cases it is useful to find and resolve symbolic name references that resolve into references to newly deleted files. However because file indexing framework removes index entries of deleted files from index it can delete the associations between a deleted file and the symbolic names it defined. Along these lines the primary table of symbolic names in is stored in index and the triggering mechanism for updating shadow table can be when the file indexing framework removes entries from index .

