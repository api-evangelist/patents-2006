---

title: Generic interface for deep embedding of expression trees in programming languages
abstract: The claimed subject matter provides a system and/or a method that facilitates querying data utilizing an explicit representation of an embedded language. An IEnumberable component can receive a data operation that can be employed on a collection of data utilizing at least one of an IEnumerable interface and an IEnumerable<T> interface. A mirror component can provide a generic interface to query the collection of data by representing the collection of data as an expression tree utilizing at least one function that mirrors the at least one IEnumerable interface and the IEnumerable<T> interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07860823&OS=07860823&RS=07860823
owner: Microsoft Corporation
number: 07860823
owner_city: Redmond
owner_country: US
publication_date: 20060816
---
This application claims the benefit of U.S. Provisional Patent Application Ser. No. 60 746 439 filed on May 4 2006 entitled A GENERIC INTERFACE FOR DEEP EMBEDDING OF EXPRESSION TREES IN PROGRAMMING LANGUAGES. The entirety of which application is incorporated herein by reference.

The advent of global communications networks e.g. the Internet now makes accessible an enormous amount of data. People access and query unstructured and structured data every day. Unstructured data is used for creating storing and retrieving reports e mails spreadsheets and other types of documents and consists of any data stored in an unstructured format at an atomic level. In other words in the unstructured content there is no conceptual definition and no data type definition in textual documents a word is simply a word. Current technologies used for content searches on unstructured data require tagging entities such as names or applying keywords and metatags. Therefore human intervention is required to help make the unstructured data machine readable. Structured data is any data that has an enforced composition to the atomic data types. Structured data is managed by technology that allows for querying and reporting against predetermined data types and understood relationships.

Programming languages continue to evolve to facilitate specification by programmers as well as efficient execution. In the early days of computer languages low level machine code was prevalent. With machine code a computer program or instructions comprising a computer program were written with machine languages or assembly languages and executed by the hardware e.g. microprocessor . These languages provided an efficient means to control computing hardware but were very difficult for programmers to comprehend and develop sophisticated logic.

Subsequently languages were introduced that provided various layers of abstraction. Accordingly programmers could write programs at a higher level with a higher level source language which could then be converted via a compiler or interpreter to the lower level machine language understood by the hardware. Further advances in programming have provided additional layers of abstraction to allow more advanced programming logic to be specified much quicker then ever before. However these advances do not come without a processing cost.

The state of database integration in mainstream programming languages leaves a lot to be desired. Many specialized database programming languages exist such as xBase T SQL and PL SQL but these languages have weak and poorly extensible type systems little or no support for object oriented programming and require dedicated run time environments. Similarly there is no shortage of general purpose programming languages such as C VB.NET C and Java but data access in these languages typically takes place through cumbersome APIs that lack strong typing and compile time verification. In addition such APIs lack the ability to provide a generic interface to query data data collections and the like.

The following presents a simplified summary of the innovation in order to provide a basic understanding of some aspects described herein. This summary is not an extensive overview of the claimed subject matter. It is intended to neither identify key or critical elements of the claimed subject matter nor delineate the scope of the subject innovation. Its sole purpose is to present some concepts of the claimed subject matter in a simplified form as a prelude to the more detailed description that is presented later.

The subject innovation relates to systems and or methods that facilitate creating an expression tree representation to allow the implementation of a data operation. A mirror component can create an expression tree representation that allows various data operations and or querying to be implemented utilizing a generic interface IQueryable and IQueryable wherein the IQueryable and IQueryable mirror IEnumerable and IEnumerable. An IEnumerable component can provide a generic collection type that particularly works on a collection of data and has specific and rigid characteristics. In addition the IEnumerable component can employ a set of query standard query operator extension functions such that each such operator can take delegates as their arguments e.g. as defined in any suitable namespace . The mirror component can replicate the IEnumerable and IEnumerable to provide a generic interface that allows querying of the created expression tree by utilizing the IQueryable and IQueryable wherein the IQueryable and IQueryable versions of the standard query operator extension methods take the created expression tree rather than a delegate as their arguments.

In accordance with one aspect of the claimed subject matter the mirror component can implement a query processor. The query processor can utilize a data operation associated with IEnumerable such as but not limited to a Where Select SelectMany a filter function a grouping function a transformation function any suitable function that is compatible with the IEnumerable interface and or the IEnumerable interface etc. The mirror component can create the expression tree representation of the collection of data e.g. a query can produce the collection of data and the collection of data is represented by an expression tree wherein the representation can be a more generic and query friendly type of data for any suitable query processor.

Moreover the mirror component can provides a pluggable architecture for a query processor that allows data to be queried locally remotely over a wire etc. regardless of programming language and or format. For instance an expression tree that represents a collection of data can be created e.g. a query can produce the collection of data and the collection of data is represented by an expression tree then various data operations can be implemented thereupon e.g. remotely locally etc. . Moreover such data can be queried in a remote location the same as querying data in the memory of a local computer. In other aspects of the claimed subject matter methods are provided that facilitate creating an expression tree representation to allow the implementation of a data operation.

The following description and the annexed drawings set forth in detail certain illustrative aspects of the claimed subject matter. These aspects are indicative however of but a few of the various ways in which the principles of the innovation may be employed and the claimed subject matter is intended to include all such aspects and their equivalents. Other advantages and novel features of the claimed subject matter will become apparent from the following detailed description of the innovation when considered in conjunction with the drawings.

The claimed subject matter is described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the subject innovation. It may be evident however that the claimed subject matter may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to facilitate describing the subject innovation.

As utilized herein terms component system interface processor query operation and the like are intended to refer to a computer related entity either hardware software e.g. in execution and or firmware. For example a component can be a process running on a processor a processor an object an executable a program and or a computer. By way of illustration both an application running on a server and the server can be a component. One or more components can reside within a process and a component can be localized on one computer and or distributed between two or more computers.

Furthermore the claimed subject matter may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed subject matter. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. For example computer readable media can include but are not limited to magnetic storage devices e.g. hard disk floppy disk magnetic strips . . . optical disks e.g. compact disk CD digital versatile disk DVD . . . smart cards and flash memory devices e.g. card stick key drive . . . . Additionally it should be appreciated that a carrier wave can be employed to carry computer readable electronic data such as those used in transmitting and receiving electronic mail or in accessing a network such as the Internet or a local area network LAN . Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter. Moreover the word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as preferred or advantageous over other aspects or designs.

Now turning to the figures illustrates a system that facilitates creating an expression tree representation to allow the implementation of a data operation. The system includes a mirror component that can provide a generic interface to query data by implementing an IEnumerable component that can receive a data operation to implement on such data. The IEnumerable component can provide a generic collection type that particularly works on a collection of data and has specific and rigid characteristics. For instance the IEnumerable component can employ various standard query extenders such as but not limited to Where Select SelectMany a filter function a grouping function a transformation function etc. on the collection of data utilizing a specific programming language that is compatible with the generic collection type. In addition the IEnumerable component can employ a set of query standard query operator extension functions such that each such operator can take delegates as their arguments e.g. as defined in any suitable namespace .

The mirror component can replicate the functions associated with the IEnumerable component and in particular the IEnumerable interface and the IEnumerable interface. Such replication of the IEnumerable component allows the mirror component to provide a standard interface IQueryable and a non generic counterpart IQueryable that types can implement to signal that deep embedding of queries via expression trees are supported. The mirror component can employ an expression tree representation of the collections of data and queries. By representing queries and the collections of data as expression trees the IQueryable and IQueryable interfaces can be generic interfaces that can be utilized to implement data operations since the data type is more conducive to query processor based on expression tree representation. Therefore the system facilitates querying relational data extensible markup language XML objects object oriented languages programming languages and the like.

The mirror component can create an expression tree representation based on a collection of data not shown and query that is to be queried. For example a collection of data can be filtered based on a predicate function wherein conventionally the IEnumerable interface and IEnumerable interface were restricted to particular types operations characteristics and or formats. Yet by allowing the mirror component to provide a generic interface that can replicate mirror the IEnumerable and IEnumerable functions an expression tree representation can be created from the collection of data and query to allow a query a data operation and the like to be implemented thereto. In general it is to be appreciated that the expression tree representation allows any suitable query processor to implement data operations Where Select SelectMany a filter function a grouping function a transformation function etc. therewith. In other words the system provides a pluggable architecture for a query processor that allows data to be queried locally remotely over a wire etc. regardless of programming language and or format. For instance the system allows a representation of the query expression to be created then sent to the data and be allowed to be implemented remotely. Moreover such data can be queried in a remote location the same as querying data in the memory of a local computer.

The mirror component replicates the IEnumerable and IEnumerable interfaces and standard query operator extension methods with IQueryable and IQueryable interfaces and standard query operator extension methods. For instance wherever IEnumerable based operation has a delegate argument e.g. an operation such as a transformation of elements operation to group elements etc. the IQueryable based operators have an expression tree representation as their argument. This mirroring allows the system to define the standard interface IQueryable and its non generic counterpart IQueryable to signal that they support deep embedding of queries via expression trees.

Moreover upon the creation of the expression tree representation a query processor can be implemented to provide a query result . It is to be appreciated that the mirror component creates the expression tree representation such that any suitable query processor can query the collection of data based upon any IEnumerable interface and or IEnumerable interfaces being replicated by IQueryable and IQueryable. In other words the system can be pluggable with any suitable query processor to provide a query result.

Although the IEnumerable component is depicted within the mirror component it is to be appreciated that the IEnumerable component can be a stand alone component incorporated into the mirror component integrated with an IQueryable component and or any combination thereof. The IQueryable component can receive a data operation wherein such data operation can be mirrored off of the IEnumerable component and respective functions. Thus the data operations associated with IEnumerable and IEnumerable can be implemented via IQueryable and IQueryable in a more generic manner based upon the implementation of an expression tree representation rather than the data format associated with IEnumerable and IEnumerable. Thus the mirror component can create an expression tree representation that can be queried by mirroring IEnumerable and IEnumerable. It is to be appreciated and understood that if the expression tree for a particular collection of data is created it need not be re created for a disparate data operation and or query. In other words the expression tree representation can be re used.

It is to be appreciated that the expression tree representation can be utilized by any suitable query processor s to allow for the querying of data. The query processor s can plug in to allow the utilization of any suitable query operation and or data operation. Moreover there can be any number of query processor s such as query processor to query processor where N is a positive integer. The query processor s can plug in to utilize the expression tree representation to allow for the querying of various collections of data.

The mirror component can further include an IOrderedQueryable component that can facilitate utilizing sequence operators. For instance the following pseudo code can be implemented by the IOrderedQueryable component 

The existing IEnumerable and IEnumerable are extended with standard query operators Where Select SelectMany . . . that all take delegates as their arguments as defined in any suitable namespace . For example the extension method Where takes a source collection and a delegate and yields all values for which the predicate holds 

For IQueryable and IQueryable the mirror component can introduce extensions that implement the standard query operators using expression trees instead of delegates. For instance here is a possible implementation of Where note that it takes an expression tree instead of a delegate for the predicate argument but for the rest the signature isomorphic to the signature of the Where extension method as defined on IEnumerable 

The implementations of the other standard sequence operators is very similar and effectively each creates an expression tree that corresponds to calling themselves on the source. As a result the implementation of the standard query operators is completely general and can be used by any application programmable interface API that wishes to consume expression trees e.g. deep embedding .

Besides the mirror component providing implementations of the standard query operators the mirror component can provide a ToQueryable operator that can turn an IEnumerable into a Queryable. For instance the following pseudo code can be utilized 

The mirror component can also include a helper component that facilitates compiling expression trees to delegates. In other words the helper component can provide a method to compile expression trees to a delegate via a helper method T Compile this Expression f that dynamically generates language integrated LI from a given expression tree such as the following 

Furthermore the mirror component can include a parse string helper component that can provide helper methods to parse strings to expression trees and provide a resolver for binding free variables inside strings. The parse string helper component can introduce a set of helper methods for parsing a string representation of delegate. In the general case the parser takes the list of parameters of the delegate this expression represents and a name resolver that given the names of free variables in the expression returns the member information member info to which that name is bound 

It is to be understood that the intelligent component can provide for reasoning about or infer states of the system environment and or user from a set of observations as captured via events and or data. Inference can be employed to identify a specific context or action or can generate a probability distribution over states for example. The inference can be probabilistic that is the computation of a probability distribution over states of interest based on a consideration of data and events. Inference can also refer to techniques employed for composing higher level events from a set of events and or data. Such inference results in the construction of new events or actions from a set of observed events and or stored event data whether or not the events are correlated in close temporal proximity and whether the events and data come from one or several event and data sources. Various classification explicitly and or implicitly trained schemes and or systems e.g. support vector machines neural networks expert systems Bayesian belief networks fuzzy logic data fusion engines . . . can be employed in connection with performing automatic and or inferred action in connection with the claimed subject matter.

A classifier is a function that maps an input attribute vector x x1 x2 x3 x4 xn to a confidence that the input belongs to a class that is f x confidence class . Such classification can employ a probabilistic and or statistical based analysis e.g. factoring into the analysis utilities and costs to prognose or infer an action that a user desires to be automatically performed. A support vector machine SVM is an example of a classifier that can be employed. The SVM operates by finding a hypersurface in the space of possible inputs which hypersurface attempts to split the triggering criteria from the non triggering events. Intuitively this makes the classification correct for testing data that is near but not identical to training data. Other directed and undirected model classification approaches include e.g. naive Bayes Bayesian networks decision trees neural networks fuzzy logic models and probabilistic classification models providing different patterns of independence can be employed. Classification as used herein also is inclusive of statistical regression that is utilized to develop models of priority.

The mirror component can further utilize a presentation component that provides various types of user interfaces to facilitate interaction between a user and any component coupled to the mirror component . As depicted the presentation component is a separate entity that can be utilized with the mirror component . However it is to be appreciated that the presentation component and or similar view components can be incorporated into the mirror component and or a stand alone unit. The presentation component can provide one or more graphical user interfaces GUIs command line interfaces and the like. For example a GUI can be rendered that provides a user with a region or means to load import read etc. data and can include a region to present the results of such. These regions can comprise known text and or graphic regions comprising dialogue boxes static controls drop down menus list boxes pop up menus as edit controls combo boxes radio buttons check boxes push buttons and graphic boxes. In addition utilities to facilitate the presentation such as vertical and or horizontal scroll bars for navigation and toolbar buttons to determine whether a region will be viewable can be employed. For example the user can interact with one or more of the components coupled and or incorporated into the mirror component .

The user can also interact with the regions to select and provide information via various devices such as a mouse a roller ball a keypad a keyboard a pen and or voice activation for example. Typically a mechanism such as a push button or the enter key on the keyboard can be employed subsequent entering the information in order to initiate the search. However it is to be appreciated that the claimed subject matter is not so limited. For example merely highlighting a check box can initiate information conveyance. In another example a command line interface can be employed. For example the command line interface can prompt e.g. via a text message on a display and an audio tone the user for information via providing a text message. The user can than provide suitable information such as alpha numeric input corresponding to an option provided in the interface prompt or an answer to a question posed in the prompt. It is to be appreciated that the command line interface can be employed in connection with a GUI and or API. In addition the command line interface can be employed in connection with hardware e.g. video cards and or displays e.g. black and white and EGA with limited graphic support and or low bandwidth communication channels.

At reference numeral IEnumerable and IEnumerable can be mirrored to provide a generic interface to query data. Based on data associated with IEnumerable having specific and rigid characteristics a generic interface can replicate the functions associated with IEnumerable and in particular the IEnumerable interface and the IEnumerable interface and their standard query operator extension methods. Such replication of IEnumerable allows a standard interface IQueryable and a non generic counterpart IQueryable to signal to any suitable type that deep embedding of queries via expression trees are supported. By representing the collections of data as expression trees the IQueryable and IQueryable interfaces can be generic interfaces that can be utilized to implement data operations since the data type is more conducive to query processor based on expression tree representation and thus allowing IEnumerable and IEnumerable to be mirrored.

At reference numeral the data operation can be implemented on the expression tree utilizing for example a query processor. The data operation can then be generically applied utilizing a technique that employs IQuerable and IQueryable interfaces that mirror IEnumerable and IEnumerable functionality. By mirroring the functionality of IEnumerable and IEnumeralbe data operations can be employed on the expression tree rather than the strict and rigid data collection typically associated with IEnumerable and IEnumerable. Therefore the method facilitates querying relational data extensible markup language XML objects object oriented languages programming languages and the like. In general it is to be appreciated that the expression tree representation allows any suitable query processor to implement data operations Where Select SelectMany a filter function a grouping function a transformation function etc. therewith.

At reference numeral the data operation can be implemented on the expression tree. By mirroring the functionality of IEnumerable and IEnumeralbe data operations can be employed on the expression tree e.g. utilizing IQueryable and IQueryable rather than the strict and rigid data collection typically associated with IEnumerable and IEnumerable. By representing the collections of data as expression trees the IQueryable and IQueryable interfaces can be generic interfaces that can be utilized to implement data operations since the data type is more conducive to query processor based on expression tree representation.

At reference numeral any suitable query process can be plugged in and query the expression tree that represents the collection of data. In general it is to be appreciated that the expression tree representation allows any suitable query processor to implement data operations Where Select SelectMany a filter function a grouping function a transformation function etc. therewith. In other words the method provides a pluggable architecture for a query processor that allows data to be queried locally remotely over a wire etc. regardless of programming language and or format. For instance the method allows a representation of the query expression to be created then sent to the data and be allowed to be implemented remotely. Moreover such data can be queried in a remote location the same as querying data in the memory of a local computer.

The compiler can accept as input a file having source code associated with processing of a sequence of elements. The source code may include various expressions and associated functions methods and or other programmatic constructs. The compiler may process source code in conjunction with one or more components for analyzing constructs and generating or injecting code.

A front end component reads and performs lexical analysis upon the source code. In essence the front end component reads and translates a sequence of characters e.g. alphanumeric in the source code into syntactic elements or tokens indicating constants identifiers operator symbols keywords and punctuation among other things.

The converter component parses the tokens into an intermediate representation. For instance the converter component can check syntax and group tokens into expressions or other syntactic structures which in turn coalesce into statement trees. Conceptually these trees form a parse tree . Furthermore and as appropriate the converter module can place entries into a symbol table that lists symbol names and type information used in the source code along with related characteristics.

A state can be employed to track the progress of the compiler in processing the received or retrieved source code and forming the parse tree . For example different state values indicate that the compiler is at the start of a class definition or functions has just declared a class member or has completed an expression. As the compiler progresses it continually updates the state . The compiler may partially or fully expose the state to an outside entity which can then provide input to the compiler .

Based upon constructs or other signals in the source code or if the opportunity is otherwise recognized the converter component or another component can inject code corresponding to facilitate efficient and proper execution. Rules coded into the converter component or other component indicates what must be done to implement the desired functionality and identify locations where the code is to be injected or where other operations are to be carried out. Injected code typically includes added statements metadata or other elements at one or more locations but this term can also include changing deleting or otherwise modifying existing source code. Injected code can be stored as one or more templates or in some other form. In addition it should be appreciated that symbol table manipulations and parse tree transformations can take place.

Based on the symbol table and the parse tree a back end component can translate the intermediate representation into output code. The back end component converts the intermediate representation into instructions executable in or by a target processor into memory allocations for variables and so forth. The output code can be executable by a real processor but output code that is executable by a virtual processor can also be provided.

Furthermore the front end component and the back end component can perform additional functions such as code optimization and can perform the described operations as a single phase or in multiple phases. Various other aspects of the components of compiler are conventional in nature and can be substituted with components performing equivalent functions. Additionally at various stages during processing of the source code an error checker component can check for errors such as errors in lexical structure syntax errors and even semantic errors. Upon detection error checker component can halt compilation and generate a message indicative of the error.

In order to provide additional context for implementing various aspects of the claimed subject matter and the following discussion is intended to provide a brief general description of a suitable computing environment in which the various aspects of the subject innovation may be implemented. For example a mirror component that provides a generic interface to provide data operations on collections of data utilizing an expression tree representation as described in the previous figures can be implemented in such suitable computing environment. While the claimed subject matter has been described above in the general context of computer executable instructions of a computer program that runs on a local computer and or remote computer those skilled in the art will recognize that the subject innovation also may be implemented in combination with other program modules. Generally program modules include routines programs components data structures etc. that perform particular tasks and or implement particular abstract data types.

Moreover those skilled in the art will appreciate that the inventive methods may be practiced with other computer system configurations including single processor or multi processor computer systems minicomputers mainframe computers as well as personal computers hand held computing devices microprocessor based and or programmable consumer electronics and the like each of which may operatively communicate with one or more associated devices. The illustrated aspects of the claimed subject matter may also be practiced in distributed computing environments where certain tasks are performed by remote processing devices that are linked through a communications network. However some if not all aspects of the subject innovation may be practiced on stand alone computers. In a distributed computing environment program modules may be located in local and or remote memory storage devices.

One possible communication between a client and a server can be in the form of a data packet adapted to be transmitted between two or more computer processes. The system includes a communication framework that can be employed to facilitate communications between the client s and the server s . The client s are operably connected to one or more client data store s that can be employed to store information local to the client s . Similarly the server s are operably connected to one or more server data store s that can be employed to store information local to the servers .

With reference to an exemplary environment for implementing various aspects of the claimed subject matter includes a computer . The computer includes a processing unit a system memory and a system bus . The system bus couples system components including but not limited to the system memory to the processing unit . The processing unit can be any of various available processors. Dual microprocessors and other multiprocessor architectures also can be employed as the processing unit .

The system bus can be any of several types of bus structure s including the memory bus or memory controller a peripheral bus or external bus and or a local bus using any variety of available bus architectures including but not limited to Industrial Standard Architecture ISA Micro Channel Architecture MSA Extended ISA EISA Intelligent Drive Electronics IDE VESA Local Bus VLB Peripheral Component Interconnect PCI Card Bus Universal Serial Bus USB Advanced Graphics Port AGP Personal Computer Memory Card International Association bus PCMCIA Firewire IEEE 1294 and Small Computer Systems Interface SCSI .

The system memory includes volatile memory and nonvolatile memory . The basic input output system BIOS containing the basic routines to transfer information between elements within the computer such as during start up is stored in nonvolatile memory . By way of illustration and not limitation nonvolatile memory can include read only memory ROM programmable ROM PROM electrically programmable ROM EPROM electrically erasable programmable ROM EEPROM or flash memory. Volatile memory includes random access memory RAM which acts as external cache memory. By way of illustration and not limitation RAM is available in many forms such as static RAM SRAM dynamic RAM DRAM synchronous DRAM SDRAM double data rate SDRAM DDR SDRAM enhanced SDRAM ESDRAM Synchlink DRAM SLDRAM Rambus direct RAM RDRAM direct Rambus dynamic RAM DRDRAM and Rambus dynamic RAM RDRAM .

Computer also includes removable non removable volatile non volatile computer storage media. illustrates for example a disk storage . Disk storage includes but is not limited to devices like a magnetic disk drive floppy disk drive tape drive Jaz drive Zip drive LS 100 drive flash memory card or memory stick. In addition disk storage can include storage media separately or in combination with other storage media including but not limited to an optical disk drive such as a compact disk ROM device CD ROM CD recordable drive CD R Drive CD rewritable drive CD RW Drive or a digital versatile disk ROM drive DVD ROM . To facilitate connection of the disk storage devices to the system bus a removable or non removable interface is typically used such as interface .

It is to be appreciated that describes software that acts as an intermediary between users and the basic computer resources described in the suitable operating environment . Such software includes an operating system . Operating system which can be stored on disk storage acts to control and allocate resources of the computer system . System applications take advantage of the management of resources by operating system through program modules and program data stored either in system memory or on disk storage . It is to be appreciated that the claimed subject matter can be implemented with various operating systems or combinations of operating systems.

A user enters commands or information into the computer through input device s . Input devices include but are not limited to a pointing device such as a mouse trackball stylus touch pad keyboard microphone joystick game pad satellite dish scanner TV tuner card digital camera digital video camera web camera and the like. These and other input devices connect to the processing unit through the system bus via interface port s . Interface port s include for example a serial port a parallel port a game port and a universal serial bus USB . Output device s use some of the same type of ports as input device s . Thus for example a USB port may be used to provide input to computer and to output information from computer to an output device . Output adapter is provided to illustrate that there are some output devices like monitors speakers and printers among other output devices which require special adapters. The output adapters include by way of illustration and not limitation video and sound cards that provide a means of connection between the output device and the system bus . It should be noted that other devices and or systems of devices provide both input and output capabilities such as remote computer s .

Computer can operate in a networked environment using logical connections to one or more remote computers such as remote computer s . The remote computer s can be a personal computer a server a router a network PC a workstation a microprocessor based appliance a peer device or other common network node and the like and typically includes many or all of the elements described relative to computer . For purposes of brevity only a memory storage device is illustrated with remote computer s . Remote computer s is logically connected to computer through a network interface and then physically connected via communication connection . Network interface encompasses wire and or wireless communication networks such as local area networks LAN and wide area networks WAN . LAN technologies include Fiber Distributed Data Interface FDDI Copper Distributed Data Interface CDDI Ethernet Token Ring and the like. WAN technologies include but are not limited to point to point links circuit switching networks like Integrated Services Digital Networks ISDN and variations thereon packet switching networks and Digital Subscriber Lines DSL .

Communication connection s refers to the hardware software employed to connect the network interface to the bus . While communication connection is shown for illustrative clarity inside computer it can also be external to computer . The hardware software necessary for connection to the network interface includes for exemplary purposes only internal and external technologies such as modems including regular telephone grade modems cable modems and DSL modems ISDN adapters and Ethernet cards.

What has been described above includes examples of the subject innovation. It is of course not possible to describe every conceivable combination of components or methodologies for purposes of describing the claimed subject matter but one of ordinary skill in the art may recognize that many further combinations and permutations of the subject innovation are possible. Accordingly the claimed subject matter is intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims.

In particular and in regard to the various functions performed by the above described components devices circuits systems and the like the terms including a reference to a means used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. a functional equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary aspects of the claimed subject matter. In this regard it will also be recognized that the innovation includes a system as well as a computer readable medium having computer executable instructions for performing the acts and or events of the various methods of the claimed subject matter.

In addition while a particular feature of the subject innovation may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes and including and variants thereof are used in either the detailed description or the claims these terms are intended to be inclusive in a manner similar to the term comprising. 

