---

title: Method and apparatus for identifying problem causes in a multi-node system
abstract: An SLO (service level objective) is represented by a model that includes nodes that represent elements in a system that are used to fulfill the SLO and information that represents dependencies between the elements. Telemetry information is received describing a condition of an element in the system. The telemetry information can be applied to a particular procedure associated with a particular node in the model to determine if there is a problem associated with the element represented by the particular node. At least a portion of the telemetry information is applied to procedures to determine problem cause information describing which elements have problems relating to the SLO. A relative contribution of elements to a problem associated with the SLO is determined by analyzing the problem cause information and the dependencies between the elements.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07701859&OS=07701859&RS=07701859
owner: Oracle America, Inc.
number: 07701859
owner_city: Redwood Shores
owner_country: US
publication_date: 20060214
---
For most corporations services and applications are deployed by an internal IT organization on behalf of an internal customer. This relationship between the service owner and the operator of the service is typically formalized in a Service Level Agreement SLA . The SLA will define the expected QoS Quality of Service that will be delivered by the service operator. The challenge for the service operator is to measure against the SLA and ensure that the service is consistently delivered at the appropriate level. Ultimately the best QoS and cost efficiencies will be gained when the SLA lifecycle can be automated. The SLA life cycle involves translating the SLA into individual Service Level Objectives SLO which are individual metrics that depend on Key Performance Indicators KPI . KPIs are performance statistics that must constantly be measured to know if a particular SLO is being met or violated. The full SLA life cycle is monitoring the SLO and making adjustments to the infrastructure when SLOs are violated or are in jeopardy of being violated.

A Service Level Management SLM tool measures KPIs to determine SLO violations. Many SLM tools use a reactive approach in which performance problems are identified after the fact an SLO violation has occurred. Some SLM tools use a more predictive approach by using self learning techniques. These tools learn the typical behavior of the system by capturing daily weekly and monthly activities. They then compare the current performance metrics to the historical ones and trigger alarms when pre set thresholds are violated.

Most SLM tools however do not have any specific knowledge of the inner workings of elements such as application servers. Therefore the SLM tool provides limited performance monitoring. For example if a J2EE application makes requests of multiple back end nodes such as directory servers message queues or legacy systems there is no easy mechanism to break down the response time across these components. Thus when an SLO is violated it is quite difficult to track down the actual cause of the violation. The problem is exasperated with web services as a particular request may not only span multiple nodes within the datacenter but may span across the internet as well.

Accordingly there is a need for systems and methods that allow automatic discovery of problems pertinent to SLO s associated with SLAs.

The approaches described in this section could be pursued but are not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated herein the approaches described in this section are not prior art to the claims in this application and are not admitted to be prior art by inclusion in this section.

The systems and methods described herein determine one or more causes of a problem associated with a service level objective. For purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the various systems and methods. It will be apparent however that the systems and methods described herein may be implemented without these specific details. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

The environment in includes a problem cause analysis engine that is used to determine causes of problems associated with SLOs in accordance with an embodiment of the present invention. The SLOs are set up against elements e.g. services and resources associated with the system being managed the system . The problem cause engine is coupled to a telemetry component an inventory repository and a network management system module .

The problem cause engine has a dependency model that is used to determine one or more causes of a problem associated with an SLO. In one embodiment the dependency model comprises a graph having nodes representing elements associated with the system and associations between the nodes representing dependencies between the elements. An example of a dependency is an application server depending upon a CPU upon which the application server executes.

The problem cause engine has a rules engine that applies rules to the dependency model to determine one or more causes of a problem associated with an SLO. The event correlation engine receives telemetry from the telemetry component and passes the telemetry to the dependency model . The telemetry information may be used to determine whether there are problems with elements used to fulfill an SLO. The event correlation engine also communicates with the telemetry component to establish monitoring of elements in the system .

The inventory repository is responsible for maintaining configuration information relevant to the system . Configuration information includes information about elements e.g. resources and services and their associations. Resource configuration information includes but is not limited to hardware configuration information such as the type of computer system number and type of processors amount and type of memory and disk. Resource configuration information also includes but is not limited to software configuration information such as the type and versions of application servers operating systems and service access points. Service configuration information relates aggregations of hardware and software resources that are used to operate the service.

association is used to represent a dependency between two elements. For example if an application server is dependent upon a CPU the inventory repository has an association to represent this dependency. The association can be between two hardware resources two software resources a hardware resource and a software resource a service and any hardware or software resource etc.

The inventory repository holds the initial configuration information which is dynamically managed by the inventory repository . The inventory repository can discover associations between the elements. Some associations can be input via the network management system .

The inventory repository is queryable by other components in the system to determine what elements are defined and need to be monitored. For example the problem cause engine queries the inventory repository to determine how to construct a dependency model of elements used to satisfy an SLO.

In one embodiment the inventory repository has an event notification interface to notify other components when elements are added to or removed from system . Since these changes might involve multiple entities in the inventory associations etc. it is desirable to have a transactional view of the changes that occur. The inventory repository makes this possible through composite events that can be sent to consumers such as the problem cause engine to represent a set of atomic changes that have been made.

In one embodiment the inventory repository includes an XML file that lists resources and services under management.

The telemetry component is responsible for monitoring all the resources in the system . Monitoring functions include but are not limited to performance monitoring e.g. how many requests were processed per second and availability monitoring e.g. whether the application server instance up . The telemetry component is able to provide performance reports and threshold monitoring for one or more resources each having one or more attributes. For example the problem cause engine could request that performance monitoring reports be produced every 30 seconds containing the maximum response time of a particular service access point performance monitoring or request that an alarm notification be sent to a listener method whenever the response time crosses a pre defined threshold of 500 ms threshold monitoring .

The telemetry component supports complex monitoring jobs scheduling. A monitoring job schedule specifies the frequency and start of a monitoring job. A monitoring job can be started immediately or at some other date and time in the future.

Performance reports can be created to obtain the distribution of an attribute s value instead of the value itself. For instance the distribution for an attribute of a service access point resource may be an array of buckets that accounts for the distribution of the attribute values over time. The number of entries or buckets in the array depends on the buckets granularity and the deviation of the attribute value during the monitoring period. The bucket s granularity resource instance and attribute s name are defined at the time of the monitoring job creation.

A client contacts the network management system to establish one or more service level objectives SLOs . Together a group of SLOs make up a service level agreement SLA . The SLOs can be pre defined or user defined. The SLOs are defined in terms of specific key quality indicators KQI against management attributes. For example a KQI can be response time CPU utilization etc. The problem cause engine interfaces with the network management system to obtain a list of SLOs and their definitions. The following are examples of SLOs 

The problem cause engine accesses the inventory repository to determine which elements in the system are being used to satisfy each SLO. The problem cause engine also discovers dependencies between the elements from the associations stored in the inventory repository .

Based on the SLOs and element dependencies the problem cause engine constructs a dependency model wherein the dependency model includes nodes that represent elements in the system that are used to fulfill the SLOs and information that represents dependencies between the elements. For example the dependency model can be a graph with nodes representing the elements and associations between the nodes representing dependencies between the elements.

The problem cause engine provides information to the telemetry component to set up appropriate monitoring jobs on the elements such that the problem cause engine can learn if there are problem causes associated with the elements. As the telemetry information is provided to the problem cause engine the problem cause engine invokes procedures associated with the dependency model to determine if there is a problem associated with an SLO and a relative contribution of elements in the system that are causes of the problem. There may be one or more elements that are a cause of a given problem. There may be multiple problems associated with a given SLO. The problem cause engine may also determine a confidence level of each problem cause.

If there is an SLO violation the problem cause engine reports the violation along with one or more causes of the violation. The report can include a list of elements that are responsible for the SLO violation along with a relative contribution of each element to the violation. The problem cause engine can also report that although a given SLO is not currently being violated there are one or more problems associated with the SLO. For example the problem cause engine reports a problem with one or more elements used to fulfill the SLO.

The inventory repository can be updated in response to information in the report indicating a change to the configuration of the system which may result in a subsequent revalidation of problem cause engine dependency model .

Each of the nodes is implemented as one or more software objects in one embodiment. The SLO nodes represent the SLO. For example node SLO may represent an SLO of overall system capacity may not be lower then 1500 ops sec. The monitoring job nodes are top level placeholder objects that hold objects for other nodes. The SLO nodes and monitoring nodes are examples of administrative nodes.

The service nodes Service and Service represent a service provided by the system . The service nodes can be conceptualized as an aggregate of the resource nodes on which they depend. For example a service can be comprised of multiple URLs represented as Service Access Points in the graph . Often customers are interested in the SLOs that involve services. Hence a given SLO in the graph will often have a service node. However not all SLOs relate to a service and underlying resources . Some SLOs relate directly to a resource. In this case the SLO would not have a service node.

Example resource nodes are as follows. The service access point nodes SAP SAP SAP represent service access point resources as defined in the system . The application service nodes AS AS represent application servers in the system . The computer nodes represent CPUs in the system upon which application servers may execute.

A given node can be a part of more than one SLO. For example Computer node and AS node are a part of both SLO and SLO. Typically a graph will have many more SLOs and nodes. It is not required that nodes of all of the types shown in be used. For example it is not required that an SLO have a service node. Moreover nodes of many other types may be used especially with respect to resource nodes.

In step the problem cause engine discovers the elements used to fulfill the SLOs and dependencies between the elements. The elements may include services and resources. For example using the example in the problem cause engine accesses the inventory repository to determine that service relies on SAP SAP and SAP. Further the inventory repository has information that indicates that SAP depends on AS and that AS depends on computer. Similarly the inventory repository has information that indicates that SAP depends on AS and that AS depends on computer. Similarly the inventory repository has information that indicates that SAP depends on AS. The inventory repository has an association list that describes the dependencies in one embodiment.

In step the problem cause engine creates monitoring node objects for the resources and services. For example the problem cause engine creates objects for each of the nodes depicted in the graph of . The problem cause engine can also create objects for administrative nodes such as an SLO node and monitoring job node.

In step the problem cause engine communicates with the telemetry component to establish monitoring jobs. The problem cause engine walks the dependency model and for each monitoring object the problem cause engine consults the telemetry component to determine if the particular object can be monitored. For example the telemetry component may or may not be able to provide telemetry for a service node. However telemetry may be available for one or more of the resource nodes that the service depends upon. For the monitorable objects the problem cause engine sets up a monitoring job with the telemetry component .

The dependency model can be updated under certain conditions. For example new SLOs can be added SLOs can be dropped and SLOs can be changed. Further the resources in the system can change. For example if the resources used to support a given service change then the dependency model should be updated.

In step problem cause routines are invoked to determine if there is a problem associated with an SLO. For example problem cause routines are invoked for at least some of the nodes in the model of . Note that some of the nodes may not have a problem cause routine. For example a monitoring job node will not necessarily have a problem cause routine associated with it. The procedures associated with each node determine if there are problem causes with the element represented by the node. If so those problems are added to a list of problem causes.

In one embodiment the sequence of invoking problem cause routines is as follows. First a problem cause routine is invoked for the service node associated with SLO in the dependency model of . When a procedure is invoked at the service node level this causes recursive invocation of procedures associated with nodes that represent resources upon which the service depends. For example when the procedure for service is invoked procedures associated with nodes SAP SAP and SAP are invoked. The procedure associated with SAP in turn invokes a procedure associated with node AS which invokes a procedure associated with computer. However the procedures do not have to be invoked in this order.

If none of the procedures determines a problem associated with the SLO then the process ends without generating a problem report for this SLO in step . If there is a problem associated with the SLO then control passes to Step to determine a relative contribution of the elements to the problem by analyzing the dependencies between the elements in the dependency model .

For illustrative purposes SLO will be defined as overall system capacity may not be lower than 1500 ops sec. Moreover the procedures associated with node AS and node AS each report that the respective elements in the system are not functioning. For example the telemetry information indicates that those application servers are down. In this example application server AS and application server AS could be each assigned a relative contribution of 0.5. Further a confidence level can be assigned to the causes as well. The assignment of the relative contributions is performed by a monitoring node in one embodiment.

Note that problem cause information may be generated for other elements associated with SLO such as computer and computer to determine if there are additional problem causes associated with the SLO. The dependencies between the elements represented in the dependency model is analyzed to determine the relative contribution of the elements to the problem with the SLO. For example if there is a problem with a computer node the analysis might assign a high contribution to the computer node and a low or even no contribution to any application server node that depends on the computer node.

If there was a violation of an SLO then control passed to Step to report a violation of the SLO with a relative contribution of the problem causes. For example the monitoring node reports that SLO was violated and that application servers AS and AS are each responsible for half of the problem.

If an SLO violation was determined to have not occurred then control passes to Step to report no violation of the SLO but with potential future causes of an SLO violation. The reason for this step is that in some cases there will be a problem without a violation of an SLO. For example consider the case in which the telemetry indicates that application server AS experiences total failure and that application servers AS and AS have no problems. The SLO of 1500 ops sec could still be satisfied. In this case the monitoring node could report that there is no SLO violation of SLO but that there is a problem with application server AS.

Reporting the problem with application server AS as a potential future cause of an SLO violation allows proactive steps to be taken to reduce the possibility of an actual SLO violation by allowing application server AS to be repaired or replaced prior to another application server going down.

The process can then be repeated wherein the problem cause engine determines if there is a violation of another SLO by applying a similar procedure to another part of the model .

The CPU utilization is based on the telemetry information. The problem cause is added to a list of problem causes along with an identifier of computer. The rule is evaluated in the rule engine in accordance with one embodiment.

As another example the telemetry information of node AS has is applied to a procedure associated with node AS. As an example the procedure may include a rule similar to the following 

This problem cause indicates that the application server is running out of capacity. The problem cause is added to the list of problem causes along with an identifier of node AS. The telemetry of node AS can be applied to other rules. For example telemetry information that indicates that the application server has totally failed may be applied to a rule that results in determining a problem cause of total failure of the element associated with node AS.

Step is applying problem cause information associated with one element to a procedure associated with a node that represents another element. For example the problem cause information that was determined by the procedure associated with computer node is applied to the procedure associated with node AS. Note that the element associated with node AS depends on the element associated with computer node. As an example the procedure associated with node AS can have the following rule 

Step is a modifying the problem cause that was determined by another node. Typically the procedure that does the modifying is a procedure associated with node that represents an element that depends from the element whose problem is being modified. For example the procedure associated with node AS may modify a problem cause reported by that procedure associated with computer node . The modifying can include deleting the problem cause and possible creating a problem cause.

In a particular embodiment the system is a Java environment implemented using the Java 2 Enterprise Edition J2EE platform from Sun Microsystems Inc. of Palo Alto Calif. The J2EE platform is designed to provide server side and client side support for distributed multi tier applications. J2EE is a platform independent environment that can be used to develop build and deploy web based enterprise applications. Enterprise JavaBeans EJB is a Java application programming interface API that defines a component architecture for the multi tier client server systems. Java and JavaBeans are trademarks of Sun Microsystems Inc.

In this Java based environment requests are received as HyperText Transfer Protocol HTTP request messages. HTTP is the underlying protocol used by the world wide web. HTTP defines how messages are formatted and transmitted and what actions web servers and web browsers should take in response to various commands. For example HTTP request messages include an initial line optional header lines a blank line and an optional message body. The HTTP request messages use this message body to communicate an action that the originator of the request message would like to have performed and an identifier of a data element on which the action is to be performed.

In one embodiment the problem cause engine takes the form of sets of instructions that are executed by one or more processors. shows a simplified block diagram of an apparatus on which these instructions may be executed. shows one possible embodiment of the apparatus in greater detail. Computer system includes a bus for facilitating information exchange and one or more processors coupled with bus for processing information. Computer system also includes a main memory such as a random access memory RAM or other dynamic storage device coupled to bus for storing information and instructions to be executed by processor . Main memory also may be used for storing temporary variables or other intermediate information during execution of instructions by processor . Computer system may further include a read only memory ROM or other static storage device coupled to bus for storing static information and instructions for processor . A storage device such as a magnetic disk or optical disk is provided and coupled to bus for storing information and instructions.

Computer system may be coupled via bus to a display for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

In computer system bus may be any mechanism and or medium that enables information data etc. to be exchanged between the various components. For example bus may be a set of conductors that carries electrical signals. Bus may further be a network connection that connects one or more of the components. Any mechanism and or medium that enables information data etc. to be exchanged between the various components may be used as bus .

Bus may also be a combination of these mechanisms media. For example processor may communicate with storage device wirelessly. In such a case the bus from the standpoint of processor and storage device would be a wireless medium such as air. Further processor may communicate with ROM capacitively. Further processor may communicate with main memory via a network connection. In this case the bus would be the network connection. Further processor may communicate with display via a set of conductors. In this instance the bus would be the set of conductors. Thus depending upon how the various components communicate with each other bus may take on different forms. Bus as shown in functionally represents all of the mechanisms and or media that enable information signals data etc. to be exchanged between the various components.

The invention is related to the use of computer system for implementing the techniques described herein. According to one embodiment of the invention those techniques are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another machine readable medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus embodiments of the invention are not limited to any specific combination of hardware circuitry and software.

The term machine readable medium as used herein refers to any medium that participates in providing data that causes a machine to operation in a specific fashion. In an embodiment implemented using computer system various machine readable media are involved for example in providing instructions to processor for execution. Such a medium may take many forms including but not limited to non volatile media volatile media and transmission media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Common forms of machine readable media include for example a floppy disk a flexible disk hard disk magnetic tape or any other magnetic medium a CD ROM DVD or any other optical storage medium punchcards papertape any other physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM any other memory chip or cartridge or any other medium from which a computer can read.

Various forms of machine readable media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are exemplary forms of carrier waves transporting the information.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution. In this manner computer system may obtain application code in the form of a carrier wave.

At this point it should be noted that although the invention has been described with reference to a specific embodiment it should not be construed to be so limited. Various modifications may be made by those of ordinary skill in the art with the benefit of this disclosure without departing from the spirit of the invention. Thus the invention should not be limited by the specific embodiments used to illustrate it but only by the scope of the issued claims and the equivalents thereof.

