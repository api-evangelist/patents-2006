---

title: Configuration tool with multi-level priority semantic
abstract: A method for configuration of a program with a plurality of configuration variables to operate on a computer system that includes obtaining a plurality of priority semantics for the plurality of configuration variables, wherein the plurality of priority semantics are heterogeneous, assigning a value for each of the plurality of configuration variables based on the plurality of priority semantics, and configuring the program using the value to operate on the computer system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07831960&OS=07831960&RS=07831960
owner: Oracle America, Inc.
number: 07831960
owner_city: Redwood City
owner_country: US
publication_date: 20060608
---
The typical computer system includes hardware such as processor and memory and software such as the applications and operating systems that execute on the hardware. An execution environment of the program corresponds to the hardware and software that execute with and affect the execution of the program. For example the execution environment of a web browser includes the networking interfaces operating system and hardware.

In order for a program to operate in the execution environment defined by the computer system the program is typically configured for the execution environment. Specifically a developer of the program embeds a variety of configuration variables within the program. The configuration variables define how a program operates in the execution environment. The values for the configuration variables are based on the execution environment of the program preferences of an individual installing and or using the program etc. The program can obtain the values for the configuration variables during execution of the program.

Some programs use a configuration file for holding the configuration values. The individual installing the program or the using the program can modify the configuration file to set the values for the configuration variables.

Typically programs typically have multiple sources for obtaining the value for a configuration variable. For example the configuration values may be set in a configuration file as environmental variables in a script etc. During execution the program obtains the configuration values. Because multiple conflicting sources may exist for the values of a configuration variable a single priority semantic is set for all configuration variables. A priority semantic specifies an ordering of the values of the configuration variables. If a value exists and has the highest priority then the value is used for the configuration of the program.

The typical priority semantic is hierarchical. Specifically the nearer a value is to the user of the program the more priority exists for using the value. For example a value set in the command line is given a higher priority than a default value. Accordingly if a command line value exists then the command line value is used regardless of whether the default value exists. Conversely if a command line value does not exist then the default value is used.

In general in one aspect the invention relates to a method for configuration of a program with a plurality of configuration variables to operate on a computer system that includes obtaining a plurality of priority semantics for the plurality of configuration variables wherein the plurality of priority semantics are heterogeneous assigning a value for each of the plurality of configuration variables based on the plurality of priority semantics and configuring the program using the value to operate on the computer system.

In general in one aspect the invention relates to a data structure for a configuration variable of a program that includes a first element that includes a first argument identifying a first level associated with a first value for the configuration variable a second element that includes a second argument identifying a second level associated with a second value for the configuration variable wherein the data structure defines a priority semantic between the first value and the second value and wherein the priority semantic is used to configure a program to operate on a computer system.

In general in one aspect the invention relates to a computer usable medium having computer readable program code embodied therein for causing a computer system to obtain a plurality of priority semantics for the plurality of configuration variables wherein the plurality of priority semantics are heterogeneous assign a value for each of the plurality of configuration variables based on the plurality of priority semantics and configure the program using the value to operate on the computer system.

Other aspects of the invention will be apparent from the following description and the appended claims.

Specific embodiments of the invention will now be described in detail with reference to the accompanying figures. Like elements in the various figures are denoted by like reference numerals for consistency.

In the following detailed description of embodiments of the invention numerous specific details are set forth in order to provide a more thorough understanding of the invention. However it will be apparent to one of ordinary skill in the art that the invention may be practiced without these specific details. In other instances well known features have not been described in detail to avoid unnecessarily complicating the description.

In general embodiments of the invention provide a method and apparatus for creating a priority semantic and assigning values to the configuration variables based on the priority semantic. Specifically in one or more embodiments of the invention the priority semantic used for any single configuration variable is configurable. More specifically each configuration variable has a separate priority semantic that can be set by the developer of the application. Thus the priority semantic of values that are assigned to the configuration variable are based on the developer and the configuration variable.

The program corresponds to any software for a computer system in accordance with one or more embodiments of the invention. For example the program may correspond to a user level application such as a web browser word processor web server or an operating system application. A computer system not shown corresponds to any type of device that includes functionality to execute a program. For example the computer system may correspond to a personal computer server single processor embedded device or any other similar device.

Embedded within the program are various configuration variables not shown . A configuration variable corresponds to a variable referred to in a program that has an unknown definite value at the time the program is developed. Specifically the value of the configuration variable is used in place of the configuration variable during execution of the program . The value may be default or come from a variety of other sources.

A configuration variable identifies how and whether a program operates on a computer system. For example the value of the configuration variable may correspond to a port number of a port not shown to interface with a network not shown a password security settings etc. The value of the configuration variable may be derived from an individual s preference or to the execution environment of the program .

Continuing with a configuration variable repository is connected to the program . A configuration variable repository corresponds to a storage unit for maintaining information about a configuration variable . The configuration variable repository may for example correspond to a data structure e.g. vector array tree etc. a file a file system database or virtually any other storage unit of data.

The configuration variable repository maintains one or more configuration variable data structures e.g. variable data structure variable n data structure . Specifically the configuration variable repository provides direct or indirect access to the configuration variable data structures e.g. variable data structure variable n data structure .

A configuration variable data structure e.g. variable data structure variable n data structure corresponds to a data structure for maintaining information about a configuration variable. For example the configuration variable data structure may correspond to a programming language Struct or object defined by a developer. Alternatively the configuration variable data structure may correspond to a data structure such as an array stack linked list etc.

The configuration variable data structure e.g. variable data structure variable n data structure includes a variable name e.g. variable name variable n name a variable state e.g. variable state variable n state configuration variable levels e.g. configuration variable levels configuration variable n levels and a variable value e.g. variable value variable n value . Each of these components is described below.

A variable name e.g. variable name variable n name corresponds to an identification mechanism for the configuration variable used within the program . Specifically the configuration variable name corresponds to an alphanumeric string for representing the configuration variable.

In one or more embodiments of the invention a configuration variable actually has two names in the configuration variable repository. The first name corresponds to the name given by the developer when creating an instantiation of the variable data structure. Specifically the first name may correspond to the naming scheme used by the developer such as ipBlobSecName to name an integer pointer to a blob structure that contains the names of sectors. More specifically the instantiation of the data structure has a name.

The second name corresponds to the variable name e.g. variable name variable n name that is used within the configuration variable data structure e.g. variable data structure variable n data structure . In one or more embodiments of the invention the variable name e.g. variable name variable n name is unique within the configuration variable repository . Further the variable name e.g. variable name variable n name corresponds to a familiar name for a variable. For example rather than having the name ipBlobSecName the variable name may correspond to Sector Names. 

The existence of two variable names allows for a program and a user to communicate through natural names. Specifically the program is generally constrained by the naming scheme of a company developing the program . Such names generated by the naming scheme are often non intuitive to a user or developer. Thus when referring to the configuration variable in the program the name defined by the naming scheme can be used. In contrast when assigning values to the configuration variable a developer or user can use the variable name e.g. variable name variable n name .

Continuing with each configuration variable data structure e.g. configuration variable data structure configuration variable n data structure includes a variable state e.g. variable state variable n state . In one or more embodiments of the invention the variable state e.g. variable state variable n state maintains information regarding the status of the configuration variable. The variable state e.g. variable state variable n state may correspond to any type of variable such as an integer character string object etc.

Further in one or more embodiments of the invention the variable state e.g. variable state variable n state represents the status of mandatory variable mandatory and set variable set variable or none of the previous. A mandatory variable corresponds to a configuration variable that value is required in order to execute the program. A set variable corresponds to a configuration variable that has a value.

In one or more embodiments of the invention the variable state e.g. variable state variable n state is implemented as flags that can be switched on and off. The flags represent the not mandatory mandatory and value set. Based on the flags the configuration variables can be controlled. In one or more embodiments of the invention the developer can control the mandatory and not mandatory flags. The value set flag is controlled internally in accordance with one or more embodiments of the invention.

The variable data structure also includes configuration variable levels e.g. configuration variable levels configuration variable n levels . In one or more embodiments of the invention the configuration variable levels e.g. configuration variable levels configuration variable n levels maintain information for accessing the values of the configuration variables. Specifically each configuration variable has one or more possible values and the access to the values are maintained in the configuration variable levels e.g. configuration variable levels configuration variable n levels . Each configuration variable level corresponds to a possible value for the configuration variable. As shown in the number of levels for each configuration variable may not be the same in accordance with one or more embodiments of the invention. For example one configuration variable may have four levels while another configuration level may have eight levels.

In addition the configuration variable levels e.g. configuration variable levels configuration variable n levels maintain the priority semantic for a particular configuration variable. The priority semantic defines which possible value for a configuration variable takes precedence over other possible values.

Because the priority semantic is associated with a particular configuration variable the priority semantic can be heterogeneous across the configuration variables. Specifically the priority semantics associated with the configuration variables may be non uniform. For example one or more configuration variables may be associated with a particular priority semantic while another set of configuration variables can be associated with an entirely different priority semantic. As another example the priority semantic associated each configuration variable may be distinct from the priority semantic associated with other configuration variables in the configuration repository.

The priority semantic may be defined implicitly or explicitly by the configuration variable levels e.g. configuration variable levels configuration variable n levels . The priority semantic is implicit if the value is defined by the order of the configuration variable levels e.g. configuration variable levels configuration variable n levels . For example the first configuration variable level has less priority over the last configuration variable level. Alternatively the priority semantic is explicit if the configuration variable level includes an explicit marker such as a number that orders the configuration variable levels e.g. configuration variable levels configuration variable n levels .

Those skilled in the art will appreciate that the priority semantic of a configuration variable may be defined by a pointer in the configuration variable data structure. Specifically multiple general priority semantics can be defined outside of the configuration variable data structure. A pointer within the configuration variable data structure can link to the priority semantic for the particular configuration variable.

Continuing with each configuration variable level includes a variable argument e.g. variable argument a variable argument k variable n argument l variable n argument j and a variable function e.g. variable function variable function k variable n function variable n function j .

A variable argument e.g. variable argument a variable argument k variable n argument a variable n argument j defines a location of a possible value of a configuration variable in accordance with one or more embodiments of the invention. The location may correspond to the argument itself i.e. the possible value is directly stored in the configuration variable level a file e.g. a configuration file argument passed through an interface e.g. argument of a command line interface graphical user interface application programming interface etc. an environmental variable an extensible markup language XML document default value location or any other source of possible values of a configuration variable.

A variable function e.g. variable function a variable function k variable n function a variable n function j defines how to access the value in accordance with one or more embodiments of the invention. In one or more embodiments of the invention the variable function e.g. variable function a variable function k variable n function variable n function j corresponds to a pointer to a programming language function method script etc. For example if the variable argument corresponds to a configuration file then the variable function may correspond to a pointer to a function that includes functionality to identify which value in the configuration file corresponds to the value for the argument. As another example if the variable argument corresponds to an argument of a command line interface that is indicated by a preceding character e.g. a the variable function may identify how to parse the argument e.g. transform into an integer string etc. .

Those skilled in the art will appreciate that other information may be maintained in each configuration variable level. For example each configuration variable level may also maintain a flag indicating whether the value exists in the configuration variable level.

Continuing with the variable data structure e.g. variable data structure variable n data structure the variable value e.g. variable value variable n value maintains the current value of the configuration variable in accordance with one or more embodiments of the invention. Specifically the variable value e.g. variable value variable n value may correspond to a reference such as a pointer to the configuration variable. The variable value e.g. variable value variable n value allows for quick access to the current value of the configuration variable.

Continuing with a configuration library is connected to the program . The configuration library maintains the functions for accessing the values of the configuration variables. Specifically in one or more embodiment of the invention the functions defined in the configuration library are used to configure the program . The functions include a configuration function not shown a configuration only mandatory function not shown a reconfiguration function not shown and a get variable function not shown in accordance with one or more embodiments of the invention. Each of the aforementioned functions is described below.

A configuration function includes functionality to configure the program . Specifically in one or more embodiments of the invention the configuration function receives as a parameter the configuration variable repository or a link to the configuration variable repository and includes functionality to configure the program using the configuration variable repository . Configuring the program includes setting the values for configuration variables in the program . Further in one or more embodiments of the invention the configuration function includes functionality to return an error indicator if a mandatory configuration variable cannot be set.

The configuration only mandatory function is similar to the configuration function. However the configuration only mandatory function includes functionality to determine which configuration variables are mandatory and configure only the mandatory configuration variables.

The reconfiguration function is also similar to the configuration function. However the reconfiguration function is used while the program is executing. Specifically the reconfiguration function includes functionality to set a reconfigure signal to the program to configure configuration variables. For example the reconfigure signal corresponds to the Sighup signal or other such signal. In one or more embodiment of the invention the reconfiguration function is a wrapper function. Specifically the reconfiguration function includes a call to the configuration function after setting the signal in accordance with one or more embodiments of the invention. Those skilled in the art will appreciate that using the same wrapper premise a developer may create further wrapper functions such as reconfigure only mandatory function etc.

Another function in the configuration library is the get variable function. The get variable function allows access to the value of the configuration variable. In one or more embodiments of the invention the get variable function uses as parameters the configuration variable repository or a link thereto the variable name e.g. variable name variable n name a pointer where the value should be stored when the function returns and an indication whether the current value should be used or whether the current value should be recalculated using the priority semantic. The get variable function includes functionality to identify the configuration variable by variable name e.g. variable name variable n name in the configuration variable repository and either obtain the current value of the configuration variable from the variable value e.g. variable value variable n value or recalculate the current value using priority semantic defined in the configuration variable levels e.g. configuration variable levels configuration variable n levels in accordance with one or more embodiments of the invention. The get variable function further includes functionality to set the pointer parameter equal to the obtained value of the configuration variable.

Using the configuration variable repository and the configuration library the program can easily be configured and reconfigured using configuration variable that have heterogeneous priority semantics.

Next the first configuration variable from the set is obtained Step . The first configuration variable may correspond to any configuration variable in the set.

After obtaining the first configuration variable a configuration variable data structure is dedicated to the configuration variable Step . Specifically space is reserved for the configuration variable and the configuration variable data structure is populated with the characteristics such as the name etc. of the current configuration variable.

The variable name of the configuration variable is next assigned to the configuration variable data structure Step . Specifically a developer or other individual chooses a name e.g. Sector Names that will be used outside of the program. The variable name field of the data structure is then assigned the value of the chosen name.

In addition the variable state of the configuration variable is assigned to the configuration variable data structure Step . At this stage the developer or the program detects whether the configuration variable is mandatory. If the configuration variable is mandatory then the variable state is set to indicate that the configuration variable is mandatory.

Further the parameters for each configuration variable level are assigned Step . Specifically a structure for the configuration variable levels is instantiated. The number of levels is determined by the number of allowable sources for the value of the configuration variable. Each level is populated with the associated variable argument and variable function. In one or more embodiments of the invention the levels are populated according to how a developer wants to set up the priority semantic. Specifically at this stage the developer sets the priority semantic for the configuration variable.

Next the locations specified by the variable argument of the configuration variable are populated with values Step in accordance with one or more embodiments of the invention. Specifically the possible values are assigned created in the location specified by the variable argument. At this stage only known values e.g. default values are populated.

For example suppose the default value for the location of a log file is at program files my program logfile.ext. Then at this stage the value program files my program logfile.ext may be added to the configuration file. Thus when the program is to obtain the configuration value for the location of the log file at a later time then program can use the value written in the configuration file in accordance with one or more embodiments of the invention. Those skilled in the art will appreciate that at any stage a location may be populated with a possible value depending on the location. For example in one or more embodiments of the invention a location corresponding to a command line argument for a configuration variable is only populated directly before execution of the program.

Next a determination is made whether another configuration variable exists in the set that has not been processed Step . If another configuration variable exists then the next configuration variable is obtained Step . Accordingly the method repeats with instantiating a configuration variable data structure for the next configuration variable Step .

Once the configuration variable repository is populated and the priority semantics are defined then the configuration variable repository can be used to configure a program. shows a flowchart of a method for configuration of a program in accordance with one or more embodiments of the invention.

Initially a determination is made whether the configuration is a reconfiguration of the program Step . Specifically a determination is made whether the program is already executing and should obtain the configuration variables again. If the program is executing then the reconfigure signal is set Step . Specifically in one or more embodiments of the invention the sighup signal is set.

After the reconfigure signal is set the program halts Step . Specifically the program is interrupted and a procedure handler is called to allow the program to receive new values for the configuration variables. The procedure handler may subsequently call a configure function.

Typically the program halts only at a safe portion of the program in accordance with one or more embodiments of the invention. Specifically the program is reconfigured only when reconfiguring the program will not inversely affect the program.

Once the program is halted or if the configuration is not a reconfiguration the set of variables for configuration are determined Step in accordance with one or more embodiments of the invention. The set of variables may correspond to the entire set of configuration variables used in the program or a subset thereof. For example rather than configuring the entire set of configuration variables only the mandatory configuration variables are configured or only the variables belonging to a certain category e.g. networking security or any other such category are configured. Accordingly the set of variables may include the set of names of the configuration variables an indication of all the configuration variables or a property or category of the configuration variable.

After determining the set of configuration variables the first variable is obtained from the set Step . The variable that is obtained corresponds to any variable in the configuration variable repository that has the name category or property referred to in the set. For example if the set includes an indication that all variables are in the set then the first variable in the repository is the obtained variable. In another example if the set corresponds to the set of networking variables then the first variable in the configuration repository that is a networking variable is obtained.

Next value for the variable is obtained by using the configuration variable level with the highest priority Step . Specifically at this stage the priority semantic of the configuration variable is determined. The levels in the configuration variable levels are checked according to the priority semantic to obtain the value with the highest priority.

In one or more embodiments of the invention obtaining the value with the highest priority may be performed by identifying the lowest configuration variable level i.e. the configuration variable level with the least priority . The variable function may be called with the variable argument of the lowest configuration variable level in order to obtain the variable value. Specifically the location is found from the variable argument and the value is obtained according to the variable function. For example if the variable argument specifies a file then the file is obtained. Next the value is obtained by traversing the file as specified in the variable function. After obtaining the value with the least priority then the next configuration variable level having the next lowest priority may be obtained to determine whether a value exists for the next configuration variable level. If a value exists then the value may replace the previously obtained value. Thus the steps for obtaining the value may repeat until the value with the highest priority that exists is obtained.

Alternatively rather than traversing the variable data structure from least priority to highest priority the variable data structure may be traversed from highest priority to least priority in accordance with one or more embodiments of the invention to identify the first value that exists and has the highest priority. In the aforementioned alternative the location with the highest priority is checked to determine whether a value exists. If a values does not exist then the location with the next highest priority is checked to determine whether a value with the next highest priority exists. The method may repeat until the value with the highest priority is found.

In addition at this stage the variable value field of the variable data structure is set to reflect that the current value is the obtained value Step . At this stage the value can be assigned to the associated configuration variable in the program. Also at this stage the variable state field is also set Step .

Continuing with once the current value is obtained then a determination is made whether another variable in the set exists that has not been processed Step . If another variable exists then the next variable from the set is obtained Step . Accordingly the method repeats with processing the next variable.

Alternatively once all variables in the set are processed then a determination is made whether the configuration is a reconfiguration Step . If the configuration is a reconfiguration then the program is restarted at the location in which the program was halted Step in accordance with one or more embodiments of the invention.

When the values for the variables in the set are obtained and assigned to the configuration variables then the program can execute using the newly obtained values. At any time after setting up the data structure and during the lifetime of the program the value i.e. the currently used value or the value with the highest priority for any of the configuration variables can be obtained.

After finding the variable in the configuration repository a determination is made whether the current valued is requested Step . The current value is the value in use by the configuration program. An administrator or other such user may want to know which values are in use by the program without changing the values. Accordingly if the current value is requested then the current value is obtained Step . Specifically at this stage the variable value field is used to determine which value is currently set.

Next the current value is returned Step . Returning the value may include sending the value directly changing a commonly known reference variable to reference the value or returning the reference directly.

Alternatively if the current value is not requested then the variable argument and the variable function with the highest priority semantic of the variable is determined Step . Next the value for the variable is returned using the obtained variable argument and variable function Step . Step and Step of can be performed in a similar manner to Step and Step of . Once the value with the highest priority is obtained then the value is returned Step .

As shown in any individual or program can easily obtain values for configuration variables by referring to the natural name of the configuration variable. Accordingly testing and administering an application is simplified by allowing for the values to be easily obtained.

In the following example consider the case in which a program only uses three possible configuration variables varLogFile varPortConnection and varPassword. varLogFile holds the file name for a log file of the program. varPortConnection maintains the port name that should be used by the program for network connections. Finally varPassword maintains the password for accessing a database that the program requires. Further assume that varLogFile and varPassword are mandatory variables and varPortConnection is not mandatory.

In the example the configuration variable repository corresponds to an array that is populated with variable data structures of type configVariable. The configVariable for varLogFile has Log file as the variable name mandatory as the variable state and the following order from lowest to highest for a priority semantic a program.log file is set as the default value a path name of a configuration variable in a configuration file an environment variable and a command line argument.

Continuing with the example the configVariable for varPortConnection has Port Connection as the variable name not mandatory as the variable state and the following order from lowest to highest for a priority semantic no default value a path name of a configuration variable in a configuration file an environment variable and a command line argument.

Lastly the configVariable for varPassword has Password as the variable name mandatory as the variable state and the following order from lowest to highest for a priority semantic only the command line argument is set to force a user to submit the password in order to execute the program.

When the values of the configuration variables in the example are obtained then the values are obtained in the order specified by the developer. Specifically in order to execute the program the user is forced to type in the password. Similarly with the log file as a mandatory variable the location of the log file automatically exists by having a default value for the log file. Accordingly the developer of the program has full control of how to obtain the configuration values for each individual configuration value.

The invention may be implemented on virtually any type of computer regardless of the platform being used. For example as shown in a computer system includes a processor associated memory a storage device and numerous other elements and functionalities typical of today s computers not shown . The computer may also include input means such as a keyboard and a mouse and output means such as a monitor . The computer system is connected to a local area network LAN or a wide area network e.g. the Internet not shown via a network interface connection not shown . Those skilled in the art will appreciate that these input and output means may take other forms.

Further those skilled in the art will appreciate that one or more elements of the aforementioned computer system may be located at a remote location and connected to the other elements over a network. Further the invention may be implemented on a distributed system having a plurality of nodes where each portion of the invention e.g. configuration library functions program configuration levels variable states variable name etc. may be located on a different node within the distributed system. In one embodiment of the invention the node corresponds to a computer system. Alternatively the node may correspond to a processor with associated physical memory. The node may alternatively correspond to a processor with shared memory and or resources. Further software instructions to perform embodiments of the invention may be stored on a computer readable medium such as a compact disc CD a diskette a tape or any other computer readable storage device.

Embodiments of the invention provide a mechanism for creating a prioritized semantic to the configuration processing of a program. Specifically by allowing a developer to define how the configuration variables obtain values the developer can have greater control over the configuration of the program. Such control ensures greater functionality within program and decreases the number of unintentional errors that are cause by errors in modifying the configuration variable.

Further embodiments of the invention create a mechanism whereby maintenance redesigning and enlargement of the configuration of a program is performed with minimal overhead or complication. Specifically an individual can easily use the tools within the configuration library or develop new tools based on the data structures in order to have greater configuration functionality.

Additionally embodiments of the invention provide a mechanism whereby the individual has control of when and which configuration variables are configured. Specifically because subsets of the set of all configuration variables can be configured separately the overhead associated with configuring all configuration variables is avoided.

While the invention has been described with respect to a limited number of embodiments those skilled in the art having benefit of this disclosure will appreciate that other embodiments can be devised which do not depart from the scope of the invention as disclosed herein. Accordingly the scope of the invention should be limited only by the attached claims.

