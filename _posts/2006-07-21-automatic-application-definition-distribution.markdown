---

title: Automatic application definition distribution
abstract: A new master application definition is installed at a server. Responsively, the server determines the identity of a user associated with the server-side application related to the master application definition. The server may then generate an application definition file specific to the application and to the remote wireless device associated with the identified user. The application definition file may contain definitions for: a user interface format; a format for network messages; and a format for storing data. Using these definitions, the wireless device may receive data generated by the server-side application and formatted in accordance with the definitions. The wireless device may then present a user interface for the application. Preferably, the application definition file is an XML file. Advantageously, when changes occur to previously established server-side applications, automatic updating of devices is efficiently accomplished.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07805133&OS=07805133&RS=07805133
owner: Research in Motion Limited
number: 07805133
owner_city: Waterloo, Ontario
owner_country: CA
publication_date: 20060721
---
The present disclosure relates to software devices and methods allowing varied mobile devices to interact with server side software applications and more particularly to the automatic reconfiguration of such mobile devices.

Wireless connectivity is a feature of the modern telecommunications environment. An increasing range of people are using a wide variety of wireless data networks to access corporate data applications.

However there are numerous competing mobile devices that can be used to achieve this. Each device has its own operating system and its own display characteristics. Operating systems are not mutually compatible nor are the display characteristics some are color some are black and white some are text only some are pictorial.

At the same time an increasing number of mobile device users are people without a technical background or high level of educational achievement. Such people are often intimidated by the need to run complex installation programs. Furthermore at present such installation programs generally depend on cable connections to a personal computer by the means of a cradle or other such device.

Therefore a mechanism whereby a mobile client for a server side application may be enabled for multiple wireless devices with minimal modification of the application at the server is required. Further the ability to install and upgrade the application onto mobile devices wirelessly without the need for human intervention or connection to PCs is desirable.

When a new or updated version of a server side application is made available at a server associated with the server side application a new master document may be generated for the server side application. Elements of the master document may be combined at a middleware server to form a device specific document that describes aspects of the server side application to a further application executing on a remote wireless device. The middleware server may recognize that a new master document has been received and automatically generate a device specific document for a given mobile communication device. The middleware server may then automatically transmit the device specific document to the given mobile communication device. Such an installation scenario may be referred to as a push installation scenario. The destination mobile devices for the transmissions of automatically generated device specific documents may be selected on the basis of mobile device groups e.g. sales marketing which are known to require access to the latest version of the relevant server side application.

In accordance with an aspect of the present disclosure there is provided a method of configuring a mobile communication device. The method includes receiving a master document associated with a server side application and responsive to the receiving determining a user identification associated with the server side application. The method further includes generating from elements of the master document a device specific document to describe aspects of the server side application to a further application executing on a mobile communication device associated with the user identification and transmitting the device specific document to the mobile communication device associated with the user identification. Additionally a computing device is provided to carry out the method and a computer readable memory is provided that stores instructions to allow a processor to perform the method.

Other aspects and features of the present disclosure will become apparent to those of ordinary skill in the art upon review of the following description of specific embodiments of the application in conjunction with the accompanying figures.

The storage memory at the device further stores virtual machine software exemplary of an embodiment of the present disclosure. The virtual machine software when executed by the mobile device enables the device to present an interface for a server side application provided by a middleware server as described below. Specifically a virtual machine see which exists through an execution of the virtual machine software on the processor interprets a document that describes aspects of the server side application to virtual machine executing on the device .

The document which may be called an application definition file may define a user interface controlling application functionality and the display format including display flow at the device for a particular server side application the format of data to be exchanged over the wireless network for the particular server side application and the format of data to be stored locally at the device for the particular server side application. The virtual machine uses the operating system software and associated APIs to interact with the device in accordance with the received application definition file. In this way the device may present interfaces for a variety of server side applications executed at a variety of servers. Moreover multiple wireless devices may use a common server side application as each wireless device executes a similar virtual machine that interprets an application definition file to present a user interface and program flow specifically adapted for the device.

As such and as will become apparent the exemplary virtual machine software is specifically adapted to work with the particular mobile device . Thus if the device is a PalmOS or WinCE device the virtual machine that results from executing the exemplary virtual machine software is correspondingly a PalmOS virtual machine or a WinCE virtual machine. As further illustrated in the virtual machine is capable of accessing the local storage at the device .

Other applications libraries and software may also be present within the memory or the local storage and are not specifically illustrated. For example the device may store and execute personal information management PIM software including calendar and contact management applications. Similarly the device could store and execute software allowing the device to perform a number of functions. Software could for example interact with the hardware at the device to allow the device to act as a multimedia player allowing the device to print allowing the device to interact with other incorporated hardware not specifically illustrated including but not limited to a Bluetooth interface a Global Positioning Satellite GPS Receiver and the like. The memory may also store software components in the form of object classes that may be used to extend the functionality of the virtual machine . As will become apparent these external software components in the form of object classes allow the virtual machine to become extensible. The object classes may for example allow the virtual machine to access additional hardware or software local to the device .

As detailed below an exemplary application definition file may be formed using a markup language such as the known extensible Markup Language XML or a variant thereof. In accordance with an embodiment of the present disclosure defined XML entities are understood by the virtual machine . Defined XML entities are detailed in Appendix A FIGS. 16A 16JJ of US Patent Application Publication 2003 0060896 A9. The defined XML entities are interpreted by the virtual machine and may be used as building blocks to present an interface at the mobile device to server side applications as detailed herein.

Specifically as illustrated in the virtual machine software includes conventional XML parser software event handler software screen generation engine software and object classes. The virtual machine software when executed leads to the virtual machine which includes an XML parser an event handler a screen generation engine and instances of the object classes . The object classes correspond to XML entities supported by the virtual machine software and possibly other XML entities contained within an application definition file. Supported XML entities are detailed in Appendix A of previously referenced US Patent Application Publication 2003 0060896 A9. A person of ordinary skill will readily appreciate that those XML entities identified in Appendix A are exemplary only and may be extended or shortened as desired.

The XML parser may be formed in accordance with the Document Object Model or DOM available at www.w3.org DOM the contents of which are hereby incorporated by reference. The XML parser enables the virtual machine to read an application description file. Using the XML parser the virtual machine may form a binary representation of the application definition file for storage at the mobile device thereby eliminating the need to parse text each time an application is used. The XML parser may convert each XML tag contained in the application definition file and its associated data to tokens for later processing. As will become apparent this may avoid the need to repeatedly parse the text of an application description file.

The screen generation engine orchestrates the display of initial and subsequent screens at the mobile device in accordance with an application description file as detailed below.

The event handler allows the virtual machine to react to certain external events. Example events include user interaction with presented screens or display elements incoming messages received from a wireless network or the like.

The object classes define objects that allow the mobile device to process each of the supported XML entities. Each of the object classes includes attributes which are used to store parameters defined by the XML file and functions allowing the XML entity to be processed at the mobile device as detailed in Appendix A of previously referenced US Patent Application Publication 2003 0060896 A9 for each supported XML entity. So as should be apparent supported XML entities are extensible. The virtual machine software may be expanded to support XML entities not detailed in Appendix A . Corresponding object classes could be added to the virtual machine software .

As detailed below upon invocation of a particular application at the mobile device the virtual machine presents an initial screen on the user interface based on the contents of the application definition file . Screen elements are created by the screen generation engine by creating instances of corresponding object classes for defined elements. The object class instances are created using attributes contained in the application definition file . Thereafter the event handler of the virtual machine reacts to events for the application. Again the event handler consults the contents of the application definition file for the application in order to properly react to events. Events may be reacted to by creating instances of an associated action object class from the object classes.

Similarly the object classes of the virtual machine software further include object classes corresponding to data tables and network transactions defined in the Table Definition and Package Definition sections of Appendix A of previously referenced US Patent Application Publication 2003 0060896 A9. At run time instances of object classes corresponding to these classes are created and populated with parameters contained within the application definition file as required.

Using this general description persons of ordinary skill in the art will be able to form the virtual machine software for any particular device. Typically the virtual machine software may be formed using conventional object oriented programming techniques and existing device libraries and APIs as to function as detailed herein. As will be appreciated the particular format of the screen generation engine and the object class instances will vary depending on the type of virtual machine software the device operating system and the APIs available at the device. Once formed a machine executable version of the virtual machine software may be loaded and stored at the mobile device using conventional techniques. The machine executable version of the virtual machine software can be embedded in ROM loaded into RAM over a network or loaded into RAM from a computer readable medium. Although in the preferred embodiment the virtual machine software is formed using object oriented structures persons of ordinary skill will readily appreciate that other approaches could be used to form suitable virtual machine software. For example the object classes forming part of the virtual machine software could be replaced by equivalent functions data structures or subroutines formed using a conventional i.e. non object oriented programming environment. Operation of the virtual machine while consulting an application definition file containing various XML definitions is further detailed below.

Virtual machines like the virtual machine executed at the first example mobile device execute on each of the further example mobile devices and communicate with a middleware server by way of a first example wireless network a second example wireless network a first example network gateway and a second example network gateway . The example gateways are generally available as a service for those people wishing to have data access to wireless networks. An example network gateway is available from Broadbeam Corporation of Cranbury N.J. in association with the trademark SystemsGo . The wireless networks are further connected to one or more computer data networks such as the Internet and or private data networks by way of the example gateways . As will be appreciated the application may work with many types of wireless networks. The middleware server is in turn in communication with a data network that is in communication with the example wireless networks . The communication protocol used for such communication may be TCP IP over an HTTP transport. As could be appreciated other network protocols such as X.25 or SNA could equally be used for this purpose.

The mobile devices communicate with the middleware server in two ways. First the virtual machine at each device may query the middleware server for a list of applications of which a user of an associated mobile device can make use. If a user decides to use a particular application the corresponding mobile device can download a text description in the form of an application definition file for the particular application from the middleware server over its wireless interface. As noted the text description is preferably formatted using XML. Second the virtual machine at each device may send receive present and locally store data related to the execution of applications or its own internal operations. The format of exchanged data for each application is defined by an associated application description file. Again the exchanged data is preferably formatted using XML in accordance with the application description file.

The middleware server in turn stores text application description files for those applications that have been enabled to work with the various mobile devices in a pre defined format understood by the corresponding virtual machines. Software providing the functions of the middleware server in the exemplary embodiment is written in Delphi and uses an SQL Server database.

As noted text files defining application definitions and data may be formatted in XML. For example XML version 1.0 detailed in the XML version 1.0 specification second edition dated Oct. 6 2000 and available at the internet address www.w3.org TR 2000 REC xml 2000 1006 the contents of which are hereby incorporated herein by reference may be used. However as will be appreciated by those of ordinary skill in the art the functionality of storing XML description files is not dependent on the use of any given programming language or database system.

Each application definition file is formatted according to defined rules and uses pre determined XML markup tags known to both the virtual machine executed at the mobile device and the complementary server software executed at the middleware server . Tags define XML entities which are used as building blocks to present an interface to an application at a mobile device. Knowledge of these rules and an understanding of how each tag and section of text should be interpreted allows the virtual machine executed at the mobile device to process an XML application definition file and thereafter provide an interface to an application executed at an application server as described below. The virtual machine effectively acts as an interpreter for a given application definition file.

Defined XML markup tags correspond to XML entities supported at a mobile device and are used to create an application definition file . The defined tags may broadly be classified into three categories corresponding to the three sections and of an application definition file .

Example XML tags and their corresponding significance are detailed in Appendix A of previously referenced US Patent Application Publication 2003 0060896 A9. As noted above the virtual machine software at the mobile device includes object classes corresponding to each of the XML tags. At run time instances of the object classes are created as required.

 this tag defines a screen such that a SCREEN tag pair contains the definitions of the screen elements buttons radio buttons and the like and the events associated with the screen and the screen control elements 

 this tag defines an event to be processed by the virtual machine events can be defined against the application as a whole individual screens or individual items on a given screen sample events include receipt of data over the wireless interface and an edit of text in an edit box and

 this tag defines a particular action that might be associated with an event handler sample actions include navigating to a new window and displaying a message box. .

The second category of example XML tags may be used in the network transaction section of the application definition file . These may include the following example XML tags 

 using this tag the application developer can define an update that is performed to a table in the device based local storage attributes of this tag allow the update to be performed against multiple rows in a given table at once and

The third category of XML tags are those used to define a logical database that may be stored in local storage at the mobile device . The tags available that may be used in this section are 

 this tag along with its attributes defines a table contained within a pair of tags are definitions of the fields contained in that table the attributes of a table control such standard relational database functions as the primary key for the table and

 this tag defines a field and its attributes attributes of a field are those found in a standard relational database system such as the data type whether the field relates to a field in a different table the need to index the field and so on .

The virtual machine may from time to time need to perform certain administrative functions on behalf of a user. In order to do this one of the object classes is associated with a repertoire of tags to communicate needs to the middleware server . Such tags differ from the previous three groupings in that they do not form part of an application definition file but are solely used for administrative communications between the virtual machine and the middleware server . XML packages using these tags are composed and sent due to user interactions with configuration screens of the virtual machine . The tags used for this include 

 this tag allows the application to register and deregister a user for use with the middleware server 

 using this tag a mobile device can register or deregister for an application and have the application definition file downloaded automatically or remove the application definition file from the device based local storage and

 using this tag the user is allowed to identify the device that the user is currently using as the active device if the user s preferred device is malfunctioning or out of power or coverage the user may need a mechanism to tell the middleware server to attempt delivery to a different device .

As such the middleware server stores a master definition file for a given server side application. This master definition file contains an example user interface definition section for the first example mobile device of an example user interface definition section for the mobile device of a user interface definition section N for an Nth mobile device a description of the network transactions that are possible in the network transactions definition section and a definition of the data to be stored locally on the mobile device in the local data definition sections . Preferably the network transactions definition section and the local data definition sections will be the same for all example mobile devices . . . N.

For the first example mobile device the middleware server composes the application definition file by determining the device type and adding the user interface definition section for the first example mobile device to the definition sections for the network transactions and the device local data. For the second example mobile device the middleware server composes the application definition file by adding the user interface definition section for the second example mobile device to the definition sections for the network transactions and the device local data.

The master definition file for a given application is likely to be created away from the middleware server and loaded onto the middleware server by administrative staff charged with the operation of the middleware server . Master definition files could be created either by use of a simple text editor or by a graphical file generation tool. Such a tool might generate part or all of the file using knowledge of the XML formatting rules based on the user s interaction with screen painters graphical data definition tools and the like.

The network interface hardware enables the middleware server to transmit and receive data over a data network . Transmissions are used to communicate with both the virtual machine of the first example mobile device via the wireless networks and the wireless gateways and a backend application server which may be considered representative of one or more application servers. The backend application server may be considered both the end recipient of data received by the middleware server from the mobile devices and the generator of data that is to be sent by the middleware server to the mobile devices.

The storage memory at the middleware server further stores middleware server software exemplary of an embodiment of an aspect of the present disclosure. The middleware server software when executed by the processor of the middleware server enables the middleware server to compose and understand XML packages that are sent by and received by the middleware server . These XML packages may be exchanged between the middleware server and the first example mobile device or between the middleware server and the backend application server .

As mentioned above communication between the backend application server and the middleware server may use HTTP running on top of a standard TCP IP stack. An HTTP connection between a running application at the backend application server and the middleware server may be established in response to receipt of an XML package from a mobile device. The server side application executed at the backend application server provides output to the middleware server over this connection. The server side application output may be formatted by the server side application into appropriate XML packages understood by the virtual machine at the first example mobile device .

That is a given server side application or an interface portion of the server side application formats server side application output into an XML package in a manner consistent with a format defined in the application definition file for the given server side application. Alternatively an interface component separate from the server side application could easily be formed with an understanding of the format for output for the given server side application. That is with a knowledge of the format of data provided by and expected by the given server side application at the backend application server an interface component could be a produced using techniques readily understood by those of ordinary skill. The interface component could translate the output of the given server side application to an XML package as expected by the middleware server . Similarly the interface portion may translate an XML package received via the middleware server from the mobile device into a format understood by the given server side application.

The particular identity of the mobile device on which the interface to the server side application is to be presented may be specified by a suitable identifier contained in a header prefixed to the server side application output XML package. This header may be used by the middleware server to determine the appropriate mobile device to which to forward the XML package. Alternatively the identity of the connection between the backend application server and the middleware server could be used to determine at the middleware server the appropriate mobile device to which to forward the XML package.

For data requested from the middleware server the device under software control by the virtual machine software transmits requests to the middleware server see also which requests pass over the first wireless network to the first network gateway . The first network gateway passes the request to the middleware server . The processor of the middleware server responds by executing a database query on the server database . The response to the query is an indication of the applications that are available to the user and the mobile device . Data representative of the indication is passed by the middleware server to the first network gateway . The first network gateway forwards the data representative of the indication to the mobile device over the first wireless network .

In response to being presented with the list of available applications a user at the first example device may choose to register for an available server side application in the list. When the user chooses to register for an application the virtual machine at the device composes a registration request XML package containing a registration request for the selected application. The wireless interface hardware transmits the registration request XML package to the middleware server data flow . The registration request XML package may contain a tag. The name of the application is specified in the registration request XML package. The middleware server in response to receiving the registration request XML package queries the server database for a user interface definition associated with the specified application and the first example mobile device . Thereafter the middleware server creates the application definition file as detailed with reference to . Then the middleware server composes an XML package including the composed application definition file and transmits the XML package to the mobile device data flow .

The user is then able to use the functionality defined by the application definition file to send and receive data.

After receiving the XML package including the application definition file the XML parser of the virtual machine may parse the XML text of the application definition file to form a tokenized version of the application definition file. That is each XML tag of the application definition file may be converted to a defined token for compact storage and to minimize repeated parsing of the XML text file. The tokenized version of the application definition file may then be stored for immediate or later use by the device .

Thereafter upon invocation of an interface to the particular application for which the device has registered the screen generation engine of the virtual machine locates the definition of an initial screen for the particular application. The initial screen may be identified within the application definition file for the particular application as corresponding to a tag with an associated attribute of First screen yes .

Exemplary steps performed by the virtual machine in processing the initial screen and any screen are illustrated in . As illustrated the screen generation engine generates an instance of an object class defining a screen by parsing the section of the application definition file corresponding to the tag in step S. Supported screen elements may be buttons edit boxes menus list boxes and choice items as identified in sections 5.3 5.4 and 5.5 of Appendix A of previously referenced US Patent Application Publication 2003 0060896 A9. Other screen elements such as images and checkboxes as detailed in Appendix A may also be supported. However for clarity of illustration the processing of the other screen elements by the screen generation engine is not detailed. Each supported tag under the SCREEN definition section in turn causes creation of instances of object classes within the virtual machine . Typically instances of object classes corresponding to the tags used for creation of a screen result in presentation of data at the mobile device . As well the creation of such instances may give rise to events e.g. user interaction and actions to be processed at the device .

Each element definition causes the virtual machine to use the operating system of the mobile device to create a corresponding display element of a graphical user interface as more particularly illustrated in . Specifically for each element the associated XML definition is read in step S S S S and S and a corresponding instance of a screen object class defined as part of the virtual machine software is created by the virtual machine in steps S S S S and S in accordance with steps S and onward illustrated in . Each interface object class instance is created in step S. Each instance takes as attribute values defined by the XML text associated with the element. A method of the object is further called in step S and causes a corresponding device operating system object to be created. Those attributes defined in the XML text file and stored within the virtual machine object are applied to the corresponding display object created using the device operating system in steps SS S. These steps are repeated for all attributes of the virtual machine object. For any element allowing user interaction giving rise to an operating system event the event handler of the virtual machine is registered to process operating system events as detailed below.

Additionally for each event as identified by an tag and action as identified by an tag associated with each XML element the virtual machine creates a corresponding event object and action object forming part of the virtual machine software. The virtual machine further maintains a list identifying each event object and each action object and an associated identifier of an event in steps S to S.

Steps S S are repeated for each element of the screen in steps S S S S and S as illustrated in . All elements between the

 definition tags are so processed. After the entire screen has been so created in memory it is displayed in step S using conventional techniques.

As will be appreciated objects are specific to the type of device executing the virtual machine software. Functions initiated as a result of the XML description may require event handling. This event handling is processed by the event handler of the virtual machine in accordance with the application definition file . Similarly receipt of data from a mobile network will give rise to events. The event handler associated with a particular application presented at the device similarly processes incoming messages for that particular application. In response to the events the virtual machine instantiates software objects and calls functions of those objects as required by the definitions contained within the XML definitions contained within the application definition file giving rise to the event.

As noted the virtual machine software includes object classes allowing the virtual machine to create objects corresponding to an tag. The event object classes include methods specific to the mobile device that allow the device to process each of the defined XML descriptions contained within the application definition file and also allow the device to process program event flow resulting from the processing of each XML description.

Events may be handled by the virtual machine as illustrated in . Specifically as the event handler has been registered with the operating system for created objects upon occurrence of an event steps S and onward are performed in response to the operating system detecting an event.

An identifier of the event is passed to the event handler in step S. In steps S S this identifier is compared to the known list of events created as a result of steps S S. For an identified event actions associated with that event are processed in step S S. That is the virtual machine performs the action defined in the tag associated with the tag corresponding to the event giving rise to processing by the event handler . The may cause creation of a new screen as defined by a screen tag a network transmission a local storage or the like.

New screens in turn are created by invocation of the screen generation engine as detailed in . In this manner the navigation through the screens of the application is accomplished according to the definition embodied in the application definition file.

Similarly when the user wishes to communicate with the middleware server or store data locally the event handler creates instances of corresponding object classes of the virtual machine software and calls methods of the instances to transmit the data or store the data locally using the local device operating system. The format of the data stored locally is defined by the local data definition section the format of XML packages transmitted or received is defined in the network transaction package definition section .

For example data that is to be sent to the wireless network is assembled into XML packages using methods of an XML builder object. Methods defined in as part of the XML builder object allow creation of a full XML package before passing the completed XML package to a message server object. The message server object uses the device s network APIs to transmit the completed XML package across the wireless network.

XML packages received from the data network give rise to events processed by the event handler . Processing of the receipt of XML packages is not specifically illustrated in . However the receipt of a XML package triggers a data event recognized by the device operating system see . This data event is passed to the virtual machine and the event handler inspects the received XML package. As long as the data received is a valid XML data package as contained within the application definition file the virtual machine inspects the list of recognized XML entities.

So for example a user could trigger the transmission of a login request data flow by interacting with an initial login screen defined in the application definition file for the application. The login request data flow would be passed by the middleware server to the backend application server . The backend application server according to the logic embedded within its application would return a login response data flow which the middleware server would pass to the virtual machine . Other applications running on the same or other application servers might involve different interactions the nature of such interactions being solely dependent on the functionality and logic embedded within the backend application server and remaining independent of the middleware server .

A first example message is representative of a message sent by the mobile device to request the list of applications that the middleware server has available to that user on that device. The first example message specifies a type for the mobile device using text contained by the tag pair. A second example message is representative of a message sent to the mobile device by the middleware server in response to the first example message . The second example message contains a set of tag pairs each tag pair enveloping an identity of a single application that is available to the user at the device . A third example message is representative of a message sent from the mobile device to the middleware server to request registration for a single server side application. The tags specify information about the user and the mobile device . A fourth example message is representative of a message sent to the mobile device by the middleware server in response to the third example registration request message . The tag pair envelope a code indicating success or failure. In the fourth example message shown a success is indicated by CONFIRM and is followed by an interface description for the application enveloped by the

 tag pair. This interface description may then be stored locally within the storage memory of the mobile device .

As noted when a user starts an interface to an application an application definition file for which has been downloaded in the manner described above the virtual machine reads the interface description section of the application definition file. The virtual machine identifies the screen that should be displayed on startup and displays the elements of the screen as detailed in relation to . The user may then use the functionality defined by the application definition file to send XML packages to and receive XML packages from the associated backend application server via the middleware server .

For the purposes of illustration illustrate the presentation of a user interface for a sample screen on a Windows CE Portable Digital Assistant. As illustrated in a first XML portion of the application definition file is an interface description for a screen with the name NewMsg . This interface description may be contained within the user interface definition section of the application definition file associated with the server side application. The screen is defined to have a single button identified by a tag which is identified as item D in with attributes NAME OK CAPTION Send INDEX 0 X 0 Y 15 HT 18 and WT 50 . This button gives rise to a single event identified by the tag that has two associated actions one defined by the tag with attribute TYPE SAVE and one defined by the tag with attribute TYPE ARML . The latter action results in the generation of an XML package defined by the tag with attribute TYPE ME which has a data format as defined enveloped by the

 tag pair. The package is defined to begin with a TAG with attributes MSGID FROM and SUBJECT. Additionally the interface description for the screen includes definitions for three edit boxes as enveloped by the

 tag pair. The definitions for the three edit boxes are identified in as lines of XML code labeled A B and C.

Upon invocation of the interface to the server side application at the mobile device the screen generation engine of the virtual machine processes the interface definition for the screen as detailed with reference to . That is for XML tag D the screen generation engine creates a button object in accordance with steps S S. Similarly for XML tag pairs A B and C within the application definition file the virtual machine creates edit box objects i.e. steps S S see . The data contained within the objects reflects the attributes of the relevant button and edit box tags contained in the application definition file associated with the server side application.

The resulting screen presented by the user interface of the mobile device is illustrated in . The user interface depicts a screen called NewMsg which uses interface items that provide a user with an ability to compose and send data. The screen illustrated in has an edit box named To corresponding to XML tag pair A in an edit box named Subject corresponding to XML tag pair B in and an edit box named Body corresponding to XML tag pair C in . The screen illustrated in also incorporates a button named OK corresponding to XML tag D in .

Call backs associated with the OK button cause graphical user interface application software as part of the operating system at the mobile device to return control to the event handier of the virtual machine . Thus as the user interacts with the user interface the user may input data within the presented screen using the mobile device API. Once data is to be exchanged with the middleware server the user may press the OK button and by doing so invoke an event which is initially handled by the operating system of the mobile device . However during the creation of the OK button in steps S S any call back associated with the button was registered to be handled by the event handler of the virtual machine . Upon completion the virtual machine receives data corresponding to the user s interaction with the user interface and packages this data into an XML package using corresponding objects. The XML package is populated according to the rules within the application definition file .

The event handler in turn processes the event caused by user interaction with the OK button in accordance with the tag and corresponding

 tag associated with the tag referenced as XML tag D associated with the OK button . The events and associated actions are listed as data items associated with the relevant user interface item within the application definition file . The tag causes the virtual machine to create an object that forms an XML package for transmission to the middleware server in accordance with the format defined within the tag pair. That is a template defined beginning with the tag with attribute TYPE ME for the XML package to be sent is defined within the tag pair for a given user interface item. This template specifies the format of the XML package to be sent and may include certain variable fields. The variable fields in the formatted XML package take on contents that vary according to the values received in data entry fields on the current and previous screens. The definition of the template specifies which data entry field should be interrogated to populate a given variable field within the XML package that is to be sent.

According to the template some of the variable fields of the XML package are filled dynamically from data inserted by the user into edit boxes presented on the display of the mobile device . The template includes placeholders delimited by square brackets i.e. and . These placeholders reference a data source from which data for filling the corresponding section of the template should be obtained. A suitable data source might be a user interface field on the current screen a user interface field on a previous screen or a table in a device based logical database. The virtual machine after reading the data source name searches for the field corresponding to the referenced data source and replaces the placeholder with data contained within the named field. For example the SUBJECT attribute of the tag in the first XML portion references NewMsg.Subject . As such content for the SUBJECT attribute may be read from the edit box field named Subject on the screen named NewMsg . This process is repeated for each such placeholder until the virtual machine reading through the template has replaced all placeholders in the template with content to form an XML package.

An exemplary XML package containing data obtained as a result of input provided to the fields of the NewMsg screen is illustrated in . The exemplary XML package may have been created responsive to user interaction with the NewMsg screen which user interaction may be considered to have been culminated by interaction with the OK button see corresponding to XML tag D in the first XML portion . In this case the user has entered the text steven nextair.com into the edit box named To the text Hello Back into the edit box named Subject and the text I am responding to your message into the edit box named Body .

The virtual machine using the template inspects these three edit boxes and places the text contained within each edit box in the appropriate position in the template. For example the placeholder NewMsg.Subject is replaced by Hello Back . The virtual machine creates the exemplary XML package by invoking functionality embedded within an XML builder software object to populate the variable fields of the template contained in the first XML portion . Once the exemplary XML package has been assembled in this fashion a relevant method of the message server object is invoked to transmit the exemplary XML package across the network.

When an XML package is received the event handler of the virtual machine is notified. In response the virtual machine the XML parser to build a list of name value pairs contained within the received XML package. Thereafter methods within an object class for processing incoming XML packages are invoked that allow the virtual machine to inspect the XML package to determine a server side application to associate with the XML package and select a corresponding application definition file. The methods within the object class for processing incoming XML packages also allow the virtual machine to inspect the application definition file to identify the fields in the device based logical database and the user interface screens that may need to be updated with new data received in the XML package. In the case wherein the user interface screens are updated such updating may be accomplished according to the procedures normal to the particular device.

Handling of incoming XML packages is defined in the application definition file . That is for each of the possible XML packages that can be received the application description file includes definitions of device based logical database tables and screen items that should be updated as well as which section of the package updates which device based logical database table or screen item. After an XML package has been received the event handler uses rules based on the application description file to identify which device based logical database tables or screen items need to be updated.

Two example tables are defined in the second XML portion of for formatting the logical database for the e mail application. A first XML item E of the second XML portion corresponds to a first table labeled SENTITEMS in . A second XML item F of the second XML portion corresponds to a second table labeled RECIPIENTS in . The first table stores details of sent e mail messages and has four fields. The second table stores recipients of sent e mail messages and has three fields.

The third XML portion includes a first section and a second section . The first section defines how fields of a received XML package may be used to update the first table of . An example line defines how the MSGID field of the received XML package may be used to update a field named LNGMESSAGEID in the first table of . Similarly the second section defines how the fields of the received XML package may be used to update fields of the second table of .

The third XML portion is contained by an tag pair. Attributes of the tag provide rules that instruct the virtual machine as to whether data contained within an XML package of a given XML package type should be used to update tables in the device based logical database. These rules may be applied whenever an XML package of the given XML package type is sent or received.

As can be seen from the preceding description and example such an approach has significant advantages over traditional methods of deploying applications onto mobile devices. First the definition of an application s functionality is separated from the details associated with implementing such functionality thereby allowing the implementers of a mobile application to concentrate on the functionality and ignore implementation details. Second application definition files can be downloaded wirelessly wherever the device happens to be at the time at which the functionality is required. This greatly improves the usefulness of the mobile device by removing reliance on returning the device to a cradle and running a complex installation program. Third the use of application definition files allows flexible definitions for numerous applications. Server side applications may be easily ported to a number of device types.

Notably mobile communication devices of the current generation may act not only as a mobile telephone but also may execute an e mail client application a personal information manager PIM application a digital photo organizer application etc. There are often many widely varied options that may be configured. While some of the options are related to personalization of the mobile device proper configuration of other options may be essential to a proper interaction between the mobile device and an enterprise with which a user of the mobile device is associated.

When a new mobile device is issued to an individual associated with the enterprise an information technology IT specialist may be given the task of configuring the new mobile device for use with the enterprise. To this end the IT specialist may be required to navigate multiple screens on the new mobile device to set communications or other device settings.

In view of the above disclosure the IT specialist may be required to separately request an application definition file for each server side application of potentially many server side applications with which the new mobile device is expected to interact.

In another scenario an employee with a previously personalized and configured mobile device may require that a replacement mobile device be similarly personalized and configured. The replacement mobile device may be required due to the loss of a previous mobile device software or hardware failure of the previous mobile device or merely a hardware upgrade from the previous mobile device to a newer mobile device.

Such personalization and configuration of mobile devices though beneficial may be considered tedious and time consuming.

In overview the use of device specific documents to describe aspects of server side applications to the virtual machine executing on the first exemplary mobile device that is application definition files as disclosed above allows for a record to be maintained at the middleware server of the application definition files that have been provided to a given user with a given user ID. Furthermore the given user ID may be grouped with other user IDs where the other user IDs are associated with users with which the given user shares some commonality be it a common managerial stratum a common supervisor or a common rate plan for three examples.

A mobile device may trigger automatic mobile device configuration by performing an initial registration process with the middleware server . Such an initial registration process may for instance involve the virtual machine see executed at the first exemplary mobile device see and formulating and transmitting a registration request see to the middleware server .

In view of the middleware server receives step the registration request. In particular in an exemplary case similar to the receipt of a request detailed above the registration request passes from the first exemplary mobile device to the first network gateway over the first wireless network see . The first network gateway which may be part of the data network illustrated in passes the registration request to the middleware server . The network interface hardware of the middleware server receives the registration request and stores the registration request in the memory such that the registration request is available for processing by the processor .

Processing of the registration request may for example involve the processor determining the user ID step associated with the device that formulated the registration request. Such a user ID may be arranged to be part of a registration request that conforms to a standard for such requests. For instance the user ID may be contained in a User ID field of the registration request or where the registration request is formed in XML or a variant thereof the registration request may include a User ID element. In either case the middleware server may parse the received registration request to determine the associated user ID.

Once the processor has determined the user ID for a given registration request the processor may based on the user ID determine step a set of N server side applications that have been previously associated with the user ID say in the server database see . The previous association between user ID and server side applications may be manually established by an administrator of the middleware server or automatically established through historical monitoring of requests made by a mobile device associated with the user ID.

The processor may then generate step an application definition file for the mobile device for each of the server side applications in the determined set. Generation of an application definition file step has been described above in conjunction with the description of and to involve determination of a device type for the mobile device requesting the application definition file and the addition of the type appropriate user interface definition section to the network transactions definition section and the local data definition sections .

Once the first application definition file is generated the middleware server may transmit step the first application definition file see to the mobile device. Once the second application definition file is generated the middleware server may transmit step the second application definition file see to the mobile device. Such generation step and transmission step may continue until the Nth application definition file N has been generated step and transmitted step to the mobile device.

The administrator of the middleware server may independently determine the set of applications appropriate to the user and save the record of the set of applications in an Application Listing record in the database in association with the user ID of the user. Alternatively the administrator may establish a single record of the set of applications to associate with users that have common properties and consequently common application requirements. In such a case the administrator may create a Group Listing record wherein the user IDs of the members of the group are listed. The Group Listing record may be associated with an Application Listing record which identifies applications that are to be associated with the user IDs listed in the Group Listing record. As such more efficient associations are possible.

Beyond the application definition files that are associated with server side applications there may exist application definition files that provide various settings for the mobile device.

In a first example an application definition file may provide the mobile device with a particular phone number that a device is to use for a dial up connection to a specific network. Alternatively an application definition file may provide a particular Internet Protocol IP address to which the device is to connect as a point of server connection. For instance a user may need to connect to a particular computer at the particular IP address that is in a designated demilitarized zone. In computer security terminology a demilitarized zone is a network area that sits between an organization s internal network and an external network usually the Internet. The user may need to connect to the particular computer for business transactions so after an initial login the user may want to be re configured re directed to a different entry point to the corporate LAN.

In another example an application definition file may provide the mobile device with an address for a Virtual Private Network VPN server that provides secure authenticated network connections. For instance the user may be required to be authenticated before being able to access a Local Area Network LAN for access to corporate applications. The application definition file may also provide encryption key settings and an indication of an authentication protocol HTTP LDAP NT etc. .

The mobile device may regularly establish a connection to a server gateway. Based on a type for the connection being established to the server gateway an optimized protocol may be selected. The optimized protocol may be for instance the known Transport Control Protocol Internet Protocol TCP IP or the User Datagram Protocol. The decision of which protocol to use may be for instance based on whether the mobile device is establishing the connection to the server gateway over a Wide Area Network over a public wireless network or over a private WiFi network. In addition a separate configuration may be required for each network if the device supports roaming between these different technologies. An application definition file may provide the mobile device with a mapping between type of connection and optimized protocol. Additionally the application definition file may provide the mobile device with configuration details for each of the protocols.

In a further example an application definition file may provide the mobile device with configuration details for delivery mechanisms. The most efficient data delivery mechanism may depend on aspects of the server side applications with which the mobile device is to interact. As such in addition to configuration details for delivery mechanisms the application definition file may provide an indication of delivery mechanism to use for interaction with a particular server side application.

For instance if the server side application is to provide the mobile device with instant notification of new data a push protocol may be used as the delivery mechanism. Exemplary push protocols include UDP hole punching and the Push Access Protocol. Network Address Translator traversal through UDP hole punching is a method for establishing bidirectional UDP connections between Internet hosts in private networks using Network Address Translation. The Push Access Protocol is a protocol defined in WAP 164 of the Wireless Application Protocol suite from the Open Mobile Alliance. In the case of UDP push a keep alive beacon may be required to keep port mappings alive in public wireless gateways.

In contrast if the server side application is to provide the mobile device with non critical updating of data a simple pull protocol may be used as the delivery mechanism. Exemplary pull protocols include the Hypertext Transfer Protocol and the Simple Object Access Protocol. It should be clear to a person of ordinary skill that other client request response technologies could be used. In the case of the pull protocols the application definition file may provide an indication of a polling interval of a certain time duration. The mobile device using a pull protocol for the delivery mechanism may transmit a request for an update in a background process. Subsequent request transmissions may be separated in time by the polling interval.

In a still further example an application definition file may provide the mobile device with configuration details for a particular mechanism for dealing with out of coverage scenarios on the mobile device. For example the configuration details may indicate whether the device should attempt to re connect after the device has been disconnected. Additionally the configuration details may indicate a value for a number of times the device try to re connect before alerting the user. Furthermore the configuration details may indicate duration for the time between re connection attempts. Alternatively the configuration details may indicate that the device is to notify the user whenever the device goes out of network coverage so that the user may be responsible for attempting to re establish a connection.

Further configuration settings such as distinctive ringing background color or pattern server address for multimedia messaging etc. may also be provided in an application definition file. Additional configuration settings may include for example use of a predetermined retry rate use of encryption use of an alarm to indicate that there are more than five items in an outbound queue use of a Secure Sockets Layer SSL .

Advantageously IT staff are relieved from having to configure each device manually and request each application definition file manually. Upon registration a relatively uninformed field user can quickly have a properly configured mobile device e.g. after accidentally erasing all memory on the device.

It has been previously anticipated that in response to either of a new server side application or an updated server side application being made available through the middleware server a notification message would be transmitted over a wireless connection to a set of mobile devices indicating that the new or updated server side application is available. It has also been previously anticipated that in response to receiving the notification message each of the mobile devices in the set may display a dialog that provides a user with the option to download and install a new application definition file corresponding to the new or updated server side application. According to this approach the user is required to take positive action to authorize the download and installation of the new application definition file. If this positive action is not taken by a given user the application definition file for an updated server side application may become out of date at the mobile device associated with the given user.

The above discussed automated delivery of application definition files based on the registration of a mobile device may be further extended to handle automated delivery of new application definition files related to new or updated server side applications. That is new application definition files may be delivered to mobile devices without the requirement for positive action to be taken by the users of those mobile devices.

As discussed above the master definition file for a given server side application may be created away from the middleware server and loaded onto the middleware server by administrative staff charged with the operation of the middleware server . The master definition file may also be generated at the backend server and transmitted data flow to the middleware server . In either case the middleware server may receive the master definition file for the given server side application and store the master definition file in the database .

As such the determining of a user ID to associate with a given application may simply involve the middleware server parsing the received master definition file to determine the server side application and then querying the database with the name of the server side application as a key. The response from the database may be an individual user ID or may be a Group Listing record with several user IDs listed.

Once the middleware server has determined at least one user ID to associate with the server side application that is related to the received master definition file the middleware server may based on the user ID generate step an application definition file for the server side application where the application definition file is specific to the mobile device associated with the determined user ID.

Generation of the application definition file step has been described above in conjunction with the description of and to involve determination of a device type for the mobile device to which the application definition file is to be transmitted and the addition of the type appropriate user interface definition section to the network transactions definition section and the local data definition sections .

Once the application definition file is generated the middleware server may transmit step the application definition file data flow to the mobile device.

The above example provides a scenario in which the server side application has already been associated with the user ID. In an alternative scenario a new server side application becomes available. It may be that an administrator composes a new master application definition for the new server side application and installs the new master application definition in the database at the middleware server . Given that an interface to the new server side application has not been in use at mobile devices previously it may be considered that the new server side application has not been historically associated with any user IDs. As such any association between the new server side application and user IDs may be established by the administrator.

The administrator may establish a direct association between the new server side application and a particular user ID. Alternatively the administrator may establish an indirect association between the new server side application and a grouping of user IDs. As discussed above the administrator may establish a Group Listing record wherein the user IDs of the members of the group are listed. The Group Listing record may be associated with an Application Listing record which identifies applications that are to be associated with the user IDs listed in the Group Listing record. When adding the new master application definition to the database the administrator may also update the Application Listing record by adding the name of the new server side application. As such the middleware server may determine which mobile devices for which to generate new application definition files i.e. those mobile devices associated with the user IDs listed in the Group Listing record associated with the updated Application Listing record.

Advantageously where the middleware server is configured according to an embodiment of the present disclosure the users of the mobile devices associated with server side applications offered through the middleware server may be confident that their respective devices are equipped with up to date application definition files.

It will be understood that the invention is not limited to the embodiments described herein which are merely illustrative of a preferred embodiment of carrying out the invention and which is susceptible to modification of form arrangement of parts steps details and order of operation. The invention rather is intended to encompass all such modification within its scope as defined by the claims.

