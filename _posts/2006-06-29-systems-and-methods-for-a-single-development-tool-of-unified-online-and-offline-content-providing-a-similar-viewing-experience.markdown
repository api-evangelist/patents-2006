---

title: Systems and methods for a single development tool of unified online and offline content providing a similar viewing experience
abstract: The present invention provides a comprehensive development platform and client-side technology for intelligent and cost-effective delivery of video, audio and broadband content over a network, such as the Internet, to desktop, mobile computing, and network connected devices. In one embodiment of the present invention, a content development environment provides a single tool for developing unified online and offline content. With the content development tool, the user interface of the offline content has a substantially similar appearance and behavior to the user interface presented by the online content. As such, the user interface for the both the online and offline content may be generated from a single user interface design. The content development tool generates and publishes a set of online content files and a set of offline content files from the single design. In some embodiments, the offline content is published to a web-site of a content provider as a download package to be automatically downloaded for local use by a client using other techniques of the present invention. In some cases, the content development tool automatically creates and configures a mechanism in the online content to download the corresponding and substantially similar offline content to the client. As such, a content provider may use a single development tool to create a consistent and desired user experience, including branding and interactive content, for both online and offline content.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08015491&OS=08015491&RS=08015491
owner: Maven Networks, Inc.
number: 08015491
owner_city: Cambridge
owner_country: US
publication_date: 20060629
---
This application claims priority to U.S. Provisional patent application Ser. No. 60 777 672 entitled SYSTEMS AND METHODS FOR DELIVERING AND MANAGING MEDIA CONTENT DOWNLOADED TO A NETWORK CONNECTED DEVICE filed Feb. 28 2006 which is hereby incorporated in its entirety by reference.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The present invention generally relates to an intelligent client delivery system for delivering and managing media content downloaded to a computing device. More particularly the present invention relates to systems and methods of a single development tool providing both online and offline having a substantially similar user experience.

As the number of people communicating over a publicly accessible communication network such as the Internet continues to grow the use availability and distribution of media content via the Internet such as video and audio media files grows as well. The popularity of delivering and experiencing media content via the Internet continues to grow because the Internet provides for both immediacy of the media and interactivity of the media. Media content can provide a rich interactive user experience from a network connected device. In addition media content delivered to computing devices via a network may receive input from the user or information about the user to both personalize and dynamically enhance the user experience thereby further increasing the immediacy and interactivity of the medium.

As such delivering media content via the Internet is quickly gaining adoption as a mechanism for reaching consumers for purposes of marketing and monetizing media content or media assets. For example traditional broadcasting services such as television and television advertising are interested in transforming broadcasting content advertisement and other media assets into Internet delivered content and Internet enabled consumer experiences that can be monetized controlled and managed. However even with increasing improvements in consumer devices broadband technologies and multimedia interfaces the adoption and movement towards Internet or Internet Protocol IP based delivery of media content to consumer devices raises various challenges in development implementation and deployment including content ingestion media encoding and transcoding content and catalog management publishing and delivery device targeting digital rights management and reporting.

One challenge facing the development of IP based media delivery is delivering offline media content that provides a similar user experience to online content of a content provider. Content providers may invest thousands to millions of dollars in designing online content having rich interactive content to present a brand attract new customers and maintain customer loyalty. The content provider may use an online content development tool such as a web site development tool to create edit and maintain the appearance of the online content and corresponding interaction with the user. In some cases a content provider may want to deliver or have the user download content to the user s client to be viewed locally or offline on the client. For example this may be in order to provide a better viewing performance of higher quality media such as high definition video. In another example downloading content to the user s client may allow the user to view the content when not connected to the network. To create edit and maintain the appearance and behavior of the offline content the content provider may use an offline content development tool

As the content provider has invested in the design and branding of online content the content provider may try to design the offline content to be similar to the online content. However using a different development tool for creating offline content as compared to the online content may present challenges in providing a similar user experience content design and branding of which the content provider has invested. For example the offline content development tool may use different user interface elements than the user interface of the online content development tool. As such the appearance and behavior of user interface elements may not appear the same in the offline experience as the online experience. Additionally the content provider may need to become proficient using both the online and offline content development tools. Furthermore every time a change is made in the online content with the online content development tool a corresponding change needs to be made in the offline content with the offline content development tool. Therefore systems and methods are desired for developing online and offline content from a single development tool that automatically provides for the offline content which delivers a similar user experience as the appearance and behavior of the online content.

The present invention provides a comprehensive development platform and client side technology for intelligent and cost effective delivery of video audio and broadband content over a network such as the Internet to desktop mobile computing and network connected devices. In one embodiment of the present invention a content development environment provides a single tool for developing unified online and offline content. With the content development tool the user interface of the offline content has a substantially similar appearance and behavior to the user interface presented by the online content. As such the user interface for the both the online and offline content may be generated from a single user interface design. The content development tool generates and publishes a set of online content files and a set of offline content files from the single design. In some embodiments the offline content is published to a web site of a content provider as a download package to be automatically downloaded for local use by a client using other techniques of the present invention. In some cases the content development tool automatically creates and configures a mechanism in the online content to download the corresponding and substantially similar offline content to the client. As such a content provider may use a single development tool to create a consistent and desired user experience including branding and interactive content for both online and offline content.

In one aspect the present invention relates to a method for creating online and offline content from a single development environment to provide offline content similar to corresponding online content. The method includes creating via a content development tool a first user interface having a first set of one or more elements for displaying a video media communicated via a network. The first set of one or more elements having an appearance and behavior. The method includes identifying via the content development tool an element of the first user interface capable of downloading content comprising the video media from a content source to a storage of a client The content stored in the storage of the client provides a second user interface having a second set of one or more elements for displaying the video media stored in the storage of the client. The method also includes generating by the content development tool a first set of files for displaying on the client the first user interface via a browser and generating by the content development tool from the first user interface a second set of files for providing the content to be downloaded to the storage of the client to display the second user interface on the client via an application. The second set of one or more elements of the second user interface of the generated second set of files corresponds and is substantially similar to the appearance and behavior of the first set of one or more elements of the first user interface.

In one embodiment of the present invention the element of the first user interface is capable of invoking the application to display the video media from the storage of the client via the second set of one or more elements. In another embodiment the method includes configuring the element of the first user interface to display the video media from storage instead of via the network upon selection of the element by a user of the browser. In some embodiments the method includes configuring the element of the first user interface to invoke the application to display the second user interface from the storage of the client. In other embodiments the method includes configuring the element of the first user interface to download the content to the storage of the client as a background process transparent to a user of the browser. In yet another embodiment the method includes configuring the element of the first user interface to automatically download the content to the storage of the client upon request by the user of the browser to display the video media in a form having a desired video characteristic. The desired video characteristic may include one or more of the following 1 a resolution 2 an aspect ratio 3 a size 4 a quality 5 a bit per pixel 6 a compression 7 a frame rate and 8 a bit rate.

In some embodiments the method configures the element of the first user interface to automatically download the content to the storage of the client upon displaying of the first user interface in the browser. In one embodiment the method includes providing the first set of files to a web server. In another embodiment the method includes providing the second set of files to a content source for download to the client. In other embodiments the method includes generating the second set of files to display the second user interface to appear as one of related to or a portion of the first user interface. The video media of the second set of files to be stored in the storage of the client may have a higher definition of quality than the video media communicated via the network.

In another aspect the present invention is related to a content development tool for creating both offline and online content and offline content that corresponds and is similar to the online content. The content development tool includes a development user interface for creating a first user interface comprising a first set of one or more elements for displaying a video media communicated via a network. The first set of one or more elements has an appearance and behavior. The content development tool includes a configuration mechanism for configuring an element of the first user interface capable of downloading content comprising the video media from a content source to a storage of a client. The content stored in the storage of the client provides a second user interface having a second set of one or more elements for displaying the video media stored in the storage of the client. The content development tool also includes a content generator for generating a first set of files for displaying on the client the first user interface via a browser and from the first user interface a second set of files for providing the content to be downloaded to the storage of the client to display the second user interface on the client via an application. The second set of one or more elements of the second user interface of the generated second set of files correspond and is substantially similar to the appearance and behavior of the first set of one or more elements of the first user interface.

In one embodiment of the content development tool the element of the first user interface is capable of invoking the application to display the video media from the storage of the client via the second set of one or more elements. In another embodiment a user via the configuration mechanism configures the element of the first user interface to switch to displaying the video media from storage upon selection of the element by a user of the browser. In some embodiments a user via the configuration mechanism configures the element of the first user interface to invoke the application to display the second user interface from the storage of the client. In yet another embodiment the element of the first user interface is configured to download the content to the storage of the client as a background process transparent to a user of the browser. In some embodiments the element of the first user interface is configured to automatically download the content to the storage of the client upon request by the user of the browser to display the video media in a form having a desired video characteristic. The desired video characteristic may include one or more of the following 1 a resolution 2 an aspect ratio 3 a size 4 a quality 5 a bit per pixel 6 a compression 7 a frame rate and 8 a bit rate.

In some embodiments of the content development tool the element of the first user interface is configured to automatically download the content to the storage of the client upon displaying of the first user interface in the browser. In one embodiment the content development tool includes a publishing tool to publish the first set of files to a web server. In another embodiments the content development tool includes a publishing tool to publish the second set of files to a content source for download to the client. In other embodiments the element is configured and the second set of files generated to display the second user interface to appear as related to or a portion of the first user interface. In another embodiment the video media of the second set of files to be stored in the storage of the client is a higher definition of quality than the video media communicated via the network.

The details of various embodiments of the invention are set forth in the accompanying drawings and the description below.

Certain illustrative embodiments of the present invention are described below. It is however expressly noted that the present invention is not limited to these embodiments but rather the intention is that additions and modifications to what is expressly described herein also are included within the scope of the invention. Moreover it is to be understood that the features of the various embodiments described herein are not mutually exclusive and can exist in various combinations and permutations even if such combinations or permutations are not expressly made herein without departing from the spirit and scope of the invention.

The illustrative embodiments of the intelligent delivery system described herein provide a comprehensive development platform and client side technology for intelligent and cost effective delivery of high quality video audio files and broadband content over a network such as the Internet to desktop mobile computing and network connected consumer devices. In one illustrative embodiment the intelligent delivery system provides systems and methods for the downloading and storage of content such as media files to a client from one or more content sources. In another illustrative embodiment the intelligent delivery system provides systems and methods for providing an offline user experience substantially similar to the corresponding online user experience. Furthermore in some illustrative embodiments the intelligent delivery system provides systems and methods for personalizing downloaded content and synchronizing the downloaded content among multiple user devices.

The central processing unit is any logic circuitry that responds to and processes instructions fetched from the main memory unit . In many embodiments the central processing unit is provided by a microprocessor unit such as those manufactured by Intel Corporation of Mountain View Calif. those manufactured by Motorola Corporation of Schaumburg Ill. those manufactured by Transmeta Corporation of Santa Clara Calif. those manufactured by International Business Machines of White Plains N.Y. or those manufactured by Advanced Micro Devices of Sunnyvale Calif. The computing device may be based on any of these processors or any other processor capable of operating as described herein.

Main memory unit may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the microprocessor such as Static random access memory SRAM Burst SRAM or SynchBurst SRAM BSRAM Dynamic random access memory DRAM Fast Page Mode DRAM FPM DRAM Enhanced DRAM EDRAM Extended Data Output RAM EDO RAM Extended Data Output DRAM EDO DRAM Burst Extended Data Output DRAM BEDO DRAM Enhanced DRAM EDRAM synchronous DRAM SDRAM JEDEC SRAM PC100 SDRAM Double Data Rate SDRAM DDR SDRAM Enhanced SDRAM ESDRAM SyncLink DRAM SLDRAM Direct Rambus DRAM DRDRAM or Ferroelectric RAM FRAM . The main memory may be based on any of the above described memory chips or any other available memory chips capable of operating as described herein. In the embodiment shown in the processor communicates with main memory via a system bus described in more detail below . depicts an embodiment of a computing device in which the processor communicates directly with main memory via a memory port . For example in the main memory may be DRDRAM.

In the embodiment shown in the processor communicates with various I O devices via a local system bus . Various busses may be used to connect the central processing unit to any of the I O devices including a VESA VL bus an ISA bus an EISA bus a MicroChannel Architecture MCA bus a PCI bus a PCI X bus a PCI Express bus or a NuBus. For embodiments in which the I O device is a video display the processor may use an Advanced Graphics Port AGP to communicate with the display . depicts an embodiment of a computer in which the main processor communicates directly with I O device via HyperTransport Rapid I O or InfiniBand. also depicts an embodiment in which local busses and direct communication are mixed the processor communicates with I O device using a local interconnected bus while communicating with I O device directly.

The computing device may support any suitable installation device such as a floppy disk drive for receiving floppy disks such as 3.5 inch 5.25 inch disks or ZIP disks a CD ROM drive a CD R RW drive a DVD ROM drive tape drives of various formats USB device hard drive or any other device suitable for installing software and programs such as any software or portion thereof related to the intelligent delivery system described herein. The computing device may further comprise a storage device such as one or more hard disk drives or redundant arrays of independent disks for storing an operating system and other related software and for storing application software programs such as any program related to the intelligent delivery system . Optionally any of the installation devices could also be used as the storage device .

Furthermore the computing device may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56 kb X.25 broadband connections e.g. ISDN Frame Relay ATM wireless connections or some combination of any or all of the above. The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein.

A wide variety of I O devices may be present in the computing device . Input devices include keyboards mice trackpads trackballs microphones and drawing tablets. Output devices include video displays speakers inkjet printers laser printers and dye sublimation printers. The I O devices may be controlled by an I O controller as shown in . The I O controller may control one or more I O devices such as a keyboard and a pointing device e.g. a mouse or optical pen. Furthermore an I O device may also provide storage and or an installation medium for the computing device . In still other embodiments the computing device may provide USB connections to receive handheld USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry Inc. of Los Alamitos Calif. In one embodiment the computing device may provide a USB connection to receive a media playing or media storage device such as an iPod device manufactured by Apple Computer of Cupertino Calif.

In further embodiments an I O device may be a bridge between the system bus and an external communication bus such as a USB bus an Apple Desktop Bus an RS 232 serial connection a SCSI bus a FireWire bus a FireWire 800 bus an Ethernet bus an AppleTalk bus a Gigabit Ethernet bus an Asynchronous Transfer Mode bus a HIPPI bus a Super HIPPI bus a SerialPlus bus a SCI LAMP bus a FibreChannel bus or a Serial Attached small computer system interface bus.

A computing device of the sort depicted in typically operate under the control of operating systems which control scheduling of tasks and access to system resources. The computing device can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any network operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or network devices or any other operating system capable of running on the computing device and performing the operations described herein. Typical operating systems include WINDOWS 3.x WINDOWS 95 WINDOWS 98 WINDOWS 2000 WINDOWS NT 3.51 WINDOWS NT 4.0 WINDOWS CE and WINDOWS XP all of which are manufactured by Microsoft Corporation of Redmond Wash. MacOS manufactured by Apple Computer of Cupertino Calif. OS 2 manufactured by International Business Machines of Armonk N.Y. and Linux a freely available operating system distributed by Caldera Corp. of Salt Lake City Utah or any type and or form of a Unix operating system among others.

In other embodiments the computing device may have different processors operating systems and input devices consistent with the device. The computing device can be any workstation desktop computer laptop or notebook computer server handheld computer mobile telephone or other portable telecommunication device media playing device a gaming system or any other type and or form of computing telecommunications or media device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein. For example the computing device may comprise a device of the iPod family of devices manufactured by Apple Computer of Cupertino Calif. a Playstation 2 Playstation 3 or Personal Playstation Portable PSP device manufactured by the Sony Corporation of Tokyo Japan a Nintendo DS or Nintendo Revolution device manufactured by Nintendo Co. Ltd. of Kyoto Japan or a Xbox or Xbox 360 device manufactured by the Microsoft Corporation of Redmond Wash.

In one embodiment an intelligent delivery system IDS provides a client with intelligent downloading of content from a content source and the playing of media from such content. Referring now to an embodiment of the IDS executing on a client is depicted. In brief overview a client includes the IDS a browser and application and storage . In some embodiments the IDS includes an IDS client having one or more connectors to the browser and or application . The IDS client interfaces to the storage of the client via a cache manager and or virtual file system or via any type and or form of suitable interface to the storage . In some embodiments the IDS client runs as a background task process or service on the client .

As shown in the client also includes a media player which comprises any type and or form of software hardware or combination of software and hardware for experiencing running or otherwise playing a media in any form such as various types and forms of information and data electronic digital or otherwise for conveying information via text audio graphics animation video and or interactivity. In some cases multimedia may also refer to the use of a plurality of media such as video and audio for conveying information. Additionally the media to be played by the media player may be in any form such as a file data structure or object in memory data or information stored on physical media of a storage device or I O device of a computing device or data signals transmitted or propagated via a network e.g. streaming media. Further the type and or format of the media may comprise a container format such as 3gp AVI ASF Matroska MOV MP4 NUT Ogg RealMedia a video codec such as 3ivx Cinepak DivX DV H.263 H.264 MPEG4 AVC HuffYUV Indeo MJPEG MPEG 1 MPEG 2 MPEG 4 RealVideo Sorenson Theora WMV XviD and or audio codecs such as AAC AC3 ALAC AMR FLAC MP3 RealAudio Shorten Speex Vorbis and WMA. In these embodiments the media player may read and process a media of any type and or format.

In some embodiments the media player comprises an application program library script service process task or any other type and or form of executable instructions. In one embodiment the media player comprises one of the following the Windows Media Player manufactured by the Microsoft Corporation of Redmond Wash. iTunes or QuickTime manufactured by Apple Computer Inc. of Cupertino Calif. RealPlayer manufactured by RealNetworks Inc. of Seattle Wash. or Macromedia Flash Player manufactured by Adobe Systems Incorporated of San Jose Calif. In other embodiments the media player comprises any custom proprietary open source shareware freeware or any other type of application program or executable instructions capable of playing media either for a specific purpose or otherwise for an general or desired purposes. Additionally the media player may comprise any type and or form of user interface graphical or otherwise for accessing controlling managing or otherwise providing input and or receiving output regarding media and or the playing of media.

As shown in the IDS client in some embodiments includes a download manager control scripts and a database which may collectively be referred to as a client agent or agent . The download manager comprises any software hardware or combination of software and hardware for initiating handling managing controlling or otherwise obtaining one or more downloads of content such as media from one or more content sources. In some embodiments the download manager comprises an application program library script service process task or any other type and or form of executable instructions.

The download manager may communicate via any type and or form of protocol via any type and or form of network with one or more computing devices . In some embodiments the download manager communicates via any suitable download protocol. In one embodiment the download manager communicates via the Hyper Text Transfer Protocol HTTP or Secure Hyper Text Transfer Protocol HTTPS i.e. HTTP over Secure Socket Layer SSL . In another embodiment the download manager communicates via file transfer protocol FTP or in further embodiments in an FTP like protocol such as FTPS FTP over SSL Secure FTP FTP over Secure Shell encryption SSH Simple File Transfer Protocol SFTP or SSH file transfer protocol SFTP . In yet other embodiments the download manager communicates via the transport control protocol TCP over the Internet Protocol IP and may also use the user datagram protocol UDP . In one embodiment the download manager uses a connection based protocol such as TCP to communicate via socket based mechanisms while in other embodiments the download manager uses a connectionless protocol. In further embodiments the protocol may be a stateless protocol or yet in another embodiment a stateful protocol. The download manager may include any type and or form of means and or mechanisms for tracking or managing states relating to the protocol and or downloading. Additionally the download manager may perform any functions logic or operations to coordinate track control manage or process one or more of the following 1 requesting a download from a content source 2 obtaining and or providing a status of a download 3 storing content or portions of a download to a client 4 obtaining and or providing information or characteristics of content such as media downloaded or to be downloaded 5 interactions with a user and 6 interactions with the client the IDS client or the media player .

The database of the IDS client may comprise any type and or form of suitable structure and arrangement of information and data in a storage or memory element. In one embodiment the database includes a file or set of files. In some embodiments the database is a relational database while in other embodiments the database is an object based or object oriented database. In some embodiments the database is used by the IDS client to store information related to a state or status of a media playing in the application browser or media player . In other embodiments the IDS client or download manager stores information or data relayed to the progress state or status of one or more downloads. In yet another embodiment the database stores information and data related to the state status and preferences related to any user interface provided by the IDS client . In some embodiments the database stores information and data regarding authentication authorization and or access control of one or more users to content in storage such as video media files by a media player .

In some embodiments control scripts of the IDS client provide directives commands and or instructions for controlling managing directing or otherwise providing or executing the functions logic and operations of the IDS client . The control scripts may comprise any type and or form of suitable scripting language such as per awk JavaScript or VBScript. In other embodiments the control scripts may comprise executable instructions in any programming language known to those skilled in the art interpreted compiled or otherwise to interact or interface with the IDS client . In one embodiment the control scripts interact with the IDS client via a control script application programming interface API which provides classes functions and variables representing an interface to the IDS client .

In some embodiments the control scripts provide download orders to the download manager . A download order comprises a request instruction or communication to download media such as a media file from a content source to storage of the client such as disk storage. In one embodiment the download order comprises an instruction in the control script language to request or initiate a download via the download manager . In one embodiment the download order comprises a request of a media file from a single content source. In another embodiment the download order comprises a request for a media file along with other files and content from a content source. In some embodiments the download order comprises a request for a plurality of media files from one or more content sources and may also include request for one or more other types of files such as a text file or executable file. In a further embodiment a download order may comprise multiple download orders such as a series of download orders to occur subsequently or concurrently with each other. The download order may request any number of files content or other entities from one or more content sources. In some embodiments the intelligent delivery system may comprise one or more content retrieval queues. For example the intelligent delivery system may download content or portions thereof and store such content in a content retrieval queue for use management or processing by the download manager or any portion of the IDS .

In some embodiments the download manager via an application programming interface API provides the control scripts with the ability to pause cancel restart and or reprioritize download orders . Additionally the control scripts and or download orders may comprise or refer to delivery strategies or behaviors as will be described in further details below. In one embodiment a delivery behavior is a technique for downloading content from a content source to the client . For example these techniques include using a certain type of host for a content source such as a load or content balanced host the ability to balance download or file transfer load across multiple hosts and the ability to follow a schedule to only use bandwidth at certain times. For example a user of the IDS client may want to download a large video file by starting a download via a download client or a peer to peer client such as a BitTorrent peer to peer client or a client using the BitTorrent protocol provided or manufactured by BitTorrent Inc. of San Francisco Calif. If fours have elapsed without finishing the download then the download manager should continue downloading over BitTorrent but also download over HTTP from a geographically load balanced set of hosts except for a certain time period on Fridays and if two more hours go by then the download manager should include a another high quality content source into the mix of multiple download content sources. As such delivery behaviors can provide a balance between user experience and delivery costs. In some embodiments the control scripts and download orders may select from a plurality of delivery techniques provided by the download manager . Additionally control scripts may monitor download orders to determine the status and progress of a download or if any errors have occurred. For example an API of the download manager may provide an interface such as a function call or event callback to provide access to monitoring one or more downloads in progress with the download manager .

Although BitTorrent is generally described above as a peer to peer technology client and protocol any type of peer to peer technology client or protocol may be used in practicing the operations described herein. For example the intelligent delivery system may use the peer to peer technology of Kontiki provided by British Sky Broadcasting Ltd of Isleworth Middlesex England. In another example the intelligent delivery system may use the peer to peer technology or client referred to as Red Swoosh provided or manufactured by Red Swoosh Inc. of San Mateo Calif.

In some embodiments a download order identifies a location in storage of the client for storing the requested downloaded content. In other embodiments the download order allows the IDS client and or download manager decide the location in storage to store the downloaded content such as via the cache manager and or virtual file system . In one embodiment the IDS client uses a cache manager for storing downloaded content to the storage of the client . In some embodiments the cache manager may comprise software hardware or any combination of software and hardware for storing downloaded content to a portion of storage such as directory file structure under the control and or management of the cache manager . In other embodiments the cache manager keeps track of storage usage of downloaded content. In some embodiments the cache manager notifies the IDS client if the amount of usage exceeds a predetermined limit which may be configurable. The cache manager may calculate a hash code for any portion of downloaded content stored to cache storage. For example a hash code may be calculated on each file downloaded and stored by the cache manager . The cache manager may use any suitable type and or form of hash algorithm or computation such as the SHA 1 of the Secure Hash Algorithm family or the MD5 the Message Digest Algorithm. In one embodiment the cache manager associates and tracks the hash code with the file.

In some embodiments the cache manager provides an application programming interface API for the file to be retrieved from storage or to find information about the file by referencing the hash code. In one embodiment the hash code allows the cache manager to determine if a file has been previously downloaded. For example if an application knows the hash code of a file the application desires to download the application can request the cache manager to check using the hash code if the file is already stored in the storage . Additionally the cache manager can determine if a duplicate of the file exists in storage e.g. the files have the same hash code and delete one of the duplicate files.

In some embodiments the IDS client uses a virtual file system to organize downloaded content into a desired structure such as a hierarchical naming structure for example a directory structure. So although an application allows the IDS client via the cache manager to determine the location of storing downloaded content to storage the application may desire to reference or arrange the downloaded content via an organized naming structure. For example the application may want to reference to a downloaded file as player index.html although the cache manager stored the corresponding file to another location in storage . for example C data user player index.html in directory file structure . As such the application may use a desired virtual name meaningful to the application that is different than the name of the file in the directory file structure . The VFS may provide this naming ability through an application programming interface API . The API of the VFS may provide an interface for the creation of virtual directory names and files and for associating the virtual file names with files stored by the cache manager . In some embodiments the VFS may comprise a user or application level API while in other embodiments the VFS may comprise a kernel or system level API.

In some embodiments the IDS client stores the virtual naming structure such as in memory a data structure or database and maps the virtual naming structure to the actual naming structure managed or used by the cache manager such as the directory file structure . In one embodiment the VFS provides a virtual naming structure mapped to the directory file structure or portion thereof of the storage . In other embodiments the VFS provides a virtual naming structure mapped to the portion of storage used by or controlled by the cache manager . In some embodiments the cache manager and the VFS are used together. For example when a file is downloaded and stored via the cache manager the control scripts provide a virtual file name for the downloaded file. In these embodiments the cache manager stores the file to storage creates and associates a hash code with the file and via the virtual file system the virtual file name is associated with the hash code and therefore the stored file.

The storage of the client may comprise any type and or form of storage device either locally on the client or accessible via a network by the client for storing content such as content downloaded via the IDS client . In some embodiments the storage of the client comprises any storage device I O device or installation device of the computing device . Additionally the storage may be provided via a second computing device accessible via a USB FireWire network or other suitable connection. In some embodiments the storage used by the client for storing content may include multiple storage devices on the client and or accessible via another computing device . In some embodiments the storage may be one or more elements such as an object or data structure in memory. In other embodiments the storage comprises a database. In other embodiments the storage may be arranged organized named or structured in any desired or suitable manner. For example the storage may use a directory file structure to store the content .

The content downloaded and or stored with the IDS may comprise media such as video and or audio media and any other types and or forms of information data or files. In some embodiments the content includes electronic or digital forms of elements of a user interface a web page or a web site. For example the content may include graphical images in any format known to those skilled in the art such as jpeg gif or windows bitmap formats. In other embodiments the content includes text files for example files in a markup language such as Hypertext Markup Language HTML or the Extensible Markup Language XML . In additional embodiments the content may include executable instructions of a scripting language such as a control script an executable file such as .exe file that can execute on the operating system of the computing device . In other embodiments the content may include a manifest providing a list of the files in the content.

In some embodiments the IDS client comprises a user interface such as a graphical user interface for either an end user and or administrator of the client . In other embodiments the IDS client does not have a user interface for the end user. As such the application and or browser connected via the connectors to the IDS client may provide the user interface for the end user. In some embodiments the IDS client provides content such as web page files e.g. HTML file Dynamic HTML DHTML Flash within HTML or JavaScript to the application and or browser to display in a user interface. In one embodiment the files or content allows a user to browse and play downloaded content such as via the media player . In some embodiments the application is also referred to as a player in that the application displays a user interface or provides a user experience i.e. plays content for a user interface. In a further embodiment the application or player comprises the media player playing media in addition to providing user interface elements or content. In yet another embodiment the application runs without a user interface and monitors for downloads.

In other embodiments the IDS client provides a player window for use by the browser or application . In one embodiment the player window appears similar to a browser displaying HTML pages or other similar type of pages. In another embodiment the user interface of the application may display the player window including HTML or other web content but appear to not be a browser based user interface. For example the player window displaying content provided via the IDS client may be borderless and or not have any browser decorations. In other embodiments the control scripts may open a player window such as one provided by the media player control the placement of the player window set the icon of the player window minimize and maximize the player window and set the contents of the player window . In one embodiment the control scripts set the content of the player window to be a Uniform Resource Locator URL to a location available via the Internet. In another embodiment the control scripts set the content of the player window to be a URL referencing content stored by the cache manager VFS or IDS client .

In some embodiments the IDS provides connectors for interfacing and communicating with the browser and or application . For example a page displayed by the player window in the browser or application may desire to determine what content has been downloaded or request the IDS client to download content for a user. In one embodiment a connector provides a mechanism for pages to sends a string request and receive a string response such as an HTML web page send and receive mechanisms. In another embodiment a component such as an ActiveX control or Java Script is provided as an interface or connection mechanism to allow a browser to communicate with the IDS client or to a connector . In some embodiments the connector provides an application programming interface API to establish and communicate via a connection to the IDS client . The IDS client can receive requests and send replies to the browser component of the browser or the application and vice versa. Additionally the connector may provide notification and call back events via the connection.

In some embodiments the connector may be any type and form of general purpose interface mechanism used by any type of browser or application . In other embodiments a connector may comprise an interface mechanism designed and constructed for the type of browser or application . For example the connector may be designed and constructed to interface with the Internet Explorer IE browser manufactured by the Microsoft Corporation of Redmond Washing. In another embodiment the connector may be designed and constructed to interface with a stand alone application written in any programming language such as C C or C . For example the connector may comprises a shared object library used by a stand alone C program running on a Mac OS operating system. In some embodiments the application communicates with the IDS client via an interprocess communication mechanism such as a semaphore or mutex. In some embodiments the application and or browser communicates media files and content via one communication channel while communicating control data and other information via a second communication channel such as an out of band communication mechanism. In other embodiments media content and control data are communicated via the same communication channel. The connector may comprise a variety of interface and communication mechanisms for interacting between the browser and or application and the IDS or IDS client .

The IDS may also include a protocol handler to translate Uniform Resource Locators URL into a form useable or recognized by the IDS client cache manager or VFS . In one embodiment the protocol handler intercepts URL requests from a browser or application and routes the request directly to the VFS . In some embodiments the protocol handler is part of a connector while in other embodiments the protocol handler is a separate interface. In one embodiment the protocol handler is a component of the browser . In some embodiments the protocol handler is automatically installed with the IDS client .

In some embodiments the VFS and protocol handler allow a web browser to display content downloaded to cache or storage of the client . In one embodiment the protocol handler translates URLs in the form of 

Although the IDS may be generally described using a file as a unit of download for media and other content the unit of download may comprise any portion of content in any form or granularity. So although a file may be used as the unit of download one ordinarily skilled in the art while reading the description of this specification shall also include files to identify mean or otherwise refer to any unit of download. In some embodiments a unit of download comprises any portion of a file such as a segment of a file or a byte range of a sequence of bytes. In one embodiment a unit of download comprises a group of one or more files. In another embodiment the group of one or more files may be compressed into a single file using any type and or form of compression. In a further embodiment the unit of download comprises a group of portions of one or more files such as a group of segments from multiple files. In other embodiments a unit of download may comprise one or more network packets carrying or representing content . In one embodiment the unit of download comprise any portion of signals representing the content and propagating or traversing any suitable transmission medium. In additional embodiments a unit of download may comprise a portion of a data structure an object or a set of one or more areas in memory or storage.

Referring now to the IDS is depicted in a networked environment . In brief overview of the environment clients A N provided via computing device C are in communication via a network with one or more content sources A N referred to as Source Content A Source Content B and Source Content N provided via computing devices D F referred to as Server A A Server B B and Server N N respectively. Each of the servers A N may comprise a content source A N also referred to as source content herein providing content available for downloading. Each of the clients A N may comprise an IDS for downloading content from a content source A N to provide local content A in a storage A N of the client A N.

Although shows a network between the clients A N and the servers A N there may be additional networks e.g. between the clients A N and the servers A N. A client and server may be on the same network or on a different network . The networks and can be the same type of network or different types of networks. The network and or the network can be a local area network LAN such as a company Intranet a metropolitan area network MAN or a wide area network WAN such as the Internet or the World Wide Web. The topology of the network and may be a bus star or ring network topology. The network and network topology may be of any such network or network topology capable of supporting the operations described herein.

The clients A N and servers A N can connect to the one or more networks through a variety of connections including standard telephone lines LAN or WAN links e.g. T1 T3 56 kb X.25 SNA DECNET broadband connections ISDN Frame Relay ATM Gigabit Ethernet Ethernet over SONET and wireless connections or any combination thereof. Connections can be established using a variety of communication protocols e.g. TCP IP IPX SPX NetBIOS Ethernet ARCNET SONET SDH Fiber Distributed Data Interface FDDI RS232 IEEE 802.11 IEEE 802.11a IEEE 802.11b IEEE 802.11g and direct asynchronous connections . In one embodiment a client and the server communicate via any type and or form of gateway or tunneling protocol such as Secure Socket Layer SSL or Transport Layer Security TLS . Additionally the clients A N and servers A N may communicate via any type and or form of protocol to request and provide a download from the content source A N to a client A N. In one embodiment the clients A N and servers A N may communicate via any type form or version of a Hyper Text Transfer Protocol a File Transfer Protocol or a download protocol.

The network and network connections may include any transmission medium between any of the computing devices A N such as electrical wiring or cabling fiber optics electromagnetic radiation or via any other form of transmission medium capable of supporting the operations described herein. The methods and systems described herein may also be embodied in the form of or otherwise include computer data signals program code or any other type of transmission that is transmitted over the transmission medium or via any other form of transmission which may be received loaded into and executed or otherwise processed and used by a computing device to practice the operations described herein.

The servers A N may be any type of computing device D F capable of operating as described herein. Furthermore any server A N may be provided as a group of server systems logically acting as a single server system referred to herein as a server farm. In one embodiment a server A N comprises a multi user server system supporting multiple concurrently active client connections or user sessions. In some embodiments one or more servers A N act as or provide a proxy or gateway to one or more other servers A N. In other embodiments a server A N comprises a load balancer as known to those skilled in the art for balancing loads between multiple servers A N in a server farm. In some embodiments the client intelligent delivery system one or more servers A N or otherwise the network may use or deploy a content server location and capacity loading device software or service for identifying selecting using or otherwise providing one or more content sources A N. In one embodiment the client intelligent delivery system servers A N and or the network may use any of the products technologies services and or network devices provided or manufactured by Akamai Technologies Inc. of Cambridge Mass.

Additionally any server A N may cache content A N from another server. In one embodiment a server A N may comprise a peer to peer technology or application such as a client using the BitTorrent protocol provided by BitTorrent Inc. of San Francisco Calif. A server A N may be a client computing device or a peer computing device on the network . Furthermore a server A N may comprise any of the following 1 a load balanced host 2 a content balanced host 3 a peer to peer file transfer host 4 in house or intranet proxy or 5 a geographic proxy. In some embodiments neighborcasting describes a client broadcasting on a network such as a local network or LAN to see if another client has identified or desired content. The client may request or obtain the content from another client on the local network instead of a content server A N. In other embodiments a server A N may transmit content via a satellite transmission or medium.

Although each client A N is illustrated with one IDS environment each client A N may have a plurality of IDS environments . In one embodiment a client A N may have one IDS environment but multiple IDS clients . Additionally each client A N may have multiple storages A N for storing content A N for one or more IDS environments or one or more IDS clients . One client A N may communicate with and receive a download of content from one server A in one embodiment or from a plurality of servers A N in another embodiment. Furthermore each client A N may be in communication via the network with another client A N to obtain share or provide content A N.

Each of the computing devices A N may be configured to and capable of running any portion of the IDS environment . The IDS environment and or any portion thereof such as the IDS client cache manager media player download manager and VFS can be capable of and configured to operate on the operating system that may be running on any of the computing devices A N. Each computing device A N can be running the same or different operating systems. Additionally any portion of the IDS environment can be capable of and configured to operate on and take advantage of different processors of any of the computing devices A N. One ordinarily skilled in the art will recognize the various combinations of operating systems and processors that can be running on any of the computing devices.

Although the IDS environment is generally illustrated as operating on a client A N portions of the IDS may be practiced in a client server architecture or in a distributed manner in the network environment . For example the IDS environment can be capable of and configured to have a first portion of the IDS environment run on a first computing device e.g. client A and a second portion of the IDS environment run on a second computing device e.g. server A. In one embodiment the download manager may have a first portion running on the client A and a second portion running on the server A. In some embodiments the IDS environment may be capable of and configured to execute with a client portion and a server portion in a client server architecture or with portions distributed across computing devices in a distributed architecture.

In another embodiment the IDS uses techniques for downloading content from a content source and storing the downloaded content to storage of a client to provide a local content . Referring now to these downloading and storing techniques of will be described. In brief overview depicts a source content structure of a source content and depicts a local content structure for local content . depicts an example download from a source content to a local content and depicts example download with optional elements from a source content to local content . illustrates the user of temporary storage for downloading source content to local content . depicts an embodiment of method for downloading source content to local content via download orders . In brief overview of method at step source content is provided via a directory and file structure. At step the download manager receives a download order requesting to download source content such as a portion of content and at step the download manager downloads the source content or any portion thereof to local content structure to form the local content . At step if any elements of the download are identified as optional by the download order then preserving the optional elements in the local content structure . If an optional element was previously downloaded the method may remove the previously downloaded optional element unless downloaded again at step . At step the download manager stores the source content to a temporary directory if directed to so by the download order and at step the temporary directory may be removed after completing the download order .

In view of the method will be described in further detail. At step the source content is provided via a source content structure such as the source content structure depicted in . The source content structure may be any form of one or more directories and one or more files organized or placed in a desired arrangement. In some embodiments the name of a directory or a file may identify refer to or be associated with the type of content . For example media player related source content may be stored under a directory named player and movie videos related source content may be stored in a directory names movies. In some embodiments the source content structure may span directories of one or more storage devices of the server A N or directories that span across multiple servers A N. In some embodiments one or more content sources A N may have the same source content structure while in other embodiments different source content structure .

In further embodiments the source content structure represents or models an abstract directory structure. That is in some embodiments the directories and files of the source content structure may not be stored in the same arrangement or with the same names on any of the servers A N. As such the source content structure may provide a mapping of the download content A into a desired arrangement or organization. In some embodiments the source content structure maps to a structure or naming scheme of any content management system. Also the scale of the number of directories and files of the source content structure may not be limited and may comprise millions or more directories and files.

At step of method the IDS client or download manager receives a download order requesting a download of the source content to the client . In some embodiments the download order is communicate to the IDS client or download manager via a user s interaction with elements of a user interface such as from content provided via a browser or an application . For example a user may request via an element or link of web page to download one or more portions of the source content such as a high definition video. In some embodiments the control scripts provide the download order to the download manager . For example the logic function or operation of a control script may communicate the download order to the download manager or otherwise trigger the download request. In some embodiments the download manager reads or otherwise obtains for example via a polling mechanism the download order . For example a user may create a download order via an editing tool or user interface of the browser or application and stored the download order into a directory accessed by the download manager . In further embodiments a download order may be a communication of a request to download for example via an API call to the download manager .

At step the download manager in response to the download order initiates and executes a download of the source content identified or referred to by the download order . In some embodiments the download manager downloads from one content source A while in other embodiments from multiple content sources A N. In one embodiment the download order identifies a single file obtainable from one content source A or from multiple content sources A N. In other embodiments the download order identifies multiple files from one or more content sources A N. Various combinations of quantity of files and content sources may be used in practicing this method.

Further to step the download manager stores the downloaded source content to a local content structure such as the local content structure of to form or otherwise provide the local content of the client . As with the source content structure the local content structure may be any form of one or more directories and one or more files organized or placed in a desired arrangement. In some embodiments the name of a directory or a file may identify refer to or be associated with the type of content . In one embodiment the local content structure matches or is substantially similar to at least a portion of the source content structure .

In some embodiments the local content structure is a subset of the source content structure . In another embodiment the directory and file names of the source content structure are preserved or remain the same in the local content structure . In some embodiments the local content structure is a directory file structure as it exists in storage of the client . In other embodiments the local content structure is an abstraction or mapping to the source content structure such that each directory and file name of the source content structure maps to the same or a different name in the local content structure . For example the local content structure may comprise a directory and file name provided via the VFS or cache manager .

By way of example and referring to the download manager may download the directory named player and all sub directories and files from the source content and store the content to the local content structure . Additionally the video file named video.wmv may be downloaded to a corresponding directory and file name in the local content structure . In some embodiments the download manager stores download content for a download order to the local content structure as it is received. In other embodiments the download manager holds the downloaded content in memory until the download order is completed and then stored the downloaded content to the local content structure . In additional embodiments the download manager stores some content to the local content structure as it is received and holds other content in memory until another portion of content is received or the download order is completed.

In some embodiments of method at step one or more download elements are identified as optional such as via the download order or via the source content structure . For example as depicted in the directory named images may be tagged as optional along with the file named video.wmv . Optional elements may affect the download of directories and files. An optional directory or file is tagged as part of the content and in some embodiments not the download order . The download manager may be requested to download the player directory of the source content to a corresponding directory of the local content of the same name and likewise for the directory names movie as illustrated in . Accordingly the download manager may download the portions of content of the directories player and movie not tagged as optional without downloading the optional elements. As such in some embodiments the optional images directory of the source content structure is not downloaded to the local content structure and likewise for the file video.wmv .

In one embodiment the download order requests the download of optional elements and as such the download manager also downloads the optional elements. In another embodiment the download manager removes optional elements from the local content structure on the next or subsequent download order if the next download order does not request the optional elements. In other embodiments the download manager leaves optional elements in the local content structure intact if not requested in a subsequent download order . In an additional embodiment the download manager may move the optional elements stored in the local content structure to another directory such as a temporary directory if the optional elements are not requested for download in a next or subsequent download order .

At step in some embodiments of the method the download order requests the download manager to download source content to a temporary directory structure. For example this may be requested to isolate downloads from a live local content structure being accessed or used by the media player for playing content or by a browser or application to provide a user interface. By way of example and referring to the player directory and video.wmv file of the source content may be downloaded and stored in corresponding directories and file names of the temp directory of the local content structure . The live directory structure represents the content currently be used accessed or displayed by an application browser or user of the client . Additionally the source content downloaded to a temporary directory can be inspected or examined during or after the download. In one embodiment the content directed to storage in a temporary directory is an updated copy or version of content accessed via the live directory of the local content structure .

In some embodiments at step the content stored in the temporary directory such as temp depicted in is copied moved placed or stored into the corresponding directories of the live directory structure and then the temporary directory is removed. In one embodiment the content of the temporary directory is inspected or examined to determine the portions of content to copy or move to the live directory of the local content structure . In some embodiments none of the content from the temporary directory is moved to the live directory. For example the IDS client may determine the files downloaded to the temporary directory are the same as the corresponding files in the live directory. In other embodiments a portion of the content from the temporary directory is moved to the live directory for example one or more files have changed or been updated. As such at step the temporary directory when deleted may contain no files a portion of the files or all the files of the downloaded content.

In another embodiment the IDS performs a flipping technique for downloading content to a temporary directory and replacing the content in the live directory of a local content structure with the content from the temporary directory. The flipping technique provides a means and mechanisms for atomically replacing directories and files in a live directory with directories and files from a temporary directory. For example the live directory may currently have one or more files in use such as a media file played by a media player . While the file from the live directory is being used the download manager in response to a download order may download content to a temporary directory to avoid or prevent disruption or interruption of the use of the file in the live directory. Then at an appropriate time for example upon completion of the download or when no files are in use from the live directory the content from the temporary directory is flipped i.e. to the live directory to replace the previous contents or portions thereof with new downloaded content.

Referring now to the flipping technique is depicted. depicts a local content A before a flip and the local content B after the flip . depicts the steps performed in method for practicing an embodiments of the flipping technique. In brief overview of method at step the download manager receives a download order to download source content to the client . At step the source content is downloaded by the download manager to a temporary directory in a local content structure . At step the content in the temporary directory is flipped to the live directory of the local content structure such as after the download order is completed. At step the temporary directory structure and any remaining content thereof may be removed.

In view of and in further detail of method at step the download order received by the download manager may direct the download manager to store the downloaded content to the temporary directory such as the temp directory of the local content A. In other embodiments the download manager may determine to store the downloaded content to the temporary directory based on a status of a file in the live directory structure of the local content structure. In some embodiments the download manager determines that the file is currently being used or accessed by a process task or program on the client such as the media player browser or application . In other embodiments the download manager determines a file in the live directory may be used based on the running of a process service or task on the client or based on a request from a user on the client. In other embodiments the download manager downloads to the temporary directory for every download order by default or when the download order does not specific a directory.

At step the download manager stores the downloaded content to the temporary directory. In some embodiments the download order requests the download of a subset of the source content . For example the live directory of the local content A in may have a player directory containing a file name anotherFile.html . The download manager may download to the temp directory the directories player and movies with subdirectories and files as illustrated in the local content A of . As such the local content A in represents the local content structure after the content has been downloaded but not yet moved to the live directory. In this manner and in some embodiments the downloaded content is isolated from the live directory until a suitable or desired time to replace the content in the live directory.

At step of method the downloaded content in the temporary structure is moved copied or otherwise placed i.e. flipped into the live directory tree of the local content structure. The downloaded content may be moved to the live directory tree by the download manager IDS client or cache manager . In some embodiments the content of the live directory tree is first removed and then the content from the temporary directory tree is moved or copied into the live directory tree. In other embodiments the content of the live directory tree is overwritten with the content from the temporary directory. In another embodiment the content from the temporary directory is added to the content of the live directory. In some embodiments any intermediate directories and or files in the live content not affected by the downloaded content or the download order are ignored.

In yet further embodiments some portions of the live directory tree are removed while other portions are overwritten and yet in other embodiments portions of content from the temporary directory are added to the live directory. In one embodiment portions of the live directory are modified with content from the temporary directory. In another embodiment the IDS client uses the VFS to move or copy content from the temporary directory to the live directory. In yet another embodiment the live directory is moved or copied to another directory such as a backup directory and the temporary directory contents are used to replace the live directory. Those ordinarily skilled in the art will recognize and appreciate the various combinations of additions modifications deletions overwrites replacements copying or moving of content from the temporary directory or any portions thereof to form change update or otherwise provide the content in the live directory or any portions thereof.

Further to step the IDS client may move or copy the content from the temporary directory to the live directory at any desired time. In one embodiment the content is moved or copied from the temporary directory to the live directory upon completion of the download or the download order . In another embodiment the content is moved or copied from the temporary directory upon request by a user such as via a user interface of the browser or application . In some embodiments the content is moved or copied from the temporary directory upon detection that none of the content in the live directory to be updated by the downloaded content is currently in use or being accessed. In other embodiments portions of content from the temporary directory may be moved or copied to the live directory while portions of the live directory not affected by the move or copy are in use. In yet other cases the content from the temporary directory is moved or copied to the live directory regardless if any portion of the content in the live directory is being used. The flipping technique may be practiced at any desired suitable or appropriate time to update change or provide the content for the live directory.

In some embodiments of method at step the temporary directory and any downloaded content therein is removed from the temporary directory after moving or copying the content to the live directory. In some embodiments only the temporary directory exists without any content as the content was moved to the live directory. In another embodiment the temporary directory has the downloaded content as the content was copied to the live directory. In further embodiments the temporary directory has some portions of the downloaded content remaining as some portions of the downloaded content was moved to the live directory while other portions were copied. In some embodiments the method does not remove the temporary directory. In other embodiments the temporary directory and or contents of the temporary directory are moved to another directory such as a directory designated as a backup.

Although the live directory is depicted in with the name live and the temporary directory is depicted with a name having the term temp those ordinarily skilled in the art will recognize and appreciate that any name may be given to or associated with a live directory and likewise with a temporary directory in practicing the operations described herein. As such the live directory is any directory structure in the local content structure of local content identified or designated for providing content for use and interaction by a user of the IDS client browser or application of the client . Accordingly the temporary directory is any directory structure in the local content structure of local content identified or designated for transient background or temporary use in practicing the operations described herein.

In some embodiments the IDS stores downloaded content in storage of the client via the cache manager and or virtual file system VFS . In these embodiments the downloaded files are stored in a hash cache or cache storage which maps hash values or codes of the file contents to actual named files in storage . Files in the hash cache may be stored in a disk structure such as a virtual directory structure of the VFS which may not represent the local content structure . In some cases the VFS provides for mapping of the names in the local content structure to hash values and the hash values to the actual names of the downloaded files in storage .

In brief overview of method at step the IDS client receives a unit of download such as a file from a content source . At step the cache manager determines and provided a hash code for the unit of download and stores the unit of download to a cache storage at step . At step the cache manager associates the hash code with the unit of download stored in the cache storage. At step the hash code is associated with a virtual name for the unit of download e.g. file via the VFS . At step the IDS client VFS application or browser may reference the hash code or virtual file name to use or access the unit of download. For example at step illustrated in a unit of download may be copied by associating a second virtual name with the unit of download or hash code. In another example at step the unit of download may be moved to another location and the virtual name and or hash code remain associated. Also at step the hash code may be used to determine if the unit of download has been previously downloaded or has change. Additionally at step a Uniform Resource Locator URL may reference the unit of download by virtual name and have the virtual name translated to the unit of download stored in the cache storage. At step the hash code and unit of download may be may removed from cache storage according to a policy or rule.

In view of the method will be further described in detail. At step the IDS client receives a unit of download from one or more content sources A N. For example the downloaded content may have occurred in response to a download order received by the download manager . In some embodiments the unit of download comprises a file or a portion of a file such as a file segment or sequence of bytes. In other embodiments the unit of download may be a set of one or more directories of files.

At step the cache manager determines and provides a hash value or code for the unit of download. In some embodiments the hash code comprises a Secure Hash Algorithm e.g. SHA 1 hash of the contents of a file group of files or directory. In other embodiments any type and form of cryptographic or hash function algorithm or computation may be used to generate a hash code or value. A hash value may comprise a number generated by applying a mathematical formula algorithm or function to a document sequence of text file or other type and or forms of content that provides a value shorter than and unique to the original document file or content. As such and in some embodiments the hash value may be used to determine if the contents of the document or file have changed by re generating the hash value and comparing the value to a previously generated hash value for the document or file. In further embodiments the cache manager generates a unique number for the unit of download by any suitable means and or mechanisms for example a non repeating sequential numbering scheme.

At step the cache manager stores the unit of download to a cache storage . In some embodiments the cached storage is an identified or designated portion of storage used by or under the control and management of the cache manager . For example as illustrated in a directory identified by the name cache may be used by the cache manager to store cached content in the local content structure of the file provided on disk storage . In some embodiments the cache storage is not known or visible to a user or otherwise is transparent to a user of the client . For example the cache directory may have permissions or settings such that the user may not access the directory directly. In other embodiments the cache storage comprises one or more compressed or zipped folders and may further include a password protected folder. In yet another embodiment the cache storage may comprise a structure in memory such as a data structure or object.

At step of method the cache manager associates the hash code provided at step with the unit of download stored in cache . For example as illustrated by the hash index of a unique hash code provides an index to the corresponding file or file name in the cache . The hash code may be associated with the unit of download by any suitable means and or mechanisms to provide a hash index . In one embodiment the hash index comprises a lookup table in storage or memory. In another embodiment the hash index comprises a database where the hash value and or file names are keys to associated information. In other embodiments the hash index comprises any type of data structure object or file providing a mapping between hash codes and file names. In some embodiments the hash code may be stored with the unit of download in the cache . In other embodiments the hash index may be stored in the cache . In further embodiments the hash index may stored in any portion of storage such as the directory file structure .

At step the hash code is associated with a virtual name via the VFS . For example the virtual file system for accessing local content structure may comprise a directory structure as illustrated in . Each file in the virtual file system may be refer to point or index to or otherwise be associated with a hash code of the hash index . The VFS may provide this association via an application programming interface API . For example the cache manager may call a function of the VFS API to associate a virtual file name with the hash code and or actual file name. In some embodiments the virtual file name may be associated with the hash code and or actual file name via the hash index . For example the hash index may include the hash code association with the actual file name and the hash code association with the virtual file name. In some embodiments instead of associating a virtual file system with the hash code or hash index another actual directory and file structure may be associated to the corresponding hash codes.

In some embodiments of method one or more files of the virtual file system are associated with files on disk instead of a hash code or the cache . For example as illustrated in the local content VFS may have one or more files associated with a file in a directory structure other than the cache . Additionally as illustrated in some portions of the virtual file system may be associated with a hash code and the cache via a hash index while other portions are associated with a directory and files other than the cache . For example the hash cache may be bypassed because a downloaded file may need to be placed in a specific location on disk such as to be used by a media player . In some embodiments files are copied from the hash cache into specific locations on disk . In further embodiments a portion of the local content may be associated with a VFS another portion associated with the VFS and hash index and a further portion not mapped or using either the VFS hash index or cache . The cache also may contain files that are not referenced via the VFS or hashed and indexed into the hash index . In some embodiments files initially not referenced via the VFS upon download may become referenced via the VFS in subsequent download orders .

At step upon referencing and associating the downloaded content in cache with hash codes and the virtual file system the units of download may be accessed referenced or used by the IDS client browser or application by hash code or virtual file name. For example and now referencing step copying of files in the VFS does not require actual disk copies. In the VFS a second virtual file name may be associated with the same hash code of a first virtual file name. By associating one or more additional virtual files names to the hash code via the VFS copies of the actual file on disk are virtually created without actually copying the file. In another example of accessing the file via the hash code and VFS at step a file may be moved to a different location in cache or to another location in storage while maintaining the same hash code and therefore maintaining the associating with the virtual file name in the VFS . Although the actual file on disk has moved the hash index can be updated and the virtual file name still reference the same hash code.

In another example of using the hash cache and VFS techniques the cache manager can use the hash code to determine if the file has been previously downloaded to the cache or to storage . For example download orders for hash files already in the cache may not require additional download of those files. In another embodiment the IDS client browser or application may reference a virtual file name in the VFS having an associated hash code. The cache manager may use the hash index to find the file in cache associated with the hash code and then recalculate the hash code on the file in cache to determine if the hash code has changed and therefore the contents of the file have changed. In some embodiments the download manager may receive a download order referencing a file in VFS and the download manager determines if a hash code exists for the virtual file name and if so if the hash code points to an actual file in cache . If the file exists in cache then the download manger does not need to download that file for the download order .

In a further example and referring now to the VFS and hash code techniques may be used for translating URLs referencing the VFS into content from the cache . By way of example an element of the user interface presented via the browser may refer to a virtual file in a URL of maven 28391 mysite player player.html. The mysite player player.html file of the URL refers to a virtual file in the structure of the VFS which in turn maps to or is associated with a unique hash code in the hash index that is associated with a file name e.g. 1.html in the cache . In some embodiments the protocol handler translates the URL via the IDS client into the file in cache and the file is provided in response to a request using the URL. As such in these embodiments the browser or application may use local content provided via the cache and VFS to present or display the content in a user interface.

Referring to and step of method the contents of the cache may be removed according to any logic business rules or policy of the IDS client or cache manager . For example a file with an associated hash code may be removed upon receipt of a download order by the download manager that requests a newer version of the file or if the file is marked optional and not included in the download order . Furthermore any files in the cache and not referenced by the VFS may be removed from the cache according to a policy or rule. For example the cache manager may check for and delete unreferenced files in the cache via the hash index upon a download by the download manager . In another embodiment the cache manager may check for and delete unreferenced files in the cache upon a predetermined time or schedule or upon an event such as restarting the IDS client or rebooting the client .

In another embodiment the IDS uses a technique for downloading portions of a file in random order and storing the downloading portions to storage in an efficient manner. This technique is referred to as storage shuffling and is illustrated via . provides a diagrammatic view of storage shuffling with the IDS . depict five illustrative cases of the storage shuffling technique in view of method depicted in . In brief overview of method of at step the source content to be downloaded is logically divided into pieces or segments. For example a file to be downloaded may be divided into logical segments of equal size. At step each logically divided piece is assigned a piece number corresponding to the piece s position within the content. For example the first segment representing a first sequence of bytes of the file is assigned piece number and the second segment piece number and so forth. At step a piece of content is received in random order and the next ordered physical location of the target storage e.g. file is allocated at step . At step the piece of content is stored into one of the allocated ordered physical locations. At step the pieces stored in the allocated ordered physical locations are shuffled in accordance with case example of . At step allocation storage and shuffling of steps and are performed for the next randomly received pieces of content at step until have completed ordered content in the target storage.

In overview of content segments A N depicted and also referred to as piece numbers . . . n 1 n may be provided by one or more content sources A N. Each of the pieces A N of the source content A N may be downloaded and or received in random order by a client having the IDS . For example and as depicted in piece number may be received first by the client via the network and then piece number followed by pieces and . The client and or IDS includes a shuffle storage mechanism which shuffles contents A N into order in ordered allocated physical locations of a portion of storage such as a target file that is to hold the completed downloaded copy of the original file represented by the content pieces A N.

The shuffle storage mechanism comprises software hardware or any combination of software and hardware to provide the logic function and operations of the shuffle storage techniques such as will be discussed in further detail in conjunction with . In some embodiments the IDS client comprises the shuffle storage mechanism which may be provided via any type and or form of an application programming interface API . In other embodiments the IDS client may use a control script to provide the shuffle storage mechanism . In one embodiment the shuffle storage mechanism comprises a set of executable instructions as part of the IDS client . For example the shuffle storage mechanism comprises a set of executable instructions written in any programming language such as C and may further be included as a library module or component of the IDS client .

In some embodiments the portion of storage comprises an ordered set of physical locations referred to as and depicted as piece positions and n. In one embodiment the portion of storage comprises a file and each piece position is a segment or portion of the file to hold a downloaded or received content segment A N from the content source A N. In other embodiments each ordered piece number . . . n 1 of the file represent an equal size of a sequence of bytes of the file with the last piece number n representing the last set of bytes of the file. In some embodiments each piece number is allocated in accordance with the ordered physical location of the file such that physical location of piece position is allocated first the physical location of piece position is allocated next and so forth. In another embodiment the portion of storage may include a block of memory or a data structure or objects. As such in these embodiments each ordered piece position is a segment or portion of the memory data structure or object to hold a downloaded or received content segment A N from the content source A N.

Although the portion of storage to hold the complete set of the downloaded content segments A N are ordered physical locations the physical locations may be fragmented across the storage or memory element and still be in order. That is in these embodiments the allocated ordered physical location of piece position may not necessarily be adjacent in the memory or storage area of the storage or memory element of the allocated ordered physical location of piece position . For example the operating system of the client may assign or use areas of storage or memory not adjacent to each other for adjacent ordered physical locations of a file or other types of storage . However in some embodiments the operating system of the client keeps track of and manages the fragmented ordered physical locations of the file or memory as ordered subsequent physical locations.

As will be further discussed in detail and by way of case examples the shuffle storage mechanism may only allocate a next ordered physical location for a random piece of content segment A N as it is received and use the currently allocated ordered physical locations to store and shuffle the randomly received content. As such in some embodiments the IDS or IDS client only allocates the physical locations of a file in order regardless if a received piece number of a content segment A N is to be eventually stored in an ordered physical location yet allocated. For example as illustrated in piece number may be received and stored in one of the allocated ordered physical locations . . . until ordered physical location of piece position is allocated on receipt of the 18piece of random content segment A N. Then piece number may be shuffled to allocated ordered physical location of piece position . Using this technique the IDS or IDS client minimizes the size of the file to the number of random segments of content segments A N received. As such in these embodiments the size of the file does not need to expand based on the final position of the randomly received content segment A N which may be near the end of the file when only a few pieces have been received. Expanding the file in an ordered fashion using the shuffle storage technique reduces any processing or performance delays due to memory or disk swapping due to dealing with larger files.

In further detail of method at step the source content A N to be downloaded may be logically divided into content segments A N by any suitable means and or mechanisms. In one embodiment the source content A N is a file and the IDS client logically divides the file into content segments A N of equal or uniform size with the last segment N either being the same size or smaller size. In other embodiments the IDS client logically divides the file into content segments A N into varying sizes. In other embodiments the content segments A N are divided into some segments of the same size with other segments of different sizes. In one embodiment the IDS client may request the size of a file to be downloaded from a server providing the source content . The IDS client then may use any logic functions or operations for example a set of executable instructions to determine a sizing scheme for the content segments A N making up the file. Each of the content segments A N can be set to any size. For example in one embodiment of a large multiple Megabyte MB file each content segment is 1048576 bytes or 1 MB.

In another embodiment the source content provides a segmentation of the content into content segments A N. For example the source content may include another file such as a manifest listing the sizing scheme number of segments etc. of the file to be downloaded. In some embodiments each of the content segments A N represent a sequence of bytes of a byte range of the file. In other embodiments each of the content segments A N represent a logical portion of the file to be downloaded. For example content segment A may represent the audio portion of a file while content segment B represents the video portion and content segment C a data portion. For clarity those ordinarily skilled in the art will recognize and appreciate that logically dividing the content A N into content segments A N refers to downloading transmitting or otherwise moving the file in these units and not physically dividing a file into smaller files.

At step each of the content segments A N is assigned a piece number corresponding to the position of the content segment A N within the content . For example the first content segment A of a file to be downloaded is assigned piece number and the second content segment B is assigned piece number and so forth. As such piece numbers . . . n assigned to content segments A N represent the ordered sequence of content to provide a complete copy of the file to be downloaded. For example piece number corresponds to bytes of the file to be downloaded piece number corresponds to bytes of the file etc. Although the piece numbers generally described and illustrated as assigned to content segments A N are sequential starting from one any other sequential numbering scheme starting at any initial number e.g. may be used in practicing the operations described herein.

At step the client and or IDS receives one of the content segments A N in random order. For example a file may be requested to be downloaded via a download order to the IDS client . In response to the download order the IDS client may request a download from one or more content sources A N the desired file. In one embodiment the IDS client makes a series of requests for one or more content segments of the file to be downloaded from one content source A. In another embodiment the IDS client makes requests for one or more content segments A N of the file from one content source A and other content segments A B from another content source B. In some embodiments all the content segments A N are received in a random order by which no two piece numbers are subsequent to each other while in other embodiments some content segments A N may be received that are adjacent to each other i.e. adjacent piece numbers while other content segments A N are not received sequentially. In one embodiment all the content segments A N may not be received in random order but happen to be received in sequential order.

At step upon receipt of a content segment for example content segment R assigned piece number as illustrated in the next ordered physical location of the target file is allocated to hold the content of the content segment. In the case of a first received content segment for example content segment R then the first ordered physical location of piece position is allocated for the file which represents the final piece position for content segment assigned piece number . In the case of a second received content segment then the next ordered physical location of the second piece position is allocated and for the a third content segment F the next ordered physical location of the third piece position is allocated and so forth. As such in some embodiments the highest piece position of the allocated ordered physical location is the number of random content segments A received by the IDS client . In another embodiment the IDS client allocates two ordered physical locations at a time the ordered physical location for storing the currently received content segment A N and the next ordered physical location for the next content segment A N to be received. In further embodiments the IDS client allocates a block of two or more ordered physical locations at a time.

At step the content segments A N are stored into one of the ordered allocated physical locations. As such in one embodiment the pieces are stored in the order they are received which may be random. For example if pieces and are downloaded in that order then these pieces will be stored in the target file in that same order. Further to the example piece position will contain downloaded piece piece position will contain piece and piece position will contain piece . Although downloading the content segment A N in this way would reduce or minimize the intermediate sizes of the file holding the download content prior to the completion of download the content segments A N would be stored in the file in the incorrect order. So at some point the content segments A N stored in the allocated ordered physical locations of the file have to be sorted into the right order in the file.

At step the method sorts or shuffles the pieces stored in the allocated ordered physical location. The sorting or shuffling techniques may be performed at any point during the downloading and storing of content segments A N. In one embodiment the shuffling technique is performed upon receipt of each content segment A N while in other embodiments the shuffling techniques may be performed after any set of one or more content segments A N are received for example after every three segments are received. In other embodiments shuffling or sorting may occur when any one or more ordered physical locations are allocated or upon storage of any one or more content segments A N to the allocated ordered physical locations. In further embodiments the shuffling or sorting may occur during any idle time of the IDS client for example between receipts of downloaded content segments A N.

The shuffling techniques are directed towards multiple scenarios of sorting content segments A N in allocated ordered physical locations as will be described in conjunction with example cases A E illustrated in . In considering these example cases the terms or variables illustrated in are described. These variables may be described in view of variables that may be used and implemented in any type and form of executable instructions such as a programming or scripting language for performing the algorithm function or operations of the shuffling techniques. The pieceCount variable includes the number of pieces i.e. content segments A N that are currently stored in the target file i.e. allocated ordered physical location. The pieceCount is also the piece position of the next piece to be stored. For example in the case having piece positions and containing piece numbers and the pieceCount is 3. The existingPiece variable is used to determine if there is an existing piece stored in the target file with the piece position equal to the piece number of the incoming piece. For example in the case having piece positions and containing piece numbers and where the incoming piece number the existingPiece would be 18 since piece is currently stored in piece position . If there is no piece position with the same number as the incoming piece s piece number then the existingPiece variable is empty. For setting the nextPiece variable the pieceCount variable is used to determine if there is a piece in the target file having a piece number that is the same as the pieceCount. For example in the case having piece positions and containing piece numbers and the pieceCount is 3 and there is a piece in the target file with a piece number of 3 i.e. piece number is stored in piece position . As such nextPiece is 3. Otherwise if there is no such condition then nextPiece is empty.

Referring now to the example case A illustrated in the shuffling technique is performed at a point where the existingPiece is empty and the nextPiece is empty In this example case piece positions and have piece numbers and stored respectively and the IDS client receives the next incoming content segment N i.e. piece having piece number i.e. the incomingPiece variable is 12. In this case the shuffling technique stores the incoming piece at piece position of the value of pieceCount which is 3. As such the shuffling technique stored the incoming piece into the next allocated ordered physical location such that piece positions and hold piece numbers and as depicted in .

In example case B illustrated in the shuffling technique is performed at a point where the existingPiece is empty and the nextPiece is 3. In this example case piece positions and have piece numbers and stored respectively and the IDS client receives the next incoming content segment N having piece number . In this case the shuffling technique stores the incoming piece at piece position of the value of pieceCount which is 3. As such the shuffling technique stored the incoming piece into the next allocated ordered physical location such that piece positions and hold piece numbers and as depicted in . In this case the nextPiece which is piece number stored in piece position is copied moved or placed into piece position and incoming piece is stored in piece position . As such the allocated ordered physical locations comprises piece positions and storing piece numbers and respectively.

In example case C illustrated in the shuffling technique is performed at a point where the existingPiece is 18 or not empty and the nextPiece is empty. In this example case piece positions and have piece numbers and stored respectively and the IDS client receives the next incoming content segment N having piece number . In this case the shuffling technique moves copies or place the exsitingPiece of piece position to piece position and stores the incoming piece of piece number to piece position . As such the shuffling technique stores the incoming piece into the correct position in the file and moved the replaced piece to next allocated ordered physical location such that piece positions and hold piece numbers and as depicted in .

In example case D illustrated in the shuffling technique is performed at a point where the existingPiece is 3 or not empty and the nextPiece is 3 or not empty and equal to the existingPiece. In this example case piece positions and have piece numbers and stored respectively and the IDS client receives the next incoming content segment N having piece number . In this case the shuffling technique moves copies or place the exsitingPiece of piece position to piece position and stores the incoming piece of piece number to piece position . As such the shuffling technique stores the incoming piece into the correct position in the file and moved the replaced piece to the correct location such that piece positions and hold piece numbers and respectively as depicted in .

In example case E illustrated in the shuffling technique is performed at a point where the existingPiece is 18 or not empty and the nextPiece is 3 or not empty and equal to the existingPiece. In this example case piece positions and have piece numbers and stored respectively and the IDS client receives the next incoming content segment N having piece number . In this case the shuffling technique moves copies or places the nextPiece of piece position to piece position moves existingPiece to piece and stores the incoming piece of piece number to piece position . As such the allocated ordered physical locations comprises piece positions and storing piece numbers and respectively wherein piece numbers and are in the correct piece positions.

Now referring to step of method depicted in the shuffling techniques described above and steps and are performed until the download of the randomly received content segments A is complete and the piece numbers are shuffled in the allocated ordered physical piece positions to provide a complete form of the downloaded file having all content segment in the correct order or otherwise have a complete downloaded file as desired or intended. By applying the shuffling techniques as random content segments A N are received the IDS or IDS client can 1 provide the target file with each piece in the correct position i.e. the piece position of each piece is the same as its piece number 2 the target file does not need to be larger than the actual number of pieces currently downloaded i.e. no need to expand the target file beyond the actual amount of data received and 3 each incoming piece only needs a small bounded amount of processing at any point during the download.

In an additional embodiment the IDS or IDS client performs techniques to download content such any type of video and or audio media servers via an application Internet or web based protocol such as any type and form of the Hypertext Transfer Protocol HTTP from a content source providing the media via a plurality of servers. depicts an illustrative environment for a client operating the IDS to download over a network media from a plurality of servers such as servers A N and storing the downloaded media to storage of the client . The media may be available in any desired portions from the servers A N such as one more byte ranges A N for example a sequence of bytes. The IDS may obtain one or more byte ranges A N of the media from any of the plurality of servers such as a first byte range A from a first server A and a second bytes range B from a second server B.

The servers A N may be provided by a single content provider or by a single content source such as via a server farm or other logical association of servers. For example one of the server A may provide a graphical user interface as via a web page of a web site for a user to download media from the content source. The media to be downloaded may be stored on one or more of the servers A N. In other embodiments the servers A N may be associated with multiple content sources or different content providers. For example a first set of one or more servers A N may provide a first content source and a second set of one or more servers A N may provide a second content source. The first content source and the second content source may each have the media for downloading by the client . In some embodiments the media may be available for download from one or more content sources each having one or more servers with the media. Additionally any some or all of the content sources and or servers may each have only a portion of the media.

The servers A N of environment may comprise a web server web application Internet server Internet application or other application program service process or task for processing any type and form of HTTP protocol such as Secured HTTP or HTTPS. In some embodiments the servers A N may execute an HTTP driver in the network stack which may further execute in other embodiments in the kernel or kernel space of the operating system of the server A N. In another embodiment any of the servers A N may provide a gateway load balancer or proxy for routing proxying redirecting forwarding or otherwise communicating HTTP communications to and or form an HTTP based server A N.

Although the IDS or IDS client may be discussed generally using an HTTP protocol any other protocol used between the client and the server A N to download content may be used such any type or form of download protocol including File Transfer Protocol FTP or the Common Internet File System Protocol CIFS . The IDS or IDS client may use the protocol already established by the content source without requiring a specialized protocol or protocol designed for downloading content from multiple sources or between peer devices such as the BitTorrent protocol.

Referring now to an embodiment of the method to download media content via HTTP from multiple servers A N is depicted. In brief overview at step the client receives a request to download media from a content source. For example a user requests to download a media file from a web site. At step the client for example via the download manager requests via HTTP to download a plurality of portions of the media from the plurality of servers A N such as a first portion from a first server A and a second portion from a second server B. At step client receives the plurality of portions of the media from the plurality of servers A N and the portions of media are stored in storage of the client in a manner to form or provide the media such as to form the media file.

In further detail at step of the method a client receives a request to download media content from one or more content sources. In one embodiment the request to download comprises a request identifying a media file or files and a single content source. For example in some embodiments the user requests to download the media from one content source and allows the IDS to determine the plurality of servers A N from which to obtain the media. In another embodiment the download request may identify multiple content sources or multiple servers A N from which the media may be obtained. For example in other embodiments the user selects either the multiple content sources or servers A N from which to obtain the download and communicates via a download order the selection to the download manager .

At step the client such as via the IDS client requests via HTTP portions of the media from a plurality of servers A N. In some embodiments the client may determine the servers A N from which to obtain the media. For example the client may communicate with a first server A of a content source to determine other servers B B from which to download the media. In other embodiments the client may request a first portion and second portion of the media from a first server A and the first server A such as a proxy or load balancer may direct one or both of the requests to other servers A N. In another embodiment the client determines the servers A N from which to obtain the media via the download order or download request.

The client may determine the segmenting of the media into portions by any suitable means and or mechanisms such as via the IDS client . In one embodiment the client may determine a size and or number of portions to segment the media for download. The client may logically divide the media into a number of a sequence of bytes blocks of bytes or otherwise byte segments of the same size with a last segment being of the same or lesser size than the other segments. For example as illustrated in the byte ranges . . . n A N may reach represent a logical division of the media into byte segments of equal size with the nth byte range N being the same or lesser size as the other byte ranges A N . In the example of a media file each byte range A N may represent a sequence of bytes of the files. In order to determine the size of the media such as the size of a media files in bytes the client may request the size of the file from one of the servers A N. Although this embodiment of the IDS is generally discussed in terms of bytes of a file the IDS or IDS client determines the unit of download for obtaining portions of the media from the plurality of servers A in any desired manner with any type of size and segmentation.

In the example of HTTP the client at step sends a get request for a first sequence of bytes A from a first server A a get request for a second sequence of bytes B from a second server B and so forth until the client obtains all the sequence of bytes A N from the plurality of servers A N. For example the client may request a third and fourth sequence of bytes C and C from a third server N or from the first server A or second server B. In other embodiments the client may use other commands directive or instructions of the HTTP protocol to get obtain or be sent the portions of the media in any desired unit. For example in another embodiment the server A N may provide a Uniform Resource Locator URL to the client to use to obtain the media or any portions thereof. In further embodiments the client may send the download requests to the plurality of servers A N nearly simultaneously or concurrently to each other or otherwise within any desired time period between each request.

At step the client receives downloads of portions of the media from the servers A N over HTTP in response to the HTTP request to download the portions of media at step . For example as illustrated in the client may request and receive byte ranges . . . of the media from a first server A and bytes ranges n 1 . . . n of the media from a second server N. The downloaded portion of media may be received in any type or form of HTTP protocol response or content. The client may receive these downloaded portions of media in any order. In one embodiment the portions of media are received by the client in sequential order while in another embodiment the portions of media are received in random order. In one embodiment the client does not receive a response from a fist server A for a byte range A or received a corrupted or otherwise unusable portion of media so the client requests and receives the byte range A from another server B N.

At step the client stores the downloaded portion of media in storage to form or provide the media in its entirety intact or otherwise usable by the client . In one embodiment the client uses the shuffling storage technique illustrated in above to store randomly received portions of media. In another embodiment the client stores the portions of media in the file in their correct or desired location in the file as each portion is received. In further embodiments the client organizes the received portions of media in memory such as via a data structure or object and then writes received portions as a single media to a file.

Although the operations of the IDS or IDS client are generally discussed with a single media or media file the IDS or IDS client may be practiced with multiple media or media files logically grouped or associated or otherwise distinct sets of one more media files. Additionally any of the techniques described herein may be practiced in any combination with this aspect of the IDS . For example the client may use the cache manager and VFS along with the shuffle storage mechanism to store the media to storage of the client . In another example the client may use the flipping technique illustrated in to provide and store the media on the client . Furthermore as will be discussed next in further detail the client may use one or more delivery strategies or behavior techniques in another embodiment to download the portions of media from the plurality of servers.

In one embodiment the IDS or IDS client uses a delivery strategy for downloading media or files from one or more content sources. Delivery strategies may be used to balance between download experience and delivery cost in ways desired by each application or user. A delivery strategy specifies one or more download behaviors or techniques for downloading one or more files. A download behavior may be specified as a set of options gathered into one or more of the following categories 1 direction 2 sources 3 schedule 4 reports and 5 phases. The direction identifies an order of which portions of a file are downloaded. The source identifies the one or more content sources by name type category or any other suitable manner from which to download the file. The schedule identifies any type and form of desired schedule or time limits or constraints for downloading such as for server availability scheduling client download staggering or client bandwidth management. A report identifies information to be sent to or received by the client such as client bandwidth usage user interactions download speeds or error rates related to performance or any other characteristics of downloading. A phase defines information for switching between delivery behaviors or to change one or more of a direction source schedule or report of a delivery behavior during the course of downloading. For example a phase may change from one delivery behavior to another based on download performance so far or based on an impending due date to complete the download.

In one embodiment a delivery strategy may be specified and identified in a separate file such as the delivery strategy file illustrated in . In some embodiments a delivery strategy or the delivery behavior of a delivery strategy may be specified or identified via a download order a control script or in any download request received by the client IDS client or download manager . In another embodiment the delivery strategy may be specified in a file on a server A N in any format such an the Extensible Markup Language XML . In some embodiments one or more delivery strategies may be associated with a user or an application or a group of users or applications. In another embodiment a delivery strategy may be associated with a content source by name type or category. In some embodiments the delivery strategy is associated with a media or file based on name type category or location. For example a database may identify and associate a delivery strategy with any entity or resource such as a user application or content source.

Referring now to the environment provides a diagrammatical view of delivery strategies used between a client and one or more content source A N. In overview of environment a client comprises the IDS in communication over a network with one or more content sources A N. The client may use a delivery behavior to download one or more files from a content source A N. The delivery behavior may identify or specify one or more of the following 1 direction 2 source 3 schedule 4 report and 5 phase . The content sources A N may comprise a variety of types of content sources providing a range of performance or download characteristics. The content source A N may comprise any of the following 1 a load balance host or server 2 a content balance host or server 3 a peer to peer client host server or peer such as a BitTorrent tracker or seed host 4 an inhouse proxy 5 a geographic proxy or 6 may otherwise use neighborcasting to be directed to a content source.

In further detail the direction of the delivery behavior may identify or specify any of the following types of directions 1 progressive A 2 reverse B 3 gather C and combination D. Any one of these directions A D may be a default download direction used by the client IDS or download manager and may be a default download direction for a user application or content source A N. For a progressive download direction A the download manager of the IDS downloads the content such as file from the beginning to end of the content in order i.e. from front to back or start to end order. For example the download manager downloads a first unit of download representing a starting segment of content and a second unit of download subsequently to the first unit of download in which the second unit of download represents a segment of the content following the starting segment.

For a reverse B download direction the download manager downloads the content starting with the end portions of the content in reverse order to the beginning portion of the content i.e. in reverse order or otherwise from end to beginning order. For example the download manager downloads a first unit of download representing an ending segment of content and a second unit of download subsequently to the first unit of download in which he second unit of download represents a segment of the content prior to and adjacent to the ending segment. For a gather C download direction the download manager downloads the content in random order or by random portions of the content. For example the download manager downloads a first unit of download representing a first segment of content and a second unit of download subsequently to the first unit of download in which the second unit of download represents a second segment of content not adjacent to the first segment.

For a combination direction D the download manager downloads the content using any combination of the directions A C. In one embodiment the download manager may download a first portion of the content using a progressive direction A and a second portion of the content using a reverse direction B or a gather direction C. In another embodiment the download manager may download a first portion of the content using a reverse direction B and another portion using a gather direction A. In some embodiments the download manager downloads a first portion using a progressive direction A a second portion using a reverse direction B and a third portion using a gather direction C. For example the download manager may download a first unit of download representing a segment near the end of the content and a second unit of download subsequently to the first unit of download in which the second unit of download represents a segment of the content prior to the segment of the first unit of download.

The source portion of the delivery behavior identifies or specifies one or more content sources A N or servers A N from which to download content such as one or more media files. The source specification may be defined or specified using any suitable format such as text based for example using a markup language e.g. XML. In one embodiment the source identifies the content source A N or servers A N by host or domain or by internet protocol IP address. In another embodiment the source comprises the location of a download source by a Uniform Resource Locator URL . In some embodiments the source is specified by type or category of content source A N such as any of the following 1 a load balance host or server 2 a content balance host or server 3 a peer to peer client host server or peer such as a BitTorrent tracker or seed host 4 an inhouse proxy 5 a geographic proxy 6 Internet Service Provider ISP proxy or 6 may otherwise use neighborcasting to be directed to a content source. In one embodiment the source identifies to use any default content source A N known by the client or any portion thereof for downloading the desired content. In some embodiments the default source may be configured by user client or application. In a further embodiment the source may not be identified in the delivery behavior indicating to the IDS to determine the source or use any suitable source or otherwise use a default source. In another embodiment the source specification may indicate a backup content source A N if a first content source A N is not available. In other embodiments the source specification may identify a plurality of content source A N and in further cases specify an order of preference. In one embodiment the source specification may identify a content source A N per file or groups of files to be downloaded in a multiple file download order .

A report portion of a delivery behavior identifies or specifies information and data to be provided to the client regarding characteristics and performance related to downloading and in some cases specifically regarding the downloading performed by the delivery behavior . In one embodiment the report specification of the delivery behavior defines one or more reports to be communicated to the client from a content source A N a server A N or from another computing device on the network such as a router switch or bridge. The reports may comprise one or more report templates or may otherwise identify a report by name type or category. In some embodiments the report specification identifies one or more database queries to perform to provide the desired data and information to the client . In another embodiment the report specification specifies to the download manager or any other portion of the IDS to identify track and report on any download activity controlled managed understood or perceived by the client .

The report communicated received or obtained by the client according to the delivery behavior may comprise information and data in any format for example a text based format or a markup language such as HTML or XML. The report may be communicated via any type and form of suitable interface such as via an application programming interface API provided by the IDS . In some embodiments the report may be communicated as a web page or otherwise as HTML content. In other embodiments the report may be communicated as a log file. In one embodiment the report may be communicated as a download of content in accordance with any of the techniques described herein wherein the content includes the report or information and data for the report.

In some embodiments a report may comprise any desired information related to downloading and performance characteristics related to the download behavior client server A N content source A N or network in any portions thereof. In one embodiment the report provides information and data related to usage of bandwidth or network of the client . In another embodiment the report provides information and data related to speed and progress of downloads. In a further embodiment the report provides information and data related to issues or errors with downloading including any error rates with underlying network traffic or network performance. In yet another embodiment the report provides information and data related to or in support of metering or billing for downloads network access network usage or otherwise service or application usage for example in a model where the content source A A comprises an Application Service Provider ASP .

In one embodiment a report may include describe or identify one or more user interactions related to downloading or otherwise using the intelligent delivery system . For example the report may identify an event such as a mouse click or the selection of a user interface element triggered by the user in using the IDS . In one embodiment the report identifies what content the user has downloaded or is currently downloading. In another embodiment the report identifies how much of the content the user had downloaded or is currently downloading. In some embodiments the report identifies one of the following percentage of download completed size of download completed total number of files downloaded total size of content downloaded download directory most recent downloads and or content source for the downloaded content. In other embodiments the report identifies one or more system security application or intelligent delivery system event generated by the activity or interaction of a user or a system with the intelligent delivery system .

The schedule portion of the delivery behavior identifies or specifies in any suitable format a schedule time related events and or time related constraints and time limits. In one embodiment the schedule specification may identify a download behavior should start and or complete within a time range and or data range such as via any calendar format. In another embodiment the schedule specification may identify download activities in relation to any events of the user client download manager or content source A N. For example the schedule may indicate to check for new content from a content source A N on a periodic basis. In another example the schedule may indicate to start or check for a download upon a user s login to the client or upon idle time of the computing device . In some embodiments the schedule identifies a time or date limit for completing a download or for completing a percentage or a portion of a download. For example the download of desired content should not take longer than 1 hour or if only 50 of the download is received within 4 hours please stop the download. In one embodiment the schedule identifies a due date or due time for downloading content. In another embodiment the schedule identifies a scheduled expiration date for deleting the content.

A phase specification of the delivery behavior defines or specifies information for the IDS client to modify a portion of the delivery behavior being used or to change to or otherwise use another delivery behavior in addition to or instead of the current delivery behavior . As such the phase identifies an event schedule report or other information upon which the client decides to switch between delivery behaviors add one or more delivery behaviors or to change one or more of a direction source schedule or report of a delivery behavior during the course of downloading. For example if a download is occurring too slowly in a progressive direction A from a first content source A the phase may specify to switch to a reverse direction from one or more other content sources B N. The phase changes may be specified in any suitable format such as markup language or scripting language format. For example the phase may be specified via an application programming interface API of the IDS client such as to configure the download manager to behave according to the phase of the delivery behavior . The phase may refer to any other portion of the delivery behavior such as a schedule or report to specify when to change phases. Those ordinarily skilled in the art will recognize and appreciate that the combinations of phases that may be specified are wide and many in view of the possible combinations of and differences among delivery behaviors . By way of example illustrates a phase delivery behavior that will be discussed in further detail in conjunction with the illustrative method depicted in .

Although the delivery behavior is generally described as being defined from one file or set of information each portion of the delivery behavior such as the direction source schedule reports or phase may be defined or specified separately in one or more files and associated with a delivery behavior . Additionally the delivery behavior may be specified in any other form or type of data source such as a database data structure or object. Furthermore any type and form of application such as configuration tool using an graphical user interface and a database may be used to name define and manage delivery behaviors .

Referring now to an embodiment of the method is depicted using delivery strategy techniques for downloading content. In brief overview of method at step a delivery behavior is identified for downloading content from one or more content sources A N. At step the delivery behavior is associated by the download manager with a download request. At step the download manager performs the download according to the delivery behavior . In some embodiments at step the method includes changing the delivery behavior used for downloading based on schedule report or phase .

In further details at step the delivery behavior may be identified by any suitable means to the IDS client or download manager . In one embodiment a download order references includes or is otherwise associated with a download behavior . In another embodiment a delivery behavior is specified identified or provided with or included in a download request. At step the download manager associates the delivery behavior with a download request. In some embodiments the delivery behavior may be associated with the download request as it is referred to or included in with a request such as by a download order . In other embodiments the download manager may associate a delivery behavior to a download request via a database data structure or object providing such association. For example as previously discussed herein a delivery behavior may be associated with a client or content source identified by the download request. In other embodiments and in furtherance of step the download manager setups prepares for or processes the download request in a manner to perform the download in accordance with the delivery behavior .

At step the download manager initiates performs or otherwise causes to perform the download of content in accordance with the delivery behavior . In some embodiments the download manager may communicate to a content source to deliver content according to the delivery behavior . For example the download manager may request a content source to download content in a reverse direction B. In other embodiments the download manager may perform the delivery behavior by modifying a request to the content source . For example the download manager may communicate a get request to a content source to download a random segment of a file such as in the gather direction C. In one embodiment the download manager may have and execute a set of instructions comprising logic rules functions or operations to perform the download accordance to the delivery behavior . In a further embodiment the download manager may execute one or more control scripts designed and constructed to perform a download behavior or any portion thereof.

At step the download manager may complete the download according to the provided delivery behavior . At step in other embodiments the delivery behavior may be changed prior to completing the download by the download manager . In one embodiment the change to the delivery behavior is specified as part of the download request or download order . For example the schedule or phase may identify the change in delivery behavior. In other embodiments the change to the delivery behavior may be provided after the download request such as interactively with or in real time to the download manager . For example a replacement delivery behavior may be communicated to the download manager or entered via a graphical user interface of the download manager . In one embodiment the download manager changes the delivery behavior based on an event or time related to the schedule . For example a pending due date or time for the download to complete is approach and the download using the current delivery behavior may not complete before the due date time. As such in these embodiments the download manager may automatically switch to use additional content sources A N or to change a direction to the content source A N to meet the desired schedule .

In another embodiment the download manager changes the delivery behavior based on inspection or analysis of a report . For the example a report received by the client may include information or data identifying an operational issue with a download or performance of the content source A N. In some embodiments the download manager may automatically change delivery behavior based on performance of the download or status of operation of the client network or content sources A N. In one embodiment the IDS client or any portion thereof such as the download manager comprises executable instructions to perform review inspection and analysis of the reports real time or historically and in some embodiments derive statistics therefrom in an intelligent manner to determine any suitable or desired changes to the delivery behavior .

In yet further embodiments the delivery behavior may be changed during the course of downloading as desired and specified by a phase . By way of further example to step of method of and referring now to an environment provides a diagrammatical view of a phased delivery behavior for downloading content from content sources A N to the client . In this example the phase may specify a first source e.g. A and a first direction A for a first phase of the download a second source e.g. B and a second direction B for a second phase of the download and one of more third sources e.g. A N and a third direction D for a third phase of the download. Between each of the phases the phase specification may identify or specify a schedule conditions events or other triggers upon which the download manager shifts to the next phase. In some embodiments although all the phases are specified the condition to trigger a next phase does not occur and the download manager continues to use the current phase behavior. In some embodiments no conditions are specified for shifting to a next phase except for time or schedule. With the multitude of schedules conditions events and triggers to specify phases in combination with the multitude of choices of delivery behaviors a great multitude of phase shifts can be designed and specified in a flexible manner in accordance with the delivery behavior specification and delivery strategy techniques described herein

In some embodiment a content delivery platform and techniques are used to deliver offline access to online content such as video and to provide users with a similar offline experience as experienced online. The content delivery platform and techniques provide for delivering rich interactive media user interface and broadband content experienced online to a user locally on a client. In delivering video content the delivery platform and techniques described herein allow users to experience video in improved quality or higher definition locally with better or improved performance as compared to experiencing video that may be of lesser quality via streaming over a network. Additionally content providers using the delivery platform and techniques described herein can provide brand and user experience consistency and quality through both the user s online and offline experience with the content provider.

Referring to a diagrammatic view of an environment for providing online content and an online user experience via a network . provides an example illustration of the online content and user experience diagrammatically depicted in . As described herein the term online refers to a client communicating or receiving communications via a network such as the Internet to provide a desired operation functionality or obtain desired information data or content. For example an online user experience may comprise a portion of a user interface content or media communicate via a network to the client such as video content streamed from a server via a network . In contrast and as described herein the term offline refers to a client providing a desired operation functionality information data or content without communicating over the network in one embodiment or without communicating over the Internet in another embodiment. For example the client may be disconnected from the Internet or network . In some cases a client may be offline from the Internet but receive local content from a local area network . As such the client obtains the desired information data or content locally from the client or from the portion of the network available to client although the network may not provide access to the Internet. Those ordinarily skilled in the art will recognize and appreciate the differences between online and offline experience and content in practicing the operations described herein.

In brief overview of the client is operating a desktop and includes a first application browser for providing online content and experience from a content provider such as a content source A N. The browser provides a first user interface comprising a variety of graphical and textual elements. The user interface may comprise a menu system for providing one or more selectable user interface elements by which a user navigates and interacts with the user interface and any functionality and content therein. The user interface may also comprise a display of a variety of images of any format size or resolution such as images A N which may be organized in a hierarchy group or association although the invention is not so limited. In one embodiment each of the images A N comprises an image of snapshot representation or a portion of a video such as a video or movie trailer that the user may desire to view. For example in some embodiments a selectable user interface element A N may provide a means and mechanism by which the user selects the video represented by the corresponding image A N. In one embodiment the user interface element A N represents and comprises a play button to play or stream video media on a media player .

Additionally in the user interface provided by the browser additional user interface elements A N may be used to provide options control or otherwise provide user choices related to experiencing video media. In some embodiments these user interface elements A N may be organized as a tool bar and associated with a corresponding image A N by placement or location in the user interface. In one embodiment the user interface elements A N provide options for the user to select to view the video corresponding to the image A N having a desired characteristic for example to view the video in high definition. In another embodiment the user interface elements A N provide an option to the user to download the video to the client . In further embodiments the user interface elements A N provide controls such as stop start rewind volume control etc. for playing the video media.

In one portion of the user interface a video may be displayed to the user such as via streaming video media over a network . In one embodiment the video displayed in the user interface depends on the corresponding selection of the user of any of the user interface elements A N and A N. In some embodiments the user interface comprises a media player for streaming the video over the network to provide an online experience via online content. The video may be displayed in any area of the user interface in any size location or arrangement. The video may be provided in any format with any type and form of characteristics. Although shown with one video the user interfaces of may comprise multiple videos .

In terms of video characteristics such as any desired video characteristic represented or provided via the user interface elements A N a video characteristic may comprise one or more of the following as known to those skilled in the art 1 a resolution 2 an aspect ratio 3 a size 4 a quality 5 a bit depth per pixel 6 a compression 7 a frame rate and 8 a bit rate. Additionally video may be described in terms of quality and high definition. In one embodiment high definition generally refers to any video of higher resolution than standard definition SD which includes National Television Standards Committee NTSC e.g. analog television and Phase Alternating Line PAL which is the color encoding system used in broadcast television systems. In other embodiments high definition video generally comprises an aspect ratio of 16 9. In some embodiments high definition television HDTV resolution is at least 1080 interlaced lines or 720 progressive lines. In some embodiments high definition video comprises a native resolution of either 720p 1280 720 pixels 720 lines progressively scanned with a widescreen 16 9 aspect ratio or 1080i 1920 1080 16 9 widescreen image with 1920 pixels across each of 1080 interlaced scan lines . In some embodiments and in general high definition video generally represents an improved performance quality or characteristics over a standard video representation or previous standard high definition or otherwise as the case may be.

The user interface presented by the browser as depicted in and illustrated in may include one or more areas of the screen for displaying any type and form of banner ads which may be static in one embodiment and may be dynamic and change over time or use in another embodiment. In one embodiment the user interface may be in communication via a network to a banner ad content provider network or service which provides ad content based on any desired criteria or associations such as keywords or user profiles. For example the banner ads may be provided via a Uniform Resource Locator URL linked to an ad content source A N. Although one area and location of the user interface is shown with banner ads there may be multiple banner ads in multiple areas locations and arrangements. Additionally the banner ads may be associated with the video selection and one or more of the images A N. In other embodiments a banner ad is associated with a video ad .

Although the user interface of depicts a particular set layout and arrangement of user interface elements a wide array of different types of user interface elements layouts and arrangements that may be used in practicing the operations described herein. In another aspect a user interface provides a look and feel which is an appearance and behavior of a graphical user interface perceived or experienced by the user. The appearance of a graphical user interface can refer to the design aspect of the user interface in terms of colors shapes images layout font typeface etc. and the behavior of the graphical user interface can refer to the interaction aspect in terms of dynamic elements such as menus boxes buttons dialogs forms etc and user activity such as editing navigating selecting inputting etc. As such the browser provides an online user interface with a desired appearance and behavior or a designed look and feel to provide the user with a desired experience.

Referring now to another environment of a second user interface is diagrammatically depicted and illustrated by example to provide an offline appearance and behavior or look and feel corresponding to the online user interface of or desired portion thereof. In one embodiment the appearance and behavior of the offline user interface is identical to the online user interface. In another embodiments the appearance and behavior of the offline user interface is substantial similar closely resembling or nearly identical to the online user interface. In yet another embodiment the appearance and behavior of the offline user interface is similar to or resembles the online user interface. As such any of the user interface elements of the menu images A N banner ads and elements A N or A N of the offline user interface of may be identical substantially similar or otherwise resemble the corresponding user interface elements of the online user interface. In some embodiments the online user interface may include additional user interface elements or have user interface elements removed in contrast to the offline user interface and vice versa.

In in order to provide an offline experience and content corresponding to the online user interface the client comprises an application and the IDS . As illustrated in and also discussed in conjunction with the application may provide a borderless window and or otherwise not have any browser decorations on the border. In other embodiments the application may provide a border decorated window a browser border or any other borders to have a desired appearance and behavior. The application uses content stored locally to provide the user interface elements of the offline user interface. For example any of the menu images A N banner ads and elements A N or A N may be provided via content stored locally on the client via a file system or database. In some embodiments the application uses content stored locally to provide a portion of the user interface and a content communicated via a network i.e. online content to provide another portion of the user interface. For example the application may first display the offline user interface with content stored locally in storage and upon detection of a network connection or connection to the Internet the application provides a portion of the user interface with content from a content source A N or otherwise communicated via the network .

In one embodiment the application displays or plays the downloaded video from the storage of the client instead of streaming via the network . In some embodiments the downloaded video comprises a higher definition video or a desired video characteristic not provided by the streamed video of the online user interface of . As such in these embodiments the offline user interface provides an improved user experience of video in quality and speed as compared to the online experience. Additionally the offline user interface provides a user with a substantially similar user experience as online without connected to or being connected to a network or the content source A N.

In some embodiments the online user interface displayed via the browser downloads or otherwise provides to the client the offline user interface displayed via the application automatically or based upon input of the user during the online user interaction. In one embodiment upon start of the browser or loading or displaying of the online user interface in the browser the IDS client automatically downloads content e.g. video and user interface elements for the offline user interface to the storage of the client . This may occur transparently to the user as a background process or service.

In another embodiment the IDS client downloads content for the offline user interface to the storage of the client upon a selection of one of the user interface elements A N of the online user interface. For example one of the elements A N may comprise a selection of the video to be displayed in high definition or otherwise with a desired video characteristic. In response to the selection the IDS client downloads the offline user interface content including the video and in one embodiment also the application to the client and invokes launches or executes automatically or otherwise the application to present or display the offline user interface with the selected video . In some embodiments the downloading of content in response to the selection of an element of the online user interface may occur transparently to the user or browser of the client such as in the background. In other embodiments the online user interface may display a progress or status regarding providing the video having the desired video characteristic.

Additionally the invoking of the application and offline user interface may be performed in a manner that appears seamlessly or transparently to the user to be a part of the online user interface or the online user experience. For example upon a user s first online visit to the content source A N via the browser the application may have not been previously downloaded to the client . Upon display the online user interface or upon selection by a user of a online user interface element the offline user interface content and application may be downloaded by the IDS client in the background. In one embodiment the application is launched and positioned or displayed in front of the browser to appear as a popup dialog or other form of the online user interface. In another embodiment the application is launched and the browser is closed exited minimized or undisplayed so that the application appears to be the user interface the user should continue to use. In some embodiments the fact that the application is displaying offline content such as the video may not be known or otherwise apparent to the user.

In some embodiments the application is installed on the client with a desktop shortcut to launch the application providing the offline user interface for the user interface instead of the online user interface via the browser . In one embodiment the desktop shortcut may be installed automatically with the application upon downloading of the application and or any of the offline user interface content. Although the application is generally described as having a desktop shortcut . Other means of accessing invoking or launching an application from an operating system for example by the start menu task bar tool bar etc. may be used in practicing the operations described herein. In another embodiment if the user accessed the online user interface via the browser after installing the application the browser or online user interface automatically redirects the user s access to the application and the offline user interface. As such in some embodiments the content delivery platform and technique provide a continued and enhanced user experience with offline content that is substantially similar to the online user experience and content of a content source but with improved or high definition video or otherwise with video characteristics desired by the user.

Referring now to an embodiment of a method for providing a user access to offline content is depicted. In brief overview at step a first application such as a browser provides a first user interface e.g. online user interface of or B displaying user interface elements and video communicated via a network from a content source A N i.e. online content. At step a user requests via the first user interface to display the video in form having a desired video characteristic such as in high definition. At step in response to the request the IDS client downloads to storage of the client content comprising the video having the desired video characteristics and a second user interface. At step a second application such as application is invoked providing a second user interface displaying the downloaded video and user interface elements from storage of the client .

In further detail at method the client may provide a first user interface or an online user interface via any type and form of browser or other type and form of application for receiving and displaying a user interface and or content communicated via a network . In some embodiments a portion of the first user interface comprises content or user interface elements stored on the client such as cached content. In some embodiments the first user interface displays a video to be streamed but without yet streaming the video . In other embodiments a portion of the video may be streamed upon displaying the first user interface. In some embodiments upon providing or displaying the first user interface the client such as via the IDS client automatically downloads an application for displaying the second user interface of step and any content video or user interface elements thereof.

At step a user may request via the first user interface to display the video such as video in or B in a form having a desired video characteristic. In one embodiment the user selects a user interface elements A N of the first user interface to request displaying or otherwise playing the video in a desired format such as high definition larger resolution with certain color depth etc. In another embodiment the user may configure a user profile or user preference such as via the first user interface that identifies the desired video characteristics of one or more videos by name type category size compression download speed or any other characteristics of the video or related to downloading the video.

At step the client downloads at any point in time prior to upon or after the user request of step the video having the desired characteristic and the second user interface to storage to form or provide the offline content for the application . In one embodiment the client downloads the offline content upon receiving the user request while in another embodiment the client downloads the offline content automatically prior to the user request. In one embodiment the client downloads the application to the client such as upon a user s first visit or registration at a content source for example registration as a user. In another embodiment the application is automatically downloaded upon a first request of the user at step for any video provided by the content source or otherwise the first time in using the IDS client . As discussed above the downloading of content may occur transparently to the user or browser of the client such as by a background process of the IDS client or download manager .

At step the client invokes a second application such as application of or D to provide the second user interface for displaying the downloaded offline content including the downloaded video and user interface elements stored in the storage of the client . In one embodiment the second application provides an offline user interface and may be invoked at any point during the displaying of the online user interface of step such as upon the request of step of the user via selection of a user interface element. In other embodiments the second application is invoked from the desktop such as via a desktop shortcut instead of using the first application such as the browser . For example a user may display the online content via the first user interface the first time visiting a content provider such as a web site and from thereafter use the second application to display the offline content downloaded from the content provider. Additionally as will be discussed further below the second application may display the offline content and second user interface having a substantially similar appearance and behavior of the online content displayed by the first application and user interface.

Referring now to an embodiment of a method for providing an offline user experience substantially similar to and or corresponding to an online user experience is depicted. In brief overview at step the client provides a first user interface such as via a browser . The first user interface having user interface elements and video communicated via a network from a content source A N i.e. such as the online user interface depicted in or B. At step the client displays for the first user interface a first set of user interface elements displaying a video and having an appearance and behavior i.e. look and feel. At step the client displays a second user interface such as an offline user interface of or D via the application having user interface elements and video downloaded to and provided by the storage of the client. At step the client displays in the second user interface a second set of user interface elements displaying the video and having an appearance and behavior substantially similar to the first set of user interface elements of the first user interface.

In further detail at step the client displays a first user interface having user interface elements and video communicated via a network such as the online user interface depicted in or B. In one embodiment a browser displays the first user interface as a web page from a web server. In another embodiment any type and form of application may be used to display online content communicated via a network . As previously discussed the first user interface may display a portion of the user interface from local storage of the client such as cached content while displaying a portion of the user interface from a network such as the Internet.

At step the client displays at least a portion of the first user interface having a first set of one or more user interface elements related to or otherwise displaying a video . The first set of one or more user interface elements has a desired appearance and behavior. In one embodiment the first set of user interface elements comprises an entire screen area of the first user interface while in another embodiment the first set of user interface elements comprises a portioned area of the screen area of the first user interface. In some embodiments the first set of user interface elements comprises user interface elements of multiple screens or portions thereof such as portions of one or more pages the user may navigate via a menu system hyperlinks or any other suitable means.

At step the client displays a second user interface such as an offline user interface via offline content stored on the client . The IDS client may download content including a second user interface or elements thereof and one or more videos such as downloaded video of from one or more content sources A N. In some embodiments the application may display the second user interface while in other embodiments the browser displays the second user interface. In another embodiment the downloaded video may comprise a higher definition video of the video displayed by the first user interface at step . In one embodiment the video comprises a desired video characteristic not provided by the streamed video of the first user interface. In still a further embodiment the video may be a downloaded copy i.e. same as of the streamed video .

At step the client displays a second set of user interface elements related to or displaying the downloaded video . In some embodiments the second set of user interface elements comprises an appearance and behavior substantially similar to the first set of user interface elements of the first user interface. In one embodiment the second set of user interface elements corresponds to one of the first set of user interface elements. In other embodiments the second set of user interface elements comprises a subset of the first set of user interface elements while in some embodiments the first set of user interface elements comprises a subset of the second set of user interface elements. As such in these embodiments the second user interface or offline user experience provides a substantially similar user experience as the first user interface or online user experience. For example and in view of in comparison to any of the menu images A N banner ads and elements A N or A N of the user interface of may be identical or substantially similar to the corresponding menu images A N banner ads and elements A N or A N of the user interface of .

In some embodiments the second set of user interface elements may be located or arranged differently in the second user interface and still be substantially similar and correspond to the first set of user interface elements of the first user interface. In other embodiments the second set of user interface element may be modified in appearance such as by color size or font type and still be substantially similar and correspond to the first set of user interface elements. In a further embodiment the second set of user interface element may be modified in behavior such as causing a different processing or communication to occur on the client but still be substantially similar and correspond to the first set of user interface elements of the first user interface. Those ordinarily skilled in the art will recognize and appreciate the various modifications substantial slight or otherwise to the second set of user interface elements that may be designed or constructed and have the appearance and behavior be perceived by the user as substantially similar or resembling the first set of user interface elements.

In another embodiment a content development platform and tool is used for creating both the online and corresponding offline content from a single development environment. For example the content development tool allows a designer to create a user interface in a WYSIWYG What You See Is What You Get user interface designing tool and have the content development tool generate from the single user interface two sets of content one set for the online user interface and a second set for an offline user interface. The second set of the offline content may be generated with a set of user interface elements substantially similar to a corresponding set of user interface elements of the online user interface as discussed above in connection with . Furthermore the content development tool provides the designer with the use of a user interface element capable of downloading or causing to download the generated offline content automatically or upon user selection to a client displaying the online user interface as discussed in conjunction with .

Referring now to an embodiment of the content development tool is depicted. In brief overview the content development tool or environment provides a designer tool for designing one or more user interfaces such as any of user interfaces and illustrated in . The designer tool may also be used for designing video content for or via the user interface such as streamed video or downloaded video content as illustrated in . Additionally via the designer or editor the content development tool provides a user interface element of a content download selector which provides a mechanism in an online user interface to download a corresponding offline user interface. The content development environment also includes an editor tool for managing and publishing content such as via a publishing mechanism over a network to a content source A N. The content development environment includes a generator for generating content files from the user interface designed and edited by the designer and editor . The generator generates a first set of files for online content and a second set of files for corresponding offline content which may be substantially similar to the online content and include the download mechanism provided by the content download selector .

In some embodiments the content development tool operates run executes or otherwise is provided by one or more computing device such as servers A N. In one embodiment the content development tool is hosted on one or more servers A N such as a web server. The content development may present display or otherwise provide its functionality operations and or user interface via one or more web pages. In one embodiment the content development tool is deployed as an application service provider ASP to provide the operations described herein to one or more users via any network connected device . For example a user may create edit and publish content via the content development tool using device connected to a network and using a web browser accessing the uniform resource locator or web address of the content development tool . In some embodiments the content development tool may be designed and constructed to support multiple users. In other embodiments the content development tool is deployed in a client server model with a client portion of the content development tool working or operating with a server portion of the content development tool . In yet another embodiment the content development tool is deployed in a distributed model with a plurality of portions of the content development tool running on various computing devices on a network. In still another embodiment the content development tool is deployed as an application running on a single computing device .

In further detail the designer may comprise any type and form of mechanism and means for creating designing editing modifying or otherwise providing a user interface and the appearance and behavior thereof and in some embodiments including video content. As such the designer may use any type and form of user interface widgets components tool boxes or palettes known to those ordinarily skilled in the art that allow a designer to create design arrange manipulate or provide graphically textually or otherwise the appearance and behavior of a user interface such as an online user interface communicated via a web server and displayed via a browser . By way of example depict embodiments of a designer tool that includes a means and mechanism for selecting and using a layout template from a plurality of layout templates e.g. a layout template library for designing the user interface. A layout template identifies a selection design arrangement location and or layout of a variety of user interface elements for the user interface. In one embodiment a layout template identifies a portion or area of the user interface for displaying a video of a selected size or resolution and a portion or area of the user interface for displaying banner ads . In other embodiments the layout template includes a selection and or layout and arrangement of user interface elements such as one or more of the menu images A N and related media control elements A N and A N depicted in . The designer tool may use a variety of layouts and layout templates in practicing the operations described herein.

The designer may also include any means and mechanisms for identifying selecting placing or otherwise providing the graphical and visual appearance of the content of the user interface and the application such as application for displaying the content. This may also be referred to as skinning the application and content. In one embodiment the designer provides a mechanism or configuration tool for selecting identifying and assigning or associating images to user interface elements. Additionally the designer may include a configuration mechanism for selecting and assigning a color font size or other visual or graphical characteristic of any of the elements of the user interface. In some embodiments the designer allows for the configuration of the border and any border decorations of the browser or application displaying the user interface. In one embodiment the designer provides a mechanism for designing the application or browser to be borderless. In other embodiments the designer provides a configuration mechanism for a designer to create or design a desired layout without using a layout template or otherwise to design and provide a desired layout template .

The editor tool of the content development environment may comprise any type and form of mechanism and means for editing modifying arranging controlling or otherwise managing the user interface and any content thereof created with the designer tool . By way of example depict embodiments of an editor . The editor may provide a user interface means and mechanism for selecting a library of content which may include in some embodiments a selection and arrangement of segments of content such as images video and banner ads. In some embodiments the editor provides a configuration means and mechanism for adding new content segments and or new ad slots or for deleting content segments and ad slots from a library to provide what is generally referred to as a show i.e. content target to be played to an audience of one or more users. With the editor tool an editor such as an executive editor or producer responsible for the publishing of the content can select and arrange content segments in a desired order with desired video and image sequences along with ads to provide the desired published appearance and behavior of the user interface. Additionally the editor may provide a configuration mechanism for creating editing or otherwise providing information and data e.g. segment information related to a segment. Furthermore the editor tool may provide a configuration mechanism for creating new libraries and folders therefore to provide a show.

Additionally the editor may provide a user interface element related to publishing such as a user interface element interfaced or in communication with the publishing mechanism . As such the editor can finalize any content such as an arrangement of content to provide a show and publish the content or show to desired content source A N. In one embodiment the publishing mechanism includes a user interface or configurator for allowing a user to select modify or otherwise provide information and data related to publishing content with the content development tool . In some embodiments the publishing mechanism may include a means to select specify or identify the content sources A N such as by IP address or host name. Additionally the publishing mechanism provides a user interface such as via the editor for identifying selecting or otherwise specifying the set of one or more files or database of content providing the content to be published.

The publishing mechanism comprises a set of executable instruction of any form and type such as a programming language or scripting language e.g. control scripts for controlling managing or otherwise providing the logic function rules or operations to publish content from one source i.e. content development tool to another source such as content source A N. In some embodiments the publishing mechanism uses any type of protocol such a file transfer protocol FTP a download protocol or the Common Internet File System Protocol CIFS to communicate content from one source such as the content development tool to another source such as the content source A N via a network . In one embodiment as will be discussed further herein the publishing mechanism communicate the first set of content files providing online content and the second set of files providing offline content to a content source A N.

The content development tool may also provide a content download selector such as via the designer or the editor tool for selecting content of the user interface to be downloaded to a client . Referring now to FIGS. F and .G embodiments of the content development tool for providing a content download selector are depicted. By way of example a video to be streamed may be selected to be downloaded via the content download selector via any suitable user interface means and mechanism such as a checkbox element. Although generally discussed or illustrated herein as downloading video content the content download selector may be used in association with any type and form of content or media provided via the user interface as described herein.

In one embodiment the content download selector identifies configures or provides a user interface element automatically or otherwise in the online user interface such as the elements A N or A N of user interface of that download content to provide the offline content such as user interface of . As such the content download selector configures or provides an element of the first user interface e.g. online user interface capable of downloading content comprising the video media from a content source A N to a storage of a client in which the content of the storage provides a second user interface e.g. offline user interface having a second set of elements corresponding to a first set of elements of the first user interface and for displaying the video media stored in the storage of the client .

The content development tool may also include a content generator or generator for generating a first set of content such as online content files for an online user interface and generating a second set of content such as offline content files for an offline user interface. The generator comprises any type and form of executable instructions providing the logic function rule or operations for generating content files suitable for representing the user interface developed and or managed with the content development tool in both a desired online form and a corresponding offline form. In some embodiments based on the portions of content identified or selected for downloaded content via the content download selector in the user interface the generator automatically generates or provides the user interface mechanism and means for downloading such content in the user interface represented by the first set of online content files such as to provide the online and offline content used by the corresponding techniques discussed in conjunction with methods and of . For example in one embodiment the generator generated the API or function calls or provides a URL or web request to communicate in the online user interface of the first set of files to download the second set of files or otherwise provide the offline content on the client .

The generator may generate the first set of files and the second set of files in any type and form or format desired or targeted for the online content and the offline content. For example the online content may include web based pages such as HTML files scripts images etc. to publish or be served by a web server. The online content may includes links or URLs to content sources A N to stream video such as video over the network . Further to the example the offline content may include user interface elements such as layout templates that can be read and understood by the application in one embodiment of the IDS . In another embodiment the second set of files is organized into a download package such as a compressed set of files or a .cab file as known to those skilled in the art. In some embodiments the offline content includes downloaded video corresponding to streamed video of the online content but having high definition or one or more desired video characteristics. In some embodiment and although the formats between the sets of content files and may be different the generator generates the second set of files to have at least a second set of user interface elements substantially similar to and corresponding to a first of user interface elements provided by the first set of files . In one embodiment the first set of content files includes references or identifies the second set of content files . In some embodiments the first set of content files includes the second set of files and are published together via the publication mechanism to a content source A N as depicted in . In further embodiments the first set and second set of content files and are managed and published separately to the same or different content sources A N.

Referring now to a method is depicted for using the content development tool to provide the content files for and in accordance with any of the techniques described in . In brief overview at step of method a first user interface is created in the content development tool having a first set of user interface elements and video communicated via the network from a content source A N. At step an element of the first user interface is identified via the content development tool and the first user interface element is capable of downloading content comprising video media to a storage of the client . At step the content development tool generates a first set of files for displaying on the client the first user interface via a browser or other suitable online content application. At step the content development tool generates a second set of files to be downloaded to storage of the client and displayed as a second user interface on the client via an application . The second user interface of the second set of files includes a second set of user interface elements having an appearance and a behavior substantially similar to the first set of user interface elements of the first user interface provided by the first set of files .

In further detail at step of method a first user interface is created in the content development tool having any desired appearance and behavior. In one embodiment the first user interface is designed and created using the designer and or editor tool . In some embodiments the first user interface is based on or created with one or more layout templates . In some embodiments the first user interface is created or provided to display one video or multiple videos streamed via the network from one or more content sources A N. The first user interface may be created with any type form arrangement of user interface elements such as menus images media control functions etc and with any type and form of graphical or visual appearance and any type and form of user interactivity or interactions with a server A N of a content source A N. In one embodiment the content development tool is used to provide a rich interactive media based show for a content provider to display an online experience to an audience of one or more users on a client and to also provide a substantially similar offline user experience to the users.

At step of method an element of the first user interface is identified via the content development tool for downloading content comprising video media to storage of the client . For example as illustrated in a content download selector may be used to select a video for download using the techniques described herein. By identifying this element the content development tool provides the mechanism and means for the offline content or any portion thereof to be selected for download automatically or in response to a user input via the online user interface. As such the designer editor or generator may create generate or provide a hook interface URL or other suitable mechanism for the download of the offline content to occur from or based on displaying the online user interface. For example a user may select an element of the first user interface for displaying the video in high definition or a desired video characteristic.

At step the content development tool generates a first set of files for displaying on the client the first user interface via a browser or other suitable online content application. The content development tool may generate the first set of files in response to user selection of a menu item in the tool or in response to the user saving design or editorial work in either the designer or editor tool . The generator generates the first set of files to represent the content in an online user experience or via online access in manner that represents the appearance and behavior of the user interface created with the tool . In one embodiment the generator generates the first set of files to provide an appearance and or behavior that corresponds to a WYSIWYG design approach as those ordinarily skilled in the art would appreciate. In some embodiments the generator generates online content in two or more formats one set of online content in a format for a first content source A N and a second set of online content in a format for second content source A N. In some embodiments the generator generates online content corresponding to translating or transforming the user interface designed via the tool to be displayed on any form factor which may be constrained or limited such as a mobile telecommunication device or media playing device.

At step the content development tool generates a second set of files to be downloaded to storage of the client and displayed as a second user interface on the client via an application . In accordance with the techniques described in conjunction with the second user interface of the second set of files includes a second set of user interface elements having an appearance and a behavior substantially similar to the first set of user interface elements of the first user interface provided by the first set of files . In some embodiments the generator generates a portion such as a second set of elements of the offline content to be substantially similar to a corresponding portion first set of elements of the online content . In other embodiments the generator generates offline content or an offline user interface substantially similar to the entire online content or online user interface. In one embodiment the generator generated offline content including video content to be downloaded with any desired video characteristics such as video characteristics identified or selected via the designer or editor . In other embodiments the generator generates offline content that downloads the desired video content from a content source A N instead of having the video to be downloaded already included in the offline content .

The content development tool may generate any set of files and at any point during use of the tool and may generate the first set of files and the second set of files at the same point in time or together or may generate these sets of files and content at separate times. As such steps and may be performed in some embodiments concurrently nearly simultaneously or subsequently or otherwise in conjunction with each other while in other embodiments may be performed distinctly and separately from each other. Once the offline and online content files and are generated these sets of files can be published released or communicated in a controlled manner or otherwise to one or more content sources A N as depicted in .

In some embodiments the IDS is related to personalizing downloaded content for one or more users and controlling and managing access to content on a user or personal basis on a client having multiple users. A user of the client may subscribe to content from any content source A N by name type or category and have the content downloaded automatically or otherwise to the client for access by the user in accordance with access authorization and accounting policies of the client provided via a media player or the IDS client . Using the techniques described herein access and authorization to content of one user can be controlled and managed so that another user does not have access and authorization to content of another user or that a particular user can only subscribe download and access content of a certain type or category or having a certain content rating. For example the techniques described herein can be used to provide parent control supervision of content such as video and audio files of a younger user on the client so that the user is only allowed to subscribe download or access content suitable to that user.

Referring now to another embodiment of the IDS client is depicted with an authentication authorization and accounting AAA mechanism and a subscription mechanism . The AAA mechanism provides a configuration mechanism and services for identifying and authenticating who a user is what the user can access and or what services and resources the user is consuming. The AAA mechanism may comprise software hardware or any combination of hardware and software to provide any of the authentication authorization and accounting configuration and services in accordance with the operations described herein. In one embodiment the AAA mechanism may identify and authenticate the user using any suitable means and or mechanism. In one embodiment the AAA mechanism may use any identification and authentication mechanism provided by the operating system of the client and as known to those ordinarily skilled in the art. In another embodiment the AAA mechanism provides an identification and authentication mechanism distinct from the operating system or otherwise particular to the IDS client and or media player . In one embodiment the AAA mechanism may use the database comprising a user identification and corresponding password to authenticate a user. The IDS client media player or the AAA mechanism may provide a user interface such as a form of a graphical user interface to receive input from a user of a user identification and password for the user. In another embodiment the AAA mechanism may use the operating system login mechanism for identification and authentication purposes such as by hooking in or otherwise interfacing to the operating system login service. In other embodiments the AAA mechanism may use any ticket authority or ticket service or any token based system as known to those skilled in the art to provide identification and authentication of users.

In some embodiments the AAA mechanism provides for the configuration of rules or policies regarding what content stored on a client a user or group of users may be authorized to access. In one embodiment the database is used to store information and data identifying one or more users of the client and identifying authorization of the one or more users to access media files in storage of the client . For example the database may identify a first user and identify rights permissions or authorization of the first user to view or play a first media file such as a video stored on the client for example via the VFS and or cache manager . Authorized access may be defined by what content a user can view as stored on the client as an enumerated list what content a user can play or display via the media player or IDS client what content the user can edit change delete copy control or otherwise manage on the client . In some embodiments the AAA mechanism provides rules or policies regarding content a user may download to the client or subscribe to download to the client . In some embodiments the rules or policies may be based on a profile of the user such as age gender interest hobbies access or authorization level or any other suitable characteristic of the user. In other embodiments the rules or policies may be based on the name type category or rating of content or the content source A N. In some embodiments the rules or polices may provide limits upon the number and or size of content to be associated with the user and stored on the client . In further embodiments the AAA mechanism may provide for aging of content on the client by user such as any files not accessed by the user for a certain time period is flagged for archiving or deletion.

In another embodiment the accounting portion of the AAA mechanism may track and report on the content subscribed downloaded and accessed by one or more users of the client . As such the AAA mechanism may identify the times and dates of activity by a user related to subscriptions downloads and access of content including in some embodiments any failed authentication attempts or unauthorized access. In one embodiment the AAA mechanism provides for a super user or administrative control of the database and or any rules or policies for authentication authorization and accounting of user and user activity on the client . For example a first user of the IDS client or media player may be assigned administrative access rights to define specify and configure users user identification and passwords access rights for the user and any other rule or policy for the other users of the client . In some embodiments the AAA mechanism provides a user interface for the administrative user to configure the database with the desired AAA authentication authorization and accounting information for each user. In other embodiments the AAA mechanism provides a user interface for defining roles or groups of users with respective AAA information and for assigning a user to a role or group.

In some embodiments the AAA mechanism may be included with the IDS client such as the agent portion while in other embodiments the AAA mechanism or any portion thereof may be included with the application or browser . For example the identification portion of the AAA mechanism may be provided and displayed in the browser while any authorization services of the AAA mechanism such as via database may be provided via the agent . The database and AAA mechanism may identify any content by a virtual file name and or a hash code in accordance with the cache manager and virtual file system techniques described herein. In some embodiments the cache manager and or VFS are used to provide mangling of file names or otherwise an abstraction of file names to prevent avoid or hinder unauthorized access to such files.

In one embodiment the subscription mechanism may comprise any suitable means and mechanisms for a user to identify content to download to the client automatically or otherwise from one or more content sources A N. In one embodiment the subscription mechanism comprises a user interface for a user to select from a list of content or content sources by name type category or rating. In some embodiments the subscription mechanism defines a subscription by a schedule of frequency for download and whether the download should be automatically downloaded by the download manager or whether the user should be notified of the availability of the content. In further embodiments the subscription to content of a content source A N may be a paid subscription or may be a free subscription. As such in some embodiment the subscription mechanism includes a means and mechanism such as any logic function or operation to interface to or provide the content source A N with user registration information and or payment information.

In one embodiment the subscription mechanism interfaces to or works in conjunction with the AAA mechanism to provide the user with a selection of content or content sources in accordance with the user s authorization. The subscription mechanism may store such subscriptions in the database in association with a user. Additionally the download manager may interface with the subscription mechanism and or database to download content in accordance with the defined subscriptions of the one or more users. In other embodiments the subscription mechanism may comprise any type and form of interface to the content source A N to register a subscription of a user with the content source A N or to receive notification and information regarding the availability of content. In some embodiments the subscription mechanism checks for the availability of content on a content source A N such as a content source A N not supporting subscriptions on a scheduled basis or frequency in order to support and provide the subscription via the client .

Referring now to another embodiment of the IDS or IDS client is depicted in which the media player includes the AAA mechanism and subscription mechanism . In one embodiment the media player may operate without the IDS client while in another embodiment the media player may operate with portions of the IDS such as the cache manager or VFS . In some embodiments the media player may be designed and constructed to provide for identifying and authenticating multiple users and controlling and managing the multiple user s access to content on the client . For example the media player may upon starting or execution prompt the user for a user id and password. In some embodiments the media player may provide limited access to menus and functionality of the media payer when the user is not logged in or if authentication fails. In some embodiments the media player may access the content in storage directly such as via the directory and file system in one embodiment. In another embodiment the media player may use the cache manager and or VFS portions of the IDS in accordance with the techniques discussed herein to access the storage . For example the media player may include and use an application programming interface API to access functionality logic and operations of the cache manager and or VFS to control manage and provide access to media files in storage such as by virtual file name or hash code. In some embodiments the media player may use the database for authentication authorization and accounting configuration and services and in other embodiments may interface with any such services or mechanisms provided by the operating system of the client .

In some embodiments the media player includes the subscription mechanism which may include any portion of logic functions and operations of the download manager to provide for the download of content in accordance to a subscription of a user. In other embodiments the subscription mechanism may interface with any portion of the media player that may include the functionality to download content or in further embodiments may interface with a content source A N to download content to the client .

Referring now to an embodiment of a method for practicing a technique of personalizing downloaded content for a user is depicted. In brief overview at step the client provides a database identifying one or more users and an authorization of the one or more users to access one or more media files in storage of the client . At step the user is authenticated by the client such as via the AAA mechanism of the IDS client illustrated in or the media player as illustrated in . At step the client determines via the database the authorization of the user to access one or more media files in storage . At step the client either prevents or provides access via the media player to the one or more media files in accordance with the authorization assigned the user. At step the client downloads content for the user according to the user s authorization and in some embodiments according to one or more subscriptions of the user.

In further detail at step of the method any type and form of database may be used by the client to provide authentication authorization and accounting AAA control and policies. In one embodiment the IDS client as depicted in interfaces and uses the database to determine and provide authentication and authorization of a user. In another embodiment the media player as illustrated in interfaces with and uses the database to determine and provide authentication and authorization of a user. In some embodiments the IDS client or media player may use any authentication and authorization services provided by the operating system of the client as known to those skilled in the art.

At step the client may authenticate the user via the authentication mechanism . In one embodiment the IDS client or media player provides a user interface prompting the user for a user id and password .i.e. user credentials and validates or verifies the user credentials with the database . In another embodiment the authentication mechanism interfaces with or otherwise uses the authentication service of the operating system for either local client or network access such as a login window i.e. winlogin process in Microsoft Windows family of operating systems. For example the IDS client or media player may use a single logon procedure with the operating system s network or local client login. In some embodiments the client the IDS client or media player such as via the authentication mechanism provides a notification such as a dialog or popup form indicating the user was not authenticated or to try providing the user credentials again. In one embodiment the authentication mechanism allows a user to re try a login or authentication a certain number of times upon which the user may need to contact an administrator. In some embodiments upon a failed login attempt the user is assigned authorization of a guest or limited user for purposes of accessing content on the client .

At step of the method the authentication mechanism of either the client IDS client or media player as the case may determines the authorization of the user authenticated at step via the database to access content of the client such as video and or audio media files. In one embodiment the authentication mechanism determines a enumerated list of media files in storage to which the user has authority to access. In some embodiments the enumerated list may be empty or a zero length list as the user might not have any access to the media files in storage or there may not be any media files yet under control and management of the IDS client or media player . In other embodiments the authentication mechanism may determine the type of access authorized for the user for each media file associated with the user or otherwise which may include access to view the listing of the media file in a media player e.g. an enumerated listing access to play or display the media file access to change the name properties such as authorization rights or other characteristics of the media file access to copy the media file or burn the media file to another media access to delete the media file access to subscribe or download the media file by name type category or rating or any other desired type of access. In some embodiments the authorization of the user in the database is configured as a parental controlled mechanism by which an administrator e.g. parent configures the access rights of the user only to suitable content defined by any policy or ruled or only for content desired by the administrator for the user to access.

At step of the method the client IDS client or media player provides access to the media content in accordance with the authorization of the user to such files as identified in the database at step . In one embodiment if the user has authority to access and play the media file the user is allowed to display or play the media file in the IDS client or media player . In another embodiment if the user does not have authority to access the media file the IDS client or media player prevents the user from accessing and or displaying and playing the media file. If the user is not authorized for access or a type of access the IDS client or media player may present or display any type and form of user interface notifying the user of such denied access. In some embodiments if the user attempts too many times to access a media file in an unauthorized manner the IDS client or media player may not allow any further access by the user to any media files or may otherwise prevent authentication of the user or further use of the IDS client or media player .

In some embodiments a first user and a second user have the same access rights to the same media file while in other embodiments the first user may access the media file while the second user is not allowed to access the media file. In additional embodiments a first user may have access to list and play the media but otherwise not to edit manage or copy the media while a second user has access to edit manage and copy the media in addition to listing and playing the media. In one embodiment a first user and a second user may not have any access rights to a particular media file. In further embodiments the user may be an administrator a super user or otherwise a highest access level user and may have access without limitation to all the media files in storage of the client . Various combinations of different access levels may be authorized to a plurality of users in practicing the operations described herein.

At step the client IDS client or media player may download content to the client according to the authorization of the user. For example a user may attempt to download content from a content source A and the download manager may check with the authentication mechanism if the user is authorized to download such content. In some embodiments the content is downloaded based on a subscription of the user such as via the subscription mechanism . For example the download manager may automatically download content for a user based on a subscription managed by the subscription mechanism . The user may only be able to define subscriptions to content for which the user is authorized and therefore the download manager or media player can download the content based on the subscription without first checking with the authentication mechanism . In other embodiments the download manager or media player checks if the user is authorized for such a download based on the subscription. For example the user s authority to access the subscription may be changes such as by an administrator. Upon downloading content for a subscription or otherwise the IDS client or media player may update the database to associate the appropriate user or users with the downloaded content and identify the authorization of the user or users to access the downloaded content.

The techniques described in conjunction with can be used to download a media file once such as a video to storage of the client but control and manage the access to the media file by multiple users and different types of users As such the IDS or IDS client provides a multi user platform for downloading and playing media on a client and providing authentication authorization and accounting services policies and rules for downloading such as via subscription and storing the media on a user basis.

In another embodiment the IDS or IDS client performs techniques related to synchronizing the playing and downloading content of a user among computing devices. In view of the network environment depicted in content streamed from any of the content sources A N may be synchronized on a per user basis between a first client A and a second client N such that user may continue streaming on the second client N from a play position e.g. a stop position associated with streaming on the first client A. Likewise the playing of downloaded content such as a video media file on a first media player A may be synchronized with playing of the video media file on a second media player N for a user such that the second media player plays from a play position associated with the user on the first media player A. Furthermore the downloaded content for a user stored on a second client N may be synchronized with the user s content stored on the first client A such that the content associated with a user is automatically available as the user roams from computing device to computing device.

Referring now to network environment depicts an embodiment of the IDS for use in synchronizing a user s streaming or playing of media such as video between computing devices A N. In brief overview a first computing device A or client A is in communication over a network with a server of computing device C. A second computing device or client N is also in communication with the server over the network and may also be in communication with the first client A via the network . The server comprises a receiver for receiving communications from any of the clients A N such as receiving a play position or user information or from any other computing device on the network . The server also comprises a transmitter for transmitting communications to any device on the network such as for transmitting streaming media to the first client A or the second client N.

The server or clients A N may include information about the play position of a media being streamed from the server or from one client N to another client A or media being played by a media player A N. The play position may be associated with a user and the media in any suitable means and mechanism. As such the play position may identify the user the media file or files played or streamed by the user and one or more play positions for the media file or each of the media files. In one embodiment the play position information may be stored in the database of the IDS of the client A N or in a database of the server . In another embodiment the play position information may be stored in a file such as a well known or published file in any format such as XML. The play position may identify a position in the media being streamed or played from which the user desires to mark or identify for starting to stream or play the media from that position on another computing device media player session of streaming. or at another instance or time for streaming or playing the media. For example the play position may identify the point in time or the point in the media at which the streaming or playing of the media was stopped or paused by the user. In some embodiments the play position may be an offset length or location from a starting point of the media in any unit. For example in one embodiment the play position may identify the number of bytes in the file at which the media has been played or streamed. In another embodiment the play position may identify the length in time for which the media has been played or streamed or remaining length in time to be played or streamed. In yet further embodiments the play position may identify logical segments or blocks related to the media such as chapters. Various units and ways to determine and identify a play position of a media may be used in practicing the operations described herein.

Referring now to a method is depicted for practicing a synchronization technique related to streaming a media file for a user between computing devices. In brief overview at step a user requests transmission of a media stream to a first computing device. At step a play position is identified for the media stream and at step is associated with the media and the user. At step the user requests transmission of the media stream to a second computing device. At step the media stream is transmitted to the second computing device beginning at or near the play position associated with the user. As such the user can start streaming media from one client A stop the stream and start streaming from another client N at or near the point at which the stream was stopped.

In further detail at step the user may request from any computing device on the network transmission of a media stream from a server to a computing device A B such as client A. In one embodiment the user makes the request from the client A upon which the user desired to view the streaming media. In another embodiment the user requests from the client A to the server to stream the media to client N. In the request the user may identify the media by name type or category and in some embodiments may request multiple media files to be streamed. In one embodiment the receiver of the server receives the request. In response to the request the server or content source streams the media to the desired computing device A N such as client A or N. For example the transmitter of the server transmits the media over the network to the client A N. On the receiving device the streaming media may be played or displayed by a media player or the IDS client .

At step of the method a play position is identified for the media stream. This may occur upon any event or trigger associated with the playing of the media stream operation of the computing device or activity of the user. In some embodiments the play position is identified upon the user selecting to stop or pause the media stream. In other embodiments the play position is identified upon a user logging off the computing device or shutting down the operating system. In further embodiments the play position is identified upon detection of interruption in the network connection or interruption in the streaming of media from the server . In some embodiments the play position is continually identified or tracked and upon an event disrupting operation such as an unexpected event for example a computer reboot or shutoff the last known play position can be used.

At step the play position is associated with the media stream and the user. In some embodiments the client A N determines the play position and sends a communication to the server with the play position user and media information for the server to maintain for another request to transmit the media stream to the same user. In one embodiment the server stores the play position and associated user and media in a database. In another embodiment the server stores such information in a file such as an XML file. In some embodiments multiple play positions may be associated with the user and the media such as the last known play position and a previous play position . This will allow the user to select from multiple play positions when requesting to stream the media a second time to another computing device or the same computing device.

At step the user requests transmission of a media stream to a second computing device such as client N. The user may initiate this request from any computing device on the network such as client A or server or in some embodiments from the second client N. In one embodiment the request may indicate the user and the media desired to be streamed. In another embodiment the request may identify the user. The server may have information stored associating the media file with the user along with the play position . Thus based on the identified user the server can lookup the media file and the play position . In some embodiments the request may identify the user the media and the play position. In another embodiment the user may request transmission of the media stream to the first computing device such as after a period of time from stopping the media stream or rebooting or shutting off the first computing device.

At step the server transmits the media stream to the second computing device or client N beginning at or near the play position associated with the user. In some embodiments the server transmits the media stream via the transmitter and is responsible for starting the media stream at or near the play position . In other embodiments the server transmits the media stream to the client N from the start of the media stream and provides the play position to the client N for the client N to control start or provide the media stream at or near the play position for the user. In one embodiment the play position is transmitted with the media stream such as at the first portion of the stream. In another embodiment the play position is communicated via a communication channel separate from the media stream such as an out of band signal or channel. With the play position the media player or IDS client may control the streaming of media to display or show the media at or near the play position for example by skipping over previous portions of the media prior to the play position . In some embodiments the server provides multiple play positions for the user to select from to start the media stream which may be presented to the user by the IDS Client or media player . As such this technique allows a user to synchronize a media stream between computing devices according to a desired play position associated with the user or synchronizing of a media stream on the same computing device between different streaming or computing sessions of the user.

Referring now to a method is depicted for practicing a synchronization technique related to playing a media file for a user between media players. In brief overview at step a user requests a first media player A to play a media. At step a play position is identified for the playing of the media and at step is associated with the media and the user. At step the user requests a second media player B to play the media. At step the second media player obtains information about the play position of the media associated with the user and plays the media at or near the play position . The media played by the media player A N may be downloaded content from a content source .

In further detail at step the user may request from any computing device on the network a first media player A to play the media stored on a first computing device A such as client A. In one embodiment the user makes the request from the client A upon which the user desires to play the media. For example the user may start or execute the media player A or IDS client S on client A and from the user interface of the media player A select and initiate the playing of a media file stored in the storage A of the client A. In another embodiment the media player A may have any type and form of suitable interface to receive a communication from a user from another computing device over the network to play a media from the storage A of the client A. In the request the user may identify the stored media by name type or category and in some embodiments may request multiple stored media files to be played by the media player A. In response to the request the media player A plays the desired media from the storage A of the client A.

At step of the method a play position is identified for the media being played by the media player A. This may occur upon any event or trigger associated with playing of the media operation of the client A or activity of the user. In some embodiments the play position is identified upon the user selecting to stop or pause the media via the media player . In other embodiments the play position is identified upon a user logging off the client A or shutting down the operating system. In further embodiments the play position is identified upon detection of interruption in operation of the client A. In some embodiments the play position is continually identified or tracked and upon an event disrupting operation such as an unexpected event for example a computer reboot or shutoff the last known play position is used.

At step the play position is associated with the media and the user. In some embodiments the client A determines the play position and stores the play position and user information with the media in storage . In other embodiments the client A sends a communication to the server with the play position user and media information for the server to store this information such as in a database or file. In some embodiments multiple play positions may be associated with the user and the media such as the last known play position and a previous play position . This will allow the user to select from multiple play positions when requesting to a media player to play the media a second time on another computing device or the same computing device.

At step the user requests a second media player N to a to play the media such as on client N. The user may initiate this request from any computing device on the network such as client A or server or in some embodiments from the second client N. In one embodiment the user executes the second media player N on client N and via the user interface of the media player N request the media to be played. In another embodiment the request may identify the user. In another embodiment the user may request a second media player N on the first client A to play the media. In a further embodiment the user may request the same media player A to play the media after it has been stopped or restarted after the first instance of playing the media.

At step the second media player N obtains information about the play position associated with the user for the media. In one embodiment the second media player N obtains this information from the first client A or the first media player A from which the media was played and the play position identified. In some embodiments the second client N or second media player N obtains this information from the storage A of the first client A or the storage N of the second client N. For example the second client N may obtain the media from the content source A which downloads the play position associates with the user to be stored with the media in storage N. In other embodiments the second client N or second media player N requests the play position associated with the user and the media from the content source A which stores such information on behalf of the user. With the play position the media player N or IDS client N may control the playing of media to start show or play the media at or near the play position. In some embodiments the media player N skips over previous portions of the media prior to the play position . In some embodiments multiple play positions may be associated with the user and the media. In these embodiments the user may select via the media player N from which play position to start playing from. As such the techniques described herein allow a user to synchronize a playing of downloaded media between computing devices and or media players according to a desired play position associated with the user or synchronizing of playing of a media on the same computing device between different media playing or computing sessions of the user.

Although method and are generally described using the IDS client or a media player these techniques may be practiced with media players designed and constructed to practice the operations described herein without the IDS . Additionally the IDS client or media player may include any of the authentication and authorization techniques and features discussed in conjunction with . For example a media player or IDS client may identify a user via the authentication mechanism in order to associate a user with a media downloaded or streamed and to associate a play position with the user. In some embodiments the association of the user play position and the media is stored and maintained in the database . Additionally the authentication mechanism may be used to provide the play position associated with a user and media to a requesting device such as the second media player or second media computing device described in conjunction with method and 

Referring now to a method for synchronizing content such as downloaded media of a user between computing devices is depicted. In brief overview at step a database associates a user with media files stored on a first client A. At step a second client N requests information from the database about the media files stored in storage A of the first client A associated with the user. At step the second client determines if the media files stored on the first client A are also stored in storage N of the second client N. At step the second client requests media files associated with the user from the first client A or from another computing device such as server . For example the second client N requests the media files determined not be stored for the user on the second client B. At step the media files associated with the user are obtained or downloaded to the second client N.

In further detail at step a database may associate one or more users with one or more media files such as video and or audio files stored on a first client such as client A. In one embodiment the database may also be stored on the first client with the user s media files. In another embodiment the database may be available on another client computing device such a client N or a server . The database may organize the records in any suitable manner or arrangement to associate a user with one or more files the location of the files and the client storing the files. In one embodiment the database may associate a user with a directory and sub directories. In another embodiment the database may associate a user with one or more Uniform Resource Locators URLs which point to one or more media files.

At step a second client such as client N may request from the database information about the one or more media files stored on the first client A and associated with or belonging to the user. The second client N may request this information at any point of time either in an ad hoc manner triggered by an event or activity or otherwise in a predetermined manner such as by polling the first client N on a determined frequency or scheduled basis. In one embodiment a user on the second client N or the first client N requests via any type and form of user interface of the IDS client media player browser or application to synchronize media files of the user among a plurality of computing devices. In one embodiment the user identifies a first computing device A or client A or in another embodiment a database to be the master in a master slave relationship as understood by those skilled in the art of information or the master record holder of the files to be synchronized. In some embodiments the user requests two computing devices to be synchronized while in other embodiments the user requests multiple computing devices to be synchronized.

In further embodiments the user via a user interface of the IDS client media player browser or application configures or specifies one or more schedules or frequencies for a set of computing devices to automatically synchronize the media files of the user. In some embodiments the IDS client may be configured to automatically synchronize based on an operation of the computer or activity of the user or any other event or trigger. For example the IDS client may automatically synchronize media files of a user among computing device upon a user s login to the network or the user s login to a network device. In another example an IDs client may automatically synchronize media files upon any network detection or other notification that a user is roaming a network from one device to another device or is otherwise likely to switch between computing devices.

In some embodiments the second client N sends a request to the first client A to determine what media files a user may have stored on the first client A. The first client A may check the database or run a query on the files in storage A to provide to the second client N an enumerated list of files associated with the user on the first client A. In another embodiment the second client N sends a request to another computing device such as the server to query or check a database to determine a list of files on the first client A associated with the user. In some embodiments the second client N receives by any suitable communication or interface means and mechanisms from another computing device such as the first client A or server or the database information identifying the user s files stored on the first client A.

At step the second client N determines what media files are stored in the storage N that belong to or are associated with the user and compares this information with the information identifying the user s files stored on the first client A. In some embodiments the second client N generates an enumerated list of files of the user not found locally in storage N of the second client N but stored on the fist client A. In another embodiment the second client N generates a first enumerated list of files of the user found locally in storage N and a second enumerated list of files of the user not found locally in storage N. In other embodiments a database on any of the clients A N or the server may identify the files stored on the second client N and associated with or belonging to the user. As such in some embodiments the second client may use a single database or a combination of databases to obtain and compare information about the media files of the user stored on the first client A and stored or not stores on the second client N.

At step the second client N requests the files of the user not stored in storage N from any source or computing device such as the content source server N or the first client A. In some embodiments the second client N requests the files of the user from a plurality of sources or devices. For example the second client N may request a first set of one or more files of the user from the first client A and request a second set of one or more files of the user from the server . In some embodiments the request may comprise a download request via any type and form of download protocol. In other embodiments the request may comprise a file transfer request via any type and form of file transfer protocol. In yet another embodiment the request may comprise a disk copy request or a network file copy request. Various forms of requests and protocols may be used in practicing the operations described herein.

At step the requested media files are downloaded copied transferred communicated or otherwise obtained and stored in the storage N of the second client N. In some embodiments a portion of the media files to be obtained for the user and stored on the second client N may be downloaded via the download manager from one or more content sources A N. In other embodiments a portion of the media files to be obtained for the user and stored on the second client N may be copies from the storage A of the first client A over the network . In still further embodiments a portion of the media files of the user may be file transferred via any type and form of ftp application program service or task from any computing device on the network to the second client N. As such the second client N has synchronized and stored in storage N the same media files of the user on the storage A of the first client A.

Although the embodiment of the method is generally discussed as synchronizing media files of a user between a first client A and a second client N the synchronization techniques of method may be practiced with a plurality of computing devices in various combinations. For example a second third and or fourth client of the user may be synchronized with the media files of the user stored on a first client. In another example a second client of the user may be synchronized with media files stored on both a first and third client of the user and the first client with a fourth or fifth client of the user. In some additional examples a plurality of clients of the user may be synchronized from a server or a first client of the user.

In yet another embodiment the IDS or IDS client is related to techniques from requesting from one computing device a download of content to be downloaded to another computing device. For example a user may browse content from a work or office computer identify the content for download but request the content to be downloaded to another computer associated with the user such as a home computer. In another situation a download may be started on a first computer of the user such as the work computer but is either interrupted or will not complete in desired amount of time for example before the user commutes homes. The techniques start and continue the download on a second computing device associated with the user such that the requested download still occurs but on another computing device for example on the user s home computer.

These techniques can be practiced in view of any of the embodiments depicted in B A and or B such as via the IDS IDS client or one or more media players . Referring now to a method is depicted for practicing an embodiment of the technique to request from a first computing device a download to a second computing device. In brief overview at step a user identifies via a graphical user interface on a first computing device a video media from a content source desired to be downloaded. At step the user requests via the graphical user interface a download manager to download the video media content from the content source to a second computing device associated with the user. At step the download manager in response to the request initiates a download of the video media from the content sources to the second computing device. At step a download manager such as a download manager of the first or second computing device or another computing device downloads the video media to the second computing device.

In further detail at step a user may identify the video media from a content source via any type and form of graphical user interface on a first computing device such as client A. Any of the embodiments of the IDS or any computing device may present various types and forms of a user interface graphical or otherwise to allow a user to identify and select video media from a content source and that the graphical user interface may be provided or served by a server such as a web server. In one embodiment the user may identify or select a video media file or list of files desired to be downloaded by clicking and selecting one or more user interface elements in a web page displayed by a browser or in a user interface displayed by an application or a media player . In some embodiments the user identifies one video media file while in other embodiments the user identifies multiple video media files.

At step a user requests via the graphical user interface of the first computing device such as client A to download the video media from the content source to a second computing device associated with a user such as a second client N. In one embodiment a computing device is associated with a user in that the user can login e.g. authenticate and access e.g. authorized the computing device or otherwise has use ownership control or management of the computing device. In some embodiments the graphical user interface may display a list of one or more computing devices associated with the user. For example based on the user s authentication on the first client A the IDS may determine the other computing devices the user is associated with. In one embodiment the database may comprise an association of the user to computing devices. In other embodiments the IDS may query the server and or computing devices via the network to determine which computing devices that user can login and or access or has previously logged in and or accessed. In some embodiments the server may be queried to use the authentication mechanism of the operating system to determine the computing devices available to the user or previously used by the user. In another embodiment the authentication mechanism as discussed in may be used to determine which computing devices the user may authenticate to or may be authorized to use for downloading in accordance with the operations described herein.

Any of the embodiments of the IDS described herein may present various types and forms of a user interface graphical or otherwise to allow a user to select one or more computing devices. In some embodiments upon selection of the second computing device for which to download the video media the IDS requests user credentials to authenticate the user to the second computing device such as via the authentication mechanism . In another embodiment the IDS uses the credentials of the user on the first computing device to authenticate to the second computing device. In some embodiments the selected second computing device is authorized for use by the user without presenting or checking user credentials to an authentication mechanism. For example the user may be logged in to a local area network to which the user has access to all computing devices. In another example the second computing device was checked for authentication and or authorization prior to displaying the second computing device as a selection or choice in the graphical user interface.

Upon or after selection of the desired second computing device to which to download the user may select a user interface element of the graphical user interface such as submit or download command button to send a communication or request to a download manger to initiate the download. In one embodiment the request may be communicated to a download manager on the first computing device. In other embodiments the request may be communicated to a download manager of the second computing or another computing device such as a server . In some embodiments multiple download managers operate on multiple computing devices in a distributed manner in one embodiment and a client server manner in another embodiment. As such in these embodiments any one of the download managers may receive the request from the user via the graphical user interface of the first computing device. In still further embodiments a first download manager communicates the request to a second download manager.

At step the download manager receiving the request from step initiates the download of the selected video media from the content source to the selected computing device i.e. the second computing device in response to the request. In one embodiment the download manager may perform the download. For example the download manager of the second computing device receives the request and initiates the download from the content source to storage of the second computing device. In another example a server such as a web server communicates a request to download to the download manager of the second computing device based on the user s interaction or input with the graphical user interface of the first computing device. In another embodiment the download manager may request a second download manager to perform the download. For example a first download manager on the first computing device communicates to the second download manager on the second computing device to download the content.

In yet another embodiment the user may perform any of the steps and via a download order communicated to or used by an IDS client . For example in one embodiment the user may create edit generate or identify and select one or more download orders to identify the video media the content source and the second computing device in accordance with the method .

At step the download manager selected to provide the download of the selected video media to the selected computing device downloads such media to the device. The download manager may use any of the download and storage techniques described herein to download such content. In one embodiment the user may have a selected one computing device to which to download the video media while in another embodiment the user may have selected multiple computing devices to which to download the video media. As such multiple requests may be received by one or more download managers to perform downloads of the selected video media to a plurality of selected computing devices. In still further embodiments the user via the graphical user interface of the first computing device selected a first video media to be downloaded to a second computing device and a second video media to be downloaded to a third computing device. Additionally the first video media and the second video media may be selected to be downloaded from the same or different content sources. These techniques may be practiced in various combinations of selected video media files selected content sources and selected computing devices for downloads a plurality of video media from one or more content sources to one or more computing devices other than the first computing device from which the user interacts with the graphical user interface.

In another embodiment of these techniques depicts an embodiment of a method for downloading a video media to another computing device at some point during the download of the video media to the first computing device. For example the IDS may automatically switch to download the video media to the second computing device upon interruption to or expirations of a time limit of the download of the video media on the first computing device. In brief overview at step the user identifies on a first computing a video media desired to be downloaded from a content source. At step a download manager on the first computing device in response to the request initiates or starts the download of the identified video media to the first computing device. At step the download manager receives a communication such as a notification or a request to download the video media to a second computing device associated with the user. At step in response to the request or communication at step the download manager initiates the download of the video media to the second computing device. At step a download manager such as a download manager of the first computing device or second computing device downloads the video media to the second computing device.

At step the user identifies on a first computing device a video media desired to be downloaded from a content source. In one embodiment the user identifies the video media via a graphical user interface such as one provided by a browser via a web server . In another embodiment a download order may identify a video media file to be downloaded from a content source. The user may identify the video media to be downloaded by any suitable means and mechanisms such as clicking a user interface element provide a listing of selectable video media files. In some embodiments the user identified multiple video media files from one or more content sources.

At step a download manager of the first computing device initiates or otherwise starts to download the identified video media file s from the content source s to the storage of the first computing device. In some embodiments the download manager requests the video media file from the content source but has not yet received any portion of the video media file. In other embodiments the download manager receives portions of the video media file from the content source and has stored some or all of the received portions to the storage of the first computing device. In another embodiment the download manager receives and stores the complete copy of a first video media file to storage but is still waiting to receive portions of a second or third media file from a content source to store in storage of the first computing device.

At step during performing the download requested by the user the download manager may receive a communication indicating the download should be performed on a second computing device. In some embodiments based on a schedule or time limit to perform the download on the first computing device the IDS of the present may trigger the download to occur on a second computing device. For example a user may want the download to occur on the first computing device at the office or at work unless the download cannot be completed prior to leaving work then the download should be performed on a second computing device such as a home computer. In another example if the user logs off the work computer or the download is still running at 5 P.M. this may trigger the download to occur on the home computer. In one embodiment the user of the first computing device may request via a user interface to the download manager to instead have the identified video media be downloaded to a second computing device. The communication to trigger the download to the second computing device may automatic manual ad hoc or predetermined and may be based on operation of the first computing device activity of the user on the first computing device or performance or schedule of the download.

Upon receiving the request to download the video media to a second computing device the IDS performs the steps and as discussed above in conjunction with the method . The download manager initiates the download to the second computing device in response to the request and a download manager such as a download manager of the first or second computing device performs the download. In some embodiments although a portion of the download was downloaded to the first computing device the download manager downloads the entire video media file or otherwise performs the entire download request for the second computing device. In yet another embodiment the first computing device provides the second computing device the portion of the video media file already downloaded and the download manager continues to download the video media file from the point at which the first computing device stopped downloading. In still another embodiment the first download manager of the first computing device continues to download the video media while a second download manager of the second computing device also downloads the vide media.

In view of the techniques described in conjunction with the IDS provides techniques and methods for users to download media to one or more computing devices associated with the user from any Internet or network connected computing device including mobile computing and telecommunications devices. As such the IDS gives users great flexibility on when and where desired download of content such as video occurs. Additionally the IDS can download the content to another computing device for a user as the user roams between locations or upon events or triggers under which it may be desirable to download to another computing device.

Although the IDS at times may be generally described in relation to content of video and or audio media files these media files or content may include any format for providing any type and form of visual and or auditory experience to the user such as the Macromedia flash file format. .swf playable by a Macromedia flash player manufactured by Adobe Systems Incorporated of San Jose Calif. or any file format and media files produced by the Macromedia Director or played by the Macromedia Shockwave Player products also manufactured by Adobe Systems Incorporated.

In some embodiments any one of the techniques or methods described herein may be combined with any other technique or method. For example in one embodiment the flipping technique described in conjunction with may be practiced in combination with the caching and virtual file system techniques of and or with the shuffle storage technique of . In another example embodiment the multiple content source downloading technique of may be combined with the delivery behavior techniques of which may also be combined with the flipping technique caching and virtual file system techniques and or the shuffle storage techniques. In yet a further example any of the online and offline content related systems and techniques described in may be practiced with any of the downloading caching and storing techniques. Additionally in another example any of the personalization synchronization and download techniques of may be practiced with the flipping caching and virtual file system and shuffle storage techniques and or the multiple content downloading technique.

In view of the structure function and operations of the embodiments of the system methods and techniques described herein the Integrated Delivery System IDS provides a comprehensive development and delivery platform and client side technology for the intelligent and effective delivery and management of video and audio applications and services over the Internet to network connected consumer devices or Internet enabled media devices. As described herein the IDS may use several techniques for the download caching and storage of content to a client from one or more content sources. Additionally the IDS provides techniques for the development and delivery of offline content and user experience corresponding and similar to the online content and user experience. Furthermore the IDS provides for a multi user media playing platform with authentication authorization and accounting policies and services. Moreover the IDS also provides for the personalization and synchronization of downloaded content on a user basis that can be downloaded and viewed anytime and anywhere.

Many alterations and modifications may be made by those having ordinary skill in the art without departing from the spirit and scope of the invention. Therefore it must be expressly understood that the illustrated embodiments have been shown only for the purposes of example and should not be taken as limiting the invention which is defined by the following claims. These claims are to be read as including what they set forth literally and also those equivalent elements which are insubstantially different even though not identical in other respects to what is shown and described in the above illustrations.

