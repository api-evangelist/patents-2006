---

title: Spell checking system including a phonetic speller
abstract: A spell checking system includes a letter spelling engine. The letter spelling engine is configured to select a plurality of candidate letter target strings that closely match a misspelled source string. The spell checking system includes a phoneme spelling engine. The phoneme spelling engine is configured to select a plurality of candidate phoneme target strings that closely match the misspelled source string. A ranker module is configured to combine the candidate letter target strings and the candidate phoneme target strings into a combined list of candidate target strings. The ranker module is also configured to rank the list of candidate target strings to provide a list of best candidate target strings for the misspelled source string.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07831911&OS=07831911&RS=07831911
owner: Microsoft Corporation
number: 07831911
owner_city: Redmond
owner_country: US
publication_date: 20060308
---
Spelling correction is an important feature in many different types of software applications such as word processing applications and email applications. When a character string or word includes spelling errors that result in invalid words a lexicon based spell checker can be used to suggest replacement words for the misspelled word. Such misspellings may occur due to a typo or an ignorance of the spelling of the word.

Conventional letter type spell checking systems compare the words in the text entry to a lexicon of words and identifies the words in the text entry that are not found in the lexicon. For example the spell checker would identify the text entry animl as being a misspelled word. One or more replacement words are often suggested for the misspelled word after determining an edit distance from the text entry to a target word. The edit distance represents the change that is required to form a valid alternative word. The word in the lexicon having the shortest edit distance from the typed invalid word is the first replacement word that is suggested to the user. Other replacement words can also be suggested that may contain more than one edit distance. For example in the text entry animl the spell checker can suggest the closest match in the lexicon which is animal having an edit distance of one. Other words from the lexicon can also be suggested that have an edit distance of greater than one. For example the spell checker can suggest the words anima and animate as possible replacement words for the misspelled word.

Although conventional letter type spell checking systems can correct various spelling errors by inserting letters deleting letters substituting letters and transposing letters conventional letter type spell checking systems are unable to suggest replacement words for phonetic type spelling errors. Phonetic type spelling errors include those types of spelling errors that are a result of spelling a word based on the way that it sounds. In addition creating a spell checking system that consider phonetics would be a very expensive and difficult process for applying it across different languages. In general programmers skilled in the different languages and idiosyncrasies of the different languages would be needed to hand tune any sort of spell checker.

The discussion above is merely provided for general background information and is not intended to be used as an aid in determining the scope of the claimed subject matter.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter. The claimed subject matter is not limited to implementations that solve any or all disadvantages noted in the background.

A spell checking system includes both a phoneme spelling engine and a letter spelling engine. The phoneme spelling engine is responsible for transforming a misspelled source string into candidate phoneme target strings. The letter spelling engine is responsible for transforming the misspelled source string into candidate letter target strings. The phoneme spelling engine converts the misspelled source string into a phoneme sequence string. While the letter spelling engine parses the misspelled source string into a letter sequence string. The candidate phoneme target strings and the candidate letter target string are combined into a list of candidate target strings. The combined list of candidate target strings are ranked such that a list of best candidate target strings are made available to a user.

The following description of illustrative embodiments is described in accordance with a spell checking system for use in various kinds of software applications such as word processing applications email applications and text messaging applications. However the description of illustrative embodiments can be used in other types of applications that can make use of a spell checking system. Before describing aspects of the illustrated embodiments however it may be useful to describe suitable computing environments that can incorporate and benefit from these aspects. Various applications that can make use of a spell checking system can be implemented in a networked environment of server computers and or other computers. The computing environment shown in is one such example.

Embodiments are operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with various embodiments include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers telephony systems distributed computing environments that include any of the above systems or devices and the like.

Embodiments may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Some embodiments are designed to be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules are located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing some embodiments includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable non volatile memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable non volatile memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies.

A user may enter commands and information into the computer through input devices such as a keyboard a microphone and a pointing device such as a mouse trackball or touch pad. Other input devices not shown may include a joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer is operated in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a hand held device a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on remote computer . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

Memory is implemented as non volatile electronic memory such as random access memory RAM with a battery back up module not shown such that information stored in memory is not lost when the general power to mobile device is shut down. A portion of memory is preferably allocated as addressable memory for program execution while another portion of memory is preferably used for storage such as to simulate storage on a disk drive.

Memory includes an operating system application programs as well as an object store . During operation operating system is preferably executed by processor from memory . Operating system in one preferred embodiment is a WINDOWS CE brand operating system commercially available from Microsoft Corporation. Operating system is preferably designed for mobile devices and implements database features that can be utilized by applications through a set of exposed application programming interfaces and methods. The objects in object store are maintained by applications and operating system at least partially in response to calls to the exposed application programming interfaces and methods.

Communication interface represents numerous devices and technologies that allow mobile device to send and receive information. The devices include wired and wireless modems satellite receivers and broadcast tuners to name a few. Mobile device can also be directly connected to a computer to exchange data therewith. In such cases communication interface can be an infrared transceiver or a serial or parallel communication connection all of which are capable of transmitting streaming information.

Input output components include a variety of input devices such as a touch sensitive screen buttons rollers and a microphone as well as a variety of output devices including an audio generator a vibrating device and a display. The devices listed above are by way of example and need not all be present on mobile device . In addition other input output devices may be attached to or found with mobile device .

Input module illustrated in is configured to receive a source string i.e. input word or phrase as illustrated in . Input module can be a keyboard i.e. typed input a microphone i.e. dictated input or other conventional input that is configured to receive source string . Alternatively source string can be retrieved from a pre existing document a web page or from other sources besides a keyboard or microphone.

Spell checking system utilizes a lexicon . Lexicon includes a comprehensive word list of correctly spelled words as well as a comprehensive phoneme list that corresponds with the word list. The phoneme list includes phonemes or sound units that act as the letters of pronunciation. The phonemes correspond with how a word sounds. The word list and the phoneme list are specific to a language of which the spell checking system will be checking.

Spell checking system also utilizes letter based trie structures and phoneme based trie structures . Trie structures are data structures that effectively compress a word list or phoneme list into compact structures. Although letter based trie structures and phoneme based trie structures are illustrated as being separate from lexicon it should be noted that in the alternative letter based trie structures and phoneme based trie structures can be stored in lexicon .

Referring to flowchart of and the block diagram illustrated in the computer implemented method of suggesting replacement target strings for a misspelled source string includes the step of selecting a plurality of candidate phoneme target strings illustrated at block . In spell checking system includes a phoneme spelling engine which is configured to implement step of . Phoneme spelling engine includes a letter to sound LTS system .

LTS system is responsible for taking an input word i.e. misspelled source string or word and outputting a list of possible pronunciations for the input word. Typically this is done by outputting phonemes as previously discussed above. LTS system is trained statistically by mapping human pronunciation of words to phonemes recognized by a speech to phoneme system. Typically hundreds or thousands of examples are needed to train an LTS system properly. However training an LTS system does not require any highly refined hand tuned heuristics.

Referring to process in the block diagram illustrated in LTS system is configured to convert the misspelled word or source string into a source phoneme sequence string . For example the source string can be fizikle . The user had intended to spell the word physical however the user mistakenly spelled the word according to how it sounds. At process LTS system converts the source string e.g. fizikle into source phoneme sequence string f ih z ih k ax l .

Phoneme spelling engine is responsible for accessing phoneme based trie structures traversing the phoneme based trie structures illustrated at in and calculating edit distances between source phoneme sequence string and different possible target phoneme sequence strings to select candidate phoneme target strings that closely match the misspelled source string . To traverse target phoneme based trie structures phoneme spelling engine dynamically creates and dynamically destroys a grid for each target phoneme based trie structure . Since phoneme based trie structures are laid out sequentially marching through a trie structure is tantamount to traversing the dynamically created grid from left to right. Edit distances are the number of edits or edit operations required to go from one sequence to another sequence. In this case the edit distance is the amount of edit operations to go from source phoneme sequence string to different possible target phoneme sequence strings. Typically edit distances for transforming source phoneme sequence string into candidate phoneme target strings are calculated using phoneme based trie structures and the dynamically created grids. Therefore marching through the phoneme base trie structures and computing edit distances are substantially completed simultaneously and illustrated collectively at block of . Those transformations that took a minimal number of edit operations between source phoneme sequence string and candidate phoneme target strings are those selected candidate phoneme target strings that closely match the misspelled source string .

In accordance with the example discussed above illustrates a dynamically created grid . To determine the edit distance or number of edit operations the source phoneme sequence string f ih z ih k ax l i.e. left column is compared to the target phoneme sequence string f ih z ih k ax l i.e. top row in grid . The total number of edits or edit operations is contained in the lower most right cell. In this example the most efficient and lowest cost is to compare the source phoneme sequence string to the target phoneme sequence string by marching down the diagonal portion of the grid. Since the source phoneme sequence string is the same as the target phoneme sequence string the edit distance is zero. However if certain phonemes in the source phoneme sequence string were missing or were different one would traverse grid downward to delete an item traverse grid to the right to insert an item or traverse grid diagonally if an item needs to be substituted or transposed.

It is time consuming to compute all edit operations for every phoneme sequence in lexicon . Therefore computing edit operations for a phoneme sequence is pruned. To prune the process a minimal number edit operations at any given point in the phoneme based trie structure are permitted. If during the traverse the number of edit operations supersedes this minimum number the traversing of that phoneme based trie is terminated. The easiest way to enforce this pruning process is to only compute entries in the grid that are a number of units away from the diagonal that is equal to the minimum number of acceptable edit operations. Generally the minimum number of edit operations should be limited to two or less.

After phoneme spelling engine traverses the phoneme based trie structures and calculates edit distances as illustrated by process in using a dynamically created and destroyed grid a set of candidate phoneme target strings are available. These candidate phoneme target strings are the lowest cost phoneme target strings or the phoneme target strings with the most minimal number of edit operations. In the illustrative example plausible candidate phoneme target strings for the source fizikle can include physical or fiscal .

Referring back to flowchart of the next step in the computer implemented method of suggesting replacement target strings for a misspelled source string includes the step of selecting a plurality of candidate letter target strings as illustrated at block . In spell checking system also includes a letter spelling engine which is configured to implement step of .

Referring to process in the block diagram illustrated in letter spelling engine is configured to parse the misspelled source string into a source letter sequence string . In the example discussed above the misspelled source string can be fizikle . The user had intended to spell the word physical however the user mistakenly spelled the word according to how it sounds. At process letter spelling engine parses the misspelled letter source string e.g. fizikle into a source letter sequence string f i z i k l e . Source letter sequence string is a sequence of each of the individual letters of the misspelled letter source string .

Letter spelling engine is also responsible for accessing letter based trie structures traversing the trie structures illustrated at in and calculating edit distances between source letter sequence string and different possible target letter sequence strings to select candidate letter target strings that closely match the misspelled source string . To traverse trie structures letter spelling engine dynamically creates and dynamically destroys a grid for each target structure . Since letter based trie structures are laid out sequentially marching through a trie structure is tantamount to traversing the dynamically created grid from left to right. Edit distances are the number of edits or edit operations required to go from one sequence to another sequence. In this case the edit distance is the amount of edit operations to go from source letter sequence string to different possible target letter sequence strings. Typically edit distances for transforming source letter sequence string into candidate letter target strings are calculated using letter based trie structures and the dynamically created grids. Therefore marching through the letter based trie structures and computing edit distances are substantially completed simultaneously and illustrated collectively at block of . Those transformations that took a minimal number of edit operations are selected as the candidate letter target strings .

In accordance with the example discussed above illustrates a dynamically created grid . To determine the edit distance or number of edit operations the source letter sequence string f i z i k l e i.e. left column is compared to the target letter sequence string p h y s i c a l i.e. top row in grid . The total number of edits or edit operations is contained in the lower most right cell. In this example the most efficient and lowest cost is to compare the source phoneme sequence string to the target phoneme sequence string by marching down the diagonal portion of the grid. Like grid of for traversing phoneme based trie structures letter spelling engine traverses grid downward to delete an item traverse grid to the right to insert an item or traverse grid diagonally if an item needs to be substituted or transposed. Like phoneme spelling engine the process of traversing trie structures in letter spelling engine is pruned. To prune the process a minimum number edit operations at any given point in the letter based trie structure are permitted. Since each letter sequence item is going to need to be substituted for each letter in the letter based trie structure in the example illustrated in the number of edit operations would be much greater than a minimum number of two edit operations. In accordance the traversing of this particular trie structure and dynamically created grid will be terminated. Therefore letter spelling engine will never select the target string physical as a candidate letter target string.

After engine traverses the letter based trie structures and calculates edit distances as illustrated by process in FIG using a dynamically created and destroyed grid a set of candidate letter target strings are available. These candidate letter target strings are the lowest cost letter target strings or the letter target strings with the lowest amount of edit distances. In the illustrative example plausible candidate letter target strings for the source fizikle can include fizzle or fizzing .

Referring back to flowchart of the next step in the computer implemented method of suggesting replacement target strings for a misspelled source string includes the step of combining candidate phoneme target strings and candidate letter target strings as illustrated at block . By combining candidate phoneme target strings and candidate letter target string a list of candidate target strings is provided. This process is illustrated at of . At block of the list of candidate target strings is ranked. In spell checking system also includes a rank module . Rank module is configured to implement steps and of .

Rank module is configured to combine candidate phoneme target strings and candidate letter target strings to determine a list of candidate target strings . After providing a list of candidate target strings rank module is configured to rank the list of candidate target strings In general to rank the list of candidate target strings each candidate target string is given a score. The following are descriptions of different embodiments that score and then rank candidate target strings .

In one embodiment and as illustrated in block of the total score of a candidate target string TotalScore CandidateTargetString is the equivalent to the number of edit distances or edit operations that the source string underwent to select the candidate target string . One way of accomplishing this is to summate for each candidate target string a number of edit operations or score of a corresponding candidate phoneme target string Score CandidateLetterTargetString and a number of edit operations or score of a corresponding candidate letter target string Score CandidatePhonemeTargetString to find a combined score. Such an equation is as follows Score CandidateLetterTargetString Score CandidatePhonemeTargetString TotalScore CandidateTargetString 

As previously discussed in the above described illustrative example candidate phoneme target strings include physical and fiscal while candidate letter target strings include fizzle or fizzing . In accordance with this illustrative example none of the candidate phoneme target strings have a corresponding candidate letter target string or vice versa. Therefore in this embodiment the score for each candidate phoneme target string is the total score of the candidate target string and the score for each candidate letter target string is the total score of the candidate target string.

In another embodiment and as illustrated in block of the total score of a candidate target string TotalScore CandidateTargetString equals the summation for each candidate target string of a number of edit operations or score of a corresponding candidate phoneme target string Score CandidateLetterTargetString and a number of edit operations or score of a corresponding candidate letter target string Score CandidatePhonemeTargetString as illustrated in block . In addition the summation is augmented with an adjustable weight given to the score of the candidate phoneme target string as shown in the following equation Score CandidateLetterTargetString Score CandidatePhonemeTargetString TotalScore TargetString 

The adjustable weight multiplied to the score of the candidate phoneme target string can be any adjustable value. For example if is zero then phonetic speller engine is not considered in the total score for the target string. If is one then phonetic speller engine is considered in the total score for the target string with same amount of weight as letter speller engine . If is greater than one then phonetic speller engine is considered to be more useful than letter speller engine . It should be noted however that even though the general tendency is for the phoneme spelling engine to have better accuracy in finding target strings in general a candidate phoneme target string having any greater than one edit distance will not be a good candidate target string.

In another embodiment and as illustrated in block of each candidate target string is scored based on types of edit operations that it underwent. Certain types of errors are more common than other types of errors. For example changing an e to an a is more likely than replacing a k with a w . Therefore it can be beneficial to weight certain edit operations more or less than others. In this embodiment vowel to vowel edit operations edit operations that involve letters that are close together on the keyboard and edit operations that involve phonemes that have similar sounds can receive higher weights.

In this embodiment instead of summating the scores of candidate phoneme target strings and corresponding candidate letter target strings a Score edit entry is used for ranking candidate target strings . Certain types of edits that are statistically frequently performed edits will have higher score than certain types of edits that are statistically infrequently performed edits. Therefore certain types of edit operations underwent by source string to select certain candidate target strings will have higher scores than other candidate target strings. For example substituting an a for an e i.e. edit Subst a e can provide a candidate target string with a greater score than substituting a p for an a i.e. edit Subst p a because a user can commonly mistake an e for an a while most user do not often mistake a p for an a . This embodiment can be used on its own or in addition to the summation embodiments described above to improve target string scores.

In yet another embodiment and as illustrated in block of a score derived from either summating a number of edit operations of a corresponding candidate phoneme target string and a number of edit operations of a corresponding candidate letter target string illustrated at block to find a combined score for each candidate target string or scoring each candidate target string based types of edit operations illustrated at block can be multiplied by a contextual score. As discussed above in the phoneme space the endpoints of certain phoneme strings can be multiple different words. In the previous example the phoneme string for the word hear is hh iy r and the phoneme string for the word here is hh iy r. The same phoneme string exists for both the word hear and here . In this case phoneme spelling engine will have a difficult time knowing whether the target string should be the word hear or here . Therefore using a contextual spelling engine aids in determining whether the appropriate target string should be hear or here .

A contextual spelling engine utilizes the words on either side of a misspelled word to help disambiguate the misspelled word and suggest replacement words. A contextual spelling engine is configured to match input words to subject words of a candidate table. Candidate replacement words and candidate scores from the candidate table that correspond with the matched subject words are extracted. Each candidate score is indicative of a probability that the input word should be replaced with the corresponding candidate replacement word. For example the sentence I want to send a form letter versus the sentence The letter was form a good friend would yield different ranked suggestions for the misspelled word firm . In this embodiment the score derived either block or Score Speller is multiplied by the score found by a contextual spelling engine Score Context as is shown in the following equation Score Speller Score Context Score Total It should be noted that the above embodiments for ranking the list of target strings is not an exhaustive. There are many ways to rank the output of a phoneme speller engine a letter speller engine and a contextual speller engine involving heuristic and or statistical means that employ sophisticated algorithms.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

