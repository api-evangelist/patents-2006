---

title: Bypassing software services to detect malware
abstract: A method, apparatus, and computer readable medium are provided by aspects of the present invention to determine whether a malware is resident on a host computer. In one embodiment, a method determines whether data that is characteristic of malware is loaded in the system memory of a host computer. More specifically, the method includes causing a device communicatively connected to a host computer to issue a request to obtain data loaded in the system memory. Then, when the requested data is received, a determination is made regarding whether the data is characteristic of malware. Since, the method causes data to be obtained directly from system memory without relying on software services on the host computer, malware that employs certain stealth techniques will be identified.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07757290&OS=07757290&RS=07757290
owner: Microsoft Corporation
number: 07757290
owner_city: Redmond
owner_country: US
publication_date: 20060130
---
As more and more computers and other computing devices are interconnected through various networks such as the Internet computer security has become increasingly more important particularly from invasions or attacks delivered over a network or over an information stream. As those skilled in the art and others will recognize these attacks come in many different forms including but certainly not limited to computer viruses computer worms system component replacements Trojans RootKits spy ware denial of service attacks even misuse abuse of legitimate computer system features all of which exploit one or more computer system vulnerabilities for illegitimate purposes. While those skilled in the art will recognize that the various computer attacks are technically distinct from one another for purposes of the present invention and for simplicity in description all malicious computer programs that spread on computer networks such as the Internet will be generally referred to hereinafter as computer malware or more simply malware.

When a computer system is attacked or infected by computer malware the adverse results are varied including disabling system devices erasing or corrupting firmware applications or data files transmitting potentially sensitive data to another location on the network shutting down the computer system or causing the computer system to crash. Yet another pernicious aspect of many though not all computer malware is that an infected computer system is used to infect other computer systems that are communicatively connected by a network connection.

A traditional defense against computer malware and particularly against computer viruses and worms is antivirus software. Most antivirus software identifies malware by matching patterns within data to what is referred to as a signature of the malware. Typically antivirus software scans for malware signatures when certain events are scheduled to occur such as when data is going to be written or read from a storage device on the computer. As known to those skilled in the art and others computer users have ongoing needs to read and write data to storage devices such as a hard drive. For example a common operation provided by some software applications is to open a file stored on a hard drive and display the contents of the file on a computer display. However since opening a file may cause malware associated with the file to be executed antivirus software typically performs a scan or other analysis of the file before the open operation is satisfied. If malware is detected the antivirus software that performed the scan may prevent the malware from being executed for example by causing the open operation to fail.

Increasingly malware is employing stealth techniques to hide on a computer or otherwise prevent detection by programs designed to protect a computer e.g. antivirus software anti spyware software and the like . For example malware may be distributed with a RootKit which is a type of malware that prevents the detection of other malware. Those skilled in the art and others will recognize that a RootKit acts as a man in the middle monitoring and altering communications between an operating system and programs designed to protect a computer from malware.

For illustrative purposes and by way of example only depicts how a RootKit is able to control the information that is made available to software designed to protect a computer from malware. As illustrated in the computer includes an application program an operating system a hardware platform and a RootKit . Also the operating system includes an interface that provides services in the form of an Application Programming Interface API to application programs installed on the computer . The application program performs actions designed to protect the computer from malware. For example the application program may scan files for malware on access when a user attempts to access a file stored on a storage device not illustrated included in the hardware platform . However as illustrated in the application program relies on services provided by the operating system to access data on the hardware platform . Moreover the computer is infected with the RootKit that hooks into the operating system where it intercepts calls used to perform basic functions on the computer . If an application program attempts to list the contents of a directory containing one or more files used by the RootKit the RootKit will censor the file name from the list. Similarly the RootKit may hide entries in the system registry process list and the like thereby controlling all of the information that the RootKit wants hidden. As a result the application program is unable to identify the RootKit and any associated malware that the RootKit is designed to hide.

Generally described a method apparatus and computer readable medium are provided by aspects of the present invention to determine whether a malware is resident on a host computer. In one embodiment a method or routine is provided to determine whether data that is characteristic of malware is loaded in the system memory of a host computer. More specifically the method includes causing a device communicatively connected to a host computer to issue a request to obtain data loaded in the system memory. Then when the requested data is received a determination is made regarding whether the data includes data characteristic of malware. Since the method causes data to be obtained directly from system memory without relying on software services on the host computer malware that employs certain stealth techniques will be identified.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

The present invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally described program modules include routines programs applications widgets objects components data structures and the like that perform particular tasks or implement particular abstract data types. The present invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located on local and or remote computer storage media.

While aspects of the present invention will primarily be described in the context of determining whether data that is characteristic of malware is present in the system memory of a computer those skilled in the relevant art and others will recognize that aspects of the invention are also applicable to other areas than those described. In any event the following description first provides an overview of an environment in which aspects of the invention may be implemented. Then a method or routine that implements aspects of the invention is described. However the illustrative examples provided herein are not intended to be exhaustive or to limit the claimed subject matter to the precise forms disclosed. Similarly any steps described herein may be interchangeable with other steps or combinations of steps in order to achieve the same result.

Now with reference to an exemplary hardware platform of a host computer suitable to illustrate aspects of the present invention will be described. Those skilled in the art and others will recognize that the host computer depicted in may be any one of a variety of devices including but not limited to personal computing devices server based computing devices mini and mainframe computers laptops personal digital assistants PDAs or other electronic devices having some type of memory. For ease of illustration and because it is not important for an understanding of the present invention does not show the typical components of many computers such as a keyboard a mouse a printer a display etc. However in the embodiment illustrated in the hardware platform on the host computer includes a Central Processing Unit CPU a system memory a memory controller a hot swappable hard drive the input output I O interfaces and that are connected to the FireWire device and the USB device respectively. Moreover as further illustrated in the CPU system memory hot swappable hard drive and I O interfaces and are each communicatively connected to the memory controller via the buses and .

As illustrated in the host computer includes a memory controller communicatively connected to the system memory . Those skilled in the art and others will recognize that the memory controller is a hardware device that manages input output I O between the system memory and other components on the computer . In this regard the memory controller interfaces the system memory with other hardware components by among other things 1 accepting requests to read write data to the system memory 2 generating the necessary signals to satisfy the requests and 3 forwarding any requested data loaded in the system memory back to a requesting component. Moreover the memory controller may provide a direct connection or Direct Memory Access DMA from the system memory to components that connect to the host computer such as storage devices e.g. hard drives memory cards flash drives boards cards and the like. In providing a direct connection from the system memory to components on the host computer any one of the number of protocols may be used to facilitate communication including but not limited to Universal Serial Bus USB FireWire also known as IEEE 1394 or iLink Advanced Graphic Port AGP Personal Computer Memory Card International PCMCI Peripheral Component Interconnect PCI PCI X Small Computer System Interface SCSI and the like. Typically a memory controller is integrated into what is commonly known as a system chipset of a computer. However those skilled in the art and others will recognize that a memory controller may be integrated into other hardware components such as the CPU . Thus the architecture of the hardware platform illustrated in is a highly simplified example with a component architecture that should be construed as exemplary and not limiting.

As illustrated in the host computer includes a CPU that is communicatively connected to the memory controller by the bus . Those skilled in the art and others will recognize that the CPU serves as the computational center of the host computer by supporting the execution of program instructions. In this regard an operating system not illustrated causes instructions that are scheduled for execution to be loaded from a storage device e.g. hard drive into the system memory . Then the CPU implements program functionality by sequentially fetching and executing instructions loaded in the system memory . Unfortunately in an infected computer instructions associated with malware may be loaded in the system memory and executed by the CPU . For example as described above application programs designed to identify malware typically rely on services provided by software components e.g. operating system drivers and the like on the host computer to access data from the hardware platform. However malware may intercept calls used to access data on a hardware platform. In this instance application programs designed to identify malware are prevented from accessing data that indicates a computer is infected.

In one exemplary embodiment functionality of the present invention is provided on a hardware device that connects to a host computer through an external port. For example as depicted in the host computer includes the I O interface with an external port that connects the FireWire device to the host computer . In this regard the bus that connects the I O interface and the FireWire device to the memory controller uses a Peer to Peer architecture to transfer data. Similarly the I O interface provides an external port for connecting the USB device to the host computer . In this instance the bus that connects the I O interface and the USB device to the memory controller adheres to a Master Slave architecture in which the memory controller dictates how data flows between the system memory and the USB device . In another embodiment functionality implemented by the present invention is provided on a component that connects to the host computer on an internal connection. For example in the embodiment depicted in the host computer includes a hot swappable hard drive that is connected to the memory controller by the bus .

Generally described aspects of the present invention are directed at determining whether a computer such as the host computer depicted in is infected with malware without using software services on the host computer. More specifically data that may be indicative of malware is directly accessed from the system memory of a host computer without relying on an operating system drivers on the host computer to access the data. As a result malware that implements certain stealth techniques will be detected by the present invention.

Those skilled in the art and others will recognize that is a simplified example of a host computer suitable to provide a device that implements functionality of the present invention with needed data. However actual embodiments of the host computer will have additional components not illustrated in or described in the accompanying text. Thus the component architecture illustrated in should be construed as exemplary and not limiting as aspects of the present invention may be implemented with computers that implement different architectures.

Now with reference to software components that implement aspects of the present invention will be described. In this exemplary embodiment the software components are stored on the FireWire device briefly described above with reference to . However any number of devices may be used to store the software components that interface with a host computer. In any event in the exemplary embodiment depicted in the FireWire device includes a scan engine generic drivers a user interface a processing routine a signature database and an update system .

As illustrated in the FireWire device includes a processing routine . Since different aspects of the processing routine are described below with reference to a detailed description of the routine will not be provided here. However generally described the processing routine manages communication between a device that implements the present invention such as the FireWire device and a host computer. In this regard the processing routine causes requests to be issued from the FireWire device so that data loaded in system memory on the host computer may be obtained. When the requested data is received the processing routine uses other software components on the FireWire device to determine whether the data is characteristic of malware.

As further illustrated in the FireWire device includes a scan engine configured to determine whether incoming data is characteristic of malware. One technique employed by some existing programs to identify malware includes collecting various malware data samples in the wild. Then data from each identified malware is processed with a hash function that converts the data or a characteristic subset of the data into a signature that uniquely identifies the malware. The scan engine illustrated in may employ a technique of scanning data obtained from the system memory of a host computer for a match to signatures that are derived from malware. In this regard signatures of known malware are typically stored in a centralized location such as the signature database . Thus in this embodiment the scan engine compares data loaded in the system memory of a host computer with signatures of malware that are stored from the signature database . However it should be well understood that the techniques used to detect malware described herein should be construed as exemplary and not limiting as the scan engine may employ any one of a number of existing or yet to be developed malware detection techniques.

Since new malware is constantly being created and released on communication networks the scan engine may be updated to detect new malware. In this regard the scan engine includes an update system for obtaining software updates from an anti malware software provider. For example signatures derived from malware may be obtained and stored in the signature database by the update system . However since the functionality for obtaining software updates from an anti malware software are generally known in the art further description of the techniques implemented by the update system will not be provided here.

If a host computer is infected feedback may be provided to indicate that malware was identified. For example the FireWire device illustrated in includes a user interface for communicating with a user. In accordance with one embodiment the user interface employs a light emitting diode LED not illustrated to communicate with a user. For example if malware is identified the user interface causes a LED to emit an indicator that the host computer is infected. However in alternative embodiments the user interface is a graphically based system that provides a user with options in performing searches for malware.

As further illustrated in the FireWire device includes the generic drivers . As mentioned previously software on a host computer is bypassed by aspects of the present invention to determine whether a host computer is infected. Instead the hardware on a host computer is directly accessed by aspects of the present invention to obtain data directly from system memory. In this regard the generic drivers provide a way for the FireWire device and associated software components to directly interface with hardware on a host computer. For example the generic drivers provide a way for the processing routine to interface with a memory controller on a host computer.

Now with reference to the processing routine mentioned briefly with reference to will be described in further detail. However as a preliminary matter the processing routine performs an analysis for malware when a device e.g. the FireWire device that stores the routine is communicatively connected to a host computer. In this regard a communication link suitable to access data in system memory on a host computer will be established so that the processing routine may determine whether a computer is infected.

As illustrated in the processing routine begins at decision block where a determination is made whether a triggering event to perform an analysis for malware occurred. In accordance with one embodiment the processing routine causes data loaded into the system memory of a host computer to be analyzed for malware at regular intervals. For example the processing routine may cause a scan for malware to be performed every second minute hour etc. In this embodiment the triggering event that is identified by the routine at block occurs when the interval between the analysis for malware expires.

In another embodiment a randomly generated triggering event is identified by the processing routine at block . More specifically previously developed software may be used by the routine to cause a host computer to randomly interrupt the current flow of program execution. For example an Advanced Programmable Interrupt Controller APIC included on modern computers may be used by previously developed systems to interrupt program execution at random so that flow of program execution may be routed to the processing routine .

At block the processing routine generates a request to obtain a set of data that is loaded in the system memory of a host computer. More specifically a request is generated and communicated from a device that stores the processing routine to a memory controller that manages access to the host computer s system memory. In response the memory controller accesses the host computer s system memory and communicates the requested data back to the processing routine .

In the embodiment of the processing routine illustrated in the request generated at block is directed at initially obtaining highly relevant data that is most useful in determining whether a host computer is infected with malware. As described in further detail below for a definitive determination regarding the malware state of the host computer additional data may be requested so that a definitive determination can be made. For example some operating systems use various data structures that are stored in the system memory of a host computer to manage the execution of programs. In one embodiment an initial request made at block is directed at obtaining data from areas of system memory that are more significant in performing a scan for malware. For example data stored in areas of system memory known as a disk cache process table service dispatch table and the like will typically be requested at block . However those skilled in the art and others will recognize that other types of data may be obtained at block and the examples provided above should not be construed as exemplary.

It should be well understood that the request generated at block may be configured so that the performance of a host computer is not affected. For example those skilled in the art and others will recognize that access to data in system memory may be granted based on priority. In this regard the processing routine may issue a low priority request for data at block that is satisfied after other higher priority requests. As a result the functionality implemented by the processing routine is performed in the background without interfering in the host computer s ability to execute other programs.

At block the processing routine causes the data obtained from the system memory of a host computer at block to be analyzed for malware. As described with reference to one aspect of the present invention is a scan engine that is configured to determine whether incoming data is characteristic of malware. However since the techniques that may be used by the scan engine at block to determine whether a host computer is infected are described above further description of these techniques will not be provided here.

At decision block a determination is made regarding whether additional data is needed to make a definitive determination regarding whether a host computer is infected with malware. As mentioned previously the processing routine initially requests a set of highly relevant data that is processed by the scan engine at block . In performing the analysis the scan engine may be able to definitively determine that the host computer is either infected or not infected with malware. However the scan engine may not be able to definitively identify the malware state of the host computer with the data that was obtained at block . If additional data is needed the processing routine proceeds back to block and blocks through repeat until a definitive determination regarding the malware state of a host computer is made. Conversely if additional data is not needed the routine proceeds to block described below.

It should be well understood that by obtaining and analyzing the most relevant data first the processing routine minimizes the performance overhead required to determine whether a host computer is infected with malware. For example in some instances substantial amounts of data in the system memory of a host computer may not be processed by the scan engine . However those skilled in the art and others will recognize that the processing routine could be configured differently. For example the processing routine could obtain all of the data loaded in the system memory of a host computer when searching for malware. Thus the embodiment of the processing routine described with reference to should be construed as exemplary and not limiting.

At decision block the processing routine determines whether a host computer is infected with malware. If decision block is reached data loaded and obtained from the system memory of a host computer was sufficient to definitively determine the malware infection state of a host computer. As described previously in one embodiment the scan engine performs an analysis of data obtained from a host computer and forwards the results of the analysis to the processing routine . At block the processing routine uses the results generated by the scan engine to determine whether the host computer is infected. In this regard if a determination is made that the host computer is not infected with malware the processing routine proceeds to block where it terminates. Conversely if a determination is made that the host computer is infected the processing routine proceeds to block .

At block the processing routine provides feedback to a user that indicates a host computer is infected with malware. As mentioned previously a hardware device that implements the present invention may be configured to communicate information to a user. For example the FireWire device illustrated and described above with reference to includes a user interface that may provide feedback which indicates that the host computer is infected at block . As mentioned previously in one embodiment the user interface uses a LED to indicate that a host computer is infected. However other types of feedback may be provided at block to indicate that a malware infection exists.

At block the malware identified on a host computer is disabled and or removed. If block is reached data obtained from the system memory of a host computer was sufficient to definitively determine that the computer is infected. Some malware that are resident in the system memory of a host computer implement self preservation techniques designed to prevent removal of the malware. At block actions designed to disable a malware which may include but are not limited to killing processes deleting files removing entries in configuration files and the like may be performed to disable a malware that performs certain self preservation techniques. Once a malware has been disabled existing software systems may be used to completely remove or disinfect the host computer. Then the processing routine proceeds to block where it terminates.

Now with reference to an embodiment of the present invention in which a secondary computer is configured to determine whether a host computer is infected with malware will be described. In this regard the pictorial depiction in includes the host computer and a secondary computer that are communicatively connected by the direct connection link . Similar to the description provided above any one of the number of existing or yet to be developed protocols may be used to facilitate communication between the host computer and the secondary computer . For example the direct connection link may be a USB connector FireWire connector etc. that connects to external ports provided by the host computer and the secondary computer .

As illustrated in the secondary computer includes a remote detection system with software components that implement aspects of the present invention. More specifically in this embodiment the same software components described with reference to are implemented in the remote detection system e.g. the scan engine with the associated signature database and update system the generic drivers the user interface and the processing routine . Since the functionality implemented by these software components is described above further description of these components will not be described in detail here.

In the embodiment depicted in a standalone software application is installed on the secondary computer so that a user such as system administrator may cause an analysis of the data loaded in the system memory of the host computer to be performed. More specifically the remote detection system may be used to determine whether a malware infection exists on the host computer without using software services provided by the host computer . In this regard data that may be indicative of malware is directly accessed from the system memory without relying on an operating system drivers and the like on the host computer to access the data. As a result malware that implements stealth techniques to corrupt software on the host computer is detected by the remote detection system .

While illustrative embodiments have been illustrated and described it will be appreciated that various changes can be made therein without departing from the spirit and scope of the invention.

