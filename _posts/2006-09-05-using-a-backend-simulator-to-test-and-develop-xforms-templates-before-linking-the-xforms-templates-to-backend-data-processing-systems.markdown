---

title: Using a backend simulator to test and develop xforms templates before linking the xforms templates to backend data processing systems
abstract: A solution for developing XForms projects can bind an XForms template to a backend simulator, during a development or test stage of a software development. The XForms template can be developed by an interface designer, such as a business analyst. The XForms template can be conveyed to remotely located clients. Data instances associated with the XForms template can be received and routed to the backend simulator for processing. An integration code developer can later integrate the XForms templates to a backend server instead of to the backend simulator. Accordingly, the solution accelerates XForms based development projects by decoupling XForms interface development from XForms system integration development, which are typically handled by different people having different skill sets.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07886284&OS=07886284&RS=07886284
owner: International Business Machines Corporation
number: 07886284
owner_city: Armonk
owner_country: US
publication_date: 20060905
---
The present invention relates to the field of XForms technologies and more particularly to using a backend simulator to test and develop XForms templates before linking the XForms templates to backend data processing systems

XForms is a markup language specified by the World Wide Web Consortium W3C that is based upon an Extensible Markup Language XML . XForms separates data logic of a form from its presentation. Data logic is handled by an XForms model and presentation is handled by an XForms user interface. An XForms model holds instance data and associated constraints. Instance data is an internal representation of data of the XForms model. An XForms model can hold more than one data instance. In other words the XForms model defines what a form is what data a form should contain and how the data of a form should be handled.

In XForms presentation is handled by an XForms user interface or other compatible user interface such as a XML user interface configured to interoperate with an XForms model. That is an XForms user interface handles the display and input of data. XForms user interfaces are often referred to as XForms templates. It should be noted that the term XForms template shall be used generically throughout this application to represent any XForms compliant user interface.

An XForms binding mechanism binds an XForms model with a corresponding XForms template. An XForms Submit Protocol defines how XForms send and receive data between an XForms model and an XForms template. The XForms model is also bound to a backend application which receives and processes instance data. Controls in an XForms template are often bound to the XForms model using XPath expressions which can also bind the XForms model to the backend application.

XPath is a language that describes a way to locate and process items in XML documents by using an addressing syntax based on a path through the document s logical structure or hierarchy. XPath also provides basic facilities for manipulation of strings numbers and Booleans. XPath annotations or expressions can be attached to any node in an XForms data instance. Once attached to nodes XPath expressions can provide a framework for supporting calculations specific validations read only data and visibility of controls. Accordingly XPath expressions can be used to validate and otherwise process information input into an XForms template and to process data output to the XForms template.

Current technologies for generating XPath expressions and binding these expressions to controls within an XForms user interface are complex and cumbersome to use. Often form designers lack the programmatic expertise to construct XPath expressions and to integrate them into forms being designed. This usually means that XForms user interfaces are initially designed by a form designer. A programming specialist is needed to construct and integrate XPath validations and other expressions to the user interfaces after initial form design activity has been completed. This process can add substantial time and or cost to a form design effort.

To illustrate a forms designer such as a business analysis can initially develop an XForms template. A programming specialist will write code for the XForms model which includes code that binds the XForms template to the XForms model and code that binds the XForms model to backend applications. The code can include XPath expressions. The XForms project can then be deployed to an XForms server where remotely located clients can utilize the XForms project. Data submitted by the clients is conveyed to the bound backend application even during testing phases. This testing data can be a data integrity risk for an operational system. Many man hours of programmer time can also be consumed searching for and removing test information which was received and processed by the backend applications. Whenever XForms templates are modified corresponding modifications can be required for the XForms model which can require coordination between the forms designer and programming specialist.

The present invention discloses a solution for decoupling XForms template development from XForms model development which permits XForms templates to be tested on devices before binding an XForms project to a backend application. More specifically the present invention permits an XForms template to be temporarily bound to a backend simulator. This binding to the backend simulator can be facilitated by a software development tool. Once an XForms project has been fully developed and tested using the backend simulator a programmatic specialist can construct an XForms model that binds the XForms template to a data instance which is also bound to a real backend application.

The solution can allow a forms designer to iteratively develop and test XForms templates without needing access to backend applications. This prevents the backend applications from becoming corrupted with test data. The solution also permits the forms designer to operate independent of a programmatic specialist responsible for binding the XForms template to backend applications which can save considerable software development time and expenses.

The present invention can be implemented in accordance with numerous aspects consistent with material presented herein. For example one aspect of the present invention can include a method for developing XForms projects. The method can bind an XForms template to a backend simulator during a development or test stage of a software development. The XForms template can be developed by an interface designer such as a business analyst. The XForms template can be conveyed to remotely located clients. Data instances associated with the XForms template can be received and routed to the backend simulator for processing. An integration code developer can later integrate the XForms templates to a backend server instead of to the backend simulator. Accordingly the solution accelerates XForms based development projects by decoupling XForms interface development from XForms system integration development which are typically handled by different people having different skill sets.

Another aspect of the present invention can include a method for developing XForms based software projects. In the method a software development tool can be made available to an interface designer who develops XForms templates. The software development tool can permit developed XForms templates to be automatically bound to a backend simulator without a human software designer creating code specific to the XForms templates. The XForms templates that are bound to the backend simulator can be deployed to an XForms server. The XForms server can route client supplied data associated with the deployed XForms templates to the backend simulator.

Yet another aspect of the present invention can include an XForms software development tool that includes a backend simulator for XForms templates. The backend simulator can be configured to receive and process input from clients using the XForms templates before the XForms templates are bound to a backend server.

It should be noted that various aspects of the invention can be implemented as a program for controlling computing equipment to implement the functions described herein or a program for enabling computing equipment to perform processes corresponding to the steps disclosed herein. This program may be provided by storing the program in a magnetic disk an optical disk a semiconductor memory any other recording medium or can also be provided as a digitally encoded signal conveyed via a carrier wave. The described program can be a single program or can be implemented as multiple subprograms each of which interact within a single computing device or interact in a distributed fashion across a network space.

The method detailed herein can also be a method performed at least in part by a service agent and or a machine manipulated by a service agent in response to a service request.

In system development tools can be used to develop an XForms project. During development an interface designer can create an XForms template which is bound to a backend simulator instead of a backend server . The development tool can automatically create an XForms data instance for the template which is compatible with the backend simulator .

In one embodiment the development tool can permit the designer to include customize software stubs which are designed in a manner compatible with the backend simulator . For example the interface designer can use the stubs to specify data validation and or processing logic that can be used during system development and testing. Ultimately any logic specified in the stubs will be replaced by logic included in XForms model code such as code that contains XPath expressions. The XForms model code can be linked to the backend server and can bind presentation elements in the XForms template to model defined data elements which are in turn bound to the backend server .

The development tool can deploy the XForms template to a forms repository . The forms repository can be accessed by a forms manager of an XForms server . The XForms server can administer or serve one or more XForms to one or more clients . A synchronization channel can be established between XForms server and client . In one configuration the synchronization channel can conform to an XForms Submit Protocol. The client can use client data store that contains client specific form information. Data store can be synchronized with repository during the synchronization process which makes new XForms added to data store since the last synchronization operation available to client . For example XForms template can be conveyed to the client when data store is synchronized with repository .

Client can open the XForms template using a client application such as an XForms compliant browser. A user of client can input requested data into a form and thereafter submit a data instance that includes the input. The data instance can be conveyed to server . XForms server can receive the submitted data and route it to the backend simulator . The backend simulator can process the input and optionally generate a response. The response can be presented within client after being conveyed through server via network .

The interface designer can iteratively alter the XForms template during a testing stage. Each alteration can be linked to the backend simulator and can be presented to client . Once the interface designer is satisfied with the XForms template the integration code developer can design and or modify the XForms model so that the model binds the XForms template elements to data elements and binds the data elements to the backend server. The XForms template bound to the XForms module can be deployed to the forms repository . Thereafter when the client submits a data instance for the XForms template the XForms server can route the data instance to the backend server in accordance with code contained in the XForms module .

Client can include any computing device capable of rendering an XForms compliant document. Since the XForms language is specifically designed to bifurcate data presentation from data logic the XForms presentation or XForms template can be one specifically tailored to the capabilities of client . For example different XForms interfaces can be used for a client which is a personal data assistant PDA or a smart phone than for a client which is a desktop computer. Each of the specifically tailored templates can be developed and tested by the interface designer without requiring a level of interaction between the designer and developer that is needed for an XForms development system which lacks the backend simulator .

Repository and data store can be physically implemented within any type of hardware including but not limited to a magnetic disk an optical disk a semiconductor memory a digitally encoded plastic memory a holographic memory or any other recording medium. Each of repository and data store can be stand alone storage units as well as a storage unit formed from a plurality of physical devices which may be remotely located from one another. Additionally information can be stored within each of repository and data store in a variety of manners. For example information can be stored within a database structure or can be stored within one or more files of a file storage system where each file may or may not be indexed for information searching purposes.

Network can be used to communicatively link different components of system to one another. Network can include any hardware software and firmware necessary to convey data encoded within carrier waves. Network can include one or more personal area network PAN local area network LAN metropolitan area network MAN wide area network WAN virtual private network VPN and the like. Network can also include local components and data pathways necessary for communications to be exchanged among computing device components and between integrated device components and peripheral devices. The network can include line based and or wireless communication pathways.

GUI can include a section that provides a user selectable option for a backend data source. Section can permit an interface designer to utilize a development mode which binds an XForms template to a backend simulator component or to select an operational mode where an XForms model can be linked to the XForms template. In the operational mode a user can specify a data file for the XForms model which is to be associated with the XForms template.

In one embodiment a user can specify various data settings that are to be used when operating in the development mode. These settings can adjust the behavior of the background simulator to approximate behavior which will be experienced when the XForms template is associated with the XForms model. For example a designer can configure an input driver which can be used to perform input validation operations. An output driver can be configured to simulate output that a backend server generates when an XForms model is used instead of the backend simulator. Further data logic can be configured for the backend simulator to simulate logic of the backend server.

In a particular embodiment GUI can be part of an integrated design tool which an integration code developer uses to develop the XForms model and to link the model to the XForms template. Then settings provided by the form designer and used for testing the XForms template can be automatically applied by the development tool to the XForms model. That is XForms model code can be automatically generated which can be further edited by the code developer based upon the settings which can save the code developer time and can ensure the operational XForms template behaves in a tested manner after integration with the XForms model occurs.

GUI can optionally include a visual development environment for designing XForms. For example GUI can represent an interface of INTERNATIONAL BUSINESS MACHINE CORPORATION s IBM s VISUAL XFORMS DESIGNER for ECLIPSE. The visual interface can include a palette of template elements that can be placed upon a development canvas . In one embodiment numerous device emulators can be selected. Canvas properties can be adjusted in accordance with properties of the emulated device. For example a designer can select an emulator for Device ABC which causes the properties of canvas to match those of the emulated device. Thus different mobile telephones desktops embedded devices and other interfaces can be selected by the template designer depending upon a target presentation platform of the template being created. Various canvas views can be selected for GUI such as a GUI design view an XForms code view and an interactive preview.

It should be appreciated that the GUI is provided for illustrative purposes only and that the invention can be implemented in any of a variety of ways other than those illustrated in GUI . Use of alternative and derivative display elements input field types menus tabs windows and the like are contemplated herein. Additionally although a graphical interface is shown the concepts expressed by GUI can be implemented within an interactive speech interface a multimodal interface a three dimensional interface and the like by one of ordinary skill in the art without undue experimentation using techniques known in the art.

Method can begin in step where an XForms template can be created using a software development tool. The XForms template can be a template created by a business analyst or GUI developer. The template can be automatically mapped to a backend simulation component which is used in lieu of an XForms model which may not yet be implemented. In step the XForms template can be conveyed to an XForms server. In step the XForms server can place the XForms template in a forms repository. In step a remotely located forms client can obtain the XForms template from the forms repository.

In step the client can present the XForms template to a user. The presentation can utilize an XForms compliant client application from which a user selects the XForms template. In step a user can supply information for data fields of the presented XForms. In step the client can optionally validate the user supplied data. In one embodiment validation can be performed based upon settings established using the software development tool. In step after the optional validation a form data instance that includes the user supplied data can be sent from the XForms client to the XForms server.

In step the XForms server can receive the data instance and can route the data instance to the backend simulator. In step the backend simulator can process the data instance. In step processing results can be sent to the XForms server. In step the XForms server can take suitable actions responsive to the processed data. For example the XForms server can send a new form to the client that includes data processing results.

In step the method can determine whether additional user input for the XForms is available. If so the method can loop to step where the user can supply the information to the client which validates the user information and conveys it to the XForms server. When no additional user input is available the method can progress to step where a check for a different XForms template can be performed. If a user of the client has attempted to obtain a different XForms template the method can loop to step where the user can select a different template from the repository.

Otherwise the method can progress to step where a template designer may change the XForms template. For example if the interface designer is unsatisfied with a manner in which the XForms template was presented in the client the designer can make a change to correct a perceived deficiency. If a change is made the method can loop from step to step where the modified XForms template can be conveyed to the XForms server.

If no change is to be made to the XForms template it can be assumed that the template behaved in a desired manner when tested upon the XForms client which can end the development and or initial testing phase for an XForms project. The next phase can include mapping the XForms template to an operational backend system. In step a decision can be made as to whether the backend simulator is to be replaced with an XForms model. If not the method can proceed to step where additional testing or development efforts can be performed using the XForms template that is linked to the backend simulator. If the replacement is to occur in step the real data source can be coupled to the Form Template in place of the backend simulator as shown by step . Either way any change to the XForms project can be conveyed to the XForms server as shown by the method looping from steps and back to step .

Method can begin in step when a customer initiates a service request. The service request can be a request for a service agent to install an XForms development tool which has a backend simulator capability. The service request can also be a request to troubleshoot an existing system to train personnel to use a software development system and the like. In step a human agent can be selected to respond to the service request. In step the human agent can analyze a customer s current system and information needs and can develop a solution. In step the agent can implement the solution. For example the human agent can update a customer s software development system to a more recent version than that which the customer previously used. In step the human agent can complete service activities for the service request.

It should be noted that while the human agent may physically travel to a location local to adjust the customer s computer or application server physical travel may be unnecessary. For example the human agent can use a remote software agent to remotely manipulate the customer s computer system.

The present invention may be realized in hardware software or a combination of hardware and software. The present invention may be realized in a centralized fashion in one computer system or in a distributed fashion where different elements are spread across several interconnected computer systems. Any kind of computer system or other apparatus adapted for carrying out the methods described herein is suited. A typical combination of hardware and software may be a general purpose computer system with a computer program that when being loaded and executed controls the computer system such that it carries out the methods described herein.

The present invention also may be embedded in a computer program product which comprises all the features enabling the implementation of the methods described herein and which when loaded in a computer system is able to carry out these methods. Computer program in the present context means any expression in any language code or notation of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following a conversion to another language code or notation b reproduction in a different material form.

