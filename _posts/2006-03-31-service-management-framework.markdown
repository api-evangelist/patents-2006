---

title: Service management framework
abstract: Articles and associated methods, systems, and computer program products relate to a service framework to register multiple plug-ins on a client and to provide access to functionality that would otherwise be unavailable to a user until they logged-in. One plug-in module enables an unauthenticated user to interact with a server to initiate a password reset feature from a secure desktop environment on the client. Another plug-in module enables a user to reset cached credentials on a remote client when requesting a password reset from outside of the server's local network. In some implementations, a server may authenticate the user by issuing challenge questions and monitoring the user's responses. A variety of other services may be provided as plug-ins to the client framework. A library of plug-ins may be stored on the server. The server may select plug-ins to send to each client based upon criteria according to business rules.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07930735&OS=07930735&RS=07930735
owner: Hewlett-Packard Development Company, L.P.
number: 07930735
owner_city: Houston
owner_country: US
publication_date: 20060331
---
Various implementations may relate generally to a framework for services in a client server environment and particular implementations may relate to methods for providing services to interact with unauthenticated users from a secure desktop environment.

As computing networks have increased in capabilities and features user demand for access to such networks has grown. In addition network users may have diverse roles and each role may call for different types of access to application software and data. For example users on a typical corporate network may include accountants engineers managers marketing staff and administrative staff.

Some organizations use computing networks that are structured according to a client server model. Clients are typically computer workstations or computer terminals that connect to a central server to provide access to users at various points along the network. Some clients may be remote and may access the network and thus the server either through a dedicated line or through other networks such as the public switched telephone network or the Internet for example. One or more servers on the network may communicate with client workstations to provide access to various applications software data or other information.

Furthermore some client server networks allow users to access information from clients at local or remote locations. Moreover such networks may simplify network administration and information management. For example information may generally be easier to manage e.g. back up from a centralized server than from a large number of client devices.

Network users may need to access some application software that is common to some or all other users. Typically all network users may be provided access to basic word processing software to access and to edit documents email software for communication and a web browser for accessing an intranet or the Internet.

However access to certain software applications and or data may be restricted to certain user groups or according to each user s role. For example accountants may have exclusive access to certain financial data and to accounting software for payroll billing and operational financing functions. Upper level managers and network administrators may have access rights to substantially all data available on the network but may not have ready access to certain software applications such as engineering drawing or simulation software.

Access to the network may be determined by the information a user provides to authenticate the user s identity to the network. Typical user authentication procedures call for the user to enter a user name and a password to log on to the network from a client workstation on the network. The server may check the user name and password against stored authentication information to determine whether to allow the user to access the network. In some cases the server may further determine an authorized role for the user and may also set up an appropriate configuration profile and access privileges based upon the user s identifying information and authorized role.

Articles and associated methods systems and computer program products relate to a service framework to register multiple plug ins on a client and to provide access to functionality that would otherwise be unavailable to a user until they logged in. One plug in module enables an unauthenticated user to interact with a server to initiate a password reset feature from a secure desktop environment on the client. Another plug in module enables a user to reset cached credentials on a remote client when requesting a password reset from outside of the server s local network. In some implementations a server may authenticate the user by issuing challenge questions and monitoring the user s responses. A variety of other services may be provided as plug ins to the client framework. A library of plug ins may be stored on the server. The server may select plug ins to send to each client based upon criteria according to business rules.

Some implementations may provide one or more advantages. For example some implementations provide for resetting cached credentials for remote and or telecommuting users so that remote users can log into their machines after a password reset without returning to the office to directly connect to the network. Solution provider costs may be reduced by reducing the amount of support calls to the help desk and resources needed to support such calls. Some implementations may be used to synchronize passwords across multiple systems. Furthermore some framework implementations may be adapted or scaled to provide additional administrative functions such as enterprise wide password resets for example. Some implementations provide a method to communicate with an unauthenticated user. Implementing services using this framework would increase reliability and security improve customer satisfaction while reducing the costs associated with delivering these services.

The details of one or more implementations of the invention are set forth in the accompanying drawings and the description below. Other features of the invention will be apparent from the description and drawings and from the claims.

The server device also includes a web service a module loader an application manager a database manager and a security manager . The web service provides an interface to users of the client device such as in the form of web pages using the Hypertext Transfer Protocol HTTP . The web service may also distribute the code modules to the client device such as via HTTP and the Secure Sockets Layer SSL and or the Transport Layer Security TLS . The module loader may manage registrations and status of third party plug in modules e.g. password reset plug in such as client or operating system specific password reset plug ins.

An application manager may cooperate with the module loader and may select code modules from the code module library to install on the client device . The application manager may base its selection on identifying information sent from the client device to the server device and or it may use the identifying information together with module criteria contained in a repository to select code modules to be sent to the client device and registered with the client framework .

The module criteria may provide various criteria for selecting code modules to load into the client framework on an individual client groups or clusters of selected clients or to all networked client devices. Some selection criteria may base module selection at least in part on an operating system being run by each client device including type supplier version and any installed patches for example. Some other selection criteria may consider type version and capability of available memory hardware or software running on the client. Still other criteria may base module selection on each user s role e.g. accountant CEO line manager engineer marketing human resources etc. . The role associated with each user authenticated to the server or to the operating system on the client may determine what package of modules if any are sent to be registered with the client framework . These and or other similar criteria may be combined to select code modules.

For example the code module library may contain code modules customized based on the language of the users at the client device . The identifying information may determine the geographic location and languages used at the client device . The module criteria may include the code modules associated with the geographic location and languages used at the client device . In another example each geographic location may be associated with a particular server device from which to download code modules. The module loader may direct the client device to the appropriate server device based on its geographic location e.g. building business group IP address e.g. subnet or other parameters taken singly or in combination. The database manager may provide access to the repository . The security manager may verify the authenticity of connections made to the web service .

The client device includes a start up service a client framework a security manager and a loader module within a memory . The client device also includes a processor capable of running an operating system e.g. the Windows operating system from Microsoft Corporation of Washington processing instructions stored in the memory or on a storage device. The start up service may initiate the code modules designated to operate at the client device . The start up service may also contact the module loader to receive new or updated code modules or to remove code modules from the client device . The security manager may verify the authenticity of code modules received from the server device such as by the use of a cyclic redundancy check CRC . The module loader may perform operations on the client that are similar to the operations the module loader performs on the server . The client framework provides basic services to the code modules . The client framework may be for example an application program interface API providing functions such as encryption and decryption of information sent via the network logging of messages and access to a security desktop on which the user may be presented with a login to the client device . The client device includes one or more input output I O devices . The I O devices may include for example a display where the client device presents a user interface to the user such as the security desktop display i.e. login screen an example of which is described in further detail with reference to .

Code module A may be for example a password reset module that allows a user to reset his or her network password using the client device without logging into the operating system of the client device . The code module A may present a user interface element to the user on the security desktop display that allows the user to initiate the password reset process. An application at the server device such as the web service or the security manager may perform operations to authenticate the user and or the request to reset the password. The web service or a module accessible by the web service may reset the user s password within a directory service . In some implementations the system includes additional directories where the web service may reset additional passwords of the user such as a password within a backup directory service or a password for separate network.

Code module B may be a module that tracks system properties of the client device such as physical and or virtual memory usage hard disk usage applications installed and application usage. When installed and operating at the client device the code module B may report the system properties of the client device to a central location such as the server device for storage and or processing. In some implementations a user may view the system properties using the client device without logging into the client device .

Code module C may be a ticker service that collects stores retrieves processes and or displays information. For example a ticker service may display information about network service status including outages estimated time remaining until outages are removed and services are brought back on line estimated repair times. One of ordinary skill in the art will recognize other information that can be displayed using such a ticker service.

In this example the information repository in the server further includes a challenge response database . The challenge response database may contain questions and answers that may be used to verify the identity of an unauthenticated user via the password reset code module A for example that is loaded on the client and containing instructions to provide that functionality. In other implementations the database may be outside the server such as on one or more data storage devices that can be accessed by the server via the network . Examples of implementations for accessing the challenge response database are described in further detail with reference to and .

The system also includes administration client device . From the admin client device and IT or network administrator for example may monitor utilization of various elements of the framework and infrastructure on the client s the server as well as other auxiliary components in the system . The device may provide capabilities to control operation of the framework for example on any or all client devices operated on the network . In various examples which are illustrative and not limiting the device may be used to maintain define or amend business rules perform application management and or accomplish deployments of plug ins in the system .

When client device is remote from the local network and the directory service or otherwise connected for example outside of a firewall not shown provided between the network and the external network the client device may operate using cached credentials . The cached credentials may contain network logins and passwords that have previously been used at the client device to authenticate to the directory service or the additional directories . While the client device is operated remotely with respect to the network the cached credentials may be used to login to the client device .

To initiate a password reset while operating remotely the user may activate the code module A on the client device . The code module A may reset the cached credentials in the memory of the client device for example by appropriately reconfiguring pointers in memory. The code module A may use for example a login and password provided by the server device or the user of the client device when resetting the cached credentials. An exemplary method for resetting cached credentials is described in further detail with reference to .

The method begins at step when the client framework is activated. The start up service for example may activate or otherwise provide access to the client framework . In some implementations the start up service may be initiated automatically when then the client device is turned on and no user is authenticated to the operating system of the client .

At step identifying information is sent from the client device to the server device . In some implementations the client framework may perform the operation of sending the identifying information. The identifying information may include for example the name of the client device and or the name of the user operating the client device . The server device receives at step the identifying information.

If at step the server device determines that the client device is allowed to access the code module library then the server device selects the module criteria based on the identifying information at step . In some implementations the web service may perform the determination and the selection. The module criteria include business rules governing the distribution of the code modules to particular client devices. The business rules may use a business role of the users at the client device to determine code modules to be installed updated or removed at the client device . For example a client device operated by a user who is not a network administrator may not include the server device administration code module while a client device operated by a system administrator may include the server device administration code module.

The server device selects at step one or more of the code modules based on the selected module criteria . In some implementations the application manager may perform the selection in cooperation with the database manager which may provide access to the module criteria in the repository .

The server device sends at step the one or more selected code modules to the client device . The server device may send the code modules via the web service . At step the client device receives the selected code modules.

If at step the client device determines that the received code modules are valid then the client device installs the received code modules at step . Determining that the code modules are valid may include operations such as decrypting the received code modules performing a CRC cyclical redundancy check on the received code modules and or verifying a digital signature submitted with the received code modules.

If at step the received code modules are not valid or if at step the client is not valid then at step the method may either continue or end. If for example updates have been made to the code module library and or the module criteria then step is repeated. Otherwise the method ends.

After a code module such as the password reset code module A has been registered with the client framework it may be made available to a user of the client . shows an example user interface that the password interface module A may send for display to a display device of the I O devices .

In this example the interface includes a login screen sometimes referred to as a security desktop provided by an operating system such as the UNIX Linux Mac OS or Windows operating systems for example. The interface includes a user name input field and a password input field . The user name input field and the password input field may be provided for authenticating a user to the operating system on the client . The fields and may allow the user to gain access to the computer for example to view files or run applications over the network .

In this example the interface also includes a password reset selection input control which may be provided by the password reset code module A for example. If the user has forgotten his or her password the user may select the input control to initiate the password reset process. The password reset code module A may perform operations to reset the user s password in cooperation with the server device . For example the password reset process may include steps to verify the identity of the user by sending questions in the challenge response database for display not shown on the interface . In some implementations the code module A can operate within the client framework to enable a user who is not authenticated to the operating system on the client to interact with the server to verify the user s identity from the security desktop.

In this example the code module may be activated by the client framework at step in response to a user sending a request to reset the password to the server via the external network . The server receives the request to reset the password at step retrieves challenge response questions and answers from the challenge response database at step and sends one or more of the questions to the client at step .

At step the client receives the question s and the processor sends the received question s for display on the I O device at step . Then at step the processor receives answer s as user input s via keyboard key pad touch screen mouse touch pen or stylus voice command or other user input mechanism and then sends the answer s at step .

At step the server receives the answers sent by the client and determines whether the answer s are correct at step . If the answer s are not correct then the method ends. However if the answer s are correct then the server resets the user s password at step and sends the new password to the client at step . When the client receives the new password at step the code module operates to refresh the cached credentials . The cached credentials may be refreshed for example by processes that may include manipulating pointers in the memory of the client device . Then the method ends.

In other examples the example method may be modified for example by repeating steps including more than once to provide multiple challenge questions and receive multiple answers.

In other implementations other identification methods may supplement or be substituted for challenge response questions. For example the code module may operate to transmit biometric data e.g. voice print thumb print retinal scan from the client to the server for user verification. Hardware keys may be used in some implementations to verify the identity of a user and so that the server will send an authorization to the code module to reset cached credentials.

Other implementations of the above methods may perform the steps in different sequence or in a modified arrangement to achieve the same primary functions which include providing a client framework to support a plurality of code modules including code modules to permit an unauthenticated user to reset a password from a secure desktop and or to reset cached credentials on a remote client.

In some implementations the client framework may be configured to retain certain modules locally e.g. on the local hard drive at the client for example if the expected user or role of that user at that particular client workstation is well known. In some other implementations the client framework may retain certain identified code modules after an authenticated user logs out but may restrict or deny access to some or all of the code modules to subsequent users of the client . In some other implementations the client framework may be configured to effectively render the previously loaded code modules inaccessible after an authenticated user logs out.

In various implementations plug in modules range in application from Password Reset to Informational modules designed to communicate outages to the client. In one implementation plug ins to be download are determined at least in part by workstation demographic information. In various illustrative examples demographic information may include a user s authorized role s e.g. CFO engineer project manager accountant . This allows the services to determine which plug ins are appropriate for which client s workstation. This can provide a great deal of flexibility in some applications and may increase the types and numbers of applications that can be delivered. For example if a location has a limited available bandwidth e.g. fractional T 1 line ISDN or dial up connection that may be allocated to support framework service information e.g. plug in updates then the plug ins made available to that location may be limited in size number type priority level and or maintenance interval.

In various implementations an architecture for a service management framework SMF provides for services among at least one client and at least one server on a network. The SMF architecture is adaptable to provide distributed access that allows for servers to be distributed geographically. Such distributed access may reduce network impact and provide fast connectivity to the clients for example by allowing clients to connect to the closest server. While reducing network traffic this architecture may provide inherent redundancy and load balancing capabilities in some implementations. In an example the SMF infrastructure may include at least one server per geographical region e.g. state country region and a master server based on a continent such as for example North America.

The SMF Server may support web services to the SMF client which may in turn provide the client with functionality to use Plug In modules. The SMF may provide for example Cryptography Logging and Administration.

Plug In Modules management functions may be handled by the SMF client the SMF server or both in combination. In some implementations the SMF client may manage downloaded plug ins and may further only download newer versions when required. Newer versions may be pushed to clients for example upon identifying down level version when the server checks version status when the client initially contacts the server. If a new plug in has been loaded into the library for example a schedule may define which individual groups or all clients will receive the update. In some embodiments the updates may be automatically pushed to clients as clients contact the server and or by a specified time defined by an administrator. In other embodiments updates may be pushed out to clients as bandwidth permits or immediately e.g. as quickly as practicable . The SMF server may manage all Plug In modules via the code module library . The SMF server may also manage all plug ins and only allow downloads when the SMF client meets the business logic associated with that plug in.

When sending requests to the web service the client may include machine identification information in the request. The client may then receive one or more plug in modules and load them into memory to provide services to the client. The client may also be able to unload plug in modules.

The server may provide the client framework with a plug in library of available services and the business logic for those service s distribution rules. The Plug in library may interface and manage Plug In modules via the interface provided by the Plug In Framework. The SMF Server may interact with the Plug In Library via its supplied interface.

The server side plug in manager may provide access to the appropriate plug in s in the plug in library based on business rules managed through active directory groups locations organization units or the like. The client may provide the workstation s identification as part of the request for plug in s to the web service. A master server based in North America for example may be a single source of updates and may push updates to the remaining regional servers as required.

Encryption may be incorporated in various implementations. For example the client may connect to the services via HTTPS certificates may be required on each of the servers to allow for HTTPS SSL level connections to at least some clients and or authenticated users. In further implementations the Plug In modules may connect to services via HTTPS and or at least some data transferred among clients and or servers may be double encrypted using one or more selected cryptography algorithms.

Plug in authenticity may be established by CRC checking the downloaded modules against embedded CRCs. Each of the components should be able to validate itself to another component via an API call.

Some implementations may provide Version Control which may include automated version control. For example at least some client updates may be performed by the SMF Services. Each component may be updated at the time of initial connection. In particular client updates may be performed by the SMF Web Service and version updates may be performed at the server . Updates may be performed at times other than initial connection such as at scheduled intervals and or in response to a request from a user or an administrator.

Administration for the SMF may be provided at least in part by the SMF server which in various implementations may provide administration for the web services Plug in library and Business logic for Plug in distribution for example.

The SMF client may feature scalability that provides substantial flexibility. Flexibility may be provided by self version control by which the client may keep itself current. Flexibility may also be achieved by Plug in modules that enable the client to add and remove functionality based on the services. Scalability may further be achieved through implementations having a distributed design. In a distributed design for example any practical number of clients may be added to the system by adding additional services servers as needed to distribute the load. Additional flexibility may be achieved by allowing the web services to be easily expanded and by making the database simple to scale. Flexibility may also be achieved by Plug ins which may give the client the ability to add and remove functionality based on the business logic.

In various implementations the client framework may have no user interaction all user interaction may be handled by the plug in s . The SMF Plug in may have user interaction via the Login desktop.

In some implementations the SMF Server may have user interaction via the Administration console through an interface on the administration client device . Other interaction may be done directly with the SMF Client via a SMF client server interface.

The SMF Client may be designed to run on various Windows platforms. Windows products are commercially available from Microsoft Corporation of Redmond Wash. The SMF Client may also utilize minimal CPU resources.

The SMF Plug In may be designed according to the Plug In design specifications the Plug In framework may be capable of running on the Windows NT 4.0 platform or above . The SMF Server may be designed to run on Windows 2000 Server or above platforms. Some implementations may operate other clients servers and operating systems such as Linux Solaris or Mac OS for example.

Increasing calls to the helpdesk for password reset status and other issues continue to drive up the cost of delivering service. Various implementations described herein may significantly reduce the resources and expenses related to such support.

In some implementations the concept of the framework provides a method of interacting with unauthenticated users from the Windows Security Desktop to provide access to functionality that would otherwise be un available to a user until they logged in to the client. The framework provides a flexible method for implementing services that may divert a substantial number of calls from the helpdesks while providing secure robust services at a lower cost.

In some implementations the client framework is included in a client server based solution that securely provides access to services that would normally only be available to a user who has authenticated to a client workstation. These services are available to the user from the Windows security desktop. The module loader provides a secure shell in which to download and launch the latest set of plug ins available on the server. The Loader module negotiates a secure session with the server to determine what modules are required. Then downloads the encrypted plug ins decrypts the plug ins checks their authenticity and loads the plug ins into memory.

In some implementations the Service Management Framework SMF client provides a method of interacting with unauthenticated users from the Windows Security Desktop. This client may provide access to functionality to a user who is not authenticated i.e. logged in to the client workstation. The SMF client provides a flexible method of communicating with SMF management services that may allow network administrators for example to provide secure robust services to the client that may reduce calls requesting support from a helpdesk.

The Service Management Framework SMF Plug In may be developed using the SMF Plug in Framework which may provide easy access to the interfaces provided by the SMF for security monitoring and loading unloading Plug In s . The Plug In Framework allows the SMF to look inside the Plug In and actually control it.

In some implementations substantially all SMF components may communicate using SSL layer encryption e.g. HTTPS and or messages in formats such as XML may be encrypted.

In some implementations the client service may include plug in modules to parse messages in formats such as XML HTML or other formats or protocols which may include custom message formats and or protocols provide its own version management and or update itself to the newest version when necessary. In further implementations the client service may provide plug ins to check the framework version update the framework and or authenticate the framework by for example checking CRC information. In still further implementations the client service may provide plug in modules to load and execute the Framework and or to provide login desktop handles. In yet further implementations the Client server may include plug in modules to request and locally store primary and secondary URL s from the server for regional local web server and or to collect and submit computer domain an IP information from local pc to a Web Service. In illustrative embodiments computer information may be collected according to a schedule e.g. hourly daily weekly bi monthly etc. . . . and the collected information may be used to provide a snapshot to identify ways to improve system performance utilization etc. . . . and forecast needs for updates maintenance and the like. For example CPU utilization and available disk space may be monitored by a service that launches an application to clean and or defragment a hard drive if certain predefined conditions or thresholds have been exceeded.

In some implementations the client framework provides a security mechanism in conjunction with SSL i.e. triple des encryption and or provide at least a minimal API for Plug in developers to utilize the framework security and logging services. Security may be flexibly applied according to the security requirements for the network environment. For example password resets and military communications may be configured to receive more robust encryption than routine communications in a typical commercial network environment.

In some implementations a Plug In Manager on the client may support the standard cryptography algorithm be able to parse messages in XML or other format launch and manage plug in s as required provide a Thread Engine monitor all Plug in modules using the standard Plug in framework monitoring API provide the Identification of the local machine and or provide Local Logging.

In some implementations a Plug In Framework on the client may provide a standard API application programming interface for custom plug in development. For example such an API may provide interfaces and associated structure for passing data for custom or canned plug ins to perform functions such as monitoring e.g. PC system information and security e.g. encryption decryption information . In further implementations the client plug in framework includes support for the standard cryptography algorithm and support for loading plug in modules on multiple desktops. In some examples a framework may provide error logging functions that can be accessed by custom plug in modules.

In some implementations a Plug In Library on the client may provide a Thread Engine to manage multiple requests an interface to support interaction with the SMF and a management module to manage the plug ins and business logic associated with the plug in modules which business logic may provide rules to determine which clients get what plug ins for example.

In various implementations the server framework is a solution that may securely provide the client framework with access to the plug in library via cryptography and secure hyper text transfer protocol https or other suitable transfer protocol. The server framework may distribute the plug in s necessary for each client based on business logic.

In some implementations the web service may support various encryption algorithms multiple plug ins e.g. in the code module library and or configurable business rules for plug in distribution. In some further implementations the web service may integrate with active directory log substantially all activity which may include at least some network activity and or at least some service management framework activity and or be able to parse XML for example. In some further implementations the Web service may provide primary and secondary URLs to a client upon request based on domain subnet and or other criteria.

Some implementations may provide access to services or applications to unauthenticated users from the Windows Security Desktop Login Screen . These services may vary in type but would be accessible to the user prior to login to a workstation. A high degree of security may be achieved by implementing standard proven encryption mechanisms in combination with the use of randomly generated public and private keys along with SSL. This helps to ensure that valid plug ins are downloaded and installed from the server.

In an illustrative example an implementation may provide for an unauthenticated user at a client terminal to access services for which access is normally denied to users who are not unauthenticated to an operating system running on the client. For example an unauthenticated user may communicate with the client a server or other resources e.g. other clients servers gateways etc. . . . available on a network. Unauthenticated users may normally be limited to interacting with a username password interface on the login screen. In some embodiments substantially no other services may be provided to an unauthenticated user who does not activate a plug in module on a client framework.

In another illustrative example an unauthenticated user at a login screen of a client device may make one or more user inputs that are received and processed by a service framework running on the client. In some cases the framework may be configured to register one or more plug in modules which may be received from a server for example. Some user inputs such as a control sequence e.g. ctrl alt key or a user input to activate a user input control e.g. radio button displayed on the login screen may activate a selected plug in module or service that is registered with the service framework running on that client. When activated by such user input one or more plug in modules may be activated from a secure desktop environment to provide access to certain services for which access is normally denied to unauthenticated users. The services may include processes that are run on the client the server or both in combination.

An example of a service that may be performed includes an audio input output service such as an audio interactive helpdesk which may be automated and provide the unauthorized user with voice music alarms or other audible information. Another example of a service that may be performed includes sending receiving video information which may be sent for display in part or all of a display device at the client. In some embodiments voice and audio may be combined and may provide one or two way communication of audio and or video content. For example a suitably configured client device may be used to send and or receive any available combination of text graphics video and or audio. User authentication information may be provided to a client and or server. For example voice print data retinal or fingerprint images and or verbal data may be sent for analysis and processing by recognition software running on the client the server or a combination of these.

Some implementations of the invention may be implemented in a computer system. For example various implementations may include digital and or analog circuitry computer hardware firmware software or combinations thereof. Apparatus can be implemented in a computer program product tangibly embodied in an information carrier e.g. in a machine readable storage device or in a propagated signal for execution by a programmable processor and methods can be performed by a programmable processor executing a program of instructions to perform functions of the invention by operating on input data and generating an output. The invention can be implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from and to transmit data and instructions to a data storage system at least one input device and or at least one output device. A computer program is a set of instructions that can be used directly or indirectly in a computer to perform a certain activity or bring about a certain result. A computer program can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment.

Suitable processors for the execution of a program of instructions include by way of example both general and special purpose microprocessors which may include a single processor or one of multiple processors of any kind of computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memories for storing instructions and data. Generally a computer will also include or be operatively coupled to communicate with one or more mass storage devices for storing data files such devices include magnetic disks such as internal hard disks and removable disks magneto optical disks and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices such as EPROM EEPROM and flash memory devices magnetic disks such as internal hard disks and removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in ASICs application specific integrated circuits .

In some implementations one or more user interface features may be custom configured to perform specific functions. The invention may be implemented in a computer system that includes a graphical user interface and or an Internet browser. To provide for interaction with a user some implementations may be implemented on a computer having a display device such as a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user a keyboard and a pointing device such as a mouse or a trackball by which the user can provide input to the computer.

In various implementations clients and or servers may communicate using suitable communication methods equipment and techniques. For example the flash memory controller may send or receive messages over a bus and or using point to point communication in which a message is transported directly from the source to the receiver over a dedicated physical link e.g. fiber optic link point to point wiring and daisy chain . The components of the system may exchange information by any form or medium of analog or digital data communication including packet based messages on a communication network. Examples of communication networks include e.g. a LAN local area network a WAN wide area network MAN metropolitan area network wireless and or optical networks and the computers and networks forming the Internet. Other implementations may transport messages at least in part over an air link by broadcasting to all or substantially all devices that are coupled together by one or more interconnected communication networks for example by using omni directional radio frequency RF signals. Still other implementations may transport messages characterized by high directivity such as RF signals transmitted using directional i.e. narrow beam antennas or infrared signals that may optionally be used with focusing optics. Still other implementations are possible using appropriate interfaces and protocols such as by way of example and not intended to be limiting USB 2.0 Firewire ATA IDE RS 232 RS 422 RS 485 802.11 a b g Wi Fi Ethernet IrDA FDDI fiber distributed data interface token ring networks or multiplexing techniques based on frequency time or code division. Some implementations may optionally incorporate features such as error checking and correction ECC for data integrity or security measures such as encryption e.g. WEP and password protection.

In some implementations each of multiple clients or each of multiple servers for example may be programmed with substantially the same information and be initialized with substantially identical information stored in non volatile memory. In other implementations one or more clients and or servers may be custom configured to perform specific functions. For example one client device may be configured to perform client status checks and or performance testing. Such testing may be performed at intervals e.g. which may be user selected or according to a regular maintenance schedule.

A number of implementations of the invention have been described. Nevertheless it will be understood that various modifications may be made without departing from the spirit and scope of the invention. For example advantageous results may be achieved if the steps of the disclosed techniques were performed in a different sequence if components in the disclosed systems were combined in a different manner or if the components were replaced or supplemented by other components. The functions and processes including algorithms may be performed in hardware software or a combination thereof and some implementations may be performed on modules or hardware not identical to those described. Accordingly other implementations are within the scope of the following claims.

