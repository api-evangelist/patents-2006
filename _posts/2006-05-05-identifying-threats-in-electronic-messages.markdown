---

title: Identifying threats in electronic messages
abstract: Early detection of computer viruses and other message-borne threats is provided by applying heuristic tests to message content and examining sender reputation information when no virus signature information is available. As a result, a messaging gateway can suspend delivery of messages early in a virus outbreak, providing sufficient time for updating an anti-virus checker that can strip virus code from the messages. A dynamic and flexible threat quarantine queue is provided with a variety of exit criteria and exit actions that permits early release of messages in other than first in, first-out order. A message scanning method is described in which early exit from parsing and scanning can occur by matching threat rules only to selected message elements and stopping rule matching as soon as a match on one message element exceeds a threat threshold.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07854007&OS=07854007&RS=07854007
owner: Ironport Systems, Inc.
number: 07854007
owner_city: San Bruno
owner_country: US
publication_date: 20060505
---
This application claims benefit of Provisional Appln. 60 678 391 filed May 5 2005 the entire contents of which is hereby incorporated by reference as if fully set forth herein under 35 U.S.C. 119 e .

The present invention generally relates to detecting threats in electronic messages such as computer viruses spam and phishing attacks. The invention relates more specifically to techniques for responding to new occurrences of threats in electronic messages managing a quarantine queue of threat bearing messages and scanning messages for threats.

The approaches described in this section could be pursued but are not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated herein the approaches described in this section are not prior art to the claims in this application and are not admitted to be prior art by inclusion in this section.

The recurring outbreak of message borne viruses in computers linked to public networks has become a serious problem especially for business enterprises with large private networks. Direct and indirect costs of thousands of dollars may arise from wasted employee productivity capital investment to buy additional hardware and software lost information because many viruses destroy files on shared directories and violation of privacy and confidentiality because many viruses attach and send random files from a user s computer.

Further damage from viruses occurs over a very short time period. A very high percentage of machines in an enterprise network can be infected between the time that the virus breaks out and the time virus definitions are published and deployed at an enterprise mail gateway that can detect and stop virus infected messages. The window of time between outbreak and rule deployment is often five 5 hours or more. Reducing reaction time would be enormously valuable.

In most virus outbreaks executable attachments now serve as a carrier of virus code. For example of 17 leading virus outbreaks in the last three years 13 viruses were sent through email attachments. Twelve of the 13 viruses sent through email attachments were sent through dangerous attachment types. Thus some enterprise network mail gateways now block all types of executable file attachments.

Apparently in response virus writers are now hiding executables. Increasingly virus writers are hiding known dangerous file types in files that appear to be innocent. For example a virus writer may embed executables within .zip files of the type generated by WinZIP and other archive utilities. Such zip files are very commonly used by enterprises to compress and share larger files so most enterprises are unwilling or unable to block .zip files. It is also possible to embed executables in Microsoft Word and some versions of Adobe Acrobat.

Based on the foregoing there is a clear need for an improved approach for managing virus outbreaks. Present techniques for preventing delivery of mass unsolicited commercial email spam and messages that contain other forms of threats such as phishing attacks are also considered inadequate. Present techniques for scanning messages for threats are also considered inefficient and in need of improvement.

A method and apparatus for managing computer virus outbreaks is described. In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

The needs identified in the foregoing Background and other needs and objects that will become apparent for the following description are achieved in the present invention which comprises in one aspect a method comprising receiving an electronic mail message having a destination address for a recipient account determining a virus score value for the message based upon one or more rules that specify attributes of messages that are known to contain computer viruses wherein the attributes comprise a type of file attachment to the message a size of the file attachment and one or more heuristics based on the message sender subject or body and other than file attachment signatures when the virus score value is greater than or equal to a specified threshold storing the message in a quarantine queue without immediately delivering the message to the recipient account.

In another aspect the invention provides a method comprising receiving an electronic mail message having a destination address for a recipient account determining a threat score value for the message when the threat score value is greater than or equal to a specified threat threshold storing the message in a quarantine queue without immediately delivering the message to the recipient account releasing the message from the quarantine queue in other than first in first out order upon any of a plurality of quarantine exit criteria wherein each quarantine exit criterion is associated with one or more exit actions and upon a particular exit criterion selecting and performing the associated one or more exit actions.

In another aspect the invention provides a method comprising receiving and storing a plurality of rules specifying characteristics of electronic messages that indicate threats associated with the messages wherein each rule has a priority value wherein each rule is associated with a message element type receiving an electronic mail message having a destination address for a recipient account wherein the message comprises a plurality of message elements extracting a first message element determining a threat score value for the message by matching only the first message element to only selected rules having a message element type corresponding to the first message element and according to an order of the priorities of the selected rules when the threat score value is greater than a specified threshold outputting the threat score value.

In these approaches early detection of computer viruses and other message borne threats is provided by applying heuristic tests to message content and examining sender reputation information when no virus signature information is available. As a result a messaging gateway can suspend delivery of messages early in a virus outbreak providing sufficient time for updating an anti virus checker that can strip virus code from the messages. A dynamic and flexible threat quarantine queue is provided with a variety of exit criteria and exit actions that permits early release of messages in other than first in first out order. A message scanning method is described in which early exit from parsing and scanning can occur by matching threat rules only to selected message elements and stopping rule matching as soon as a match on one message element exceeds a threat threshold.

In other aspects the invention encompasses a computer apparatus and a machine readable medium configured to carry out the foregoing steps.

The virus sender may obtain network addresses of virus information source and spamtrap from public sources or by sending the virus to a small number of known addresses and letting the virus propagate.

A virus information processor is communicatively coupled to public network and can receive information from the virus information source and spamtrap . Virus information processor implements certain functions described further herein including collecting virus information from virus information source and spamtrap generating virus outbreak information and storing the virus outbreak information in a database .

A messaging gateway is coupled directly or indirectly through a firewall or other network elements from public network to a private network that includes a plurality of end stations A B C. Messaging gateway may be integrated with a mail transfer agent that processes email for private network or the mail transfer agent may be deployed separately. For example an IronPort Messaging Gateway Appliance MGA such as model C60 C30 or C10 commercially available from IronPort Systems Inc. San Bruno Calif. may implement mail transfer agent firewall and the functions described herein for messaging gateway .

In an embodiment messaging gateway includes virus information logic for obtaining virus outbreak information from virus information processor and processing messages destined for end stations A B C according to policies that are set at the messaging gateway. As further described herein the virus outbreak information can include any of a number of types of information including but not limited to a virus score value and one or more rules that associate virus score values with message characteristics that are associated with viruses. As further described herein with respect to such virus information logic may be integrated with a content filter function of messaging gateway .

In an embodiment virus information logic is implemented as an independent logical module in messaging gateway . Messaging gateway invokes virus information logic with message data and receives a verdict in response. The verdict may be based on message heuristics. Message heuristics score messages and determine the likelihood that a message is a virus.

Virus information logic detects viruses based in part on parameters of messages. In an embodiment virus detection is performed based upon any one or more of heuristics of mail containing executable code heuristics of mismatched message headers heuristics of mail from known Open Relays heuristics of mail having mismatched content types and extensions heuristics of mail from dynamic user lists blacklisted hosts or senders known to have poor reputations and sender authenticity test results. Sender authenticity tests results may be generated by logic that receives sender ID values from public networks.

Messaging gateway may also include an anti virus checker a content filter and anti spam logic . The anti virus checker may comprise for example Sophos anti virus software. The content filter provides logic for restricting delivery or acceptance of messages that contain content in a message subject or message body that is unacceptable according to a policy associated with private network .

The anti spam logic scans inbound messages to determine if they are unwanted according to a mail acceptance policy such as whether the inbound messages are unsolicited commercial email and the anti spam logic applies policies to restrict delivery redirect or refuse acceptance of any unwanted messages. In an embodiment anti spam logic scans messages and returns a score of between 0 and 100 for each message indicating a probability that the message is spam or another type of unwanted email. Score ranges are associated with an threshold definable by an administrator of possible spam and likely spam against which users can apply a specified set of actions described further below. In an embodiment messages scoring 90 or above are spam and messages scoring 75 89 are suspected spam.

In an embodiment anti spam logic determines a spam score based at least in part upon reputation information obtained from database or an external reputation service such as SenderBase from IronPort Systems Inc. that indicates whether a sender of the message is associated with spam viruses or other threats. Scanning may comprise recording an X header in the scanned message that verifies that the message was successfully scanned and includes an obfuscated string that identifies rules that matched for the message. Obfuscation may comprise creating a hash of rule identifiers based on a private key and a one way hash algorithm. Obfuscation ensures that only a specified party such as service provider of can decode the rules that matched improving security of the system.

The private network may be an enterprise network associated with a business enterprise or any other form of network for which enhanced security or protection is desired. Public network and private network may use open standard protocols such as TCP IP for communication.

Virus information source may comprise another instance of a messaging gateway that is interposed between public network and another private network not shown for clarity for purposes of protecting that other private network. In one embodiment virus information source is an IronPort MGA. Spamtrap is associated with one or more email addresses or email mailboxes associated with one or more domains. Spamtrap is established for the purpose of receiving unsolicited email messages or spam for analysis or reporting and is not typically used for conventional email communication. For example a spamtrap can be an email address such as dummyaccountforspam mycompany.com or the spamtrap can be a collection of email addresses that are grouped into a mail exchange MX domain name system DNS record for which received email information is provided. Mail transfer agent or the mail transfer agent of another IronPort MGA may host spamtrap .

In an embodiment virus information source generates and provides information to virus information processor for use in managing computer virus outbreaks and the virus information processor can obtain information from spamtrap for the same purpose. For example virus information source generates counts of received messages that have suspicious attachments and provides the counts to virus information processor or allows an external process to retrieve the counts and store them in a specialized database. Messaging gateway also may serve as a virus information source by detecting messages that have indications that are associated with viruses or that are otherwise suspicious creating a count of suspicious messages received in a particular time period and periodically providing the count to virus information processor .

As a specific example the functions described herein may be implemented as part of a comprehensive message data collection and reporting facility such as the SenderBase service from IronPort Systems Inc. In this embodiment virus information processor can retrieve or receive information from virus information source and spamtrap generate counts of messages that have suspicious attachments or other virus indicators and update database with the counts and generate virus outbreak information for later retrieval and use by virus information logic of messaging gateway . Methods and apparatus relating to the SenderBase service are described in co pending application Ser. No. 10 857 641 filed May 28 2004 entitled TECHNIQUES FOR DETERMINING THE REPUTATION OF A MESSAGE SENDER of Robert Brahms et al. the entire contents of which are hereby incorporated by reference as if fully set forth herein.

Additionally or alternatively virus information source may comprise the SpamCop information service that is accessible at domain spamcop.net on the World Wide Web or users of the SpamCop service. Virus information source may comprise one or more Internet service providers or other high volume mail receivers.

The SenderBase and SpamCop services provide a powerful data source for detecting viruses. The services track information about millions of messages per day through spamtrap addresses end user complaint reporters DNS logs and third party data sources. This data can be used to detect viruses in a rapid manner using the approaches herein. In particular the number of messages with specific attachment types relative to normal levels sent to legitimate or spamtrap addresses and not identified as viruses by anti virus scanners provides an early warning indicator that a virus outbreak has occurred based on a new virus that is not yet known and detectable by the anti virus scanners.

In another alternative embodiment as a supplement to the automatic approaches herein virus information source may comprise the manual review of data that is obtained by information services consultants or analysts or external sources. For example a human administrator monitoring alerts from anti virus vendors third party vendors security mailing lists spamtrap data and other sources can detect viruses well in advance of when virus definitions are published in most cases.

Once a virus outbreak is identified based on the virus outbreak information a network element such as messaging gateway can provide various options for handling a message based on the probability that it is a virus. When the messaging gateway is integrated with a mail transfer agent or mail gateway the gateway can act on this data immediately. For example the mail transfer agent can delay message delivery into private network until a virus update is received from an anti virus vendor and installed on messaging gateway so that the delayed messages can be scanned by anti virus checker after the virus update is received.

Delayed messages may be stored in a quarantine queue . Messages in quarantine queue may be released and delivered according to various policies as further described deleted or modified prior to delivery. In an embodiment a plurality of quarantines are established in messaging gateway and one quarantine is associated with each recipient account for a computer A B etc. in the managed private network .

Although not shown in virus information processor can include or be communicatively coupled to a virus outbreak operation center VOOC a receiving virus score RVS processor or both. The VOOC and RVS processor can be separate from virus information processor but communicatively coupled to database and public network . The VOOC can be implemented as a staffed center with personnel available 24 hours a day 7 days a week to monitor the information collected by virus information processor and stored in database . The personnel staffing the VOOC can take manual actions such as issuing virus outbreak alerts updating the information stored in database publishing virus outbreak information so that messaging gateways can access the virus outbreak information and manually initiating the sending of virus outbreak information to messaging gateway and other messaging gateways .

Additionally the personnel staffing the VOOC may configure the mail transfer agent to perform certain actions such as delivering a soft bounce. A soft bounce is performed when the mail transfer agent returns a received message based on a set of rules accessible to the mail transfer agent . More specifically when the mail transfer agent completes a SMTP transaction by accepting an email message from a sender the mail transfer agent determines based on a set of stored software rules accessible to the mail transfer agent that the received message is unwanted or undeliverable. In response to the determination that the received message is unwanted or undeliverable the mail transfer agent returns the message to the bounce email address specified by the sender. When the mail transfer agent returns the message to the sender the mail transfer agent may strip the message of any attachments.

In some implementations virus outbreak information is made available or published in response to a manual action taken by personnel such as those staffing the VOOC. In other implementations virus outbreak information is automatically made available according to the configuration of the virus information processor VOOC or RVS and then the virus outbreak information and the automated actions taken are subsequently reviewed by personnel at the VOOC who can make modifications if deemed necessary or desirable.

In an embodiment the staffing personnel at a VOOC or components of a system according to an embodiment may determine whether a message contains a virus based on a variety of factors such as a patterns in receiving messages with attachments b risky characteristics of attachments to received messages c published vendor virus alerts d increased mailing list activity e risky source based characteristics of messages f the percentage of dynamic network addresses associated with sources of received messages g the percentage of computerized hosts associated with sources of received messages and h the percentage of suspicious volume patterns.

Each of the above factors may include a variety of criteria. For example the risky characteristics of attachments to received messages may be based on a consideration of how suspicious the filename of the attachment is whether the file is associated with multiple file extensions the amount of similar file sizes attached to received messages the amount of similar file names attached to received messages and the names of attachments of known viruses. The patterns in receiving messages with attachments may be based on a consideration of the current rate of the number of messages containing attachments the trend in the number of messages received with risky attachments and the number of customer data sources virus information source and spamtraps that are reporting increases in messages with attachments.

In addition the determination of whether a message contains a virus may be based on information sent from a client e.g. information may be reported from a user to a system using an email message that is received at the system in a safe environment such that the message receptor of the system is configured as best possible to prevent the spread of a computer virus to other parts of the system if the message receptor is infected with a virus.

The RVS processor can be implemented as an automated system that generates the virus outbreak information such as in the form of virus score values for various attachment types or in the form of a set of rules that associate virus score values with message characteristics to be made available to messaging gateway and other messaging gateways .

In an embodiment messaging gateway comprises a verdict cache that provides local storage of verdict values from anti virus checker and or anti spam logic for re use when duplicate messages are received. The structure and function of verdict cache is described further below. In an embodiment messaging gateway comprises a log file that can store statistical information or status messages relating to functions of the messaging gateway. Examples of information that can be logged include message verdicts and actions taken as a result of verdicts rules that matched on messages in obfuscated format an indication that scanning engine updates occurred an indication that rule updates occurred scanning engine version numbers etc.

In step a message is received. For example virus information source or messaging gateway receives the message sent by virus sender .

In step a determination is made about whether the message is risky. In one embodiment a message is determined to be risky if a virus checker at the virus information source or messaging gateway scans the message without identifying a virus but the message also includes a file attachment having a file type or extension that is known to be risky. For example MS Windows XP Pro file types or extensions of COM EXE SCR BAT PIF or ZIP may be considered risky since virus writers commonly use such files for malicious executable code. The foregoing are merely examples of file types or extensions that can be considered risky there are more than 50 known different file types.

The determination that a message is suspicious also may be made by extracting a source network address from the message such as a source IP value and issuing a query to the SenderBase service to determine whether the source is known to be associated with spam or viruses. For example a reputation score value provided by the SenderBase service may be taken into account in determining whether a message is suspicious. A message may also be determined to be suspicious if it was sent from an IP address associated with a host known to be compromised that has a history of sending viruses or has only recently started sending email to the Internet. The determination also may be based upon one or more of the following factors a the type or extension of a file attachment that is directly attached to the message b the type or extension of a file that is contained within a compressed file an archive a .zip file or another file that is directly attached to the message and c a data fingerprint obtained from an attachment.

In addition the determination of suspicious messages can be based on the size of an attachment for a suspicious message the contents of the subject of the suspicious message the contents of the body of the suspicious message or any other characteristic of the suspicious message. Some file types can be embedded with other file types. For example .doc files and .pdf files may be embedded with other image files types such as .gif or .bmp . Any embedded file types within a host file type may be considered when determining whether a message is suspicious. The characteristics of the suspicious messages can be used in formulating the rules that are provided or made available to the messaging gateways and that include the virus score value that is associated with one or more such characteristics.

In step if the message is suspicious then a count of suspicious messages for the current time period is incremented. For example if the message has an EXE attachment a count of messages with EXE attachments is incremented by one.

In step the count of suspicious messages is reported. For example step may involve sending a report message to the virus information processor .

In an embodiment virus information processor receives numerous reports such as the report of step continuously in real time. As reports are received virus information processor updates database with report data and determines and stores virus outbreak information. In one embodiment the virus outbreak information includes a virus score value that is determined according to a sub process that is described further with reference to below.

At block a content filter is applied to the message. Applying a content filter involves in one embodiment examining the message subject other message header values and the message body determining whether one or more rules for content filtering are satisfied by the content values and taking one or more actions when the rules are satisfied such as may be specified in a content policy. The performance of block is optional. Thus some embodiments may perform block while other embodiments may not perform block .

Further at block virus outbreak information is retrieved for use in subsequent processing steps. In one embodiment at block a messaging gateway that implements can periodically request the then current virus outbreak information from virus information processor . In an embodiment messaging gateway retrieves the virus outbreak information from the virus information processor approximately every five 5 minutes using a secure communication protocol that prevents unauthorized parties from accessing the virus outbreak information. If the messaging gateway is unable to retrieve the virus outbreak information the gateway can use the last available virus outbreak information stored in the gateway.

In block an anti spam process is applied to the message and messages that appear to be unsolicited messages are marked or processed according to a spam policy. For example spam messages may be silently dropped. moved to a specified mailbox or folder or the subject of the message may be modified to include a designation such as possible spam. The performance of block is optional. Thus some embodiments may perform block while other embodiments may not perform block .

In block an anti virus process is applied to the message and messages that appear to contain viruses in the message or in a file attachment are marked. In one embodiment anti virus software from Sophos implements block . If a message is determined as positive for a virus then in block the message is deleted quarantined in quarantine queue or otherwise processed according to an appropriate virus processing policy.

Alternatively if block determines that the message is not virus positive then in block a test is performed to determine whether the message has been scanned for viruses before. As explained further herein block can be reached again from later blocks after the message has been previously scanned for viruses.

If in block the message has been scanned for viruses before then the process of assumes that the anti virus process has been updated with all patterns rules or other information necessary to successfully identify viruses when a virus outbreak has been identified. Therefore control passes to block in which the message that was scanned before is delivered. If the message is determined in block to not have been scanned before the process continues to block .

In block a test is performed to determine whether the virus outbreak information obtained at block satisfies a specified threshold. For example if the virus outbreak information includes a virus score value VSV the virus score value is checked to see if the virus score value is equal to or greater than a threshold virus score value.

The threshold is specified by an administrator command in a configuration file or is received from another machine process or source in a separate process. In one implementation the threshold corresponds to the probability that a message contains a virus or is associated with a new virus outbreak. A virus that receives a score above the threshold is subject to the actions specified by an operator such as performing a quarantine of the message in quarantine queue . In some implementations a single specified threshold is used for all messages whereas in other implementations multiple thresholds are used based on different characteristics so that the administrator can treat some messages more cautiously than others based on the type of messages that the messaging gateway receives and what is considered to be normal or less risky for the associated message recipients. In one embodiment a default threshold value of 3 is used based on a virus score scale of 0 to 5 where 5 is the highest risk threat level.

For example the virus outbreak information can include a virus score value and a network administrator can determine an allowed threshold virus score value and broadcast the threshold virus score value to all message transfer agents or other processors that are performing the process of . As another example the virus outbreak information can include a set of rules that associate virus score values with one or more message characteristics that are indicative of viruses and based on the approach described herein with respect to a virus score value can be determined based on the matching rules for the message.

The value of the threshold virus score value set by the administrator indicates when to initiate delayed delivery of messages. For example if the threshold virus score value is 1 then a messaging gateway implementing will delay delivery of messages when the virus score value determined by the virus information processor is low. If the threshold virus score value is 4 then a messaging gateway implementing will delay delivery of messages when the virus score value determined by the virus information processor is high.

If the threshold virus score value is determined to be exceeded in block and the message has not yet been scanned before as determined in block then the message is placed in an outbreak quarantine queue . Each message is tagged with a specified holding time value or expiration date time value representing a period of time during which the message is held in the outbreak quarantine queue . The purpose of the outbreak quarantine queue is to delay delivery of messages for an amount of time that is sufficient to enable updating of anti virus process to account for a new virus that is associated with the detected virus outbreak.

The holding time may have any desired duration. Example holding time values could be between one 1 hour and twenty four 24 hours. In one embodiment a default holding time value of twelve 12 hours is provided. An administrator may change the holding time at any time for any preferred holding time value by issuing a command to a messaging gateway that implements the processes herein. Thus the holding time value is user configurable.

One or more tools features or user interfaces may be provided to allow an operator to monitor the status of the outbreak quarantine queue and the quarantined messages. For example the operator can obtain a list of messages currently quarantined and the list can identify the reason why each message in the queue was quarantined such as the applicable virus score value for the message that satisfied the specified threshold or the rule or rules in a set of rules that matched for the message. Summary information can be provided by message characteristic such as the types of file attachments or by the applicable rule if a set of rules are being used. A tool can be provided to allow the operator to review each individual message in the queue. Another feature can be provided to allow the operator to search for quarantined messages that satisfy one or more criteria. Yet another tool can be provided to simulate a message being processed which can be referred to as tracing a message. to make sure that the configuration of the messaging gateway has been correctly performed and that the inbound messages are being properly processed according the virus outbreak filter.

In addition a tool can be provided showing general alert information from virus information processor a VOOC or an RVS concerning special or significant virus risks or threats that have been identified. Also tools can be included in the MGA to contact one or more personnel associated with the MGA when alerts are issued. For example an automated telephone or paging system can contact specified individuals when messages are being quarantined when a certain number of messages have been quarantined or when the capacity of the quarantine queue has been filled or has reached a specified level.

A message may exit the outbreak quarantine queue in three ways indicated by paths designated A B C in . As shown by path A a message may expire normally when the specified holding time expires for that message. As a result with normal expiration in one implementation the outbreak quarantine queue operates as a FIFO first in first out queue. The message is then transferred back to anti virus process for re scanning on the assumption that after expiration of the holding time the anti virus process has been updated with any pattern files or other information necessary to detect viruses that may be in the message.

As indicated by path B a message may be manually released from outbreak quarantine queue . For example in response to a command issued by an administrator operator or other machine or process one or more messages can be released from outbreak quarantine queue . Upon a manual release in block an operator decision to re scan or delete the message is performed such as when the operator may have received off line information indicating that a particular kind of message is definitely virus infected in that case the operator could elect to delete the message at block . Alternatively the operator may have received before expiration of the holding time value off line information indicating that anti virus process has just been updated with new patterns or other information in response to a virus outbreak. In that case the operator may elect to re scan the message by sending it back to the anti virus process for scanning without waiting for the holding time to expire as shown by path .

As yet another example the operator can perform a search of the messages currently held in outbreak quarantine queue to identify one or more messages. A message thus identified can be selected by the operator for scanning by anti virus process such as to test whether anti virus process has been updated with information sufficient to detect the virus that is involved in the virus outbreak. If the rescan of the selected message is successfully at identifying the virus the operator can manually release some or all of the messages in outbreak quarantine queue so that the released messages can be rescanned by anti virus process . However if the virus is not detected by anti virus process in the selected test message then the operator can wait until a later time and retest a test message or another message to determine if anti virus process has been updated to be able to detect the virus or the operator can wait and let the messages be released when the messages expiration times expire.

As shown by path C a message also may expire early for example because the outbreak quarantine queue is full. An overflow policy is applied to messages that expire early. For example the overflow policy may require that the message be deleted as indicated in block . As another example the overflow policy may require that the subject of the message be appended with a suitable warning of the risk that the message is likely to contain a virus as indicated by block . For example a message such as MAY BE INFECTED or SUSPECTED VIRUS can be appended to the subject such as at the end or beginning of the message s subject line. The message with the appended subject is delivered via anti virus process and because the message has been scanned before the process continues from anti virus process through block and the message is then delivered as indicated by block .

Additional overflow policies can be applied although not illustrated in for clarity. For example the overflow policy may require removal of file attachments to the message followed by delivery of the message with the file attachments stripped. Optionally the overflow policy may require stripping only those file attachments that exceed a particular size. As another example the overflow policy may require that when the outbreak quarantine queue is full the MTA is allowed to receive a new message but before the message is accepted during the SMTP transaction the message is rejected with a 4 xx temporary error.

In one embodiment treatment of a message according to path A B C is user configurable for the entire contents of the quarantine queue. Alternatively such a policy is user configurable for each message.

In an embodiment block also may involve generating and sending an alert message to one or more administrators when the virus outbreak information obtained from virus information processor satisfies a specified threshold such as when a virus score value meets or exceeds a specified threshold virus score value. For example an alert message sent at block may comprise an email that specifies the attachment types for which the virus score has changed current virus score prior virus score current threshold virus score and when the last update of the virus score for that type of attachment was received from the virus information processor .

In yet another embodiment the process of may involve generating and sending an alert message to one or more administrators whenever the overall number of messages in the quarantine queue exceeds a threshold set by the administrator or when a specific amount or percentage of quarantine queue storage capacity has been exceeded. Such an alert message may specify the quarantine queue size percentage of capacity utilized etc.

The outbreak quarantine queue may have any desired size. In one embodiment the quarantine queue can store approximately 3 GB of messages.

In one embodiment virus outbreak information is generated that indicates the likelihood of a virus outbreak based on one or more message characteristics. In one embodiment the virus outbreak information includes a numerical value such as a virus score value. The virus outbreak information can be associated with one or more characteristics of a message such as the type of attachment with a message the size of the attachment the contents of the message e.g. the content of the subject line of the message or the body of the message the sender of the message the IP address or domain of the sender of the message the recipient of the message the SenderBase reputation score for the sender of the message or any other suitable message characteristic. As a specific example the virus outbreak information can associate one message characteristic with a virus score value such as EXE 4 to indicate a virus score value of 4 for messages with EXE type attachments.

In another embodiment the virus outbreak information includes one or more rules that each associates the likelihood of a virus outbreak with one or more message characteristics. As a specific example a rule of the form if EXE and size 

Step of indicates that certain computational steps are performed for each different source of virus information that is accessible to virus information processor such as virus information source or spamtrap .

Step involves generating a weighted current average virus score value for a particular email file attachment type by combining one or more prior virus score values for prior time periods using a weighting approach that accords greater weight for more recent prior virus score values. A virus score value for a particular time period refers to a score value based on the number of messages received at a particular source that have suspicious file attachments. A message is considered to have a suspicious attachment if the attachment satisfies one or more metrics such as a particular file size file type etc. or if the network address of the sender is known to be associated with prior virus outbreaks. The determination may be based on attachment file size or file type or extension.

The determination of the virus score value also may be made by extracting a source network address from the message such as a source IP address value and issuing a query to the SenderBase service to determine whether the source is known to be associated with spam or viruses. The determination also may be based upon a the type or extension of a file attachment that is directly attached to the message b the type or extension of a file that is contained within a compressed file an archive a zip file or another file that is directly attached to the message and c a data fingerprint obtained from an attachment. A separate virus score value may be generated and stored for each attachment type found in any of the foregoing. Further the virus score value may be generated and stored based upon the most risky attachment type found in a message.

In one embodiment step involves computing a combination of virus score values for the last three 15 minute periods for a given file attachment type. Further in one embodiment a weighting value is applied to the three values for the 15 minute periods with the most recent 15 minute time period being weighted more heavily than earlier 15 minute time periods. For example in one weighting approach a multiplier of 0.10 is applied to the virus score value for the oldest 15 minute period 30 45 minutes ago a multiplier of 0.25 is applied to the second oldest value 15 30 minutes ago and a multiplier of 0.65 is applied to the most recent virus score value for the period 0 15 minutes ago.

In step a percent of normal virus score value is generated for a particular file attachment type by comparing the current average virus score value determined at step to a long term average virus score value. The current percent of normal level may be computed with reference to a 30 day average value for that file attachment type over all 15 minute time periods within the 30 day period.

In step all of the percent of normal virus score values for all sources such as virus information source and spamtrap are averaged to result in creating an overall percent of normal value for a particular file attachment type.

In step the overall percent of normal value is mapped to a virus score value for a particular file attachment type. In one embodiment the virus score value is an integer between 0 5 and the overall percent of normal value is mapped to a virus score value. Table 1 presents an example of a virus score scale.

In other embodiments mappings to score values of 0 to 100 0 to 10 1 to 5 or any other desired range of values may be used. In addition to integer score values non integer values can be used. Instead of using a defined range of values a probability value can be determined such as a probability in the range of 0 to 100 in which the higher probabilities indicate a stronger likelihood of a virus outbreak or such as a probability in the range of 0 to 1 in which the probability is expressed as a fraction or decimal such at 0.543.

As an optimization and to avoid division by zero issues that may occur with very low 30 day counts the process of can add one to the baseline averages computed in step . In essence adding one raises the noise level of the values slightly in a beneficial way by dampening some of the data.

In an alternative embodiment the processes of also may include logic to recognize trends in the reported data and identify anomalies in virus score computations.

Since the majority of executables are spread through one type of email attachment or another the strategy of the approaches herein focuses on making policy decisions based on attachment type. In an alternative embodiment a virus score value could be developed by considering other message data and metadata such as Universal Resource Locators URLs in a message the name of a file attachment source network address etc. Further in an alternative embodiment a virus score value may be assigned to individual messages rather than to file attachment types.

In yet another embodiment other metrics may be considered to determine the virus score value. For example if a large number of messages are suddenly received from new hosts that have never sent messages to virus information processor or its information sources before a virus may be indicated. Thus the fact that the date that a particular message has been first seen is recent and a spike in message volume detected by virus information processor may provide an early indication of a virus outbreak.

As described above virus outbreak information can simply associate a virus score value with a message characteristic such as an attachment type or virus outbreak information can include a set of rules that each associates a virus score value with one or more characteristics of messages that are indicative of viruses. An MGA can apply the set of rules to incoming messages to determine which rules match a message. Based on the rules that match an incoming message the MGA can determine the likelihood that the message includes a virus such as by determining a virus score value based on one or more of the virus score values from the matching rules.

For example a rule can be if exe then 4 to denote a virus score of 4 for messages with EXE attachments. As another example a rule can be if exe and size 

Furthermore a messaging gateway can apply exceptions such as in the form of one or more quarantine policies to determine whether a message which otherwise satisfies the specified threshold based on the virus score value determined based on the matching rules such as is determined in block of is to be placed into the outbreak quarantine queue or whether the message is to be processed without being placed into the outbreak quarantine queue. The MGA can be configured to apply one or more policies for applying the rules such as a policy to always allow messages to be delivered to an email address or group of email addresses regardless of the virus scores or to always deliver messages with a specified type of attachment such as ZIP files containing PDF files.

In general by having the virus information processor supply rules instead of virus score values each MGA can apply some or all of the rules in a manner determined by the administrator of the MGA thereby providing additional flexibility to meet the needs of the particular MGA. As a result even if two messaging gateways use the same set of rules the ability to configure the application of the rules by the administrator of each MGA means that each MGA can process the same message and obtain a different result in terms of the determined likelihood that a virus attack is occurring and each MGA can process the same message and take different actions depending on the configuration established by the administrator for the MGA.

In block the messaging gateway identifies the message characteristics of an incoming message. For example messaging gateway can determine whether the message has an attachment and if so the type of attachment the size of the attachment and the name of the attachment. As another example messaging gateway can query the SenderBase service based on the sending IP address to obtain a SenderBase reputation score. For the purposes of describing assume that that message has an EXE type of attachment with a size of 35 k and that sending host for the message has a SenderBase reputation score of 2.

In block the messaging gateway determines which rules of the rule set are matched based on the message characteristics for the message. For example assume that for the purposes of describing the rule set consists of the following five rules that associate the example characteristics with the provided hypothetical virus score values 

In these example rules Rule 1 indicates that ZIP attachments are more likely to include a virus than EXE attachments because the virus score is 4 in Rule 2 but only 3 in Rule 1. Furthermore the example rules above indicate that EXE attachments with a size of greater than 50 k are the most likely to have a virus but EXE attachments with a size of less than 50 k but greater than 20 k are a little less likely to include a virus perhaps because most of the suspicious messages with EXE attachments are greater than 50 k in size.

In the present example in which the message has an EXE type of attachment with a size of 35 k and the associated SenderBase reputation score is 2 Rules 1 and 4 match while Rules 2 3 and 5 do not match.

In block the messaging gateway determines a virus score value to be used for the message based on the virus score values from the matching rules. The determination of the virus score value to be used for the message can be performed based on any of a number of approaches. The particular approach used can be specified by the administrator of the messaging gateway and modified as desired.

For example the rule that is matched first when applying the list of rules in the order listed can be used and any other matching rules are ignored. Thus in this example the first rule to match is Rule 1 and therefore the virus score value for the message is 3.

As another example the matching rule with the highest virus score value is used. Thus in this example Rule 3 has the highest virus score value among the matching rules and therefore the virus score value for the message is 5.

As yet another example the matching rule with the most specific set of message characteristics is used. Thus in this example Rule 4 is the most specific matching rule because Rule 4 includes three different criteria and therefore the virus score value for the message is 4.

As another example virus score values from the matching rules can be combined to determine the virus score value to apply to the message. As a specific example the virus score values from Rules 1 3 and 4 can be averaged to determine a virus score value of 4 e.g. 3 4 5 3 4 . As another example a weighted average of the virus score values of the matching rules can be used so as to give more weight to the more specific rules. As a specific example the weight for each virus score value can be equal to the number of criteria in the rule e.g. Rule 1 with one criterion has a weight of 1 while Rule 4 with three criteria has a weight of 3 and thus the weighted average of Rule 1 3 and 4 results in a virus score value of 4.2 e.g. 1 3 2 5 3 4 1 2 3 4.2 .

In block the messaging gateway uses the virus score value determined in block to determine whether the specified threshold virus score value is satisfied. For example assume that in this example the threshold is a virus score value of 4. As a result the virus score value determined in block by all the example approaches would satisfy the threshold value except for the first example that uses the first rule to match and for which block determines the virus score value to be 3.

If the specified threshold is determined to be satisfied by the virus score value determined in block then in block one or more quarantine policies are applied to determine whether to add the message to the outbreak quarantine queue. For example the administrator of the messaging gateway may determine that one or more users or one or more groups of users should never have their messages quarantined even if a virus outbreak has been detected. As another example the administrator can establish a policy that messages with certain characteristics e.g. messages with XLS attachments with a size of at least 75 k are to always be delivered instead of being quarantined when the virus outbreak information indicates a virus attack based on the specified threshold.

As a specific example the members of the organizations legal department may frequently receive ZIP files containing important legal documents that should not be delayed by being placed in the outbreak quarantine even if the messaging gateway determines that a virus outbreak is occurring. Thus the mail administrator for the messaging gateway can establish a policy to always deliver messages with ZIP attachments to the legal department even if the virus score value for ZIP attachments meets or exceeds the specified threshold.

As another specific example the mail administrator may wish to always have messages delivered that are addressed to the email address for the mail administrator since such messages could provide information for dealing with the virus outbreak. Given that the mail administrator is a sophisticated user the risk in delivering a virus infected message is low since the mail administrator will likely be able to identify and deal with an infected message before the virus can act.

For the example being used in describing assume that the mail administrator has established a policy that EXE attachments addressed to the company s senior engineering managers are to always be delivered even if the virus score value for such messages meets or exceeds a threshold virus score value. Thus if the message is addressed to any of the senior engineering managers the message is nevertheless delivered instead of being placed into the outbreak quarantine. However messages addressed to others besides the senior engineering manages are quarantined unless otherwise excluded by another applicable policy .

In one embodiment the messaging gateway can be configured to be in one of two states calm and nervous. The calm state applies if no messages are being quarantined. However when virus outbreak information is updated and indicates that a specified threshold is exceeded the state changes from calm to nervous regardless of whether any messages being received by the messaging gateway are being quarantined. The nervous state persists until the virus outbreak information is updated and indicates that the specified threshold is not longer exceeded.

In some implementations an alert message is sent to an operator or administrator whenever a change in the system state occurs e.g. calm to nervous or nervous to calm . In addition alerts can be issued when a previously low virus score value that did not satisfy the threshold now does meet or exceed the threshold even if the overall state of the system does not change e.g. the system previously changed from calm to nervous and while in the nervous state other virus score was received from the virus information processor that also meets or exceeds the threshold . Similarly an alert can be issued when a previously high virus score that did satisfy the threshold has dropped and now is less than the specified threshold.

Alert messages can include one or more types of information including but not limited to the following the attachment type for which the virus outbreak information changed the current virus score the prior virus score the current threshold and when the last update for the virus outbreak information occurred.

One or more of the following additional features can be used in a particular implementation in addition to the features described above.

One additional feature is to obtain sender based data that is specifically designed to aid in the identification of virus threats. For example when an MGA queries a service such as SenderBase to obtain the SenderBase reputation score for the connecting IP address SenderBase can provide virus threat data that is specific for the connecting IP address. The virus threat data is based on data collected by SenderBase for the IP address and reflects the history of the IP address in terms of how often viruses are detected in messages originating from the IP address or the company associated with the IP address. This can allow the MGA to obtain a virus score from SenderBase based solely on the sender of the message without any information or knowledge about the content of a particular message from the sending IP address. The data on the virus threat for the sender can be used in place of or in addition to a virus score as determined above or the data on the virus threat for the sender can be factored into the calculation of the virus score. For example the MGA could increase or decrease a particular virus score value based on the virus threat data for the sender.

Another feature is to use a dynamic or dial up blacklist to identify messages that are likely infected with a virus when a dynamic or dial up host connects directly to an external SMTP server. Normally dynamic and dial up hosts that connect to the Internet are expected to send outgoing messages through the hosts local SMTP server. However if the host is infected with a virus the virus can cause the host to connect directly to an external SMTP server such as an MGA. In such a situation the likelihood that the host is infected with a virus that is causing the host to establish the direct connection to the external SMTP server is high. Examples include spam and open relay blocking system SORBS dynamic hosts and not just another bogus list NJABL dynamic hosts.

However in some cases the direct connection is not virus initiated such as when a novice user is making the direct connection or when the connection is from a broadband host that is not dynamic such as DSL or cable modems. Nevertheless such direct connections from a dial up or dynamic host to an external SMTP server can result in determining a high virus score or increasing an already determined virus score to reflect the increased likelihood that the direct connection is due to a virus.

Another feature is to use as a virus information source an exploited host blacklist that track hosts that have been exploited by viruses in the past. A host can be exploited when the server is an open relay an open proxy or has another vulnerability that allows anybody to deliver email to anywhere. Exploited host blacklists track exploited hosts using one of two techniques the content that infected hosts are sending and locating hosts that have been infected via connect time scanning. Examples include the Exploits Block List XBL which uses data from the Composite Blocking List CBL and the Open Proxy Monitor OPM and the Distributed Server Boycott List DSBL .

Another feature is for the virus information processor to develop a blacklist of senders and networks that have a past history of sending viruses. For example the highest virus score can be assigned to individual IP addresses that are known to send only viruses. Moderate virus scores can be associated with individual IP addresses that are known to send both viruses and legitimate messages that are not virus infected. Moderate to low virus scores can be assigned to networks that contain one or more individual infected hosts.

Another feature is to incorporate a broader set of tests for identifying suspicious messages in addition to those discussed above such as identifying attachment characteristics. For example a generic header test can be used to test on any generic message header to look for either a fixed string or a regular expression such as in the following examples 

As another example a generic body test can be used to test the message body by searching for a fixed string or a regular expression such as in the following examples 

As yet another example a function test can be used to craft custom tests to test very specific aspects of a message such as in the following examples 

As another example a meat test can be used to build on multiple features such as those above to create a meat rule of rules such as in the following examples 

Another feature that can be used is to extend the virus score determination approach above to one or more machine learning techniques so that not all rules need to be run and to provide accurate classification by minimizing false positives and false negatives. For example one or more of the following methods can be employed a decision tree to provide discrete answers perception to provide additive scores and Bays like analysis to map probabilities to scores.

Another feature is to factor into the virus score determination the severity of the threat from a virus outbreak based on the consequences of the virus. For example if the virus results in the infected computer s hard drive having all its contents deleted the virus score can be increased whereas a virus that merely displays a message can have the virus score left unchanged or even reduced.

Another additional feature is to expand the options for handling suspicious messages. For example a suspicious message can be tagged to indicate that the message is suspicious such as by adding to the message e.g. in the subject or body the virus score so that the user can be alerted to the level of virus risk determined for the message. As another example a new message can be generated to either alert the recipient of the attempt to send to them a virus infected message or to create a new and uninfected message that includes the non virus infected portions of the message.

The following hypothetical descriptions provide examples of how the approaches described herein may be used to manage virus outbreaks.

As a first use case assume that a new virus entitled Sprosts.ky is spread through a Visual Basic macro embedded in Microsoft Excel. Shortly after the virus hits the virus score moves from 1 to 3 for .xls attachments and a user of the approaches herein Big Company starts delaying the delivery of Excel files. The network administrator for Big Company receives an email stating that .xls files are now quarantined. Sophos then sends out an alert an hour later stating that a new update file is available to stop the virus. The network administrator then confirms that his IronPort C60 has the latest update file installed. Although the network administrator had set the delay period to 5 hours for the quarantine queue Excel files are critical to the company so the administrator cannot afford to wait another four hours. Therefore the administrator accesses the IronPort C60 and manually flushes the queue sending all messages with Excel files attached through Sophos anti virus checking. The administrator finds that 249 of these messages were virus positive and 1 was not caught by Sophos because it wasn t infected. The messages are delivered with a total delay of 1 hours.

As a second use case assume that a Clegg.P virus is spread through encrypted zip files. The network administrator at Big Company receives an email alert that the virus score value has jumped but the administrator ignores the alert relying on automatic processing as provided herein. Six hours later overnight the administrator receives a second page alerting him that the quarantine queue has reached 75 of capacity. By the time the administrator arrives at work Clegg.P has filled Big Company s quarantine queue. Fortunately the network administrator had set policies on the IronPort C60 to deliver messages as normal when the quarantine queue overflowed and Sophos had come out with a new update overnight before the quarantine queue overflowed. Only two users were infected prior to the virus score value triggering the quarantine queue so the administrator is faced only with an over filled quarantine queue. The administrator flushes the messages from the queue automatically deleting them to spare load on the IronPort C60 on the assumption that all the messages were viruses. As a preventive approach the network admin starts blocking all encrypted .zip files for a specified future time period.

Within a service provider one or more TI development computers are coupled to a corpus server cluster which hosts a corpus or master repository for threat identification rules and which applies threat identification rules to messages on an evaluation basis to result in generating score values. A mail server of the service provider contributes ham email to the corpus server cluster . One or more spamtraps contribute spam email to the corpus. Spamtraps are email addresses that are established and seeded to spammers so that the addresses receive only spam email. Messages received at spamtraps may be transformed into message signatures or checksums that are stored in corpus server cluster . One or more avatars contribute unclassified email to the corpus for evaluation.

Scores created by the corpus server cluster are coupled to a rules URLs server which publishes the rules and URLs associated with viruses spam and other email threats to one or more messaging gateways located at customers of the service provider . Messaging gateways periodically retrieve new rules through HTTPS transfers. A threat operations center TOC may generate and send the corpus server cluster tentative rules for testing purposes. Threat operations center refers to staff tools data and facilities involved in detecting and responding to virus threats. The TOC also publishes rules that are approved for production use to the rules URLs server and sends the rules URLs server whitelisted URLs that are known as not associated with spam viruses or other threats. A TI team may manually create other rules and provide them to the rules URLs server.

For purposes of illustrating a clear example shows one messaging gateway . However in various embodiments and commercial implementations service provider is coupled to a large number of field deployed messaging gateways at various customers or customer sites. Messaging gateways avatar and spamtrap connect to service provider through a public network such as the Internet.

According to one embodiment each of the customer messaging gateways maintains a local DNS URL blacklist module comprising executable logic and a DNS blacklist. The structure of the DNS blacklist may comprise a plurality of DNS type A records that map network addresses such as IP addresses to reputation score values associated with the IP addresses. The IP addresses may represent IP addresses of senders of spam messages or server addresses associated with a root domain of a URL that has been found in spam messages or that is known to be associated with threats such as phishing attacks or viruses.

Thus each messaging gateway maintains its own DNS blacklist of IP addresses. In contrast in prior approaches DNS information is maintained in a global location that must receive all queries through network communications. The present approach improves performance because DNS queries generated by an MGA need not traverse a network to reach a centralized DNS server. This approach also is easier to update a central server can send incremental updates to the messaging gateways periodically. To filter spam messages other logic in the messaging gateway can extract one or more URLs from a message under test provide input to the blacklist module as a list of URL bitmask pairs and receive output as a list of blacklist IP address hits. If hits are indicated then the messaging gateway can block delivery of the email quarantine the email or apply other policy such as stripping the URLs from the message prior to delivery.

In one embodiment the blacklist module also tests for URL poisoning in an email. URL poisoning refers to a technique used by spammers of placing malicious or disruptive URLs within an unsolicited email message that also contains non malicious URLs so that an unsuspecting user who clicks on the URLs may unwittingly trigger malicious local action displays of advertisements etc. The presence of the good URLs is intended to prevent spam detection software from marking the message as spam. In an embodiment the blacklist module can determine when a particular combination of malicious and good URLs provided as input represents a spam message.

An embodiment provides a system for taking DNS data and moving it into a hash type local database that can accept several database queries and then receive a DNS response.

The foregoing approaches may be implemented in computer programs that are structured as plug ins to the SpamAssassin open source project. SpamAssassin consists of a set of Perl modules that can be used with a core program that provides a network protocol for performing message checks such as spamd which is shipped with SpamAssassin. SpamAssassin s plug in architecture is extensible through application programming interfaces a programmer can add new checking heuristics and other functions without changing the core code. The plug ins are identified in a configuration file and are loaded at runtime and become a functional part of SpamAssassin. The APIs define the format of heuristics rules to detect words or phrases that are commonly used in spam and message checking rules. In an embodiment the heuristics are based on dictionaries of words and messaging gateway supports a user interface that enables an administrator to edit the contents of the dictionaries to add or remove objectionable words or known good words. In an embodiment an administrator can configure anti spam logic to scan a message against enterprise specific content dictionaries before performing other anti spam scanning. This approach enables messages to first receive a low score if they contain enterprise specific terms or industry standard terms without undergoing other computationally expensive spam scanning.

Further in a broad sense the foregoing approaches enable a spam checking engine to receive and use information that has formed a basis for reputation determinations but has not found direct use in spam checking. The information can be used to modify weight values and other heuristics of a spam checker. Therefore a spam checker can determine with greater precision whether a newly received message is spam. Further the spam checker becomes informed by a large volume of information in the corpus also improving accuracy.

Anti spam logic normally operates on each message in a complete fashion meaning that every element of each message is completely parsed and then every registered test is performed. This gives a very accurate total assessment of whether a piece of mail is ham or spam. However once a message is spammy enough it can be flagged and treated as spam. There is no additional information necessary to contribute to the binary disposition of the mail. When an embodiment implements thresholds of spam and ham then performance of anti spam logic increases by exiting from a message scan function once the logic determines that a message is spammy enough to be sure it is spam. In this description such an approach is termed Early Exit from anti spam parsing or scanning.

With Early Exit significant time can be saved by not evaluating hundreds of rules that will merely further confirm that a message is spam. Since few negative scoring rules typically exist once a certain threshold is hit logic can determine positively that a message spam. Two further performance gains are also implemented using mechanisms termed Rule Ordering and Execution and Parse on Demand.

Rule Ordering and Execution is a mechanism using indicators allow certainty to be reached quickly. Rules are ordered and placed into test groups. After each group is executed the current score is checked and a decision is made whether a message is spammy enough. If so then logic discontinues rule processing and announces the verdict that a message is spam.

Parse on Demand performs message parsing as part of anti spam logic only when required. For example if parsing only message headers results in a determination that a message is spam then no other parsing operations are performed. In particular rules applicable to message headers can be very good indicators of spam if anti spam logic determines that a message is spam based on header rules then the body is not parsed. As a result performance of anti spam logic increases because parsing headers is computationally expensive than parsing the message body.

As another example the message body is parsed but HTML elements are excluded if rules applied to non HTML body elements result in a verdict of spam. Parsing the HTML or testing for URI blacklisting as described further below is performed only when required.

In step an electronic mail message is received having a destination address for a recipient account. The message comprises a plurality of message elements. The elements typically include headers a raw body and HTML body elements.

In step a next message element is extracted. As indicated in block A step can involve extracting the headers raw body or HTML body elements. As an example assume that only the message headers are extracted at step . Extracting typically involves making a transient copy into a data structure.

In step a next rule is selected among a set of rules for the same element type based on the order of the priorities of the rules. Thus step reflects that for the current message element extracted at step only rules for that element type are considered and the rules are matched according to the order of their priorities. For example if the message headers were extracted at step then only header rules are matched. Unlike past approaches the entire message is not considered at the same time and all the rules are not considered at the same time.

In step a threat score value for the message is determined by matching only the current message element to only the current rule. Alternatively steps and can involve selecting all rules that correspond to the current message element type and matching all such rules to the current message element. Thus encompasses performing an early exit by testing after each rule or matching all rules for a particular message element type and then determining if early exit is possible.

When the threat score value is greater than a specified threshold as tested in step an exit from scanning parsing and matching is performed at step and the threat score value is output at step . As a result early exit from the scanning process is accomplished and the threat score value may be output far more rapidly when the threshold is exceeded early in the scanning extracting and rule matching process. In particular the computationally costly process of rendering HTML message elements and matching rules to them can be skipped if header rules result in a threat score value that exceeds the threshold.

However if the threat score value is not greater than the threshold at step then a test is performed at step to determine if all rules for the current message element have been matched. In the alternative noted above in which all rules for a message element are matched before the test of step step is not necessary. If other rules exist for the same message element type then control returns to step to match those rules. If all rules for the same message element type have been matched then control returns to step to consider the next message element.

The process of may be implemented in an anti spam scanning engine an anti virus scanner or a generic threat scanning engine that can identify multiple different kinds of threats. The threats can comprise any one of a virus spam or a phishing attack.

Accordingly in an embodiment a logical engine that performs anti spam anti virus or other message scanning operations does not perform tests or operations on a message once certainty about the message disposition has been reached. The engine groups rules into priority sets so that the most effective and least costly tests are performed early. The engine is logically ordered to avoid parsing until a specific rule or group of rules requires parsing.

In an embodiment rule priority values are assigned to rules and allow rules to be ordered in execution. For example a rule with a priority of 4 runs before a rule with priority 0 and a rule with priority 0 runs before a rule with priority 1000. In an embodiment rule priority values are assigned by an administrator when rule sets are created. Example rule priorities include 4 3 2 1 BOTH VOF and are assigned based on the efficacy of the rule the rule type and the profiled overhead of the rule. For example a header rule that is very effective and is a simple regular expression comparison may be a 4 run first priority. BOTH indicates that a rule is effective for detecting both spam and viruses. VOF indicates a rule that is performed to detect a virus outbreak.

In an embodiment threat identification team determines rule grouping and ordering and assigns priorities. TI team also can continuously evaluate the statistical effectiveness of the rules to determine how to order them for execution including assigning different priorities.

In an embodiment first the message headers are parsed and header rules run. Next message body decoding is performed and raw body rules are run. Last HTML elements are rendered and body rules and URI rules are run. After each parsing step a test is performed to determine if the current spam score is greater than a spam positive threshold. If so then the parser exits and subsequent steps are not performed. Additionally or alternatively the test is performed after each rule is run.

Table 3 is a matrix stating an example operational order of events within anti spam logic in an implementation of Early Exit. The HEAD row indicates the message HEAD is parsed and header tests are run and such tests support early exit and are allowed to have the full priority range 4 . . . VOF .

Certain spam messages may case anti spam logic to require an extensive amount of time to determine a verdict about whether the message is spam. Thus spam senders may use poison message attacks that repeatedly send such a difficult message in an attempt to force the system administrator to disable anti spam logic . To address this issue and improve performance in an embodiment message anti spam verdicts that anti spam logic generates are stored in a verdict cache in messaging gateway and anti spam logic reuses cached verdicts for processing messages that have identical bodies.

In an effective implementation when the verdict retrieved from the cache is the same as the verdict that would be returned by an actual scan the verdict is termed a true verdict . A verdict from the cache that does not match the verdict from a scan is referred to as a false verdict . In an effective implementation some performance gains are traded off to assure reliability. For example in an embodiment the digest of the message Subject line is included as part of the key to the cache which reduces the cache hit rate but also reduces the chance of a false verdict.

A spam sender may attempt to defeat the use of a verdict cache by including a non printing invalid URL tag that varies in form in the body successive messages that are otherwise identical in content. The use of such tags within the message body will cause a message digest of the body to be different among such successive messages. In an embodiment a fuzzy digest generating algorithm can be used in which HTML elements are parsed and non displayed bytes are eliminated from the input to the digest algorithm.

In an embodiment verdict cache is implemented as a Python dictionary of verdicts from anti spam logic . The key to the cache is a message digest. In an embodiment anti spam logic comprises Brightmail software and the cache key comprises a DCC fuz2 message digest. Fuz2 is an MD5 hash or digest of those portions of a message body that are meaningfully unique. Fuz2 parses HTML and skips over bytes in the message that do not affect what the user sees when viewing the message. Fuz2 also attempts to skip portions of the message that are frequently changed by spam senders. For example a Subject line that begins with Dear is excluded from the input to the digest.

In an embodiment when anti spam logic begins processing a message that is eligible for spam or virus scanning a message digest is created and stored. If creating a message digest fails or if use of verdict cache is disabled the digest is set to None. The digest is used as a key to perform a lookup in verdict cache to determine whether a previously computed verdict has been stored for a message with an identical message body. The term identical means identical in the parts of the message that the reader sees as meaningful in deciding whether or not the message is spam. If a hit occurs in the cache then the cached verdict is retrieved and further message scanning is not performed. If no digest is present in the cache then the message is scanned using anti spam logic .

In an embodiment verdict cache has a size limit. If the size limit is reached the least recently used entry is deleted from the cache. In an embodiment each cache entry expires at the end of a configurable entry lifetime. The default value for the lifetime is 600 seconds. The size limit is set to 100 times the entry lifetime. Therefore the cache requires a relatively small amount of memory of about 6 MB. In an embodiment each value in the cache is a tuple comprising the time entered a verdict and the time that anti spam logic took to complete the original scan.

In an embodiment if the requested cache key is present in the cache then the time entered of the value is compared to current time. If the entry is still current then the value of the item in the cache is returned as the verdict. If the entry has expired it is deleted from the cache.

In an embodiment several attempts may be made to compute a message digest before a verdict is cached. For example fuz2 is used if available otherwise fuz1 is used if available and otherwise all mime parts is used as a digest if available otherwise no cache entry is created. An all mime part digest comprises in one embodiment a concatenation of digests of the message s MIME parts. If there are no MIME parts a digest of the entire message body is used. In an embodiment the all mime parts digest is computed only if anti spam logic performs a message body scan for some other reason. Body scanning extracts the MIME parts and the marginal cost of computing the digest is negligible therefore the operations can be combined efficiently.

In an embodiment the verdict cache is flushed whenever messaging gateway receives a rule update from rules URLs server . In an embodiment the verdict cache is flushed whenever a change in the configuration of anti spam logic occurs for example by administrative action or by loading a new configuration file.

In an embodiment anti spam logic can scan multiple messages in parallel. Therefore two or more identical messages could be scanned at the same time causing a cache miss because the verdict cache is not yet updated based on one of the messages. In an embodiment the verdict is cached only after one copy of the message is fully scanned. Other copies of the same message that are currently being scanned are cache misses.

In an embodiment anti spam logic periodically scans the entire verdict cache and deletes expired verdict cache entries. In that event anti spam logic writes a log entry in log file that reports counts of cache hits misses expires and adds. Anti spam logic or verdict cache may maintain counter variables for the purpose of performing logging or performance reporting.

In other embodiments cached digests may be used for message filters or anti virus verdicts. In an embodiment multiple checksums are used to create a richer key that provides both a higher hit rate and a lower rate of false verdicts. Further other information may be stored in the verdict cache such as the amount of time required to scan a long message for spam.

Optimizations can be introduced to address particular requirements of specific anti spam software or logic. For example Brightmail creates a tracker string and returns the tracker string with a message verdict the tracker string can be added to the message as an X Brightmail Tracker header. The tracker string can be used by Brightmail s plug in to Microsoft Outlook to implement language identification. The tracker string is also sent back to Brightmail when the plug in reports a false positive.

Both the verdict and the tracker string can be different for messages that have identical bodies. In some cases the body is non spam but spam is encoded in the subject. In one approach the message Subject line is included with the message body as input to the message digest algorithm. However the Subject line can be different when the body of the message is clearly spam or clearly a virus of both. For example two messages can contain the same virus and be considered spam by Brightmail but the Subject header may be different. Each message may have a brief text attachment that is different from the other message and may have different names. The name of the files in the attachments may be different. However when both messages are scanned the same verdict will result.

In an embodiment cache hit rate is improved using a virus positive rule. If the digest of an attachment matches a virus positive verdict and spam positive verdict then the previous spam verdict is reused even if the Subject and prologue are different.

In some similar messages a different From value and a different Message ID line result in generating different tracker strings. The spam verdict is the same but an obviously false From value and an obviously false Message ID will result in finding the verdict sooner and reporting other rules in the tracker string. In an embodiment the From header and the Message ID header are deleted from the second message and the message is re scanned and the tracker header becomes is the same as for the first message.

4.0 Methods of Detection of Viruses Based on Message Heuristics Sender Information Dynamic Quarantine Operation and Fine Grained Rules

According to one approach detecting viruses using heuristic approaches is provided. Basic approaches for detecting virus outbreaks are described in copending application Ser. No. 11 006 209 filed Dec. 6 2004 Method and apparatus for managing computer virus outbreaks of Michael Olivier et al.

In this context message heuristics refers to a set of factors that are used to determine the likelihood that a message is a virus when no signature information about the message is available. Heuristics may comprise rules to detect words or phrases that are commonly used in spam. Heuristics may vary according to a language used in the message text. In an embodiment administrative users can select which language heuristics to use in anti spam scanning. Message heuristics may be used to determine a VSV value. Heuristics of a message may be determined by a scanning engine that performs basic anti spam scanning and anti virus scanning.

A message can be placed in quarantine storage because it may contain a virus based on the results of heuristic operations rather than or in addition to definitions of virus outbreaks. Such definitions are described in the application of Olivier et al. referenced above. Thus the corpus server cluster contains a past history of viruses and if a message matches a pattern in that past history as a result of the heuristics then the message may be quarantined regardless of whether it matches the definitions of a virus outbreak. Such early quarantining provides a beneficial delay in message processing while the TOC prepares a definition of a virus outbreak.

Variable quarantine time is used in one embodiment. The quarantine time may be increased when the heuristics indicate a higher likelihood that a message contains a virus. This provides maximum time for a TOC or anti virus vendor to prepare rules or definitions while applying minimum quarantine delay to messages that are less likely to contain a virus. Thus the quarantine time is coupled to the probability that a message contains a virus resulting in optimum use of quarantine buffer space as well as minimizing the time of quarantining a message that is not viral.

According to one approach a virus score is determined and stored in a database in association with an IP address value of a sender of the message. The score thus indicates the likelihood that a message originating from the associated address will contain a virus. The premise is that machines that send one virus are likely to become infected with another virus or to become re infected with the same virus or an updated virus because those machines are not well protected. Further if a machine is sending spam then it is more likely to be sending a virus.

The IP address may specify a remote machine or may specify a machine that is within a corporate network that a messaging gateway is protecting. For example the IP address may specify a machine within the corporate network that inadvertently became infected with a virus. Such an infected machine is likely to send other messages that contain the virus.

In a related approach a virus outbreak detection check can be performed at the same time in overall message processing as a spam check within the messaging gateway . Thus virus outbreak detection can be performed at the same time that a message is parsed and subjected to spam detection. In one embodiment one thread performs the foregoing operations in an ordered serial manner. Further the results of certain heuristic operations can be used to inform both an anti spam detection operation and an anti virus detection operation.

In an embodiment the VSV value is determined based upon any one or more of filename extension volume spikes in message volume on a local basis on a global basis identified per sender and per content based on attachment content such as Microsoft executables and sender based threat identification information. In various embodiments a variety of sender based threat identification information is used. Examples include dynamic or dial up host blacklists exploited host blacklists and virus hot zones.

Dynamic and dial up hosts connecting to the Internet generally send outgoing mail through a local SMTP server. When a host connects directly to an external SMTP server such as messaging gateway the host probably has been compromised and is sending either spam messages or an email virus. In an embodiment messaging gateway comprises logic that maintains a blacklist of dynamic hosts that have operated in the preceding manner in the past or connects to a dynamic host blacklist may be obtained at an external source such as the NJABL dynamic hosts list and SORBS dynamic hosts list.

In this embodiment identifying message characteristics of an incoming message at step of further comprises determining if a sender of the message is in the dynamic host blacklist. If so then a higher VSV value is determined or assigned.

Step also may comprise connecting to or managing an exploited host blacklist and determining if the sender of the message is on the exploited host blacklist. An exploited host blacklist tracks hosts that are known to be infected by viruses or that are known to send spam based on the content that infected hosts are sending and locating hosts that have been infected by connect time scanning. Examples include XBL CBL and OPM and DSBL.

In another embodiment service provider creates and stores an internal blacklist of senders and networks that have a past history of sending viruses based on sender information received from customer messaging gateways . In an embodiment customer messaging gateways periodically initiate network communications to corpus server cluster and report the network addresses e.g. IP addresses of senders of messages that internal logic of the messaging gateways determined to be spam or associated with viruses or other threats. Logic at service provider can periodically scan the internal blacklist and determine if any network addresses are known to send only viruses or spam. If so the logic can store high threat level values or VSVs in association with those addresses. Moderate threat level values can be stored in association with network addresses that are known to send both viruses and legitimate email. Moderate or low threat level values can be associated with networks that contain one or more individual infected hosts.

Testing against the blacklists can be initiated using rules of the type described above. For example the following rules can initiate blacklist testing 

In prior approaches messages are released from quarantine in first in first out order. Alternatively a first to exit algorithm may be used in another embodiment. In this approach when the quarantine buffer is full an ordering mechanism determines which messages should be released first. In one embodiment messages that are deemed least dangerous are released first. For example messages that have been quarantined as a result of heuristics are released first and messages that have been quarantined as a result of matching virus outbreak tests are released second. To support this mechanism each quarantined message is stored in the quarantine of a messaging gateway in association with information indicating a reason for the quarantine. Thereafter a process in the messaging gateway can release messages based on the reasons.

The ordering may be configured in a data driven fashion by specifying the order in a configuration file that is processed by the messaging gateway . Thus publishing a new configuration file containing the ordering from the service provider to customer messaging gateways automatically causes those messaging gateways to adopt the new ordering.

Similarly different actions can be taken on quarantined messages when those messages leave the quarantine based on the threat level associated with the messages when they leave the quarantine. For example messages that appear extremely threatening but may leave the quarantine as a result of overflow can be subjected to a strip and deliver operation in which attachments are stripped and the message is delivered to the recipient without the attachments. Alternatively a message with a lower threat level is delivered as normal.

In still another alternative an X header could be added to lower threat level messages. This alternative is appropriate when a client email program e.g. Eudora Microsoft Outlook is configured with a rule to recognize the X header and place messages with the X header in a special folder e.g. Potentially Dangerous Messages . In yet another alternative a file attachment of a message with a particular threat level is renamed the message is de fanged requiring the receiving user to affirmatively rename the file attachment again to make it usable with an application. This approach is intended to cause the user to examine the file carefully before renaming and opening it. The message could be forwarded to an administrator for evaluation. Any of these alternatives can be combined in an embodiment.

Alternatively rescanning might reduce or increase the quarantine time of a message. This minimizes the number of messages in the quarantine and reduces the likelihood of releasing infected messages. Such inadvertent release could occur for example if the quarantine had a fixed release time and the fixed release timer expired before an anti virus vendor or other source released a virus definition that would trap the released message. In that scenario a malicious message would be automatically released and downstream processing would not trap it.

In an embodiment any of several events may trigger rescanning messages in a message quarantine. Further the approach of applies to processing messages that are in a quarantine as a result of viruses spam or other threats or undesired characteristics of messages. In step a re scanning timer is started and runs until expiration and upon expiration re scanning all messages in the quarantine queue is triggered at step .

Additionally or alternatively in step the messaging gateway receives one or more new virus threat rules anti spam rules URLs scores or other message classification information from Rules URLs server . Receiving such information also can trigger re scanning at step . The new rules scores and other information are used in the re scanning step to generate a new VSV for each message in the quarantine. For example the TOC server may publish through rules URL server a set of rules for a virus outbreak that are initially broad and later narrow the scope of the rules as more information about the outbreak becomes known. As a result messages that matched the earlier rule set may not match the revised rules and become known false positives. The approach herein attempts to release known false positives automatically in response to a rule update without intervention by an administrator of messaging gateway .

In an embodiment each message in the quarantine queue has a stored time value indicating when the message entered the quarantine and re scanning at step is performed in order of quarantine entry time oldest message first.

In step a test is performed to determine if the new VSV for a message is greater than or equal to a particular threshold value as in step of . The VSV threshold value is set by an administrator of a messaging gateway to determine tolerance for quarantining messages. If the VSV is below the threshold then the message probably can be released from the quarantine. Therefore control passes to step at which a normal quarantine exit delivery policy is applied.

Optionally in an embodiment a messaging gateway may implement a separate reporting threshold. When a message has a VSV that exceeds the reporting threshold as tested at step the messaging gateway notifies the service provider at step and continues processing the message. Such notifications may provide important input to determining the occurrence of new virus outbreaks. In certain embodiments such reporting is an aspect of SenderBase Network Participation SBNP and can be selectively enabled by an administrator using a configuration setting.

Applying a delivery policy at step may comprise immediately queuing the message for delivery to a recipient in unmodified form or stripping attachments or performing content filtering or performing other checks on the message. Applying a delivery policy may comprise adding an X header to the message indicating a virus scan result. All applicable X headers may be added to the message in the order in which actions occurred. Applying a delivery policy may comprise modifying a Subject line of the message to indicate the possible presence of a virus spam or other threat. Applying a delivery policy may comprise redirecting the message to an alternate recipient and storing an archived copy of the message for subsequent analysis by other logic systems or persons.

In an embodiment applying a delivery policy at step comprises stripping all attachments from the message before delivering it when the message is in any of several quarantines and one quarantine determines that stripping attachments is the correct action. For example a messaging gateway may support a virus outbreak quarantine queue and a separate quarantine queue that holds messages that appear to violate a policy of the gateway such as the presence of disallowed words. Assume that the virus outbreak quarantine queue is configured to strip attachments upon overflow before delivery. Assume the message is in both the virus outbreak quarantine queue and the separate policy quarantine queue and happens to overflow the virus outbreak quarantine queue . If an administrator then manually releases the same message from the policy quarantine queue then the attachments are stripped again before delivery.

If the test of step is true then the message is problematic and probably needs to be retained in the quarantine.

Optionally each message may be assigned an expiration time value and the expiration time value is stored in a database of messaging gateway in association with quarantine queue . In an embodiment the expiration time value is equal to the time at which the message entered the quarantine queue and a specified retention time. The expiration time value may vary based upon message contents or heuristics of a message.

In step a test is performed to determine if the message expiration time has expired. If so then the message is removed from the quarantine but the removal of a message at that point is deemed an abnormal or early exit and therefore an abnormal exit delivery policy is applied at step . Thereafter the message can be delivered in step subject to the delivery policy of step . The delivery policy that is applied at step may be different than the policy that is applied at step . For example the policy of step could provide for unrestricted delivery whereas at step for delivery of messages that are suspect but have been in the quarantine for longer than the expiration time removing attachments could be required.

If the message time has not expired at step then the message is retained in the quarantine as shown at step . If the rule that causes the VSV to exceed the threshold changes then the rule name and description are updated in the message database.

In various embodiments different steps of may cause the messaging gateway to send one or more alert messages to an administrator or to specified user accounts or groups. For example alerts can be generated at steps or . Example alert events include reaching specified quarantine fill levels or space limits quarantine overflow receiving a new outbreak rule e.g. a rule that if matched sets a VSV higher than the quarantine threshold value that is configured in the messaging gateway receiving information removing an outbreak rule and a failure in an attempt to update new rules in the messaging gateway. Information removing an outbreak rule may comprise receiving a new rule that reduces a threat level of a particular type of message below the quarantine threshold value that is configured in the messaging gateway.

Further different steps of may cause the messaging gateway to write one or more log entries in log file describing actions that were performed. For example log file entries can be written when messages are released abnormally or in an early exit. Alerts or log entries can be sent or written as the quarantine fills at specified levels. For example alerts or log entries are sent or written when the quarantine reaches 5 full 50 full 75 full etc. Log entries may include quarantine receipt time quarantine exit time quarantine exit criteria quarantine exit actions number of messages in quarantine etc.

In other embodiments alert messages can indicate scanning engine update failures rule update failures failure to receive a rule update in a specified time period rejection of a specified percentage of messages rejection of a specified number of messages etc.

A plurality of exit criteria can enable a message to leave the quarantine . Example exit criteria include expiration of a time limit overflow manual release or a rule update . When an exit criteria is satisfied one or more exit actions then occur. Example exit actions include strip and deliver delete normal delivery tagging the message subject with keywords e.g. SPAM and adding an X header . In another embodiment exit actions can include altering the specified recipient of the message.

In one embodiment messaging gateway maintains a data structure that defines for each sending host associated with a message policies for acting on messages received from that host. For example a Host Access Table comprises a Boolean attribute value indicating whether to perform for that host virus outbreak scanning as described herein for .

Further each message processed in messaging gateway may be stored in a data structure that carries metadata indicating what message processing to perform within the messaging gateway. Examples of metadata include the VSV value of the message the name of the rule that resulted in the VSV value and the corresponding rule description the message quarantine time and overflow priority flags to specify whether to perform anti spam and anti virus scanning and virus outbreak scanning and a flag to enable content filters to be bypassed.

In an embodiment a set of configuration information stored in messaging gateway specifies additional program behavior for virus outbreak scanning for each potential recipient of a message from the gateway. Since messaging gateway typically controls message traffic to a finite set of users e.g. employees contractors or other users in an enterprise private network such configuration information may be managed for all potential recipients. For example a per recipient configuration value may specify a list of message attachment file extension types .doc .ppt etc. that are excluded from consideration by the scanning described herein and a value indicating that a message should not be quarantined. In an embodiment the configuration information can include a particular threshold value for each recipient. Thus the tests of step and step may have a different outcome for different recipients depending upon the associated threshold values.

Messaging gateway may also manage a database table that counts messages that have been filtered using the techniques of the VSV of such messages and a count of messages that were sent to the message quarantine .

In one embodiment each message quarantine has a plurality of associated programmatic actions that control how messages exit the quarantine. Referring again to exit actions may include manual release of a message from the message quarantine based on operator decision . Exit actions may include automatic release of a message from the message quarantine when an expiration timer expires as in . Exit actions may include an early exit from the message quarantine when the quarantine is full as an implementation of overflow policy . Early exit refers to prematurely releasing a message before the end of an expiration time value associated with the message based on a resource limitation such as queue overflow.

Normal message exit actions and early exit actions may be organized as a primary action and a secondary action of the type described above for delivery policy step . Primary actions may include Bounce Delete Strip Attachments and Deliver and Deliver. Secondary actions may include Subject tag X header Redirect or Archive. The secondary actions are not associated with a primary action of Delete. In an embodiment the secondary action of Redirect enables sending messages to a secondary off box quarantine queue that is hosted at corpus server cluster or another element within service provider rather than on the messaging gateway . This approach enables TI team to examine quarantined messages.

In an embodiment early exit actions from the quarantine resulting from quarantine queue overflow may include any of the primary actions including Strip Attachments and Deliver. Any of the secondary actions may be used for such early exit. An administrator of the messaging gateway may select the primary action and the secondary action for use upon early exit by issuing a configuration command to the messaging gateway using a command interface or GUI. Additionally or alternatively message heuristics determined as a result of performing anti virus scanning or other message scanning may cause different early exit actions to be performed in response.

In an embodiment a local database in messaging gateway stores names of file attachments of received messages that are in the message quarantine and the size of the file attachment.

Re scanning at step may occur for a particular message in response to other actions of the messaging gateway . In an embodiment messaging gateway implements a content filter that can change the content of a received message according to one or more rules. If a content filter changes the content of a received message that was previously scanned for viruses then the VSV value of that message could change upon re scanning. For example if the content filter strips attachments from the message and a virus was in an attachment the stripped message may no longer have a virus threat. Therefore in an embodiment when a content filter changes the content of a received message re scanning at step is performed.

In an embodiment an administrator of messaging gateway can search the contents of quarantine using console commands or other user interface commands. In an embodiment searches can be performed based on attachment names attachment types attachment size and other message attributes. In an embodiment searching by file type can be performed only on messages that are in quarantine and not in a policy quarantine or other quarantine because such searching requires a scan of the message body that may negatively impact performance. In an embodiment the administrator can display the contents of the virus outbreak quarantine in a sorted order according to any of the foregoing attributes.

In an embodiment when messages are placed in quarantine through the process of or the messaging gateway automatically displays a view of the virus outbreak quarantine. In an embodiment the view includes for each message in the quarantine the following attribute values outbreak identifier or rule name sender name sender domain recipient name recipient domain subject name attachment name attachment type attachment size VSV quarantine entry time quarantine remaining time.

In an embodiment messaging gateway stores a reinsertion key comprising an optional unique text string that can be associated with messages that have been manually released from the quarantine . When a released message has a reinsertion key associated therewith the released message cannot be quarantined again during subsequent processing in messaging gateway prior to delivery.

Message rules are abstract statements which if matched in comparison to a message in the anti spam logic result in a higher spam score. Rules may have rule types. Example rule types include compromised host suspected spam source header characteristics body characteristics URI and learning. In an embodiment specific outbreak rules can be applied. For example a virus outbreak detection mechanism might determine that a certain type of message with a ZIP file attachment of 20 kb in size represents a virus. The mechanism can create a rule under which customer messaging gateways will quarantine messages with 20 kb ZIP attachments but not messages with 1 MB ZIP attachments. As a result fewer false quarantine operations occur.

In an embodiment virus information logic comprises logic that supports establishing rules or tests on message headers and message bodies to identify fixed strings or regular expressions. For example an embodiment permits defining the following rules 

In an embodiment function tests can test specific aspects of a message. Each function executes custom code to examine messages information already captured about messages etc. The tests cannot be formed using simple logical combinations of generic header or body tests. For example an effective test for matching viruses without examining file content is comparing the extension of the filename or name MIME field to the claimed MIME Content Type. If the extension is doc and the Content Type is neither application octet stream nor application . word then the content is suspicious. Similar comparisons can be performed for PowerPoint Excel image files text files and executables.

Other examples of tests include testing whether the first line of base 64 type content matches the regular expression TV nopqr indicating a Microsoft executable testing whether email priority is set to High but there is no X Mailer or User Agent header testing whether the message is multipart alternative but alternative parts are very different in content testing whether the message is multipart but contains only HTML text looking for specific MIME boundary formats for new outbreaks.

In an embodiment virus information logic comprises logic that supports establishing meta rules that comprise a plurality of linked rules. Examples include 

In an embodiment virus information logic comprises logic that supports establishing and testing messages against rules that are based upon file attachment size file name keywords encrypted files message URLs and anti virus logic version values. In an embodiment rules relating to file attachment size are established based on discrete values rather than every possible size value for example rules can specify file size in 1K increments for files from 0 5 K in 5 K increments for files that are sized from 5K to 1 MB and in 1 MB increments.

File name keyword rules match on a message when a file attachment to the message has a name that includes one or more keywords in the rules. Encrypted file rules test whether or not a file attachment is encrypted. Such rules may be useful to quarantine messages that have encrypted containers such as encrypted ZIP files as attachments to messages. Message URL rules match on a message when the message body contains one or more URLs specified in the rules. In an embodiment a message is not scanned to identify URLs unless at least one message URL is installed in the system.

Rules based on anti virus logic version values match a message when the messaging gateway is running anti virus logic having a matching version. For example a rule may specify an AV signature version of 7.3.1 and would match on messages if a messaging gateway is running AV software with a signature file having that version number.

In an embodiment a messaging gateway automatically reduces a stored VSV for a message upon receiving a new rule that is more specific for a set of messages than a previously received rule. For example assume that the TOC initially distributes a rule that any message with a .ZIP file attachment is assigned VSV 3 . The TOC then distributes a rule that .ZIP file attachments between 30 KB and 35 KB have VSV 3 . In response messaging gateway reduces the VSVs of all messages with .ZIP attachments of different file sizes to a default VSV e.g. 1 .

In an embodiment anti spam logic can learn to identify legitimate email specific to an organization based on outbound message characteristics such as recipient addresses recipient domains and frequently used words or phrases. In this context an outbound message is a message composed by a user account associated with computers A B C on private network and directed through messaging gateway to a recipient account that is logically outside the messaging gateway. Such a recipient account typically is on a computer that is connected to public network . Since all outbound messages pass through messaging gateway before delivery into network and such outbound messages are nearly never spam the messaging gateway can scan such messages and automatically generate heuristics or rules that are associated with non spam messages. In an embodiment learning is accomplished by training a Bayesian filter in anti spam logic on the text of outbound messages and then using the Bayesian filter to test inbound messages. If the trained Bayesian filter returns a high probability then the inbound message probably is not spam according to the probability that the outbound messages are not spam.

In an embodiment messaging gateway periodically polls the rules URLs server to request any available rule updates. HTTPS may be used to deliver rule updates. In an embodiment an administrator of messaging gateway can access and examine rule updates by entering URLs of the rule updates and connecting to rules URLs server using a browser and a proxy server or fixed address. An administrator can then delivery the updates to selected messaging gateways within a managed network. Receiving a rule update may comprise displaying a user notification in an interface of messaging gateway or writing an entry in log file stating that a rule update was received or that the messaging gateway successfully connected to the rules URLs server .

Customer messaging gateways in may implement a phone home or SenderBase Network Participation service in which the messaging gateways can open connections to the service provider and provide information about the messages that the messaging gateways have processed so that such information from the field can be added to the corpus and otherwise used at the service provider to improve scoring outbreak detection and heuristics.

In one embodiment a tree data structure and processing algorithm are used to provide efficient data communication from messaging gateways to the service provider.

Data from service provider generated as part of anti spam and anti virus checks is sent to messaging gateways in the field. As a result the service provider creates metadata describing what data the service provider wants the messaging gateways to return to the service provider. The messaging gateways collate data matching the metadata for a period of time e.g. 5 minutes. The messaging gateways then connect back to the service provider and provide field data according to the specifications of the metadata.

In this approach defining and delivering different metadata to the messaging gateways at different times enables the service provider to instruct the messaging gateways in the field to deliver different data back to the service provider. Thus the phone home service becomes extensible at the direction of the service provider. No update to software at the MGA is required.

In one implementation a tree is implemented as a hash of hashes. A standard mapping of nested hashes or dictionaries in Python to trees existed. Certain nodes are named in a way that the data returns from the MGA about which things are which. By naming nodes in the tree rather than describing things solely based on their position the MGA does not need to know what the service provider will do with the data. The MGA merely needs to locate the correct data by name and send a copy of the data back to the service provider. The only thing the MGA needs to know is the type of the data that is whether the data is a numeric value or string. The MGA does not need to perform computations or transformations of the data to suit the service provider.

Constraints are placed on the structure of the data. Rules are that endpoints of the tree are always one of two things. If the target data is a number then the leaf node is a counter. When the MGA sees the next message that comes through it increments or decrements the counter for that node. If the target data is a string then the leaf node is overwritten with that string value.

Using the counter approach any form of data can be communicated. For example if the MGA needs to communicate an average score value back to the service provider rather than having the service provider inform the MGA that the service provider wants the MGA to return a particular value as an average score two counters are used one for the top value and one for the bottom value. The MGA need not know which is which. It simply counts the prescribed values and returns them. Logic at the service provider knows that the values received from the MGA are counters and need to be averaged and stored.

Thus this approach provides a method for transparent collation and transfer of data in which the device transferring the data does not know the specific use of the data but can collate and provide the data. Further the service provider can update its software to request additional values from messaging gateways but no update to the MGA software is required. This enables the service provider to collect data without having to change hundreds or thousands of messaging gateways in the field.

Example data that can be communicated from a messaging gateway to service provider includes X header values containing obfuscated rules that matched on a particular message and resulted in a spam verdict.

In the configuration of customer messaging gateways can be deployed in a customer network so that they receive and process both inbound and outbound message traffic. Therefore a messaging gateway can be configured with an outbound message whitelist. In this approach the destination network addresses of designated messages leaving the messaging gateway are placed in an outbound message whitelist with a weight value. The outbound message whitelist is consulted when an inbound message is received and inbound messages having source network addresses in the outbound whitelist are delivered if the weight value is appropriate. That is the weight value is considered in determining if the message should be delivered the presence of an address in the outbound whitelist does not necessarily mandate delivery. The rationale is that a message received from an entity in the outbound whitelist should not be spam or threatening because sending a message to that entity implicitly indicates trust. The outbound whitelist may be maintained at the service provider for distribution to other customer messaging gateways .

Determining weight values may be performed with several approaches. For example a destination address can be processed using a reputation scoring system and a weight value can be selected based on the resulting reputation score. Message identifiers can be tracked and compared to determine if an inbound message is actually replying to a prior message that was sent. A cache of message identifiers may be used. Thus if the Reply To header contains a message identifier of a message previously sent by the same messaging gateway then it is likely that the reply is not spam or a threat.

The approach for managing computer virus outbreaks described herein may be implemented in a variety of ways and the invention is not limited to any particular implementation. The approach may be integrated into a electronic mail system or a mail gateway appliance or other suitable device or may be implemented as a stand alone mechanism. Furthermore the approach may be implemented in computer software hardware or a combination thereof.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse trackball stylus or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

The invention is related to the use of computer system for applying heuristic tests to message content managing a dynamic threat quarantine queue and message scanning with early exit from parsing and scanning. According to one embodiment of the invention applying heuristic tests to message content managing a dynamic threat quarantine queue and message scanning with early exit from parsing and scanning is provided by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another machine readable medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus embodiments of the invention are not limited to any specific combination of hardware circuitry and software.

The term machine readable medium as used herein refers to any medium that participates in providing instructions to processor for execution. Such a medium may take many forms including but not limited to non volatile media volatile media and transmission media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infrared data communications.

Common forms of machine readable media include for example a floppy disk a flexible disk hard disk magnetic tape or any other magnetic medium a CD ROM any other optical medium punchcards papertape any other physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM any other memory chip or cartridge a carrier wave as described hereinafter or any other medium from which a computer can read.

Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infrared transmitter to convert the data to an infrared signal. An infrared detector can receive the data carried in the infrared signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the worldwide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are exemplary forms of carrier waves transporting the information.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface . In accordance with the invention one such downloaded application provides for applying heuristic tests to message content managing a dynamic threat quarantine queue and message scanning with early exit from parsing and scanning as described herein.

Processor may execute the received code as it is received and or stored in storage device or other non volatile storage for later execution. In this manner computer system may obtain application code in the form of a carrier wave.

In the foregoing specification the invention has been described with reference to specific embodiments thereof. It will however be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. The invention includes other contexts and applications in which the mechanisms and processes described herein are available to other mechanisms methods programs and processes.

In addition in this description certain process steps are set forth in a particular order and alphabetic and alphanumeric labels are used to identify certain steps. Unless specifically stated in the disclosure embodiments of the invention are not limited to any particular order of carrying out such steps. In particular the labels are used merely for convenient identification of steps and are not intended to imply specify or require a particular order of carrying out such steps. Furthermore other embodiments may use more or fewer steps than those discussed herein.

