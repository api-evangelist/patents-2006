---

title: Interfacing a device driver with an application using a virtual driver interface and a strategy
abstract: A virtual driver interface and strategy are presented for interfacing a device driver with an application. Devices connected to a computing device and device drivers capable of communicating with the device are provided on the computing device. The virtual driver interface determines which of the device drivers to use to allow an application to interact with a device based on a strategy.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09081585&OS=09081585&RS=09081585
owner: The MathWorks, Inc.
number: 09081585
owner_city: Natick
owner_country: US
publication_date: 20060331
---
The present invention generally relates to interfacing a device driver with an application using a virtual driver interface and a strategy.

Device drivers enable communication between an application on a computing device and devices connected to the computing device. Device drivers use driver interfaces to provide a standard interface between an application and the device driver that allows the application to interact with a device. Often several device drivers support a single device or a class of devices. This may be because of technology changes product obsolescence behavior differences or specialization. Conventionally a user of a computer system must determine which device driver to use for interfacing an application with a device.

Determining the appropriate device driver to use for interfacing an application with a device can be difficult. Many times the user s knowledge of device drivers is inadequate to select the most appropriate device driver for an application or a selected device. As a result the user does not know if the most appropriate device driver has been selected for a particular device.

To address the above identified issue embodiments of the present invention determine the appropriate device driver to use so that the user is not burdened with the responsibility of selecting the appropriate device driver. To accomplish this a virtual driver interface is provided. The virtual driver interface determines based on a strategy which of the device drivers to use for an application to interact with a device.

In one aspect of the present invention a method of interfacing with a device driver is disclosed. The method includes the steps of providing device drivers for use with devices and providing a virtual driver interface for interfacing an application with one or more of the device drivers for a device. The method further provides the step of determining with the virtual driver interface which of the device drivers to use for the application to interact with the device based on a first strategy.

In a further aspect of the present invention a system of interfacing with a device driver is disclosed. The system includes device drivers for use with devices and a virtual driver interface for interfacing an application with one or more of the device drivers for a device. The system further provides a first strategy for determining with the virtual driver interface which one of the device drivers to use for the application to interact with the device.

In another aspect of the present invention a method for interfacing with a device driver in an application for a test and measurement environment is disclosed. The method includes the steps of providing device drivers for use with a device and providing a virtual driver interface for interfacing a test and measurement application with one or more of the device drivers for a device. The method further provides the step of determining with the virtual driver interface which one of the device drivers to use for the test and measurement application to interact with the device based on a first strategy.

In yet another aspect of the present invention a system of interfacing with a device driver is disclosed. The system includes device drivers for use with devices and a virtual driver interface for interfacing a test and measurement application with one or more of the device drivers for a device. The system further provides a first strategy for determining with the virtual driver interface which of the device drivers to use for the application to interact with the device.

In still another aspect of the present invention another method of interfacing with a device driver is disclosed. The method includes the step of providing a plurality of device drivers where each device driver has a driver interface. The method also provides the steps of providing one or more virtual driver interfaces where each virtual driver interface comprises of at least one of the plurality of driver interfaces and providing a virtual composite driver interface comprising of at least one of the virtual driver interfaces. The method further provides the steps of determining with the virtual composite driver interface which one of the device drivers to use for an application to interact with a device based on a first strategy and interfacing the application with one or more of the device drivers based on the determination of the virtual composite driver interface.

In an additional aspect of the present invention a medium that holds instructions that are executable using a computing device to interface with a device driver is disclosed. The instructions enable the steps of providing device drivers for use with devices and providing a virtual driver interface for interfacing an application with one or more of the device drivers for a device. The method also provides the step of determining with the virtual driver interface which of the device drivers to use for the application to interact with the device based on a first strategy.

The illustrative embodiment of the present invention relieves a user from having to determine an appropriate device driver to use for an application or a selected device. To achieve this the illustrative embodiment provides a virtual driver interface that determines which of device drivers to use for an application to interact with a device based on a strategy. The illustrative embodiment provides the ability to develop a hierarchy with the virtual driver interfaces such that a virtual composite driver interface may include multiple virtual driver interfaces. The strategy may be anything that would allow the virtual driver interface to determine which of the device drivers to use to enable a selected application to interact with the device. A strategy for example may be based on a priority list a look up table a date that the driver was created a selected application program interface API a selected version of the device driver a selected configuration of devices interfaced with the computing device. As a result the illustrative invention determines and selects the appropriate device driver to use for a selected application and device not the user.

An application may be but is not limited to a test and measurement application. Test and measurement applications may provide but are not limited to the ability to test system functions monitor system behavior measure characteristics of system. One example of a test and measurement application and a test and measurement environment is the DATA ACQUISITION TOOLBOX DAT and MATLAB from The Mathworks Inc of Natick Mass. The DAT and MATLAB provide a complete set of tools for analog input analog output and digital I O from a variety of PC compatible data acquisition hardware. The DAT lets a user configure your external hardware devices read data into MATLAB for immediate analysis and send out data. In this manner MATLAB and the DAT offer a single integrated environment to support the entire data acquisition and analysis process. A user may analyze or visualize data save it for post processing and make iterative updates to a test setup based on analysis results.

The computing device may be an electronic device or an optical device and include a Central Processing Unit CPU memory storage a device interface a modem a network interface a display etc. The storage usually contains software for applications and device drivers. The storage includes in particular code for the operating system OS of the computing device code for applications running on the operating system and code for the device drivers . According to the illustrative embodiment the storage also may contain a virtual driver interface and in particular code for the virtual driver interface . Those of ordinary skill in the art will appreciate that the applications can be stored in the memory CPU cache or other computer readable memory as well much like the data the virtual driver interface device drivers and even the OS or they can be stored on the network described below with reference to . The memory temporarily stores instructions and data and provides them to the CPU so that the CPU operates the computing device to run the applications.

Optionally the computing device may include multiple CPUs for executing software loaded in the memory and other programs for controlling system hardware. Each of the CPUs can be a single or multiple core processor. The code loaded in the memory may run in a virtualized environment such as in a Virtual Machine VM . Multiple VM s may be resident on a single processor. Also part of the application could be run in hardware for example by configuring a field programmable gate array FPGA or creating an application specific integrated circuit ASIC . Further part of the application may be run with analog electronic devices.

The device interface may interface with a keyboard a mouse an oscilloscope a function generator a data acquisition card and other devices. It will be recognized by one skilled in the art that the above devices are examples of devices that could be connected to the computing device and are not meant to limit the devices that can be connected to the computing device. Users connect the computing device to the device through various interface options depending upon the device interface implemented by the particular device. Interface options include but are not limited to serial PCI USB Universal Serial Bus ISA general purpose interface bus GPM virtual machine environment extended for instrumentation VXI VXI GPIB and IEEE 1394 and 1451.

To enable communication between an application on the computing device and the connected devices device drivers are used. A device driver includes a library of executable functions that an application may call to establish communication with the device and control the parameters of communication. A device driver may be considered a dynamic link library DLL or some other type of shared library. Shared libraries such as DLLs may be used by several applications simultaneously. Shared libraries may include functions and or data that applications can use and reduce the need for repetitive code by having a single code that multiple applications can use. In some instances an application does not interface directly with a device driver but rather interfaces with a driver interface that provides the application with a standard interface that allows the application to interface with the device driver to communicate with the device. In the illustrative embodiment of the present invention the device drivers and or driver interfaces are virtually grouped by the virtual driver interface to provide a single interface to the application that allows the application to use the device driver to interact with the device.

In the network environment the servers and may provide the clients and with software applications and or device drivers. Servers and may provide the applications and or device drivers to the clients and under a particular condition such as a license agreement.

Client may for example run an application locally and server may provide a virtual driver interface and a strategy remotely. For example when client runs the application client connects to server to use the virtual driver interface provided by server to determine which of the device drivers on client should be used to interface the application with a device connected locally or remotely to the client . The virtual driver interface provides a single interface for all of the drivers associated with the virtual driver interface and allows the application to communicate with the device.

In another example client may run an application remotely on client server or server and the application may interact with devices connected to client locally or remotely. For this example client runs an application remotely on client . The virtual driver interface and strategy are located locally on client . Client accesses the virtual driver interface located on client to determine which device drivers to use to interface the remote application with the devices connected locally or remotely to client . Conversely the virtual driver interface and the strategy may be included in the application. Client may also run an application either locally or remotely where the application interacts with the networked device according to a device driver as determined by the virtual driver interface.

The examples of the various implementations using a distributed system are not meant to be limiting but rather are provided to illustrative a few of the possible implementations according to the present invention. One of ordinary skill in the art will recognize there are other possible implementations using a distributed system in accordance with the present invention.

Devices and represent devices that are connected to the computing device. The devices may be any device that can be connected to a computer device that requires a device driver. For example some devices that may be connected to the computing device include but are not limited to a keyboard a mouse an oscilloscope a function generator and a data acquisition card.

Device drivers and allow an application being run by the computing device to communicate with a device connected to the computing device. Device drivers typically use machine language to perform the functions requested by an application. An application typically cannot communicate with a device directly because each device uses specific machine code for controlling the device. The device driver therefore functions to translate function calls from the application into device specific calls to allow the application to communicate with the device.

Virtual driver interface groups device drivers according to some aspect of the device driver and provides an application with a single interface for all of the device drivers grouped by the virtual driver interface. Virtual driver interface may virtually group device drivers in any manner. Some examples of groups include but are not limited to a grouping by vendor by type of device or by class of device. A vendor may be anyone who provides devices and or device drivers. Types of devices may be but are not limited to pointing devices printing devices or oscilloscopes. Classes of devices may include but are limited to instrumentation devices imaging devices or audio devices.

The lines connecting the items in do not represent physical connections and are merely shown to provide a sense of hierarchy. For example the line connecting device to device driver and the line connecting device to device driver associate device with device drivers and such that device drivers and both may be used by an application to communicate with device . To provide further hierarchy the lines connecting device drivers and to the virtual driver interface associate device drivers and with the virtual driver interface such that device drivers and belong to the group that virtual driver interface has designated.

Device is capable of being driven by either device driver or device driver therefore it is necessary to choose one of the device drivers to use to allow the application to interact with the device . The virtual driver interface uses strategy to determine which of the device drivers or to use with the device . Strategy may be anything that would allow the virtual driver interface to determine which one of the device drivers to use to allow a selected application to interact with the device. Examples of strategies include but are not limited to a priority list a look up table a date that the driver was created a selected application program interface API a selected version of the device driver a selected configuration of devices interfaced with the computing device.

For purposes of the virtual driver interface is grouped by vendor such that all device drivers corresponding to vendor are associated with the virtual driver interface . The lines connecting the items in do not represent physical connections and are merely shown to provide a sense of hierarchy. Lines and for example indicate that device drivers and and respective driver interfaces and are associated with the virtual driver interface. In the present example lines and indicate that device is associated with two device drivers and from vendor such that device is capable of being driven by either device driver or device driver . The virtual driver interface uses strategy to determine which of the device drivers to use with the device .

Each virtual driver interface may include one or more device drivers and or driver interfaces and each virtual composite driver interface may include one or more virtual driver interfaces. Further there may be multiple virtual driver interfaces and or multiple virtual composite driver interfaces and multiple strategies where each virtual driver interface and or virtual composite driver interface may have a corresponding strategy.

It will be recognized by one skilled in the art that multiple virtual driver interfaces may use a single strategy. For example two virtual driver interfaces may exist and each virtual driver interface may group the device drivers according to device type such that one virtual driver interface groups device drivers by the device type function generators and the other virtual driver interface groups device drivers by the device type oscilloscopes. Both virtual driver interfaces may use the same strategy to determine which device driver to use. The strategy for example may be based on the date the driver was created. In this example each virtual driver interface determines which device driver to interface with an application based on the date a device driver was created.

The strategy may be anything that would allow the virtual driver interface to determine which one of the device drivers to use to allow a selected application to interact with the device. Strategies may be based on a priority list a look up table a date that the driver was created a selected application program interface API a selected version of the device driver a selected configuration of devices interfaced with the computing device. The strategies discussed throughout this document are not meant to be limiting and are provided as examples of possible strategies that may be implemented with the present invention.

The virtual driver interface and strategy may operate each time the application is started or may operate upon a request from a user. Further the virtual driver interface and strategy may operate to replace a previously selected device driver while the application is running. In this manner the virtual driver interface and strategy may determine that a new device driver should be used and replaces a previously selected device driver with the new device driver. One example where the virtual driver interface may replace a previously selected device driver while an application is running is when an application runs continuously for a long period of time. Another example where the virtual driver interface may replace a previously selected device is when a general purpose device driver was previously selected but during the operation of the application it is determined that a specialized device driver should be used. The virtual driver interface may also replace a specialized driver with a general purpose device driver during the operation of the application.

The virtual driver interface and strategy may operate to select a device driver a dynamic link library DLL or another shared library to use to interact with a selected device for the purpose of determining certain information of the device. For example the virtual driver interface and strategy may get information relating the version of the device that is connected to the computing device. The virtual driver interface may use this information to implement the strategy thereby allowing the strategy to select an appropriate device driver DLL or shared library to use to interact with the device.

Some devices may include FPGA or other programmable hardware that a device driver may download hardware description language to. These devices may be optimized depending on the device driver that is selected. For example a device may be used for high speed communication or low speed communication. The hardware description language necessary to implement low speed communication may require less gates on a FPGA since there may be less protocol associated with the low speed communication as compared to the high speed communication. The illustrative embodiment enables the virtual driver interface and strategy to determine the most appropriate device driver to select based on the operation of the device for an application. For example an application may be capable of using both high speed communication and low speed communication with a selected device and depending on which speed of communication is being used the application can provide information to the virtual driver interface and strategy so that the virtual driver interface can use the strategy to select the appropriate device driver.

Referring to strategy may be implemented based on the most recent date a device driver for a selected device was created. is an illustrative example of the process for implementing a strategy provides a graphical representation to be used in conjunction with and provides a flowchart of how the strategy is implemented.

In this example there may be three device drivers and suitable for use with the selected device . Each device driver and include the date it was created Step . In this example device driver was created in 2003 device driver was created in 2004 and device driver was created in 2005. By using the strategy the virtual driver interface determines which one of the device drivers was created most recently Step . The virtual driver interface selects the most recently created device driver which is device driver in this example to interface with the application to allow the application to interact with the selected device Step .

The strategy may be a software application or an application program interface API that compares the creation date of the applicable drivers. Referring to the virtual driver interface applies the strategy to compare the creation dates of the available device drivers for a selected device Step . The virtual driver interface may also apply the strategy to compare the creation date for each device connected to the computing device to determine which device drivers are appropriate for use with each device Step . In the case where there is only one device driver for a selected device Step the virtual driver interface interfaces the device driver with the application Step . If however there are multiple device drivers for a single device Step the virtual driver interface must obtain by using the strategy which of the device drivers was created most recently Step . The virtual driver interface selects the appropriate device driver in this case device driver to interface with the application to allow the application to interact with the selected device Step . The virtual driver interface interfaces the device driver with the application to allow the application to communicate with the selected device Step .

In another example a strategy may be implemented using a look up table. depicts a flowchart for implementing a look up table for the strategy. A look up table may provide a list associating devices with device drivers that are to be used for each device Step . The look up table provides the virtual driver interface with a list that associates each device with a single device driver despite the availability of multiple device drivers for each device. In this example when an application starts it interfaces with the virtual driver interface Step . The virtual driver interface accesses the look up table Step and determines which device driver to use for a selected device based on the information in the look up table Step . Using this strategy the virtual driver interface interfaces the application with the device driver based on the association of the device driver with the device in the look up table Step .

In yet another example a strategy may be implemented based on a selected configuration of devices connected to a computing device. depicts two graphical representations and each having a different device configuration. Graphical representation shows devices and and device drivers and virtual driver interface and strategy . Device is capable of being driven by device driver . Device is capable of being driven by device driver . Device is capable of being driven by device drivers and .

Graphical representation shows devices and and device drivers and virtual driver interface and strategy . Device is capable of being driven by device driver . Device is capable of being driven by device drivers and . Device is capable of being driven by device driver . Devices and may be for example logic analyzers from the same vendor where device may represent one model of a logic analyzer offered by the vendor and device may represent another model of a logic analyzer offered by the vendor.

In this example the virtual driver interface chooses the appropriate driver based on which devices are connected to the computing device. In graphical representation the strategy determines which devices are connected to the computing device and using this information determines which of the device drivers to use. The strategy for example may provide when devices and are connected to the computing device as in graphical representation device driver should be used to allow an application to communicate device but when device and are connected to the computing device as in graphical representation the virtual driver interface may determine device driver should be used to allow the application to communicate with device .

In another embodiment of the present invention a user may override the determination made by the virtual driver interface when selecting a device driver for a selected device. In this manner the user would be able to select a different device driver then the device driver that has been chosen by the virtual driver interface.

The present invention may be provided as one or more computer readable programs embodied on or in one or more mediums. The mediums may be a floppy disk a hard disk a compact disc a digital versatile disc a flash memory card a PROM a RAM a ROM or a magnetic tape. In general the computer readable programs may be implemented in any programming language. Some examples of languages that can be used include MATLAB FORTRAN C C C or JAVA. The software programs may be stored on or in one or more mediums as object code. Hardware acceleration may be used and all or a portion of the code may run on a FPGA or an ASIC. The code may run in a virtualized environment such as in a virtual machine. Multiple virtual machines running the code may be resident on a single processor.

Since certain changes may be made without departing from the scope of the present invention it is intended that all matter contained in the above description or shown in the accompanying drawings be interpreted as illustrative and not in a literal sense. Practitioners of the art will realize that the sequence of steps and architectures depicted in the figures may be altered without departing from the scope of the present invention and that the illustrations contained herein are singular examples of a multitude of possible depictions of the present invention.

