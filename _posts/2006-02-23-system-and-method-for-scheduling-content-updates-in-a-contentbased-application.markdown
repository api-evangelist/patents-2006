---

title: System and method for scheduling content updates in a content-based application
abstract: Described are various mechanisms and techniques for influencing or controlling a content update schedule for a content-based software application on a mobile device. A content server issues one or more commands to the mobile device that establish a content update schedule for the mobile device. The mobile device then performs content update sessions with the content server based on that schedule. During any one or more refresh sessions, the content server delivers another command to establish a new content update schedule. This system provides the advantage of allowing the content server to regulate how frequently the mobile device retrieves new content.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08620994&OS=08620994&RS=08620994
owner: QUALCOMM Incorporated
number: 08620994
owner_city: San Diego
owner_country: US
publication_date: 20060223
---
The present invention generally relates to content based software applications. More particularly the invention relates to software applications that periodically retrieve content from a remote location.

Information is available today to a degree that eclipses anything humans have ever experienced. The Internet is one component responsible for making the dissemination of information so simple. The broad even worldwide reach of the Internet makes information that develops anywhere on the planet instantly accessible to anyone else on the planet that happens to have an Internet connection. This degree of instant accessibility has transformed people s view of what current information really is. For some people in some circumstances information that is older than 15 minutes is ancient history yesterday s news.

But the Internet is not alone in the transformation of information accessibility. Wireless networking has also played a major role. As people have become more accustomed to having instant access to information on their desktop computers they have become intolerant of not having that access while away from their computers. Even a short drive in the car makes some people nervous about what they are missing. The wireless industry and in particular the wireless telecommunications industry is addressing that need.

Today people can use mobile devices such as cellular telephones and personal digital assistants PDA s to stay in touch while away from a more conventional means of communication. Mobile device manufacturers are empowering those devices with the ability to keep the user in touch with the information superhighway. New applications and services are constantly being developed to enable users to retrieve their valuable and sometimes invaluable information using their mobile devices.

However information accessibility on mobile devices is still in its infancy relatively speaking. Conventional even cutting edge technologies are often inefficient when retrieving new information. Conventional mechanisms constantly struggle to find the balance between trying to keep the user up to date on their mobile device while not wasting bandwidth or network usage if no new information is available. For instance a content based application on a mobile device by definition doesn t know what is available at a content server until it connects to the content server. This paradox leads to one of the most stymieing problems facing the developers of mobile devices and content based services how often should the mobile device connect to the server to retrieve new information 

The invention is directed at issuing commands to a mobile device on which resides a content based application. In one aspect the invention provides a system for influencing a content update schedule on a mobile device. The system includes a server configured with a processor a memory and a storage medium. The storage medium is encoded with a server application that when executed by the processor runs in the memory and causes the server to create a refresh command including a repeatdelay parameter that specifies a period during which a subsequent refresh command should not be executed. The server is further caused to issue the refresh command to a mobile device having a content based application configured to retrieve content from a content server. The refresh command if executed on the mobile device causes the mobile device to initiate a content update session.

In another aspect the invention provides a system for scheduling a content update. The system includes a mobile device configured with a processor a memory and a storage medium. The storage medium is encoded with a command queue and a content based application that when executed by the processor runs in the memory and causes the mobile device to monitor the command queue for commands that are due for execution and if a refresh command in the command queue is due for execution and is not prohibited from execution by a prior refresh command to execute the refresh command by contacting a content server identified in the refresh command and requesting a content update session and further to receive a new refresh command configured for execution at a predetermined time in the future.

In yet another aspect the invention provides a method and a computer readable medium encoded with instructions for influencing a content update schedule on a mobile device. The method and instructions include creating a refresh command that if executed causes a mobile device to perform a content update that includes contacting a content server to initiate a content update session the refresh command including a parameter that specifies a time when the refresh command should be executed and issuing the refresh command to the mobile device

In still another aspect the invention provides a method and a computer readable medium encoded with instructions for scheduling a content update. The method and instructions include receiving a refresh command that specifies a time when the refresh command should be executed and a period during which a subsequent refresh command should not be executed storing the refresh command in a command queue on a mobile device monitoring the command queue to determine if any commands in the command queue are due for execution and when the refresh command has become due for execution executing the refresh command by contacting a content server and initiating a content update session.

What follows is a detailed description of various mechanisms and techniques for controlling a content update schedule for a content based software application on a mobile device. A content server issues one or more commands to the mobile device that establish a content update schedule for the mobile device. The mobile device then performs content update sessions with the content server based on that schedule. During any one or more refresh sessions the content server delivers another command to establish a new content update schedule. The command may include a parameter that identifies a period during which the command should not be repeated. This system provides the advantage of allowing the content server to regulate how frequently the mobile device retrieves new content.

The WAN may be any network that enables data communication between and among multiple computing devices. One example of such a computing device is a general purpose computer that may be used to issue electronic messages to a mobile device such as the mobile messaging device . The WAN may be a privately accessible network such as an enterprise network or the like or it may be a publicly accessible network such as the Internet. The WAN and the wireless network are also coupled via a communications channel to enable the mobile devices to communicate with devices on the WAN .

Illustrated in are an application server and a content server . The content server is a computing device that serves data or other content that changes over time. Many different examples exist such as news servers stock quote servers weather information servers sports information portals special purpose information portals messaging servers and the like. The type of information that can be made available is limitless and very many different examples will be apparent to those skilled in the art. The content server includes server software that is configured to provide the content to requesting devices over the WAN .

The application server is a computing device or system coupled to the wireless network that makes software applications available for download by the mobile devices. The applications may be made available for free for a fee on a subscription basis or in any other manner. Generally stated the applications are downloadable by the mobile devices such as the cellular phone for execution on those devices. In this particular implementation at least one of the applications served by the application download server is a content based application configured for execution on at least one of the mobile devices. The content based application the client is configured to retrieve content from the content server for presentation by the mobile device.

Briefly stated here and described in greater detail below a mobile device such as the cellular phone includes a content based application referred to as a content client or simply as a client. The mobile device may come pre configured with the client or it may be downloaded from the application server . The client is configured to process commands issued by the content server that influence control and or modify a content update schedule for the client s content. The content update schedule is the time period between successive content updates. In other words when the client on a mobile device retrieves new content the content server may return one or more commands with the new data to control when the mobile device next automatically retrieves more new content. Alternatively the content server may issue asynchronous commands to the mobile device to schedule a content update. In these ways the content server may regulate how often the mobile device connects to retrieve new content. This feature has the advantage of enabling the content server which has the best knowledge about when new content is or will be available to control the client s content update schedule. Specific details about one particular implementation of this mechanism are provided below.

The content server includes a server application and content . The server application is operative to make the content available for retrieval by or delivery to other computing devices such as the mobile device . In this particular implementation the content is composed of individual units which are the basic structure of the data transmitted to the receiving devices. Briefly stated a unit may contain any form of usable digital data such as a single bit of text a single image or the like. In addition the unit may contain more complex bundled content such as a HyperText Markup Language HTML or a Synchronized Multimedia Integration Language SMIL document with multiple images sounds and script components. The units used in this particular implementation are described in greater detail below in conjunction with .

In addition to delivering content upon request the server application includes a command generator that is configured to generate one or more commands e.g. command for delivery to the mobile device . A command may take the general form of 

In this example the Cmd is a prefix that introduces what follows as a command the command portion includes the name of the particular command being given and the portion includes one or more parameters that modify the command. A listing of several commands that may be used in this implementation are detailed in the Commands Table provided below in the Appendix. Of particular note is a refresh command which when executed on the mobile device causes it to perform a content update.

The command generator may add one or more parameters to the command to affect how and when the command is executed. A listing of several parameters that may be used in this implementation are detailed in the Parameters Table provided below in the Appendix. However certain parameters of particular note are described here.

A time parameter may be used to provide a date and time to execute the corresponding command. The use of the time parameter in combination with the refresh command allows the server application to instruct the mobile device to perform a content update at a particular date and time. For instance a stock quote server could use this parameter to schedule stock quote subscribers to perform a content update when the markets close.

A repeatdelay parameter can be used to specify that a command should be executed only if a similar command has not already been performed within a certain time interval. A command that includes this parameter should be dropped if an identical command was executed within the specified time period. For example in certain implementations commands may be delivered using a push type of transport. If the mobile device is powered down for an extended period of time a series of similar or identical commands may accumulate. When the mobile device is powered on this backlog of commands may be received simultaneously. The repeatdelay parameter would allow only one of those commands to be executed and the others would be discarded.

An expires parameter can be used to indicate a particular date and or time after which the command is to be discarded if it has not been executed. This parameter is useful in a situation where time sensitive content becomes outdated in a predictable way such as sports scores or weather reports.

Some parameters can be used to specify how to retry the command should it fail. A retrycount parameter can be used to specify the number of times to retry a command until successful completion. A retrymin parameter can be used to specify how long to wait between retries. If the command fails to properly execute due to some network problems for example these parameters can be used to re schedule the command for later execution until either it completes successfully or until the number of retries has been exceeded.

The command generator may be configured to actually generate the commands at any appropriate time such as periodically and or asynchronously. Commands could be generated periodically in cases where the content changes regularly such as stock quotes or the like. Asynchronous commands could be generated for instance when new content becomes available at the content server such as when new electronic messages arrive. Additionally the command generator may generate commands in response to some event such as the initiation of a content update session by the mobile device .

The server application can be configured to transmit commands in different ways and at different times likely depending on the way in which the mobile device retrieves the content . For example the server application could be configured to deliver commands when the mobile device contacts the content server and requests a content update. This approach may be very practical in cases where regular content updates should occur. Alternatively the server application could be configured to deliver commands to the mobile device at arbitrary times using a push type delivery mechanism such as the Short Message Service SMS or the like. This approach may be better in cases where it is unpredictable when new content may arrive such as with critical news updates or electronic messages.

Commands may be sent to the mobile device using any one or more of many different protocols. For example if the HyperText Transfer Protocol HTTP is used to transmit the content then the command may be included in HTTP headers alongside the transmitted content itself. If the server application provides the content in a multipart message format such as the Multipurpose Internet Mail Extensions MIME format it may include the command as a header within a preamble of the transmitted content. If the server application provides the content in a format that supports hyperlinks it may include the command directly in the transmitted content itself which may be executed when invoked by the user. In addition the server application could push the command to the mobile device using a mechanism like SMS.

The mobile device includes at least one content based application client that is operative to retrieve content for display or use on the mobile device . There are many examples of the type of application that may be implemented by the client . For instance the client may be configured to retrieve stock quotes news alerts weather information sports scores electronic messages or any other content. The client is responsible for retrieving new content based on some content update schedule.

In this implementation the client includes a content retrieval module configured to retrieve the content from the content server and to store it as local content in a local content cache . As mentioned above the client makes the local content available for use on the mobile device such as for viewing by a user for manipulation by another installed application or in any other way. The client may optionally include a user interface configured to render and display the local content . For example referring briefly to the mobile device may include a display on which the user interface presents the content in some usable fashion. In this example the client is a stock quote application and the content being displayed includes stock quotes and stock new alerts.

Returning to in this implementation the client is configured to display a default start up unit such as an index unit . The default start up unit may be identified in meta information for the client . After start up the client maintains the notion of a current unit or last displayed unit. The current unit is updated as the user navigates through different units using the client .

The client presents functionality similar to conventional web browsers in that the client retrieves content from remote locations over a wide area network. However the client differs from conventional web browsers in many important aspects. For instance the client can pre fetch the content to the local content cache before a user requests to view or work with the content. In addition the client may be implemented without any user interface or controls of its own.

The client receives commands such as command from the content server . As mentioned above the commands may be received in one or more of many different ways such as in an SMS message or with or part of the content tent during a content update. When a command is received the client puts the new command in a command queue .

A scheduler continuously monitors the command queue and performs actions on those commands as necessary. The scheduler runs in the backgrounds ground even if the user is not actively using the client or another application supported by the client . The scheduler may evaluate the command queue to determine which commands are due for execution. As mentioned above commands may be scheduled for execution in the future through the use of certain parameters such as the time parameter.

The scheduler may remove duplicates from the command queue such as may occur if the content server delivers the same command twice. Similarly if a new command includes a repeatdelay parameter described above the scheduler may determine if the same command has already been executed within the repeatdelay value. If so the scheduler may discard the new command. In addition the scheduler may eliminate any commands that have expired without being executed.

At the time specified in the command the scheduler causes the client to execute the command if possible. In some cases it may not be possible to execute the command precisely at the specified time. For example if the mobile device is powered off or without a connection to the content server the command might not be executed. In those cases the command may be executed as soon as possible such as when the mobile device is powered back on or once again has network connectivity. If a command that includes retry parameters fails for some reason the scheduler places the command back into the command queue and retries it later as governed by these parameters. The scheduler removes the commands from the command queue once successfully completed or expired.

In this example the command is a refresh command and includes two parameters separated by a semicolon . As mentioned above the refresh command is an instruction to the client to perform a content update. The first parameter in the command url identifies the particular content to be retrieved and its location. More specifically the unit stuff is to be retrieved from the location http contentserver.com . The second parameter time specifies when the command is to be executed. In this implementation the time parameter is treated as a not earlier than instruction meaning that the command may be executed at any time after the specified time unless contravened by another parameter. Accordingly this example instruction is intended to cause the client to perform a content update on the 14 Oct. 2007 at 13 16 Greenwich Meridian Time by retrieving the unit stuff from the domain contentserver.com using the HTTP protocol.

As demonstrated a typical refresh command contains the address of the server to contact and identifies the content to fetch. The typical refresh command is scheduled to execute at some time in the future. However in some cases the refresh command may be configured for immediate execution such as to cause the client to retrieve an important message that just arrived at the content server .

The refresh command could also instruct the client to perform a content update but without fetching any content at all. This may be used to instruct the client to simply connect and receive a future refresh command without downloading any other data.

When the client executes the refresh command it connects to the location specified in the command e.g. the content server and requests the content specified in the command. The refresh command may instruct the client to fetch all of the content or any subset of the content depending on how the content server constructed the command. For instance in situations where the content is large but is mostly constant over time that is only small bits of it change the content server may construct refresh commands that instruct the client to fetch only a small subset of the content . In one example a stock application executing on a content server may have a fancy display page with images and other static resources. In this case the stock application may issue refresh commands to the client to only fetch new stock prices i.e. a subset of the content . Conversely in situations where most of the content changes at once the content server will instruct the client to fetch all of the content rather than just parts. For example a content server hosting an application that displays weather reports will typically instruct the client to fetch everything since the entire report changes from update to update.

In this example the refresh command will fetch content from some URL abbreviated here as XX at time XX 00. After the fetch is complete the unit tune e.g. a media file will be played and the unit result will be displayed to indicate completion. These two units may or may not have been downloaded with this refresh command.

In addition the repeatdelay parameter defines 20 minutes as the period during which the command should not be repeated or executed again. Accordingly any attempt to execute an identical refresh command within 20 minutes the repeatdelay period of executing the above command will be ignored. As mentioned this is helpful in situations where several refresh commands may arrive at a mobile device at once such as when the device is first powered on after a lengthy time powered off. In such a case there is no need to execute the refresh command multiple times when once will do. Accordingly the repeatdelay parameter allows those subsequent commands that attempt to refresh the same content to be ignored. It will be appreciated that a subsequent refresh command that refreshes different content should not be ignored and should be unaffected by the earlier repeatdelay parameter.

Commands and parameters could also be abbreviated and the Cmd prefix could be omitted. Thus one possible representation of a refresh command that causes the unit baboon.jpg to be fetched from the domain server.com could be 

In this example the r is an abbreviation for refresh the u is an abbreviation for URL and the prefix Cmd has been omitted. Abbreviating the commands is very useful when sent via a protocol with severe size restrictions like SMS where messages currently cannot exceed about 100 characters. Many other alternatives will also become apparent to those skilled in the art.

In summary the use of the refresh command coupled with various parameters of the kind described above allows the content server to control or influence when the client performs its content updates as well as what content to retrieve. In this way the content server can regulate the content update schedule of the client which provides greater efficiency because the content server has the best knowledge of what the content update schedule should be.

It should be noted that certain components have been described here as a single module of code to illustrate certain functionality provided by the client . However that functionality equally may be embodied in a single executable software module or it may be distributed throughout different software modules of the client . The use of single components in this description is for simplicity of discussion only and is not necessary to a proper functioning of any implementation of the invention.

What follows is a more focused description of the nature and structure of the units that form the basic construct for content that is transmitted. Following that is a more focused description of particular implementations of the delivery transport that may be used to communicate the content including commands from the content server to the mobile device .

The unit could roughly correspond to a displayed page of content like an HTML page but this is only one use. For example the unit could also be an image that is part of a Web page where the image is updated independent of the Web page.

The developer of a content based application can design the particular format of its units based on various criteria such as performance impact network usage available device storage and the like. In that regard fewer large units would be simpler to maintain and implement but make updates larger and take longer. Conversely a larger number of smaller units would make content updates quicker and more efficient but would be more difficult to maintain.

Referring now to the unit includes three fundamental characteristics a name a type and some content . The unit could also optionally include other information such as meta information about the unit . In its simplest form the unit could simply be a file such as an image file. In one example the unit could be an image file named monkey.jpg . The unit s name would then be monkey.jpg and its content would be the digital image data. The unit s type could either be inferred from its name e.g. .jpg means a JPEG image or implicit given the particular format of the content . The unit s type could also be explicit using a type indicator such as a MIME type of image jpeg or the like.

Alternatively or in addition the unit could be more complex. For example the unit could be a MIME entity such as a MIME structured RFC822 message formatted in HTML with embedded images. In this case the name could include the subject of the message e.g. dear mom the type could include the unit s MIME type e.g. message rfc822 and the content could include the e mail message.

Similarly the unit could be an HTML page whose type is multipart related and the content would then contain the HTML page and the page s constituent images sounds and the like. This MIME type is in common use for e mail transmission but is not commonly used with HTTP to transmit ordinary web pages.

The unit s content can be of any format that is usable by the client and the mobile device on which the client resides. For example the client could accept plug ins for proprietary formats. In that case the content could be in those proprietary formats.

Although ordinarily only a single unit is transmitted at a time in some cases it may be more efficient to transmit multiple units in the same transaction or message. For that reason a special type of unit may be implemented to support transmitting multiple units as a single unit. In one example a special aggregated MIME type may be used such as multipart x.content aggregate. The aggregated MIME type may be a simple multipart structure the content of which is other units.

In this particular implementation content can arrive at the mobile device in one or more of three ways. The content could be installed on the mobile device when the client is initially installed it may be pulled by the client from the content server using HTTP or a similar protocol or it may be pushed to the client using a similar protocol. In addition pulling the content could be triggered by sending the client an SMS message. What follows is a general discussion of particular implementation details for these transport mechanisms.

When the client retrieves content using the HTTP protocol such as by performing an HTTP fetch headers may be exchanged between the client and the server application to facilitate the transaction. For example the client may send headers in the client transmitted data with a refresh request that describe the mobile device or the state of the mobile device . Similarly the server application may return standard cookies in the server transmitted data for use in future content updates.

Headers may either be transmitted automatically or not. In one particular implementation the desired headers are explicitly requested. One technique to achieve this is to include a header parameter in the command that causes the communication between the client and the server application such as the refresh command described above. With this technique a list of desired headers is specified with an hdr parameter. One example of a command formatted in this manner might take the following form 

This command being a refresh command causes the client to fetch the file flowers.jpg from the domain contentserver.com . Note that the command instructs the client to transmit two headers with the HTTP fetch when executing the command the phone number min and the platform ID pid of the mobile device . It will be appreciated that the server application can use this technique when constructing a refresh command that will be delivered to the client . By including the hdr parameter in the refresh command when created the server application can ensure that the client returns information that the server application knows in advance it will need when handling the refresh command thus increasing the efficiency of the process.

In another example an Accept header may be sent by the client each time a command is executed that causes communication between the client and the server application such as the refresh command. The Accept header may be sent regardless of whether the server application requested it. The client may send the Accept header to list the MIME types supported by and the screen size of the device. The following is one example of such a header that may be included in the client transmitted data 

Accept message x.bmime text html text plain image png multipart x.content aggregate width 100 height 120 depth 16

Note that this example Accept header identifies several MIME types that are supported by the mobile device and the screen size of the mobile device so that images returned my be appropriately sized for display.

The client may transmit many other headers to include various information. However some headers could reveal data about the mobile device that may be considered private or restricted. For that reason permission level requirements may be imposed on the client and or the server application to enable access to certain information. For example the GPS location of the mobile device may be available only to applications that are properly approved.

The server application may also transmit headers to the client in the server transmitted data . For example when transmitting content the server application should transmit a header that identifies the name of the unit being transmitted such as a Unit name header. The server application may also send a Content type header that identifies the MIME type of the corresponding unit being transmitted.

A more extensive list of headers that may be transmitted by either the client or the server application in conjunction with the HTTP or similar protocol is provided below in the Appendix.

In some situations it may become beneficial for the server application to cause the client to perform an unscheduled content update. In those cases the server application may issue an asynchronous message to the mobile device which is in turn intended for the client . The SMS transport is well suited to this purpose. In such an implementation the format of the SMS message could be generally the same as commands. For example the following SMS message may be sent 

In this example the cmd prefix indicates to the mobile device that the SMS message is intended for the client . Accordingly the message is passed to the client for handling. In this particular implementation the commands that can be sent using the SMS transport may be limited due to the lack of authentication using SMS. For instance the refresh command could be the only command that will be executed when received in an SMS message since it forces a connection to the content server which involves authentication. If another asynchronous transport is used that does provide for authentication this limitation could be relaxed or eliminated.

It should be noted that abbreviating commands may be especially helpful when using SMS. Accordingly the refresh command above may be abbreviated as 

Furthermore a setvar command described below may be used to further abbreviate the command. For example the server may have previously issued the command 

This would have achieved the purpose of setting a base URL of http server.com . Thus enabling the above refresh command to be further abbreviated as 

As discussed above it may sometimes be beneficial to transmit more than a single unit in one transaction. The special aggregated MIME type described above i.e. multipart x.content aggregate may be used for that purpose. When transmitting an aggregated unit each sub unit should have a Unit Name header so that the sub units may be distinguished. In addition each sub unit s type could be identified in the normal manner such as with a Content type header.

When the client receives a unit of this aggregated type the client parses the aggregated unit and stores each of its constituent sub units separately. In this particular implementation an aggregated unit may be nested within another aggregated unit. In such a case the topmost unit should be identified as an aggregated unit or the client may not be able to determine that the unit should be parsed and expanded. However particular design considerations may place a limit on how deep aggregated units may be nested. For instance in one implementation only one level of aggregated units may be allowed within the topmost aggregated unit.

Note again that the multipart x.content aggregate unit type is not intended to include content for display although it could be adapted in that fashion. Rather in this particular implementation it is used to bundle other units for transport.

What follows here are illustrative computing environments in which aspects of the invention may be implemented. First is a sample mobile device in which a content based application may be implemented and next is a sample computing device in which a content based server application may be implemented.

The mobile device has a computer platform that can receive and execute software applications and display data. The computer platform includes a processor such as an application specific integrated circuit ASIC digital signal processor DSP microprocessor microcontroller logic circuit state machine or other data processing device. The processor executes the application programming interface API layer that interfaces with any resident programs in the memory of the mobile device. The memory can include random access or read only memory RAM or ROM EPROM EEPROM flash memory or any memory common to computer platforms. The computer platform also includes a local storage that can hold software applications file or data not actively used in memory such as software applications or content downloaded from the content server . The local storage is typically comprised of one or more flash memory cells but can be any secondary or tertiary storage device as known in the art such as magnetic media EPROM EEPROM optical media tape or soft or hard disk.

The computer platform also includes a display that may be used by the software applications to display data. The display may optionally include touch sensitive capability.

The components shown in are typical of many types of mobile devices but it will be appreciated that other components may be added to the mobile device and in certain rare cases some components shown in may be omitted from the mobile device .

In this example the computing device includes a processor unit a memory a storage medium and an audio unit . The processor unit advantageously includes a microprocessor or a special purpose processor such as a digital signal processor DSP but may in the alternative be any conventional form of processor controller microcontroller or state machine. The processor unit is coupled to the memory which is advantageously implemented as RAM memory holding software instructions that are executed by the processor unit . In an alternate embodiment the memory could be composed of firmware or flash memory. In this embodiment the software instructions stored in the memory include an operating system and one or more other applications such as a contact based server application.

The mobile device also includes a communications module that enables bidirectional communication between the computing device and one or more other computing devices such as the mobile device. The communications module may include components to enable RF or other wireless communications such as a cellular telephone network Bluetooth connection wireless local area network or perhaps a wireless wide area network. Alternatively the communications module may include components to enable land line or hard wired network communications such as an Ethernet connection RJ 11 connection universal serial bus connection IEEE 1394 Firewire connection or the like. These are intended as non exhaustive lists and many other alternatives are possible. The audio unit is a component of the mobile device that is configured to convert signals between analog and digital format. The audio unit is used by the mobile device to output sound using a speaker and to receive input signals from a microphone .

Described next are several illustrative processes that may be implemented by computing and or telecommunications equipment to embody aspects of the invention. The mechanisms and devices described above may be used where appropriate but it is envisioned that the following processes may be implemented using other mechanisms and devices equally without departing from the spirit and scope of the invention.

At step the content server creates a refresh command that will when executed cause a mobile device to connect to the content server and request new content. The refresh command may take many forms such as those described at length above. More specifically the refresh command may include parameters or other mechanisms that allow the refresh command to be scheduled for future execution. In particular the refresh command may include a repeatdelay parameter that identifies a time period during which an identical refresh command should not be executed again.

The refresh command may additionally identify what content to retrieve from the content server or may simply indicate to connect to the content server and retrieve any new or changed content. Additionally the refresh command could be configured to instruct the mobile device to connect to the content server and retrieve all available content any subset of the available content or even no content at all. From step the process may either continue at step or at step whichever is appropriate under the circumstances.

At step the content server creates an asynchronous message for delivery to the mobile device that includes the refresh command. One example of a type of asynchronous message may be an SMS message an MMS message an e mail message or the like. Other types of asynchronous messages include Short Data Burst Messages UDP Packets and the like. The asynchronous message is used to transmit a command to the mobile device without waiting for the mobile device to connect to the content server. In one specific implementation the asynchronous message may be an SMS message that includes the refresh command and any applicable parameters such as the repeatdelay parameter.

At step the content server receives a request to initiate a content update session from a mobile device. As described above the mobile device is configured to connect to the content server perhaps using a wireless connection. The content update session may be an HTTP session or the like. Once the request is received the process proceeds to step .

At step the content server handles the content update session such as by determining if any new or changed content is available at the content server. If so the content server delivers the new or changed content to the mobile device. As mentioned above although described here as new or changed content the content update session could involve any manner of content delivery such as new content changed content old content that has already been delivered old content that has not yet been delivered specific content identified by the mobile device all content that is available at or through the content server or the like.

It should also be mentioned that although returning new content is the most likely way to handle the content update session meaning respond to the refresh command other alternatives are possible. In fact the server could handle the content update session in any arbitrary way and is under no technical obligation to return new content. In fact the client may be requesting certain content at the content server that simply hasn t changed since the last content update session. In this case the content server may handle the request by ignoring it or perhaps by returning content other than what was requested.

At step the content server delivers to the mobile device the refresh command created at step . The delivery mechanism depends on how the process arrived at this delivery step. In other words if the process arrived at the delivery step as a result of the occurrence of a content update session then the delivery mechanism may be to issue the refresh command using the HTTP protocol or the like. Alternatively if the process arrived at the delivery step in connection with the creation of an asynchronous message the delivery mechanism may be the SMS protocol or the like. These and many other delivery transports may be used to deliver the refresh command in either an asynchronous or interactive manner.

It should be noted that the order of the steps of process as illustrated is not necessarily the only order in which they may be performed. To the extent possible the steps of the process may be performed in any arbitrary order. For example it is possible that the refresh command may be created step after the content update session has been initiated step or even after the new or changed content has been delivered step . Accordingly there should be no significance attached to the particular order of the steps as illustrated in and described here.

The process begins with the mobile device in the idle state where the mobile device awaits the occurrence of any one or more events that move the process out of the idle state . Certain of those events are described below. While in the idle state a component of the mobile device continuously monitors a command queue to determine if any commands in the queue are due for execution. The command queue is a repository for commands that may be executed at some point in the future. As those commands come due the mobile device executes those commands as appropriate.

When a command comes due for execution execute event the mobile device executes the command step as appropriate for the particular command. In some cases it may be appropriate to ignore the particular command. For instance if a previous instance of the same command included a repeatdelay parameter and the time specified by that parameter has not yet elapsed it may be appropriate to omit the command.

Many different commands may be executed. In one example the time may have come to execute a refresh command that was stored in the command queue. As described above the refresh command instructs the mobile device to perform a content update to refresh any locally stored content on the mobile device or otherwise retrieve new content from the content server. Accordingly executing the refresh command may trigger a content update event . When the execution is complete the mobile device returns to the idle state .

A content update event occurs when the mobile device is instructed to perform a content update to retrieve content from the content server. The content update event may occur for many reasons such as a refresh command coming due as just described. However the content update event may also occur for many other reasons such as the user manually activating a content update or the initialization of the content based application on the mobile device.

In response to the content update event the mobile device connects to the content server and performs a content update step . The content update may involve initiating a content update session with the content server and retrieving new or changed content. The content update could also involve simply determining if new or changed content is available at the content server or any other form of content. In addition one or more new refresh commands may be retrieved from the content server step . The new refresh command may include information that instructs the mobile device to perform another content update at some predefined time in the future. It will be appreciated that the step of retrieving a new command step is optional as content updates may occur without a new command being retrieved.

An asynchronous message event occurs if the mobile device receives an asynchronous message that includes a command such as a new refresh command. One form of asynchronous message is an SMS message as has been described. The asynchronous message includes the refresh command and may additionally include parameters that identify when the refresh command is to be performed and other criteria that affect the refresh command as has been described. The asynchronous message may be received using ordinary messaging protocols and mechanisms.

At step if a new command is received either during a content update step or as a result of an asynchronous message event the new command is stored in the mobile device s command queue step and the process returns to the idle state . As mentioned above at the idle state the command queue is continuously monitored for commands that become due such as the new refresh command. Thus in due time the new refresh command will be executed and the process will continue.

It will be appreciated that the process enables the content server to control or regulate how frequently and in what manner the mobile device performs a content update by issuing new refresh commands. Since the content server has the most current and accurate knowledge of when content is available the process avoids the need for the mobile device to repeatedly query the content server for new content. This feature improves network efficiency and can save the user subscriber money in wireless network usage costs.

A content based application a client using the content update system described above typically receives at least one refresh command and may receive multiple each time it contacts the content server for a content update thus maintaining a regular content update schedule via these chained refresh commands. If the client is running on a mobile device that is powered off for an extended period of time or is disconnected from the network in some other way it is possible for the chain of refresh commands to break thereby breaking the content update schedule.

For example consider a weather report application the client that hasn t contacted the content server for the latest weather data within a few days because it has been powered down. Commands in the client s command queue may expire. When powered on the client discards the expired commands which may leave no remaining refresh commands to be executed. This breaks the refresh command chain.

The process described here enables the content server to revive the content refresh schedule in such a case. The process begins at step where the content server passively monitors the content updates that have been performed by each subscribed client. The monitoring activity may be as simple as periodically evaluating the last time each client contacted the content server or more complex such as maintaining information that compares the periodicity of the client s previous content update schedule to the time since the client s last contact.

At step the content server detects that a particular client has not contacted the content server for more than some predetermined period of time. The period may be based on an elapsed time since the previous content update or perhaps some period of time that the client is overdue for performing its next content update. Since the content server generally issues the refresh commands to keep the client on a regular content update schedule the content server has knowledge of approximately when the client should initiate the next content update. Alternatively the content server can use any other method of determining at what point the client is overdue for a content update.

At step the content server having determined that the client is overdue for a content update sends the client an asynchronous message e.g. an SMS message containing a refresh command to be executed immediately. Upon receipt the client would contact the content server for the latest content updates and receive a new refresh command thus re establishing the refresh command chain.

At initial start up the process moves to step where the default unit e.g. an index unit is displayed. Displaying the default unit at start up provides a mechanism to present the user with some content while new content is being retrieved. The name of the default unit can be stored in a second resource and can be overridden.

At step the initial refresh command is executed. The initial refresh command can be complete with parameters such as retryCount and displayWhile. This allows the client to be distributed with minimal content and retrieve new content the first time it is launched. The initial refresh command can also be used as a mechanism for the application to register or activate itself when initialized. The initial refresh command could also be used as a mechanism for subscribing to a service if the client operates on a subscription basis and initializing the content update schedule. Alternatively a button or link in the default unit could prompt the user to start the subscription.

Although the processes presented in this document have been illustrated and described sequentially in a particular order in other embodiments the steps of the processes may be performed in different orders multiple times and or in parallel. Further in some embodiments one or more steps described in the several processes may be performed as separate steps combined into fewer steps or possibly omitted entirely.

While the foregoing disclosure shows illustrative embodiments of the invention it should be noted that various changes and modifications could be made to the described embodiments without departing from the spirit and scope of the invention as defined by the appended claims. Furthermore although elements of the invention may be described or claimed in the singular the plural is contemplated unless limitation to the singular is explicitly stated.

In general any parameter can be used with any command though some of the combinations may not be very useful.

The following table lists illustrative headers that may be passed in conjunction with a refresh command using HTTP as a transport protocol. The headers identified here are by way of example only and this table does not include an exhaustive list.

