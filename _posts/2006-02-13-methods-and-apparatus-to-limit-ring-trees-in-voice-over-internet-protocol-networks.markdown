---

title: Methods and apparatus to limit ring trees in voice over internet protocol networks
abstract: Methods and apparatus to limit ring trees in voice over Internet protocol (VoIP) networks are disclosed. A disclosed example parallel ring policy enforcer comprises a memory to hold parallel ring tree information and a policy checker to enforce a parallel ring policy based on a parallel ring request and the parallel ring tree information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07991139&OS=07991139&RS=07991139
owner: AT&T Intellectual Property I, L.P.
number: 07991139
owner_city: Atlanta
owner_country: US
publication_date: 20060213
---
This disclosure relates generally to voice over Internet protocol VoIP networks and more particularly to methods and apparatus to limit ring trees in VoIP networks.

Parallel ringing is one of many advanced features offered by communication service providers such as for example providers of voice over Internet protocol VoIP and or public switched telephone network PSTN based communication services. When parallel ringing is enabled for a telephone number a call placed to the telephone number causes additional configured telephone numbers to ring at substantially the same time. In some example systems parallel ring is offered as a user and or consumer configurable service that can be configured by a user and or consumer using for example a web portal. The user and or consumer specifies and or configures a telephone number with the additional telephone numbers to be rung when a call is placed to the telephone number.

As used herein parallel ringing is meant to indicate that one phone call causes multiple devices of the same or different phone numbers to ring or otherwise give an indication of a call. The ringing may occur at substantially the same time depending upon network characteristics etc. An example parallel ring service is commonly referred to in the industry as simultaneous ring. However the term parallel ringing will be used herein as the additional telephone numbers that are rung may not actually ring simultaneously even if a user perceives them to do so.

A parallel ring tree can be described by its depth. For example a telephone call placed to a telephone number A can be configured to ring three children e.g. B B B in parallel representing a parallel ring tree of depth . If one of the children e.g. B is configured to ring two children e.g. C C the parallel ring tree increases to a depth of 2. In general the depth of a parallel ring tree is defined by the maximal level that a call to single telephone number can reach.

As more users and or consumers subscribe and or utilize parallel ringing the potential for inadvertent and or deliberate abuse of parallel ring increases. For example a user may easily configure a parallel ring tree such that a single phone call placed to a telephone number causes hundreds of phones to ring thereby dramatically increasing the call processing and or call handling requirements for the communication network. Currently service providers rely on the user and or consumer to employ reasonable parallel ring tree configurations and or retain configuration rights for parallel ring services.

Methods and apparatus to limit ring trees in voice over Internet protocol VoIP networks are disclosed. A disclosed example parallel ring policy enforcer includes a memory to hold parallel ring tree information and a policy checker to enforce a parallel ring policy based on a parallel ring request and the parallel ring tree information. A disclosed example voice over Internet protocol VoIP apparatus includes a call handler to enforce a parallel ring policy to limit a number of devices rung in response to a call based on parallel ring control information contained in a VoIP call control message associated with the call. The example VoIP system may further include a

A disclosed example method includes receiving a call control message having a header containing parallel ring control information and determining a number of allowed parallel rings based on the parallel ring control information. A disclosed example communication link includes a signal propagation medium and a call control message communicated via the signal propagation medium comprising a header specifying parallel ring control information. A disclosed example apparatus includes a memory to store a data structure having a first record to define a first ring tree for a first originating call and a second record to defined a second ring tree for a second originating call. The disclosed example apparatus further includes a processor to determine a number of allowed parallel rings for the first ring tree based on the first record. A disclosed example VoIP call control message comprises a header specifying parallel ring control information.

As illustrated in the example communication devices and or may be communicatively coupled via any variety of communication devices communication systems and or communication networks. For example the example VoIP telephone may communicate with the example telephone via an Internet based network i.e. the Internet and the computer the example cellular phone may communicate with the example VoIP telephone via any variety of cellular communication network s any variety of VoIP gateway s and the Internet the example telephone may communicate with the example telephone via any variety of PSTN VoIP gateway s the Internet and the computer etc. Additionally as illustrated in any variety of communication and or telephone device associated with a private network and or private enterprise may also be connected to the example communication devices and or of via any variety communication devices communication systems and or communication networks.

While the following disclosure refers to the example VoIP system and or the example communication and or telephony devices and or of the example system of may be used to provide services to from and or between any alternative and or additional variety and or number of communication devices e.g. telephone devices personal digital assistants PDA laptops etc. . Additionally although for purpose of explanation the following disclosure refers to example systems devices and or networks and or illustrated in any additional and or alternative variety and or number of communication systems devices and or network may be used to implement a communication system and or provide communication services in accordance with the teachings disclosed herein.

Further while for purpose of illustration the follow disclosure references limiting parallel ring in VoIP communication systems and or networks persons of ordinary skill in the art will readily appreciate that the apparatus and methods disclosed herein may additional or alternatively be applied to any type of communication system and or network such as for example the PSTN the cellular network etc. It will be further appreciated that while for purpose of illustration the following disclosure refers to telephone numbers and telephone calls the following methods and apparatus may additionally or alternatively be used to establish other types of communication sessions such as for example messaging sessions email sessions etc.

Moreover the term ringing is used herein to indicate that a telephone call is initiated to a called telephone number. The initiated telephone call may or may not physically result in a telephone being rung but the intention of the call is to cause a telephone to alert a called party of the call by ringing and or some other notification mechanism e.g. vibration lights message etc. .

In the example VoIP communication system of the VoIP telephone the computer and or the gateways utilize among other things VoIP protocols including the session initiation protocol SIP as specified in Internet Engineering Task Force IETF request for comment RFC documents 3161 3262 3263 3264 3265 3266 etc. However the example devices systems and or networks illustrated in may implement and or utilize any variety of additional and or alternative communication protocols methods and or techniques to provide communication and or telephone services such as for example the Institute of Electrical and Electronics Engineers IEEE H.323 standard.

To process and or handle VoIP communication services between the example communication devices and or the example system of includes any variety and or number of call handlers. The example call handlers and A of among other things receive handle and or process a call control message from a calling communication device e.g. the VoIP telephone to locate route and or otherwise assist in establishing a communication session e.g. a telephone call between the calling device and a called device associated with a called telephone number. Likewise the example call handlers and A receive handle and or process call control messages destined for a called communication devices from for example another call handler. In the example of a call control message is a SIP INVITE message and the routing and or establishing of the communication session is performed in accordance with SIP but any call control message protocol and or standard could alternatively be used. In accordance with any variety of additional and or alternative VoIP communication protocols standards and or implementations the routing and or establishing of a call session may be effected via one or more additional and or alternative communication devices e.g. the gateway and or systems e.g. the PSTN .

In the illustrated example of each VoIP communication device e.g. the VoIP telephone the computer based VoIP device etc. is registered to associated with and or assigned to a call handler e.g. the call handler responsible for handling incoming and or outgoing calls associated with the VoIP communication device. For instance a VoIP communication device initiating an outgoing telephone call sends a SIP INVITE message to its associated call handler which in turn routes and or assists in establishing a communication session e.g. telephone call with a called device. Likewise a VoIP communication device receiving an incoming communication session receives a SIP INVITE message via its associated call handler.

In the example VoIP system of the example call handler is used to implement and or provide parallel ring services to VoIP communication devices. In the illustrated example a user enables and or configures a parallel ring tree for their telephone number by configuring the example call handler of with additional telephone numbers. When the call handler receives a SIP INVITE message for the user s telephone number the call handler initiates a telephone call to the user s telephone number and the additional telephone numbers at substantially the same time i.e. in parallel . In particular when the call handler receives a SIP INVITE message the example call handler of determines if the called telephone number has parallel ringing enabled and or configured. If parallel ringing is enabled and or configured the example call handler creates and sends a SIP INVITE message to the user s telephone number and each of the additional telephone numbers. In the illustrated example of the additional SIP INVITE messages may be sent to a VoIP communication device e.g. the computer registered with the example call handler and or to a VoIP communication device via another call handler and or a gateway e.g. the gateway .

In the illustrated example of the example call handler implements and or enforces a parallel ring policy and or rules to limit the number of parallel ring calls being initiated within and or being established by the example VoIP system of . For a call placed to telephone number having parallel ringing enabled and or configured to determine the number of additional telephone numbers that may be rung the example call handler of may implement and or include any variety of parallel ring policy enforcer that implements the parallel ring policy and or parallel ring rules. Example implementations of the example call handler and or the example parallel ring policy enforcer are discussed below in connection with and or . The example parallel ring policy enforcer of may be implemented as a process and or thread executing on a processor associated with and or implementing the call handler by for instance executing all or a portion of the example machine readable instructions discussed below in connection with B A B A and or B.

If the telephone number associated with a VoIP communication device e.g. the computer has parallel ringing enabled then when the example call handler receives a SIP INVITE destined for the computer the example call handler of sends a parallel ring request to the parallel ring policy enforcer via for example an application programming interface API . In the example of the example parallel ring policy enforcer limits based upon the parallel ring request and configurable parameters the number and or type of parallel ring calls that may be initiated by the example call handler . In particular the example parallel ring policy enforcer of determines the number of parallel rings that may be performed by the call handler and returns the allowed number of parallel rings to the call handler via for example the API. The example call handler of then creates and sends no more than the allowed number of SIP INVITE messages. If the number of allowed parallel rings is less than the configured number of additional telephone numbers i.e. requested number of parallel rings the example call handler of rings the additional telephone numbers starting from the top of the list. However the example call handler may select the subset of the additional telephone numbers using any additional and or alternative method. If the allowed number of parallel rings equals or exceeds the number of additional telephone numbers all devices are rung.

As illustrated in a standalone feature server e.g. an example feature server may used to implement the example parallel ring policy enforcer . Additionally the call handler may include and or otherwise implement a feature server to implement the parallel ring policy enforcer . Moreover the example parallel ring policy enforcer and or the example feature server of may be resources shared by multiple call handlers. For instance an example call handler A of does not include and or otherwise implement a parallel ring policy enforcer and thus utilizes a parallel ring policy enforcer associated with another call handler e.g. call handler and or a standalone feature server e.g. the feature server . If a call handler utilizes a feature server not implemented by and or within the call handler e.g. the example feature server in the illustrated example of the call handler and the feature server use a messaging interface to interact via for example the Internet .

The example parallel ring policy enforcer may limit the number of parallel rings based upon any variety combination and or number of parallel ring policies and or parallel ring rules. For example the parallel ring policy enforcer may limit the number of parallel rings by limiting the maximum depth of a parallel ring tree by limiting the number of telephone numbers rung by a parallel ring tree i.e. the size and or number of nodes in the tree by limiting the number of system wide ongoing parallel ring calls. Other example policies and or rules abound.

In most VoIP networks and or systems multiple and or distributed call handlers may be utilized. Further a parallel ring tree may start at any called party i.e. VoIP communication device registered i.e. associated with one call handler and can trigger a parallel ring call to a called party i.e. a child registered at another call handler. In the illustrated example of parallel ring policies and or rules are implemented and or enforced at each individual call handler or set of call handlers served by a parallel ring policy enforcer instance e.g. the parallel ring policy enforcer the feature server etc. . In particular the number of allowed parallel rings ring tree depth etc. is limited at each parallel ring policy enforcer instance. As such each call handler is protected against excessive parallel ring calls and thus the entire example VoIP network of is protected.

To convey parallel ring control information in the example VoIP network of the example call control message of includes a parallel ring control information header . The example parallel ring control information header of includes an identification token PAR RING CONTROL and information token s that identify the root of the parallel ring tree e.g. the original called telephone number i.e. ROOT CALL ID and the current depth of the parallel ring tree i.e. LEVEL . As illustrated the example SIP INVITE message of may include any variety or number of additional mandatory and or optional headers.

In the examples of the ROOT CALL ID will have the value of a call identification header of the SIP INVITE message sent to the original called telephone number. A LEVEL of one 1 indicates that the SIP INVITE message was due to additional telephone numbers configured for the original called telephone number i.e. child telephone numbers . If one of the child telephone number also has a parallel ring tree enabled a parallel ring control information header included in subsequent SIP INVITE messages would still identify the root of the parallel ring tree i.e. the original ROOTCALLID of the original SIP INVITE message but would increment the value of LEVEL to two 2 since the parallel ring tree now has a depth of two 2 .

In the example system of the parallel ring control information header is used to convey parallel ring information and is used by a call handler and or a parallel ring policy enforcer to determine a number of parallel ring calls that may be initiated. When the example call handler determines that a called telephone number has an enabled parallel ring tree the example call handler of after receiving authorization from a parallel ring policy enforcer creates a SIP INVITE message for each configured child i.e. additional telephone number. The created SIP INVITE messages will either have a parallel ring control information header added if a parallel ring tree is being started or will include an updated parallel ring control information header to reflect the additional parallel ring calls being initiated.

In the example system of a SIP INVITE message for a telephone call that is not triggered by a parallel ring parent may not contain the example parallel ring control information header .

To process received call control messages the example call handler of includes a call control processor . The example call control processor of may be any variety of processor such as for example a microprocessor a microcontroller an advanced reduced instruction set computing RISC machine ARM processor etc. In general the example call control processor executes machine readable instructions e.g. all or any portion of the example machine readable instructions illustrated in B A B A and or B stored in a memory e.g. a memory to implement and or to provide one or more of a variety of user interfaces applications services e.g. VoIP services functionalities communication protocols e.g. SIP implemented and or provided by the example call handler .

To determine a number and or type of parallel ring calls that may be initiated the example call handler of includes a parallel ring policy enforcer to implement parallel ring policies and or parallel ring rules. In the illustrated example of the example call control processor and the example parallel ring policy enforcer interact via any variety of API. Alternatively as discussed above a parallel ring policy enforcer e.g. the example feature server may be implemented separately from a call handler e.g. the example call handler A of . In such examples the example call control processor of and the example feature server communicate using messages via for example the example network interface and the Internet . An example manner of implementing the example parallel ring policy enforcer and or the example feature server is discussed below in connection with .

To store machine readable instructions and or any variety of information configuration data and or configurable parameters related to providing and or implementing communication services and or protocols the example call handler of includes any variety of memory . The example memory may include read only memory ROM and or random access memory RAM . RAM may be implemented by dynamic random access memory DRAM Synchronous DRAM SDRAM and or any other type of RAM device and ROM may be implemented by flash memory and or any other desired type of memory device. Access to the example memory is typically controlled by a memory controller not shown in a conventional manner. The information configuration data and or configurable parameters related to providing and or implementing communication services and or protocols may be stored in the memory using any variety of tables data structures arrays variables etc.

Although an example call handler has been illustrated in call handlers may be implemented using any of a variety of other and or additional devices components circuits modules etc. Further the devices components circuits modules elements etc. illustrated in may be combined re arranged eliminated and or implemented in any of a variety of ways. For example the call control processor and the parallel ring policy enforcer may be implemented using machine readable instructions executing on a single processor. Moreover the example call handler may be implemented by any variety of VoIP call processor.

To process configuration requests and or configuration information and or data the example parallel ring policy enforcer of includes a configuration handler . The example configuration handler of updates configuration data and or parameters stored in a memory based upon configuration requests and or configuration information and or data received by the example configuration handler via the interface . In the examples of and or received configuration requests and or configuration information and or data include a maximum number of parallel ring children per parent i.e. per tree node a maximum parallel ring tree depth a maximum parallel ring tree size a maximum number of system wide parallel ring calls and or a window duration.

To store variables configuration parameters and or statistics information the example parallel ring policy enforcer of includes the memory . The memory may be implemented using any type and or number of memory devices such as for example any variety of RAM. The variables configuration parameters and or statistics information may be stored in the memory using any variety and or number of variables data structures arrays tables etc. Among other things the memory is used to store information regarding current e.g. active parallel ring trees e.g. the example data structure of . The memory may also be used to store machine readable instructions executed by the configuration handler a statistics processor and or a policy checker .

To generate and or provide parallel ring tree operational and or usage statistics the example parallel ring policy enforcer includes the statistics processor . The example statistics processor of can determine and or compute any variety of statistics from the variables configuration parameters and or statistics information stored in the memory . For example the example statistics processor can compute the number of active parallel ring trees the number of parallel ring calls that occurred in a time window a maximal minimal and or average parallel ring calls in a time window a number of oversized parallel ring trees a number of over deep parallel ring trees a total number of rejected e.g. not allowed parallel ring tree calls etc.

In the illustrated example of the example interface may also be used to monitor and or acquire statistics determined generated and or computed by the example statistics processor . To monitor statistics and generate and or send alarms based on monitored statistics the example parallel ring policy enforcer includes an alert handler . The example alert handler of generates and or sends alarms if for example an unusually high level of parallel ring tree activity occurs. Such alarms may be sent using for example simple network management protocol SNMP alerts via the example interface . Further the example alert handler of may be configured with alarm thresholds via for example configuration parameters stored in the memory by the configuration handler and or directly via the interface .

To determine the number and or type of parallel ring tree calls that may be performed the example parallel ring policy enforcer of includes the policy checker . The example policy checker of receives parallel ring tree requests via the example interface determines the number of allowed parallel ring tree calls and then returns the determined number of allowed parallel ring calls via the example interface . In the illustrated example of the example policy checker is any variety of processor such as for example a microprocessor a microcontroller an ARM processor etc. In general the example policy checker executes machine readable instructions e.g. the machine readable instructions illustrated in and or B stored in a memory e.g. the memory to determine the number of allowed parallel ring tree calls based upon a received parallel ring request and the active parallel ring tree information e.g. the example data structure of and or configuration parameters stored in the memory by the example configuration handler .

To maintain and or otherwise update the records of the active parallel ring tree information stored in the memory the example parallel ring policy enforcer of includes a record maintainer . The example record maintainer of periodically or aperiodically determines if any records in the active parallel ring tree information are old and or otherwise expired and then updates deletes and or otherwise removes them from the active parallel ring tree information. Example methods of implementing the record maintainer are described below in connection with and or A.

Although an example parallel ring policy enforcer has been illustrated in parallel ring policy enforcers may be implemented using any of a variety of other and or additional devices components circuits modules etc. Further the devices components circuits modules elements etc. illustrated in may be combined re arranged eliminated and or implemented in any of a variety of ways. For example the configuration handler the statistics processor the alert handler the policy checker and or the record maintainer may be implemented using machine readable instructions executing on a single processor. In an example the configuration handler the statistics processor the alert handler the policy checker and the record maintainer are implemented as separate processing threads executing on a single processor.

In the examples of and or when a new parallel ring tree is initiated i.e. a telephone call is placed to a telephone number having an enabled and or configured parallel ring tree an additional record e.g. A B etc. is added to the example data structure of . Each additional record A B etc. includes the same fields as the first record but those fields are populated with the data corresponding to the associated parallel ring tree.

When a difference between the current time and the value of a LAST CHILD CALL TIME for any record e.g. record A B etc. exceeds a threshold the corresponding record is removed from the example data structure by the example record maintainer of . In the examples of and or a value of twice the window duration is used as the threshold.

The example machine readable instructions of begin when the call control processor and or more generally the call handler receives a call control message e.g. the example SIP INVITE message of . The call control processor determines if the called party of the SIP INVITE message has a parallel ring tree enabled and or configured block . If the called party does not have an enabled and or configured parallel ring tree block the call control processor exits the example machine readable instructions of without modifying and or deleting any PAR RING CONTROL header present in the SIP INVITE message.

If the called party has an enabled and or configured parallel ring tree block the call control processor determines if the SIP INVITE message contains a PAR RING CONTROL header block . If the SIP INVITE message contains a PAR RING CONTROL header i.e. this is a continuation of an ongoing and or active parallel ring tree block the call control processor creates a parallel ring request e.g. the example request of block . In the request the value of the LEVEL field will be the value of LEVEL from the header plus one the value of the ROOT CALL ID field will be ROOT CALL ID from the header and the value of the CURRENT CALL ID field will be the call identifier from the received SIP INVITE message.

If the SIP INVITE message does not contains a PAR RING CONTROL header i.e. this is the start of a parallel ring tree block the call control processor creates a parallel ring request e.g. the example request of block . In the request the value of the LEVEL field will be zero 0 and the value of the ROOT CALL ID field and the value of the CURRENT CALL ID field will both be the call identifier from the SIP INVITE message.

After the parallel ring request message is created block or block the call control processor sends the request to a parallel ring policy enforcer via either an API call e.g. if the parallel ring policy enforcer is implemented by and or within the call handler or via a message e.g. if the parallel ring policy enforcer is implemented by a feature server block . If the response value returned from the parallel ring policy enforcer is less than or equal to zero block the call control processor is not allowed to initiate any parallel ring calls. The call control processor then exits the example machine readable instructions of . If the response is greater than zero block control continues to block of .

Assuming for purposes of discussion that control has advanced to block the call control processor determines if the SIP INVITE message contains a PAR RING CONTROL header . If the SIP INVITE message contains a PAR RING CONTROL header i.e. this is a continuation of an ongoing and or active parallel ring tree block the call control processor updates the PAR RING CONTROL header in the SIP INVITE message by incrementing the value of the LEVEL field block . If the SIP INVITE message does not contains a PAR RING CONTROL header i.e. this is a new parallel ring tree being started block the call control processor adds a PAR RING CONTROL header to the SIP INVITE message block . In the added PAR RING CONTROL header the value of the LEVEL field is zero 0 and the value of the ROOT CALL ID field is the call identifier from the received SIP INVITE message.

For the number of authorized i.e. allowed parallel ring calls block the call control processor then sends the updated SIP INVITE message to one of the child telephone numbers block . When all allowed parallel ring calls have been initiated block the call control processor exits the example machine readable instructions of . If not all allowed parallel ring calls have been initiated block control returns to block to send the next SIP INVITE message to the next child telephone number.

The example machine readable instructions of begin with the record maintainer determining if a window timer has expired block . If the window timer has not expired block control proceeds to block . If the window timer has expired the parallel ring policy enforcer resets the window timer block . The record maintainer then determines if any active parallel ring tree information e.g. a record of the example data structure of has expired block . In the example machine readable instructions of if a difference between the current time and the value of the value of the LAST CHILD CALL TIME field in any record exeeds twice the window duration the corresponding record is removed from the active parallel ring tree information . Control then returns to block to wait for the window timer to expire.

The example machine readable instructions of begin with the parallel ring policy enforcer determining if a parallel ring request e.g. the request of was received from a call handler block . If a parallel ring request was not received block control returns to block to wait for another parallel ring request. If a parallel ring request was received block the policy checker determines the number of allowed parallel ring calls by for example executing the example machine readable instructions of block . The response value returned from the policy checker i.e. the number of allowed parallel ring calls block is then sent to the call handler block . Control then returns to block to wait for another parallel ring request.

The example machine readable instructions of begin with the policy checker determining if the value of the ROOT CALL ID field contained in a parallel ring request is listed in any active parallel ring tree information record block . If the value of the ROOT CALL ID field contained in the parallel ring request is not listed in any active parallel ring tree information record e.g. A B etc. i.e. this is a start of a parallel ring tree block control proceeds to block of .

If the value of the ROOT CALL ID field contained in the parallel ring request is listed in any active parallel ring tree information record e.g. A B etc. i.e. this is an additional branch and or node for an active parallel ring tree block the policy checker initializes an initial response value equal to the number of parallel ring calls requested in the received request i.e. the value of the NUM OF CHILDREN field block .

The policy checker compares the value of the requested parallel ring tree depth i.e. the value of the LEVEL field from the received request with a maximum parallel ring depth threshold value of LEVEL THRESH block . If the value of the LEVEL field exceeds the value of LEVEL THRESH parameter block the response value is set equal to zero 0 block . Control then returns from the example machine readable instructions of to the example machine readable instructions of thereby returning the response value of zero 0 .

If the value of the LEVEL field does not exceed the value of the LEVEL THRESH parameter block the policy checker determines if the value of the value of the NUM OF CHILDREN field exceeds a maximum number of children per parent threshold value of MAX PER block . If the value of the NUM OF CHILDREN field does not exceed the value of the MAX PER parameter block control proceeds to block . If the value of the NUM OF CHILDREN field exceeds the value of the MAX PER parameter block the policy checker reduces the response value to the value of the MAX PER parameter block .

If a sum of the current size of the parallel ring tree i.e. the value of the NUM CHILD CALLS field and the value of the NUM OF CHILDREN field does not exceed a maximum parallel ring tree size threshold of MAX TOTAL block control proceeds to block . If the sum exceeds the value of the MAX TOTAL parameter block the policy checker sets the response value to a minimum of the current response value or the value of the value of the MAX TOTAL parameter minus the value of the NUM OF CHILDREN field block .

The policy checker then counts the number of active parallel ring calls in the current time window i.e. a WINDOW PAR RING variable block . In the example of the policy checker locates all of the records of the example data structure having a value of the LAST CHILD CALL TIME field that falls within WINDOW DURATION seconds of the current time. For the located records the policy checker totals the NUMBER CHILD CALL field values . Alternatively the policy checker and or the record maintainer may maintain the WINDOW PAR RING variable such that at block the policy checker may simply read the WINDOW PAR RING variable from for example the memory . In particular whenever the policy check allows a number of parallel rings the policy checker may increment WINDOW PAR RING by the allowed number. Likewise the record maintainer may decrement WINDOW PAR RING whenever a record is removed from the active parallel ring tree information.

If the value of the WINDOW PAR RING variable is less than or equal to a maximum number of parallel ring calls threshold of MAX WINDOW block control proceeds to block . If the value of the WINDOW PAR RING variable is greater than the value of the MAX WINDOW parameter block the policy checker sets the response value to a minimum of the current response value or the value of the value of the MAX WINDOW parameter minus the value of the WINDOW PAR RING variable block .

If the response value is less than or equal to zero block control returns from the example machine readable instructions of to the example machine readable instructions of thereby returning the response value. If the response value is greater than zero block the policy checker updates the record for the parallel ring tree by updating the value of the NUMBER CHILD CALLS field to reflect the additional allowed parallel ring calls i.e. the response value block and updating the value of the LAST CHILD CALL TIME field in the parallel ring tree information with the current time block . Control then returns from the example machine readable instructions of to the example machine readable instructions of thereby returning the response value.

Turning to for a request to initiate a new parallel ring tree the policy checker initializes a response value equal to the number of requested parallel rings from the received request i.e. the value of the NUM OF CHILDREN field block . The policy checker then compares the value of the requested parallel ring tree depth i.e. the value of the LEVEL field from the received request with the maximum parallel ring depth threshold value of LEVEL THRESH block . If the value of the LEVEL field exceeds the value of the LEVEL THRESH parameter block the response value is set equal to zero 0 block . Control then returns from the example machine readable instructions of to the example machine readable instructions of thereby returning the response value of zero 0 .

If the value of the LEVEL field does not exceed the value of the LEVEL THRESH parameter block the policy checker determines if the value of the NUM OF CHILDREN field exceeds the maximum number of children per parent threshold value of MAX PER block . If the value of the NUM OF CHILDREN field does not exceed the value of the MAX PER parameter block control proceeds to block . If the value of the NUM OF CHILDREN field exceeds the value of the MAX PER parameter block the policy checker reduces the response value to the value of the MAX PER parameter block .

If the value of the NUM OF CHILDREN field does not exceed the maximum parallel ring tree size threshold of MAX TOTAL block control proceeds to block . If the value of the NUM OF CHILDREN field exceeds the value of the MAX TOTAL parameter block the policy checker sets the response value to a minimum of the current response value or the value of the MAX TOTAL parameter block .

The policy checker then counts the number of active parallel ring calls in the current time window i.e. WINDOW PAR RING block . In the example of the policy checker locates all the records in the example data structure having the value of the LAST CHILD CALL TIME field that falls within window duration seconds of the current time. For the located records the policy checker totals the NUMBER CHILD CALL field values .

If the value of the WINDOW PAR RING variable is less than or equal to the maximum number of parallel ring calls threshold of MAX WINDOW block control proceeds to block . If the value of the WINDOW PAR RING variable is greater than the value of the MAX WINDOW parameter block the policy checker sets the response value to a minimum of the current response value or the value of the value of the MAX WINDOW parameter minus the value of the WINDOW PAR RING variable block .

If the response value is less than or equal to zero block control returns from the example machine readable instructions of to the example machine readable instructions of thereby returning the response value. If the response value is greater than zero block the policy checker creates and adds a new record to the active parallel ring tree information block . Control then returns from the example machine readable instructions of to the example machine readable instructions of thereby returning the response value.

The processor platform of the example of includes a general purpose programmable processor . The processor executes coded instructions present in main memory of the processor e.g. within a RAM . The processor may be any type of processing unit such as a microprocessor from the Intel AMD IBM or SUN families of microprocessors. The processor may implement among other things the example machine readable instructions of to implement the example call handler the example call control processor the example parallel ring policy enforcers and or the example policy checker and or the example record maintainer .

The processor is in communication with the main memory including a ROM and the RAM via a bus . The RAM may be implemented by DRAM SDRAM and or any other type of RAM device and ROM may be implemented by flash memory and or any other desired type of memory device. Access to the memory and is typically controlled by a memory controller not shown in a conventional manner.

The processor platform also includes a conventional interface circuit . The interface circuit may be implemented by any type of well known interface standard such as an external memory interface serial port general purpose input output etc.

One or more input devices and one or more output devices are connected to the interface circuit . The input devices and output devices may be used for example to implement the example network interface of the example interface of etc.

Of course persons of ordinary skill in the art will recognize that the order size and proportions of the memory illustrated in the example systems may vary. Additionally although this patent discloses example systems including among other components software or firmware executed on hardware it will be noted that such systems are merely illustrative and should not be considered as limiting. For example it is contemplated that any or all of these hardware and software components could be embodied exclusively in hardware exclusively in software exclusively in firmware or in some combination of hardware firmware and or software. Accordingly persons of ordinary skill in the art will readily appreciate that the above described examples are not the only way to implement such systems.

At least some of the above described example methods and or apparatus are implemented by one or more software and or firmware programs running on a computer processor. However dedicated hardware implementations including but not limited to an ASIC programmable logic arrays and other hardware devices can likewise be constructed to implement some or all of the example methods and or apparatus described herein either in whole or in part. Furthermore alternative software implementations including but not limited to distributed processing or component object distributed processing parallel processing or virtual machine processing can also be constructed to implement the example methods and or apparatus described herein.

It should also be noted that the example software and or firmware implementations described herein are optionally stored on a tangible storage medium such as a magnetic medium e.g. a disk or tape a magneto optical or optical medium such as a disk or a solid state medium such as a memory card or other package that houses one or more read only non volatile memories random access memories or other re writable volatile memories or a signal containing computer instructions. A digital file attachment to e mail or other self contained information archive or set of archives is considered a distribution medium equivalent to a tangible storage medium. Accordingly the example software and or firmware described herein can be stored on a tangible storage medium or distribution medium such as those described above or equivalents and successor media.

To the extent the above specification describes example components and functions with reference to particular devices standards and or protocols it is understood that the teachings of the invention are not limited to such devices standards and or protocols. Such devices are periodically superseded by faster or more efficient systems having the same general purpose. Accordingly replacement devices standards and or protocols having the same general functions are equivalents which are intended to be included within the scope of the accompanying claims.

Although certain example methods apparatus and articles of manufacture have been described herein the scope of coverage of this patent is not limited thereto. On the contrary this patent covers all methods apparatus and articles of manufacture fairly falling within the scope of the appended claims either literally or under the doctrine of equivalents.

