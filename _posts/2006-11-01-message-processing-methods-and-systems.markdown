---

title: Message processing methods and systems
abstract: Methods and apparatus for controlling the operation of a distributed application using message interception techniques are disclosed. The message interception software is independent of the software components making up the distributed application. The message interception software processes messages by carrying out a series of actions set out in an interceptor chain configuration policy, that policy being selected on the basis of the contents of the intercepted message. The interceptor chain configuration policy is divided into a separate enforcement configuration policy which dictates what actions should be carried out on a message and in what order, and an interceptor reference policy which indicates references to interceptors which are suitable for carrying out the actions specified in the enforcement configuration policy. In this way, the behavior of the message interception software (and thus the distributed application) can be updated while both the interception software and the distributed application are running without requiring the person updating the behavior of the message interception software to deal with esoteric references to interceptor software routines.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08856862&OS=08856862&RS=08856862
owner: British Telecommunications public limited company
number: 08856862
owner_city: London
owner_country: GB
publication_date: 20061101
---
This application is the U.S. national phase of International Application No. PCT GB2006 004088 filed 1 Nov. 2006 which designated the U.S. and claims priority to GB 06251131.6 filed 2 Mar. 2006 and GB 06254585.0 filed 4 Sep. 2006 the entire contents of each of which are hereby incorporated by reference.

The present invention relates to systems for and methods of controlling the operation of a distributed application running on a distributed computer. It has particular utility in relation to the distributed applications built upon a service oriented architecture.

Distributed applications are now well known. Examples include the distributed application formed by a combination of a web browser and web server. Another example is the global e mail system supported on top of the Internet.

User configuration of such distributed applications is also well known. For example the user of a web browser is able to control whether a web site is able to store cookies on his computer. Similarly the user of an e mail client program is able to set rules which dictate how his computer handles incoming mail.

However it is often the case that an administrator of a distributed computer or computer network wants to control the operation of such a distributed application without requiring action on behalf of a user. For example an administrator of a corporate network might wish to prevent employees from accessing web sites featuring adult content or offering gambling services. Similarly an administrator might wish to prevent e mail users from receiving spam e mails.

An administrator can achieve such ends by appropriately configuring a computer which intercepts requests for web pages from employee s browsers or intercepts e mails destined for an employee. Such computers are sometimes known as application level firewalls.

Security in a distributed computer running a distributed application may be applied on a per message basis distributed applications normally work by passing messages between computers running components of the distributed application . This is known as message level enforcement. Message level enforcement is typically implemented using so called interceptors . The term interceptors is used herein in the broadest sense to describe functionality that can be used to process a message.

For large networks it is known to allow the administrator to configure a network using so called policies . These are often a set of condition action rules which network elements can interpret. By copying the sets of rules to many network elements the task of configuring the network is made easier for the network administrator. An object oriented information model for this type of policy is seen in the IETF s RFC 3060. US Patent Application 2004 0193912 discloses the use of policies to control a computer network.

The idea of building distributed applications from components created by different parties has recently received much attention Although the concept of remote procedure calls and remote method invocations has been known for decades only more recently has the problem of interfacing components written by different people in different programming languages been tackled. One important enabling technology for distributed applications of this type are implementations of the CORBA specification produced by the Object Management Group. CORBA stands for Common Object Request Broker Architecture and involves the use of an Object Request Broker in passing method invocations from a subject to a target. A more recent example is the Web Services specification. Software which enables the inter operation of components running on different platforms is known as middleware .

The CORBA standard applies a narrower meaning to the word interceptor that the definition given above. In particular in chapter 21 of the standard it says Portable Interceptors are hooks into the ORB through which ORB services can intercept the normal flow of execution of the ORB. 

Systems and methods of building sequences of interceptors in accordance with the narrower definition given above are discussed in international patent application WO 00 45256 published on 3 Aug. 2000. This application describes methods of dynamically building an interceptor chain specifically under a CORBA 3.0 middleware engine based environment using the so called Adaptive Runtime Technology ART framework which is a microkernel architecture that supports dynamic configurations of the architecture. This patent application is particularly concerned with how to invoke and then process interceptors. As described the interceptor arrangement preferably has the property of being recursive whereby the ORB passes control to a first interceptor in the chain which passes control to the next interceptor in the chain and so on until the last interceptor has completed its processing. The last interceptor then passes control back to its caller and so forth until control is returned to the ORB. Additionally each interceptor preferably applies intrinsic chaining whereby each interceptor contains information enabling it to identify and pass control to the next interceptor automatically and without reference back to the ORB where references back to the ORB are said to incur significant time and processing overheads. According to the description in WO 00 45256 the order in which interceptors are placed into a chain is provided by a configuration file particular to each domain.

According to a first aspect of the present invention there is provided a method of controlling a distributed application executable on a distributed computer said method comprising operating said distributed computer to 

intercept a message passing between computers within said distributed computer performing said distributed application 

read said message and in dependence upon the contents of said message identify a corresponding run time updatable message handling policy indicating for predetermined characteristics of the content of a message lists of actions to be performed on said message 

read deployment time settable action to software module mapping data which indicates for each of the actions in said list a software module to carry out the action and

perform said list of actions by triggering the execution of the corresponding software modules found in said mapping data.

According to a second aspect of the present invention there is provided a distributed computer for performing one or more distributed applications said distributed computer comprising 

i a run time updatable message handling policy indicating for predetermined characteristics of the content of a message lists of actions to be performed on said message being passed between said computers in performance of said distributed application 

ii a deployment time settable action assignment policy indicating one or more descriptions of software routines for performing actions in said lists of actions 

iii message handling software executable on receipt of said message to select one of said lists of actions in dependence on the contents of said message and said message handling policy and to trigger the execution of said software modules in accordance with said action assignment policy.

By updating said message handling policy at run time a user or administrator can affect the operation of said message handling software without needing to update the more complex references to software routines that actually carry out the actions selectable when updating the message handling policy. Thus the message handling software need not be re deployed in order to adapt it to a change in for example perceived threats to a distributed application which operates by passing messages between computers. Consequently the distributed application can also continue to run whilst the adaptation takes place.

The flight booking agency s server computer is provided with web server software which enables a customer to book flights online. Such software is installed from CD ROM B. The customer s PC is provided with browser software which enables the customer to interact with the web server . A browser might be installed from CD ROM A. Such distributed application software is well known and will not be described further.

In addition to the above conventional software enforcement middleware is installed on the server computer from CD ROM C. This enforcement middleware includes a core enforcement component and a transport component which can intercept XML messages arriving at the server computer and pass them to the core enforcement component it will be understood by those skilled in the art that handlers which convert HTTP requests and response to XML are well known and need not be described in detail here . The core enforcement component includes an XML processor able to process an XML stream in this embodiment the XML processor is provided by the SAX software package . The transport component plugs in to the SAX software package as will be understood by those skilled in the art.

The core enforcement component includes dynamic handler chain management software as will be described in detail below. It also provides the interface which allows an administrator to use the administration computer to load update etc. policies stored on the web server computer .

In addition one or more local interceptor executables are loaded onto the web server from the CD ROM D. In this embodiment interceptors are software modules which are triggered in accordance with the dynamic handier chain created by the core enforcement program.

The administration computer has a Web Service Distributed Management implementation such as Apache MUSE or any other implementation that supports WSDM protocol stack e.g. IBM Websphere CA WSDM or the WS Management stack e.g. Microsoft NET WSE installed upon it from CD ROM E it will be realised that WS is a common abbreviation for Web Services . This enables an administrator to load configuration files and policies into the web server computer in order to control its operation as will be described below policies are normally more dynamic that configuration files i.e. more frequently updated especially they are often updated during the execution of the application they control .

As will be described in detail below such administration software provides a notification broker which handles notifications generated by the core enforcement component as will be described below a graphical user interface allowing the administrator to work on policy lifecycle management and allows the aggregation of management interfaces of multiple enforcement systems.

A protected resource address list comprising the internal addresses of protected resources is also installed on the web server computer . This enables a logical address relating to a group of policies to be converted to a real address by the web server computer .

The utility service server computer is provided with software providing one or more utility services e.g. certificate verification security token validation from CD ROM F.

The block diagram in illustrates at a more conceptual level how embodiments of the present invention operate. The diagram illustrates three regions or layers a resource layer containing one or more protected resource processes a Web services layer containing one or more endpoint processes and an enforcement middleware layer containing an enforcement middleware process .

Thus a protected resource can be thought of as the target process to which a message or request is directed an end point process can be thought of as providing an interface for accessing a resource and an enforcement middleware process can be thought of as a pre or post processor for messages or requests that are directed to or from the resource .

To expand upon enforcement middleware is a processing entity that is placed between a computational resource e.g. the core enforcement program of and the rest of the network. Enforcement middleware can be realised as software for example in a programmable computing context as seen in . Alternatively enforcement middleware can at least in part be realised in firmware for example in the context of an embedded processing system. Firmware based systems include firmware of a network node for example such as a message router a message hub or a firewall.

As will be understood by those skilled in the art an endpoint is a referential entity processor or resource where messages for a network service can be targeted. An endpoint indicates a specific network location for accessing a network service using a specific protocol and data format. From an architectural perspective it is understood as an association between a protocol binding and a network address that may be used to communicate with this service.

A protected resource or protected service is a network service or a resource that is exposed as a network service or resource of which associated endpoints are protected by one or more enforcement points that intercept all of the incoming and outgoing messages respectively to and from the service or resource at each network endpoint.

Returning to the embodiment of the behaviour of the core enforcement program is dictated by a number of policies stored at the web server computer which are illustrated schematically in the block diagram in . Other formats and arrangements of policy are of course possible. In this specific embodiment each of the policy types is an XML document formatted in accordance with a common XML schema. This ensures that action tags in the ECP do have the same meaning as action tags in the IRP and enables the interworking of policies and program components provided by different vendors. The four policy types illustrated in constitute an enforcement middleware policy framework comprising 

An Enforcement Configuration Policy ECP This policy type describes actions that can be enacted in response to the receipt of a message by the transport component the conditions under which each action can be executed the parameters for each action and the sequencing of the actions. The action types in the ECP are a subset of the action types included in an Interceptor Reference Policy discussed below. In relation to security the ECP specifies what sequential security actions are required to effectively fulfill the security requirements of the system in order to process a message.

Local state variables of the ECP capture enforcement state are constrained within the scope of the ECP execution and they may persist between different execution instances of the ECP. One example of such an enforcement state variable is that a certificate validation action may update a cryptographic key value that is in turn used by a decryption action and nullified at the end of the ECP execution. Another example is that a register transaction context action may append a transaction identifier to a transaction context variable that persists after the end of processing the intercepted message.

Successful completion of the enforcement requires the message is a SOAP message recognised by reference to the XML schema of the expected version of SOAP 

Interceptor Reference Policy IRP The IRP specifies the location of corresponding interceptors. The location can for example be a particular path within the enforcement software package pointing to the corresponding binary or it can be an endpoint reference to a remote resource. More specifically this policy type contains mappings between each available enforcement action which is specified by the ECP and a software entity that is the interceptor that executes the action. The types of enforcement actions contained in this policy are a superset of the enforcement actions contained in ECP.

If an interceptor executing an enforcement action requires an external infrastructure service to be invoked for example one stored on the utility server computer the policy contains a unique static reference for the invocation and an appropriate Message Exchange Pattern of the external invocation. A Utility Service Policy described below is used to resolve these static references to a respective endpoint reference of the available infrastructure service at execution time of the interceptor.

An IRP can be updated by an authorised entity for example an administrator or a management service. According to the present embodiment this type of policy can only be changed in conjunction with a pool of interceptors being redeployed. A tight coupling between this policy and the pool of interceptors is necessary in order to preserve system dependencies it will be remembered that local interceptor instances might be loaded onto the web server computer from CD ROM D.

Utility Service Policy USP As mentioned above while processing a message some interceptors may require the capabilities of some external services. For example in order for an enforcement point to verify a certificate or a token that is found in a message an interceptor may have to query or invoke an appropriate security token service if the required functionality is not available locally. Likewise in order to obtain an access control decision an interceptor may need to invoke an access control policy decision point. All of the information regarding the alternative services available and the locations of these services are contained in the USP.

The USP contains information that enables the invocation of additional infrastructure services. This policy defines a mapping that resolves the static USP references contained in the ECP to a single or a prioritised list of endpoint references of infrastructure services that implement the same Message Exchange Pattern. This separation between ECP and USP allows administrators and management services to update the binding between the enforcement point and any external infrastructure services dynamically without the need to redeploy or update the interceptors in place.

The type of service and interactions required to process a message are typically embedded into the code of a particular interceptor. However there could be many services of the same type and some of them might not be available for some reason for example the address of a particular service might have changed. In order to improve reliability therefore the interceptors preferably make remote invocations by using static references that are resolved at run time that is at the time of creating the interceptor chain by consulting the USP. An authorized entity for example an administrator or management service can reconfigure details such as the addresses and endpoint references of the additional external auxiliary services involved in the enforcement process. This type of information is contained within the USP and which is configurable via the dedicated manageability interface at the administrator s computer.

The additional configuration information in the USP mentioned above includes the address priority and terms and protocol of invocation of external infrastructure services. Such items of configuration information are called USP references which are stored in the USP and accessed each time a handier is deployed in a handier chain as will be described below in order to process an intercepted message.

Furthermore it may be preferable that within the same security administrative domain different instances of the enforcement middleware the core enforcement program is an example of enforcement middleware are distributed over the network and share a common security token service or the same PDP. The ability to refer explicitly to such utility services via the USP and configure the binding of the instances of the enforcement middleware with these utility services improves flexibility and facilitates the aggregation of enforcement functions by introducing a dependency between a collection of distributed enforcers with the same authority.

An authorized entity for example an administrator or management service can introduce or update this information independently of the ECP and IRP via a dedicated manageability interface. Each USP reference may include a list of addresses for example in the form of network service endpoint references of infrastructure services. Each entry in the list may be accompanied by a protocol identifier and any additional configuration parameters that assist the interceptor implementing the expected MEP for invoking the corresponding external infrastructure service. The order in the abovementioned list reflects the order of priority by which external infrastructure services can be invoked by an interceptor. If an external service is unavailable or there is a fault the interceptor may invoke the next service in order.

Capability Exposure Policy CEP This policy is used for publishing additional conditions for interacting with a protected resource. This policy is derived by the ECP by collecting types of message elements message content and MEP specific contextual information that is used as parameters or arguments in the execution of an enforcement action specified in the ECP.

It is often the case that a network service should advertise the conditions under which it can be invoked. The CEP is created in order to make the knowledge public about these conditions. The CEP is derived from the ECP.

The CEP in effect hides the logic behind choosing and sequencing enforcement actions defined by the ECP and contains only the type of information that is required in a message or a MEP as external input from a client of the protected service. The CEP is publicly visible to other services enabling them to create requests in compliance with any security and other quality of service requirements of a protected service.

The entities interacting with a protected resource are obliged to provide the required data in addition to any other application specific data requested by the provider of the application service. As such the conditions in the CEP augment an overall contract under which a protected resource is used. The information is provided by clients or other services who wish to communicate with the protected resource so that they construct messages in accordance with the recipient s requirements without complicated negotiation mechanisms.

According to embodiments of the present invention ECPs are deliberately separated from IRPs in order to abstract away implementation specific detail. For example an EFP policy can state that decryption of the SOAP message body is executed but there are different algorithms that can be applied to do so. In order to dynamically deploy the appropriate interceptor in the chain which will correctly execute enforcement actions the content of a message has to be analysed and the actual encryption scheme will need to be identified from the intercepted message. The ECP is used to identify the relevant enforcement actions their respective configuration parameters and the order in which they will form the chain the IRP is then uploaded and inspected in order to determine the references to the interceptor implementing each enforcement action. The IRP maps an enforcement action to an interceptor implementing the action. This can be a local interceptor that is deployed as part of the same software package or a remote an interceptor at a remote host.

The adaptive nature and the dynamicity of the core enforcement program according to the first embodiment of the present invention are in part facilitated via configurable interceptor chains as will now be described with reference to .

Typically according to embodiments of the present invention the selected composition of interceptor chains formed by the enforcement middleware on a per received message basis is based on an analysis of the content of a respective message and the security requirements of the protected resource . Interceptors are selected and inserted into the chain on the basis at least these two factors.

Considering in more detail the diagram in which relates to locally deployed interceptors all interceptors are made available in an interceptor pool . The core enforcement program includes a dispatcher process which is a component that is able to identify a policy to be enforced for an intercepted message based the content of the message. On the basis of the policy the dispatcher determines which interceptors from the pool to invoke and which order to invoke them in.

The dispatcher process is configured by way of a configuration file one example of which is given below 

The operation of the core enforcement program is illustrated in the flow diagram in . A message is received or intercepted in a first step . In step the dispatcher identifies whether there is a policy suitable for processing the message by inspecting the contextual information that is the message header for SOAP messages . For the present purposes the inspection includes 

In the context of the present embodiments this inspection is necessary as the message content might convey information to determine which ECP to use. In other words different ECPs can even be selected on the basis of message content. For SOAP messages for example it is generally recommended herein that the ECP is determined by inspecting the reference to the service endpoint that the message is targeting and optionally any other contextual information that is included in the message header in relation to this endpoint reference.

Based on this contextual information and the state of the enforcement middleware the enforcement middleware determines whether an ECP policy is available for processing the message. If in step it is established that a suitable policy is not available for any reason a problem is reported for example via an administrative interface in step and the process ends. If an ECP policy is determined then in a next step the dispatcher analyses the contents of the message The message evaluated with reference to the ECP in step .

Next in step an interceptor chain is generated by deploying the available interceptors. Based on the ECP policy and the IRP policy a chain of interceptors is formed in order to process the intercepted message and enact the specified enforcement actions. The interceptors are selected from the associated interceptor pool using the references described in the IRP and are invoked with the conditions and parameters described in the ECP.

Notably the reference to the interceptor implementing each enforcement action is explicitly defined in the IRP and it is not mentioned at the ECP. This abstraction decouples implementation specific references from the ECP. Also it is possible for the interceptors to have their own implementation specific configuration polices which are not represented in ECP though a description herein of such policies is not necessary in order to understand aspects and embodiments of the present invention.

In principle herein the core enforcement program treats the interceptors of the chain as black boxes. The setting up of the chain passes individual configuration information to the interceptors before the chain processes a message. If the interceptor chain is not created successfully ascertained in step then a problem is reported via an administrative interface in step .

If the creation of the interceptor chain is successful however then the message is processed by the interceptor chain in step . Each interceptor then uses the configuration information if provided and indeed if necessary to execute in order to process the message and to report any errors occurring.

After the processing of the message the message is either dispatched in step or routed in step to the recipient. If the message processing is being done remotely according to step then the processed message is routed to its destination. Otherwise if the message processing is being done locally as is the case in the first embodiment illustrated in the processed message is dispatched to the protected resource or to some other kind of network node at which the message was directed. Dispatching implies that the message does not have to travel over the network in order to reach its final recipient as would be the case in the embodiment shown in . Routing however assumes that the enforcement point is one of the intermediary SOAP nodes on the path of the message. In either case the process then ends.

As already mentioned the execution of an enforcement action may require functionality offered by external auxiliary infrastructure services. This includes for example an enforcement point invoking a STS as already mentioned in order to validate a security token that has been encountered in an intercepted message or the enforcement point invoking an access control PDP in order to obtain an access control decision. In such cases the interceptor will have to invoke such external services. However there could be many such services of the same type some of which may not be available at a particular instance and the address of a particular service can change. Furthermore the location and conditions of invocation of such services may change over time. In order to accommodate such changes the interceptors access at run time the additional configuration information in the USP mentioned above.

Once the message is processed the interceptor chain is dissolved in anticipation of another message being intercepted. If required by the MEP being implemented by the service local memory of the enforcement actions may be kept so that it is taken into account during the processing of a correlated message.

This is achieved by utilising local state variables of the ECP. In a subsequent evaluation of the same ECP for a different message with the same transaction context identifier an inspect transaction context action will recognise the existence of this transaction as an already known transaction.

Notably the treatment of interceptors in embodiments of the invention is such that enforcement actions and the interceptor invocations implementing them are 

The behaviour of the enforcement middleware in terms of sequence and type of the enforcement actions and types and locations of third party services invoked during the process of enforcement is determined by the private policies that is the ECP and the USP. Private policies can be configured by an authorised entity via corresponding dedicated configuration interfaces In the case of manageable services it is preferred that the latter extend the manageability interfaces exposed by the service.

According to embodiments of the present invention the enforcement middleware defines different groups of interceptors based on the type of the enforcement action they implement. The groups comprise 

In relation to interceptor deployment and message processing fault notification usually takes the form of a message containing information about an abnormal event or error that occurs within the system. In addition a similar procedure occurs for other faults that arise in the enforcement middleware.

For example any fault that occurs during the execution of an interceptor is logged and reported. The flow diagram in describes a generic fault reporting mechanism. In a first step a fault is detected. Fault detection automatically generates an exception in step which is logged in an exception database in step . Then in step an exception handier of the enforcement middleware generates a notification message which is dispatched to the appropriate notification destination in step . Preferably message information is not cached in the enforcement middleware and so the information is destroyed in step . If a message queuing mechanism is required then it is preferred that dedicated utility services are implemented for this purpose.

More generally the enforcement middleware is responsible for taking appropriate actions such as to stop processing to identify the source of the fault and to generate an informative fault messages. There are several reporting options possible. In a preferred embodiment of the present invention however a topics based notification with a dedicated Notification Broker Service NBS is used for distributing notifications about faults as illustrated in the block diagram in . It will be understood that in the specific embodiment illustrated in the notification broker and the configuration manager are both provided on the administrator s computer .

The use of topics based brokered notification for managing enforcement points typically implies the following requirements to a preferred baseline infrastructure 

Change of the enforcement middleware meta model may change the enforcement action types and USP references used in ECP USP and IRP. When this meta model is changed the notification topics and subscriptions typically need to be updated accordingly.

Different management services may have access to different aspects of the policy framework of the enforcement middleware. The NIBS is typically an infrastructure Web service that accepts notifications about different exceptions within a particular domain as well as allowing eligible services to subscribe to a specific type of notification. A NBS allows subscribers to be notified when an event of a specific type occurs within the system.

Preferably fault reporting is optimised by having management services subscribe only to fault topics relating to the aspect of interest and produced by the enforcement points they manage. A generic reporting scenario is illustrated in the block diagram in and will now be described with reference to the flow diagram in .

In a first step a failure is detected by an interceptor . Next in step the enforcement middleware generates a notification sends that to an appropriate reporting service which submits a report to the NBS in step . The NBS then notifies a configuration manger about the event in step . The configuration manager is another Web service possessing capabilities and relevant permissions to configure relevant policies as well as implement manageability communication protocols.

Based on an appropriate internal supervision policy the configuration manager analyses the notification in step in order to determine whether the problem requires an update to any policy. If an update is required according to step the configuration manager can update a configuration policy for example the ECP in step . Next the revised policy is redeployed in step and if necessary updated or new interceptors are redeployed in step . This update will have an immediate effect and is intended to influence the way interceptor chains are constructed in future. In either case of update or no update the process ends in step with the message being processed to the extent that is possible or an error is reported.

According to preferred embodiments of the present invention management of the enforcement middleware is decoupled from the enforcement point itself. The overall management framework of the enforcement middleware includes 

Thus the same enforcement middleware can be used to protect a number of different resources offered by the same or by different providers. Also some aspects of the enforcement middleware configuration for example the ECP are specific to each resource being protected whereas others for example the IRP can be common for each instance of enforcement middleware. Consequently there may be several administrators or management services with separate management concerns and which can manage some aspects of the enforcement middleware only. The concept of an enforcement point is used as a logical abstraction that encapsulates all aspects of the enforcement middleware that relate to a resource being protected. The enforcement point instance is a logical entity that is represented as the association between the enforcement middleware and a configuration instance ECP IRP USP and CEP that is put in place for protecting a specific resource.

Each endpoint instance is virtualised as a service in the control plane. That is an endpoint instance exposes dedicated management interfaces to administrators and management services and implements the process for setting and updating its configuration as illustrated in the flow diagrams in and which are described hereinafter.

The management interfaces exposed by an enforcement point instance can be presented either as a part of the management interfaces of the resource being protected or as a part of the management interfaces associated with a network node. According to present embodiments the former option that is being part of the management interfaces of the resource being protected is used if the enforcement point is deployed between the resource virtualisation endpoint and the resource. In contrast the latter option that is being part of the management interface of a network node is used if the enforcement point is deployed into an intermediary node. Notably virtualisation at the management plane does not necessarily imply visibility at the data plane. It may be the case that the enforcement point is identifiable by management services which can interact with it control plane visibility but it remains fully transparent as far as the protected resource and its clients are concerned data plane transparency . An alternative form of virtualisation is to expose the management interfaces to one or more enforcement points that have been remotely deployed as a part of the management interface of the resource being protected and then program them to pull all updates and push all notifications via these interfaces.

In any case according to present embodiments the means of accessing and updating ECP IRP USP and CEP are kept separate and distinct endpoint references which are used in order to refer to the management interfaces exposed by different enforcement point instances.

The following are the main phases of an enforcement point management life cycle according to preferred embodiments of the present invention 

As already mentioned the enforcement point itself is virtualised as a manageable service at the control plane that is it exposes dedicated management interfaces to administrators and management services. These interfaces permit the following configuration actions to be performed on the ECP USP and IRP of an enforcement point 

The actual policy deployment process is illustrated by the flow diagram in . According to embodiments of the invention the process is divided into six sequential stages. This process is initialised in step by a policy deployment decision which could be scheduled associated with the deployment of a new service or triggered by some event in the system.

The second stage in step is concerned with the deployment of the IRP. If the enforcement middleware is deployed locally the IRP is deployed with the software package containing the actual enforcement middleware software i.e. in the first embodiment illustrated in the IRP might be included on the CD ROM C .

The next stage in step is concerned with the ECP deployment. This is done by an authorised entity for example an administrator or a management service via a dedicated interface in the embodiment of via the administration computer . Notably different endpoint instances can associate with different ECP instances and therefore have different administrators or management points authorised to update them even if they relate to the same enforcement middleware. This separation of concerns allows the enforcement middleware to protect several services from different providers and offer the capability to each service provider to administer the service specific aspects that relate to the protection of their own network service or resource.

Once ECP is deployed the public CEP has to be generated in step for the particular resource being protected. The CEP is derived by selectively extracting specific information from the ECP as already explained. The CEP is then deployed in step .

Finally in step the USP can be configured via a dedicated management interface by an authorised entity for example an administrator or a management service. Notably the separation of concerns between ECP and USP allows for separate administration of the two aspects. In particular there can be scenarios where the resource provider is authorised to configure the ECP but only an administrator associated with the owner of the enforcement middleware is authorised to configure the USP.

The enforcement middleware according to embodiments of the present invention also provides an interface which allows an authorised entity to deploy and register new or updated software packages for example containing implementations of interceptors which defines the interceptor pool.

The policy update process takes place within the system when already deployed policies have to be amended to incorporate certain changes. The update is performed by an authorised management entity via dedicated manageability interfaces . Only the ECP and USP can be updated via this particular mechanism.

As has already been stated the IRP is typically supplied with the software package containing the enforcement middleware and cannot be updated unless the package and the interceptors is redeployed. This is preferably done to preserve dependencies between enforcement actions and classes containing implementations of these actions.

The CEP cannot be updated via manageability interfaces since it is generated automatically upon the deployment or update of the ECP .

According to a first step a policy update decision is effectively a process created by some human or software entity within the system which triggers the process of the policy update.

There are two strategies for enacting the policy update process incremental and full and the choice between the two is made in step .

An incremental update in step means that the existing policy is updated or amended without retrieval. This update process can be used then no analysis of the existing policy is required. A good example of the incremental update could be the changes made to a USP wherein the USP itself contains addresses of additional infrastructure services used by the enforcement middleware. For example in situations where the only changes that are required are the address of a new token service the incremental approach can be applied.

However in some cases management the entity might have to perform some checks on the existing policy in order to make sure that the changes to the policy are going to make sense and adequately address new security requirements. In this case simply amending the policy would typically not be sufficient or sensible . A typical example of such situation is the updates are performed on the ECP as such. In such cases a full update is typically required.

A full update effectively means that whatever policy is updated it is first fetched in step and analysed in step to assess its current state and then the policy is updated in step .

Unlike for an incremental update a full update typically requires that a policy is updated offline and then re deployed in step where offline means that updates are dealt with by an authorised management entity.

In step if during the policy update process some changes were made to ECP then in a next step the CEP has to be regenerated and redeployed in step in order to ensure that the changes made to any security capabilities of the protected resource are adequately represented publicly.

In the above advantageously the configuration of the enforcement middleware can be changed with immediate effect and without the need to redeploy or restart the protected resources or any other part of the system.

The block diagram in illustrates a preferred configuration and implementation of an embodiment of the present invention. In particular 

As already mentioned the foregoing description provides only one possible policy framework for the enforcement middleware. Various alternatives are possible ranging from defining one IRP one USP and one aggregate ECP per enforcement middleware instance to defining one ECP and one IRP and one USP per protected resource network service or even per service operation or per protected service endpoint. The choice between alternatives depends on the architecture of the embodiment.

According to alternative embodiments it would be possible to aggregate all ECP instances into an aggregate ECP which will be referred to for convenience as ECP . The aggregate ECP is produced by simply aggregating the ECP for each protected resource and introducing a choice element at the beginning of ECP which explicitly references the choice condition and the ECP is updated whenever a new protected resource is introduced or indeed whenever any ECP instance of the protected resources is updated. Then in essence using ECP is equivalent to using a collection of ECP with the same choice function. This is achievable because 

Notably introducing an aggregate ECP without loosing dynamicity is possible only because no a priori fixed chaining of interceptors is assumed and therefore different branches of ECP can dictate internally consistent chains of interceptors that may legitimately contradict each other if needed. However managing concurrent updates to independent parts of an ECP can be more difficult than managing updates to independent ECP instances. Furthermore in many applications different administrators may have the right to administer different ECP instances.

Similarly it is also possible to decompose IRP and USP to fragments that include only the interceptor references and utility services used in the context of evaluating the ECP instance per protected resource. The main constraint is that updates to USP and IRP may interfere with the evaluation of ECP instances for other protected resources and therefore an appropriate non interference mechanism such as a data lock will have to be introduced in order to address this risk.

An on line flight reservation service offers a different user experience defined by different endpoints for normal and frequent flyers. In this case a different set of policies is enforced at those endpoints. The system comprises client side and server side systems where the client system is typically a personal computer belonging to or accessed by a customer and the server system is usually a server or network of servers belonging to or controlled by the flight booking agency. In the present case both the client and the server systems are protected by separate security measures of which at least the system protecting the server comprises enforcement middleware according to embodiments of the present invention. Preferably though both the client and server sides are protected by enforcement middleware according to embodiments of the present invention.

For both services relating respectively to normal and frequent flyers common interceptors are applied to making an access control decision for example is the user allowed to make a booking encrypting and signing a message for example to ensure authenticity and confidentiality . In either case the or the last interceptor at the client side applies transport level routing to the message. By sending the credentials of an on line user in the message to a supporting service the service can determine whether the user sending this request is entitled to access the frequent flyer program or not. Depending on the information obtained the service sends the message either to the frequent flyer or the standard reservation endpoint. The two endpoints exposed by the service process the message differently.

The endpoints at the server side select the appropriate interceptors based on the service being requested say frequent flyer service the contents of the message and the context of the interaction for example transaction state .

In this example the server side enforcement point has an ECP stating that a digital signature of the whole message body is obligatory and that encryption of the user addresses and credit card details are obligatory. Encryption of any other message content is optional. Regardless of the message content the enforcement point will attempt to validate the signature of the message body by invoking signature verification handlers that match the algorithms used by the client. If validation fails or the message body is not signed this will cause a validation fault. If there is information about the user s address or credit card details it will expect this information to be encrypted otherwise produce a fault and will attempt decrypting it. Any other signatures and encrypted elements will be dealt with as they appear in the message but no fault will be caused if none of them is found. Overall the structure of the message determines the order by which the handlers are invoked within the constraints of the ECP policy.

The enforcement point at the frequent flyer service might contact additional utility services in order to assist the operation of the service. Examples of such services include a service to validate the user s credentials or to fetch the user s credit card details automatically for example using the validated credentials provided or to determine if the user is authorised to query a database to present the user with a list of preferred hotels which may offer preferential rates to frequent flyers. The action made at each time depends on the contents of the user request for example payment flight booking hotel search request etc. and the state of the transaction enacted. That is the actual chain of actions performed by the corresponding enforcement points that intercept messages between a client and a flight reservation service will be different if the content of each message and the context of the transaction within which the message is sent change.

On the client side this scenario demonstrates how the interceptors can be used to distinguish between users and send them different endpoints according to different attributes provided with the credentials. It should also be noted that in order for the transport level routing user credentials must be added to the message prior to calling an appropriate routing interceptor. This may involve invoking a utility service that is responsible for validating or exchanging a client s credentials . This interceptor dependency is resolved by the policy that determines the order of interceptors in a respective chain.

Next suppose a set of users has been caught abusing the system for example booking with stolen credit cards and it has been decided that action needs to be taken other than simple denial of service potentially leading to prosecution . Furthermore there is an interceptor in the interceptor pool available that is able to send notifications to another utility service which is a third party audit service that is used for gathering forensic evidence for prosecution. The presence of such a malicious user can be detected by the reservation system for example because the payment has not been successful card blocked . By simply updating the ECP policy so that this interceptor can be used and the USP policy so that the selected audit service is invoked if the malicious user attempts to pay with a stolen card the system can notify the third party audit service and trace the actions of the malicious user. The policy can also be adapted so as to delay response deny access etc as appropriate in the circumstances. This adaptation most conveniently due to the flexibility of the present invention does not require any changes in the functionality of the application system reservation service or billing service or of the third party audit service.

Notably and in contrast to the following example here there is no need to update the public CEP since the use of the audit service does not offer an alternative communication option nor does it require the provision of any additional information by the service clients. Unless they have agreed otherwise in their service usage contract all service clients will be unaware of this change.

Now assuming there was a security breach in the type of credentials used by the system. In particular a group of intruders could fake credentials of legitimate users. First the USP can be changed with the address and contact details of a new more secure security token service which is capable of providing more advanced credentials in better protected security tokens.

Furthermore assume that using the new tokens allows the system the possibility to apply 256 bit encryption and this is a new capability that was not considered in the past where only 128 bit encryption was used. In order to take advantage of the new tokens the pool of interceptors is updated to include interceptors that can use these new tokens with hew algorithms for signature and encryption in addition to what was previously used. Upon the introduction of the new interceptors the IRP has to be updated so that the new interceptors can be invoked. The security administrator is given a choice either to introduce the new encryption and signature options as new capabilities or to introduce them as updates replacements of the existing ones since they are backwards compatible . In the former case requiring a full update new capability identifiers will have to be introduced to the IRP whereas in the latter case requiring only an incremental update only the mapping of the existing identifiers for signature and encryption to the new interceptors will be updated.

Note that the ELP is loosely coupled with the rest of the system and it typically always needs to be changed if the implementation of the enforcement actions or configuration of the preferred infrastructure services has been modified.

In contrast to the previous example these changes will be reflected in the updated public CEP which is generated out of the private ones in order to allow service clients to take such changes into account. In particular the public policy will be updated in a statement identifying the new type of tokens that are accepted and the option to use 256 bit encryption. No other information will have to be disclosed.

i The above embodiment was based on a XML processor based design and no tailored WS middleware was used. However alternative embodiments use tailored Web Services often abbreviated to WS middleware for example SOAP based web services middleware implementations such as Apache Axis Microsoft NET WSE IBM Websphere or BEA Weblogic. In yet other embodiments no service container model is used for example embodiments can be REST based lightweight implementations.

ii The above embodiment had the enforcement middleware on the same host as the protected resource . In other words it used a standalone architecture which will now be expanded upon with reference to

A standalone architecture assumes that all of the components of the enforcement middleware are implemented and deployed as part of the same software package for example as illustrated in .

The schematic block diagram in illustrates a host computer system for example operating under a UNIX Linux or Windows operating system on which there is a protected resource process in communication via one or more application interfaces with an enforcement middleware process . The block diagram also illustrates a policy configuration interface an enforcement middleware deployment interface and an infrastructure services configuration interface each of which is used for configuring the behaviour of the enforcement middleware . According to the diagram SOAP messages are received by the host system at an enforcement point of the enforcement middleware . The messages are then processed by the enforcement middleware and if deemed appropriate passed to the protected resource .

This single host option is especially beneficial in the situations when a recipient of a message and the enforcement middleware that processes the message are placed on the same host and no routing is required. Then the Enforcement middleware is plugged directly into the message processing engine which provides the core capability of the implementing Transport protocol for example TCP or HTTP and XML document and SOAP message processing on a given operating platform. The message processing engine in effect provides a Web service wrapper for the protected resource. In this case 

Enforcement actions take place between the protected resource and a network endpoint that is exposed on the host implementing the resource virtualisation which is at the host where the network service exposing the resource has been deployed.

The enforcement middleware is typically transparent that is not visible or apparent to both the client and the protected resource .

A second design option for the realisation of embodiments of the invention is to have an enforcement middleware on a separate host Host B from the protected resource on Host A as shown in . In this case the enforcement middleware is deployed as a so called standalone intermediary. As in the previous case all interceptors not shown are typically implemented as part of the same software package. The enforcement middleware deployed in this fashion can either be visible on the network and have its own network address or take advantage of protocol binding techniques and be transparent to both the client and or the resource at the service application level of the network. Examples of standalone intermediaries include SOAP intermediaries which are visible to the application network and HTTP or TCP routers which are specific to intercepting SOAP messages over HTTP or TCP respectively and are transparent at the SOAP layer but visible at the HTP or TCP layers respectively. The embodiment of could be altered to use a standalone intermediary architecture by introducing a firewall computer between the customer s PC and the web server computer and loading the core enforcement program and local interceptors from CD ROMs C and D onto the firewall computer and executing them there rather than on the web server computer .

A third design option which is not shown in the drawings is a distributed architecture which is operated by aggregating functionality of different distributed interceptors implemented as SOAP nodes the details of which are discussed in more detail hereinafter. In this case the SOAP message is routed via a sequence of SOAP nodes where each one of them enforces a particular action on this message. As in the case of standalone SOAP intermediary described with reference to the individual interceptors can either be visible on the network or utilise protocol binding mechanisms to achieve transparency.

In many cases a selected practical architecture is a combination of the distributed option and the option adopted in the first embodiment or the above standalone intermediary alternative. Such a hybrid deployment is a particularly suitable choice when the software package containing the enforcement middleware at a node supports some but not all of the enforcement actions and it is subsequently extended to use remote interceptors that are deployed within other distributed SOAP nodes. A SOAP node is an intermediate entity along a SOAP message path which facilitates the exchange of SOAP messages. Typically a SOAP node deals with routing enforcement and may have additional enforcement behaviour that includes interceptor functionality in addition to controlling the flow of the SOAP traffic.

iii Interceptors in a chain may be deployed locally according to the example illustrated in the diagram in or they can be distributed over a network to and be invoked remotely. If the policies enable remote interceptors to be invoked the dispatcher is able to import those interceptors when needed. This alternative architecture is illustrated in .

Various optional features of aspects and embodiments of the present invention are presented in the following numbered clauses 

1. A mechanism to dynamically combine enforcement actions based on the content of the message and conditions of a configuration policy.

2. A process describing the control flow of performing enforcement actions on an intercepted message by sequentially invoking interceptors which are configured just before they are executed.

To summarise the above description methods and apparatus for controlling the operation of a distributed application using message interception techniques are disclosed. The message interception software is independent of the software components making up the distributed application. The message interception software processes messages by carrying out a series of actions set out in an interceptor chain configuration policy that policy being selected on the basis of the contents of the intercepted message. The interceptor chain configuration policy is divided into a separate enforcement configuration policy which dictates what actions should be carried out on a message and in what order and an interceptor reference policy which indicates references to interceptors which are suitable for carrying out the actions specified in the enforcement configuration policy. In this way the behaviour of the message interception software and thus the distributed application can be updated whilst both the interception software and the distributed application are running without requiring the person updating the behaviour of the message interception software to deal with esoteric references to interceptor software routines.

