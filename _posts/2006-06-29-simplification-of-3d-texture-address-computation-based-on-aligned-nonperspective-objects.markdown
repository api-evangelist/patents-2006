---

title: Simplification of 3D texture address computation based on aligned, non-perspective objects
abstract: Apparatus, systems and methods for the simplification of 3D texture address computations based on aligned, non-perspective objects are disclosed. For example, a method is disclosed including receiving a texture address of a first pixel and determining a texture address of a second pixel by applying at least one offset to the texture address of the first pixel. Other implementations are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08207978&OS=08207978&RS=08207978
owner: Intel Corporation
number: 08207978
owner_city: Santa Clara
owner_country: US
publication_date: 20060629
---
3D rendering engines often improve rendering performance by using texture samplers that can concurrently process more than one pixel. For example some texture samplers can sample textures concurrently for blocks of two or more adjacent pixels. When processing adjacent pixels a typical texture sampler will undertake a separate texture address calculation for each pixel fetch from memory the texture data i.e. texels for vertices bounding each texture address and then filter or blend the fetched texture data to obtain blended pixel values. However using software to calculate separate texture addresses for adjacent pixels increases computation times while implementing the texture address calculations in hardware consumes more die space.

In some circumstances 3D rendering engines may be used to rasterize primitives where the texture is aligned to the pixels being rendered. Aligned textures may arise where there is no rotation or perspective operations being applied to the textured primitive and hence the texture coordinates e.g. u v are aligned to the pixel coordinates e.g. x y . The standard approach of undertaking separate texture address calculations for adjacent pixels fails to take advantage of the rectilinear relationship between texture coordinates and pixel coordinates for aligned textures.

The following description refers to the accompanying drawings. Among the various drawings the same reference numbers may be used to identify the same or similar elements. While the following description provides a thorough understanding of the various aspects of the claimed invention by setting forth specific details such as particular structures architectures interfaces techniques etc. such details are provided for purposes of explanation and should not be viewed as limiting. Moreover those of skill in the art will in light of the present disclosure appreciate that various aspects of the invention claimed may be practiced in other examples or implementations that depart from these specific details. At certain junctures in the following disclosure descriptions of well known devices circuits and methods have been omitted to avoid clouding the description of the present invention with unnecessary detail.

In addition those skilled in the art may recognize that a 3D rendering engine such as engine may be tasked with rendering pixels in a compositing context in which the engine may undertake 3D operations that may include rendering objects having textures that exhibit rotation or perspective relative to pixel coordinate space and other rendering operations such as blit type operations in which textures may be aligned to pixel coordinate space. For example those skilled in the art will recognize that such a compositing context may be encountered when using a 3D rendering engine to render High Definition Digital Video Disc HD DVD data that includes both 3D data streams and 2D data streams where the 2D data streams may include primitives exhibiting aligned textures. However the invention is not limited to compositing contexts HD DVD or otherwise.

Texture sampler may in accordance with some implementations of the invention comprise any graphics processing logic and or hardware software and or firmware capable of using address generator logic in conjunction with a texture address for one pixel and associated texture offsets provided by shader to determine texture addresses for one or more pixels adjacent to that pixel. Thus address generator logic may receive texture coordinates and associated texture offsets and in response may generate corresponding texture map addresses. Sampler may then use those addresses to access the corresponding raw textures stored and or held in memory may use that texture data to generate filtered pixel values and may provide those filtered pixels to shader . This capability of texture sampler and associated address generator logic will be described in greater detail below.

Rasterizer may be capable of processing graphics primitives such as triangle primitives provided by a setup module not shown to generate pixels associated with a pixel or screen coordinate system. In doing so rasterizer may generate attributes for each pixel encountered in traversing for example a given triangle by interpolating triangle vertex coordinates e.g. u v vertex texture coordinates . Rasterizer may provide pixels and associated attributes to shader .

Those skilled in the art may recognize that elements of engine such as rasterizer may generate pixel fragments where such pixel fragments may comprise integer x and y grid coordinates a color value depth values etc. in addition to texture coordinates for a given pixel. However for the most part such details are beyond the scope of the invention and in order to not obscure description of implementations of the invention the term pixel or pixel data will be used throughout this disclosure even though those skilled in the art may recognize that rasterizer may provide shader with pixel fragments e.g. including pixel texture addresses . Hence while sampler may be described as providing filtered pixel fragments i.e. filtered pixel color values to shader in the interests of clarity this disclosure will describe sampler as providing filtered pixels to shader .

Texture memory may comprise any memory device or mechanism suitable for storing and or holding one or more texture maps specifying texel data e.g. in the form of a texture map associated with a texture coordinate system . While memory may comprise any volatile or non volatile memory technology such as Random Access Memory RAM memory or Flash memory the invention is in no way limited by the type of memory employed for use as memory .

Pixel shader may comprise any graphics processing logic and or hardware software and or firmware capable of receiving filtered pixel data from texture sampler . For example shader may comprise a programmable execution unit. While those skilled in the art will recognize that pixel shaders such as shader often undertake processes such as implementing various per pixel shading routines such functionality is outside the scope of the invention and will not be discussed further. While shows sampler as providing filtered pixel data to shader the invention is not limited in this regard and those skilled in the art will recognize that sampler may provide fetched texture e.g. texels to shader and that shader may undertake filtering of the texture data to generate filtered pixels.

In accordance with some implementations of the invention shader may further be capable of providing pixel texture coordinate values for use by texture sampler to access or fetch texture data e.g. texel values from texture memory . Further in accordance with some implementations of the invention shader may provide sampler with a texture address for a first or initial pixel of a pixel block including two or more contiguous pixels along with associated texture offsets as will be explained in greater detail below.

As shows the u v coordinate system or space associated with texture map is aligned to the x y coordinate system or space of pixels . In other words the u axis of the texture address space is aligned to or shares the same orientation as the x axis of the screen space while the v axis of the texture address space is aligned to or shares the same orientation as the y axis of the screen space. As also shows each pixel is offset from the adjacent pixels in the x dimension by a constant value or offset u corresponding to a fixed number of units in the u dimension of the texture coordinate space. Similarly each pixel is offset from the adjacent pixels in the y dimension by another constant value or offset v corresponding to a fixed number of units in the v dimension of the texture coordinate space. While as illustrated shows offsets u and v as having similar magnitudes the invention is not limited in this regard. Those skilled in the art will recognize that the texture maps may exhibit different magnitudes for offsets u and v.

Process may begin with receiving a first pixel s texture address act and receiving associated texture offsets act . In some implementations of the invention acts and may involve sampler receiving message from shader where message includes a first pixel s address in the form of u v texture coordinates and associated texture coordinate offsets u and v . Thus referring also to acts and may for example comprise sampler receiving texture coordinates u v for pixel p along with texture coordinate offsets u v that correspond to offsets in respective texture coordinate units of dimensions u and v between adjacent pixels.

Process may continue with the determination of the texture address of a second pixel by applying the offsets to the first pixel s address act . In some implementations of the invention address generator logic may use the texture address of the first pixel and the associated texture offsets supplied in respective acts and to determine or generate the second pixel s texture address. For example logic may add the offset value u to the texture coordinates u v of pixel to generate the texture address or coordinates u u v of pixel p that is adjacent to pixel in the x dimension. Similarly logic may for example implement act by adding the offset value v to the texture coordinates u v of pixel to generate the texture address or coordinates u v v of pixel p that is adjacent to pixel in the y dimension.

Process may then continue with the fetching of the second pixel s texture data act . One way to implement act is to have sampler use the second pixel s texture address determined in act to access or fetch associated texture data from texture memory . Thus continuing one example from above if address generator logic determines the texture address u u v for pixel p in act then sampler may use that address to fetch from memory texture data associated with those texels and of map that bound the texture address of pixel .

Process may then continue with the filtering of the second pixel s texture data act . In some implementations of the invention act may be undertaken by sampler . For example sampler may use the texture coordinate u u v determined for pixel in act to undertake an appropriate weighting of the texture data for texels and fetched in act to filter that texture data in act using for example well known bilinear filtering methods. The invention is not however limited to any particular filtering method in act nor is the invention limited to having sampler perform act .

Process may continue with the determination of the texture address of a third pixel by applying the offsets to the second pixel s address act . In some implementations of the invention address generator logic may use the texture coordinates of the second pixel determined in act and the texture offsets supplied in act to determine or generate the third pixel s texture address. For example logic may add the offset value u to the texture address u u v of pixel to generate the texture address or coordinates u 2 u v of pixel p that is adjacent to pixel in the x dimension.

Process may then continue with the fetching of the third pixel s texture data act . One way to implement act is to have sampler use the third pixel s texture address determined in act to access or fetch texture data from texture memory . Thus continuing an example from above if address generator logic determines the texture address u 2 u v for pixel in act then sampler may use that address to fetch from memory texture data associated with those texels and of map that bound the texture address of pixel .

Process may then continue with the filtering of the third pixel s texture data act . In some implementations of the invention act may be undertaken by sampler . For example sampler may use the texture coordinate u 2 u v determined for pixel in act to undertake an appropriate weighting of the texture data for texels and fetched in act to filter that texture data in act using for example well known bilinear filtering methods. The invention is not however limited to any particular filtering method in act nor is the invention limited to having sampler perform act .

The acts shown in need not be implemented in the order shown nor do all of the acts necessarily need to be performed. Also those acts that are not dependent on other acts may be performed in parallel with the other acts. For example acts and may be undertaken in parallel. Alternatively act may be undertaken before act or acts and may be combined into a single action. In other words the receipt of an initial texture address and associated texture offsets may take place in a single action through for example the receipt of message by sampler where message includes both the initial texture address and the texture offsets. Further at least some of the acts in this figure may be implemented as instructions or groups of instructions implemented in a machine readable medium. Moreover the labels first pixel and second pixel etc. are used simply to distinguish between separate adjacent pixels and do not limit the invention to a particular pixel numbering or labeling scheme or a particular pixel processing order.

In other implementations in accordance with the invention a texture sampler may for example undertake multiple concurrent sequences of acts . In other words a sampler may concurrently apply texture offsets to the addresses of two separate first pixels e.g. pixels and to determine the texture addresses for two separate second pixels e.g. pixels and . Moreover process may be extended beyond a three pixel scheme. For example a first or initial pixel of act may comprise a first pixel e.g. upper left hand pixel of a 32 pixel block of pixels e.g. four rows pixels having eight pixels each and process may be extended to use that first pixel s texture address to determine all texture addresses of pixels in the block by applying appropriate combinations of texture offsets.

In addition the invention is not limited to any particular pixels processing scheme. In other words for example the invention contemplates addition or subtraction of texture offsets and applies equally well to processing pixels along or across pixel row or pixel column positions. For example referring to acts may comprise a texture sampler adding offset u to the texture coordinates u u v v of pixel to determine the texture address u 2 u v v of adjacent pixel obtaining or fetching the texture data for texels bounding pixel s address and then filtering that texture data. Then acts might comprise that sampler adding offset v to the texture address of pixel to determine the texture address u 2 u v 2 v of adjacent pixel obtaining or fetching the texture data for texels bounding pixel s address and then filtering that texture data.

Alternatively for example acts may comprise a texture sampler subtracting offset u from the texture coordinates u 2 u v v of pixel to determine the texture address u u v v of adjacent pixel obtaining or fetching the texture data for texels bounding pixel s address and then filtering that texture data. Then acts might comprise that sampler adding offset v to the texture address of pixel to determine the texture address u u v 2 v of adjacent pixel obtaining or fetching the texture data for texels bounding pixel s address and then filtering that texture data.

Alternatively for another example acts may comprise a texture sampler adding offsets u and v to the texture coordinates u u v v of pixel to determine the texture address u 2 u v 2 v of adjacent pixel obtaining or fetching the texture data for texels bounding pixel s address and then filtering that texture data. Then acts might comprise that sampler subtracting offset v from the texture address of pixel to determine the texture address u 2 u v v of adjacent pixel obtaining or fetching the texture data for texels bounding pixel s address and then filtering that texture data. Clearly many other such pixel processing schemes are contemplated by the claimed invention.

System may assume a variety of physical implementations. For example system may be implemented in a personal computer PC a networked PC a server computing system a handheld computing platform e.g. a personal digital assistant PDA a gaming system portable or otherwise a 3D capable cellular telephone handset etc. Moreover while all components of system may be implemented within a single device such as a system on a chip SOC integrated circuit IC components of system may also be distributed across multiple ICs or devices. For example host processor along with components and may be implemented as multiple ICs contained within a single PC while graphics processor and components and may be implemented in a separate device such as a television or other display coupled to host processor and components and through communications pathway .

Host processor may comprise a special purpose or a general purpose processor including any control and or processing logic hardware software and or firmware capable of providing graphics processor with 3D graphics data and or instructions. Processor may perform a variety of 3D graphics calculations such as 3D coordinate transformations etc. the results of which may be provided to graphics processor over bus and or that may be stored in memories and or for eventual use by processor .

In one implementation host processor may be capable of performing any of a number of tasks that support the simplification of 3D texture address computations based on aligned non perspective objects. These tasks may include for example although the invention is not limited in this regard providing 3D graphics data to graphics processor placing one or more texture maps in memory downloading microcode via antenna and interfaces to processor initializing and or configuring registers within processor interrupt servicing and providing a bus interface for uploading and or downloading 3D graphics data. In alternate implementations some or all of these functions may be performed by graphics processor . While shows host processor and graphics processor as distinct components the invention is not limited in this regard and those of skill in the art will recognize that processors and possibly in addition to other components of system may be implemented within a single IC.

Graphics processor may comprise any processing logic hardware software and or firmware capable of processing graphics data. In one implementation graphics processor may implement a 3D graphics architecture capable of processing graphics data in accordance with one or more standardized rendering application programming interfaces APIs such as OpenGL 2.0 The OpenGL Graphics System A Specification Version 2.0 Oct. 22 2004 and DirectX 9.0 Version 9.0c Aug. 8 2004 to name a few examples although the invention is not limited in this regard. Graphics processor may process 3D graphics data provided by host processor held or stored in memories and or and or provided by sources external to system and obtained over bus from interfaces and or .

Graphics processor may receive 3D graphics data in the form of 3D scene data and process that data to provide image data in a format suitable for conversion by display processor into display specific data. In addition graphics processor may implement a variety of 3D graphics processing components and or stages not shown such as an applications stage a geometry stage and or a rasterizer stage in addition to one or more texture samplers. Texture samplers implemented by graphics processor may fetch or access texture data stored or held in either or both of memories and . Further in accordance with some implementations of the invention graphics processor may implement one or more texture samplers capable of using a starting or initial texture address for a pixel and associated texture address offsets to determine or generate texture addresses for pixels adjacent to that pixel so that processor may enable simplification of 3D texture address computations based on aligned non perspective objects.

Bus or communications pathway s may comprise any mechanism for conveying information e.g. graphics data instructions etc. between or amongst any of the elements of system . For example although the invention is not limited in this regard communications pathway s may comprise a multipurpose bus capable of conveying for example instructions e.g. macrocode between processor and processor . Alternatively pathway s may comprise a wireless communications pathway.

Display processor may comprise any processing logic hardware software and or firmware capable of converting rasterized image data supplied by graphics processor into a format suitable for driving a display i.e. display specific data . For example while the invention is not limited in this regard processor may provide image data to processor in a specific color data format for example in a compressed red green blue RGB format and processor may process such RGB data by generating for example corresponding LCD drive data levels etc. Although shows processors and as distinct components the invention is not limited in this regard and those of skill in the art will recognize that for example some if not all of the functions of display processor may be performed by graphics processor and or host processor .

Thus by taking advantage of the circumstances when a texture is aligned to the pixels being rendered i.e. where no rotation or perspective occurs relative to the pixel s coordinate system the address computation for a given pixel may in accordance with some implementations of the invention be simplified to the addition of offsets to the address of an adjacent pixel. In this manner a texture address compute engine may use fewer computations to generate texture addresses or fewer parallel computation units may be employed thereby reducing die size.

While the foregoing description of one or more instantiations consistent with the claimed invention provides illustration and description of the invention it is not intended to be exhaustive or to limit the scope of the invention to the particular implementations disclosed. Clearly modifications and variations are possible in light of the above teachings or may be acquired from practice of various implementations of the invention. For example while and the accompanying text may show and describe a single texture sampler coupled to a single pixel shader those skilled in the art will recognize that data processors in accordance with the invention may include rendering engines that employ multiple texture samplers each operating in accordance with the invention coupled to one or more pixel shaders. Clearly many other implementations may be employed to provide for the simplification of 3D texture address computations based on aligned non perspective objects consistent with the claimed invention.

No device element act data type instruction etc. set forth in the description of the present application should be construed as critical or essential to the invention unless explicitly described as such. Also as used herein the article a is intended to include one or more items. Moreover when terms or phrases such as coupled or responsive or in communication with are used herein or in the claims that follow these terms are meant to be interpreted broadly. For example the phrase coupled to may refer to being communicatively electrically and or operatively coupled as appropriate for the context in which the phrase is used. Variations and modifications may be made to the above described implementation s of the claimed invention without departing substantially from the spirit and principles of the invention. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

