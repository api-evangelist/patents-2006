---

title: Virtual machine migration between servers
abstract: A virtual machine is migrated between two servers. A method, at the first server, dismounts a volume on which all the files relating to the virtual machine are stored, and which was previously mounted at the first server. The method, at the second server, mounts the volume on which all the files relating to the virtual machine are stored, so that the second server can host the virtual machine. In this way, the virtual machine can be migrated without having to copy all the files from the first server to the second server. The files relating to the virtual machine are stored on a storage-area network (SAN).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08042108&OS=08042108&RS=08042108
owner: International Business Machines Corporation
number: 08042108
owner_city: Armonk
owner_country: US
publication_date: 20060318
---
The present invention relates generally to virtual machine environments in which guest operating systems run within virtual machines of one or more computing devices and more particularly to migrating a virtual machine from one server to another server.

Historically a single computing device ran a single operating system. Each computer user for instance was assigned his or her own client computing device and that computing device ran an operating system in which the user could run application programs as desired. Similarly a server computing device ran a single operating system that ran application programs.

However this type of computer architecture has disadvantages. First it is costly because each computing device needs a complete assortment of processors memory and input output I O devices to properly function whether it is being utilized or not. Second the use of this type of architecture can be inefficient. At any given time a given computing device may not be performing work and rather is sitting idle waiting for a task to be performed during times when workloads increase.

Therefore a technology has been developed in which more than one operating system is capable of running on a single computing device sharing at least the memory and the processors of the computing device. Such technology is referred to as virtualization. With virtualization a given computing device has a number of virtual machines VM s or VM environments where a guest operating system is run in each VM or VM environment. Therefore guest operating systems for multiple computer users can be run simultaneously on a single computing device such as a single server computing device. When workload demands are high more VM s can be instantiated and run. When workloads are low VM s can be suspended.

Periodically a virtual machine may have to be migrated from one server computing device or server to another server computing device or server. For instance the server that is currently hosting the virtual machine may need to be serviced such that the virtual machine has to be migrated to another server while the service or maintenance is being performed. As another example a server may be currently hosting a number of other virtual machines such that the performance of the virtual machines is suffering. Therefore migrating one or more of these virtual machines to another server may be accomplished to increase the performance of all the virtual machines.

Within the prior art migration of a virtual machine from a first server to a second server is typically accomplished by copying or moving all the files relating to the virtual machine from the first server to the second server. These files may include configuration files virtual disk files and other types of files associated with the virtual machine. Copying or moving the files to the second server may thus be a prerequisite for the virtual machine to be migrated to the second server.

However copying or moving all the files relating to the virtual machine can be a slow process. Even with gigabit Ethernet network connections for instance copying or moving gigabytes of data over such a network connection can take a long time. As a result virtual machine migration can be a slow process. For this and other reasons therefore there is a need for the present invention.

The present invention relates generally to migrating a virtual machine between two servers. A method of one embodiment of the invention at the first server dismounts a volume on which all the files relating to the virtual machine are stored and which was previously mounted at the first server. The method at the second server mounts the volume on which all the files relating to the virtual machine are stored so that the second server can host the virtual machine. In this way the virtual machine can be migrated without having to copy or move all the files from the first server to the second server. The files relating to the virtual machine are stored on a storage area network SAN .

In the following detailed description of exemplary embodiments of the invention reference is made to the accompanying drawings that form a part hereof and in which is shown by way of illustration specific exemplary embodiments in which the invention may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice the invention. Other embodiments may be utilized and logical mechanical and other changes may be made without departing from the spirit or scope of the present invention. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present invention is defined only by the appended claims.

Each of the servers may host one or more virtual machine VM s . However just one virtual machine VM currently being hosted by the server A is depicted in for illustrative clarity and convenience. Each of the VM s is a virtualized environment that enables a corresponding guest operating system OS to run on it as if the OS in question were the only OS running on the server in question. In this way a number of operating systems can run on each of the servers within a number of VM s. That is the VM s are VM environments in that each of the VM s appears to software running within the VM s as a traditional hardware environment.

It is noted therefore that the servers are considered hypervisors which are systems capable of hosting VM s. At least some embodiments of the invention are applicable to what are known in the art as Type II hypervisors which among other things are hypervisors that run on top of operating systems. For instance at least some embodiments of the invention are applicable to the hypervisors running on Microsoft Windows Server 2003 OS available from Microsoft Corp. of Redmond Wash.

The VM manager running on the server manages the VM s running on the servers . That is the VM manager allows for administration of the individual VM s such as their startup shutdown and maintenance. When a new VM is desired to be run on any of the servers it is started from within the VM manager and when an existing VM is desired to be shutdown it is shutdown from within the VM manager . The VM manager performs this functionality in relation to the servers A and B through agents A and B collectively referred to as the agents running on these servers. That is the agents are small software programs running on the servers A and B for the purposes of performing VM related functionality on these servers.

The VM thus includes an OS running thereon as well as a number of application programs running on the OS of the VM . These application computer programs may be word processing programs spreadsheet programs presentation programs e mail programs web browsing programs as well as other types of application computer programs. The set of application computer programs and the OS of a given VM are referred to as a session.

As in physical machine environments the virtual machine environment that is the VM has a set of files related thereto. These files include configuration files virtual disk files and other types of files associated with the VM that are needed for the VM to properly run. In the embodiment of such files are stored on a logical volume of the SAN . The volume may span or extend more than one partition of more than one physical hard disk drive of the SAN as is described in more detail later in the detailed description.

A volume may be generally considered as the highest level of organization within a file system. A volume is an area on or extending over one or more storage devices that is managed by the file system as a discrete logical storage unit. Each storage device such as each hard disk drive may contain one or more partitions. Furthermore a volume can exist on or extend over one or more partitions on the same or different hard disk drives. A volume that exists on one partition is considered a simple volume and a volume that exists over more than one partition is considered a multi partition volume.

As has been noted the server A is hosting the VM . However for any of a variety of different reasons the VM is to be migrated from the server A to the server B as indicated by the arrow . After migration the VM is hosted by the server B and not by the server A. Embodiments of the invention are thus concerned with migration of the VM from the server A to the server B in a performance enhanced manner.

Within the prior art part of the migration process of the VM from the server A to the server B involves copying or moving the files relating to the VM from the server A to the server B. That is the files would be individually read from the volume of the SAN by the server A and copied over the network to the server B. The server B may in turn store the files on a different volume of the SAN as can be appreciated by those of ordinary skill within the art. However this copying or moving process can be slow.

Therefore embodiments of the invention as part of the migration process of the VM from the server A to the server B do not copy or move the files relating to the VM from the server A to the server B. Rather in lieu of such file copying or moving the following is performed. The volume is dismounted at the server A where it was previously mounted at the server A. Thereafter the volume is mounted at the server B. In this way the files relating to the VM can be accessed at the server B without having to be physically copied over the network from the server A to the server B.

It is noted that dismounting of the volume at the server A prior to mounting the volume at the server B is performed at least in part to avoid any corruption of data stored on the server A. For instance as will be described as part of the dismounting process the server A flushes its file buffers of any data that is being temporarily stored within those buffers so that the volume A as stored on the SAN represents the latest version of the data of the volume A as may have been modified at the server A. Therefore when the server B mounts the volume it is guaranteed to be receiving the latest version of the data of the volume and it is further guaranteed that the server A no longer has access to the volume such that the server A cannot change the data after having dismounted the volume .

Mounting of a volume is the process of causing a remote volume such as the volume on the SAN to be available for access locally by a server. The SAN and thus the volume are visible to both the servers A and B. However only the server that has currently mounted the volume is able to access the volume such as read write modify and delete the files stored on the volume . In one embodiment just one server has the volume mounted thereat at any given time. Furthermore it is presumed herein that the user has set up the system so that the volume is just mounted at the server A at the beginning prior to the migration process.

Thus rather than copying or moving the files related to the VM from the server A and B as part of the migration process of the VM as in the prior art embodiments of the invention dismount the volume on which the files are stored at the server A and then mount the volume at the server B. The net effect is the same insofar as the server B is able to access the files regardless of whether they are copied or moved from the server A thereto or whether the volume is dismounted at the server A and then mounted at the server B. In this way this part of the VM migration process is performed significantly more quickly than in the prior art.

The entire migration process as performed in one embodiment of the invention is described in detail later in the detailed description in relation to . However it is noted that for the volume to be mounted at the server B after having been dismounted at the server A the server B has to be able to identify the volume within the SAN . That is the server B has to know the identity of each partition on each hard disk drive on which the volume exists.

In some situations this is not a simple matter of the server A indicating the identity of the volume to the server B because different servers may identify volumes differently even where the servers are running the same file system. Therefore in one embodiment a process is performed to delineate the partitions and the hard disk drives on which the volume exists so that the server B is able to properly mount the volume using this information. In particular the server A performs this identification process and its agent A via the VM manager notifies the agent B on the server B of the identity of the volume so that the volume can be properly mounted at the server B after having been dismounted at the server A.

The volume includes or extends over or exists on the partition B of the hard disk drive A and the partition B of the hard disk drive B. Therefore these partitions B and B as well as their hard disk drives A and B respectively have to be identified in a server neutral and substantially universal way so that the server B is able to have the volume mounted thereat. That is the server A has to provide a server neutral and substantially universal identification of the partitions B and B on the hard disk drives A and B respectively and provide this identification to the server B for the server B to be able to mount the volume after the server A has dismounted the volume .

In one embodiment as is described in more detail later in the detailed description in relation to the server A obtains the following information for each partition or extension of the volume . First a signature of the hard disk drive on which each partition or extension of the volume is obtained. The signature of a hard disk drive uniquely identifies that drive in a server neutral and substantially universal way such that the signature of the drive is the same to both the server A and the server B. Next the starting offset on the hard disk drive in question for each partition is obtained. The starting offset specifies where a given partition starts on the hard disk drive. Finally the size of the extension or the partition for each partition is obtained.

Thus by determining the unique signature of a hard disk drive for each partition and where each partition or extension starts on the hard disk drive and the size of each partition or extension a server neutral and substantially universal identification of the volume is obtained. This identification includes a list of the unique hard disk drive signature the starting offset and the size of each partition or extension on which the volume exists. Using this information the server B is able to properly mount the volume after it has been dismounted at the server A.

The server A first delineates the identification of the volume that stores all the files related to the VM . This identification as has been described is a server neutral and substantially universal identification of the volume in that this identification can appropriately identify the volume to both the server A and the server B. In one embodiment the server A first determines the number of partitions or extensions over which the volume extends. For each partition or extension the server A determines the starting offset the extension size and the disk signature. The set of all the starting offsets extension sizes and disk signatures for all the partitions or extensions of the volume make up the identification of the volume .

For example in relation to the Microsoft Windows Server 2003 operating system available from Microsoft Corp. of Redmond Wash. the application programming interface API DeviceIoControl exposed by the OS may be called for each extension of partition of the volume via the control code IOCTL VOLUME GET VOLUME DISK EXTENTS. In return the OS provides the disk number starting offset and the extension size of the partition in question. However the disk number specifying a hard disk drive of the SAN is not universal and rather is particular just to the server A. Therefore the API DeviceIoControl is again called with the control code IOCTL DISK GET DRIVE LAYOUT EX to obtain a disk signature for the particular disk number. The disk signature by comparison is universal and server neutral.

The VM is then turned or powered off . Turning off or powering off in this sense is itself a virtual operation since the server A is not physically turned off but rather the VM is virtually turned off as can be appreciated by those of ordinary skill within the art. In one embodiment such turning or powering off is accomplished by calling an appropriate API exposed by the given virtualization environment software being employed.

Thereafter the VM is unregistered or deregistered at the server A . Unregistration or deregistration of the VM at the server A means that the server A is no longer hosting the VM . Because only one server can host a given VM at any given time the VM is now partially ready to be hosted at the server B. Deregistration or unregistration can in one embodiment also be accomplished by calling an appropriate API exposed by the given virtualization environment software being employed.

Next any file buffers at the server A that may be temporarily buffering data of the files relating to the VM on the volume are flushed . Buffer flushing ensures that the most recent and correct version of all the files relating to the VM are properly reflected on the physical hard disk drives on which the volume exists and not only in the file buffers themselves as can be appreciated by those of ordinary skill within the art. Buffer flushing may in relation to the Microsoft Windows Server 2003 OS be accomplished by calling the FlushFileBuffers API.

The volume is then dismounted from the server A so that it can be mounted at the server B for hosting of the VM at the server B. Dismounting the volume means that the volume is no longer accessible by the server A even though the SAN on which the volume exists remains visible to the server A. In one embodiment in relation to the Microsoft Windows Server 2003 OS the DeviceIoControl API is controlled with the control code FSCTL DISMOUNT VOLUME to dismount the volume and thereafter the API DeleteVolumeMountPoint is called to completely remove the volume from being accessible at the server A.

Finally the server A transmits the identification of the volume previously determined in part of the method to the server B via or through the VM manager running on the server . For instance the agent A running on the server A may communicate the identification of the volume to the VM manager running on the server which it turn communicates the identification of the volume to the agent B running on the server B. Thus the server B receives the identification of the volume from the server A via the VM manager running on the server .

The server B then mounts the volume using the identification of the volume that has been provided by the server . Mounting the volume may include first ensuring that the volume can be properly found on the SAN . For instance the server B may in relation to the Microsoft Windows Server 2003 OS call the API FindFirstVolume to find the first volume on the SAN and then step through all the volumes on the SAN by calling the API FindNextVolume in an iterative manner. For each volume found the disk signatures starting offsets and extension sizes of the partitions of the volume are compared to the identification of the volume provided by the server A. Once the identical volume has been found the server B then mounts the volume such as by using the API SetVolumeMountPoint as exposed by the Microsoft Windows Server 2003 OS.

Thereafter the server B registers the VM . Registration of the VM means that the server B is now hosting the VM . Thus the VM has been migrated from the server A to the server B without having to copy all the files relating to the VM from the server A to the server B. The VM is now accessible and can now be turned on as needed by calling an appropriate API of the given virtualization environment software being employed.

It is noted that although specific embodiments have been illustrated and described herein it will be appreciated by those of ordinary skill in the art that any arrangement calculated to achieve the same purpose may be substituted for the specific embodiments shown. This application is thus intended to cover any adaptations or variations of embodiments of the present invention. Therefore it is manifestly intended that this invention be limited only by the claims and equivalents thereof.

