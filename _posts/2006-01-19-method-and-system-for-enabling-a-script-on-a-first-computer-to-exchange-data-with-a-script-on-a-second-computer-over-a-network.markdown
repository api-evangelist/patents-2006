---

title: Method and system for enabling a script on a first computer to exchange data with a script on a second computer over a network
abstract: A method and system for enabling a script on a first computer to communicate and exchange data with a script on a second computer so as to provide access by the script to data typically inaccessible by a script. The method and system enable a first computer to control the Internet navigation of a second computer, and also enable instant messaging between a first computer and a member of a synchronization group. The computers may be connectable with each other over any type of network (e.g., LAN, WAN, intranet, Internet, cellular, etc.).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07650378&OS=07650378&RS=07650378
owner: Yahoo! Inc.
number: 07650378
owner_city: Sunnyvale
owner_country: US
publication_date: 20060119
---
This continuation application claims the benefit of application Ser. No. 09 904 300 filed Jul. 12 2001 now U.S. Pat. No. 7 051 119 issued on May 23 2006 entitled METHOD AND SYSTEM FOR ENABLING A SCRIPT ON A FIRST COMPUTER TO COMMUNICATE AND EXCHANGE DATA WITH A SCRIPT ON A SECOND COMPUTER OVER A NETWORK which is hereby incorporated herein by reference.

This invention is directed to a method and system for enabling a script on a first computer to transmit and exchange data with a script on a second computer over a network.

A script written in JavaScript VBScript or other similar scripting language provides a simple way to add certain functionality to a web page. For example buttons and scrollbars may be easily added to a web page using a script. However the functionality available from a script is limited because a script cannot directly access a computer s operating system. In addition a first script script A on a first computer computer A cannot transmit and exchange data with a second script script B on a second computer computer B . Thus a user of computer A cannot share the functionality of script A with one the user of computer B.

The present invention is directed to a method and system for enabling a script on a first computer to transmit and exchange data with a script on a second computer. The computers may be connectable with each other over any type of network e.g. LAN WAN intranet Internet cellular etc. .

In an embodiment a first script and a first control are downloaded to a first computer. Alternatively scripts and controls may be downloaded to both a first and second computer or the scripts may be installed on the computer s using other now known or hereafter developed methods techniques systems devices etc. Typically a user of the computer may access the functionality of a script and pass data to and receive data from the script. A control typically has a predefined functionality or plurality of functionality access to other programs on the computer e.g. operating system communication program and interface etc. .

In accordance with an embodiment of the present invention the first script can receive data input from a user of the first computer and the first control has a function defined therein e.g. a login function and can communicate with the first script for receiving the data input by the user. The first control can communicate with a server i.e. transmit and transmit the data received by the first control from the first script i.e. the data entered by the user to the server. The server transmits the data received from the first computer to the second computer for receipt by a second control on the second computer with the second control communicating with a second script and transmitting the data received from the first computer. Thus the first script can pass data to and effectively control the second script. For example the first script can send a command to the second script instructing the second script how to manipulate the Document Object Model DOM of an Internet browser window. One example of this might be to control the display of a second computer by displaying a certain advertisement in a web page being viewed i.e. being displayed by the computer display as an Internet browser window or an image within a browser window by the a user of the second computer. To insert an tag into the DOM of the web page being viewed by the second user the first script transmits via the first control server and second control data to second script instructing the second script to insert a specific image i.e. advertisement into the DOM of the Internet browser window. The first script may thus control the second script so that a specific advertisement i.e. image is displayable in the Internet browser window being viewed by the second user

By providing communication between the script and control and between the control and server the present invention provides advantages over the prior art. For example in accordance with the present invention a script may now have access to data and functionality of the control such as for example functions typically made available by the control to other applications via a component object model COM interface. Those functions and functionality are typically not available to a script.

In another embodiment of the present invention scripts and controls enable synchronization of a first and second computer so that the second computer is caused to navigate the Internet i.e. to move from one Internet site to another based upon the Internet navigation of the first computer. This embodiment of the present invention enables a user of the first computer to login to a synchronization group and to synchronize with a user of the second computer i.e. to cause the first and second computers to synchronize with each other . The user requesting synchronization with another user becomes the leader controlling Internet navigation for all computers having logged in to the synchronization group. When users of the various computers have logged in to the synchronization group i.e. when the computers are synchronized the present invention controls the Internet navigation of the follower computers based on the Internet navigation of the leader computer. Users of computers logged in to the synchronization group may send instant messages to each other. Again a script and a control provide the functionality of this embodiment of the present invention.

The advantages of the present invention over the prior art are manifest. The present invention combines the simplicity of a script with the flexibility and freedom of a control to improve inter connectivity between and among computers connected in a network and to improve the control available to a user of a computer over other computers.

The invention accordingly comprises the features of construction combination of elements and arrangement of parts which will be exemplified in the disclosure herein and the scope of the invention will be indicated in the claims.

The present invention is directed to a method and system for enabling a script on a first computer to communicate and exchange data with a script on a second computer. The computers may be connectable with each other over any type of network e.g. LAN WAN intranet Internet including the World Wide Web cellular etc. via a server. The present invention enables a script such as those written in the JavaScript or VBScript scripting language running on one computer to communicate and exchange data across a network with a script or scripts running on other computers. As used herein the term computer is intended to be construed broadly and in a non limiting manner and to include without limitation and by way of illustration only any electronic device capable of receiving input processing storing and providing output typically as digital data. A computer may be a computer of any style size and configuration including without limitation a server workstation desktop laptop Internet appliance notebook personal digital assistant PDA etc. A computer typically includes the following components a central processing unit CPU or processor operable in connection with software e.g. operating system application etc. a disk drive e.g. floppy CD ROM DVD etc. permanent memory e.g. hard disk drive ROM temporary memory e.g. RAM an input device e.g. keyboard mouse trackball etc. an output device e.g. display and a communication interface e.g. modem . It is known to persons skilled in the art that a computer may comprise some or all of those components in addition to components not listed.

Communication between a script and the server in accordance with the present invention involves the use of one or more control s to handle the communication between the script and the server. This preferred method provides increased functionality and is more robust because of the greater flexibility and freedom available via the control. The control gives the script access to data and functionality that the script itself would otherwise be prohibited from. The terms communicate and transmit and variations thereof are used interchangeably herein to refer to the exchange of data typically digital data within a single computer e.g. between and among any of a script an application a control etc. and or between one or more computers.

Referring now to the drawings and with reference for to a server is there depicted having connected thereto a first client computer and a second client computer . The server and computers may comprise a self contained network i.e. comprising no other computers a part of an intranet a part of the Internet or virtually any other type of configuration of network so long as the functionality of the server and computers is in accordance with embodiments of the present invention as described in more detail below. The server contains software to process a request whether that be the control the script or whatever from the client computer and determine how to process the request. In some instances the server might be required to forward the request to another client computer see e.g. broadcast the request to multiple client computers see e.g. pass data back to the client computer from which the data was sent or process the request itself and not return any data to the client computer.

The functionality of the present invention is provided in part at least in the first instance by the server . To provide the functionality on each client computer each client computer must connect to the server typically via an Internet browser and download from the server to the client computer certain computer code that may include a script and a control . A user of the first computer for example may access the server via an Internet browser installed on and operable in connection with the first computer . Having thus accessed the server the user of the first computer may cause or the user may request that the server cause certain computer code or software to be downloaded from the server to a memory device of the first computer in particular any of a script and control may be downloaded by the server to the computer for permanent storage thereon e.g. on the computer hard disk . In addition or alternatively one or more scripts may be loaded on the computer prior to connection of the computer to the server and prior to download of the certain computer code or software by the server to the computer . The functionality provided by the present invention is thereafter carried out by the script control and the server .

While the scripts are preferably downloaded by the server to the various client computers they may be loaded on the client computers using any now known or hereafter developed methods devices systems etc. form transmitting digital data from one computer to another.

It should be noted that in a preferred embodiment of the present invention a script and a control are downloaded by the server to the user s computer . However other computer programs files software etc. may be downloaded by the server to the user s computer to provide the functionality of the present invention.

The configuration depicted in provides for communication between scripts and data exchange between two computers while the configuration depicted in provides a broadcast configuration in which a script on a first computer can communicate and exchange data with a script on a plurality of computers .

A script in accordance with the present invention may be written in any suitable programming language such as a web based scripting language like JavaScript or VBScript as a routine matter of design choice. Once the script is downloaded to the respective computer from the server the script is preferably loaded and running on the respective computer when a user of the computer activates an Internet browser program i.e. a program typically resident on the user s computer that facilitates navigation of the Internet using Internet addresses urls . One way to load the script is on a web browser through means of a web page that contains the script .

The script contains a pointer or reference to a control that will be handling the communication of data between the script and the server . One implementation of this could be an HTML or DHTML based web page that loads an instance of the control by use of the tag. This instance of the control can then be referenced in the script by use of its id name or any other relevant application of the Document Object Model DOM as a matter of design choice within the scope of the teachings herein. With a pointer to the instance of the control the script can then call any exposed functions in the control and pass any necessary data from the script to the control as arguments. The present invention thus enables a script running in a web browser on one computer to manipulate the DOM of a web browser on another computer. For example a first script on a first computer can send a command to a second script on a second computer instructing the second script how to manipulate the DOM of its particular web browser window. One example of this might be to control the browser display on a second computer to display a certain ad by inserting an tag into the DOM of the web page to which the user of the second computer has navigated. The first script would simply send data to the second script instructing the second script to insert a specific image into the DOM of the respective web browser window. That functionality and level of communication between scripts of different computers and control by a script on one computer over a script on another computer has heretofore not been available.

The form and type of the data sent from one script to another script can vary based on the application. For example it might be suitable to send the data in an XML format where each piece of data is broken up as an XML element. The types of data sent could be a defined class an instance of an object class a function call and its appropriate arguments a data structure etc.

A control may be software or computer code written in any art recognized programming language such as for example C C or Java. A control may be downloaded from the server to each computer upon which a script in accordance with the present invention is loaded i.e. stored in memory permanent or temporary and running. In a preferred embodiment the control is an ActiveX control the term control being user herein to also include an ActiveX control . An instance of the control may be created loaded into a certain memory location and the script maintains a pointer to that instance memory location . The control has access to certain functions and thus may expose those functions such as those made available to other applications via a COM interface s . In accordance with the present invention those functions exposed by the control may be called by the script . Advantageously the present invention thus provides access by the script to functionality i.e. the function s exposed or made available by the control that the script cannot access. One example of such a function might be one that receives data from the script then passes the data to the server to be subsequently forwarded onto other script s on other computer s . Another example might be a function in the control that returns a pointer to the an interface such as for example the IWebBrowser2 interface for the main Internet browser window to the script . By using a control in conjunction with a script in accordance with embodiments of the present invention the script has access to data to which the control also has access. In the previous example that data to which the script now has access is in the form of an object that the script cannot ordinarily access. Currently in DHTML there is no way for a script to access the IWebBrowser2 interface for an Internet window. However if a control is loaded say as a Browser Helper Object BHO the control can access a pointer to the IWebBrowser2 interface and later pass this pointer to the script if requested. The foregoing provides an example of how the present invention utilizes the control to provide script access to control data and functionality. Control data may thus be communicated from the control to the script and from the script to the server and onto another control and script as described in more detail below .

The control can also call a function s in the script and pass data to the called function in the script. One method of accomplishing this might be for the control to obtain a pointer to the IHTMLWindow2 interface of the window that the script control is loaded in and then call execScript on that pointer to execute the function provided by that script. Another method could be for the control to get a pointer to the IHTMLDocument2 interface of the document the script control is loaded in and then call get Script functionality of the script to retrieve a pointer to an IDispatch interface that receives a handle to the script engine. With the pointer to that IDispatch Invoke may be called on that pointer to call the desired function in the script. One example of the control calling a function in the script might be when the control receives data from the server that needs to then be forwarded to the script. The control can call a function in the script with the data passed as an argument.

In a preferred embodiment the control is an ActiveX control that provides at least the following functionality 1 enable data exchange between the server and a script s 2 enable data exchange between scripts on different computers with the data passing through the server and 3 provide enhanced functionality to the script by providing access by the script to the data and functionality of the control.

In the illustrative non limiting examples of embodiments of the present invention described below and elsewhere herein it is assumed that the script has loaded an instance of the ActiveX control in a manner known in the art e.g. using the tag etc. .

If a script desires to transmit data to the server the script would call the appropriate function exposed by the ActiveX control that enables data transmission by the ActiveX control to the server . For example if a user of the first computer desires to login to the server i.e. login to a particular web site user group etc. the ActiveX control might expose a Log In function which requires as data a username and password. A script could call this Log In function passing in as arguments a username and password to the function. Via the ActiveX control the Log In function then calls the appropriate function on the server e.g. a Server Log In and passes the username and password received from the script to the Server Log In function. The Server Log In function then logs the user in to a predetermined group e.g. a group of registered users for a particular web site a synchronization group as described in more detail below etc. . The server can also transmit data to the script by calling the appropriate exposed function in the ActiveX control . Continuing with the login example the server may transmit a notification to the script that the user who requested a login has indeed been logged in. The ActiveX control might expose a Log In Event function which requires a Boolean value of true or false to indicate whether or not the user has been logged in. The server would call this function and pass the value true to it when the user has been logged in. The Log In Event function then calls an appropriate function in the script by using execScript or Invoke for example such as a Script Confirm Login and passes the value true to the Script Confirm Login function. Login confirmation may then be displayed to the user of the first computer by the script .

In addition to communication between a script and the server the present invention also enables communication i.e. data exchange between two or more scripts loaded and running on two or more computers such as depicted in .

An application programming interface API enables communication between scripts provided on different computers . Communication between scripts is implemented by an ActiveX control provided on both computers . Preferably two classes are implemented in the ActiveX control of the present invention to handle the sending of data from one script i.e. the calling script to another script s i.e. the receiving script s more precisely the calling of a function in a script on another computer. The RemoteConnection class represents a connection between the calling script and the receiving script s see e.g. and is responsible for managing the receiving script s as well as managing the communication of data from the sending script to the receiving script s . It should be noted that either script depicted in may be the calling script and the description of script as the calling script is merely an illustrative non limiting example of an embodiment of the present invention. The RemoteConnection class is responsible for managing the receiving script s as well as sending the data to the receiving scripts. The RemoteConnection class exposes an AddId function which allows the calling script to add identifiers for script s i.e. computers to receive data from the calling script a RemoveId function which allows the calling script to remove identifiers for script s a BatchMode function which allows the calling script to turn on a batch send mode allowing multiple function calls to get sent in one request such as for a configuration as depicted in a SendBatch which actually sends the batch request and a RemoteInterface function which allows the script access to a RemoteInterface object such as a function in a control on the remote computer. The RemoteInterface class represents a pointer to the receiving script s and is responsible for organizing the data function call and arguments into a data structure to be sent to the receiving script s and forwarding the function call to the RemoteConnection instance which then sends this data to the receiving scripts . When an instance of the RemoteConnection class is created it in turn creates an instance of the RemoteInterface class. When the script calls a function in another script it accomplishes this by calling that function on the RemoteInterface object pointer. For example if a first script on a first computer wanted to call the SendMessage function in a second script on a second computer the first script would call the SendMessage function on the RemoteInterface object pointer which might be in the form of RemoteInterfacePtr.SendMessage msg .

The RemoteInterface object is a COM object that is derived from the IDispatch interface. The GetIDsOfNames function and the Invoke function in the RemoteInterface class are overloaded. When the script calls the SendMessage function on the RemoteInterface the Scripting Object the object that contains the code for running and or interpreting the scripting language and is the interface between the script and the application the script is contained in e.g. browser MS Office etc. makes a request to the control s RemoteInterface object GetIDsOfNames function also overloaded and asks for the dispid associated with the SendMessage call. The overloaded GetIDsOfNames creates a new dispid unless it has one available from an earlier call to SendMessage and sends it back to the Scripting Object which the Scripting Object then uses to call the control s RemoteInterface object s invoke method also overloaded . The dispid is passed to the control s invoke so the control knows that the request was for the SendMessage . The control s invoke then creates a data structure that represents the call to SendMessage and all of its arguments and passes this to the receiving script via the server . When the data is received by the receiving ActiveX control s these recipient controls must parse the data structure they have received and then pass this data onto their respective scripts calling the appropriate function s in the script with the associated arguments .

With general reference to the following illustrative and non limiting example will illustrate how a first script loaded and running on a first computer can call a function in a second script loaded and running on a second computer e.g. if the first script Script A desires to call the Send Message function on the second script Script B . Script A calls the NewRemoteConnection function exposed by the ActiveX control Control A on the first computer . That function creates an instance of the RemoteConnection class and returns a pointer to this instance to Script A which then calls the AddId function on the RemoteConnection instance pointer and passes in the identifier of the user on the second computer . The AddId function adds this identifier to a list of recipients identifiers i.e. scripts that are going to receive the function call . Script A then calls the RemoteInterface function on the RemoteConnection instance pointer. The RemoteInterface function returns a pointer to an instance of the RemoteInterface class to Script A which then calls the SendMessage function on the RemoteInterface pointer. The GetIdsOfNames of the RemoteInterface object is called and a unique identifier is generated and used to fill the rgdispid parameter passed to the Scripting Object with the generated unique identifier. In a global map the function name is mapped to the unique identifier. The Invoke function gets called and the Scripting Object uses its map to find the function name that corresponds to the dispidMember parameter passed to the Scripting Object . RemoteInterface object then creates an XML data structure with this function name and its arguments which are passed to the invoke call of the RemoteInterface. The data structure is passed to the RemoteConnection instance which then passes it to Script B via the server . When the data is received by the recipient ActiveX control on second computer this control parses the XML feed it has received and then passes this data onto Script B by calling the SendMessage function and passing on the appropriate arguments. Here is what the code in Script A might look like 

The script operates in a sandbox and is thus limited in what it can do. The control gives the script access to data and functionality to which the script would otherwise not have access. The functionality provided by the ActiveX control to the script s is a routine matter of design choice. Any functionality that may be provided via an ActiveX control may be provided to the script in accordance with the present invention. For example a control can be loaded as a Browser Helper Object BHO access a pointer to the IWebBrowser2 interface and later pass that pointer onto the script if requested by the script. The ActiveX control could implement a BandObject class whereby a script could call functions on the ActiveX control to create different types of band objects. The ActiveX control could implement a local storage class and allow the script secure read write access to certain local files on the user s computer. These are some examples of functionality unavailable to the script alone but could be provided to it with the use of an ActiveX control in accordance with the present invention. It will be obvious to persons skilled in the art and from the disclosure provided herein that other functionality may be made available to a script by a control in accordance with the embodiments of the present invention.

In another embodiment of the present invention a first computer can control the Internet navigation of a second computer. The two or more computers are synchronized so that as a user of the first computer navigates the Internet from one web page to another the second computer i.e. the Internet browser installed on and operable in connection with the second computer is caused to navigate the Internet to those same web pages. This embodiment of the present invention enables a user of a first computer to login to a synchronization group maintained in a database on the server and to synchronize with a user of a second computer. If the user of the second computer agrees to synchronize with the user of the first computer navigation of the Internet by the second user is controlled by the navigation of the first user. In addition this embodiment of the present invention enables users who are synched to send instant messages to one another. Although the following description is directed to an embodiment where only a first and second user are synchronized the present invention is not so limited and applies to any number of computer users i.e. any size synchronization group.

Referring next to an embodiment of the present invention that enables a user of a first computer to synchronize with a user of a second computer will now be discussed in detail. When Internet browser e.g. Microsoft Internet Explorer Netscape Navigator is loaded a browser window is displayed on the first user s computer display. That browser window provides an address window which displays the Internet address i.e. url of the Internet web page which is currently displayed in the browser window . That window also enables the user to enter a different Internet address and display a different Internet web page. The Internet browser formats and displays the content from each Internet web page on the display of the user s computer. When the user causes the Internet browser to load the browser window which occurs when the user activates the Internet browser e.g. by clicking on an icon on the Windows desktop and connects to the Internet using a particular Internet browser the present invention causes an explorer bar to be displayed i.e. overlayed over the browser window as an HTML page.

As depicted in the explorer bar contains a script browser helper object BHO control and an instance of an ActiveX control . The script provides the look and feel of the explorer bar as depicted in for example including defining a username window a password window a login status window an instant message receive window an instant message send window a tools area having a plurality of pull down menus e.g. login sync create group settings help and exit and a sign in button . It will be obvious to persons skilled in the art that explorer bar of the present invention may be configured for various other displays and provide various other additional functionality as a routine matter of design choice. However enabling a first user to synchronize with a second user so as to enable control of Internet navigation of the second user by the navigation of the first user is a novel and unobvious part of the present invention and that is not merely directed to the look and feel of the explorer bar . In addition the instant message capability provided in accordance with the present invention is also a novel an unobvious part of the present invention.

The BHO control can access the DOM of the Internet browser window which provides access for the script to data not typically accessible by a script. Thus data may be communicated between the script and the BHO control to the browser window DOM so that the script effectively communicates directly with the browser window DOM.

The explorer bar which may be an HTML page has an tag that creates an instance of the ActiveX control which is in the form of a dll . Once the explorer bar is loaded the script is loaded more than one script may also be loaded as a routine matter of design choice the ActiveX control is created and is now accessible by the script s . The interrelationship between and among the various components of the explorer bar are depicted in .

To synchronize the Internet navigation of two or more computers in accordance with an embodiment of the present invention each user must first login to a synchronization group defined in a database of the server . Login is facilitated by the explorer bar namely via the username and password windows and the sign in button . The login process is depicted in . After entering a username and password and selecting i.e. clicking the sign in button as in step the script sends the user username and password as arguments to the login function in the ActiveX control as in step . The ActiveX control receives the user identification and password data from the script and transmits that data to the server along with a login identification to notify the server that the data being transmitted is a request to login as in step . The server receives the data from the ActiveX control and from the login identification determines the data is a login request. Using the username and password data the server either confirms or rejects the login request confirms if the username and password are found in the database provided on the server e.g. a login database or rejects the request of the username and or password are not found . The server then transmits a login confirmation or rejection to the ActiveX control as in step . Finally the ActiveX control passes the confirmation or rejection to the script as in step so that the script is informed that the user has been logged in. The script notifies the user that whether the login request has been confirmed or rejected as in step and displays that via a login response message as depicted in . The above described login sequence and procedure may be carried out by any number of users via any number of user computers. Thus although depicts a two user computer configuration and depicts a four user computer configuration they are provided as illustrative non limiting examples of two embodiments of the present invention.

To enable synchronization of Internet navigation in accordance with an embodiment of the present invention each user must login using the sequence and procedure described above. Once each user has been logged in one user User may be the leader and control the Internet navigation of the other user s i.e. lead the other user User . User does this by requesting to sync with User as depicted in and . After User enters User s username as a receiver in a receiver window and selects a Request Sync button as in step the script creates an XML feed to package the data e.g. user name user name to be sent onto User as in step . The XML feed may have the following format 

This XML feed along with the sender s username User s username and the receiver s username User s username are passed to a synchronization function in the ActiveX control as in step in . The ActiveX control receives that data and transmits it to the server along with a synchronization identification to notify the server that the transmitted data is a synchronization request as in step . From the synchronization identification the server identifies the data as a synchronization request and transmits that request to User provided that User has previously logged in. More specifically the server passes the synchronization request to User s ActiveX control as in step . User s ActiveX control parses the XML feed it has received from the server and passes this parsed data to a script as in step . The script analyzes the data and realizes that it is a request to synchronize with User . Based on this User s script then displays a synchronization request message as depicted in and as in step of .

If User has agreed to synchronize with User by selecting the OK button wherever User navigates on the Internet using his her Internet browser User will follow i.e. User s Internet browser will be caused to navigate to the same Internet web pages as User . Controlling the navigation of User by User s navigation is depicted in and B A and B. User first navigates to a web page such as depicted in . The browser helper object BHO control provided on User s computer receives a NavigateComplete2 message from Internet browser because the main Internet browser window has navigated to a new web page as in step of . The BHO control also receives arguments with the NavigateComplete2 message such as the dispatch id url etc. . The BHO control generates a navigation identification and passes that identification and the arguments received with the NavigateComplete2 message to a script . The script then extracts any data it needs from these arguments such as the url etc. and creates an XML feed to package the data it needs to send to User as in step in . The XML feed may have the following format 

This XML feed along with the sender s username User s username and the receiver s username User s username are passed to a synchronization function e.g. SyncIt in the ActiveX control as in step . The ActiveX control receives that data and transmits it to the server along with a synchronization identification e.g. WebSync identification to notify the server that the data being transmitted is synchronization data. The server receives the data and synchronization identification and interprets the data as synchronization data. The server transmits the data to User s computer via the ActiveX control as in step of . User s ActiveX control parses the XML feed it has received from the server and passes this parsed data the url etc. to a script as in step The script analyzes the data and identifies it as synchronization data. Based on this the script then queries the ActiveX control for a pointer to the BHO control s IWebBrowser2 interface this is necessary because the script does not have access to the IWebBrowser2 interface as in step . In order to cause User s Internet browser to navigate to the url at which User has navigated it is necessary to obtain the main Internet browser window s IWebBrowser2 interface to which the BHO control has access. To achieve this it is necessary to use the ActiveX control as an intermediary between the script and the BHO control because the script only has a pointer to an instance of the ActiveX control not a pointer to the BHO control . It should be noted that the script could have obtained a pointer to the BHO control by requesting a pointer directly from the ActiveX control . Once the IWebBrowser2 pointer has been returned to the script by the BHO control via the ActiveX control the script calls the Navigate2 method on the IWebBrowser2 pointer and passes the url it received from the ActiveX control as an argument as in step . User s Internet browser window is then caused to navigate to the same url to which that User navigated.

Navigation control as just described in accordance with an embodiment of the present invention is also depicted in B A and B. In a browser window displays a web page associated with a particular url. When User navigates to a different url the web page associated with that different url is displayed in the browser window as depicted in . and temporally related to respectively. In User s Internet browser causes a web page associated with a particular url to be displayed in a browser window . In User s Internet browser is caused to navigate to the web page to which User has just navigated.

The present invention also enables User to send an instant message to User or to any other synchronized user. The explorer bar provides an instant message receive window and an instant message send window as depicted in . To send an instant message to User User types a message in the instant message send window and selects a send button . The script providing the instant message functionality creates an XML feed to package the data to be sent to User . The XML feed may have the following format 

This XML feed along with the sender s username User s username and the receiver s username User s username are passed to a synchronization function e.g. a SyncIt function in the ActiveX control. The ActiveX control receives that data and transmits it to the server along with a synchronization identification to notify the server that it is a synchronization message. The server interprets the data as a synchronization message and passes the data to the user identified in the data i.e. User provided that that user is logged into the synchronization group. More specifically the server transmits that data to User s ActiveX control which parses the XML feed it has received and passes this parsed data the instant message etc. to a script. The script analyzes the data and identifies it is an instant message and causes the message to be displayed in the instant message receive window using an IFrame on User s explorer bar .

It should be noted that while the present invention has been described terms of a single script and ActiveX control on each user s computer that is but one embodiment of the present invention. Alternatively contemplated by and within the scope and spirit of the present invention are multiple scripts and or ActiveX controls on each user s computer.

It has also been disclosed herein that certain software is downloaded from the server to each user computer to provide the various script s control s and functionality of the present invention. Alternate embodiments of providing the script s control s and functionality of the present invention are also contemplated. Such alternate embodiments include by way of non limiting example CD ROM for direct installation on the user s computer.

Moreover the network via which the users are connected to the server need not be the Internet. The present invention also contemplates any type and configuration of network including intranets cellular satellite and any other means for interconnecting a plurality of computers for communication therebetween and thereamong.

Thus while there have been shown and described and pointed out fundamental novel features of the invention as applied to preferred embodiments thereof it will be understood that various omissions and substitutions and changes in the form and details of the disclosed invention may be made by those skilled in the art without departing from the spirit of the invention. It is the intention therefore to be limited only as indicated by the scope of the claims appended hereto.

