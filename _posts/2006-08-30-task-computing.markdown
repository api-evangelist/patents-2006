---

title: Task computing
abstract: An apparatus provides computing sources of functionality, each computing source of functionality presents a service and exists in any computing environment of the apparatus. The apparatus associates a semantic service description (SSD) with the service. The SSD has a semantic description of the service, including a semantic description of a parameter of the service, according to a computer interpretable language, and, as a service grounding, a mapping between the computer interpretable language expressing the SSD and an interface, including an interface parameter, of the service. The apparatus dynamically discovers SSDs as available services through discovery mechanisms, filters the services based upon the semantic description in each SSD associated with each service, generates a user interface to dynamically compose a task based upon selecting the services and the filtering the services to continuously present possible tasks, and generates an executable semantic service workflow description of the composed task.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08117280&OS=08117280&RS=08117280
owner: Fujitsu Limited
number: 08117280
owner_city: Kawasaki
owner_country: JP
publication_date: 20060830
---
This application is related to and claims the benefit of priority under 35 USC 119 to Provisional Application U.S. Ser. No. 60 714 952 entitled TASK COMPUTING by Ryusuke Masuoka Yannis Labrou Zhexuan Song and Sung Lee filed Sep. 8 2005 in the U.S. Patent and Trademark Office the contents of which are incorporated herein by reference.

This application is a continuation in part of U.S. patent application Ser. No. 11 115 403 entitled TASK COMPUTING by Yannis Labrou Ryusuke Masuoka and Zhexuan Song filed Apr. 27 2005 now U.S. Pat. No. 7 761 885 in the US Patent and Trademark Office the contents of which are incorporated herein by reference.

This application is a continuation in part of U.S. patent application Ser. No. 10 733 328 entitled TASK COMPUTING by Ryusuke Masuoka Yannis Labrou and Zhexuan Song filed Dec. 12 2003 in the U.S. Patent and Trademark Office the contents of which are incorporated herein by reference.

The present invention is directed to real time dynamically composing and executing complex tasks based upon semantically described application device and service rich computing environments.

Personal Computing may be referred to as a paradigm in which a user operates a single device and accesses uses applications that reside on that device. Personal computing requires that the user has a sufficient understanding of the user s computing environment and of the applications that are available on the user s computer so that as a knowledgeable user the user can adequately utilize the available resources to execute complex tasks. This is computing as most users experience it on a daily basis the burden of learning how to achieve complex tasks resides with the user who has to understand each of the applications running on the user s machine and of the functions that the user s machine supports to manually transfer data between applications cut paste to manually invoke each application and the specific functionality that relates to the task and to eventually devote full attention and time to the execution of the complex task.

A shift from Personal Computing to a more task oriented view of the computing environment would be as follows 

For example as one feature of an operating system when the user inserts a music CD into the CD tray a window pops up suggesting to the user tasks the user can perform from that point on. A typical listing of these options can include 

Each of these options also mentions the application to be used to perform the action. The focus is on the action or task to be performed rather than the application used to perform the task.

However here the operating system uses a pre specified list of actions or tasks that are associated with the occurrence of a specific event inserting a music CD or connecting a digital camera so that when the event occurs the relevant listing of actions is presented to the user to act upon. In that sense the system s response is hardwired and does not include flexibility beyond that which as been programmed into the system as to the possible actions to be performed as a result of the triggering event. In other words the system shows the same set of the actions that can take place when a digital camera is connected to the computer the programmer of the operating system has prepared this specific list of actions for the particular event. Applications can change the items in the list but there is not an easy way for end users to change it.

In another example of an operating system the user may be presented with a choice of actions depending on a file type. That is a separate list of tasks is presented to the user for each of the following file types Documents Pictures Photo Album Music Music Artist Music Album and Videos. For example if the file type is a picture a list of picture tasks is presented 

This list of tasks is again pre compiled and associated with the specific file type. There is not an easy way for end users to modify the list.

In another example of office suite software a smart tags feature is available. The smart tag feature highlights text in the current document while using an editor and offers the user a drop down menu of actions that can be performed with the object that that text denotes. For example if the text represents a name then this feature may identify the object associated with that name to be a person and may offer the following list of possible actions 

The options are enabled by identifying that the string of characters in the document might represent a name. The system relies on the syntactic features of the text to identify that this particular piece of text represents a name. However a string of characters that does not resemble a typical American name e.g. Lusheng Ji may not be identified as a name related to a person. The reason is that the part of the system that identifies a piece of text as a name is a pretty simple program script that attempts to identify easily identifiable patterns in the syntactic form of the text. Once the nature of the text is identified correctly or incorrectly e.g. person address etc. a pre compiled list of possible actions is presented to the user. It is possible for application programmers to create smart tags for other domains and applications such as identifying addresses and invoking a map application etc.

Another example of an attempt to present to the user a more task oriented view of the computing environment is now discussed. When a user types an address in the search box of a search engine the service will return above the usual search results a link to a mapping function that if followed will provide a map of the address.

However it is not obvious that the user might be searching for the map of the typed address. Other reasonable possibilities exist the user might want a phone number listing associated with this address or if that address is a business the user might want to see the BETTER BUSINESS BUREAU record for the searched business or to check the weather in that vicinity and so on. In its current form the search engine guesses what type of thing in this case an address the typed text stands for and it returns a hard wired task associated with this type of entry.

Therefore in a task oriented view of the computing environment the focus is on the task that can be performed and not on the application to be used for executing the task. Moreover the user does not need to know which application will be used for the task. If the user chooses to execute one of the suggested tasks the proper application will be instantiated accordingly and invoked launched .

However the computing examples mentioned above exhibit similar features that do not allow real time dynamic composition of executable tasks as follows. In some manner the type or nature of the user s input text or event is guessed in effect the system attempts to infer the meaning semantics of a string relying on its syntactic features. A system makes a guess of plausible tasks that the user might wish to perform given that input that guess is hardwired into the system so effectively it is not the system that makes the guess in real time but it is the programmer of the system that made the guess when programming the system way before the user interacts with the system. The appropriate application is automatically invoked upon the user s selection whatever the user selected in a second step instantiated with the proper input whatever the system guessed in a first step a static cause effect or trigger response mechanism.

Although the above computing examples can increase the user s convenience the conventional systems still retain the following personal computing features 

The functionality has been designed into the application the application s programmers have programmed hard wired the system s response. As a result this is not a flexible and scalable approach because the range of possibilities has been decided during design time.

The system has limited ways to accommodate the user s actions and wishes and it cannot accurately perceive the nature semantics or meaning of the input. Despite the different technologies used in each of the examples the system relies on correctly guessing the meaning of the input by its syntactic features.

The conventional personal computing system employs a cause effect or trigger response mechanism in the sense that a certain type of input results to a single action application invocation .

Also Personal Computing i.e. the idea of a user owning and operating a computer that runs the user s applications and holds the user s data is giving way to computing environments with less well defined boundaries. As computers get permanently connected to computer networks the distinctions between local and remote applications and data collapse or even worse they are confusing to computer users. Moreover users can access and interact with devices that are not computers in the sense of personal computers but still possess significant computing power and can serve the users goals and help them accomplish a variety of tasks cameras printers smart appliances etc. . For one thing the average user may not even be aware of what is possible or feasible in such computing environments as available resources devices and applications may be constantly changing. In other words the personal computing approach is infeasible in a setting replete with devices and applications that are not a priori known to the user.

Accordingly there is a need to real time dynamically discover publish compose manage and execute tasks in a computing environment often referred to as ubiquitous pervasive computing environment which requires a fundamentally different approach to the problem of the user accomplishing tasks in the computing environment.

It is an aspect of the present invention embodiments described herein to provide a real time dynamically discovering publishing composing managing and executing complex tasks based upon semantically described application device and service rich computer computing computer system environments. According to an aspect of the embodiments a method apparatus and computer readable medium thereof real time dynamical manage a complex user task of two or more services entailing a plurality of services workflows with sequences or series of events and actions which would not be readily possible with the static or pre specified cause effect programming used in the conventional personal computing.

According to another aspect of the embodiments described herein a user can practically effectively efficiently dynamically in real time rely on a flexible and unified task user interface discovering publishing composition service and or task management and execution functions to manage interaction and to interact with a pervasive computing environment. According to another aspect of the embodiments accomplishing complex tasks managing a series of services relies on the user s understanding of the task on one hand and of the available resources devices and applications on the other so that the user can combine them into a workflow that the user will execute and the final outcome of which will be a completed task.

According to an aspect of the embodiments the function source realization layer is a computing source of functionality e.g. a device or software that represents or can present a service function for example to a user. A service layer comprises a semantic service description SSD associated with a service function to semantically describe the service function . Thus an SSD semantically represents or describes the service function . Thus the term service refers to an association of an SSD with a service function . In other words an SSD represents a service. More particularly the term service refers to computational embodiments of functionality from universe of function source realization layer of computer devices computer applications software electronic services and computer or machine or both readable content. More particularly a service layer and a function source realization layer provide the semantically described computer system source of function as the computer system service to which the middleware processing layer interfaces for real time dynamically composing in a computer system an executable task that comprises one or more services according to the generated task interface at the presentation layer to one or more services on the computer system .

Task Computing is a new paradigm to real time dynamically discover publish compose manage and execute complex tasks in application device electronic service and content rich computer network environments i.e. execute tasks in realization layer . Task computing is based upon semantically describing e.g. through Semantic Service Descriptions SSDs service functions of computing devices that according to their semantics can be composed on the fly by end users into executable tasks. Therefore according to the embodiments described herein Task Computing system has a multi layer computer system architecture of three or more programmed computing and or computer readable information layers e.g. semantic instances Semantic Service Descriptions of a presentation client processing layer a middleware server processing layer to which the client layer interfaces via a remote procedure call mechanism and a plurality of services in a plurality of computer systems layer. The term task refers to a composition of one or more actions according to discovered computer system services that for example a user wants to perform. According to the embodiments described herein a task is automatically user driven or any combination thereof is composed and managed via a computer implemented task interface . In case of a user a task as a composition of one or more services is managed e.g. discovered published composed executed etc. at the presentation layer . In an unlimiting example a composition of services view on projector weather info of business address of my contact is a task that comprises four services of view on projector weather info business address and my contact. In other words a task comprises a composition of one or more services .

The term composition refers to forming by putting together a plurality of services according to provided functional characteristic s of services as semantically described such as without limitation semantic inputs and outputs of a service for example data object type for input consumption output production of the service . An example of a functional characteristic of a service can be a precondition and an effect of the service to determine service composability. An example of a precondition and an effect of a service can be input and output data object types for a service .

The term semantic instance or semantic object refers to a set of descriptions on some item based on one or more ontology. A Semantic Service Description SSD describes a service function based upon one or more service function ontology.

The term publish refers to making the Semantic Service Description SSD available through one or more service discovery mechanisms.

The term semantic service description according to the embodiments refers to a vehicle to communicate parameters of a service function from the service function itself to an application such as a Task Computing System TCS .

TASK COMPUTING designates a type of computer system that supports automatic or user driven or both any combination thereof real time dynamically discovering publishing composing managing and executing a task that comprises one or more services based upon semantically described application device and service rich computer computing computer system environments .

Two Task Computing Client embodiments referred to as Semantic Task Execution EditoR STEER software to discover and compose into executable tasks the semantically described services and as Pervasive Instance Provision Environment PIPE software to publish and manage semantic instances and or semantic services are described in related pending U.S. patent application Ser. Nos. 10 733 328 and 11 115 403 the entire contents of which are incorporated herein by reference. The embodiments described herein relate to technologies and or in improvements in technologies used for real time dynamic composition of semantically described services into executable tasks as well as management e.g. discovery creation publication manipulation etc. of the semantically described services .

In according to the embodiment s described herein one or more Task Computing Systems TCSs are provided according to a client server computer system architecture based upon a remote procedure call mechanism. A TCS is logically and in implementation segmented into a presentation processing layer providing client type programmed processes as Task Computing Clients and a middleware processing layer providing server type programmed processes in which the segmented presentation and middleware processing layers are interfaced according to any remote procedure call mechanism such as Web services WS as a Task Computing Environment Web Service Application Programming Interface TCE WS API . The concept of Web services is well known. Therefore according to the embodiments described herein generally a TCS comprises a Task Computing Client TCC providing client type processes at the presentation layer and the TCC interfaces with the middleware server processing layer via a remote procedure call API such as Web services WS in which case the TCC is referred to as a WS TCC . A TCS. that uses Web services as an example of a remote procedure call mechanism is herein referred to as WS TCS . By using a remote procedure call mechanism such Web services any application including third party applications e.g. MICROSOFT WORD EXCEL OUTLOOK ADOBE ACROBAT etc. that can make a remote procedure call such as Web service calls or can incorporate remote procedure invocation capability could become a Task Computing Client TCC . The embodiments described herein use Web services as an example of a remote procedure call mechanism however the present invention is not limited to such a configuration and any remote procedure call mechanism can be used.

Therefore using Web services as an example of a remote procedure call API Semantic Task Execution EditoR Web Services Task Computing System STEER WS TCS is an example of a WS TCS which comprises a STEER WS Task Computing Client STEER WS TCC at the presentation processing layer interfaced via a STEER WS API with the middleware server processing layer .

A Pervasive Instance Provision Environment Web Services Task Computing System PIPE WS TCS is another example of a WS TCS . A PIPE WS API exposes middleware server management tools that are generally used for managing e.g. creating publishing removing manipulating etc. semantic object instances and or SSDs used in Task Computing as well as managing tasks . An application client that uses PIPE WS is herein referred to as a Semantically Described Service Control Mechanism SDSCM examples of which are White Hole Service Manager Real world object semanticizer and database semanticizer described in the related pending U.S. patent application Ser. Nos. 10 733 328 and 11 115 403. For example a WS TCS that uses PIPE WS comprises a Web services Task Computing Client application client or SDSCM such as White Hole Task Computing Client White Hole at the presentation processing layer which interfaces via the PIPE WS API with the middleware server processing layer .

Through the use of Web services Task Computing Clients WS TCCs such as without limitation STEER WS TCC and White Hole Service Manager Real world object semanticizer and database semanticizer as programmable computing components e.g. Task Computing Client software at the presentation layer users can manage e.g. discover publish compose execute manipulate tasks based upon semantically described services made available by the middleware server processes through TCE WS API in any one or a plurality of computing environments.

In according to today s computing environments a user is surrounded by functionality referred to as the realization layer which comprise devices or computer mediated services such as electronic services e services available over the Internet applications that run on computing devices that the user operates content available on a computer readable medium or simply devices that support a specific function. Examples of such devices application e services and content include without limitation telephones computer displays cameras entertainment devices centers televisions Personal Digital Assistants PDAs radio communication devices e.g. mobile phones etc. audio players fax machines printers weather services map services office suite computing software e.g. email application address book etc. multimedia computer readable media e.g. music compact disc movie digital video disc DVD etc. Internet sites databases etc.

In the functionality or service functions presented by the realization layer can comprise for example without limitation listening to music e.g. in case of an entertainment device downloading songs watching streaming videos listening to radios providing contact information checking addresses on a map etc. Conventionally the realization layer has been designed to provide functionality to the user by means of the user interacting with and or operating each device or service for example if the user want to call a colleague with the phone provided in the room she is visiting and the phone number of the colleague is stored in the user s electronic address book application on the user s laptop the user must start laptop application look up the phone number in question and then dial the phone number manually on the phone. In other words a user cannot compose a task . Even when the applications e services and devices can physically communicate with one another i.e. a communication link among them exists they cannot exchange data in a way that is meaningful to the user s task unless the designers of the realization layer have designed the computer system source of function for example a computing device with that specific task in mind. When faced with plethora of sources of functions the user cannot perform tasks that utilize functionalities from all these sources unless the sources of functions have been designed for that task. Moreover the casual user is often not unaware of what such tasks are possible.

In according to the embodiment described herein the service layer comprises a service function from the function source realization layer and a semantic service description correspondingly semantically describing the service function of the function source realization layer as the service of the computer system as networked non networked or both . According to an aspect of the embodiments described herein the relationship between service function and SSD can be many to many n m for a particular function source . For example one SSD to a plurality of service functions where one saves a service function composition with a plurality of service functions in the composition as an SSD . And one service function to many SSDs where one gives a plurality of kinds or types of semanticization of a singe service function . For example in a case where a book lookup service function which returns authors prices photos etc. for an ISBN input can be grounded by semantic services such that one returns the author contact and another SSD returns an image etc. More particularly according to the embodiments described herein a service layer comprises service functions available by the realization layer and Semantic Service Descriptions SSDs corresponding to the service functions together forming available computer system as networked non networked or both services . The SSD exposes on a computer network a service function of a realization layer . Certain embodiment s of SSD is are described in the related pending U.S. patent application Ser. Nos. 10 733 328 and 11 115 403 the entire contents of which are incorporated herein by reference.

Therefore Task Computing is a new paradigm for how a user interacts with service functions of realization layer sources of functions for example a computing device that emphasizes a task that the user wants to accomplish while using the computing device rather than emphasizing the specific means for how to accomplish the task. Task computing fills the gap between what users want done and a service function of a computing device that might be available in their environments. Task computing presents substantial advantages over traditional approaches such as the current personal computing paradigm namely it is more adequate for non expert computer users it is a time saver for all types of users and is particularly suited for the emerging pervasive computing type of computing environments.

In therefore according to the embodiments described herein to provide a computer system architecture software and or programmable computing hardware that would be flexible to extend and build upon a distinct and modularized middleware server processing layer is created whose functionality is made available to the presentation processing layer through remote procedure call application programming interfaces APIs so that application developers and users can use them to access Task Computing functions such as service discovery and composition into executable tasks including construction save execution monitoring publishing management etc. of services and or tasks . A remote procedure call mechanism such as for example Web services provides location i.e. different processing layers on different computers platform and programming language independence required for end user application development.

As discussed above ubiquitous pervasive networked computer computing environments are populated by a multitude of devices and other functionality e services applications content that is often transient in nature moreover end users or even developers that are creating an application for a ubiquitous environment might not know in advance what functionalities resources and corresponding service functions could be available at a given time and more importantly what they can be used for. To take advantage of this dynamism it is necessary that service functionalities can be discovered and combined at runtime rather than design time. Therefore the embodiments described herein use as an example Semantic Web technologies because if computer network resources are sufficiently self described by machine readable semantics it is possible to build an infrastructure that understands enough about the resources as computer system services to permit end users do what application developers typically do by bringing their own understanding of what resources provide and can be used for. The concept of Semantic Web is well known.

More particularly according to the embodiment s described herein the Task Computing utilizes the well known concepts of Semantic Web and Web services. However to deliver a real functioning system in a truly dynamic and ad hoc ubiquitous computing environment according to the Task Computing described herein the following are established and implemented 

 1 As shown in providing a task interface to computer system sources of functions . The task interface comprises a Task Computing System TCS logically segmented into 1 a presentation processing layer that comprises a Task Computing Client TCC and 2 a middleware server processing layer to which the TCC at the presentation layer interfaces with a remote procedure call mechanism API such as Task Computing Environment TCE Web Services API for example STEER WS API and the PIPE WS API . The API exposes the middleware server processing layer to be interfaced by the presentation processing layer . The task interface also comprises a Semantic Service Description SSD layer that semantically describes service functions . An SSD is discovered by the middleware processing layer to be presented at the presentation layer via a TCC and a service function is executed for example as part of a task to be executed by the middleware processing layer according to a control command provided for example at the presentation layer via the TCC and based upon the SSD for service function to be executed.

 2 Separation of semantic service descriptions SSDs and service implementations to provide together a service layer 

 3 Separation between discovery of a service or a saved task as the case may be mechanisms and discovery ranges and manipulation capability of services within and between those ranges by conceiving a concept of sphere as a subset of remote procedure call API running on computers and accessible by remote Task Computing Clients to achieve discovery ranges for services .

 4 Ability for users and applications to dynamically create and manipulate services that can be made available and shared with others or made unavailable when necessary i.e. provide service control management and

Therefore as shown in the separation of the above described layers is both logical conceptual and in implementation useful in building a Task Computing where the user can perform complex tasks that have not been neither implicitly nor explicitly designed into the computer network system thus multiplying the uses of the sources of functionality devices applications content and e services . The present invention is not limited to the Semantic Web and other semantic type technologies or framework that allows data to be shared and reused across application enterprise and community boundaries can be used by the embodiments described herein.

In the function source realization layer as the bottom most layer encompasses the universe of computer devices computer applications software electronic services and computer or machine or both readable content where all functionality available to the user originates. Service functions described in more detail below of the function source are computational embodiments of functionality. Such service functionality generally emanates from at least three different types of sources devices applications software and over the Web e services. These three sources are loosely defined and unlimiting categories because the boundaries between them can be highly malleable. In an example device originating services are the core functionality that the device is designed to deliver. For example a phone s device main functionality is making phone calls service . Similarly application software originating functionalities are service functions of the software that is executing on a computing device . For example a personal information management PIM application s functionalities includes storing and retrieving contact information of persons. Finally e services and or content s service functionality is for example a service function that is executing on some remote server to deliver the service functionality through access to the Web beyond the boundaries of a user s local network. Contents as a fourth source of functionality can be very useful namely content that is made available as a service function this type of service function can be very convenient as an information sharing mechanism between users. Therefore services herein refers to computational embodiments of functionality from universe of function source realization layer of computer devices computer applications software electronic services and computer or machine or both readable content. Therefore a service as a computational embodiment of functionality from a function source realization layer has interface characteristics for interacting with the service which can comprise a description of the service including name of the service function s performed etc. and functional characteristics of the service such as input output to the service . Further according to the embodiments described herein a computer implemented user interface to a computer system service is according to ontology based semantically described input data and output data of a service . For example a service described in a Semantic Service Description SSD to display a file on display projector can be named View on Projector which accepts a File as input and no output parameter.

In the service layer is sources of functionality made computationally available as service functions via Semantic Service Descriptions SSDs . The SSDs allow discovery and access to execution of the service functions . Each service function is associated with at least one Semantic Service Description SSD which for example is encoded according to OWL S which is a Web service ontology language based upon Web Ontology Language OWL using the Resource Description Framework RDF Extensible Markup Language XML exchange syntax and a SSD can be created on the fly via PIPE WS TCC as services might be created made available dynamically. The SSD embodiment described is not limited to an OWL S implementation and any computer interpretable language construct for describing properties and capabilities of computer system service functions including Web services can be used. The SSD comprises three parts profile process and grounding where the profile part allows users to manipulate the service in semantic layer and the grounding part allows users to actually invoke services . Services represent available functionality in the Task Computing universe and SSDs of these services are meant to shield the user from the complexity of the underlying sources of service functionality and make it easy for the user to employ these service sources in accomplishing interesting and complex tasks. An embodiment s of Semantically Described Services is described in related pending U.S. patent application Ser. Nos. 10 733 328 and 11 115 403 the entire contents of which are incorporated herein by reference.

In middleware server processing layer components are responsible for discovering services or deciding how services can be composed into executable tasks executing the services and monitoring service execution and enabling and facilitating a variety of management operations including the creation and publishing of semantically described services . In other words the purpose of the middleware processing layer components is to abstract all service resources as semantically described services that can be made available e.g. at the presentation layer via TCCs to either users or the applications that seek to manipulate them.

In the presentation processing layer utilizes the capabilities of the middleware processing layer to enable users to execute tasks by combining all available service functionality . A variety of programmable computing clients e.g. software clients programmable computing hardware clients or both etc. using Web services referred to as WS TCCs WS applications and or WS web based interface applications accessible with a web browser herein all referred to as a WS TCC are provided to execute tasks by combining all available service functionality via the middleware processing layer . According to an embodiment described herein the middleware layer components are exposed through well defined Web services application programming interfaces WS APIs thereby allowing creation of WS Task Computing Clients WS TCCs that utilize these APIs .

Defining the task computing environment Web services APIs at the middle processing layer for unrestricted accesses to the core functionalities of Task Computing such as service discovery composition execution save creation management opens a whole array of possibilities. For example WS TCCs are not bound to a particular implementation of Task Computing modules as long as a user can make Web Service calls the user can work on any platform and use any programming language to create WS TCCs and access services .

In therefore according to the embodiments described herein a Task Computing Environment Web Services TCE WS API is provided. Subsets of the TCE WS API can be used for various task computing purposes and herein are referred to as STEER WS API when used in the STEER WS TCS PIPE WS API when used in one or more PIPE WS TCSs and Sphere of Management SoM WS API when used to provide a Sphere for cross environment task computing as discussed in more detail below . According to the embodiments of the present invention herein will be described the following 

Herein will be described in more detail various Web Services Task Computing Client WS TCC embodiments such as Semantic Task Execution EditoR Web Services STEER WS TCC which is based upon the STEER WS API and is software to discover and compose into executable tasks the semantically described services . A STEER WS TCC as a presentation layer component of a WS TCS provides a variety of computer implemented user interfaces. The related pending U.S. patent application Ser. Nos. 10 733 328 and 11 115 403 describe a computer displayed graphical user interface referred to as STEER WS Extended XT TCC a computer displayed graphical user interface embodied in a radio device such a mobile phone and referred to as Mobile PhoneSTEER WS TCC a STEER WS Spatial Information System SIS TCC a VoiceSTEER WS TCC and a Tasklet WS TCC . The Tasklet WS TCC according to the embodiments of the present invention will be described herein.

In according to an aspect of the embodiments described herein an SSD window displays SSD parameters properties for a selected service in the service window . The SSD window can be useful for example in testing a task as part of composing a task .

In the task window provides selectable graphical displays of services that have been selected in the discovered services window . In the task window upon selection of a discovered service compatible services according to service s functional characteristic based upon ontology are automatically identified and a graphical display of the service also automatically comprises one or more selectable functional characteristic buttons representing available or valid compatible services for the selected discovered service. Selection of a functional characteristic button displays a selectable list of other discovered services that can consume produce of a preceding service whereby composition of one or more services together as indicated by displayed lines connecting the graphical displays of services creates a task . More particularly in the task window a user composes a directed service graph as a task . In case of using input output data object type of a service as functional characteristics of the service an output functional characteristic button is differentiated from an input functional characteristic button by color or any other known computer display differentiation methods.

With reference to Task Computing system has an architecture that provides a foundation for finding the services available in the current environment constructing and manipulating a user centric task view of the available services and executing the resulting tasks composed of multiple services. It even lets the end users dynamically and easily create new services as necessary. Three characteristics elements of Task Computing system are as follows 

 1 Uniform abstraction of all functionality as services . As discussed herein in Task Computing the middleware server processing layer serves to abstract all resources as semantically described services . A semantically described service is a service function available through remote procedure calls such as without limitation WSDL Web Service Description Language a UPnP Universal Plug and Play CORBA RMI RPC DCE DCOM service functions for which a semantic description a file in a language intended for describing services for example OWL S has been specified. When specifying such semantic descriptions a specified ontology is specified for the domain that the service act upon. Regarding ontologies software tools can be used to create ontologies and whenever possible existing or available ontologies can be used. The OWL S service descriptions express a functional characteristic of a service function being semanticized for example the input and output as semantic objects and the owner creator location etc. of the service . The description also includes grounding information so that the actual WSDL and or UPnP service can be properly executed. In providing these descriptions semanticizer tools such as without limitation real world object semanticizer database semanticizer internal service instance creator etc. described and or referred herein have been used for mapping ontology objects to WSDL parameters and creating any necessary grounding grounding is expressed through XSLT scripts . Web Service interfaces have been provided for the middleware server processing layer based upon which an intuitive task user interface at the presentation client processing layer is provided.

The Task Computing middleware can also be viewed as a dynamic repository of semantic service descriptions. Apart from the APIs for accessing and manipulating these descriptions which are discussed herein means is provided for querying this repository directly by implementing a API that will process any RDF Query Language RDQL query against the service descriptions JENA 2.0 is used as an example for the processing of RDQL queries . For example the developer could filter the services presented to the user for task composition by some feature of the services such as location even though an explicit API for that purpose is not provided. This capability extends the power of the application developer and as certain queries become more useful they can be permanently added to the middleware as APIs that execute pre specified RDQL queries. According to an aspect of the embodiments discovered SSD are dynamically filtered discovered services based upon relevance of the discovered services to the user and the user context by examining the semantic description of the service in an SSD based upon the discovery mechanism that discovered the SSD or based upon service compatibility according to SSD defined functional characteristic of each service or any combinations thereof.

Abstraction of functionality as services makes functionality universally accessible and allows the Task Computing infrastructure to interact with such functionality. A Task Computing system transforms the functionality of the user s computing device from applications and OS of the devices in the environment and of the available eservices on the Internet into abstracted services . This abstraction paves the way for having fewer pre arrangements to deal with the functionalities available in the environment but by itself alone might not suffice to provide user real time manipulation and composition of functionalities into tasks so that the embodiments described herein also provide a presentation layer to support real time dynamic management of a task that comprise a plurality of services .

 2 Provide intuitive to a user and or a system manipulation of abstracted services based on semantic service descriptions SSDs . Intuitive manipulation of services is made possible through the use of Semantic Service Descriptions SSDs ontologies are the mechanism for achieving such a user and or system intuitive manipulation. The concept of SSD is described in related pending U.S. patent application Ser. Nos. 10 733 328 and 11 115 403 the entire contents of which are incorporated herein by reference.

If for example instead of SSD only WSDL Web Service Description Language source of function is used to describe the functional characteristics of a Web Service the WSDL described Web Services requires that programmers understand their semantics beyond the WSDL descriptions and develop the code to use the services in the right way. As a result end users interaction with functionalities is limited by the scope of these programs in ways predefined by the developers. The additional semantics supplied in an SSD by mapping ontology objects to source of function parameters such as without limitation WSDL parameters and creating any necessary grounding allows the Task Computing infrastructure to help users manipulate the services without this deep knowledge. For example semantics can be used to constrain the manipulation of services by users or to present the user possible tasks in the current environment. If only WSDL is relied upon for a service composition based on semantic inputs and outputs of services the composition would not be restricted to any compositions of a service that produces for example an XML Schema Definition XSD string with another one that consumes an XSD string thus possibly leading to non executable or invalid service compositions. Therefore according to the embodiments described herein a composition refers to forming by putting together a plurality of services according to provided functional characteristic s of services as semantically described such as without limitation semantic inputs and outputs of a service for example data object type for input consumption output production of the service . An example of a functional characteristic of a service can be a precondition and an effect of the service to determine service composability. An example of a precondition and an effect of a service can be input and output data object types for a service . In particular the SSDs of services provide finer granularity of the services inputs and outputs so that for example a service that generates an Address semantic object will only be composable with semantically compatible services.

Another mechanism of providing user intuitive manipulation of services is by giving appropriate service names according to a natural language such as a Route from My Home to service name the composed service names of compatible services can serve as a natural language task representation s for example View on Projector My File Route from Company 1 to A City Name Airport . Ontologies can also support mechanisms such as compositions based on subclass super class relationships and semantic object translations that are very natural for end users. Therefore composition of a task is based upon a natural language sentence or in other words a composed task reads like a natural language sentence. More particularly the embodiments described herein provide assigning a name to the service as an element e.g. a phrase of a natural language sentence to support composability of the services to map into composability of natural language elements as a natural language sentence. Therefore Task Computing system allows very rich and interesting ways for the end users to interact with the services of the environment .

 3 A user can guide a real time and or dynamic late binding type composition of a task via a computer implement user interface based upon 1 and 2 for example as shown in .

As shown in by exposing the functionalities of Task Computing middleware server processing layer by Web services a WS TCC at the presentation processing layer can be freed from the implementation of the modules of the Task Computing middleware server processing layer . A WS TCC developer can use any programming language on any operating system as long as Web Service calls can be made thereby providing a WS TCC . Even third party applications MICROSOFT WORD EXCEL OUTLOOK ADOBE ACROBAT etc. that can make Web Service calls or can incorporate Web services invocation capability could be a potential WS TCC .

In functionalities such as discovery composition execution monitoring save and so on are supported in STEER WS API . Generally the TCE WS API such as STEER WS API and PIPE WS API rely on a Service identifier SID parameter which is something that uniquely identifies a semantically described service function described in an SSD . Typically according to the embodiments described herein SID is a string of a Uniform Resource Locator URL to the semantically described service function described in the SSD . For example shows an example computer source code that uses STEER WS API to synchronize the local knowledge about discovered services . shows another example computer source code of using STEER WS API to invoke tasks with multiple services . In an unlimiting example in ServiceList parameter is the input string that for example uses to delimit multiple tasks and uses to delimit service identifiers within a task and a WS TCC can have the program loop of in its own code to invoke and monitor a task execution. Therefore in the present invention the source codes such as which utilize TCE WS API to invoke remote procedures in the middleware server processing layer are embodiment implementations of WS TCCs such as STEER WS TCC

According to an aspect of the embodiments described herein the service discovery modules discover service functions by discovering associated SSDs according to a plurality of discovery mechanisms comprising one or more of a local service discovery third party service discovery remote site service discovery temporary service discovery or native service discovery or any combinations thereof. The local service discovery opens a socket port and listens for an SSD publish message from an application launched on same apparatus computer on which the local service discovery module is being executed. For example when an application launches the application published certain SSDs and sends an SSD published message to a predefined socket port opened by the local service discover to receive communication. According to an aspect of the embodiments the SSD published message received by the local service discovery from the application contains location s of the published SSDs . Then the local service discovery module makes the SSDs available to a TCC .

The third party discovery uses a third party discovery standard to discover SSDs . The third party discovery mechanisms can be for example as Universal Plug and Play UPNP technology JINI technology BLUETOOTH etc. or any combination thereof. For example a CYBERLINK UPNP and or INTEL UPNP TOOLKIT implementation can be used in third party discovery module to discovery service descriptions broadcast within the sub network by UPnP. The remote site discovery uses a web service protocol a web service call to a remote web service to discover SSDs identifiable by a web service interface.

According to an aspect of the embodiments described herein JENA by HEWLETT PACKARD DEVELOPMENT COMPANY is used to store SSDs . The parsing and indexing modules comprise parsing and analysis functions to parse and analyze SSDs . For example according to an aspect of the embodiments described herein an SSD is parsed using JENA by HEWLETT PACKARD DEVELOPMENT COMPANY with support of PELLET and OWL S API by MINDLAB UNIVERSITY OF MARYLAND USA. In particular a service is discovered is equivalent to the SSD semantically representing a service function of a function source e.g. a device software is found. A SSD which is discoverable by one of the service discovery modules is sent to the central module through the register interface where the SSD is first parsed for example by JENA with PELLET support. Once the SSD is parsed PELLET is ready to answer RDQL queries. By asking queries from the service parsing and indexing module and based upon the query results the service composition and task execution planning module completes a composition of services as a task and determines the execution plan for the task in response to a task execution command from a TCC . Once an execution plan is determined the central module invokes a related service function s via the execution modules that comprises a grounding invocation provided in the SSD to invoke a service function . The discovery modules discover services that can comprise service functions and Semantic Service Descriptions SSDs . The above description of the service parsing and indexing are not limited to such a configuration and any mechanism to parse and analyze SSDs can be used other than JENA and PELLET

According to an aspect of the embodiments described herein as an independent module a WS TCC can use any kinds of underlying service discovery mechanisms or execution mechanisms as long as a unified and high level abstracted discovery and execution mechanisms are implemented according to a Web services API s for example by implementing a Web Service interface for underlying BLUETOOTH SDP IR RENDEZVOUS JINI etc. . Therefore for example the only thing a user needs to specify is the Uniform Resource Locator URL of the Web Service Definition Language WSDL files for STEER WS API to interface with the service layer e.g. discovered services . As along as the Web Service API is provided the whole underling discovery procedure by the TCE WS API is transparent to the user at the WS TCC in presentation processing layer . For example one of STEER WS API can be using BLUETOOTH discovery modules to find and execute BLUETOOTH based services . Another STEER WS API can be using UPnP discovery modules .

According to an aspect of the embodiments the following two service discovery methods are discussed 1 a native service discovery module and 2 a temporary service discovery module . A discussed herein discovery of a service is effectively a discovery of the SSD associated with the service function . The native service discovery module is a one time file based discovery module. Several services might be frequently used and often desired to be available constantly. For example there are some services that are grounded to an always on web service such as AMAZON web service or can be executed by WS TCS STEER WS TCS without grounding. According to an aspect of the embodiments always on web service refers to a web service whose availability is not related to execution status of Task Computing System . In most cases third party venders might provide such an always on web service . For these always on web services the associated service description can be fixed because information about the web service such as where the web service is served is fixed. Therefore it can be possible to create fixed means always constant service descriptions for such always on services . In such a case costly dynamic service discovery mechanisms for example by PIPE WS TCS described in related pending U.S. patent application Ser. Nos. 10 733 328 and 11 115 403 is not necessary.

The native service discovery module is a one time light weight discovery module for such services that have a fixed service description and are frequently used. According to an aspect of the embodiments the native service discovery module runs only once at the initial startup stage of a WS TCS such as the STEER WS TCS . For example the STEER WS TCS loads or places all service description files found as services in a specified directory for example default My Document My Services and registers these found services in STEER WS TCS e.g. available in the discovered service window or discovery pane . After that the native service discovery module can be decommissioned. Table 1 gives a brief comparison between the native service discovery module and the local service discovery module . A local service discovery is based on Socket communication. The local discovery module open and listens to a predefined socket. When a local service is published by an application the application will send a message to the predefined socket thus being discovered by the local discovery module . This mechanism is dynamic and deemed localized to the apparatus running a TCC because the TCC apparatus is providing the service via the application running on the TCC apparatus. If the IP Internet Protocol address of the TCC apparatus changes the service description has to be changed too.

The temporary service discovery module is designed for services that are only needed during the current execution session of a WS TCS such as the STEER WS TCS such as services used in a task package discussed below which are required only while the user works with the tasklet of the task package. According to an aspect of the embodiments the temporary service discovery module provides two Web services APIs 

1. A register API which takes the service description as input and returns service ID if the registration is successful.

The temporary service discovery module allows a user to publish un publish services through Web services. However the services discovered through the Temporary Service Discovery Module are transient only during the current execution session of a WS TCS such as the STEER WS TCS . For example these unnecessary services will be no longer be discovered for the next time when STEER WS TCS restarts because the information about temporary services is cleared.

In PIPE WS TCS is another example of a WS TCS to publish and manage semantic object instances. The PIPE WS API extracts Task Computing management functionalities into independent modules and exposes them as standard Web Service interfaces accessible by any WS TCC such as White Hole Service Manager Real world object semanticizer and Database semanticizer . More particularly PIPE WS API provides a Web services interface for PIPE WS TCSs to manage services such as publishing operating system or application objects device services etc. PIPE WS TCS is described in related pending U.S. patent application Ser. Nos. 10 733 328 and 11 115 403.

The implementation of STEER WS API and PIPE WS makes it possible to provide a large variety of Task Computing user interfaces for WS TCCs because a presentation processing layer of a WS TCC can be freed from the implementation of the modules of the Task Computing middleware processing layer . A user interface example of WS TCC is described herein for Tasklet WS TCC .

A Tasklet TCC is a very light processing weight Task Computing Client TCC which executes OWL S files of a service s or a service composition s task s . Among other ways of making Tasklet TCC to execute OWL S files including from the command line the preferred way is to invoke the Tasklet TCC by double clicking or some other appropriate OS operations the OWL S files to be executed. When the Tasklet TCC reads the OWL S files it will execute the services or the service compositions by using STEER WS APIs . Tasklet TCC might show the control UIs of the service function within its own window. In particular with reference to the Tasklet TCC invokes the executeOWLS API to execute an OWL S description. The Tasklet TCC uses the OWL S Process Model and services grounding to store a task to provide a process model tasklet. According to the embodiments a service workflow tasklet a tasklet plus a service workflow and a task package are provided.

 Process Model defined in OWL S is for execution purpose. Only processes of individual services are involved and it is not possible to extract the service workflow out of the process model.

 SW Tasklet is Process Model plus service workflow info. From SW Tasklet it is possible to retrieve the service workflow and list the task as a composition of services .

However if some services are deemed missing for example not discovered in the current environment both the execution and the editing can fail. Thus a Task Package is SW Tasklet plus description of all involved services or all SSDs . With task package even if some services are missing WS TCS is still able to discover them e.g. using temporary discovery mechanism and continue the execution or the editing of the task contained in the SW Tasklet of the task package .

In particular each OWL S file can includes three parts 1 profile which defines the service name service description human readable explanation of the service and or semantic input output 2 process which defines the execution related information and 3 grounding which maps the execution information to the real invocation methods. According to an aspect of the embodiments each SSD is an OWL S file. Also a SW Tasklet describing a task of two or more SSDs is an OWL S file. The SW Tasklet as a composed task semantic description comprises generating based upon the SSDs of the composed task an execution plan as a SSDs process model of the composed task description a services grounding of all the SSDs of the composed task and as described in more detail extracting and adding a service workflow of the composed task as a profile attribute in the composed task description. Thus in an OWL S file that describes a task or in a SW Tasklet the process section or process model of the tasklet OWL S file contains an execution plan which only involves the processes section of the OWL S files for the SSDs in the composed task . Therefore once a task is built from there a TCC cannot know which services are involved and what their roles in the task are because service may contain multiple processes or multiple services may share the same process. In both cases from a process model it is not possible to identify which service the processes belong. In other words the process model might not reveal a one to one mapping of services and processes because the profile of the service is not included in the process model so that it is not possible for a TCC to open a process model tasklet that includes only a process model and restore to the stage where user initially builds the task from services such as the service workflow chart as a building block of services shown in task window or task construction pane .

Therefore according to an aspect of the embodiments the SW Tasklet comprises a service workflow information concept so that a TCC can open the SW Tasklet and restore to the stage where the user built the task by composing a plurality of the services via the SSDs . Within a tasklet service workflow not only the related services but the relationships between services how the output of one service is mapped to the input of another service etc. are defined as well. From the tasklet service workflow it is possible for a TCC to load the tasklet task package and display a task as the composition of services initial building stage in the task window or task construction pane . The tasklet service workflow function provides the capability for users to load an existing task and see how the task is built from services . Within the same TCC from the task a user is able to add remove edit services and create new tasks via the task interface provided by the TCC for example . This is called task editability. 

For example the service workflow information includes 1 the number of services comprising a task IDs of these services i.e. ID of the SSD and 3 how the services are linked together to form the task . By referring to the tasklet service workflow information a TCC Task Computing Client can now recover the original design of the SW Tasklet task as a service workflow comprising linked services .

In the service workflow identifies two services open and my file via service IDs and respectively. Further the service workflow identifies my file output and input of Open matched with My File output as services linkage .

In process flow lines which are part of a standard in OWL S are required to execute a task as follows 

Using service workflow information one can now easily share the details of a task . However one possible short coming of the SW Tasklet is that a TCC requires all of comprising services to be present to display the details correctly because the SW Tasklet service workflow information gives only the service ID and relies on retrieving other important information such as service names service descriptions semantic inputs outputs from individual SSDs of the task . A SW Tasklet with service workflow information allows one to share the details of tasks in a compact manner however the SW Tasklet with service workflow information can limit the portability and the ability to edit the tasks because some services might be deemed missing for example not discovered in the current environment both the execution and the editing could fail. Therefore in addition to providing tasklet service workflow information the embodiments provide a task package. When the services that are involved in a service workflow are discoverable within the environment the service workflow alone is enough to restore the task .

In a task package is a package file containing three types of files as follows a SW Tasklet SSDs of all related services and an index file . The index file stores mappings between service IDs recorded in the tasklet s workflow information and related service descriptions . According to an aspect of the embodiments for example the package file can be according to the ZIP file format. is a list of files in a zipped task package according to an embodiment of the present invention.

In a task package is a zipped file containing the following parts a services subfolder which stores all the semantic descriptions that comprise a task Open and My File in the example a SW Tasklet which describes a task in an OWL S format along with its workflow information Open My File SW Tasklet and an index file services.idx which maps the services ID appearing in the SW Tasklet to the SSDs of the task stored in the services subfolder. is an example computer interpretable source code representing a semantic service description for an open service according to an embodiment of the present invention. is an example computer interpretable source code representing a semantic service description for a My File service according to an embodiment of the present invention. Therefore the Open and My File shown in are in the services subfolder of the task package .

Therefore within the services subfolder of the task package the SSDs of all service functions involved in a composed task of a plurality of service functions are stored. The SW Tasklet also provides the service workflow information . The index file services.idx defines a mapping between the service ID used in the SW Tasklet and the SSDs files stored in services subfolder .

When the task package is opened in a TCC such as a STEER WS TCC first the SW Tasklet file is extracted. Then the TCC checks whether all services that the SW Tasklet needs are available i.e. already discovered by the TCC . If the SW Tasklet services are already discovered by the TCC no action is taken. Otherwise from the index file the TCC finds the descriptions of all missing services and publish them through the temporary discovery module . The SW Tasklet services can also be published through discovery mechanisms other than the temporary discovery module but by not using the temporary discovery module the discovered task package services could persist beyond the current task package task composition session. After all the missing services are published and discovered by the TCC the SW Tasklet loading procedure by the TCC can be resumed. According to an aspect of the embodiments the TCC opens the task packet file and for executing and or editing the SW Tasklet e.g. for displaying the composed task diagram to edit the TCC retrieves any missing or required SSDs of the composed task from the SSDs in the task package . The TCC publishes the retrieved SSDs to make the SSDs available for the TCC by registering the SSDs through the temporary service discovery . The TCC calls the temporary service discovery web service to submit the SSDs retrieved from the task package to the temporary service discovery web service and the temporary service discovery accepts the input SSDs over the web service interface from the TCC . The temporary service discovery web service registers the accepted SSDs for recognition by the TCC as a discovered service . According to an aspect of the embodiments the temporary service discovery parses accepted SSDs and creates a service instance for the TCC . According to an aspect of the embodiments the services published by the temporary service discovery are only available for example to the TCC launching the temporary service discover as well as to others during an execution session of the TCC .

Therefore a SW Tasklet is an executable OWL S description which defines the execution plan of the task based on the processes of involved services as well as a service workflow of the involved services . A SW Tasklet with service workflow information has a special tag that represents the service workflow of the task described in the SW Tasklet . With the tasklet service workflow information a TCC can open the SW Tasklet and display for example in the user interface window the involved services and their relationships. However in the TCC environment if one or more services of the SW Tasklet are deemed missing because such services have not been discovered by or registered in the TCC the open procedure may fail due to the missing information. Thus a task package contains the SW Tasklet and the description of all involved services or the SSDs . When a TCC opens a task package even if one or more services of the SW Tasklet are missing the user will be given an option to load the services from the attached semantic service description . After all the missing services are loaded the complete task will be restored. In sum task package is the most robust method of saving a task . Both tasklet with service workflow and task package support task editability. 

According to an aspect of the embodiments both SW Tasklet and task package are creatable in a TCC . For example after a user creates a task from a set of services the use can have an option to save the task . While saving the task that user can decide to save the task as a SW Tasklet with service workflow or a task package tasklet with service workflow information plus the description of individual services that are involved in the task . Once the user makes the decision the SW Tasklet task package can be generated.

2. Extract the service workflow information of the task and add the extracted service workflow information into the OWL S as a profile attribute. According to an aspect of the embodiments when a user creates tasks within a TCC for example for a STEER WS TCC service workflow information is extracted from the editor of the STEER WS TCC . According to an aspect of the embodiments in the displayed composed task diagram is represented in a data structure and an extraction procedure analyzes user s task composition including editing from the task data structure and calculates determines the service workflow for example determines the number of services comprising a task determines which services are involved in the task for example IDs of these services i.e. ID of the SSD and determines how the services are linked together to form the task e.g. output of service goes to input of service and so on .

3. Create a mapping between service id and service description file name and store the mapping in the services.idx file. is an example of a task package index file according to an embodiment of the present invention.

The task package is a significant improvement over a na ve way in which user can manually zip a process model tasklet and related services to send to other users and the recipient user needs to unzip the file publish the missing services and open the process model only tasklet finally. The benefits of task package are clear because during the building of the task package in a TCC the task package format allows TCC to automatically detect all the related services and zip those service descriptions in the task package along with the SW Tasklet and the corresponding index file. When the task package is run or opened in a TCC the TCC can automatically determine the task composed services including any missing services . In the above na ve way the recipient user needs to hand pick the missing services and to publish them manually.

Described herein is implementation of a Task Computing computer system by segmenting Task Computing environment into a plurality of computer system implementation tiers of a presentation client processing layer a remote procedure call application programming interface API a middleware server processing layer to which the presentation layer interfaces via the remote procedure call API to real time dynamically generate a computer implemented task interface at the presentation layer to a semantically described computer system source of function as a service on a computer system a service layer and a function source realization layer providing the semantically described computer system source of function as the service on the computer system to which the middleware processing layer interfaces and real time dynamically composing an executable task that comprises one or more services according to the generated task interface at the presentation layer to one or more services on the computer system. A computer service is in real time and dynamically composed into an executable task using the generated interface to the service on the computer based upon the semantically described application device and service rich computer. According to an aspect of the embodiments described herein a user practically effectively efficiently dynamically in real time relies on a flexible and unified user interface composition and execution functions to manage interaction and to interact with a pervasive computing environment.

An apparatus method and computer readable medium including carrier signal thereof provides a plurality of computing sources of functionality each computing source of functionality presents a service for example to a user and or a computer and exists in a computing environment of the apparatus or in a computing environment in network communication with the apparatus. The apparatus associates a semantic service description SSD with the service. The SSD has a semantic description of the service including a semantic description of a parameter of the service according to a computer interpretable language and as a service grounding a mapping between the computer interpretable language expressing the SSD and an interface including an interface parameter of the service. The apparatus dynamically discovers one or more SSDs as available services through a plurality of discovery mechanisms to discover the SSDs dynamically filters the services based upon the semantic description in each SSD associated with each service generates a user interface to dynamically compose a task based upon selecting the services and the filtering the services to continuously present possible tasks and generates an executable semantic service workflow description as a composed task description of the composed task.

The generation of the executable semantic service workflow description comprises generating based upon the SSDs of the composed task an execution plan as a SSDs process model of the composed task description a list of service groundings of all the SSDs of the composed task and extracting and adding a service workflow of the composed task as a profile attribute in the composed task description.

Task Computing is the approach that a seeks to exploit SemanticWeb technologies so that the larger semantic web of resources will be immediately available to ubiquitous computing applications and b is quite agnostic about the nature of the resources as regardless of how they are discovered accessed connected to or communicated with a service abstraction can be used to make them usable by a Task Computing system. Task Computing relies on semantically described services as the universal abstraction of all functionality and in addition Task Computing has a larger scope than device to service interoperability as composable tasks may involve many services . For example a typical Task Computing system task might real time dynamically utilize 5 6 services .

The above described preferred embodiments of the present invention are implemented in software as stored on any known computer readable media and or programmable computing apparatus hardware controlling a programmable apparatus computing device for example a programmable electronic device that can store retrieve present for example display and process data any type of programmable computing apparatus such as without limitation a personal computer a server and or a client computer in case of a client server network architecture networked computers in a distributed network architecture a terminal device a personal digital assistant a mobile device .

The many features and advantages of the invention are apparent from the detailed specification and thus it is intended by the appended claims to cover all such features and advantages of the invention that fall within the true spirit and scope of the invention. Further since numerous modifications and changes will readily occur to those skilled in the art it is not desired to limit the invention to the exact construction and operation illustrated and described and accordingly all suitable modifications and equivalents may be resorted to falling within the scope of the invention.

