---

title: Method and apparatus for monitoring host to tool communications
abstract: An aspect of the present invention includes a method and device for listening to communications between processes and tools, recording report and report trigger definitions, matching reports from tools with the recorded definitions, and translating messages into a context-insensitive format. Other aspects of the present invention include dynamically enhancing tool status reports, migrating processes form tool control hosts to distributed processors, and screening requests for tool status information from hosts and distributed processors. More detailed descriptions of aspects of the present invention are described in the claims, specification and drawings.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07437204&OS=07437204&RS=07437204
owner: MKS Instruments, Inc.
number: 07437204
owner_city: Andover
owner_country: US
publication_date: 20061130
---
The present application is a divisional of U.S. patent application Ser. No. 09 935 213 as amended entitled METHOD AND APPARATUS FOR MONITORING HOST TO TOOL COMMUNICATIONS filed 22 Aug. 2001 invented by Uzi Lev Ami and Yossef Ilan Reich which is a continuation in part of U.S. patent application Ser. No. 09 847 937 entitled METHOD AND APPARATUS FOR TWO PHASE STRUCTURED MESSAGE TO TAGGED MESSAGE TRANSLATION filed 2 May 2001 invented by Uzi Lev Ami Tal Lev Ami Ezra Shabi and Yoav Sherf and claims the benefit of U.S. Provisional Patent Application No. 60 227 408 entitled WEB BASED TOOL CONTROL filed 23 Aug. 2000 invented by Mitchell Weiss Uzi Levi Ami and Yossi Reich. Such applications are incorporated by reference as if fully set forth herein.

The protocols communication infrastructure and hosting modes used by tools and other automated or semi automated equipment in semi conductor fabs and foundries metal cutting shops healthcare and other domains developed over the years when communication and processor speeds were relatively limited. Message protocols for foundry shop floor and healthcare applications were designed to utilize low speed serial communications. These message protocols included structured messages which could be transmitted quickly even with low speed communications. Structured messages were and remain difficult to translate and understand. The difficulty is exacerbated when a first message sets a context for a response and a second responsive message does not repeat the context that is the context sensitive response is only meaningful when paired with the corresponding context setting message. Matching context setting and context sensitive messages can be a very tedious task especially when the context setting messages precede the context setting messages by hours days or weeks instead of immediately preceding the responsive messages. The communication infrastructure may utilize serial communications or a bus structure compliant with SECS or CAN . Hosts are centralized monolithic programs that are difficult to modify.

Therefore it is desirable to introduce methods and devices for improved communications between tools and processes requiring information from tools and other automated or semi automated equipment.

An aspect of the present invention includes a method and device for listening to communications between processes and tools recording report and report trigger definitions matching reports from tools with the recorded definitions and translating messages into a context insensitive format. Other aspects of the present invention include dynamically enhancing tool status reports migrating processes form tool control hosts to distributed processors and screening requests for tool status information from hosts and distributed processors. More detailed descriptions of aspects of the present invention are described in the claims specification and drawings.

The following detailed description is made with reference to the figures. Preferred embodiments are described to illustrate the present invention not to limit its scope which is defined by the claims. Those of ordinary skill in the art will recognize a variety of equivalent variations on the description that follows.

Some arrangements for practicing the present invention are illustrated in . At least one machine communicates with at least one host . The host may be a controller or a management system for one or more machines. The host may be centralized distributed among processors or centralized with some functions distributed among processors. Software implementing aspects of the present invention may run on the host on other equipment that listens to communications between the host and the machine or on other equipment that has protocol translation capabilities . The equipment with translation capabilities may translate messages from a serial protocol to a network protocol or among other types of communication or transport protocols. For instance it may translate from a CAN or IEC 62026 bus protocol to an Ethernet protocol. One description of CAN bus and other sensor actuator bus SAB protocols appears in James R Moyne Nader Najafi Daniel Judd and Allen Stock Sensor Expo Conference Proceedings Sept. 1994 . SAB protocols which may be used with the present invention include WorldFIP fieldbus DeviceNet protocol SDS J 1939 LONWorks protocol Seriplex protocol ISP Fieldbus and BITBUS and the later derivative or updated implementations of these protocols. Software implementing aspects of the present invention also may run on equipment that listens to communications between the host and the machine FIG. D tapping into communications lines. In configurations A C and D the listening device is removable and distinct from either the host or tool. It can be added near the host or tool or remote from either the host or tool. It functions independently of either the host or tool. When removed it is reusable with another tool without physical alteration with reprogramming or resetting. In configuration D several types of couplings can be used to tap into the communication lines. A connector may be inserted into the lines. The tap lines leading out of the connector may be physically coupled to the communications lines may be magnetically coupled or in any other way effective to split or replicate the signal in the communication lines. A hub with an extra port can supply access. Magnetic sensors may be placed proximate to the communications line to sense signals in the lines to provide magnetic coupling without inserting a connector or hub in the communications lines.

The communications between the host and machine include a series of structured messages for instance untagged messages constructed according to a standard or protocol. These messages may include both context setting and context sensitive messages which sometimes are inquiries and responses. Context sensitive response messages may omit the inquiries to which they respond. For instance a context setting message may ask for read outs of four variables that the machine monitors. The context sensitive message may respond with read out values for the four variables without identifying the variables being reported. Alternatively one or more context setting messages may define at least one report and at least one report triggering event. The triggering event may be logical such as when a process step is completed or an operating condition reaches a threshold or it may be time based such as every two seconds during an etching process. When the machine senses occurrence of the triggering event or when the report is specifically requested it may issue the report. The report may take the form of read out values for a plurality of variables without identifying the variables being reported.

The machines may be semiconductor manufacturing equipment in a clean room numerically controlled equipment in a machine shop or any other automated or semi automated equipment. The machines may be standalones machines connected by robot work piece handlers or fully integrated multi station work cells. Each machine may have its own controller or a plurality of machines may share a controller. Similarly devices used for or in the business of healthcare may benefit from the present invention. These devices may be connected to patients or may store information regarding patients.

Communications may involve RS 232 serial communications CAN or other bus communications Ethernet connections or any other suitable communications or message transport layer. This invention may most benefit structured message protocols that were designed for slower RS 232 serial communications or SAB communications as such legacy protocols may often employ context setting and context sensitive messages. This invention also may apply to protocols that utilize context insensitive messages.

Devices that can be used to implement aspects of the present invention include a variety of general purpose computer systems. PRI Automation Inc. produced one such eQonnector hardware. PRI s eQonnector was a fully functional x86 based computer running Windows NT without a keyboard or monitor. The system includes a variety of input output ports 2 Ethernet connections for 10 100 base T connection 2 isolated RS 232 c ports using DB 9 connectors and one DeviceNet CAN compatible interface using a DIN jack. The eQonnector further includes 128 MB of RAM a 4 GB hard disk and a universal power supply. Its size is approximately 200 mm diameter generally round and 50 mm high. Another eQonnector is a generic computer system a portion of which is depicted in an interface block diagram . Two alternative Advantech single board computers SBC that may be suitable are Advantech PCM 9550F and PCM 9572F. The latter SBC provides more capability to support advanced functions. An interface PCB provides functions not included on the SBC. The SBC and interface PCB are housed in a rectangular aluminum enclosure constructed from standard extrusions provided by Parvus Corporation with sheet metal end caps. The overall dimensions are 3.5 H 6.6 W 9 D. The hard disk is an IBM Travelstar DJSA 210 with a 10 GB capacity or larger. depicts components of the interface PCB. Several connectors are provided for linking the interface PCB and the SBC. A digital input output connector provides eight bits of digital input output connected to the SBC. The digital input output connector may be compatible with OPTO 22I O module racks. The eight bits are allocated by the header . Bit seven is connected to the shutdown switch for signaling the SBC to shut down. Bit indicates whether the system is operating in eavesdrop or pass through mode. This bit controls the connection relay . The default power off condition is for the device to be in eavesdrop mode. The connection relay controls the configuration of the COM and COM port connectors A B. These ports are optically isolated from each other A B and from the monitored communications channel. The pin assignments in the eavesdrop and pass through modes are 

One communications protocol utilizing structured messages including context setting and context sensitive messages is a SEMI Equipment Communications Standard SECS . Two aspects of this standard SECS I or HSMS for message transfer and SECS II for message content are detailed in SEMI documents E4 0699 E37 0298 and E5 0600. The SECS I standard defines a communication interface suitable for the exchange of messages between semiconductor processing equipment and a host. Semiconductor processing equipment includes equipment intended for wafer manufacturing wafer processing process measuring assembly and packaging. A host is a computer or network of computers which exchange information with the equipment to accomplish manufacturing. The SECS I standard includes the description of the physical connector signal levels data rate and logical protocols required to exchange messages between the host and equipment over a serial point to point data path. This standard does not define the data contained within a message. The meaning of messages must be determined through some message content standard such as SEMI Equipment Communications Standard E5 SECS II . These standards provide a means for independent manufacturers to produce equipment and or hosts which can be connected without requiring specific knowledge of each other.

HSMS is intended as an alternative to SEMI E4 SECS I for applications where higher speed communication is needed or when a simple point to point topology is insufficient. SEMI E4 SECS I can still be used in applications where these and other attributes of HSMS are not required. HSMS is also intended as an alternative to SEMI E13 SECS Message Services for applications where TCP IP is preferred over OSI. It is intended that HSMS be supplemented by subsidiary standards that further specify details of its use or impose restrictions on its use in particular application domains. High Speed SECS Message Services HSMS defines a communication interface suitable for the exchange of messages between computers in a semiconductor factory.

The SEMI Equipment Communications Standard Part 2 SECS II defines the details of the interpretation of messages exchanged between intelligent equipment and a host. This specification was developed in cooperation with the Japan Electronic Industry Development Association Committee 12 on Equipment Communications. It was indeed to be fully compatible with SEMI Equipment Communications Standard E4 SECS I . It is was intended to allow for compatibility with alternative message transfer protocols. This standard defines messages to such a level of detail that some consistent host software may be constructed with only minimal knowledge of individual equipment. The equipment in turn may be constructed with only minimal knowledge of the host. The messages defined in the standard support the most typical activities required for integrated circuit manufacturing. The standard also provides for the definition of equipment specific messages to support those activities not covered by the standard messages. While certain activities can be handled by common software in the host it is expected that equipment specific host software may be required to support the full capabilities of the equipment. SECS II gives form and meaning to messages exchanged between equipment and host using a message transfer protocol such as SECS I or HSMS. SECS II defines the method of conveying information between equipment and host in the form of messages. These messages are organized into categories of activities called streams which contain specific messages called functions. A request for information and the corresponding data transmission is an example of such an activity. SECS II defines the structure of messages into entities called items and lists of items. This structure allows for a self describing data format to guarantee proper interpretation of the message. The interchange of messages is governed by a set of rules for handling messages called the transaction protocol. The transaction protocol places some minimum requirements on any SECS II implementation. SECS II applies to equipment and hosts used in the manufacturing of semiconductor devices. Examples of the activities supported by the standard are transfer of control programs material movement information measurement data summarized test data and alarms. A given piece of equipment will require only a subset of the functions described in this standard. The number of functions and the selection of functions will depend upon the equipment capabilities and requirements. The equipment typically will define the messages used in a particular implementation of SECS II.

The structure of the SECS messages is detailed in standards documents sometimes referred to as E4 0699 and E5 0600. The following example illustrates at least part of the structure. The header structure is adapted from E4 0699 and the data structure from E5 0600. Additional structure may be provided for instance by a transport layer. The processing of this structured message from binary through structure tagged format to context insensitive tagged format follows. Consider a so called S F or SF message. This is the Selected Equipment Status Data SSD message. In this message the equipment reports the status variable value SV corresponding to each status variable ID SVID requested in the order requested for instance requested by sending a S F Selected Equipment Status Request SSR . An SVID may include any parameter that can be sampled in time such as temperature or quantity of a consumable. The host needs to remember the SVIDs requested because they are not identified in the SF response message. The SECS I II structure specified in the standards resembles the binary portion of the following 

The entire message includes 17 bytes of data 1 byte length not shown 10 bytes of header and 2 bytes checksum not shown for a total of 30 bytes. This short a message is quickly transmitted even at a slow serial transmission rate such as 9600 baud.

One way of representing the data section of the binary message above consistent with the list orientation of SECS II follows.

Parsing this representation a time stamp indicates when the message was received. This time stamp can be extracted from the transport layer can be included by the sender at the application layer or added by the receiving or logging facility. L 3 indicates a list of three elements. The include a data format followed by a value. This message representation is closed with a and a final . This message is context sensitive. It cannot be understood without knowing the inquiry that prompted the response because it does not identify the SVIDs for which SVs are being reported.

The data portion of a context setting messaging which could be used to prompt the response above can be represented as 

One aspect of the present invention includes a desired format for structure tagged messages. This embodiment uses XML rules for tagging messages to represent their structure. Structure tagged messages compliant with XML can be processed using XML tools which are available in variety. In this embodiment an XML message may include a header with a name field in the SECS II stream and function SxFy format a wait bit indicating whether the recipient of the message is expected to acknowledge receipt 0 for off 1 for on a source ID identifying the port that received the incoming message or alternatively identifying the device that sent the message transaction ID identifying an open communication transaction used for matching a response to an inquiry and an optional header only flag used if there is no data other than the header. The XML message further may include data in a tree type structure. Data nodes include a format conforming to one of the SECS II format types a length and a data value.

Continuing with our examples the following structure tagged messages are generated by processing the structured messages.

Information from the messages themselves both the context setting and the context sensitive messages can be combined with information retrieved from a dictionary or other reference external to the translation code. A tool compliant with the SECS standards should maintain a dictionary for providing information about system variables equipment constants data variables collected event IDs and alarm IDs supported by the tool. In this context system variables describe the status of the machine. Equipment constants are user modifiable operating parameters. Data variables are measurements of process conditions at the tool or machine. Collected event IDs describe triggers for reporting conditions. Alarm IDs describe triggers for alarms. Part of the information that may be maintained in the dictionary for these items is summarized in the table below.

It is useful in creating a dictionary to verify the correct format type and structure of information reported by a particular machine as machines may be less than perfectly compliant with standards. It is also useful in creating a dictionary to combine automatic inquiries to the machine with manual insertion of data in the file especially in instances where the machine does not provide a list of variables the machine provides only a partial list of rebels or list provided is not compliant with a standard.

A further aspect of the present invention includes a desired format for context tagged messages. This embodiment uses XML rules for tagging messages to represent their structure. Each tagged message includes the two branches described in the table below 

In addition to the Header and DBLogInfo branches described above messages of a data or definition form can have additional branches as described below 

In these examples the Time Folding Ind is used to flag a discontinuity in time such as a shift out of daylight savings time which could make a response appear to precede a query. The symbol is a filler or null value.

The process of converting structured messages into structure tagged messages is straight forward. A very short routine can accomplish the conversion. Optionally error checking can be added to the conversion process and the routine expanded. However standard tools can be applied to error checking including format checking and data validation if the checking is postponed until the structured messages are fully translated into context tagged XML messages.

The process of converting structure tagged messages into context tagged messages is more involved. Context can come from context setting messages or from context tables which may be constructed from context setting messages or the results of context setting messages e.g. values received by the machines in context setting messages stored by the machines and revealed in response to inquires. Additional useful information can come from dictionaries. illustrate converting structured messages into structure tagged messages.

In the second phase of translation a number of steps may be carried out which do not depend on the form of message received. The resources available for processing incoming messages include the dictionary a dynamic mapper and various tables . The dictionary is described above.

The dynamic mapper records definitions of reports links to variables of traces links to variables and of events links to reports or to datasets. 

Reports and EventLinks provide to many connections between reports and variables and between events and reports respectively. In this example report is linked to variable and event is linked to reports and . Event is set to trigger report including variable and report which is not defined in the excerpt shown.

The tables include a primary secondary table a name cross reference table and a message format table. One of the tables can be used to relate primary and secondary messages as illustrated by the following primary secondary table excerpt 

In this table primary and secondary messages are associated with each other. The acknowledgment column marks the existence of an acknowledgment value that can be either a success or failure acknowledgment. The empty list column indicates a session that can include an empty variable list. In addition a column can be provided which indicates that certain fields in the tagged message may be different from one session to another. Examples are provided for both data form sessions and definition form sessions. The data form sessions include an inquiry which sets a context and a response. The definition form sessions set contexts for later reporting such as defining a report an event a trace or a data set. Additional session types include log only form sessions and time form sessions. The log only form sessions include messages that are not processed as data or definitions but are only logged. The time form sessions include special messages which reflect resetting of the clock running on a machine. These messages are useful when the clock needs to be set back to be accurate or when hours are gained or lost due to daylight savings time.

Another useful table is a name cross reference table. The name cross reference table can be used to differentiate between message types that validly can originate with either a host or a machine. A combination of source which is associated with either a host or machine and message type can be translated into a differentiated message type. The entries below include one of our examples and an instance in which the handling of a message type its mapper name or differentiated message type depends on where it originated.

The mapping of the SF message in this example depends on whether it originated with the host SF H or the equipment SF E .

Two useful tools for manipulating data structures used during the second phase of translation are with document object model DOM tools and the C standard template library STL . Those of ordinary skill in the art will recognize that many other ways of manipulating data structures are substantially equivalent for instance SAX Simple API for XML has a different origin than DOM but is substantially equivalent to DOM. DOM is a platform and language neutral interface that permits script to access and update the content structure and style of a document. It includes an application programming interface API for well formed XML documents. It defines the logical structure of documents and ways that a document can be accessed and manipulated. In the DOM specification the term document is used in a broad sense. Increasingly XML is being used as a way of representing many different kinds of information that may be stored in diverse systems and much of this would traditionally be seen as data rather than as documents. Nevertheless XML presents this data as documents and the DOM may be used to manage this data. The DOM interface enables those practicing aspects of the present invention to build documents navigate their structure and add modify or delete elements and content. Tools for practicing DOM are provided by Microsoft and others.

The Standard Template Library or STL is a C library of container classes algorithms and iterators it provides many of the basic algorithms and data structures of computer science. The STL is a generic library having components that are heavily parameterized almost every component in the STL is a template. Other data manipulation libraries will be equivalent to STL many of them are extensions of STL provided by various vendors. DOM and STL can be mixed and matched. For instance the dictionary and message format table could be implemented using DOM leaving the name cross reference table and the dynamic mapper to be implemented using STL.

The second phase translation steps may be traced from when an input buffer is filled with a structure tagged message . Not all of these steps will be needed to practice the present invention. Some steps are followed regardless of the so called form of the structure tagged message . The incoming message is identified as a primary or secondary message using the primary secondary table or some other data structure. A primary message is given a timestamp and unique identifier both of which are useful if the context tagged messages are stored in a database. A secondary message is associated with a previously received primary message. A transaction ID or similar matching field can be used to match the secondary message with its primary message. The incoming structure tagged message is translated from XML into a DOM tree. The SECS II message name is retrieved from the tree. This message name and the source of the message are used to access the name cross reference table to find a differentiated message name. The differentiated message name is used to locate the appropriate message format entry in the message format table. The appropriate message format entry includes a form type such as data form or definition form which can be used to control processing in addition to the steps common to all form types. Again for a secondary message a primary message structure is stored for the session closing secondary message. The message format entry is used to parse the incoming structure tagged message. The structures of these two data structures can be matched. At this stage the incoming message may be classified as a publishable context tagged message. For instance a primary message with no wait bit requesting an acknowledgement or a primary message with a meaningless acknowledgement e.g. SF or with a secondary message may be a candidate for publication.

Processing beyond the common steps proceeds according to the form type of the incoming message. Separate modules or segments of logic may process data forms definition forms log only forms and time forms before publishing a context tagged message .

The equipment data structures and program steps described above can be combined with other components in a variety of useful embodiments. In one embodiment a removable listening device is provided to monitor a wired communications channel between one or more tool hosts and one or more tools. The listening device is passive. It optionally may have a standard isolation device to protect the communications channel from noise generated by the listening device. This isolation device may be an optical isolator a high impedance amplifier or any other components that effectively isolate the wired communications channel from the listening device. The wired communications channel may be an RS 232 or CAN compliant channel or it may be any of the communications channels previously mentioned. It alternatively may be a less commonly used communications channel such as RS422 USB Firewire Apple APB Appletalk or Ethernet. The listening device records report definitions and report trigger definitions sent by the tool hosts to the tools. This recording of report and report trigger definitions may take advantage of the data structures process steps described in detail above. The report definitions may be compliant with a SECS HL7 or DIACOM standard. Structured messages in integrated circuit manufacturing fabs metal cutting shops general manufacturing automotive manufacturing health care facilities and many other environments can be processed in accordance with the present invention. The report trigger definitions similarly may be adapted to a variety of environments. Report trigger definitions may be based on or more process conditions or the passage of time.

The SECS XML parts and gather and translate data transferred between host and the tool the tool and the tool respectively. The data is stored in a database server which is in communication with SECS XML parts and . The data is published through the COM based tool data servers and . The tool data servers and collect data from miscellaneous other hardware and respectively via hardware interface and respectively.

The SECS XML parts and convert the SECS II data into XML. SECS II uses an untagged data format. Therefore the data is usable by transmitting and receiving devices that possess additional required and or have established the meaning of the data in context of the current communication session. This data is converted into tagged XML format rendering it accessible to a wide variety of clients such as browser based client which for example uses some combination of HTML pages XML and Java Beans. The SECS XML parts and convert data in the opposite direction from XML to SECS II for communication either with the host or the tool or respectively. The conversion is a multi step process in which the actual conversion is based upon a previously created expandable infrastructure of dictionary mappers. This infrastructure is created in a semi automatic process and enables quick and accurate acquisition of a new tool such as tool or .

The database server stores a database of the XML data. The database is commercial off the shelf software such as Oracle 8i that allows storage of data received from the various tools and retrieval of information by interested clients. Data can be filtered and analyzed to provide trends and various statistics. The database is designed to provide the capabilities of reliability scalability archiving replication and web connectivity.

The tool data servers and provide real time data for tools and applications to complement the database s capabilities of massive data storage and relatively slow response time. A tool data server uses dynamic software structures to maintain current system state data. Using a publish subscribe data distribution model and well documented public interfaces the tool data server provides updates on specified variable changes to registered clients.

The hardware interface and enable the removable listening device and respectively to receive data from tools or tool components that are not monitored by SECS. In such case a dedicated interface is created using standard drivers serial parallel DeviceNet . The data received from hardware and is then manipulated like the data transmitted via SECS communication.

The web interface and plugs into a COTS web server to enable external browser based clients to selectively access and modify online data in the removable listening device s tool data server. The web interface provides tool data server access to HTML XML and beans browser based clients. HTML pages are displayed on a standard browser or thin GUI enabling quick and painless interfacing of any deployed tool. XML requires use of XSL to enable and control the display of XML on the client s browser. Beans or Java applets downloaded to the client enable presentation and animation of data from the tool. Beans can be extended to support any further manipulation of data on a specific tool a group of tools or data exchanged between tools for interoperability. The removable listening device is an equipment web server.

External clients access removable listening device data by means of generic tools such as SQL HTML DCOM XML and Java. External client types that can be used have database interfaces such as software applications using SQL or HTML for example database interface communicating via database server with the SECS XML parts and application interfaces using DCOM such as application interface client in communication with tool data server and and browser based clients such as browser based clients communicating via firewall with web interface and . External clients use standard protocols to access the removable listening device so standard commercial security solutions such as firewalls can be used. In addition the removable listening device supports fine granularity definition of access control lists to achieve maximum security.

The term tool host is used in a broad sense to include both tool control hosts and more limited or flexible distributed processors. Tool hosts include both hosts with comprehensive integrated tool control functions and hosts that run on distributed processors with more limited task specific functions. Tool hosts include products such as Consilium s FAB300 software which is described as providing a single comprehensive factory management system driven by a centralized definition of customer specific business processes. This category of tool hosts is designed to replace traditional manufacturing execution systems which are designed to control tools provided by different vendors. At the opposite end of the tool host spectrum from traditional manufacturing execution systems component processes may be run on distributed processors to handle a variety of specific functions without claiming to be comprehensive management systems. Along the spectrum a product such as Consilium s FAB300 software may be considered a tool control host for some purposes and a process running on a distributed processor for other purposes.

The listening device includes logic to match the first triggered report from the tools with the report and report trigger definitions in real time. The listening device may finish generating a context insensitive report based on the first triggered report before it assesses a second triggered report. Depending on the architecture of the processor and operating system included in the listening device there may or may not be overlap between the beginning of processing a second triggered report and completion of processing a first triggered report. The generation of a context insensitive report based on the first triggered report proceeds promptly. Alternatively several reports could be queued for processing as a group within 1 2 5 10 15 30 or any time less than or equal to 60 minutes. The outside time for batch processing should be 60 minutes due to urgent data needs of most facilities utilizing the present invention. The first context insensitive report is output. The output may be on a display terminal to hardcopy or to persistent memory such as a disk drive an optical drive a non volatile memory or a computer output microfilm or microfiche. The output of the process may be in a field tagged format. This field tagged format may be XML HTML comma separated values or a standard or custom field tagged format. Alternatively the context insensitive report may be in a tabular format or a textual format.

Another embodiment of the present invention includes a method of dynamically annotating tool status reports. A removable listening device is provided to monitor wired communications between one or more tool hosts and one or more tools. The wired communication may take place on a channel using any of a wide variety of protocols. The listening device records report definitions and report trigger definitions sent by the tool hosts to the tools. Aspects of the report and report trigger definitions are described in the prior embodiment. The listening device matches a first triggered report from the tools with the report and report trigger definitions to generate a first context insensitive report. The first and second triggered reports in this embodiment are not accompanied by report definitions or report trigger definitions either in the form sent by the tool hosts or any other form. The triggered reports may identify the event or other cause of being triggered without including report definitions or report trigger definitions. The listening device may match the first triggered report from the tools with the report and report trigger definitions in real time. The listening device may finish generating a context insensitive report based on the first triggered report before it assesses a second triggered report. Depending on the architecture of the processor and operating system included in the listening device there may or may not be overlap between the beginning of processing a second triggered report and completion of processing a first triggered report. The generation of a context insensitive report based on the first triggered report proceeds promptly rather than been queued for batch processing of several reports as a group. The report and report trigger definitions may be compliant with a SECS protocol a HL 7 protocol a DIACOM protocol a CANS compliant protocol or any standard or custom protocol. The report trigger definitions may be based upon equipment status or on time periods that trigger reporting. This embodiment may further include outputting the first context insensitive report in a field tagged format. More generally the output of this process may be to a machine or human perceptible output media. The format may be as a report or data file data file formats including structured formats and field tagged formats.

A further embodiment is a method of migrating one or more processes from a tool control host in communication with one or more tools to one or more distributed processors. In this embodiment an intercept device is provided which screens requests for information from tools. The tool control host is the legacy controller. The distributed processors handle updated most likely more flexible processes. The migration process allows the tool control host to remain in communication with the tools even as the distributed processors begin communication with the tools. The intercept device includes logic to retain tool status information from the tools and to retain pending requests for tool status from the tool control hosts. The tool status information may include state information as well as values of variables. The requests for tool status information may be requests for specific variables request for reports or report and report trigger definitions which periodically generate triggered reports. In an alternative embodiment for instance one adapted to quick response to requests the logic would only need to retain tool status information and not pending requests. This embodiment involves moving one or more processes from the tool control hosts to one or more distributed processors. Another aspect of this embodiment is activating one or more processes on distributed processors which were not supported by the tool control hosts. These processes are activated on the distributed processors as an alternative to integrating them into the logic of the tool control hosts. Request from both the tool control hosts and the distributed processors are routed to the intercept device instead of the tool. Intercept device satisfies request for tool status information using either retained information or by generating new requests to the tool. The retained information may be tool status information or it may be a pending request. The intercept device includes logic to avoid making duplicate requests for tool status information if an incoming request duplicates a pending request. The output of this process may be to a machine or human perceptible output media. The format may be as a report or data file data file formats including structured formats and field tagged formats.

A further aspect of the present invention is that a listening or intercept device may monitor one or more events reported by the tools and identify retained tool status information that is rendered stale by the reported events. The device may include logic to expire the stale tool status information such as by setting a flag or by erasing stale information.

A further aspect of the present invention is that the intercept device may monitor one or more events reported by the tools and determine when or whether collection of tool status information should be modified. For instance when an event changes the state of the tool sampling of variables may be increased or decreased. For instance collection of data regarding the tool status may be reduced in between processing of work pieces. If a tool is operating a multi step process the intercept device may include logic request collection of values of different variables during different process steps.

Either the listening or intercept device may be programmed to modify tool status information in certain circumstances. When tool status information is received from the tools rules or translation tables may be supplied to modify reported values. The values of reported variables may be modified as a matter of calibrating the tool or as an external means of fixing bugs in the tool. Or a semiconductor manufacturing fab uses a plurality of the same tool type the listening or intercept devices may be programmed to modify reported results without having to attempt any modification of the tools themselves. The listening or intercept devices further may be programmed to derive values calculated from values reported by the tool without any need to extend the capabilities of the tool itself.

In a process of migration from tool control host to distributed processors the tool control host may include comprehensive factory management processes and the distributed processors may include more limited processes not as extensive as comprehensive factory management processes. That is the tool control host may run software such as FAB300 . Alternatively the tool control hosts may include legacy programs to control the tools and the distributed processors may include updated comprehensive factory management process logic such as FAB300 . The migration process involves intelligent assistance in supplementing or supplanting an incumbent system. A further aspect of the intercept devices is that they may receive communications from both the tool control host and the distributed processor and may be programmable to select the instructions of either the incumbent or new controllers for forwarding to the tools. During a trial the intercept device may receive communications from both the tool control host and the distributed processor and report similarities and differences between the communications. The distributed processors may include logic to schedule tools logic to manage yield from tools logic to manage the logistics of moving materials among tools or logic to modify production steps based on deviations from plan in prior process steps. Logic to schedule tools may include detection of the load and operational status of the tool and time to completion of a process step. Logic to manage yield from tools may include monitoring of process conditions for later comparison to yields. Logic to manage yield from tools also may include monitoring of process conditions and modification of those conditions based on prior analyses of yields. Logic to manage logistics of moving materials among tools may include reporting of events on one tool which require readiness of a tool or work piece transport process that supplies material or work pieces to the tool or uses the work piece produced by the tool. Logic to modify process steps based on deviations from plan in prior process steps may support advanced process control. In advanced process control subsequent process steps are modified to take into account prior process steps. Deviations from plan are monitored and compensated for.

Another embodiment of the present invention includes a method of screening requests for tool status information when requests are received from a variety of sources. The variety of sources may include a plurality of tool hosts using tool host in a broad sense. An intercept device is provided which includes logic to retain tool status information and pending requests to tools for status information. The intercept device is positioned logically or physically in between the tool host and the tools in communication with both. It receives a request for tool status and satisfies the request using the retained tool status information the retained pending request for tool status information or by making one or more new requests in much the fashion of the prior embodiment. The new requests optionally may be directed to either the tool or external sensors monitoring the tool. The external sensors may determine environmental conditions surrounding the tool or conditions of the tool itself such as temperature spectral emission of radiation from processes exhaust gases or other externally observable process parameters. Either digital or analog external sensors may be used in conjunction with the intercept device. This embodiment need not include moving processes from tool control host distributed processors. It may be useful for instance when one or more new hosts supplement an existing host.

One aspect of this embodiment is that the tool host may include both tool control hosts and distributed processors as those terms have been used above. The tool control host may include comprehensive factory management processes and the distributed processors may include limited processes for less than comprehensive factory management. Alternatively the tool control host may include legacy programs to control tools and the distributed processors may include updated logic for comprehensive factory management processes. The distributed processors may include logic to schedule tools manage yields manage logistics or modify production steps based on deviations from plan in prior process steps.

The process of this embodiment may further include monitoring one or more events reported by the tool and determining which tool status information is stale due to the events expiring tool status information which is rendered stale by events reported to the intercept device by the tool receiving one or more events reported by the tool and determining whether collection of tool status information should be modified for instance when the tool status advances from one process step to another determining appropriate modifications to the tool status information received from the tool and substituting modified tool status information when satisfying requests for tool status information and determining whether a request for tool status information would be satisfied by the tool or by external sensors coupled with the tool.

The embodiments and aspects of the embodiments may be combined in permutations that are readily apparent from this description but not enumerated with excessive particularity.

While the preceding examples are cast in terms of a method devices and systems employing this method are easily understood. A magnetic memory containing a program capable of practicing the claimed method is one such device. A computer system having memory loaded with a program practicing the methods described is another such device.

While the present invention is disclosed by reference to the preferred embodiments and examples detailed above it is understood that these examples are intended in an illustrative rather than in a limiting sense. It is contemplated that modifications and combinations will readily occur to those skilled in the art which modifications and combinations will be within the spirit of the invention and the scope of the following claims.

