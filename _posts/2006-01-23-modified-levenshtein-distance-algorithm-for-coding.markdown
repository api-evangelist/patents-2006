---

title: Modified Levenshtein distance algorithm for coding
abstract: Methods and systems of mapping of an optical character recognition (OCR) text string to a code included in a coding dictionary by supplementing the Levenshtein Distance Algorithm (LDA) with additional information in the form of adjustments based on particular character substitutions, insertions and deletions together with weighting based on multiple alternatives for the OCR text string. In one embodiment, an OCR text string mapping method () includes receiving () an OCR text string, comparing () it with selected text strings from a coding dictionary, computing () modified Levenshtein distances associated with the comparisons by determining () substitution penalties, determining () insertion penalties, determining () deletion penalties and combining () the penalties, selecting () the best matching text string from the coding dictionary based on the modified Levenshtein distances, determining () whether a maximum threshold distance is met, and assigning () a code associated with the best matching text string to the OCR text string when met, and assigning () a null or no code when not met.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07664343&OS=07664343&RS=07664343
owner: Lockheed Martin Corporation
number: 07664343
owner_city: Bethesda
owner_country: US
publication_date: 20060123
---
This invention was made with Government support under Contract No. 50 YABC 7 66010 awarded by the Bureau of the Census. The Government has certain rights in this invention.

The present invention relates generally to optical character recognition and more particularly to mapping text strings generated via optical character recognition to categories represented by text strings included in a coding dictionary.

Large surveys such as census population surveys often utilize forms on which respondents enter information in response to various survey questions by hand. The survey forms are then electronically scanned and optical character recognition OCR software is utilized to transform the handwritten text responses into electronic data referred to herein as OCR text strings . The OCR text strings may in general include any combination of one or more characters or symbols and the term character is used herein to refer to both characters and symbols output by OCR software.

In order to facilitate compilation and analysis of the data a coding process may be undertaken wherein the OCR text strings are mapped to various categories and assigned codes e.g. numeric alpha or alpha numeric codes associated with the categories. The categories may be represented by text strings included in a coding dictionary. The text strings may in general include any combination of one or more characters and symbols. In order to map an OCR text string to a category the OCR text string is compared with text strings in the coding dictionary in order to identify which text string in the coding dictionary the OCR text string most closely resembles if any. Such comparison may be based on a technique known as the Levenshtein Distance Algorithm LDA . The LDA involves the computation of a numeric value referred to as the Levenshtein distance also sometimes referred to as the edit distance representing how many changes must be made to a particular text string in order to make it identical to another text string with which it is compared. For example if the OCR software interprets an entry on a census survey form as GLEEN WORD V.LLAG and such OCR text string is compared with the text string from the coding dictionary GREENWOOD VILLAGE three character substitutions a L for the R and a R for an O in the first word and a . for the I in the second word one character deletion an E missing at the end of the second word and one character insertion the between the N and the W in the first word are present and hence such comparison is assigned a Levenshtein distance of five.

Unfortunately accurately mapping the OCR text strings to the appropriate text strings included in the coding dictionary using the LDA is complicated by the fact that the OCR text strings often include errors due to the inherent difficulties present in performing optical character recognition of handwritten text. Such errors e.g. incorrectly recognized characters inserted or noise characters and or deleted characters can result in inaccurate Levenshtein distances when comparing the OCR text strings with text strings in the coding dictionary using the LDA. Inaccuracies in the Levenshtein distances reduce confidence that the OCR text strings have been accurately mapped to the proper text strings in the coding dictionary and can lead to assignment of improper codes thus reducing the usefulness of the collected survey data.

Accordingly the present invention achieves improved accuracy in the mapping of an OCR text string to a code included in a coding dictionary by supplementing the LDA with additional information. The present invention employs a combination of two techniques to obtain an modified Levenshtein distance for the OCR text string. The first technique involves the use of matrices to adjust the Levenshtein distance in accordance with specific character substitutions insertions and or deletions within the OCR text string to account for common errors made by OCR software. The second technique involves the use of multiple alternative choices for the OCR characters referred to herein as backup characters when available from the OCR software and weighting of the modified Levenshtein distance obtained using each choice based on the level of the alternative choice the number of backup characters in the alternative choice and characteristics of the backup characters included in the alternative s .

The combination of the foregoing techniques achieves a modified LDA that provides improved coding results when assigning codes to OCR text such as during processing and analysis of large surveys e.g. a population census . The present invention accounts for common OCR errors and allows for multiple OCR choices enabling more scanned text to be correctly matched to its appropriate code. Rather than applying the same fixed penalty for character substitutions the present invention provides the ability to vary the distance penalty for specific character substitutions thereby permitting characters that OCR software commonly mistakes for others to be given a lower distance penalty than character substitutions that do not commonly occur. The Levenshtein distance penalties are also varied depending on whether the characters were inserted deleted or substituted.

According to one aspect of the present invention a method for use in mapping an OCR text string to a particular code associated with one or more text strings included in a coding dictionary includes the step of comparing the OCR text string with a selected text string from the coding dictionary. The OCR text string may for example be received from a database including a plurality of OCR text strings obtained from one or more previously scanned and OCR processed documents or from an OCR software engine as the OCR software engine processes a document. The document may for example be a survey form having respondent information entered thereon.

A modified Levenshtein distance associated with the comparison is computed using substitution insertion and deletion penalties associated with the comparison determined from OCR specific penalty matrices. In this regard the Levenshtein distance is dynamically adjusted in accordance with each of the substitution insertion and deletion penalties.

The method e.g. comparing the OCR text string using a modified version of the LDA to determine substitution insertion and deletion penalties from OCR specific matrices to adjust the Levenshtein distance may be performed for more than one of the text strings e.g. a subset included in the coding dictionary. Thereafter the text string included in the coding dictionary having the lowest modified Levenshtein distance may be selected as the best matching text string and the code associated with the best matching text string may be assigned to a data field associated with the OCR text string given that the calculated modified Levenshtein distance falls below an acceptable maximum threshold value. Otherwise a null or no code may be assigned. In this manner the OCR text string is mapped to a code.

The substitution insertion and deletion penalties may be determined in a number of manners. The substitution penalty may for example be determined by identifying instances in the OCR text string where one character is substituted in the OCR text string for a different character in the selected text string and for each identified instance of a substituted character in the OCR text string a penalty value from a matrix of substitution penalty values may be applied. The insertion penalty may for example be determined by identifying instances in the OCR text string where a character is inserted between characters in the selected text string and for each identified instance of an inserted character in the OCR text string a penalty value from a matrix of insertion penalty values may be applied. The deletion penalty may for example be determined by identifying instances in the OCR text string where a character is deleted from the selected text string and for each identified instance of a deleted character in the OCR text string a penalty value from a matrix of deletion penalty values may be applied.

The method may further include receiving one or more alternatives for characters in the OCR text string. Comparison of the OCR text string and computation of a modified Levenshtein distance using substitution insertion and deletion penalties are performed for each of the alternatives for the OCR text string to obtain a separate modified Levenshtein distance associated with each of the alternatives for the OCR text string. Thereafter the modified Levenshtein distances associated with each of the alternatives for the OCR text string are weighted based on the confidence level of the backup characters and or a number of backup characters included in the alternative and or the particular characteristics of the backup characters e.g. whether all alternative characters are ascenders or descenders .

According to another aspect of the present invention a system for mapping OCR text strings to a code associated with one or more text strings included in a coding dictionary includes a data storage device having the coding dictionary stored therein and a processor. In this regard the system may for example be implemented within a single computer or within multiple computers interconnected with one another via for example a local area network or a wide area network.

The processor is enabled to access the coding dictionary from the data storage device and is operable to receive the OCR text strings to be mapped. In this regard the OCR text strings may be received by the processor from a number of sources including for example from a database of previously scanned and OCR processed text or in real time from OCR software as text is scanned. The processor is operable to select at least a subset of the text strings from the coding dictionary and to compare the OCR text strings with each of the selected text strings from the coding dictionary. The processor is also operable to compute modified Levenshtein distances associated with each of the comparisons of the OCR text strings with the selected text strings from the coding dictionary using substitution insertion and deletion penalties associated with each of the comparisons of the OCR text strings with the selected text strings from the coding dictionary with the penalties being obtained from OCR specific penalty matrices. In this regard the substitution penalty may comprise a sum of numeric penalties associated with each instance in the OCR text string where one character is substituted in the OCR text string for a different character in the selected text string the insertion penalty may comprise a sum of numeric penalties associated with each instance in the OCR text string where a character is inserted between characters in the selected text string and the deletion penalty may comprise a sum of numeric penalties associated with each instance in the OCR text string where a character is deleted from the selected text string. The substitution insertion and deletion penalties may be combined by the processor to obtain the modified Levenshtein distance.

The processor is additionally operable to select the text string included in the coding dictionary having the lowest modified Levenshtein distance as the best matching text string for each of the OCR text strings and to assign the code associated with the best matching text string to a data field associated with the OCR text strings given that the modified Levenshtein distance falls below a maximum distance threshold.

Where the OCR text strings comprise multiple alternative characters for the same scanned text the processor may further be operable to weight the modified Levenshtein distance associated with each of the alternatives for the OCR text strings based on the confidence level of the alternative and or a number of backup characters included in the alternative and or the particular characteristics of the backup characters.

These and other aspects and advantages of the present invention will be apparent upon review of the following Detailed Description when taken in conjunction with the accompanying figures.

When conducting a large survey e.g. a population census it is not efficient to map responses on the census survey forms to codes in the coding dictionary by hand. Instead the OCR text string mapping method may be implemented in computer software and utilized to compare OCR text strings obtained from the census survey forms to various possibilities in the coding dictionary. Each comparison uses a modified version of the LDA to return a number representing a modified Levenshtein distance between the OCR text strings and the dictionary entries. The modified Levenshtein distance may also be referred to herein as the modified Levenshtein distance. The lower the modified Levenshtein distance the closer the scanned text is to the dictionary entry. The coding dictionary entry with the lowest modified Levenshtein distance when compared to the OCR text string most likely corresponds with the code to be used. In the desired case the characters in the OCR text string and a dictionary text string are identical resulting in a modified Levenshtein distance of zero. However when aligning characters in the compared strings using LDA a number of difficulties may be encountered. If the characters are not the same then a substitution insertion or deletion may have occurred. The OCR text string mapping method accounts for these possibilities by applying substitution insertion or deletion penalties as appropriate when computing the modified Levenshtein distance.

The OCR text string mapping method begins with receiving an OCR text string. The OCR text string may be received from a number of sources such as for example from a database in which OCR text strings obtained from previously scanned and OCR processed survey forms are stored. The OCR text string may also for example be received in real time from an OCR software engine as the OCR software engine processes a scanned survey form. The OCR text string may be any number of characters long.

The OCR text string is compared with one or more text strings from the coding dictionary. In this regard although the OCR text string may be compared with all of the text strings in the coding dictionary the OCR text string can be compared only with a subset of text strings from the coding dictionary that are relevant to the category of information represented by the OCR text string in order to provide accelerated processing. For example where the OCR text string represents information relating to a person s residence city then the OCR text string might only be compared with a subset of text strings from the coding dictionary comprising possible entries for a person s residence city whereas where the OCR text string represents information relating to a person s ethnicity then the OCR text string might only be compared with a subset of text strings from the coding dictionary comprising possible entries for a person s ethnicity.

A modified Levenshtein distance is computed for each of the comparisons made in the comparing step . In this regard the Levenshtein distance for each comparison that is made of the OCR text string with one of the text strings in the coding dictionary may be computed by identifying character changes character insertions and character deletions necessary to make the OCR text string the same as the text string from the coding dictionary. More particularly computation of the modified Levenshtein distance involves the sub steps of determining substitution insertion and deletion penalties corresponding with each of the identified character substitutions insertions and deletions.

A substitution penalty is determined for each of the comparisons made in the comparing step . In this regard each of the associated substitution penalties may be determined by identifying instances in the OCR text string where one character is substituted in the OCR text string for a different character in the text string from the coding dictionary. For each identified instance of a substituted character in the OCR text string a penalty value from a matrix of substitution penalty values is applied .

As illustrated in the matrix of substitution penalties may comprise a plurality of numeric values cross referenced against a row of possible coding dictionary characters and a column of possible OCR text string characters . It should be noted that only shows a partial substitution penalty matrix and in practice an actual substitution penalty matrix will be much larger e.g. where 128 possible characters are included in the coding dictionary and recognized by the OCR software the matrix will be 128 128 . The boxes in the exemplary substitution penalty matrix of show the penalty applied for each of the possible character substitutions. For example in the instance where the OCR text string includes an L at a particular position in the OCR text string but the text string from the coding dictionary includes an I at that position a penalty of 0 is applied. This is because OCR software frequently incorrectly reads these characters. However in the instance where the OCR text string includes an L at a particular position in the OCR text string but the text string from the coding dictionary includes a K at that position then a penalty of 3 is applied. This is because an L is not commonly mistaken for a K by OCR software and the infrequency of such mistake is reflected by the larger penalty value. The aforementioned substitution penalty values are exemplary and different penalty values may be used depending on the application.

Referring again to an insertion penalty is also determined for each of the comparisons made in the comparing step . In this regard each of the associated insertion penalties may be determined by identifying instances in the OCR text string where a character is inserted between adjacent characters in the text string from the coding dictionary. For each identified instance of an inserted character in the OCR text string a penalty value from a matrix of insertion penalty values is applied .

As illustrated in the matrix of insertion penalties may comprise a plurality of numeric values indexed against a row of possible inserted characters . It should be noted that only shows a partial insertion penalty matrix and in practice an actual insertion penalty matrix will be much larger e.g. where 128 possible characters are included in the coding dictionary and recognized by the OCR software the matrix will be 1 128 . The boxes in the exemplary insertion penalty matrix of show the penalty applied for each of a number of possible character insertions. By way of example where OCR software recognized text on a census survey form as GREEN.WORD VILL.AGE and such text is compared with the text string GREENWOOD VILLAGE from the coding dictionary a total insertion penalty of 2 would be applied for the period inserted between the N and the W in GREENWOOD and the period inserted between the second L and the A in VILLAGE . The exemplary insertion penalty matrix shown in does not treat all possible character insertions the same. More particularly if all possible character insertions had the same numeric penalty value e.g. 5 the OCR text string would be given a Levenshtein distance of 10 which might more likely lead to inaccurate results in determining the best match from the coding dictionary. The aforementioned insertion penalty values are exemplary and different penalty values may be used depending on the application.

Referring again to a deletion penalty is also determined for each of the comparisons made in the comparing step . In this regard each of the associated deletion penalties may be determined by identifying instances in the OCR text string where a character is deleted from the text string from the coding dictionary. For each identified instance of a deleted character in the OCR text string a penalty value from a matrix of deletion penalty values is applied .

As illustrated in the matrix of deletion penalties may comprise a plurality of numeric values indexed against a row of possible deleted characters . It should be noted that only shows a partial deletion penalty matrix and in practice an actual deletion penalty matrix will be much larger e.g. where 128 possible characters are included in the coding dictionary and recognized by the OCR software the matrix will be 1 128 . The boxes in the exemplary deletion penalty matrix of show the penalty applied for each of the possible deleted characters. By way of example where OCR software recognized text on a census survey form as GREENWOOD VLG and such text is compared with the text string GREENWOOD VLG. from the coding dictionary a total deletion penalty of 1 would be applied for the period missing from the OCR text at the end of VLG . The exemplary deletion penalty matrix shown in does not treat all possible character deletions the same. More particularly if all possible character deletions had the same numeric penalty value e.g. 5 the OCR text string would be given a Levenshtein distance of 5 which might more likely lead to inaccurate results in determining the best match from the coding dictionary. The aforementioned deletion penalty values are exemplary and different penalty values may be used depending on the application.

Referring again to the modified Levenshtein distance for each of the comparisons is obtained by combining the applicable substitution insertion and deletion penalties determined in steps for each of the comparisons. In this regard the substitution insertion and deletion penalties may simply be added together to obtain the modified Levenshtein distance associated with each of the text strings from the coding dictionary or subset thereof for which a comparison is made in step . It is also possible to combine the substitution insertion and deletion penalties in other manners e.g. subtraction multiplication division etc. to obtain the modified Levenshtein distance.

Thereafter the text string from the coding dictionary or the subset thereof that best matches the OCR text string is selected . In this regard the best matching text string may be selected based on which of the text strings for which comparisons are made in step has the lowest associated modified Levenshtein distance computed in step in accordance with the applicable substitution deletion and insertion penalties are determined in sub steps and . In step a determination is made as to whether or not the modified Levenshtein distance of the best matching text string selected in step is within a maximum allowed Levenshtein distance threshold. If so then in step the code associated in the coding dictionary with the best matching text string may then be assigned to a data field e.g. in the database that is associated with the OCR text string thereby mapping the OCR text string to a particular code and if not then in step a null or no code may be assigned indicating that a best matching text string having an associated modified Levenshtein distance below the maximum distance threshold was not found for the text string received in step .

Referring now to there is shown another embodiment of a method of mapping an OCR text string to a code associated with one or more text strings included in a coding dictionary. The method of is similar to the method shown in and the same reference numerals are used to refer to similar steps. The method shown in enhances the method shown in by using the backup characters that may be supplied in certain circumstances by the OCR software when scanning the survey forms. In this regard where the OCR software does not scan a character with high confidence it may be designed to supply substitutes for alternative consideration. By way of example the OCR software might incorrectly recognize an entry on a survey form as GPEENWOCD VILZACE when it is clear that the correct text should be GREENWOOD VILLAGE . However the OCR software may not have a great deal of confidence in a number of the characters and it may supply the following backup character choices in addition to the first choice. For example 

The method begins with receiving a first choice OCR text string and when available from the OCR software a number of alternative choices e.g. first second third etc. choices . The OCR text string s received correspond with a single text string entered for example on a survey form. The OCR text string s may be any number of characters long and may be received from a number of sources e.g. from a database in which OCR text strings obtained from previously scanned and OCR processed survey forms are stored or in real time from an OCR software engine as the OCR software engine processes a scanned survey form .

When multiple OCR text strings are available one of the OCR text strings e.g. the first choice is selected and then the method processes the selected OCR text string as per steps through of the method shown in . In this regard the selected OCR text string is compared with one or more text strings selected from a coding dictionary and then for each comparison a modified Levenshtein distance is computed by combining substitution deletion and insertion penalties determined in sub steps and .

The modified Levenshtein distance computed in step in accordance with the applicable penalties from the matrices is appropriately weighted based on characteristics of the backup characters. In this regard utilizing backup characters improves the chances that a correct or nearly correct match will be found in the coding dictionary but by using backup characters it is possible that an exact or nearly exact match e.g. a Levenshtein distance of zero or nearly zero might be found for more than one possibility. However in accordance with the method the modified Levenshtein distance obtained in step may be weighted by the number of backup characters used and their respective backup position e.g. first choice second choice etc. and also by particular characteristics of the backup characters e.g. whether the characters are ascenders or descenders . Using a weighted modified Levenshtein distance avoids ties where first choice characters match exactly as well as second third etc. choice characters. Weighting the modified Levenshtein distance in accordance with the level and number of backup characters enables responses to be accepted as correct with a much higher confidence than without the use of backup characters.

Thereafter in step it is determined whether there are more alternative OCR text strings to be processed. If so the method returns to step and the next choice is selected for further processing. If all of the alternative OCR text strings received in step have been processed the method then proceeds to step . In step the text string from the coding dictionary or the subset thereof that best matches the OCR text string is selected. In this regard the best matching text string may be selected based on which of the text strings has the lowest associated weighted modified Levenshtein distance. In this regard the weighted modified Levenshtein distances for all of the comparisons for all of the choices processed are considered. Thereafter in step a determination is made as to whether or not the weighted modified Levenshtein distance of the best matching text string selected in step is within a maximum allowed Levenshtein distance threshold. If so then in step the code associated in the coding dictionary with the best matching text string may then be assigned to a data field e.g. in the database that is associated with the OCR text string thereby mapping the OCR text string to a particular code and if not then in step a null or no code may be assigned indicating that a best matching text string having an associated modified Levenshtein distance below the maximum distance threshold was not found for the text string s received in step .

The processor e.g. via a software program stored on the data storage device receives an OCR text string that is to be mapped to one of the codes associated with the text strings in the coding dictionary . In the illustrated embodiment the OCR text string is received in real time from an OCR software engine as the OCR software engine scans for example a completed survey form using a scanner connected to the computer system and processes the scanned survey form to generate the OCR text string corresponding to an entry on the survey form . In other embodiments the OCR text string may be received from other sources such as for example from a database in which OCR text strings obtained from previously scanned and OCR processed survey forms are stored.

The processor selects a subset of the text strings from the coding dictionary and compares the OCR text string with each of the selected text strings from the coding dictionary . For each comparison the processor computes a modified Levenshtein distance using applicable substitution insertion and deletion penalties. In this regard the modified Levenshtein distance may be computed as described above in connection with the method of . The processor may also weight the modified Levenshtein distance where multiple choices are received from the OCR software as described above in connection with the method of . The processor then selects the text string included in the coding dictionary having the lowest modified and weighted Levenshtein distance as the best matching text string determines whether it is below a maximum threshold value and assigns the code associated with the best matching text string from the coding dictionary to a data field associated with the OCR text string if within the threshold or a null code if the maximum distance threshold is exceeded.

While various embodiments of the present invention have been described in detail further modifications and adaptations of the invention may occur to those skilled in the art. However it is to be expressly understood that such modifications and adaptations are within the spirit and scope of the present invention.

