---

title: Method and apparatus for processing scalable content
abstract: Method and apparatus for processing scalable content having a base layer and at least one enhancement layer is described. In one example, static logic having decoder logic and system monitor logic is provided. Programmable logic having a plurality of reconfigurable slots is also provided. The decoder logic includes a base layer processor for processing the base layer of the scalable content. The system monitor logic is configured to dynamically reconfigure at least one of the plurality of reconfigurable slots with at least one enhancement block for processing the at least one enhancement layer of the scalable content.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07933277&OS=07933277&RS=07933277
owner: Xilinx, Inc.
number: 07933277
owner_city: San Jose
owner_country: US
publication_date: 20060512
---
One or more aspects of the present invention relate generally to content processing systems and more particularly to a method and apparatus for processing scalable content.

Programmable logic devices PLDs exist as a well known type of integrated circuit IC that may be programmed by a user to perform specified logic functions. There are different types of programmable logic devices such as programmable logic arrays PLAs and complex programmable logic devices CPLDs . One type of programmable logic device known as a field programmable gate array FPGA is very popular because of a superior combination of capacity flexibility time to market and cost.

An FPGA typically includes an array of configurable logic blocks CLBs surrounded by a ring of programmable input output blocks IOBs . The CLBs and IOBs are interconnected by a programmable interconnect structure. An FPGA may also include various dedicated logic circuits such as memories digital clock managers DCMs and input output I O transceivers. Notably an FPGA may include one or more embedded processors. The programmable logic of an FPGA e.g. CLBs IOBs and interconnect structure is typically programmed by loading a stream of configuration data known as a bitstream into internal configuration memory cells. The states of the configuration memory cells define how the CLBs IOBs interconnect structure and other programmable logic are configured. Some FPGAs include support for run time partial reconfiguration which provides the ability to alter the behavior of portions of a circuit configured in an active FPGA. Partial reconfiguration is useful in systems that must support a wide range of optional behavior only a subset of which is operational at any point in time.

FPGAs are suited for implementing circuits to process various types of content such as compressed digital video data moving picture experts group MPEG video streams audio multimedia imaging or the like. The latest trend in video coding is to provide various forms of scalability sometimes all embodied within the same compressed video bitstream. Typically this compressed data is provided in the form of a base layer as well as one or more enhancement layers. A decoder system would be capable of creating a valid video output using just the base layer or the base layer and any combination of the enhancement layers. Exemplary types of scalability provided in the enhancement layers include temporal scalability i.e. frame rate quality scalability i.e. often measured by peak signal to noise ratio and resolution scalability i.e. frame size .

An example of this type of coder decoder codec is embodied in the scalable video coding SVC development work currently ongoing under the auspices of the MPEG standards committee and the ISO IEC Joint Video Team JVT . SVC is an extension to the MPEG 4 Advanced Video Coding AVC standard also known as MPEG 4 Part 10 jointly developed by the International Organization for Standardization ISO and International Telecommunication Union ITU T . The MPEG 4 AVC standard is published as ITU T H.264 and ISO IEC 14496 10. The proposed SVC codec provides all three of the aforementioned types of scalability e.g. temporal quality and resolution in labeled packets within the same bitstream. Either a smart network can be used to decide which types of packets to send to a particular end user or the end user can receive the entire bitstream and only decode the packets that her or she is capable authorized of decoding.

One technique for providing the capability to process all layers in scalable content is to employ dedicated circuitry for processing the base layer and each possible enhancement layer. Thus the decoder includes enhancement layer circuitry even if the end user is not authorized to process certain enhancement layer s which impacts security. Accordingly there exists a need in the art for a method and apparatus for processing scalable content that exhibits increased security.

Method and apparatus for processing scalable content having a base layer and at least one enhancement layer is described. In one embodiment static logic having decoder logic and system monitor logic is provided. Programmable logic having a plurality of reconfigurable slots is also provided. The decoder logic includes a base layer processor for processing the base layer of the scalable content. The system monitor logic is configured to dynamically reconfigure at least one of the plurality of reconfigurable slots with at least one enhancement block for processing the at least one enhancement layer of the scalable content.

In another embodiment scalable content is received. The base layer of the scalable content is processed. At least one enhancement block is identified. A programmable logic device is dynamically reconfigured with the at least one enhancement block for processing the at least one enhancement layer.

In some FPGAs each programmable tile includes a programmable interconnect element INT having standardized connections to and from a corresponding interconnect element in each adjacent tile. Therefore the programmable interconnect elements taken together implement the programmable interconnect structure for the illustrated FPGA. The programmable interconnect element INT also includes the connections to and from the programmable logic element within the same tile as shown by the examples included at the top of .

For example a CLB can include a configurable logic element CLE that can be programmed to implement user logic plus a single programmable interconnect element INT . A BRAM can include a BRAM logic element BRL in addition to one or more programmable interconnect elements. Typically the number of interconnect elements included in a tile depends on the height of the tile. In the pictured embodiment a BRAM tile has the same height as four CLBs but other numbers e.g. five can also be used. A DSP tile can include a DSP logic element DSPL in addition to an appropriate number of programmable interconnect elements. An B can include for example two instances of an input output logic element IOL in addition to one instance of the programmable interconnect element INT . As will be clear to those of skill in the art the actual I O pads connected for example to the I O logic element are manufactured using metal layered above the various illustrated logic blocks and typically are not confined to the area of the input output logic element .

The FPGA architecture also includes one or more dedicated processor blocks PROC . The processor block comprises a microprocessor core as well as associated control logic. Notably such a microprocessor core may include embedded hardware or embedded firmware or a combination thereof for a hard or soft microprocessor. A soft microprocessor may be implemented using the programmable logic e.g. CLBs IOBs . For example a MICROBLAZE soft microprocessor available from Xilinx of San Jose Calif. may be employed. A hard microprocessor may be implemented using an IBM POWER PC Intel PENTIUM AMD ATHLON or like type processor core known in the art. The processor block is coupled to the programmable logic of the FPGA in a well known manner.

In the pictured embodiment a columnar area near the center of the die shown shaded in is used for configuration clock and other control logic. Horizontal areas extending from this column are used to distribute the clocks and configuration signals across the breadth of the FPGA. Configuration information for the programmable logic is stored in configuration memory not shown . The configuration logic provides an interface to and loads configuration data to the configuration memory. A stream of configuration data configuration bitstream may be coupled to the configuration logic which in turn loads the configuration memory. Notably the configuration logic is configured to support the loading of partial configuration bitstreams while the FPGA is active. This allows for reconfiguration of portions of the FPGA during runtime. The configuration and reconfiguration process for the FPGA is well known in the art.

Some FPGAs utilizing the architecture illustrated in include additional logic blocks that disrupt the regular columnar structure making up a large part of the FPGA. The additional logic blocks can be programmable blocks and or dedicated logic. For example the processor block PROC shown in spans several columns of CLBs and BRAMs.

Note that is intended to illustrate only an exemplary FPGA architecture. The numbers of logic blocks in a column the relative widths of the columns the number and order of columns the types of logic blocks included in the columns the relative sizes of the logic blocks and the interconnect logic implementations included at the top of are purely exemplary. For example in an actual FPGA more than one adjacent column of CLBs is typically included wherever the CLBs appear to facilitate the efficient implementation of user logic.

The FPGA of is capable of partial dynamic active reconfiguration while the FPGA is active via a partial reconfiguration process. A design configured in an FPGA may be divided into a static portion and one or more reconfigurable modules. A reconfigurable module is capable of being dynamically reconfigured while the FPGA is active. Once the target FPGA is active a static portion is fixed and cannot be reconfigured. The partial reconfiguration process is well known in the art.

The user terminal processes scalable content received from the network for display on the display device . In particular the user terminal employs the scalable content decoder to decoder the received scalable content. In one embodiment the user terminal also receives and stores authorization data associated with the scalable content. In one embodiment the user terminal receives the authorization data from the scalable content provider via the network or some other communication path . Alternatively the user terminal may be provisioned with the authorization data during manufacture. In any case the scalable content decoder employs the authorization data to determine which layer or layers of the scalable content are authorized for decoding. The authorization data can be updated dynamically over time by the scalable content provider e.g. based on changing authorization levels .

For example the scalable content provider may implement a tiered subscription service. The base layer of the scalable content may provide the least measure of quality and or resolution e.g. single channel audio at low resolution or low quality video . The user may subscribe to a higher tier of service whereby the user is authorized to decode one or more enhancement layers in the scalable content. Depending on the subscription tier the accessible enhancement layers provide for content having increased quality and or resolution as compared to the base layer. One or more layers in the scalable content may be protected using a conditional access mechanism e.g. encryption . The authorization data may include key data for decrypting one or more of the layers.

In one embodiment the scalable content provider may provide the base layer and enhancement layer s to the user terminal regardless of the particular level of authorization actually obtained by the user terminal . The enhancement layers may be protected using a conditional access mechanism e.g. encryption to prevent unauthorized decoding. Thus even though the scalable content received by the scalable content decoder includes all layers the scalable content decoder can only decode the layer s for which it is authorized by the authorization data . In another embodiment the scalable content provider may only distribute layers of the scalable content to the user terminal for which the user terminal is authorized.

The system is merely exemplary. Those skilled in the art will appreciate that other types of systems may be employed to provide scalable content and or authorization information to a user terminal. For example the scalable content may be stored on storage media e.g. a digital versatile disc DVD or compact disc CD accessible by the user terminal . In general the scalable content decoder is configured to process scalable content for display via the display device .

In particular the input I F is configured to receive a scalable content stream for decoding. The input I F provides the scalable content stream to the decoder logic . The decoder logic includes a base layer processor for processing the base layer of scalable content stream. The decoder logic is coupled to the task allocator . In one embodiment the task allocator is configured to inform the decoder logic of the particular enhancement layer s if any that are authorized for decoding. If no enhancement layers are authorized the only the base layer processor is used to process the scalable content stream. The decoder logic provides decoded output to the output I F which displays the decoded output on a display. Notably it is assumed that the decoder is authorized to process the base layer of the scalable content stream. If specific authorization is required to process the base layer the task allocator can inform the decoder logic of such authorization.

The input I F is configured to receive authorization data associated with scalable content. The input I F provides the authorization data to the task allocator . The task allocator forwards the authorization data to the decision logic . If the authorization data is encrypted for protection the task allocator decrypts the authorization data before forwarding the data to the decision logic . The authorization data includes subscription tier information that dictates which enhancement layer s in the scalable content are authorized for decoding if any . The decision logic identifies which enhancement block s are configured in the reconfigurable slots and which enhancement block s are required based on the authorization data. If one or more enhancement blocks are needed the decision logic queries the memory for information related to the required enhancement block s .

The memory is configured to store addresses of partial bitstreams in the external memory associated with various enhancement blocks. The memory may also store other types of information associated with the enhancement blocks such as length of their partial bitstreams and their slot compatibility. Slot compatibility refers to the number of the slots required by a given enhancement block. Notably some enhancement blocks may occupy a single one of the slots after configuration. Other enhancement blocks may occupy more than one of the slots after configuration. Yet other enhancement blocks may be small enough such that multiple of these enhancement blocks may occupy a single one of the slots .

Having obtained the information from the memory for the required enhancement block s the decision logic invokes the partial reconfiguration process for the FPGA via the configuration port . The decision logic passes along the address es and size s of the partial bitstream s needed to the partial reconfiguration process. The end result of the partial reconfiguration process is that the required enhancement block s are configured in the slots . In one embodiment the decision logic forwards a retrieved partial bitstream to the task allocator for post processing. For example the task allocator may shift the partial bitstream to be compatible with the actual slot location to which the partial bitstream is being targeted.

A standardized application programming interface API is provided for interfacing the enhancement blocks with the task allocator . The task allocator keeps track of the processing capabilities of the configured enhancement blocks in the slots . In one embodiment a dynamic handshaking protocol is employed for each of the enhancement blocks to inform the task allocator of its processing capabilities and current status e.g. ready for new data almost done busy etc. .

When one or more enhancement layers are authorized for decoding the task allocator indicates the authorized enhancement layer s to the decoder logic . The decoder logic provides data to and receives data from the enhancement block s via the task allocator . The task allocator provides data to and receives data from the enhancement blocks using the API. In this manner the decoder logic may make use of the enhancement block s configured in the slots for processing the authorized enhancement layer s in the scalable content stream. The decoded content base layer and enhancement layer s is provided to the output I F for display.

In one embodiment the partial bitstreams stored in the external memory for the enhancement blocks are encrypted for security. The authorization data received by the task allocator further includes encryption key data for decrypting the partial bitstreams. The task allocator provides the encryption key data to the decision logic so that the partial bitstreams can be decrypted and the appropriate enhancement blocks can be loaded.

Processing the base layer and all enhancement layers may require significant FPGA resources. In some cases a given FPGA might not be large enough to include the circuits for processing the base layer and all enhancement layers. In other cases a given FPGA may be large enough but all or most of the configurable logic is consumed. Thus in one embodiment the slots are configured with enhancement blocks on a time sharing basis based on what type of enhancement processing is needed within a particular time window. For example for scalable video the time window may span a group of frames as defined by the SVC extension of the AVC standard. Real time partial reconfiguration is employed on a minimal number of slots to reconfigure the slots on a per group of frames basis with the required enhancement blocks. Such an embodiment requires fewer FPGA resources but requires a faster reconfiguration time.

While the task allocator is shown as a separate block in in another embodiment the function performed by the task allocator may be performed by the decoder logic . That is the task allocator may be part of the decoder logic . In another embodiment the decision logic may be part of the task allocator which in turn may be part of the decoder logic .

In one embodiment the task allocator is implemented using a processor embedded within the FPGA . The enhancement blocks configured in the slots comprise hardware blocks in communication with the processor. The decision logic receives instructions from the processor implementing the task allocator to perform the reconfiguration function. An exemplary system for communication between a processor and a set of hardware blocks in a PLD is described in commonly assigned U.S. patent application Ser. No. 11 076 797 filed Mar. 10 2005 entitled Method and Apparatus for Communication Between a Processor and Hardware Blocks by Paul R. Schumacher et. al. which is incorporated by reference herein.

While the foregoing describes exemplary embodiment s in accordance with one or more aspects of the present invention other and further embodiment s in accordance with the one or more aspects of the present invention may be devised without departing from the scope thereof which is determined by the claim s that follow and equivalents thereof. Claim s listing steps do not imply any order of the steps. Trademarks are the property of their respective owners.

