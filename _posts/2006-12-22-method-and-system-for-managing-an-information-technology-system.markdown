---

title: Method and system for managing an information technology system
abstract: A network management system may comprise a file system daemon and a device proxy. The file system daemon may be configured to represent a property of a physical device of the plurality of physical devices and a resource as objects in a virtual file system, receive an instruction associated with the property of the physical device and another instruction associated with the resource from a single interface, identify the physical devices of the plurality of physical devices associated with each instruction, and determine the commands associated with each instruction. The device proxy may be configured to implement the commands.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08762507&OS=08762507&RS=08762507
owner: Hewlett-Packard Development Company, L.P.
number: 08762507
owner_city: Houston
owner_country: US
publication_date: 20061222
---
This nonprovisional United States patent application claims the benefit of provisional U.S. patent application No. 60 753 693 filed Dec. 23 2005 and entitled Method and System for Managing an Information Technology System which is hereby incorporated by reference.

Various embodiments of the invention relate generally to the field of networking. More specifically the embodiments relate to a method and system for managing devices on a network.

An information technology IT system comprises physical devices connected over a network. These devices typically include switches routers servers and the like. Each device may have access to a distinct set of resources including data application programs file systems or the like. To manage a large IT system a network administrator may access each of the devices connected to the network.

Tracking and managing physical devices can be a complex and difficult task. Currently administrators may use a database or database model to record data identifying and or describing the devices on a network. Unfortunately these databases can become outdated or corrupted easily. Further databases do not provide access to the physical devices from a remote location.

Administrators often use multiple applications to manage physical devices since no current single application can access control and manage the network physical devices and properties of the physical devices. Unfortunately multiple applications can conflict with each other. They also require training time by the administrator to use effectively and may be expensive.

Outside of IT system management various tools have been developed separately to address other needs. To manage complex data sets for example a virtual file system can be used to represent various resources such as data files. Virtual file systems allow a user to store data normally stored in a file system and data relating to attributes of the files such as versions authors updates and the like. ClearCase for example uses a virtual file system to operate a source code control repository. Current virtual file systems however do not manage datacenters or other large networks.

To retrieve files stored on a remote networked device connected to a network the Network File System NFS developed by Sun Microsystems may be used. Using NFS users of computers of different operating systems on different computers can access data stored on a remote computer. Different applications within the NFS are limited in management of multiple remote computers.

To maintain network security while sharing files or executing programs on remote computers the Secure Shell SSH protocol for example provides a way to establish a secure communication channel between two computers. In one example the remote computer may authenticate the client based on a request transmitted over SSH. The client may then execute programs on the remote computer.

While these applications can be used to meet specific needs they do not provide a unified way of managing a large network. There exists a need for a network management system that is able to present and manage networked devices in a network within a uniform environment.

A network management system may comprise a file system daemon and a device proxy. The file system daemon may be configured to represent a property of a physical device of the plurality of physical devices and a resource as objects in a virtual file system receive an instruction associated with the property of the physical device and another instruction associated with the resource from a single interface identify the physical devices of the plurality of physical devices associated with each instruction and determine the commands associated with each instruction. The device proxy may be configured to implement the commands.

Various embodiments of the invention provide a method system and a computer program product for managing an information technology IT system. In accordance with one embodiment of the invention a network management system is implemented to control the IT system. The network management system comprises a virtual file system that can allow a user to manage the IT system as if it is a traditional file system. The virtual file system can treat an object such as a server as a file and or directory. Further the network management system is configured to automatically retrieve data from a database a representation of a networked device associated with the network and or additional resources.

The network management system can interact with the user through any interface configured to access and or manipulate files such as a command line through which the user may input text or selections to navigate and manage the IT system. By representing the IT system as a virtual file system the user can interact with the IT system through the interface as a traditional file system. In various embodiments the network management system may not comprise a specialized interface but rather interact with standard interfaces associated with different operating systems. The network management system allows users to manage the devices in the IT system without requiring multiple applications and or new network management tools.

The network management system can receive input from the user of the interface and interpret those commands for operation by and or within the IT system. The devices within the IT system can be represented as files and or directories in a file system. Similarly the network management system can receive and interpret data e.g. responses by and or from within the IT system so that the data may be displayed to the user. In some embodiments the displayed data as well as the commands comprise text.

The virtual file system described herein is able to navigate to and communicate with the devices in the IT system. Thus a traditional tool that is able to navigate and access files within a traditional file system may be similarly able to navigate and access the virtual file system to control the objects within the IT system. For example a user can write to a server directory to update a configuration of the server. Because traditional tools can be used a specialized client is not required to work within the virtual file system.

In various embodiments the IT system comprises a datacenter. A datacenter comprises multiple computers routers firewalls and switches often housed together in a remote location. In some examples the datacenter may comprise a server farm or a plurality of web servers.

Other networked devices represented as objects within the virtual file system may comprise abstract data. The abstract data may be for example software to be installed for a proposed datacenter. In another example the networked data may related to one or more networked devices to be installed at a later time. The abstract data may be stored in a memory associated with the virtual file system and include data about networked devices resources permissions data and or properties of the devices.

Resources are for example programs applications APIs running services ports and file systems that may be found within one or more of the networked devices. Properties comprise information associated with the networked device and or resource. In various embodiments examples of properties of a networked device comprise location status on off standby configuration identity type of networked device identity of the owner and the permissions of users that may operate the networked device. Examples of properties of a resource include status configuration identity type of resource and the permissions of users that may operate the resource. Properties may be received from the devices themselves or be supplied by the user.

The IT system comprises an external network switch one or more servers and one or more computational devices . Similar to the IT system the external network may be any network. A network may comprise a wide area network a local area network a peer to peer network Internet or any other type of network.

The switch is any networked device configured to transmit and receive data within the IT system . In some examples the switch comprises a router a bridge a gateway or a server.

The one or more servers are any digital devices configured to share resources or properties with the external network the switch the computational devices or other servers . Computational devices are any devices configured to communicate with other devices. Examples of computational devices include but are not limited to personal computers servers laptops routers firewalls switches storage arrays and fiber channel switches.

In accordance with various embodiments of the invention various networked devices such as the switch servers and computational devices in the IT system interact with each other to access and share various resources associated with the networked devices. In accordance with an embodiment of the invention in IT system computational devices access resources such as file systems and applications stored on each other and servers . Computational devices may also access resources via external network . The sharing of resources across computational devices servers and external network can be facilitated by for example switch .

Although various modules are shown in in association with the IT system the external network the switch the computational devices and the servers fewer or more networked devices may comprise the IT system and still fall within the scope of various embodiments.

In various embodiments the network management system is configured to display information regarding the IT system as a virtual file system. In one example the application displays an interface such as a command line prompt to indicate the network management system is ready to receive commands. The user may access manage or control one or more networked devices resources and properties as well as non device database data via the interface. Networked devices resources and properties may be displayed as paths to directories e.g. networked devices and files e.g. resources properties of networked devices or properties of resources which represent devices resources and properties associated with the devices of the virtual file system.

The application may be any program or application configured to interact with a file system. In one example the application is a native application of an operating system. In another example the application may be programmed to interact with the virtual file system of the network management system .

In one example a user may login to server 1 and attempt to activate a backup agent by entering the following at the command prompt 

In various embodiments the user can type standard unix commands into a command line and manipulate networked devices as files and or directories in the virtual file system. In one example the user may enter cd server 1 to address server 1 in the IT system . The command line may now reflect the address prompt server 1 . The user may edit a resource or property associated with server 1 using a simple unix editor. The instructions are transmitted to the file system daemon which identifies the command and requests the device proxy to implement the change. This process is further described herein.

The application may be accessible from one or more networked devices in multiple locations. In various embodiments the application comprises a graphical user interface command line interpreter e.g. command line interface such as Unix shells sh ksh csh tcsh bash etc. the historical CP M Control Program Monitor and or Dos s command.com command prompt . A command prompt is a sequence of one or more characters used in a command line interface to indicate availability to accept commands. In some examples command prompts may end with one of the characters and often include other information such as the command path.

The operating system comprises software configured to convert high level commands received by the application from the user to low level commands that can be executed by a file system daemon . The operating system may be configured to operate multiple file system such as NFS FAT16 FAT32 NTFS HPFS S51K ext2 AFS and the like. In one example the operating system interacts with the virtual file system of the network management system as any file system.

The file system daemon is configured to construct a virtual file system based on information contained within the IT database . For example the networked devices may be represented as directories and the resources of the networked devices may be represented as subdirectories. The information stored in the virtual file system may be accessed and manipulated by performing file system operations with the application . The operating system can process the instructions received from the application and send basic commands to the file system daemon . The file system daemon is configured to execute file system commands such as lookup open read getattr and readdir. Further the IT system may be queried using a hierarchical path received from a user.

A networked device within the IT system may be identified by a user who enters a networked device identifier at the command prompt. A networked device identifier is any identifier that identifies one or more networked devices within the IT system . In one example a networked device identifier may identify a type of networked device e.g. server or router .

The database includes configuration information and or properties related to one or more networked devices resources and properties in the IT system . In some embodiments agents are programmed to identify and store information from networked devices and resources within the database . The database may comprise multiple databases tables linked lists and or other data structures. The database may store the objects e.g. representations or information of networked devices resources properties of resource properties of networked devices representing the IT system in any manner. Although the database is depicted in as outside the network management system the database may be within the network management system .

In one example each networked device such as a physical device or a physical device is identified in a table within the database . Associated with the each physical device and in the table is resource information property information and or configuration information. The resource information associated with the physical device is information regarding one or more structured resources within the physical device . Property information is information regarding one or more properties of the physical devices and and or properties regarding one or more properties of the resources within the physical devices and . Configuration information comprises settings associated with the device and or resources on the physical devices and . In other embodiments the file system daemon may retrieve information directly from a networked device such as physical device or physical device .

The execution proxy is configured to access and transmit commands to networked devices services or resources on the networked devices. The networked devices can comprise the physical device and the physical device . The execution proxy and or application may initiate and or configure sessions between the networked devices and a user of the network management system . The execution proxy may further act as a proxy for communicating data between the user and the device proxy .

In one example the user may log into a networked device within the IT system by providing the networked device identifier and account login name into a command line interface. The user may then invoke execution proxy e.g. by entering the text execproxy at the interface e.g. command prompt . Commands subsequently entered by the user into the interface may be transmitted directly to the networked device. Responses from the logged networked device may be received by the device proxy which transmits the response to the execution proxy . In another example responses after being processed by the file system daemon and or the operating system may be displayed by the application .

The device proxy is configured to manage communications between the network management system and the networked devices and or resources. The device proxy is configured to communicate using a variety of network communications protocols. In some embodiments the functions performed by the device proxy and the file system daemon may be performed by a single component or module. To maintain network security the device proxy may log in to the networked device using an account login name. The device proxy may facilitate communication between the networked devices and the execution proxy and or the file system daemon .

In one example the device proxy transforms commands received from the file system daemon and transmits the commands in a form that may be understood by the networked device or resource. In one example the device proxy formats the commands to a form that is appropriate for the networked device that is to receive the command. Similarly the device proxy may receive data e.g. a response from the networked device or resource. The data is then transformed e.g. formatted by the file system daemon and or the operating system into a form that may be displayed by the application . The device proxy may also retrieve transformation instructions from the database .

In another example the device proxy receives a networked device identifier from the file system daemon and proceeds to log onto the identified networked device. Subsequently the device proxy may pass a request for a login and password through the file system daemon to the application to display the request at the command line interface. Once the login and password is entered by the user the device proxy may retrieve the instructions necessary to log into the networked device and then transmit the proper login commands with the username and password.

The networked device may respond that the login was successful. The response may be received by the device proxy which sends the response to the file system daemon and the operating system to provide the information associated with the response to the application which may display the identity of the networked device. In various embodiments the command prompt may display the networked device identifier during every action taken while logged into the networked device until the networked device is logged out. Once the user terminates the session with the networked device the interface may no longer display the networked device identifier.

Although depicts the execution proxy as coupled with the device proxy the execution proxy may communicate directly with the physical device and or the physical device . Those skilled in the art will appreciate that the execution proxy may communicate with the networked devices in many ways.

The device proxy may set up a session with a physical device . The physical device comprises a structured resource that can be represented within the virtual file system. The physical device may further comprise disks . The device proxy may be configured to set up a session with a physical device . The physical device may comprise a router switch or other device that operates within the IT system . The physical device may be associated with an unstructured resource which may not be represented in the virtual file system. An example of an unstructured resource can be a program or running service. The device proxy may initiate a session with the physical device so that a user may update or change the unstructured resource .

The device proxy or file system daemon may also check to ensure that a user with a specific account login name has the proper permission to perform subsequent commands. In one example to access the IT system via the virtual file system the user may provide an account login name. The user may then seek to log into other networked devices as another user. In one example the user may log into the network management system as user1 and then seek to make alterations to a server as root through the virtual file system. Resources associated with each of the networked devices are mapped into the virtual file system. These mappings may be contained within the database . Further properties such as permissions associated with one or more networked devices and resources may be contained within the database .

The file system daemon may determine if the user logged into the network management system has permission to access different networked devices as different usernames. The user that logs in to the network management system may have the permission to access a particular device as httpd but not as root . The user httpd may have limited permission to make changes or view resources associated with the particular device while the root user may have no such limitations. Access to the virtual file system in these embodiments may be consistent with the native access control mechanism of the individual networked devices.

The file system daemon can determine the permissions limited to the user logged into the network management system based on a privilege data structure within the database the file system daemon and or the device proxy . These permissions may be determined by an administrator which then may store the permissions within the privilege data structure.

In various embodiments the network management system can manage networked devices and resources without clients or agents being included in one or more networked devices and or resources. A client is a program that is designed to allow the networked device or resource to interface with the network management system . In one example the device proxy retrieves instructions from the database so as to transmit commands to different networked devices in a form that the networked device can natively understand without further processing. The network management system may utilize standard APIs. By avoiding the installation of separate clients on networked devices time and expense can be saved. In other embodiments clients and or agents may be installed on one or more networked devices for communication with the network management system .

Although various modules are shown in in association with the network management system fewer or more modules may comprise the network management system and still fall within the scope of various embodiments.

The network management system may be utilized to perform many functions related to network management including activating deactivating configuring altering and controlling networked devices resources and or properties. The network management system may also be used to query the IT system to identify networked devices resources and properties. In one example further described herein the network management system may be used to query the network to identify networked devices of a specific type e.g. servers brand of server model of server status of the server on off resources of a specific type e.g. networked devices that comprise the resource version of the resource status of the resource on off and properties of a specific type e.g. all networked devices at a specific location or network the identity of each user that has permission to access a networked device or resource and the OS type of networked devices .

A method for managing a plurality of networked devices associated with the IT system is provided. The method may be performed by the network management system . The method allows a user of the network management system to navigate to and access networked devices within the IT system. Further traditional network management tools able to perform tasks within a traditional file system can be used.

In a first step a file system daemon represents each networked device in a virtual file system. The virtual file system may represent each networked device resource of a networked device property of a networked device and or property of a resource as a file or as a file directory. Further the virtual file system may associate a property of a networked device with the networked device. For example the owner property having a value of Acme may be associated with a server represented as a file server 1 in the virtual file system. Some networked devices within the IT system may not be associated with a property. For example a networked device such as a router may only appear in the virtual file system as a file with no properties associated with it.

In a second step the application receives an instruction from the user. The instruction comprises a command. The instruction may indicate a property of a networked device a resource associated with a networked device and or a networked device. The digital device may be a networked device such as a physical device. The command may indicate an action to be performed. Exemplary commands include query open read get attributes and the like. The application may in some embodiments comprise a single interface such as a command line graphical user interface GUI a script programming interface and or a batch processing interface.

In a third step the virtual file system identifies at least one digital device associated with the instruction. The virtual file system may access data stored in the database if the digital device is identified by the user using one or more queries to navigate to the digital device.

In a fourth step the file system daemon determines the command associated with the instruction. The command may be determined according to what information is required to implement the command. For example the file system daemon may access the database and then request that the device proxy access a structured device and or an unstructured device to implement a command.

In a fifth step the device proxy implements or otherwise executes the command. The device proxy can implement the command by transforming the command into a form that may be received by a networked device. To transform the command the device proxy identifies the device and determines the terms and form that must be sent to implement the command.

After implementing the command the networked device may transfer information to the file system daemon via the device proxy that may forward the information to the application to be displayed to the user.

In other embodiments a query is received from the interface. The file system daemon can determine the command e.g. query and the networked device identifier. The file system daemon may then retrieve information from the database to prepare a response to the query and send the information back to the application . This information may comprise for example query results subdirectory information properties of networked devices an updated command prompt indicating a navigation pathway and the like. In some embodiments the display of information transmitted by the file system daemon to the application may be constrained by the interfaces of the networked device.

In one example the user inputs a query for all servers owned by CompanyA. The file system daemon receives and identifies the command as well as the networked device identifier e.g. all networked devices that are servers of owner CompanyA . The file system daemon can retrieve the information from the database to satisfy the query and then send the results to the user through application .

In step the operating system transforms i.e. parses the user request into commands that can be executed by the file system daemon and or the device proxy respectively. For example the query may be represented as a file system command. In one example each portion of the user instruction is processed to determine a command and a networked device identifier.

In step a determination is made as to whether a portion of the command corresponds to the database . That is whether a reply to the command can be generated based on the data stored in the database . In step the file system daemon retrieves the information from the database to satisfy the command. In one example a query to identify one or more networked devices on the IT system may be received. Each networked device resource and property may be represented as objects within the database . As a result the file system daemon processes the query and returns the result of the query without sending commands to the device proxy .

In various embodiments the database comprises a table that identifies a networked device identifier. Resources within the remote networked device associated with the networked device identifier may be identified within the table. Similarly properties relating to the remote networked device and or the resources may also be identified within the table. Sub tables containing instructions to transmit and receive commands to a remote networked device may be linked to the networked device identifier the resource identifiers and or the property identifier.

In some embodiments the file system daemon may process the command to determine the networked device identifier the resource identifier and or the property identifier within the command. The file system daemon may send the networked device identifier and one or more commands to the device proxy in step . In some embodiments the device proxy logs into the networked device associated with the command based on instructions from the file system daemon .

Optionally in step the device proxy receives a response from the remote networked device. In step a determination is made as whether the command comprises another portion. For example a command may require data from both the database and from a networked device. If another portion of the command has not been processed the method returns to step . If the command has been processed the method continues to step .

In step the file system daemon and or the device proxy processes the response to convert e.g. format the response to a form that may be displayed by an interface e.g. the application . In various embodiments the file system daemon and or the device proxy identifies remote networked devices resources or identifiers within the response. The file system daemon may then find similar identifiers within the database . The operating system may convert the response into text that may be displayed to the user. Although discusses a managing a remote networked device or resources associated with the remote networked device various embodiments may be used on local networked devices local resources and or local properties.

If the device proxy or file system daemon cannot find any of the identifiers of the command within the database an error message may be returned to the command line interface. In various embodiments instructions on semantics or spelling may be provided to the user.

In another example the network management system receives a query. A query is a request for a listing of networked devices remote or local resources and or properties. In exemplary embodiments a query begins by specifying a type of object that the user is searching for such as servers computers routers or the like. A query that only includes the object type will return results indicating all objects of that type. Object types are classes of networked devices or resources. A class comprises all of the networked devices or resources with a similar feature. For example a query for the object type server will return a list of all the servers in the database.

A query may request a list all computers i.e. a type of networked device operating Windows XP for example. The file system daemon can processes the query to identify any identifiers including networked devices e.g. computer type identifier and resource e.g. Windows XP identifier . All managed networked devices and associated properties and resources may be stored as objects within the database coupled to the file system daemon .

The query can also identify specific properties that the user is querying. Examples may include owner location update patch or the like. A query that includes a property may also require a property value to be valid. The third portion indicates the property value that the user is querying for. For example the values for the property location may include California Australia and New York.

Table 1.0 provides further examples and includes sample queries to illustrate the command line structure. The represents the command prompt.

In accordance with further embodiments of the invention multiple types of property values may be queried. Table 2.0 includes descriptions and examples for each type of property.

A property value may comprise a single value or multiple values. For example the owner property is a single value property e.g. there may be only one owner . For example server 1 and server 2 may be owned by Acme Corporation and have an owner value Acme associated with the property Owner. Likewise server 3 and server 4 may be owned by Bigcorp Corporation and have an owner value Bigcorp. 

In various embodiments the patch property is an example of a multi valued property. For example if server 1 has both patches Q52346 and Q86355 the property patch may be associated with both the property values Q52346 and Q86355 in the model database . Likewise server 2 may be associated with both property values Q04525 and Q75622 for the property patch. A query for a multi valued property will return results associated with each value included in the query. The query may contain any number of multiple value property values.

The values of properties may also be hierarchical. The location property for example is hierarchical. To illustrate if a server is located in Sunnyvale Calif. U.S. the server is associated with a hierarchical property value such as US California Sunnyvale for the property location. Likewise the location of another server may be Gardenvale Victoria Australia and the value of the location property of the other server may be associated with a specified hierarchy such as Australia Victoria Gardenvale. For a hierarchical property the values of the property must be specified in the order of hierarchy.

The application property associated with the software applications is an example of another hierarchical property. An object however may be associated with more than one application. For example a server may include MySQL 5.0 and Apache 2.0.55 associated with specified hierarchical property values Database MySqL MySQL 5.0 and Webserver Apache Apache 2.0.55 respectively.

A user can include multiple properties in a single query. For example a query for objects of type server for which property A is associated with value aa and property B is associated with value bb may be represented as 

To illustrate the following paths are queries of the property values for servers having patch Q52346 and belonging to Acme 

In further embodiments queries may be composed of properties of varying types. For example a query may comprise a location hierarchical property and a patch multiple value property. To illustrate a query for servers that are located at Sunnyvale associated with both patches Q52346 and Q86355 may be represented as 

The syntax used in the above examples and illustrations is provided to illustrate a possible implementation of the present invention. This syntax is not intended to limit the scope of the present disclosure.

Queries may be received by the application . Once the query is processed to determine the identifiers and the action to be taken information necessary to respond to the query may be retrieved from the database . The file system daemon may organize and provide information retrieved from the database to the application in order to display a listing of object names to the user.

In some embodiments the virtual file system may omit certain property value combinations during virtual file system navigation and or a querying process. For example if a user enters a path to query for objects based on properties A and B and a certain combination of values associated with these properties does not exist the paths for the non existent combination may not be formed. e.g. subdirectories that do not contain desired information may not appear in response to the user s entry. In one example in a traditional file system a user may request to list subdirectories in a directory to find a document. All subdirectories may be displayed in response to the user s request regardless of whether the subdirectories contain any documents at all. In the virtual file system the user may request to list names of owners of a server running a specific version of backup software. In response the names of owners of servers running the specific version of backup software are displayed and not the names of all owners. As a result the user may not have the option to further navigate or query objects unrelated to the search.

The user may compose a query by first querying for servers associated only with property value a2 . For example the user may query for and server having property values a2 and b2 by entering 

The virtual file system however may limit what property values the user may enter to prevent the user from searching for a server based on property combinations that do not exist in the IT system . In the current example if a user enters 

The method may be performed by the device proxy . The method is initiated based on the instruction received from the user. The user may select a networked device or resource from a listing of query results returned by the file system daemon . In other embodiments the user may provide a path to a specific networked device and or resource in the network. For example files stored on memory within a server identified as server 1 may be accessed using the following paths 

The operating system may interpret the instructions received from a command line interface to send commands to the file system daemon . The file system daemon may identify networked devices and actions from the commands. The file system daemon may provide this information to the device proxy .

In step the device proxy receives the networked device identifier as well as the appropriate action from the file system daemon . According to exemplary embodiments the device proxy may transform the appropriate action i.e. command into a command that can be processed by the networked device using a look up table within the database or a heuristic model. The device proxy may communicate with different networked devices by using different network protocols. Device proxy establishes a connection or otherwise communicates with the networked device in step .

In step the device proxy accesses the device based on a navigated pathway via the file system daemon . The navigated pathway may comprise an account associated with the device. Hence the access to a resource and or the type of access may depend on the privileges associated with the account on the networked device itself. As such the privileges associated with the account login name may vary for different networked devices. Access to a resource on the networked device may be provided according to privileges stored on the networked device associated with account login name.

For example for accessing a resource on server 1 using the account login name httpd the command may be 

In various embodiments permission to access or manage a networked device or resource may be within the database . In other embodiments permission information is not retained. If the network management system logs into a networked device with a username and password that does not have permission to perform some function a response indicating the limitation may be received by the device proxy from the networked device. The response is transformed into a form that may be displayed by the command line interface and the user is notified of the problem. Also in step the device proxy accesses and or manipulates a resource of the networked device.

The networked device may receive the commands from the device proxy and subsequently return a response. In step device proxy sends the response to file system daemon . In some embodiments the file system daemon and or the device proxy composes a reply based on the response from the networked device and the reply is provided to the user. The method may be performed repeatedly in response to commands.

In step an execution proxy command is received. In one example the user invokes the execproxy command at an interface. The execution proxy may include a request to execute a specific program or service on a networked device. In other embodiments only the physical object may be specified. The execution proxy may first be activated by the user before the execution proxy command is received or the user may call the execution proxy with the command.

In some embodiments the device proxy establishes a connection or other communicative link between execution proxy and networked device in step . In other embodiments the execution proxy establishes the communication directly with the networked device. In one example via the application the user may set the working directory on server 1 to etc and initiate a login shell. The shell running on server 1 may output the command prompt httpd server 1 etc or root server 1 etc depending on the permissions associated with the user. The information contained within the brackets can indicate the username logged into the networked device.

In step the execution proxy may configure a session with the networked device. A session may comprise a series of communications transferred between the execution proxy and the networked device. The session may be further identified by for example a resource a time period and or a type of task to be performed. In step after the session with the networked device is established session input and output values e.g. commands may be transferred between the application and the resource using the execution proxy and or the device proxy . In accordance with various embodiments of the invention execution proxy may transfer data such as an executable code and or parameters to start a process on networked device.

For an unstructured resource such as an application program fdisk the commands in the command line shell may be represented as 

As discussed herein the user is able to access the networked device based on permissions associated with an account login name. For example an unstructured resource fdisk on server 1 is accessed via account login name httpd. The following command 

The system and method as described represent a database and networked devices of an IT system as a hierarchy. As those skilled in the art will recognize a hierarchal organization the system method and machine readable medium described herein allows users to more easily interactively access and manipulate the IT system and or develop management software to access and manipulate the IT system.

In various embodiments the ability of a user to manipulate the IT system as a virtual file system through a standard interface such as a unix command line allows the user to program batch processes. The user using simple commands can code multiple actions within a program that can act on a file system and apply the program to the virtual file system. Instead of the multiple actions being limited to manipulating documents and files the multiple actions can address making changes to multiple networked devices resources and properties or any combination thereof. As a result many changes within an IT system may occur easily without learning new syntax or programming for multiple interfaces application programming interfaces APIs or applications. Further users may leverage existing tools skills experience and or techniques to manage IT system .

The above described modules can be comprised of instructions that are stored on storage media e.g. a computer readable storage medium . The instructions can be retrieved and executed by a processor within a digital device. The digital device may also comprise storage media e.g. hard drive ram optical media tape flash memory . Some examples of instructions include software program code and firmware. Some examples of storage media comprise memory devices and integrated circuits. The instructions are operational when executed by the processor to direct the processor to operate in accordance with embodiments of the present invention. Those skilled in the art are familiar with instructions processor s and storage media.

While the preferred embodiments of the invention have been illustrated and described it will be clear that the invention is not limited to these embodiments only. Numerous modifications changes variations substitutions and equivalents will be apparent to those skilled in the art without departing from the spirit and scope of the invention as described in the claims.

