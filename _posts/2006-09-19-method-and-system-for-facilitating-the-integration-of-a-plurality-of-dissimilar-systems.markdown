---

title: Method and system for facilitating the integration of a plurality of dissimilar systems
abstract: The present invention is related to a method and system for facilitating the integration of a plurality of dissimilar systems by allowing networks of integration framework installations and/or other compatible B2B servers to inter-operate across corporate enterprise boundaries to integrate the disparate systems operating within each corporate enterprise.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07797452&OS=07797452&RS=07797452
owner: 
number: 07797452
owner_city: Palo Alto
owner_country: US
publication_date: 20060919
---
This patent application is a continuation application of related U.S. non provisional patent application entitled Method and System for Facilitating the Integration of a Plurality of Dissimilar Systems Ser. No. 10 109 874 filed Apr. 1 2002 now U.S. Pat. No. 7 143 190 and provisional patent application entitled Method and System for Facilitating the Integration of a Plurality of Dissimilar Systems Ser. No. 60 280 121 filed on Apr. 2 2001.

There are multiple models for automating a supply chain such as the traditional point to point partnership supply chain automation as well as participation in and integration with trading exchanges. Mid market supply chain related applications have propagated over the last several years. The advent of Enterprise Resource Planning ERP Material Requirements Planning or Manufacturing Resource Planning MRP Customer Relationship Management CRM Supply Chain Management and Supply Chain Execution SCM SCE and Marketplace applications see glossary at the end of this document for more information have contributed greatly to this explosion. For the enterprise to function successfully tight integration between applications is imperative albeit a considerable and sometimes costly challenge. E Business and the expansion of cross enterprise networks have added another level of complexity to this dilemma. Without an established method for connecting applications custom and typically not reusable development work is undertaken each time two disparate systems are linked.

One of the most significant obstacles to supply chain automation is the integration of disparate systems. By it s very nature a supply chain is a conglomerate of disparate software systems from many different software vendors each providing a small fraction of the capabilities of the overall supply chain. A fully optimized supply chain would require all of these systems to seamlessly interact such that a purchase by a consumer of a finished good would be aggregated and propagated throughout the entire supply chain resulting in the re manufacturing and replenishment of this finished good to the supplier. The act of tying all the disparate systems within a supply chain together results in the notion of a high level or abstract meta system which governs inter system processing of data from start to finish.

The integration of disparate systems involves the translation of data formats and correlation of events between those two systems. Business logic provides the mapping between the two systems. Because this business logic is external to each system an external execution environment is required to support the processing of business logic. The fundamental barriers to integrating applications are incompatible data formats the format in which data relevant to each system is stored and accessed and incompatible event models the methods by which system events are invoked and carried out . The result is an impedance mismatch that prevents disparate applications from communicating and sharing information.

Both mid sized and large companies have much to gain from automating and integrating their supply chains. Many of the existing integration solutions however can be rather unwieldy licensing them is often very costly and their resource requirements are typically extensive. Without a comprehensive integration solution however integrating two systems involves tedious custom development highly specific to the connection between those two systems. When the time comes to integrate another pair of systems the integration process practically starts from the beginning since the work from the first integration is frequently not easily applicable to other business relationships.

There are problems in current approaches with trying to enable large numbers of disparate systems to interact because they are subject to transport level failures. Any solution must overcome this shortcoming providing some measure of guaranteed message delivery. The nature of Internet protocols is inherently point to point. A solution requires expanding this notion to support true point to multi point communications. Once the physical disparities between two systems have been resolved the CIF must then solve the problem of the architectural disparity between two systems. This architectural disparity can be broken down into two components. First the way in which data is represented within each system is typically vastly different. Enabling communication between two such systems requires converting one data format into the other. Second the events that each system processes may be fundamentally different.

The internal system level events which trigger the internal business logic of each system must be correlated. It can be deduced that this data conversion and event model correlation requires some level processing external to either system.

Another problem with current systems is that they do not support the wide scale implementation of system level interoperability. There are many ways to accomplish this goal and many tools on the market support the development of such solutions. But these tools generally do not support mass implementation of system level interoperability. This requires scaling deployment to support dozens hundreds or even thousands of interoperating systems. Mass integration on this scale requires a new approach to systems integration. This type of integration requires a solution to be lightweight remotely maintainable and require minimal support on the part of the transacting parties.

Wide scale integration implies some constraints. For instance the deployment of a dozen installations is achievable by conventional means i.e. visits by technical personnel to install configure and test each installation. When this number moves to the dozens hundreds or even thousands of installations this model does not scale. A viable solution must compensate for this limitation so that it can support minimal technical ability on the part of the installation personnel and fully remote maintenance of any and all installations. Maintenance refers to remote configuration the addition of or changes to business logic the addition or deletion of CIF software components and installation updating of operational data.

Accomplishing wide scale integration of disparate systems provides little value however if it exposes customers proprietary data to prying eyes. As such a satisfactory solution must accomplish these goals while ensuring the security of each participant s intellectual property. This entails coverage of the following security elements.

The present invention is directed to a method and system for facilitating the integration of a plurality of dissimilar systems. Some of the key features and benefits of the system include 

Below is a list of definitions acronyms and abbreviations used in this application. Most definitions are taken from internet.com s Webopedia http webopedia.internet.com.

Access Control List ACL Access Control refers to mechanisms and policies that restrict access to computer resources. An Access Control List specifies what operations different users can perform on specific files and directories.

API Application Programming Interface. Refers to a set of routines protocols and tools for building software applications.

ASP Application Service Provider. Third party entities that manage and distribute software based services and solutions to customers across a wide area network from a central data center.

CORBA Common Object Request Broker Architecture. An architecture that enables pieces of programs objects to communicate with one another regardless of what programming language they were written in or what operation system they are running on.

CRM Customer Relationship Management. A comprehensive approach that provides seamless integration of every area of business that touches the customer e.g. marketing sales customer service field support etc.

CXML Commerce XML. Refers to a set of document type definitions DTDs for the XML specification. It was designed to standardize the exchange of catalog content and to define request response processes for secure electronic transactions over the Internet. The processes include purchase orders change orders acknowledgments status updates ship notifications and payment transactions.

DTD Document Type Definition. A file that defines how the markup tags should be interpreted by the application presenting the marked up document.

ECMAScript ECMAScript is an international standard scripting language based on Netscape s Javascript.

EDI Electronic Data Interchange. EDI supports the transfer of data between different companies using networks such as the Internet. It is a mechanism for enabling companies to buy sell and trade information.

ERP Enterprise Resource Planning. An ERP system integrates all facets of the business including planning manufacturing sales and marketing.

HTML Hypertext Markup Language. The authoring language used to create documents on the World Wide Web. It uses tags and attributes to define the structure and layout of a document.

HTTP Hypertext Transport Protocol. HTTP is the protocol that defines how messages are formatted and transmitted and what actions web servers and browsers should take in response to various commands.

JAVA A high level programming language developed by Sun Microsystems. Java is an object oriented language similar to C . Compiled Java code can run on most computers because Java interpreters and runtime environments Java Virtual Machines or JVMs exist for most operating systems.

JavaScript A scripting language originally developed by Netscape to enable web authors to design interactive web sites. Although developed independently it shares some of the features and structures of Java.

JDBC Java Database Connectivity. A Java API that enables Java programs to execute SQL Structured Query Language statements allowing Java programs to interact with any SQL compliant databases.

JNI Java Native Interface. A Java programming interface or API that allows developers to access the languages of a host system and determine the way Java integrates with native code.

LDAP Lightweight Directory Access Protocol. LDAP is a protocol for accessing information directories. Because LDAP is an open protocol applications need not worry about the type of server hosting the directory.

MRP Material Requirements Planning or Manufacturing Resource Planning. MRP is a concept for the computerized determination of requirements procurement storage and the staging of material needed for manufacturing.

Non repudiation In general non repudiation is used as an adjective to denote that the subject system can fit within a fully deployed infrastructure of certificate authorities and secure digital signature devices to show that a particular individual or organization was responsible for the content of a digital document.

SCE Supply Chain Execution. SCE systems provide tools that communicate and optimize supply chain transactions. They deal with getting a job done with decisions made in real time minutes hours or weeks in advance. Examples include Transportation Management Systems Warehouse Management Systems Order Management Systems and International Trade Logistics Systems.

SCM Supply Chain Management. The delivery of enhanced customer and economic value through synchronized management of the flow of physical goods associated information and financial information from sourcing through to consumption. It is the equivalent of SCE SCP.

SCP Supply Chain Planning. SCP systems include supply chain network design demand planning and forecasting supply planning manufacturing planning and forecasting and distribution planning. SCP is focused on getting ready for a job with decisions made from weeks to years in advance.

SOAP Simple Object Access Protocol. Provides a mechanism for applications to communicate with each other over the Internet independent of platform. SOAP relies on XML to define the format of the information and then adds the necessary HTTP headers to send it.

SSL Secure Socket Layer. SSL is a protocol for transmitting private documents via the Internet. SSL works by using a private key to encrypt data that is transferred over the SSL connection.

TCP IP Transmission Control Protocol Internet Protocol. The suite of communication protocols used to connect hosts on the Internet.

XCBL XML Common Business Library. A suite of XML based document definitions authored by CommerceOne that are based on a subset of the EDI document set.

XML Extensible Markup Language. A subset of SGML that enables designers to create their own customized tags enabling the definition transmission validation and interpretation of data between applications and between organizations.

XPATH The primary purpose of XPath is to address parts of an XML document. In support of this primary purpose it also provides basic facilities for manipulation of strings numbers and Booleans. XPath operates on the abstract logical structure of an XML document rather than its surface syntax. XPath gets its name from its use of a path notation as in URLs for navigating through the hierarchical structure of an XML document. In addition to its use for addressing XPath is also designed so that it has a natural subset that can be used for matching testing whether or not a node matches a pattern this use of XPath is described in XSLT.

XSLT Extensible Stylesheet Language Transformations. The language used in XSL style sheets to transform XML documents into other XML documents. An XSL processor reads the XML document and follows the instructions in the XSL style sheet then it outputs a new XML document. This is extremely useful in e commerce where the same data need to be converted into different representations of XML because not all companies use the same programs applications and or computer systems.

The integration framework domains shown in constitute a pure business to business B2B framework. The role of B2B is to interconnect corporate enterprises across the Internet. While Enterprise Application Integration EAI focuses on integrating applications within a specific corporate domain B2B focuses on integration between corporate domains. An isolated integration framework installation operating within an enterprise provides little benefit in the way of B2B integration. While some benefit may be garnered by interconnecting back end systems within that enterprise this type of solution is best left to EAI solutions. The true benefit of the integration framework is realized when networks of integration framework installations and or other compatible B2B servers inter operate across corporate enterprise boundaries to integrate the disparate systems operating within each corporate enterprise.

A collection of one or more integration framework installations that inter operate within or across corporate domains is recognized as an integration framework Domain as shown by and in . The notion of an integration framework Domain was conceived to provide a mechanism for creating a closed system of inter operating B2B servers. Examples of such a closed system would be a private trading exchange or the interconnection of a buyer with a set of suppliers.

Integration framework Domains exist as a security measure and to compartmentalize and isolate remote integration framework administration. Every integration framework installation is configured to operate within one or more integration framework Domains. As such an integration framework cannot connect to another integration framework that is outside of its own domain s . The integration framework Domain Administration tool described herein administers one or more integration framework Domains.

Domain participation is administered by way of a client digital certificate deployed on each operational integration framework installation. This digital certificate signed by a certifying authority running the integration framework domain will enumerate the domains for which this particular integration framework installation is authorized to participate. When an integration framework initiates a transaction with a remote integration framework this certificate is provided to the remote integration framework server during session authentication. During the client authentication process the server integration framework verifies that the client certificate specifies the appropriate integration framework domain. shows the bi lateral authentication of client and server integration frameworks using digital certificates.

If an integration framework installation wishes to participate in more than one integration framework Domain the certifying authority must issue a new client certificate specifying participation in multiple domains and the previous certificate revoked. Client and Server certificates are installed on every integration framework installation via the Domain Administration Application. The process for installing digital certificates on a given integration framework installation is as follows. The domain administrator connects remotely to the integration framework using the Domain Admin tool. Integration framework configuration information is retrieved from the remote integration framework and a Certificate Signing Request CSR is constructed within the Domain Administration application using the integration framework configuration information. This CSR is submitted to the certifying authority for signing. The certifying authority signs the remote integration framework information generating both a client and server digital certificate. The newly generated certificates are installed on the remote integration framework via the Domain Administration application. The certificate generation process must invalidate revoke any existing client server certificates.

Rather than compile distribute and install all aspects of the integration component at a frequency dictated by changes in business logic the integration framework subdivides the architecture into separate components that can be released independently of the others. These three components are known as Integration Services Business Logic Processing Unit and one or more Host Adapters. depicts the logical separation of the integration framework components calling out the frequency with which each component tends to change.

The Integration Services component defines the foundation of the Integration Framework. An upgrade to the Integration Services component requires re installation of the integration framework. Upgrades to the Host Adapter s and Business logic can be done remotely without requiring a server restart. This component decomposition supports dynamic server upgrades as well as remote administration of the Host Adapter and Business Logic.

Many of the reasons that the integration framework is so suitable for such a variety of enterprises rest in its architecture. The integration framework has three main components that make up each host system as shown in . These components include a Business Logic Processing Unit shown at for Host System A and Business Logic Processing Unit for Host System Z shown at . Each host system also has a Host A Adapter and a Host Z Adapter connected to the respective Business Logic Processing Units and respectively. Host A Adapter is connected to Host System A and Host Z Adapter is connected to Host System Z . The Host A Adapter and Business Logic Processing Unit are each connected to Integration Services unit . The Host Z Adapter and Business Logic Processing Unit are each connected to Integration Services unit . The two Integration Services units and are each connected to a Network or the Internet or an Extranet represented by element . These building blocks make up the integration framework shown in .

Business Logic Processing Unit Each Business Logic Processing Unit and as the name implies incorporates business logic for a company s unique transactional relationships. It receives requests exchanges data with your back end host applications and invokes other agents. It also distributes data to other systems either internal or external to your organization. The Business Logic Processing Units and can establish contact with other integration frameworks in its integration framework domain. An integration framework domain is a group of related integration frameworks managed by a common administrator shown as integration framework domains and in . An integration framework domain roughly corresponds to an industry such as food or petroleum. Business logic to be executed by the Business Logic Processing Units and is organized in one of two ways Agents and Services and Payload Processors.

In the Agent Service model each individual unit of business logic is referred to as a Service. One or more Services are grouped to form an Agent. This grouping is typically based on the general function of each of the grouped Services. For instance a collection of Services that cooperate to provide interaction with a back end financial management system might belong to the Finance Agent. Agents exist as remotely deployable software components. This model supports the reuse of similar business logic processes between integration framework installations.

The Payload Processor model involves tying units of business logic to predefined elements within the incoming XML payload document. A Payload Processor consists of one or more Payload Processing Rules. A Payload Processing Rule is the combination of a search pattern and the definition of business logic to be executed whenever the search pattern is recognized within the incoming XML payload document. The search pattern conforms to the XPATH syntax as specified by the W3C. The associated business logic is defined via the integration framework administration application.

In general the Agent Service model supports document object model DOM based processing of the incoming XML payload while the Payload Processor model supports event based processing. The Business logic author is free to choose whichever model best suits a given application.

Host Adapter The Host Adapters and serve to connect the Business Logic Processing Units and respectively to a company s existing systems. The Integration Framework Host Adapter shown in consists of three main layers connected to the JD Edwards Host System which has a Host Application Programming Interface API . The bottom layer actually exposes and accesses the data that the host API uses. Some applications provide a library of program functions that an external application such as the integration framework may call to access their data. For other applications the Host Adapter directly accesses the application s data files or relational database. The middle layer defines relatively complex processes such as various Business Objects that involve a series of operations on the bottom layer . Submitting an invoice for example might require reading and writing data from multiple places. The top layer provides a simpler Scriptable Interface or wrapper to the other two layers.

Integration Services Integration Services and in each provide a suite of network communication and data processing utilities to the other two components the Host A Adapter and Business Logic Processing Unit and the Host Z Adapter and Business Logic Processing Unit respectively. Integration Services and each establishes secure connections between agents with a variety of protocols such as SOAP and SMTP in addition to supporting integration with standard Message Oriented Middleware MOM solutions such as SonicMQ and MQSeries. The Integration Services components and also each provides for the management of the Business Logic Processing Units and respectively and Payload Processors running on separate machines to provide for fail over and scalability load balancing .

A Business Logic Processing Unit will execute all application specific business logic via the Host Z Adapter component and business logic provides logic to 

Process events and or data received from the Host System Z that are to be forwarded to one or more other possibly remote systems. For example a process event might be an Ariba Marketplace Host System Z request for availability and price of a quantity of nails that is to be forwarded to one or more suppliers of nails. In this case the appropriate Business Logic Processing Unit requests received from other possibly remote Agents which involve interaction with the Host System Z . For example a request for availability and price of a quantity of nails received from a remote Agent representing the Ariba Marketplace by the Agent for a hardware supplier with a JD Edwards ERP Host System A shown at . In this case the local Agent will process the request interacting with the JDE ERP Host System A as necessary to determine availability and pricing. Extending this model the same supplier might choose to integrate with two different trading exchanges say Buzzsaw and eSteel. In that case we could simply create two agents Supplier to Buzzsaw and Supplier to eSteel. Both Agents could interact with the JDE application via a single Host Adapter. 

Process responses being sent from one Host System to another. For example the response to a request for price and availability of a quantity of nails. In this case the Ariba Marketplace Agent will specify for example how the content of the response payload should be formatted for the Ariba Host System Z shown at .

Translate Host System specific data into a format recognizable by other possibly remote Agents. For example the Ariba Marketplace Host System Z upon receipt of a purchase order from a buyer triggers business logic contained within a local Agent. The Business Logic Unit extracts the pertinent purchase order data via the Ariba Host Z Adapter and constructs a standard XML representation of this purchase order e.g. XCBL Purchase Order document . The Business Logic Unit then determines athe destination of the purchase order from the purchase order data and requests a service from invokes a method on a remote Agent located at the destination to handle the purchase order. This is accomplished via the Integration Services component . The remote Agent receives the standard XML purchase order document via its Integration Services component parses the document and interacts with its own Host System as necessary to input the purchase order information.

The Business Logic Units may operate within an ECMAScript JavaScript environment enabling Agents to be fully customized in the field by Internet Consultants and Engineers. The Integration Services components and each exposes XML processing capabilities into the script environment enabling XML queries via XPATH and XML translations via XSLT Extensible Stylesheet Language Transformations a language for transforming XML documents into other XML documents . The scripted nature of the Agent makes it the easiest component to customize and in fact for most implementations the bulk of the customization work will be done on the Agent not on the other two components the Host Adapter or Business Logic Unite of the Integration Framework.

The Host System is a software application. It could be an ERP system like JD Edwards a trading exchange like Ariba Marketplace a custom application or an application with an HTML based UI e.g. a web storefront .

The Host Adapter such as in will enable one or more Business Logic Processing Units to interact with the Host System API as shown in . The Host Adapter wraps the Host System API with code that makes it accessible from within the Agent scripting environment. This allows the business logic within an Agent to make calls into and receive calls from the Host System API .

The Host Adapter is comprised of three layers. The first layer exposes the Host System API Application Programming Interface essentially converting it to a Java API. If the back end system already has a Java API this layer will be unnecessary . The second layer defines higher level business objects that involve multiple calls to the lower level Host System API e.g. submit invoice submit PO query price and availability. This second layer is designed to simplify scripting of business logic in the Business Logic Processing Unit . The third layer wraps the first two which are Java interfaces with code that makes them both accessible to the ECMAScript environment of the Business Logic Processing Unit .

The Host Adapter component is reusable with little or no customization e.g. once a JD Edwards Host Adapter is developed it should be reusable on all projects that involve the integration of JD Edwards system with some other application. The Host Adapter is designed to work with a specific release of the back end application. If the customer upgrades to a newer version of back end software a new Host Adapter release may be required to access features of the new release. Block shows that most modifications to the system can be done remotely while re installation is rarely required.

The Integration Services component shown in serves as the foundation of the integration framework. This component is actually a collection of system level services available to both the Host Adapter s and the Business Logic Processing Unit . While each service is defined below it is important to note that the Integration Services component represents the lowest layer of integration framework functionality. As such the installation of an integration framework is basically the installation and configuration of the Integration Services component Host Adapters for communicating with the host file system and an Agent that supports remote integration framework administration. This basic configuration supports the remote administration for installation of additional Host Adapters and Business Logic Processing Units. depicts the services provided by the Integration Services component . A description of each of the services within the Integration Services component follows. The definition of these services roughly flows bottom to top with respect to .

The Integration Services component provides various system level services including Network Access services Agent Management and XML Processing services for the Agents as well as services to support agent administration installation and configuration . The Communication services contains the mechanisms for handling the sending and receiving of requests between Agents e.g. SOAP SMTP encoding and or interaction with MOM. Partner registration services are also supported.

All communication services provided by the integration Services Component support SSL based encryption of outgoing messages and certificate based remote partner and message authentication.

The Agent Management services provided by the Integration Services Component include the dynamic installation removal of agents including the associated Host Adapter component s enabling disabling installed Integration Services Service invocation execution monitoring load sharing and usage monitoring for the potential per transaction fee based model .

The XML Processing services enables Agent processing of XML documents from within the scripting environment for example enabling the query of an XML document for all elements with Product Nails translation of data from one XML format to another for example the conversion of an XCBL invoice to an CXML invoice and direct manipulation of XML data from ECMAScript for example construction of a new XML document or modifying content within an existing XML document. XSLT technology is used for transformation of documents from one format to another. XML Schema and DTDs are used for validation of the document formats. XPath is used to select sub trees of documents or whole documents that match conditions defined on document content and structure from which new documents can be constructed based on what is selected. XPath is also used in conjunction with XSLT to address sub parts of an XML document that can be used to determine whether nodes conform to a pattern.

The Integration Services are constant or generic components of the Integration Framework requiring little or no application specific customization.

The encapsulation of functionality into these three components maximizes reusability. While each business has unique requirements neither the integration framework provider nor its clients are ever in the position of having to reinvent the wheel. For each back end system such as Intershop Manugistics OracleApps QuickBooks SAP or even custom mainframe legacy applications the Host Adapter provides a uniform interface that the integration framework can rely on for all users of that software package. The integration framework provider develops the Host Adapter for each back end application once and that Host Adapter is highly reusable. Since the Business Logic Processing Unit is to some extent unique to a particular integration it does require some customization. The Business Logic Processing Unit however is designed with ease of customization in mind. The integration framework provider and Internet Engineers adapt the Business Logic Processing Unit to a client s particular business rules.

Unlike some other integration solutions the present invention makes extensive use of several established standards and Internet protocols. The fact that the integration framework uses several well known protocols means that users can easily establish contact with the integration framework. Using the Hyper Text Transfer Protocol HTTP interface a user can interact with the integration framework in a Web browser. If HTTP connectivity is not available due most likely to a firewall the integration framework also supports Simple Mail Transfer Protocol SMTP . Through the SMTP interface a user can exchange information with the integration framework using any Internet mail client. While the integration framework will probably be getting a great deal of its information from other integration framework installations it is a reality that many mid sized companies do not have back end systems that cover the whole of their business process. So HTTP and SMTP interfaces provide a very useful way to carry out manual processing without installing a complex dedicated client application.

The integration framework Web server responds to client connections and an LDAP server provides for maintaining user information. The integration framework also adheres to a number of Internet security standards. The Secure Sockets Layer SSL technology is the same that Web browsers and many other Internet applications use to protect their data from interception encryption and to verify the other party s identity in communications authentication . The integration framework s primary means of representing data is also an open technology it uses Extensible Markup Language XML for this purpose. XML an extensible derivative of SGML provides for the representation of complex objects in a uniform and hierarchical manner. The integration framework employs the Simple Object Access Protocol SOAP v1.1 . SOAP represents a standard means of accessing distributed objects using XML payload syntax. The Universal Description Discovery Integration UDDI initiative uses SOAP to substantially simplify communications between objects. The integration framework also interfaces with a number of Message Oriented Middleware MOM applications through the Java Message Service JMS API. The scripting language that the integration framework uses for defining business rules in the Business Logic Processing Unit is ECMAScript 262 JavaScript a language that while powerful is fairly accessible to individuals without a high degree of programming experience. Finally much of the rest of the integration framework is in Java a leading open platform language developed by Sun Microsystems.

The integration framework s Java implementation means that the integration framework can run on multiple hardware platforms. The integration framework supports both Windows and Unix environments and easily adapts to any environment for which a Java Runtime Environment JRE is available. Since the hardware environment for business systems today is quite heterogeneous it makes a great deal of sense to develop on a platform that will run on as many types of systems as possible. Java programs will run on any Java Runtime Environment JRE without recompilation regardless of the underlying hardware. Indeed in addition to running on both the Windows and Unix platforms the integration framework s hardware requirements are rather basic. A minimal installation of the integration framework will run on a standard desktop machine.

The integration framework leverages the extensive infrastructure that the Internet brings with it while overcoming its shortcomings as a business communications tool. Since the Internet is decentralized and highly dependent on intermediate systems it by itself has a certain amount of inherent unreliability. When one party sends a message to another by standard Internet mail for instance the sender cannot prove or even know that the recipient actually received it. The integration framework however provides a facility for easily interfacing with 3party Message Oriented Middleware that provide guaranteed message delivery and also generates audit trails. When two parties engage in a transaction through the integration framework each party will know that the other received all related messages. Through the SSL authentication process each party will be able to verify the identity of the other party. The integration framework utilizes the security features provided by the MOM vendor.

Also unlike most Internet mail the information in messages that the integration framework exchanges is secure. Since the messages travel in encrypted form any entity intercepting them would likely find them unintelligible. While many other products use SSL and it is a proven technology it is only part of the integration framework s comprehensive security architecture. Data security is a preeminent consideration in the integration framework. Client and server digital certificates secure communication between integration frameworks. Smart card technology secures administration functions and access to the client s Business Logic. With a smart card an administrator can access configure and monitor an integration framework node from anywhere on the Internet.

Like the Internet however integration framework domains allow for a dynamic understanding of the machines and organizations that comprise them. Whether one is in a traditional supply chain environment or a trading exchange businesses regularly forge new relationships and end existing relationships. The integration framework provider administers integration framework domains for various industries and one party can integrate with any other party in its domain.

At the lowest level all integration framework network communication takes place using the HTTP S network protocol. HTTP S is a mature stable and well documented network protocol and has become the standard for inter network communication. The Integration Services component contains a configurable number of HTTP S listeners waiting for incoming service requests. It is intended that the HTTP S keep alive session facility be utilized to enable multiple individual HTTP S request response pairs over a single TCP IP connection .

Bi directional authentication means that when a client integration framework initiates communication through an SSL connection making a connection request through an accept SSL connection request with a server integration framework the server integration framework returns a server certificate sent and signed by the certifying authority . The client uses a factory installed public key certificate authenticate server domain to validate that the server certificate was indeed signed by the certifying authority then the client authenticate server domain verifies the server URL IP Address and integration framework Domain name. Once the client has authenticated the server the client certificate sending authority then submits a client certificate to the server integration framework . The server integration framework then reverses the process in the authenticate client domain for the client . The HTTP S protocol then provides for the private key exchange and facilitates encryption for the remainder of the session.

Non repudiation is achieved as the client digitally signs using it s private key the message request contents. The server similarly signs the response contents thereby assuring that each party is bound to the transaction. This eliminates the threat of either party denying participation in the transaction.

Service level access control is achieved by using the signed remote server URL IP Address information to authorize the remote integration framework for the specified service invocation. If the remote integration framework has not been authorized to request this service the service request is denied and an error message returned to the client.

The certificate installation shows that the client integration framework provides configuration information to the domain administration application to construct a Certificate Signing Request CSR which is submitted to the certificate server to provide verification of remote integration framework information . The information is passed to a certificate generator which generates both digital server certificates and client certificates . These certificates and are passed to a certificate log installation . The certificate log installation then passes the logged digital server certificates and client certificates for installation .

The HTTP S protocol defines a session based network connection with no provision for the structure of the data that will traverse this connection. In order for two endpoints to effectively communicate some structure to the data passed through the HTTP S connection must be agreed upon. Fundamentally this structure is comprised of XML formatted data. While XML formatted data provides structure and meaning to the data there still needs to be some level of agreement between the involved parties as to the specific XML format to be used. This section deals with that encoding.

Fundamentally when one integration framework wishes to communicate with a remote integration framework the structure of that message must include a message identifier and a message body. The message identifier serves to identify what operation is to be performed by the remote integration framework as a result of receiving this message while the payload represents the data to be operated on. The terms used throughout the rest of this description refer to the message identifier and message body respectively as topic and payload .

The topic and payload are implemented using variable length character strings. Ideally the topic will be a structured character string that identifies to the receiving integration framework the processing which is to be performed while the payload will be a serialized well formed and ideally validated XML document. This definition is broad enough to apply to each specific supported encoding protocol defined below.

The SOAP protocol is a point to point protocol. What this means is that a calling client integration framework makes a request remote object activation which has a SOAP encoded topic payload that must specify a distinct network address URL or IP Address for each remote integration framework installation it wishes to communicate with. The SOAP encoded topic payload is sent to the server integration framework for processing of the XML payload based on topic which is shown at . A SOAP encode XML response document is generated and that encoded response is then processed by client as an XML response document . This results in the embedding of remote integration framework information in local business logic. The SOAP protocol is also a synchronous protocol. This means that the calling thread of execution must halt until all remote processing has completed by a given remote integration framework before execution of business logic processing can continue. Because the SOAP protocol is based on HTTP S it is only as reliable as the underlying HTTP S protocol. Since the HTTP S protocol is subject to failure based on network availability timeouts routing problems etc. retry and recovery logic must be embedded within the local Business Logic.

Security in the form of client server authentication encryption non repudiation and service level access control is based on the underlying HTTPS protocol and the digital certificate model described with regard to .

MOM typically supports the notion of point to multi point data transmission. Point to multi point transmission is typically implemented using the publish subscribe model. In this model each installation acts as an end point to the MOM . During message distribution one integration framework acts as the publisher of a message while one or more remote integration frameworks act as subscribers. This frees the originator of a message from knowing who will be the recipients of a particular message. MOM maintains routing and distribution logic that it uses to make routing decisions at runtime. This allows for dynamic changes to the message distribution paths without modification to the Business Logic operating within the integration framework endpoints.

An initial remote message distribution from client integration framework sends a topic message . MOM typically supports guaranteed delivery of messages by providing a persistence layer for persistent message contents within the MOM architecture. This means that when a message is submitted to the MOM by the client integration framework the message contents are persisted at . Message confirmation is then provided to the client so that it may continue processing business logic prior to acknowledgment by the MOM that the message has been received. Message confirmation also distributes the topic message to designated recipients shown at which is then processed at by designated client server integration frameworks . Once a message producing integration framework receives acknowledgment that the MOM has received the message it can rest assured that this message will not be lost.

MOM supports asynchronous processing by the message producer. This allows the Business Logic thread of control to submit a message to the MOM and immediately continue executing local Business Logic. In a separate thread of control the MOM takes responsibility for continuing with message distribution.

MOM typically provides for unidirectional messaging. The architecture of most MOM implementations is directed toward the flow of messages from a message producer at to one or more message consumers at . If a message consumer wishes to respond in some way to the receipt of a message this is typically a separate and distinct message flow. This is a primary distinction between the abstract notion of message distribution and object activation. Object activation typically involves an object activation message including a topic and a payload and an associated response from the activation message consumer back to the activation message producer. MOM provides a superior platform for message distribution while SOAP provides for simple object activation.

MOM typically requires a physical implementation platform separate and distinct from the integration framework implementation platform. This implementation can be either remotely hosted or co located with one or more integration framework installations. This physical implementation is typically dictated by the specific MOM implementation.

As described depicts typical asynchronous unidirectional message distribution processing while shows typical client server integrated framework MOM bi directional based object activation point to multipoint processing system . System has a client integration framework multiple server integration frameworks and MOM . As depicts the asynchronous nature of MOM based object activation requires some form of multi response processing on the part of the message producing integration framework. The multi response processing must correlate all object activation responses with the appropriate outgoing object activation request. This is accomplished by having the message producing integration framework establish a response message queue and pull messages from the response queue delivering them to the appropriate business logic processing unit. Object activation request response correlation is achieved by associating an objects activation request identifier that is distributed with each object activation request. The message consuming integration framework associates this activation request identifier with the activation response document.

As seen in in addition to the steps and which correspond to the counterpart steps as described with respect to the processed message is then constructed as an XML response document which is sent to a collection point for all XML response documents . The collected response delivered as shown at and finally processed as multiple XML response documents at .

Each MOM implementation has its own security implementation. Many MOM implementations are based on the HTTP protocol and as such leverage the HTTPS security capabilities. Others may use proprietary security infrastructure. The security requirements of the specific implementation must be considered during the MOM implementation selection phase.

At the low end of the MOM implementation spectrum lays the SMTP standard email protocol. SMTP provides for point to point point to multi point and asynchronous message distribution.

The SMTP protocol provides a simple reliable and virtually ubiquitous platform for object activation and or message distribution. For integration framework implementations that warrant point to multi point and or asynchronous communication object activation and message distribution using SMTP provides a low end solution for clients who can t or choose not to implement a more formal MOM solution.

An integration framework installation acting as a message producer can use the SMTP protocol and a mail server to asynchronously distribute object activation requests and messages. For point to point communication the message producer specifies a single email address associated with a message consumer. For point to multi point message distribution an email distribution list can be configured within the email server specifying the intended recipients. Integration framework installations acting as message consumers can use either the POP3 or IMAP protocols to receive object activation requests and messages. Once a message consumer has processed an object activation request the response can be delivered back to the message producer using the Reply To address of the incoming message.

The message topic should be submitted as the email Subject while the payload may be transferred as the either as the message body or as an email attachment. For object activation requests requiring response processing the SMTP Reply To field should contain the email address for all responses. Multi response correlation requires that an object activation request identifier be delivered with the activation request and supplied within the response document. It is up to the designer to specify the details of object activation request identifier packaging within the request and the associated response documents.

SMTP security is implemented based on standard S MIME processing supported by most email servers. This entails the installation of an S MIME digital certificate on each message producing integration framework installation that utilized the SMTP protocol. This S MIME certificate is used for both message signing and encryption.

All services provided by a given integration framework installation optionally process a payload in the form of an XML document. The Integration Services component is responsible for parsing this payload validating it against a DTD or XML Schema and then making it available to the Business Logic for processing. The XML parsing provided by the Integration Services component must comply with the full XML processing specification as defined by the W3C.

In order for Business Logic written in ECMAScript to manipulate the XML payload there must be a binding of this XML payload to the ECMAScript environment. The Integration Services component must provide this binding to enable scripted Business Logic access to payload content. This binding must provide full access to the entire XML document and support all aspects of the W3C XML ECMAScript Document Object Model DOM as specified in appendix A. http www.w3.org TR 2000 WD DOM Level 1 20000929 ecma script language binding.html As an alternative to the W3C ECMAScript a simplified method of manipulating XML via ECMAScript may be implemented.

The prior methods of XML processing describe the procedural processing of XML documents. In the paradigm of the present invention the XML document is treated as an object operated on by the defined business logic. This procedural view of processing XML documents supports complete manipulation of the XML document but may become unwieldy for less experienced business logic developers. To simplify processing of XML documents the integration framework supports the notion of declarative or rules based processing of XML documents. Well formed XML documents follow a strict element hierarchy. As such every element in this hierarchy can be uniquely addressed with a simple syntax.

The integration framework supports the distribution of processing components across machine boundaries. Scalability is achieved through the addition of inexpensive CPUs. As components are distributed across the customer s computing environment the locations of these components are made known to the framework via the administration interface.

The integration framework requires network access allowing in out bound HTTP access in order to support agent requests to from remote sites.

Distributed Integration Framework components may not be split across TCP IP firewall software hardware.

Load distribution involves the equilateral distribution of processing e.g. round robin without consideration for independent processor loads true load balancing .

The threading model specified for agent services must match the threading model support by the back end system API. This is to ensure that there are mechanisms in place to ensure secure exclusive access to a back end resource e.g. to enable the writing of customer data to ERP fields that support order processing while it is being used e.g. to prevent over writing of the same fields by another application that has access to the same ERP .

The integration framework adds system load to the installation machine as such care should be given before deciding to co locate the framework with the back end application.

The integration framework supports the distribution of processing elements across physical machine boundaries. This model supports configurations consisting of the default configuration of a single machine up to many machines cooperating to provide for load distribution and fail over. The integration framework supports the physical separation of the network interface units from business logic processing units. The network interface units provide for network presence and load distribution while the business logic processing units carry the actual processing load. The integration framework scalability model supports one or more network interface units and one or more business logic processing units.

Each network interface unit supports one or more business logic processing units. As the load on any single business logic processing unit increases additional business logic processing units can be brought on line. As the load on any single network interface unit increases additional network interface units can be brought on line. The network interface unit supports the mapping of incoming SOAP requests to a specific set of one or more business logic processing units. SOAP requests not assigned to a specific set of machine s are routed in a weighted round robin fashion.

Each integration framework utilizes the LDAP protocol for configuration management. Each integration framework installation includes an LDAP server. Each component retrieves its configuration information from the local LDAP server. This allows for dynamic reconfiguration of integration framework components.

The integration framework supports dynamic configuration of logging and diagnostic output. Through the administration application the integration framework administrator can specify which events get logged and the content and format of all log messages. The integration framework supports both textual and XML formatting of log messages. The integration framework supports logging to local disk as well as remote logging to a log server. Specification of log rollover parameters is made via the administration application. Typical log messages include a date time stamp trading partner identification topic and payload and message. The integration framework supports the separation of diagnostic error and transaction logging.

The integration framework supports access to Services and Payload Processors via standard HTTP S POST and GET requests. This enables low end users the ability to interact with one or more integration framework installations with a standard browser. Definition of the HTML UI is specified using a combination of static and dynamic HTML pages leveraging standard Servlet and JSP services. The JSP Services also support the notion of what is commonly referred to as model view controller model 2 design pattern.

Each integration framework installation is remotely administered via the integration framework administration application. This application acts as a portal for administering one or more remote integration framework installations. The administration application presents a GUI view of a distributed network of integration framework installations. The administration application communicates with these remote integration framework installations via the SOAP protocol. By interacting with the administration application UI the integration framework administrator can view edit and save changes to the configuration and business logic associated with the remote integration framework.

Domains are defined through the issuance of client digital certificates. Each client certificate specifies the domain within which this installation has permission to operate. During the client authorization process the server verifies that the client does indeed belong to the appropriate domain prior to servicing the request.

Domains are also specified on the client certificates used by the remote administration application. This restricts the remote administration application to accessing only those integration framework installations for which they have been authorized.

Each integration framework installation is administered via the remote administration application. This application presents a graphical user interface for performing all administrative tasks on a remote integration framework installation. Tasks supported by the remote administration application include certificate management overall configuration Host Adapter installation Host Adapter configuration Agent Service construction and configuration network configuration transaction log maintenance remote execution tracing monitoring performance monitoring load balancing etc.

When the administrator attempts to administer a given integration framework installation the administrators client certificate is provided during the client authorization process. The server verifies that the client certificate is valid and that it grants appropriate access permissions to the administrator. The integration framework utilizes a proprietary XML dialect for the data transfer required to support remote administration.

The integration framework is installed within the customer s environment either from a CD ROM or downloaded from the integration framework provider s download site. Installation scripts guide the installer through the installation process prompting for all necessary site specific information. The components are installable on a single machine or across multiple machines based on the expected load requirements. The same installation script is executed on each machine and the desired components installed. Once installation is complete the administration user interface is presented for system configuration.

Administration functions will be accessible either locally or remotely by centralized integration framework provider support personnel. Authentication is required to perform administration activities.

The standard configuration supports testing the successful installation of the integration framework. An administration user interface provides for the specification of the back end integration system s partner registration agent scripting and load distribution.

The installation user interface provides the means for specifying which back end system s the user wishes to expose to its trading partners. Selection of these system s during installation results in the installation of the Host Adapters capable of interfacing with these systems and the Business Logic Processing Unit s capable of processing the data events associated with these systems.

Each partner to whom the customer wishes to expose his or her back end system is registered via the administration user interface. Partner registration is provided for the documentation and storage of the legal terms and conditions of the partnership connection method security model and services exposed by each partner. Each incoming request is validated against this partner agreement prior to invocation. If the requested service is disallowed by the partner agreement the request is denied at run time. Items defined within the partner agreement will include 

The administration interface provides access to the business logic which is authored in ECMAScript and comprises each Business Logic Processing Unit. The business logic is viewable and editable to tailor the Integration Framework to a particular customer s needs.

The integration framework scales linearly with the addition of hardware and a reasonable distribution of processing components. The response times remain linear up to the point of network saturation.

The integration framework supports weighted load sharing as opposed to true load balancing. This can lead to a situation where bottlenecks occur as operational components become saturated. It is the responsibility of the framework administrator to monitor load and appropriately distribute the system components.

The following public open standards are utilized and leveraged by the integration framework to communicate between components and to enhance interoperability with third party applications and systems.

The plethora of operating environments in existence today requires a platform independent solution. To this end the integration framework is a pure Java application limited only by the availability of a Java Runtime Environment JRE for the target platform. Certain supporting components may be platform dependent but these will be lightweight and distributable such that they may be separated out and independently deployed on the required platform at minimal cost to the customer. For instance the configuration component is deployed on an open source LDAP server that requires either a Solaris or Win32 platform. If neither of these platforms is available a minimum configuration specific for this component may be installed and accessed by the other components via the local area network.

While various application embodiments of the present invention have been described above it should be understood that they have been presented by way of example only and not limitation. Thus the breadth and scope of the present invention should not be limited by any of the above described exemplary embodiments.

