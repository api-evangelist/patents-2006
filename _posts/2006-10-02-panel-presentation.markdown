---

title: Panel presentation
abstract: Panel presentation is described, including presenting a foreground panel over a background panel, detecting an input associated with the background panel, the input being configured to invoke the background panel, and rendering the foreground panel and the background panel in a substantially similar region of an interface, the foreground panel and the background panel being rendered without modifying the foreground panel.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07673251&OS=07673251&RS=07673251
owner: Adobe Systems, Incorporated
number: 07673251
owner_city: San Jose
owner_country: US
publication_date: 20061002
---
The present invention relates generally to software computer programs applications and user interfaces. More specifically panel presentation is described.

Display or presentation presentation of content is affected by a given user or set of users preferences. Graphical user interfaces interfaces are typically designed and implemented for use with various types of software computer programs or applications applications including web browsing desktop or client applications distributed applications enterprise applications customer relationship management CRM enterprise resource planning ERP visual and graphical design content portals electronic commerce and others. Interfaces facilitate how users interact with applications often providing graphical visual or other media based elements that allow intuitive interaction. Factors such as the design style fonts color layout font type format and others are used to develop an interface. However there are several limitations to conventional interfaces.

In some conventional interfaces specific or customized programming or coding is required due to specific design structural i.e. integration with operating systems other applications or as part of an application functional or usability requirements. Conventional coding techniques typically require extensive time labor expensive development applications and other resources to develop an interface for a specific set of needs. Customization of conventional interfaces often requires further time and labor or even specialized resources such as elaborate web design applications. For example to develop a skin or packaged graphical user interface appearance for a website may take substantial amounts of time and expert labor in order to support the individual needs of a particular group of users. If user needs change then more time labor and perhaps additional specialized design applications may be required. Further changing the appearance of an interface or substituting a new interface or skin to address different users or user groups is expensive and difficult increasing in complexity in direct proportion with the number of users. Still further conventional interfaces are limited in functionality and can restrict the amount of information that can be presented in a given window screen panel or the like.

In other conventional solutions the amount of information or data to be presented is limited by the design layout and appearance of a given interface. For example using a particular background pattern may be appealing to some users but distasteful to others but can limit the amount of information presented on an interface for an application. As another example the layout of an interface may be designed to appeal to a certain set of users. However this may limit the amount or types of information that a user may see. Subsequently users are forced to open multiple interfaces to retrieve or view additional information. Superfluous tabbed screens windows pop up windows or altogether new interfaces may be required. This results in disruptive user experiences forcing users to open and switch between different or multiple interfaces which is inefficient and time intensive. The limitations of conventional interfaces result in incomplete transactions on an electronic commerce site reduced usage of a website e.g. content portal blog or other type of content oriented website content application tool or interface.

Thus a solution for presenting information and data in interfaces without the limitations of conventional techniques is needed.

Various embodiments or examples may be implemented in numerous ways including as a system a process an apparatus or a series of program instructions on a computer readable medium such as a computer readable storage medium or a computer network where the program instructions are sent over optical electronic or wireless communication links. In general operations of disclosed processes may be performed in an arbitrary order unless otherwise provided in the claims.

A detailed description of one or more examples is provided below along with accompanying figures. The detailed description is provided in connection with such examples but is not limited to any particular example. The scope is limited only by the claims and numerous alternatives modifications and equivalents are encompassed. Numerous specific details are set forth in the following description in order to provide a thorough understanding. These details are provided as examples and the described techniques may be practiced according to the claims without some or all of the accompanying details. For clarity technical material that is known in the technical fields related to the embodiments has not been described in detail to avoid unnecessarily obscuring the description.

Panel presentation is described including implementing interfaces that provide more appealing user experiences while presenting additional information and content in an efficient and contextually relevant manner. Panels displays palettes tabs windows screens or the like panels provide packaged displayed of colors styles patterns and other graphical elements. Panels may be used to provide information or data that is contextually relevant to other information or data in other panels without inhibiting user interaction or interface utility or functionality. In some examples the graphical appearance of an interface may be modified by using panels that have a transparency level that when invoked allows a background panel layered over a foreground panel to become visible. When visible new colors styles patterns layouts or other interface elements may be used to replace supplement or modify an interface or another panel. In other examples a background panel used in an interface may be layered under a foreground panel. When invoked a foreground panel slides toward a side or aside revealing a portion or all of a background panel which may include additional information associated with the foreground panel. A foreground panel may slide in any direction that permits viewing of a background panel which may include information data or content content that is related or not related to content included in the foreground panel.

The described techniques may be implemented as software hardware firmware circuitry or a combination thereof. If implemented as software the described techniques may be implemented using various types of programming or formatting languages frameworks syntax applications protocols objects or techniques including C Objective C C C Flex Fireworks Java Javascript AJAX COBOL Fortran ADA XML HTML DHTML XHTML HTTP XMPP and others. These may be varied and are not limited to the examples or descriptions provided.

In some examples panels may be presented on interface which may be an interface for an application such as a web browsing program shopping website Internet content portal client or desktop application for any purpose. Panels may be used to provide additional or supplemental information that may be contextually relevant to another panel presented in interface . Computer notebook computer notebook or laptop smart phone personal digital assistant PDA server and administrator computer may provide display parameters that are used to determine various types of display features and characteristics for panels presented in interface . Display parameters may be any type of parameter metric information bit byte or other data that is interpreted parsed translated called operated upon or used to render graphical or visual data. For example an operating system installed on computer may communicate i.e. via an application programming interface API display parameters to another application installed on computer to render i.e. interpreting data and information to draw or display the data and information in an interface one or more panels presented in interface . In some examples different types of panels may be rendered in interface including background and or foreground panels as described in greater detail below. Here the above described system and elements may be varied and are not limited to the descriptions or examples provided.

In some examples logic module may be configured to control panel generator and rendering engine which may create display parameters and other data or information that when communicated to a display not shown renders one or more panels on interface . Interface module may send or receive display parameters and other data from application to another application e.g. a host client web services based distributed i.e. enterprise application programming interface API operating system program procedure or others that may use data and information generated from panel generator to render presented panels on a display screen. In other examples the above described techniques and elements may be varied in design implementation and function and are not limited to the descriptions provided.

In some examples logic module and panel generator may be implemented as part of application which may be implemented separately from other functional components or modules such as interface module display module rendering module and repository . Data bus may be implemented to communicate data over a given port between application and interface module display module rendering module and repository . In other words application may be implemented as a standalone application or as a component i.e. module of another application. Data or information e.g. display parameters associated with a panel may be stored in repository which may be implemented using a database data store data warehouse or any other type of data repository or structure. In other examples more fewer or different modules may be used to implement the described techniques for panel presentation and are not limited to those provided.

In some examples background panel may be presented by sliding foreground panel to a side or by adjusting the transparency level of background panel . As an example background panel may be used to present additional information when foreground panel is rendered i.e. presented to appear as though sliding aside thus revealing background panel . As another example content on background panel may be presented by adjusting the transparency level of background panel from 100 to a visible level e.g. 0 10 50 and the like . Transparency may be rendered using various techniques including modifying alpha values i.e. RGBA red blue green alpha for the collection of pixels used to render an image transparently i.e. channel values . For example channel values may range for example from 255 to 0 which provides for opacity levels ranging from 100 75 50 25 or 0 . Techniques such as interpolated screen door and filtered transparency may be used to modify a z buffer algorithm to invoke transparency of an image thus producing an alpha value used to render a composite blended or layered image transparently. Techniques may also be performed for various types of image formats such as PNG JPEG and others. In other examples different transparency techniques may be used and are not limited to the examples provided above.

Here if icon is clicked on background panel may be rendered when foreground panel slides to a side and reveals a portion or all of background panel . In other examples panels i.e. foreground or background panels may be slid in different or opposing directions to reveal background panel . When presented background panel may present additional information about a cell phone selected from foreground panel . Here background panel may be rendered without modifying content i.e. cell phones A I rendered in foreground panel thus enabling comprehensive information to be viewed without opening additional windows display screens or other application interfaces providing a visually rich and comprehensive user experience. In other examples the above described techniques may be applied to any type of content or application where additional related or supplemental information is presented using background panel to enhance content in foreground panel . For example any type of website providing multiple hyperlinks links or iconic representations of links to other information may be presented using foreground panel and background panel . As another example when any of icons are selected background panel may be presented to provide the requested additional or supplemental information without removing or obscuring foreground panel . The number type and appearance of icons may be varied and is not limited in design appearance layout style or function to the examples provided. Further pull down menu may also be varied and is not limited in design appearance layout style or function to the examples provided.

Here background panel may be configured to present supplemental information related to information or data presented in foreground panel . For example when foreground panel slides aside to reveal background panel contextually relevant information or functions associated with the selection of one or more of cell phones A I may be presented. Information does not need to be contextually relevant and any information features functions or other data may be presented on background panel . Data such as pricing features series and other filtering criteria may be presented on background panel . In other examples the information or data presented in background panel may be implemented differently in design appearance content layout style format and the like. By presenting an additional panel for information and data without modifying content already presented in foreground panel a user may continue to interact with the same interface i.e. interface without the disruption of opening new or additional interfaces panels windows displays or screens. Further the above described features functions and elements shown may be implemented differently and are not limited to the examples provided.

When invoked icon may be transferred from foreground panel to background panel which also provides additional information that may or may not be contextually relevant to content displayed in foreground panel . For example selecting a shopping cart shaped icon i.e. icon may result in foreground panel sliding to reveal prices total amounts and other information for items selected. Information such as items in a shopping cart total grand total shipping and other user actions e.g. a button to Submit Order may also be presented and used. In other examples background panel may be used to present other information in different contexts and is not limited to the examples shown and described. For example foreground panel may present titles or abstracts of content articles and background when a title or abstract is selected presents the entire article possibly using a scroll bar to permit viewing the article when foreground panel slides aside. As another example background panel may present any type of additional or more detailed information for content presented in foreground panel .

As yet another example background panel may be used to provide additional information associated with cell phones A I shown in foreground panel . As another example background panel may be used to provide other information that may be associated with icons or functions selected from pull down menu bar . In still other examples different types of icons may be provided in foreground panel . When invoked different types of icons may invoke background panel to provide additional or supplemental information data or content on background panel . Interface and the elements shown and described may be varied in design function layout format style and other implementation details and are not limited to the above described examples.

When implemented background panel may be used to provide a desired color style pattern or other type of visual graphical audible or other type of media oriented appearance or skin. Further background panel may be implemented to not obscure already presented interface elements e.g. foreground panel icons pull down menu bar and others . Background panel may be configured to provide a different background color pattern style layout or skin for interface . Further background panel may also be implemented by using various types of visual effects such as fading from 0 opacity i.e. 100 transparency to 100 opacity i.e. 0 transparency thus allowing new skins backgrounds patterns styles colors fonts layouts or other visual effects to be implemented without switching to a different interface screen window or other type of display. In other examples interface background panel and the above described elements may be implemented differently and are not limited to the design function style layout or descriptions provided.

Here when icon is selected to transition from a Business Store view to a Personal Store view background panel may be transitioned to background panel . Icons may be used to invoke the desired transition from one pattern e.g. background panel to another pattern e.g. background panel without having to invoke or open another application window display screen foreground panel or other disruption to a current view or visual appearance.

In some examples any number of background panels e.g. background panel and others may be layered and implemented by changing the transparency i.e. the opacity of one or more desired background panels. In still other examples multiple i.e. two or more background panels may be implemented together by transitioning the desired background panels from 100 transparency to some degree i.e. anything greater than 100 transparency or 0 opacity of visibility. This may create alternative background patterns colors styles and palettes for customizing interface without having to open a new display window screen or panel in the same or separate application. The above described elements of interface may be varied in design implementation function layout and other features without restriction or limitation to the examples provided.

In some examples display parameters may include information such as guidelines restrictions limitations boundaries or any other type of data that may be used to determine how to render content on a display e.g. interface and others . Display parameters may provide as an example the color style layout or design features to be drawn on an interface. Display parameters may also include whether other media based effects should be included e.g. sound motion animation and others .

Here display parameters are determined based on the detected user input and information or data associated with foreground panel and background panel if any. In other words display parameters are used to determine how to render background panel with foreground panel including modifying the transparency i.e. opacity level or sliding of background panel from behind foreground panel as described above. After determining display parameters foreground panel and background panel are rendered in an interface . In some examples background panel may be rendered to appear when foreground panel slides to a side of interface for example. In other examples both foreground panel and background panel may slide in substantially opposite or different directions to reveal background panel . In still other examples background panel may be configured to appear by modifying a transparency level. Once rendered background panel may modify the appearance of an interface by changing the skin of interface or any other elements of an interface e.g. foreground panel background panel and the like . Further the above described process may be varied in design implementation and function and is not limited to the examples provided above.

According to some examples computer system performs specific operations by processor executing one or more sequences of one or more instructions stored in system memory . Such instructions may be read into system memory from another computer readable medium such as static storage device or disk drive . In some examples hard wired circuitry may be used in place of or in combination with software instructions for implementation.

The term computer readable medium refers to any medium that participates in providing instructions to processor for execution. Such a medium may take many forms including but not limited to non volatile media volatile media and transmission media. Non volatile media includes for example optical or magnetic disks such as disk drive . Volatile media includes dynamic memory such as system memory . Transmission media includes coaxial cables copper wire and fiber optics including wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infrared data communications.

Common forms of computer readable media includes for example floppy disk flexible disk hard disk magnetic tape any other magnetic medium CD ROM any other optical medium punch cards paper tape any other physical medium with patterns of holes RAM PROM EPROM FLASH EPROM any other memory chip or cartridge carrier wave or any other medium from which a computer can read.

In some examples execution of the sequences of instructions may be performed by a single computer system . According to some examples two or more computer systems coupled by communication link e.g. LAN PSTN or wireless network may perform the sequence of instructions in coordination with one another. Computer system may transmit and receive messages data and instructions including program i.e. application code through communication link and communication interface . Received program code may be executed by processor as it is received and or stored in disk drive or other non volatile storage for later execution.

The foregoing examples have been described in some detail for purposes of clarity of understanding but are not limited to the details provided. There are many alternative ways and techniques for implementation. The disclosed examples are illustrative and not restrictive.

