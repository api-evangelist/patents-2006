---

title: Single virtual client for multiple client access and equivalency
abstract: A single virtual image of client information centrally located at an always-on network location for maintaining equivalency among multiple user devices. The image can be accessed by the user devices when coming online to upload and receive changes in the client information. A mid-tier system can be employed as the always-on central location with which the user client machines can communicate to maintain the same set of client information. Services in support thereof include an ownership service for dynamic selection of a designated client machine to take ownership for performing the actions on one client machine and arbitration of duplicate requests, a notification service for allowing data sources to publish cache update instructions to a central place, a roaming service for allowing clients machines to share state with each other, and an encryption service for secure storage and communications of client information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07921189&OS=07921189&RS=07921189
owner: Microsoft Corporation
number: 07921189
owner_city: Redmond
owner_country: US
publication_date: 20061120
---
Users can have multiple computing devices with which to interact with data and programs in both online and offline modes. For example it is commonplace to have a desktop computer and one or more additional computing devices such as a portable computer and a mobile device e.g. cell phone with which to access network services. A problem however is that maintaining an equivalent set of client information on all the user devices becomes problematic. For example a user may conduct initial activity via a desktop computer and then leave on a business trip with a laptop computer that lacks the desired updated information and settings generated on the desktop computer. Moreover even if the user connects at a later time from a different location in most cases the information interacted with on the desktop computer remains unobtainable.

Similarly while on the business trip if the user performs data operations offline or online using the portable computer these operations may not be propagated to the user s desktop computer. Thus should the user want the same information on another user computing device typically the user is left to utilize some rudimentary technique e.g. manually to transfer data and settings to the desired device a time consuming and inefficient expenditure of user resources.

The following presents a simplified summary in order to provide a basic understanding of some aspects of the disclosed innovation. This summary is not an extensive overview and it is not intended to identify key critical elements or to delineate the scope thereof. Its sole purpose is to present some concepts in a simplified form as a prelude to the more detailed description that is presented later.

The subject innovation addresses client information equivalency among multiple computing devices of a single user by generating and maintaining a single virtual client image of client information at an always on network location accessible by the multiple user devices. In one implementation a mid tier system is employed as the always on central location with which the user s client machines or the back end data sources can communicate. In another implementation a back end system is employed as the central location for maintaining the client image and providing the services in support thereof.

Services can include an ownership also referred to as arbitration service for arbitrating between identical client requests and dynamically selecting a client machine to take ownership for performing the update actions to the image for one client machine a notification service for allowing data sources to publish cache update instructions to a central place and from which the instructions can be staged a roaming service for allowing clients machines to share state with each other while avoiding the complexities of a peer to peer replication topology and an encryption service for secure storage and communications of client information.

The client machines can perform CRUDQ create read update delete and query operations on the data sources and propagate the results of these operations to processes hosted on the clients e.g. an e mail program or word processing program through a process referred to as cross synchronization. The innovation addresses duplicate request problems associated with processes of a synchronization circuit e.g. an e mail program and e mail server that propagate the results of cross synchronization to all client machines which are part of that circuit. The selection of a designated machine via the ownership services avoids duplicate requests and potential conflicts created as a result of the separate synchronization circuits.

To the accomplishment of the foregoing and related ends certain illustrative aspects of the disclosed innovation are described herein in connection with the following description and the annexed drawings. These aspects are indicative however of but a few of the various ways in which the principles disclosed herein can be employed and is intended to include all such aspects and their equivalents. Other advantages and novel features will become apparent from the following detailed description when considered in conjunction with the drawings.

Disclosed herein is novel architecture for addressing conventional data update and synchronization problems between multiple computing devices e.g. desktop computer portable computer cellular phone and PDAs of a single user. The innovation creates a single virtual client image of client information e.g. data data operations device settings program settings and profiles from the multiple user devices and maintains e.g. creates and updates the image at a central always on network location e.g. a mid tier system that is accessible by the user devices.

The network or remote location hosts a set of services in support of for example coordinating image creation and maintenance client device selection secure communications error handling and propagation of an updated image to the client s that need the update once online. For example an ownership service provides for the dynamic selection of a designated client device which takes ownership for performing the actions on one client machine. The selection of a designated machine facilitates arbitration by avoiding duplicate requests and potential conflicts created as a result of the separate synchronization circuits. One example of a conventional cross synchronization circuit is an e mail server that provides e mail client update services to a large number of client devices. A change in one client gets propagated through the server to other selected clients as part of the cross synchronization process.

As described herein the client devices can perform create read update delete query CRUDQ operations for example on the data sources local and or remote and propagate the results of these operations as part of client information to other clients through the network location. In other words the network location e.g. a mid tier system functions as a router by routing client information between the various client devices the user may have in order to keep the client machines suitably updated and equivalent at substantially all times.

The innovation is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding thereof. It may be evident however that the innovation can be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to facilitate a description thereof.

Referring initially to the drawings illustrates a system that facilitates client management in accordance with a single virtual client image of the disclosed innovation. The system includes a services component of a remote location for providing coordination services for coordination of client information across multiple clients of a user. A storage component e.g. persisted datastore caching system is provided at the remote location for maintaining an image of the client information for access by the multiple clients . The image is editable in that as changes occur in one of the clients these changes can be propagated to the remaining online clients and those offline clients that eventually come online. Thus the user devices can store up to date client information associated with the work and or user activities performed on the other clients.

In one implementation the remote location is a mid tier system that provides always on access and services in support of single client image maintenance. In another implementation the remote location is part of a back end system remote from the mid tier or intermediate system s . In general the remote system can be a system with substantially always on also meaning always available capability that provides the up time for receiving client information maintaining the client image and propagating image information to the multiple clients of the user devices or machines .

The services component hosts a number of services in support of centralized image maintenance and client and data source management. For example a notification service is provided for receiving cache update instructions from the multiple clients associated with cached client information and from data sources not shown seeking information from the clients . An ownership service is provided for selection of one of the multiple clients to perform synchronization actions with the image. An encryption service is provided for generating and tracking an encryption key provided to the multiple clients for encrypting client data and providing other secure services.

The services component also provides a roaming service for sharing client state among the multiple clients . More specifically the roaming service propagates mapping of a temporary correlation identification ID to an entity ID EID on all machines thereby enabling look up of the mapping information on any given machine.

In general the system includes a centralized always on network location for hosting services for client machines and data sources. The services include but are not limited to notification ownership which provides arbitration encryption and roaming. The location can be a mid tier system and or a back end system that functions as a central router publisher to share information between multiple client machines or devices .

At client information is received at a remote location e.g. mid tier system from multiple client devices. In one implementation the client information is received one client at a time. At the received client information is aggregated at the remote location as a client information image that can be changed and updated as necessary to reflect changing client information in the client devices of the user. At changes to the image are managed at the remote location based on the client information received from the client devices. At the changes to the image are published to the clients when the clients are accessible or online .

Referring now to there is illustrated a diagram of services that can be provided by the services component for image maintenance. A notification service allows for data sources to publish cache update instructions to the remote location or central system .

An ownership service allows for the dynamic selection of a client machine to perform actions for example communicate changes to the central system. In other words the ownership service facilitates the selection of one client machine as the one designated to perform cross synchronization actions ID fix up or error fix up.

An encryption service at the service remote location allows for encrypting sensitive data on each of the client machines of the user. A key is generated and used for encryption centrally and is available on each of the client machines. The encryption service generates and tracks a key per user and thus every client machine of the user has access to the key. The key can be cached locally on the client machines and the cached image can be protected by a client machine specific key.

User sensitive data can be stored in the client system in a client datastore CDS . This data can be protected from access by other users including system administrators. One of the common scenarios where this feature is beneficial is a lost stolen laptop scenario. If a laptop with the CDS is lost the user sensitive data can be protected from unauthorized access including the local system administrator who may have access to the laptop . Encryption is transparent to the user wherein the user does not have to manually enter or manage any keys. Additionally there is a backup mechanism for re creating the key in case the key is lost from a client machine. This scheme stores the encryption key in the central system e.g. mid tier . The encryption key can encrypt data in the CDS using for example a symmetric algorithm such as AES advanced encryption standard . When the CDS is deployed on a client machine the encryption key can be retrieved from the central system. A central system encryption key web service can be provided to retrieve the key.

The key in the central system can be stored as binary data along with the associated user ID. When an encryption key is requested the central system checks its encryption key table for the existence of a key for the caller user ID. If the key is present it is returned otherwise a new key is created. Once the encryption key is retrieved from the central system the CDS stores the encryption key in the local database after encrypting it using for example DPAPI data protection application programming interface .

Encrypting the key using DPAPI in user mode on the client machine ensures that no one other than the user will be able to access the key and hence decrypt the data including the local system administrator . In addition by using encryption user password changes will not affect key decryption. Using the key from the central system the user can easily decrypt data from one client machine on a different client machine. Since the key is stored on the central system the key can also be later retrieved by the user from the central system as a means of backup.

Another implementation generates a seed that is stored in a central system database. In this scheme the central system supplies a seed for the encryption key rather than the key itself The client machines generate the key from the seed via user specific information. Keys generated on two machines with the same seed for the same user will be the same. Since the central system does not store the key the central system administrator does not have direct access to the encryption key.

In yet another implementation the key is password protected and stored in the central system database. In this scheme the encryption key is created on the first client machine when the client cannot get a stored key from the central system. The new key is password protected e.g. using the user s login password or a key derived from the password and stored on the central system. On the client machine password changes can be monitored. When the password changes the central system key is updated after encrypting the original key stored locally and protected with DPAPI with the new password. Once the CDS retrieves the key it can be stored in the local database after encryption with DPAPI. Since the key stored on the central system is encrypted the system administrator will not have access to the key.

In still another implementation the CDS database files are encrypted with an operating system encrypting file system. Here the CDS does not need to manage the keys since the encryption is done by the operating system. Such encrypted files can be configured to deny access to local administrators.

Other encryption alternatives include full data encryption e.g. in varbinary partial data encryption in XML extensible markup language and data encryption with promoted properties. In the XML approach data is stored in XML and only the data that is marked for encryption will be encrypted in XML. Unencrypted data can be queried using XQuery.

A roaming service allows clients machines to share state with each other while avoiding the complexities of a peer to peer replication topology. Information roamed can include ID mapping tables business error information cache update instructions encryption key and ownership information. Other services can also be provided as desired such as for mid tier operations when the services component is operated from a mid tier system or a back end location where on a back end server.

The storage component can be located at the same location as the services component or at a location remote therefrom. For example in a distribute database system it is to be understood that the storage component can include cached and or persisted data that spans several locations and the client information image can also be distributed accordingly.

In one implementation the application system can include a back end server system that serves up back end services for an enterprise for example and which the data source provides enterprise data storage. Note that the data source can be a cache system rather than a persisted data system or a combination of persisted and cached subsystems for data handling suitable for the particular implementation.

In an alternative implementation the application system can include a line of business LOB application system for addressing business applications e.g. human resources sales and operations customer relations financials and product design of a company and the data source stores and or persists LOB data for access.

With the ubiquity of computing devices available to users a user can utilize different client devices to access and effect data operations and or application functionality thereby potentially causing each of the user devices to store different versions of data for example and or application system settings also included as part of the client information and so on. In other words the client systems can include programs that facilitate user access to the applications of the application system and or data of data source via the mid tier system download the data to a user client operate on the data and then upload the changed data back to the data source .

However a problem can arise in data synchronization when the client goes offline and changes are made to a client data entity that should be tracked and eventually reconciled to the central image for synchronization to the other client systems . This problem is solved herein by using temporary correlation IDs CIDs . A temporary CID allows the correlation of data operations on the same entity until the real entity ID EID is available by the client moving to an online state and communicating with the data source e.g. data source . A temporary CID maps to only one machine of the client devices and further to only one entity instance on the machine. In other words one offline machine can have ongoing data operations on multiple entity instances where each entity instance is assigned a different unique temporary CID for eventual mapping to the EID and relating of the corresponding data operations performed on the entity instance.

As before the storage component maintains the image of the client information. Additionally in support of resolving at least the offline client scenario the storage component includes a master identity table that maps CIDs to EIDs. The mid tier system is used as an always on router or a read only publisher that maintains the master table . The mapping of the CID to the EID is tracked until such time e.g. the client device going online the references to the CID can be replaced by the EID in the desired data source e.g. data source .

The CID can also be embedded in objects hosted on clients such as an e mail program or a word processing application. Hence the CID can reach a machine different from the original machine where the CID was created by virtue of the fact that these client processes have independent synchronization circuits.

Roaming services provide the CID to EID mapping on all machines to enable lookup hence fix up of the mapping on every machine supporting the single virtual client image . Roaming is achieved by modeling a client machine as a subscriber that can update its owned rows in the master CID EID table . Since one CID is unique to only one machine only that machine can perform the insert update of a given row in the master table thereby preventing a conflicting update situation.

As illustrated each of the clients can include client application or programs and program datastores a client datastore CDS and a client CID EID mapping table. For example a first client denoted CLIENT and which e.g. can be a desktop computing system can include a programs and program datastore component where the programs can associate data internally rather than store the data independently on a first client datastore denoted CDS . The first client datastore of first client can be a cache storage system a persisted storage system e.g. a mass storage subsystem or a suitable combination of both that supports maintenance of the single virtual image of client information at the mid tier system . A first client CID EID mapping table tracks offline operations using one or more of the CIDs for one or more corresponding entity data operations until the first client goes back online and a synchronization process can occur to update the master table the image and potentially the data source . Note that this can also include updating the first client CDS based on other data operations of the other clients.

Similarly a second client denoted CLIENT and which e.g. can be a portable computing system can include a programs and program datastore component where the programs can associate data internally rather than store the data independently on a second client datastore denoted CDS . The second client datastore of second client can be a cache storage system a persisted storage system e.g. a mass storage subsystem or a suitable combination of both that supports maintenance of the single virtual image of client information at the mid tier system . A second client CID EID mapping table tracks offline operations using one or more of the CIDs for one or more corresponding entity data operations until the second client goes back online and a synchronization process can occur to update the master table the image and potentially the data source . Note that this can also include updating the second client CDS based on other data operations of the other clients.

Finally a third client denoted CLIENT and which e.g. can be a cellular telephone device can include a programs and program datastore component where the programs can associate data internally rather than store the data independently on a third client datastore denoted CDS . The third client datastore of third client can be a cache storage system a persisted storage system e.g. a mass storage subsystem or a suitable combination of both that supports maintenance of the single virtual image of client information at the mid tier system . A third client CID EID mapping table tracks offline operations using one or more of the CIDs for one or more corresponding entity data operations until the third client goes back online and a synchronization process can occur to update the master table the image and potentially the data source . Note that this can also include updating the third client CDS based on other data operations of the other clients.

An encryption key is provided for encrypting data e.g. sensitive on each of the client machines . The key can be generated centrally by the mid tier or central system used for encryption centrally and provided for each of the client machines . The encryption service of provides encryption at the mid tier system for generating and tracking a key per user. Accordingly every client machine of a single user has access to the key. The key can be cached locally on the client machines and the cached image in the cache of the CDS can be protected by a machine specific key.

Performing CRUDQ operations may lead to errors which are reported and tracked on the client machine that issues the operation. By roaming this error information using the mid tier system as an always on router or a read only publisher and the client machines as subscribers which update the local client information the visualization and possible fix up of the errors can be enabled on the client machines thereby further supporting the single virtual client image .

As indicated supra an ownership service service of of the mid tier services component facilitates enabling the dynamic selection of one of the client machines as designated to perform cross synchronization actions ID fix up and or error fix up for example. The ownership service can be exposed as a web service with an interface that passes an action ID for ownership processing. Ownership can accept or process one or more of four parameters an operation ID that indicates the type of data operation for which ownership is being requested e.g. error fix up an item ID of the item or entity on which the data operation is being performed e.g. EID version timestamp data for the version timestamp associated with the item or entity on which the data operation is being performed and a client or machine ID which uniquely identifies the machine or client for ownership. Ownership is granted to a machine client for a given combination of Operation ID Item ID version timestamp data. For example the action ID can comprise an EID and view instance for cross synchronization actions a machine name and operation ID for business error fix up and or the CID EID fix up.

If no other client machine has ownership the requestor is granted ownership with a time limit to perform the action. The ownership assignment is dynamic thus preserving the equivalence of all client machines . The ownership information tracked at the mid tier system can be roamed and or cached that is roamed to the client machines to prevent redundant requests to the mid tier system via arbitration should the scenario occur and or created on demand cached when requesting ownership.

In one implementation the ownership information can be used to detect if a client machine that took ownership has failed to process the action in a timely manner e.g. due to an offline action such as shutdown hardware failure and purposeful disconnection . Alternatively this can be accomplished manually. The algorithm can notify the user of this condition e.g. a change not submitted because of stale ownership and then let the user act on it. One exemplary act will be to update the item to a new version e.g. a new timestamp in which case a new ownership for the item can occur and the item can be submitted. Ownership is granted based on the operation ID item ID timestamp combination for a given machine or client ID. A different combination will grant a different ownership.

The client machines cache view instance data in the respective client CDSs and on direct usage of the data or based on a result of scheduled cache updates. However the external data sources e.g. data source can choose to alert the client machines and request updates using provided cache update instructions e.g. add to cache update cache remove from cache . These requests can be staged in the mid tier system and use the roaming services to broadcast the cache update instructions to all client machines of the user for whom the instructions were intended thereby maintaining the single virtual client image . This can be achieved by modeling the client machines as read only subscribers with the mid tier system serving as the publisher. In one implementation the publisher subscriber behavior can be provided utilizing a SQL structured query language server merge replication technology.

Here the datastore includes a first entity set which comprises a first entity denoted ENTITY one or more entity views denoted VIEW . . . VIEW where T is a positive integer for this first entity and a first entity ID denoted EID for identification of the first entity. Similarly the datastore includes a second entity set which comprises a second entity denoted ENTITY one or more entity views denoted VIEW . . . VIEW where U is a positive integer for this second entity and a second entity ID denoted EID for identification of the second entity. As indicated the model can include many different entities. Thus the datastore includes an Nth entity set which comprises a Nth entity denoted ENTITY one or more entity views denoted VIEW . . . VIEW for this Nth entity and an Nth entity ID denoted EID for identification of the Nth entity where N and V are positive integers.

If the entity is created or changed offline in a client machine then the EID may not be available to the remote data source e.g. data source of to readily update the desired entity table thereof. Accordingly the temporary CID is employed to relate the operations on the entity until the real data source system e.g. data source is accessible and the real data source tables of data source can be updated.

The second client mapping table includes an offline data operation associated with an entity instance denoted ENTITY and corresponding temporary CID CID . Accordingly a second master table entry for the second client represents a relationship between a second temporary CID denoted CID that correlates to a second entity instance having a second entity ID denoted EID associated with information being operated on when the second client is offline . The second table entry can include additional client information such as the machine information denoted MACHINE that includes the client machine name for example.

The first client mapping table also includes an offline data operation associated with an entity instance denoted ENTITY and corresponding temporary CID CID . Accordingly a third master table entry for the first client represents a relationship between the third temporary CID denoted CID that correlates to a third entity instance or second entity instance of the first client having a third entity ID denoted EID associated with information being operated on when the first client is offline . The third table entry can also include the machine information denoted MACHINE of the first client machine .

The third client mapping table includes an offline data operation associated with an entity instance denoted ENTITY and corresponding temporary CID CID . Accordingly a fourth master table entry for the third client represents a relationship between a fourth temporary CID denoted CID that correlates to a fourth entity instance or first entity instance of the third client having a fourth entity ID denoted EID associated with information being operated on when the third client is offline . The fourth table entry can include additional client information such as the machine information denoted MACHINE that includes the client machine name for example.

As indicated previously each machine is associated with unique temporary CIDs that are generated by the client during offline use. The CIDs relate data operations on client entity instances to the data source e.g. data source of when the machine comes back online. Only the client machine assigned to the corresponding master table entry can update that table entry using the CID EID mapping. More specifically only the first client is allowed access to the master table entries and associated with the first client CIDs CIDand CID . Similarly only the second client is allowed access to the master table entry associated with the second client CID CID . Lastly only the third client is allowed access to the master table entry associated with the third client CID CID .

This embedded data capability is addressed by the disclosed architecture using the ownership service . The user can work with business data that is coming from an LOB system or back end application for example in the same way that the e mail program does while also allowing the business data to be presented inside the e mail program interface by embedding the business data inside the e mail program items.

A side effect can be that since the data can be embedded inside the e mail program items the data that gets embedded can actually be passed to another user machine and associated embedded data application through the server . If managed incorrectly the mid tier system can receive duplicate requests for actions that the user executed on one user machine e.g. the first client . For example consider contact information in an e mail program that has been extended with business data for a customer. Then there exists the contact information in the e mail program and the embedded customer data. The customer data is left in the e mail program and e mail server as well. The e mail server e.g. server can make the customer data available to the application of the second machine for the same user.

If the user makes changes to the e mail item and the customer data via one user machine e.g. machine the change will be automatically replicated by the e mail server to the other client machine that runs the same e mail program e.g. application . The clients and will then try to push the changes to the LOB system . Thus the LOB system will receive two requests for the same change. The ownership service of the services component in the mid tier system arbitrates this duplicate request problem by allowing only one client or to make the changes to the LOB system . Accordingly the disclosed architecture is capable of recognizing that only one of the clients or should be allowed to submit the change. It does not matter which client is selected as long as only one client is allowed. The storage component will then receive the intended changes for processing to the image of client information. The same can occur in reverse. When the LOB information changes and it is required to change the original item e.g. contact information in the email program that is related to a customer in the LOB system in this case ownership can be used to ensure that only one machine client is allowed to propagate the changes from the LOB system to the original item.

At the mapping table information is roamed to track CID EID mappings enable client CID EID mapping tables to access the mapping tables on other client machines and eventually replace the CIDs with the corresponding EIDs. At business error information is roamed to facilitate the reporting and tracking of errors on a client machine issuing the operation. At cache update instructions are roamed. In other words these instructions can be staged at the central location e.g. the mid tier system and published to the intended clients in support of maintaining the single client image. At encryption key information is roamed. In other words a key is generated centrally for each user or set of user machines for encryption of client information on the clients. At ownership information is roamed that facilitates dynamic selection of one of the client machines for cross synchronization processing ID fix up and error fix up for example.

Referring now to there is illustrated a methodology of processing ownership for client synchronization. Generally ownership can be requested for certain actions using an action ID which typically includes a version or timestamp . Although described in the context of an update data operation it is to be understood that this applies to other data operations as well. Additionally data operations on the same view instance can be performed successively such that the second request operates on a different later version of the view instance than the first request. In other words ownership will first be applied to the first request and then applied to the second request. If the requests are not directed to the same view instance then the data operations can be performed concurrently such that ownership can be assigned to the different requests at the same time.

At the ownership service is initiated. At an update data operation request to the central image or a portion thereof is received from a client. The request includes an action ID unique to the client and that identifies the data operation requested to be performed. At the system checks if based on that ID ownership can be granted. If so flow is to where ownership is granted with a time limit to complete the data operation and subsequent requests are rejected. If at ownership has been assigned flow is to to reject subsequent ownership for the ID. Flow can then be back to to process the next request.

From the client side the client can monitor the process for a timeout. In other words if the request initiated by the client has not been processed in a predetermined amount of time a timeout occurs and the client user is alerted that the action requested has not been processed. The user can then manually address the cause of the timeout.

The ownership information can be tracked at the mid tier system with success or failure information being returned. The ownership information is also roamed to the other clients to prevent redundant requests to the mid tier and to detect if a machine that took ownership has failed to process the action in a timely manner due to shutdown hardware failure etc. If a timeout occurs the user can be alerted on another machine.

As used in this application the terms component and system are intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component can be but is not limited to being a process running on a processor a processor a hard disk drive multiple storage drives of optical and or magnetic storage medium an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a server and the server can be a component. One or more components can reside within a process and or thread of execution and a component can be localized on one computer and or distributed between two or more computers.

Referring now to there is illustrated a block diagram of a client computing system operable to process client information between the single virtual image of the disclosed architecture. In order to provide additional context for various aspects thereof and the following discussion are intended to provide a brief general description of a suitable computing system in which the various aspects of the innovation can be implemented. While the description above is in the general context of computer executable instructions that may run on one or more computers those skilled in the art will recognize that the innovation also can be implemented in combination with other program modules and or as a combination of hardware and software.

Generally program modules include routines programs components data structures etc. that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the inventive methods can be practiced with other computer system configurations including single processor or multiprocessor computer systems minicomputers mainframe computers as well as personal computers hand held computing devices microprocessor based or programmable consumer electronics and the like each of which can be operatively coupled to one or more associated devices.

The illustrated aspects of the innovation may also be practiced in distributed computing environments where certain tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules can be located in both local and remote memory storage devices.

A computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by the computer and includes volatile and non volatile media removable and non removable media. By way of example and not limitation computer readable media can comprise computer storage media and communication media. Computer storage media includes both volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital video disk DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer.

The computing system can host the single client image and the supporting services as described above. The computing system can also represent a client computing device such as a desktop computer or portable computer for example.

With reference again to the exemplary computing system for implementing various aspects includes a computer the computer including a processing unit a system memory and a system bus . The system bus provides an interface for system components including but not limited to the system memory to the processing unit . The processing unit can be any of various commercially available processors. Dual microprocessors and other multi processor architectures may also be employed as the processing unit .

The system bus can be any of several types of bus structure that may further interconnect to a memory bus with or without a memory controller a peripheral bus and a local bus using any of a variety of commercially available bus architectures. The system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS is stored in a non volatile memory such as ROM EPROM EEPROM which BIOS contains the basic routines that help to transfer information between elements within the computer such as during start up. The RAM can also include a high speed RAM such as static RAM for caching data.

The computer further includes an internal hard disk drive HDD e.g. EIDE SATA which internal hard disk drive may also be configured for external use in a suitable chassis not shown a magnetic floppy disk drive FDD e.g. to read from or write to a removable diskette and an optical disk drive e.g. reading a CD ROM disk or to read from or write to other high capacity optical media such as the DVD . The hard disk drive magnetic disk drive and optical disk drive can be connected to the system bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The interface for external drive implementations includes at least one or both of Universal Serial Bus USB and IEEE 1394 interface technologies. Other external drive connection technologies are within contemplation of the subject innovation.

The drives and their associated computer readable media provide nonvolatile storage of data data structures computer executable instructions and so forth. For the computer the drives and media accommodate the storage of any data in a suitable digital format. Although the description of computer readable media above refers to a HDD a removable magnetic diskette and a removable optical media such as a CD or DVD it should be appreciated by those skilled in the art that other types of media which are readable by a computer such as zip drives magnetic cassettes flash memory cards cartridges and the like may also be used in the exemplary operating environment and further that any such media may contain computer executable instructions for performing the methods of the disclosed innovation.

A number of program modules can be stored in the drives and RAM including an operating system one or more application programs other program modules and program data . When a client machine these modules can include the client tables client programs for interacting with the services at the central location and so on. When the centrally located server these modules can include the services in support of the single client image the image itself and master table for example. All or portions of the operating system applications modules and or data can also be cached in the RAM . It is to be appreciated that the innovation can be implemented with various commercially available operating systems or combinations of operating systems.

A user can enter commands and information into the computer through one or more wired wireless input devices for example a keyboard and a pointing device such as a mouse . Other input devices not shown may include a microphone an IR remote control a joystick a game pad a stylus pen touch screen or the like. These and other input devices are often connected to the processing unit through an input device interface that is coupled to the system bus but can be connected by other interfaces such as a parallel port an IEEE 1394 serial port a game port a USB port an IR interface etc.

A monitor or other type of display device is also connected to the system bus via an interface such as a video adapter . In addition to the monitor a computer typically includes other peripheral output devices not shown such as speakers printers etc.

The computer may operate in a networked environment using logical connections via wired and or wireless communications to one or more remote computers such as a remote computer s . The remote computer s can be a workstation a server computer a router a personal computer portable computer microprocessor based entertainment appliance a peer device or other common network node and typically includes many or all of the elements described relative to the computer although for purposes of brevity only a memory storage device is illustrated. The logical connections depicted include wired wireless connectivity to a local area network LAN and or larger networks for example a wide area network WAN . Such LAN and WAN networking environments are commonplace in offices and companies and facilitate enterprise wide computer networks such as intranets all of which may connect to a global communications network for example the Internet.

When used in a LAN networking environment the computer is connected to the local network through a wired and or wireless communication network interface or adapter . The adaptor may facilitate wired or wireless communication to the LAN which may also include a wireless access point disposed thereon for communicating with the wireless adaptor .

When used in a WAN networking environment the computer can include a modem or is connected to a communications server on the WAN or has other means for establishing communications over the WAN such as by way of the Internet. The modem which can be internal or external and a wired or wireless device is connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the computer or portions thereof can be stored in the remote memory storage device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers can be used.

The computer is operable to communicate with any wireless devices or entities operatively disposed in wireless communication for example a printer scanner desktop and or portable computer portable data assistant communications satellite any piece of equipment or location associated with a wirelessly detectable tag e.g. a kiosk news stand restroom and telephone. This includes at least Wi Fi and Bluetooth wireless technologies. Thus the communication can be a predefined structure as with a conventional network or simply an ad hoc communication between at least two devices.

Referring now to there is illustrated a schematic block diagram of an exemplary computing environment for hosting the single virtual client image and providing services for the support of maintaining the image. The system includes one or more client s which can be hardware and or software e.g. threads processes computing devices . The clients can be multiple computing devices of a single user for which the user desired to be equivalent by having the same set of information stored thereon. The client s can house cookie s and or associated contextual information by employing the subject innovation for example.

The system also includes one or more server s which can also be hardware and or software e.g. threads processes computing devices . One of the servers can be a mid tier system that stores the single client image of client information and provides the services in support of maintaining the image. Another server can be a back end or LOB system which a user accesses via the multiple user computing devices. The servers can house threads to perform transformations by employing the architecture for example. One possible communication between a client and a server can be in the form of a data packet adapted to be transmitted between two or more computer processes. The data packet may include a cookie and or associated contextual information for example. The system includes a communication framework e.g. a global communication network such as the Internet that can be employed to facilitate communications between the client s and the server s .

Communications can be facilitated via a wired including optical fiber and or wireless technology. The client s are operatively connected to one or more client datastore s that can be employed to store information local to the client s e.g. cookie s and or associated contextual information . Similarly the server s are operatively connected to one or more server datastore s that can be employed to store information local to the servers .

What has been described above includes examples of the disclosed innovation. It is of course not possible to describe every conceivable combination of components and or methodologies but one of ordinary skill in the art may recognize that many further combinations and permutations are possible. Accordingly the innovation is intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims. Furthermore to the extent that the term includes is used in either the detailed description or the claims such term is intended to be inclusive in a manner similar to the term comprising as comprising is interpreted when employed as a transitional word in a claim.

