---

title: Method and apparatus for persistent object tool
abstract: A method and an apparatus that execute executable codes to install a persistent object from a storage into an application server to access remote services in an EIS are described. The executable codes are based on relational properties for mapping an API (Application Programming Interface) function of an EIS to an object of a cross-platform connection framework coupling the EIS with the application server. The application server is enabled to access the API function of the EIS via the persistent object as part of the cross-platform connection framework.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08438535&OS=08438535&RS=08438535
owner: SAP AG
number: 08438535
owner_city: Walldorf
owner_country: DE
publication_date: 20061204
---
A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The present invention relates generally to enterprise computing. More particularly this invention relates to a persistent object tool for mapping remote functions.

More and more businesses move to an e business strategy to integrate their application servers with existing heterogeneous EISs Enterprise Information System . Recent advancements have provided unified architectures for components in an application server to access resources in an EIS. The J2EE Java 2 Platform Enterprise Edition Connector Architecture JCA is one such example. Usually a software driver such as SAP JRA Java Resource Adaptor can be plugged into the unified architecture to support the underlying EIS services such as SAP ABAP Advanced Business Application Programming functions. Various services such as databases enterprise business applications and messaging etc. can be made available through a unified architecture based on different software drivers.

Typically an application server uses access objects with a unified architecture to call remote functions in an EIS plugged in the unified architecture attached to the application server. Often times software codes are executed in the application server to implement the access objects. Additionally special objects may be required to map remote function parameters between the application server and the EIS.

However the design and coding tasks may become burdensome when complicated data structures are involved to access EIS services from an application server through a unified architecture. Nested table structures from a remote function call are such examples. Coding in such a case is error prone and time consuming.

Embodiments of the present invention include a method and apparatus that execute executable codes to install a persistent object from a storage into an application server to access remote services in an EIS. The executable codes are based on relational properties for mapping an API Application Programming Interface function of an EIS to an object of a cross platform connection framework coupling the EIS with the application server. The application server is enabled to access the API function of the EIS via the persistent object as part of the cross platform connection framework.

Other features of the present invention will be apparent from the accompanying drawings and from the detailed description that follows.

A method and an apparatus for a persistent object tool for an application server to access an API function in an EIS through a persistent object are described herein. In the following description numerous specific details are set forth to provide thorough explanation of embodiments of the present invention. It will be apparent however to one skilled in the art that embodiments of the present invention may be practiced without these specific details. In other instances well known components structures and techniques have not been shown in detail in order not to obscure the understanding of this description.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment can be included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification do not necessarily all refer to the same embodiment.

The processes depicted in the figures that follow are performed by processing logic that comprises hardware e.g. circuitry dedicated logic etc. software such as is run on a general purpose computer system or a dedicated machine or a combination of both. Although the processes are described below in terms of some sequential operations it should be appreciated that some of the operations described may be performed in different order. Moreover some operations may be performed in parallel rather than sequentially.

According to one embodiment the processing logic configures mapping relationships at block for accessing data from an EIS. A mapping relationship may define a correspondence between an attribute of an object and an element field of a function parameter. In one embodiment the object is a Java compatible object. In one embodiment the object is an SAP JCO Java Connector object. In one embodiment the function is an API function provided by an EIS. In one embodiment the function is an SAP ABAP Advanced Business Application Programming function. The function parameter may be an input and or output parameter of the corresponding function. In one embodiment an input output parameter of an API function includes a table. In another embodiment an input output parameter of an API function includes a data structure. In one embodiment a mapping relationship may connect one object with another object based on a function parameter of an API function.

At block according to one embodiment the processing logic generates a set of persistent objects a set of relational properties and or a set of executable codes based on the mapping relationships configured at block . The generated persistent objects may be stored in an external storage such as a file or a database. In one embodiment a generated persistent object is a POJO Plain Old Java Object . The generated persistent object may correspond to a table or a data structure of an API function in an EIS. In one embodiment a generated persistent object corresponds to a structure of an API function in an EIS. The generated relational properties may be stored as a text file or a binary file. In one embodiment a generated relational property is a mapping from a Java attribute to a field in a table or structure. The table or structure may represent APIs of an enterprise backend system. In one embodiment the generated executable codes are based on Java. The generate executable codes may be based on Java DAO Data Access Object .

At block according to one embodiment the processing logic executes the generated executable codes in an application server. The processing logic may install the generated persistent objects into an application server by reading the generated persistent objects from an external storage during the code execution at block . In one embodiment the processing logic reads the relational properties into the application server during the code execution at block . The executable codes may have file path information to locate both the generated persistent objects and relational properties. In one embodiment the generated executable codes the generated persistent objects and or the generated relational properties are stored in separate files under a directory in an application server.

At block according to one embodiment the processing logic retrieves data from the EIS into the application server through the generated persistent objects. In one embodiment the data is based on a table in the EIS. In another embodiment the data is based on a structure in the EIS. The data may correspond to a parameter of an API function in the EIS. In one embodiment the processing logic may convert between a persistent object and another business application object in an application server to retrieve the data. The business application object may be an object compatible with an enterprise application server.

In one embodiment a code generation service module receives configuration parameters from a user interface module . A configuration parameter may be a mapping relationship different types of data. In one embodiment the configuration parameters include a code output path name a Java package name and a function list. The configuration parameters may specify user and system information such as user name password and connection settings. In one embodiment the code generation service module depends on the services from platform libraries in the application server based on the configuration parameters. A platform library may be a Java runtime library.

In one embodiment the code generation service generates persistent objects executable codes and relation properties that are stored in the storage . The storage may be a database or a set of files connected with the application server locally or remotely. In one embodiment a object installation module retrieves executable codes from the storage and executes the codes to create application objects and install persistent objects in the application server . The execution module may be associated with a batch file that includes script codes. An application object may be associated with the relationship properties from the storage . In one embodiment an application object converts a persistent object to a business application object based on platform libraries . In one embodiment the application object executes a business function in platform libraries corresponding to an API function in an EIS connected with the application server through the persistent objects . Note that some or all of the components as shown in may be implemented in software hardware or a combination of both.

During the time period according to one embodiment exampleDAO activates an API function in the EIS through Connection . Connection may provide a JCO function corresponding to the API function. In one embodiment during the time period DAOHelp converts a persistent object to a JCO type object. A JCO type object may be a JCO table or a JCO structure. A JCO type object may be associated with input output parameters of the API function. After calling the API function through exampleDAO according to one embodiment DAOHelp converts a JCO object to a persistent object during the time period . Actor may retrieve the persistent object including the data from the EIS according to the API function.

As shown in the computer system which is a type of a data processing system includes a bus which is coupled to a microprocessor s and a ROM Read Only Memory and volatile RAM and a non volatile memory . The microprocessor may retrieve the instructions from the memories and execute the instructions to perform operations described above. The bus interconnects these various components together and also interconnects these components and to a display controller and display device and to peripheral devices such as input output I O devices which may be mice keyboards modems network interfaces printers and other devices which are well known in the art. Typically the input output devices are coupled to the system through input output controllers . The volatile RAM Random Access Memory is typically implemented as dynamic RAM DRAM which requires power continually in order to refresh or maintain the data in the memory.

The mass storage is typically a magnetic hard drive or a magnetic optical drive or an optical drive or a DVD RAM or other types of memory systems which maintain data e.g. large amounts of data even after power is removed from the system. Typically the mass storage will also be a random access memory although this is not required. While shows that the mass storage is a local device coupled directly to the rest of the components in the data processing system it will be appreciated that the present invention may utilize a non volatile memory which is remote from the system such as a network storage device which is coupled to the data processing system through a network interface such as a modem or Ethernet interface. The bus may include one or more buses connected to each other through various bridges controllers and or adapters as is well known in the art.

Portions of what was described above may be implemented with logic circuitry such as a dedicated logic circuit or with a microcontroller or other form of processing core that executes program code instructions. Thus processes taught by the discussion above may be performed with program code such as machine executable instructions that cause a machine that executes these instructions to perform certain functions. In this context a machine may be a machine that converts intermediate form or abstract instructions into processor specific instructions e.g. an abstract execution environment such as a virtual machine e.g. a Java Virtual Machine an interpreter a Common Language Runtime a high level language virtual machine etc. and or electronic circuitry disposed on a semiconductor chip e.g. logic circuitry implemented with transistors designed to execute instructions such as a general purpose processor and or a special purpose processor. Processes taught by the discussion above may also be performed by in the alternative to a machine or in combination with a machine electronic circuitry designed to perform the processes or a portion thereof without the execution of program code.

It is believed that processes taught by the discussion above may also be described in source level program code in various object orientated or non object orientated computer programming languages e.g. Java C VB Python C C J APL Cobol ABAP Fortran Pascal Perl etc. supported by various software development frameworks e.g. .NET available from Microsoft Corporation Mono Java Fusion available from Oracle Corporation etc. . The source level program code may be converted into an intermediate form of program code such as Java byte code Microsoft Intermediate Language etc. that is understandable to an abstract execution environment e.g. a Java Virtual Machine a Common Language Runtime a high level language virtual machine an interpreter etc. or a more specific form of program code that is targeted for a specific processor.

An article of manufacture may be used to store program code. An article of manufacture that stores program code may be embodied as but is not limited to one or more memories e.g. one or more flash memories random access memories static dynamic or other optical disks CD ROMs DVD ROMs EPROMs EEPROMs magnetic or optical cards or other type of machine readable media suitable for storing electronic instructions. Program code may also be downloaded from a remote computer e.g. a server to a requesting computer e.g. a client by way of data signals embodied in a propagation medium e.g. via a communication link e.g. a network connection .

The preceding detailed descriptions are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the tools used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be kept in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

In addition the operations described above may be performed by an apparatus. This apparatus may be specially constructed for the required purpose or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions and each coupled to a computer system bus.

The processes and displays presented herein are not specifically related to a particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct a more specialized apparatus to perform the operations described. The required structure for a variety of these systems will be evident from the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

The foregoing discussion merely describes some exemplary embodiments of the present invention. One skilled in the art will readily recognize from such discussion the accompanying drawings and the claims that various modifications can be made without departing from the scope of the invention.

