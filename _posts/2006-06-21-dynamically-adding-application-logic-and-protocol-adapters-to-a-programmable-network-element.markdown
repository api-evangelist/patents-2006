---

title: Dynamically adding application logic and protocol adapters to a programmable network element
abstract: Custom or user-defined application program extensions may be loaded into a network infrastructure element such as a router or switch without restarting the device. For example, a network element has program extensibility logic operable for receiving one or more user program extensions that comprise logic operable to interface with the application program and perform message processing functions or protocol processing functions that are not in the application program; installing the one or more user program extensions without restarting the apparatus; receiving one or more packets representing an application message; selecting a particular one of the user program extensions based on a protocol associated with the message; loading the particular one of the user program extensions; executing business logic of the application program associated with the received message; and invoking a function of the particular one of the user program extensions in response to a call in the business logic.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07840700&OS=07840700&RS=07840700
owner: Cisco Technology, Inc.
number: 07840700
owner_city: San Jose
owner_country: US
publication_date: 20060621
---
This application claims the benefit under 35 U.S.C. 119 e of provisional Application No. 60 692 715 filed Jun. 21 2005 the entire contents of which are hereby incorporated by reference for all purposes as if fully set forth herein.

This application is related to U.S. patent application Ser. No. 11 043 857 filed Jan. 25 2005 entitled APPLICATION LAYER MESSAGE BASED SERVER FAILOVER MANAGEMENT BY A NETWORK ELEMENT by Sunil Potti et al. U.S. patent application Ser. No. 10 991 792 entitled PERFORMING MESSAGE AND TRANSFORMATION ADAPTER FUNCTIONS IN A NETWORK ELEMENT ON BEHALF OF AN APPLICATION by Pravin Singhal et al. filed on Nov. 17 2004 U.S. patent application Ser. No. 10 997 616 entitled CACHING CONTENT AND STATE DATA AT A NETWORK ELEMENT by Alex Yiu Man Chan et al. filed on Nov. 23 2004 U.S. patent application Ser. No. 11 005 978 entitled PERFORMING MESSAGE PAYLOAD PROCESSING FUNCTIONS IN A NETWORK ELEMENT ON BEHALF OF AN APPLICATION by Tefcros Anthias et al. filed on Dec. 6 2004 U.S. patent application Ser. No. 11 007 421 entitled PERFORMING SECURITY FUNCTIONS ON A MESSAGE PAYLOAD IN A NETWORK ELEMENT by Sandeep Kumar et al. filed on Dec. 7 2004 U.S. patent application Ser. No. 11 007 152 entitled NETWORK AND APPLICATION ATTACK PROTECTION BASED ON APPLICATION LAYER MESSAGE INSPECTION by Sandeep Kumar et al. filed on Dec. 7 2004 U.S. patent application Ser. No. 11 009 127 entitled REDUCING THE SIZES OF APPLICATION LAYER MESSAGES IN A NETWORK ELEMENT by Ricky Ho et al. filed on Dec. 10 2004 U.S. patent application Ser. No. 11 009 270 entitled GUARANTEED DELIVERY OF APPLICATION LAYER MESSAGES BY A NETWORK ELEMENT by Tefcros Anthias et al. filed on Dec. 10 2004 U.S. patent application Ser. No. 11 031 106 filed Jan. 5 2005 entitled INTERPRETING AN APPLICATION MESSAGE AT A NETWORK ELEMENT USING SAMPLING AND HEURISTICS by Tefcros Anthias et al. filed on Jan. 5 2005 and U.S. patent application Ser. No. 11 031 184 filed on Jan. 6 2005 entitled DATA TRAFFIC LOAD BALANCING BASED ON APPLICATION LAYER MESSAGES by Hari Kathi et al. filed on Jan. 6 2005 the entire contents of which are hereby incorporated by reference for all purposes as if fully set forth herein.

The present invention generally relates to data processing techniques performed within network infrastructure elements such as routers and switches. The invention relates more specifically to techniques for customizing the parsing of transport protocols on which messages are received and performing custom message processing functions on an application message in a network infrastructure element.

The approaches described in this section could be pursued but are not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated herein the approaches described in this section are not prior art to the claims in this application and are not admitted to be prior aft by inclusion in this section.

Software applications operating in a network environment exchange application messages. An application message or simply message as used herein refers to a message emitted or consumed by a software element that is logically located at Layer or higher of the OSI reference model. Messages may be contained in more than one data frame packet or segment. For simplicity the term packet is used to refer to a unit of organization under an internetworking protocol such as data frame packet or segment at Layer or of the OSI reference model.

Application end points such as clients and servers in a distributed system communicate over a network using many different transport layer protocols such as HTTP JMS SMTP FTP etc. Independent of the transport layer protocols messages themselves can have their own formats such as XML TEXT BINARY etc. In addition to standard formats applications sometimes use their own proprietary message formats as well as proprietary transport protocols that are best suited for their requirements.

Additionally as applications need to interact with other networked applications which use their own proprietary or standard transport protocols and message formats the messages that travel from one application to another may need different custom processing for both transport level protocols and custom business logic.

Application message formats are not static and may change to support business needs. The business logic code that processes these application messages must change to support the new message formats. On the other hand the same application message may be transmitted using different protocols to support business needs. Custom protocol handlers may need to handle the processing of these messages over the new transport protocol.

Generally in past approaches in order to handle any of these changes the implementation of the application has to be changed the application has to be reloaded into the network device and the network device has to be restarted. This is time consuming requires significant resources in programming labor and is disruptive to network operations. Further in typical past approaches the number of servers on which the applications run is much higher than the number of network elements that interconnect them. The custom business logic for handling different message formats and transport protocols must be provisioned and managed on all the servers which is time consuming and labor intensive.

Dynamically adding application logic and protocol adapters to a programmable network element is described. Approaches herein may allow for customizing the parsing of transport protocols on which messages are received and also custom message processing functions on an application message in a network infrastructure device. In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

In an embodiment custom or user defined application program extensions may be loaded into a network infrastructure element such as a router or switch without restarting the device. For example a network element has program extensibility logic operable for receiving one or more user program extensions that comprise logic operable to interface with the application program and perform message processing functions or protocol processing functions that are not in the application program installing the one or more user program extensions without restarting the apparatus receiving one or more packets representing an application message selecting a particular one of the user program extensions based on a protocol associated with the message loading the particular one of the user program extensions executing business logic of the application program associated with the received message and invoking a function of the particular one of the user program extensions in response to a call in the business logic.

According to one aspect the invention provides a data processing apparatus comprising a plurality of network interfaces that are coupled to a data network for receiving one or more packets therefrom and sending one or more packets thereto one or more processors a switching system coupled to the one or more processors and packet forwarding logic wherein the switching system and packet forwarding logic are configured to receive packets on a first network interface determine a second network interface on which to send the packets and to send the packets on the second network interface a computer readable storage medium having an application program stored thereon program extensibility logic which when executed by the one or more processors is operable to cause receiving one or more user program extensions wherein the user program extensions comprise logic operable to interface with the application program and perform any of message processing functions and protocol processing functions that are not in the application program installing the one or more user program extensions without restarting the apparatus receiving one or more packets representing an application message selecting a particular one of the user program extensions based on a protocol associated with the message loading the particular one of the user program extensions executing business logic of the application program associated with the received message invoking a function of the particular one of the user program extensions in response to a call in the business logic.

In one feature the application message comprises one or more transport protocol headers and the program extensibility logic comprises logic which when executed by the one or more processors is operable to select and invoke the particular one of the user program extensions based on values located in the one or more transport protocol headers.

In another feature the application message comprises one or more application message headers and the program extensibility logic comprises logic which when executed by the one or more processors is operable to select and invoke the particular one of the user program extensions based on values located in the application message headers.

In a further feature the one or more user program extensions comprise one or more extension functions and the program extensibility logic comprises logic which when executed by the one or more processors is operable to select and invoke a particular extension function from among the plurality of extension functions based upon values in the application message.

In still another feature the one or more user program extensions comprise one or more protocol handling functions and the program extensibility logic comprises logic which when executed by the one or more processors is operable to select and invoke one of the protocol handling functions from among the plurality of protocol handling functions based upon values in the application message.

In yet another feature the apparatus comprises any of a packet data router and a packet data switch in a packet switched network.

In a further feature the program extensibility logic comprises logic which when executed by the one or more processors is operable to identify in the application message any of a transport protocol and an application protocol select a particular user defined custom protocol handler from among a plurality of stored user defined protocol handlers based upon the identified transport protocol use the particular user defined custom protocol handler to transform the application message into a modified outbound application message.

In yet another feature the program extensibility logic comprises logic which when executed by the one or more processors is operable to identify a custom user function based on values in any of the transport protocol of the message application protocol of the message and message body load and invoke the user defined extension function based on the identified custom user function.

In other aspects the invention encompasses a machine implemented method and a computer readable medium configured to carry out the foregoing steps.

Referring first to a sender is coupled through a network to a receiver . The network comprises one or more network infrastructure elements such as routers or switches. Each of the network elements comprises one or more blades bladelets or other software elements alone or in combination with hardware or firmware elements that implement inspection at various OSI layers of packets received in association with an application message and related authentication and authorization functions as described herein.

A commercial embodiment of network elements A may comprise routers or switches from Cisco Systems Inc. San Jose Calif. with blades having Application Oriented Networking Services AONS capabilities. In some embodiments network elements A are termed AONS nodes or AONS endpoints. Other network elements B may be non AONS nodes. Further network elements A need not use Cisco AONS technology the network elements can comprise routers or switches that comprise other internal elements to perform extensible authentication and authorization functions as described herein. Thus the use of AONS in an embodiment is not required and all references herein to AONS elements are provided merely to illustrate a clear example and not as limitations.

In an embodiment the validation of an application message by network elements A involves accessing an authentication service provider A and an authorization service provider B.

The authentication service provider A may implement either standard based or proprietary technology based authentication services. Similarly the authorization service B may implement either standard based or proprietary technology based authorization services. Examples of the standard based authentication or authorization service providers include those based on LDAP Kerberos X509 or SAML. In some embodiments authentication or authorization service providers such as A or B may comprise database access routines and a database storing user credential and privilege information. Furthermore in some embodiments an authentication service provider and an authorization service provider can comprise a single authentication and authorization server.

As seen in sender is coupled through a local network to an internetwork that is coupled to another local network . Either of the local networks and may have network elements that implement the techniques herein. As an example router A in local network is equipped with an AONS blade available from Cisco Systems Inc. San Jose Calif. The AONS blade comprises one or more bladelets that form authentication and authorization logic . In certain embodiments all the network elements include authentication and authorization logic which comprises one or more computer programs programmatic objects or other software elements that implement the functions described herein.

Generally the authentication and authorization logic identifies user credentials in an application message. Examples of user credentials are peer SSL certificates HTTP basic authentication scheme and parameters or HTTP negotiate authentication data from message headers and user password token SAML token SPNEGO token or X509 token from a message body.

The authentication and authorization logic performs authentication and authorization based on the user credentials that were identified. If the authentication and authorization of the application message succeeds the application message is processed according to a policy. For example the message is forwarded to a receiving application server A. Thus in the arrangement of router is proximate to the receiving application servers A and can perform authentication and authorization for all the application servers. For example sender and other senders at different locations in networks might send different requests to different instances of applications on different application servers A. The authentication and authorization logic can perform application message authentication and authorization for all such requests relieving the application instances and application servers A from the processing burden of authentication and authorization for each request.

Alternatively if router is located in local network the router can perform application message authentication and authorization when sender emits messages and before the messages reach the application servers A. In all such cases the data processing efficiency of the application servers A is greatly improved because router is responsible for message authentication and authorization and the application servers are responsible only for performing substantive application functions.

When an application message authentication and authorization operation is performed in a network device the operation can be performed on a device that is closer to the application that is sending the message or the application that is receiving the message. As a result if there are multiple instances of an application running possibly on different hosts then a single device through which all the messages are passing can perform the needed authentication and authorization. Accordingly efficiency of the overall network is improved.

In some embodiments extensible authentication and authorization is provided by using a user configurable policy. In this approach the user configurable policy specifies how an incoming message should be authenticated or authorized.

In one embodiment through a user interface a user is enabled in the user configurable policy to define a plurality of message types and associations each of which associates between a particular authentication method with a corresponding message type. In one embodiment the policy is created at design time in advance of message processing based on known characteristics of incoming messages and outgoing messages. The policy associates authentication methods or authorization methods with respective message types. The policy can also associate user credential location definitions that specify locations of user credentials with respective message types. For example the policy can be created using AONS Design Studio ADS and downloaded to an AONS node via AONS Management Console AMC . An ADS designer can select an authentication method for a message type among LDAP and Kerberos SPNEGO X509 Certificate based authentication methods and extension authentication methods provided by extension packages as further explained herein. Similarly the ADS designer can select an authorization method for the message type among LDAP Group SAML Assertion and Rule based methods and extension authorization methods provided by extension packages. During runtime the authentication and authorization logic retrieves the policy and an incoming message. The authentication and authorization logic determines the application message type identifies user credentials in the message validates the incoming message by applying associated authentication and authorization methods and if successful directs other elements of the network element A to process the message according to a success policy e.g. to forward the message on a path to a receiving application server A.

Upon receiving an incoming message on any network interface of the router the credential extraction inspects the message. Credential extraction has access to user credential location definitions for various application message types. In a preferred embodiment credential extraction makes use of existing components in the network infrastructure element A that allow extraction or identification in packets associated with an application message of fields in various OSI layers. The search of user credential fields may be conducted on headers data or payloads at standard locations or non standard locations and additionally or alternatively using name value pairs or regular expressions. In one embodiment credential extraction identifies user credentials or a subset thereof in locations specified by standards. In another embodiment the credential extraction identifies the user credentials or a subset thereof based on user credential location definitions for the message type. In yet another embodiment credential extraction identifies the user credentials from both locations identified by the standards and by the user credential location definitions.

Credential validation authenticates an identity associated with the user credentials. In a preferred embodiment credential validation comprises a validator for built in authentication methods and an extension validator for non built in authentication methods which may be developed before or after the network infrastructure element A is deployed. For the built in authentication methods a user or policy specifies which one is to be used for a particular application message type. For example the authenticate bladelet embodiment of credential validation in an AONS bladelet has built in authentication methods based on LDAP Kerberos SPNEGO or X509 Certificate.

The extension validator can be configured to invoke an extension authentication in extension packages for authentication methods that do not have built in support. The extension packages for non built in authentication methods may be deployed before or after the installation of the router A in a network. In a preferred embodiment the authentication and authorization logic does not require the presence of a particular extension package unless a corresponding non built in authentication method is to be supported. However when a non built in authentication method is to be supported at runtime the extension validator is configured accordingly and the extension authentication is provisioned to the network infrastructure element A.

An extension authentication can be developed in a programming language that makes use of application programming interfaces APIs to support a particular authentication method. For example an extension authentication can be developed in JAVA that makes use of SiteMinder JAVA Agent APIs available from Computer Associates Inc. CA to support the SiteMinder Authentication. In a preferred embodiment the configuration that directs the extension validator to use the extension authentication thus developed can be specified in AONS Design Studio. Both the configuration and the extension authentication can be provisioned to the network infrastructure element A to form an extension package before its use by the extension validator at runtime. In a preferred embodiment the configuration and the extension package can be pre packaged into a downloadable file in AONS Design Studio and subsequently downloaded to an AONS node.

When the extension authentication is invoked it is made available all the required and optional parameters by the authentication and authorization logic . The extension authentication reads configuration parameters relevant to accessing an authentication service provider or a database that stores necessary information for authentication. In some embodiments the parameter list values and access routines for parameters are configured for a particular authentication method and authentication service provider in authentication and authorization logic . In a preferred embodiment the parameter list values and access routines for parameters can be pre packaged into a downloadable file in AONS Design Studio and subsequently downloaded to an AONS node. For example as a part of extension configuration in AMC a user configures necessary and optional parameters including those required for connecting to an authentication service provider such as SiteMinder Policy Server from CA.

At runtime the extension authentication uses the parameters performs the authentication method and returns the result to its caller.

The credential authorization can be invoked to authorize privileges to an identity associated with the user credentials. In a preferred embodiment the credential authorization comprises an authorizer for built in authorization methods and an extension authorizer for non built in authorization methods which may be developed later. For the built in authentication methods a user or policy specifies which one is to be used for a particular application message type. For example the authorize bladelet embodiment of credential authorization in an AONS bladelet has built in authorization methods based on LDAP Groups SAML Assertions or rules.

The extension authorizer can be configured to invoke an extension authorization in extension packages for authorization methods that do not have built in support. The extension packages for non built in authorization methods may be deployed before or after the installation of the router A in a network. In a preferred embodiment the authentication and authorization logic does not require a particular extension package unless a corresponding non built in authorization method is to be supported. However when a non built in authorization method is to be supported at runtime the extension authorizer is configured accordingly and the extension authorization is transferred to the network infrastructure element A.

An extension authorization can be developed in a programming language that makes use of application programming interfaces hereinafter APIs to support a particular authorization method. For example an extension authorization can be developed in JAVA that makes use of SiteMinder JAVA Agent APIs to support SiteMinder Authorization. In a preferred embodiment the configuration that directs the extension authorizer to use the extension authorization thus developed can be specified in AONS Design Studio. Both the configuration and the extension authorization can be provisioned to the network infrastructure element A to form an extension package before its use by the extension authorizer at runtime. In a preferred embodiment the configuration and the extension package can be pre packaged into a downloadable file in AONS Design Studio and subsequently downloaded to an AONS node.

When the extension authorization is invoked it is made available all the required and optional parameters by the authentication and authorization logic . The extension authorization reads configuration parameters relevant to accessing an authorization service provider or a database that stores necessary information for authorization. In some embodiments the parameter list values and access routines for parameters are configured for a particular authorization method and authorization service provider in authentication and authorization logic . In a preferred embodiment the parameter list values and access routines for parameters can be pre packaged into a downloadable file in AONS Design Studio and subsequently downloaded to an AONS node. For example as a part of extension configuration in AMC a user configures necessary and optional parameters including those required for connecting to an authorization service provider such as SiteMinder Policy Server from CA.

At runtime the extension authorization uses the parameters performs the authorization method and returns the result.

If the authentication and authorization tasks complete successfully the authentication and authorization logic directs the application message to a receiving application server A.

Thus the extension validator extension authorizer extension package which may include extension authentication or extension authorization represent an extensibility mechanism for the authentication and authorization logic .

There may be multiple extension packages deployed in a network infrastructure element A. In various embodiments an extension package may provide support for authentication only or for authorization only or both. Thus the SiteMinder extension package discussed above which supports both authentication and authorization is described solely to present a clear example and not as a limitation. Furthermore an extension package may provide support for authentication and or authorization using service providers other than SiteMinder as discussed. In one embodiment authentication and or authorization service is provided by Tivoli Access Manager from International Business Machine Corp. Armonk N.Y. Thus network elements A need not depend on a particular authentication and or authorization service provider such as SiteMinder. Any authentication and or authorization provider that is capable of performing authentication and authorization service upon a request by an extension package described herein is within the scope of the present invention. Thus the use of SiteMinder in an embodiment is not required and all references herein to SiteMinder are provided merely to illustrate a clear example and not as limitations.

In an embodiment support for a new authentication or authorization method by the network infrastructure element A can be disabled or enabled without requiring changes in implementation or re building of the network infrastructure element code. In this embodiment a user can easily enable or disable a method for business reasons such as a change in a business partner relationship involving an authentication or authorization service provider. Also a supplier for network infrastructure element A may need to enable or disable support for a specific method based on a licensing agreement or possibly different product bundling needs.

At step for each incoming message received from a data network coupled to the network infrastructure element A certain other steps are performed. In step the type of the application message is determined by the network infrastructure element A. The type of an application message may be determined on a number of attributes carried by the application message or the underlying packets associated with the application message. Attributes capable of identifying application message types include endpoints addresses or ports universal resource locations URL at HTTP level special fields in the message or regular expression patterns. Additionally or alternatively attributes capable of identifying application include any standard or proprietary tokens embedded in a message or underlying packet that identifies a particular type for an application message. For example a string constant denoting an application name may be embedded in an application message in a proprietary manner to identify a particular application type.

If the incoming message is not a type that has been configured for authentication and authorization in step the authentication and authorization logic passes the message to logic in the network infrastructure element A for further processing such as forwarding the message towards its intended destination. If the incoming message is a type of an application message that has been configured for authentication and authorization in step the credential extraction determines whether user credential location definitions should be consulted. For a plurality of application message types the user credentials may be located in standard locations. In step the credential extraction identifies the user credentials in those standard locations. For some application message types on the other hand the user credentials may be located in a proprietary locations or non standard locations. In step a user credential location is selected for definitions corresponding to one such application message type as appropriate and in step the user credentials in those locations are identified.

If step determines that the identification of user credential has failed then error handling is invoked at step . The error handling may include logging the error and suppressing the erroneous message from being further forwarded to its intended destination. If the identification of use credential is successful as determined at step then the credential validation is invoked and at step the process determines whether a built in or extension authentication method is associated with the message type. If the incoming message is of a type that associates with an extension authentication method then at step processing is passed to the extension validator which handles invocation of the extension authentication method provided by extension authentication in extension package and which passes all the parameters necessary or optional for the invocation of the extension authentication method. If the incoming message is of a type that associates with a built in authentication method at step then processing is passed to the validator for executing the specified built in authentication method.

At step the credential validation determines the result of the authentication method whether it is built in or extension. If the authentication method has failed to authenticate the identity processing is passed to step for error handling. If the user identity associated with user credentials has been successfully authenticated then credential authorization is invoked and at step determines whether an authorization method has been specified for the message type. If not the authentication and authorization logic passes the message at step to logic in the network infrastructure element A for further processing such as forwarding the message towards its intended destination.

If the incoming message is of a type that associates with an extension authorization method at step processing is passed to the extension authorizer which handles invocation of the extension authorization method provided by extension authorization in extension package and which passes all the parameters necessary or optional for the invocation of the extension authorization method. If the incoming message is of a type that associates with a built in authorization method at step processing is passed to the authorizer for executing the specified built in authorization method.

At step the credential authorization determines the result of the authorization method whether it is built in or extension. If the authorization has failed to authorize privileges required for the application message type for the identity for whatever reason processing is passed to step for error handling. Else if the user identity associated with user credentials has been successfully authorized for the privileges required for the application message type the authentication and authorization logic passes the message at step to a logic in the network infrastructure element A for further processing such as forwarding the message towards its intended destination.

In an embodiment AONS comprises a set of software modules hosted on a network infrastructure element such as a router or switch that can identify application messages from packet flows perform operations on the applications messages and perform application functions on behalf of applications clients and servers. Examples of operations and functions include format transformation payload changes based on policy performing load balancing decisions sending messages to monitoring stations and creating log entries notifications and alerts according to rules. AONS complements existing networking technologies by providing a greater degree of awareness of what information is flowing within the network and helping users to integrate disparate applications by routing information to the appropriate destination in the format expected by that destination enforce policies for information access and exchange optimize the flow of application traffic both in terms of network bandwidth and processing overheads provide increased manageability of information flow including monitoring and metering of information flow for both business and infrastructure purposes and provide enhanced business continuity by transparently backing up or re routing critical business data.

AONS integrates with network layer support to provide a more holistic approach to information flow and management mapping required features at the application layer into low level networking features implemented by routers switches firewalls and other networking systems. In an embodiment a data processing unit blade in a router or switch hosts and executes one or more AONS software modules bladelets to implement the functions herein.

According to one embodiment an AONS blade in a router or a switch performs the actions discussed herein.

Router A receives packet flows such as packet flows A B. More specifically packet flows A B received by router A are received by supervisor blade . Supervisor blade may comprise a forwarding engine and or a route processor such as those commercially available from Cisco Systems Inc.

In one embodiment supervisor blade classifies packet flows A B based on one or more parameters contained in the packets of those packet flows. If the parameters match specified parameters then supervisor blade sends the packets to a specified one of AONS blade and or other blades A N. Alternatively if the parameters do not match any specified parameters then supervisor blade performs routing functions relative to the particular packet and forwards the particular packet on toward the particular packet s destination.

For example supervisor blade may determine that packets in packet flow B match specified parameters. Consequently supervisor blade may send packets in packet flow B to AONS blade . Supervisor blade may receive packets back from AONS blade and or other blades A N and send the packets on to the next hop in a network path that leads to those packets destination. For another example supervisor blade may determine that packets in packet flow A do not match any specified parameters. Consequently without sending any packets in packet flow A to AONS blade or other blades A N supervisor blade may send packets in packet flow A on to the next hop in a network path that leads to those packets destination.

AONS blade and other blades A N receive packets from supervisor blade perform operations relative to the packets and return the packets to supervisor blade . Supervisor blade may send packets to and receive packets from multiple blades before sending those packets out of router A. For example supervisor blade may send a particular group of packets to other blade A. Other blade A may perform firewall functions relative to the packets and send the packets back to supervisor blade . Supervisor blade may receive the packet from other blade A and send the packets to AONS blade . AONS blade may perform one or more message payload based operations relative to the packets and send the packets back to supervisor blade .

In one embodiment executing the flow comprises executing each step i.e. bladelet action of the flow. If a bladelet is to be run within a separate context then AMEC framework may enqueue into bladelet specific queues and based on thread availability dequeue appropriate bladelet states from each bladelet queue.

Conventional network elements are primarily static and any configuration or change is done via policies. Any changes in an operating system or applications running on the network element are performed in a controlled manner using standard upgrade approaches. According to an embodiment using a true extensibility framework a network element can allow customers and partners to dynamically change the runtime behavior of application message processing rules by allowing the user to write code in any language deploy it a hot manner and update the runtime to load this new code all during normal processing of the network element.

In an embodiment custom bladelets allow for software code to be modified and loaded by customers dynamically into network elements for changing the processing logic applied on messages as they flow through the network. Custom protocol adapters allow for software code to modified and loaded by customers dynamically into network elements for changing which protocols are understood and managed in intermediate network nodes.

Today network elements generally do not have or have limited support for extensibility where customers can define their own software programs and upload into the network element. However an Application Oriented Network AON as disclosed herein provides an environment in which customers can create programs that can be dynamically loaded and executed on the network device. In order to ensure that such dynamically loaded code is well behaved and do not accidentally or deliberately hamper the functioning of the network device a sandboxed environment may be provided that protects the network element from such harm.

Currently network elements do not allow custom code to be uploaded onto the device to provide a programmable environment. If custom code is required to be installed on the device typically a new operating system image containing the new functionality is created. The access control and security of such code is controlled largely at build time or by providing options to control behavior of the module via a command line interface. Hence the problem of code behavior is addressed in a static manner and does not change dynamically other than in a predictable manner by defining how the behavior can be controlled.

The problem of runtime program behavior is currently only addressed in a static manner. This was adequate because network devices do not allow custom code to be dynamically uploaded into a device without altering the running image. The method and apparatus presented herein solves the problem of securing and controlling the behavior of such dynamically uploaded code in a network device a feature introduced by AON and covered in another patent application by 

1. Providing a mechanism to specify permissions on the executing code that cannot be overridden and controlled by the network device itself. Permissions can be specified that either allow or deny access to resources 

2. Providing a mechanism to specify permissions that a user can override and can control whether or not particular operations are allowed. Permissions can be specified that either allow or deny access to resources 

3. Providing a mechanism to customize permissions so that the user or administrator can determine which permissions to override. Permissions can be specified that either allow or deny access to resources 

4. Provide an inheritance scheme that allows these permissions to be extended or inherited by custom code extensions.

At runtime the network element verifies the permissions associated with the resource before permitting or denying execution.

This method and apparatus allows a network administrator or user to provision custom programs into the network device and provides a secure sandboxed environment in which they can execute without harming the network device. Unlike prior approaches the approach herein 

1. Provides a secure environment in which custom programs that are deployed in a network device can execute.

2. Provides a data driven approach to easily customize and extend the security capabilities of the device.

3. Provides a language independent mechanism to express security permissions so that the security can be leveraged regardless of the implementing language.

4. Provides a secure container in which custom code executes regardless of the implementing language.

In one embodiment the following tools are provided for creating extension package in an AONS node a custom bladelet software development kit hereinafter Custom Bladelet SDK a design studio or ADS and an admin tool or AMC all commercially available from Cisco Systems Inc. A designer uses Cisco Custom Bladelet SDK java editor or other third party tools to write Java code that will provide bladelet functionality. ADS is a visual tool for designing flows and applying message classification and mapping policies. AMC is a web based interface to perform all administration and configuration functions.

At step the designer interacts with ADS and creates a custom bladelet or adapter extension package. As a part of creating the package the designer provides a number of artifacts. First the designer provides one or more JAVA .jar files implementing an extended authentication method and necessary libraries. For example in case of a custom bladelet extension the designer provides the jar files which contain the class that extend the AbstractCustomBladelet class and any other supporting class files that are needed to execute the business logic implemented by the custom bladelet.

Additionally the designer provides bladelet extension info XML files for the custom bladelets using bladelet extension info schema defined in Cisco Custom Bladelet SDK. Table 2 shows an example bladelet extension info XML file that can be used in an implementation.

The designer further provides the capability to define custom parameters for configuring this custom bladelet. The parameters may be defined by an attribute domain. Table 3 shows an example attribute domain for SiteMinder authentication that can be used in an implementation.

In one embodiment the custom extension bladelet or adapter package created with the above artifacts is saved as a bar file on a disk.

At step an administrator uploads and registers the extension package to AMC . Once loaded and registered the extension package is available for use in ADS.

At step the designer causes ADS to synchronize with AMC to retrieve the extension package which has been enabled and made available by the AMC uploading and registering step .

At step the designer continues his or her designing tasks of defining message flows between bladelets message types.

At step the administrator causes AMC to synchronize with ADS to retrieve the flows message types user credential location definitions and associations defined in step .

At step the administrator deploys to an AON blade the extension package and a policy. In one embodiment the policy comprises an identification of the message flows message types user credential location definitions and associations of the user credential location definitions with the message types and enable the AON blade to use the authentication authorization method available in the extension package. In other embodiments the policy may specify other custom or user defined methods that perform any other desired functions.

Thus in the approach herein custom or user defined application program extensions may be loaded into a network infrastructure element such as a router or switch without restarting the device. At a high level the approach herein provides program extensibility logic operable for receiving one or more user program extensions that comprise logic operable to interface with the application program and perform message processing functions or protocol processing functions that are not in the application program installing the one or more user program extensions without restarting the apparatus receiving one or more packets representing an application message selecting a particular one of the user program extensions based on a protocol associated with the message loading the particular one of the user program extensions executing business logic of the application program associated with the received message and invoking a function of the particular one of the user program extensions in response to a call in the business logic.

In an embodiment the application message comprises one or more transport protocol headers and the program extensibility logic is operable to select and invoke the particular one of the user program extensions based on values located in the one or more transport protocol headers. In an embodiment the application message comprises application message headers and the program extensibility logic is operable to select and invoke the particular one of the user program extensions based on values located in the application message headers.

In an embodiment the user program extensions comprise extension functions and the program extensibility logic is operable to select and invoke a particular extension function from among the plurality of extension functions based upon values in the application message.

In an embodiment the user program extensions comprise protocol handling functions and the program extensibility logic is operable to select and invoke one of the protocol handling functions from among the plurality of protocol handling functions based upon values in the application message.

In an embodiment the program extensibility logic is operable to identify in the application message any of a transport protocol and an application protocol select a particular user defined custom protocol handler from among a plurality of stored user defined protocol handlers based upon the identified transport protocol use the particular user defined custom protocol handler to transform the application message into a modified outbound application message.

In an embodiment the program extensibility logic is operable to identify a custom user function based on values in any of the transport protocol of the message application protocol of the message and message body load and invoke the user defined extension function based on the identified custom user function.

Computer system includes a bus or other communication mechanism for communicating information and a processor coupled with bus for processing information. Computer system also includes a main memory such as a random access memory RAM flash memory or other dynamic storage device coupled to bus for storing information and instructions to be executed by processor . Main memory also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Computer system further includes a read only memory ROM or other static storage device coupled to bus for storing static information and instructions for processor . A storage device such as a magnetic disk flash memory or optical disk is provided and coupled to bus for storing information and instructions.

A communication interface may be coupled to bus for communicating information and command selections to processor . Interface is a conventional serial interface such as an RS 232 or RS 422 interface. An external terminal or other computer system connects to the computer system and provides commands to it using the interface . Firmware or software running in the computer system provides a terminal interface or character based command interface so that external commands can be given to the computer system.

A switching system is coupled to bus and has an input interface and an output interface to one or more external network elements. The external network elements may include a local network coupled to one or more hosts or a global network such as Internet having one or more servers . The switching system switches information traffic arriving on input interface to output interface according to pre determined protocols and conventions that are well known. For example switching system in cooperation with processor can determine a destination of a packet of data arriving on input interface and send it to the correct destination using output interface . The destinations may include host server other end stations or other routing and switching devices in local network or Internet .

The invention is related to the use of computer system for extensible authentication and authorization in a network infrastructure element. According to one embodiment of the invention extensible authentication and authorization in a network infrastructure element is provided by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another computer readable medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. One or more processors in a multi processing arrangement may also be employed to execute the sequences of instructions contained in main memory . In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus embodiments of the invention are not limited to any specific combination of hardware circuitry and software.

The term computer readable medium as used herein refers to any medium that participates in providing instructions to processor for execution. Such a medium may take many forms including but not limited to non volatile media and volatile media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory .

Common forms of computer readable media include for example a floppy disk a flexible disk hard disk magnetic tape or any other magnetic medium a CD ROM any other optical medium punch cards paper tape any other physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM any other memory chip or cartridge or any other medium from which a computer can read.

Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infrared transmitter to convert the data to an infrared signal. An infrared detector coupled to bus can receive the data carried in the infrared signal and place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Communication interface also provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface . In accordance with the invention one such downloaded application provides for extensible authentication and authorization in a network infrastructure element as described herein.

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution.

In the foregoing specification the invention has been described with reference to specific embodiments thereof. It will however be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

The preceding description has disclosed an approach for performing extensible authentication and authorization in a network device. The approach herein provides an improved authentication and authorization approach because a network device is more efficient in performing extended authentication or authorization methods which may be deployed even after the network device has been installed.

The approach herein has numerous benefits over prior approaches. For example the approach reduces the number of processing locations at which a message is authenticated or authorized. Application endpoints are not required to perform authentication or authorization. As a result application resources can focus on core application functions rather than implementing authentication and authorization logic in a fragmented manner.

The approach herein is useful for any network gear vendor that needs mechanisms to provide authentication and authorization capability in a networking device to enable better security.

