---

title: Methods and systems for managing I/O requests to minimize disruption required for data migration
abstract: Methods and systems are provided for minimizing disruptions when host data on a source logical unit is migrated onto a target logical unit. I/O requests are managed in a particular order during various states of the migration. After the target logical unit is synchronized with the source logical unit and before a commitment to the target logical unit is made, the target logical unit can be evaluated. At that point, the migration can be aborted. During the evaluation of the target logical unit, I/O requests that were directed to the source logical unit are redirected to the target logical unit and I/O requests that were directed to the target logical unit are redirected to the source logical unit. The disclosed methods and systems are equally effective at enabling less disruptive virtualization of a source logical unit as a target logical unit.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07809912&OS=07809912&RS=07809912
owner: EMC Corporation
number: 07809912
owner_city: Hopkinton
owner_country: US
publication_date: 20060929
---
Many computer systems include one or more host computers and one or more storage systems that store data used by the host computers. An example of such a computer system including a host computer and storage systems is shown in .

The storage systems include a plurality of disk drives or and a plurality of disk controllers or that respectively control access to the disk drives. A plurality of storage bus directors control communication with host computer over communication buses . Each storage system further includes a cache to provide improved storage system performance. In particular when the host computer executes a read from one of the storage systems the storage system may service the read from its cache when the data is stored in the cache rather than from one of the disk drives or to execute the read more efficiently. Similarly when the host computer executes a write to one of the storage systems corresponding storage bus directors can execute the write to the cache . Thereafter the data can be de staged asynchronously in a manner transparent to the host computer to the appropriate one of the disk drives . Finally storage systems include internal buses over which storage bus directors disk controllers and caches communicate.

The host computer includes a processor and one or more host bus adapters that each controls communication between the processor and one of the storage systems via a corresponding one of the communication buses . It should be appreciated that rather than a single processor host computer can include multiple processors. Each bus can be any of a number of different types of communication links with the host bus adapter and storage bus directors being adapted to communicate using an appropriate protocol via the communication buses coupled there between. For example each of the communication buses can be implemented as a SCSI bus with the storage bus directors and adapters each being a SCSI driver. Alternatively communication between the host computer and the storage systems can be performed over a Fibre Channel fabric.

Typically the storage systems make storage resources available to the host computer for assignment to entities therein such as a file system a database manager or a logical volume manager. If the storage systems are so called dumb storage systems the storage resources that are made available to the host computer will correspond in a one to one relationship to physical storage devices within the storage systems. However when the storage systems are intelligent storage systems they will present logical units of storage to the host computer that need not necessarily correspond in a one to one relationship to any physical storage devices within the storage system. Instead the intelligent storage systems may map each logical unit of storage presented to the host across one or more physical storage devices.

Administrators of computer systems like that depicted in may want to migrate sets of logically related data such as a database or file system from one storage resource to another. One common reason is that a data set might grow at such a rate that it will soon exceed the capacity of a storage system. Other common reasons include the administrator s desire to move the data set to a storage system with faster response time to lay the data set out differently on the resource to facilitate faster access to reconfigure disk striping for fault tolerance and or performance purposes or to optimize the geographic location where the data set is physically stored.

Data migrations are often complicated and problematic exercises. Administrators usually must take offline any applications executing on the host that use the source storage device. Depending on the size of the data set applications can be offline for lengthy periods leading to a loss of productivity and opportunity costs associated with not having the data set available for important business functions. Migrations typically are manual labor intensive efforts and are therefore error prone costly and labor intensive.

Conventional data migration efforts typically involve the following four separate steps requiring manual intervention between each source discovery target provisioning data synchronization i.e. movement and reconfiguration to switch to target access.

The source discovery step identifies the physical locations e.g. the storage system and logical unit at which the data set is stored. This step is typically performed manually. An exemplary conventional method includes the use of spreadsheets to compile an inventory of file systems database table spaces and other data stored on individual storage volumes.

The target provisioning step identifies and configures the storage resources typically logical units of storage presented by another storage system to which the data set will be moved. Conventionally this step requires extensive manual intervention by for example database administrators and system administrators. This step may include making new logical units visible to one or more host computers mapping file systems and or table spaces on target logical units configuring switches configuring volumes for redundancy and planning for more efficient physical data access. This step is typically very time consuming and labor intensive and thus expensive.

The synchronization step involves moving or copying the data set from the source locations to the target locations. Various techniques have been used to perform this step including employing a utility application running on one or more host computers to read the data set from the source locations and write the data set to the target locations. Alternatively a mirroring facility such as the SYMMETRIX Remote Data Facility SRDF available from EMC Corporation Hopkinton Mass. may be used to create mirrors between source and target volumes on different storage systems and to then synchronize them so that the storage systems themselves perform the copy. Other data copy tools available from EMC include OPEN REPLICATOR for SYMMETRIX data storage systems and SANCOPY for CLARIION data storage systems. Synchronization is often the most time consuming of the four steps and usually requires taking the applications that are accessing the data be taken offline i.e. refused access to the data while the step is performed.

After the data set has been moved or copied the switch to target step typically involves reconfiguring the computer system so that applications using the data set recognize the target locations as the new storage location for the data set. Again this conventionally requires human intervention and may require rebooting of the host computer s that access the data set.

EMC Corp. has recognized the desirability of being able to migrate data non disruptively. U.S. Pat. No. 7 093 088 which is hereby incorporated by reference for example discloses some methods and systems that enable less disruptive migration. The inventors of the present invention however believed that alternative methods and systems would be more effective and more flexible in enabling less disruptive migration and virtualization of data storage systems.

The inventors recognized that when migrating data from a source logical device to a target logical device it would be desirable for a host to be able access the relevant data throughout the process or at least for as much of the process as possible. The inventors also recognized that when virtualizing a source logical device as a target logical device it would be desirable for a host to be able access the relevant data throughout the process or at least for as much of the process as possible. The inventors recognized that the appropriate management of input output I O requests during the migration or virtualization process can be used to render the process less disruptive to a host that has data stored in a source logical unit. The inventors further recognized that the implementation of various input output I O request controls in a particular order during the migration or virtualization process can minimize the possibility of errors or other problems.

Possible benefits of management of I O requests consistent with features and principles of the invention during migration or virtualization process include the capability of leveraging point in time copy tools to synchronize the source and target logical units while enabling access to the data thereon the capability of maintaining synchronization of the source and target logical unit before committing to the target logical unit the capability of evaluating the target logical unit before committing to the target logical unit and the capability of switching back and forth between the source logical unit and the target logical unit before committing to the target logical unit. Other possible benefits of management of I O requests consistent with features and principles of the invention during migration or virtualization process include the capability of using the native name of a device the capability of applying the same state to all aliases of a device and the capability of preventing another user from modifying the configuration of a storage device during the process. Further possible benefits of appropriate management of I O requests include the capability of preventing access to source and target logical units at the same time and the capability of having a state persist across a reboot.

One embodiment consistent with principles of the invention is a method for enabling evaluation of a target logical unit associated with a source logical unit after synchronizing the target logical unit with the source logical unit and before committing to the target logical unit. The method includes redirecting a first plurality of I O requests that were directed to the source logical unit to the target logical unit and redirecting any I O requests that were directed to the target logical unit to the source logical unit. The method further includes preventing any I O requests that were redirected to the source logical unit from accessing the source logical unit.

Another embodiment consistent with principles of the invention is a method for enabling evaluation of a target logical unit after encapsulating a source logical unit in a virtual storage device as the target logical unit and before committing to the target logical unit. The method includes redirecting a first set of I O requests that were directed to the source logical unit to the target logical unit and redirecting any I O requests that were directed to the target logical unit to the source logical unit. The method further includes preventing any I O requests that were redirected to the source logical unit from accessing the source logical unit.

Another embodiment consistent with principles of the invention is a host computer in signal communication via a network with a storage system comprising a source logical unit and a target logical unit. The host computer is configured with instructions to perform one of the foregoing methods.

Another embodiment consistent with principles of the invention is a computer readable medium including instructions to configure a computer system to execute one of the foregoing methods. In one embodiment the medium includes a program for installation and execution on a host computer associated with one or more storage systems with a source logical unit and a target logical unit.

Additional embodiments consistent with principles of the invention are set forth in the detailed description which follows or may be learned by practice of methods or use of systems or articles of manufacture disclosed herein. It is understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention as claimed.

Reference is now made in detail to illustrative embodiments of the invention examples of which are shown in the accompanying drawings.

The inventors of the present invention recognized that the present invention may be implemented among other ways as a filter driver in the I O stack. The POWERPATH tool available by EMC Corp. is an example of an I O filter driver. In the exemplary embodiment illustrated in the invention is implemented as an extension to the POWERPATH tool.

Although filter driver only interacts with an operating system OS as illustrated in filter driver can conceptually be considered to be placed between OS and at least one host bus adapter such as host bus adapter in . The storage system such as storage system in presents volumes of storage to the host computer for assignment to various resources therein such as to provide storage space for a file system an LVM or a database. Volumes are presented via signals arriving at the collection of host bus adapters on the host. These signals are processed by filter driver which creates a volume representation . Functionality may be attributed to the volume representation.

Filter driver of may be thought of conceptually as having the form of a C clamp with a top horizontal arm a bottom horizontal arm and a vertical connector between the arms. Horizontal arm may be for example an interface to any operating system OS such as Sun s SOLARIS LINUX and Microsoft s WINDOWS NT. Bottom horizontal arm includes platform dependent code comprising an interface to relevant host bus adapters . Vertical connector comprises a series of common Application Programming Interfaces APIs . An advantage of the C clamp is that extensions can be written in a platform independent manner because the arms translate all of the platform dependent communications into more generic communications. An extension stack is enveloped between arms and . In addition to a plurality of existing extensions in extension stack a data migration extension is added in the embodiment of to manage I O requests during a data migration or virtualization process. Data migration extension can consist of a plurality of extensions.

Host computer uses source logical unit to store data. The host data on source logical unit can be migrated to target logical unit . During a migration or virtualization process host computer can store data about the state and or status of the process in boot device . This metadata may be stored in the boot device for example as kernel metadata or user metadata. Storing kernel and or user metadata can enable the process to resume in the same state after either a crash or a graceful shutdown and restart during the migration or virtualization process. To enable the host computer to resume the process smoothly after a crash boot device must be the first device the host computer accesses during the host boot process. Accordingly the host computer may enable the kernel state of the process to be restored during a reboot.

Setup state is reached after a SETUP command which is initiated by a user initializes a migration operation. In the setup state all preparation required before synchronization of a target logical unit with a source logical unit is completed. Additionally setup state may also be reached as a result of aborting a migration. From setup state the user has the choice of continuing to a synching state or returning to an initial state which eliminates the state changes that were made to reach setup state .

Synching state is reached after a SYNC command initiates a synchronization of a target logical unit with a source logical unit such as a target logical unit and source logical unit . In synching state data from source logical unit is in the process of being copied to target logical unit . Once source storage logical unit and target logical unit are synchronized i.e. both units store the same data synching state automatically transitions to a source selected state . Alternatively the user may choose to return to the setup state from the synching state .

In source selected state the source logical unit and target logical unit are synchronized and data in those logical units is accessed via the source logical unit. The migration process is not yet committed. Thus the user may choose to return to setup state from source selected state . To continue the migration process however the user may issue a command to move to a target selected state .

Target selected state is reached after the user issues a SELECT TARGET command while the migration process is in source selected state . In target selected state the source logical unit and target logical unit are synchronized and data on both the source and target logical units is accessed on the target logical unit. The migration process is not yet committed. Thus the user may choose to return to source selected state or setup state from the target selected state . To continue the migration process however the user may issue a command to move to a committed state .

In a migration of data from a source logical unit accessed by a host application through a native name native to any migration a committed and redirected state not shown exists between target selected state and committed state . Committed and redirected state is reached after the user issues a COMMIT command while the migration process is in target selected state . If the feature that directs write clones to source logical unit was enabled in the target selected state it is disabled in committed and redirected state . Thus the migration process cannot be aborted from committed and redirected state . The user may issue the COMMIT command after he is satisfied with an evaluation of the target logical unit. The committed and redirected state enables the user to post pone to a more convenient time the reconfiguration required in a native to any migration to transition to the committed state . Reconfiguration requires host application disruption.

In a pseudo to pseudo migration committed state is reached after the user issues a COMMIT command while the migration process is in target selected state . In committed state a source logical unit is no longer kept synchronized with a target logical unit. Thus the migration process cannot be aborted from committed state . The user may issue the commit command after he is satisfied with an evaluation of the target logical unit.

Final state is reached after a CLEANUP command. Before allowing access to the source logical unit in a migration process the CLEANUP command removes any data or metadata from the source logical unit that might cause OS or application confusion or errors. Before allowing access to the source logical unit in a virtualization process the CLEANUP command verifies that the source logical unit is no longer physically accessible to the host.

As discussed above various commands may be issued by the user to transition from one state to another. For example a SYNC command will transition a migration from setup state to synching state . A SELECT TARGET command will transition the migration from source selected state to target selected state . A COMMIT command will transition the migration process from target selected state to committed state . Additional commands are available to the user such as a SELECT SOURCE command. For example when the system is in target selected state the SELECT SOURCE command will transition from target selected state to source selected state as represented by the arrow shown in . Furthermore as shown by the arrows in a transition may be made from any state in except committed state and final state back to setup state . A transition back to setup state constitutes an abort of the migration process.

Each user device in layer of represents a way that source logical unit may be addressed by a host I O request. For example logical units may be addressed with native names or pseudo names. Native X represents a first native name of source logical unit . Native Y represents a second native name of source logical unit . Although two native names are illustrated in the example the number of native names can vary. Generally where the invention treats native X and native Y Y similarly any additional native names would also be treated similarly. Pseudo Z represents a pseudo name of source logical unit . Similarly each user device in layer of represents a way that target logical unit may be addressed by a host I O request. Pseudo A represents a pseudo name of target logical unit . Native B represents a first native name of target logical unit . Native C represents a second native name of target logical unit .

Co pending U.S. patent application Ser. No. 11 427 889 which is entitled Methods And Systems For Migrating Data With Minimal Disruption and which was filed on Jun. 30 2006 naming M. Bappe and H. Raizen as inventors is hereby incorporated by reference. This application discloses among other things methods and systems whereby I O requests can reach a logical unit using a pseudo name.

Layers and are each managed by one or more existing extensions of the extension stack shown in in this exemplary embodiment. Layer of represents a first layer at which I O requests addressed to a logical unit may be suspended. Suspended I O requests may be queued so that they can be executed when an appropriate state has been reached. Layer of represents a mapping layer. Layer in initial state maps a pseudo and or native name used by a host application in level to access data on a logical unit such as native X native Y or pseudo Z to an inherent device identifier of a logical unit or of a physical connection to a logical unit. This mapping is shown conceptually in and elsewhere as a path to a logical unit.

Layers and may be managed by data migration extension of in the exemplary embodiment. To increase the processing speed I O requests need not flow through layers and prior to the initiation of a migration process.

Layer in represents a multipath layer. In initial state layer maps I O requests that were on paths addressed by native X native Y and pseudo Z in level to source logical unit . Thus layer will route an I O request that was addressed to native X to native Y or to pseudo Z in level on a path to source logical unit . In initial state layer similarly maps I O requests that were on paths addressed by native X native Y and pseudo Z in level to target logical unit . Thus layer will route an I O request that was addressed to pseudo A native B or native C in level on a path to target logical unit .

Layer of represents a layer at which I O requests addressed in various ways to a logical unit may be funneled to a single path directed to a particular logical unit. Funneling is the process of redirecting I Os from aliases to a nominal device. The nominal device is the one specified in the SETUP command. If the nominal device is specified by a native name of a physical connection to a logical unit then the pseudo name of the logical unit would be an alias and all other native names of physical connections to the logical unit would be aliases. If the nominal device is specified by a pseudo name of a logical unit then all of the native names of the physical connections to the logical unit are aliases. Funneling simplifies I O handling. After funneling is applied aliases are not a concern because all I O flows through the nominal device. Suspend redirect access control and write cloning need be applied only to the nominal device.

Consistent with an embodiment of the invention layer in funnels I O requests that were addressed to native X native Y and pseudo Z in level to the path corresponding to the pseudo Z address when pseudo Z is specified as the nominal device. I O requests that were addressed to any other native name for source logical unit would be treated similarly. Also consistent with an embodiment of the invention layer in funnels I O requests that were addressed to pseudo A native B and native C in level to the path corresponding to the pseudo A address when pseudo A is specified as the nominal device. Level is not a necessary part of the invention.

Layer of represents a second layer at which I O requests addressed to a logical unit may be suspended and later resumed. Layer is used to transition between different states such as target select state and committed state . A state change is initiated for example by issuing a state change command such as a COMMIT command. Layer allows I O requests that are pending before a state change is initiated to execute. I O requests that arrive after a state change is initiated however are queued in layer so that they can be executed when an appropriate state has been reached. In any of the states such as setup state I O requests are not suspended in layer .

Layer of represents a layer at which I O requests may be redirected to a different logical unit. In setup state I O requests are not redirected in layer .

Layer of represents a layer at which I O requests may be prevented from accessing a logical unit. In setup state I O requests may be prevented from accessing target logical unit in layer as illustrated in . Access control is useful to prevent problems that could be caused by the same data or metadata appearing on two different logical units.

Layer of represents a layer at which I O write requests may be cloned and directed to a second logical unit. In setup state layer of only receives I O requests from one path for each logical unit .

When SYMMETRIX SRDF is the selected tool for example the present invention would go to the synching state conceptually illustrated in because the SRDF tool keeps the mirrors synchronized and host based write cloning would not be enabled. Management of I O requests in synching state is illustrated beginning at layer in . I O requests in layers and of are managed similarly to I O requests in layers and of . In synching state of however I O requests following a path to target logical unit are prevented from accessing any logical unit in layer . The synching state conceptually illustrated in does not include write cloning because the selected tool keeps the mirrored copy synchronized with the original.

I O requests in layers and of are managed similarly to I O requests in layers and of . In target selected state of however I O requests that had been directed to source logical unit are redirected to target logical unit in level . In target state of I O requests that had been directed to target logical unit are also redirected to source logical unit in level . Such cross redirection in level is considered advantageous because it enables all I O requests to a particular logical unit to be managed uniformly thereby creating certainty in how they will be handled because redirection from the source to the target allows application I O to continue without the need to reconfigure and because redirection from the target to the source prevents alternative dangerous access while the target is selected. For native migrations the committed and redirected state enables application reconfiguration to be postponed until a convenient time.

Like in some I O requests are prevented from accessing any logical unit in layer of . I O requests following a path to target logical unit in layer of are redirected in layer then prevented from accessing any logical unit in layer .

Like is a flow diagram conceptually illustrating exemplary management of I O requests at various layers in synching state of consistent with an embodiment of the present invention. Where OPEN REPLICATOR is the tool selected for synchronization the present invention may transition to the synching state conceptually illustrated in because the OPEN REPLICATOR tool does not attempt to keep the target logical unit synchronized with the source logical unit . Instead the OPEN REPLICATOR tool copies the data on source logical unit at a point in time onto target logical unit . I O requests in layers and of are managed similarly to I O requests in layers and of . In synching state of however write requests directed to source logical unit are cloned and the cloned write requests are directed to target logical unit in layer .

I O requests in layers and of are managed similarly to I O requests in layers and of . In target selected state of however write requests directed to target logical unit are cloned and the cloned write requests are directed to source logical unit in layer .

In this pseudo to pseudo migration example the committed state described with respect to is reached for example after a COMMIT command is issued. illustrates a committed state for a pseudo to pseudo migration. As previously discussed layer in prevents I O requests that are following a path to source logical unit from accessing any logical unit. Unlike layer of however layer in does not redirect I O requests. Instead layer of maps I O requests addressed to source logical unit by a pseudo name such as pseudo Z in layer to a path to target logical unit . Similarly layer of maps I O requests addressed to target logical unit by a pseudo name such as pseudo A in layer to a path to source logical unit . Co pending U.S. patent application Ser. No. 11 427 889 which is entitled Methods And Systems For Migrating Data With Minimal Disruption which was previously incorporated by reference discloses methods and systems whereby I O requests can reach a logical unit using a pseudo name. Remapping of the relationship between a pseudo name and an underlying logical unit is an important feature of the committed state of a pseudo to pseudo migration.

The committed state of does not illustrate a way to prevent I O requests addressed to target logical unit by a native name such as native B or native in layer from accessing target logical unit. However the invention may only allow a logical unit to be addressed by a pseudo name.

Referring again to a committed and redirected state is illustrated for a native to any migration. As previously discussed layer in redirects I O requests that had been directed to target logical unit to source logical unit and also redirects I O requests that had been directed to source logical unit to target logical unit . As previously discussed layer in FIG. prevents I O requests following a path to source logical unit from accessing any logical unit. Thus in the committed and redirected state of I O requests addressed to source logical unit in layer are redirected to target logical unit and I O requests addressed to target logical unit in layer are prevented from accessing any logical unit.

Referring to a committed state for a native to any migration is illustrated. An UNDO REDIRECT command initiates the transition from a committed and redirected state to the committed state . This requires that any uses of source logical unit be shut down and those uses be reconfigured to use target logical unit using either a native or pseudo name. Layer in funnels I O requests addressed in various ways to a logical unit and directs them to a single path directed to a particular logical unit.

Furthermore the transition to final state described with respect to is initiated by the issuance of a CLEANUP command in committed state . Before the final state is reached all access control in level is disabled and data may be removed from the source logical unit . illustrates the final state for a native to any migration. illustrates the final state for a pseudo to pseudo migration.

One of ordinary skill in the art will appreciate that other variations of the above described processes are in keeping with the spirit and scope of the present invention. For example the virtualization process may involve similar steps and similar states as those described above. Moreover management of I O requests consistent with features and principles of the invention can be used to render the virtualization process less disruptive to a host that has data stored in a source logical unit. In a virtualization process the target logical unit is a virtual volume that encapsulates the source logical unit .

The foregoing description has been presented for purposes of illustration. It is not exhaustive and does not limit the invention to the precise forms or embodiments disclosed. Modifications and adaptations of the invention will be apparent to those skilled in the art from consideration of the specification and practice of the disclosed embodiments. For example the described implementations include software but systems and methods consistent with the present invention may be implemented as a combination of hardware and software or in hardware alone. Examples of hardware include computing or processing systems including personal computers servers laptops mainframes micro processors and the like.

Computer programs based on the written description and methods of this invention are within the skill of an experienced developer. The various programs or program modules can be created using any of the techniques known to one skilled in the art or can be designed in connection with existing software. For example program sections or program modules can be designed in or by means of Java C HTML XML or HTML with included Java applets. One or more of such software sections or modules can be integrated into a computer system.

Moreover while illustrative embodiments of the invention have been described herein the scope of the invention includes any and all embodiments having equivalent elements modifications omissions combinations e.g. of aspects across various embodiments adaptations and or alterations as would be appreciated by those in the art based on the present disclosure. The limitations in the claims are to be interpreted broadly based on the language employed in the claims and not limited to examples described in the present specification or during the prosecution of the application which examples are to be construed as non exclusive. Further the steps of the disclosed methods may be modified in any manner including by reordering steps and or inserting or deleting steps without departing from the principles of the invention. It is intended therefore that the specification and examples be considered as exemplary only with a true scope and spirit of the invention being indicated by the following claims and their full scope of equivalents.

