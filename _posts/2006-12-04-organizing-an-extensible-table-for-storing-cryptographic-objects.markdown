---

title: Organizing an extensible table for storing cryptographic objects
abstract: Embodiments of the present invention provide a method and apparatus, including a client and security token, for managing cryptographic objects, such as public key cryptography standard (PKCS)#11 objects, in a computer system. A storage table for the cryptographic objects is established including rows for the cryptographic objects and columns corresponding to available attributes capable of being associated with the cryptographic objects. Actual attributes of the cryptographic objects are stored in ones of the plurality of columns corresponding to respective ones of the available attributes. The storage table is extensible such that additional columns are added corresponding to new attributes capable of being associated with the cryptographic objects.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08693690&OS=08693690&RS=08693690
owner: Red Hat, Inc.
number: 08693690
owner_city: Raleigh
owner_country: US
publication_date: 20061204
---
The present invention relates generally to security in a complex heterogeneous multi user computer environment and more particularly to organizing a storage table for storing cryptographic objects by attribute.

In complex computer systems such as those deployed in many business enterprises security is an obvious concern. Factors requiring serious consideration in connection with the security environment include mobility the geographic and physical architecture of the system and the multi user nature of the systems. In light of the many factors tokens have become an acceptable way to ensure that users can connect to the system from any convenient work station even a home based or remote Internet based terminal in a secure manner.

In computer network environments security systems based on PKI are gaining popularity as a way of providing security or enhancing existing security particularly with regard to security for network connections. Generally speaking a PKI is an arrangement of servers clients and specific information that passes between them for the verification of user identities by one or more trusted third parties such as for example one or more Certification Authorities CA . The specific information is referred to as a public key and is typically associated with or bound to a particular user or users.

The establishment of a public key is typically accomplished by security or PKI software executing at a central location such as a server and operating in a coordinated or sometimes uncoordinated fashion with software at client locations. The public keys are typically provided within security certificates specified under for example the PKI Working Group PKIX of the Internet Engineering Task Force IETF which implement certificate standards based on the International Telecommunication Union Telecommunication Standardization Sector ITU T Recommendation X.509 ITU T Recommendation X.509 1997 E Information Technology Open Systems Interconnection The Directory Authentication Framework June 1997 also specified in Comit Consultatif International T l phonique et T l graphique CCITT Geneva 1989 Data Communication Networks Directory Recommendation X.500 X.521 Blue Book Volume VIII Fascicle VIII.8 and International Standards Organization International Engineering Consortium ISO IEC 25 Dec. 1991 Information Technology Open Systems Interconnection The Directory Authentication Framework ISO IEC 9594 8 CCITT Recommendation X.509 . The PKIX further specifies additional aspects in connection with request for comments RFC 3280 Housley R. et al. Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List CRL Profile RFC 3280 April 2002 supersedes RFC 2459 .

Using a PKI network communications between for example a server and a client can be protected such as with a secure socket layer SSL connection between the server and client. Originally SSL was privately developed as a way to provide a secure connection between an Internet web server and a browser operating on a client and has now been adopted as an open security standard by IETF. To operate in a PKI environment a server wishing to communicate with a client or other network nodes needs to obtain a certificate for validating its identity to the client or other nodes and for allowing an encryption key to be generated for the establishment of the SSL connection. When the client and server first make a connection the certificate is received by the client and the issuing CA is compared with a root CA certificate stored locally on the client. If the root CA matches the issuing CA then the certificate can be considered trusted. Otherwise a notification can be provided to the client that additional verification steps should be taken to ensure that the server can be trusted. 

A typical certificate contains the name of the server or other entity that is being identified the server s public key the name of the issuing CA and other information including validity dates and cryptographic information proving that the certificate is authentic and the serial number of the certificate. When an owner of a token is issued a certificate the certificate and information associated with the certificate are typically stored in a data structure in a memory area of the token. The information generally would include a public key and a private key identifier or the like that would enable the derivation of a private key allowing content encrypted using the private key to be decrypted. In a scenario for example where a token owner wishes to connect to a computer system from a client the token owner can insert the token into a token interface and after entering a password or other means of authentication can connect to a system server. If the user wishes to view an encrypted object such as an email message of which the user is a recipient the system can search for the private key in order to decrypt the content as specified for example in connection with the secure multi purpose mail extension S MIME specification as outlined in RFC 2311 S MIME Version 2 Message Specification Dusse et al. March 1998 or variants thereof. In practice the private keys associated with S MIME can be arbitrarily long and in addition a two step procedure is generally required to access the private key stored in the token. For example the server can look at the certificate to obtain a public key for the recipient and then the public key can be used to index into a data structure or storage structure located on the token to obtain the private key. The private key can then be used to decrypt the message.

In a typical security scenario an application which requires a cryptographic object that is associated with a particular cryptographic standard such as public key cryptography standard PKCS will construct a request for the object through a cryptography module executing in connection with an operating system or may access the object through a call constructed in accordance with an application programming interface API or the like supplied in a library from the operating system operating system manufacturer or a third party. Storage for and access to cryptographic objects can be provided while complying with the cryptographic standard. A proprietary interface to hardware components such as storage devices including tokens smart cards or the like can be constructed to access objects. Objects are typically organized in a storage device in a manner to best facilitate access to the object for example by object name. Further depending on the type of access calls provided by the API the proprietary interface may require time intensive access through a number of calls designed to accommodate the different formats. Such access may require inordinate amount of time and large and increasing amounts of code to support a growing list of different standards. As standards change code definitions can change requiring modifications to the code presenting logistical problems.

Difficulties can arise however when changes occur to the cryptographic standard such as by adding new attributes in a PKCS 11 implementation. In a proprietary system new definitions must be established and code builds may potentially require re compilation to activate the new definitions. Further complicating the problem for government applications various standards such as federal information processing standard FIPS as specified for example in FIPS PUB 140 2 entitled SECURITY REQUIREMENTS FOR CRYPTOGRAPHIC MODULES National Institute of Standards and Technology NIST May 25 2001 revised Dec. 3 2002 requires periodic audits under Cryptographic Module Validation Program CMVP to ensure compliance.

Therefore if aspects of the organization of storage device changes compliance issues including FIPS compliance issues for government systems may further complicate code management and validation. It would be desirable to provide a capability to store retrieve and perform standards based operations on cryptographic objects in a manner that would reduce the requirements for code maintenance and code size while increasing storage access speed and organizational efficiency of the storage device.

While a background including problems in the art are described hereinabove with reference to related art or concepts associated with the present invention the description is not intended to be limiting since the features of the present invention are set forth in the description which follows. Aspects of the present invention not specifically described herein may become obvious after a review of the attendant description or may be learned by practice of the invention. Accordingly it is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only in nature and are not restrictive of the scope or applicability of the present invention.

Embodiments of the present invention provide a method and apparatus for managing cryptographic objects in a computer system. In accordance for example with procedures of an exemplary method a storage table is established for the cryptographic objects such as public key cryptographic standard PKCS 11 objects. The storage table includes rows corresponding to respective ones of the cryptographic objects and a plurality of columns associated with the rows. The columns correspond to available attributes capable of being associated with any of the cryptographic objects. Actual attributes of the cryptographic objects are stored in ones of the plurality of columns that correspond to respective ones of the available attributes. If a cryptographic object does not have one of the available attributes then the column for that attribute will not have a value stored therein or will have a null value or some other indicator that no actual attribute for the available attribute represented by the column is present for that particular object.

It should be noted that the storage table is extensible such that additional columns are added corresponding to new attributes capable of being associated with the cryptographic objects. The storage table is searched for one or more of the cryptographic objects based on one or more of the available attributes. The cryptographic objects having actual attributes corresponding to the available attributes used in the searching can thereby be located. In accordance with various embodiments the available attributes include PKCS attributes such as PKCS 11 attributes and user defined attributes such as a pathname of the cryptographic objects a provider name of the cryptographic objects a method of the provider of the cryptographic objects whether enabled or disabled. The storage table includes a standard query language SQL database table.

In accordance with other embodiments a cryptography module can be provided in a computer having an operating system capable of facilitating the execution of an application requiring a cryptographic object such as a web browser a cryptography application an email client or the like. The application can request the cryptographic object using a security library made accessible through the operating system such as by providing an application programming interface API or the like. The cryptography module can be configured to include a storage table capable of storing a plurality of cryptographic objects such as PKCS 11 objects each having at least a portion of a set of available attributes. The storage table is accessible using a standard query language SQL and is organized such that a row is allocated to the each of the plurality of cryptographic objects and a column is allocated to each of the available attributes whether or not a particular object possesses all of the available attributes. The storage table is further organized to be capable of adding a new column corresponding to a new attribute associated with all of the plurality of cryptographic objects and can be stored for example in a token such as a smart card universal serial bus USB token or the like.

A translator can be used to translate a first command associated with one of the plurality of cryptographic objects into a second command and can be configured to be compliant with a government standard including a federal information processing standard FIPS . The first command can be constructed in accordance with a cryptography standard such as PKCS 11 and the second command can be constructed in accordance with SQL. In constructing the first and the second commands at least one of the available attributes can be used. The first command can include for example one of several standard commands such as PKCS 11 commands including a CREATE OBJECT command a COPY OBJECT command a DELETE OBJECT command a FIND OBJECT command a GET ATTRIB VALUE command and a SET ATTRIBUTE VALUE command.

In another embodiment a client is provided in a computer system. The client can execute an application requiring a cryptographic object such as a web browser a cryptography application an email client or the like. The application can request the cryptographic object using a request constructed from a security library accessible through an operating system associated with the client. The client can include a token interface for connecting to a token a system interface coupled to the computer system and a processor coupled to the token interface and the system interface through a conventional connection mechanism such as a data bus or the like. The processor can be configured to organize a storage table for storage in the token. The storage table can store a cryptographic object having at least a portion of a set of available attributes associated with a cryptographic standard such as PKCS 11. The storage table is accessible using a standard query language SQL and is organized such that a row is allocated to the cryptographic object and a column is allocated to each of the available attributes whether or not a particular object possesses that attribute. A request from the security library for the cryptographic object can be translated to a SQL request for the cryptographic object using at least one attribute of the portion of the set of available attributes.

The processor can further organize the storage table to add an additional column allocated to a new attribute associated with either the cryptographic standard a revised version of the cryptographic standard and a new cryptographic standard or a common user defined attribute.

Reference will now be made in detail to exemplary embodiments of the invention which are illustrated in the accompanying drawings. Wherever possible the same reference numbers will be used throughout the drawings to refer to the same or like parts.

Referring now to a simplified and representative environment associated with a multi user computer system accessed using a token will be discussed and described. The basic representative environment includes a client a network a server and a token . The client and the server can be connected to each other through the network through connections and respectively which can be any one of a number of different types of wired or wireless connections as would be appreciated in the art. It will be appreciated that in an enterprise environment the client and the server can also be coupled more directly through an intra net or the like. The client can be connected to the token through an interface which can be a connector such as a universal serial bus USB connector edge connector or some other connection mechanism. The interface also includes any necessary processing capability or the like such that protocols associated with the low level transfer and exchange of information can be successfully conducted. The token can also include an interface to conduct similar physical and electronic interfacing with the client . The token includes a memory area where information such as cryptographic objects and other information such as small applications can be stored.

To better appreciate the present invention an exemplary security scenario is shown in . At a top level several applications such as APP which can be for example a web browser APP which can be for example an email client and APPN . Each of the applications APP APP and APPN are typically coupled to the external environment such as a network or the like and can be coupled to the coupled to a socket for controlling access to communication resources and the like. The socket connection can be protected using modules such as secure sockets layer SSL module for example for browser security a secure multi purpose internet mail extension S MIME module for example for email security and the like. One or more of the applications APP APP and APPN can be executing on a computer such as a client or the like and can require a cryptographic object such as the email client associated with APP which requires a key to decrypt an email.

The control of access to security related cryptographic objects typically falls to a cryptography or crypto module . The crypto module can be used to provide libraries of calls to objects that can be stored for example in a token in connection with a token interface module . The token can be used to store cryptographic objects such as keys in a key store and certificates in a certificate store . When a requirement for a cryptographic object arises in one of the applications APP APPN access to the object can be provided through a series of calls to the crypto module and the token interface module to retrieve the objects or to perform other object related operations.

To better understand the exchange of calls to retrieve objects or to perform other object related operations in connection with a security scenario a diagram including message exchange is shown in . An application such as described in connection with APP APPN can generate a cryptographic operation request which is preferably in compliance with a standard such as the PKCS 11 standard. The request can be transferred to a crypto module such as network security services NSS module . It will be appreciated that NSS module includes a set of libraries for supporting security enabled client and server applications. Applications APP APPN which are built with access to NSS can support cryptographic object operation compliant with a number of standards including secure sockets layer SSL versions 2 and 3 PKCS 5 PKCS 7 PKCS 11 PKCS 12 S MIME X.509 and other security standards. To ensure wide availability the NSS libraries are widely available through public license. In accordance with some embodiments a token interface module is included to receive for example the PKCS 11 cryptographic operation requests and translate them into a proprietary database operation for access to a token and the repositories for the cryptographic objects such as a key store and a certificate store . The operation requests will generally be of a form specified in one or a series of application program interfaces APIs . The operation requests can be used to conduct cryptographic operations and involve for example retrieving creating setting attribute value pairs associated with cryptographic objects. Examples of operations that can be performed in connection with cryptography APIs along with various attribute value pairs can be found in the Java PKCS 11 Reference Guide http java.sun.com j2se 1.5.0 docs guide security p11guide.html Intro revised May 11 2004. The following excerpt from the PKCS 11 Reference Guide shows exemplary attributes associated values and attendant descriptions.

The final entry in Table 1 or the attributes entry allows additional PKCS 11 attributes to be defined. Such attributes are set when creating PKCS 11 cryptographic objects. Generally the API provider only specifies mandatory PKCS 11 attributes when creating objects giving rise to the advantages provided by the present invention. For example for RSA public keys the key type and algorithm CKA CLASS and CKA KEY TYPE are specified as well as the key values for RSA public keys CKA MODULUS and CKA PUBLIC EXPONENT . The particular PKCS 11 library will assign implementation specific default values to the other attributes of an RSA public key for example values that specify that the key can be used to encrypt and verify messages CKA ENCRYPT and CKA VERIFY true .

The attributes option can be used to override the default values of the particular PKCS 11 implementation. Alternatively attributes option can be used if the particular PKCS 11 implementation does not support defaults and requires a value to be specified explicitly. It is important to note that specifying invalid attributes or attributes not supported by a particular PKCS 11 implementation may cause the operation to fail at runtime.

The attributes option can be specified zero or more times in a particular configuration and the attribute options are processed in the order specified in for example as described below. The attributes option has the format 

Valid values for include generate for keys generated via a KeyPairGenerator or KeyGenerator import for keys created via a KeyFactory or SecretKeyFactory. The noted values also apply to Java software keys automatically converted to PKCS 11 key objects when they are passed to the initialization method of a cryptographic operation for example Signature.initSign for keys created using either a generate or a create operation. Valid values for include CKO PUBLIC KEY CKO PRIVATE KEY and CKO SECRET KEY for public private and secret keys respectively and to match any type of key. Valid values for include one of the CKK xxx constants from the PKCS 11 specification or to match keys of any algorithm. Algorithms supported by for example the SunPKCS11 provider include CKK RSA CKK DSA CKK DH CKK AES CKK DES CKK DES3 CKK RC4 CKK BLOWFISH and CKK GENERIC.

It will be appreciated that the attribute names and values are specified as a list of one or more name value pairs where must be a CKA xxx constant from the PKCS 11 specification for example CKA SENSITIVE.value can be one of the following a boolean logical value such as true or false an integer in decimal form default or in hexadecimal form null indicating that the corresponding attribute should not be specified when creating objects. Further if the attributes option is specified multiple times the entries are processed in the order specified. The attributes can be aggregated and later specified attributes will override earlier specified ones. For example consider the following configuration file excerpt 

In the above excerpt the first entry specifies CKA SIGN true for all private keys. The second entry overrides the first with a null specifier for Diffie Hellman private keys such that the CKA SIGN attribute will clearly not be specified for all keys. Finally the third entry specifies CKA DECRYPT true for RSA private keys meaning that RSA private keys will have both CKA SIGN true and CKA DECRYPT true set.

It will be appreciated that a special form of the attributes option specified as attributes compatibility in the configuration file. The special form represents a set of attribute statements designed to provide maximum compatibility with for example existing Java applications. In such a scenario all key components would be accessible and secret keys useable for both encryption and decryption. The compatibility attributes value can be used together with other attributes lines in which case the same aggregation and overriding rules apply as described earlier.

In some instances in order to provide services to government clients compliance to standards such as the FIPS standard described herein above the storage of objects must be in compliance with FIPS and must be audited. Problems arise however in that as cryptographic standards evolve and change changes to the proprietary database operations will be required and thus changes to a multitude of definition files and the like. It will be appreciated that auditing the corresponding proprietary software to demonstrate compliance will pose additional difficulties.

To better provide the ability to rapidly search an object database in the face of rapidly evolving security environment is shown in . Therein the NSS module can generate the PKCS 11 cryptographic operation requests as described above and pass them to an alternative token management module where requests using a standard query language SQL or an abbreviated version thereof such as SQLite which is in the public domain can be used to form SQL queries to the cryptographic objects stored in stores and on the token .

While using the SQL queries can significantly increase the maintainability of the code associated with the crypto module or NSS module the use of SQL queries can increase the size of the potential user base that would be more likely to be compliant with SQL than with a proprietary solution. However it should be noted that in addition to availing the provider of the crypto module and related modules of a broader user base the use of SQL for the organization of cryptographic objects can also be improved over that which is typically used in such database operations. shows a typical manner of organizing objects such as PKCS 11 objects in for example a SQL database. As can be seen cryptographic objects such as PKCS 11 objects OBJECT OBJECT and OBJECT would generally be stored in a SQL data base as discrete objects for example by object name. Attributes associated with the objects such as and associated with OBJECT and associated with OBJECT and associated with OBJECT would be stored in connection with the object for example as an ordered or finite list. Such as list provides more cumbersome searching as is shown in . Thus a SQL query can be constructed to search for objects with a value associated with for example . The SQL query can be executed by examining each stored object PKCS 11 object such as OBJECT OBJECT and OBJECT and any other objects in search passes and respectively. If the objects contain entries for the passes will include further passes into the objects to find the attributes such as at and . It will be appreciated that the attribute can be a variable or fixed value thus the search can be constructed for example for objects having an or having a specific value for . In either case in accordance with more conventional organizational schemes each object must be independently examined. If new attributes are added to the standard are added as part of a new standard or are defined by a user and existing objects possess the attribute then the related object entries across the entire database must be edited and reorganized.

In accordance with various exemplary embodiments however an advantageous organization can be adopted for storing cryptographic objects in a sparse storage table as shown in . It can be seen that cryptographic objects OBJECT OBJECT OBJECT and OBJECTN which in the present embodiment are PKCS 11 objects can be stored as rows in storage table . Further attributes such as PKCS 11 attributes and user defined attributes can be stored as entries in a series of columns allocated for every possible one of available attributes capable of being associated with the objects. It will be appreciated that not all the attributes for any given object will be present but a column for the attribute will be. It can be seen for example that for OBJECT an an an an and an are present. For OBJECT an an and an are present. For OBJECT an is present. It would be possible for an object to be present with no attributes such as OBJECTN . Since the storage table is configured to support user defined attributes it will be advantageous for storage table to be extensible such that additional attributes that arise in connection with a user definition or that arise as a result of a modified or new cryptographic standard can be added to the storage table without the need for re organizing existing information in the table. If a new attribute is arises in connection with any of the above described circumstances or other circumstances one or more new columns such as column n or column n 1 can be added to storage table without disrupting the existing organization of the table. Another clear advantage is that since the new attribute will most likely be applicable to all the objects a placeholder for the new attribute will be available to each object by way of the addition of the new column or columns and . Further advantages include the ability to rapidly search the storage table for cryptographic objects having particular attributes or attribute values.

In accordance with various embodiments an exemplary procedure for organizing a storage table is shown in . After start at the storage table can be created such as by using a SQL command associated with the creation of a table and organized such that each object such as each PKCS 11 cryptographic object is assigned a row and each available attribute is assigned a column at . In the resulting table each object will be provided with a column placeholder for each attribute whether or not the attribute is available for a particular object. A new cryptographic object such as a new PKCS 11 object can be created for example by using a template at . The template for the creation of a new object can be populated at by the actual attributes associated with the new object. The actual attributes can be placed in the corresponding one of the available attribute columns. The new object can then be stored at in the storage table for example as a new row. It will be appreciated that the template can be established to represent the standard or current object data structure and can be modified periodically at to contain the present set of attributes and updated when new attributes are created by some mechanism such as by modifying the standard by creating a new standard or by adding a new user defined attribute. The storage table can be modified to accommodate the new attribute by adding a new column at for each new attribute as described herein. Accordingly a minimal amount of modification such as to the template and to the storage table is required to accommodate extensibility. While the exemplary procedure is indicated as ending at it will be appreciated that the procedure can be invoked for example any time new attributes or objects are added to the storage table.

Another exemplary procedure for performing cryptographic operations such as retrieving information from a storage table organized for example in accordance with the exemplary procedure described in connection with is shown in . After start at a command such as a PKCS 11 command can be generated in connection with a cryptographic operation on a cryptographic object at . The command can be generated for example in connection with the execution and operation of an application that requires the use of cryptographic objects such as a cryptographic application a web browser an email client or the like. The PKCS 11 command can be translated for example in a cryptographic module into a SQL database command such as a SQLite command at . If the command for example is a find or search related command the storage table can be searched using one or more of the available attributes to index into the storage table to perform the search by including the attribute in constructing the SQL command at . For commands that are associated with the creation of a new object or modification of an existing object that require new attributes the storage table can be modified to add a new column or columns at . While the exemplary procedure is indicated as ending at it will be appreciated that the procedure can be invoked for example any time new cryptographic operations are required to be performed in connection with the storage table.

In some embodiments the exemplary procedures described herein can be implemented in an apparatus as shown in which can be an exemplary computer such as a client having a processor configured to execute computer instructions stored in memory or other computer readable medium causing all or various portions of the procedure to be carried out. The client can also be configured with an interface which when operating in connection with the processor can be used to facilitate a network or intranet connection and exchange and transfer of information associated with a computer system and an external repository of encrypted content such as an email server. The apparatus can also include a token such as a security token which can be a smart card a universal serial bus USB token or any other type of token. The token can optionally include a processor for executing small compact applications or applets for example that could be used to support storage and retrieval functions associated with a memory area . Applets can be stored for example in the memory area at and the storage table for storing cryptographic objects such as PKCS 11 objects can be stored at .

The memory can store the usual information such as operating system software data variables and applications including application code associated with the exemplary procedures described herein at . A token access application program interface API can also be stored at such that calls to the token to retrieve information can be made. As described above the storage table for storing cryptographic objects in the token can be organized at . If a new object is encountered a template for new object creation can be used to create a new object for storage in the storage table at . The template can be populated with actual attributes at . The object can then be stored in the table at . The table can be modified at for example in response to the creation of new attributes or an object with new attributes by adding a new column or columns corresponding to the new attribute or attributes. SQL commands corresponding to PKCS 11 commands can be generated at along with the relevant attributes and passed to the token to retrieve objects or perform other cryptographic operations in association with the objects for example as described herein.

Other embodiments of the invention will be apparent to those skilled in the art from consideration of the specification and practice of the invention disclosed herein. It is intended that the specification and examples be considered as exemplary only with a true scope and spirit of the invention being indicated by the following claims.

