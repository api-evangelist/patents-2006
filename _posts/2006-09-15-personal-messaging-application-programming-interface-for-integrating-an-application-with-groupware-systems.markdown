---

title: Personal messaging application programming interface for integrating an application with groupware systems
abstract: A personal messaging application programming interface can be utilized by a developer in order to add groupware functionality to an application. The interface can include various schemas and providers that allow the schemas to connect to a collaboration server which provides the groupware functionality. The schemas can further include item and container classes and can extend other schemas so as to provide functionality that is more specific to the collaboration server. The items and containers can represent various entities on the collaboration server. The providers can use stubs in order to create connections to the collaboration server and can implement the schema hierarchy so as to map the functionality defined by the schema into various core calls on the collaboration server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07996855&OS=07996855&RS=07996855
owner: Oracle International Corporation
number: 07996855
owner_city: Redwood Shores
owner_country: US
publication_date: 20060915
---
A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

This application is related and cross referenced to the following applications which are incorporated herein by reference 

U.S. patent application Ser. No. 11 539 492 entitled GROUPWARE PORTLETS FOR INTEGRATING A PORTAL WITH GROUPWARE SYSTEMS by Jeff Sposetti filed on Oct. 6 2006.

U.S. patent application Ser. No. 11 473 571 entitled SYSTEM AND METHOD FOR PROVIDING AN SPI BRIDGE FOR CONTENT MANAGEMENT SYSTEM by Ryan McVeigh et al. filed on Jun. 23 2006.

The invention relates generally to groupware systems and in particular to providing an interface for allowing applications to access groupware functionality.

A large portion of communication and information associated with an enterprise is often stored personal information management PIM and groupware systems in the form of emails address books task lists and appointments as well as other proprietary tools. At the same time customized Customer Relations Management CRM systems are often needed in order to keep track of information about a specific customer and product base and to generally provide relevant business processes and scalability. Thus organizations today must integrate groupware with more traditional information systems such as CRM enterprise resource planning ERP and others. Unfortunately the proprietary nature of groupware and PIM systems typically makes it difficult and expensive for an enterprise to integrate their data and information into other applications.

The result is that in many enterprises frustrated users toggle between groupware and other applications duplicating work and data often with dubious integrity or efficiency. What is needed is an improved system of integration one that would facilitate interoperability between proprietary groupware and PIM systems and custom enterprise applications. For example it may be desireable for a custom Java application to gain acess to personal contacts email and appointments without having to know the complexities of proprietary groupware and PIM provider. It may also be desireable for such functionality to be achieved non intrusively without causing disruption to the rest of the enterprise.

The invention is illustrated by way of example and not by way of limitation in the figures of the accompanying drawings in which like references indicate similar elements. References to embodiments in this disclosure are not necessarily to the same embodiment and such references mean at least one. While specific implementations are discussed it is understood that this is done for illustrative purposes only. A person skilled in the relevant art will recognize that other components and configurations may be used without departing from the scope and spirit of the invention.

In the following description numerous specific details are set forth to provide a thorough description of the invention. However it will be apparent to those skilled in the art that the invention may be practiced without these specific details. In other instances well known features have not been described in detail so as not to obscure the invention.

Although a diagram may depict components as logically separate such depiction is merely for illustrative purposes. It can be apparent to those skilled in the art that the components portrayed can be combined or divided into separate software firmware and or hardware components. For example one or more of the embodiments described herein can be implemented in a network accessible device appliance such as a router. Furthermore it can also be apparent to those skilled in the art that such components regardless of how they are combined or divided can execute on the same computing device or can be distributed among different computing devices connected by one or more networks or other suitable communication means.

In accordance with various embodiments of the invention a personal messaging interface is presented that facilitates interoperability between an application and a collaboration system such as those provided by Microsoft Exchange Server and Lotus Domino . Of course the system is not limited to these two forms of collaboration servers and others can be implemented within the scope of the present invention. The personal messaging interface can be implemented as a collection of Java Application Programing Interface API libraries that can be integrated into Java based applications such as portals web applications or standalone Java applications.

In various embodiments the personal messaging interface can be used by the developer when creating deploying and working with applications in the enterprise. Thus instead of having to know the specific interface of the collaboration system e.g. MAPI Lotus Notes C API federated content management API etc. that is chosen by the enterprise the developer can instead implement the personal messaging interface to integrate the application with the collaboration system. Subsequently the application can connect to any of the many types of collaboration servers without the need to rewrite code and re perform other work normally required when developing applications.

In one embodiment the personal messaging interface can consist of a schema and several providers as well as an interface between the schema and the providers. The schema can be thought of as an insulating layer between the application and a specific provider implementation. For example because an application uses the groupware schema rather than the Microsoft Exchange implementation directly the same application can be used with Lotus Domino collaboration server by simply switching the provider implementations. Schemas can consist of a hierarchy of abstract items and containers to resemble functionality provided by the collaboration server. Each item can contain one or more properties which can be implemented as key value pairs. Containers can hold both items as well as other sub containers. A root container may be obtained from the session which is instantiated with a particular service provider.

Specific item classes can exist for the different entities in the schema. For example the groupware schema may contain item classes for tasks appointments contacts and mail messages. Regardless of what item class is used however the programing interface for manipulating its properties can preferably be the same in order to simplify access via the personal messaging interface.

The provider can be an implementation of one or more schemas that makes that schema interact with a specific backend system such as the collaboration server. For example the Exchange MAPI provider can be an implemenation of the groupware schema that connects to a MS Exchange collaboration server and the Lotus Domino provider can be an implementation of the schema that connects to the Lotus Domino server. Since the provider uses the low level interface to the collaboration server much of the groupware functionality is exposed while at the same time hiding the details and making the application appear as though it were a client of the collaboration server. In this manner the application can connect to several collaboration servers via the schema just by switching the provider implementation.

In various embodiments two types of collaboration can be supported by the personal messaging interface. First message centric collaboration can involve message transmission storage and management and is commonly used in groupware systems such as Microsoft Exchange and Lotus Domino. Second interaction centric collaboration focuses on conversational sessions among two or more individuals in real time examples including text based instant messaging and interactive white board applications. The same abstract interface can be used for both types of collaboration as both may share many of the same required software patterns. Service providers can provide implementations for different collaboration backends.

As illustrated an application can be developed and deployed on the application server running a Java Virtual Machine . The personal messaging interface can be integrated into the java based application by including the proper set of Java API libraries. The application can connect to the collaboration server e.g. MS Exchange server Lotus Domino server etc. by first accessing a machine running the collaboration web service via XML over HTTP HTTPS. The collaboration service machine e.g. Exchange service Lotus Domino service etc. can then convert requests into remote procedure calls in the specific interface e.g. MAPI calls or Lotus Notes C API calls etc. of the collaboration server within the domain .

As illustrated the personal messaging interface is integrated into an application that is deployed in the same manner as in on the JVM running on an application server . However in this embodiment there is no collaboration service employed in order to integrate the application with the collaboration server . Instead calls can be converted into WebDAV requests and submitted directly to the collaboration server over HTTP. WebDAV is a set of extensions to HTTP protocol available from IETF group which allows users to collaboratively edit and manage files on remote web servers. In response the collaboration server can convert each request into a WebDAV response.

Thus an enterprise can be provided with a choice of either implementation illustrated in . Various factors may be considered when deciding which form of connectivity to implement. For example specific interface calls to the collaboration server via a service may lessen the load on the collaboration server but may require installation and configuration of an intermediary collaboration service machine. Similarly connectivity via WebDAV can provide for an easier installation process but may create a heavier load on the server. In many cases the optimal way to decide which mode of connectivity is better is to to test both with the application and evaluate the IT requirements of the deployment against the results of that test.

As illustrated the personal messaging interface is integrated into an application that is deployed in a similar manner as in on the JVM running an application server . In this embodiment however the collaboration server is not the MS Exchange server or a Lotus notes server but is instead a virtual content repository such as is available from BEA Systems Inc. The virtual content repository can allow for the management and delivery of content from multiple heterogeneous repositories. It can also provide a single federated content management application programing interface API for allowing applications to access the various content provided thereon. The virtual content repository the federated content management API and the BEA repository are all part of the BEA WebLogic Portal platform available from BEA Systems Inc. The virtual content repository and the federated content management API are described in further detail in the U.S. patent application entitled SYSTEM AND METHOD FOR PROVIDING AN SPI BRIDGE FOR CONTENT MANAGEMENT SYSTEM by Ryan McVeigh et al. which is incorporated by reference herein.

As illustrated the personal messaging interface can make calls in the BEA federated content management API which goes through the virtualization layer e.g. virtual content repository which in turn goes to the actual repository . A BEA content management provider can be written to plug into the personal messaging interface in order to allow the application to access the various content maintained in the repository. It should be noted that it is not necessary that the BEA virtual content repository or the BEA actual repository be used. Other such virtualization layers can be implemented and are well within the scope of the invention. It is also worth noting that the virtual repository usually contains multiple actual repositories not shown similar to the BEA repository illustrated for physically storing the content thereon.

As illustrated a Java application running on a JVM can use a schema to access functionality and can leverage a hierarchy or combinations of various schemas such as the groupware schema exchange schema or the domino schema. The schemas are backed by a provider implementation which can be chosen when the programmer creates a session using the interface. The schema can access the provider via the service provider interface . Each provider can be an implementation of a schema that connects to the specific collaboration server that is associated with that provider. In other words the providers supply the backend collaboration implementation

In one embodiment a schema is a set of items and their properties containers enumerations and operations that can be performed on the items and containers. Schemas can extend other schemas thereby supporting all the items in the super schema and possibly extending those items as well. The main schemas can be groupware exchange and domino schemas as well as the instant messaging schema. All can inherit from the messaging schema class. By the term inheritance it is meant that the schema has the same item classes and container classes plus additional ones. Providers can also often implement extended schemas for access to the higher level schemas that the extended schema implements. For example the exchange schema can contain additional item classes that are MS Exchange specific and thus not supported in the general groupware schema. However because the exchange schema extends the groupware schema the exchange provider still can fully support the groupware schema.

As illustrated a schema can consist of various items and containers . A container can be a specialized type of item that can hold other items. Each item can have a set of properties which are key value pairs stored on the items. These items while concrete typically represent different things depending on the provider in use. For example an item in a groupware provider could be an email message or an appointment while an item in an instant messaging provider could be an instant message.

In one embodiment message centric collaboration can be done by accessing items in this case messages in a user s mail store and calling specific methods on these items. For example a developer can call a method to send a message assign a task add a new contact move an email message to another folder and so on all without having to know the complexities of the underlying collaboration system. Interaction centric collaboration on the other hand can involve getting and adding items to specialized containers and registering event handlers to be notified of item changes. Thus by using the classes in the groupware schema the developer can be insulated from needing to know the specific storage structure or APIs of the collaboration system when accessing instant messages mail calendar contacts tasks and other objects.

In one embodiment the classes in the groupware schema can access the collaboration server by first contacting an intermediary service machine that runs a collaboration service. For example the exchange service can provide connectivity to MS Exchange as an intermediary between Java and the MAPI interface subsystem.

In one embodiment it is preferable that HTTP or HTTPS traffic is able to pass between the Java application machine running the personal messaging interface and the collaboration server. This could be for example a port that is chosen and configured by a system administrator. The link between the machines can cover a wide area network to traverse longer distances. It may be preferable however to place the service intermediary machine as close to the collaboration server as possible in order to maximize performance.

In one embodiment the developer can use the item and container classes or classes of other schemas during the building process of an application. In cases when that application needs to refer to a message or some other entity on the backend collaboration server the developer can simply include code e.g. method calls referring to the item and container classes of the personal messaging interface. This way the developer is shielded from having to learn the specific implementation details of the backend system. Once the application is finished it can be deployed and its classes instantiated. The provider can then handle the implementation of the item and container classes as well as any extended schemas such that a connection can be created to the backend system and the application can perform various actions on objects and entities in that backend system. In this manner the implemented item and container classes can be thought of as java wrapper objects for the connection to entities in the backend collaboration server. For example a provider can implement a stub in order to gain access to the backend collaboration server. A stub can be a program module that represents a remote entity and it can be used to invoke methods on that remote entity. This remote entity can be a message residing on an instant messaging server or an appointment residing on an exchange server for example. Other entities can include meetings contacts emails attachements folders as well as any other objects or units that are provided by the collaboration server. Thus a stub is capable of making a set of core calls to the backend system. The provider can implement these core calls as well as support one or more schemas thereby providing access to the specific collaboration server.

Since the providers can be responsible for creating and maintaining connections a developer need only switch the provider in order to grant the application an ability to function with a different collaboration server. This can be done by the developer specifying at the beginning of the session which collaboration server needs to interact with the application. Then an appropriate provider that is associated with that collaboration server can be used to implement connections to that server. The providers can also be switched or added at runtime without the need to reorganize the enterprise or redeploy the application. Thus multiple instances and connections can be running at the same time allowing the application to connect to different collaboration servers simultaneously.

One provider that can be implemented is capable of communicating with the collaboration server directly by writing to the WebDAV protocol thereby accessing its functionality. Another provider can communicate with an intermediary collaboration service machine in native Java where the intermediary service can then convert each call into that collaboration server s specific interface calls e.g. MAPI . The intermediary service machine can allow for more extensive functionality to be retrieved from the collaboration server because communications arive at that server in its specific API. However this may involve a separate service being deployed on the network thereby consuming resources. In cases where the collaboration server does not support WebDAV protocol this type of provider may be preferable. In any case the user can be provided the ability to configure this feature.

As illustrated the personal messaging interface can include a personal messaging schema a groupware schema an exchange schema and a lotus schema . These schemas can be hiearchically related and inherit from one another. For example the groupware schema can extend the personal messaging schema . and be extended by the exchange and the lotus schemas.

The personal messaging schema can implement item classes and container classes which contain various items. In the extended groupware schema these items and containers can be made into groupware entities classes i.e. functionality provided by most collaboration servers such as appointments calendars and meetings . Other such entities are not shown in the figure for purposes of simplicity but they may include mail messages attachements tasks contacts as well as other types of entities commonly available in groupware systems. Via the use of these groupware entities classes the groupware schema can implement functionality that is more specific than mere items and containers e.g. functions like sending messages scheduling an appointment etc. but still span across multiple groupware providers.

On the other hand one specific collaboration server may have functionality that is not common to other such servers and the developer may wish to access this functionality as well. In this scenario the developer can implement the collaboration server specific schemas such as the exchange schema and the lotus schema . As an example the exchange schema can further define classes which are more specific to exchange type of functionality such as exchange appointments exchange calendars and exchange meetings . Similarly the lotus schema can implement classes specific to lotus functionality such as lotus appointments lotus calendars and lotus meetings .

A developer can write code at any level of the hierachy. For example one application may be created at a high level implementing the personal messaging schema and may not employ specific groupware functionality. On the other hand another application may desire to access methods specific to exchange collaboration server. The developer is provided with such options and the applications can be made to interfunction with all such backend systems.

As illustrated in step application development can involve writing code to implement various functionality as needed by an organization. While writing code for the application a developer can refer to the various classes of the schemas as described above such as items containers announcements messages and others. The application once created need not have any reference to specific application programming interface calls of the backend collaboration server.

In step the application is then compiled and deployed typically on an application server to provide various services within the organization. The developer or some other user within the organization can then select the appropriate providers for the application as illustrated by step . These providers can determine which collaboration systems the application will be able to connect to and to communicate with. For example if an Exchange provider is selected for the application the application will be able to connect to an Exchange server and access functionality therein. It should be noted that the providers can be selected dynamically at runtime statically at compile time or automatically implemented by the system. Furthermore multiple providers can be chosen for a single application thereby creating multiple connections to various collaboration servers and allowing the application to gain access to the functionality provided therein.

In step various stubs can be istantiated to allow the selected providers to achieve their purpose. For example stubs can be programs that make core calls to the backend collaboration server while at the same time implementing the schemas as previously described. In this manner the stubs can extract the functionality from within the specific collaboration system and map it to the various schemas as well as items and containers in the personal messaging interface. In various embodiments a stub can also cache various method calls so as to improve latency and access speed to the collaboration server.

In step the application can take advantage of the stubs in order to access functionality within the backend collaboration system. For example an application can manipulate email messages and attachements schedule appointments send instant messages and perform various other functions provided by the backend groupware system.

As illustrated in step the providers can be switched at runtime after the application has been deployed. For example the organization may wish to install a new collaboration server in order to add products and services to its employees. By merely switching the providers the application can be enabled to access the new collaboration server without the need to rewrite code or to redeploy the application as illustrated in step . In this fashion legacy applications can take advantage of new groupware systems without interruption to the services provided thereby.

One embodiment may be implemented using a conventional general purpose of a specialized digital computer or microprocessor s programmed according to the teachings of the present disclosure as will be apparent to those skilled in the computer art. Appropriate software coding can readily be prepared by skilled programmers based on the teachings of the present disclosure as will be apparent to those skilled in the software art. The invention may also be implemented by the preparation of integrated circuits or by interconnecting an appropriate network of conventional component circuits as will be readily apparent to those skilled in the art.

One embodiment includes a computer program product which is a storage medium media having instructions stored thereon in which can be used to program a computer to perform any of the features present herein. The storage medium can include but is not limited to any type of disk including floppy disks optical discs DVD CD ROMs micro drive and magneto optical disks ROMs Rams EPROM s EPRO Ms Drams Rams flash memory of media or device suitable for storing instructions and or data.

Stored on any one of the computer readable medium media the present invention includes software for controlling both the hardware of the general purpose specialized computer or microprocessor and for enabling the computer or microprocessor to interact with a human user or other mechanism utilizing the results of the present invention. Such software may include but is not limited to device drivers operating systems execution environments containers and user applications.

Embodiments of the present invention can also include providing code for implementing processes of the present invention. The providing can include providing code to a user in any manner. For example the providing can include transmitting digital signals containing the code to a user providing the code on a physical media to a user or any other method of making the code available.

Embodiments of the present invention can include a computer implemented method for transmitting code which can be executed at a computer to perform any of the processes of embodiments of the present invention. The transmitting can include transfer through any portion of a network such as the Internet through wires the atmosphere or space or any other type of transmission. The transmitting can include initiating a transmission of code or causing the code to pass into any region or country from another region or country. For example transmitting includes causing the transfer of code through a portion of a network as a result of previously addressing and sending data including the code to a user. A transmission to a user can include any transmission received by the user in any region or country regardless of the location from which the transmission is sent.

Embodiments of the present invention can include a signal containing code which can be executed at a computer to perform any of the processes of embodiments of the present invention. The signal can be transmitted through a network such as the Internet through wires the atmosphere or space or any other type of transmission. The entire signal need not be in transit at the same time. The signal can extend in time over the period of its transfer. The signal is not to be considered as a snapshot of what is currently in transit.

The foregoing description of preferred embodiments of the present invention has been provided for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations will be apparent to one of ordinary skill in the relevant arts. For example steps preformed in the embodiments of the invention disclosed can be performed in alternate orders certain steps can be omitted and additional steps can be added. The embodiments where chosen and described in order to best explain the principles of the invention and its practical application thereby enabling others skilled in the art to understand the invention for various embodiments and with various modifications that are suited to the particular used contemplated. It is intended that the scope of the invention be defined by the claims and their equivalents.

