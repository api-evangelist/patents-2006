---

title: System and method for automated construction, retrieval and display of multiple level visual indexes
abstract: A method for displaying a multiple level visual index representing data records, comprises storing a plurality of data records and receiving a request to access the stored data records. The method continues by using index parameters to generate a multiple level visual index for the stored data records to be accessed. The method concludes by transmitting a graphical representation of the generated multiple level visual index.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07747628&OS=07747628&RS=07747628
owner: Computer Associates Think, Inc.
number: 07747628
owner_city: Islandia
owner_country: US
publication_date: 20060405
---
The present invention relates generally to the field of data processing particularly to a system and method for the automatic construction retrieval and display of multiple level visual indexes representing keyed data located in a database.

Conventional database management systems use indexing to facilitate user access to keyed data. Keys may be unique to particular files or records social security number vehicle identification number VIN etc. or non unique dates student grades etc. and may have significance solely to the intended user of the application e.g. a VIN to a car salesman using a dealership inventory application .

In large databases a user query may cause thousands of keyed data records to be returned slowing access to the desired data while the user filters and scrolls through the list of returned data. Furthermore in network based applications rendering large amounts of data on the client computer is impractical and the increased network traffic and server usage greatly reduces system efficiency. Applying the search filter results methods used in Internet search engines in which the user executes filter queries and accesses a virtual number of results pages one page at a time requires for a large result set the examination of hundreds of pages before the desired record or file is located. Existing single level indexes are of extremely limited use for subdividing large amounts of data to allow for efficient location of desired data. For example Sun s single level Java Help Facility which has separate indexes for the letters A thru Z generates 3100 entries when the letter A is clicked.

In view of the problems and shortcomings associated with user interfaces for the retrieval display and interaction with very large result sets the invention herein disclosed provides an efficient user friendly system and method for displaying keyed data using multiple level visual indexes. In one embodiment a visual index facility creates index files for sorted data records on a database using pre established index parameters. In another embodiment the visual index facility creates index files using dynamically generated index parameters depending on the size of the result set and the number of records indexes that can be displayed on the user interface at one time. In yet another embodiment the user interface is a client computer and the database is located on a server. In still another embodiment the client is a computer running a web browser and the database is located on a server.

Other features and advantages of the present invention will be apparent from the following description and the accompanying drawings.

Even data sets larger than the 10 000 students of the above example which uses a three level index of depth may be rapidly navigated using appropriately constructed multiple level visual indexes where the user may execute only one click more than the number of index levels to reach the required data. For example a two level index of depth can index 21 952 data items a three level index of depth can index 20 736 data items a three level index of depth can index 810 000 data items and a three level index of depth can index 2 560 000 data items. As explained in detail below the index generation parameters which include 1 the number of index levels to be generated 2 the depth of each index level and 3 the maximum number of data entries for each data file generated may be supplied by the user or generated dynamically by the visual index facility based on the number of data records to be accessed and the number of records that can be displayed on the client s screen and optimized so that the user does not have to scroll through lists of data or indexes.

Implementation of the visual index facility provides that the data to be accessed contains a unique key field and that this key field has meaning to the user of the application. Non unique key fields such as date and student grades are not amenable to the creation of visual indexes whereas unique key fields that have meaning solely to the user of the application e.g. the car salesman accessing inventory via VIN number are amenable to implementation of visual indexes.

In one embodiment the visual index facility may be implemented in a client browser server configuration with a data file generated from the index file in a markup language such as Extensible Markup Language XML . An application programming interface API may then be applied to read the data from the data file of returned data. The API may be the Simple API for XML or SAX parser that handles XML data as a single continuous stream of data and does not require the entire XML file to be stored in memory. The visual index is displayed to the user of the client computer using hypertext markup language HTML transmitted from the server.

If it is determined at block that no data access query was supplied then a determination is made at block whether or not a sorted result set has separately been supplied. The user may have run their own access routines to create a sorted result set. If no such result set was supplied then the method returns an error condition at block .

Once it has been determined that a sorted result set is available either supplied by the user or generated by the data access module a further determination is made at block whether index generation parameters have been supplied by the user. If no index generation parameters have been supplied at block they are generated based on the size of the result set and if known the client s screen size. In one embodiment the parameter generation algorithm is biased to produce depths corresponding to approximately two thirds of the client s screen size minimizing the need for the user to scroll when selecting indexes for expansion.

Once control parameters index generation parameters have been established at block a routine is called to generate the index file based on the current result set size. Next at block a routine is called to generate the data file s associated with the index file. The format and relationship between the index file and data file s is described in more detail below with reference to . Finally at block the method returns a success status.

Once block the retrieval of the child index and all its siblings or block the retrieval of the data records for a leaf index have been invoked at block a determination is made whether or not to format the results as a simple vector of text strings or as HTML formatted for output as images within a graphical tree diagram. According to the result of this determination the index or data records may be used to create a vector of text records at block and the formatted vector returned at block or the index or data records may be formatted for output as HTML text with image bitmaps describing the graphical tree at block and HTML text returned at block .

As shown in an idx element has two attributes. The x attribute identifies the index and may be used by a client program to request retrieval of the children of a specific index. The d attribute identifies where the data for the current index range is stored in data file . In this example the value of the d attribute 2352 will map directly to the id attribute 2352 corresponding to the data file s dat elements. The idx element contains a text string aether . . . affable that represents the range of idx elements in a non leaf node or data file dat elements in a leaf node associated with this index.

The visual index file provides a hierarchy of visual indexes having pointers to one or more of data files and . The elements d of index file idx points to a range of data file dat elements . The XML representation of data file contains a single root element containing 1 to N child dat elements . These dat elements do not have children. Each dat element will have an id attribute . The id attribute corresponds to the index file s idx elements d attribute. The content stored in the dat element is application dependent.

A single visual index file may have a maximum number of data entries as defined by the index generation parameters as shown in at block . For example if the maximum data file size is defined as with 2548 data elements requiring indexing there will be a total of 6 data files.

A user of either a client personal computer or wireless device sends a request in HTTP format to a Web server application that utilizes the visual index facility for the creation and display of specified visual indexes. A session work directory of the visual index facility stores a visual index file e.g. such as the visual index files and described with respect to prior figures and the associated index data files e.g. such as the data files and described with respect to prior figures . As discussed above in one embodiment using data access module the visual index facility may be interfaced with data access protocols shown at for accessing enterprise data stored using one or more of the applications shown at . The application specific index definition file contains parameters defining the indexes and information about the query to be executed by data access module such as which data access protocol to use JDBC SOAP etc. Access protocol executes the query on a remote or local database management system. Examples of common databases DB2 Oracle IDMS Datacom etc. are shown in block . As discussed above the data access module returns the result to the virtual index facility which constructs and manages the visual indexes to be stored in the server and delivered to the user in response to the user s initial request.

Those of ordinary skill in the art will appreciate that the foregoing discussion of certain embodiments and preferred embodiments is illustrative only and does not limit the spirit and scope of the present invention which are limited only by the claims as set forth below.

