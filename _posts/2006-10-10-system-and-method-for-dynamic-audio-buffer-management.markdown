---

title: System and method for dynamic audio buffer management
abstract: An audio data processing circuit comprises a memory and a processing circuit. The processing circuit is configured to store audio data in the memory in at least one buffer, each buffer having a size. The processor is configured to detect a type of application providing the audio data and, based on the type of application detected, to change at least one of the size and number of buffers in which the processing circuit stores audio data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09135951&OS=09135951&RS=09135951
owner: QUALCOMM Incorporated
number: 09135951
owner_city: San Diego
owner_country: US
publication_date: 20061010
---
Electronic devices are used to run different types of applications. Some applications have greater user interactivity than others. For example an application which plays an MP3 format audio file typically has less user interactivity than a gaming application.

For applications having greater interactivity the output of audio should be responsive requiring a lower latency between the application layer and the audio chip. Lower latency provides audio output that most closely matches the video output associated with the game. For applications having lesser interactivity the output of audio should have a greater latency which helps minimize audio stutter.

Audio buffer management is conventionally designed for either high latency applications or low latency applications or for a compromise between the two.

There is a need for a system and method for improving audio buffer management in a device which may run both high latency and low latency applications. Further there is a need for a system and method for improving audio buffer management in a device which can operate applications having latency requirements not known at the time of manufacture of the device. Further still there is a need for a system and method for adapting an audio buffer management scheme dynamically and transparently to accommodate a variety of different applications.

Referring first to a mobile computing device is shown. The teachings herein can be applied to device or to other electronic devices e.g. a desktop personal computer or other mobile computing devices e.g. a laptop computer . Device is a smart phone which is a combination mobile telephone and handheld computer having personal digital assistant functionality. Personal digital assistant functionality can comprise one or more of personal information management database functions word processing spreadsheets voice memo recording etc. Device comprises a display a user input device e.g. a QWERTY keyboard buttons touch screen speech recognition engine etc. . As shown in device also comprises a speaker .

Referring now to a block diagram of device is shown. A central processing unit CPU is provided along with a memory which can comprise volatile and or non volatile memory e.g. ROM programmable ROM flash etc. a direct memory access an audio output and a video output . The components of device can comprise these and or other electronic hardware and or software components configured to run a plurality of software applications for use by a user of device . For example an audio playing application e.g. an MP3 player or other media streaming application can be provided as well as game applications word processing applications etc. Device is configured to run a plurality of applications known to the manufacturer of device and applications unknown to the manufacturer of device . Applications may have a need for providing audio data via audio output to speaker or other audio output devices e.g. headphones etc. and video output to the user via video output to display or other video output devices.

The applications can be stored in memory and run by CPU either alone or with the assistance of direct memory access DMA . DMA allows hardware subsystems within device to access memory for reading and or writing independent of the CPU.

Referring now to a block diagram of an audio buffer management system and method is shown. shows a processing circuit which can comprise one or more of an application layer an operating system layer an audio driver layer and audio hardware . Processing circuit can comprise a single chip design a multiple chip design a multi core chip design programmable logic an application specific integrated circuit hardware software firmware or further components or other arrangements in various alternative embodiments. In one exemplary embodiment layers and are operable on CPU e.g. part of a microprocessor or other chip along with DMA and memory see . CPU and DMA can comprise one or more chips. In this exemplary embodiment an Intel XScale Processor PXA270 CPU DMA chip may be used manufactured by Intel Corp. Santa Clara Calif.

In an exemplary embodiment an application layer runs an application with a relatively low priority for CPU processing time. A memory manager of CPU is configured to create in memory operating system buffers in a random access memory RAM . While a double buffer arrangement is shown in this exemplary embodiment any number of buffers may be created. Processing circuit is configured to store audio data in buffer while buffer provides audio data to operating system layer . While operating system buffer is being created or filled operating system buffer is being read from by operating system . Once operating system buffer has processed all data through operating system layer buffer is released to be filled again by application layer .

In a similar manner operating system layer fills driver buffer while driver buffer is providing data to audio driver . Operating system layer has a medium priority which is a higher priority than application layer but a lower priority than audio driver for CPU time usage. As a result operating system buffers are typically larger than driver buffers to prevent stuttering or gaps in the transmission of audio data along processing circuit .

Audio driver provides audio data with a high priority of CPU run time to one or more DMA buffers . In this example DMA buffer is being filled by audio driver while DMA buffer is providing audio data to audio hardware for play on speaker . Audio hardware can comprise one or more circuits or chips. In this exemplary embodiment audio hardware can comprise a Wolfson AC97 Audio Codec WM9712 manufactured by Woflson Microelectronics plc Edinburgh UK.

In a system in which the manufacturer is unfamiliar with the types of applications a user may run on application layer the flow of audio data may require processing to accommodate system interruptions to reduce stuttering e.g. gaps of silence . For an application requiring lower latency between layer and audio hardware OS buffers are made smaller in order to improve the interactivity of audio exiting processing circuit so that the audio data being played on speaker more closely matches associated video display. For example in games where the user controls real time action sounds should closely match what is happening on the video display.

In a large number N of buffers e.g. which can be 6 12 20 or more allows for more data to be stored in DMA buffers . DMA buffers filled with data are shown in black and buffers being filled by audio driver are shown in white. Providing large buffers at the operating system buffer layer makes the playback of audio data more interruption tolerant. DMA uses DMA buffers to continue to play audio even when applications or components which may not be known or controlled by the manufacturer of device cause interrupts or delays in CPU processing. DMA buffers allow audio driver to tolerate longer interruptions in CPU usage while DMA continues to transfer data to audio hardware in order to maintain smooth playback.

Referring now to processing circuit is configured to detect a type of application providing the audio data and based on the type of application detected to change at least one of the size and number of buffers in which processing circuit stores audio data. In the example shown in processing circuit has determined that the application playing on application layer is an interactive application a low latency application and or an application having a lower latency than other applications. Processing circuit is configured to use DMA buffers and but not DMA buffers . . . N in order to improve the latency of audio data between application layer and audio hardware . While two of buffers are used in this example other numbers of buffers may be used such as etc. In this exemplary embodiment processing circuit created N DMA buffers in RAM before playing audio data with a memory manager. However upon detecting or identifying a type of application e.g. an interactive or low latency application processor then is configured to limit the use of DMA buffers to only 2 or another number less than N. According to one exemplary embodiment audio driver is configured to limit the number of DMA buffers used to process the audio data to at least one and optionally a few less than the total number of buffers available N as predetermined by the memory manager or another pre set mechanism . In other words when the DMA buffer playing is Y the buffer filling up is 

Processing circuit is also configured in this exemplary embodiment of to establish buffers in a smaller size than would be used when other applications are running such as MP3 player application shown in . This reduction in size or provision of a smaller size buffer at the operating system layer and also optionally at the driver buffer layer and or DMA buffer layer improves the latency of audio data from application layer to audio hardware and also improves the interactivity low latency .

Processing circuit can detect or identify the type of application based on any number of methods or configurations. For example processing circuit can be configured to use an application programming interface API to indicate that an audio channel for an application running an application layer should be identified as a low latency application. In this example application layer provides a signal API message or flag indicating the audio data type e.g. low latency high latency etc. . Audio driver is configured to receive the API message and to determine or control the buffer size and or number for DMA buffers . As another example audio driver can be configured to detect the playing of silence over an audio channel for more than a predetermined period of time e.g. 3 seconds . Some applications requiring low latency such as game applications provide an open audio channel with digital silence in order to prevent the device and or audio hardware from shutting down turning off or going into a sleep mode. Accordingly audio driver or another portion of processing circuit can be configured to monitor an audio channel provided by an application playing application layer in order to detect whether the application is a low latency application. In this manner device need not modify or update the game application but rather can identify whether the application is a low latency e.g. or in an alternative embodiment a high latency or other latency characteristic of the application by monitoring an existing data output. According to one exemplary embodiment the layer or which determines the number and or size of buffers or respectively is configured to receive the message or monitor the audio channel or use another method to determine the type of application being run on application layer .

According to one exemplary embodiment the API message can be provided in a manner which is transparent to the operating system . For example an existing operating system layer parameter can be overloaded or modified in a manner that travels through operating system unchanged. For example an audio volume parameter which is passed through operating system to audio driver can be overloaded with a message indicating the type of application e.g. low latency high latency etc. . Overloading refers to having more than one way in which a signal message or word can be interpreted depending on the context. For example when the audio volume parameter is overloaded it conveys both volume and stream type both merged into a single composite number or message.

While shows an implementation in which processing circuit changes the number of direct memory access buffers used based on the type of application detected in an alternative embodiment the size of one or more of buffers can be adjusted or changed e.g. decreased to improve latency . As a further alternative processing circuit can be configured to change at least one of the size and number of buffers of operating system buffer and or driver buffer in response to the type of application detected.

Processing circuit can be configured to identify the application as one of a high latency low latency or other latency characteristic of the application. For example a gaming application and a phone call application can be identified as low latency applications and a media streaming application such as MP3 or webcast video and or webcast audio e.g. a podcast can be identified as a high latency application. The variable nature of internet packet transmissions can be one indicator of a high latency application due to the need for a large amount of buffering. Another type of application can be a variable latency application such as a Push To Talk PTT audio application as used in Walkie Talkie features in some networks. In these networks a user may push a button and start talking the audio data is buffered until the network finally connects a non ringing call to the destination. The time it takes to connect will define how much latency will be in effect.

As shown in processing circuit can be configured to provide a change adjustment or modification of buffering in response to the type of application being run at application layer by increasing or decreasing the size of any of buffers or . In the example shown in a high latency application is identified by processing circuit and therefore processing circuit selects a larger size for each of two DMA buffers to make processing circuit interruption tolerant. In this exemplary embodiment should processing circuit detect or identify the playing of an application requiring a lower latency such as a game application processing circuit is configured to reduce or set a smaller size for buffers but maintain the number of buffers at two or some other predetermined number .

According to one exemplary embodiment processing circuit is configured to create buffers in memory at or near the beginning of playback of audio from application layer by designating the buffer number and size. Making a change to a buffer size or number in RAM can be difficult when RAM is actively in use. Accordingly in one exemplary embodiment processing circuit is configured to create or preset a number of buffers e.g. a maximum number of buffers and prior to or during playback decide how many buffers will be filled based on the type of application detected.

According to another exemplary embodiment processing circuit is configured to preset or pre allocate a predetermined buffer size e.g. a maximum buffer size for the double buffer embodiment shown in or at or near the beginning of playback and to resize buffers by way of a DMA controller configuration thereby avoiding the need to modify buffer sizes in memory in RAM. Advantageously this embodiment avoids the use of the memory manager to reallocate RAM while audio playback is running.

As shown in and processing circuit is configured to detect a change from running a high latency application to running a low latency application and to resize DMA buffer by instructing DMA to only use a portion of the buffer allocated in RAM by the memory manager.

According to another exemplary embodiment application layer may be configured to run a plurality of applications simultaneously or concurrently wherein audio data from the applications is intermingled or mixed at audio driver resulting in a single data output channel to DMA buffers . In this example it is possible that DMA buffers simultaneously carry data for both high latency and low latency channels. Processing circuit can be configured to use the buffer size and or number scheme applicable to the low latency e.g. interactive application. According to a further exemplary embodiment processing circuit can be configured to switch back to the buffer management scheme for high latency e.g. streaming applications upon detecting that all audio channels associated with low latency applications are closed or finished. In one exemplary scenario audio data from a phone call application will have the highest priority and mute audio data from all other applications audio data from a game application will play mixed with other audio types but processing circuit provides a low latency playback scheme using DMA buffers audio data from an MP3 player application will play with a high latency scheme provided audio from the phone call application and game application are not present.

According to an exemplary embodiment latencies for a plurality of different applications can be handled by processing circuit dynamically e.g. without user interaction based on the application which is running.

According to an exemplary advantage in one embodiment applications such as streaming applications requiring a higher playback latency can sustain more interruptions without interrupting playback e.g. minimize stutter while interactive applications e.g. requiring lower playback latency can more closely align audio with video outputs on the display. According to another advantage in an exemplary embodiment unknown applications need not be modified to provide certain advantages. According to another exemplary embodiment audio buffer management is done dynamically and variably to adapt to underlying running application requirements.

As described hereinabove processing circuit can be configured to detect the type of application and or identify a characteristic of the application associated with a desired latency. An application can request a predetermined latency requirement by way of a message request flag etc. Alternatively active audio channels can be monitored by processing circuit to detect silence or other characteristic of the application indicative of a desired latency setting.

According to another exemplary embodiment if a low latency or interactive channel is present processing circuit is configured to dynamically lower the amount of DMA buffering provided to support interactive playback.

According to another exemplary embodiment in the absence of interactive or low latency channels DMA buffers are allowed to build up when continuous streamed audio is being played. An increase or decrease in buffer number and or size can be in a single step or in a plurality of steps each step gradually increasing and or decreasing the buffer number and or size over time.

According to one exemplary embodiment audio driver can output 48 kHz sample data to audio hardware . Each sample can take 4 bytes of memory space. A buffer that represents 20 milliseconds of audio data occupies 3840 bytes. In an exemplary embodiment DMA buffers can comprise 10 buffers sized at 3840 bytes see e.g. representing a maximum latency of up to 200 milliseconds. When audio driver is configured to use only two of DMA buffers reconfiguring dynamically using one of the embodiment described hereinabove buffers can each be initialized with 19200 bytes or up to 100 milliseconds of audio data per buffer see e.g. .

Referring now to a flowchart of an exemplary audio buffer management scheme is shown. At step audio data is provided from an application. At step processing circuit is configured to identify whether audio data from any application audio channel is an application of the type or characteristic requiring a low latency buffer management scheme. If so at step the size and or number of buffers in at least one of operating system buffers driver buffers and or DMA buffers . . . N are set for a low latency application. If not said buffers are set for a high latency application . At step audio data is processed in accordance with the buffers set. As discussed hereinabove other steps may also be provided such as provisioning buffers in RAM with the memory manager and then adjusting the size and or number of buffers dynamically by way of instructions to one or more of the layers or drivers in processing circuit such as a DMA controller.

While applications have been identified in some exemplary embodiments based on latency requirements other characteristics of the applications can be identified and used to change e.g. dynamically the size and or number of buffers. Processing circuit can be configured to detect if an audio data stream is paused resumed multiple times which can be indicative of interactive during the period of pause resume activity. Processing circuit can be configured to detect if an audio data stream starves i.e. no more data is available when needed for more than a few seconds which can be indicative of a higher latency application. Processing circuit can be configured to monitor network and or hard drive disk activity and correlate the audio data stream activity to a best guess for a need for higher latency e.g. the network could correlate to a webcast identification while the disk activity could correlate to an MP3 playback . Processing circuit can be configured based on detecting a phone call connect to change rules giving priority to phone call audio at low latency. Processing circuit can be configured to identify the audio stream characteristics such as playback frequency 8 kHz 44.1 kHz 48 kHz number of audio channels per sample number of bytes per sample and also the original encoding used WAV MP3 MPG MIDI etc. and adjust at least one of buffer size and or number based on these or other audio stream characteristics. Processing circuit can be configured to identify the application name that created the audio data streams to provide the best buffer scheme e.g. RealPlayer pTunes and known MP3 players in the Palm Operating System can be indicative of higher latency applications . In this example processing circuit can be configured to store a look up table of application names with associated latency requirements. Processing circuit can identify user and or usage profiling to identify the characteristics of the audio stream being played. In this example processing circuit can be configured to keep a history of stream usage on a daily basis and profile the typical stream types required to best guess other days in which no other information is available. For example a user may listen to a news broadcast always early in the morning and play games at lunch time. Through historical gathering and averaging processing circuit can predict that usage for future dates and base the number and or size of buffers used on the prediction.

While the exemplary embodiments illustrated in the Figs. and described above are presently exemplary it should be understood that these embodiments are offered by way of example only. For example while three layers of buffers are shown in this exemplary embodiment any number of layers of buffers can be used. As another example DMA can be configured to provide a buffer with separate read write and threshold pointers wherein the pointers are programmed to emulate the variable size buffers of . Audio hardware can be configured to operate with the read pointers while audio driver can be configured to operate with the write pointers. Accordingly the present invention is not limited to a particular embodiment but extends to various modifications that nevertheless fall within the scope of the appended claims.

