---

title: Controlling audio operation for data management and data rendering
abstract: Methods, systems, and products are disclosed for controlling audio operation for data management and data rendering. Embodiments include selecting one of a plurality of predetermined audio configurations in dependence upon context information and setting audio operation of a data management and data rendering module to the selected predetermined audio configuration. A predetermined audio configuration typically identifies an audio output device and an audio input device. Some embodiments of the present invention also include creating audio configuration selection rules including receiving from a user audio configurations and associating the audio configurations with predetermined context parameters.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08271107&OS=08271107&RS=08271107
owner: International Business Machines Corporation
number: 08271107
owner_city: Armonk
owner_country: US
publication_date: 20060113
---
The field of the invention is data processing or more specifically methods systems and products for controlling audio operation for data management and data rendering.

Despite having more access to data and having more devices to access that data users are often time constrained. One reason for this time constraint is that users typically must access data of disparate data types from disparate data sources on data type specific devices using data type specific applications. One or more such data type specific devices may be cumbersome for use at a particular time due to any number of external circumstances. Examples of external circumstances that may make data type specific devices cumbersome to use include crowded locations uncomfortable locations such as a train or car user activity such as walking visually intensive activities such as driving and others as will occur to those of skill in the art. There is therefore an ongoing need for data management and data rendering for disparate data types that provides access to uniform data type access to content from disparate data sources.

Methods systems and products are disclosed for controlling audio operation for data management and data rendering. Embodiments include selecting one of a plurality of predetermined audio configurations in dependence upon context information and setting audio operation of a data management and data rendering module to the selected predetermined audio configuration. A predetermined audio configuration typically identifies an audio output device and an audio input device. Some embodiments of the present invention also include creating audio configuration selection rules including receiving from a user audio configurations and associating the audio configurations with predetermined context parameters.

Context information may include current device state information and selecting one of a plurality of predetermined audio configurations in dependence upon the context information and an audio configuration selection rule may be carried out by selecting one of a plurality of predetermined audio configurations in dependence upon the current device state information. Context information may include current geographical coordinates of a device and selecting one of a plurality of predetermined audio configurations in dependence upon the context information and an audio configuration selection rule may be carried out by selecting one of a plurality of predetermined audio configurations in dependence upon the current geographical coordinates of the device.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods systems and products for data management and data rendering for disparate data types from disparate data sources according to embodiments of the present invention are described with reference to the accompanying drawings beginning with . sets forth a network diagram illustrating an exemplary system for data management and data rendering for disparate data types according to the present invention. The system of operates generally to manage and render data for disparate data types according to embodiments of the present invention by aggregating data of disparate data types from disparate data sources synthesizing the aggregated data of disparate data types into data of a uniform data type identifying an action in dependence upon the synthesized data and executing the identified action.

Disparate data types are data of different kind and form. That is disparate data types are data of different kinds. The distinctions in data that define the disparate data types may include a difference in data structure file format protocol in which the data is transmitted and other distinctions as will occur to those of skill in the art. Examples of disparate data types include MPEG 1 Audio Layer 3 MP3 files Extensible markup language documents XML email documents and so on as will occur to those of skill in the art. Disparate data types typically must be rendered on data type specific devices. For example an MPEG 1 Audio Layer 3 MP3 file is typically played by an MP3 player a Wireless Markup Language WML file is typically accessed by a wireless device and so on.

The term disparate data sources means sources of data of disparate data types. Such data sources may be any device or network location capable of providing access to data of a disparate data type. Examples of disparate data sources include servers serving up files web sites cellular phones PDAs MP3 players and so on as will occur to those of skill in the art.

The system of includes a number of devices operating as disparate data sources connected for data communications in networks. The data processing system of includes a wide area network WAN and a local area network LAN . LAN is an abbreviation for local area network. A LAN is a computer network that spans a relatively small area. Many LANs are confined to a single building or group of buildings. However one LAN can be connected to other LANs over any distance via telephone lines and radio waves. A system of LANs connected in this way is called a wide area network WAN . The Internet is an example of a WAN.

In the example of server operates as a gateway between the LAN and the WAN . The network connection aspect of the architecture of is only for explanation not for limitation. In fact systems for data management and data rendering for disparate data types according to embodiments of the present invention may be connected as LANs WANs intranets internets the Internet webs the World Wide Web itself or other connections as will occur to those of skill in the art. Such networks are media that may be used to provide data communications connections between various devices and computers connected together within an overall data processing system.

In the example of a plurality of devices are connected to a LAN and WAN respectively each implementing a data source and each having stored upon it data of a particular data type. In the example of a server is connected to the WAN through a wireline connection . The server of is a data source for an RSS feed which the server delivers in the form of an XML file. RSS is a family of XML file formats for web syndication used by news websites and weblogs. The abbreviation is used to refer to the following standards Rich Site Summary RSS 0.91 RDF Site Summary RSS 0.9 1.0 and 1.1 and Really Simple Syndication RSS 2.0 . The RSS formats provide web content or summaries of web content together with links to the full versions of the content and other meta data. This information is delivered as an XML file called RSS feed webfeed RSS stream or RSS channel.

In the example of another server is connected to the WAN through a wireline connection . The server of is a data source for data stored as a Lotus NOTES file. In the example of a personal digital assistant PDA is connected to the WAN through a wireless connection . The PDA is a data source for data stored in the form of an XHTML Mobile Profile XHTML MP document.

In the example of a cellular phone is connected to the WAN through a wireless connection . The cellular phone is a data source for data stored as a Wireless Markup Language WML file. In the example of a tablet computer is connected to the WAN through a wireless connection . The tablet computer is a data source for data stored in the form of an XHTML MP document.

The system of also includes a digital audio player DAP . The DAP is connected to the LAN through a wireline connection . The digital audio player DAP of is a data source for data stored as an MP3 file. The system of also includes a laptop computer . The laptop computer is connected to the LAN through a wireline connection . The laptop computer of is a data source data stored as a Graphics Interchange Format GIF file. The laptop computer of is also a data source for data in the form of Extensible Hypertext Markup Language XHTML documents.

The system of includes a laptop computer and a smart phone each having installed upon it a data management and rendering module proving uniform access to the data of disparate data types available from the disparate data sources. The exemplary laptop computer of connects to the LAN through a wireless connection . The exemplary smart phone of also connects to the LAN through a wireless connection . The laptop computer and smart phone of have installed and running on them software capable generally of data management and data rendering for disparate data types by aggregating data of disparate data types from disparate data sources synthesizing the aggregated data of disparate data types into data of a uniform data type identifying an action in dependence upon the synthesized data and executing the identified action.

Aggregated data is the accumulation in a single location of data of disparate types. This location of the aggregated data may be either physical such as for example on a single computer containing aggregated data or logical such as for example a single interface providing access to the aggregated data.

Synthesized data is aggregated data which has been synthesized into data of a uniform data type. The uniform data type may be implemented as text content and markup which has been translated from the aggregated data. Synthesized data may also contain additional voice markup inserted into the text content which adds additional voice capability.

Alternatively any of the devices of the system of described as sources may also support a data management and rendering module according to the present invention. For example the server as described above is capable of supporting a data management and rendering module providing uniform access to the data of disparate data types available from the disparate data sources. Any of the devices of as described above such as for example a PDA a tablet computer a cellular phone or any other device as will occur to those of skill in the art are capable of supporting a data management and rendering module according to the present invention.

The arrangement of servers and other devices making up the exemplary system illustrated in are for explanation not for limitation. Data processing systems useful according to various embodiments of the present invention may include additional servers routers other devices and peer to peer architectures not shown in as will occur to those of skill in the art. Networks in such data processing systems may support many data communications protocols including for example TCP Transmission Control Protocol IP Internet Protocol HTTP HyperText Transfer Protocol WAP Wireless Access Protocol HDTP Handheld Device Transport Protocol and others as will occur to those of skill in the art. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

A method for data management and data rendering for disparate data types in accordance with the present invention is generally implemented with computers that is with automated computing machinery. In the system of for example all the nodes servers and communications devices are implemented to some extent at least as computers. For further explanation therefore sets forth a block diagram of automated computing machinery comprising an exemplary computer useful in data management and data rendering for disparate data types according to embodiments of the present invention. The computer of includes at least one computer processor or CPU as well as random access memory RAM which is connected through a system bus to a processor and to other components of the computer.

Stored in RAM is a data management and data rendering module computer program instructions for data management and data rendering for disparate data types capable generally of aggregating data of disparate data types from disparate data sources synthesizing the aggregated data of disparate data types into data of a uniform data type identifying an action in dependence upon the synthesized data and executing the identified action. Data management and data rendering for disparate data types advantageously provides to the user the capability to efficiently access and manipulate data gathered from disparate data type specific resources. Data management and data rendering for disparate data types also provides a uniform data type such that a user may access data gathered from disparate data type specific resources on a single device.

Also stored in RAM is an audio operation module computer program instructions for controlling audio operation for data management and data rendering which include selecting one of a plurality of predetermined audio configurations in dependence upon context information and setting audio operation of a data management and data rendering module to the identified predetermined audio configuration.

Also stored in RAM is an aggregation module computer program instructions for aggregating data of disparate data types from disparate data sources capable generally of receiving from an aggregation process a request for data identifying in response to the request for data one of two or more disparate data sources as a source for data retrieving from the identified data source the requested data and returning to the aggregation process the requested data. Aggregating data of disparate data types from disparate data sources advantageously provides the capability to collect data from multiple sources for synthesis.

Also stored in RAM is a synthesis engine computer program instructions for synthesizing aggregated data of disparate data types into data of a uniform data type capable generally of receiving aggregated data of disparate data types and translating each of the aggregated data of disparate data types into translated data composed of text content and markup associated with the text content. Synthesizing aggregated data of disparate data types into data of a uniform data type advantageously provides synthesized data of a uniform data type which is capable of being accessed and manipulated by a single device.

Also stored in RAM is an action generator module a set of computer program instructions for identifying actions in dependence upon synthesized data and often user instructions. Identifying an action in dependence upon the synthesized data advantageously provides the capability of interacting with and managing synthesized data.

Also stored in RAM is an action agent a set of computer program instructions for administering the execution of one or more identified actions. Such execution may be executed immediately upon identification periodically after identification or scheduled after identification as will occur to those of skill in the art.

Also stored in RAM is a dispatcher computer program instructions for receiving from an aggregation process a request for data identifying in response to the request for data one of a plurality of disparate data sources as a source for the data retrieving from the identified data source the requested data and returning to the aggregation process the requested data. Receiving from an aggregation process a request for data identifying in response to the request for data one of a plurality of disparate data sources as a source for the data retrieving from the identified data source the requested data and returning to the aggregation process the requested data advantageously provides the capability to access disparate data sources for aggregation and synthesis.

The dispatcher of also includes a plurality of plug in modules computer program instructions for retrieving from a data source associated with the plug in requested data for use by an aggregation process. Such plug ins isolate the general actions of the dispatcher from the specific requirements needed to retrieved data of a particular type.

Also stored in RAM is a browser computer program instructions for providing an interface for the user to synthesized data. Providing an interface for the user to synthesized data advantageously provides a user access to content of data retrieved from disparate data sources without having to use data source specific devices. The browser of is capable of multimodal interaction capable of receiving multimodal input and interacting with users through multimodal output. Such multimodal browsers typically support multimodal web pages that provide multimodal interaction through hierarchical menus that may be speech driven.

Also stored in RAM is an OSGi Service Framework running on a Java Virtual Machine JVM . OSGi refers to the Open Service Gateway initiative an industry organization developing specifications delivery of service bundles software middleware providing compliant data communications and services through services gateways. The OSGi specification is a Java based application layer framework that gives service providers network operator device makers and appliance manufacturer s vendor neutral application and device layer APIs and functions. OSGi works with a variety of networking technologies like Ethernet Bluetooth the Home Audio and Video Interoperability standard HAVi IEEE 1394 Universal Serial Bus USB WAP X 10 Lon Works HomePlug and various other networking technologies. The OSGi specification is available for free download from the OSGi website at www.osgi.org.

An OSGi service framework is written in Java and therefore typically runs on a Java Virtual Machine JVM . In OSGi the service framework is a hosting platform for running services . The term service or services in this disclosure depending on context generally refers to OSGi compliant services.

Services are the main building blocks for creating applications according to the OSGi. A service is a group of Java classes and interfaces that implement a certain feature. The OSGi specification provides a number of standard services. For example OSGi provides a standard HTTP service that creates a web server that can respond to requests from HTTP clients.

OSGi also provides a set of standard services called the Device Access Specification. The Device Access Specification DAS provides services to identify a device connected to the services gateway search for a driver for that device and install the driver for the device.

Services in OSGi are packaged in bundles with other files images and resources that the services need for execution. A bundle is a Java archive or JAR file including one or more service implementations an activator class and a manifest file. An activator class is a Java class that the service framework uses to start and stop a bundle. A manifest file is a standard text file that describes the contents of the bundle.

The service framework in OSGi also includes a service registry. The service registry includes a service registration including the service s name and an instance of a class that implements the service for each bundle installed on the framework and registered with the service registry. A bundle may request services that are not included in the bundle but are registered on the framework service registry. To find a service a bundle performs a query on the framework s service registry.

Data management and data rendering according to embodiments of the present invention may be usefully invoke one ore more OSGi services. OSGi is included for explanation and not for limitation. In fact data management and data rendering according embodiments of the present invention may usefully employ many different technologies an all such technologies are well within the scope of the present invention.

Also stored in RAM is an operating system . Operating systems useful in computers according to embodiments of the present invention include UNIX Linux Microsoft Windows XP AIX IBM s i5 OS and others as will occur to those of skill in the art. The operating system and data management and data rendering module in the example of are shown in RAM but many components of such software typically are stored in non volatile memory also.

Computer of includes non volatile computer memory coupled through a system bus to a processor and to other components of the computer . Non volatile computer memory may be implemented as a hard disk drive an optical disk drive an electrically erasable programmable read only memory space so called EEPROM or Flash memory RAM drives not shown or as any other kind of computer memory as will occur to those of skill in the art.

The example computer of includes one or more input output interface adapters . Input output interface adapters in computers implement user oriented input output through for example software drivers and computer hardware for controlling output to display devices such as computer display screens as well as user input from user input devices such as keyboards and mice.

The exemplary computer of includes a communications adapter for implementing data communications with other computers . Such data communications may be carried out serially through RS 232 connections through external buses such as a USB through data communications networks such as IP networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a network. Examples of communications adapters useful for data management and data rendering for disparate data types from disparate data sources according to embodiments of the present invention include modems for wired dial up communications Ethernet IEEE 802.3 adapters for wired network communications and 802.11b adapters for wireless network communications.

For further explanation sets forth a block diagram depicting a system for data management and data rendering for disparate data types according to of the present invention. The system of includes an aggregation module computer program instructions for aggregating data of disparate data types from disparate data sources capable generally of receiving from an aggregation process a request for data identifying in response to the request for data one of two or more disparate data sources as a source for data retrieving from the identified data source the requested data and returning to the aggregation process the requested data.

The system of includes a synthesis engine computer program instructions for synthesizing aggregated data of disparate data types into data of a uniform data type capable generally of receiving aggregated data of disparate data types and translating each of the aggregated data of disparate data types into translated data composed of text content and markup associated with the text content.

The synthesis engine includes a VXML Builder module computer program instructions for translating each of the aggregated data of disparate data types into text content and markup associated with the text content. The synthesis engine also includes a grammar builder module computer program instructions for generating grammars for voice markup associated with the text content.

The system of includes a synthesized data repository data storage for the synthesized data created by the synthesis engine in X V format. The system of also includes an X V browser computer program instructions capable generally of presenting the synthesized data from the synthesized data repository to the user. Presenting the synthesized data may include both graphical display and audio representation of the synthesized data. As discussed below with reference to one way presenting the synthesized data to a user may be carried out is by presenting synthesized data through one or more channels.

The system of includes a dispatcher module computer program instructions for receiving from an aggregation process a request for data identifying in response to the request for data one of a plurality of disparate data sources as a source for the data retrieving from the identified data source the requested data and returning to the aggregation process the requested data. The dispatcher module accesses data of disparate data types from disparate data sources for the aggregation module the synthesis engine and the action agent . The system of includes data source specific plug ins used by the dispatcher to access data as discussed below.

In the system of the data sources include local data and content servers . Local data is data contained in memory or registers of the automated computing machinery. In the system of the data sources also include content servers . The content servers are connected to the dispatcher module through a network . An RSS server of is a data source for an RSS feed which the server delivers in the form of an XML file. RSS is a family of XML file formats for web syndication used by news websites and weblogs. The abbreviation is used to refer to the following standards Rich Site Summary RSS 0.91 RDF Site Summary RSS 0.9 1.0 and 1.1 and Really Simple Syndication RSS 2.0 . The RSS formats provide web content or summaries of web content together with links to the full versions of the content and other meta data. This information is delivered as an XML file called RSS feed webfeed RSS stream or RSS channel.

In the system of an email server is a data source for email. The server delivers this email in the form of a Lotus NOTES file. In the system of a calendar server is a data source for calendar information. Calendar information includes calendared events and other related information. The server delivers this calendar information in the form of a Lotus NOTES file.

In the system of an IBM On Demand Workstation a server providing support for an On Demand Workplace ODW that provides productivity tools and a virtual space to share ideas and expertise collaborate with others and find information.

The system of includes data source specific plug ins . For each data source listed above the dispatcher uses a specific plug in to access data.

The system of includes an RSS plug in associated with an RSS server running an RSS application. The RSS plug in of retrieves the RSS feed from the RSS server for the user and provides the RSS feed in an XML file to the aggregation module.

The system of includes a calendar plug in associated with a calendar server running a calendaring application. The calendar plug in of retrieves calendared events from the calendar server for the user and provides the calendared events to the aggregation module.

The system of includes an email plug in associated with an email server running an email application. The email plug in of retrieves email from the email server for the user and provides the email to the aggregation module.

The system of includes an On Demand Workstation ODW plug in associated with an ODW server running an ODW application. The ODW plug in of retrieves ODW data from the ODW server for the user and provides the ODW data to the aggregation module.

The system of also includes an action generator module computer program instructions for identifying an action from the action repository in dependence upon the synthesized data capable generally of receiving a user instruction selecting synthesized data in response to the user instruction and selecting an action in dependence upon the user instruction and the selected data.

The action generator module I contains an embedded server . The embedded server receives user instructions through the X V browser . Upon identifying an action from the action repository the action generator module employs the action agent to execute the action. The system of includes an action agent computer program instructions for executing an action capable generally of executing actions.

For further explanation sets forth a flow chart illustrating an exemplary method for data management and data rendering for disparate data types according to embodiments of the present invention. The method of includes aggregating data of disparate data types from disparate data sources . As discussed above aggregated data of disparate data types is the accumulation in a single location of data of disparate types. This location of the aggregated data may be either physical such as for example on a single computer containing aggregated data or logical such as for example a single interface providing access to the aggregated data.

Aggregating data of disparate data types from disparate data sources according to the method of may be carried out by receiving from an aggregation process a request for data identifying in response to the request for data one of two or more disparate data sources as a source for data retrieving from the identified data source the requested data and returning to the aggregation process the requested data as discussed in more detail below with reference to .

The method of also includes synthesizing the aggregated data of disparate data types into data of a uniform data type. Data of a uniform data type is data having been created or translated into a format of predetermined type. That is uniform data types are data of a single kind that may be rendered on a device capable of rendering data of the uniform data type. Synthesizing the aggregated data of disparate data types into data of a uniform data type advantageously results in a single point of access for the content of the aggregation of disparate data retrieved from disparate data sources.

One example of a uniform data type useful in synthesizing aggregated data of disparate data types into data of a uniform data type is XHTML plus Voice. XHTML plus Voice X V is a Web markup language for developing multimodal applications by enabling voice in a presentation layer with voice markup. X V provides voice based interaction in small and mobile devices using both voice and visual elements. X V is composed of three main standards XHTML VoiceXML and XML Events. Given that the Web application environment is event driven X V incorporates the Document Object Model DOM eventing framework used in the XML Events standard. Using this framework X V defines the familiar event types from HTML to create the correlation between visual and voice markup.

Synthesizing the aggregated data of disparate data types into data of a uniform data type may be carried out by receiving aggregated data of disparate data types and translating each of the aggregated data of disparate data types into text content and markup associated with the text content as discussed in more detail with reference to . In the method of synthesizing the aggregated data of disparate data types into data of a uniform data type may be carried out by translating the aggregated data into X V or any other markup language as will occur to those of skill in the art.

The method for data management and data rendering of also includes identifying an action in dependence upon the synthesized data . An action is a set of computer instructions that when executed carry out a predefined task. The action may be executed in dependence upon the synthesized data immediately or at some defined later time. Identifying an action in dependence upon the synthesized data may be carried out by receiving a user instruction selecting synthesized data in response to the user instruction and selecting an action in dependence upon the user instruction and the selected data.

A user instruction is an event received in response to an act by a user. Exemplary user instructions include receiving events as a result of a user entering a combination of keystrokes using a keyboard or keypad receiving speech from a user receiving an event as a result of clicking on icons on a visual display by using a mouse receiving an event as a result of a user pressing an icon on a touchpad or other user instructions as will occur to those of skill in the art. Receiving a user instruction may be carried out by receiving speech from a user converting the speech to text and determining in dependence upon the text and a grammar the user instruction. Alternatively receiving a user instruction may be carried out by receiving speech from a user and determining the user instruction in dependence upon the speech and a grammar.

The method of also includes executing the identified action . Executing the identified action may be carried out by calling a member method in an action object identified in dependence upon the synthesized data executing computer program instructions carrying out the identified action as well as other ways of executing an identified action as will occur to those of skill in the art. Executing the identified action may also include determining the availability of a communications network required to carry out the action and executing the action only if the communications network is available and postponing executing the action if the communications network connection is not available. Postponing executing the action if the communications network connection is not available may include enqueuing identified actions into an action queue storing the actions until a communications network is available and then executing the identified actions. Another way that waiting to execute the identified action may be carried out is by inserting an entry delineating the action into a container and later processing the container. A container could be any data structure suitable for storing an entry delineating an action such as for example an XML file.

Executing the identified action may include modifying the content of data of one of the disparate data sources. Consider for example an action called deleteOldEmail that when executed deletes not only synthesized data translated from email but also deletes the original source email stored on an email server coupled for data communications with a data management and data rendering module operating according to the present invention.

The method of also includes channelizing the synthesized data . A channel is a logical aggregation of data content for presentation to a user. Channelizing the synthesized data may be carried out by identifying attributes of the synthesized data characterizing the attributes of the synthesized data and assigning the data to a predetermined channel in dependence upon the characterized attributes and channel assignment rules. Channelizing the synthesized data advantageously provides a vehicle for presenting related content to a user. Examples of such channelized data may be a work channel that provides a channel of work related content an entertainment channel that provides a channel of entertainment content an so on as will occur to those of skill in the art.

The method of may also include presenting the synthesized data to a user through one or more channels. One way presenting the synthesized data to a user through one or more channels may be carried out is by presenting summaries or headings of available channels. The content presented through those channels can be accessed via this presentation in order to access the synthesized data . Another way presenting the synthesized data to a user through one or more channels may be carried out by displaying or playing the synthesized data contained in the channel. Text might be displayed visually or it could be translated into a simulated voice and played for the user.

For further explanation sets forth a flow chart illustrating an exemplary method for aggregating data of disparate data types from disparate data sources according to embodiments of the present invention. In the method of aggregating data of disparate data types from disparate data sources includes receiving from an aggregation process a request for data . A request for data may be implemented as a message from the aggregation process to a dispatcher instructing the dispatcher to initiate retrieving the requested data and returning the requested data to the aggregation process.

In the method of aggregating data of disparate data types from disparate data sources also includes identifying in response to the request for data one of a plurality of disparate data sources as a source for the data. Identifying in response to the request for data one of a plurality of disparate data sources as a source for the data may be carried in a number of ways. One way of identifying one of a plurality of disparate data sources as a source for the data may be carried out by receiving from a user an identification of the disparate data source and identifying to the aggregation process the disparate data source in dependence upon the identification as discussed in more detail below with reference to .

Another way of identifying to the aggregation process disparate data sources is carried out by identifying from the request for data data type information and identifying from the data source table sources of data that correspond to the data type as discussed in more detail below with reference to . Still another way of identifying one of a plurality of data sources is carried out by identifying from the request for data data type information searching in dependence upon the data type information for a data source and identifying from the search results returned in the data source search sources of data corresponding to the data type also discussed below in more detail with reference to .

The three methods for identifying one of a plurality of data sources described in this specification are for explanation and not for limitation. In fact there are many ways of identifying one of a plurality of data sources and all such ways are well within the scope of the present invention.

The method for aggregating data of includes retrieving from the identified data source the requested data . Retrieving from the identified data source the requested data includes determining whether the identified data source requires data access information to retrieve the requested data retrieving in dependence upon data elements contained in the request for data the data access information if the identified data source requires data access information to retrieve the requested data and presenting the data access information to the identified data source as discussed in more detail below with reference to . Retrieving the requested data according the method of may be carried out by retrieving the data from memory locally downloading the data from a network location or any other way of retrieving the requested data that will occur to those of skill in the art. As discussed above retrieving from the identified data source the requested data may be carried out by a data source specific plug in designed to retrieve data from a particular data source or a particular type of data source.

In the method of aggregating data of disparate data types from disparate data sources also includes returning to the aggregation process the requested data . Returning to the aggregation process the requested data returning the requested data to the aggregation process in a message storing the data locally and returning a pointer pointing to the location of the stored data to the aggregation process or any other way of returning the requested data that will occur to those of skill in the art.

As discussed above with reference to aggregating data of includes retrieving from the identified data source the requested data. For further explanation therefore sets forth a flow chart illustrating an exemplary method for retrieving from the identified data source the requested data according to embodiments of the present invention. In the method of retrieving from the identified data source the requested data includes determining whether the identified data source requires data access information to retrieve the requested data . As discussed above in reference to data access information is information which is required to access some types of data from some of the disparate sources of data. Exemplary data access information includes account names account numbers passwords or any other data access information that will occur to those of skill in the art.

Determining whether the identified data source requires data access information to retrieve the requested data may be carried out by attempting to retrieve data from the identified data source and receiving from the data source a prompt for data access information required to retrieve the data. Alternatively instead of receiving a prompt from the data source each time data is retrieved from the data source determining whether the identified data source requires data access information to retrieve the requested data may be carried out once by for example a user and provided to a dispatcher such that the required data access information may be provided to a data source with any request for data without prompt. Such data access information may be stored in for example a data source table identifying any corresponding data access information needed to access data from the identified data source.

In the method of retrieving from the identified data source the requested data also includes retrieving in dependence upon data elements contained in the request for data the data access information if the identified data source requires data access information to retrieve the requested data . Data elements contained in the request for data are typically values of attributes of the request for data . Such values may include values identifying the type of data to be accessed values identifying the location of the disparate data source for the requested data or any other values of attributes of the request for data.

Such data elements contained in the request for data are useful in retrieving data access information required to retrieve data from the disparate data source. Data access information needed to access data sources for a user may be usefully stored in a record associated with the user indexed by the data elements found in all requests for data from the data source. Retrieving in dependence upon data elements contained in the request for data the data access information according to may therefore be carried out by retrieving from a database in dependence upon one or more data elements in the request a record containing the data access information and extracting from the record the data access information. Such data access information may be provided to the data source to retrieve the data.

Retrieving in dependence upon data elements contained in the request for data the data access information if the identified data source requires data access information to retrieve the requested data may be carried out by identifying data elements contained in the request for data parsing the data elements to identify data access information needed to retrieve the requested data identifying in a data access table the correct data access information and retrieving the data access information .

The exemplary method of for retrieving from the identified data source the requested data also includes presenting the data access information to the identified data source . Presenting the data access information to the identified data source according to the method of may be carried out by providing in the request the data access information as parameters to the request or providing the data access information in response to a prompt for such data access information by a data source. That is presenting the data access information to the identified data source may be carried out by a selected data source specific plug in of a dispatcher that provides data access information for the identified data source in response to a prompt for such data access information. Alternatively presenting the data access information to the identified data source may be carried out by a selected data source specific plug in of a dispatcher that passes as parameters to request the data access information for the identified data source without prompt.

As discussed above aggregating data of disparate data types from disparate data sources according to embodiments of the present invention typically includes identifying to the aggregation process disparate data sources. That is prior to requesting data from a particular data source that data source typically is identified to an aggregation process. For further explanation therefore sets forth a flow chart illustrating an exemplary method for aggregating data of disparate data types from disparate data sources according to the present invention that includes identifying to the aggregation process disparate data sources . In the method of identifying to the aggregation process disparate data sources includes receiving from a user a selection of the disparate data source. A user is typically a person using a data management a data rendering system to manage and render data of disparate data types from disparate data sources according to the present invention. Receiving from a user a selection of the disparate data source may be carried out by receiving through a user interface of a data management and data rendering application from the user a user instruction containing a selection of the disparate data source and identifying to the aggregation process the disparate data source in dependence upon the selection . A user instruction is an event received in response to an act by a user such as an event created as a result of a user entering a combination of keystrokes using a keyboard or keypad receiving speech from a user receiving an clicking on icons on a visual display by using a mouse pressing an icon on a touchpad or other use act as will occur to those of skill in the art. A user interface in a data management and data rendering application may usefully provide a vehicle for receiving user selections of particular disparate data sources.

In the example of identifying disparate data sources to an aggregation process is carried out by a user. Identifying disparate data sources may also be carried out by processes that require limited or no user interaction. For further explanation sets forth a flow chart illustrating an exemplary method for aggregating data of disparate data types from disparate data sources requiring little or no user action that includes identifying to the aggregation process disparate data sources includes identifying from a request for data data type information . Disparate data types identify data of different kind and form. That is disparate data types are data of different kinds. The distinctions in data that define the disparate data types may include a difference in data structure file format protocol in which the data is transmitted and other distinctions as will occur to those of skill in the art. Data type information is information representing these distinctions in data that define the disparate data types.

Identifying from the request for data data type information according to the method of may be carried out by extracting a data type code from the request for data. Alternatively identifying from the request for data data type information may be carried out by inferring the data type of the data being requested from the request itself such as by extracting data elements from the request and inferring from those data elements the data type of the requested data or in other ways as will occur to those of skill in the art.

In the method for aggregating of identifying to the aggregation process disparate data sources also includes identifying from a data source table sources of data corresponding to the data type . A data source table is a table containing identification of disparate data sources indexed by the data type of the data retrieved from those disparate data sources. Identifying from a data source table sources of data corresponding to the data type may be carried out by performing a lookup on the data source table in dependence upon the identified data type.

In some cases no such data source may be found for the data type or no such data source table is available for identifying a disparate data source. In the method of therefore includes an alternative method for identifying to the aggregation process disparate data sources that includes searching in dependence upon the data type information for a data source and identifying from search results returned in the data source search sources of data corresponding to the data type . Searching in dependence upon the data type information for a data source may be carried out by creating a search engine query in dependence upon the data type information and querying the search engine with the created query. Querying a search engine may be carried out through the use of URL encoded data passed to a search engine through for example an HTTP GET or HTTP POST function. URL encoded data is data packaged in a URL for data communications in this case passing a query to a search engine. In the case of HTTP communications the HTTP GET and POST functions are often used to transmit URL encoded data. In this context it is useful to remember that URLs do more than merely request file transfers. URLs identify resources on servers. Such resources may be files having filenames but the resources identified by URLs also include for example queries to databases. Results of such queries do not necessarily reside in files but they are nevertheless data resources identified by URLs and identified by a search engine and query data that produce such resources. An example of URL encoded data is http www.example.com search field1 value1 field2 value2

This example of URL encoded data representing a query that is submitted over the web to a search engine. More specifically the example above is a URL bearing encoded data representing a query to a search engine and the query is the string field1 value1 field2 value2. The exemplary encoding method is to string field names and field values separated by and and designate the encoding as a query by including search in the URL. The exemplary URL encoded search query is for explanation and not for limitation. In fact different search engines may use different syntax in representing a query in a data encoded URL and therefore the particular syntax of the data encoding may vary according to the particular search engine queried.

Identifying from search results returned in the data source search sources of data corresponding to the data type may be carried out by retrieving URLs to data sources from hyperlinks in a search results page returned by the search engine.

As discussed above data management and data rendering for disparate data types includes synthesizing aggregated data of disparate data types into data of a uniform data type. For further explanation sets forth a flow chart illustrating a method for synthesizing aggregated data of disparate data types into data of a uniform data type. As discussed above aggregated data of disparate data types is the accumulation in a single location of data of disparate types. This location of the aggregated data may be either physical such as for example on a single computer containing aggregated data or logical such as for example a single interface providing access to the aggregated data. Also as discussed above disparate data types are data of different kind and form. That is disparate data types are data of different kinds. Data of a uniform data type is data having been created or translated into a format of predetermined type. That is uniform data types are data of a single kind that may be rendered on a device capable of rendering data of the uniform data type. Synthesizing aggregated data of disparate data types into data of a uniform data type advantageously makes the content of the disparate data capable of being rendered on a single device.

In the method of synthesizing aggregated data of disparate data types into data of a uniform data type includes receiving aggregated data of disparate data types. Receiving aggregated data of disparate data types may be carried out by receiving from aggregation process having accumulated the disparate data data of disparate data types from disparate sources for synthesizing into a uniform data type.

In the method for synthesizing of synthesizing the aggregated data of disparate data types into data of a uniform data type also includes translating each of the aggregated data of disparate data types into text content and markup associated with the text content. Translating each of the aggregated data of disparate data types into text content and markup associated with the text content according to the method of includes representing in text and markup the content of the aggregated data such that a browser capable of rendering the text and markup may render from the translated data the same content contained in the aggregated data prior to being synthesized.

In the method of translating each of the aggregated data of disparate data types into text content and markup may be carried out by creating an X V document for the aggregated data including text markup grammars and so on as will be discussed in more detail below with reference to . The use of X V is for explanation and not for limitation. In fact other markup languages may be useful in synthesizing the aggregated data of disparate data types into data of a uniform data type according to the present invention such as XML VXML or any other markup language as will occur to those of skill in the art.

Translating each of the aggregated data of disparate data types into text content and markup such that a browser capable of rendering the text and markup may render from the translated data the same content contained in the aggregated data prior to being synthesized may include augmenting the content in translation in some way. That is translating aggregated data types into text and markup may result in some modification to the content of the data or may result in deletion of some content that cannot be accurately translated. The quantity of such modification and deletion will vary according to the type of data being translated as well as other factors as will occur to those of skill in the art.

Translating each of the aggregated data of disparate data types into text content and markup associated with the text content may be carried out by translating the aggregated data into text and markup and parsing the translated content dependent upon data type. Parsing the translated content dependent upon data type means identifying the structure of the translated content and identifying aspects of the content itself and creating markup representing the identified structure and content.

Consider for further explanation the following markup language depiction of a snippet of audio clip describing the president.

In the example above an MP3 audio file is translated into text and markup. The header in the example above identifies the translated data as having been translated from an MP3 audio file. The exemplary header also includes keywords included in the content of the translated document and the frequency with which those keywords appear. The exemplary translated data also includes content identified as some content about the president. 

As discussed above one useful uniform data type for synthesized data is XHTML plus Voice. XHTML plus Voice X V is a Web markup language for developing multimodal applications by enabling voice with voice markup. X V provides voice based interaction in devices using both voice and visual elements. Voice enabling the synthesized data for data management and data rendering according to embodiments of the present invention is typically carried out by creating grammar sets for the text content of the synthesized data. A grammar is a set of words that may be spoken patterns in which those words may be spoken or other language elements that define the speech recognized by a speech recognition engine. Such speech recognition engines are useful in a data management and rendering engine to provide users with voice navigation of and voice interaction with synthesized data.

For further explanation therefore sets forth a flow chart illustrating a method for synthesizing aggregated data of disparate data types into data of a uniform data type that includes dynamically creating grammar sets for the text content of synthesized data for voice interaction with a user. Synthesizing aggregated data of disparate data types into data of a uniform data type according to the method of includes receiving aggregated data of disparate data types . As discussed above receiving aggregated data of disparate data types may be carried out by receiving from aggregation process having accumulated the disparate data data of disparate data types from disparate sources for synthesizing into a uniform data type.

The method of for synthesizing aggregated data of disparate data types into data of a uniform data type also includes translating each of the aggregated data of disparate data types into translated data comprising text content and markup associated with the text content. As discussed above translating each of the aggregated data of disparate data types into text content and markup associated with the text content includes representing in text and markup the content of the aggregated data such that a browser capable of rendering the text and markup may render from the translated data the same content contained in the aggregated data prior to being synthesized. In some cases translating the aggregated data of disparate data types into text content and markup such that a browser capable of rendering the text and markup may include augmenting or deleting some of the content being translated in some way as will occur to those of skill in the art.

In the method of translating each of the aggregated data of disparate data types into translated data comprising text content and markup may be carried out by creating an X V document for the synthesized data including text markup grammars and so on as will be discussed in more detail below. The use of X V is for explanation and not for limitation. In fact other markup languages may be useful in translating each of the aggregated data of disparate data types into translated data comprising text content and markup associated with the text content as will occur to those of skill in the art.

The method of for synthesizing aggregated data of disparate data types into data of a uniform data type may include dynamically creating grammar sets for the text content. As discussed above a grammar is a set of words that may be spoken patterns in which those words may be spoken or other language elements that define the speech recognized by a speech recognition engine

In the method of dynamically creating grammar sets for the text content also includes identifying keywords in the translated data determinative of content or logical structure and including the identified keywords in a grammar associated with the translated data. Keywords determinative of content are words and phrases defining the topics of the content of the data and the information presented the content of the data. Keywords determinative of logical structure are keywords that suggest the form in which information of the content of the data is presented. Examples of logical structure include typographic structure hierarchical structure relational structure and other logical structures as will occur to those of skill in the art.

Identifying keywords in the translated data determinative of content may be carried out by searching the translated text for words that occur in a text more often than some predefined threshold. The frequency of the word exceeding the threshold indicates that the word is related to the content of the translated text because the predetermined threshold is established as a frequency of use not expected to occur by chance alone. Alternatively a threshold may also be established as a function rather than a static value. In such cases the threshold value for frequency of a word in the translated text may be established dynamically by use of a statistical test which compares the word frequencies in the translated text with expected frequencies derived statistically from a much larger corpus. Such a larger corpus acts as a reference for general language use.

Identifying keywords in the translated data determinative of logical structure may be carried out by searching the translated data for predefined words determinative of structure. Examples of such words determinative of logical structure include introduction table of contents chapter stanza index and many others as will occur to those of skill in the art.

In the method of dynamically creating grammar sets for the text content also includes creating grammars in dependence upon the identified keywords and grammar creation rules . Grammar creation rules are a pre defined set of instructions and grammar form for the production of grammars. Creating grammars in dependence upon the identified keywords and grammar creation rules may be carried out by use of scripting frameworks such as JavaServer Pages Active Server Pages PHP Per1 XML from translated data. Such dynamically created grammars may be stored externally and referenced in for example X V the tag that is used to reference external grammars.

The method of for synthesizing aggregated data of disparate data types into data of a uniform data type includes associating the grammar sets with the text content. Associating the grammar sets with the text content includes inserting markup defining the created grammar into the translated data . Inserting markup in the translated data may be carried out by creating markup defining the dynamically created grammar inserting the created markup into the translated document.

The method of also includes associating an action with the grammar. As discussed above an action is a set of computer instructions that when executed carry out a predefined task. Associating an action with the grammar thereby provides voice initiation of the action such that the associated action is invoked in response to the recognition of one or more words or phrases of the grammar.

As discussed above data management and data rendering for disparate data types includes identifying an action in dependence upon the synthesized data. For further explanation sets forth a flow chart illustrating an exemplary method for identifying an action in dependence upon the synthesized data including receiving a user instruction and identifying an action in dependence upon the synthesized data and the user instruction. In the method of identifying an action may be carried out by retrieving an action ID from an action list. In the method of retrieving an action ID from an action list includes retrieving from a list the identification of the action the action ID to be executed in dependence upon the user instruction and the synthesized data. The action list can be implemented for example as a Java list container as a table in random access memory as a SQL database table with storage on a hard drive or CD ROM and in other ways as will occur to those of skill in the art. As mentioned above the actions themselves comprise software and so can be implemented as concrete action classes embodied for example in a Java package imported into a data management and data rendering module at compile time and therefore always available during run time.

In the method of receiving a user instruction includes receiving speech from a user converting the speech to text determining in dependence upon the text and a grammar the user instruction and determining in dependence upon the text and a grammar a parameter for the user instruction . As discussed above with reference to a user instruction is an event received in response to an act by a user. A parameter to a user instruction is additional data further defining the instruction. For example a user instruction for delete email may include the parameter Aug. 11 2005 defining that the email of Aug. 11 2005 is the synthesized data upon which the action invoked by the user instruction is to be performed. Receiving speech from a user converting the speech to text determining in dependence upon the text and a grammar the user instruction and determining in dependence upon the text and a grammar a parameter for the user instruction may be carried out by a speech recognition engine incorporated into a data management and data rendering module according to the present invention.

Identifying an action in dependence upon the synthesized data according to the method of also includes selecting synthesized data in response to the user instruction . Selecting synthesized data in response to the user instruction may be carried out by selecting synthesized data identified by the user instruction . Selecting synthesized data may also be carried out by selecting the synthesized data in dependence upon a parameter of the user instruction .

Selecting synthesized data in response to the user instruction may be carried out by selecting synthesized data context information . Context information is data describing the context in which the user instruction is received such as for example state information of currently displayed synthesized data time of day day of week system configuration properties of the synthesized data or other context information as will occur to those of skill in the art. Context information may be usefully used instead or in conjunction with parameters to the user instruction identified in the speech. For example the context information identifying that synthesized data translated from an email document is currently being displayed may be used to supplement the speech user instruction delete email to identify upon which synthesized data to perform the action for deleting an email.

Identifying an action in dependence upon the synthesized data according to the method of also includes selecting an action in dependence upon the user instruction and the selected data . Selecting an action in dependence upon the user instruction and the selected data may be carried out by selecting an action identified by the user instruction. Selecting an action may also be carried out by selecting the action in dependence upon a parameter of the user instructions and by selecting the action in dependence upon a context information . In the example of selecting an action is carried out by retrieving an action from an action database in dependence upon one or more a user instructions parameters or context information.

Executing the identified action may be carried out by use of a switch statement in an action agent of a data management and data rendering module. Such a switch statement can be operated in dependence upon the action ID and implemented for example as illustrated by the following segment of pseudocode 

The exemplary switch statement selects an action to be performed on synthesized data for execution depending on the action ID. The tasks administered by the switch in this example are concrete action classes named actionNumber1 actionNumber2 and so on each having an executable member method named take action which carries out the actual work implemented by each action class.

Executing an action may also be carried out in such embodiments by use of a hash table in an action agent of a data management and data rendering module. Such a hash table can store references to action object keyed by action ID as shown in the following pseudocode example. This example begins by an action service s creating a hashtable of actions references to objects of concrete action classes associated with a user instruction. In many embodiments it is an action service that creates such a hashtable fills it with references to action objects pertinent to a particular user instruction and returns a reference to the hashtable to a calling action agent.

Executing an action may also be carried out by use of list. Lists often function similarly to hashtables. Executing a particular action for example can be carried out according to the following pseudocode 

The three examples above use switch statements hash tables and list objects to explain executing actions according to embodiments of the present invention. The use of switch statements hash tables and list objects in these examples are for explanation not for limitation. In fact there are many ways of executing actions according to embodiments of the present invention as will occur to those of skill in the art and all such ways are well within the scope of the present invention.

For further explanation of identifying an action in dependence upon the synthesized data consider the following example of user instruction that identifies an action a parameter for the action and the synthesized data upon which to perform the action. A user is currently viewing synthesized data translated from email and issues the following speech instruction Delete email dated Aug. 15 2005. In the current example identifying an action in dependence upon the synthesized data is carried out by selecting an action to delete and synthesized data in dependence upon the user instruction by identifying a parameter for the delete email action identifying that only one email is to be deleted and by selecting synthesized data translated from the email of Aug. 15 2005 in response to the user instruction.

For further explanation of identifying an action in dependence upon the synthesized data consider the following example of user instruction that does not specifically identify the synthesized data upon which to perform an action. A user is currently viewing synthesized data translated from a series of emails and issues the following speech instruction Delete current email. In the current example identifying an action in dependence upon the synthesized data is carried out by selecting an action to delete synthesized data in dependence upon the user instruction. Selecting synthesized data upon which to perform the action however in this example is carried out in dependence upon the following data selection rule that makes use of context information.

The exemplary data selection rule above identifies that if synthesized data is displayed then the displayed synthesized data is current and if the synthesized data includes an email type code then the synthesized data is email. Context information is used to identify currently displayed synthesized data translated from an email and bearing an email type code. Applying the data selection rule to the exemplary user instruction delete current email therefore results in deleting currently displayed synthesized data having an email type code.

As discussed above data management and data rendering for disparate data types often includes channelizing the synthesized data. Channelizing the synthesized data advantageously results in the separation of synthesized data into logical channels. A channel implemented as a logical accumulation of synthesized data sharing common attributes having similar characteristics. Examples of such channels are entertainment channel for synthesized data relating to entertainment work channel for synthesized data relating to work family channel for synthesized data relating to a user s family and so on.

For further explanation therefore sets forth a flow chart illustrating an exemplary method for channelizing the synthesized data according to the present invention which includes identifying attributes of the synthesized data . Attributes of synthesized data are aspects of the data which may be used to characterize the synthesized data . Exemplary attributes include the type of the data metadata present in the data logical structure of the data presence of particular keywords in the content of the data the source of the data the application that created the data URL of the source author subject date created and so on. Identifying attributes of the synthesized data may be carried out by comparing contents of the synthesized data with a list of predefined attributes. Another way that identifying attributes of the synthesized data may be carried out by comparing metadata associated with the synthesized data with a list of predefined attributes.

The method of for channelizing the synthesized data also includes characterizing the attributes of the synthesized data . Characterizing the attributes of the synthesized data may be carried out by evaluating the identified attributes of the synthesized data. Evaluating the identified attributes of the synthesized data may include applying a characterization rule to an identified attribute. For further explanation consider the following characterization rule 

In the example above the characterization rule dictates that if synthesized data is an email and if the email was sent to Joe and if the email sent from Bob then the exemplary email is characterized as a work email. 

Characterizing the attributes of the synthesized data may further be carried out by creating for each attribute identified a characteristic tag representing a characterization for the identified attribute. Consider for further explanation the following example of synthesized data translated from an email having inserted within it a characteristic tag.

In the example above the synthesized data is translated from an email sent to Joe from Bob having a subject line including the text I will be late tomorrow. In the example above tags identify a characteristic field having the value work characterizing the email as work related. Characteristic tags aid in channelizing synthesized data by identifying characteristics of the data useful in channelizing the data.

The method of for channelizing the synthesized data also includes assigning the data to a predetermined channel in dependence upon the characterized attributes and channel assignment rules . Channel assignment rules are predetermined instructions for assigning synthesized data into a channel in dependence upon characterized attributes . Consider for further explanation the following channel assignment rule 

In the example above if the synthesized data is translated from an email and if the email has been characterized as work related email then the synthesized data is assigned to a work channel. 

Assigning the data to a predetermined channel may also be carried out in dependence upon user preferences and other factors as will occur to those of skill in the art. User preferences are a collection of user choices as to configuration often kept in a data structure isolated from business logic. User preferences provide additional granularity for channelizing synthesized data according to the present invention.

Under some channel assignment rules synthesized data may be assigned to more than one channel . That is the same synthesized data may in fact be applicable to more than one channel. Assigning the data to a predetermined channel may therefore be carried out more than once for a single portion of synthesized data.

The method of for channelizing the synthesized data may also include presenting the synthesized data to a user through one or more channels . One way presenting the synthesized data to a user through one or more channels may be carried out is by presenting summaries or headings of available channels in a user interface allowing a user access to the content of those channels. These channels could be accessed via this presentation in order to access the synthesized data . The synthesized data is additionally to the user through the selected channels by displaying or playing the synthesized data contained in the channel.

Data management and data rendering according to the present invention often includes identifying and executing actions in dependence upon synthesized data. The actions so identified and executed often include multimodal interaction with a user and auditory presentation of synthesized data to a user according to one or more of a plurality of available predetermined audio configurations. Such an audio configuration is a device configuration for receiving audio input from a user and presenting audio output to a user by a data management and data rendering module. Audio configurations typically include both the system configurations for presentation of audio output to a user from a data management and data rendering module and system configurations for receiving audio input from a user accepted by a data management and data rendering module. One exemplary audio configuration for a laptop includes a configuration specifying the laptop speakers as the only designated output devices for presentation of synthesized data and specifying a particular microphone of the laptop as the only designated input device for accepting voice commands from a user. Audio configurations specifying particular input devices and output devices therefore are capable of using the most appropriate audio input and audio output devices available for multimodal or audio interaction with a user.

For further explanation sets forth a flow chart illustrating an exemplary method for controlling audio operation for data management and data rendering according to the present invention. The method of includes selecting one of a plurality of predetermined audio configurations in dependence upon context information . An audio configuration is a device configuration for receiving audio input from a user and presenting audio output to a user by a data management and data rendering module. Predetermined audio configurations typically include one or more pre selected input devices for receiving audio instructions from a user. Predetermined audio configurations also typically include one or more pre selected output devices for presenting synthesized data by a data management and rendering module of the present invention. Predetermined audio configurations may also include other configuration settings for the pre selected input or output devices. Predetermined audio configurations according to the present invention provide fine granularity in selecting system devices for multimodal and audio interaction with a user.

Context information is data describing the context in which a data management and data rendering system is operating while selecting one of a plurality of available predetermined audio configurations. Examples of context information include current device state information current geographical coordinates of a device current ambient noise level current speech characteristics of a user security level for synthesized data being rendered on a data management and data rendering system and any other context information as will occur to those of skill in the art.

In the method of selecting one of a plurality of predetermined audio configurations in dependence upon context information is carried out in dependence upon an audio selection rule . An audio configuration selection rule is pre defined rule set for selecting one of a plurality of audio configurations in dependence upon predetermined context information .

Selecting one of a plurality of predetermined audio configurations in dependence upon the context information and an audio configuration selection rule may be carried out by selecting a particular audio configuration when current context information matches or matches within some tolerance thresholds predefined context information in the audio configuration selection rule. Consider for further illustration an exemplary audio configuration selection rule useful in selecting one of a plurality of predetermined audio configurations for a laptop in dependence upon context information 

The exemplary audio configuration selection rule above compares the distance between the GPS coordinates of a laptop supporting a GPS receiver and parameter coordinates 29 45 37 N by 95 21 31 W which are the GPS coordinates of a courthouse and the distance 0.1 miles. A successful comparison where the distance between the coordinates is equal to or less than 0.1 miles results in selecting a predetermined audio configuration identified by audioconfigID 1234. AudioconfigID 1234 is a configuration that deactivates the microphone of the laptop activates speakers on the laptop and sets the volume level for those speakers at a low volume level.

The method of also includes setting audio operation of a data management and data rendering module to the selected predetermined audio configuration . Setting audio operation of a data management and data rendering module to the selected predetermined audio configuration typically includes identifying audio input devices and audio output devices specified by the predetermined audio configuration activating those audio input and output devices deactivating other audio input and output devices and administering the attribute values of the activated audio input and audio output according to the predefined audio configuration.

As discussed above the data management and data rendering module according to the present invention may be implemented as an application running on a Java Virtual Machine JVM . In such data management and data rendering modules Java APIs may be useful in setting audio operation of a data management and data rendering module to the selected predetermined audio configuration . The Java 3D API for example may be used to set audio operation of a data management and data rendering module to the selected predetermined audio configuration by selecting one or more of the audio devices available to the data management and data rendering module identified in the predetermined audio configuration initializing the device driver of the selected audio devices and setting audio playback parameters for the selected audio devices according to the predetermined audio configuration. Selecting one or more of the available audio devices available to the data management and data rendering module identified in the predetermined audio configuration may be carried out through the use of methods in an object of the PhysicalEnvironment class and the specific characteristics of the identified device may be retrieved from an instantiated object of the AudioDevice class for the selected audio device. Having selected one or more audio devices identified in the predetermined audio configuration each driver for the selected audio devices is initialized. Setting audio playback parameters for the selected audio devices according to the predetermined audio configuration may be carried out through methods provided by Java APIs to affect the sound image generated. Such parameters may include the volume of selected speakers microphones and other devices the mix of volumes and settings between more than one speaker mono or stereo settings of speakers and many other parameters identified in a predetermined audio configuration that will occur to those of skill in the art.

Another API useful in controlling audio operation for data management and data rendering according to the present invention is the Java Sound API. The Java Sound API supports the input and output of both digital audio and MIDI data and may also be used to set audio operation of a data management and data rendering module to one of a plurality of selected predetermined audio configurations. In the Java Sound API audio devices are represented by Mixer objects that provide audio input and output as one or more streams of audio input and one or more streams of audio output. In the Java Sound API a physical audio device such as the microphone input on a sound card is considered a port into or out of the mixer. A port typically provides a single stream of audio into or out of the mixer. The Java Sound API also implements a line that is a digital audio pipeline moving audio into or out of the mixer. The Java Sound API may usefully provide fine granularity in setting audio operation of a data management and data rendering module to the selected predetermined audio configuration.

As discussed above audio configuration selection rules provide a vehicle for selecting one of a plurality of available audio configurations for use in data management and data rendering according to the present invention. For further explanation sets forth a flow chart illustrating an exemplary method for creating audio configuration selection rules according to the present invention that includes receiving from a user audio configurations and associating the audio configurations with predetermined context parameters . Receiving from a user audio configurations may be carried out by receiving a selection of one or more audio configurations from a user or receiving individual selections of one or more input or output devices and their settings to create an audio configuration. Such selections may be received through an audio configuration selection rules creation screen providing GUI widgets for accepting predetermined audio configurations and for receiving individual selections of one or more input or output devices and their setting to create an audio configuration.

Associating the audio configurations with predetermined context parameters may be carried out by identifying predetermined context parameters that define a predetermined context and associating those identified context parameters with the selected predetermined audio configuration to create a rule.

Predetermined context parameters are predefined characteristics of typical environments surrounding data management and data rendering according to present invention. Examples of such predetermined context parameters include characteristics typical of time such as time of day day of week month of year and so on characteristics typical of physical location of a device such as GPS coordinates longitude and latitude and so on and other characteristics as will occur to those of skill in the art. Such context parameters together may be used to create a predetermined context such that when real time conditions sufficiently match the predetermined context a predetermined audio configuration may be selected.

Associating the audio configurations with predetermined context parameters may be carried out through the use of an audio configuration selection rules creation screen providing GUI widgets for accepting predetermined context parameter selections from a user and for associating those predetermined context parameter selections with one or more audio configuration.

As discussed above the method for controlling audio operation for data management and data rendering according to the present invention includes selecting one of a plurality of predetermined audio configurations in dependence upon the context information and an audio configuration selection rule. One type of context information which may be useful for selecting predetermined audio configurations in dependence upon the context information and an audio configuration selection rule is current device state information. Current device state information is information about a device s physical operation information about computer program instructions operating on a device information about a device s configuration and so as will occur to those of skill in the art.

For further explanation therefore sets forth a flow chart illustrating an exemplary method for selecting one of a plurality of predetermined audio configurations in dependence upon the context information and an audio configuration selection rule including selecting one of a plurality of predetermined audio configurations in dependence upon the current device state information . Selecting one of a plurality of predetermined audio configurations in dependence upon the current device state information may be carried out by selecting a particular audio configuration upon the condition that the current determined device state information corresponds to the particular device state related pre determined context parameters of the audio configuration selection rule such as for example a laptop having power on a laptop having a closed cover a mobile device having power on a laptop having established connectivity a laptop running a particular application and any other device state related pre determined context parameter. Device state information may be determined by calling member methods in the operating system which query particular device states. One example of selecting one of a plurality of predetermined audio configurations in dependence upon current device state information includes selecting an output device in response to receiving device state information indicating that the cover of the laptop whereupon the data management and data rendering module is installed and running is closed.

For further explanation consider the following exemplary audio configuration selection rule useful in selecting one of a plurality of predetermined audio configurations for a laptop in dependence upon device state information 

The exemplary audio configuration selection rule above selects a predetermined audio configuration identified as AudioConfigID 1255 if a laptop supporting data management and data rendering according to the present invention is closed.

Another type of context information which may be useful for selecting predetermined audio configurations is the current geographical coordinates of a device supporting data management and data rendering according to the present invention. For further explanation therefore sets forth a flow chart illustrating an exemplary method for selecting one of a plurality of predetermined audio configurations in dependence upon the context information and an audio configuration selection rule including selecting one of a plurality of predetermined audio configurations in dependence upon the current geographical coordinates of the device . Current geographical coordinates of a device may be retrieved from a Global Positioning Satellite receiver in a computer upon which the data management and data rendering module is running.

For further explanation consider the following example of audio configuration selection rule useful in selecting one of a plurality of predetermined audio configurations for a laptop in dependence upon current geographical coordinates 

The exemplary audio configuration selection rule above compares the distance between the GPS coordinates of a laptop supporting a GPS receiver and parameter coordinates 29 45 37 N by 95 21 31 W which are the GPS coordinates of a courthouse and the distance 0.1 miles. A successful comparison where the distance between the coordinates is equal to or less than 0.1 miles results in selecting a predetermined audio configuration identified by audioconfigID 1234. AudioconfigID 1234 is a configuration that deactivates the microphone of the laptop activates speakers on the laptop and sets the volume level for those speakers at a low volume level.

The examples of selecting predetermined audio configurations in dependence upon device state information and current geographical coordinates described above with reference to are for explanation and not for limitation. In fact selecting predetermined audio configurations according to the present invention may be carried out in dependence upon context information of many types such as for example current speech characteristics of the user the native data type of synthesized data being rendered current actions being executed by a data management and rendering module a designated security level for synthesized data being rendered current ambient noise level surrounding a device upon which a data management and rendering module is operating as well as any other context information that will occur to those of skill in the art.

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for intermediate message invalidation useful in workflow decision management. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although most of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

