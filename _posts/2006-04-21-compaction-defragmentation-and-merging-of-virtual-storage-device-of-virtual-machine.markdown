---

title: Compaction, de-fragmentation, and merging of virtual storage device of virtual machine
abstract: A computing device is partitioned to include a host partition (HP) instantiated at least in part to provide storage capabilities, and also to include a client partition (CP) instantiated at least in part to consume such storage capabilities of the HP in the form of a virtual storage device at the CP. The HP implements the virtual storage device of the CP as an image file on a physical storage device. The image file at the HP is compacted while the CP is active and employing the corresponding virtual storage device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07647468&OS=07647468&RS=07647468
owner: Microsoft Corporation
number: 07647468
owner_city: Redmond
owner_country: US
publication_date: 20060421
---
This application claims the benefit of U.S. Provisional Application No. 60 748 906 filed Dec. 9 2005 hereby incorporated by reference in its entirety.

The present invention relates to a method and mechanism for performing maintenance operations including compaction de fragmentation and merging on a virtual storage device of a virtual machine. More particularly the present invention relates to providing such a method and mechanism that can perform such maintenance operations on the virtual storage device as such virtual storage device is being employed by the virtual machine.

As should be appreciated a virtual machine is a software application operating on a computing device for the purpose of emulating a hardware system. Typically although not necessarily the virtual machine is employed on the computing device to host a user application or the like while at the same time isolating such user application from such computing device or from other applications on such computing device. It may be the case that a different variation of a virtual machine is written for each of a plurality of different computing devices so that any user application written for the virtual machine can be operated on any of the different computing devices. Thus a different variation of the user application for each different computing device is not needed.

Among other things a virtual machine may require access to a storage device to store and retrieve data and generally for any purpose that a storage device would be employed. Accordingly the virtual machine may in fact be provided with such a storage device. Notably inasmuch as the virtual machine is in fact a software construct so too may the provided storage device employed thereby be a part of the software construct that is the virtual machine or else another software construct. In either case the storage device is in effect a virtual storage device.

New architectures for computing devices and new software now allow a single computing device to run a plurality of partitions each of which can be employed to instantiate a virtual machine to in turn host an instance of an operating system. In such a computing device a storage hardware device of the computing device such as a RAM memory or a hard disk drive memory may be dynamically assigned to a particular partition so that the particular partition can directly control such storage hardware device. Such particular partition then is in effect a host that provides storage capabilities as a storage host partition SHP . Similarly such SHP provides storage services to another partition which is in effect a client that consumes such capabilities as a storage client partition SCP . Thus the SCP and the SHP communicate to accomplish storage related operations.

Typically a virtual storage device of an SCP is provided by the SHP in the form of an actual storage image file maintained by the SHP in an actual storage hardware device. Thus and as may be appreciated changes made to the virtual storage device by the SCP are persisted by the SHP in the corresponding storage image file on the storage hardware device. Put another way the actual storage image file is a representation of the virtual storage device of a virtual machine such as an SCP. Accordingly whenever the virtual operating system of the SCP executes a read or write operation with regard to the virtual storage device thereof the operation data is read from or written to the storage image file by the SHP.

Inasmuch as the virtual storage device of an SCP might be expected to have a relatively large storage capacity perhaps on the order of 1 16 gigabytes or more it follows that absent other considerations the corresponding storage image file as maintained by the SHP can also have the same relatively large storage capacity. However and as should be appreciated the storage capacity of the virtual storage device likely is not fully occupied by data and instead may contain significant if not large amounts of empty space or space with null data therein. As should be appreciated then such null data in the virtual storage device need not be represented within the corresponding storage image file at least on a byte for byte basis. By not storing null data from the virtual storage device in the corresponding storage image file then such storage image file may be stored on the storage hardware device as a smaller if not much smaller file.

Accordingly a need exists for a method and mechanism by which the storage image file corresponding to a virtual storage device may be stored on a storage hardware device in a relatively compact form whereby null data from the virtual storage device is only minimally represented within the storage image file. In particular a need exists for such a method and mechanism whereby maintenance may be performed on the storage image file for example to compact same or to de fragment same. In addition a need exists for such a method and mechanism that can perform such maintenance while the virtual storage device is being employed by a virtual machine or the like such that the virtual machine need not be halted to perform the maintenance.

A method is provided with regard to a computing device partitioned to include a host partition HP instantiated at least in part to provide storage capabilities and also to include a client partition CP instantiated at least in part to consume such storage capabilities of the HP in the form of a virtual storage device at the CP. The HP implements the virtual storage device of the CP as an image file on a physical storage device. The method compacts the image file at the HP while the CP is employing the corresponding virtual storage device.

A command is received to compact the image file and it is determined that the CP is active and that the image file is currently in use by the CP to implement the virtual storage device thereof. A block layout of the virtual storage device is obtained from the CP thereof where the block layout represents all allocated data blocks at the virtual storage device that have stored data and correspondingly non allocated data blocks at the virtual storage device that have null data. Likewise a block allocation table BAT of the image file is retrieved where the BAT represents the image file as stored as blocks at the physical storage device. At least some of the blocks referenced in the BAT have corresponding blocks referenced in the block layout from the CP and at least some of the blocks referenced in the BAT do not have corresponding blocks referenced in such block layout. If a block is referenced in the BAT without a corresponding block in the block layout such referenced block contains null data and may be deleted from the image file.

Thus the block layout from the CP and the BAT from the image file is compared to identify each block referenced in the BAT that does not have a corresponding block in the block layout as an unnecessary block that may be deleted from the image file and a modified block layout is created with each unnecessary block removed therefrom. The image is then compacted by identifying from the modified block layout each data block to be removed from the image file and removing such identified data block.

Although not required the invention can be implemented via an application programming interface API for use by a developer and or included within the network browsing software which will be described in the general context of computer executable instructions such as program modules being executed by one or more computers such as client workstations servers or other devices. Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers PCs automated teller machines server computers hand held or laptop devices multi processor systems microprocessor based systems programmable consumer electronics network PCs minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus Peripheral Component Interconnect PCI bus also known as Mezzanine bus and PCI Express.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection or fiber optic connection and wireless media such as acoustic RF infrared optical phased array antenna operating at any wavelength directional and non directional electromagnetic emitters and receivers operating at any wavelength and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB .

A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . A graphics interface such as Northbridge may also be connected to the system bus . Northbridge is a chipset that communicates with the CPU or host processing unit and assumes responsibility for accelerated graphics port AGP communications. One or more graphics processing units GPUs may communicate with graphics interface . In this regard GPUs generally include on chip memory storage such as register storage and GPUs communicate with a video memory . GPUs however are but one example of a coprocessor and thus a variety of co processing devices may be included in computer . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface which may in turn communicate with video memory . In addition to monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation FIG. illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

One of ordinary skill in the art can appreciate that a computer or other client device can be deployed as part of a computer network. In this regard the present invention pertains to any computer system having any number of memory or storage units and any number of applications and processes occurring across any number of storage units or volumes. The present invention may apply to an environment with server computers and client computers deployed in a network environment having remote or local storage. The present invention may also apply to a standalone computing device having programming language functionality interpretation and execution capabilities.

Distributed computing facilitates sharing of computer resources and services by direct exchange between computing devices and systems. These resources and services include the exchange of information cache storage and disk storage for files. Distributed computing takes advantage of network connectivity allowing clients to leverage their collective power to benefit the entire enterprise. In this regard a variety of devices may have applications objects or resources that may interact to implicate authentication techniques of the present invention for trusted graphics pipeline s .

It can also be appreciated that an object such as may be hosted on another computing device or . Thus although the physical environment depicted may show the connected devices as computers such illustration is merely exemplary and the physical environment may alternatively be depicted or described comprising various digital devices such as PDAs televisions MP3 players etc. software objects such as interfaces COM objects and the like.

There are a variety of systems components and network configurations that support distributed computing environments. For example computing systems may be connected together by wire line or wireless systems by local networks or widely distributed networks. Currently many of the networks are coupled to the Internet which provides the infrastructure for widely distributed computing and encompasses many different networks.

In home networking environments there are at least four disparate network transport media that may each support a unique protocol such as Power line data both wireless and wired voice e.g. telephone and entertainment media. Most home control devices such as light switches and appliances may use power line for connectivity. Data Services may enter the home as broadband e.g. either DSL or Cable modem and are accessible within the home using either wireless e.g. HomeRF or 802.11b or wired e.g. Home PNA Cat 5 even power line connectivity. Voice traffic may enter the home either as wired e.g. Cat 3 or wireless e.g. cell phones and may be distributed within the home using Cat 3 wiring. Entertainment media may enter the home either through satellite or cable and is typically distributed in the home using coaxial cable. IEEE 1394 and DVI are also emerging as digital interconnects for clusters of media devices. All of these network environments and others that may emerge as protocol standards may be interconnected to form an intranet that may be connected to the outside world by way of the Internet. In short a variety of disparate sources exist for the storage and transmission of data and consequently moving forward computing devices will require ways of protecting content at all portions of the data processing pipeline.

The Internet commonly refers to the collection of networks and gateways that utilize the TCP IP suite of protocols which are well known in the art of computer networking. TCP IP is an acronym for Transmission Control Protocol Internet Protocol. The Internet can be described as a system of geographically distributed remote computer networks interconnected by computers processing networking protocols that allow users to interact and share information over the networks. Because of such wide spread information sharing remote networks such as the Internet have thus far generally evolved into an open system for which developers can design software applications for performing specialized operations or services essentially without restriction.

Thus the network infrastructure enables a host of network topologies such as client server peer to peer or hybrid architectures. The client is a member of a class or group that uses the services of another class or group to which it is not related. Thus in computing a client is a process i.e. roughly a set of instructions or tasks that requests a service provided by another program. The client process utilizes the requested service without having to know any working details about the other program or the service itself. In a client server architecture particularly a networked system a client is usually a computer that accesses shared network resources provided by another computer e.g. a server. In the example of computers etc. can be thought of as clients and computer etc. can be thought of as the server where server etc. maintains the data that is then replicated in the client computers etc.

A server is typically a remote computer system accessible over a remote network such as the Internet. The client process may be active in a first computer system and the server process may be active in a second computer system communicating with one another over a communications medium thus providing distributed functionality and allowing multiple clients to take advantage of the information gathering capabilities of the server.

Client and server communicate with one another utilizing the functionality provided by a protocol layer. For example Hypertext Transfer Protocol HTTP is a common protocol that is used in conjunction with the World Wide Web WWW . Typically a computer network address such as a Universal Resource Locator URL or an Internet Protocol IP address is used to identify the server or client computers to each other. The network address can be referred to as a Universal Resource Locator address. For example communication can be provided over a communications medium. In particular the client and server may be coupled to one another via TCP IP connections for high capacity communication.

Thus illustrates an exemplary networked or distributed environment with a server in communication with client computers via a network bus in which the present invention may be employed. In more detail a number of servers etc. are interconnected via a communications network bus which may be a LAN WAN intranet the Internet etc. with a number of client or remote computing devices etc. such as a portable computer handheld computer thin client networked appliance or other device such as a VCR TV oven light heater and the like in accordance with the present invention. It is thus contemplated that the present invention may apply to any computing device in connection with which it is desirable to process store or render secure content from a trusted source and to any computing device with which it is desirable to render high performance graphics generated by a virtual machine.

In a network environment in which the communications network bus is the Internet for example the servers can be Web servers with which the clients etc. communicate via any of a number of known protocols such as HTTP. Servers may also serve as clients as may be characteristic of a distributed computing environment. Communications may be wired or wireless where appropriate. Client devices may or may not communicate via communications network bus and may have independent communications associated therewith. For example in the case of a TV or VCR there may or may not be a networked aspect to the control thereof. Each client computer and server computer may be equipped with various application program modules or objects and with connections or access to various types of storage elements or objects across which files may be stored or to which portion s of files may be downloaded or migrated. Thus the present invention can be utilized in a computer network environment having client computers etc. that can access and interact with a computer network bus and server computers etc. that may interact with client computers etc. and other devices and databases .

Turning now to a computing device includes a storage device that is employed to store data on the computing device . Such computing device storage device and stored data may be any appropriate computing device storage device and stored data without departing from the spirit and scope of the present invention. For example the computing device may be a personal computer such as a desktop or laptop computer or the like with a hard disk drive as the storage device and corresponding data thereon. Likewise the computing device maybe a portable playback machine such as a portable audio or video player with a RAM memory as the storage device and corresponding data thereon.

Significantly the computing device has been configured to run a plurality of partitions where each partition can be employed to instantiate a virtual machine to in turn host an instance of an operating system. As seen in such computing device the storage device of the computing device is assigned to a particular partition so that the particular partition can directly control such storage device . Such particular partition then is a host that provides storage capabilities as a storage host partition SHP . Similarly such SHP provides storage services to one or more other partitions each of which is in effect a client that consumes such capabilities as a storage client partition SCP . Thus each SCP and the SHP communicate by way of a virtual machine bus or the like to accomplish storage related operations as will be set forth in more detail below.

Turning now to it is seen that the SHP and each SCP include the following elements relating to initiating and performing storage operations. presumes that the computing device of and each partition thereof are functionally operated to include both a user mode and a kernel mode although such modes are not perceived to be absolutely necessary for purposes of the present invention. At any rate and as may be appreciated the user mode is a generally non privileged state where executing code is forbidden by the hardware from performing certain operations such as for example writing to memory not assigned to such code. Generally such forbidden operations are those which could destabilize the operating system of the partition or constitute a security risk. In terms of the operating system the user mode is an analogous non privileged execution mode where the running code is forbidden by the kernel from performing potentially dangerous operations such as writing to system configuration files killing other processes rebooting the system and the like.

As may also be appreciated the kernel mode or privileged mode is the mode in which the operating system and related core components run. Code running in the kernel mode has unlimited access to the system memory and external devices that are assigned to the partitions . Generally the amount of code running in kernel mode is minimized both for purposes of security and elegance. Roughly speaking a user of a computing device interfaces therewith most directly through the user mode and applications operating therein while the computing device interfaces with external devices including the storage device most directly through the kernel mode.

With the user and kernel modes as set forth above then and still referring to it is seen that in one embodiment of the present invention the SHP has in the user mode portion thereof a maintenance application for maintaining the storage device and files stored therein. Thus the maintenance application may for example be executed to check the storage device for errors clean up files on the storage device compact files on the storage device de fragment files on the storage device and the like.

In addition the SHP has in the kernel mode portion thereof a storage stack for accessing the storage device and performing storage operations with regard to the storage device and perhaps other storage devices. As may be appreciated such storage operations include reading data from the storage device writing data to the storage device deleting data from the storage device moving data within the storage device erasing data from the storage device and the like. As seen the stack may include a file system a volume manager a partition driver a class driver and a port driver that interfaces with the storage device by way of a direct connection a network connection or the like. Such items are known or should be apparent to the relevant public and therefore need not be set forth herein in any detail.

Also the SHP has in the kernel mode portion thereof a virtualization storage provider or the like for implementing access to the storage device for each SCP . As will be set forth below each SCP has a virtual storage device which in reality is an image file on the storage device of the SHP and the virtual storage provider thus implements each storage operation by the SCP to the virtual storage device thereof by in fact performing the storage operation on the image file at the storage device . Accordingly the provider may access the file system in the course of reading data to and writing data from the image file . Note here that the virtual storage device is implemented at the SCP as a kernel mode driver that communicates with the virtual storage provider by way of the bus . However as shown in such virtual storage device is conceptually external to the SCP in a manner similar to the storage device being external to the SHP . Accordingly such virtual storage device and the communicative couplings thereof as conceptually represented are shown with dashed lines in such .

Still referring to it is seen that for each SCP hosted by the SHP such SCP likely includes in the user mode portion thereof one or more applications that require storage services from the SCP . Such applications may of course be any applications without departing from the spirit and scope of the present invention. However and again inasmuch as the SCP is a virtual machine such storage services are in fact performed by the SHP and the provider thereof on behalf of the SCP where the provider is in communication with such SCP by way of the virtual machine bus .

As may be appreciated to implement storage services at the SCP as a virtual machine the kernel mode portion of such SCP may have an arrangement similar to that of the SHP with a storage stack that may include a file system a volume manager a partition driver a class driver and a port driver . Here though the port driver interfaces with the virtual machine bus and not a physical storage device although to the SCP it appears that the port driver instead is communicating with a virtual storage device . As may be appreciated the port driver by way of the bus in fact communicates with the provider at the SHP to implement storage operations whereby storage commands received from the port driver of the SCP by the virtual storage provider of the SHP are forwarded to the image file at the storage device by way of the file system and the remainder of the storage stack of the SHP . As a result the image file is a representation of the virtual storage device of the SCP .

As was noted above the virtual storage device of the SCP might be expected to have a relatively large storage capacity perhaps on the order of 1 16 gigabytes or more. Thus it follows that absent other considerations the corresponding storage image file as maintained by the SHP can also have the same relatively large storage capacity. However and as should be appreciated the storage capacity of the virtual storage device likely is not fully occupied by data and instead may contain significant if not large amounts of empty space or space with null data therein. As should be appreciated then such null data in the virtual storage device need not be represented within the corresponding storage image file at least on a byte for byte basis. By doing so such storage image file may be stored on the storage device as a smaller if not much smaller file and in an at least partially compacted form.

In the situation where the image file is stored on the storage device as an at least partially compacted file and as may be appreciate such image file is expanded as necessary when the SCP writes additional data to the corresponding virtual storage device . Typically such expansion occurs in increments of fixed size such as for example 1 or 2 megabytes or so and is managed by the file system and or the provider of the SHP in a manner that should be known or apparent to the relevant public. Thus the image file is expanded upon growing beyond a certain size and thus the virtual storage device at the SCP may continue to be employed.

Note though that in the case where the image file is expanded the fixed size of about 1 to 2 megabytes or so to accommodate additional data of a much smaller size the vast majority of the expansion is unnecessary and in fact can be detrimental in the situation where space at the storage device is relatively valuable such as for example where the storage medium does not have much space left. In a similar manner it may be that space within the image file is freed when corresponding data has been deleted from the virtual storage device and such freed space should likewise be removed from the image file to free space on the storage device . It is known in the prior art to provide a mechanism such as a utility application or the like to compact the image file . However such mechanism has several limitations the most important of which is that the compaction can only be performed on the image file by the mechanism while the corresponding SCP is not running. In addition the compaction as performed by the mechanism is performed by the mechanism based on zeroed data and not on data that is null with the result being that significant portions of non zeroed but null data are not removed from the image file during compaction or else the time taken to zero null data can become significant. Also the mechanism does not take into account that the data within the image file may during compaction or during expansion be rearranged to reduce or remove de fragmentation.

Accordingly in one embodiment of the present invention a method and mechanism is provided to perform compaction on the image file while the corresponding SCP is running. In such embodiment the compaction is performed based on a bitmap representing all null data within the corresponding virtual storage device and the data within the image file is rearranged to reduce or remove de fragmentation.

Turning now to it is seen that in one embodiment of the present invention the image file corresponding to the virtual storage device of the SCP is stored at the storage device in the form of a series of data blocks along with a block allocation table BAT that holds for each virtual file in the image file one or more physical offsets to data blocks containing the data for such virtual file. Such a BAT and the structure thereof is known or should be apparent to the relevant public and therefore may be any appropriate BAT and structure without departing from the spirit and scope of the present invention.

Thus upon an application at the SCP requesting a particular virtual file or data therein from the virtual storage device for example such request is forwarded to the provider of the SHP . As may be appreciated then the provider locates the data blocks for the virtual file within the corresponding image file by way of the BAT. Thereafter the provider can access the virtual file or data therein by way of the located data blocks in a manner that is known or should be apparent to the relevant public.

Note that in the course of operating the virtual storage device the corresponding image file may grow to include unnecessary data. As may be appreciated such unnecessary data may include expanded space that is not occupied by substantive data and may also include space that is occupied by null data. Typically although not necessarily such null data arises when data at the virtual storage device is deleted. As may be appreciated such deleted data is not in fact removed from the virtual storage device but instead space for such data is de allocated with the result being that the deleted data remains and occupies space at the virtual storage device and at the corresponding image file but can be over written by other data. Thus the deleted data both at the virtual storage device and at the corresponding image file is null data that can be removed at the image file to free or open space occupied thereby.

In one embodiment of the present invention and turning now to the image file at the SHP is compacted by a maintenance application or the like at the SHP while the corresponding SCP is running and according to the following compaction process. Preliminarily the application or the like sends a command to the virtualization storage provider to compact the image file step and the provider determines that the image file is currently in use by the corresponding SCP to implement the virtual storage device thereof step .

Thus the provider sends a command to the SCP to query for a block layout of the virtual storage device step and awaits same. As may be appreciated the block layout is essentially a bitmap or diagram or the like and represents all allocated data blocks at the virtual storage device that have stored data. Correspondingly the block layout of the virtual storage device from the SCP does not refer to data at the virtual storage device that is zeroed out and thus represents empty space or data at the virtual storage device that is null data. Such a layout of blocks of allocated data is known or should be apparent to the relevant public and therefore may be created by the SCP in any appropriate manner without departing from the spirit and scope of the present invention. Note here that a block within the block layout refers to a block within the image file and not within the storage device . Also a block as employed within the block layout may be any appropriate size of data and need not necessarily be the size of a disk block or a disk sector without departing from the spirit and scope of the present invention.

In addition the provider retrieves the block allocation table BAT from the image file as stored at the storage device step . As may be appreciated at least some of the blocks referenced in the BAT have corresponding blocks referenced in the block layout from the SCP and at least some blocks referenced in the BAT do not have corresponding blocks in such block layout. As should be understood then if a block referenced in the BAT does not have a corresponding block in the block layout such block contains empty data zeroed data or null data or the like and may be deleted from the image file .

Thus the provider receives the block layout from the SCP and the BAT from the image file step and compares such block layout from the SCP with the BAT from the image file step . Note though that the block layout may not necessarily be in a similar format as the BAT of the corresponding image file and also may not necessarily have exactly the same type of information as the BAT of such image file . Nevertheless the provider presumably can understand both the block layout and the BAT and can obtain appropriate information from both as necessary.

At any rate upon comparing the block layout and the BAT the provider identifies the blocks referenced in the BAT that do not have corresponding blocks in the block layout as unnecessary blocks that may be deleted from the image file step and creates a modified block layout for the image file with the unnecessary blocks removed therefrom step . As may be appreciated the modified block layout of step may take the form of a BAT or of a physical block layout of the image file . As may be appreciated the BAT is similar to a physical block layout except that it holds file sector offsets inside the image file . Thereafter the provider forwards a copy of the modified block layout to the maintenance application at the SHP step and the application then compacts the image file step by identifying data blocks within the image file to be moved. Such compaction is generally known or should be apparent to the relevant public and therefore need not be set forth herein in any detail.

Generally in such compaction data blocks are moved closer to the front of the image file to free up space at the rear of such file and also to de fragment the blocks within the image file step such that data that is logically contiguous is stored within data blocks that are physically contiguous. In the course of such compacting and de fragmenting and as may be appreciated the application sends commands to the provider where each command specifies a source block that is occupied with data and a destination block that is empty and the provider accordingly moves the data within the specified source block to the specified destination block at the image file and also appropriately updates the BAT at the image file . Notably if a block at the end of the file is removed the file is shrunk by the size of the removed block thus resulting in compaction.

As set forth above a single image file corresponds to a virtual storage device of an SCP . However and as may be appreciated such virtual storage device may instead be represented by a plurality of corresponding image files where the plurality of image files are organized as a chain as is seen in and where the chain is in effect presented to the corresponding SCP as a single image and a single virtual storage device . As should be understood employing a chain of image files is useful for certain scenarios such as for example where a user might wish to employ one image file as a base image file and add another image file as a delta image file that represents changes made to the base image file . Thus the base image file is not altered by such changes and the user can un do the changes if need be simply by deleting the delta image file from the chain . Of course a plurality of delta image files may be cumulatively added to the chain as and when desired.

Significantly after the user has decided that the changes from a particular delta image file are not to be un done such user can merge all the changes from the particular delta image file into the parent image file thereof in a manner that is generally known or should be apparent to the relevant public and therefore need not be set forth herein in any detail. However current merging processes are limited in that such processes cannot be run on a chain while the corresponding SCP is running. In addition such processes are limited in that if a chain has multiple delta image files such multiple image files cannot be merged in one pass but instead each delta image file must be individually merged into the parent image file thereof. Moreover a user currently cannot add a new delta image file to a chain corresponding to a running SCP .

Accordingly in one embodiment of the present invention a method and mechanism is provided to perform merging on a chain while the corresponding SCP is running. In such embodiment multiple image files can be merged in one pass and a user can add a new delta image file to a chain corresponding to a running SCP .

Turning now to it is seen that in one embodiment of the present invention a chain of image files corresponds to the virtual storage device of an SCP and at least some of the delta image files within the chain are merged while the SCP is running in the following manner. Preliminarily a user initiates a merge operation by specifying a contiguous range of image files within the chain for the merge within the chain including at least one source image file and a destination image file where the destination image file is closest to the base image file of the chain i.e. lowest step . For example in one case where the chain includes a base image file as D and four delta image files as D D D being the child of D and D having no child the user may wish to merge D D into D. Thereafter the user issues a command to merge the identified image files step .

It should be appreciated at this point that each delta image file is organized on a sector by sector basis or the like and that each sector in a particular delta image file represents a change to the corresponding sector as cumulatively represented within all image files that precede the particular delta image file . Thus and as an example if a particular sector G appears in D D and D but not D or D the sector G in D adds such sector G to the chain inasmuch as such sector G does not appear in D the sector G in D replaces the sector G in D the absence of sector G in D signifies that D does not replace such sector G in the chain and the sector G in D replaces the sector G in D.

In one embodiment of the present invention then and still referring to every sector within the chain is identified step and for each sector within the chain the following procedure is performed. In particular it is determined whether the sector appears in any of the source image files in the chain step and if so the source image file most distant from the base image file i.e. highest and in which the sector appears is determined step . Thereafter the sector in such most distant source image file is copied to the destination image file step . Note that if the sector already appears in the destination image file the copying should be performed so as to replace such already appearing sector.

Once every sector within the chain is traversed in the manner of that which is set forth in connection with steps step the source image files may be deleted if desired step and any reference to the source image file that was most distant from the base image file i.e. highest within the chain such as for example from the next delta image file farther from such most distant source image file within the chain or from the virtual machine of the SCP is adjusted to instead refer to the destination image file step .

Note that while the steps of are being performed it may in fact be the case that the SCP corresponding to the chain of image files is in operation and performing file operations on the virtual storage device thereof by way of the delta image file at the high end of the chain i.e. most distant from the base image file within the chain . However it could be the case that the highest delta image file is one of the source image files for a merge. In such case and in one embodiment of the present invention a new delta image file is created at the high end of the chain so that the end of the chain is now not a source image file for the merge. Thereafter and if desired the new delta image file at the high end of the chain may also be merged in a similar manner to incorporate changes implemented during the first merge. Although such a new image file requires a second merge such second merge is not believed to be onerous especially if the new delta image file contains relatively few changes.

Note too that rather than merging to a destination image file at the low end of the selected range it may instead be more efficient to merge to another delta image file within the selected range. In particular if the bulk of the changed sectors are in a particular delta image file it may be more efficient to merge changes from above and from below into the particular delta image file . Note here that merging to a destination image file above a source image file is performed in a manner similar to that which was set forth above except that the highest changed sector below the destination image file is merged upward if no higher corresponding changed sector exists above such destination image file .

The programming necessary to effectuate the processes performed in connection with the present invention is relatively straight forward and should be apparent to the relevant programming public. Accordingly such programming is not attached hereto. Any particular programming then may be employed to effectuate the present invention without departing from the spirit and scope thereof.

In the present invention a method and mechanism is provided by which a storage image file corresponding to a virtual storage device may be stored on a storage hardware device in a relatively compact form whereby null data from the virtual storage device is only minimally represented within the storage image file . Maintenance may be performed on the storage image file for example to compact same or to de fragment same or to merge a number of such image files within a chain . Such maintenance can be performed while the virtual storage device is being employed by a virtual machine or the like such that the virtual machine need not be halted to perform the maintenance.

It should be appreciated that changes could be made to the embodiments described above without departing from the inventive concepts thereof. It should be understood therefore that this invention is not limited to the particular embodiments disclosed but it is intended to cover modifications within the spirit and scope of the present invention as defined by the appended claims.

