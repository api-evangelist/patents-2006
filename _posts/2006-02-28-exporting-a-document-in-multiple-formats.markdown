---

title: Exporting a document in multiple formats
abstract: Systems and methods are disclosed for exporting a document in multiple formats. The disclosed systems and methods may include creating a metafile including content associated with the document and injecting comments into the metafile. The comments may comprise semantic information corresponding to the document. Also, the metafile may be parsed to create at least one call. The at least one call may be configured to enable an export engine to render the document. Furthermore, the at least one call may be sent to the export engine configured to render the document in an output format associated with the export engine. In addition, the export engine maybe selected from a plurality of export engines based upon user input indicating the output format associated with the selected export engine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07844898&OS=07844898&RS=07844898
owner: Microsoft Corporation
number: 07844898
owner_city: Redmond
owner_country: US
publication_date: 20060228
---
Application program developers many times provide related application programs in a software collection called a suite. An example of one such suite is OFFICE from MICROSOFT CORPORATION of Redmond Wash. In some situations for example each application program within a common suite may render output to a display device a printer or to a file configured to be saved on a storage media. When rendering to a file many different file formats may be used for example Portable Document Format PDF and XML Paper Specification XPS . With conventional systems each individual application program within a common suite individually renders output in a specified format. Thus the conventional strategy is to configure each individual application within a common suite with the capability to individually render output to a specified format. This often causes problems because the conventional strategy does not use for example a common code library such that each application program within the common suite would not need to be coded from scratch with these rendering features. For example with the conventional strategy programmers need to develop separate code for each application program to render output in a given format. This need for example tends to increase the suites development cost.

In view of the foregoing there is a need for methods and systems for exporting a document in multiple formats more optimally from a common application program suite. Furthermore there is a need for exporting a document in multiple formats via a common interface such that the application programs that use the common interface do not themselves render to multiple formats.

Systems and methods are disclosed for exporting a document in multiple formats. This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

In accordance with one embodiment a method for exporting a document may comprise receiving a metafile including content associated with the document. Then the metafile may be parsed to create at least one call. The at least one call may be configured to enable an export engine to render the document. Next the at least one call may be sent to the export engine configured to render the document in an output format associated with the export engine.

According to another embodiment a system for exporting a document comprises a memory storage and a processing unit coupled to the memory storage. The processing unit may be operative to create a metafile including content associated with the document. In addition the processing unit may be operative to inject comments into the metafile. The comments may comprise semantic information corresponding to the document. Also the processing unit may be operative to parse the metafile to create at least one call. The at least one call may be configured to enable an export engine to render the document. Furthermore the processing unit may be operative to send the at least one call to the export engine configured to render the document in an output format associated with the export engine.

In accordance with yet another embodiment a computer readable medium stores a set of instructions which when executed performs a method for exporting a document. The method executed by the set of instructions may comprise creating a metafile including content associated with the document. The metafile may be created by one of a plurality of application programs wherein each of the plurality of application programs may be configured to create the metafile in the same metafile format. Also the method may include parsing the metafile to create at least one call. The at least one call may be configured to cause an export engine to render the document. Furthermore the method may include sending the at least one call to the export engine configured to render the document in an output format associated with the export engine.

It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and should not be considered restrictive of the scope of the invention as described and claimed. Further features and or variations may be provided in addition to those set forth herein. For example embodiments of the invention may be directed to various combinations and sub combinations of the features described in the detailed description.

The following detailed description refers to the accompanying drawings. Wherever possible the same reference numbers are used in the drawings and the following description to refer to the same or similar parts. While exemplary embodiments of the invention are described herein modifications adaptations and other implementations are possible without departing from the spirit and scope of the invention. For example substitutions additions or modifications may be made to the elements illustrated in the drawings and the exemplary methods described herein may be modified by substituting reordering or adding stages to the disclosed methods. Accordingly the following detailed description does not limit the invention. Instead the proper scope of the invention is defined by the appended claims.

Systems and methods consistent with embodiments of the present invention export a document in multiple formats. Consistent with embodiments of the invention a suite may include the functionality to export a document from application programs within the suite in a plurality of different formats. For example the suite may be configured to include a common code library such that each application program within the suite would not need to have these features coded from scratch. In other words each application program within the suite would not individually need separate code modules for each format. Instead the suite may include a common interface that each application program may use wherein none of the individual application programs would need to know how to render to any specific format. In this way the suite may implement multiple export formats in an export engine thus sharing as much code as possible between the suite s application programs. For example the code implementing the aforementioned common interface may centralize all the specific format knowledge such that the individual application programs within the suite no longer need to include this knowledge.

In operation the application programs within application program suite may render output to an application programming interface API associated with an operating system described in more detail below with respect to . For example operating system may comprise but is not limited to WINDOWS from MICROSOFT CORPORATION. When operating system comprises WINDOWS for example the aforementioned API may comprise the Graphics Device Interface GDI included in WINDOWS. When an application program within application program suite needs to display or print for example the application program creates a metafile that includes GDI function calls. Through these GDI function calls the application program sends GDI parameters for an object that needs for example to be displayed or printed. GDI in turn draws the object by sending commands to screen or printer drivers that render images for example to output devices as described below with respect to . The aforementioned metafile may comprise but is not limited to a WINDOWS metafile WMF an enhanced metafile EMF or EMF . EMF a type of metafile used to transport GDI drawing commands to Terminal Server as described in the Terminal Server developer kit 

Consistent with an embodiment of the invention the aforementioned metafile may be used to export a document in multiple formats. For example first application may generate a metafile using its rendering code plus comments provided by comment injectors . The metafile may indicate a desired format for the document. The desired format for example may comprise but is not limited to PDF PDF A or XPS. The aforementioned formats are examples and others may be used. First application may then pass the generate metafile to parser through application interface . Parser may then analyze the metafile and determine what calls to which export engine within export engines need to made. This is done in order to make the document defined by the metafile render properly through docex interface . Neither first application nor parser may know how to render the format specified by the metafile. Rather the chosen export engine takes care of the formatting details. For example first export engine may correspond to the PDF format and second export engine my correspond to the XPS format. For example if parser determines that the metafile indicates the PDF format docex interface may use first export engine thus rendering the document in PDF. Similarly if parser determines that the metafile indicates the XPS format docex interface may use second export engine thus rendering the document in XPS. System s operation is described in greater detail below with respect to .

Furthermore an embodiment consistent with the invention may comprise a system for exporting a document in multiple formats. The system may comprise a memory storage and a processing unit coupled to the memory storage. The processing unit may be operative to create a metafile including content associated with the document. In addition the processing unit may be operative to inject comments into the metafile. The comments may comprise semantic information corresponding to the document. Also the processing unit may be operative to parse the metafile to create at least one call. The at least one call may be configured to enable an export engine to render the document. Furthermore the processing unit may be operative to send the at least one call to the export engine configured to render the document in an output format associated with the export engine.

With reference to one exemplary system consistent with an embodiment of the invention may include a computing device such as computing device . In a basic configuration computing device may include at least one processing unit and a system memory . Depending on the configuration and type of computing device system memory may be volatile such as RAM non volatile such as ROM flash memory etc. or any combination. System memory may include operating system one or more programs and program data . Operating system for example is suitable for controlling computing device s operation. In one embodiment programs may include first application second application and Nth application application interface comment injectors parser docex interface first export engine second export engine and Nth export engine . Furthermore embodiments of the invention may be practiced in conjunction with a graphics library other operating system or any other application program and is not limited to any particular application or system. This basic configuration is illustrated in by those components within a dashed line .

Computing device may have additional features or functionality. For example computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks flash memory optical disks or tape. Such additional storage is illustrated in by a removable storage and a non removable storage . Computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all examples of computer storage media i.e memory storage. Computer storage media may include but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store information and which can be accessed by computing device . Any such computer storage media may be part of device . Computing device may also have input device s such as a keyboard a mouse a pen a sound input device a touch input device etc. Output device s such as a display speakers a printer etc. may also be included. The aforementioned devices are exemplary and others may be used.

Computing device may also contain a communication connection that may allow device to communicate with other computing devices such as over a network in a distributed computing environment for example an intranet or the Internet. Communication connection s is one example of communication media. Communication media may typically be embodied by computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may mean a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media may include wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. The term computer readable media as used herein may include both storage media and communication media.

As stated above a number of program modules and data files may be stored in system memory including operating system . While executing on processing unit programs may perform processes including for example one or more of the stages of method as described below. The aforementioned process is exemplary and processing unit may perform other processes. Other programming modules that may be used in accordance with embodiments of the present invention may include electronic mail and contacts applications word processing applications spreadsheet applications database applications slide presentation applications drawing or computer aided application programs etc.

From stage where computing device creates the metafile exemplary method may advance to stage where computing device may inject comments into the metafile. The comments may comprise semantic information corresponding to the document. For example executing on computing device comment injector may receive comment data from any application within application program suite and inject comments into the metafile.

The metafile may contain the information necessary to render the visual elements of the document. For example the EMF format may only define representations for visual elements. Semantic information however such as hyperlink destinations accessibility information and language information may not be represented by the EMF format. Consistent with embodiments of the invention a specific format for passing semantic information through the metafile such that a client e.g. parser parsing the metafile can reconstruct the semantic information. Consistent with embodiments of the invention the metafile may contain both visual information and the semantic information. This may be accomplished for example by injecting specially formatted comments containing the semantic information into the metafile.

The metafile prior to comment injection may comprise a list of drawing commands needed to render the document. At this point the metafile may not contain any information beyond for example simple drawing commands such as draw an image here or draw a line over there . Consequently without injected comments the document s important semantic i.e. non visual elements such as hyperlinks language information on text and accessibility information may be lost.

For example a document may be about to render an image that has alternate text on it. For example alternate text may be used by document readers to describe images for users with sight impairments. As illustrated in just before rendering the image first application may call MsoHrBeginStructNodeInEmf and give the alternate text for the image. After rendering the image first application may call MsoHrEndStructNodeInEmf. These two functions may inject comments in the metafile denoting that the given alternate text is associated with the image. Parser may then interpret those comments and pass the information on to one of exporter engines via the IDocExPage interface as described below. The one of exporter engines may then write the alternate text to the exported file.

Consistent with embodiments of the invention a comment section of the metafile may be used to contain the injected comments. For example the comment section may be configured to be ignored by a programming interface configured to use the metafile to drive a peripheral device such as one of output devices . For example if the EMF format is used for the metafile EMF comments may be used to the injected semantic information. For example the EMF format may allow for comment record types that are ignored by GDI s rendering engine but can contain arbitrary comment information.

Document structure comments may denote how the text flows in a document and alternate text for document elements. In addition they may form a tree. Each node may have a parent and a particular place within its siblings. Nodes may have different types denoting how they should be interpreted by the reader. For example first application may inject document structure comments by calling the function illustrated in . The actual comment that gets injected may have the structure illustrated in .

As shown in ident may contain the value 0x50504E55. This may identify the comment. It is possible for other pieces of code to inject comments into the metafile. Prefacing comments with this value allows the system to identify the comments that should be looked at by parser . As shown in iComment may contain the value msodocexcommentBeginStructNode 0x205 . This may identify the comment as a BeginStructNode comment so parser can distinguish it from the other docex comment types. idNodeParent may identify the parent node of this node. Every node may have a parent meaning that the nodes may form a tree. iSortOrder may identify the location of this node among its peers i.e. other children of the same parent . No two nodes may have the same sort order. The sort order need not be contiguous. The sort order may allow one of the exporter engines to properly order the content such that the reader can read it in the proper order even if it is not in the proper order in the metafile. idNode may be the ID of this node that may comprise a unique number identifying the node. Nodetype may identify the type of node. The following node types may be supported 

i Articles An article may comprise a group of nodes forming a single flow of text that may be read or searched as a contiguous block of content. Some documents may have a single article and others may have many articles 

ii Paragraphs A paragraph may represent a block of text within an article. It may be parented to an article 

iii Figures A figure may comprise a graphical element an image or collection of shapes that has a textual representation. The textual representation may be the alternate text used for reading or searching the document 

fContentNode may denote whether or not this node has content in it. Figure nodes have content comprises the textual representation of the graphical element. cwchAltText may contain the number of characters of content following the struct in the comment. The content if there is any may then be appended to the end of the struct in the comment. Content document structure nodes may mark the point in the content where they terminate also. To mark the end first application may call MsoHrEndStructContentNodeInEMF that may inject a comment with the form shown in . ident may contain the value 0x50504E55 as with other comments. iComment may contain the value msodocexcommentEndStructNode 0x206 . This may identify the comment as a EndStructNode comment so parser can distinguish it from the other docex comment types.

Text run comments may be used to identify the language of each text run and to identify the original Unicode code points of the text as opposed to the glyphs which get drawn. The metafile may contain the final glyphs that get rendered on screen not the text in the source document. In many situations these may be the same but there may be a number of cases where several Unicode code points gets drawn as a single glyph or even get split apart into multiple glyphs. This may happen in complex script languages such. Because the mapping from Unicode to glyphs is context dependent it may be difficult to search for a given piece of text in a document containing only the glyphs. Accordingly it may be helpful to have the original Unicode text along with the glyphs. Applications within suit may inject the text run comments before and after chunks of text using the process illustrated in . The comment injected in the metafile may have the structure shown in . As shown in ident may contain the value 0x50504E55 as with all of our comments. iComment may contain the value msodocexcommentBeginTextRun 0x207 . This may identify the comment as a BeginTextRun comment so parser can distinguish it from the other docex comment types. Icid may give the language of the text run. cGlyphIndex may contain the number of entries in the glyph index table and may be 0. Each entry in the glyph index table may correspond to a Unicode code point in the Actual Text string and give the index of the first glyph used to render that Unicode character. Two or more adjacent Unicode code points may have the same glyph index if they both resolve to the same glyph. cwchActualText may contain the number of characters in the actual text string. It may be 0 as well.

Hyperlink comments may denote where a particular piece of content should have a hyperlink either internal or external. External hyperlinks may point to a URL typically a resource on the internet . Internal hyperlinks may point to a destination within the same document specifying a target page and position on the page. Applications in suit may inject the hyperlink comments by calling for example one of two functions as shown in . The comment injected in the metafile may have the structure shown in . As shown in ident may contain the value 0x50504E55 as with all other comments. iComment may contain the value msodocexcommentExternalHyperlink 0x201 . This may identify the comment as an ExternalHyperlink comment so parser can distinguish it from the other docex comment types. rcdvRegion may contain the rectangular region of the page over which the hyperlink should be active. And wzLink may contain the destination address for the hyperlink.

Once computing device injects comments into the metafile in stage exemplary method may continue to stage where computing device may parse the metafile to create at least one call. The at least one call may be configured to enable an export engine to render the document. For example executing on computing device parser may receive the metafile and analyze the metafile to determine what calls to which export engine within export engines need to made. This is done in order to make the document defined by the metafile render properly through docex interface . Neither first application nor parser knows how to render the format specified by the metafile. Rather the chosen export engine takes care of the formatting details. For example first export engine may correspond to the PDF format and second export engine my correspond to the XPS format. For example if parser determines that the metafile indicates the PDF format docex interface uses first export engine thus rendering the document in PDF. Similarly if parser determines that the metafile indicates the XPS format docex interface uses second export engine thus rendering the document in XPS.

Application interface may facilitate communication between the applications within application program suite and parser . Application interface may comprise but is not limited to an IMsoDocExporter interface as described in more detail below. For example the applications within application program suite may use an object implementing an IMsoDocExporter interface to export documents to multiple formats. The object implementing this IMsoDocExporter interface may be supplied by a common engine. The definition of the IMsoDocExporter interface is shown in .

As shown in HrCreateDoc and HrCreateDocDRM may be used to start a creation process either for non protected or DRM protected documents. SetOutputOption and GetOutputOption may be used to set various output options such as how images should be handled or the specific format we want to export to. HrAddPageFromEmf may be used to add each page of the exported document. The application passes in for example an augmented EMF containing all of the content on that page and the export engine uses that EMF to construct that page of the final output. HrAddExternalHyperlink and HrAddExternalHyperlink may be used to add hyperlink regions to a given page. HrAddDocumentMetadataString and . . . . Date and . . . . CustomMetadataString may be used to add document level metadata such as the document author subject keywords etc. Exemplary types of metadata supported may be shown in .

HrSetDefaultLcid may be used to set a default language of the document. HrAddOutlineNode may be used to add a node to the document outline. This may be used by the document reader to give the user a quick way to jump to portions of the document. The structure shown in may be used to describe a node in the outline. Note that basically specifies the text for a given node and the destination in the document the user should be taken to when they request that node.

Docex interface may facilitate communication between parser and export engines . A design principle that may underlie docex interface may comprise simplification. The metafile may be complex and difficult to properly parse. Docex interface may allow export engines to deal with far fewer primitives. Accordingly there may only be a few basic primitives supported by docex interface . These primitives may comprise but are not limited to semantic information paths images and text. Parser may responsible for translating the metafile records into these primitive objects.

Application interface may comprise but is not limited to an IMsoDocExporter interface as described in more detail below. Two interfaces may make up docex interface IDocExDocument and IDocExPage. IDocExDocument may represent the document and IDocExPage may represent a single page in the document. IDocExDocument may allow parser to set document level properties and create pages. IDocExPage may allow parser to create objects paths images and text on a particular page of the document. IDocExDocument is illustrated in and IDocExPage is illustrated in .

As shown in HrInitialize and HrInitializeEx may be called before any other methods to prepare the object. HrAppendPage may be used by parser to add a new page to the end of the exported file. It returns a pointer to an IDocExPage object which the parser can then use to add content to that page. The three HrAddDocumentMetadata methods may be used to add metadata to the document such as the document author title last creation time etc. GetDefaultLanguage SetDefaultLanguage may be used to annotate the exported document with a default language for example the language most text should read in. HrFinalizeDocOutline may be used to add a document outline to the exported file. It takes a pointer to the root of the document outline. It should be called after all pages and content are added to the file. HrFinalizeDocStruct may be used to add a document structure tree to the exported file. It takes a pointer to the root of the document structure tree. It should be called after all pages and content are added to the file. HrFinalize should be the last call before HrSerialize. It may perform final authoring stages before serialization. One important stage may comprise figuring out the proper subset of glyphs necessary in each font face used in the document and then optionally embedding only the necessary glyphs. This may make exported documents significantly smaller. HrSerialize may write the file to disk with the final file name.

As shown in IDocExPage HrFinalize may be called after all content is added to a page to signify that the caller is done adding content. Regarding IDocExPage FsupportedDocexPen parser may choose to support or not support various types of pens. Parser can call this process to determine which pens are supported by the parser. The object may return true if the pen can be rendered natively or false if it should be flattened. IDocExPage HrRenderPath may be one of the three core rendering processes on a page. It may be used to render a path on the page with a given set of points a brush or a pen or both and a clipping path. All shapes drawn on a page may end up being paths including lines circles many pictures and metafiles. A path can render with either a brush or a pen or both. A brush may be used to fill the interior region of the path and a pen may be used to stroke the outline. One of export engines may be responsible for converting these structures into the form in which the export format expects. A brush may be defined by the DOCEXBRUSH structure . Note that there may be various types of brushes solid fills gradients of several sorts and texture e.g. picture fills. One of export engines may support all of these.

A pen maybe defined by the DOCEXPEN structure as shown in . A pen may contain a brush that may be used to fill the interior of the stroke but only solid brushes may be supported here. Brushes can have various line cap styles dash types dash cap styles and join styles. The brushes can be inset inside the path or centered on the path and can be of any thickness. A clipping path on a path may be used to define a region to which drawing may be clipped. This may be supported by the export engines . Callers may pass NULL for the clipping path.

HrRenderImage may be used to add an image e.g. a bitmap to a page. The position may be specified as three points on the page representing three vertices of the rendered bitmap. A clipping path may optionally be given. HrStartMetafile and HrEndMetafile maybe used to bracket content which should be drawn within a specified portion of the page. Coordinates of all paths between HrStartMetafile and HrEndMetafile may be translated to be relative to that portion of the page. HrRenderText may be used to add glyphs to the page at a particular position. As illustrated in a solid brush may be given for the glyphs to be filled with along with the font to be used and the position of the text. Note that both the Unicode code points for the text and the glyph indices are given at once this allows the exporter to embed accessibility information in the exported document.

HrAddExternalHyperlink HrAddInternalHyperlink may be used to add internal and external hyperlink hot spots to the given document. HrBeginStructNode HrEndStructNode may be used to add accessibility structure information to a given section of the document. Content e.g. text images paths that may be added between calls to these functions may be considered part of the node. Note that nodes can be nested therefore paired calls to these functions can be nested. As illustrated in there may be a number of types of structure nodes listed in the MSODOCEXSTRUCTTYPE enumeration. Document structure may be used for a number of purposes. First screen readers may use it to understand the content in the document better. Second it may be used for searching the document. Third it may be used to reflow the content in the document for different size pages such as reading a PDF online on a very small screen . Calls to these functions maybe optional for example not all content need be embedded in a structure node. In addition each node may have alternate text. This may be used for example to provide alternate text for an image or a group of elements which have a textual representation for sight impaired users. Consistent with HrBeginMarkedContent HrEndMarkedContent content may be marked with a given language by bracketing it within calls to these functions. The actual text to be associated with the given span of content may also be specified.

After computing device parses the metafile in stage exemplary method may proceed to stage where computing device may send the at least one call to the export engine configured to render the document in an output format associated with the export engine. For example executing on computing device one of export engines may receive one or more function calls from parser . For example if parser determines that the application requests the PDF format and if first export engine corresponds to the PDF format docex interface may select first export engine thus rendering the document in PDF. Consequently embodiments of the invention may ultimately render in an output format consistent with user input indicating the output format associated with the selected export engine. After computing device sends the at least one call to the export engine in stage exemplary method may then end at stage .

Generally consistent with embodiments of the invention program modules may include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover embodiments of the invention may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. Embodiments of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

Furthermore embodiments of the invention may be practiced in an electrical circuit comprising discrete electronic elements packaged or integrated electronic chips containing logic gates a circuit utilizing a microprocessor or on a single chip containing electronic elements or microprocessors. Embodiments of the invention may also be practiced using other technologies capable of performing logical operations such as for example AND OR and NOT including but not limited to mechanical optical fluidic and quantum technologies. In addition embodiments of the invention may be practiced within a general purpose computer or in any other circuits or systems.

Embodiments of the invention for example may be implemented as a computer process method a computing system or as an article of manufacture such as a computer program product or computer readable media. The computer program product may be a computer storage media readable by a computer system and encoding a computer program of instructions for executing a computer process. The computer program product may also be a propagated signal on a carrier readable by a computing system and encoding a computer program of instructions for executing a computer process. Accordingly the present invention may be embodied in hardware and or in software including firmware resident software micro code etc. . In other words embodiments of the present invention may take the form of a computer program product on a computer usable or computer readable storage medium having computer usable or computer readable program code embodied in the medium for use by or in connection with an instruction execution system. A computer usable or computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a non exhaustive list of the computer readable medium would include the following an electrical connection having one or more wires a portable computer diskette a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber and a portable compact disc read only memory CD ROM . Note that the computer usable or computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory.

Embodiments of the present invention are described above with reference to block diagrams and or operational illustrations of methods systems and computer program products according to embodiments of the invention. It is to be understood that the functions acts noted in the blocks may occur out of the order noted in the operational illustrations. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality acts involved.

While certain features and embodiments of the invention have been described other embodiments of the invention may exist. Furthermore although embodiments of the present invention have been described as being associated with data stored in memory and other storage mediums aspects can also be stored on or read from other types of computer readable media such as secondary storage devices like hard disks floppy disks or a CD ROM a carrier wave from the Internet or other forms of RAM or ROM. Further the stages of the disclosed methods may be modified in any manner including by reordering stages and or inserting or deleting stages without departing from the principles of the invention.

It is intended therefore that the specification and examples be considered as exemplary only with a true scope and spirit of the invention being indicated by the following claims and their full scope of equivalents. Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

