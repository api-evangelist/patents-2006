---

title: Security architecture for content management systems
abstract: Embodiments of the invention provide methods, apparatus, and articles of manufacture for providing security architecture for content management systems. An audit log table separates security concerns in framework code from application concerns in application code. Application developers place database access code in stored procedures. Each stored procedure records a unique identifier for each object involved in the database access code into an audit log, for later security checking by framework code. After executing the stored procedure, the framework code determines whether the stored procedure was authorized by checking the audit log and access control lists stored in the database. If not, an access violation error may be returned and the database may be rolled back.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07797339&OS=07797339&RS=07797339
owner: Autodesk, Inc.
number: 07797339
owner_city: San Rafael
owner_country: US
publication_date: 20060526
---
The present invention generally relates to computer security database management systems DBMS and content management systems CMS . More specifically the present invention relates to a method of enforcing access rules for objects stored in a CMS that are accessed by a variety of application programs.

Generally CMS systems are used to provide a single secure repository for virtually any kind of digital information e.g. files documents objects tables and other data . For example a CMS system may be used to store design data files and drawings etc. accessed by multiple users of a computer aided design CAD system. By storing content in a centralized location users can locate share reference and reuse that content. A CMS is a computer software system for organizing and facilitating collaborative creation of content in a multi user system. Typically a CMS stores user content in a file system and stores information about the files in a relational database. Because a CMS system may provide broad accessibility to multiple users it is often desirable to restrict which content users may access. For example access restrictions may be specified using access control lists ACLs .

An ACL is used to enforce access rules for an object identified in the ACL. ACLs are a means of determining whether a user has the appropriate access rights to a given object depending on attributes of the user making the request e.g. the user s identity or membership in a group . An ACL is a data structure e.g. a table with entries specifying individual user or group rights to specific system objects such as a program a process or a file. The privileges or permissions determine specific access rights such as whether a user can read from write to or execute an object. Thus among other things an entry in the ACL controls whether a user or group of users may alter or access an object or both.

To provide adequate security in a CMS ACLs may need to be associated with individual rows in one or more tables in the relational database. This occurs because the CMS system may use individual rows of a database table to reference objects in the file system each with an entry in an ACL. Existing DBMS systems fail to provide support for this kind of access control. As a result one approach to provide the necessary security is to have a user application to perform access checks when performing an operation involving content in the CMS system. However access control and the core application functionality e.g. providing a CAD system are usually unrelated concerns. A well designed application should reflect a separation of these concerns by coding access controls independently from application functionality.

Two common approaches used to provide access control in a CMS system suffer from several drawbacks. As suggested in a first approach an application programmer may explicitly code access checks as part of an application that accesses content in the CMS. For example an application may include structured query language SQL queries or stored procedures that perform access control functions for content stored in the CMS. A stored procedure is a set of SQL statements with an assigned name that is stored in the database in compiled form. This first approach violates the desired separation of concerns principle because it entangles access control with application logic. Worse the rather low level of sophistication available in the SQL language results in duplicated code strewn throughout every query or stored procedure because the routines that perform the access checks are duplicated in each function that accesses the database.

A second approach includes providing a data access framework using a load modify store architecture that treats the database as dumb storage. While this second approach allows the use of higher level languages and object oriented techniques to separate application program concerns from security and access control it has performance problems due to large amounts of small data interactions with the database. Thus this approach does not scale well.

Accordingly there is a need for a method to allow access checks to run in the database and at the same time keep the access checking code separate from the application code. There is also a need for a time and cost efficient solution.

Embodiments of the invention include a method an apparatus and an article of manufacture used to provide security and access control features for content stored by a content management system.

One embodiment is a method for providing security architecture for content management systems. The method generally includes invoking an application stored procedure which records an identifier in an audit log for each of a plurality of objects involved in a database operation performed by the stored procedure invoking a security check procedure configured to perform an access control check to determine whether the application stored procedure was authorized to perform the database operation using the identifiers recorded into the audit log and returning any access violation error. In the event of an access violation error the method may further include reverting a database back to an operational state that existed prior to performing the database operation of the stored procedure.

Another embodiment of the invention a computer readable medium containing a program which when executed by a processor performs the method for providing security architecture for content management systems.

Still another embodiment is a system for providing security architecture for content management systems including an application stored procedure a security check procedure and a director. The application stored procedure includes one or more database access operations and code to insert an identifier for each object involved in the database access operations into an audit log. The security check procedure performs a security check on the audit log by checking ACL tables to determine whether the application stored procedure was authorized. The director invokes the application stored procedure calls the security check procedure and returns any access violation error.

Advantageously a developer writing the business logic of a client application need not repeatedly embed security checking instructions into application code. Checking for proper access is the concern of the system and the responsibility of the framework and infrastructure freeing the application developer to concentrate on implementing application features.

Embodiments of the invention provide a method an apparatus and an article of manufacture for enforcing access control restrictions specified for content stored by a content management system CMS . Thus embodiments of the invention provide security in a CMS for applications that access data files or objects stored by the CMS such as a computer aided design CAD application. However embodiments of the invention are not limited to CAD applications or CAD environments rather embodiments of the invention may be adapted to provide security and data access controls for any application that stores any kind of content in a CMS.

One embodiment solves the problem by separating a security layer from an application layer using a minimal hook point where the two layers interact. The hook point may be an audit log table stored in the database. The audit log table includes unique database identifiers IDs that identify records in the database e.g. a file or a version of a file in a CAD system and user sessions among other information. In practice when an application requests a transaction that should be vetted for security and access control concerns the application records the IDs of any objects involved in the transaction in the audit log table. The system then retrieves the IDs from the table to perform a security check. In this manner the audit log efficiently decouples security and application concerns allowing application developers to write application code without being overly concerned with security.

In this embodiment stored procedures provided by the application developer add information to the audit log. An application developer places database access code in stored procedures which are stored in the database for later execution. The developer may create these stored procedures using a library of development tools and an application programming interface API . The library and API are provided to developers e.g. third party developers or application programmers to developers as part of a given CMS system allowing them to create customizations or extensions to the application e.g. to a CAD system in the form of application code. One kind of application code is a stored procedure. Stored procedures may read data modify data create new data or perform other operations such as checkout files copy files delete files etc. When the application performs an operation that involves information data or files managed by the CMS system the stored procedure writes all the relevant IDs for each object involved in the operation into the audit log i.e. all the IDs of things referenced accessed or touched in some way by the stored procedure for later security checks. The application developer does not need to have an application perform security related operations and therefore is not involved in access control checks beyond placing IDs in the audit log .

In one embodiment the system is logically but not necessarily physically represented by a layered model with interaction between the layers. A client application layer interacts with a server application layer. The server application layer in turn interacts with both a database application layer and a server framework layer. The client application layer includes application code and the server framework layer includes framework code. To invoke a stored procedure the client application layer passes a request to the server application layer which passes the request to the server framework layer. In turn the server framework layer may invoke the stored procedure perform the appropriate access control checks and return any results back through the layered framework.

The components illustrated in include computer software applications configured for existing computer systems e.g. desktop computers server computers laptop computers tablet computers and the like. The applications described herein however are not limited to any particular computing system and may be adapted to take advantage of new computing systems as they become available.

Additionally the components illustrated in system may be software applications executing on distributed systems communicating over computer networks including local area networks or large wide area networks such as the Internet. For example a graphical user interface and client application may include software programs executing on a client computer system communicating with CMS system over a computer network e.g. an office LAN a corporate intranet or the Internet . Also the components illustrated in may be provided as an application program or programs stored on computer readable media such as a CD ROM DVD ROM flash memory module or other tangible storage media.

As shown the client application includes a graphical user interface GUI a display device and input devices . For example in a CAD system the GUI may display design drawings on the display device and provide functionality for creating modifying sharing and maintaining the design drawings which is accessible by using the input devices . In such a case CMS manages content for the CAD system . Typically input devices include a mouse pointing device and a keyboard and display device is a CRT monitor or LCD display. An example of a user interacting with client application to access content stored by the CMS system is shown in .

In one embodiment CMS system includes a server and a database management system DBMS . Server provides services to the client application e.g. file check in checkout and DBMS manages data for the application e.g. storing design drawings for the CAD system and storing stored procedures . Within the CMS both the server and the DBMS include some application code and some framework code . Application code provides the functionality of the client application e.g. CAD system and framework code provides the functionality of the CMS e.g. securely managing content for the CAD system .

As shown server includes server application code and server framework code . When a user interacting with client application requests an operation for example to checkout a design drawing stored by CMS client application sends a request to server framework code requesting to check out objects from CMS that are associated with the design drawing. After completing the checkout operation including performing the appropriate access control checks server framework code provides the requested objects to the client application so that the GUI may display the design drawing on display device .

The DBMS may include separate database procedures and tables for the application code and the framework code . The application database procedures and tables include stored procedures used to perform application related functions. The framework database procedures and tables include audit log table used as the hook point between client application and CMS . When the CMS invokes a stored procedure e.g. to checkout a design drawing that stored procedure records the IDs associated with the design drawing being checked out into the audit log table . Then a security check procedure in framework database procedures and tables performs a security check using these IDs to ensure that client application has the appropriate access privileges to checkout the requested design drawing.

More generally when a client application performs a transaction involving objects stored by CMS the server application code invokes a stored procedure which may be configured to record the IDs of the objects in audit log table . Doing so effectively passes IDs for the objects to the database procedures allowing the database procedures to perform an access control check on each object involved in the transaction. The application code requests the framework code to invoke one of the stored procedures . After executing the stored procedure the framework code executes a security check procedure to perform an access control check on the IDs inserted in the audit log table by the stored procedure . The access control check determines whether the transaction performed by the stored procedure may take place.

If the system determines that an access violation has occurred the framework code may respond in a variety of ways. For example if the system denies permission to modify data the system may reverse a transaction performed by the stored procedure using standard SQL mechanisms allowing the system to be rolled back to the state that existed prior to the transaction. In some cases it may be preferable to execute stored procedure check the security and perform a rollback if necessary as opposed to checking the security before executing the stored procedure. For example it may be inefficient to perform a security check for each step of a multi step transaction. Further by performing the security check after performing stored procedure system shields client application from the details of security and instead system only informs client application when there is an access violation. Similarly the framework code does not need to know the details of the transactions or operations performed by the stored procedure or the operations of client application . Instead framework code only needs to evaluate the IDs in audit log for the objects involved in a particular transaction. In this way the system decouples security concerns from application concerns.

Although assigning responsibility to the client application for adding IDs to the audit log table represents a minor entanglement of access checking and application concerns this minor entanglement allows the framework code to access check the audit log table . The details of how to represent and store ACLs and how and when to check them are only the concern of the framework code and they are not any concern of the application code . Thus access checking does not become part of the application code . This allows developers to build applications more quickly because they do not need to embed security aware code within their business logic. Separation of concerns also simplifies software maintenance because the security code is centralized and not duplicated in many pieces of code. Further the system minimizes the amount of data that moves into or out of the database by storing access controlled data ACLs and access checking code in the DBMS . Moreover the audit log provides a useful hook point for passing information between client application and CMS related to many system functions in addition to enforcing access control rules none of which need be the application developer s concern.

In this example the following components interact to execute an application stored procedure and to perform the security check a director application stored procedure a security check procedure and an audit log . In one embodiment director is part of framework code illustrated in . Application stored procedure is part of application code and stored in database . Security check procedure is part of framework code and also stored in database . Audit log is part of the framework code but is accessible to the application code .

Director is part of a known director builder software design pattern. This pattern is a computer software concept for separating the construction of a complex object or set of objects from the representation of the object so that the same construction process can create different representations. Other embodiments may use other patterns or constructs. In one embodiment director is part of framework code and the builder not shown is part of application code . As understood by persons skilled in the art the director builder pattern defines the following concepts builder product director and concrete builder. The builder is an abstract interface for creating parts of an object the product the product represents the complex object under construction director constructs the object using the builder interface and the concrete builder constructs and assembles parts of the product by implementing the builder interface.

Data access routines in stored procedures return one or more sets of differing types of objects. The builder builds each object from one of the result sets returned from a stored procedure. Obtaining and processing results sets checking access control and building objects is generally the responsibility of director . Thus director directs both the construction of the results as well as the process of obtaining result sets. In one embodiment when a developer codes a data access routine the developer instantiates director and supplies it with the parameters of the stored procedure instantiates one or more builders and adds them to director and then executes director . When a transaction may include multiple result sets the developer adds a builder or an array of builders to the director with one builder object responsible for processing one of the result sets.

As stated above audit log provides a hook point for separating security and application concerns. Each stored procedure records IDs for each of the objects affected by its operations including any resulting objects in audit log . Stored procedure may record object IDs into the audit log with a session ID or thread ID . The session ID allows the system to distinguish between different transactions. The session ID may be based on the identity of the user or process recording object IDs into audit log . In one embodiment the system may add other attributes to audit log . In one embodiment the entire audit log is access checked at once relative to a given transaction. More generally one skilled in the art will typically implement the system and audit log in such a way as to minimize performance overhead.

As shown in at step director receives a request to invoking application stored procedure along with any required arguments for the stored procedure . For example client application may request the director to invoke a procedure to check out objects managed by CMS . At step director cleans up audit log by removing any information from prior executions of application stored procedure . As shown the director cleans up at audit log at the beginning of operational flow . Alternatively however the director may clean up audit log when a transaction is completed.

At step director begins performing the requested transaction and at step invokes application stored procedure . At step application stored procedure records the objects ID for objects involved in the transaction in audit log . At step the application stored procedure returns the results of stored procedure to director .

At step director invokes security check procedure to perform an access control check using the object IDs in audit log . In one embodiment security check procedure performs the security check by using an ACL. In this embodiment database tables may be used to represent access control lists ACLs . The security check procedure checks the role based permissions on users and the ACLs on objects involved in the transaction being evaluated. Security check procedure may evaluate permissions for a set of objects at once instead of individually. Doing so may avoid loading objects into memory and then going back to load permissions. Another embodiment avoids loading ACLs with objects. Those skilled in the art will recognize that other embodiments may implement ACLs in other ways. At step audit log is cleaned up by security check procedure . At step if an access violation has occurred security check procedure notifies the director . In response director may abort the transaction at step and return the access violation error to the application code at step . The application code may handle the access violation in any appropriate manner. For example application code may be configured to notify a user that a requested transaction has filed due to a lack of sufficient access rights or privileges.

The disclosed exemplary embodiments of the invention include methods apparatus and an article of manufacture for providing security architecture for content management systems. In one embodiment a security framework applies access control to folders and their contents in a file management system in a database. Various embodiments provide access control at different levels of granularity such as to individual objects in a database. Some embodiments provide flexibility to allow many different access control models. The embodiments make security checks the responsibility of the framework layer so that it is transparent to application layer. Embodiments include an audit log that reduces the performance impact of object level access checks. Embodiments separate security concerns from application concerns e.g. business logic by minimizing the overlap or visibility of the security system. Advantageously a developer writing business logic need not repeatedly embed security checking instructions into application code. Checking for proper access is the concern of the system and the responsibility of the framework and infrastructure freeing the application developer to concentrate on implementing application features.

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

