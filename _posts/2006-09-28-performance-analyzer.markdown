---

title: Performance analyzer
abstract: A method for performance analysis of a system may include capturing data including callee stack information and persisting the callee stack information in a form that can be queried. The method may also include generating a performance analysis report in response to a query.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07913233&OS=07913233&RS=07913233
owner: Bank of America Corporation
number: 07913233
owner_city: Charlotte
owner_country: US
publication_date: 20060928
---
The present invention relates to monitoring analyzing and managing performance of data processing systems components of such systems software applications operating on such systems and like and more particularly to a method and system for performance analysis of data processing systems such as a Java 2 Platform Enterprise Edition J2EE environment or similar environment or system.

Monitoring analyzing and managing the performance of a data processing system a web based enterprise system such as a Java 2 Platform Enterprise Edition J2EE system or similar systems and their components and application programming interfaces APIs can be extremely challenging if not a close to an impossible task. Java and J2EE are trademarks of Sun Microsystems in the United States other countries or both. Understanding which components and APIs are important to manage requires in depth knowledge. Considering thousands of lines of code and that hundreds or thousands of components and APIs must be tracked continually all of which may execute in seconds or milliseconds the task of manually monitoring such systems becomes unfeasible for the administrator or infrastructure manager. Utilities have been developed to help but to date these programs have been largely focused on preproduction development processes such as code profiling.

In accordance with an embodiment of the present invention a method for performance analysis of a system may include capturing data including callee stack information and persisting the callee stack information in a form that can be queried. The method may also include generating a performance analysis report in response to a query.

In accordance with an embodiment of the present invention a method for performance analysis of a system may include capturing data related to operation of the system. The method may also include extracting callee stack trace information from the captured data and persisting the callee stack trace information in a form adapted to be queried. The method may further include generating a report using the callee stack trace information to permit identification of any performance issues.

In accordance with another embodiment of the present invention a system for performance analysis of a data processing system or the like may include an entity manager to generate a plurality of log entries including information related to operation of the data processing system. The system may also include a log analyzer to extract callee stack trace information from the log entries. The system may further include an output device to present a report related to performance of the data processing system using the extracted callee stack trace information.

In accordance with another embodiment of the present invention a computer program product for performance analysis of a system may include a computer usable medium having computer usable program code embodied therewith. The computer usable medium may include computer usable program code configured to capture data including callee stack information. The computer usable medium may also include computer usable program code configured to persist the callee stack information in a form that can be queried. The computer usable medium may also include computer usable program code configured to generate a performance analysis report in response to a query.

Other aspects and features of the present invention as defined solely by the claims will become apparent to those ordinarily skilled in the art upon review of the following non limited detailed description of the invention in conjunction with the accompanying figures.

The following detailed description of embodiments refers to the accompanying drawings which illustrate specific embodiments of the invention. Other embodiments having different structures and operations do not depart from the scope of the present invention.

As will be appreciated by one of skill in the art the present invention may be embodied as a method system or computer program product. Accordingly the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore the present invention may take the form of a computer program product on a computer usable storage medium for example medium in having computer usable program code embodied in the medium.

Any suitable computer usable or computer readable medium may be utilized. The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a non exhaustive list of the computer readable medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a transmission media such as those supporting the Internet or an intranet or a magnetic storage device. Note that the computer usable or computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory. In the context of this document a computer usable or computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer usable medium may include a propagated data signal with the computer usable program code embodied therewith either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium including but not limited to the Internet wireline optical fiber cable radio frequency RF or other means.

Computer program code for carrying out operations of the present invention may be written in an object oriented programming language such as Java Smalltalk C or the like. However the computer program code for carrying out operations of the present invention may also be written in conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

The present invention is described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable memory that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable memory produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the functions acts specified in the flowchart and or block diagram block or block.

In block information related to performance of the system may be captured. The system performance information may include callee stack information. The performance information may include information that identifies the application a specific portion of the application or operation identity of the user or other performance related information. The callee stack information may include a file name a code line number or line numbers parameters associated with the application or operation machine ID thread ID time stamp or similar information related to the stack and callee stack trace information.

A callee stack is a location for temporary storage. Parameters may be pushed onto the stack and then a return address may be pushed onto the stack. The flow of execution must know where to return in a process or operation. A processor executes one instruction after the other and has to be told where to go or return. In order to tell the processor how to get back the return address needs to be saved. The return address is the location in the program to be returned to after a function call. A CALL is an assembly instruction that performs this operation. A RET is an assembly instruction that uses the current value on the stack and the return address to transfer execution to that location. There may also be local variables and possibly other values that may be pushed onto the stack for temporary storage. This is one of the reasons an array or an address of any local variable can never be returned. They disappear when the function returns.

In block a plurality of log entries may be generated in response to capturing the system performance information. The log entries may include the captured system performance information which contains the callee stack information. In block the log entries may be stored in a repository database or file system for data analysis.

In block the log entries may be analyzed. Useful information such as the callee stack information may be extracted from the log entries. A data capture program may extract the callee stack trace information from the other captured information in the log entries. The captured system performance information in the log entries may be parsed to re create the callee stack information in correct time order. An example of a method for analyzing the log entries and callee stack trace information will be described in more detail with reference to .

In block the extracted callee stack information may be persisted or stored in a repository database or the like that can be queried. The extracted callee stack information may be persisted in a format that can be queried to extract data for generating reports related to system performance.

In block the callee stack information may be analyzed and various reports may be generated to help identify system performance issues bottlenecks or the like in response to queries. The analysis may include comparing persisted information to previously stored information to identify trends or changes in performance level. Other statistical analysis of the information may be performed to identify possible performance issues and to help develop remedial measures.

In block a determination may be made whether the log entry is a start type or an end type. If the log entry is an end type the method may advance to block . In block a start entry corresponding to the end type entry may be found. The corresponding start entry may be found using a key. Examples of the key may include a machine ID a thread ID a time stamp or other data that may lead to the start entry corresponding to the end type entry. From block the method may advance to block described below.

If the log entry is a start type in block the method may advance to block . In block a new log entry may be started for the machine ID thread ID time stamp and any other related data. A unique key into a hash map of the log entry data structure may be formed. The unique key may be formed using the machine ID thread ID time stamp or the like. The unique key may be generated by any known method.

In block a determination may be made if there is more log data or log entries. If so the method may return to block and the method may proceed as previously described. If there is no more log data the method may advance to block .

In block the sorted hash map may be persisted into a database for generating various reports in response to queries. The various reports may include performance reports to permit identification of any performance issues bottlenecks or the like. The sorted hash map may permit reports to be generated enabling a determination of a specific cause for the performance issues a section of the code or specific line numbers of code in question specific users or operations when performance issues arise or other information to pin point the cause of performance issues bottlenecks or the like and to provide possible incite to remedial action.

The entity manager may be started in response to being accessed by the client . An API may be associated with the client and or the entity manager or server . The API may be altered or adapted to capture the system performance information including the callee stack information.

The system may also include a log analyzer . The log analyzer may be operable on or embodied in a processor . The log analyzer may process the log entries to extract the callee stack information similar to that previously discussed. The log analyzer may parse the captured system performance information to re create the callee stack information in correct time order. The extracted callee stack information may be persisted or stored in another database system or repository that can be queried. The callee stack information may be persisted in a form that can be queried to extract data for generating reports related to system performance.

The system may also include a report generator . The report generator may be operable on or may be embodied on a processor . The processor and may be one processor or separate processors. The report generator may form queries to extract data form the callee stack trace information format data to generate reports and may perform other analysis related to the callee stack information.

An output device or devices may be provided to present a report related to performance of the data processing system or the like using the extracted callee stack trace information processed by the report generator . The report may be used to facilitate identification of performance issues such as bottlenecks inefficient code code errors or other anomalies affecting performance. The output device or devices may include a printer monitor disk drives or other output devices. The report may include performance information such as which applications are calling others how often calling other applications when calling what other operations may be going on what portions of code are calling or operating when call is performed or other information or statistics.

The flowcharts and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems which perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

Although specific embodiments have been illustrated and described herein those of ordinary skill in the art appreciate that any arrangement which is calculated to achieve the same purpose may be substituted for the specific embodiments shown and that the invention has other applications in other environments. This application is intended to cover any adaptations or variations of the present invention. The following claims are in no way intended to limit the scope of the invention to the specific embodiments described herein.

