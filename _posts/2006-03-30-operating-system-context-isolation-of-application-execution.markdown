---

title: Operating system context isolation of application execution
abstract: The resources needed by an application to execute are declared by the application. When the application is activated, only the declared resources are made available to the application because only the declared resources are connected to the execution environment. Accessibility to resources may be controlled by the operating system by making the resource visible or invisible to the executing software by mapping a local name used by the executing software to a global resource, possibly limiting the type of access allowed. Because the executing software relies on the mapping function performed by the operating system for access to resources, and the operating system only maps names declared by the software, the operating system can isolate the software, and prevent the application from accessing undeclared global resources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09038071&OS=09038071&RS=09038071
owner: MICROSOFT TECHNOLOGY LICENSING, LLC
number: 09038071
owner_city: Redmond
owner_country: US
publication_date: 20060330
---
A typical operating system does not know what executable software resides on the machine nor does it know what resources are needed by the software to execute. An application that is written to be run by such an operating system typically assumes that it will have access to a global namespace. The global namespace is used to resolve names and to obtain values and resources. A number of drawbacks are associated with use of a global namespace. Firstly use of a global namespace makes it difficult to isolate applications so that one application does not maliciously or unintentionally affect another application during concurrent execution. For example a first application may store its state in a file of a particular name in the global namespace. A second application may store its state in the same file. If the applications execute at the same time each application s state may be overwritten by the other s. Secondly machine resources accessed via a global namespace are shared by all the applications running on the machine. Because the application is able to find any resource in the global namespace the application is potentially able to access and use it. Access to the resources is typically controlled by ACLs access control lists . Access is allowed or refused based on an administrative function that associates access privileges with the identity of the user. The operating system does not control access to resources based on the application making the request and is unable to determine what resources a program needs. It follows that an application may well have access to resources that it does not need enabling a malicious program to compromise the integrity of the system. The operating system is unable to prevent this from happening.

The operating system controls access to resources by creating a construct called a context. The context can be used to isolate application software so that it is unable to unintentionally affect other concurrently executing applications or their resources. The context may be used to control what resources are available to an executing software entity. The resources needed by the software to execute are declared by the software. The resources declared by the software are cataloged and when the software is activated only the declared resources can be made available to the software by connecting them to the execution environment. A manifest declaring the resources needed by the software may be associated with the software code and packaged together as a unit called a software item. Only the resources declared in the manifest may be made available to the software code when it executes. The resources declared in the manifest may be cataloged when the software is installed. When the software is executed only the cataloged resources may be connected to the execution environment. Accessibility to resources may be controlled by the operating system by making the resource visible or invisible to the executing software by mapping a local name used by the executing software to a global resource. Because the executing software relies on the mapping function performed by the operating system for access to resources and the operating system only maps names declared by the software the operating system can isolate the software and prevent it from accessing undeclared global resources.

The context may include an installation service a configuration service and an activation service. The installation service is responsible for installing uninstalling and servicing software entities within its context. The installation service keeps track of what software is installed and available within the context and what resources are needed by the software to run. The installation service makes installed software available to the activation service. The activation service resolves configuration settings and resource values constructs the environment in which an application runs and initiates the running of the software. The configuration service maintains and manages configuration settings associated with the software and provides configuration settings to the activation service during activation of software.

An operating system is aware of what executable software resides on the machine and what resources are needed by an application to execute. The operating system is aware of how or if one piece of software depends on another. Therefore the operating system is able to determine if a particular piece of software is incapable of execution. That is if one or more pieces of software on which an application depends is missing the application will not be able to execute.

Even if an application is written assuming that it will have access to a global namespace resources may be limited by the operating system to those required for execution. A structure for controlling access to resources is created by the operating system. In some embodiments of the invention the structure for controlling access to resources is the context. A context may include an installation service a configuration service and an activation service. A context may represent a system context developer context manager context user context or other type of context. When an application is started the context determines the required resources and makes only those resources accessible to the application. Resources include but are not limited to system namespaces such as file systems and network devices.

The operating system isolates an application by using the context to control what resources are available to an executing application. Only those resources declared by the software are connected to the execution environment for the application. In some embodiments of the invention the resources needed by a software entity to execute are declared in a manifest as configuration settings associated with the software code whose values may point to the resources the active software will be able to access and only the resources declared in the manifest via those configuration settings are made available to the software code when it executes. The resources declared in the manifest may be cataloged when the software is installed. When the software is executed only the cataloged resources are connected to the execution environment. When software requires other software to operate the required programs are called dependencies a resolution set may include all the pieces of software required by the software to be activated and their dependencies. In some embodiments of the invention accessibility to resources is controlled by making the resource visible or invisible to the executing software by using a local name in the execution environment to refer to a global resource. The manifest may accompany the code and may be packaged along with the code into a single unit called a software item.

Although not required the invention can be implemented via an application programming interface API for use by a developer and or included within the network browsing software which will be described in the general context of computer executable instructions such as program modules being executed by one or more computers such as client workstations servers or other devices. Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers PCs automated teller machines server computers hand held or laptop devices multi processor systems microprocessor based systems programmable consumer electronics network PCs minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus .

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB .

A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . A graphics interface such as Northbridge may also be connected to the system bus . Northbridge is a chipset that communicates with the CPU or host processing unit and assumes responsibility for accelerated graphics port AGP communications. One or more graphics processing units GPUs may communicate with graphics interface . In this regard GPUs generally include on chip memory storage such as register storage and GPUs communicate with a video memory . GPUs however are but one example of a coprocessor and thus a variety of coprocessing devices may be included in computer . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface which may in turn communicate with video memory . In addition to monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

One of ordinary skill in the art can appreciate that a computer or other client device can be deployed as part of a computer network. In this regard the present invention pertains to any computer system having any number of memory or storage units and any number of applications and processes occurring across any number of storage units or volumes. The present invention may apply to an environment with server computers and client computers deployed in a network environment having remote or local storage. The present invention may also apply to a standalone computing device having programming language functionality interpretation and execution capabilities.

A context may include an installation service a configuration service and an activation service. illustrates one embodiment of a system for isolating application execution as described above. System may reside on a computer such as computer described above with respect to . In a context created by an operating system includes one or more of the following components an installation service a configuration service and an activation service . In some embodiments of the invention a context manages software units software entities called software items. A software item such as software item may include software code and metadata including dependencies other software required by the software code to execute and other resources such as but not limited to values or pointers to system namespaces such as file systems network devices shared memory components and service endpoints needed by the software code to execute. In some embodiments of the invention the metadata is provided in the form of a manifest

An installation service e.g. installation service keeps track of what software is installed and available within the context and what resources are needed by the software to run. The installation service also installs removes and services software and makes the installed software available to the activation service . Servicing software makes a newer version of the software available to the system and may include the installation of the newer version of the software and organizing and storing the metadata associated with the new software. The installation service may store installed software in an installation store .

Software available within the context may include software installed within a parent context installation store not shown . That is contexts may be linked or arranged hierarchically to form a directed acyclic graph. The ability to access software can be inherited through creation of a parent child hierarchy. In general if a context such as Context U is linked to another context Context S where Context S is the parent of Context U the software items installed in Context S are visible to Context U so that the set of software items available in Context U is the union of those available in Context U and those available in Context S.

When an application is initiated the installation service provides the activation service with the software needed for the application to run.

The configuration service maintains manages and mediates configuration settings associated with the software. Before an application is activated its properties must be initialized to proper values. The process of setting these values is called configuration. In some embodiments of the invention property values for an application are stored in a configuration store . When an application is activated the configuration service provides configuration settings for the application from the configuration store to the activation service .

The activation service constructs the execution environment in which an application will run and initiates the software. The activation service resolves configuration settings received from the configuration service and provides the process an executing instance of the application with the values needed for the application to run. The activation service resolves dependencies determines if all dependencies are satisfied and if all required dependencies are available loads the software satisfying the dependencies received from the installation service into the execution environment . An application cannot be activated unless all of the required dependencies are satisfied. The activation service connects the resources declared by the application e.g. in its manifest to the execution environment thus building the isolation environment for the application. The activation service may receive a request to activate an application or software item . The application or software item must be stored in the installation store or the installation store of a parent context. If the application or software item is found the installation service determines a set of dependencies that satisfy the application s dependencies a resolution set obtains configuration settings for the application from the configuration service creates an execution environment configures it populates it with the required software and starts the application.

In order for a software item to be successfully activated the software item must be installed in a context. If the software item is not found an error message is generated. In some embodiments a software item will be found if the software item is installed or stored in an installation store accessible to the context. In some embodiments of the invention that means that the software item must be found in an installation store such as installation store of or in the installation store of a parent context. At the resolution data and configuration data for the software item is retrieved. As described above resolution data refers to a solution set of software items that satisfy the dependencies of the software item to be executed. Configuration data refers to settings and values for properties required by the software item to execute. For the example the resolution data the set of software items that satisfies A version 1 s dependencies in this case software items A version 1 B version 3 and C version 4 is determined. At the configuration data is consolidated with requester arguments if any received with the activation request . For example the configuration data stored in the configuration store for A version 1 may be consolidated with a requestor argument that specifies that a tab in a print job is changed from 4 spaces to 8 spaces. At the execution environment is created. In some embodiments of the invention creation of the execution environment includes creating an operating system container in which the software item can execute. In some embodiments the container created by the operating system for execution of the application is a silo. A silo may be created for software item A version 1. At the environment is configured using the configuration data from the configuration store as modified by consolidation of the configuration data and the argument data. Configuration settings for A version 1 are set in the execution environment as modified by the requestor arguments changing the tab from 8 to 4 spaces . At the execution environment is populated. Populating the execution environment includes connecting resources to the execution environment by mapping a local name for the resource to a global name. The local name is the name declared by the software item. Because the global name is not known by the application and the operating system maps the local name to the global name the application cannot acquire access to undeclared global resources because the operating system only maps global names to declared resources. That is when the execution environment is populated the only connections established are ones specified as required by the software i.e. either declared in the manifest or listed in the resolution set . Thus referring again to the only software loaded into the execution environment are those declared by the software item and the only resources accessible to the software item are those declared. In the example only software items A version 1 B version 3 and C version 4 are loaded into execution environment and only connections to resources declared in A version 1 s manifest are made effectively creating an isolated execution environment for A version 1. At the process is started the application is initiated . It will be appreciated that one or more of the above listed actions may be optional or skipped and that the actions may proceed in a sequence other than that depicted in .

The various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. Thus the methods and apparatus of the present invention or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers the computing device will generally include a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may utilize the creation and or implementation of domain specific programming models aspects of the present invention e.g. through the use of a data processing API or the like are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

While the present invention has been described in connection with the preferred embodiments of the various figures it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiments for performing the same function of the present invention without deviating therefrom. Therefore the present invention should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the appended claims.

