---

title: Ready to render business intelligence result sets
abstract: A query that is based on a predefined format of an arbitrary query language is received. A data analyzing component performs the query to obtain a query result. The query result and a report layout specification are provided from the data analyzing component to a data processing component, the data processing component being on a computer. The data processing component associates the query result with at least one element of the report layout specification to generate an association. The query result is provided from the data processing component through an interface based on the report layout specification without reliance on the type of the arbitrary query language to a rendering component. The report layout specification is provided from the data analyzing component to the rendering component to render the query result in a report according to the association without reliance on the type of the arbitrary query language.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08112385&OS=08112385&RS=08112385
owner: International Business Machines Corporation
number: 08112385
owner_city: Armonk
owner_country: US
publication_date: 20060623
---
The present invention relates to data access middleware and in particular to a system and method of producing business intelligence data sets that can be rendered easily within user interface application systems.

Many organizations use data stores for storing business data such as financial data and operational data. In order to assist business users to examine their data various data analyzing applications are proposed. Those data analyzing applications provide various views or reports of data to users. Those data analyzing applications typically have query engines that access the data stores to obtain desired data. The accessed data stores can be either relational or multidimensional stores which are based on fundamentally different data storage technologies and hence produce fundamentally different result set structures.

Some data analyzing applications have Online Analytical Processing OLAP query engines to allow users to analyze multidimensional views of data This type of OLAP is sometimes called Multidimensional OLAP MOLAP . A MOLAP engine summarizes business data into multidimensional views in advance and places the summarized data in a cube structure. When a user request is received the MOLAP engine accesses the summarized data and thus the MOLAP engine can provide a response to the query very fast. The user can rotate the cube structured data to see a desired view of the data using the MOLAP engine.

There also exist Relational OLAP ROLAP query engines that extract data from traditional relational databases. ROLAP engines are able to create multidimensional views on the fly. In order to extract data those ROLAP engines typically use complex Structured Query Language SQL statements against relational tables in the relational databases. ROLAP engines tend to be used on data that has a large number of attributes where the data cannot be easily placed into a cube structure. ROLAP engines support multidimensional queries issued against relational databases. Some ROLAP engines translate OLAP queries into SQL queries and other ROLAP query engines implement the access to relational databases using internal communication between components responsible for OLAP and relational operations.

For a BI application that is required to render various types of reports lists grouped lists cross tabs charts maps repeaters and a combination of these having to deal with raw data means an exponential increase in its complexity. Presenting such an application with a system that turns raw data into highly formatted data gives the BI application the ability to render all types of reports in a simple and consistent manner. The system provides an abstraction and a data model that is independent of the raw underlying data

In one aspect of the disclosure a method is provided. The method receives a query that is based on a predefined format of an arbitrary query language. Further the method performs with a data analyzing component the query to obtain a query result. In addition the method provides the query result and a report layout specification from the data analyzing component to a data processing component the data processing component being on a computer. The method also associates with the data processing component the query result with at least one element of the report layout specification to generate an association. Further the method provides the query result from the data processing component through an interface based on the report layout specification without reliance on the type of the arbitrary query language to a rendering component. In addition the method provides the report layout specification from the data analyzing component to the rendering component to render the query result in a report according to the association without reliance on the type of the arbitrary query language. A report specified in the report layout specification is one of a chart a detailed list report type that is tabular with each row including a detailed fact value that corresponds to a combination of non fact columns in each row a grouped summary report type that is tabular with at least one grouping column and at least one fact column a grouped detail list report type that includes detail and summary fact values a cross tab report that includes a set of members along a row and column axis and a master detail report that associates rows within a report with other reports including parallel detail information.

In another aspect of the disclosure a computer readable memory has computer executable instructions stored therein. The computer executable instructions when executed on a computer cause the computer to receive a query that is based on a predefined format of an arbitrary query language. Further the computer executable instructions when executed on the computer cause the computer to perform with a data analyzing component the query to obtain a query result. In addition the computer executable instructions when executed on the computer cause the computer to provide the query result and a report layout specification from the data analyzing component to a data processing component. The data processing component is on the computer. The computer executable instructions when executed on the computer cause the computer to associate with the data processing component the query result with at least one element of the report layout specification to generate an association. Further the computer executable instructions when executed on the computer cause the computer to provide the query result from the data processing component through an interface based on the report layout specification without reliance on the type of the arbitrary query language to a rendering component. In addition the computer executable instructions when executed on the computer cause the computer to provide the report layout specification from the data analyzing component to the rendering component to render the query result in a report according to the association without reliance on the type of the arbitrary query language. A report specified in the report layout specification is one of a chart a detailed list report type that is tabular with each row including a detailed fact value that corresponds to a combination of non fact columns in each row a grouped summary report type that is tabular with at least one grouping column and at least one fact column a grouped detail list report type that includes detail and summary fact values a cross tab report that includes a set of members along a row and column axis and a master detail report that associates rows within a report with other reports including parallel detail information.

In yet another aspect of the disclosure a method receives a query that is based on a predefined format of an arbitrary query language. The method performs the query to obtain a query result. Further the method provides the query result and a report layout specification to a computer. In addition the method associates with the computer the query result with at least one element of the report layout specification to generate an association. The method also provides the query result through an interface based on the report layout specification without reliance on the type of the arbitrary query language. Further the method renders the query result in a report according to the association without reliance on the type of the arbitrary query language. A report specified in the report layout specification is one of a chart a detailed list report type that is tabular with each row including a detailed fact value that corresponds to a combination of non fact columns in each row a grouped summary report type that is tabular with at least one grouping column and at least one fact column a grouped detail list report type that includes detail and summary fact values a cross tab report that includes a set of members along a row and column axis and a master detail report that associates rows within a report with other reports including parallel detail information.

The present invention accepts both a query and business intelligence original report layout specification and returns the results of the query via a programming interface that presents the data relative to the original report layout specification. In this manner a rendering component is able to render the results of the data by relating the original report layout specification elements with the objects returned by the programming interface. A query can be posed in an arbitrary query language as long as the results of the query are associated with elements in the original report layout specification. As such the programming interface is independent of both the query language such as SQL or MDX and the underlying data source technology and as a result a rendering component can be built that is independent of these concerns as well. The relationship between a data analyzing system a data processing system and a rendering component is illustrated in .

An original report layout specification is capable of containing one or more report specifications where each report may be one of the following standard BI report types 

The Result Set Application Programming Interface RSAPI returns data to a client application via a collection of interface classes relative to the original report layout specification not to the query used to obtain data from the underlying data source allowing a rendering component to match data values returned from the RSAPI with their layout specification for rendering purposes. As a consequence a rendering component can be implemented which is independent of the data storage technology the query language and the query itself.

Upon execution of a query an application using the RSAPI obtains a pointer to an IRSMasterDataset object an example of which is shown in . A master dataset provides access to 

A method of the master dataset object returns a pointer to an instance of the IRSDatasetInfo class . An IRSDatasetInfo object is the root of a collection of classes that convey all of the information required by a rendering component to render the data including associations with the original report layout specification an example of which is shown in .

Each IRSRowsetInfo object optionally contains a vector of IRSLevelInfo objects . Each IRSLevelInfo object returns the label assigned to a level with the original report layout specification if such a label was present. The levels are described in the order in which they appear in the rowset. Note that for multi dimensional data the level information can assist an application in producing a richer presentation of the data but that it is not essential to the rendering of the data. shows an example of the relationship between display items in a list report and RSAPI informational objects in accordance with an embodiment of the present invention. shows an example of the relationship between display items in a cross tab report and RSAPI informational objects.

The following is an example of the corresponding dataset information for the detail list report as shown in 

The following is an example of the corresponding dataset information for the grouped list report shown in 

The following is an example of a layout specification for a grouped list with footer report shown in 

The following is an example of the corresponding dataset information for the grouped list with footer report shown in 

All of the above objects together provide the information necessary for a rendering component to relate the various RSAPI objects with the original report layout specification in addition to providing column data item information such as data type scale etc. An IRSPartialDataset object on the other hand provides a rendering component with access to the actual data values associated with each of the individual rowsets. The IRSPartialDataset class is named as such because the intent is that a rendering component retrieves a partial set of data from the overall dataset set of data returned by a query to match what can be displayed in a display device. It is possible to retrieve the entire data set in a single partial dataset such as when rendering a PDF report. shows an example of the data retrieval objects of the RSAPI in accordance with an embodiment of the present invention.

A partial dataset is created from a master dataset by specifying a range of coordinates for each edge of the result set. A partial dataset then provides access to edge iterators to access the data along each edge of the result set and a cell iterator to access cell values in the case of a multi edge cross tab report. A partial dataset may also be empty a condition which may occur when a query returns no data and is obtained via an IsEmpty method of an IRSPartialDataset object.

From a partial dataset it is possible to create one or more IRSEdgeIterator objects per edge as well as one or more IRSCellIterator objects for the values of a multi edge report.

An IRSEdgeIterator object can be used to navigate all of the rows of all of the rowsets of an edge present within the scope of the partial dataset from which it is created. All of the rows of data are contained within a single virtual rowset. Each row is associated with a particular rowset its ancestor row within the result set is also identified. A rendering component uses the ancestor information to determine parent child relationships within the data. The parent row of a particular row may be within any rowset in the same edge that in the IRSRowsetLayout information is sibling or parent of the current rowset.

A client application uses the row ordinal and ancestor id to guide its navigation of an edge s virtual rowset. The application has available to it a small set of navigational methods 

The above navigational and positional methods are combined by a rendering component in order to navigate the values along an edge in order to follow nesting relationships and to associate a row of data back to its rowset information and as a consequence its corresponding element in the original report layout specification. A rendering component can also use ancestry and rowset information to recognize both ragged and unbalanced paths within a result set.

When creating a partial dataset from a master dataset the starting detail row number and number of detail rows for each edge is specified. A negative number of detail row numbers is interpreted to indicate that the first value row number is relative to the end of the corresponding edge. For example the pair of values 100 20 indicates a partial dataset containing 20 details rows ending at the 100row from the end of data

The IRSEdgeIterator GetRowNumber method for the edge of a partial dataset created relative to end of data returns negative row numbers the last of which is 1. Row numbers are decremented by 1 towards the beginning of the partial dataset. Using the previously stated example the edge rowset would begin at 20 and end at 1. Note that the non detail row numbers are also affected by creating a partial dataset relative to EOD. That is the last row in a rowset is numbered 1 and previous row numbers are decremented by 1.

In the case of a multi edge typically cross tab report a cell rowset iterator is available for a partial dataset. The cells of the N dimensional space are presented in a single rowset of data in row major order. The same next previous first last methods are available as for the edge iterator class. The Goto method accepts an array of edge coordinates one for each edge to position on the row that represents the intersection of the specified edge coordinates. From a row within the cell rowset it is possible to obtain an array of corresponding edge coordinates. With these two mechanisms it is possible for a rendering component to associated edge rows with cell values with either the edges or the cells as the starting point.

Column values are retrieved from an iterator object either by retrieving them one by one or by retrieving all column values at once. Each column value is returned by an IRSColumnValue object that returns methods to retrieve the following information regarding a column s value 

In the case of metadata rich data sources e.g. OLAP data sources information such as locale currency code format and unit of measure may be available. This information is supplied to the rendering component to allow this information to be applied when formatting the data

The column data retrieved from the RSAPI remains valid while the iterator remains on the row from which the data is retrieved. Once the iterator is re positioned the data is no longer guaranteed to remain valid. For this reason it is possible from both IRSCellIterator and IRSEdgeIterator objects to obtain a copy of a row of data that remains valid for its lifetime. This facility is useful for applications which need to navigate from one row of data to another in an edge or cell rowset and render a group of values at one time.

When navigating through a report a user may move in a variety of different manners up down left right top bottom next page etc. The rendering component obtains the set of data that corresponds the user s request and then render the results to the output device. In many reports especially grouped list reports or nested cross tabs either multiple levels of a single dimension and or different dimensions it is desirable to provide the outer higher levels of nesting in the output to provide the necessary context to the end user in the new page of data.

For example if a user was looking at a report that showed on one edge the nesting of USA California San Francisco if they paged down to see Los Angeles they would expect to see the nesting USA California Los Angeles. However if the row for Los Angeles was the first row in the new partial dataset that context would not be part of the partial dataset. To provide the necessary context would require the rendering component to maintain the previous result set and match the two partial datasets. However this approach would not work if a user paged to the bottom or to an arbitrary location within a result set. In these cases the rendering component would have lost the outer higher level context for lower inner level values.

The RSAPI provides a facility for obtaining the outer higher level context values when creating a partial dataset. In addition it is possible to request that that the partial dataset in case of a multi edge report that the partial dataset contain values in the cell iterator that are associated with the context values on the edges.

Below are described the various types of context which can be included as part of the data within a partial dataset. In each case it is possible to request that in the case of a multi edge report typically a cross tab that the corresponding values be returned as rows in the partial dataset s cell iterator.

The navigational methods of the edge iterator listed in the previous section ToFirstRow ToLastRow Next Previous and Goto return a status of context when they position an iterator on a context row allowing an application to determine immediately what type of row they have positioned on.

If multi dimensional properties are requested as part of a value set in the original report layout specification the property values appear in additional columns within the rowset one column per property.

Master detail relationships are not contained within the original report layout specification but are described within the queries used to populate the original report layout specifications. When the original report layout specification actually involves multiple report layouts that are related by query specified links the root master dataset provides access to a vector of detail master datasets. When positioned on a row of the master result set a rendering component can execute one of the detail queries using values from the master result set. The information regarding which columns provide the parameter values for the execution of the detail query is not provided as part of the RSAPI and must be provided to the rendering component via other means.

The following is an example of the corresponding data contained within a single partial dataset for the detail list report in 

The following is an example of the corresponding data contained within a single partial dataset for the grouped list report in 

The following is an example of the corresponding data contained within a single partial dataset for the grouped list with footers report in 

The following is an example of the corresponding data contained within a single partial dataset for the cross tab report in 

The following table attempts to provide a mapping between elements objects in an original report layout specification the RSAPI informational objects an the RSAPI data retrieval objects.

The systems and methods according to the present invention may be implemented by any hardware software or a combination of hardware and software having the functions described above. The software code either in its entirety or apart thereof may be stored in a computer readable memory. Further a computer data signal representing the software code that maybe embedded in a carrier wave may be transmitted via a communication network. Such a computer readable memory and a computer data signal are also within the scope of the present invention as well as the hardware software and the combination thereof

While particular embodiments of the present invention have been shown and described changes and modifications may be made to such embodiments without departing from the true scope of the invention.

