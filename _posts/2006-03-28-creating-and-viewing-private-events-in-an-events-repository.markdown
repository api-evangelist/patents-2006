---

title: Creating and viewing private events in an events repository
abstract: Techniques for accessing an events information repository are provided. An events repository contains event records defining real world events. A programmatic interface is exposed to third-party applications for accessing the event records within the repository. Specifically, the programmatic interface provides a set of routines that perform operations on the repository. Using the programmatic interface, third-party applications may call the set of routines to cause operations to be executed on the repository. Further, techniques are provided for creating and viewing private events within an events repository and also for associating user-defined tags with events using the events repository.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07676449&OS=07676449&RS=07676449
owner: Yahoo! Inc.
number: 07676449
owner_city: Sunnyvale
owner_country: US
publication_date: 20060328
---
The present invention relates to accessing data and more specifically to a technique for creating and viewing private events in an events repository.

The approaches described in this section are approaches that could be pursued but not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.

Event marketers and promoters typically desire to have event information reach a large number of people to increase the popularity and attendance of the event. Thus traditional media such as print radio and television are conventionally used to communicate event information to a large amount of the population. The larger the audience the event information reaches the more likely the attendance of the event will increase.

Through the advent of the Internet and the World Wide Web Web communication of such events may be instant and widespread to an even larger portion of the population. Further publishing event information over the Internet incurs minimal cost in relation to traditional media. For example the event information need not be replicated on physical paper and the cost of digital replication is minimal when compared to using traditional media. In order to communicate such event information to Internet users marketers and promoters create web content which may be accessed through an event application associated with a web address. Internet users may view the event information by using a web browser to send a request to the web address. In response to the request the event application sends to the browser a web page that includes event information.

Unfortunately event information that one event application makes available to browser users is not easily accessed and used by third party applications. For example some developers may desire to create third party applications to allow end users to access a customized subset of the information that is made available to end users by another event application the first party application . However developing such third party applications is difficult because event information is usually stored in a proprietary format and is usually only directly accessible to the first party application.

In order for third party applications to gain access to event information contained in the event repository used by the first party application much time and effort is needed to design the third party application to integrate with the proprietary formats of the event data. Further the event repository itself is often not directly accessible by third parties.

Another drawback of existing presentations of event information is the lack of control end users have over the event information itself. Although event marketers wish to provide event information to many end users event marketers may also wish to limit access to event information. Also event viewers are not given control over the manner in which events are classified or organized.

Therefore what is desired is an improved mechanism for creating accessing and viewing event information.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

An event sharing system includes a first party event application that provides access to an events repository. Event information within the events repository defines real world events. The first party event application may be used by end users to share real world event information. Specifically the first party event application includes an event application interface that allows users can share and collaborate in a social events network environment.

Further the event sharing system provides an API through which third party applications can access view and modify event information contained in the same events repository that is used by the first party event application. Such third party applications may provide customized user interfaces for sharing events and or provide customized event information directed to particular audiences.

According to one embodiment the events repository is a database. In other embodiments the events repository may be any entity capable of storing records defining real world events. The events repository defines real world events by associating the events with identifying information. For example each record within the events repository may be identified by an event ID and event author an event venue and a time. The event author information identifies the user that created the event record information. Also the event venue identifies the physical location of the event while the event time identifies the calendar clock time when the event will occur. Other information that may be associated with an event record includes a title and description of the event.

In order to access information within the events repository operations are performed against the events repository by an event application. As mentioned above the event application may be the first party event application or a third party event application. The event application is controlled by end users through a graphical user interface. The GUI may be accessed locally or via the Internet.

Referring now to a block diagram illustrating a communication system for accessing an events repository is shown in accordance with one embodiment. The system includes an Events Repository which contains records identifying real world events. Real world events are events that take place at a geographic location at a specified calendar time. For instance examples of real world events may be concert shows birthday parties dinner parties and other similar events.

The Event Application generally represents a first party event application that is designed to perform operations on the Events Repository . Operations that the Event Application may perform include querying data according to user specified filters and inserting data into the Events Repository in the form of event records.

Additionally Event Application is responsible for formatting data received from the Events Repository for display to a user at the Event Application Interface . For example the event data retrieved from Events Repository may not be in a user readable form. Instead data within the Events Repository may be in a native form used for communication between the Events Repository and other components such as Event Application and API . Thus Event Application is responsible for transforming the events data for display to a user. The Event Application displays the events data to a user using the Event Application Interface .

The Event Application Interface provides an interface for allowing users to access view and modify information located within the Events Repository . The Event Application Interface allows users to control the Event Application through a graphical user interface GUI environment. According to one embodiment the Event Application Interface is provided as a web application that may be accessed via the Internet or World Wide Web Web . In other embodiments the Event Application Interface may be located locally within the same system as Event Application or Events Repository .

In many circumstances third party developers desire to create Third party Applications for end users. Third party developers further desire to use information within the Events Repository to display or use at the Third party Applications . In order for Third party Applications to access and interact with the Events Repository an Events Application Programming Interface API is provided.

In the illustrated embodiment the API allows Third party Applications to make calls to routines implemented in and exposed by the first party Event Application . In alternative embodiments the routines exposed by the API may be routines implemented external to the first party Event Application that are called by both the first party Event Application and the Third party Applications .

The API provides access to information in the events repository to third party applications. In particular the API provides access to a set of routines for performing actions on the events repository. Hence Third party Applications may include instructions that call the set of routines to cause actions to be performed against the Events Repository .

According to one embodiment event applications my request actions by invoking Structured Query Language SQL methods for performing actions against data repositories such as databases. SQL defines a number of actions for data retrieval manipulation definition and other transactions involving data. Thus the Events Repository may employ a server that supports the SQL language for performing data transactions.

Event Application and third party Event Applications can receive input from users requesting that particular actions be performed on the Events Repository and in response translate the user requests into SQL statements to perform against the Events Repository . Note that in other embodiments other languages may be used to communicate and perform operations on the Events Repository .

According to one embodiment the API uses a Representational State Transfer REST architecture for communicating with the Events Repository Event Application and Third party Applications . In a RESTful API users submit a HyperText Transfer Protocol HTTP request to a specified Uniform Resource Locater URL . A service associated with the specified URL receives the request and generates a response. The response contains the requested data in some format such as Extensible Markup Language XML .

For example using the Web a user may submit an HTTP request through a browser to a specified URL. In response the user receives an XML document containing the requested data. XML is an advantageous form of data because it is a platform independent way of defining data and data organization structures.

According to one embodiment third party applications may specify event related operations using REST. Specifically a third party event application may submit an HTTP request to API . In response the routines that implement API may access events repository and provide event information back to the third party event applications in the form of XML. The third party event application is then free to do with the XML data whatever the third party application developer wishes. For example the third party event application may transform the XML data for display or storage. Hence developers of Third party Applications are able to access data from the Events Repository and utilize the data in XML form within their applications. The Third party Applications may have a custom interface for interacting with users and developers may wish to integrate the events data into such interfaces for end users.

By utilizing the REST architecture use of the API is advantageous because a client such as a Third party Application may submit all data as part of one HTTP request. According to one embodiment the API provides a set of methods to allow for the manipulation and extraction of event records from the Events Repository using HTTP GET and POST requests. HTTP GET requests are requests for retrieving data from a data repository while HTTP POST requests cause for the insertion of data into a data repository.

According to one embodiment before a Third party Application may access the API the Third party Application must obtain an authentication token. Referring now to a diagram illustrating the communication flow using the API is shown in accordance with one embodiment. shows one embodiment of requiring the authentication of the Third party Application . At step the developer of the Third party Application submits a token request to the Event Application . The token request may be initiated using a graphical user interface as shown in .

Referring now to a developer of the Third party Application may use the GUI screen to request generation of an authentication token or key . Further using the GUI screen a Third party Application developer may enter information regarding the application such as an application description and a callback URL. The callback URL may be for example a URL associated with Third party Application at which the Third party Application receives all event data that is requested by the third party Application through API . The callback URL thus defines the channel on which data should be communicated from the Events Repository back to the Third party Application .

In response to the developer has submitting the request at step the Event Application generates an authentication token and displays the authentication token information on the GUI screen. In other embodiments the Event Application may provide other mechanisms of communicating the authentication token to the developer of the Third party Application . For example the authentication token may be sent in an email message to an email address specified by the third party application developer.

Once the authentication token is obtained by the third party application developer the third party application developer designs the Third party Application to include the authentication token when the third party application submits requests to the Event Application in order to perform operations on the Events Repository .

Referring back to at the Third party Application places an HTTP routine call to the Event Application . According to one embodiment the HTTP routine call identifies the authentication token to the Event Application . In order to determine if the Third party Application is authorized to access the Events Repository the Event Application determines whether the HTTP routine call includes a recognized authentication token. If so the Event Application processes the HTTP Routine Call by issuing a Native Routine Call to the Events Repository .

Otherwise if the request made by the third party application does not include a recognized authentication token then the Event Application can reject the HTTP Routine Call and request that the Third party Application obtain an authentication token for example by responding with an error message. Alternatively the Event Application may return a different set of event information than would have been returned if the third party application did include a recognized authentication token.

According to one embodiment the HTTP Routine Call includes parameters required to form a Native Routine Call to Events Repository . Hence only one HTTP Routine Call is required to perform an operation on Events Repository . Such is an advantage of utilizing a RESTful API. One example of a sample query with an API authentication token is as follows 

In this example the Event Application API is accessed at http www.upcoming.org services rest using the authentication token APIKEY. The HTTP Request indicates to use the event.search operation which defines a search operation to be performed against the Events Repository . Further the HTTP Request also includes the search text and other filters for use in the search.

When the Event Application receives and authenticates the request using the authentication token at step the Event Application interprets the HTTP Routine Call and constructs a Native Routine Call to the Events Repository . The Native Routine Call may be in a language or protocol different from the HTTP Routine Call. For example according to one embodiment the Native Routine Call may be an SQL statement performed against the Events Repository . The Events Repository receives the Native Routine Call which causes the Events Repository to perform any number of actions such as retrieve events data or insert events data into tables of the Events Repository .

The Events Repository performs the requested action and in response supplies the results of the request in the form of Native Data at step . Thus Event Application is responsible for translating the HTTP Routine Call into the native format of the Events Repository.

At step the Event Application translates the Native Data into a standard format such as XML data and provides the XML data to the Third party Application . The third party Application receives the data and in one embodiment causes event information represented by the data to be displayed to an end user using a Third party Application interface. In other embodiments the Third party Application may use the data for any other purpose.

According to one embodiment the Third party Application may use the event.search method as provided by the API to search for event information within the Events Repository . Note however that other methods available within the Events API for use by Third party Applications are listed in Table 1. The methods in Table 1 are either HTTP GET methods or HTTP POST methods.

Using the above methods or routine calls Third party Applications may access and perform actions against the Events Repository using simple HTTP GET and POST operations. Further note that the list of routines in Table 1 is not comprehensive and additional routines may be used within the API .

Each method or routine may be used to pass parameters specifying conditions of a requested operation. According to one embodiment the API defines acceptable parameters for each routine. For example according to the API the event.getInfo routine may use the following parameters api key event id and token. The api key parameter defines the API application key and the event id identifes the EVENT ID number of the particular event. Both the api key and event id parameters are required for use of the event.getInfo method. Further one optional parameter is the token parameter which defines an authentication token for viewing events marked as private. Note that in other embodiments additional parameters may be specified.

In response to making these routine calls the Third party Applications receive data from the Event Application . In the case that an error has occurred during the call to the routine or method the Event Application may return an error code indicating that an error has occurred. Otherwise the Event Application returns data as requested through the routine call.

According to one embodiment the data may be in the form of XML. One example of a response in the form of XML data may be the following 

The XML data as shown above is received in response to an event.getInfo method call using an event id parameter of 1 . The XML data identifies the event name description event date time and other information useful for Third Party Applications . Such XML data received by the Third Party Applications adheres to a standard format or structure making it easy for Third Party Applications to parse and use the XML data. Note however that in other embodiments the Event Application may send data to Third Party Applications in any acceptable format.

The first party Application may implement a user specific authentication mechanism. A user specific authentication mechanism may be used for example to implement private events that are described in greater detail hereafter. With a user specific authentication mechanism the identity of a user may dictate what events the user is allowed to see. If third party applications have unrestricted access to all events data then the user specific authentication of first party Application may be compromised by third party applications. To avoid compromising the user specific authentication mechanism of first party Application API may be implemented in a manner that only provides third party applications with event information that is viewable by all users.

However Third party Application designers may want their users to be able to see their user specific event information. Thus according to one embodiment the Third party Application may be programmed to request identification information from end users. When the end user submits a request through the Third party Application to the Events Repository the Third party Application submits the user identification information along with the HTTP Routine Call. In response requests that include user identification information the API sends to the third party application all of the event information that the specified user is allowed to see.

Third party Application developers may decide to develop their own interfaces to interact with end users. The Third party Application developers may design application interfaces suited for many different purposes. However regardless of third party application design through use of the API Third party Applications have versatile access to the Events Repository and may interact with the Events Repository to perform many functions traditionally performed by the Event Application .

Event data within the Events repository is conventionally available for all users of the Event Application including Third party Applications . In some instances however event authors users who wish to create or publish events may wish to create private events that are only viewable by a selected number of event application users.

According to one embodiment an event repository system is provided that includes a mechanism that allows event authors to designate the events and venues that they create as private . Events and venues that are marked as private are only accessible by 1 the event author and 2 users that the event author has marked as authorized to view the event.

According to one embodiment each user of the Event Application identifies a group of other users as friends . Any user identified as a friend of the event author may be authorized to view the event author s private events. When a user stores an event record within the events repository using the Event Application or Third party Application information identifying the user as the event author of the event record is associated with the event record.

Further the Event Application or Third party Application allows event authors to designate events as public or private events. In the case an event is designated as a public event any user with access to the Events Repository may view the event. However if the event author has designated an event as a private event only users who have been designated by the event author as authorized to view private events of the event author may access the private event.

According to one embodiment each event author designates a single list of user designated friends. Each user on this list is authorized to view the event author s private events. In other embodiments however the event author may establish more than a single list or grouping of users. Further for any particular event the event author may individually select users who are authorized to view that particular event.

In an alternative embodiment an event author s friends may vary from event to event. For example a user may specify separate lists of work friends camping friends and close friends . When the user creates a private event the user may specify on an event by event basis which set s of friends are allowed to view that specific event.

Referring now to a GUI screen for creating private events is shown in accordance with one embodiment. The GUI screen shown in represents a screen of the Event Application Interface . When an Event Application user would like to create a private event the user may navigate to the GUI screen using a web browser. The GUI screen presents input fields requesting data from the user. For example the data input fields request the user specify the category start data time event name description and venue of the event. Further one option for the user is whether to designate the event as personal or private. In the event that the user designates the event as a public event all users with access to the Events Repository will be able to view the event information. However if the user has designated the event as a private event other viewing rules will take effect as further described herein.

When an event is created an event record is placed into the Events Repository . The Events Repository associates event records with user information such as whether the event record is a public or private event record. Referring now to a block diagram illustrating the contents of an events repository is shown in accordance with one embodiment. The Events Repository contains table .

According to one embodiment table defines event records within the Events Repository . Each event record contains an Event ID an Event Author a Venue Time Public Private designation and a Description. In other embodiments event records within table may contain any other number of fields.

Table defines public private designations to event records. For example using table an Event Application may determine whether any event is public or private. Note that in other embodiments the Public Private designation information may be located in a separate table.

Additionally table defines user relationships within the Event Application . The data in table identifies whether a user has designated another user of the event application as authorized to view private events. If two users have designated each other as authorized to view private events the relationship is a bilateral relationship.

In order to specify who is authorized to view private events of an event author event authors of the Event Application are provided a means for designating other users of the Event Application as authorized to view the event author s private events. According to one embodiment such users are labeled friends of the event author. For example each user of the Event Application may designate a number of other users of the Event Application as being in a friends list. Users within an event author s friends list are automatically authorized to view the event author s private events.

When a user wishes to view a private event authored by another user or when the Event Application is determining which events to display to a user the Event Application must first determine whether the user is authorized to view the event author s private events.

According to one embodiment the authorization from an event author works in a unidirectional manner. For example only users that the event author has specifically marked as authorized may view the private event. Thus a user who has marked an event author as a friend may nonetheless be prohibited form viewing the event author s private events due to the unidirectional nature of the authorization.

For example referring now to table although User A has marked User B as authorized to view private events the relationship is not bilateral meaning that User B has not marked User A as authorized to view User B s private events. Hence User B may view User A s private events but User A may not view User B s private events. In order to determine whether User B is authorized to view User A s private events the Event Application may query the Events Database and perform a lookup of table . By examining information from table Event Application can determine that User B is authorized to view User A s private events and display the events to User B. However User A and User C have a bilateral relationship. Specifically because both User A and User C have designated each other as authorized to view private events User A may view User C s private events and vice versa.

In order to select users as authorized to view private events or to generally identify users of the Event Application as friends event authors may search for users using a GUI screen of the Event Application . Referring now to a GUI screen for selecting authorized users is shown according to one embodiment. The GUI screen of displays information regarding a single user of the Event Application . The GUI screen may display user information such as the user s name geographic locations and public or private events.

Further in another embodiment the user information screen also displays events that the user s friends have created that the user is authorized to view. Thus as shown in events from users that this user has selected as friends are displayed. In this manner a second degree of connectivity is made within the Event Application .

Referring now to a GUI screen displaying public and private events is shown according to one embodiment. Assume for example that User A has created a private event. When User B accesses the Event Application Interface User B is presented with a GUI screen displaying events for the user. One option presented to User B is to view My Friends Events. Accordingly if User B selects the My Friends Event tab the Event Application performs an operation against the Events Repository to determine which event records to display to User B. When determining which event records to display under the My Friends Events the Event Application may examine table and determine relationships between User B and other users of the Event Application . According to one embodiment table shows that User A has designated User B as authorized to view User A s private events. Thus the Event Application will retrieve event records designated as private by User A for display to User B. The private event records may display under the My Friends Events section of the GUI Screen.

In alternative embodiments the Event Application may also define groups of users or user groups. User groups define a set of users within the Event Application with a common interest or attribute. For example one user group may be directed towards users in one geographic location while another user group may be directed towards users with a particular taste in music. In other embodiments user groups may be formed based on any criteria and all that is needed is one or more users to begin the user group.

Within a user group users may share and post events and engage in discussion regarding events. If the user group was directed towards a specific geographic location users may view and submit events surrounding that geographic location to the user group.

Further user groups may also be designated public or private. According to one embodiment events posted within a public group are viewable by all users of the Event Application. However events posted within a private group are only viewable by members of the private group. In the instance that a user would like to post a private event to a public group the private event will inherit the public nature of the public group. Otherwise if a private event is posted within a private group the event will remain private and also remain viewable to all members of the group whether or not the event author has specifically authorized each user of the private group as authorized to view private events.

Referring now to a GUI screen displaying available groups within the Event Application is shown according to one embodiment. The GUI screen displaying the user groups allows users to view groups that they have subscribed to and groups that their designated friends have subscribed. Further a user of the Event Application may use the GUI screen to add a new user group for the Event Application . When creating a new user group a group creator is given the option of designating the group as public or private. As described above public groups are accessible to all users of the Event Application and any event submitted to the public user group becomes available to all users of the Event Application . If the user group is marked private however 

One such group is displayed in . The GUI screen of displays a particular groups information. In this instance the displayed group is a public group and a user may join the public group from the GUI screen. Further the GUI screen of displays events that have been listed within the user group by other users who are members of the user group. The listing of events may also include public or private events and private events that have been placed into user groups are viewable by all members of the user group.

In another embodiment an event author may allow access to private event information outside of the Event Application. For example in some situations event authors may wish to invite people to events who are not users of the Event Repository. In this situation the event author can define a custom address where third parties may access private event information. According to one embodiment the event author may establish a custom URL address for accessing the event from outside the Event Application . In order to ensure secure access to the event listing a short hash or authentication code may be appended to the URL in order to ensure secure access to the private event information.

According to one embodiment Event Application includes mechanisms to facilitate user designated tagging of events. Tagging is a process by which keywords phrases and other attributes are associated with records within a data repository. According to one embodiment the Event Application allows users to tag event records within the Event Repository . A Tag may be a keyword image sound or any other attribute that may be associated with data. Hence in one way tags essentially describe an attribute of an event record that may not be inherent through information in the event record itself in essence becoming an ad hoc classification scheme for event information.

According to one embodiment any event record that may be viewed by a user of the Event Application may be tagged by that user including event records for events authored by other users. Thus the Event Application may allow users to freely associate attributes or keywords with event records.

The Tags allow for an ad hoc organization and classification of events. The keywords may be phrases relevant to the event content. For example the attribute may not otherwise be identified through the event information such as the author venue geographic location or title of the event. As an example consider that most concerts will not have the word concert within the description of the event. Thus a user may assign the word concert to an event in order to further identify the event.

User specified tags may be used in a variety of ways to facilitate the retrieval of information from event repository. For example users may take advantage of the tags by including tag matching criteria in their queries. For example a user may search for all events that have been tagged with the word concert .

Referring now to a GUI screen displaying event information is shown. The event information screen contains an area containing a description of the event including the venue location and time the event will be taking place. Further according to one embodiment the GUI screen also contains an area labeled Tags. The Tags area of the GUI screen displays tags that have been associated with the event. For example for this particular event the tags technology women leadership anitaborg and techleaders have been associated with the event.

The tags reflect attributes of the events and are represented within the event records in the Events Repository. The Tags area also allows a user to associate an additional tag with the event. For example referring to a user may wish to associate the word seminar with the event. When the user adds the Tag the Tag shows up at in the Tags display area. Note that when a user adds a tag to an event that user also has the option of removing the tag from the event.

According to one embodiment only users who have added tags to an event may remove tags from that event. In other embodiments event authors may control the removal of tags from events that they have authored whether or not they created the tags that they want to remove. Thus a first user may designate a tag for a particular event. When the user designates the tag the Event Application stores the user designated tag in association with the particular event within the Events Repository. Hence the association of tags to events is stored within the Events Repository in the form of tag data records.

Referring now to a block diagram illustrating the contents of an events repository is shown in accordance with one embodiment. The Events Repository contains tables and . According to one embodiment table defines event records within the Events Repository . As in each event record in table contains an Event ID Event Author Venue Date and Description information. The Event ID column contains identifiers for the events for example a single event throughout the Events Repository maintains a single Event ID and only one event is associated with a single Event ID. In order to associate tags with events the tags may be associated with the Event IDs. The use of Event IDs allow for the simple association of data within the Events Repository .

Table contains an association of Event IDs to Tag IDs which are associated with Tags within Table . According to one embodiment Table is organized by Event ID such that each record contains an association of an Event ID to a single TAG ID. For example Event ID corresponding to the event shown on the GUI screen of is listed in multiple records within table . One record identifies the relationship between Event ID and Tag ID while another identifies the relationship between Event ID and Tag ID .

In order to determine which tags are respectively associated with Tag ID and Tag ID the Event Application can inspect table which identifies relationships between Tag IDs and Tags. According to table Tag ID is associated with the tag anitaborg while the Tag ID is associated with the tag Seminar. Comprehensively by inspecting tables and Event Application can determine that Event ID is associated with the tags anitaborg and Seminar .

In another embodiment Tag data within the Events Repository may be organized differently such as in Table . In Table a new record is made for each new tag that is used within the Events Repository . For each tag listed in Table a listing of Event IDs that are associated with the tag are shown in the Event IDs column. Hence note that the tag Seminar is associated with Event IDs and . Using Table if a tag that was previously used for another event record is associated with a new event the Events Repository merely updates the Event IDs column to identify the relationship between the tag and the Event ID representing the event record. However if a new tag is used the Events Repository can create a record within table identifying the new tag as well as the Event ID associated with the new tag.

Assume a user would like to view events that have been associated with the tag Seminar . The user can search for all Seminar events using the Event Application or Third party Application . According to one embodiment a user may search for all events using an HTTP URL call such as http. www.upcoming.org tag Seminar.

When the request is received the Event Application compares the attribute against the tags in Events Repository. For example the Event Application may perform a lookup of Table to determine if the specified attribute tag is listed within the Events Repository and if so to determine which Tag IDs are associated with the tag. Next the Event Application determines which Event IDs are associated with the particular Tag ID and causes the event information for the particular Event IDs to display to a user.

For example according to one embodiment the word Seminar is associated with Tag ID . Tag ID is associated with Event ID therefore event information for Event ID is displayed to a user. In other embodiments however assume that multiple events are associated with the word Seminar. Thus referring now to a GUI screen displaying the results of a search for events associated with the Seminar tag is shown. According to Event ID corresponding to the Techleaders . . . event is associated with Tag ID in table . Hence when Event Application queries for all events associated with the Tag ID corresponding to the tag Seminar the Events Repository responds with data identifying Event ID as one such event. In response the Event Application causes the GUI screen of to display to the user. Using the GUI screen the user may select and view information of any of the listed events.

According to another embodiment when a user requests event information the Event Application retrieves only those events which occur in particular time frame. For example if today s date was Mar. 1 2006 the Event Application may only retrieve information defining events that have a date or time of Mar. 1 2006 or later. In order to determine which events occur in the particular time range the Event Application may simply inspect the Time column of Table to determine if any event records take place within the particular time range.

Another way of using Table is to display a popular tags page to users of the Event Application. For example the Event Application can determine which Tags are associated with the most Event IDs. Referring now to a GUI screen of the Event Application displaying the most popular tags is shown. Tags that are associated with the most events appear in a larger font while Tags associated with the least events appear the smallest. The Event Application may determine which tags are associated with the most events by performing a lookup of table in Events Repository . According to table the tag Music appears to be associated with the most Event IDs. Hence in the Event Application displays the tag Music in large letters on the GUI screen.

A user may use the GUI screen in to view events associated with popular tags. Hence if a user selects the Music tag on the GUI Screen of a listing of all events associated with the tag Music is shown s in . Much like querying for events associated with the tag Seminar another way to access tags associated with the tag Music is via a simple HTTP URL call. In this instance all events associated with the tag Music may be accessed by requesting the URL http www.upcoming.org tag Music. Again when displaying events associated with a popular tag to a user the Event Application may decide to only display events that have not yet taken place by inspecting the time column of any Event IDs that satisfy the search criteria.

Additionally in other embodiments note that event information associated with tags may be displayed to a user based on additional filters. For example if a user requests to view events associated with a particular tag Tag ID the Event Application may additionally filter the results by restricting the results to events that occur within the user s geographic location and or events authored by the user s designated friends.

Note that when entering tags for events users may vary the spelling and or punctuation of keywords or attributes. Therefore according to one embodiment tags within the Events Repository may be normalized in order to provide more efficient querying and organization of tags. For example table contains a Raw Tag column. The Raw Tag column identifies the keywords or attributes as entered by users of the Event Application .

For example note that Raw Tags entered for Tag ID include different variations of an attribute. Specifically the specific attribute is the geographic location of New York City. However this attribute may be referred to in a number of ways such as New York New York City N.Y.C. and the Big Apple for example. All these different variations may be placed within the Raw Tag column of Tag ID and may be normalized to the tag nyc within the Tag column. Hence when a user enters N.Y.C. as an attribute for an event it is normalized to nyc within the Events Repository . Further when a user searches for events associated with the attribute N.Y.C. the Event Application normalizes the attribute to nyc corresponding to Tag ID and finds all Event IDs associated with Tag ID . Thus the Events Repository is not littered with multiple variations of the same attribute and the Event Application is able to provide consolidated results for multiple variations of the same attribute thereby increasing the effectiveness of tag based searches and queries.

Further note that tags may be associated with other features of the Event Application . For example tags may be associated with groups in order to further define attributes of user groups as defined above.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

The invention is related to the use of computer system for implementing the techniques described herein. According to one embodiment of the invention those techniques are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another machine readable medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus embodiments of the invention are not limited to any specific combination of hardware circuitry and software.

The term machine readable medium as used herein refers to any medium that participates in providing data that causes a machine to operate in a specific fashion. In an embodiment implemented using computer system various machine readable media are involved for example in providing instructions to processor for execution. Such a medium may take many forms including but not limited to non volatile media volatile media and transmission media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Common forms of machine readable media include for example a floppy disk a flexible disk hard disk magnetic tape or any other magnetic medium a CD ROM any other optical medium punchcards papertape any other physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM any other memory chip or cartridge a carrier wave as described hereinafter or any other medium from which a computer can read.

Various forms of machine readable media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are exemplary forms of carrier waves transporting the information.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution. In this manner computer system may obtain application code in the form of a carrier wave.

In the foregoing specification embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. Thus the sole and exclusive indicator of what is the invention and is intended by the applicants to be the invention is the set of claims that issue from this application in the specific form in which such claims issue including any subsequent correction. Any definitions expressly set forth herein for terms contained in such claims shall govern the meaning of such terms as used in the claims. Hence no limitation element property feature advantage or attribute that is not expressly recited in a claim should limit the scope of such claim in any way. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

