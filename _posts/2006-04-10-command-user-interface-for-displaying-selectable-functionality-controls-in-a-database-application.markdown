---

title: Command user interface for displaying selectable functionality controls in a database application
abstract: An improved user interface is provided for displaying selectable software functionality controls of a database application. When a task-based functionality tab is selected from the user interface, selectable functionality controls provided by the associated database application for performing aspects of a task related to the selected tab are presented in a ribbon-shaped user interface above a workspace in which a user is entering or editing data. Upon selection of a different task-based functionality tab, the presentation of functionality controls associated with the first task is removed, and selectable functionality controls associated with the second selected task-based functionality tab are presented in the user interface. The selectable functionality controls presented in the user interface are grouped into logical groupings for more efficient utilization. An extensibility model is provided for allowing users to develop and use customized user interfaces and to allow utilization of legacy user interfaces.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08689137&OS=08689137&RS=08689137
owner: Microsoft Corporation
number: 08689137
owner_city: Redmond
owner_country: US
publication_date: 20060410
---
This patent application claims priority to U.S. Patent Application Ser. No. 60 714 622 filed Sep. 7 2005 entitled Database Application Ribbon Command Organization Background. 

With the advent of the computer age computer and software users have grown accustomed to user friendly software applications that help them write calculate organize prepare presentations send and receive electronic mail store and manipulate data make music and the like. For example modern database applications allow users to store organize and manipulate data. Modern electronic word processing applications allow users to prepare a variety of useful documents. Modern spreadsheet applications allow users to enter manipulate and organize data. Modern electronic slide presentation applications allow users to create a variety of slide presentations containing text pictures data or other useful objects.

To assist users to locate and utilize functionality of a given software application for example a database application a user interface containing a plurality of generic functionality controls is typically provided along an upper lower or side edge of a displayed workspace in which the user may enter copy manipulate and format text or data. Such functionality controls often include selectable buttons with such names as file edit view insert format and the like. Typically selection of one of these top level functionality buttons for example insert causes a drop down menu to be deployed to expose one or more selectable functionality controls associated with the top level functionality for example table under a top level functionality of insert. 

After a user selects a desired functionality control or if the user moves the mouse cursor to a different location the drop down menu typically disappears. If the user determines that a functionality of the first drop down menu was the desired functionality the user must remember which top level functionality was selected reselect that functionality and then find the desired functionality control all over again. Accordingly in order to use the functionality of a given software application the user must know the desired functionality is available under one of the selectable buttons or the user must select different top level functionalities until the desired specific functionality is located in one of many deployed menus. Such a method of searching for desired functionality is cumbersome and time consuming particularly for less experienced users and when new functionality is added by developers of the software application the new functionality may never be utilized unless the user is somehow educated as to its existence.

In addition often a given user desires to customize a user interface provided by a given software application or a given user often desires to utilize a legacy user interface of a previous version of a software application with which one or more data objects or documents has been developed or edited. If the user is not able to customize the user interface the utilization experience may be greatly diminished. If the user is not able to utilize legacy user interfaces the user may be required to expend significant resources updating data objects or documents to comply with later versions of the software application.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the detailed description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended as an aid in determining the scope of the claimed subject matter.

Embodiments of the present invention solve the above and other problems by providing an improved user interface for displaying selectable software functionality controls of a database application and for presenting logical groupings of particular functionality controls associated with a selected top level functionality. Generally aspects of the present invention provide for organization of the functionality of a database application into task based modes. The modes are associated with tabs in a ribbon shaped user interface and the tabs are labeled with descriptive text associated with different functionality modes or tasks. Underneath a row of top level functionality tabs functionalities associated with a given top level functionality tab are presented in logical groupings. Selection of a particular tab switches modes of the user interface to present controls for functionalities associated with the selected tab.

According to one embodiment of the invention methods and systems for providing functionality from a software application via an improved user interface are provided. A plurality of functionalities available from a database application is organized according to one or more tasks that may be performed with the database application. A user interface tab for each of the one or more tasks is provided in the user interface. Upon receiving an indication of a selection of a given user interface tab one or more selectable functionality controls are provided in the user interface for selecting one or more functionalities organized under a given task associated with the selected user interface tab.

According to another embodiment of the invention upon receiving a selection of a given data object for example a database report the one or more selectable functionality controls is are dynamically replaced in the user interface with one or more selectable functionality controls that are relevant to the selected object so that the user interface becomes contextually relevant to the selected object.

According to another embodiment an application programming interface API method may be utilized for submitting customizations of the user interface. In addition a property or condition may be set on the user interface to allow utilization of a legacy or previous version of a user interface so that backward compatibility is provided with data objects or documents prepared using legacy or previous versions of an associated software application.

These and other features and advantages will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention as claimed.

As briefly described above embodiments of the present invention are directed to an improved user interface for displaying selectable software functionality controls of a database application. As will be described in detail below when one task based functionality tab is selected from the user interface of the present invention selectable functionality controls provided by the associated database application for performing aspects of a task related to the selected task based functionality tab are presented in a ribbon shaped user interface above a workspace in which the user is entering or editing data. Upon selection of a different task based functionality tab the presentation of functionality controls associated with the first task is removed and selectable functionality controls associated with the second selected task based functionality tab are presented in the user interface. The selectable functionality controls presented in the user interface are grouped into logical groupings for more efficient utilization. An extensibility model is provided for allowing users to develop and use customized user interfaces and to allow utilization of legacy user interfaces.

In the following detailed description references are made to the accompanying drawings that form a part hereof and in which are shown by way of illustrations specific embodiments or examples. These embodiments may be combined other embodiments may be utilized and structural changes may be made without departing from the spirit or scope of the present invention. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present invention is defined by the appended claims and their equivalents.

Referring now to the drawings in which like numerals refer to like elements through the several figures aspects of the present invention and an exemplary computing operating environment will be described. and the following discussion are intended to provide a brief general description of a suitable computing environment in which the invention may be implemented. While the invention will be described in the general context of program modules that execute in conjunction with an application program that runs on an operating system on a personal computer those skilled in the art will recognize that the invention may also be implemented in combination with other program modules.

Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

Embodiments of the invention may be implemented as a computer process method a computing system or as an article of manufacture such as a computer program product or computer readable media. The computer program product may be a computer storage media readable by a computer system and encoding a computer program of instructions for executing a computer process. The computer program product may also be a propagated signal on a carrier readable by a computing system and encoding a computer program of instructions for executing a computer process.

With reference to one exemplary system for implementing the invention includes a computing device such as computing device . In a basic configuration the computing device typically includes at least one processing unit and system memory . Depending on the exact configuration and type of computing device the system memory may be volatile such as RAM nonvolatile such as ROM flash memory etc. or some combination of the two. System memory typically includes an operating system suitable for controlling the operation of a networked personal computer such as the WINDOWS operating systems from MICROSOFT CORPORATION of Redmond Wash. The system memory may also include one or more software applications and may include program data . This basic configuration is illustrated in by those components within dashed line .

According to embodiments of the invention the application may comprise many types of software applications such as database applications word processing applications spreadsheet applications slide presentation applications and the like. The application may also include a multiple functionality software application for providing many types of functionalities. Such a multiple functionality application may include a number of program modules such as a word processing program a spreadsheet program a slide presentation program a database program and the like. An example of such a multiple functionality application is OFFICE manufactured by MICROSOFT CORPORATION. According to embodiments of the present invention the application is illustrative of a database application with which data may be stored maintained manipulated and processed. An example of such a database application is ACCESS manufactured by MICROSOFT CORPORATION.

The computing device may have additional features or functionality. For example the computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer storage media may be part of device . Computing device may also have input device s such as keyboard mouse pen voice input device touch input device etc. Output device s such as a display speakers printer etc. may also be included. These devices are well known in the art and need not be discussed at length here.

The computing device may also contain communication connections that allow the device to communicate with other computing devices such as over a network in a distributed computing environment for example an intranet or the Internet. Communication connection is one example of communication media. Communication media may typically be embodied by computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. The term computer readable media as used herein includes both storage media and communication media.

According to one embodiment a first selectable control is displayed consistently across all modes of the user interface for providing a plurality of standard application functions such as the New file control the Open file control the Save control the Print control and the like. That is selection of the File control causes a display of the selectable controls as illustrated in . Adjacent to the File control is a quick action toolbar for providing one or more standard functionalities such as save print undo help and the like for quick selection by a user. As will be illustrated in the quick action toolbar may be located at different locations on the user interface for example top bottom top right bottom right etc. As should be appreciated selection of one of the functionality controls from the quick action toolbar allows for the quick execution of the desired functionality without the need for deploying a secondary functionality menu or without selecting a different top level functionality control described herein.

According to embodiments of the present invention selection of one of the top level task based functionality tabs illustrated in changes a display mode of the user interface such that the user interface dynamically displays selectable controls for one or more functionalities of the associated database application such that the displayed functionality controls are associated with the selected tab and associated functionality mode. For example as described below selection of the Data tab places the user interface in a data mode and selectable functionality controls for providing data functions of the database application are displayed immediately beneath the row of top level task based tabs. Similarly selection of the Insert tab causes a display of one or more selectable functionality controls for providing insert functionalities of the database application immediately beneath the row of task based tabs. Selection of the Page Layout tab causes a display of one or more functionality controls for providing page layout functionality of the database application and so on as described herein. As should be appreciated the task based tabs illustrated in are for purposes of illustration only and are not restrictive of the numerous additional task based tabs that may be displayed in the user interface for causing a display of selectable functionality controls for a given task or mode enabled by the associated database application .

According to an embodiment if a focus is temporarily received on a second top level task based tab for example the Insert tab described below the user interface may be dynamically changed to temporarily show the logical groupings of functionality controls that will be populated in the user interface if the focused on tab is actually selected. Upon cessation of the focus e.g. mouse over focus on the second user interface tab the logical groupings of functionality controls previously displayed are re displayed in the user interface. Thus a preview of controls associated with a given tab or mode of operation may be obtained. According to one embodiment if during the preview deployment of the second set of controls a given control is selected the functionality of the selected control is applied to a selected data object. Once application of the selected functionality is done the preview deployment is dismissed and a display of the originally deployed controls is returned unless a selection of the second task based tab is received to persist the display of the second set of controls in the user interface. Alternatively selection of one of the temporarily displayed controls may cause a persistent display of the second set of controls as if the second task based tab was selected.

Referring to a first logical grouping of controls is displayed under a heading Clipboard. According to embodiments of the present invention the clipboard section may include such selectable controls as a Cut Copy Paste Select All etc. for providing clipboard type functionalities for use on one or more data objects. Adjacent to the clipboard section a second logical grouping is presented under the heading Font for providing font functionalities for use with one or more data objects. A third logical grouping is provided under the heading Font Alignment for providing selectable functionality controls for applying font alignment properties to one or more data objects. A next logical grouping of functionality controls is displayed under the heading Data Formatting for providing one or more selectable controls for applying data formatting properties to one or more selected objects. Additional logical groupings of functionality controls and provide groupings of selectable functionality controls for data records data editing data sorting and filtering and data find functionality respectively. As should be appreciated the logical groupings of functionality controls illustrated in are for purposes of illustration only and are not limiting of additional functionality controls and different arrangements of functionality controls that may be provided in logical groupings under the row of task based tabs upon selection of a given task based tab.

According to one embodiment once a top level task based tab is selected and the associated logical groupings of functionality controls are deployed as illustrated in the deployed logical groupings of functionality controls remain deployed in the user interface until the user interface is placed into a different operating mode associated with a different top level task of the database application by the selection of a different task based tab or until the context of the user interface is changed relative to a context of one or more selected data objects as described below with reference to .

As described above with reference to once a given task based tab is selected and an associated one or more logical groupings of functionality controls is are deployed the deployed one or more logical groupings of functionality controls remains deployed until the mode of operation of the user interface is changed by selection of a different task based tab . As should be appreciated a default operating mode for example data mode may be automatically deployed along with its associated logical groupings of functionality controls upon launching an instance of the associated database application .

Referring still to a second logical grouping of functionality controls is deployed under the heading Export Data and provides one or more functionality controls for causing the associated database application to export data from the database application to an external data source or data site. A third logical grouping of functionality controls is deployed under the heading Collect and Update and includes one or more functionality controls for handling external data via electronic mail transmission and management. A next logical grouping of functionality controls is deployed under the heading Offline Sharepoint Lists and provides one or more functionality controls for processing data in an offline environment and for synchronizing data processed in an offline environment back to a server based database once an online connection between a client database application and a server based database application is reestablished.

Underneath the logical groupings of functionality controls are additional functionality controls that may be provided under the logical groupings of functionality controls where additional controls are available or desired. For example the dropdown provides additional functionality controls for processing data in an offline environment. The dropdowns and contain additional functionality controls for obtaining external data and for exporting data. As should be appreciated the dropdowns may be deployed anytime the logical groupings do not include all available functionality controls under each of the respective logical grouping headings. As should be appreciated the logical groupings and associated functionality controls illustrated in are for purposes of example only and are not limiting of the number of different functionality controls and logical groupings of functionality controls that may be deployed under the External Data tab .

The user interface modes of operation described above with reference to provide particular deployments of functionality controls in association with particular modes of operation for example insert page layout external data advanced tools etc. According to embodiments of the present invention the user interface may be populated with additional logical groupings of functionality controls based on the context of a given selected data object so that the user interface provides logical groupings of functionality controls that immerse the user with functionality responsive to a particular data object. For example if the user is in a particular mode of operation for example upon selection of the Data tab and the user selects a particular data object for example a table object the logical groupings of functionality controls deployed in the user interface may be dynamically changed so that functionality controls particular to features of the associated database application for operating on the selected table object are deployed in the user interface . Thus typical features required for processing the selected table object are automatically deployed in the user interface for use by the user. If the selection of a given database object is terminated or if the mouse cursor or other electronic pointer is focused on an area of the user interface not associated with a particular database object the previously deployed user interface for example one the user interfaces illustrated in above is redeployed as it was prior to deployment of the contextual user interface associated with the selected database object.

According to embodiments once the user selects a different data object the logical grouping of functionality controls may be dynamically changed again so that functionality controls under the selected mode of operation are once again changed in association with the different selected data object. For example if the user selects a report object the functionality controls deployed in the user interface may be dynamically changed so that controls associated with report features of the associated database application are dynamically displayed in the user interface to provide those features commonly used when operating on a database report. Thus the user experience is enhanced because the user is not required to search for particular functionality controls associated with the selected object. Instead upon selection of a particular data object those functionality controls associated with those features commonly used with respect to the selected object are automatically displayed to the user.

The formatting contextual user interface provides functionality controls for quick formats fonts gridlines fields and controls and other groupings. For example a first logical grouping of functionality controls is deployed under the heading Quick Format for allowing a selection of one or more formatting types to the selected forms object. A second logical grouping of functionality controls is deployed under the heading Font for providing functionality controls for applying various font properties to the selected form object. As illustrated beneath the user interface one or more menus may be provided for displaying additional functionality controls for applying additional formatting properties to the selected form object. For example selection of one of the gridlines controls illustrated in the menu will cause an automatic application of the selected gridlines style to the selected form object. As should be appreciated once a different data object is selected for example a report or table object the functionality controls provided in the context of the previously selected form object may be replaced with functionality controls associated with the context of a subsequently selected data object.

Referring to a different version of the contextual user interface illustrated in is provided for a selected report object. As illustrated in contextual tabs are shown for providing commands for formatting and layout for database reports. According to an embodiment these two tabs provide the functionality commands needed for building report objects in the layout mode of an associated database application. The user interface for providing layout formatting to a selected report object provides an additional logical grouping for applying Grouping and Totals properties to a selected report object.

As should be appreciated according to one embodiment selection of a given database object as described herein with reference to automatically causes deployment of the logical groupings of functionality controls in the user interface without the selection of the associated top level task based tab if only one contextual user interface is available for the selected object. On the other hand if two or more potential contextual user interfaces are available for a selected object for example formatting control layout or design then additional top level task based tabs for example the Formatting tab and the Control Layout tab illustrated above in are deployed for allowing selective deployment of functionality controls of the associated database application under a desired task based mode for example formatting versus control layout .

As should be appreciated the illustrations and descriptions of contextual user interfaces described above with reference to are for purposes of illustration and example only and are not limiting of the different types of contextual user interfaces and different types of functionalities that may be provided in response to the selection of a given database object. For example according to the ACCESS database application manufactured and marketed by MICROSOFT CORPORATION certain database file types known as Access Data Projects ADPs are database types that require different sets of commands than other database files. According to embodiments of the present invention selection of an ADP database object may cause the deployment of a contextual user interface such as those illustrated and described with reference to wherein particular functionality controls are provided for applying functions of the database application to ADP database objects. Likewise contextual user interfaces may be developed and deployed for providing particular functionality associated with other types of database objects.

The user interface illustrated in represents an alternative embodiment of the user interface illustrated in . The user interface illustrated in provides top level functionality tabs for causing a display of logical groupings of buttons and controls for applying functionality of the associated database application to database objects and or files. As illustrated in upon selection of the Home tab a number of logical groupings of functionality controls are provided similar to the controls illustrated in above. For example logical groupings of controls are illustrated for views clipboard functionalities font functionalities text functionalities records functionalities sorting and filtering functionalities window functionalities and find functionalities.

As described above with reference to a variety of contextual tabs may be provided in the user interface for providing one or more functionality buttons or controls associated with a particular database object selected or focused on in a database file. illustrates a computer screen display showing the user interface illustrated in and showing a contextual tab for providing database functionality available for application to a table object. As illustrated in upon selection or focus on a database table a Table Tools tab may be deployed in the user interface for providing logical groupings of buttons or controls associated with functionalities of the database application that may be applied to a database table. For example functionality buttons and controls are provided in the user interface in response to a selection of the Table Tools tab for applying fields and columns data type and formatting and data object relationships to data contained in a database table.

According to embodiments of the invention an extensibility model is provided for allowing a user to customize the user interfaces according to their individual needs. According to one embodiment customizations of user interfaces are enabled by providing an application programming interface API method that allows software developers or users to submit customizations of a given user interface to the database application for use with a given database or database object e.g. document form report etc. . In one embodiment customizations submitted via the API method are in the form of Extensible Markup Language XML based user interface customizations that will cause a given user interface to have custom properties when loaded. The customized XML markup need not reside in a given database or database object. Thus developers may create database templates e.g. forms or reports templates having customized versions of the user interface that may be distributed to users for implementation as software add ins to the database application.

A developer of a user interface customization may create an AutoExec macro that calls a desired customization for loading. The AutoExec macro causes the desired customization to call the API method e.g. an Application.LoadCustomUI method and specifies the XML and any associated friendly name pairs for the customization. Upon receipt by the database application a user interface cookie is generated by the database application for each unique customization name e.g. sales form user interface and customizations are submitted by the application to the user interface for implementation. Each unique user interface customization may be stored in a library of customizations and may be presented to end users via a menu of choices e.g. a combo box from which a user may select a desired customization.

The loading and unloading of customizations is application driven via properties associated with the customizations for a given database or database object. Database level customizations take effect after database restart. For database objects such as forms and reports changes to a given user interface may be made while the database application is running by selecting a desired user interface customization for a given database object.

As described above user interface customizations may be provided for various database objects for example forms and reports. In the case of contextual user interface tabs as described above with reference to XML markup is rendered such that it replaces the contents of the native user interface when an associated object is selected or focused on. For example when a report is opened for which a customized contextual user interface is provided the contents of the native user interface are replaced according to the XML markup associated with a customized user interface designed for the report.

For purposes of illustration consider the following examples. A user generates and deploys a number of sample databases. The user s desire is to provide customized menus for her major forms and reports. For example her sales and inventory application main navigation form provides a menu that allows a user to navigate to a Customers and Payments form an Orders form a Product and Inventory form a Vendors and Purchase Orders form and the like. According to an embodiment of the invention a customized user interface is generated as described above and when any of these forms are launched a customized form editing user interface is provided.

According to another example a large international organization may develop a number of database objects forms reports etc. in multiple languages for example German English Italian French etc. . According to embodiments of the present invention a developer of such database objects may develop a customized user interface for each potential language for a given database object for example a database report. Upon launching the database report a dialog may be presented to the user to ask the user which language is desired for the launched database report. Once the user selects a given language the customized user interface associated with the selected language may be loaded and the user interface is launched with the desired language.

According to another example security may be imposed on a given database or database object by customizing the commands available in the user interfaces based on user security access. For example a given user may be required to provide a password or other login credential to launch a given database or database object. A given user s login credentials may be associated with a version of one or more user interfaces that provide a customized set of commands for allowing the user to perform certain specified operations on the selected database or database object. Once the identified user s credentials are associated with an XML markup stored for the specified security level the associated XML markup may be loaded as described above and the required user interface will be launched with a set of commands prescribed by the associated XML markup.

These embodiments are also useful for purposes of backward compatibility because a particular user may have generated a large number of database objects such as forms or reports using a previous or legacy version of the database application where the previous version of the database application user interface provided functionality via command bars toolbars dropdown menus and the like. Prior or legacy user interfaces may be stored as customized user interfaces and may be launched in place of current version user interfaces upon command. According to one embodiment the legacy user interface customizations are only launched in place of the current version user interfaces when the entire database application has been set to use backward compatibility user interfaces. Alternatively the legacy user interface customizations may be rendered by selection of an Add Ins type tab deployed in the user interfaces . According to another embodiment a backward compatibility mode view may be included in the current version user interfaces . If a given user had previously configured a database or database object not to allow full user interfaces a different display of the a given user interface may be provided where only a single tab is displayed for all database objects and contexts. Selection of the single tab may then cause the user interface to be populated with legacy user interface commands as desired.

As described herein an improved user interface is provided for exposing task based top level functionality tabs for displaying logical groupings of selectable database application functionality controls associated with given database application modes of operation. It will be apparent to those skilled in the art that various modifications or variations may be made in the present invention without departing from the scope or spirit of the invention. Other embodiments of the invention will be apparent to those skilled in the art from consideration of the specification and practice of the invention disclosed herein.

