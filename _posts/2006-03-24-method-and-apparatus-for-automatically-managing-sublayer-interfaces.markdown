---

title: Method and apparatus for automatically managing sub-layer interfaces
abstract: A method of generating a standardized network-management representation of a multiple-layer network communications interface sub-stack having a non-standardized network-management representation includes determining, based on a signature indicating a layered structure of the network communications interface sub-stack, whether an expected type of sub-layer interface of the network communications interface sub-stack exists. If the expected type of sub-layer interface is determined not to exist, then a sub-layer interface of the expected type is created and a network management information base is populated with a sub-layer interface entry including () respective instance and type identifiers of the sub-layer interface and () one or more operational attributes of the sub-layer interface, the value of each operational attribute identically mirroring the value of a corresponding operational attribute of the interface sub-stack as reflected in the non-standardized network-management representation. The method can be performed for multiple sub-layer interfaces by a reentrant procedure of a dedicated interface manager in conjunction with pseudo drivers responsible for the sub-layer interfaces.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07835302&OS=07835302&RS=07835302
owner: Cisco Technology, Inc.
number: 07835302
owner_city: San Jose
owner_country: US
publication_date: 20060324
---
The present invention is related to the field of data communications networks and more particularly to data communications network management.

Network management encompasses a variety of activities with respect to communications networks such as configuring updating monitoring and diagnosing network communications devices deployed within a network. In most instances the network communications devices which are also referred to as managed devices herein include hardware and software that supports these network management activities as well as an interface to a remote network management system of the managed network. While several such network management interfaces have been and continue to be used one commonly used interface employs an open network management protocol known as the Simple Network Management Protocol SNMP along with a representation of network management data that conforms to an open specification known as the Structure of Management Information or SMI. Network management applications are deployed on a centralized network management system and engage in communications with the managed devices using the SNMP and SMI standards to carry out their network management tasks.

In particular the SMI standards describe rules for writing abstract data collections referred to as Management Information Bases or MIBs. MIBs are specifications containing definitions of management information so that networked systems can be remotely monitored configured and controlled.

Although there are a wide variety of managed objects for present purposes the focus is primarily on managed objects known as interfaces . In the context of data communications generally interface refers to a logical relationship between two entities that operate at different hierarchical layers of a layered communications scheme. Typically an interface refers to a communication layer beneath the network layer in the 7 layer OSI model. In the case of a point to point protocol PPP session being carried by an Ethernet VLAN for example involves a virtual interface layered atop a physical Ethernet interface.

In the context of SNMP and SMI there is much content and structure pertaining to interfaces that are defined in a managed device. For example a typical MIB includes an interfaces table that enumerates all the interfaces in a managed device and includes a variety of information about each of them including such things as an interface type a description a speed an address administrative and operational status counts of packets transferred and errors etc. Additionally the manner in which interfaces are identified in a MIB is itself the subject of standardization there is an official list of interface types that have been assigned by the Internet Assigned Names Authority IANA and network management applications operate in part based on the use of standard interface types in MIBs.

Another pertinent type of managed object is an interface stack which is a grouping of particular interfaces that together provide an interface between two entities that are separated in the hierarchical communications scheme. Continuing with the above example of a PPP session over an Ethernet VLAN the virtual and physical interfaces are layered or stacked in that order.

It has been known to use a single data structure referred to herein as an Interface Descriptor Block or IDB to maintain various information pertaining to an interface as might be defined in a custom manner within a network communications device. Of particular pertinence here is the use of a single IDB by a software driver used in connection with an interface provided by a hardware interface module. A particular example might be a so called line card for an optical communications link such as an Optical Carrier OC x link where x may have the value 8 12 48 etc. An internal interface provided by such a line card might be a single virtual tributary VT of a Synchronous Optical Network SONET connection for example and thus the interface may actually be a multi layered interface including functionality at several hierarchical layers including a SONET Path layer and a SONET physical layer.

Standards defining MIB modules for specific network interfaces typically describe how a particular type of network interface should relate to others in terms of interface stacking. As an example one standard type of interface is a packet over SONET POS interface which is a packet type of interface. It is expected from a standards perspective that a POS interface is part of an interface stack that also includes a SONET Path interface as well as a SONET physical layer line interface. A network management application that is designed based on such an expectation may include corresponding internal dependencies. For example if the network management application is tracing a communications path from end to end and collecting information about each interface along the way upon discovering a POS interface it then looks for the underlying SONET Path and SONET physical layer interfaces that it expects. However in the case that a managed device presents a multi layered interface as a single managed object such as described above the network management application will not be able to locate any of the underlying interfaces within the MIB for the managed device because they are not present. The managed device is presenting the interface in a non standard way to the network management application and thus the network management application may not function correctly or provide usable results because its assumptions about the presentation of the network management information are not satisfied.

In accordance with the present invention methods and apparatus are disclosed by which network management information can be presented in a standard way to a network management system by derivation from a non standard representation maintained by a managed device such as a single driver maintained IDB for a multi layered interface. The standards related expectations of network management systems can be satisfied without requiring that software drivers for hardware interface modules themselves comply with the applicable network management standards. Thus the disclosed techniques can be used in conjunction with existing drivers in a backwards compatible manner and can also be used even with new drivers to free the driver designer of the need to understand and comply with the pertinent network management standards.

According to a disclosed method it is determined based on a signature indicating a layered structure of a network communications interface sub stack whether an expected type of sub layer interface of the network communications interface sub stack exists and if not then creating a sub layer interface of the expected type and populating a network management information base with a sub layer interface entry for the new sub layer interface. Here sub stack refers to a set of two or more interfaces of an interface stack and a sub layer interface is an interface included within such a sub stack. The sub layer interface entry with which the network management information base becomes populated includes 1 respective instance and type identifiers of the sub layer interface and 2 one or more operational attributes of the sub layer interface the value of each operational attribute identically mirroring the value of a corresponding operational attribute of the interface sub stack as reflected in the non standardized network management representation. It should be noted that the term sub layer interface as used herein typically refers to a representation used for network management purposes rather than to the actual corresponding interface through which data communications packets are exchanged. As mentioned actual sub layer interfaces may be buried within a single monolithic driver and it is desired to create an explicit representation of such actual sub layer interfaces because the existence of such representations of sub layers is required for support of relevant network management standards. The meaning of the term sub layer interface in any particular usage herein should be clear in context.

In a further aspect a disclosed method is performed by an interface manager in conjunction with software drivers including a real driver and a pseudo driver the real driver being associated with the overall network communications interface sub stack which effects the transfer of data communications packets in a network and the pseudo driver being associated with the sub layer interface which does not effect the transfer of data communications packets in the network. The signature is provided to the interface manager by the real driver as part of registering the network communications interface sub stack with the interface manager. The creating of the sub layer interface is performed by the pseudo driver in response to a request from the interface manager and it includes registering the sub layer interface with the interface manager. The populating of the network management information base is performed by the interface manager as part of the registering of the sub layer interface by the pseudo driver.

In yet another aspect the functions of the interface manager are performed by a reentrant procedure and the determining creating and populating steps are also performed for a second sub layer interface of the network communications interface sub stack the populating step being performed by a second invocation of the reentrant procedure of the interface manager nested within a first invocation of the reentrant procedure.

Also shown in are a set of management information clients that require access to the network management related information maintained by the drivers . Examples of clients include one or more MIB systems MIB SYS one or more event receivers EVENT RCVR and the interface to the console shown as CLI . In operation a client such as a MIB SYS communicates with the drivers to access the underlying data elements that are represented by the MIB variables exposed to the NMS . Thus if the NMS performs an SNMP GET of a MIB variable the MIB SYS of the NW device responds by interrogating the appropriate driver and or IDB to read the actual data value represented by the MIB variable such as a packet counter interface description etc.

In the prior art configuration depicted in the clients are essentially in direct communication with the drivers for purposes of accessing network management information including the information maintained within the IDBs . This organization is problematic from several perspectives. Development of new drivers and or clients may be unduly complicated for example because the burden of managing MIB data falls too heavily on driver developers who are not familiar with the detailed operation of network management. Also existing clients and drivers may not adequately support functional and compliance testing of the MIBs that they support. Existing software has also come to include numerous dependencies on particular types of NW devices and or particular types of PLIMs making it increasingly difficult to migrate to new MIB definitions as well as to diagnose operational problems when existing MIBs are in use. These problems can manifest themselves in the form of conformance and consistency issues that negatively affect the development and deployment of network management applications and that can increase the cost to a manufacturer of product support for the NW devices . The presently disclosed methods and apparatus address these problems by introducing an explicit interface manager as described below which provides for normalized access to interface related network management data. The interface manager can be implemented as a common part and interface specific extensions for implementation efficiency and can have specific support for legacy drivers that have not been designed or adapted for use with the interface manager.

The interfaces related data in the MIB resides in several particular sub structures all of which are part of an interfaces group defined in the MIB standards such as Request for Comments RFC 2863. An interfaces table represents all the interfaces of a NW device as a sequence of interface entries each of which in turn is a collection of a variety of data elements for a particular interface. These data elements include things such as an index unique identifier description type address status operational variables etc. It should be noted that interface types are subject to textual conventions defined by an interface type MIB published by the Internet Assigned Names Authority IANA . The interfaces group also includes an interface stack table which describes the interface stacks within the scope of managed entity such as a NW device . Each conceptual row in this table describes a connection in a graph representing an interface stack. Each table entry identifies a connection by a pair of interface indexes one representing a superior higher level interface and the other representing a subordinate lower level interface in the order specified. Thus a connection flows from superior to subordinate interface. The interface stack table can be used by network management software to identify the stack relationships of interfaces which can be useful for certain types of operations including path tracing and isolation during the process of diagnosing operational problems. There is also an inverted interface stack table which describes the same interface stack graph using entries that have the interface indexes lexically reversed making it easier for network management software to traverse the graph from bottom to top when necessary.

Historically driver objects representing interfaces often do not cleanly map to the notion of an interface as defined by the interfaces MIB and interface specific MIBs. Consider an interface on an OC 12 Packet Over SONET POS PLIM configured to use a High Level Data Link Control HDLC type of encapsulation. An interface driver for such a POS PLIM might maintain a single IDB containing information at the encapsulated packet level the SONET Path level and the SONET physical layer. A standardized interface type that might be selected for this OC 12 POS interface would necessarily be incomplete and or misleading because it would not capture the non standard multiple layer structure. This contrasts with the expectations of the interfaces MIB and a specific SONET MIB known as SONET MIB which together mandate an interface stack having three distinct MIB identified interfaces namely a topmost POS interface a next layer SONET Path interface and a bottom most SONET physical layer interface.

It can be generalized that driver objects representing such non standard multi layered interfaces map to interface sub stacks rather than to a single interface. In the above example the IDB representing the OC 12 POS interface can be mapped to an interface sub stack including distinct POS SONET Path and SONET physical layer interfaces where each of these is a standardized IANA interface type. B and C illustrate several examples of such mappings. shows the structure of an interface object that has the non standard type POS FRAME RELAY. This object might be presented for example by an interface driver for a port of an OC 12 POS PLIM that employs frame relay encapsulation. As shown the POS FRAME RELAY object actually includes functionality at three different layers including a frame relay encapsulation layer a SONET path transport layer SONET PATH and a SONET line or physical layer SONET . illustrates an interface object that may be created for a T1 DS1 PLIM that provides frame relay encapsulation and thus may be identified as the non standard type DS1 FRAME RELAY. shows an interface object that may represent the use of frame relay DS1 and SONET virtual tributaries VTs of a channelized OC 12 PLIM and having the non standard type SERIAL FRAME RELAY.

In all three cases of the topmost layer is FRAME RELAY and thus each interface object and might be represented in a prior art network management environment as being of the standardized type FRAME RELAY. Such a common identification of very different multi layered interfaces can present problems for network management applications that attempt to operate according to published standards.

It will be noted in the foregoing description that a distinction is drawn between the type of each multi layered interface such as the POS FRAME RELAY type of interface object and the type of each sub layer e.g. SONET Path layer which is standardized. In accordance with the presently disclosed technique the non standard terms POS FRAME RELAY DS1 FRAME RELAY and SERIAL FRAME RELAY are taken to be signatures of the respective multi layered interface objects. These signatures are used as described below to create explicit representations of all the standard type sub layers. The resulting MIB representations of these interface objects are compliant with the relevant standards so that the operational assumptions of network management applications are satisfied and the applications perform better. The use of interface signatures in this manner allows a network device to guarantee the representation of all standard required interfaces with respect to network management.

The interface manager maintains an interface database and acts as a common control point between the management clients and the drivers . It exposes a set of client services to the management clients for the purpose of retrieving and modifying managed data associated with interfaces. It also exposes a set of driver services to the interface drivers for the purpose of creating destroying interfaces retrieving managed data validating and modifying configuration data posting status and signaling events and alarms. The interface manager depends on the pseudo drivers to manage sub layer interfaces as described in more detail below.

With respect to the interface manager any pseudo driver behaves very much like any real driver with the exception that the interface s handled by each pseudo driver do es not transmit or receive packets. One other potential distinction between the pseudo drivers and the real drivers is that the pseudo drivers may interact with the interface manager in a client like manner as indicated by connection . This operation is described in more detail below.

The drivers are all included within the operating system of the NW device in a conventional fashion e.g. as part of a bootstrapping process and or in a plug and play fashion upon insertion of a PLIM. The interface types of the pseudo drivers generally conform to published standards such as the above mentioned IANA types SONET SONET Path etc. . For reasons described below the interface signatures used by each real driver e.g. POS driver must generally be unique across a particular operating system implementation.

When invoking the Create Interface service of the interface manager a driver provides the following information 

Note that it is assumed that drivers create interface stacks in a bottom up manner i.e. they create lower level interfaces first and then build up higher level interfaces.

In step of the interface manager and the pseudo drivers cooperate to create interface entries in the interface database for the interface being created. These interface entries are available as MIB objects to the MIB clients and are also available to other types of clients . In the case of a sub stack type of interface there will be interface entries for the top level interface e.g. FRAME RELAY of and the sub layer interfaces e.g. SONET Path and SONET as necessary. The details of this cooperative operation are described below.

In step a management client requests a read or write of a MIB data element for example in response to an SNMP GET or SET command issued by the NMS of . The interface manager responds by forwarding the request to the appropriate driver . In step the driver responds by satisfying the request. In the case of a real driver which actually maintains the data underlying the MIB data element it can either update the data in the case of a write or return the data to the interface manager for forwarding on to the requesting client in the case of a read . The operation of a pseudo driver involves a level of indirection as now described.

As mentioned above the sub layer interfaces maintained by pseudo drivers do not transmit or receive packets. Thus the sub layer interfaces by their nature are not represented in exactly the same way as are real interfaces. The representation of sub layer interfaces relies in part on the notion of a master interface which is used by a pseudo driver to derive a representation of a sub layer interface. As an example a pseudo driver can equate the operational status of a sub layer SONET path to that of the master POS interface. More specifically the pseudo driver may derive the SONET path s operational status from the driver object e.g. a IDB representing the interface sub stack of which the sub layer interface is a part.

In some cases the master interface may be the top most interface in the interface sub stack containing the sub layer interface. This would be the case in the examples of . In other cases the master interface may be the subordinate interface to the interface sub stack. For example it may be desirable for the pseudo driver to equate the operational status of a SONET path to that of the underlying SONET physical layer interface. More specifically the pseudo driver derives the SONET path s operational status from the driver object IDB representing the SONET physical layer interface. There may be a variety of approaches that a pseudo driver might use to derive a representation for a pseudo interface. As a general matter the interface index for a pseudo interface should not be in any way dependent on a master interface interface indexes should be allocated and managed for pseudo interfaces in the same way as for real interfaces. The interface type will be that of the sub layer e.g. SONET Path. Data elements such as the interface description and operational status might simply be equal to the corresponding values of the master interface or in appropriate cases a null value.

The interface manager can query the pseudo driver for managed data relating to a pseudo interface through an Interface Data Get function that is registered by the pseudo driver . In supporting this function the pseudo driver may need to derive certain managed data from elsewhere as discussed above and in such cases requires access to managed data maintained by the associated master interface. A pseudo driver can obtain access to this managed data in one of two ways 

Interface creation starts with the POS real driver as described above with reference to step of . After the POS driver has created or initialized the IDB for a POS FRAME RELAY interface the following operations ensue 

As mentioned above part of the operation of the Create Interface service of the interface manager is to determine whether there is a sub layer interface that should be created. It does this based on the signature of the interface being created as well as the type of subordinate interface as reported by the requesting driver. If the subordinate interface is of an appropriate type based on the interface signature then no sub layer interface is needed. But if the subordinate interface is an inappropriate type indicating that a required sub layer is missing then the interface manager takes steps to have the missing sub layer interface created. It should be noted that the driver may use a null value to indicate that there is no subordinate interface. Whether the subordinate interface is appropriate is dependent on the interface signature or type. Recall that a POS FRAME RELAY sub stack for example should include frame relay SONET path and SONET sub layers. If a driver creates a POS FRAME RELAY interface and reports a null subordinate interface this indicates to the interface manager that the SONET path and SONET sub layer interfaces are missing. When interface sub stacks have been properly formed as described herein only the lowest level pseudo interface e.g. SONET properly has a null value for its subordinate interface. In the process of the invocation by the POS driver will have an inappropriate null value for the subordinate interface which indicates to the interface manager that there are missing sub layers. In contrast the invocation by the SONET pseudo driver has an appropriate null value the SONET sub layer is a physical layer and thus should have no subordinate interfaces and thus the interface manager can conclude in response that no additional sub layers are needed.

As mentioned above the interface manager may be implemented as a common part and a plurality of extensions where the common part supports generic operations such as providing access to packet counters and the extensions support operations that are more specific to particular interface types. In such a case there is necessarily a software interface application programming interface or API between the common part and the extensions for purposes of signaling the forwarding of requests to the extensions and the return of results by the extensions. In particular the common part may be the primary actor responding to a Create Interface request of a driver for purposes of registering a newly created interface and determining whether any sub layer interfaces are to be created. In the case that a sub layer interface is needed then the common part would signal the appropriate extension which would in turn invoke the appropriate pseudo driver. The subsequent reentrance into the interface manager by the pseudo driver would be via the extension in the first instance which would then signal back up to the common part.

While this invention has been particularly shown and described with references to preferred embodiments thereof it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the spirit and scope of the invention as defined by the appended claims.

