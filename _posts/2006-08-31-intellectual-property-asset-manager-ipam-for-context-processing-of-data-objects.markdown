---

title: Intellectual property asset manager (IPAM) for context processing of data objects
abstract: Context data processing is described herein. One or more contexts are selected. Each context includes one or more attributes, and a plurality of data objects that satisfy the attributes. A list of data objects contained in the selected contexts is displayed. At least some of the data objects in the selected contexts are processed. Such processing may involve generating claim trees, citation trees, and data object families, which may be displayed using hyperbolic trees. In an embodiment, the contexts are groups. In other embodiment, the contexts are each associated with a data object type. In this latter embodiment, the contexts include data objects of their respective data object types.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09092545&OS=09092545&RS=09092545
owner: ROSE BLUSH SOFTWARE LLC
number: 09092545
owner_city: Los Altos
owner_country: US
publication_date: 20060831
---
This application is a continuation in part of U.S. application Ser. No. 11 178 367 filed Jul. 12 2005 now U.S. Pat. No. 7 437 471 which is a continuation of U.S. application Ser. No. 09 545 608 filed Apr. 7 2000 now U.S. Pat. No. 6 963 920 issued Nov. 8 2005 which is a non provisional of Provisional Application No. 60 128 405 filed Apr. 8 1999 each of which is incorporated herein by reference in its entirety.

U.S. application Ser. No. 09 545 608 filed Apr. 7 2000 is a continuation in part of U.S. application Ser. No. 08 921 369 filed Aug. 29 1997 now U.S. Pat. No. 6 339 767 issued Jan. 15 2002 which is a continuation in part of U.S. application Ser. No. 08 867 392 filed Jun. 2 1997 now U.S. Pat. No. 5 991 751 issued Nov. 23 1999 each of which is incorporated herein by reference in its entirety.

U.S. application Ser. No. 09 545 608 filed Apr. 7 2000 is a continuation in part of U.S. application Ser. No. 09 138 368 filed Aug. 21 1998 now abandoned which is a continuation in part of U.S. application Ser. No. 08 921 369 filed Aug. 29 1997 now U.S. Pat. No. 6 339 767 issued Jan. 15 2002 each of which is incorporated herein by reference in its entirety.

U.S. application Ser. No 09 545 608 filed Apr. 7 2000 is a continuation in part of U.S. application Ser. No. 09 260 079 filed Mar. 2 1999 now abandoned which is a continuation in part of U.S. application Ser. No. 09 138 368 filed Aug. 21 1998 now abandoned which is a continuation in part of U.S. application Ser. No. 08 921 369 filed Aug. 29 1997 now U.S. Pat. No. 6 339 767 issued Jan. 15 2002 each of which is incorporated herein by reference in its entirety.

U.S. application Ser. No. 09 545 608 filed Apr. 7 2000 is a continuation in part of U.S. application Ser. No. 09 057 557 filed Apr. 9 1998 now U.S. Pat. No. 6 389 434 issued May 14 2002 which is incorporated by reference herein in its entirety.

The present application is related to the following applications and patents each of which is incorporated herein by reference in its entirety U.S. application Ser. No. 08 832 971 filed Apr. 4 1997 now U.S. Pat. No. 5 809 318 issued Sept. 15 1998 U.S. application Ser. No. 09 058 275 filed Apr. 10 1998 now U.S. Pat. No. 5 950 214 issued Sept. 7 1999 U.S. application Ser. No. 08 590 082 filed Jan. 23 1996 now U.S. Pat. No. 5 754 840 issued May 19 1998 U.S. application Ser. No. 08 662 377 filed Jun. 12 1996 now U.S. Pat. No. 5 799 325 issued Aug. 25 1998 U.S. application Ser. No. 08 632 801 filed Apr. 17 1996 now U.S. Pat. No. 5 806 079 issued Sept. 8 1998 U.S. application Ser. No. 08 423 676 filed Apr. 18 1995 now U.S. Pat. No. 5 623 679 issued Apr. 22 1997 and U.S. application Ser. No. 08 155 752 filed Nov. 19 1993 now U.S. Pat. No. 5 623 681 issued Apr. 22 1997.

The present invention is generally related to data processing and more particularly related to inter alia processing data objects in a variety of contexts.

Patents are becoming more and more important to a business s success especially in today s global economy. Patents can be viewed as a new type of currency in this global economy because they grant the holder with a right to exclude others from making using or selling the patented technology. In some industries product turnover is fairly rapid. However core technology product features and markets change at a much slower rate. Accordingly even in fast moving industries patents which cover core technology are very valuable at protecting a company s research and development investment for an extended period of time.

Patents are also valuable as revenue generators. In 1993 for example the revenue generated from patents by U.S. companies was over 60 billion. Fred Warshofsky John Wiley Sons Inc. New York 1994. These patent revenue dollars are rising each year.

Patents are further valuable because they collectively represent a vast technological database. According to Larry Kahaner s book Simon Schuster 1996 More than 75 percent of the information contained in U.S. patents is never released anywhere else. 

More and more corporations are recognizing the value of patents. The number of patents applied for and issued to U.S. companies is increasing every year especially in fast moving industries such as computer software telecommunications and biotechnology. Many international companies have also recognized the value of patents. In fact foreign companies regularly rank among the leaders in issued U.S. patents.

Yet for all the heightened awareness being paid to patents in some quarters patents remain one of the most underutilized assets in a company s portfolio. This is due at least in significant part to the fact that patent analysis whether for purposes of licensing infringements enforcement freedom to operate technical research product development etc. is a very difficult tedious time consuming and expensive task particularly when performed with paper copies of patents. Often times it is a difficult or even impossible task to simply identify relevant patents. Accordingly detailed patent related analysis is usually not done or it is done in an ad hoc unorganized incomplete inefficient and or ineffective manner.

It would be very beneficial to have automated tools that aid users in processing and analyzing patent related information and non patent related information for making corporate business decisions.

Briefly stated an embodiment of the invention is directed to systems methods computer program products and combinations thereof of context data processing. The embodiment operates by selecting one or more contexts. Each context includes one or more attributes and a plurality of data objects that satisfy the attributes. A list of data objects contained in the selected contexts is displayed. At least some of the data objects in the selected contexts are processed. Such processing may involve generating hierarchical and or directed acyclic graph data structures to represent relationships among the data objects. These data structures can then be displayed in a variety of well known techniques including but not limited to hyperbolic trees. Examples of such hierarchical or directed acyclic graph structures include claim trees citation trees and data object families which may be displayed using hyperbolic trees.

In an embodiment the contexts are groups. In other embodiment the contexts are each associated with a data object type. In this latter embodiment the contexts include data objects of their respective data object types. The invention is not limited to these embodiments.

The invention supports the generation of annotations. The invention supports a plurality of annotation types including document annotations group annotations data object type annotations case annotations and enterprise annotations. The invention also supports form based annotations.

In an embodiment the invention is directed to a system having an intellectual property asset manager IPAM and a plug in manager coupled to the IPAM. The system also includes at least one plug in coupled to the plug in manager and at least one external data processing component coupled to the plug in. In an embodiment the external data processing component displays data using at least graphs. In another embodiment the external data processing component displays data using at least maps. The plug in manager has a first application programming interface API and the external data processing component each has a second API. The plug in translates messages from the plug in manager to the external data processing component to a format conforming to the second API and translates messages from the external data processing component to the plug in manager to a format conforming to the first API.

The invention is also directed to assignee name processing. Such processing operates by selecting a normalized assignee name for an entity identifying name representations of the entity in a data set and linking the name representations to the normalized assignee name.

Further features and advantages of the invention as well as various embodiments of the invention are described in detail below with reference to the accompanying drawings.

In the following text reference is sometimes made to existing patents. Also some of the figures reference or illustrate existing patents. For illustrative purposes information from and or about these patents has sometimes been modified or created in order to support the particular examples being discussed. Accordingly the information provided herein about these existing patents should be considered to be fictional unless verified through comparison with copies of the actual patents that are available from national patent offices.

The present invention is directed to systems methods computer program products and components and combinations thereof for processing data objects. Such processing includes but is not limited to acquiring data objects organizing data objects storing data objects visualizing data objects displaying data objects manipulating data objects annotating data objects processing data contained in data objects etc. The invention is also directed to combinations of the modules and functions described herein and also described in U.S. patent applications System Method and Computer Program Product for Patent Centric and Group Oriented Data Processing Ser. No. 08 867 392 Using Hyperbolic Trees to Visualize Data Generated by Patent Centric and Group Oriented Data Processing Ser. No. 08 921 369 System Method and Computer Program Product for Managing and Analyzing Intellectual Property IP Related Transactions Ser. No. 09 138 368 herein incorporated by reference in their entireties.

In embodiments of the invention the data objects include but are not limited to patents and patent related data objects. More generally the data objects include but are not limited to intellectual property related data objects. The data objects also include but are not limited to data objects of past present or potentially future interest to corporate entities. For illustrative purposes the invention is sometimes described in terms of these embodiments. However the invention is not limited to these embodiments. The invention is applicable to data objects of any type and subject matter. Accordingly description of the invention in terms of these embodiments is provided for illustrative purposes only and is not limiting.

The invention may be used with immutable data objects i.e. data objects that cannot be modified such as but not limited to data objects produced by government agencies and similar institutions. For example an issued patent is generally considered an immutable data object since it is preferred that it not be modified. An executed contract is another example of a document that can be immutable. However the invention is not limited to these embodiments. The invention can operate with mutable data objects and or data objects produced by private entities.

In embodiments of the invention the data objects include documents such as textual documents image documents and combinations thereof. For illustrative purposes the invention is sometimes described in terms of these embodiments. However the invention is not limited to these embodiments. The invention is applicable to data objects of any type and form including but not limited to video audio sensory multimedia tactile computer programs links etc. and combinations thereof. Accordingly description of the invention in terms of these embodiments is provided for illustrative purposes only and is not limiting.

In some embodiments the present invention is intended to aid a corporate entity with planning over its entire enterprise. Accordingly the present invention is sometimes referred to as an enterprise system and method or an enterprise server . In some embodiments the present invention is intended to aid a corporate entity in developing business related strategies plans and actions. Accordingly the present invention is sometimes referred to as a business decision system BDS . In some embodiments the present invention is intended to aid a corporate entity with managing intellectual property assets. Accordingly the present invention is sometimes referred to as an intellectual property asset manager IPAM . In any of these embodiments the invention can run in a single user or a multi user mode of operation.

The invention supports an image skimming function. In accordance with the image skimming function preferably the first image page of each document in a collection of documents is displayed in succession pursuant to appropriate. user command.

The invention is not limited to this embodiment. In particular the skimming feature of the invention is not limited to document images. The skimming feature enables one to view or otherwise obtain information about a data object in a form that is consistent with that data object. For example and without limitation if a group contained a set of video clips the skimming pane might allow for a video clip to be displayed played directly from that window.

A group hierarchy is shown in a group pane of the browser . A group is a data structure that includes a collection of data objects such as documents. The data objects in a group typically follow a common theme or characteristic. For example a first group may include patents and other documents that map to a product being manufactured and sold by a company. A second group may include patents and other documents that map to a product being considered for future manufacture and sale by a company. A third group may include patents and other documents related to a research product. A group may contain other groups or may be included in one or more groups. Accordingly in embodiments of the invention groups are hierarchically organized. Groups are further described in U.S. Patent Application System Method and Computer Program Product for Patent Centric and Group Oriented Data Processing Ser. No. 08 867 392 herein incorporated by reference in its entirety.

As noted above a group hierarchy is shown in a group pane of the browser . In the example of a group 771 docs is selected as indicated as . A list of data objects contained in the selected group is displayed in a contents pane . In the example of a document EP 0815816A1 is selected as indicated as . Information pertaining to the selected data object is displayed in a data object pane . Such information for example can include a summary and or bibliographic information of the selected data object see the summary tab in the data object pane the text of the selected data object and or image data relating to the selected data object see the image tab in the data object pane . Other information pertaining to the selected data object is also accessible via the data object pane as further described below.

The contents pane includes navigational buttons which preferably operate relative to the selected data object in the contents pane . When selected button represented as a down arrow preferably causes information corresponding to at least the first image page of the next data object in the list of data objects in the contents pane to be retrieved and displayed in the image tab of the data object pane . The button preferably represented as an up arrow when selected preferably causes data pertaining to at least the first image page of the prior data object in the list of data objects in the contents pane to be retrieved and displayed in the image tab of the data object pane .

According to the image skimming function of the present invention the first image page of successive documents listed in the contents pane is displayed by repeatedly clicking the navigation buttons and . Specifically to move down the list of data objects displayed in the contents pane the down arrow button is pressed by the user. To move up the list of data objects listed in the contents pane the up arrow is repeatedly pressed by the user.

In an embodiment of the invention the data objects listed in the contents pane represent patents or documents related to patents including but not limited to post issuance documents . In this embodiment the image skimming feature of the present invention is analogous to a manual search of patents in the shoes of the patent search room and the collection of documents being searched is analogous to one or more electronic patent shoes. The collection may be one or more groups for example. During such manual searches sometimes called patent shoe searching practitioners often quickly thumb through the patents in a patent shoe by looking at the first pages of the patents. The image skimming feature of the present invention enables an operator to quickly electronically scan over the first image pages of the patents listed in the contents pane thereby emulating a manual search through the shoes in the patent office search room.

The present invention however represents a significant improvement over a manual patent shoe search. These advantages generally pertain to perspective and scope. Specifically the present invention provides both a global view of the subject matter being searched and a detailed view of the subject matter being searched. The global view is represented by the list of patents and related patent data objects listed in the contents pane . In particular the contents pane provides the user with an overview of the data objects that is the subject of the analysis.

The detailed view is represented by the data object pane which provides the user with detailed information regarding the currently selected patent from the contents pane .

The global view i.e. the contents pane and the detailed view i.e. the data object pane are simultaneously displayed for review by the user. Thus the user can simultaneously electronically view the list of the patents being searched and the first page of the currently selected patent. Also the user can immediately modify the focus of the search by selecting any patent listed in the contents pane . Such random access is not possible with manual patent shoe searching.

Further while conducting the search the user can easily and effectively create electronic annotations to capture his or her analysis. The annotation features of the present invention are further described below.

In step the user selects a collection of data objects. The collection of data objects can be selected using any of the features and functions of the present invention described herein. For example the user can conduct a search wherein the data objects identified by the search represents the collection of step . Alternatively the user can select one or more groups wherein the data objects contained in the selected groups correspond to the collection of step . Still alternatively the user can select one or more document types wherein all data objects of the selected document types correspond to the collection of data objects of step . A document collection group can be selected through any combination of searches attributes document types etc. all working together e.g. Create a group that consists only of license agreements document type containing the text digital video keyword search whose expiration date is between Jan. 1 1999 and Dec. 31 1999 document attribute .

In step one of the data objects listed in the contents pane is selected. Such selection may be manually performed by the user. Alternatively by default one of the documents may be preselected such as the first document in the list or the last document in the list. This default operation may be user controllable adjustable.

In step information pertaining to the selected data object is retrieved. Referring to an attempt to retrieve such information is first made to local databases . If image information of the selected document is not contained in the local databases then the network client interacts with the enterprise server to retrieve the image data from the remote databases . Additional details pertaining to the enterprise server and the network client as well as other component shown in is contained in U.S. Patent Application System Method and Computer Program Product for Patent centric and Group oriented Data Processing Ser. No. 08 867 392 incorporated herein by reference in its entirety.

In step information pertaining to the selected document is displayed in the data object pane . Preferably information corresponding to at least the first image page of the selected document is displayed in the image tab of the data object pane .

In step the user enters a navigational command. Specifically the user either presses the down arrow button or the up arrow button .

If the user pressed the up arrow button then information pertaining to at least the first image page of the prior document listed in the contents pane is retrieved and displayed as indicated by steps and . If instead the user selected the down arrow button then information pertaining to at least the first image page of the next data object listed in the contents pane is retrieved and displayed. This is represented by steps and . If neither the up arrow button nor the down arrow button was pressed by the user then the system processes the command that was issued as appropriate as represented by step .

Image skimming is further described in U.S. Patent Application System Method and Computer Program Product for Patent centric and Group oriented Data Processing Ser. No. 08 867 392 incorporated herein by reference in its entirety.

The present invention supports context processing. A context is a data structure comprising one or more attributes. The context also comprises data objects that satisfy follow relate to and or have the context s attributes. Contexts are further described below.

As noted above a group is a data structure that includes a collection of data objects such as documents. The documents in a group typically but not exclusively follow a common theme or characteristic. Groups are typically but not exclusively based on subject matter. The data objects in a group relate to or map to the subject matter associated with the group. For example a first group may include patents and other documents that map to a product being manufactured and sold by a company. A second group may include patents and other documents that map to a product being considered for future manufacture and sale by a company. A third group may include patents and other documents related to a research product.

Groups are further described in U.S. Patent Application System Method and Computer Program Product for Patent centric and Group oriented Data Processing Ser. No. 08 867 392 incorporated herein by reference in its entirety.

The invention supports contexts other than groups. Context processing performed by the present invention that does not involve groups is herein referred to as non group centric processing.

The invention supports a variety of non group centric contexts. For example a context can be created as a result of processing performed by the system. A context can be created from documents identified by a forward citation tree operation. Similarly a context can be created from a backward citation tree operation. Another context can be created by searching all groups and or data object types in the system containing a given document or having some attribute. In that instance the context would include all hits from that search.

A particular context supported by the invention is a data object type context. This context is described below.

According to the invention each data object has one or more data object kinds. A data object kind represents a classification of a data object. For example data object kinds include license agreements non disclosure agreements patents tax forms personnel evaluations software programs user manuals technical manuals copyright registration forms audio clips movies multimedia clips data object links annotations and any other data object or document classification of interest to the user.

Data object kinds represent contexts for organization visualization analysis and other processing. For example it may be useful to analyze all license agreements in which a corporate entity is a party. In this example the user selects the data object kind license agreements. All license agreements associated with the corporate entity are selected and may be analyzed by the user. All other information perhaps pertaining to the corporate entity but not representing license agreements are excluded from analysis. Thus the present invention facilitates the organization visualization analysis and other processing of information of interest to the user.

It is illustrative to note the differences between a group and a data object kind. A group is defined by its attributes and the documents and other data objects in the group share or follow such attributes. In contrast a data object kind represents a classification of a data object. The data objects associated with the data object kind may have nothing in common with each other except that they are the same kind of data object.

A given data object such as a patent may exist in a plurality of groups. This is illustrated in where a given patent is contained in a bill of materials group a user find group an inventor group a corporate entity group etc. Similarly a data object may exist in a plurality of contexts. This is illustrated in for example where a given data object is included in a group context an author context a publisher context and a topic context.

Each corporate document includes a document ID a title a data object kind and a security class. This information is listed in columns and respectively of the corporate document window .

The invention preferably includes various filters to enable users to limit the documents that are listed in the corporate document window . The example corporate document window shown in includes a security class filter and a data object kinds filter . As shown in the user can select one or more data object kinds for viewing. If for example the user selects contract in the data object kind filter then only documents having the data object kind of contract are listed in the corporate document window .

The security class filter allows the user to select one or more security classes. Only documents of the selected security classes are listed in the corporate document window . As shown in for example if the user selected in the security class filter the class class 5 then only documents of security class class 5 are listed in the corporate document window .

Preferably access to documents are restricted managed maintained by security information. A user can only access browse those documents that are consistent with his security information.

The browsers of the invention support inverse functions. An inverse function is one that performs an operation that is the inverse of another operation. For example browsing a group displays all of the documents in the group. The inverse is browsing all of the groups that contain the document. Many of the browser functions described herein include inverse functions. The inverse functions available for any given browser varies and is implementation dependent.

As noted above a data object kind is a classification of a document. For example all license agreements preferably have a data object kind of license agreement. All non disclosure agreements preferably have a data object kind of non disclosure agreement. All patents preferably have a data object kind of patent. The level of granularity of the data object kinds is implementation and application dependent. For example there may be data object kinds for U.S. patent Japanese patent Canadian patents etc.

A data object may have more than one data object kind. For example a license agreement may have the data object kind of license agreement and contract. 

Typically the data object kind supported by a system varies over time. Also typically different systems will have different data object kinds. Generally the data object kinds defined and supported by a system correspond to the needs of the users of the system. For example the data object kinds associated with a patent department may include patent patent application license agreement non disclosure agreement and patentability opinion. The data object kinds associated with an accounting department may include payroll statement invoice account receivable license agreement and budget.

Generally data object kinds can be created for any criteria or attribute of past present or future interest. Data object kinds can be arbitrarily created.

Preferably each data object has a security class. Many data objects can have the same security class.

A security class specifies the rights that users have. In other words a security class specifies user access rights. When a security class is assigned to a document then access to that document is controlled by the user access rights specified in the security class. Access to the document can be modified by either changing the access rights associated with the security class or assigning a new security class to the document. For example suppose that a security class A gives read and write privileges to a user . If document X is assigned security class A then user has read and write privileges to document X.

In an embodiment of the invention a corporate document is a data object in the system. It is noted that the following description is applicable to any type of data object document or otherwise .

The new corporate document window also includes a document ID field in which the document ID of the new corporate document is displayed. Preferably the document ID is unique among all corporate documents and data objects and is manually inputted. Alternatively it is automatically generated by the system.

The new corporate document window also includes a title field in which the user can enter a title of the new corporate document. A data object kind and a security class for the new corporate document can be entered in fields and . If the user wishes to create a new data object kind the user can press the new button in which case the new corporate data object kind window is displayed. If the user wishes to create a new security class the user presses the new button in which case the new security class window is displayed. The user can also enter additional bibliographic information pertaining to the corporate document such as author source disclosure date and publication date. These fields are available in the additional bibliographic fields tab See .

Example database tables usefull for implementing data object kinds as described above are considered in this section.

An example of the type table and the type document xref table is illustrated in . illustrates an example type table . The type table includes a data object type called automation that has a type ID of T. The type table also includes information pertaining to a data object type called license agreement that has a type ID of T. illustrates an example type document xref table . This example type document cross ref table indicates that contract and contract are of data object type automation and contract and contract are of data object type license agreement. 

A content pane list the data objects contained in a data object kind selected in the kind pane . Annotations are listed in an annotations pane annotations are further described below . Information pertaining to a data object selected in the contents pane is displayed in a data object pane . Such information includes any information pertaining to the selected data object such as summary or bibliographic information in the summary tab text information pertaining to the selected document in the text tab image information pertaining to the selected data object in the image tab audio information associated with the selected document in the audio tab and video information associated with the selected document in the video tab . Other information pertaining to the selected data object if any is also accessible via the data object pane via additional tabs not shown in .

Context processing according to embodiments of the invention is illustrated in a flowchart in . In step one or more contexts are selected. For example one or more groups and or one or more data object types are selected. Each of the selected contexts include any number of data objects.

In step the data objects in the selected contexts are processed. Such processing includes any combination of the functions described herein and or the functions described in U.S. Patent Applications titled System Method . and Computer Program Product for Patent centric and Group oriented Data Processing Ser. No. 08 867 392 Using Hyperbolic Trees to Visualize Data Generated by Patent centric and Group oriented Data Processing Ser. No. 08 921 369 and or System Method and Computer Program Product for Managing and Analyzing Intellectual Property IP Related Transactions Ser. No. 09 138 368 all of which are herein incorporated by reference in their entireties. Such processing may be automatic manual or combinations thereof.

Preferably users interact with the enterprise server and the IPAM databases via network clients and web clients . Network clients interact directly with the enterprise server although there may be networks between the network clients and the enterprise server . Web clients interact with the enterprise server via web server .

Preferably network clients include local databases . Web clients may also include local databases. The local databases store information on data objects. Preferably the information contained in the local database is a subset of the information contained in IPAM databases . For example the local database may only include information on a limited number of data objects. Also for any given data object the local database may only store some information pertaining to the data object. For example the database may only store bibliographic or summary information pertaining to the data object. The database may not store more detailed information pertaining to the data object such as textual information image information video information audio information etc.

Further information pertaining to the enterprise server the network client the web client the web server and databases and are found in U.S. Patent Application System Method and Computer Program Product for Patent centric and Group oriented Data Processing Ser. No. 08 867 392 incorporated herein by reference in its entirety.

The data object pane illustrates information pertaining to the document selected in the contents pane . Preferably the data object pane displays summary or bibliographic information pertaining to the document selected in the contents pane . This is the case in the example .

The user can elect to display other information pertaining to the selected document by selecting another tab in the data object pane such as the image tab shown in . However such additional information pertaining to the selected document may not be present in the local database . The invention supports a document or data object preview function for addressing such instances.

Specifically in cases where requested information pertaining to a document or other data object selected in the contents pane is not present in the local databases the invention displays a preview button . When the user presses the preview button the network client or the web client interacts with the enterprise server to retrieve at least a portion of the additional information pertaining to the selected data object. Preferably the text of the selected document is transferred from the IPAM databases to the network client or the web client . This text is then displayed in a preview window for review by the user see .

In other embodiments additional information is transferred from the IPAM databases to the network client or the web client . Such information may include image information audio information video information or any other information pertaining to the selected data object that is stored in the IPAM databases . As shown in such information can be displayed by selecting the appropriate tab in the preview window .

In some embodiments if the requested information on the selected document is not present in the IPAM databases the enterprise server operates to obtain the information from an external source. For example the enterprise server may interact with a third party information provider such as Lexis Nexis or may interact with some other source such as a human operator a company database such as a personnel database a finance database etc. etc.

The user reviews the information in the preview window . Preferably this information is available only on a temporary basis and it is not stored in the local databases . If the user wishes to store the information in the local databases then the user presses an order button or issues a similar command. In response to the selection of the order button the enterprise server retrieves any additional information pertaining to the selected document from the IPAM databases or from some other source and transfers such information to the network client or the web client . This information as well as information previously provided is stored in the local databases .

The processing pertaining to the data object preview function of the present invention is illustrated in . Specifically illustrates the interaction between the network client and the enterprise server when performing the data object preview function . The network client sends a preview request message to the enterprise server . The preview request message is sent by the network client to the enterprise server when the user pressed the preview button . The preview request message includes information that identifies the data object selected in the contents pane . The preview request message also indicates the type of data that is requested. For example in some embodiments only text data pertaining to the selected data object is requested. In other embodiments other types of data is requested such as image data audio data video data or any other or all data pertaining to the selected data object. In other embodiments a given type of data is always requested and provided such as textual data in which case a preview request message does not include an indication of the type of data that is requested.

Optionally the network client and the enterprise server perform a financial exchange whereby funds are transferred from the network client to the enterprise server . The financial exchange is performed in those cases where the preview function is available only as a pay for used service. In the financial exchange the funds are electronically or otherwise transferred from the network client to the enterprise server . The invention also includes other economic models such as but not limited to an unlimited service plan where for a given fee the user can download any number of documents and a hybrid plan where for a fee the user can download a given number of documents. Once this limit is exceeded the user pays on a per document rate.

The enterprise server retrieves from the IPAM database the requested data pertaining to the selected data object and transfers this data to the network client . The IPAM database in one embodiment obtains such data from a data source . The data is then processed indicated by oval as necessary and then stored in the IPAM database . The data source for example may be a Patent Office departments of a corporate entity third party information providers as discussed above etc. and or may result from data processing performed by automatic means manual means or combinations thereof.

Upon receipt of the preview data by the network client the network client displays the preview data in the preview window as described above.

The operations performed by the present invention when the user requests the retrieval of a data object is also represented in as a data object retrieval function . In accordance with such processing the network client transfers a document request to the enterprise server . The document request was generated by the network client when the user pressed the order button in the preview window . The document requests includes information that identifies the selected data object in the contents pane and also identifies the type of data that is requested i.e. text image audio video etc. . In cases where the data object request functionality is offered only as a pay per use service the network client and the enterprise server perform a financial exchange operation in which funds are electronically or otherwise transferred from the network client to the enterprise server . The enterprise server retrieves the requested information from the IPAM database or other source and transfers such information to the network client . The network client then preferably stores this information in its local databases for later access by the user.

The present invention supports a variety of annotation types. An annotation type is defined by two attributes. First by whether annotations of the annotation type are attached or linked to data objects or portions of data objects. Second by the scope of annotations of the annotation type. The scope defines the extent to which the annotations are visible or accessible. is a table that summarizes the attributes of the annotation types of the present invention.

Annotations are further described in U.S. Pat. Nos. 5 623 681 5 623 679 and 5 806 079 all of which are herein incorporated by reference in their entireties.

A document annotation is attached or linked to a selected portion of a data object contained in a group. The scope of a document annotation is the group in which the linked data object is contained and that was active or selected at the time that the document annotation was created. Document annotations are accessible only when their respective groups are active.

A document annotation may be linked to multiple data objects. Also a document annotation may be unlinked from any or all linked data objects. When a document annotation is unlinked from all linked data objects it is called a floating free or unlinked annotation as opposed to a linked annotation . Unlinked annotations maintain their original scope and operate just like linked annotations except that they have no links to data objects to follow. Unlinked annotations can be linked to data object portions through appropriate user command. It is noted that this description pertaining to document annotations is also applicable to other linkable annotation types described herein.

For example assume that a document annotation is linked to a document D. Document D is contained in groups G and G. However at the time that the document annotation was created group G was active. That is group G was selected in the group pane of the group browser see at the time that the annotation was created. In this case the document annotation is linked to document D and has a scope of group G. The document annotation is only accessible when group G is active. The document annotation is not accessible when group G is active even though document D is in G.

The invention supports a variety of types of document annotations. For example the invention supports patent annotations. Consider which displays a summary of U.S. Patent No. 5 668 742 in a data object pane of browser . Upon appropriate user command the text of U.S. Pat. No. 5 668 742 is displayed in a text window shown in . According to the invention a patent annotation is created by selecting a portion of a patent such as the selected portion shown in . Such operation results in creating a subnote in a note window that is linked to the selected portion of U.S. Pat. No. 5 668 742.

User comments can be entered into the subnote . In an embodiment location information is stored and displayed proximate to the subnote this is applicable for all annotation types described herein . Such location information indicates the location of the selected portion in the data object i.e. U.S. Pat. No. 5 668 742.

Notes are listed in the annotation pane . For example in the current example the newly created note is listed in the annotation pane as entry .

The invention also supports corporate document annotations in which any type of document can be annotated. For example in summary information pertaining to a corporate document selected in a contents pane is displayed in the data object pane . Image information pertaining to the selected document is displayed in an image window upon execution of appropriate user commands as shown in . As indicated in a portion of the image in image window has been selected. This operation causes a subnote to be created in a note window . The subnote is linked to the selected portion . The user can enter information or comments pertaining to the selected portion in the subnote that is the user can annotate the selected corporate document .

The invention supports image annotations wherein images can be annotated. For example in image information pertaining to U.S. Pat. No. 5 668 742 is displayed in the data object pane of the browser . Upon appropriate user command such image information is displayed in larger form in an image window shown in . As indicated in the user has selected a portion of the image. This selected portion is indicated as . Upon such selection a subnote is created in a note window . This subnote is linked to the selected portion . The user can enter comments pertaining to the selected portion in the subnote that is the user can annotate the selected portion .

A group annotation is not attached to a data object or a portion of a data object. The scope of a group annotation is the group that was selected or active at the time that it was created and the group annotation is linked to the group. A group annotation is visible only when its associated group is selected or active. Preferably any user with access to a group has access to the group annotations associated with the group.

Data object type annotations are similar to group annotations. Data object type annotations are not attached to data objects. Instead data object type annotations are linked to data object types. The scope of data object type annotations is the associated data object type that was specified when the annotation was created. Data object type annotations are only accessible when their associated data object types are selected or active. Like group annotations access to data object type annotations is generally open to any user who has access to the associated data object type.

A case is a data structure that includes a plurality of data objects. Such data objects may be in one or more groups one or more data object types and or one or more other cases. A case may span multiple groups data object types other cases etc. That is a case can be set to include a given set of groups data object types cases etc. A case is a type of context.

A case annotation is attached or linked to a portion of a data object contained in a case. The scope of the case annotation is the case that was active or selected when the case annotation was created. Case annotations are only visible if the associated case is selected or active. Access to case annotations is preferably under the control of the case owner. In an embodiment a document that is being annotated is added to the active case automatically.

Enterprise annotations are attached and linked to data objects. The scope of an enterprise application is the data object to which it is linked. Accordingly an enterprise annotation is accessible whenever the data object is accessible. Therefore whenever a data object is contained in the active context the enterprise annotations linked to that data object are accessible. In an embodiment access to enterprise annotations is limited to trusted individuals such as administrators or administrator designees given the wide scope of enterprise annotation

In an embodiment the ability to create an enterprise annotation is granted to the user by the system administrator. The administrator would specify the types of data objects that can be annotated by a user e.g. NDAs patents license agreements and so forth .

In an embodiment enterprise annotations are only visible to a given user if the creator of the enterprise annotations exported his or her annotations to the given user and the given user subscribed to the enterprise annotations of the creator. For example if user created an enterprising annotation linked to data object then user when viewing data object would only have access to enterprise annotation if user exported his enterprise annotations to user and user subscribed to the enterprise annotations of user . This exporting subscription feature of the invention operates as both a security feature enabling a creator to limit access to only those people to which his enterprise annotations have been exported to and a filtering tool enabling a user to display only those enterprise annotations generated by creators to which the user has subscribed .

As noted above the annotations pane contained in the browser or console window lists the currently active annotations. An annotation is active if its context is active. For example a document annotation is active if it is linked to a data object contained in the active group i.e. the group selected in the group pane of the browser . A case annotation is active if its associated case is active that is its associated case is selected . A group annotation is active if its associated group is active that is its associated group is selected in the group pane of the browser . A type annotation is active if its associated type is active that is its associated type is selected in the type pane of the context browser . An enterprise annotation is active if the data object to which it is linked is contained in the active context that is it is contained in the active group or the active data object type .

Embodiments of the invention support a variety of formats for the annotation pane. Such formats are presented in the figures. For example illustrates an annotation pane having a tab for each annotation type. Specifically there is a tab for document annotations a tab for case annotations a tab for group annotations a tab for type annotations and a tab for enterprise annotations. To view the active annotations of any given type the user selects the tab associated with the type. For example to view the currently active enterprise annotations the user selects the enterprise tab .

In embodiments of the invention different types of annotations are denoted by different types of attributes. For example different annotations may be displayed using different display attributes such as font color size underlining icons etc.

It is noted that the annotation type supported by the invention represent additional types of contexts. For example enterprise annotations represent a type of context that include either the active enterprise annotations and or the data objects linked to the active enterprise annotations.

In step the user selects an annotation mode. This can be done for example by selecting an annotation pen see for example pens in . It is noted that pens can be assigned to different types of annotation types such that the type of annotation to be created depends on the pen that is selected. Alternatively this can be done by selecting an appropriate menu command such as a drop down menu or a menu that it appears upon pressing the right mouse button.

In step the user selects an annotation type i.e. a document case or enterprise annotation . Its noted that step is performed only when the user has not previously selected an annotation type. For example as noted above the user may have previously selected an annotation type when he selected the annotation pen .

In step the system creates a new annotation of the type selected in step and links the annotation to the portion of the data object selected in . Further in step the user enters comments or notes to annotate the selected data object portion.

In step information pertaining to the new annotation including the user entered comments the linking information etc. is stored in an annotation database.

In step the user selects a group or a data object type. The selected group or data object type becomes the active group or data object type.

In step the user selects a group or type annotation mode. This can be done for example by selecting an appropriate menu command or by selecting an appropriate annotation pen .

In step the system creates a new annotation of the selected type. The new annotation is linked to the active or selected group or data object type. Also in step the user enters notes or comments to thereby annotate the active group or data object type.

In step information pertaining to the annotation such as the user s comments the linking information etc. are stored in an annotation database.

As noted elsewhere the present invention supports annotation of data objects. For example illustrates an example window wherein a data object is being displayed. The present invention enables annotation of any portion of the data object .

The window includes a plurality of annotation pens . The user places the system in an annotation mode by selecting one of the annotation pens the invention includes other ways of placing the system in the annotation mode such as selecting an appropriate command from a menu or dialog . The user utilizes the selected annotation pen to select a portion of the data object . For example illustrates a selected portion of the data object that has been selected using the selected annotation pen. Upon selecting the selected portion the system automatically creates a new annotation which is illustrated as note segment in note . The note segment is automatically linked to the selected portion .

Preferably the cursor is automatically positioned in an annotation field of the note segment so the user can record his observations. When finished the user presses the save button . Upon pressing the save button information pertaining to the annotation such as the user s comments in the annotation window linking information location information the name of the annotation whether the annotation includes privileged information etc. are stored in an appropriate data format. Preferably in a single user system such annotation information is stored on the local computer. In a multi user system the annotation information is preferably stored in a database in such a way that the information can be securely shared with other users.

In the embodiment being described the system does not provide any guidelines or place any restrictions on the scope and content of the comments. Accordingly comments entered by the user may be of no value to himself or others. In some cases the user s comments may be inappropriate given the circumstances under which the comments were solicited.

The user s comments comprise free form text which is entered in the annotation field . In the embodiment being described the comments are stored in an unstructured data format that is appropriate for storing free text such as but not limited to a flat file database or a binary large object BLOB in a relational database. This data format is not structured in any way and is therefore not appropriate for storing in a standard relational database format.

According to an embodiment the invention supports form based annotations. Form based annotations extend the operation of the annotation system described above to allow an expert user to create a specific form that is directed and limited to the information that one wishes the user to provide. Herein for reference purposes the person who creates a form is referred to as the form creator and the person who uses the form in the process of making an annotation is the annotation creator. Preferably the form based annotation system operates in a secure multi user client server system.

According to the invention data entered into one or more fields of an annotation form are stored in relational database fields. The number of annotation form fields that are stored in relational database fields vary from form to form depending on the specific implementation of the form creator.

In the example of the annotation form of information entered into the name annotation form field is stored in a name field of a relational database table . Information from the radio button fields and are stored in fields and respectively of the relational database table . Date information entered into the when annotation form field is stored in a date field of the relational database table .

It should be understood that the particular database table implementations of the screening form and the comments form shown in are provided for purposes of illustration only and not limitation. Other database and table implementations will be apparent to persons skilled in the relevant arts based on the teachings contained herein. Also the particular configurations and arrangements of the screening form and the comments form are provided for illustrative purposes only and are not limiting. Other forms will be apparent to persons skilled in the relevant arts based on the teachings contained herein.

In step a form creator creates a form such as the screening form or the comments form . The form creator is any user who has been designated as a person capable of creating and editing forms.

In step one or more relational database tables are created for the form if necessary. Information entered into the form created in step will be stored in these database tables. These database tables may be created by the form creator or by some other user such as but not limited to a system administrator.

In step the form creator selects one or more relational database tables for storing the information that is to be entered into the form. The selected database tables may include for example one or more of the tables created in step and or other database tables created at other times.

In step the form creator assigns one or more fields columns from the selected relational database tables to each of the fields of the form. Data entered into the fields of the form are stored in the selected database table fields.

In step the form creator specifies and defines any additional features of the form. For example the form creator can specify processing associated with any of the fields of the form. Considering for example the name field involves processing to check name information against a company directory to ensure that the name information was entered correctly into the name field . The screening form also includes processing associated with the when field that involves confirming that the date entered into the when field is a valid date. The when field includes further processing associated with comparing the date entered into the when field with a projected IDS information disclosure statement filing date to identify issues associated with submitting references to the U.S. Patent Office. For example if the projected IDS filing date is greater than 3 months after the date entered into the when field then a flag is set in database field . The flag indicates that there may be an issue relating to whether or not the reference can be cited with the U.S. Patent Office in satisfaction of the duty of disclosure for a pending U.S. patent application. Other form features that can be specified in step is further described below.

After step is completed the design of the form is complete. Steps and involve the manner in which an annotation creator uses a form.

In step the annotation creator selects a form. The form is tied to a specific pen or some other annotation invocation mechanism such as an option on a menu . The annotation creator selects the pen for the form thereby informing the system which form to invoke how to collect store the data etc.

In step the selected form is displayed. The annotation creator enters information into the form as specified by the fields of the form.

In step information entered into the fields of the form is stored in the associated relational database fields as defined by step .

The operation of the form based annotation system of the present invention is further described with reference to a flow chart shown in . Steps and of flow chart generally correspond to steps and of flowchart of . Step of flowchart generally corresponds to steps and of flowchart of .

In step preferably the system administrator authorizes a given user the form creator to create forms. In other words the ability to create modify edit and otherwise operate with forms is preferably a secured operation. This is because the creation of the form includes appropriate provisions for storing the data acquired for the use of the form in relational database s for backend statistical processing as well as other processing.

In step the form creator logs into the system and creates a form to capture the data he is interested in capturing.

The invention supports all known input widgets including radio buttons text input fields check boxes etc. The form creator explicitly or implicitly associates input widgets with back end database tables. Even the meta content of the tables may be stored with the form allowing for the use of sophisticated data mining applications of the form and the data. It is also possible to associate programmic operations with the form. Examples of such operations include edit checks on input fields processing based on data entered into fields invocation of other applications based on information entered into fields etc.

In step the form creator associates the form with a pen such as one of the annotation pens as shown in or other annotation mechanism such as a pull down menu . This is part of a publishing process in which the form creator also specifies appropriate identifying characteristics of the form such as a name of the form and the storage locations of the data that is to be captured by form that is the relational database table fields in which the data entered into the form is stored .

The publishing process also allows the form creator to specify which user or groups of users should be allowed access to the form. Users are preferably identified by either their log in I.D. identification or by a role I.D. that specifies the role that they are assuming with respect to the operation of the system. In this way the form creator can customize the operation and presentation of a given form based on the user s role. For example for a particular form some fields are shown to marketing people whereas other fields are shown to engineering people. Some fields may be shown to both marketing and engineering people. Further some processing may be performed when the user has a marketing role and other processing may be performed when the user has an engineering role. Some processing may be shown to both engineering and marketing people.

In an embodiment the role based process described above allows a person to play multiple roles at the same time. Thus a marketing engineering role would see both marketing and engineering forms.

The form creator can also associate multiple forms with a single annotation mechanism. The form creator can further decide if they want the system to route the form to specific users and if so the manner of routing.

After completion of step design of the form is complete. In step the annotation creator uses the form to create an annotation. In particular the annotation creator creates a new annotation by possibly using a pen as described above. The system invokes the form associated with the pen and presents it to the user. In a case that multiple forms have been associated with a single annotation mechanism the system presents a choice of forms to the user for selection e.g. through a pull down menu or pick list . Alternatively the system sequences through the forms associated with the annotation mechanism. The user enters the information called for by the form and the system stores this information in the appropriate relational database locations and potentially other non relational database locations as specified when the form was being designed.

Medical Example As noted above form based annotations can be used to better ensure that specific and desired information is collected from the user. Consider a doctor who has asked a colleague to review an X ray to determine if a specific medical condition is present. The colleague may not fully understand the request and enter irrelevant information as an observation if they are using a text field for annotations as with the free text annotation system of . However the doctor could create a form that asks specific medical questions. In this case when their colleague makes an annotation he would be prompted for the desired medical input.

A lawyer may wish to have an engineer comment on one or more claims of a patent but would like to control the specific commentary that can be entered by the engineer. With free text annotations the engineer could inadvertently enter inappropriate information. With form based annotations the lawyer could limit the amount and kind of information that an engineer could enter.

For example consider the scenario shown in . A novice user fills out a screening form see which is then stored in the screening form database . The completed screening form is also automatically routed to the IP intellectual property attorney this operation is programmed into the screening form . If in completing the screening form the user checked the Do you believe we should further study this patent field then the comments form is routed to the novice user and an expert user to solicit their comments this operation is programmed into the screening form .

The comments form is completed by both the novice user and the expert user . Their completed comments forms are stored in the comments form database . Also the novice user s completed comments form is routed to the expert user for review this is programmed into the comments form . The expert user may revise the novice user s completed comments form . The revised comment form is indicated as . The revised comment form is stored in the comments form database .

Similarly the completed comments forms and are routed to the IP attorney who may enter his own comments which are stored in the comments form database this is programmed into the comments form .

There are times when one user who is an expert in one domain wants specific opinions from one or more users whose expertise lies in different but related domains. In this case the first expert could annotate a specific portion of a data object. When another expert accesses this annotation the system will prompt them through the use of a form based annotation for their opinion of the annotated data object. The system provides a wide variety of mechanisms to obtain feedback from expert users as well as other selected users including routing and multiple routing slips and time based expirations.

Consider a product development example where a product marketing manager may want an engineer to provide a cost estimate on how much it would cost to manufacture a patented product to help determine long term product strategy. In this case the marketing manager would associate appropriate edit checks on the input widgets of the form to ensure that the engineers are entering in numeric information in a reasonable range. Because a decision is needed quickly the marketing manager routes it through the company email system to all of ENGINEERING specifying a time limit of 7 days. If an engineer does not respond within 7 days the system automatically removes the request from their work queue .

Note that an engineer may annotate the patent several times thereby providing multiple cost estimates one for each annotated portion of the patent that would in the opinion of the engineer result in a component or portion of the product. In this case the system would operate in a manner similar to free text annotations automatically creating sub forms contained within a larger form much like creating sub notes in the context of a note . The form creator would have to decide on the operation of these forms during the creation process e.g. the form creator would either allow or reject the use of multiple sub forms within a form .

Form based annotations enable the collection and storage of observations of users who make annotations in a way that these observations can be used for reliable reporting and other statistical data mining operations.

Consider the product development example discussed above. After 7 days the product marketing manager could run a report that produces the weighted average of the cost estimates from the engineers. The system could perform this report by querying specific database columns and extracting data from specific database columns. For example the system can execute a search in a Department column of the relational database to identify all rows of the database that correspond to annotations made by members of a given engineering department. The system can then extract data from the Cost Estimate column of the identified rows.

Accordingly the form based annotation system of the invention facilitates data mining statistical processing and other processing of the annotation data.

If instead a free text format was used it would be necessary to parse the free text to extract the desired information.

It is noted that the invention is not limited to only storing information in formally structured fields within a relational database. In fact a form could contain a mixture of structured fields such as dates numbers or Boolean and unstructured text fields as discussed above.

With free text annotations for example the user selects a portion of a data object and then describes why the selected portion is relevant. Sometimes this is exactly the opposite order of what is desired. Specifically sometimes an expert user wants a different and perhaps more novice user to annotate a portion of a data object in response to what the expert user created.

For example a teacher could create the contents of an annotation and ask students to find the spot where the annotation is true . For example a teacher could prepare a series of x rays of difficult to diagnose fractures. The assignment could be Identify the location of the hairline fracture . Students would then annotate the data object where they thought the fracture was using a form based annotation possibly adding commentary on their selection in a new annotation window or in the original . The teacher could then compare the work of the student to a known standard.

The invention supports a variety of types of data objects. For example the invention supports patent related data objects corporate documents which in some embodiments constitute non patent related data objects etc. Such data objects are preferably stored in system databases such as the IPAM databases and or local databases see . The invention also supports data objects that are not stored in system databases. For example the invention supports data objects that are available from third parties. Such third parties include but are not limited to on line data providers such as LEXIS NEXIS Dialog Westlaw Derwent etc. Third parties also include but are not limited to public or government databases such as those associated with the SEC FCC FDA Department of Motor Vehicles Social Security etc. With regard to such third party providers the invention supports establishing a link with the third parties and enabling users of the invention to interact with the third parties via the link. Such third party providers include well known interfaces or APIs application programming interfaces . In embodiments the invention interacts with such third parties via their respective interfaces or APIs.

The invention includes functionality to enable users to conduct complex searches through the data objects that it supports. The invention provides detailed graphical user interfaces GUI to enable users to define their searches. illustrates an example search GUI . In the example of the search GUI includes a variety of tabs associated with the data object types supported by the invention.

For example the invention includes a patent documents tab for specifying a search among the patents stored in the system databases. The search GUI also includes a corporate documents tab for specifying a search among the corporate documents stored in the system see . The search GUI also includes an all documents tab for specifying a search among all data objects stored in or supported by the system see .

The search GUI further includes tabs for third party information providers supported by the system. For example and without limitation a LEXIS NEXIS tab in the search GUI is selected to define a search to be performed by the LEXIS NEXIS system In an embodiment upon providing such search criteria a link is established with the third party information provider wherein the third party is instructed to perform the specified search. Search results are then returned to the system i.e. the enterprise server the network client and or the web client . Such information is then treated as any other system information.

Further details pertaining to the searching capabilities of the invention are described in U.S. Patent Application System Method and Computer Program Product for Patent Centric and Group Oriented Data Processing Ser. No. 08 867 392 incorporated herein by reference in its entirety.

The invention supports the use of a variety of visualization technologies to present information to users. Such technologies include but are not limited to hyperbolic trees. Other technologies useful for presenting data to users are discussed in sections below.

A hyperbolic tree or a hyperbolic browser is a well known focus plus context technique for visualizing and manipulating data hierarchies such as trees. A hyperbolic browser assigns for display a portion of a tree while still embedding in it the context of the entire tree. The essence of this scheme is to lay out the tree in a uniform way on a hyperbolic plane and map this plane onto a display region such as but not limited to a circular display region other display geometries are also possible . Thus hyperbolic trees support a smooth blending between focus and content as well as continuous redirection of the focus.

An example hyperbolic tree is illustrated in . The hyperbolic tree includes a root node and a plurality of additional nodes connected either directly or indirectly to the root node . Additional portions of the hyperbolic tree can be expanded and displayed in the window that is focus can be redirected to those portions by traversing to the desired portions in the hyperbolic tree . An operator traverses the hyperbolic tree using a pointing device such as a mouse.

According to the invention the hierarchical information represented in hyperbolic trees may come from any source including but not limited to patent offices corporate entities public records individual users etc. In an embodiment the hierarchical information is patent related but the invention is not limited to this embodiment.

The invention provides a variety of functions to enable users to customize the display of hyperbolic trees. For example embodiments of the invention store state information in each node of the hyperbolic tree.

The node state information also includes display attribute information that indicates the manner in which the node is to be displayed in the window . Such display attributes include any attributes for displaying information on a computer screen such as font color bold italics underlining visible invisible etc. The display attributes also include user defined and custom attributes which are entered by a user. The user defined attributes are useful to enable users to specify the display of nodes to meet their specific applications.

In some embodiments the display attributes of a node are automatically set based on the information corresponding to the node. For example when a hyperbolic tree is used to display a patent claim tree the display attributes of nodes may depend on whether the nodes correspond to a patent or a claim an independent claim or a dependent claim a disclaimed claim a valid claim an invalid claim an infringed claim a non infringed claim a claim that has been annotated etc.

In some embodiments the display attributes may be set according to information entered into the user defined field. For example if the user enters that a given claim is invalid then the font and color display attributes may be set to preselected values corresponding to invalid claims. Therefore the user defined field s and the display attributes portion of the node state information may specify actual display attributes such as crosshatching or state information that the system uses to automatically set the display attributes.

The node state information also includes link information that establishes a link between the node and associated information in the system databases i.e. the IPAM databases and or the local databases shown in . In the case of a claim tree in the link information establishes a link between the node and the text of the claim associated with the node. Alternatively such claim text can be stored in the node itself as part of the node state information . In other embodiments a portion of the claim text such as the preamble or a portion thereof is stored in the node as part of the node state information and the link information in the node state information establishes a link to all of or the remaining portion of the claim text.

The invention supports functions to edit the appearance of a hyperbolic tree. For example the invention allows a user to prune a tree by removing nodes or branches. In embodiments of the invention such pruning is accomplished by deleting the identified nodes and or branches from the tree. In other embodiments of the invention such pruning is accomplished by appropriate setting of the display attributes of the selected nodes and or branches. Specifically nodes corresponding to portions of the tree which a user has selected to delete are set to invisible or transparent.

Specific embodiments of hyperbolic trees supported by the invention are described below. It is noted that these embodiments are provided for illustrative purposes only and are not limiting. Additional applications of hyperbolic trees will be apparent to persons skilled in the relevant art s based on the teachings contained herein.

The patent claim tree module generates a graphically displayed claim tree from a collection of claims. The patent claim tree module works both as a standalone product and as an add on to IPAM.

The patent claim tree module includes a mechanism to elicit help from the user when it fails to understand enough about a claim to perform its function. Whenever the patent claim tree module experiences ambiguity or failure in the processing of a claim it will produce a log entry containing the text of the claim the claim properties inferred by the patent claim tree module and any corrections brought about by the user.

The patent claim tree module preferably uses the graphical display of the tree to convey visually the properties of individual claims. These properties include but are not limited to 

In some embodiments the style of claims supported by the patent claim tree module is limited to the one prevalent in standard utility patents. As a result the patent claim tree module covers claim sections contained in any document whose style is substantially identical to that of utility patents e.g. Reissues Statutory inventions . Alternative embodiments support other claim styles that are different e.g. Design patents Plant patents .

The claim parser uses the token string corresponding to each claim to set the properties of that claim as well as its dependency relationships to other claims. Its final product is preferably a directed a cyclic graph representing the claims of the collection their properties and their dependencies.

An example claim tree is shown in . In the claim tree the root node represents the patent or the patent application. In the example of the claim tree corresponds to a patent application having Attorney Docket No. 15310010006.

The nodes directly connected to the root node such as the nodes corresponding to claims 181 208 235 271 272 273 and 274 represent the independent claims in the patent or patent application. The nodes connected to these independent claim nodes represent the dependent claims of the respective independent claims. The links in the patent claim tree represent the dependencies between claims.

The invention supports a number of functions to facilitate the display and analysis of claims. For example when the cursor is positioned proximate to or over a claim node a portion of the claim is displayed in other embodiments the entire claim is displayed . In for example the cursor is displayed over node corresponding to claim . According to this embodiment of the invention a portion of claim is retrieved and displayed in window . This portion of the claim can be retrieved from the node state information if available or can be retrieved from a system database such as the IPAM databases and or the local databases by access to the link information in the node state information .

The invention also supports a display claim branch function. As is well known a dependent claim is construed to include the base independent claim and any intervening claims. When the user positions the cursor over a dependent claim and selects the display claim branch command the system retrieves the text of the selected claim its base independent claim and any intervening claims between the selected claim and the base independent claim. Such retrieval can be accomplished for example by following the links in the claim tree from the selected claim to the associated independent claim. The invention then displays the retrieved claim language in the order of dependency. In an embodiment the retrieved claim text is concatenated in order of the independent base claim the intervening claims and finally the selected dependent claim.

For example assume that the user elected to perform a display claim branch function on claim shown in as being dependent on claim . The text of claim is illustrated in window of . The text of claim is illustrated in window of . Upon issuing the display claim branch command on claim the invention retrieves the text of claims and . The invention then concatenates the retrieved text in order of dependency. The concatenated text is then displayed in a window for example window of . Note that the information displayed in window has a portion corresponding to claim and a portion corresponding to claim .

Other display formats for presenting and displaying the retrieved claim text will be apparent to persons skilled in the relevant arts based on the discussion contained herein.

In step a claim is selected for processing. As noted above the claim can be from a patent or a patent application as long as the patent or patent application is stored in system databases.

In step the invention determines whether the selected claim is an independent or dependent claim. This is done by parsing the claim text to search for keywords that indicate whether the claim is independent or dependent. For example the claim text may be parsed for the word claim in the preamble which would indicate that the selected claim is a dependent claim.

If the claim is determined to be a dependent claim then in step the claim text is parsed to identify the claim or claims on which it depends.

Accordingly steps and correspond to parsing the claim language to identify claim properties and information used to generate the claim tree. Embodiments of the invention operate to recognize key words phrases and or patterns in claims to identify such claim properties and information. The invention is flexible in this regard.

The need for flexibility in this area is motivated by the fact that even though the language and structure of claims is constrained claims are still expressed in natural language and present substantial variations in the terms and linguistic patterns used. This requires the patent claim tree module to be easily extensible to recognize new words and linguistic patterns that denote properties supported by the patent claim tree module.

Therefore embodiments of the patent claim tree module include a configuration file. The configuration file includes information that 

Also in some cases the user is ask to specify a textual pattern that may help the patent claim tree module deal with a given situation in the future.

Steps and are performed for each claim in the patent and or application as indicated by control flow line . Based on the information obtained from processing steps and a claim dependency graph is generated in step .

In step the hyperbolic tree is displayed. The display of the hyperbolic tree utilizes the attributes stored in the node state information of each node. As noted above such attributes may have been automatically established and processed based on information stored in the system or may be user defined. The user may enter user defined attribute information by selecting an appropriate menu command as shown in menu of .

In step if the mouse is positioned proximate to or over a node at least a portion of the text of the claim corresponding to the node is retrieved and displayed. This capability of the invention is further described above.

In step if the user selects a dependent claim and selects the display claim branch command see menu in then the display claim branch function for the selected claim is performed. The display claim branch function is described above.

A user can elect to display the full text and or image of any claim in the tree. This is done by positioning the cursor proximate to or over the node corresponding to the claim and then selecting the display claim command from menu .

The invention supports other processing of patent claims. For example the invention supports automatic processing to compare a claim to an arbitrary text description.

Such processing can be used to analyze a claim for infringement purposes. In this application the claim is compared to a description of a device or process that is accused of infringing the claim. Possible infringement is indicated if there is a close similarity between the claim and the device process description.

Such processing can also be used to analyze a claim for patentability validity purposes. In this application the claim is compared to a description of one or more publications and or events that might possibly render the claim unpatentable. Possible unpatentability invalidity is indicated if there is a close similarity between the claim and the publications events description.

Such processing can also be used to analyze a claim to determine if sufficient support for the claim is contained in the patent specification. In this application the claim is compared to the specification. Probable support for the claim is indicated if there is a close similarity between the claim and the specification.

In an embodiment the automatic claim comparison process of the invention is performed by normalizing the claim language of the claim through an implementation dependent linguistic process. The description to which the claim is to be compared is then normalized through a corresponding sometimes identical or similar process. The normalized texts are then compared to identify similarities and differences. A conclusion is then reached based on the context of the analysis i.e. whether it is for purposes of infringement patentability validity support etc. 

An example of such processing is described in U.S. Pat. No. 5 754 840 which is herein incorporated by reference in its entirety.

As noted above the patent claim tree module is capable of working in a stand alone mode. In this mode an example use scenario is as follows 

6. The patent claim tree module produces a graphical representation of the claims tree within a special purpose window. Errors and warnings are output to the log window.

The patent claim tree module can also work with IPAM. In this mode an example use scenario is as follows 

3. The command routine within IPAM opens the document extracts the claim section and invokes the patent claim tree module. The claim section is passed to the patent claim tree module which comes up and pastes in its input output window.

6. The patent claim tree module produces a graphical representation of the claims tree within a special purpose window. Errors and warnings are output to the log window.

These use scenarios are provided for purposes of illustration only. The invention is not limited to these use scenarios. Other use scenarios will be apparent to persons skilled in the relevant art s based on the herein teachings.

The invention supports patent citation trees. An example citation tree is shown in . In the patent citation tree each node represents a patent and each link represents a citation. When performing a forward patent citation function the links going from the root node toward the children nodes or leaves represent the directed association is cited in as in parent node is cited in child node. When performing a backward citation function the links going from the root node toward the leaves represent the directed association cites as in parent node cites child node. 

The invention supports displaying a variety of labels in the nodes of the tree. The labels may be any information pertaining to the data objects that they represent. For example in the case where the data object is a patent the labels may be any bibliographic information of the patent including but not limited to the patent number inventors assignee claim language or excerpt specification or excerpt drawing information such as an image of a figure class subclass patent examiner law firm etc. The label that is displayed is user selectable.

Both patents and non patent documents and data objects may be cited in any given patent. According to the present invention both patents and non patent documents data objects are represented in the patent citation tree . For example assume that the patent citation tree is a backwards patent citation. According to this example patent B and patent C represented by nodes and respectively are cited in patent A represented by node . Non patent documents or data objects C and D represented by nodes and are also cited in patent A.

According to the invention information pertaining to the data objects in nodes of a hyperbolic tree whether a patent citation tree or otherwise can be retrieved and displayed by selecting the node. Such functionality is accomplished by for example reference to the link information in the node state information or by reference to appropriate database tables.

The display attributes of nodes can be set according to information pertaining to the data objects that they represent. In the case where the data objects are patents for example the display attributes of nodes can be set according to any bibliographic information of the patent including but not limited to the patent number inventors assignee claim language or excerpt specification or excerpt drawing information such as an image of a figure class subclass patent examiner law firm etc. For example the user can indicate that patents assigned to company X be color coded blue whereas patents assigned to company Y be color coded red. In response to this input the system automatically color codes nodes based on their assignee information.

It is noted that this aspect of the invention has been described in the context of patent citation trees. However the invention is applicable to data objects of any type that cite or are cited by other data objects. Accordingly more generally the invention supports data object citation trees.

According to embodiments of the invention citations in citation trees are not limited to data object references that appear in any particular location of the data object s in question. For example a backward citation tree for a U.S. patent is not limited to citations that appear on the front page of the U.S. patent. Also a citation tree for a technical article is not limited to citations contained in the bibliography of the article. Instead citation trees can include citations to data objects that can be referenced anywhere in the data object s in question.

Preferably in the case of patents the invention includes data text processing techniques for culling identifying citation references to patents and non patent documents that are contained within the specification but not listed on the first page bibliographic section. Parsing techniques to identify data in data objects are well known and any can be used to implement this aspect of the invention. Such references can be included in patent citation trees they could be displayed using different display attributes to denote their existence in the body of the specification or can be displayed in different trees .

Databases for implementing the patent citation function of the present invention are illustrated in . illustrates a patent ref table that stores information on patents that were cited during the prosecution of a given patent. The patent ref table includes a record for each patent that was cited during the prosecution of a given patent application. Each record of the patent ref table includes a document ID that identifies a base patent and a refpatentno that identifies a reference patent i.e. a patent that is cited in the base patent .

Information pertaining to other databases used by the invention is contained in U.S. patent applications System Method and Computer Program Product for Patent Centric and Group Oriented Data Processing Ser. No. 08 867 392 and System Method and Computer Program Product for Managing and Analyzing Intellectual Property IP Related Transactions Ser. No. 09 138 368 incorporated herein by reference in their entireties.

The operation of the patent ref table and the non patent ref table is illustrated in . presents an example patent ref table corresponding to the patent citation tree shown in . The patent ref table indicates that patents B and C are cited in patent A and patent D is cited in patent B.

Additional details regarding patent citation trees according to the invention are discussed in U.S. patent applications System Method and Computer Program Product for Patent Centric and Group Oriented Data Processing Ser. No. 08 867 392 and Using Hyperbolic Trees to Visualize Data Generated by Patent Centric and Group Oriented Data Processing Ser. No. 08 921 369 incorporated herein by reference in their entireties.

The present invention supports data object families. A data object family comprises a collection of data objects that are somehow related and information pertaining to the relationships between the data objects in the family.

There are many types of families and family relationships. For example the patent citation tree described above is an example data object family where the family includes a base patent and patents and non patent data objects that are cited in or that are cited by the base patent.

According to the invention data object families are contexts for organization visualization analysis and other processing as described above.

The invention supports the creation generation visualization manipulation and other processing of data object families. Data object families may be system defined or user defined.

A number of the data object families supported by the present invention are described below. The invention is not limited to these examples. Additional data object families will be apparent to persons skilled in the relevant arts based on the discussion contained herein.

In the example of the assignee technology patent family includes a bike patent a bike patent and a bike patent . Bike patent is the assignee s first and base patent on bikes. Bike patent is an improvement upon bike patent and bike patent is an improvement upon bike patent .

According to the invention data object families are displayed using any well known visualization technology including but not limited to hyperbolic trees. Techniques for generating hyperbolic trees from hierarchical organized data such as data object families is discussed in U.S. patent application Using Hyperbolic Trees to Visualize Data Generated by Patent Centric and Group Oriented Data Processing Ser. No. 08 921 369 incorporated herein by reference in its entirety.

The data object families described above as well as additional data object family examples supported by the present invention are further described below.

The invention supports a plurality of patent specific families. Examples of such families are described below.

This family depicts the relationship between related issued patents and pending applications and possibly related data objects of the same assignee. This includes but is not limited to U.S. and corresponding foreign applications. This includes the original application divisions continuations CIPs Reissues and Re exams Patent Extensions. The information to create these families could be found for example in the assignee s internal patent docket system.

This family would be used for understanding any company s particular family relating to a group of patents and applications that stem from the same original application. Such a family would show in a tree type format the relationship between for example all the patents and applications in a corporate entity s family. It helps a user see how a company has clustered improvement patents around newly developed technology. It could be useful to product planning product development and the business and legal people in charge of managing the company s portfolio.

This family shows the relationship between patents and applications of the same assignee in the same area of technology but not necessarily limited to an Assignee Patent Family Chronology. This family would be a broader grouping that would relate patents and applications of an assignee across an entire technology. The information to create these families could be found for example in the assignee s internal patent docket systems and keyword searching on the assignee s patents and applications.

This family shows the relationship between patents in the same area of technology. This family is not limited by assignee. The information to create these families could be found for example by a combination of patent bibliographic and patent text searching. This family would be somewhat like a forward citation tree but more limited based on the culling and grouping criteria used by the person creating the family.

These families focus on the relationship between claims in terms of dependency and dominance subservience among claims.

These trees show the relationship between claims in a single issued patent or a pending application. This tree is preferably created by searching at least the first line of all claims in a given patent or application for an indication of dependency and or subject matter and scope. This is useful in patent prosecution licensing and litigation scenarios in graphically representing the dependency relationship among claims in a given patent or application. Patent claim trees are further described above.

This tree shows the relationship between claims in an Assignee Patent Family Chronology. This tree would show the independent dependent claim relationships within a given patent or application and dominant and subservient or improvement claims in an Assignee Patent Family Chronology. The information to create these trees could be found for example in the assignee s internal patent docket systems and keyword searching on the assignee s patent and application claim sets and the culling and grouping criteria used by the person creating the tree.

This family shows the relationship between claims in an Assignee Technology Patent Family. This would be similar to the Assignee Patent Family Chronology Claim Tree but would not be limited to a given Patent Family Chronology. This family covers the Assignee s entire related technology base. This family shows the claim relationships of dependency and dominant subservient claims within an Assignee s Technology Patent Family Chronology. The information to create these trees could be found for example in the assignee s internal patent docket systems and keyword searching on the assignee s patent and application claim sets and the culling and grouping criteria used by the person creating the tree.

This family shows the relationship between claims in all patents in a Technology Patent Family. This would be similar to the Assignee Technology Patent Family Claim Tree but would not be limited to a given Patent Family Chronology but would cover the entire related technology base for all assignees. The information to create these families could be found for example by a combination of patent bibliographic and patent text searching and the culling and grouping criteria used by the person creating the tree.

These families are trees that include both patent claims and trademarks used on the patented products covered by the particular patent claims. They are created in a similar way that the Patent Families and Trees would be created with the added dimension of including trademarks in the families and trees that correspond to the patents covering products sold using those trademarks.

Databases useful for implementing functions related to data object families are described in this section.

Each row of the relationship type table includes a relationship type name the unique identifier for the relationship and a grouping ID. The grouping ID is used to aggregate relationship types for a given data object family. For example grouping G generally corresponds to a patent family chronology. Grouping G generally corresponds to an assignee technology patent family.

The relationship type table includes relationships that are predefined system defined and relationships that are user defined. Accordingly the invention allows users to define and or modify relationships based on the needs of their particular applications. Additionally the groupings contained in the relationship type table comprise both predefined groupings and user defined groupings. Accordingly users can create and or modify groupings based on their specific needs.

Rows of the data object family table correspond to forward citation relationships as indicated in the relationship type column. Specifically row indicates that patent B is cited by patent A. Row indicates that patent D is cited by patent B. Row indicates that non patent object A is cited by patent B. Row indicates that patent C is cited by patent A. Row indicates that non patent data object D is cited by patent C. Row indicates that non patent data object C is cited by patent A. Row indicates that non patent data object D is cited by patent A.

Use of the data object family table is further illustrated in . As discussed above illustrates an example patent family chronology . illustrates an example data object family table that corresponds to the patent family chronology . Row of the data object family table indicates that lab notebook represents invention disclosure materials used to generate application . Row indicates that continuation is a continuation of application . Row indicates that CIP is a continuation in part of continuation . Row indicates that copyright is a copyright that is related to CIP . Row indicates that trademark is a trademark that is related to continuation . Row indicates that PCT is a PCT application from application . Row indicates that Japan is a Japanese foreign national application from PCT . Row indicates that Canada is a Canadian foreign national application from PCT .

In an embodiment the patent family chronology of is preferably generated by selecting grouping G from the relationship type table . A data object family is then generated that includes the relationships within grouping G. Further details regarding the generation of data object families is provided below.

Another example of the use of the data object family table is presented in . As indicated above illustrates an example assignee technology patent family . illustrates a data object family table that corresponds to the assignee technology patent family .

Row of the data object family table indicates that bike patent is an improvement of bike patent . Row indicates that bike patent is an improvement of bike patent . Additional information is contained in the data object family table . For example row indicates that bike patent is technically related to bike patent and is a base patent. Row indicates that the claims of bike patent are subservient to the claims of bike patent . Row indicates that the claims of bike patent are an improvement of the claims of bike patent . Row indicates that the claims of bike patent are dominant over the claims of bike patent . Rows are useful for generating an assignee patent family chronology claim tree described above.

In step relationship information is obtained. Preferably relationship information is obtained in a pair wise fashion. In other words pairs of data objects that are somehow related are first identified. Then the relationships between the data object pairs are determined. Alternatively relationship information is obtained and then converted into a pair wise format.

There are a variety of sources of relationship information. Some of these sources applicable with the present invention are illustrated in . It is noted that the invention is not limited by the sources depicted in . Relationship information may be available and obtained from other sources including but not limited to data sources identified and or provided by users.

One source of relationship information is data having referential integrity as indicated by . Referential integrity refers to information that directly indicates a relationship between data objects. For example the information in the patent ref table of has referential integrity because the information contained therein directly establishes citation relationships between patents. Similarly the non patent ref table in has referential integrity because the information contained therein directly establishes citation relationships between patents and non patent data objects.

Referring to relationship information can also be obtained from relational database tables . By definition relational databases relate data objects to one another. Accordingly the relationship represented in relational databases can be used to generate relationship tables and data object family tables.

Relationship information can also be obtained by searching database tables as indicated by in . Such operations may include for example searching a corporate entity column of a database table for all occurrences of the name Aurigin to thereby identify all data objects that relate to the company Aurigin. This might result in identifying all patents that are assigned to Aurigin. This information is useful for generating patent family chronologies for example.

Relationship information can also be obtained by performing text searches among data objects. Such operations may involve for example searching the text of documents for the word microprocessor to thereby identify data objects that potentially relate to the microprocessor field. This information is useful for generating technology patent families for example. Searches could include more complex Boolean proximity natural language and any types of linguistic analysis.

Additional relationship information may be obtained by performing manual acquisition and analysis of data as indicated by in . Such operations may involve for example manually reviewing the claims of a collection of patents to determine those that are technically related dominant and subservient relationships base relationships improvements etc.

Upon completing step data object pairs having some relationship of interest have been identified and the relationships between such data object pairs have been determined. In step data object family tables are populated using the relationship information obtained in step . For example suppose that in the course of performing step it was determined that a particular Japanese application called Japan was filed from a particular PCT application called PCT . In this case a row in a data object family table corresponding to this pair wise relationship is created in step . Such a row is shown for example as in .

In step the user selects one or more data objects. The selected data objects represent the base data objects upon which the analysis is performed. In the example of the user selects application which is the base patent application for the patent family chronology .

In step the user selects one ore more relationship types upon which the analysis is formed. In an embodiment the user manually selects the relationship types of interest. In other embodiments the user selects one or more grouping that contain the relationship types of interest. In the example of the user selects grouping G see which contains all of the relationship types of interest for the patent family chronology it is noted that grouping G can be modified as desired by the user to perform a custom patent family chronology analysis .

In step the user indicates whether complete or partial closure is required. If the user selects complete closure then all relationships stemming from the data objects selected in step are identified. If the user selects partial closure then only a portion of the relationships stemming from the selected data objects are identified for example perhaps only relationships moving forward or moving backward from the selected data objects are identified . Also in step if the user selects partial closure then the user may be required to provide information regarding the scope of the desired analysis.

In step closure based on the selected data objects the selected relationship types and the scope of closure is computed. In other words all relationships from the data object family tables that satisfy the information and commands provided in steps and are identified.

In step rows in the data object family tables that match the selected data objects and the selected relationship types are identified. A row matches a selected data object if either the from field or the to field of the row contains the selected data object. A row matches a selected relationship type if the relationship type field of the row contains one of the selected relationship types.

Step is optionally performed depending on the level of closure specified in step . In step additional rows in the data object family tables that match data objects specified in rows identified in step and that also match one or more of the selected relationship types are identified. For example in the data object table of row is identified in step because application the data object selected in step is contained in the from field. Note that continuation is contained in the to field. In step rows in the data object family tables that match continuation and that also match one or more of the selected relationship types are identified. Thus row is identified because continuation from row is contained in the from field and also the trademark relationship which is part of selected group G is contained in the relationship type field.

Steps and are repeatedly performed until the level of closure specified in step is satisfied as indicated by control flow line .

Upon the completion of steps and data object pairs having relationships of interest have been identified. Also the relationships between such data object pairs are identified. In step a tree of the data object pairs is generated. Preferably the tree is generated by selecting a data object pair adding the selected data object pair and its associate relationship to the tree and then selecting a new data object pair. The process continues until each data object pair has been added to the tree.

For example assume that steps and identified rows in . In step the tree or graph is generated from rows . For example processing of row results in creating nodes and and link in the tree see . Processing of row results in adding node and link to the tree . The other identified rows are processed in a similar manner in step .

Referring again to in step. the data object family is displayed. According to the invention the tree generated in step may be displayed using any visualization technology including hyperbolic trees. Techniques for generating hyperbolic trees are discussed in U.S. patent application Using Hyperbolic Trees to Visualize Data Generated by Patent Centric and Group Oriented Data Processing Ser. No. 08 921 369 incorporated herein by reference in its entirety.

According to the invention the enterprise server can interface with third party tools to enhance and extend its functionality. As used herein the phrase third party tools refers to any hardware software or combination thereof that is external to the enterprise server or any of its component or associated modules such as the web server the databases and the network client and the web client . The third party tools are selected and integrated with the enterprise server on the basis of their ability to perform desired functionality not available internally i.e. not performed by the enterprise server or any of its components or associated modules . Such functionality can pertain to data acquisition or storage visualization display processing and or any other data processing.

In step a user begins analyzing a collection of data objects. The data objects may be for example from one or more groups and or one or more data object types. Alternatively the data objects may have resulted at least in part from processing performed by the enterprise server such as from conducting database searches.

In step the user analyzes the data objects using functions provided by the enterprise server . Such functions are described above. Additional functions are described in U.S. patent applications System Method and Computer Program Product for Patent Centric and Group Oriented Data Processing Ser. No. 08 867 392 Using Hyperbolic Trees to Visualize Data Generated by Patent Centric and Group Oriented Data Processing Ser. No. 08 921 369 System Method and Computer Program Product for Managing and Analyzing Intellectual Property IP Related Transactions Ser. No.09 138 368 incorporated herein by reference in their entireties.

In step the user wishes to run one or more reports based on the analysis performed in step . Some of the reports may be generated using functions provided by the enterprise server . Such reporting functions of the enterprise server are described herein and are further described in the patent applications referenced above. Other reports may be generated using third party components that interface with the enterprise server .

In step the user wishes to further analyze the data objects using functions provided by third party components that interface with the enterprise server . Information pertaining to the data objects are sent to the third party components along with commands options and other information needed to allow the third party components to perform the analysis requested by the user. The third party components perform the requested functions using the information received from the enterprise server .

In step the user instructs the third party components to send the results of their respective processing back to the enterprise server . Such results may be stored and utilized as a new group or data object type in the enterprise server for example. Such results could also be processed alone or with other data and or could be stored as data in fields of data records and or reports.

In step the user wishes to analyze a group containing one thousand documents or other data objects. The documents include both patents and non patent documents. The documents relate to computer programming languages.

The user in step selects a third party component to organize and visualize the content of the documents. The display generated by the selected third party component is shown as in . In display documents that are similar in content are represented as peaks in a landscape. The relative size of the peaks correspond to the number of documents that are directed to the subject matter associated with the peaks. Preferably operation of the third party component is dynamic such that the context of the landscape is dynamic. For example the display shown in the example of is based on the subject matter or topic of the documents in the group . Preferably the user can access a menu which allows the user to change the context of the display from topical to another attribute such as author. If the user changes the context to author then the peaks in the display would correspond to author and the relative size of the peaks would indicate the number of documents that were by respective authors.

In step the user selects a subset of the 1 000 documents via use of the third party component. In the example of the user has selected from the display the peaks corresponding to PASCAL and COBAL. This selection is indicated by .

In step the user instructs the third party component to send the results of the analysis back to the enterprise server . In the example of the third party component sends back an indication of the selection . For example the third party component may send back a list of the documents corresponding to the selection that is a list of the books directed to PASCAL and COBAL .

In step the enterprise server creates a new group from the information received from the third party component. In this case the new group contains the documents corresponding to the selection that pertain to PASCAL and COBAL.

In step the enterprise server generates and saves a search query corresponding to the analysis performed by the user using the third party component. In example of the search query generated and saved by the enterprise server comprises a search for documents pertaining to PASCAL and COBAL. The search query is generated and saved so that it can be referred to and used in the future by the user.

The new group can then be used in the enterprise server just like any other group. Specifically processing can be performed on the documents in the new group as described above and as further described in U.S. patent applications System Method and Computer Program Product for Patent Centric and Group Oriented Data Processing Ser. No. 08 867 392 Using Hyperbolic Trees to Visualize Data Generated by Patent Centric and Group Oriented Data Processing Ser. No. 08 921 369 System Method and Computer Program Product for Managing and Analyzing Intellectual Property IP Related Transactions Ser. No. 09 138 368 herein incorporated by reference in their entireties.

The examples discussed above illustrate the round trip functionality of the present invention. Specifically the invention allows information to be transferred from the enterprise server to third party components. Also the invention enables the transfer of information from third party components to the enterprise server . In certain instances depending on the functionality desired and the third party component being used only one way interaction is involved. For example often when working with a report generator data flows only from the enterprise server to the report generator. Such data is sent to the report generator to enable the report generator to create a desired report. With some report generators data does not flow back from the report generator to the enterprise server although with some report generators data may flow back to the enterprise server . For example the report generator may send an electronic copy of the report back to the enterprise server .

The enterprise server includes an enterprise server API application programming interface . Generally the enterprise server API includes a collection of commands that the enterprise server understands. These commands instruct the enterprise server to perform specific functions. An entity external to the enterprise server interacts with the enterprise server by sending commands that conform to the enterprise server API to the enterprise server . The enterprise server API is further described below. The enterprise server API is additionally described in U.S. patent application U.S. Patent Application System Method and Computer Program Product for Patent Centric and Group Oriented Data Processing Ser. No. 08 867 392 incorporated herein by reference in its entirety.

The interface is preferably represented by a plug in manager . The plug in manager includes a plug in manager API . The plug in manager API includes commands which the plug in manager understands. These commands instruct the plug in manager to perform specific functions. Entities external to the plug in manager interact with the plug in manager by sending commands that conform to the plug in manager API to the plug in manager .

The third party components tools are represented by plug ins and third party components tools . The third party components tools represent any hardware software or combination thereof that performs desired functionality. The third party components tools each includes an API. Devices external to the third party components tools interact with the third party components tools via their respective APIs.

Preferably a plug in exists for each third party component tool . Alternatively one or more third party components tools may share a common plug in .

Generally the plug ins represent translation modules. Messages sent from the plug in manager to a third party component tool is translated from a format native to the plug in manager to a format recognized by the API of the third party component tool . Similarly a message that is send from a third party component tool to the plug in manager is translated by the plug in from the native language of the third party component tool to commands and or messages that conform to the plug in manager API .

As indicated in the enterprise server the plug in manager the plug ins and the third party component tools interact with a database which may include for example the IPAM databases .

The process of translating between the plug in manager API and the API of any given third party component tool will be apparent to persons skilled in the art based on the discussion of the plug in manager API contained herein and knowledge of the well known API of the third party component tool . Additionally interaction with a third party component tool via its API will be apparent to persons skilled in the relevant arts.

The plug in architecture described herein is applicable to both the server and the client. In embodiments of the invention the client plug in architecture works in a manner substantially similar to the server plug in architecture a difference being in the type and kind of APIs supported required by the client and the manner in which the client detects that plug ins are present. Implementation of the server and client plug in architectures will be apparent to persons skilled in the relevant art s based on the discussion contained herein.

In step the plug in manager determines which plug ins if any are available. This is indicated as in . As noted above each plug in preferably corresponds to a third party component and understands the API the information requirements the options etc. of the corresponding third party component i.e. how to interact with the third party component .

In step the enterprise server receives from the plug in manager a list of the available plug ins . This is indicated as in . This list indicates which third party components are available for use by the user.

In step the user pops up a plug in menu . The menu lists all plug ins that are available based on the list obtained in step . Further in step the user selects a plug in from the plug in menu .

In step the enterprise server instructs the plug in manager to run the selected plug in. This is indicated by in .

In step the plug in possibly with the assistance of the plug in manager displays an options dialog or a series of dialogs to the user. The dialogs specify the functions that can be performed by the corresponding third party component . Preferably at least all functions that are accessible through the third party component s API are listed in the dialogs. In other words interaction between the enterprise server and the third party component includes at least the functions and capabilities represented in the API of the third party component . The user selects desired options via the displayed options dialog. This interaction is represented by in .

In step the plug in makes requests for data from the plug in manager . This is represented by in . In response to such requests the plug in manager may make calls to the enterprise server represented by in or may directly access the databases this is represented by in .

In step the plug in creates an instance of the associated third party component . This instance is a software representation of the third party component. For example if the third party component is a report generator then in step the plug in invokes the report generator. This is represented by in .

In step the plug in transfers data to the third party component . The plug in performs any necessary data transformations. Additionally the plug in sends commands and options from step to the third party component or alternatively controls the third party component based on the commands and options from step . Preferably the plug in interacts with the third party component in this manner using the API of the third party component . This operation of step is represented by in .

Also in step the user performs any real time interaction with the third party component via the plug in manager and the plug in . An example of such interaction was described above with reference to .

In step the user instructs the third party component to export the results of any processing performed by the third party component . This is represented by in .

In step in response to the export command the third party component transmits data to the enterprise server via the plug in and the plug in manager.. The plug in and or the plug in manager perform any necessary data transformations. The enterprise server receives and processes the information as described above.

Embodiments of the invention support a number of methods for integration with third party components. Two such integration methods are called loose integration and tight integration. These are described below.

With loose integration interaction is via an intermediary such as files. To export data from application such as IPAM to application such as a third party tool application or an entity working on behalf of application stores the data in a file preferably in a format understandable by application otherwise data translations may be performed . The file is then read by application or an entity working on behalf of application .

To import data to application application or an entity working on behalf of application saves data in a file. The file is then read by application or some entity working on behalf of application some data translation may be necessary . In embodiments of the invention these write and read operations are manually initiated. That is the user has to manually initiate the exportation and importation of data.

Generally it is possible to utilize off the shelf versions of a third party component when loose integration is used.

With tight integration IPAM and a third party component interact with each other via the plug in architecture described herein. Data is sent from IPAM to a third party component via the plug in mechanism and visa versa.

In an embodiment IPAM via the plug in mechanism sends a list of pointers to the third party component. The pointers point to data i.e. data objects . In this manner IPAM sends data to third party components. This same process is also used to send data from third party components to IPAM via the plug in mechanism . Alternatively IPAM could send data to a third party component by storing the data in a file and then sending a message to the third party component via the plug in mechanism with the name of the file. This process could also be used to send data from third party components to IPAM. Alternatively IPAM could send data to a third party component by sending messages containing the data via the plug in mechanism to the third party components. This process could also be used to send data from third party components to IPAM.

Tight integration is a more automated process. The user need not explicitly store data in files or manually initiate read and or write operations. Instead the user need only issue import or export commands. An example of the user issuing an export command is shown for example in . In the example of the user is exporting the data objects in a group adewolfe to Microsoft Excel. The menu shown in also illustrates other commands to import and export.

In order to perform tight integration it is necessary that the API of the third party component include sufficient functionality to support the interactions described above. Alternatively tight integration can be achieved using a version of a third party component that has been modified to support the interactions described above.

According to the invention upon receipt of information from a third party component the enterprise server creates a search query that corresponds to the analysis processing performed by the user using the third party component. In an embodiment the enterprise server generates the query by comparing the information sent to the third party component with the information received from the third party component.

Consider the example of where 1000 documents pertaining to computer programming languages were sent to the third party component and a subset of these documents pertaining to Pascal and Cobol were returned to the enterprise server . According to an embodiment the enterprise server compares what was sent with what was received to generate a search query limited to Pascal and Cobol.

In other embodiments the third party component returns status information that the enterprise server uses to generate the search query. In other embodiments the third party component returns the search query.

The Plug in Manager is preferably an ActiveX component that supports the addition of plug ins also preferably ActiveX components that support interaction with third party components. As noted above plug ins are used to export data to and import data from third party visualization components such as but not limited to Microsoft Excel Cartia ThemeScape and SpotFire .

The Plug in Manager defines several APIs described below for use by various parts of the Plug in facility. The Plug in Manager also provides a local database which provides linked tables proxies to tables in the IPAM SQL Server database.

When the IPAM is started the IPAM queries the Plug in manager for available Plug ins preferably creating a pull right menu listing their names. If no Plug ins are available the menu is not created and access to Plug ins is disabled in the IPAM. In one embodiment a user selects an IPAM group then uses the Plug in menu to cause the Plug in Manager to invoke a specific Plug in. Preferred protocols by which this happens are described below.

Additional APIs applicable with the invention are described in System Method and Computer Program Product for Patent Centric and Group Oriented Data Processing Ser. No. 07 867 392 filed Jun. 2 1997 which is incorporated herein by reference in its entirety. Implementation of the APIs and commands described below will be apparent to persons skilled in the relevant art s based on the teachings contained herein.

It should be understood that the following APIs and commands are provided for illustrative purposes only and are not limiting. Any other APIs or commands that achieve the functions and requirements described herein can also be used as will be apparent to persons skilled in the relevant art s based on the herein teachings.

The Plug in Manager exposes an API to the IPAM. This API allows the IPAM to obtain the number and names of available Plug ins and to invoke those Plug ins but preferably shields the IPAM from Plug in specific details.

In an example embodiment plug ins advertise their availability by way of a Windows Registry subkey under the key 

If the default value of the subkey is 0 then the Plug in is considered to be unavailable. Any other value indicates that the Plug in is available. In other embodiments the Plug in Manager may automatically mark a Plug in as being unavailable under certain circumstances. For example if a Plug in fails some set number of times in succession .

The Description value of the subkey holds a string that provides additional information about the Plug in. For example to be used as a tooltip.

Adds the name and id of a document to the list of documents in the group. After the IPAM invokes SetGroup the IPAM is required to invoke AddDocument once for each document in the group.

Sets or resets a dictionary entry for name to be value . The dictionary can be queried by a Plug in using protocol described further below. The IPAM is required to set the following attributes

The Plug in manager creates an instance of the ActiveX component for the Plug in and invokes it using the Plug in Manager to Plug in API described below.

If the Plug in fails where conditions constituting failure are defined by the specific Plug in the Plug in will raise an OLE exception. If no exception is raised the Plug in is assumed to have succeeded.

Each Plug in preferably implements this API through which the Plug in Manager invokes runs the Plug in.

Run the Plug in. The manager object is a reference to the instance of the Plug in Manager ActiveX component. The Plug in uses the Plug in to Plug in Manager API described below to communicate with the Plug in manager.

If the Plug in encounters an error it communicates details back to the Plug in Manager by raising an OLE exception passing a description of the error in the exception.

Get the value of an attribute as set by SetAttribute . The Plug in uses this function as necessary to obtain the id of the logged in user the name of the server name and port number of the IPAM server etc.

IPAM Groups form a hierarchy. UnrollGroup populates the bds groups table in the local database with a trace of the group hierarchy from the source group for the given depth. A depth of 0 means the source group only 1 means to include the source group and one level of subgroups and so on. 

The Plug in then gains access through the GetDB function described below and can issue SQL queries that join against the bds groups table.

Directs the Plug in manager to trace citations for the source documents writing the results into the bds citations table in the local database. Citations are traced either forward or backward and to a given depth.

The Plug in then gains access to the local database via GetDB as described below and can issue SQL queries that join against the bds citations table.

Return an ActiveX object that provides access to the local database. Database is an OLE Object type provided by Microsoft. It provides an API for interacting with JET databases. The database object has an API that supports SQL queries.

Through the local database the Plug in gains access to tables in the IPAM database and optionally to third party or customer specific tables allowing information to be merged for presentation.

The enterprise server can interact with any third party component having functionality and capabilities of interest. As indicated above the enterprise server interacts with a given third party component via the API of the third party component . Alternatively the enterprise server interacts with a third party component via a custom interface to the third party component .

For illustrative purposes and without limitation example third party components are described below. It should be understood that the present invention is not limited to working with these third party components. The following discussion is provided solely to illustrate example operation of the enterprise server with third party components and is not limiting.

In the example display of each icon in the graph represents one or more patents. In an embodiment information pertaining to a patent such a bibliographic information text information image information etc. can be retrieved and displayed by selecting the icon associated with the patent.

The X axis of the graph represents the issue date and the Y axis of the graph represents the filing date. The patent icons are positioned on the graph depending on their particular filing dates and issue dates. The display can be dynamically adjusted by selecting other criteria for the X axis via a drop down menu . Similarly the display can be dynamically adjusted by selecting other criteria for the Y axis via a drop down menu .

The data represented in the graph can be filtered by selecting from attributes . In example of for example the patents represented in the graph are limited to art units through and remaining pendency of 42 weeks to 961 weeks.

A variety of graph based visualization tools operable with the present invention are publicly available. For example and without limitation SPOTFIRE PRO is a commercial product available from SPOTFIRE Boston Mass. SPOTFIRE PRO enables the display of data in graphical form as shown in .

The display can be dynamically adjusted by selecting attributes from a menu . For example if the assignee attribute is selected then the landscape would be adjusted so that the peaks would represent the number of patents assigned to corporate entities.

Information in the display can be limited by using filters from a filter menu . For example if an assignee attribute is selected and Aurigin is entered in a pop up dialog then the landscape would be adjusted to only display patents assigned to Aurigin. 

According to the example shown in when the cursor is positioned proximate to or above a peak the text of a claim that corresponds to the peak is partially or fully displayed. This is illustrated by window .

As described above and further illustrated in information from IPAM can be exported to the landscape tool . This is represented by data flow line . The exported information is represented as a map . The user can manipulate the map to select groups of data objects which can then be imported to IPAM . This is represented by data flow lines . The imported data can be used to form new groups as shown in .

An example product that utilizes a landscape approach to visualize data is THEMESCAPE from CARTIA INC. Bellevue Washington. illustrates an event diagram representing the interaction between the enterprise server the enterprise client or and the third party THEMESCAPE product according to an embodiment of the invention. The invention is not limited to this example implementation.

Interaction with Cartia ThemeScape will be further illustrated by reference to an example scenario shown in . This also further illustrates the round trip capabilities of the invention.

Second available options are chosen in the Cartia Plugin dialog see . The dialog allows you to change the name of the map the name of the IPAM Group is the default map name . The dialog also allows you to specify what portions of the patent documents in the group to use to build the map. Dialogs vary among third party tools.

Fourth progress is indicated in the ThemePublisher s Map Manager dialog. See . When it has built the map the status line will say Processing Complete or will indicate why the map could not be built.

Fifth the map is displayed. See . The user uses ThemePublisher s tools to select a portion of the map.

Sixth with a portion of the map selected the ThemePublisher Document Viewer appears. See . The user clicks the Export button to export the data objects corresponding to the selected map portion to IPAM.

Seventh an Export dialog is presented. See . In the example of the Aurigin IPAM Group option is selected and then the user clicks OK. In some embodiments Cartia ThemePublisher displays a dialog that asks What should the Aurigin IPAM group be named with a field for the user to enter a name. It will contain a default value such as the map name.

This example has been provided for purposes of illustration not limitation. The example is applicable to other third party tools. Accordingly given the herein teachings persons skilled in the relevant art s could integrate other third party tools with IPAM. The invention is directed to such other combinations.

The invention is operable with third party tools for identifying collections of data objects. Such data objects can be imported into IPAM for processing. For example one or more new groups may be formed from the imported data objects.

For example illustrates a chemical search engine . The chemical search engine is herein described for illustrative purposes only. The invention is not limited to this embodiment. The user defines a chemical structure in the chemical search engine . The chemical search engine then searches for chemicals that are related to the chemical structure . A variety of chemical search engines are publicly available and operable with the invention such as CAS SciFinder.

The results of the search are stored via a save dialog . In the example of the search results are saved in file test.csv. The search results comprise one or more chemicals that were found during the search. Generally each chemical represents a data object.

In IPAM the user imports the file test.csv as indicated by arrow . The contents of test.csv i.e. the chemicals located during the search are stored in a group .

A user working in IPAM is studying a group comprising a multitude of chemical compounds each compound may be represented by a corporate document for example . The user wishes to identify chemical compounds in this group that have a particular sub structure.

The user instructs IPAM to invoke the chemical search engine and export the group to the chemical search engine . Accordingly the plug in manager interacts with the plug in for the chemical search engine to 1 invoke the chemical search engine and 2 export the group to the chemical search engine . The plug in interacts with the chemical search engine using the API of the chemical search engine . The plug in performs any necessary data format translations to export the group to the chemical search engine .

The user interacts with the chemical search engine to conduct a search for compounds related to a particular structure as described above. This search is limited to the compounds in the group that was exported to the chemical search engine .

After completion of the search the plug in associated with the chemical search engine accesses the search results possibly from file test.csv and imports the search results to IPAM via the plug in manager. In doing so the plug in performs any needed data format translations consistent with the API of the plug in manager.

IPAM upon receiving the search results may create a new sub group of the original group and store the search results in the new sub group. Other processing by IPAM is possible as will be apparent to persons skilled in the relevant art s based on the teachings contained herein.

Additional third party components applicable for use with the enterprise server include but are not limited to CRYSTAL REPORTS from SEAGATE EXCEL from MICROSOFT TABLE LENS from INXIGHT and PERSPECTA from PERSPECTA INC.

The invention supports a variety of configurations of its components. Additionally the invention supports a variety of functional configurations and distributions.

For example illustrates a configuration where all primary components and functions are positioned at a single location .

As indicated by the example configurations illustrated in the present invention includes a variety of configurations and distributions of its components and functionality. The examples of are presented for purposes of example only and are not limiting. Other configurations of components and functionality will be apparent to persons skilled in the relevant arts based on the discussion contained herein.

For example a given component and or functionality can be distributed among multiple locations. This is illustrated in where the enterprise server is distributed among a first location and a second location . Additionally databases are distributed among location and . Also search engines and indexes are distributed among locations and . Third party components tools described above may also be local or distributed.

It is noted that the locations described in may be owned by and or under the control of a single corporate entity or owned and or under the control of multiple corporate entities. Also the locations depicted in may be local to one another or may be very remote from one another or may be combinations thereof

The invention supports a number of economic models for using the system. For example the system supports a pay for use service where usage of the system is metered and billed accordingly. The invention also includes other economic models such as but not limited to an unlimited service plan where for a given fee the user can download any number of documents and have unlimited use of the system and a hybrid plan where for a fee the user can download a given number of documents and use the system for a given amount of time or transactions or some other metric . Once these limits are exceeded the user pays on a per use rate.

The invention also supports a model whereby meta data version v can be distributed to the client at time t . Later an updated version of the meta data v can be distributed at time t . This is extremely valuable because certain aspects of the meta data associated with a patent are mutable e.g. assignee and U.S. classification . By providing these version numbers in the database the host system can automatically provide meta data updates to the remote system. Charges for these updates can be included within the user s existing economic model above or via a separate economic model.

The invention also supports electronic ordering of data objects such as patents and automatic downloading and installing of such data objects. In this embodiment a user can electronically place an order for data objects such as but not limited to via modem or over the Internet. An automated process takes the order performs any necessary financial accounting and billing retrieves the requested data items from a database and downloads the retrieved data items objects to the requestor via the Internet for example. At the user computer the received data objects are automatically decrypted if necessary unpacked if necessary unzipped if necessary installed in the proper directories noted in the computer registry and or other tasks to automatically install the received data objects for use at the user site.

The invention supports processing related to corporate entities. For example the invention includes functionality to identify and process patents assigned to a particular corporate entity.

To achieve effective corporate entity related processing it is important that references to a given corporate entity in a data set be consistent throughout the data set. For example if the user wishes to identify all patents assigned to Aurigin Inc. then it is important that all references to Aurigin in the database utilize the same name such as Aurigin Inc. . Processing conducted by the invention will not be as effective if different representations are used to represent a given corporate entity such as Origin and Aurigin Incorporated to represent Aurigin.

As noted above the invention preferably receives patent data herein called raw data from national patent offices. Such patent data often includes different representations of a given corporate entity. Accordingly corporate entity related processing over such data is not entirely effective.

The invention solves this problem by processing assignee data contained in patent raw data. Such processing called assignee name processing is depicted in a flowchart of .

In step a normalized assignee name is selected for an entity. For example the name Aurigin may be selected as a normalized assignee name for the corporate entity Aurigin Inc. .

In step the patent raw data is analyzed to identify all name representations for the corporate entity being considered. For example in reviewing the data set the following representations for Aurigin Inc. may be identified 

Step may be performed manually automatically or a combination thereof A variety of factors are considered to determine whether or not two representations refer to the same company or two independent and unrelated companies such as but not limited to company name company address etc.

In step the normalized assignee name selected in step is linked to the name representations identified in step .

Preferably step is performed by replacing instances of the name representations appearing in database tables with the normalized assignee name. Preferably the patent raw data is not modified.

The processing depicted in is not limited to assignee name processing but is instead applicable whenever there is a need that representations of a given object be consistent throughout a data set. For example with regard to patents for example the processing of can be applied to inventor names law firms patent examiners classes and subclasses that change over time any other bibliographic data etc.

The present invention enables the automatic or semi automatic input into the system of data objects of any format and or content. Such data objects are stored in databases of the system. The invention allows the display and annotation of the data objects. The data objects can also be searched. The invention supports other processing of the data objects as described herein and as also described in System Method and Computer Program Product for Managing and Analyzing Intellectual Property IP Related Transactions Ser. No. 09 138 368 filed Aug. 21 1998 Using Hyperbolic Trees to Visualize Data. Generated By Patent Centric and Group Oriented Data Processing Ser. No. 08 921 369 filed Aug. 29 1997 and System Method and Computer Program Product for Patent Centric and Group Oriented Data Processing Ser. No. 08 867 392 filed Jun. 2 1997 all of which are incorporated herein by reference in their entireties.

In embodiments of the invention information is extracted from the data objects. The extracted information is also stored. Preferably the extracted information is stored in relational databases data mining databases or other types of databases. This is similar to storing bibliographic and other information from patents in relational databases as described above and as further described in U.S. Patent Application System Method and Computer Program Product for Patent Centric and Group Oriented Data Processing Ser. No. 08 867 392 filed Jun. 2 1997 which is herein incorporated by reference in its entirety. The extracted data that is stored in the relational or other databases can be used for sophisticated data mining and other processing related to the underlining data objects as described herein.

Preferably the format of data objects that are input into the system is at least partially regular and consistent. By this it is meant that for a given data object type a given piece of information such as the document title is always located at substantially the same position in data objects of the data object type. The invention makes use of the regular and consistent arrangement of data in data objects to extract data from the data objects. The extracted data is stored in relational databases data mining databases or other types of databases.

This operation of the invention is represented by a flow chart in . It is noted that the steps of flowchart are performed for a particular data object type which shall herein be referred to as the current data object type for reference purposes.

In step the current data object type is analyzed to identify information of interest contained in data objects of the current data object type. The identified information of interest represents information that it is be extracted from data objects of the current data object. For example if the current data object type is U.S. patents then the information of interest identified in step may include the patent number the inventors the assignee the cited references the number of claims the number of figures etc.

The information of interest of the current data object type can be identified in step by a review of an example data object of the current data object type see . Alternatively the information of interest can be identified in step by other means. For example a data object standard that characterizes defines describes the current data object type and that specifies the data content and the locations of the data content in data objects of the current data object type can be reviewed to identify the information of interest in step .

In step the system identifies where the information of interest identified in step is located in data objects of the current data object type. Again step can be performed by a review of an example data object of the current data object or by review of a data object standard that characterizes the current data object type.

In step one or more new database tables are created if necessary to store the data that it to be extracted from data objects of the current data object type. It is noted that step is optional in that database tables for storing the extracted information may already exist.

In step one or more database tables one or more of which may have been created in are selected. The selected database tables will store the information extracted from data objects of the current data object type. The database tables selected in step are represented for example as relational database tables in .

In step the columns fields in the selected database tables where the information extracted from the data objects of the current data object type is to be stored are selected. This is represented in for example where it is specified that data in location A is stored in column of relational database . Similarly data in locations B C and D of the data objects of the current data object type are stored in columns and respectively of the relational database tables .

After completion of step the system is prepared to receive and extract data from data objects of the current data object type. Accordingly in step a data object of the current data object type is received.

In step the system determines the type of the received data object. In particular the system in step determines that the received data object is of the current data object type. The system can determine the type by reviewing information that accompanied the data object when it was received in step . In particular in step an indication of the type of the data object may also have been provided to the system. Alternatively the system can analyze the received data object to determine its type.

In step the system extracts information from the received data object in accordance with the data object s type. Preferably this extraction operation does not change or otherwise affect the received data object. The system knows where to extract information of interest by reference to the locations identified in step .

In step the system stores the extracted information in columns of the database tables associated with the current database type as determined in steps and .

A variety of widgets components of the invention are described herein. The invention is directed to tool box embodiments where any number of these widgets are packaged as separately accessible components that can be added to other applications or used to customize the system described herein. For example and without limitation an extension of the user interface includes the ability to mix and match specific widgets or components associated with the user interface. Consider and the kind pane . These could be packaged as separately accessible components of the API and made available as a toolkit . The same is true with all other components of the invention. Users could build their own user interface or other applications perhaps by embedding the context browser into other applications such as a spreadsheet in Microsoft Excel.

In an embodiment of the present invention the system and components of the present invention described herein are implemented using well known computers such as a computer shown in . The computer can be any commercially available and well known computer capable of performing the functions described herein such as computers available from International Business Machines Apple Silicon Graphics Inc. Sun HP Dell Compaq Digital Cray etc.

The computer includes one or more processors also called central processing units or CPUs such as a processor . The processor is connected to a communication bus . The computer also includes a main or primary memory preferably random access memory RAM . The primary memory has stored therein control logic computer software and data.

The computer also includes one or more secondary storage devices . The secondary storage devices include for example a hard disk drive and or a removable storage device or drive . The removable storage drive represents a floppy disk drive a magnetic tape drive a compact disk drive an optical storage device tape backup ZIP drive JAZZ drive etc.

The removable storage drive interacts with a removable storage unit . As will be appreciated the removable storage unit includes a computer usable or readable storage medium having stored therein computer software control logic and or data. The removable storage drive reads from and or writes to the removable storage unit in a well known manner.

Removable storage unit also called a program storage device or a computer program product represents a floppy disk magnetic tape compact disk optical storage disk ZIP disk JAZZ disk tape or any other computer data storage device. Program storage devices or computer program products also include any device in which computer programs can be stored such as hard drives ROM or memory cards etc.

In an embodiment the present invention is directed to computer program products or program storage devices having software that enables the computer to perform any combination of the functions described herein.

Computer programs also called computer control logic are stored in main memory and or the secondary storage devices . Such computer programs when executed enable the computer to perform the functions of the present invention as discussed herein. In particular the computer programs when executed enable the processor to perform the functions of the present invention. Accordingly such computer programs represent controllers of the computer .

The computer further includes a communication or network interface . The network interface enables the computer to communicate with remote devices. For example the network interface allows the computer to communicate over communication networks such as LANs WANs the Internet etc. The network interface may interface with remote sites or networks via wired or wireless connections. The computer receives data and or computer programs via the network interface . The electrical magnetic signals having contained therein data and or computer programs received or transmitted by the computer via interface also represent computer program product s .

The invention can work with software hardware and operating system implementations other than those described herein. Any software hardware and operating system implementations suitable for performing the functions described herein can be used.

While various embodiments of the present invention have been described above it should be understood that they have been presented by way of example only and not limitation. Thus the breadth and scope of the present invention should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

