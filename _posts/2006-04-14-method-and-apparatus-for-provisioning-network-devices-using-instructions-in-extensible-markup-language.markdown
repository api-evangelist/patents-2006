---

title: Method and apparatus for provisioning network devices using instructions in Extensible Markup Language
abstract: A system and an apparatus are disclosed for carrying out automatic network device provisioning and configuration. A configuration service receives a request from a network device to provide configuration information. The configuration service retrieves a template describing the device configuration, where the template associates one symbolic reference to one parameter that may receive values specific to particular devices. Based at least on the symbolic reference and the request, the configuration service retrieves a value of the parameter that is specific to the network device. A device-specific instance of the configuration information is created and stored based at least one the template and the value of the parameter. The configuration information is stored in XML format and conforms to an XML DTD.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07395322&OS=07395322&RS=07395322
owner: Cisco Technology, Inc.
number: 07395322
owner_city: San Jose
owner_country: US
publication_date: 20060414
---
This application claims domestic priority under 35 U.S.C. 120 as a Continuation of U.S. patent application Ser. No. 09 675 921 entitled METHOD AND APPARATUS FOR PROVISIONING NETWORK DEVICES USING INSTRUCTIONS IN EXTENSIBLE MARKUP LANGUAGE and filed by Andrew Harvey et al. on Sep. 29 2000 which issued as U.S. Pat. No. 7 054 924 on May 30 2006 the entire contents of which is hereby incorporated by reference as if fully set forth herein.

The present invention generally relates to configuration and management of computer network devices. The invention relates more specifically to a method and apparatus for provisioning network devices using instructions in Extensible Markup Language.

Internet Service Providers ISPs are in the business of selling connections to public data networks to individual and enterprise end users. In the ISP industry the complexity of the configuration of IP networks is steadily increasing due to the need to support a variety of applications each having its own specialized needs based on business policy and quality of service QoS considerations. The typical new network is less concerned with bandwidth and more concerned with QoS. If there is contention for resources the intelligent network will allocate resources based on the business policy of the enterprise.

In the course of working with a new customer an ISP may install and configure one or more network devices at the customer premises customer premises equipment or CPE for the purpose of linking the customer s internal networks with the ISP and from there to external public networks such as the Internet. Often the links between the CPE devices and the ISP use Internet Protocol IP for communications. The CPE devices require software configuration after installation in order to operate correctly.

Currently configuration procedures are mostly manual especially for multi site networks as opposed to single site configurations . Often standard procedures do not exist or are not followed to the letter. As volumes of smaller more standardized customer networks are fast increasing the demands on operational groups availability of skills and costs are becoming untenable. And the integration costs are also increasing. Hence there is a need to standardize the process as well as technology used for provisioning and integration in the ISP industry.

In a typical past approach the CPE devices are configured manually. As an example of manual configuration an ISP may send a CPE router to a customer site along with an experienced network technician who configures the box on site. In the case of an ISP that also provides cable line installation service the enterprise may send two different technicians to the customer site one to install the line and a second to install the CPE router. Alternatively the customer device is installed by a less skilled individual and configured by Telnet connection using one or more command line interface CLI commands.

Since sending a skilled technician to a customer site may cost several hundred dollars and since a skilled technician can only visit and work at a few customer sites per day there is a need for a way to increase the number of possible installs per day to eliminate a technician visit in the installation process or to reduce the required skill set and cost of the on site technician.

Still another problem of the current approach is that use of Telnet to send configuration commands introduces undesirable failure modes. For example if a Telnet connection is opened and a technician needs to send 15 CLI commands to the device but the connection drops unexpectedly after only 8 commands are sent the device may enter an undefined state exhibit errors receive inconsistent instructions or otherwise become unusable.

In another approach the COPS protocol under consideration by IETF RCP file transfer or other protocols may be used to configure certain features of a device. However the COPS protocol does not enable configuration of all features of a device that are available using the native command language of the device it focuses on quality of service QoS features. Similarly while SNMP may be used to configure selected device features and parameters it also cannot address all features that are available in the native command language. There is a need for a way to remotely provision a device with access to all available features of the device.

Moreover for certain businesses and institutions there is a need for a means to send a partial configuration to the network element to configure the network element for new services.

Based on the foregoing there is also a clear need for an improved method of delivering provisioning and configuration information to devices in the field.

There is also a need for a way to describe a network device configuration in a way that facilitates re use in connection with one or more network devices of the same type.

There is a further need for a way to provision a network device remotely and reliably without reliance on Telnet transmissions.

The foregoing needs and other needs and objects that will become apparent for the following description are achieved in the present invention which comprises in one aspect a method for carrying out network device provisioning and configuration and communication of other information to a network device automatically and in an assured manner.

In one aspect the invention provides a method of automatically configuring a network device. The method comprises the computer implemented steps including receiving a request from the network device to provide configuration information. A template describing a device configuration is retrieved and the template comprises zero or more parameters that may be resolved into values specific to a particular device. Zero or more values of parameters specific to the device are received. A device specific instance of the configuration information is created and stored based on the template and the values of parameters and conforming to an Extensible Markup Language Document Type Definition XML DTD comprising one or more XML tags that delimit the configuration information.

In one specific embodiment a configuration service receives a request from a network device to provide configuration information. The configuration service retrieves a template representing the configuration from a storage location e.g. a directory service. The configuration service also retrieves one or more parameter values specific to the device. Device specific values are instantiated for the generic parameters in the template based on the retrieved values. The resulting configuration is stored in XML format using XML tags to delimit configuration commands. A reliable transport carries the configuration information to the device. At the device a configuration agent syntax checks the embedded configuration information and then applies the configuration information to the device. As a result automatic network provisioning may be accomplished without requiring a skilled technician to visit customer premises to carry out configuration. The process may be integrated with an event service to enable multiple devices to concurrently receive re configuration without special synchronization logic.

In other aspects the invention encompasses a computer apparatus a computer readable medium and a carrier wave configured to carry out the foregoing steps. Other aspects and features will become apparent from the following description and the appended claims. Further alternative embodiments are applicable to automatic configuration of computer program applications rather than network devices.

A method and apparatus for provisioning network devices using instructions in Extensible Markup Language XML is described. In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

According to an embodiment XML based device provisioning enables a network engineer administrator planner or user to provision design a network system using configuration information that is formatted using XML and delivered to a device using Hypertext Transfer Protocol HTTP Active Server Pages ASPs or Java servlets and technologies based on open standards. The administrator planner creates one or more common configuration templates which can contain Universal Resource Locators URLs that identify the location of the device information which is stored in a repository. Using such templates an individual device configuration is dynamically built utilizing information located in the repository. The repository may be for example a directory or database. This enables templates to be used for multiple devices. Use of XML enables use of the configuration service and agent with any device that can accept and process character data. XML based provisioning places very few constraints on the target devices. The only requirement is that the platform can process 7 bit character data which virtually all computer devices can process. There is no dependency on esoteric network properties such as byte order etc.

In this configuration one or more network devices each execute or run a Configuration Agent that can parse XML data and convert the XML data into the native interface for the device. For example one or more Command Line Interface CLI commands are used to re configure the device. The network device may also execute an Event Agent that the configuration agent can utilize for sending events containing messages or data in XML format. The Event Agent and Configuration Agent utilize the services of other infrastructure components e.g. a directory and an event services manager. This arrangement enables setting up a plug and play network that is designed for savings in installation and configuration and for reducing the time to commission networks.

Within ISP an order entry system is coupled to network . The order entry system receives one or more orders and can communicate over an event service with a workflow manager . A network engineer or a network administrator or planner is responsible for configuring the device and can store all necessary information about the device in a Directory . Alternatively order entry system may be independent of network and data collected by the order entry system may be periodically delivered to event service or workflow manager as by batch processing EDI etc.

The network device is installed at the customer premises . The device may connect directly or indirectly through one or more networks to a Configuration Server . The device can obtain configuration information from the Configuration Server that utilizes the directory to retrieve the device specific information. When configuration is completed the device can generate a status event to the event service through Event Gateway . Preferably the link between Event Gateway and device uses TCP or another reliable transport however non reliable transports may be used for all other links shown in . In addition the system may generate other events upon successful configuration such as events relating to billing order acknowledgment etc.

Notifications and other messages communicated among the order entry system workflow manager network management station and Event Gateway pass through Event Service . In one specific embodiment Event Service is implemented in the form of The Information Bus software which is commercially available from TIBCO Software Inc. Event Gateway provides as an interface that permits network devices to communicate with Event Service .

In for purposes of illustrating a simple example only one customer customer premises and network device are shown. However in a practical system there may be any number of such elements. Also there may be multiple replicated instances of Configuration Server Event Gateway etc.

Network device operates under control of an operating system . In one specific embodiment operating system is the Internetwork Operating System IOS of Cisco Systems Inc. Network device also executes a Configuration Agent which is supervised by operating system and which has functions and structures that are described further herein. Network device may also execute one or more other agents application programs etc. such as an SNMP agent TCP IP agent etc. In one specific embodiment network device is a router device of the type available from Cisco Systems Inc.

Network device is communicatively coupled to network . Configuration Server and Directory are logically separate from network device and also are communicatively coupled to network .

Configuration Server comprises one or more software elements that cooperate to carry out the functions described further herein and that have the structures that are described further herein. In one embodiment Configuration Server comprises a Web server and one or more ASPs Java servlets etc. represented by block that cooperate with the Web server. The specific implementation structures that are used for block are not critical provided they carry out the functions described herein in the manner as described or in a functionally equivalent manner. In one specific embodiment one or more ASP pages or Java servlets for handling configuration requests and monitoring are installed in appropriate places in the document directory of Web server .

Configuration Server is communicatively coupled to one or more configuration templates the functions of which are described further herein. Configuration templates each comprise a set of stored data that defines a configuration of a network device in terms of one or more CLI commands and zero or more modifiable parameters. The templates may be stored in the form of one or more text files database records directory entries etc. In one specific embodiment all the configuration template files are stored on Web server and are placed relative to the document root of such server.

Directory is communicatively coupled to network and is thereby accessible by Configuration Server . In one embodiment Directory is a directory service that is compatible with Lightweight Directory Access Protocol LDAP JNDI or an equivalent directory access protocol e.g. Microsoft Active Directory.

In one specific embodiment operating system is IOS Version 12.1.5T of Cisco Systems Inc. Configuration Server operates under control of an operating system such as Windows 2000 or Unix e.g. Sun Microsystems Solaris operating system version 2.6. Examples of Web server are Microsoft Internet Information Server on Windows 2000 or the Apache Web server on Unix. A Java Servlet Engine such as JRun may control operation of servlets of Configuration Server .

In this configuration configuration information in Directory may be used by other applications that are not directly related to device provisioning e.g. workflow management and others. Further Telnet is not required instead HTTP serves as the transport mechanism. A payload of configuration information is separated from the transport mechanism and presented in a plain character text format that is independent of the transport mechanism enhancing scalability and adaptability to devices that function with standard protocols.

Configuration Agent may be used for initial or complete configuration of a network device and for partial configuration of the device.

Referring again to for the purposes of illustrating an example of use of an embodiment for initial configuration assume that customer places an order for network service with ISP by using a client computer that connects over network to order entry system . In an embodiment the client computer uses an HTML browser program to connect to the order entry system which hosts a Web server. Customer signs up for a service that involves ordering a network device such as a router and installation of a particular kind of network cabling or wiring e.g. ISDN Frame Relay etc. . The order entry system accepts the order and notifies a workflow manager of the order. The workflow manager initiates one or more orders to prepare the physical equipment based on one or more business rules. As a result an order for shipment of a network device is generated and a physical line is ordered.

Meanwhile the workflow manager generates a request to a network engineering department to have the network device configured. A network engineer who is responsible for configuring the device creates and stores any additional information relevant to the device in Directory .

The network device arrives at the customer premises . A cable installer visits the customer premises installs cable and plugs in the network device . The cable installer does not have any expert knowledge of the network device . The device is preprogrammed with or discovers a token that uniquely identifies itself e.g. a router hostname or MAC address. Upon power up the device establishes a connection to Configuration Server . The device identifies itself using the token to the server and requests the configuration information that is held in Directory for the device.

In response the Directory provides a reference to configuration information specific to the device . For example in one embodiment Directory provides a pathname of a device specific configuration file that is stored in the file system of Configuration Server . Configuration Server then provides the configuration file to the device .

Upon receipt of a configuration file for the device from the Configuration Server the device validates the configuration file by doing a syntax check. In this context a syntax check may involve one or more separate checks including a check of whether the template is well formed validation of the configuration file and a syntax check of one or more native commands that are contained in the configuration file. If the syntax check is successful then the device applies the configuration information and writes it to persistent storage within the device.

Once configuration has completed successfully the device generates and sends a success event to event service through Event Gateway . This event may be monitored by a network management workstation and workflow manager . When the network management workstation receives the successful event it automatically starts monitoring the device . Similarly the workflow manager takes appropriate actions as a result of the successful event. If a failure occurred an event is also generated containing the relevant information to assist in resolution of the problem either manually or programmatically. Applications and or users register their interest in these events and take the appropriate actions when they occur.

In complete configuration each device is assumed to have a pre loaded minimal configuration that is sufficient to enable the device to establish TCP IP connectivity so that the Configuration Agent can communicate over network with Configuration Server using TCP IP. For example it is assumed that the minimal configuration of the device causes the device to look for its initial configuration from a Web server using a CLI command of the type described further herein. TCP IP connection may be accomplished using an IOS agent. The manner in which this configuration is actually loaded is domain specific. This could involve mechanisms that are static e.g. Config Express or dynamic in nature using media specific information e.g. the wire pair in DSL or the frequency in a cable network.

When the device is powered up at customer premises the device connects to Configuration Server by establishing a TCP IP connection. The device issues an HTTP get request to Web server of Configuration Server . To uniquely identify itself to the Configuration Server and to the Web server the device provides its token as a unique identifier.

In response based on the device s unique identifier Configuration Server retrieves one of the configuration templates that is associated with the device . The retrieved template is parameterized. Parameter values are resolved by retrieving specific values from Directory or another repository that correspond to the parameters. As a result a stream or file of XML format configuration information is created and potentially stored. The XML information comprises one or more XML tags and attributes that contain one or more CLI commands that represent a new device configuration. Each element of general device configuration information is embedded in a XML tag and each device CLI command is embedded in a XML tag. The specific tags set forth herein are not required functionally equivalent tags having different names may be used.

Configuration Server then checks whether the XML configuration information is valid in comparison to a specified Document Type Definition DTD that defines a grammar with which the XML configuration information must conform. This task may be carried out using a conventional XML parser or an XML validation parser of which several are commercially available. Such checking may also involve testing whether the XML configuration information constitutes well formed XML text and syntactically correct XML text. Determination of whether the XML information is well formed may involve comparing the configuration information to the DTD determining whether all opening tags have corresponding closing tags such that there is no nesting etc. If the XML is not well formed an error is generated. Syntax checking at this stage involves checking the syntax of the XML text without determining whether CLI strings contained within XML tags of the XML text constitute syntactically correct CLI commands.

In this configuration carrying out the checks of well formed ness and syntactic correctness before deployment of the configuration information is useful in placing the burden of a potentially intensive computation load on the Configuration Server rather than the device . Further the DTD of the XML information may be stored at Configuration Server rather than on device which may have limited memory.

Web server delivers XML encoded configuration information from the server to the Configuration Agent of the device in an HTTP response.

In response Configuration Agent carries out a parsing and checking process on the received XML configuration information. The Configuration Agent parses the XML configuration information and determines whether the XML information is well formed. With HTTP carried over TCP message streams are reliable but there are no message boundaries. However the XML configuration information may include beginning and ending tags that delimit the configuration information. By checking for the presence of the beginning and ending tags Configuration Agent can verify that it has received all the XML configuration information. In one embodiment if an incomplete stream is received a parser element of Configuration Agent determines that the XML configuration information is not well formed and throws an error.

Configuration Agent then carries out a CLI syntax check on the configuration information to determine whether the CLI strings embedded in the XML text represent syntactically proper CLI commands. In one embodiment XML tags identifying CLI strings are removed from the XML configuration information and the remaining information each line of which constitutes a CLI command string is applied to a CLI parser function within operating system . Such syntax checking may involve reporting any CLI syntax errors that are found. If the device is configured for events using event service then Configuration Agent reports the errors as events to Event Service otherwise it generates a message to the system log of the device.

In prior network devices that have the IOS operating system operating system parses and carries out a syntax check of each CLI command that it receives and then immediately executes each parsed command if no syntax error is found. Separating the parsing function from the execution function of such an operating system is one way to implement the CLI parser function that is described above.

If there are no syntactic errors then Configuration Agent applies the configuration information by calling one or more action routines of operating system to carry out each command that is included in the configuration information. Action routines may be specified in the XML configuration information using opening and closing tags that identify an action routine that is delimited by the tags. Alternatively action routines may be implied based on the name of a particular CLI command. If application of the configuration information is successful Configuration Agent removes the CLI command that signifies that the information is for an initial configuration and writes the remainder of the configuration information to NVRAM of the device. On successful completion of the configuration Configuration Agent sends out a completion event if it is configured to use events or writes a completion message to the system log.

If the syntax check succeeds but a semantic error is detected Configuration Agent may capture the output of operating system that reports the error and generate a configuration error event to event service . An example of a semantic error is a duplicate IP address in an entry of Directory . One or more applications that monitor devices can subscribe to such error events and take appropriate actions in response. For example workflow manager may subscribe to any error events that are generated. It can then notify the appropriate entities that manual intervention is required to resolve configuration problems.

Referring again to as an example once a device is operational incremental configuration information can be sent to the device. In one embodiment Configuration Agent can carry out partial configuration or incremental configuration updates. In the case of partial configuration Configuration Agent can operate in either a push mode or a pull mode.

In push mode configuration data can be pushed to the device in the form of an event. For example device subscribes to a configuration announcement event that is managed by event service . In this arrangement XML format configuration information is sent as a payload of an event using the Event Gateway . Push mode may be used to send identical configuration information to multiple devices akin to a broadcast.

In pull mode Configuration Agent pulls event information from a Web server using an HTTP GET request on receipt of the event. For example a signal event is sent to trigger the device to obtain an incremental configuration from Configuration Server . This may be used when in response to a particular event it is desirable to cause the device to load a new or updated configuration or when identical information cannot be sent to multiple devices e.g. due to differences in the content of the information.

As in the case of an initial configuration the device can optionally check the syntax of the configuration before applying it. If successful the device applies the incremental configuration and optionally writes it to NVRAM. Once the incremental configuration is applied Configuration Agent generates an event on success or failure of the configuration and sends the event through Event Gateway to event service .

Separation of syntax checking from application of a configuration and use of event services in the disclosed embodiments overcomes problems of prior approaches relating to coordination of configuration of multiple network devices. For example in one prior approach setting up a virtual private network VPN using IP security IPSec protocols is difficult because of the need to coordinate re configuration of multiple network devices that form the VPN. Where IPSec tunneling is used to create a VPN tunnel endpoints must be set up at the same instant or packets across the VPN may be lost. Accordingly in the prior approaches a configuration is established offline and the configuration information is sent to all network devices involved in the VPN at precisely the same pre determined time. However this approach requires synchronization of the clocks of all involved devices and minimization of propagation delays. If one or more devices are unavailable at the appointed time or receive the configuration out of synchronization there may be instants when the VPN is in an anomalous state because devices in the VPN path are not properly configured resulting in errors or dropped packets.

In contrast with the event approach disclosed herein each device may subscribe to a configuration event that signals a successful syntax check. The configuration information may be delivered to multiple devices without synchronization e.g. as a payload of a configuration event that travels using Event Services . When the syntax check is successful the event signaling such success is sent. In response each subscribing device automatically applies the new configuration at the same time without the need for clock synchronization. As a result this approach enables setting up VPNs for example without the problems of the prior approaches.

In one embodiment when device receives the configuration it may choose to defer the application of the configuration upon receipt of a write signal event. For example a change in an Internet Protocol Security IPSec policy may be required to take effect on all tunnel endpoints at approximately the same time. The write signal event may be used to trigger the application of such a change.

In another embodiment when doing partial configuration the Configuration Agent synchronizes the loading of the configuration on a group of devices in one of two ways. In one approach partial configuration is initiated upon receipt of a load event. In another approach an executive exec command line command is manually issued to cause a partial configuration to load.

In the first approach synchronization is done using Event Service and occurs only when initiated by the receipt of a load event. When the Configuration Agent receives the load event it determines whether it should only read in the data or also run a syntax check. Configuration Agent also determines whether it should apply the configuration by reading attributes in the XML data. If a read only attribute is TRUE then it will read in the configuration information carry out syntax checking and send a success or failure event to Event Service . As described further herein with respect to applicable XML DTDs Configuration Agent then waits for another load event with the action attribute of the config write element set to write and then applies the configuration and send a success or failure event to Event Service using the subject sync status. If Configuration Agent receives a load event with the action attribute of the config write element set to cancel it will remove the configuration from its buffer.

Configuration Agent uses the identifier field in the XML data to correlate the write or cancel action with the appropriate configuration in its buffer. If Configuration Agent receives a write or cancel action with an identifier that it cannot correlate then Configuration Agent will generate a failure event.

In one embodiment the configuration agent carries out synchronization for multiple partial configurations. Specifically the configuration agent keeps multiple partial configurations in its buffers and upon receiving a load event with a config write element the configuration agent can write or cancel the appropriate configuration based on the identifier.

In one embodiment the configuration agent is as secure as the Telnet method of configuration that it replaces since the server that it receives the configuration data from is configured on the device and hence should be a trusted server. In an alternate embodiment a separate security protocol may be negotiated as part of the process of connecting a device to a configuration server.

In another embodiment the configuration agent has an application programming interface for partial configuration. Using the API an IOS application can retrieve the configuration data by means other than an event or HTTP and use the configuration agent to syntax check and apply the configuration. As a result approaches disclosed herein are usable in heterogeneous domains that use different mechanisms to transport the XML configuration information.

In another embodiment a location service is provided whereby a device can automatically find the configuration server so that there will be minimal configuration needed.

In one embodiment Configuration Agent may be managed using the command line interface of the managed device. Specifically in one embodiment the configuration agent can respond to a CLI configuration command for receiving initial configuration information for the managed device. In one example embodiment the configuration command is 

where ipaddress represents the IP address of the web server event indicates that the system shall send an event on completion or failure of the configuration no syntaxcheck means to turn off syntax checking and page means that a Web page e.g. an active server page shall be used to obtain the configuration.

In one specific embodiment a CLI command of the following form may be used to turn on partial configuration in the IOS device 

where ipaddress is the IP address of a server that implements Configuration Server . In one embodiment the default IP address value is 0.0.0.0. which means the user must enter a value. In another embodiment Configuration Agent uses the location service to find the server if no address is specified. For security reasons this is the only server to which Configuration Agent will connect to get configuration information.

In another specific embodiment operation of Configuration Agent may be monitored and debugged by a CLI command of the form debug cns config .

In yet another specific embodiment an executive command of the following form may be used to receive the configuration information only if partial configuration is configured in the managed device 

where is a Web page to use to retrieve the configuration event means to send an event on completion or failure of the configuration and no syntaxcheck means to turn off syntax checking.

Event services such as The Information Bus of TIBCO Software Inc. characterize events in terms of event subjects. An event consumer such as workflow manager may subscribe to all events of a particular subject. Thus hierarchies of events and subscriptions may be established. In one embodiment Configuration Agent uses the prefix cisco.cns.config for all the subjects that it subscribes for or posts to. Of course any other prefix may be used that uniquely identifies events associated with Configuration Agent . In one specific embodiment Configuration Agent uses the following events 

 sync status If an application is using synchronized partial configuration then the agent posts success or failure of the read and syntax check operation on this subject so that the application can then complete the configuration load.

Embodiments may carry out functions other than device provisioning or configuration. For example the processes and structures disclosed herein may be used to deliver a security certificate or other information to a network device. In such an embodiment the security certificate may be stored in XML text delimited by appropriate tags that identify the certificate and sent to the device as an event payload or by other means. Within the device Configuration Agent or an equivalent process would check well formed ness of the XML text create and store one or more programmatic objects for use in implementing the security certificate construct an object model and call an action routine to apply the security certificate to the device. The action routine may be a part of Operating System or may be separately provided e.g. within the XML text delimited by appropriate tags. The action routine is responsible for carrying out any needed syntax check on the certificate information action routine information or other payloads carried within the XML text.

Thus embodiments provide a generic transport infrastructure and a provisioning infrastructure that is specific to CLI commands.

As described in detail above with respect to operation of Configuration Agent in one method of configuration a Device makes an HTTP request for device configuration information by issuing an HTTP GET request and provides a unique identifier that is used to locate a configuration template associated with that device.

In an embodiment the format of the request is GET DeviceID where web page identifies the Web page that the configuration agent uses to retrieve the device configuration. An identifier that uniquely identifies the device to be configured e.g. a router hostname is provided as the field value. Any unique label may be provided and it is used in effect as a key into Directory to find a matching configuration template. For example a request may be 

In one specific embodiment active server pages are used and each ASP is identified in the request. Such HTTP requests have the form

where DeviceID specifies a unique identifier which will be used to identify the device configuration template in the directory. Optionally a User value and a Password value are provided to access Directory .

where srv ip address is the IP address of a server such as Web server that has one or more ASP pages or servlets are installed. For example a request may be 

Each such HTTP request is received at Web server of Configuration Server . In response Web server invokes an ASP page or Java servlet that is identified in the request and executes the code embedded in the ASP page or servlet. During execution of such code Web server may access Directory and retrieve a configuration template substitute all the parameter values specified in the template and prepare an instantiated configuration file. Web server then sends the configuration file to the device in XML format.

The functions of Configuration Server may be understood more fully with reference to which is a use case diagram that illustrates an example of messages that may be communicated among elements of the system of to carry out loading a device configuration in one embodiment.

To initiate configuration loading device carries out a Get Config operation in which the device requests Web server to provide configuration information. In response Web server carries out a Read Config Ref operation in which the Web server attempts to read configuration parameter information that is associated with device from Directory . Further Web server carries out a Read Template File operation in which the Web Server obtains configuration template information from a file system of Configuration Server .

Upon obtaining parameterization information and a template for the device Web server carries out a Do Param Subst operation in which one or more software elements associated with Web server substitute appropriate parameter values into the template and create and store an XML configuration file. Web server then carries out a Device Config operation in which the Web server sends the configuration file to the device .

In response device carries out a Load Config operation in which the device loads the configuration for example in the manner described above. Optionally upon completion of configuration loading device executes a Load Config Status operation in which the result of the loading operation is reported to Event Gateway in the form of an event.

In block a configuration request that uniquely identifies a device is received. In one embodiment block involves receiving an HTTP request that includes a device name that uniquely identifies a device for configuration.

In block a configuration template is retrieved. The configuration template generally describes a configuration that may be applied to one or more devices. In an embodiment the configuration template includes zero or more parameters that may be resolved into specific values applicable to a particular device to result in creating a complete set of configuration information. The configuration template may be retrieved for example from a directory database etc. In block the parameter values are retrieved or determined. The parameter values may be received from objects in the directory database etc. Alternatively the parameter values may be computed. In block the parameter values are substituted into the template resulting in creating a complete set of fully instantiated configuration information. In block XML format configuration data is created and delivered based on the instantiated configuration information.

In block the process determines whether the XML configuration information is well formed. In one embodiment this determination is carried out by a configuration service before the XML configuration information is provided to the network device. Similarly in block the XML configuration information is checked for syntactic correctness of the XML text. If errors result control is transferred to block in which errors are reported or otherwise processed. Error reporting may include generating error events with an event service.

In block the XML configuration information is retrieved at the network device. In block the XML configuration information is checked for syntactic correctness of embedded commands. In one specific embodiment block involves checking syntactic correctness of CLI commands that are carried in the XML configuration information delimited by or embedded within XML tags. If errors occur error processing may be carried out at block . If the checks succeed then the embedded commands are applied to the device in block resulting in re configuring the device e.g. as set forth in the CLI commands. In a preferred embodiment block and block are carried out by a configuration agent at the device.

Any of the foregoing blocks may also involve generating one or more events to an event service for consumption by subscribing processes applications or devices. For example a successful configuration or a failed configuration may result in publication of an event. Semantic errors encountered in applying the configuration information in block may cause events. Receipt of a template or successful parameterization may also result in events.

In one specific embodiment Configuration Server provides configuration information to Configuration Agent of device in a configuration file that is formatted according to a grammar document type definition or DTD conforming to Extensible Markup Language XML . Table 1 sets forth an example DTD for the configuration information that may be used in one specific embodiment.

In the foregoing DTD the element config data contains the element config id which is used as the context for failure or completion events. The element error info is optional and is returned by Web server of Configuration Server only if there are errors in creating or building the configuration file . In that case the optional element line number in the error info is not used. If the element error info is present then there are no CLI elements and therefore so the element cli can be included zero or more times.

In one specific embodiment a separate XML DTD is used for data for failures that is sent out as part of failure or sync status events. Table 3 sets forth an example XML DTD that may be used for this purpose.

In this DTD the element config failure contains an element identifier that is used to distinguish a partial configuration that was in error. If the error occurred in an initial configuration then the element identifier will have the value INIT CONFIG . The DTD also contains the element config id which is used to identify which configuration data was in error. The element error info contains the element line number which is the line number of the cli command in the configuration data. The element error message in error info will contain a text string describing the problem with the configuration command.

In one specific embodiment the Configuration Server sends configuration success event data in XML format according to an XML DTD. Table 5 sets forth for one embodiment the XML DTD for the data for successful completion that will be sent to Event Service in the form of a complete or sync status event.

In this DTD the element config success contains the element identifier which is used to distinguish the partial configuration that was completed. If an initial configuration was completed then the element identifier will have the value INIT CONFIG . The element config success also contains the element config id which identifies which configuration was successfully completed.

In one specific embodiment a separate XML DTD defines the format of configuration event data when the configuration data is obtained from a Web server using the HTTP GET request. Table 7 sets forth an embodiment of an XML DTD that may be used.

In the foregoing DTD the element config server contains the element identifier which is used as an id when doing synchronized partial configuration. The element server info contains the element ip address which is the ip address of the Web server e.g. Web Server and the element web page identifies a Web page to which the device should go to get the configuration data.

The element config server also has attributes config action and no syntax check. If config action is set to read then Configuration Agent does not apply the configuration until it is explicitly told to do so by another event that contains the config write element described later . If config action is set to write then the configuration will be read in. Further the syntax of the configuration information is checked if no syntax check attribute is FALSE . After the syntax check the configuration information is applied to the device.

If the attribute config action is set to persist then the configuration is written to NVRAM of the device after it is applied.

Table 8 sets forth an example of XML data for partial configuration from a Web server that conforms to the foregoing DTD.

In one specific embodiment an XML DTD is provided for configuration events that include configuration data. Table 9 presents an example of XML for the configuration event data when the configuration data is present in the event data.

In the foregoing DTD the element config event contains the element identifier which is used as an id when doing synchronized partial configuration. The element config data is the same as described with respect to Table 1 except that the optional element error info is not included. The element config event also has attributes config action and no syntax check which are described in the previous section on config server.

Table 10 sets forth an example of XML data for partial configuration from data contained in the event that conforms to the foregoing DTD.

In another specific embodiment a separate XML DTD defines how a configuration event applies a previously sent configuration. In one example embodiment the XML configuration event data for the event that is sent to the IOS device to apply a previously sent configuration conforms to the DTD set forth in Table 11.

The element config write contains the element identifier which is the id used to identify the configuration data that is to be applied or canceled. This is the identifier that was passed in the config server or config event. The element config write also has an attribute write action which if set to write means that the Configuration Agent applies the configuration. If the write action attribute is set to cancel then Configuration Agent deletes the configuration from the buffer. If the write action attribute is set to persist then the configuration is applied and then written to NVRAM.

Table 12 sets forth an example of XML data for applying a partial configuration that conforms to the foregoing DTD.

As described above each HTTP GET request includes a device identifier. In an embodiment the device identifier is used by Web server in cooperation with Directory to identify a unique Device object that has been previously stored in Directory . Within each Device object in Directory a Template Configuration attribute LGConfigTemplate value specifies an associated configuration template to use for the configuration of the device. Each configuration template may be implemented as a container object in Directory . The value of the attribute may be a name of the template file. An example of values of such objects can be 

Each template contains a configuration template comprising one or more CLI strings each having zero or more parameters that may be specified for a particular device instantiated . In a template a parameter is specified using a complete directory distinguished name DN of an object and an attribute name. To instantiate the template for a particular device one or more ASP pages or servlets finds each named object and its associated attribute value in the directory substitutes the value into the CLI strings that are set forth in the template and creates and stores an XML file containing the instantiated configuration information. If the XML specification is well formed then the XML specification of the instantiated configuration describes each CLI command in an XML tag.

In a configuration template that has zero parameters the configuration template may be used directly as a configuration file.

As a specific example of information that may be provided using the foregoing processes and mechanisms Table 13 presents an example of an IOS network device configuration template and Table 14 presents an example of the resulting XML format configuration information including substitution of parameters.

In the above template each of the parameter URLs identifies an LDAP directory server at IP address 10.10.1.1 and the attributes in the object identified by the deviceID are IOSipaddress IOSsubnetmask IOSipAccess and IOSipxAccess.

In one embodiment two schemas are defined for Directory namely a Device schema and a Template Attribute schema. In one specific embodiment of such schemas the name of the container Class is IOSConfigClass which is derived from the class top and contains the following example attributes IOSconfigTemplate IOSipaddress IOShostname IOSpassword IOSnetwork IOSport IOSprotocol. Instantiated Router objects are created in the container called IOSConfigs.

Table 15 sets forth an example LDAP directory schema definition LDIF file for IOSConfigClass and Table 16 specifies the attribute IOSipaddress.

In the foregoing specific example the Device Schema is assumed to be available in the Directory. Also it is assumed that Devices will be populated in the Directory Services database and configuration template references will be set on Device objects in the Directory. During installation an administrative user is prompted to enter the location in the Directory where Devices are located. Such a base location is saved e.g. in the Windows 2000 registry or in a properties file for use by the ASP pages or Servlets.

In one embodiment when Configuration Server operates it presents a login screen display that prompts a user to enter a user name and password or other authentication information and then authenticates the information entered by the user.

Assume now that a user selects the router named DemoRouter from the sub tree of Routers . In response as shown in the Welcome tab is removed and Configuration Server displays in its place a Current Config tab Edit Parameters tab Edit Template tab Running Config tab and Tools tab . In the example of the user has selected the Current Config tab causing the system to display text comprising the current configuration file of the device. The user may use scroll bar to advance the display to any part of the configuration file.

Parameterized text of the current template file is displayed in a text pane . Scroll bars permit displaying portions of parameterized text that overflow the text pane . Within the text an attribute name and a text box are displayed at each location that accepts entry of a parameter value. For example the attribute hostname accepts entry of a parameter value in a first text box . Similarly the attribute enable password accepts entry of a parameter in a second text box . An administrative user may create a template having specific parameter values by entering appropriate values in the text boxes.

Computer system includes a bus or other communication mechanism for communicating information and a processor coupled with bus for processing information. Computer system also includes a main memory such as a random access memory RAM flash memory or other dynamic storage device coupled to bus for storing information and instructions to be executed by processor . Main memory also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Computer system further includes a read only memory ROM or other static storage device coupled to bus for storing static information and instructions for processor . A storage device such as a magnetic disk flash memory or optical disk is provided and coupled to bus for storing information and instructions.

An communication interface may be coupled to bus for communicating information and command selections to processor . Interface is a conventional serial interface such as an RS 232 or RS 422 interface. An external terminal or other computer system connects to the computer system and provides commands to it using the interface . Firmware or software running in the computer system provides a terminal interface or character based command interface so that external commands can be given to the computer system.

A switching system is coupled to bus and has an input interface and an output interface to one or more external network elements. The external network elements may include a local network coupled to one or more hosts or a global network such as Internet having one or more servers . The switching system switches information traffic arriving on input interface to output interface according to pre determined protocols and conventions that are well known. For example switching system in cooperation with processor can determine a destination of a packet of data arriving on input interface and send it to the correct destination using output interface . The destinations may include host server other end stations or other routing and switching devices in local network or Internet .

The invention is related to the use of computer system for the techniques and functions described herein in a network system. According to one embodiment of the invention such techniques and functions are provided by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another computer readable medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. One or more processors in a multi processing arrangement may also be employed to execute the sequences of instructions contained in main memory . In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus embodiments of the invention are not limited to any specific combination of hardware circuitry and software.

The term computer readable medium as used herein refers to any medium that participates in providing instructions to processor for execution. Such a medium may take many forms including but not limited to non volatile media volatile media and transmission media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infrared data communications.

Common forms of computer readable media include for example a floppy disk a flexible disk hard disk magnetic tape or any other magnetic medium a CD ROM any other optical medium punch cards paper tape any other physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM any other memory chip or cartridge a carrier wave as described hereinafter or any other medium from which a computer can read.

Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infrared transmitter to convert the data to an infrared signal. An infrared detector coupled to bus can receive the data carried in the infrared signal and place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Communication interface also provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are exemplary forms of carrier waves transporting the information.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface . In accordance with the invention one such downloaded application provides for the techniques and functions that are described herein.

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution. In this manner computer system may obtain application code in the form of a carrier wave.

A method and apparatus for provisioning network devices using Extensible Markup Language have been disclosed. In the foregoing specification the invention has been described with reference to specific embodiments thereof. It will however be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

In the disclosed embodiments a template driven configuration feature provides a powerful way to integrate network devices and applications to deliver network services with ease and efficiency. The disclosed mechanism can be used by various provisioning services as a method of transport. Embodiments enable standardized communication with XML data. As a result device provisioning may be integrated into any system that understands XML. Thus provisioning may be accomplished in a network that contains heterogeneous devices if the devices can understand XML data.

Embodiments may also achieve reduced cost of service activation. For example a network device may be installed at customer premises by a relatively less skilled technician and then configured remotely in the manner described above. Thus there is no need for a visit to the customer premises by a skilled technician to carry out configuration. The resulting cost savings are estimated at hundreds of dollars per technician visit. Since establishing a device configuration is made easy using standard templates and centralized device information embodiments provide powerful configuration features for high volume more standardized IP service e.g. multi site networks home networks ADSL Cable modems and access services.

Further a reliable transport mechanism is provided using HTTP TCP and a separate payload that contains delimiter tags that may be used to verify that complete configuration has been received.

Embodiments described herein also facilitate improved service. Removal of manual configuration tasks and processes may result in faster service activation. Maintainability of the set of services on a per customer basis can be improved because staff systems and network devices will all derive their operational information from the same repository. Therefore fewer inconsistencies conflicting network configurations or other unexpected network behavior will occur.

Alternative embodiments are applicable to automatic configuration of computer program applications rather than network devices. Such embodiments are contemplated for use with application programs that need current information about network devices or topology in order to operate properly in a network environment. In such an embodiment an application program requests network topology information. A configuration server retrieves a template of network topology information from a repository such as a directory service and resolves elements of the topology into application specific values resulting in creating and storing resolved topology information. The configuration server then provides the resolved configuration information to a configuration agent within the application program. In response to receiving the resolved topology information the application program self configures itself to operate with the then current network configuration. Resolution of template values also may involve carrying out application specific syntax checking.

