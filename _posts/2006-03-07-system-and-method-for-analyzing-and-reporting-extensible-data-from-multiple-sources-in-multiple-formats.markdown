---

title: System and method for analyzing and reporting extensible data from multiple sources in multiple formats
abstract: A system and method for analyzing and reporting data from multiple sources is provided. The system is a foundation for an analytical platform that covers not only traditional relational data, but also a new generation of extensible data formats designed for the web, such as those based on XML (FIXML, FpML, ebXML, XBRL, ACORD, etc.), as well as HTML, E-mail, Excel, PDF, and others. In a preferred embodiment, the eXtensible on-line analytical processing (XOLAP), is a scalable client/server platform that allows the multi-dimensional analysis of modern data types, as well as traditional relational data, by bringing them all into an internal common XML-based model, without the time and expense of creating a data warehouse.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07630956&OS=07630956&RS=07630956
owner: Skytide, Inc.
number: 07630956
owner_city: San Mateo
owner_country: US
publication_date: 20060307
---
This application claims priority under 35 U.S.C. 119 e and 120 to U.S. Provisional Patent Application Ser. No. 60 659 543 filed on Mar. 7 2005 and entitled Analyzing and Reporting Data for Multiple Sources which is incorporated herein by reference.

The invention relates generally to a system and method for analyzing and reporting extensible data from multiple sources in multiple formats.

The analysis of structured relational data is well addressed with a variety of vendors offering an assortment of online analytical processing OLAP products. However the new generation of data formats has significant differences from relational data making the traditional OLAP solutions ill suited to analyze them. illustrates the differences between relational data and extensible data. Typically these new extensible data types support the interchange of information both inside and outside of a corporation. As such they are complex dynamic subject to change and highly heterogeneous. By contrast relational data is designed to be used in a transactional environment and so are typically stable schema driven unlikely to change and highly homogeneous.

Business data volume growth exceeds our capabilities to analyze this data. An explosion in data types and data formats like HTML XML and others made the situation even worse by effectively preventing the traditional business intelligence application stack to operate on these new types of data in new formats. While traditional relational storage represents less than 20 of corporate data the remaining 80 is getting increasingly more important and businesses are trying to find ways to expand data analysis beyond relational data. There is a need to have a new generation analytical platform that can facilitate analysis of new data types and formats in an easy to use product featuring better and faster analysis higher performance and lower cost.

So corporations have discovered that when they try to apply traditional analytical solutions to these new data types a laborious and expensive step is required to shred them into a typical relational schema losing the structure flexibility and information that made them valuable in the first place. Any change comes hard and expensively. As these new extensible data types accumulate in corporations there will be a demand to analyze them in a style and manner for which they were designed.

The industry has come full circle. In a way the situation is reminiscent of the early 1990s when large volumes of relational data accumulated with the wide adoption of RDBMs and vendors such as Arbor Software Hyperion Solutions and Business Objects introduced the concept of OLAP as an easy to understand way to analyze them. An analogous demand for an analytic platform will arise out of the appearance and ubiquity of these new extensible data types.

The characteristics of relational data shown in are such that a traditional business intelligence BI application stack such as that shown in works very well with relational data. However the characteristics of the new extensible data especially around its complexity flexibility and dynamic nature make it impossible to use that same BI stack and requires a new analytical platform. Thus it is desirable to provide a new platform that handles the extensible data and it is to this end that the present invention is directed.

The system and method for analyzing and reporting data from multiple sources makes it possible for its users to understand their extensible data. The system is a foundation for an analytical platform that covers not only traditional relational data but also a new generation of extensible data formats designed for the web such as those based on XML FIXML FpML ebXML XBRL ACORD MISMO etc. as well as HTML E mail Excel PDF and others. In a preferred embodiment the eXtensible on line analytical processing XOLAP is a scalable client server platform that allows the multi dimensional analysis of modern data types as well as traditional relational data by bringing them all into an internal common XML based model without the time and expense of creating a data warehouse. The system from the outside looks like a standard OLAP server so that the existing reporting tools and analytical applications designed for the traditional OLAP system can be used with the XOLAP system.

The system may be used for various industry solutions including for example the analysis of complex XML data streams such as ACORD FpML MISMO FIXML SWIFT HL7 or RosettaNet with transaction data to improve their operational performance multi channel and agent analytics for the Financial Service and Insurance industries to better target and increase revenue opportunities financial transaction value chain analytics in the financial services and banking industries to streamline execution and settlement customer interaction analytics for eCommerce and multi channel communications to increase customer loyalty and cross sell up sell opportunities compliance reporting and monitoring for cross industry regulations such as Sarbanes Oxley or industry specific regulations to understand risk positions and identify risky transactions and healthcare insurance and claims value chain analytics to eliminate processing errors and increase cash flow.

The system combines together various data sources and business intelligence applications analytical and reporting tools enabling analysis of data that does not fit a traditional relational data model and therefore does not fit a traditional business intelligence BI application stack.

Thus in accordance with the invention an extended online analytical server is provided. The server has one or more adaptors each adaptor converting one or more pieces of data from a particular data source having a particular data format into the common data format and an aggregator that aggregates the one or more pieces of data from the data sources to generate aggregated pieces of data. The server also has a virtual schema generator that generates a virtual schema from the aggregated pieces of data and an indexing engine and a scheduler that update the virtual schema when new pieces of data are received by the aggregator. The server also has an analytical cube generator that generates an analytical cube based on the virtual schema and an application programming interface to an external tool wherein the application programming interface permits the external tool to access the piece of data in the analytical cube.

In accordance with another aspect of the invention a computer implemented method for analyzing and reporting data from multiple data sources is provided. During the method one or more pieces of data from one or more data sources wherein the data sources include at least relational data sources and non relational data sources are converted into a common data format. The method also includes the step of generating an analytical cube based on the one or more pieces of data in the common data format using a declarative language and providing an application programming interface to an external tool wherein the application programming interface permits the external tool to access the piece of data in the analytic cube.

In accordance with another aspect of the invention an apparatus for analyzing and reporting data from multiple data sources is provided. The apparatus has an adaptor that allows a data source with one or more data items having a particular data format to be loaded into an extended online analytical processing system that converts the data items from the different data sources into a common format and generates a multidimensional analytical cube based on the data items. The apparatus also has an application programming interface to an external tool wherein the application programming interface permits the external tool to access the piece of data in the analytical cube.

In accordance with yet another aspect of the invention a computer implemented method for generating dimensional analytical models from extensible data is provided. In the method one or more pieces of data from one or more data sources are received wherein the data sources include at least one of a relational data source and a non relational data sources. The one or more pieces of data from the one or more data sources are converted into a common data format. Using the one or more pieces of data with the common data format a dimensional analytical model is formed wherein forming the dimensional analytical model further comprises using a declarative language to describe the dimensional analytical model.

The invention is particularly applicable to a client server software based XOLAP system and it is in this context that the invention will be described. It will be appreciated however that the system and method in accordance with the invention has greater utility since the XOLAP system can be implemented in other manners that are within the scope of the invention. Prior to describing the XOLAP system in accordance with the invention an overview of online analytic processing OLAP is provided as these concepts are used as part of the XOLAP system.

Online Analytical Processing OLAP features multidimensional hierarchies organized in a cube to facilitate multidimensional data navigation. The cube permits someone to slice and dice the cube as a way to view data from different angles defined by the OLAP cube and permits someone to drill down as a way to navigate from summary data down to detail data within the OLAP cube. A typical OLAP user has to build the cube define the cube s fact dimensions and hierarchies by identifying the commonly used clauses in the data queries intended to run against the cube. For example for the query show sales numbers by product by region by time period sales number becomes the subject of the analysis the fact while product region and time period become the dimensions. After the cube dimensions are defined data has to be loaded into it in accordance with special rules. A number of aggregations is then performed on this data where the aggregates correspond to dimension hierarchies. For example sales numbers for different months are aggregated into sales numbers for different quarters See for example and quarters are aggregated into a year. The dimension hierarchies are partially built during the process of data loading as well as manually. For example a product hierarchy can be built during the process of loading data into the cube by specifying the rule like Canon JVC should become children of VCR as shown in . Alternatively VCR can be introduced in a product hierarchy at a later time by the analyst who wants to aggregate data from Canon JVC into a single VCR category.

The process of loading data into a cube relies on a certain type of data model associated with the data source known as a star schema or a snowflake schema . The schema is built around a fact table that contains all the possible dimension permutations that have association with a data point a fact such as is shown in the table of . In this example the dimensions are product time period and sales in . Such an organization of data is highly inefficient from the storage standpoint and is being used primarily for analysis and reporting purposes. Usually there is a process of moving data from the transactional store operational store into a datawarehouse for reporting. This process of data extraction transformation and loading into a fact table is called ETL and has to precede the process of loading data into the actual multidimensional cube or creating a multidimensional index OLAP . The operational transactional data store used as a source of data for a datawarehouse is based on a different data model called entity relationship model E R model and the ETL process is a way to map data stored in E R model into a fact table based on a star snowflake data model. The operational store based on the E R model used to feed a fact table in would look like the tables shown in . The intent of E R based data model is to reduce the storage requirements by reducing data redundancy using codes in place of product names for example .

The star and the snowflake schema is a corner stone of any OLAP technology. This heavy dependency makes OLAP processing of non relational data very difficult. In particular if the source data is produced as a number of XML transactions instead of the three tables in it could look like the data shown in . The problem is that creating a fact table based on transactions in is a much more difficult task then creating a fact table out of the relational database . In particular the task of loading XML transaction s into a fact table requires programmatic effort and every little change in the transaction XML schema will require even more work. For example a schema like that shown in could become the schema shown in . Now an XOLAP system that overcomes these problems with typical OLAP systems will be described.

As shown in a plurality of business transactions that are stored in different data sources having potentially different data formats such as for example the relational database management system XML HTML and email shown may be loaded directly into an XOLAP server that performs at least ETL data modeling and OLAP modeling on the disparate data sources having the different data formats. The output from the XOLAP server may then be input into various typical business and analytic application reporting tools so that a business user can access the data even when the data is contained in an extendible data format.

The XOLAP system targets the problem of creating multivariant multidimensional cubes like OLAP directly on top of data sources bypassing the process of creating a star snowflake data model. This approach works for both relational and non relational data sources and is based on an XOLAP virtual schema that replaces the star snowflake data model required by OLAP. The XOLAP virtual schema characteristics include that it is XML based pulls the data from various data sources together without physically moving the data and is fully automated by utilizing the existing structure of the data sources involved.

For example for the transactions shown in above when they are processed with the XOLAP server the server creates a virtual schema. is an example of a user interface for generating a virtual schema for the system shown in . The virtual schema for the transactions shown in is shown in a left hand pane of the user interface. The schemas of individual transactions shown in a right hand pane of the user interface are effectively aggregated into one while maintaining the cardinality of each tag and each attribute in the data source. For example the element Sales 14 84 in the virtual schema shown highlighted means that the source data on the right hand side has 14 instances of the tag Sales and 84 other tags and attributes underneath the Sales tag. In this example the other tags and attributes are 14 instances of Product plus 14 instances of category plus 14 instances of name plus 12 instances of Qtr plus 12 instances of month plus 12 instances of sales and another 2 instances of Qtr 2 instances of month and 2 instances of sales for a total of 84 other tags.

The virtual schema is a representation of the source data through virtual transformations which the user defines to create a suitable schema for analysis. The virtual transformations include selection linking renaming and type conversions. The XOLAP cubes are built on the virtual schema as if it were a set of physical documents although the virtual schema is never actually materialized. Instead cube data requests are transformed into source data requests by the virtual schema. The source data requests are processed either directly against the data sources or indirectly through a cache.

The virtual schema used by the present invention is different from other XML based data mapping approaches in purpose specification and implementation. In purpose rather than defining a template for result data the virtual schema simplifies cube building. In specification rather than starting with a schema which is then filled in with data access requests XOLAP virtual schemas are constructed incrementally by virtual schema operators such as selection linking renaming and type conversion. In implementation rather than providing a mechanism for data retrieval the virtual schema drives construction of cube data structures in such a way that source access can be minimized and optimized. This approach works on any data source that can be interpreted as tagged data. Thus data in any type including text documents can always be interpreted as tagged data. An example of transforming relational data into tagged data is illustrated by where XML transactions are the result of transforming data from . While transforming any data source into tagged data is a trivial proposition same is not true when it comes to transforming any data into a relational model.

The XOLAP system allows optimizations which are not possible by systems which do not have its powerful unified data model. These optimizations include but are not limited to source data access patterns caching compression and indexing. As motivation for this topic consider the dimension to an XOLAP cube. It may be possible for the XOLAP server to perform this request by only incrementally modifying its data structures and possibly without accessing data sources at all. By contrast an OLAP cube would have to be completely respecified and rebuilt.

The XOLAP system can effectively operate on data of any type and any format including relational databases while OLAP technologies can only operate on relational or tabular data and require complex transformations of non relational and non tabular data into relational.

Returning to the virtual schema on the left hand side pane is similar to the OLAP style multidimensional hierarchy from . In addition it takes very little effort to create such hierarchy or a cube using the XOLAP virtual schema. Since the virtual schema is XML based it is possible to use standard languages like xPath or xQuery to operate on this schema to create a cube. The virtual schema of the XOLAP system supports the use of any programming language on the virtual schema including but not limited to Java C Perl etc. since the XOLAP system is not limited to an implementation based on any particular programming language.

The XOLAP system creates multidimensional cubes by executing commands from a declarative language like xPath against the virtual XML schema unlike a standard OLAP approach of specifying the cube manually or by using complex data loading rules. Thus the XOLAP system drastically reduces the complexity of creating a multidimensional cube by allowing it to be done through the use of a simple declarative language like xPath. An example of a method for generating a virtual schema using xPath is now described with reference to .

The xPath expression specifying the XOLAP fact creates an anchor in the virtual schema that acts as a reference point for dimensions that are also defined through xPath expressions but relative to the fact rather then the entire virtual schema.

In step a product dimension may be created. The creating of a product dimension consists of two steps including 

 a creating a product category by using xPath expression. For example for the cube shown in a product category on the category attribute may be created

In step a time period dimension for the cube is created wherein creating a time period dimension also consists of two steps including 

Step a not only extracts the appropriate data from the virtual cache the first xPath expression but it also defines a certain transformation the second xPath expression. 

In step a sales dimension is created wherein the creating of a sales dimension is a matter of defining an xPath expression that pulls sale numbers from both Qtr and Qtr

Every element of the cube in is defined through one or more xPath expressions and supports all the features of a standard OLAP cube including slicing and dicing drill down and data aggregation. The XOLAP cube differs from the OLAP cube in a variety of ways 

The fact in the OLAP cube is rigidly defined as a numeric data cell of a certain type sales data or revenue data or else . The multiple facts in the OLAP cube require defining a special dimension Measures or Scenarios or both that effectively create multiple instances of the cube for each fact type. Multidimensional analysis of multiple facts within the same cube is not possible. In contrast due to the way the XOLAP cube elements are defined dimensions and data cells are treated equally in the XOLAP cube analogous to different facts in the OLAP cube and can be analyzed at the same time.

Because XOLAP cubes are defined using XPath expressions and because in general XPath expressions can return a sequence of atomic or complex valued results dimensions are inherently multi valued and complex. In all situations where OLAP cubes require atomic scalar values XOLAP allows complex sequences.

Multi valued dimensions allow N N relationships between facts and dimension members further simplifying modeling. Complex types allow creation of dimensions on complex data types.

Operating on data attributes in the OLAP cube is extremely difficult. A separate attribute dimension has to be built for every attribute type color cost weight imploding the size of the cube. In contrast the XOLAP cube treats data and data attributes equally because of the way the elements of the XOLAP are defined and therefore allows simultaneous analysis of data and data attributes.

Operating on multiple data sources in the OLAP cube requires bringing them together in a star snowflake schema of a datawarehouse datamart. This requires knowledge about complex relationships that exist among the data sources. In contrast the XOLAP cube uses xPath to bring together different elements of the virtual schema into a single dimension or an XOLAP fact drastically simplifying the data aggregation process.

Since XOLAP system does not rely on bringing data from data sources into an intermediary storage like a datawarehouse or a datamart the solution can handle extremely large data volumes.

The XOLAP system also does data aggregation on the fly. More importantly it is not just the aggregation that the product can do but also non parametric functions. In fact it provides support for any function through a special interface that supports user defined function UDF plug ins.

The XOLAP system also does the data loading and data aggregation including non parametric functions in a single step on the fly. Despite the OLAP look and feel the product s architecture is quite different from traditional OLAP products requiring a fully populated cube before running any functions against it.

The XOLAP system provides a way to build a free form analytical cube As soon as there is a new analytical application the cube might need to get rebuilt depending on how the cube was initially designed. XOLAP first creates a virtual schema that is already an OLAP like structure built on top of various data sources specified by the user. The virtual schema is merely a multidimensional index that is used as a source of building materials for analytical cubes .

The SKYTIDE virtual schema is just an index and takes very little space and can be re created any time from data sources that it represents. For each new analytical application a new small analytical cube can be easily created from the virtual schema.

XOLAP applies the benefits of online analytical processing OLAP to the XML data model. This enables analysis of previously un analyzable information as well as drastically expands the capabilities of commercial analytical applications by allowing them to operate on tagged data sets. XOLAP supports multidimensional OLAP style analysis handles tagged and relational data sources relates data across data sources presents results to standard BI tools. Now an example of an implementation of the XOLAP system is described in more detail.

In an example of the data analysis system using the invention Skytide develops and markets a complete software package consisting of XOLAP Server XOLAP Designer XOLAP Navigator XOLAP SDK and XOLAP Plug ins for Excel SAS and SPSS. XOLAP serves the pressing need for analysis of rapidly expanding amounts of complex and dynamic business data.

As shown in the XOLAP server aggregates data from various sources into an XML based cache and makes it available for analysis and reporting. It works with multiple data sources including both relational and non relational and enables business users to instantly generate sophisticated reports across multiple sources using a web server portal existing reporting tools or analytic applications.

As shown in the system uses the designer to quickly define analytical models directly from data sources such as one or more cubes . To accomplish this task the designer may generate a query and send the query to the server that sends XML back to the designer.

As shown in business analysts create reports using multidimensional navigation. In particular the server may store one or more report definitions and the business analyst sees the tabular views and multidimensional navigation provided by the server to the designer .

As shown in the server makes reports available to business users as Excel spreadsheets Excel pivot tables PDF or others using a web server portal that generates a set of reports for the business users. It is important to note that since the internal data representation in XOLAP server is XML reports are generated in XML as well while the desired output format is achieved through the use of XSLT. Now more details of the XOLAP server is described.

The XOLAP server architecture is based on XML multidimensional model cubes that use standard XPath language and support relational and non relational data an end to end XML data model that enables automation and optimization build cubes directly from data sources and provides incremental updates and schema changes and virtual schemas that provide flexible data integration seamless creation of XML cubes and incremental updates for both data and data structure.

The XOLAP system in accordance with the invention provide many benefits. Those benefits include the instant creation of analytical models and reports with no ETL Datawarehouse overhead intuitive modeling and navigation based report generation a flexible extensible architecture that evolves with changing needs of an organization makes it easy to add new data sources and data formats and provides seamless integration with existing analytical and reporting tools and a system that is highly complimentary to existing production environment since there is no need to move the data no change to existing data and no need to model the data. The XOLAP system is superior to OLAP in its data aggregation capabilities by pulling together multiple data types in a consistent manner in its ability to reach new data types without shredding mapping to the star snowflake schema in its rapid development capabilities where first results come quickly no datawarehouse is needed and change is easy. Now several examples of how the XOLAP system may be used for different business intelligence operations and functions including path analysis entity matching and identification of similar elements in hierarchies is described.

The XOLAP system permits entity matching that is very difficult for typical business intelligence systems. In particular the XOLAP system can process using the analytical model described above a collection of e mails or HTML pages or newsgroup messages or all of the above to uncover statistically significant co occurrences of different entities and to chain them together into more complex relationships. For example an individual A is related to an individual B because they happened to be at the same place at the same time and there is a statically significant number of such occurrences for individual A and B. By creating slices dimensions through the available data the XOLAP system permits a user to discover the co occurrence data that would be very difficult to discover using typical BI systems.

The XOLAP system also permits path analysis to occur. In particular the XOLAP system can process a huge set of events to uncover collections of events that lead to a certain outcome and to point out specific characteristics of such collections responsible for this outcome. For example an illegal insider trading event could be uncovered by exercising Skytide s path analysis across all insider transactions by identifying the most common triggering event for such transactions.

For example a simple question of How to find all call routes generated during the day within a call center and calculate their frequency will require with typical BI systems a professional software developer for a number of hours days with the result of this work being a one off solution not suitable for variations of the same question. In contrast a business analyst using the XOLAP system is able to accomplish the same task in less than 10 minutes and produce a reusable analytical model and reports aka an analytical application around path analysis .

For example the XOLAP system can be used to perform path analysis for speech applications. The analytical applications for the speech application may include 

1. Do you know how callers interact with the speech application beyond simple statistics such as the number of complete calls incomplete calls call rates etc 

The XOLAP system may also be used the security and compliance analysis. In particular trouble shooting security breaches has always been one of the hardest analytical challenges. It is hard because the breach event takes place over a period of time and consists of multiple steps that form trees hierarchies and graphs. Thus doing path analysis for a security breach is largely the process of recreating those graphs out of huge volumes of data. The XOLAP system can accomplish this task without custom coding by using its path analysis modeling capabilities as follows 

Compliance analytics for most part is very similar to security analytics. Compliance is typically governing sequences of events taking place over a period time. A typical compliance violation is an event that takes place out of the sequence. In financial services equity transaction latency is a common culprit. The XOLAP system path analysis is an easy way to classify transactions in the context of the entire deal that might start with a phone call or IM message then go through an e mail and end up with an execution that is 12 hours late in order to get additional and illegal gains through price differences.

The XOLAP system also permits a user to discover similar elements in different hierarchies. For example as shown in an organization may have different divisions in which each division maintains its expense information a general ledger in a different hierarchical model. As shown in all of the divisional have an IT expense item but that expense item is at different locations in the hierarchy for each division. In a typical BI system it is difficult to aggregate those IT expenses to produce a quarterly monthly or yearly IT expense report across the entire organization without a lot of programming and a custom application.

As shown in the ledger data with the different hierarchies can be read into the XOLAP system. As shown in a virtual schema for those ledger data sets can be created. also shows that a dimension for IT may be created in the virtual schema that permits the XOLAP system to easily accumulate the IT expenses. First as described above the ledger data is converted into a common format and then an analytical model for all of the IT cost centers may be handled with a single analytical model as shown in . illustrates an example of the results of the application of the analytical model to the ledger data wherein the IT expense data for each month has been aggregated from the ledger data sets. In order to aggregate the IT expense information the path IT and IT are used to gather the IT related expenses for two of the ledger data sets shown in . illustrates an example of the different reports that can be generated by the XOLAP system.

While the foregoing has been with reference to a particular embodiment of the invention it will be appreciated by those skilled in the art that changes in this embodiment may be made without departing from the principles and spirit of the invention the scope of which is defined by the appended claims.

