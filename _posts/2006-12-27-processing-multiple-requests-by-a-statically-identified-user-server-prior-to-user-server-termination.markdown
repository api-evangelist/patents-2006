---

title: Processing multiple requests by a statically identified user server prior to user server termination
abstract: The simultaneous processing of requests under multiple user identifiers is facilitated. The requests are processed by user servers, in which a user server has an association with a particular user. A user server has a static identity associated therewith and is capable of processing a plurality of requests prior to terminating. The requests are dispatched to the appropriate user servers via a dispatcher server coupled to the user servers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08250134&OS=08250134&RS=08250134
owner: International Business Machines Corporation
number: 08250134
owner_city: Armonk
owner_country: US
publication_date: 20061227
---
This invention relates in general to facilitating processing of requests within a processing environment and in particular to enabling requests requested by a requestor to be processed by user servers identified within the requests in which a user server is statically identified and capable of processing multiple requests prior to termination.

There are situations in which a requester requests services that need to be processed under the identity of multiple users. Currently there are mechanisms for satisfying these requests.

One mechanism includes issuing a request to a general purpose server capable of processing requests under multiple user identifiers. In response to receiving a request that is to be processed under the identity of a particular user the server assumes the identity of that user and then processes the request. After processing the request the server switches back to a general purpose server. This mechanism has the disadvantage however that the requests need to be serialized from the requestor to the server so that the requestor is only asking on behalf of one user at any point in time.

Another mechanism includes having the general purpose server in response to receiving the request start a user server to run the request. When that user server processes the request it terminates. Thus with this mechanism the user server needs to be started each time a request is received which is time consuming and wastes resources.

Based on the foregoing a need exists for a capability to facilitate processing of requests that are to be run under multiple user identifiers. In particular a need exists for a capability that enables multiple requests to be processed simultaneously by multiple user servers identified by the requests and in which a user server is statically identified and capable of processing a plurality of requests prior to termination.

The shortcomings of the prior art are overcome and additional advantages are provided through the provision of an article of manufacture that includes at least one computer usable medium having computer readable program code logic to facilitate processing of requests of a processing environment. The computer readable program code logic when executing performing for instance the following obtaining by a user server via a dispatcher server of the processing environment a request that is to be processed for a particular user the user server being selected by the dispatcher server and enabled to process requests for that particular user the user server having a static identifier associating the user server with the particular user and processing the request by the user server wherein the user server is capable of processing a plurality of requests for the particular user prior to terminating.

Method and systems corresponding to the above summarized article of manufacture are also described and claimed herein.

Additional features and advantages are realized through the techniques of the present invention. Other embodiments and aspects of the invention are described in detail herein and are considered a part of the claimed invention.

In accordance with an aspect of the present invention a capability is provided for facilitating the simultaneous processing of requests to be processed under multiple user identifiers. These requests are processed by user servers in which a user server has a static identity associated therewith e.g. corresponding to a user identifier such as User User etc. and is capable of processing a plurality of requests prior to terminating referred to as a long running user server . That is the user server is not started with the intent that it must terminate after processing a single request but instead is capable of processing one or more requests. The user server remains running as long as it is receiving requests and or for a configurable amount of idle time. It processes any requests forwarded to it during the time it is running. Multiple user servers may be simultaneously running and processing requests issued by one or more requestors.

In one example a request issued by a requestor is forwarded to a dispatcher server which is responsible for determining which user server is to process the request. Responsive to the determination the request is forwarded by the dispatcher server to the selected user server.

One embodiment of a processing environment to incorporate and use one or more aspects of the present invention is described with reference to . Processing environment includes for instance a processing unit coupled to another processing unit via a connection . As examples processing unit includes for instance a personal computer or ThinkPad notebook computer offered by International Business Machines Corporation IBM Armonk N.Y. and server includes for instance a pSeries server such as a p690 server running an AIX operating system offered by International Business Machines Corporation. IBM pSeries and AIX are registered trademarks of International Business Machines Corporation Armonk N.Y. U.S.A. Other names used herein may be registered trademarks trademarks or product names of International Business Machines Corporation or other companies. Connection can be any type of connection including for instance a TCP IP socket connection an internet connection or any other type of suitable connection.

In this example processing unit is executing one or more requesters that send requests to processing unit which manages those requests. Processing unit is referred to herein as a server or dispatcher server. It is a general purpose server in that it does not in this embodiment process requests under specific user identifiers. Instead it dispatches each request to an appropriate server for processing. Further details regarding processing unit are described with reference to .

Referring to processing unit includes for instance a central processing unit a memory e.g. main memory and one or more input output I O devices coupled to one another via for example one or more buses .

Central processing unit executes instructions and code that are stored in memory . In one particular example the central processing unit executes emulator code stored in memory . This code enables a processing environment configured in one architecture to emulate at least one other architecture. For instance emulator code allows the pSeries server to emulate the z Architecture offered by International Business Machines Corporation.

Further details relating to emulator code are described with reference to . In one example emulator code includes an instruction fetch unit to fetch an instruction from memory and to optionally provide local buffering for the fetched instruction an instruction decode unit to receive the instruction from the instruction fetch unit and to determine the type of instruction that has been fetched and an instruction execution unit to execute the instruction. Execution may include loading data into a register of the central processing unit from memory storing data back to memory from a register or performing some type of arithmetic or logical operation as determined by the decode unit. In one example each unit is implemented in software which is stored in memory and executed by the central processing unit. In other examples one or more of the units or operations are implemented in firmware hardware software or some combination thereof.

In accordance with an aspect of the present invention emulator code is used to emulate zSeries servers that run on the pSeries machine. For instance a plurality of emulated servers are started referred to herein as per user servers. Each per user server is started for a particular user e.g. User User and has a static identity that corresponds to that user.

Referring to in one embodiment a plurality of per user servers collectively are started. In this example each per user server is a zSeries system e.g. process running on a pSeries machine e.g. processing unit . Each per user server processes requests that are to be processed under that user id. As examples per user server is started for User and has a static identity of User and per user server is started for User and has a static identity of User . Each per user server only handles requests for its designated user e.g. per user server handles requests for User and per user server handles requests for User . Each per user server or a subset thereof is capable of processing a plurality of requests for its user prior to terminating.

Per user servers are coupled to a dispatcher server which is responsible for forwarding requests to the per user servers and for starting the per user servers if they are not started. In one embodiment dispatcher server and per user servers are processes running on a processing unit such as processing unit .

Dispatcher server is further coupled via a connection e.g. a TCP IP socket connection internet connection etc. to a processing unit executing one or more requesters such as graphical user interface GUI components. A requestor sends requests such as application programming interface API requests shared library calls or commands to be executed to dispatcher server which is on a different system than the requestor. Based on information in the request dispatcher server dispatches the request to a per user server as described below. The dispatcher employs information stored in registration database to dispatch the request.

Further details regarding processing a request issued by a requestor are described with reference to . In particular depicts one embodiment of the logic associated with initiating a request and depicts one embodiment of the logic associated with processing the request. Reference is also made to reference numbers beginning with 4 are found in during the description of .

Referring to initially a requestor such as a GUI component sends a request e.g. an API request shared library call or command to be executed to dispatcher server STEP . The request includes information about the API such as the name of the API and the types and values of the input parameters and the type of the return value. The request also includes the identifier of the user on whose behalf the API should be invoked.

The dispatcher server receives the API request STEP and determines whether a per user server is running for that user identifier INQUIRY . For example the dispatcher server looks at the identifier of the user within the request and checks its registration database to determine whether a per user server is currently running for that user. If a per user server is not running for that user id then a per user server is started STEP . This includes for instance invoking a start command that initiates a well defined user process and provides the user id as a parameter. The particular process is system dependent. After the process is started it assumes the identity of the user specified as a parameter and waits for requests to process.

In response to initiating the per user server the dispatcher server waits for the per user server to send a registration request back to the dispatcher server STEP . In one embodiment if the registration request is not received in a configurable amount of time e.g. 5 minutes or any other defined amount of time an error is flagged. However in response to the dispatcher server receiving the registration request STEP the dispatcher server saves the registration request information in the registration database STEP . In particular the registration request includes information about how the dispatcher server can communicate with the per user server. For example if a TCP IP socket connection is used this information includes a port number and if an AF local connection is used this information includes a file name. This information is saved in the registration database.

Thereafter or if a per user server was already running for the user the dispatcher server forwards the request using information in the registration database to the per user server for processing STEP . The processing of the request is described in further detail with reference to .

Referring to the per user server receives the request and processes that request STEP . For instance a request may include a query of the program status word PSW for the system running on a particular user e.g. User or User etc. The per user server receiving the request queries the PSW of its system and obtains the requested value.

Thereafter the per user server sends the result of the processing to the dispatcher server STEP and the dispatcher server sends the result back to the requestor STEP . This concludes processing of the request.

As described above the per user server remains running to allow it to process multiple requests prior to terminating. For instance it remains running while it is receiving requests. If it does not receive a request within a configurable amount of idle time then it is terminated. This processing is described in further detail with reference to .

With reference to the per user server remains running and awaits requests STEP . Periodically e.g. every hour or any other desired time interval the per user server determines whether it has received a request within a configurable amount of time such as within 24 hours or any other desired time frame STEP . This determination is made for instance by tracking the last received request and comparing the time to the configured time.

If a request has been received within the configured amount of time then the per user server remains running INQUIRY . However if the per user server has not received a request within the configurable amount of time the per user server sends a deregistration request to the dispatcher server STEP . The dispatcher server acknowledges this request STEP and thereafter the per user server terminates STEP . If a request comes in for the per user server after it terminates then the per user server is started once again.

Described in detail above is a capability for simultaneously processing requests by multiple users under multiple user ids. The requests are processed by individual user servers specified in the requests. The user servers are statically identified e.g. for one particular user and are capable of processing a plurality of requests prior to terminating.

One or more aspects of the present invention can be included in an article of manufacture e.g. one or more computer program products having for instance computer usable media. The media has therein for instance computer readable program code means or logic e.g. instructions code commands etc. to provide and facilitate the capabilities of the present invention. The article of manufacture can be included as a part of a computer system or sold separately.

One example of an article of manufacture or a computer program product incorporating one or more aspects of the present invention is described with reference to . A computer program product includes for instance one or more computer usable media to store computer readable program code means or logic thereon to provide and facilitate one or more aspects of the present invention. The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A sequence of program instructions or a logical assembly of one or more interrelated modules defined by one or more computer readable program code means or logic direct the performance of one or more aspects of the present invention.

Advantageously multiple requests issued from a particular requestor in which those requests are to be processed under multiple user identifiers are simultaneously processed by individual user servers. User servers are started for particular users and remain running to process one or more requests received for that user. Multiple user servers can be running concurrently and can be processing requests simultaneously with other user servers. A user server is statically identified in that its identity is associated with a particular user and does not change to allow it to process requests for other users. The user server is exclusive to one user in this embodiment. Each user server is long running in that it is capable of servicing more than one request prior to terminating.

Although various embodiments are described above these are only examples. For example the processing environment can include more than one requester and more than one dispatcher server and or more or less per user servers. Further the environment need not be based on a p Series architecture and may emulate environments other than the z Architecture. Additionally the operating system running on the p Series machine in this example may be other than AIX such as LINUX or other desired operating systems. Yet further the processing unit executing the requesters may be other than a PC or ThinkPad offered by IBM . Moreover other types of requesters can request services under multiple user identifiers. Further in other embodiments emulation is not necessary for one or more aspects of the present invention. Many other variations are possible without departing from the spirit of the present invention.

For example a data processing system suitable for storing and or executing program code is usable that includes at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements include for instance local memory employed during actual execution of the program code bulk storage and cache memory which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input Output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modems and Ethernet cards are just a few of the available types of network adapters.

As used herein the term obtaining such as obtaining a request includes for instance receiving the request having or creating the request fetching the request etc.

The capabilities of one or more aspects of the present invention can be implemented in software firmware hardware or some combination thereof. At least one program storage device readable by a machine embodying at least one program of instructions executable by the machine to perform the capabilities of the present invention can be provided.

The flow diagrams depicted herein are just examples. There may be many variations to these diagrams or the steps or operations described therein without departing from the spirit of the invention. For instance the steps may be performed in a differing order or steps may be added deleted or modified. All of these variations are considered a part of the claimed invention.

Although embodiments have been depicted and described in detail there it will be apparent to those skilled in the relevant art that various modifications additions substitutions and the like can be made without departing from the spirit of the invention and these are therefore considered to be within the scope of the invention as defined in the following claims.

