---

title: Monitoring and collection of audio events
abstract: Various embodiments of the invention provide a facility for monitoring audio events on a computer, including without limitation voice conversations (which often are carried on a digital transport platform, such as VoIP and/or other technologies). In a set of embodiments, a system intercepts the audio streams that flow into and out of an application program on a monitored client computer, for instance by inserting an audio stream capture program between a monitored application and the function calls in the audio driver libraries used by the application program to handle the audio streams. In some cases, this intercept does not disrupt the normal operation of the application. Optionally, the audio stream capture program takes the input and output audio streams and passes them through audio mixer and audio compression programs to yield a condensed recording of the original conversation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08463612&OS=08463612&RS=08463612
owner: Raytheon Company
number: 08463612
owner_city: Waltham
owner_country: US
publication_date: 20061106
---
This application claims priority from commonly assigned provisional U.S. Patent Application No. 60 734 911 entitled Monitoring and Collection of Audio Events and filed Nov. 8 2005 by Neath et al.

This application is related to commonly assigned U.S. patent application Ser. No. 11 556 942 entitled Event Monitoring and Collection and filed on a date even herewith by Clingenpeel et al. which claims priority from provisional U.S. Patent Application No. 60 734 886 entitled Event Monitoring and Collection and filed Nov. 8 2005 by Clingenpeel et al.

This application is related to commonly assigned U.S. patent application Ser. No. 11 556 968 entitled Replaying Events Collected from a Client Computer and filed on a date even herewith by Henry which claims priority from provisional U.S. Patent Application No. 60 734 811 entitled Replaying Events Collected from a Client Computer and filed Nov. 8 2005 by Henry.

This application is related to commonly assigned U.S. patent application Ser. No. 11 557 007 entitled Keyword Obfuscation and filed on a date even herewith by Henry et al. which claims priority from provisional U.S. Patent Application No. 60 734 909 entitled Keyword Obfuscation and filed Nov. 8 2005 by Henry et al.

This application is related to commonly assigned U.S. patent application Ser. No. 11 557 025 entitled Cache for Collecting Events on a Monitored Computer and filed on a date even herewith by Clingenpeel et al. which claims priority from provisional U.S. Patent Application No. 60 734 887 entitled Cache for Collecting Events on a Monitored Computer and filed Nov. 8 2005 by Clingenpeel et al.

This application is related to commonly assigned U.S. patent application Ser. No. 11 556 984 entitled Validation of Social Security Numbers and filed on a date even herewith by Rogers which claims priority from provisional U.S. Patent Application No. 60 734 812 entitled Validation of Social Security Numbers and filed Nov. 8 2005 by Rogers.

The respective disclosures of these applications patents are incorporated herein by reference in their entirety for all purposes.

The present invention relates to computer systems in general and in particular to the monitoring of audio events on computer systems.

Traditionally phone calls and other audio conversations have been monitored for a variety of reasons. For instance law enforcement authorities commonly monitor telephone calls using wiretaps and other similar technologies in the course of investigating criminal activity. There are many civilian uses of audio monitoring as well. Merely by way of example many organizations wish to monitor sales and or support calls in which their employees participate for a variety of purposes including training verification and supervision.

The public internet now provides sufficient bandwidth and responsiveness to support voice conversations using a variety of desktop applications installed on a client workstation. Multiple application programs are now able to conduct telephone like or instant voice message communications over the public internet. These applications use a variety of encoding techniques for the transport of the audio streams.

The applications range from voice enabled instant message applications such as instant messenger applications to soft phone telephone replacement applications that provide a telephone infrastructure over the public internet using the internet protocol as the transport. Voice over Internet Protocol VoIP is but one well known technology enabling such applications. In many cases these applications include encryption technology such that audio data is digitized and encrypted before transport between computers.

Traditional monitoring methods often are unable to accommodate these digital communications and in particular the increasing use of computer applications to support those communications.

Various embodiments of the invention provide a facility for monitoring audio events on a computer including without limitation voice conversations which often are carried on a digital transport platform such as VoIP and or other technologies . In a set of embodiments a system intercepts the audio streams that flow into and out of an application program on a monitored client computer for instance by inserting an audio stream capture program between a monitored application and the function calls in the audio driver libraries used by the application program to handle the audio streams. Merely by way of example in some cases the audio stream capture program takes a copy of each audio data stream and passes the audio stream content on to its original destination function creating a non disruptive audio stream intercept. Optionally the audio stream capture program takes the input and output audio streams and passes them through audio mixer and audio compression programs to yield a condensed recording of the original conversation.

One set of embodiments provides systems for monitoring audio events including without limitation voice conversations on a monitored client computer. Some systems for example might implement methods of the invention and or execute software programs of the invention. An exemplary system in accordance with certain embodiments can be used on a monitored computer system comprising a processor an audio input device an audio output device a device driver providing an application programming interface API for the audio input device and the audio output device and a Voice over Internet Protocol VoIP application for handling voice conversations using the computer system. The exemplary system comprises in some embodiments an audio stream capture component an audio mixer component and or an audio storage component.

In some embodiments the audio stream capture component comprises a first set of instructions executable by the processor. The first set of instructions might comprise instructions to identify an audio input buffer for the VoIP application in some cases the audio input buffer is configured to hold audio data received e.g. via the API from the audio input device. The first set of instructions in some cases comprises further instructions to identify an audio output buffer for the VoIP application the audio output buffer might be configured to hold audio data to be provided e.g. via the API to the audio output device.

The audio stream capture component might further include instructions to intercept a first function call from the VoIP application to the API. In some cases the first function call informs the API that the VoIP application has processed a first set of data at the audio input buffer the first set of data representing an audio input stream for the VoIP application. There might then be instructions to capture the first set of data and or to propagate the first function call for reception by the API.

In certain embodiments the audio capture component further comprises instructions to intercept a second function call from the VoIP application to the API the second function call might comprise information about a second set of data comprising an audio output stream from the VoIP application. Merely by way of example the information about the second set of data might provide a reference to a location of an audio output buffer where the second set of data is stored and or might comprise the second set of data itself. The audio capture component might also capture this second set of data e.g. from the audio output buffer and or propagate the second function call for reception by the API. In a particular embodiment the audio capture program comprises instructions to transmit the first set of data and the second set of data for reception by the audio mixer component.

The audio mixer component in some embodiments comprises a second set of instructions executable by the processor. The second set of instructions might include instructions to receive the first and or second sets of data. In some cases the second set of instructions includes instructions to synchronize the first set of data with the second set of data to re create a voice conversation handled by the VOIP application.

The audio storage component might comprise a third set of instructions executable by the processor. The third set of instructions can include inter alia instructions to compress the re created voice conversation and or instructions to save the re created voice conversation to a storage medium. In some cases the third set of instructions further comprises instructions to transmit the re created voice conversation for reception by a monitoring server.

Another exemplary system might be implemented in a monitored computer system comprising a processor an audio input device an audio output device a device driver providing an application programming interface API for the audio input device and the audio output device and an audio application that receives audio input and provides output. The exemplary system in some embodiments is configured to monitor audio streams handled by the audio application. The system might comprise a software application running on the computer system the software application comprising a set of instructions executable by the processor.

The set of instructions comprises in a set of embodiments instructions to intercept a first function call from the audio application to the API. In some cases the first function call comprises information about a first set of data representing an audio input stream for the audio application . The software application might further comprise instructions to capture the first set of data and or instructions to propagate the first function call for reception by the API.

In some cases the software application comprises further instructions to intercept a second function call from the audio application to the API the second function call might include information about a second set of data representing an audio output stream from the audio application. Hence the software application might comprise instructions to capture the second set of data and or instructions to propagate the second function call for reception by the API. In some cases the software application further comprises instructions to synchronize the first set of data with the second set of data to re create an set of audio input and output streams handled by the audio application. In some cases the audio input and output streams are isochronous.

In certain embodiments the software application further comprises instructions to identify an audio input buffer for the audio application. The audio input buffer might be configured to hold audio data received from the audio input device. In some cases this buffer can be identified by intercepting an initial function call from the audio application to the API. For example the initial function call might reference the audio input buffer. In some cases the first function call informs the API that the audio application has processed a first set of data at the input buffer. Hence in a set of embodiments capturing the first set of data might comprise obtaining the first set of data from the audio input buffer for the audio application.

In some cases the software application provides additional functionality. Merely by way of example in a set of embodiments the software application comprises further instructions to compress the re created set of audio input and output streams and or to save the re created set of audio input and output streams to a storage medium. In other embodiments the software application comprises instructions to transmit the re created set of audio input and output streams for reception by a monitoring server.

In a particular set of embodiments the audio application might be a VoIP application and or the re created set of audio input and output streams might comprise a VoIP conversation.

Another set of embodiments provides methods including without limitation methods that can be implemented on systems of the invention. An exemplary method for example might be implemented on a computer system comprising an audio device a device driver providing an API for the audio device and an audio application configured to provide audio services. The method then might be used for monitoring an audio stream handled by the audio application.

In a set of embodiments the method comprises intercepting a function call from the audio application to the API the function call comprising information about a set of data representing an audio stream handled by the audio application capturing the set of data propagating the function call for reception by the API and or re creating the audio stream from the captured set of data. In some cases the method might further comprise compressing the re created audio stream saving the re created audio stream to a storage medium and or transmitting the re created audio stream for reception by a monitoring server.

In some cases the audio device comprises an audio output device. In such cases the function call might comprise a reference to an audio output buffer storing the set of data. In a other cases the audio device comprises an audio input device. Hence the function call might inform the API that the audio application has processed the set of data at an audio input buffer. The method then might comprise identifying an audio input buffer for the audio application the audio input buffer being configured to hold audio data received via the API from the audio input device. Accordingly capturing the set of data might comprise in some cases obtaining the set of data from the audio input buffer.

In other embodiments the audio device comprises both an audio input device and an audio output device. In such cases the method might further comprise intercepting a second function call from the audio application to the API the second function call may comprise a second set of data representing an audio output stream from the audio application and or capturing the second set of data. In some cases the method might also comprise propagating the second function call for reception by the API. In some cases the set of data may be synchronized with the second set of data for instance to re create an audio input output stream handled by the audio application. The audio input output stream may be isochronous and or may comprise a Voice over Internet Protocol VoIP conversation handled by the audio application.

Yet another set of embodiments provides software programs including without limitation software programs comprising instructions to perform methods of the invention and or software programs executable on systems of the invention. An exemplary software program might be configured for use on a computer system comprising a processor an audio input device an audio output device a device driver providing an application programming interface API for the audio input device and the audio output device and an audio application that receives audio input and provides audio output. The software program in an embodiment comprises a set of instructions executable by the processor.

The set of instructions comprises in a set of embodiments instructions to intercept a first function call from the audio application to the API. In some cases the first function call comprises information about a first set of data representing an audio input stream for the audio application . The software application might further comprise instructions to capture the first set of data and or instructions to propagate the first function call for reception by the API.

In some cases the software application comprises further instructions to intercept a second function call from the audio application to the API the second function call might information about a second set of data representing an audio output stream from the audio application. Hence the software application might comprise instructions to capture the second set of data and or instructions to propagate the second function call for reception by the API. In some cases the software application further comprises instructions to synchronize the first set of data with the second set of data to re create an set of audio input and output streams handled by the audio application.

An improved solution is provided herein for monitoring audio events on a computer including without limitation voice conversations which often are carried on a digital transport platform such as VoIP and or other technologies . In a set of embodiments a system intercepts the audio streams that flow into and out of an application program on a monitored client computer for instance by inserting an audio stream capture program between a monitored application and the function calls in the audio driver libraries used by the application program to handle the audio streams. Merely by way of example in some cases the audio stream capture program takes a copy of each audio data stream and passes the audio stream content on to its original destination function creating a non disruptive audio stream intercept. Optionally the audio stream capture program takes the input and output audio streams and passes them through audio mixer and audio compression programs to yield a condensed recording of the original conversation.

According to an aspect of the invention the functionality of some embodiments to capture audio data between the application and the hardware provides the ability to monitor audio events such as voice conversations audio data recorded by an application from a microphone at the monitored computer audio data received from another source just to name a few examples even if the application encrypts and or otherwise attempts protects the data from monitoring. This is because the device driver generally is able to process only raw data that is to provide raw data as input to the application and or to accept raw data as output from the application . Hence by intercepting data traffic between the device driver and the application and or obtaining data from the application in the form it was provided by the device driver embodiments of the invention provide the ability to use access and or use such data before the application has the ability to apply any protection schemes to the data or in the case of output from the application after such protection schemes have been removed by the application .

For example in a set of embodiments the sound card or audio chipset in a monitored computer accessed via the services of an operating system driver that presents a consistent interface to the operating system. An application wishing to make use of the capabilities of the installed audio peripherals does so by establishing access to these audio peripherals using the standardized and predictable application programming interface presented by operating system s multimedia system.

By tapping into this standard interface between the application program and the operating system s multimedia system and or the device driver s for the device s embodiments of the invention enable the collection of the input and or output audio streams that flow between the audio driver and the application program. In some cases the input and output audio streams are then combined by passing them to an audio mixer which may produce a combined audio stream that represents the conversation being conducted by the user using the application program. The input and or output audio streams which may as noted above be incorporated in a combined input and output stream produced by the audio mixer might be fed into an audio compression routine that creates an MP3 WAV or similar compressed output format which then may be saved as a record of the conversation that flowed into and out of the monitored application.

In certain embodiments because any audio enabled application may be forced by the computer s operating system to interact with the computer s installed audio system through a predictable set of input and output APIs the audio capture process may be designed to be independent of the nature of the audio enabled application the audio enabled application can be to name but a few examples a soft phone and or VoIP application a voice enabled instant message program a media player and or recorder and or any other audio enabled application program. The audio capture method may be in some embodiments completely independent of the nature of the application.

The exemplary system also comprises a software program that is configured to monitor and or capture audio streams. In some embodiments an audio stream capture component an audio mixer component and or an audio storage component . It should be noted that while the description of the software program refers to these components the organization of the functionality of these components may vary according to the embodiments. Merely by way of example in some cases the functionality one or more of the components may be consolidated within a single component and or the functionality of a component may be divided among a plurality of components. 

In a set of embodiments the audio stream capture component comprises a first set of instructions executable by the processor. The first set of instructions might comprise instructions to identify e.g. by memory location etc. an audio input buffer for the VoIP application . This input buffer might serve as a buffer for the VoIP application to store data such as an audio stream captured by a microphone etc. received from the audio input device e.g. via an API and or multimedia dll as described in more detail below . The first set of instructions in some cases comprises further instructions to identify an audio output buffer of the application the audio output buffer might be configured to hold audio data to be provided e.g. via the API and or a multimedia dll to the audio output device e.g. to be played through a speaker etc. .

The audio stream capture component might further include instructions intercept a first function call from the VoIP application to the API. In some cases the first function call informs the API that the VoIP application has processed a first set of data at the input buffer . This first set of data may represent an audio input stream for the VoIP application . There might then be instructions to capture the first set of data and or to propagate the first function call for reception by the API. By propagating the function call to the API the capture component can avoid disrupting the operation of the VoIP application and therefore can avoid detection by a user of the VoIP application in accordance with some embodiments .

In certain embodiments the audio capture component further comprises instructions to intercept a second function call from the VoIP application to the API the second function call might comprise information about a second set of data comprising and or representing an audio output stream from the VoIP application . Merely by way of example the information about the second set of data might comprise a location of the output buffer so that the API and or a multimedia dll which might comprise the API can obtain the second set of data comprising the audio output stream at the output buffer. In other cases the second set of data might comprise the output stream itself . Hence in some cases there may be instructions to identify the audio output buffer . The audio stream capture component might also capture the audio output stream from the buffer from the second function call etc. and or propagate the second function call for reception by the API. In a particular embodiment the audio capture component comprises instructions to transmit the first set of data and or the second set of data for reception by the audio mixer component .

The audio mixer component in some embodiments comprises a second set of instructions executable by the processor. The second set of instructions might include instructions to receive the first and or second sets of data e.g. from the audio stream capture component . In some cases the second set of instructions includes instructions to instructions to synchronize the first set of data with the second set of data to re create a voice conversation handled by the VOIP application.

The audio storage component might comprise a third set of instructions executable by the processor. The third set of instructions can include inter alia instructions to compress the re created voice conversation and or instructions to save the re created voice conversation to a storage medium . In some cases the third set of instructions further comprises instructions to transmit the re created voice conversation for reception by a monitoring server . Merely by way of example as described in more detail below in a set of embodiments the system may be used in a monitoring system and or captured audio events including without limitation captured conversations input data to an audio application and or output data from an audio application may be transmitted to a monitoring server for analysis and or replay.

The method generally may comprise capturing one or more sets of input and or output data from an audio application. In some cases the data may be captured from function calls from the audio application to a device driver and or an API thereof . In another set of embodiments however capturing input data can comprise capturing data from one or more buffers used by the audio application perhaps based on information received from one or more function calls between an audio application and a device driver. In a set of embodiments for example capturing the input data may comprise obtaining the input data from a memory address e.g. a buffer used by the audio application to store input data after the data has been processed by the audio application but before it has been purged by the device driver s API and or by a multimedia dll which might comprise the API . Similarly output data may be captured from an audio output buffer based perhaps on a function call informing the device driver s API and or multimedia dll that an audio stream is available at the output buffer.

This procedure may be used in some cases because the audio streams themselves might not ever be transmitted in a function call that can be intercepted. Rather in many operating systems the audio application provides e.g. via function call a memory address for a buffer at which such information should be stored for input or can be obtained for output and the device driver and or an API for the driver and or a multimedia dll writes the data directly to and or obtains the data directly from the memory address. In some cases a multimedia dll provides the API for the driver. In other cases a multimedia dll might intermediate between the audio application and the driver s API.

Hence in a set of embodiments the method might comprise establishing a set of API hooks block which can allow the monitoring application and or an audio capture component thereof to intercept calls between one or more audio device drivers and or a multimedia dll providing access to those drivers as described with respect to below for example. The method may further comprise intercepting an initial function call from the application to the device driver and or an API provided by the driver and or a multimedia dll block . Although the term initial function call is used herein the term initial is not meant necessarily to convey that the function call is the very first function call made by the application. Instead the term initial function call is used to mean an initialization call in which the application provides to the device driver the memory address of its input buffer. Based perhaps on this initial function call then the audio input buffer and or the location in memory thereof for the application can be identified block .

At block the monitoring application and or a component thereof might intercept a first function call from the audio application to the device driver. The term first is used here merely as a nominative and should not be interpreted as implying a chronological order. As noted above the initial function call generally will occur prior in time to the first function call since it may be required in order for the driver to know where to store the input data. The first function call in many cases serves to inform the driver that the audio application has processed the input data at the input buffer such that the audio application is ready for the buffer to be purged and for more input data if available to be stored at that location. By intercepting this call the monitoring application can access the memory location which may have been identified as described above from an initial function call and capture the input data stored there block before the data is replaced by the driver with new data. Other procedures may be used to capture the input data. Merely by way of example in some cases if the input data is provided from the driver and or a multimedia dll in a data stream to the audio application that data stream might be intercepted using a technique similar to the API hooks described below. 

The first function call also may be propagated to the device driver block so that for example the interaction between the audio application and the driver can continue without interference. In some cases a second function call from the application to the device driver can be intercepted block . Once again the term second is used here merely as a nominative and should not be interpreted as implying a chronological order. Indeed in some cases the interception of the second function call may occur prior in time to the interception of the initial and or first function calls. This second function call generally will comprise information about a set of data comprising an audio output stream from the audio application. Merely by way of example in some cases the second function call will provide a reference to an audio output buffer of the audio application where the device driver and or a multimedia dll can access the audio output stream. In other embodiments the second function might actually comprise the audio output stream. 

In some embodiments then the method can comprise identifying an audio output buffer block based perhaps on information from the second function call. The second set of data which again might comprise the audio output stream may then be captured block e.g. from the buffer identified by the second function call and or from the call itself.

The procedures used to capture input data and output data collectively including some or all of blocks can be repeated as needed to capture multiple sets of input and or output data from the audio application. At some point for example based on time and or data size threshold and or when the application stops making function calls for a period of time is closed etc. the data sets may be synchronized block as appropriate. This synchronization can function to re create a set of bi directional audio streams such as a voice conversation to cite but one example . In a set of embodiments the input and output data together may comprise a set of isochronous audio streams such that synchronizing the data sets comprises ensuing that the timing of the re created streams is consistent with the timing of the original audio streams e.g. conversation allowing for accurate replay of the streams together. The synchronization process in some embodiments may combine one or more input streams and or one or more output streams into a single isochronous stream.

In accordance with some embodiments the audio streams and or combined audio stream may be compressed block using any suitable compression algorithm. Merely by way of example in a set of embodiment the audio stream s output from an audio mixer may be streamed into a audio compression process which samples and compresses the audio stream producing a compressed audio stream which is formatted into any suitable audio file format such as MP3 WAV etc. .

Further the stream s may be stored at a storage medium which may be local to the monitored computer and or remote from the monitored computer block . Merely by way of example in a set of embodiments storing an audio stream may comprise storing the stream at a location accessible with a network which might be the Internet . In a particular set of embodiments one or more audio streams may be transmitted block e.g. to a monitoring server for analysis and or replay.

Merely by way of example in some cases the monitoring application may be part of a monitoring system such as the systems described in U.S. patent application Ser. Nos. 11 556 968 11 556 968 11 557 007 11 557 025 11 556 984 each of which is already incorporated by reference as well as other monitoring systems.

For instance illustrates an exemplary system for monitoring a computer. The system comprises a client computer also referred to herein as a monitored computer which comprises an operating system . The operating system can be virtually any operating system including without limitation any of the various varieties of Microsoft Windows Apple Macintosh OS UNIX and or any derivative operating systems such as BSD Linux etc. and or the like. The client also comprises an event monitoring agent the event monitoring agent is capable of monitoring analyzing and or collecting events in accordance with methods of the invention as described in further detail below. A monitoring agent may comprise a plurality of functional components including without limitation the components described with respect to herein as well as in some cases those described in detail in U.S. patent application Ser. No. 11 557 025 already incorporated by reference. It should be noted however that the structural organization of the monitoring agent is discretionary and can vary according to different embodiments of the invention. 

In a set of embodiments the monitoring agent may store in an event cache as described in more detail below the content and context of some or all events that are generated by a user and or by the operating system an application program etc. when utilizing the monitored client computer . In particular the event cache may be used to store representations of audio events including without limitation audio input and or output data from an audio application as well as re created audio streams based on such data . At certain times but possibly not always the client may be in communication with a monitoring server computer which can be in communication with the event cache and or the monitoring agent although such communications may not be apparent to the user of the client as described elsewhere herein. The monitoring server computer may comprise any appropriate operating system including without limitation those described above as well as monitoring server application which interacts with the monitoring agent and or event cache . The monitoring server may provide other services as well including without limitation an event replay service as described more fully in U.S. patent application Ser. No. 11 556 968 already incorporated by reference. Hence in some embodiments a replay workstation may be used to replay captured audio events and or streams. In a set of embodiments the monitoring server communicates with the client using an IP based connection such as via the Internet etc. .

The client may also be in communication with a variety of devices including without limitation locally connected devices including merely by way of example digital sources such as cameras etc. thumb drives and other transient storage devices and external hard drives network connections to the Internet and or other online services WANs and or the like LAN resources such as network servers printers and or network storage to name but a few examples . In addition the client may comprise and or be in communication with a variety of local devices both physical and virtual such as internal storage display devices input devices such as a keyboard and or mouse as well as audio input devices described herein to name a few examples output devices including without limitation audio output devices described herein and or a clipboard which can be used to hold data cut and or copied from an application or the operating system .

As illustrated by in some embodiments the monitoring agent is configured to capture selected events which can include audio events in accordance with embodiments of the invention occurring at the client . Representations of captured events then may be stored at the event cache . As described below in some cases a representation of a particular event may comprise a hash computed from a set of rich data including for example audio data associated with the event. The stored representations of the events then can be transferred to the monitoring server when connectivity is established between the monitoring server and the client and or at another appropriate time .

The Windows Multi Media dll which usually is shared by all audio enabled applications follows the Microsoft Portable Execution format which is a published Microsoft standard format and interface. Each dll provides an Export Address Table that is a list of externally available function names and their memory addresses within the dll where the called function should be passed control.

An application wishing to make use of the functions within a dll similarly provides an Import Address Table which contains a list of the names of the functions and the associated dll that it wishes to make use of. When the application is loaded the Windows operating system will find and or load the dll that contains the functions referenced by the application and will enter into the Import Address Table of the application the memory address of each function call retrieved from the Export Address Table of the appropriate target dll e.g. that offers the function.

The audio stream capture program which might comprise one or more components such as the audio stream capture component of the monitoring software program described above makes use of this well known structure to insert itself between the application and the Windows Multi Media dll . The audio stream capture program might locates the application program that is to be monitored and or the Import Address Table within the application program which as noted above uses the services provided by the Windows operating system for performing these functions.

The audio stream capture program takes the target address for each Windows Multi Media dll of interest called by the application and saves that function call name and address as part of the Import Address Table of the audio stream capture program . The audio stream program might then substitute in the Import Address Table of the application an address that references an equivalent internal routine within the audio stream capture program .

Hence when the application makes a dll function call to the Windows Multi Media dll the call is first passed to the audio capture program which after processing the contents of the function call passes and or propagates the call on to its original destination function in the Windows Multi Media dll . In a set of embodiments some or all function and API call interceptions used for audio capture procedures are performed in this same manner which referred to herein as an API hook. 

WaveInStart is issued by the audio enabled application program when the application is ready to start recording audio information the function is used to signify. Because this function call has been intercepted using an API hook the audio stream capture application is able to prepare itself by allocating the necessary resources to start recording input audio and saving output audio streams. The details of how the audio input and output streams are captured and processed are described below.

The WaveInStart dll function call is then propagated to the WinMM dll which in turn calls the Windows audio drivers to prepare the audio hardware system which might include one or more audio devices such as sound cards chipsets microphones speakers etc. .

When the audio enabled application program wishes to finish using the audio sub system and release resources it calls the WaveInReset function which is also the subject of an API hook .

Upon detection of the WinInReset function call the audio stream capture program will release its resources and the WinInReset function call will be passed to the WinMM dll and down through the audio driver to the installed sound sub system . In some embodiments because of the way the API hook is inserted into the chain of function calls neither the audio enabled application nor any of the operating system or hardware components need be aware of the intercept.

An API hook is installed as described above for the WaveOutWrite and the WaveInUnprepareHeader function calls used by the audio enabled application to handle the output and input audio streams respectively.

First referring to we will describe how the output stream is intercepted and processed. The audio enabled application sends an output audio stream in buffers to the WinMM dll WaveOutWrite function call . The API hook might intercept the function call and pass a copy of the output audio buffer s contents on for audio processing. Following the intercept the WaveOutWrite function call will be passed on to the WinMM dll and down the normal path to the audio sub system .

In some embodiments the input stream to the audio application may be intercepted in a slightly different manner. When the audio enabled application wishes to receive an audio input stream from the WinMM dll the application issues a WaveInPrepareHeader function call not shown on to the WinMM dll which provides and prepares a buffer allocated inside the audio enabled application into which the input audio stream will be delivered. When the audio enabled application has finished processing the input audio stream the WinMM.dll normally requires the audio enabled application to make a WaveInUnprepareHeader function call to WinMM dll which then generally will release the buffer and or permit its reuse. As part of the WaveInUnprepareHeader function call the audio enabled application passes the address of the buffer allocated by the audio enabled application . Hence in a set of embodiments the WaveInPrepareHeader may serve as the initial function call described above and or interception of this call can provide the memory address where input audio data is stored. 

The API hook thus may be configured to intercept the WaveInUnprepareHeader function call and or to access the input audio buffer capture a copy of the contents of the buffer and or pass a copy those contents e.g. input data on to the audio capture application for processing. Following the intercept the WaveInUnprepareHeader function call may be passed on to the WinMM dll so as to allow the interaction between the audio application and the WinMM dll to proceed.

The audio out stream and or the audio in stream may be passed into an audio mixer process which may be similar to the audio mixer component described above . In a particular set of embodiments a Windows multimedia timer might be used to synchronize the two audio streams as they are processed by the audio mixer .

Following processing by the audio mixer a mixed audio stream which might be produced by the mixer from the audio input data and or output streams may be passed into sampler such as a pulse code modulated PCM sampler process to name but one example which may be configured to sample the mixed audio stream at the rate required for input into an audio compression process . In a particular embodiment under Windows the audio processing will utilize available codecs such as for example the True Speech or Fraunhoffer MP3 audio compression routines to name but two examples. Such routines may exist on the client system and or may be installed by embodiments of the invention.

Finally the compressed audio stream may be formatted using any standard and or proprietary audio file format and or saved on non volatile storage . Optionally the audio file may be transmitted e.g. to a monitoring server as described above for analysis and or replay.

The computer system also can comprise software elements shown as being currently located within a working memory including an operating system and or other code such as an audio enabled application program various device drivers and or dlls used by embodiments of the invention and or an application program as described above and or designed to implement methods of the invention. Those skilled in the art will appreciate that substantial variations may be made in accordance with specific embodiments and or requirements. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both.

While the invention has been described with respect to exemplary embodiments one skilled in the art will recognize that numerous modifications are possible. For example the methods and processes described herein may be implemented using hardware components software components and or any combination thereof. Further while various methods and processes described herein may be described with respect to particular structural and or functional components for ease of description methods of the invention are not limited to any particular structural and or functional architecture but instead can be implemented on any suitable hardware firmware and or software configuration. Similarly while various functionality is ascribed to certain system components unless the context dictates otherwise this functionality can be distributed among various other system components in accordance with different embodiments of the invention.

Moreover while the procedures comprised in the methods and processes described herein are described in a particular order for ease of description unless the context dictates otherwise various procedures may be reordered added and or omitted in accordance with various embodiments of the invention. Moreover the procedures described with respect to one method or process may be incorporated within other described methods or processes likewise system components described according to a particular structural architecture and or with respect to one system may be organized in alternative structural architectures and or incorporated within other described systems. Hence while various embodiments are described with or without certain features for ease of description and to illustrate exemplary features the various components and or features described herein with respect to a particular embodiment can be substituted added and or subtracted from among other described embodiments unless the context dictates otherwise. Consequently although the invention has been described with respect to exemplary embodiments it will be appreciated that the invention is intended to cover all modifications and equivalents within the scope of the following claims.

