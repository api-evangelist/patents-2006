---

title: System and method for inband management of a virtual disk
abstract: The present invention provides a system and method for inband management of a virtual disk. A novel volume information command, which is a vendor-specific SCSI command, is sent by a client to a storage appliance, in response, generates a data structure containing various path and networking data associated with a vdisk. This data structure is then returned to the requesting client via a SCSI connection. A client may then utilize the returned information for generating snapshots or other data integrity/backup features offered by the storage appliance.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07418569&OS=07418569&RS=07418569
owner: Network Appliance, Inc.
number: 07418569
owner_city: Sunnyvale
owner_country: US
publication_date: 20060419
---
This application is a Continuation of U.S. Ser. No. 10 324 890 filed on Dec. 20 2002 by Herman Lee et al now issued as U.S. Pat. No. 7 069 307.

The present invention relates to storage systems and in particular to managing virtual disks in a storage system.

A storage system is a computer that provides storage service relating to the organization of information on writable persistent storage devices such as memories tapes or disks. The storage system is commonly deployed within a storage area network SAN or a network attached storage NAS environment. When used within a NAS environment the storage system may be embodied as a file server including an operating system that implements a file system to logically organize the information as a hierarchical structure of directories and files on e.g. the disks. Each on disk file may be implemented as a set of data structures e.g. disk blocks configured to store information such as the actual data for the file. A directory on the other hand may be implemented as a specially formatted file in which information about other files and directories are stored.

The file server or filer may be further configured to operate according to a client server model of information delivery to thereby allow many client systems clients to access shared resources such as files stored on the filer. Sharing of files is a hallmark of a NAS system which is enabled because of its semantic level of access to files and file systems. Storage of information on a NAS system is typically deployed over a computer network comprising a geographically distributed collection of interconnected communication links such as Ethernet that allow clients to remotely access the information files on the filer. The clients typically communicate with the filer by exchanging discrete frames or packets of data according to pre defined protocols such as the Transmission Control Protocol Internet Protocol TCP IP .

In the client server model the client may comprise an application executing on a computer that connects to the filer over a computer network such as a point to point link shared local area network wide area network or virtual private network implemented over a public network such as the Internet. NAS systems generally utilize file based access protocols therefore each client may request the services of the filer by issuing file system protocol messages in the form of packets to the file system over the network identifying one or more files to be accessed without regard to specific locations e.g. blocks in which the data are stored on disk. By supporting a plurality of file system protocols such as the conventional Common Internet File System CIFS the Network File System NFS and the Direct Access File System DAFS protocols the utility of the filer may be enhanced for networking clients.

A SAN is a high speed network that enables establishment of direct connections between a storage system and its storage devices. The SAN may thus be viewed as an extension to a storage bus and as such an operating system of the storage system enables access to stored information using block based access protocols over the extended bus . In this context the extended bus is typically embodied as Fibre Channel FC or Ethernet media adapted to operate with block access protocols such as Small Computer Systems Interface SCSI protocol encapsulation over FC or TCP IP Ethernet.

A SAN arrangement or deployment allows decoupling of storage from the storage system such as an application server and some level of information storage sharing at the application server level. There are however environments wherein a SAN is dedicated to a single server. In some SAN deployments the information is organized in the form of databases while in others a file based organization is employed. Where the information is organized as files the client requesting the information maintains file mappings and manages file semantics while its requests and server responses address the information in terms of block addressing on disk using e.g. a logical unit number lun .

Some SAN arrangements utilize storage appliances that implement virtual disks vdisks which are encapsulated data containers stored within a file system. An example of such a storage appliance is described in U.S. patent application Ser. No. 10 215 917 entitled MULTI PROTOCOL STORAGE APPLIANCE THAT PROVIDES INTEGRATED SUPPORT FOR FILE AND BLOCK ACCESS PROTOCOLS by Brian Pawlowski et al. the contents of which are hereby incorporated by reference. Similarly vdisks are described in U.S. patent application Ser. No. 10 216 453 entitled STORAGE VIRTUALIZATION BY LAYERING VIRTUAL DISK OBJECTS ON A FILE SYSTEM by Vijayan Rajan et al. the contents of which are hereby incorporated by reference.

In implementations using vdisks an underlying file system storing the vdisks often has additional data integrity and or backup features. For example the Write Anywhere File Layout WAFL file system available from Network Appliance Inc. of Sunnyvale Calif. permits snapshots to be generated of a file system containing a vdisk. Snapshots are further described in 3002 by David Hitz et al. published by Network Appliance Inc. and in U.S. Pat. No. 5 819 292 entitled METHOD FOR MAINTAINING CONSISTENT STATES OF A FILE SYSTEM AND FOR CREATING AN USER ACCESSABLE READ ONLY COPIES OF A FILE SYSTEM by David Hitz et al. which are hereby incorporated by reference.

 Snapshot is a trademark of Network Appliance Inc. It is used for purposes of this patent to designate a persistent consistency point CP image. A persistent consistency point image PCPI is a point in time representation of the storage system and more particularly of the active file system stored on a storage device e.g. on disk or another persistent memory and having a name or other identifier that distinguishes it from other PCPIs taken at other points in time. A PCPI can also include other information metadata about the active file system at the particular point in time for which the image is taken. The terms PCPI and snapshot shall be used interchangeably throughout this patent without abrogation of Network Appliance s trademark rights.

Specifically a snapshot is a restorable version of the file system created at a pre determined point in time. Snapshots are generally created on some user defined regular schedule. The snapshot is stored on disk along with the active file system and is called into a buffer cache of the storage appliance as requested by a storage operating system. In known embodiments of file systems containing snapshots clients may utilize a remote procedure call RPC to instruct the file system to generate a snapshot of a given volume or file. To generate a snapshot via RPC the client must be able to identify the storage appliance its network address the volume and the file or vdisk that is to be snapshotted. When using NAS based protocols the client can easily generate the required information from the use of file handles and other NAS specific data structures. However a noted disadvantage of a client of a multi protocol storage appliance that utilizes SAN networking protocols such as SCSI is that the vdisk appears as a lun to the client. Thus the client cannot identify the multi protocol storage appliance and or the volume containing a given vdisk. The client may desire such information in order to utilize the storage appliance s data integrity or backup functionality with regards to the active file system for example by generating a snapshot of the file system storing the vdisk.

Therefore it is an object of the present invention to provide a system and method for a client to identify the location and storage appliance associated with a vdisk.

The disadvantages of the prior art are overcome by providing a system and method for inband management of virtual disks vdisks stored on a storage system such as a multi protocol storage appliance. Specifically an inband volume information SCSI command is disclosed. The inband volume information command when sent to a storage appliance by a client causes the storage appliance to return via the SCSI protocol volume and file information of a given vdisk. The inband volume information command is in an exemplary embodiment embodied as a vendor specific Small Computer Systems Interface SCSI command data block. The storage appliance and in particular SCSI target code executing within a storage operating system on the storage appliance responds to the receipt of the inband volume information command by returning a data structure. This data structure comprises header information and a set of data pages each page identifying an attribute of the vdisk.

A client utilizing a vdisk in a storage system may by the use of the novel inband volume information command obtain the requisite information for generating a remote procedure call RPC requesting generation of a snapshot by the storage appliance. Thus a client may utilize the added data integrity and backup features of the storage appliance s implementation of a file system. In alternate embodiments the returned information may be utilized by other storage management applications that work to manage the host integration of a storage appliance.

Whereas clients of a NAS based network environment have a storage viewpoint of files the clients of a SAN based network environment have a storage viewpoint of blocks or disks. To that end the multi protocol storage appliance presents exports disks to SAN clients through the creation of logical unit numbers luns or vdisk objects. A vdisk object hereinafter vdisk is a special file type that is implemented by the virtualization system and translated into an emulated disk as viewed by the SAN clients. The multi protocol storage appliance thereafter makes these emulated disks accessible to the SAN clients through controlled exports as described further herein.

In the illustrative embodiment the memory comprises storage locations that are addressable by the processor and adapters for storing software program code and data structures. The processor and adapters may in turn comprise processing elements and or logic circuitry configured to execute the software code and manipulate the various data structures. The storage operating system portions of which are typically resident in memory and executed by the processing elements functionally organizes the storage appliance by inter alia invoking storage operations in support of the storage service implemented by the appliance. It will be apparent to those skilled in the art that other processing and memory implementations including various computer readable media may be used for storing and executing program instructions pertaining to the inventive system and method described herein.

The network adapter couples the storage appliance to a plurality of clients over point to point links wide area networks virtual private networks implemented over a public network Internet or a shared local area network hereinafter referred to as an illustrative Ethernet network . Therefore the network adapter may comprise a network interface card NIC having the mechanical electrical and signaling circuitry needed to connect the appliance to a network switch such as a conventional Ethernet switch . For this NAS based network environment the clients are configured to access information stored on the multi protocol appliance as files. The clients communicate with the storage appliance over network by exchanging discrete frames or packets of data according to pre defined protocols such as the Transmission Control Protocol Internet Protocol TCP IP .

The clients may be general purpose computers configured to execute applications over a variety of operating systems including the UNIX and Microsoft Windows operating systems. Client systems generally utilize file based access protocols when accessing information in the form of files and directories over a NAS based network. Therefore each client may request the services of the storage appliance by issuing file access protocol messages in the form of packets to the appliance over the network . For example a client running the Windows operating system may communicate with the storage appliance using the Common Internet File System CIFS protocol. On the other hand a client running the UNIX operating system may communicate with the multi protocol appliance using either the Network File System NFS protocol over TCP IP or the Direct Access File System DAFS protocol over a virtual interface VI transport in accordance with a remote DMA RDMA protocol over TCP IP. It will be apparent to those skilled in the art that other clients running other types of operating systems may also communicate with the integrated multi protocol storage appliance using other file access protocols.

The storage network target adapter also couples the multi protocol storage appliance to clients that may be further configured to access the stored information as blocks or disks. For this SAN based network environment the storage appliance is coupled to an illustrative Fibre Channel FC network . FC is a networking standard describing a suite of protocols and media that is primarily found in SAN deployments. The network target adapter may comprise a FC host bus adapter HBA having the mechanical electrical and signaling circuitry needed to connect the appliance to a SAN network switch such as a conventional FC switch . In addition to providing FC access the FC HBA may offload fibre channel network processing operations for the storage appliance.

The clients generally utilize block based access protocols such as the Small Computer Systems Interface SCSI protocol when accessing information in the form of blocks disks or vdisks over a SAN based network. SCSI is a peripheral input output I O interface with a standard device independent protocol that allows different peripheral devices such as disks to attach to the storage appliance . In SCSI terminology clients operating in a SAN environment are initiators that initiate requests and commands for data. The multi protocol storage appliance is thus a target configured to respond to the requests issued by the initiators in accordance with a request response protocol. The initiators and targets have endpoint addresses that in accordance with the FC protocol comprise worldwide names WWN . A WWN is a unique identifier e.g. a node name or a port name consisting of an 8 byte number.

The multi protocol storage appliance supports various SCSI based protocols used in SAN deployments including SCSI encapsulated over TCP iSCSI and SCSI encapsulated over FC FCP . The initiators hereinafter clients may thus request the services of the target hereinafter storage appliance by issuing iSCSI and FCP messages over the network to access information stored on the disks. It will be apparent to those skilled in the art that the clients may also request the services of the integrated multi protocol storage appliance using other block access protocols. By supporting a plurality of block access protocols the multi protocol storage appliance provides a unified and coherent access solution to vdisks luns in a heterogeneous SAN environment.

The storage adapter cooperates with the storage operating system executing on the storage appliance to access information requested by the clients. The information may be stored on the disks or other similar media adapted to store information. The storage adapter includes I O interface circuitry that couples to the disks over an I O interconnect arrangement such as a conventional high performance FC serial link topology. The information is retrieved by the storage adapter and if necessary processed by the processor or the adapter itself prior to being forwarded over the system bus to the network adapters where the information is formatted into packets or messages and returned to the clients.

Storage of information on the appliance is preferably implemented as one or more storage volumes e.g. VOL that comprise a cluster of physical storage disks defining an overall logical arrangement of disk space. The disks within a volume are typically organized as one or more groups of Redundant Array of Independent or Inexpensive Disks RAID . RAID implementations enhance the reliability integrity of data storage through the writing of data stripes across a given number of physical disks in the RAID group and the appropriate storing of redundant information with respect to the striped data. The redundant information enables recovery of data lost when a storage device fails. It will be apparent to those skilled in the art that other redundancy techniques such as mirroring may be used in accordance with the present invention.

Specifically each volume is constructed from an array of physical disks that are organized as RAID groups and . The physical disks of each RAID group include those disks configured to store striped data D and those configured to store parity P for the data in accordance with an illustrative RAID 4 level configuration. It should be noted that other RAID level configurations e.g. RAID 5 are also contemplated for use with the teachings described herein. In the illustrative embodiment a minimum of one parity disk and one data disk may be employed. However a typical implementation may include three data and one parity disk per RAID group and at least one RAID group per volume.

To facilitate access to the disks the storage operating system implements a write anywhere file system of a novel virtualization system that virtualizes the storage space provided by disks . The file system logically organizes the information as a hierarchical structure of named directory and file objects hereinafter directories and files on the disks. Each on disk file may be implemented as set of disk blocks configured to store information such as data whereas the directory may be implemented as a specially formatted file in which names and links to other files and directories are stored. The virtualization system allows the file system to further logically organize information as a hierarchical structure of named vdisks on the disks thereby providing an integrated NAS and SAN appliance approach to storage by enabling file based NAS access to the named files and directories while further enabling block based SAN access to the named vdisks on a file system based storage platform. The file system simplifies the complexity of management of the underlying physical storage in SAN deployments.

As noted a vdisk is a special file type in a volume that derives from a plain regular file but that has associated export controls and operation restrictions that support emulation of a disk. Unlike a file that can be created by a client using e.g. the NFS or CIFS protocol a vdisk is created on the multi protocol storage appliance via e.g. a user interface UI as a special typed file object . Illustratively the vdisk is a multi inode object comprising a special file inode that holds data and at least one associated stream inode that holds attributes including security information. The special file inode functions as a main container for storing data such as application data associated with the emulated disk. The stream inode stores attributes that allow luns and exports to persist over e.g. reboot operations while also enabling management of the vdisk as a single disk object in relation to SAN clients. An example of a vdisk and its associated inodes is described in the above incorporated U.S. patent application Ser. No. 10 216 453 titled STORAGE VIRTUALIZATION BY LAYERING VDISKS ON A FILE SYSTEM.

In the illustrative embodiment the storage operating system is preferably the NetApp Data ONTAP operating system available from Network Appliance Inc. Sunnyvale Calif. that implements a Write Anywhere File Layout WAFL file system. However it is expressly contemplated that any appropriate storage operating system including a write in place file system may be enhanced for use in accordance with the inventive principles described herein. As such where the term WAFL is employed it should be taken broadly to refer to any storage operating system that is otherwise adaptable to the teachings of this invention.

As used herein the term storage operating system generally refers to the computer executable code operable on a computer that manages data access and may in the case of a multi protocol storage appliance implement data access semantics such as the Data ONTAP storage operating system which is implemented as a microkernel. The storage operating system can also be implemented as an application program operating over a general purpose operating system such as UNIX or Windows NT or as a general purpose operating system with configurable functionality which is configured for storage applications as described herein.

In addition it will be understood to those skilled in the art that the inventive system and method described herein may apply to any type of special purpose e.g. storage serving appliance or general purpose computer including a standalone computer or portion thereof embodied as or including a storage system. Moreover the teachings of this invention can be adapted to a variety of storage system architectures including but not limited to a network attached storage environment a storage area network and disk assembly directly attached to a client or host computer. The term storage system should therefore be taken broadly to include such arrangements in addition to any subsystems configured to perform a storage function and associated with other equipment or systems.

An iSCSI driver layer provides block protocol access over the TCP IP network protocol layers while a FC driver layer operates with the FC HBA to receive and transmit block access requests and responses to and from the integrated storage appliance. The FC and iSCSI drivers provide FC specific and iSCSI specific access control to the luns vdisks and thus manage exports of vdisks to either iSCSI or FCP or alternatively to both iSCSI and FCP when accessing a single vdisk on the multi protocol storage appliance. In addition the storage operating system includes a disk storage layer that implements a disk storage protocol such as a RAID protocol and a disk driver layer that implements a disk access protocol such as e.g. a SCSI protocol.

Bridging the disk software layers with the integrated network protocol stack layers is a virtualization system . The virtualization system is implemented in the illustrative embodiment by a file system cooperating with virtualization modules illustratively embodied as e.g. vdisk module and SCSI target module . It should be noted that the vdisk module file system and SCSI target module can be implemented in software hardware firmware or a combination thereof. The vdisk module interacts with the file system to provide a data path from the block based SCSI target module to blocks managed by the file system. In essence the vdisk module manages SAN deployments by among other things implementing a comprehensive set of vdisk lun commands are converted to primitive file system operations primitives that interact with the file system and the SCSI target module to implement the vdisks.

The SCSI target module in turn initiates emulation of a disk or lun by providing a mapping procedure that translates logical block access to luns specified in access requests into virtual block access to the special vdisk file types and for responses to the requests vdisks into luns. The SCSI target module is illustratively disposed between the iSCSI and FC drivers and the file system to thereby provide a translation layer of the virtualization system between the SAN block lun space and the file system space where luns are represented as vdisks. By disposing SAN virtualization over the file system the multi protocol storage appliance reverses the approaches taken by prior systems to thereby provide a single unified storage platform for essentially all storage access protocols.

The SCSI target module also in the illustrative embodiment implements the novel inband volume information command described further below. The SCSI target code responds to SCSI commands issued by clients of the storage appliance. In the illustrative embodiment the SCSI target code generates the appropriate data structure response to receiving an inband volume information command. This response data structure described further below includes the data necessary for a client to generate remote procedure call RPC operations to create and manage snapshots of a vdisk.

In addition the SCSI target module includes a set of LUN maps and vdisk descriptors . The LUN maps one for each client connected to the storage appliance provides a mechanism for mapping virtual luns to physical luns as described further below. The vdisk descriptors are data structures described further below containing various data relating to each individual vdisk specifically data related to the file within the file system on the storage appliance containing the vdisk.

The file system provides capabilities for use in file based access to information stored on the storage devices such as disks. In addition the file system provides volume management capabilities for use in block based access to the stored information. That is in addition to providing file system semantics such as differentiation of storage into discrete objects and naming of those storage objects the file system provides functions normally associated with a volume manager. As described herein these functions include i aggregation of the disks ii aggregation of storage bandwidth of the disks and iii reliability guarantees such as mirroring and or parity RAID to thereby present one or more storage objects layered on the file system. A feature of the multi protocol storage appliance is the simplicity of use associated with these volume management capabilities particularly when used in SAN deployments.

The file system illustratively implements the WAFL file system having an on disk format representation that is block based using e.g. 4 kilobyte kB blocks and using inodes to describe the files. The WAFL file system uses files to store metadata describing the layout of its file system these metadata files include among others an inode file. A file handle i.e. an identifier that includes an inode number is used to retrieve an inode from disk. A description of the structure of the file system including the inode file is provided in U.S. Pat. No. 5 819 292 titled METHOD FOR MAINTAINING CONSISTENT STATES OF A FILE SYSTEM AND FOR CREATING USER ACCESSIBLE READ ONLY COPIES OF A FILE SYSTEM by David Hitz et al. issued Oct. 6 1998 which patent is hereby incorporated by reference as though fully set forth herein.

Broadly stated all inodes of the file system are organized into the inode file. A file system FS info block specifies the layout of information in the file system and includes an inode of a file that includes all other inodes of the file system. Each volume has an FS info block that is preferably stored at a fixed location within e.g. a RAID group of the file system. The inode of the root FS info block may directly reference point to blocks of the inode file or may reference indirect blocks of the inode file that in turn reference direct blocks of the inode file. Within each direct block of the inode file are embedded inodes each of which may reference indirect blocks that in turn reference data blocks of a file or vdisk.

As noted the virtualization system aggregates bandwidth of the disks without requiring user knowledge of the physical construction of those disks. The file system is configured to write store data on the disks as long continuous stripes across those disks in accordance with input output I O storage operations that aggregate the bandwidth of all the disks of a volume for stored data. When information is stored or retrieved from the vdisks the I O operations are not directed to disks specified by a user. Rather those operations are transparent to the user because the file system stripes that data across all the disks of the volume in a reliable manner according to its write anywhere layout policy. As a result of virtualization of block storage I O bandwidth to a vdisk can be the maximum bandwidth of the underlying physical disks of the file system regardless of the size of the vdisk unlike typical physical implementations of luns in conventional block access products. 

Moreover the virtualization system leverages file system placement management and block allocation policies to make the vdisks function correctly within the multi protocol storage appliance. The vdisk block placement policies are a function of the underlying virtualizing file system and there are no permanent physical bindings of file system blocks to SCSI logical block addresses in the face of modifications. The vdisks may be transparently reorganized to perhaps alter data access pattern behavior.

An exemplary flow structure for processing SCSI or block based protocol requests is shown in . This flow structure shows that initially a command block is received by the storage operating system. This command block which in the example of a SCSI based system is a command Data Block described further below will be matched with an initiator data structure . The initiator data structure is associated with each client or SCSI initiator of the storage appliance. The initiator data structure contains initiator specific data for use by the storage appliance and serving data access requests. The initiator data structure also contains various data associated with the initiator including a pointer to a lun map .

An exemplary lun map shown in maps virtual luns VLUN to physical luns PLUNs . A VLUN is a lun returned to a given SCSI initiator in a storage environment. An initiator may be assigned a set of vluns starting from zero and progressing up to the number of luns that the initiator is connected thereto. Conversely a PLUN is an actual lun associated with a vdisk managed by the storage appliance. As the storage appliance is an intermediary between clients and vdisks it must manage a larger set of luns. The lun map has in the exemplary embodiment two columns. The first column VLUN identifies the virtual logical unit number that a given SCSI initiator is accessing. Each SCSI initiator attached to the storage appliance has its own lun address space. The second column is comprised of physical luns mapped to the virtual luns . Thus in the example shown in VLUN is mapped to PLUN . Similarly VLUN is mapped to PLUN . The use of this VLUN to PLUN mapping enables each SCSI initiator to address a given device with an initiator specific lun value. The storage appliance utilizes the LUN map to translate a given VLUN from a SCSI initiator to a physical LUN attached to the storage appliance.

Once the storage operating system has identified the PLUN that the command is directed towards the storage operating system identifies the vdisk descriptor associated with that PLUN. shows an exemplary set of linked PLUN data objects. Each PLUN data descriptor object contains various data not shown associated with a given vdisk embodied as that PLUN. This information is used by the storage appliance for management of the given vdisk. Each PLUN data descriptor object points to a vdisk descriptor .

Each vdisk managed by a storage appliance has an associated vdisk descriptor includes various data fields for information pertaining to the vdisk. These fields include volume name path name volume number appliance name appliance address and snapshot number . It should be noted that the fields described herein are exemplary only in that additional and or differing fields may be utilized in accordance with various embodiments of the invention. For example the volume name field identifies the volume containing the vdisk. The path name field describes a path on the volume identified in the volume name field to the file containing the vdisk. Thus if the appliance name stored in field is Appliance5 the volume name stored in field is vol0 and the path name stored in field field is vdisks vdisk then the vdisk identified by this vdisk descriptor may be uniquely identified by the fully qualified path Appliance5 vol0 vdisks vdisk. 

The SCSI protocol includes certain operation codes that are considered vendor specific. Generally standard SCSI drivers do not issue commands using these vendor specific operation codes however customized SCSI drivers may use these operation codes to retrieve application specific data. In a typical SCSI driver embodiment the SCSI driver includes a pass through mechanism that allows ordinary applications to issue SCSI pass through commands that request the driver to issue a command using a vendor specific command. The use of SCSI vendor specific operation codes op codes is termed inband SCSI management as the management commands are being sent via the same network path as data access commands and the use of the requests are termed inband SCSI requests. 

It is often desirous of a client to identify the volume and or other storage appliance identification information relating to a particular vdisk. This information is useful when for example the client desires to cause the storage appliance to generate a snapshot of the volume containing the vdisk. Additionally this information may be useful to a client when performing management functions on the storage appliance. This determination can be made by for example examining the vendor and or revision fields of a conventional returned Inquiry SCSI command. For example if the returned Inquiry command identifies the vendor as one that supports snapshots or other features that may be remotely generated then the procedure may decide that the vdisk is capable of supporting snapshots.

The steps of an exemplary procedure for inband management of a vdisk is shown in . Initially in step the client opens a conventional SCSI connection with the vdisk using conventional SCSI commands. The client then issues in step a SCSI Inquiry command to the vdisk. The Inquiry command is a standard SCSI command that obtains information pertaining to the disk. The Inquiry command returns such information as the identification of the vendor the product identification a revision level for the product and several vendor specific values. The format of the Inquiry command description block and return data is well known and described in 3 dated Mar. 28 1997 published by the National Committee for Information Technology Standards. From the returned data of the inquiry command the client can determine if the file system storing the vdisk is capable of supporting snapshots step . It should be noted that other capabilities can be verified and that the use of snapshots is exemplary only.

If the vdisk cannot support snapshots then the procedure is completed step . Otherwise the client issues novel inband volume information command to the vdisk in step . This inband volume information command described further below causes the storage appliance serving the vdisk to return volume information step that identifies various information relating to the storage appliance and volume containing the vdisk. Once the client has the volume information the client may then contact the storage appliance and create a snapshot of the appropriate volume using RPCs in step . An example of a system configured to use RPCs to create snapshots is described in U.S. patent application Ser. No. 10 090 963 entitled SYSTEM AND METHOD FOR CREATING A POINT IN TIME RESTORATION OF A DATABASE FILE by Dennis E. Chapman.

The inband volume information command is in the illustrative embodiment implemented as a special SCSI command using a vendor specific operation code. An exemplary SCSI command descriptor block CDB for the inband volume information command is shown in . The CDB contains in the illustrative embodiment 10 bytes of information. The first byte identifies the operation code opcode identifying this command descriptor block. In the illustrative environment the opcode has a value of 0xC0. The next byte in the CDB is a reserved field . The revision field identifies the revision level of the client s SCSI driver. Two magic bytes and are used to identify various unique features of the SCSI driver for example the vendor generating the SCSI driver. There are also two additional reserved bytes and which are then followed by two allocation length bytes and . The allocation length identifies the maximum number of bytes that the initiator has allocated for return data. Finally an additional reserved byte is utilized. It should be noted that the CDB described herein is exemplary only. As one skilled in the art will appreciate one or more of the reserved bytes may be replaced with a page code to enable the CDB to contain additional information.

In accordance with an illustrative embodiment of the present invention storage appliances and specifically the SCSI target code within storage operating system are programmed to respond to receiving an inband volume information CDB . Generally in accordance with the present invention any SCSI target may be adapted to respond to the novel inband volume information command. Similarly clients executing vendor specific SCSI drivers may utilize an inband volume information CDB to request volume information relating to a particular vdisk.

To request volume information a client transmits an inband volume information CDB to the particular vdisk from which information is desired. In response the storage appliance returns the requested inband volume information. The inband volume information comprises a set of data pages. Each of the data pages has its own unique page code and will be in the exemplary embodiment padded to be word aligned. shows a schematic block diagram of an overall layout of the return volume information. The overall return layout begins with a set of header information and then a sequential listing of pages and described further below.

A schematic block diagram of the exemplary header information is shown in . The header information begins with a four byte sequence and identifying the total data length of the return data . The header information also includes a set of magic values and which identify the returned information as return information. Finally the header includes a revision field which identifies the revision of the SCSI code returning the value.

Data structure identifies the number of 32 bit Internet protocol IP addresses associated with the vdisk. The data structure includes a page code field which in the exemplary embodiment has a value of 0x01. A reserved field is then followed by a two byte length of page value stored in fields and . In the exemplary embodiment a four byte count of the IP addresses found is stored in fields and . Finally a field identifies the particular IP addresses.

Similarly data structure identifies the number of 64 bit Internet protocol addresses associated with the vdisk. The data structure includes a page code field which in the exemplary embodiment has a value of 0x02. A reserved field is then followed by two byte length of page value stored in fields and . In the exemplary embodiment a four byte count of the IP address found is stored in fields and . Finally a field identifying the particular IP addresses.

Similarly qtree name page identifies the name of the qtree containing the vdisk. The page includes a page code field which in the exemplary embodiment has a value of 0x12. Additionally a four byte qtree identifier is stored in fields and and used to identify the unique identification number of the qtree. Finally the page includes a null terminated qtree name in field .

Thus in response to receiving an inband vdisk management command data block the storage appliance serving a given vdisk returns a response that identifies the storage appliance IP address virtual disk path volume name and path qtree and snapshot information concerning the vdisk. From this returned information a client may access the storage appliance and using for example RPCs or other application program interfaces APIs may cause snapshots to be generated of the vdisk. This enables a client to utilize the additional data integrity and recovery features of the file system containing the vdisk. In alternate embodiments the client may utilize the returned information to perform various management functions on the multi protocol storage appliance.

The foregoing description has been directed to specific embodiments of this invention. It will be apparent however that other variations and modifications may be made to the described embodiments with the attainment of some or all of their advantages. For example it is expressly contemplated that the teachings of this invention can be implemented as software including a computer readable medium having program instructions executing on a computer hardware firmware or a combination thereof. Accordingly this description is to be taken only by way of example and not to otherwise limit the scope of the invention. It is thus the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the invention.

