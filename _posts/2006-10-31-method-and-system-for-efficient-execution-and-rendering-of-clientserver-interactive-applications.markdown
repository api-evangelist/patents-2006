---

title: Method and system for efficient execution and rendering of client/server interactive applications
abstract: A method and apparatus for reducing network and processor bandwidth overhead when a client device fetches a Web page from a server. Presentation code is provided to mark view identifiers as well as indicate target areas of the Web page to be updated upon occurrence of selected events. The presentation code is further marked to indicate the target areas. Upon an event at the client the associated view identifier is located as well as the target areas for the event retrieved utilizing the marking information. Only the selected target areas are updated on the current Web page. A server-side optimization causes only the target areas to be rendered upon a request for the Web page.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08965864&OS=08965864&RS=08965864
owner: SAP SE
number: 08965864
owner_city: Walldorf
owner_country: DE
publication_date: 20061031
---
The development of sophisticated Enterprise Resource Planning ERP software applications typically involves the integration of processes running on a client device with processes running on a server. For example a client device may run a browser with an event handling system which communicates with an enterprise server over a network such as the Internet. The server responds to requests generated by the browser and event handing system serves data to the client and or updates presentation of the data on the client device.

Examples of Web based applications include server page technologies xSP such as active server pages ASP from Microsoft or Java Server Pages JSP from Sun Microsystems.

SAP AG provides a Web Application Server WAS that enables new Internet applications to be combined with the transactional operations of ERP. One type of xSP application is referred to herein as a Business Server Page BSP application. In a BSP application the presentation of the enterprise Web based application is organized into elements referred to as BSPs that correspond to individual views i.e. the view element of the Model View Controller MVC design pattern for an application.

In BSP applications the HTML or other presentation language code consumed by the client side browser typically is generated on the server from BSPs that reside on the server and that are arranged in a tree like structure. Presentation code refers to the code that is interpreted by a Graphical User Interface GUI program such as a browser which then displays a GUI based on the presentation code. For example HTML is presentation code in that it provides a set of tags to indicate how data should be formatted and displayed by a browser.

A core part of a BSP application is BSP pages that include program code and HTML which can be compiled by the server upon request to generate presentation code typically HTML . BSP pages are typically arranged in a tree like structure.

Web based applications or xSPs such as BSP applications often provide limited interactivity because event handling requires that data travel a roundtrip from the client to the sever and back to the client. This roundtrip process includes detection of an event on the client device submission of the request to the server processing of the request on the server transmission of the response back to the client and finally post processing such as updating the presentation of data on the client typically through a callback function . If the request response is synchronous e.g. it uses HTTP Post and Get modes the overall behavior of the application may be sluggish due to the blocking nature of the synchronous transaction. In a synchronous environment only one HTTP transaction can be completed at a time. Thus if a first HTTP transaction has been initiated it must be completed before a second HTTP transaction can be completed.

In addition an event that triggers a request from the client to the server is often wasteful of processor bandwidth on the client and on the server because it may require the rendering of unnecessary portions of the HTML code. For example with BSP applications any event occurring on the client may require rendering of the complete BSP tree on the server in the in order processing sequence even though not all areas of the tree may need to be updated.

Processor bandwidth on both the client and server can be expended unnecessarily if pages are rendered that are not necessary as a result of the triggering event. In addition this scenario is wasteful of network bandwidth because any unnecessary rendering on the server requires the transmission of the unnecessarily rendered pages between the client and server.

To improve the interactivity of xSP applications a need exists for a mechanism to render only a portion of presentation code directly correlated to a triggering object.

As described herein only a portion of presentation code directly correlated to a triggering object may be rendered which is herein referred to as delta rendering. The delta refers to the fact that only information that has changed on the Web page need be sent to the client. Such delta rendering may be executed in a synchronous or asynchronous manner.

In a general aspect a method for updating at least one portion of a Web page is described in which an event associated with a triggering object on the Web page is detected and a triggering object identifier and an associated view identifier for the triggering object is determined. An update target area is located based on the associated triggering object identifier the associated view identifier and the target information and the update target area on the Web page is updated.

In another general aspect a system for updating only a portion of a Web page is described. The system includes a Web browser adapted to query a DOM Document Object Model object associated with the Web page a tag library an event handler system and an event intercept system. The tag library provides a first tag for identifying each view on the Web page and further for associating each of a plurality of objects on the Web page with at least one target area on the Web page and a second tag for identifying each target area on the Web page. The event handling system is adapted to receive a triggering object identifier and associated view identifier for a triggering object upon detecting a triggering event. The event intercept system is in communication with the event handling system and is adapted to update at least one target update area associated with the triggering object.

The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features will be apparent from the description and drawings and from the claims.

According to one embodiment Asynchronous JavaScript and XML AJAX can be utilized to provide for delta updates in a Web based or xSP application. From an implementation perspective AJAX may be understood as a design methodology that provides an intermediary between the client and the server. AJAX is a web development technique for creating interactive Web applications that allows the exchange of small amounts of data between a client and a server so that the entire web page does not have to be reloaded each time the user makes a change at the client to the web page served by the server. Using AJAX technology Web pages may respond quicker to user input than they otherwise would respond without with AJAX technology. The AJAX technique utilizes a combination of Extensible Hypertext Markup Language XHTML and Cascading Style Sheets CSS for marking up and styling information the Document Object Model DOM accessed with a client side scripting language such as JavaScript and an object referred to as the XMLHttpRequest object to exchange data asynchronously with the web server.

AJAX applications executed on the client side of a client server system by manipulating the current page within the browser that presents the page using DOM methods. AJAX can be used for a multitude of tasks such as for example updating or deleting records expanding web forms returning simple search queries and or editing category trees and allows theses tasks to be performed without fetching a full page of HTML each time a change is made to a page. Generally only small requests need to be sent to the server and relatively short responses are sent back. This permits the development of applications that are relatively interactive and that featuring relatively responsive user interfaces.

In addition an AJAX application may operate in a asynchronous manner. This means that transactions need not occur in a sequential manner. In addition the asynchronous nature allows AJAX applications to operate in a non blocking manner. Non blocking refers to the fact that multiple transactions may be in progress simultaneously e.g. a first transaction that has not yet completed does not block subsequent transactions . The asynchronous nature of AJAX applications may be established by establishing a direct connection between client and server for example using a non blocking socket connection.

In addition by generating the HTML locally within the browser and only bringing down JavaScript calls and the updated data that is needed to display a modified page Web pages developed using AJAX can appear to load quickly because the payload coming from the server is much smaller in size that it would be for a similar page generate in HTML or in XML.

Client may run browser for presentation of data received from server . Browser provides a Graphical User Interface GUI to allow a user to interact with server via network for example utilizing the HTTP protocol. According to one embodiment browser interprets a presentation language such as HTML and provides a GUI for interacting with BSP application . Client may also execute an event handling system that is responsible for responding to events that occur due to interaction with browser . Event handling system may be integrated with presentation code consumed by browser such as JavaScript code.

Application layer represents a middle layer of a three tier architecture and can provide necessary business logic required system oriented services and connectivity that are required of the business logic. For Web applications a Web server may be used for communication between the client and the server via the Web. The WAS can represent the unification of a Web server and an application server.

As shown in WAS may reside at application layer . The WAS may include a connectivity layer a presentation layer a business layer. a persistence layer and an integration layer . In connectivity layer Web server provides connections to clients through a range of supported protocols and Internet technologies e.g. HTTP HTTPS SOAP etc. .

Presentation layer may provide a GUI for example in the form of a generated HTML page that is interpreted and presented to the user by browser . An HTML page may include both static components e.g. text graphics and dynamic components such as for example Common Gateway Interface CGI scripts JavaScript code server page script languages and servlets.

Business layer may provide the necessary business logic for a Web application. Complex business processes can be implemented on business layer utilizing programming languages and infrastructure supported by the server environment.

Integration layer provides access to business functionalities of external resources. Typically this is realized utilizing various interfaces connectors i.e. middleware communication protocols and support for general data exchange formats e.g. Extensible Markup Language XML .

Generally in sophisticated Web based applications Web pages are generated dynamically. This means that Web pages are not stored statically on the server but are instead generated from data that may reside in a database. Thus with dynamically generated Web pages data often needs to be acquired temporarily stored and written to or read from a database. Persistence layer utilizes an abstracted database interface to provide access to these functions.

ICM can be coupled to a server cache that can store data frequently accessed by the ICM and to memory pipes through which data can be exchanged with Advanced Business Application Programming ABAP work processes . ABAP work processes may conduct transactions to read data from and write data to ABAP database . Dispatcher can manage system memory resources organize communication between the processes and otherwise control initiation and execution of ABAP work processes . Dispatcher can be coupled to dispatched queue and gateway . Dispatcher queue can store requests for various work process types. WAS also is compatible with the Java runtime environment. ICM can communicate with Java dispatcher that controls execution of Java work processes . Java work processes conduct transactions to read data from and write data to Java database .

Gateway can facilitate communication between WAS and other programs. Message server is a process that serves to store information regarding available services information that can be used for load balancing and information that can be used for task distribution. WAS communicates with the Web client that may run browser .

ICM may operate in either a server role or a client role. In the server role ICM can react to requests for data from a URL that identifies a server or port combination. To process such requests assigned methods handlers which respond to certain events can initiate a process and then return control to the runtime environment. Such a request could be addressed to a Web application within the ABAP stack of BSPs executing on the server. As described in more detail below BSPs may contain server side scripting along with a page description language or presentation language e.g. HTML . This scripting can consist of ABAP instructions that require processing which can be accomplished by a dispatcher that calls a work process which constructs a user context. The result of the processing typically an HTML page is then sent back to the ICM and the result is executed through memory pipes and returned to the client as a response.

In step dispatcher can place the ICM request in dispatcher queue create a new context if there is not already a context and the stateful condition is being used and can select a work process for editing.

In step the work process e.g. a task handler can read the data from the memory pipe process the demand and write the response in the memory pipes. In step the task handler can signal the ICM that the request processing is complete. In step ICM can return the response data to the client and the process ends in step .

HTTP request handler then starts the processing work by calling the HANDLE REQUEST method. The request data can then be read by application and processed. For the response the RESPONSE attribute of the server control block is filled. By terminating the method control is returned to ICF controller .

ICF controller can now call further handlers that are deposited in the ICF service. If no other handler is stored there the server control block is converted into an HTTP stream. ICF controller then returns this stream to Web browser via task handler and ICM .

View object may render contents of model object . It may access the contents of model object and specifies how that data should be presented. View object can render model into a form suitable for interaction for example as a user interface element. For example in the case of the WWW view object may be an HTML page and the code that generates dynamic data for the page. View object may utilize model object to generate an appropriate user interface and receive data from model object for display.

Controller object can process and respond to events e.g. user actions with an HTML page and invoke changes on model object and possibly on view object . Controller object may translate interactions with yiew object into actions to be performed by model object .

BSP application may include any number of BSP pages Multipurpose Internet Mail Extension MIME object application class controller and navigation structure . BSP page may include view object which is responsible for layout and visualization of application data. In particular view object may comprise code for generating a GUI to facilitate interaction with BSP application . According to one embodiment upon request of a BSP page by client code in view object may be rendered into a presentation language such as HTML code that may be interpreted by browser running on client . The format of view object will be described in more detail below.

Each view object has an associated controller object that is responsible for filling attributes accepting the request and managing the flow control. Controller may perform the tasks of providing data selecting correct layout triggering data initialization executing input processing and creating and calling a view instance for creating HTML XML output. According to one embodiment controller may include business logic and application data.

In addition BSP page may include flow logic that is implemented through event handlers and includes page attributes and type definitions. Flow control for BSP pages can be achieved through event handlers not shown navigation structure and controllers .

Navigation structure may be used to define navigation requests for the start and destination of a request i.e. the page order in the navigation process . MIME objects may represent for example graphics style sheets and audio and or visual files that are managed in a central database. Navigation structure can determine which navigation request is used to direct the navigation process from a particular page to a subsequent page. Application class encapsulates business logic of BSP application .

According to one embodiment a URL not shown can be associated with each controller and may thereby function as the initial entry point for BSP application . Controller can assess the data of an incoming request based on a model and then select a suitable view for rendering a response to the user. Controller may call associated view which typically does not have a separate URL and communicate with model .

BSP application may also include page fragments . Page fragments are similar to BSP pages but do not have separate event handling type definitions or separate attributes and may be integrated into other BSP pages .

MIME object is an extension of the original Internet e mail protocol permitting the exchange of different data types through the Internet for example audio video and graphical data style sheets application programs and ASCII files. MIME objects can be stored in a MIME repository not shown . Themes are used to define replacements for MIME objects .

Application class may encapsulate the application logic of BSP application . The application logic business logic handles the actual processing of data. Application logic can be created in the form of Business Application Programming Interfaces BAPI s function modules or class libraries.

The BSP framework creates a server side page hierarchy similar to a DOM tree . On the client side this translates into a DOM tree which is hierarchical and a replica of the server side BSP pages . A DOM tree is an Application Programming Interface API for HTML and XML documents. It defines the logical structure of HTML and or XML documents and provides methods for accessing and manipulating portions of these documents. In particular the DOM provides methods to allow any element which are typically indicated via tags of an HTML or XML document to be accessed changed deleted or added.

As shown in server executes WAS process through which BSP application is provided to client . According to one embodiment upon request of a BSP page by client server renders HTML code from view object on BSP page requested by client and transmits the rendered HTML code to client . Server also includes tag library for marking BSP pages to indicate particular content targeted for delta rendering. The specific functions of tag library will be described in more detail below.

Client includes event handling system for responding to events generated by user interaction with content provided by server . According to one embodiment event handling system utilizes JavaScript to respond and process events generated on client . Client also includes AJAX framework for performing delta handling of requests to server . The function of AJAX framework will be described in detail below.

In step the request may be received by the server. In step the server may perform data binding event dispatching. In step it is determined whether the request is an AJAX request. If not no branch of step flow continues with step . Otherwise if the request is to be handled by AJAX flow continues with step . In step it may be determined whether an area to be rendered is a target of the AJAX request. The concept of an area will be described in detail below. For the present discussion it is sufficient to understand that an area may represent a portion or segment of a Web page. If so yes branch of step the target area may be rendered in step . If not no branch of step control may pass to step and it may be determined whether all areas have been considered. If not no branch of step the next area may be considered in step . If so yes branch of step the response may be sent to the client in step .

In step the client may receive the response. In step the target areas may be replaced in sequence by a callback function on the client. In step any scripts in target areas may be executed by a callback function at the client. The process ends in step .

Referring again to according to one embodiment each view object for a BSP page may include code for generating one or more objects that will be displayed on a client device to allow interaction with BSP application . The objects may be GUI objects such as tables list boxes combo boxes etc. According to one embodiment the code for a view object for a BSP page may be compiled into HTML code or another presentation language code when the BSP page is requested by client .

Referring now to in order to provide delta handing tag library provides a tag and tag which may be used to mark a BSP page . According to one embodiment each tag may correspond to one BSP page and thus may correspond to a particular view object corresponding to that BSP page . Because BSP pages may be arranged in a hierarchical structure tags may be nested.

 tags N may be utilized to mark these portions of a view object that are desired to be updated upon a delta rendering. Because upon request of a BSP page presentation code is generated from view object as described below the and tags may be mapped to particular portions of presentation code.

 tag includes target information corresponding to interceptEvents attribute above that specifies information for handling events generated with respect to various objects within view object . As noted above objects may be various GUI objects such as buttons list boxes combo boxes etc. ObjectIDs may be generated for objects in view object that generate events which may require delta handling. For example it may be desired to update only a portion of a Web page when a user interacts with a button control such as by clicking on the button. In this case an ObjectID may be associated with the button.

Target information may associate each of one or more object identifiers ObjectID with a respective view identifier ViewID and a respective area identifier AreaID using the following patterns 

According to one embodiment each of the patterns mentioned above are JavaScript RegExp patterns. corresponds to the combination of an ObjectID and a ViewID . corresponds to an AreaID . ViewID is a unique identifier generated for each BSP page . Because BSP pages may be nested to include other BSP pages a BSP page may include multiple ViewIDs . AreaID is a unique identifier that identifies each portion or segment of a Web page marked by tags that may be the target of delta rendering.

View object may include any number of tags N . For example continuing with the example noted earlier a user s clicking on a button may cause only certain portions of a Web page to be updated. These portions may be marked by utilizing tags e.g. and to designate the portions to be updated when the clicking event occurs. For example to trap an event of the table navigation from a table with id searchResultTable the following are valid patterns 

The target area specifies the list of target areas that should be updated as a result of this event. tags N each designate an area within view object . Each area is associated with a unique identifier AreaID corresponding to id attribute above. Object definitions N may be encapsulated within tags. For illustrative purposes only as shown in only one object definition N is respectively encapsulated in each tag N . However it should be understood that there may be several object definitions within any one tag.

Each object definition corresponds to a particular GUI object e.g. user interface control such as a button on BSP page . Each object definition N associates an ObjectID corresponding to that object with a ViewID in which that objcct is to be displayed. An object may be associated with any number of views.

As described above target information may associate each of one or more object identifiers ObjectID with a respective view identifier ViewID and a respective area identifier AreaID . ObjectID detected by event handling system is used to query DOM object which retrieves at least one ViewID and AreaID associated with the ObjectID in target information . Event handling system then generates submission parameters as a function of retrieved ViewID and AreaID . As will be described below submission parameters are provided to server which may utilize these parameters to perform server side optimization described in detail below . Submission parameters are passed to server which returns HTML code generated from a BSP page.

Upon receiving HTML code from server not shown ViewID and AreaID are utilized to perform replacement of areas on new HTML page corresponding to the target information associated with ObjectID . According to one embodiment event handling system performs this replacement by making requests to DOM object .

For each BSP page a tag comprising a number of attributes described above is provided. tag includes ID which is a unique identifier associated with the tag. In addition tag includes availableElements identifier which indicates all areas on BSP page . Thus for example as shown in availableElements identifier in tag indicates that N areas exist on BSP page . tag includes target information denoted by the InterceptEvents identifier which specifies all target areas for events generated by particular objects e.g. a user interface control . The nature of target information is described above.

Each BSP page may include one or more area tags . Each tag e.g. includes an id attribute corresponding to AreaID . Further each tag may encapsulate object information for objects such as UI controls e.g. .

In addition a tag in HTML code is generated for each tag in BSP . An id attribute is set to the AreaID . In addition for any object an identifier is generated with a prefix corresponding to ViewID and a suffix corresponding to the ObjectID e.g. as follows 

Also shown in is an embedded JavaScript function which may be executed inline while processing the server response for processing that specific area.

Upon occurrence of an event event handler is provided with an identifier associated with the object triggering the event. Event handler may correspond to JavaScript function . As indicated with respect to this provided identifier comprises prefixing a particular view identifier with a suffix comprising the object identifier.

Event handler decomposes the combined view identifier object identifier into component parts including ViewID and UIControlId . Event handler then locates the associated tag associated with the tag from the BSP page by querying DOM object using ViewID over pathway . In addition DOM object provides associated target information for the event by querying DOM object using UIControlID i.e. an object ID over pathway . The filter information indicates areas on the Web page to be updated e.g. area .

Event handler makes a request to server for the current BSP page by generating URL which encodes various submission parameters described in detail below . According to one embodiment the request to server may be made over a TCP IP socket connection. Server responds by providing updated HTML page . Updated HTML page is then parsed by event handler utilizing DOM object to locate the target areas to be updated using the filter information determined earlier . The target areas on current Web page are then replaced with the corresponding HTML code from updated Web page .

Among other things submission parameters include one or more targets which are to be updated as a result of event . A detailed description of submission parameters is provided below. htmlSubmitForm is then called which submits submission parameters to server and requests rendering of the appropriate BSP page . The relevant BSP page is reflected in a URL corresponding to BSP page requested via htlmSubmitForm . According to one embodiment the request from client to server is not made directly through browser but is effected via functionality provided by AJAX framework which opens a secure TCP IP socket connection and submits the request via that connection.

Server stores BSP page which has been tagged via tag library to mark areas that are targeted to be updated as a result of various events that may occur with respect to BSP page . The nature of particular tags and their relationship to BSP page is described in detail below.

On server submission parameters are received by WAS . WAS causes the appropriate BSP page to be rendered as HTML code . According to one embodiment as a result of the rendering process HTML code is tagged to correlate particular objects with view ID information corresponding to those objects.

HTML code is received via the deltaRendering Callback function over TCP IP socket connection which is a callback function on client . htmlSubmitPost function parses HTML code and replaces only that code corresponding to targets generated in submission parameters in the current HTML code for BSP page to generate delta updated HTML code . Delta updated HTML code is then provided to browser where it is rendered.

Although the above examples have been provided for the sake of explanation it should be understood that many other embodiments may be implemented.

Implementations of the various techniques described herein may be implemented in digital electronic circuitry or in computer hardware firmware software or in combinations of them. Implementations may implemented as a computer program product i.e. a computer program tangibly embodied in an information carrier e.g. in a machine readable storage device or in a propagated signal for execution by or to control the operation of data processing apparatus e.g. a programmable processor a computer or multiple computers. A computer program such as the computer program s described above can be written in any form of programming language including compiled or interpreted languages and can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.

Method steps may be performed by one or more programmable processors executing a computer program to perform functions by operating on input data and generating output. Method steps also may be performed by and an apparatus may be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. Elements of a computer may include at least one processor for executing instructions and one or more memory devices for storing instructions and data. Generally a computer also may include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. Information carriers suitable for embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory may be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user implementations may be implemented on a computer having a display device e.g. a cathode ray tube CRT or liquid crystal display LCD monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

Implementations may be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation or any combination of such back end middleware or front end components. Components may be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN e.g. the Internet.

While certain features of the described implementations have been illustrated as described herein many modifications substitutions changes and equivalents will now occur to those skilled in the art. It is therefore to be understood that the appended claims are intended to cover all such modifications and changes as fall within the true spirit of the embodiments.

