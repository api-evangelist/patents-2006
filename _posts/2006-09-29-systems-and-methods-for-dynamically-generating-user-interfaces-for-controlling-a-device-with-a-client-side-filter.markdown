---

title: Systems and methods for dynamically generating user interfaces for controlling a device with a client side filter
abstract: A method for dynamically constructing a user interface definition is disclosed. A request for an information list is sent. The user interface definition with the information list is received. A filter script is applied to the user interface definition to provide a filtered user interface definition. The filtered user interface definition is sent to an application. The filtered user interface definition is constructed. The filtered user interface definition is displayed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08214752&OS=08214752&RS=08214752
owner: Sharp Laboratories of America, Inc.
number: 08214752
owner_city: Camas
owner_country: US
publication_date: 20060929
---
The present invention relates generally to computers and computer related technology. More specifically the present invention relates to systems and method for dynamically generating user interfaces for controlling a device with a client side filter.

Computer and communication technologies continue to advance at a rapid pace. Indeed computer and communication technologies are involved in many aspects of a person s day. For example many devices being used today by consumers have a small computer incorporated within the device. These small computers come in varying sizes and degrees of sophistication. These small computers may vary in sophistication from one microcontroller to a fully functional complete computer system. For example small computers may be a one chip computer such as a microcontroller a one board type of computer such as a controller a typical desktop computer such as an IBM PC compatible etc.

Printers are used with computers to print various kinds of items including letters documents pictures etc. Many different kinds of printers are commercially available. Ink jet printers and laser printers are fairly common among computer users. Ink jet printers propel droplets of ink directly onto the paper. Laser printers use a laser beam to print.

Printers are a type of imaging device. Imaging devices include but are not limited to physical printers multi functional peripherals a printer pool a printer cluster a fax machine a plotter a scanner a logical device an electronic whiteboard a tablet PC a computer monitor a file etc.

Different kinds of computer software facilitate the use of imaging devices. The computer or computing device that will be used to print the materials typically has one or more pieces of software running on the computer that enable it to send the necessary information to the printer to enable printing of the materials. If the computer or computing device is on a computer network there may be one or more pieces of software running on one or more computers on the computer network that facilitate printing.

Computers may communicate with a server over the computer network. In a computer network environment computers may be referred to as clients. Servers may manage one or more than one imaging devices such as a printer. When a user desires to control an imaging device the user may request information regarding the devices managed by the server. The user may receive information regarding every managed device even though many of the imaging devices may not possess certain capabilities desired by the user. Benefits may be realized by providing systems and methods for dynamically generating user interfaces for controlling a device with a client side filter.

A method for dynamically constructing a user interface definition is disclosed. A request for an information list is sent. The user interface definition with the information list is received. A filter script is applied to the user interface definition. The filtered user interface definition is sent to an application. The filtered user interface definition is constructed. The filtered user interface definition is displayed.

In one embodiment the information list is a device list. The request may be written in an extensible markup language format. In one embodiment the filter script is written in an extensible markup language. A pre determined filter script may be applied to the user interface definition. In one embodiment a pre configured filter script is static and is applied to multiple user interface definitions.

In one embodiment a filter script is selected based on a type of user interface definition. In another embodiment the filter script is selected based on a transmission protocol of the user interface definition. In another embodiment the filter script is selected based on a data protocol of the user interface definition. A preview of the user interface may be generated before applying the filter script to the user interface. The filter script may be embedded in a server.

A client that is configured to dynamically construct a user interface definition is also disclosed. The client includes a processor and memory in electronic communication with the processor. Instructions are stored in the memory. A request for an information list is sent. The user interface definition with the information list is received. A filter script is applied to the user interface definition to provide a filtered user interface definition. The filtered user interface definition is sent to an application. The filtered user interface definition is constructed. The filtered user interface definition is displayed.

A server that is configured to dynamically construct a user interface definition is also disclosed. The server includes a processor and memory in electronic communication with the processor. Instructions are stored in the memory. A request for an information list is received. The user interface definition with the information list is constructed. A filter script is applied to the user interface definition to provide a filtered user interface definition. The filtered user interface definition is constructed. The filtered user interface definition is sent to a client.

A computer readable medium comprising executable instructions for implementing a method for dynamically constructing a user interface definition is also disclosed. A request for an information list is sent. The user interface definition with the information list is received. A filter script is applied to the user interface definition to provide a filtered user interface definition. The filtered user interface definition is sent to an application. The filtered user interface definition is constructed. The filtered user interface definition is displayed.

Various embodiments of the invention are now described with reference to the Figures where like reference numbers indicate identical or functionally similar elements. The embodiments of the present invention as generally described and illustrated in the Figures herein could be arranged and designed in a wide variety of different configurations. Thus the following more detailed description of several exemplary embodiments of the present invention as represented in the Figures is not intended to limit the scope of the invention as claimed but is merely representative of the embodiments of the invention.

The word exemplary is used exclusively herein to mean serving as an example instance or illustration. Any embodiment described herein as exemplary is not necessarily to be construed as preferred or advantageous over other embodiments.

Many features of the embodiments disclosed herein may be implemented as computer software electronic hardware or combinations of both. To clearly illustrate this interchangeability of hardware and software various components will be described generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the scope of the present invention.

Where the described functionality is implemented as computer software such software may include any type of computer instruction or computer executable code located within a memory device and or transmitted as electronic signals over a system bus or network. Software that implements the functionality associated with components described herein may comprise a single instruction or many instructions and may be distributed over several different code segments among different programs and across several memory devices.

As used herein the terms an embodiment embodiment embodiments the embodiment the embodiments one or more embodiments some embodiments certain embodiments one embodiment another embodiment and the like mean one or more but not necessarily all embodiments of the disclosed invention s unless expressly specified otherwise.

The term determining and grammatical variants thereof is used in an extremely broad sense. The term determining encompasses a wide variety of actions and therefore determining can include calculating computing processing deriving investigating looking up e.g. looking up in a table a database or another data structure ascertaining and the like. Also determining can include receiving e.g. receiving information accessing e.g. accessing data in a memory and the like. Also determining can include resolving selecting choosing establishing and the like.

The phrase based on does not mean based only on unless expressly specified otherwise. In other words the phrase based on describes both based only on and based at least on. 

Current research involves designing systems and methods for direct rendering print fax scan etc. from a thin client using a rendering server. A thin client may be a computing device that depends primarily on the rendering server for processing activities. The rendering server may use direct print application programming interface DPAPI as the underlying mechanism for direct print fax.

Clients may include direct print applications such as Color data path unit DPU which uses the DPAPI on the client side. For systems with thin clients the DPAPI may be running on the rendering server side. The thin client may not provide any printing services. The thin client may include a generic application whose user interface UI and interpretation of the UI responses is controlled by the rendering server using extensible markup language XML messaging.

The standard way of using XML messaging for UI is to describe the UI properties such as name data type range and default value. The thin client may then interpret the UI properties and render a UI specific to the thin client e.g. operating system OS Application independent . A problem with this method arises in that there is no method of filtering the information received by the thin client without either support at the rendering server or the thin client having intrinsic knowledge of the UI properties. For example when the thin client makes a request for a list of printers managed by the rendering server the server may send an XML message including a list of all the printers. If a user of the thin client was only interested in printers with duplex capabilities the user may be required to parse through the rendered UI of each printer to determine which printers support duplex functions. Systems and methods for the user to filter the UI properties sent in an XML message to provide a subset of the information sent by the rendering server may be beneficial.

The server may manage and communicate with device A device B and device C . For clarity purposes only three devices are illustrated. However the server may manage and communicate with many more devices. In one embodiment devices A B and C may be a printer scanner copier facsimile device filing device conversion device publishing device electronic whiteboard audio video recorder player video projector etc. In a further embodiment the devices A B and C may also be an X ray magnetic resonance imaging MRI or computer axial tomography CAT scan device.

Device A may include control property A . Control property A may represent particular performance capabilities of device A . Similarly device B may include control property B and device C may include control property C . While devices A B and C are illustrated with only one control property each device may include numerous control properties to represent the various performance capabilities of the device.

For illustrative purposes devices A B and C may be a printer. An example of a control property associated with a printing device is collation which indicates the ability of the printer to print multiple copies copy collate print face up down etc. Another example may be sheet assembly which indicates the ability of the printer to print on both sides of a sheet of paper duplex assemble a print job as a booklet tri fold the pages of the print job print multiple pages at a reduced size on one sheet of paper N up orientate the pages tab the pages etc. A further example of a control property may include rendering which indicates the ability of the printer to print with respect to color space half toning toner save resolution image enhancement etc. Another example may include finishing which indicates the ability of the printer regarding stapling punching folding trimming cutting etc. A further example may be paper that may refer to the paper source paper size paper type etc. of a printer. Another example may be outputting which may refer to the characteristics of an output bin of a printer the ability of a printer to print carbon copies transparencies post fuser insertion front back covers etc.

In one embodiment devices A B and C may communicate their respective control properties to the server . The server may be a rendering server with the capability to process and produce a user interface UI definition . The UI definition may represent the aggregate means by which a user interacts with a particular computing device such as the client . The UI definition may provide the means for the user to control devices managed by the server . The UI definition may include a device list . The device list may include the identifications of devices A B and C and their respective control properties. In a further embodiment the device list may also include information regarding the status of the devices in communication with the server . The device list may also include notifications regarding jobs associated with the devices.

In one embodiment the UI definition is communicated to the client over the network . The network may include a personal area network PAN local area network LAN metropolitan area network MAN wide area network WAN wireless network paging network etc. The client may include a filter script which may facilitate filtering information from the UI definition . The client may also include an application which may include a UI construction component . The construction component may render a filtered UI definition to a display . A user may access the display to view the filtered UI definition . In one embodiment the filtered UI definition may include the device list . The device list may include the identification of the device that includes control property A such as device A . In one embodiment information regarding devices B and C are not included in the device list of the filtered UI definition because the filter script may have filtered out the information.

The request may be sent to the server which may include a request for a list of all the devices with certain control properties. In a further embodiment the request may include a request for the status of certain devices managed by the server . In another embodiment the request may include a request for the status of jobs executed by certain devices managed by the server .

A UI definition may be received with the device list . In one embodiment the device list may include the identifications of all the devices managed by the server . In one embodiment the format of the UI definition may be independent of the application . In other words the format of the UI definition may not define the layout of the UI for the application .

In one embodiment a filter script is applied to the UI definition that includes the device list . In one embodiment the filter script may include the XML format. The filtered UI definition may be sent to the application . The filtered UI definition may be constructed and displayed . In one embodiment the UI construction component of the application constructs the filtered UI definition . The filtered UI definition may include the device list and may be in formats such as XML proprietary data format etc. In one embodiment the device list may include a list of the devices managed by the server which include a certain control property. The filtered UI definition may be displayed to a user. The user may control the device s included in the device list through the dynamically constructed filtered UI definition .

The server may send the control properties to the application . In one embodiment the control properties are included within a user interface definition . The UI definition and control properties may be communicated to a UI control construction component . The construction component may render a UI for controlling the device not shown based on the UI control properties. The UI controls may be rendered in a manner that is specific to the application . A dynamically configured device control UI may be rendered which includes the UI controls which may allow a user to control the device not shown .

In addition the filter may be static to a session i.e. unchanging and the same filtering script may be applied to each XML message regardless of the type form or content of the message . In one embodiment the selection of the filter may be based on the type of message . For example the XML message may include a header that uniquely defines the type of message such as device selection list device information device capabilities device settings controls job selection job notification etc.

In another embodiment the filter script may be selected depending on the transmission protocol of the message such as user datagram protocol UDP transmission control protocol IP TCP IP AppleTalk etc. The filter script may also be selected depending on the data protocol of the message such as hypertext transfer protocol HTTP direct internet message encapsulation DIME XML etc. The filter script may also be selected depending on the port from where the message was sent or received the internet protocol IP address of the sender etc.

In a further embodiment the filter script may be selected based on some aspect of the content of the message . For example the presence or absence of some content in the message such as a node attribute or value in XML. The filter script may also be selected based on a data object set or not set to a value or a value range etc.

The filtered UI rendering message may be communicated to the UI control construction component to render the UI. In one embodiment the construction component may be included in the application . The construction component may render the UI according to the filtered message . The following illustrates an example of implementing the method .

In one embodiment the filtering process may be designed such that the filtering process applies the filter script to messages that include a device selection message. In one embodiment the device may be a printer. The filter script may remove any printer from the message that includes a content element which does not include the desired capability. For example the desired capability may include a printer with duplex capabilities. Below is an example of one embodiment of a message including a device selection message. The message may be in XML format.

After the filter script including filter.duplex only is applied to the above sample XML message the filtered message may be defined as follows 

In another example an administrator may design the filter script to restrict the use of a stapling capability in device when the type of message includes device settings. In this example the filter script may remove any device setting selection that includes a content element that does include a stapling setting. Below is an example of one embodiment of a device setting message in XML format.

After the filter script filter.no staple setting is applied to the above sample XML message the filtered XML message may be defined as follows 

In one embodiment the UI control properties XML message is sent to the construction control component within an application on the client . The client may be a thin client as previously explained. The message may be sent to the construction control component without having passed through a filtering script .

In one embodiment a user may interact with the control component when the message is received. The user may initiate interaction by enabling an edit button. In one embodiment the control component may enable a viewer that facilitates the user to preview the unfiltered message utilizing a preview window . In one embodiment the viewer may be an XML viewer and the preview window may enable a use to view XML messages .

The user may utilize the preview window to view the message and determine if the filter script should be applied to the message . For example the user may preview a message including a list of printers managed by the server . The list may be extensive and the user may desire to apply a filter script in order to condense the list to include only the printers that possess the capabilities desired by the user.

The user may specify a particular filter script to apply to the message by providing the name of the filter script to a filter construction component . The filter construction component may generate the particular filter script desired by the user. In addition the user may determine which filter script to apply by providing commands to apply the filter script associated with the particular type of message . For example if the type of the message is printer settings the user may determine to apply the filter script associated with this type of messages . In a further embodiment the user may provide the filter actions associated with the desired filter script . The filter actions may be manually entered into the filter construction component . Alternatively the filter actions may be automatically generated by the filter construction component . In one embodiment the filter construction component may automatically generate the filter actions in response to the user highlighting nodes attributes or values associated with the message . Additionally the filter construction component may generate the filter actions in response to the user selecting combinations of dialog buttons. When the desired filter script is selected the user may apply the script immediately to the UI message . Alternatively the user may save the generated script for subsequent or temporary use.

In another embodiment the construction component may generate a preview of a filtered UI message immediately upon receipt of the message . The construction component may automatically generate a preview of the filtered message by applying a pre existing filter script associated with the UI message . In one embodiment the user may view the filtered message and elect to modify the filtered message by modifying the script . The user may modify the filter script for a one time use or the user may save the modified filter script for subsequent use.

While the embodiments herein discussed include UI messages in an XML format any format may be used such as HTTP DIME extensible application markup language XAML a proprietary data format etc. In other embodiment the UI messages may be applicable for any device control or operation such as scanning faxing archiving copying filing publishing conversion and computing. In another embodiment the filter scripts may be uploaded by a client such as a thin client to a rendering server. The filtering process may be executed on the rendering server and the filtered messages may be sent back to the client.

In another embodiment messages may be associated with a schema for validation. For example when messages contain rich extra content not known or recognized by a validator the message may be pre filtered to remove the rich content for validation against a schema. The pre filtered message may then be rendered into a user interface by the client.

The electronic device may also include memory . The memory may be a separate component from the processor or it may be on board memory included in the same part as the processor . For example microcontrollers often include a certain amount of on board memory.

The processor is also in electronic communication with a communication interface . The communication interface may be used for communications with other devices printing devices servers etc. Thus the communication interfaces of the various devices may be designed to communicate with each other to send signals or messages between the computing devices .

The computing device may also include other communication ports . In addition other components may also be included in the electronic device .

Many kinds of different devices may be used with embodiments herein. The computing device may be a one chip computer such as a microcontroller a one board type of computer such as a controller a typical desktop computer such as an IBM PC compatible a Personal Digital Assistant PDA a Unix based workstation etc. Accordingly the block diagram of is only meant to illustrate typical components of a computing device and is not meant to limit the scope of embodiments disclosed herein.

The computing device is in electronic communication with the printing device . A printing device is a device that receives or transmits an imaging job such as a Multi Function Peripheral MFP or computing device. Printing devices include but are not limited to physical printers multi functional peripherals a printer pool a printer cluster a fax machine a plotter a scanner a copier a logical device a computer monitor a file an electronic whiteboard a document server etc. A typical printing device such as a physical printer fax machine scanner multi functional peripheral or copier is a type of computing device. As a result it also includes a processor memory communications interface etc. as shown and illustrated in relation to . The printing device may be a single or a plural grouping e.g. pool or cluster of two or more devices.

Information and signals may be represented using any of a variety of different technologies and techniques. For example data instructions commands information signals bits symbols and chips that may be referenced throughout the above description may be represented by voltages currents electromagnetic waves magnetic fields or particles optical fields or particles or any combination thereof.

The various illustrative logical blocks modules circuits and algorithm steps described in connection with the embodiments disclosed herein may be implemented as electronic hardware computer software or combinations of both. To clearly illustrate this interchangeability of hardware and software various illustrative components blocks modules circuits and steps have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the scope of the present invention.

The various illustrative logical blocks modules and circuits described in connection with the embodiments disclosed herein may be implemented or performed with a general purpose processor a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array signal FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor may be a microprocessor but in the alternative the processor may be any conventional processor controller microcontroller or state machine. A processor may also be implemented as a combination of computing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration.

The steps of a method or algorithm described in connection with the embodiments disclosed herein may be embodied directly in hardware in a software module executed by a processor or in a combination of the two. A software module may reside in RAM memory flash memory ROM memory EPROM memory EEPROM memory registers hard disk a removable disk a CD ROM or any other form of storage medium known in the art. An exemplary storage medium is coupled to the processor such that the processor can read information from and write information to the storage medium. In the alternative the storage medium may be integral to the processor. The processor and the storage medium may reside in an ASIC. The ASIC may reside in a user terminal. In the alternative the processor and the storage medium may reside as discrete components in a user terminal.

The methods disclosed herein comprise one or more steps or actions for achieving the described method. The method steps and or actions may be interchanged with one another without departing from the scope of the present invention. In other words unless a specific order of steps or actions is required for proper operation of the embodiment the order and or use of specific steps and or actions may be modified without departing from the scope of the present invention.

While specific embodiments and applications of the present invention have been illustrated and described it is to be understood that the invention is not limited to the precise configuration and components disclosed herein. Various modifications changes and variations which will be apparent to those skilled in the art may be made in the arrangement operation and details of the methods and systems of the present invention disclosed herein without departing from the spirit and scope of the invention.

