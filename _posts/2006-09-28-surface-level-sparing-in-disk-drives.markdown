---

title: Surface level sparing in disk drives
abstract: A technique involves accessing a hard disk platter surface using surface virtualization. The technique includes receiving a command to access a hard disk platter surface. The command specifies an address. The technique further includes providing a virtual surface identifier based on the address specified by the command, and generating a particular real surface identifier based on the virtual surface identifier. The particular real surface identifier corresponds to a particular hard disk platter surface among multiple hard disk platter surfaces of a set of disk drives. The technique further includes accessing the particular hard disk platter surface among the multiple hard disk platter surfaces of the set of disk drives based on the particular real surface identifier. Such operation is capable of being carried out within a disk drive controller in a manner that is transparent to a host, or alternatively by the host.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07472223&OS=07472223&RS=07472223
owner: EMC Corporation
number: 07472223
owner_city: Hopkinton
owner_country: US
publication_date: 20060928
---
A typical data storage system includes storage control circuitry e.g. a front end server a storage processor a set of directors etc. and hard disk drives. The storage control circuitry performs a variety of data storage operations e.g. load and store operations on behalf of one or more external clients by sending hard drive commands to the hard disk drives. A typical command uses an LBA Logical Block Address addressing mode in which the command specifies a starting LBA and a count.

A typical hard disk drive includes multiple hard disk platters mounted to a common spindle. Each hard disk platter defines a top surface and a bottom surface for storing data in a non volatile manner. The hard disk drive further includes a disk drive controller and for each platter surface a read head and a write head which are controlled by the disk drive controller to respectively read data from and write data to that platter surface.

In addition to the disk drives that regularly maintain data it is common practice for a data storage system to include a hot spare disk drive. When a regular disk drive fails the hot spare disk drive kicks in by taking over the role of the failing disk drive. That is the storage control circuitry stores a copy of the data that currently exists on the failing disk drive onto the hot spare disk drive. The storage control circuitry then operates the hot spare disk drive in place of the failing disk drive. Typically the failing disk drive is then removed from the data storage system and discarded by a technician.

Unfortunately there are deficiencies to the above described approach to handling a disk drive failure. For example in some cases only one head i.e. a read head or a write head for one platter surface fails within a disk drive. In response to such a failure the storage control circuitry deems the entire disk drive to have failed and replaces the entire disk drive with a hot spare disk drive. Such operation of the storage control circuitry is wasteful since the remaining platter surfaces of the failed disk drive may still be usable. Moreover when the storage control circuitry stores a copy of the entire failed disk drive onto the hot spare disk drive the storage control circuitry consumes a significant amount of data storage system resources.

In contrast to the above described conventional approach to handling a single platter surface failure of a disk drive by placing a copy of all of the data on that failing disk drive onto a hot spare disk drive an improved technique involves providing access to platter surfaces using surface virtualization. Here a mapping function is capable of mapping virtual platter surfaces to real platter surfaces or alternatively virtual disk drive heads to real disk drive heads . Accordingly from the perspective of a host disk accesses can be carried out by addressing LBAs which translate to virtual platter surfaces. If there is a failure of a particular real platter surface the mapping function can simply re map the virtual platter surface to a new real platter surface without changing any addressing at the host i.e. mapping of LBAs to virtual platter surfaces by the host can remain intact . Such a technique enables efficient surface level sparing inside a disk drive.

One embodiment is directed to a method of accessing a hard disk platter surface using surface virtualization. The method includes receiving a command to access a hard disk platter surface. The command specifies an address e.g. a Logical Block Address . The method further includes providing a virtual surface identifier based on the address specified by the command and generating a particular real surface identifier based on the virtual surface identifier. The particular real surface identifier corresponds to a particular hard disk platter surface among multiple hard disk platter surfaces of a set of disk drives. The method further includes accessing the particular hard disk platter surface among the multiple hard disk platter surfaces of the set of disk drives based on the particular real surface identifier. Such operation is capable of being carried out within a disk drive controller in a manner that is transparent to a host or alternatively by the host.

An improved technique involves providing access to hard disk platter surfaces using surface virtualization. Here a mapping function is capable of mapping virtual platter surfaces to real platter surfaces or alternatively virtual disk drive heads to real disk drive heads . Accordingly from the perspective of a host disk accesses can be carried out by addressing LBAs which translate to virtual platter surfaces. If there is a failure of a particular real platter surface the mapping function can simply re map the virtual platter surface to a new real platter surface without changing any addressing at the host i.e. mapping of LBAs to virtual platter surfaces by the host can remain intact . Such a technique enables efficient surface level sparing inside a disk drive.

During operation the host sends commands to the disk drives to perform a variety of data storage operations on behalf of one or more client devices. The disk drive controllers receive the commands through the host interfaces and effectuate loading of data from and storing of data to the platters through the platter interfaces i.e. read and write heads .

Such operation is carried out using virtualization of the platter surfaces. That is the commands address blocks of data using LBAs Logical Block Addresses which translate into virtual platter surfaces rather than real platter surfaces. The disk drive controllers then perform mapping functions to translate the virtual platter surfaces into real platter surfaces. Accordingly if there is a failure of a real platter surface e.g. a failure of a read head or a write head to that platter surface within a disk drive the disk drive can simply replace the failing platter surface with a spare platter surface and update the mapping so that the virtual platter surface now maps to the spare platter surface. As a result there is no need to change the LBAs used by the host . Furthermore there is no need to discard the disk drive having the failed platter surface. Rather the remaining real platter surfaces of that disk drive are still available for use. As such the disk drive can continue to operate with simple re mapping and discontinued use of the failed platter surface. Further details will now be provided with reference to .

As shown in each entry of the mapping table includes an entry number field a virtual surface identifier field and a real surface identifier field . The entry number field of each entry is configured to store a unique entry number. The virtual surface identifier field is configured to store an identifier which identifies a particular virtual platter surface of the disk drive . The real surface identifier field is configured to store an identifier which identifies a particular real platter surface of the disk drive . In this manner and as shown in each entry identifies a relationship between a virtual platter surface as perceived by the host and a real platter surface of the disk drive .

Each platter includes a top real platter surface T and a bottom real platter surface B . Each real platter surface is accessible via a read head and a write head which are illustrated by the reference numeral in also see the platter interface in .

In accordance with the example details in the mapping table the first entry of the mapping table i.e. entry maps virtual platter surface VS to real platter surface RS . Similarly the second entry i.e. entry maps virtual platter surface VS to real platter surface RS and so on. By way of example the disk drive includes three platters which rotate about a spindle . Accordingly the three platters of the disk drive provide a total of six real platter surfaces. Of course the disk drives are capable of having a number of real platters which is different from three e.g. two four five etc. .

In some arrangements the entry number field of the mapping table is optional and the entries or their locations within the table simply correspond to virtual surface identifiers e.g. the first entry corresponds to VS the second entry corresponds to VS and so on . Further details will now be provided with reference to in combination with .

In the layer the disk drive controller converts virtual surface identifiers corresponding to virtual platter surfaces into real surface identifiers which correspond to real platter surfaces . Here the layer of the disk drive controller obtains the virtual surface identifiers from the layer and applies a mapping function to generate real surface identifiers from virtual surface identifiers. In the example above the disk drive controller searches virtual surface identifier field of the entries of the mapping table for VS . Such a function is capable of being carried out by applying a standard search algorithm or other hashing technique. In the example layer of the disk drive controller finds that the first entry i.e. entry includes the virtual surface identifier VS outputs RS as the real surface identifier which maps to the virtual surface identifier VS .

Alternatively if the entries of the mapping table correspond directly to the virtual surface identifiers the disk drive controller simply indexes the mapping table . That is to find the real surface identifier corresponding to the first virtual surface identifier VS the disk controller accesses the first entry in the table . Similarly to find the real surface identifier corresponding to the second virtual surface identifier VS the disk controller accesses the second entry in the table and so on.

In the layer the disk drive controller accesses real platter surfaces of the hard disk platters based on the real surface identifiers from the layer . In the example above the disk drive controller accesses the real platter surface corresponding to the real surface identifier RS .

At this point it should be understood that surface virtualization enables one or more real hard disk platter surfaces to be keep as one or more hot spare platter surfaces S . That is such hot spare real platter surfaces S are not used to store data in the normal course of operation. Rather such hot spare real platter surfaces S are used to replace real platter surfaces that fail during the normal course of operation. Further details along these lines will now be provided with reference back to .

In there is no entry in the mapping table which maps a virtual surface identifier to the real surface identifier RS because the real surface identifier RS corresponds to a hot spare real platter surface S . In the bottom most real platter surface is labeled as a hot spare real platter surface S and thus is not used to store data in the normal course of operation. Rather the real platter surface S is kept by the disk drive for hot replacement. Accordingly no mapping of a virtual platter surface to the real platter surface S currently exists.

Nevertheless it should be understood that not every disk drive within the data storage system is required to have a spare platter surface S as shown in . Rather some or even most of the disk drives may utilize all of their platter surfaces for regular data storage e.g. for full utilization a virtual surface identifier would map to the real surface identifier RS in . As long as there is a spare platter surface S on at least one disk drive the data storage system is capable of replacing a failed platter surface with that spare platter surface S of that disk drive . Further details of how a disk drive responds to a platter surface failure will now be provided with reference to .

Suppose that the disk drive has an initial state as that shown in where the real platter surfaces identified by the real surface identifiers RS . . . RS are used to store data during the normal course of operation and that the real platter surface identified by the real surface identifier RS i.e. the real platter surface S is kept as a hot spare. Now further suppose that one of the heads to the real platter surface corresponding to the real surface identifier RS fails resulting in fault detection by the disk drive controller .

In step the disk drive controller receives an indication of a failure corresponding to the real platter surface corresponding to the real surface identifier RS . For example the disk drive controller may be unable to obtain a signal from a read head or a write head to that real surface . The failure is illustrated in with the X associated with the real surface identifier RS.

In step the disk drive controller responds to the indication by placing a copy of the data which is currently on the real platter surface corresponding to the real surface identifier RS onto the hot spare surface S . In particular if the write head has failed but the read head continues to work the disk drive controller is capable of simply reading all of the data directly from the working read head and then storing the data on the hot spare surface S . This operation may occur entirely within the same disk drive if both the failed real surface and the spare surface S reside within the same disk drive . However if the failed real surface resides in one disk drive and the spare surface S resides in another disk drive this operation occurs across the disk drives .

Furthermore if the read head has failed the disk drive controller is capable of rebuilding the data by reading one or more other real platter surfaces and then storing the data on the hot spare surface S . For example for a RAID scheme that distributes data over multiple disk drives e.g. RAID5 the data on the failed real surface can be rebuilt from data read from the non failed real surfaces of the disk drives . Additionally if the real platters within a single disk drive are configured to store data using such a distributed RAID scheme the data can even be rebuilt entirely within the single disk drive and then stored on a spare surface S of that single disk drive if such a spare surface S is available within that single disk drive .

In step the disk drive controller modifies the entry i.e. entry of the mapping table to map the virtual surface identifier VS to the real surface identifier RS which corresponds to the hot spare surface S . In particular the disk drive controller changes the contents of the real surface identifier field of that entry to now store the new surface identifier RS . This new relationship is illustrated in as the reference line which now points from the virtual platter surface corresponding to virtual surface identifier VS to the real surface identifier RS .

It should be understood that the host does not need to change any LBAs in the commands to the disk drive and that replacement of the failed platter surface with the hot spare platter surface S can take place transparently to the host . That is the host continues to use the same LBAs for any future access to the data since the host still addresses the same virtual platter surfaces . However the disk drive controller now maps the failed virtual platter surface to the hot spare platter surface S which has replaced the failed real platter surface . Moreover since the other real platter surfaces of the disk drive are still usable there is no need to replace the entire disk drive with an entire new hot spare disk drive . Further details will now be provided with reference to .

In the details of two disk drives are illustrated. In particular entries through providing mapping of virtual surface identifiers VS  . . . VS  to real surface identifiers RS  . . . RS  respectively for a first disk drive e.g. the disk drive in . Similarly entries through providing mapping of virtual surface identifiers VS  . . . VS  to real surface identifiers RS  RS  respectively for a second disk drive e.g. the disk drive in . Initially the real surface identifier RS  is purposefully not mapped to any virtual platter surface because the real platter surface corresponding to the real surface identifier RS  is initially reserved as a hot spare surface S .

Now suppose that the real platter surface corresponding to the real surface identifier RS  which maps to the virtual surface identifier VS  encounters a failure. The host is configured to coordinate replacement of that real platter surface with the hot spare surface S by communicating with both the first and second disk drives through the API to each disk drive . Accordingly the host effectuates placement of the data which was originally on the failing real platter surface within the second disk drive onto the hot spare surface S of the first disk drive e.g. by reading through a working read head to the failing real platter surface by rebuilding the data from RAID etc. . As a result the host is now capable of accessing that data from the hot spare surface S which now works in place of the failed real platter surface corresponding to the real surface identifier RS  .

Thus a hot spare real platter surface S is capable of operating as a hot spare to real platter surfaces of other disk drives of the data storage system . Such operation alleviates the need for each disk drive to provide a hot spare. Furthermore the host is not required to re address the LBA address space.

As described above an improved technique involves providing access to hard disk platter surfaces using surface virtualization. Here a mapping function is capable of mapping virtual platter surfaces to real platter surfaces or alternatively virtual disk drive heads to real disk drive heads . Accordingly from the perspective of a host disk accesses can be carried out by addressing LBAs which translate to virtual platter surfaces. If there is a failure of a particular real platter surface the mapping function can simply re map the virtual platter surface to a new real platter surface S without changing any addressing at the host e.g. mapping of LBAs to virtual platter surfaces by the host can remain intact . Such a technique enables efficient surface level sparing inside a disk drive .

For example it should be understood that the above describe surface sparing techniques are capable of being carried out either within a disk drive controller of a disk drive or by a host . In particular in some arrangements the circuitry of the disk drive controller is configured so that replacement of a failed real surface within a disk drive is carried out by the disk drive controller of that disk drive even if the data must be rebuilt the rebuilding operation can be carried out by the disk drive controller . In other arrangements the host is configured to maintain the mapping table see and then carry out the rebuilding operation using the API to the disk drives .

Additionally it should be understood that the above described surface sparing techniques can be combined with other mechanisms as well. For example the same disk drives which are configured to support surface sparing can be configured to carry out block sparing. Preferably when surface sparing and block sparing are used together in the same disk drive the disk drive controller maps a failed block on a particular real surface to a spare block on that same real surface .

While various embodiments have been particularly shown and described it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the spirit and scope of these embodiments as defined by the appended claims.

