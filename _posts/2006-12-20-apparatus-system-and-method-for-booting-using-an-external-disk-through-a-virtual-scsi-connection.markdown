---

title: Apparatus, system, and method for booting using an external disk through a virtual SCSI connection
abstract: An apparatus, system, and method are disclosed for booting a Logical Partition using an external storage device. The method creates a virtual SCSI device assigned to a first logical partition (“LPAR”) of a first computer using a virtual I/O server by mapping a LUN of a storage volume to a SCSI ID. The storage volume is located external to the first computer and the first LPAR is configured to share one or more physical processors and one or more physical I/O devices of the first computer with a plurality of LPARs. The method receives a boot request to boot the first LPAR. The boot request identifies the storage volume as a boot device using the SCSI ID of the virtual SCSI device. The method retrieves boot data from the storage volume using a SCSI driver of the first LPAR and boots the first LPAR using the boot data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07624262&OS=07624262&RS=07624262
owner: International Business Machines Corporation
number: 07624262
owner_city: Armonk
owner_country: US
publication_date: 20061220
---
This invention relates to diskless booting and more particularly relates to booting a logical partition from an external disk using a virtual Small Computer System Interface SCSI connection.

A logical partition LPAR may be created on a computer such as a mainframe computer. Traditionally an LPAR is created by allocating a processor memory and dedicated input output I O devices and at least one hard disk drive HDD that is physically within the computer. The computer includes physical resources to support a plurality of LPARS that share the physical computing resources of the computer. The LPAR is booted from the hard disk drive which contains an image of an operating system that runs on the LPAR. An LPAR may be considered a virtual machine. 

Typically an application runs on the LPAR. In another embodiment the application comprises a client application running on another host computer and accesses the computing resources of the LPAR running an application as a server. The LPAR accesses storage devices containing data associated with the application. The storage devices in one embodiment are part of one or more storage systems or subsystems of a storage area network SAN . The LPAR accesses the SAN though shared physical I O devices connected to the SAN and uses SAN drivers to locate and manipulate the data. An application accessing or running on an LPAR is often an application that configures large quantities of data in a database. For example a financial institution may store financial transaction data on a SAN and may use an LPAR running a financial transaction application.

Typically applications operating on an LPAR are designed to scale up as demand and use of the applications increases. Scaling up an application of an LPAR requires more and more physical resources of the computer. As the demand for shared physical resources increases one LPAR may inhibit the performance of other LPARS on the system as the growing LPAR consumes more physical resources. In certain instances the resource demands of the LPAR grow to the point that they exceed the available physical resources of the computer. Accordingly it is desirable to migrate the LPAR to a different computer that includes more resources than the first computer in order to support the growth in resource needs of the LPAR.

However moving an LPAR is complicated because the HDD used to boot the LPAR is local to the first computer. The HDD is physically connected to and located within the first computer. Significant time is required to remove or replicate this local HDD and install the original boot HDD or a copy of the boot image including the operating system on the original HDD on a second computer. If the HDD is damaged or in a physical location different than the second computer moving the hard disk drive may be impractical or impossible. The process of copying the operating system image is time consuming.

Previous attempts to solve these problems have proposed booting an LPAR from a HDD located external to the computer where the LPAR is located. This booting from an external disk may be called diskless booting and is desirable because a new LPAR on a second computer can be quickly booted from the external HDD that contains the operating system image that was used to boot the first LPAR on the first computer.

Unfortunately these attempts have had very limited success because specialized and proprietary BIOS must be programmed into the host bus adapters HBA of computers that attempt to boot from storage devices on the SAN. The main reason is that booting of an LPAR begins with the BIOS firmware in the HBA and must transition to software that is loaded and configured to identify and access the needed LPAR resources to complete the booting process.

This firmware is proprietary and specific to each hardware vendor requiring low level application programming interfaces APIs . This use of proprietary APIs further complicates the matter and tends to require that the computer and the storage devices come from the same hardware manufacturer. There is no common open standardized interface for hardware on the computer to communicate with storage devices on the SAN. Some have proposed that the computer enter a Pre boot eXecution environment PXE which would then load a boot agent. However this would also require standardization between hardware vendors. Others propose a Unified Extensible Firmware Interface UEFI standard which again would require cooperation and agreement between hardware vendors. Because there is no standard BIOS for booting from a HDD on a SAN and no foreseeable agreement on such a standard other solutions to the problem must be provided.

From the foregoing discussion it should be apparent that a need exists for an apparatus system and method for booting an LPAR using an external disk through a virtual SCSI connection. Beneficially such an apparatus system and method would boot an LPAR based on a one to one mapping of a HDD external to the computing system servicing the LPAR and a virtual SCSI device defined for the LPAR.

The present invention has been developed in response to the present state of the art and in particular in response to the problems and needs in the art that have not yet been fully solved by currently available LPARs. Accordingly the present invention has been developed to provide a computer program product an apparatus system and method for booting an LPAR using an external disk through a virtual SCSI connection that overcomes many or all of the above discussed shortcomings in the art. The computer program product includes a computer readable medium having computer usable program code programmed for booting a computer Logical Partition using an external storage device. The operations of the computer program product include creating a virtual Small Computer System Interface SCSI device assigned to a first logical partition LPAR of a first computer using a virtual input output I O server by mapping a logical unit number LUN of a storage volume to a SCSI ID uniquely associated with the virtual SCSI device. The virtual I O server is configured to map a physical I O device of the first computer to one or more LPARs on the first computer. In one embodiment the storage volume includes either a storage device or a group of storage devices configured in a storage subsystem.

The storage volume is located external to the first computer i.e. physically outside the first computer housing and components and is in communication by way of a storage area network . The first LPAR is configured to share one or more physical processors and one or more physical I O devices of the first computer with a plurality of LPARs.

The operations further include receiving a boot request to boot the first LPAR the boot request identifying the storage volume as a boot device using the SCSI ID of the virtual SCSI device and retrieving boot data from the storage volume using a SCSI driver of the first LPAR. Finally the operations include booting the first LPAR using the boot data.

In one embodiment the LUN of the storage volume includes a LUN within a storage area network SAN uniquely associated with the storage volume. In another embodiment the virtual I O server maps a LUN for the storage volume to the SCSI ID for the virtual SCSI device of the first LPAR through a shared physical host bus adapter in the first computer connected to the storage volume of the SAN over a fiber channel connection. In certain embodiments the virtual I O server receives SCSI commands directed to the virtual SCSI device and issues corresponding commands to the storage volume that are compatible with the communication protocol of the storage volume. The corresponding commands to the storage volume may be SAN commands.

In one embodiment the mapping of a SCSI ID of the virtual SCSI device to a LUN of the storage volume further comprises a unique one to one mapping between a LUN of the storage volume and the virtual SCSI device. Typically the LUN is a virtualized drive and may include a single drive or a group of drives mapped together as a LUN. For example a LUN may map to a redundant array of inexpensive independent disks RAID array. The first computer system may boot the virtual I O server prior to creating the virtual SCSI device associated with the first LPAR. In certain embodiments the first LPAR accesses SAN data storage volumes using SAN drivers however the SAN data storage volumes are different from the boot storage volume mapped to the virtual SCSI device.

In certain embodiments the virtual I O server executes within a virtualization module configured to manage and control a plurality of physical processors a plurality of physical communication adapters a plurality of physical storage devices and memory to provide virtual processors virtual communication adapters virtual storage devices and memory to a plurality of LPARS. The virtualization module may include a POWER HYPERVISOR configured to execute on a Performance Optimization With Enhanced RISC 5 POWER5 architecture.

In another embodiment the computer program product includes operations to create a second virtual SCSI device on a second LPAR of a second computer that also maps to the same LUN of the storage volume the second computer having more physical resources than the first computer and executing a second virtual I O server. The operations include configuring the second LPAR to boot from the second virtual SCSI device and shutting down the first LPAR on the first computer. Next the operations include receiving a boot request to boot the second LPAR the boot request identifying the storage volume as a boot device using the SCSI ID of the second virtual SCSI device retrieving boot data from the storage volume using a SCSI driver of the second LPAR and booting the second LPAR using the boot data.

The apparatus to boot a logical partition using an external storage device is provided with a plurality of modules configured to functionally execute the necessary steps of the computer program product described above. These modules in the described embodiments include a virtual SCSI device module configured to create a virtual Small Computer System Interface SCSI device assigned to a first logical partition LPAR of a computer using a virtual input output I O server by mapping a logical unit number LUN of a storage volume to a SCSI ID uniquely associated with the virtual SCSI device a boot request module configured to receive a boot request to boot the first LPAR the boot request identifying the storage volume as a boot device using the SCSI ID of the virtual SCSI device a boot data module configured to retrieve boot data from the storage volume using a SCSI driver of the first LPAR and a boot module configured to boot the first LPAR using the boot data.

The virtual I O server is configured to map a physical I O device of the computer to one or more LPARs on the computer. The storage volume is located external to the computer. The first LPAR is configured to share one or more physical processors and one or more physical I O devices of the first computer with a plurality of LPARs.

The apparatus in one embodiment is configured to include a SAN access module configured to access SAN data storage volumes from the first LPAR using SAN drivers wherein the SAN data storage volumes do not include the same storage volume that is mapped to the virtual SCSI device.

A system of the present invention is also presented to boot a logical partition that shares physical processors using an external storage device. The system may be embodied using various combinations of hardware and software. In particular the system in one embodiment includes a storage area network SAN a storage volume accessible through the SAN by a unique logical unit number LUN and a computer in communication with the storage volume through the SAN.

The computer includes one or more logical partitions LPAR each configured to share one or more physical processors and one or more physical I O devices of the computer. The computer also includes a virtual input output I O server configured to map a physical I O device of the computer to the one or more LPARs on the computer. The virtual I O server executes within a virtualization module configured to manage and control a plurality of physical processors a plurality of physical communication adapters a plurality of physical storage devices and memory to provide virtual processors virtual communication adapters virtual storage devices and memory to the one or more LPARS.

A virtual SCSI device module of the computer is configured to create a virtual Small Computer System Interface SCSI device assigned to a first LPAR of the computer using the virtual I O server by mapping a LUN of the storage volume to a SCSI ID uniquely associated with the virtual SCSI device. A boot request module of the computer is configured to receive a boot request to boot the first LPAR the boot request identifying the storage device as a boot device using the SCSI ID of the virtual SCSI device. A boot data module of the computer is configured to retrieve boot data from the storage volume using a SCSI driver of the first LPAR and a boot module is configured to boot the first LPAR using the boot data.

Reference throughout this specification to features advantages or similar language does not imply that all of the features and advantages that may be realized with the present invention should be or are in any single embodiment of the invention. Rather language referring to the features and advantages is understood to mean that a specific feature advantage or characteristic described in connection with an embodiment is included in at least one embodiment of the present invention. Thus discussion of the features and advantages and similar language throughout this specification may but do not necessarily refer to the same embodiment.

Furthermore the described features advantages and characteristics of the invention may be combined in any suitable manner in one or more embodiments. One skilled in the relevant art will recognize that the invention may be practiced without one or more of the specific features or advantages of a particular embodiment. In other instances additional features and advantages may be recognized in certain embodiments that may not be present in all embodiments of the invention.

These features and advantages of the present invention will become more fully apparent from the following description and appended claims or may be learned by the practice of the invention as set forth hereinafter.

Many of the functional units described in this specification have been labeled as modules in order to more particularly emphasize their implementation independence. For example a module may be implemented as a hardware circuit comprising custom VLSI circuits or gate arrays off the shelf semiconductors such as logic chips transistors or other discrete components. A module may also be implemented in programmable hardware devices such as field programmable gate arrays programmable array logic programmable logic devices or the like.

Modules may also be implemented in software for execution by various types of processors. An identified module of executable code may for instance comprise one or more physical or logical blocks of computer instructions which may for instance be organized as an object procedure or function. Nevertheless the executables of an identified module need not be physically located together but may comprise disparate instructions stored in different locations which when joined logically together comprise the module and achieve the stated purpose for the module.

Indeed a module of executable code may be a single instruction or many instructions and may even be distributed over several different code segments among different programs and across several memory devices. Similarly operational data may be identified and illustrated herein within modules and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set or may be distributed over different locations including over different storage devices and may exist at least partially merely as electronic signals on a system or network.

Reference throughout this specification to one embodiment an embodiment or similar language means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus appearances of the phrases in one embodiment in an embodiment and similar language throughout this specification may but do not necessarily all refer to the same embodiment.

Reference to a signal bearing medium may take any form capable of generating a signal causing a signal to be generated or causing execution of a program of machine readable instructions on a digital processing apparatus. A signal bearing medium may be embodied by a transmission line a compact disk digital video disk a magnetic tape a Bernoulli drive a magnetic disk a punch card flash memory integrated circuits or other digital processing apparatus memory device.

Furthermore the described features structures or characteristics of the invention may be combined in any suitable manner in one or more embodiments. In the following description numerous specific details are provided such as examples of programming software modules user selections network transactions database queries database structures hardware modules hardware circuits hardware chips etc. to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that the invention may be practiced without one or more of the specific details or with other methods components materials and so forth. In other instances well known structures materials or operations are not shown or described in detail to avoid obscuring aspects of the invention.

The schematic flow chart diagrams described herein are generally set forth as logical flow chart diagrams. As such the depicted order and labeled steps are indicative of one embodiment of the presented method. Other steps and methods may be conceived that are equivalent in function logic or effect to one or more steps or portions thereof of the illustrated method. Additionally the format and symbols employed are provided to explain the logical steps of the method and are understood not to limit the scope of the method. Although various arrow types and line types may be employed in the flow chart diagrams they are understood not to limit the scope of the corresponding method. Indeed some arrows or other connectors may be used to indicate only the logical flow of the method. For instance an arrow may indicate a waiting or monitoring period of unspecified duration between enumerated steps of the depicted method. Additionally the order in which a particular method occurs may or may not strictly adhere to the order of the corresponding steps shown.

The system includes a computer configured with one or more LPARs . The computer is typically a mainframe computer. In one embodiment the computer is configured with a Performance Optimization With Enhanced RISC 5 POWER5 architecture by IBM . Typically the computer is configured to run one or more applications. The applications run on one or more LPARs . The computer is typically configured with LPARs running as servers and is connected to one or more host computers accessing the applications. The host computers may be connected to the computer through the Internet a local area network LAN a wide area network WAN an optical fiber network and the like. In one embodiment the computer is part of a SAN . In another embodiment the computer is connected to a SAN .

The computer includes a virtual I O server executing within a virtualization module configured to manage the I O devices of the computer and their allocation to the LPARs . The virtual I O server acts as an I O server to the LPARs and is configured to map one or more physical I O devices to one or more LPARs . The virtualization module is configured to manage and control multiple processors physical communication adapters physical storage devices and memory to provide virtual processors virtual communication adapters virtual storage devices and memory to one or more LPARs . In one embodiment the virtual I O server is an IBM VIO Server and the virtualization module is an IBM POWER Hypervisor both running on a POWER5 computer.

The computer is configured to allow an LPAR to include one or more processors and one or more I O devices . The processors and I O devices may be shared by multiple LPARs . For example a first LPAR includes a first processor a second processor a first I O device and a second I O device . Typically LPARs do not share memory so the first LPAR includes a first memory . The second LPAR is configured with the second processor a second memory the first I O device and the second I O device . The third LPAR is configured with a third processor a third memory the second I O device and a third I O device . A computer with the POWER5 architecture includes the capability to allocate to an LPAR multiple processors and multiple I O devices .

The computer includes multiple processors and if the computer includes the POWER5 architecture the computer may include up to 64 processors. The processors are configured to run applications to access storage devices execute commands etc. The processors are configured to run an operating system such as OS390 z OS etc. The computer includes memory that is typically partitioned into multiple parts. Typically a memory is allocated to a single LPAR . In one embodiment memory may be shared by multiple LPARs . The memory may include random access memory RAM non volatile RAM NVRAM flash memory dynamic RAM DRAM and the like. One of skill in the art will recognize other processor and memory types and functions.

The computer includes one or more I O devices configured to communicate with storage devices host computers computer networks etc. The I O devices may include network interface cards network adapters modems wireless network adapters etc. The I O devices may communicate over a fiber channel FC network a LAN a WAN a wireless network a SAN etc. The I O devices are configured to be controlled by the virtual I O server and each shared by one or more LPARs . Data commands and other computer signals are routed from devices allocated to an LPAR to the I O devices by the virtualization module .

The system includes a SAN with a storage controller and one or more storage devices . . . . The SAN typically communicates with one or more servers and host computers. Typically a SAN communicates over a fiber channel network but may communicate over an Ethernet network using Internet SCSI iSCSI protocol. The SAN may also use other networks and protocols. The SAN includes a storage controller . The storage controller typically routes SAN traffic to an appropriate device controls and configures storage devices configured in a redundant array of inexpensive independent disks RAID etc. The storage controller may include servers data movers tape storage servers RAM NVRAM and the like. The storage controller typically uses SAN drivers to access data on storage devices . The SAN drivers are usually very well adapted to accessing multiple storage devices during normal operation. One of skill in the art will recognize other storage controller configurations allowing data access by an LPAR of a computer .

The storage devices may be hard disk drives optical drives tape storage libraries and the like. Some of the storage devices may be configured in a RAID array. The storage devices are typically divided into logical storage volumes and each storage volume is assigned a logical unit number LUN . For example a RAID array may be assigned a LUN. In another example a single disk may be assigned a LUN. In yet another example a portion of a disk may be assigned a LUN. Each LUN typically corresponds to a physical address or in the case of a RAID array more than one physical address. Typically a computer accessing a storage device or a RAID array addresses data access commands to a LUN. One of skill in the art will recognize other ways that one or more storage devices may be configured with a LUN.

The virtual I O server of the computer may configure and assign a virtual SCSI device. SCSI is a standard interface and command set for transferring data between devices on internal and external computer busses. Typically SCSI is used for hard disk drives and tape storage devices on personal computers workstation computers and mainframe computers but may also connect scanners printers DVD drives and the like. An internal SCSI hard disk drive is often used by a computer as a boot device and contains an image of the operating system used by the computer . Due to the popularity of booting a computer from a SCSI device SCSI device drivers are usually well tested and adapted for booting computers. SCSI device drivers typically perform reliably during a boot operation handle boot errors very well and have a well defined set of error codes and messages.

A virtual SCSI device is typically an external physical device or a LUN such as a storage device or RAID array of a SAN configured as a logical storage volume mapped to a computer as a virtual device and then assigned a SCSI identifier ID . The virtual SCSI device may then be accessed by the computer as a SCSI device using SCSI drivers. An external storage volume configured as a virtual SCSI device may use standard SCSI device drivers. A storage volume configured as a virtual SCSI device may be used to boot the computer .

The computer of the system includes at least one LPAR with a virtual SCSI device assigned by the virtual I O server . The virtual I O server creates the virtual SCSI device by mapping a LUN of a storage volume to a SCSI ID uniquely associated with the virtual SCSI device. In one embodiment the virtual SCSI device is mapped to a LUN of the SAN . In another embodiment the virtual SCSI device is mapped to a hard disk drive or other storage device that is not part of the SAN . The LUN of the SAN in one embodiment is mapped to one storage device . In another embodiment the LUN of the SAN is mapped to multiple storage devices . . . configured as a RAID array.

The LUN mapped as a virtual SCSI device assigned to the LPAR in one embodiment contains an image of the operating system for the LPAR . The LPAR may be booted by receiving a boot request that identifies the SCSI ID of the virtual SCSI device. Boot data may then be retrieved from the virtual SCSI device using a SCSI driver and the LPAR is booted from the boot data retrieved from the virtual SCSI device. Booting the LPAR from the virtual SCSI device or diskless booting is advantageous because the LPAR may be booted quickly after a failure or other problem on another machine configured with an LPAR that also is booted from the LUN mapped as a virtual SCSI device to the LPAR of the failed computer. Booting from a virtual SCSI device is also advantageous because standard SCSI drivers that are stable and well adapted for booting may be used. One of skill in the art will recognize other advantages of diskless booting of an LPAR using a virtual SCSI device.

Booting the LPAR from the virtual SCSI device is also advantageous in migrating to a new computer . For example when a computer becomes obsolete the LPAR booting from a virtual SCSI device may be shut down when the obsolete computer is shut down. A new LPAR can be created on a new computer and the LPAR may be booted from the same storage volume mapped to the virtual SCSI device of the older LPAR . This may be accomplished by first booting a virtual I O server and virtualization module of the new computer . The virtual I O server may be used to configure a new virtual SCSI device on the new LPAR mapped to the storage volume of the previous virtual SCSI device.

The system also includes a SAN with a storage controller and storage devices substantially similar to those described above in relation to the system of . The system includes LPARs configured with virtual SCSI devices SCSI IDs and virtual SCSI client adapters a virtual I O server configured with virtual SCSI server adapters and storage devices configured into LUNs all of which are described below.

The computer includes a first LPAR configured with a virtual SCSI device that is mapped to a first SCSI ID . The virtual SCSI device is typically treated as any other SCSI device on the first LPAR . In one embodiment the virtual SCSI device is mapped to a single storage device configured as a first LUN . The first LUN is accessible through a first I O device in the computer which is allocated to the first LPAR . In a particular embodiment the single storage device includes an image of an operating system used by the first LPAR . The first LPAR is configured to boot up the operating system by accessing the virtual SCSI device of the first LPAR . The first LPAR retrieves boot data from the virtual SCSI device using SCSI drivers. Preferably a LUN configured for booting an LPAR has a one to one mapping with a virtual SCSI device of the LPAR .

Similarly the second LPAR and third LPAR each have a first virtual SCSI device and each is assigned a SCSI ID . Note that the SCSI ID assigned to the second and third LPARs may be identical to the SCSI ID assigned to the first virtual SCSI device of the first LPAR because the virtual I O server tracks the mapping between a virtual SCSI device of an LPAR and a LUN . For example each of the three LPARs may have a virtual SCSI C drive with SCSI ID while each of the three LPARs may be mapped to a different LUN .

In the depicted embodiment the second LPAR includes a first virtual SCSI device mapped to a SCSI ID . The virtual SCSI device of the second LPAR is mapped by the virtual I O server to a second LUN assigned to a second storage device . The third LPAR includes a first virtual SCSI device mapped to a SCSI ID . The virtual SCSI device of the third LPAR is mapped by the virtual I O server to a third LUN assigned to a third and a fourth storage device 

The virtual I O server in one embodiment maps virtual SCSI devices to the LPARs using a server client relationship. For example the first LPAR may include a virtual SCSI client adapter that communicates with a virtual SCSI server adapter located on the virtual I O server . Similarly the second and third LPARs each include a virtual SCSI client adapter with a corresponding virtual SCSI server adapter .

Virtual SCSI is based on a client and server relationship. The virtual I O server owns the physical resources and acts as a server. Physical adapters with attached disks on the virtual I O server partition may be shared by one or more LPARs enabling client logical partitions to consolidate and potentially minimize the number of physical adapters required. The logical partitions access the virtual SCSI resources provided by the virtual I O server as clients.

The virtual I O server owns the physical resources and the virtual SCSI server adapters and acts as server or SCSI target device. The client logical partitions have a SCSI initiator referred to as the virtual SCSI client adapter and accesses the virtual SCSI targets as standard SCSI LUNs. The virtual adapters are typically configured using a console. The configuration and provisioning of virtual disk resources is typically performed using the virtual I O server .

Physical disks owned by the virtual I O server can be either exported and assigned to a client logical partition as a whole or can be partitioned into storage volumes or LUNs . The LUNs can then be assigned to different partitions. Therefore virtual SCSI enables sharing of adapters as well as disk devices . To make a physical or a storage volume available to a client partition requires that it be assigned to a virtual SCSI server adapter on the virtual I O server . The client logical partition accesses its assigned disks through a virtual SCSI client adapter . The virtual SCSI client adapter recognizes standard SCSI devices and LUNs through this virtual server adapter .

The virtual I O server accurately identifies a physical volume each time it boots even if an event such as a storage area network SAN reconfiguration or adapter change has taken place. Physical volume attributes such as the name address and location might change after the system reboots due to SAN reconfiguration. However the virtual I O server typically is able to recognize that this is the same device and update the virtual device mappings. For this reason in order to export a physical volume as a virtual SCSI device the physical volume should have either a unique identifier UDID a physical identifier PVID or an IEEE volume attribute.

The computer in one embodiment includes a POWER Hypervisor that includes the functionality of the virtualization module described in relation to the system of . The virtual I O server which may be an IBM VIO server cooperates with the POWER Hypervisor to route data access requests from an LPAR to the allocated virtual SCSI device and corresponding responses though the virtual SCSI client server adapters and through the I O device in communication with the LUN mapped to the virtual SCSI device .

The apparatus includes a virtual SCSI device module that creates a virtual SCSI device assigned to the first LPAR of the computer using the virtual I O server . The virtual SCSI device module creates the virtual SCSI device by mapping a LUN of a storage volume to a SCSI ID uniquely associated with the virtual SCSI device . For a virtual SCSI device the storage volume is located external to the computer .

The apparatus includes a boot request module that receives a boot request to boot the first LPAR . The boot request identifies the storage volume LUN as a boot device using the SCSI ID of the virtual SCSI device . A boot request typically identifies a common or known location where the starting address of the operating system for the LPAR resides. For example the boot request may start booting from block track of SCSI ID . In this example the virtual SCSI device module would map SCSI ID to the LUN of the storage volume. The storage volume maps to one or more storage devices . The storage volume in one embodiment maps to an external storage device that is not part of a SAN .

For example depicted in the system of the first storage device is located in a SAN is mapped as a storage volume and given a LUN . The operating system image would reside on the first storage device at block track . In another embodiment the operating system is at a different location on the first storage device and the location is mapped to block track of the virtual SCSI device . One of skill in the art will recognize other ways for the boot request module to identify the storage volume as a boot device using the SCSI ID and the virtual SCSI device .

The apparatus includes a boot data module that retrieves boot data from the storage volume using a SCSI driver of the first LPAR . The storage volume is mapped to the first LPAR as a virtual SCSI device so SCSI drivers can be used to retrieve boot data from the storage volume. The apparatus includes a boot module that boots the first LPAR using the boot data. Typically the LPAR boots in the same way as an LPAR that included a storage device residing in the computer and allocated to the LPAR.

In one embodiment the apparatus includes a SAN access module that accesses SAN data storage volumes from the first LPAR using SAN drivers. Typically the SAN data storage volumes would not include the storage volume mapped as a virtual SCSI device . Once the LPAR is booted and operating normally the SAN access module allows the LPAR to access other SAN storage volumes using SAN drivers that are well suited for data access during operation other than boot up. Typically because the storage volume LUN is mapped to the LPAR as a virtual SCSI device the storage volume is unavailable for further mapping through SAN drivers. The LPAR typically accesses the storage volume mapped as a virtual SCSI device through SCSI device drivers as a SCSI device.

The boot request module receives a boot request to boot the first LPAR . The boot request identifies the storage volume as a boot device using the SCSI ID of the virtual SCSI device . The boot data module retrieves boot data from the storage volume using a SCSI driver of the first LPAR the boot module boots the first LPAR using the boot data and the method ends .

A virtual SCSI device module of a second computer creates a second virtual SCSI device on a second LPAR of a second computer. The second virtual SCSI device maps to the same LUN of the storage volume. In addition typically the second computer is replacing the first computer and has more physical resources than the first computer . The second computer also executes a second virtual I O server. The second virtual I O server typically maps a physical I O device of the second computer to one or more LPARs on the second computer. The virtual SCSI device module configures the second LPAR to boot from the second virtual SCSI device.

A shut down routine shuts down the first LPAR on the first computer . Typically the first LPAR is shut down under the direction of a system administrator but may also be done automatically. A boot request module on the second computer receives a boot request to boot the second LPAR on the second computer. The boot request identifies the storage volume used to boot the first LPAR as the boot device using the SCSI ID of the second virtual SCSI device. A boot data module on the second computer retrieves boot data from the storage volume using a SCSI driver of the second LPAR. A boot module on the second computer boots the second LPAR using the boot data and the method ends .

The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is therefore indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

