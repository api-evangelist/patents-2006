---

title: Enterprise entitlement framework
abstract: A method and system for managing privilege information across multiple applications and/or databases is provided. A flexible and extensible enterprise entitlement framework may be implemented to store and manage various types of privileges, access rights and resources. The enterprise entitlement framework may include a variety of data objects and structures configured to store various components and/or aspects of a privilege. The data objects may include resource type objects, user objects, role objects, action objects, resource attribute objects, list item object and/or hierarchy objects. The data objects defined for a particular privilege may further be linked according to relationships between one or more objects. The enterprise entitlement framework is extensible for use with new applications by defining new objects compatible with the privilege structures of the new applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08931055&OS=08931055&RS=08931055
owner: Accenture Global Services GmbH
number: 08931055
owner_city: Dublin
owner_country: IE
publication_date: 20060831
---
The invention relates generally to computer security. Specifically the invention relates to a flexible framework for managing user privileges across multiple applications on a computer system or network.

Access to information applications and other types of resources is commonly regulated based on privileges assigned to users and or devices. For example privileges may define a level of security clearance that a user and or device must have or meet to access a particular resource. Thus if an application requires top secret clearance a user may be required to have top secret privileges in order to access and or use the application or functions thereof. Similarly access to one or more portions of a company s financial data may be regulated by a user s title and or rank as defined within the company or by the company s organization chart. For example access to earnings projections for the current quarter might be restricted to those employees or users having a title or position of Manager or higher. Accordingly those that have not attained a position of Manager might be denied access to the earnings projections.

Oftentimes multiple applications and or databases within a company or organization may use the same or similar privilege structures to manage access. To streamline the use and management of privilege information in such instances companies and organizations have implemented management applications to centrally control privilege data common to the various databases and or applications. For example many current methods of managing privilege information across multiple applications use various Lightweight Directory Access Protocol LDAP solutions. When new applications and or databases are added to the privilege management system however LDAP solutions generally require additional programming and or development to accommodate the new applications and or databases. In addition LDAP solutions may also require further modification and or reconfiguration in response to an application currently managed by the LDAP solution being updated and or reconfigured.

For the foregoing reasons a flexible and extensible system and method for managing privilege information across multiple applications and or databases is needed.

Many of the aforementioned problems are solved by providing a flexible and extensible enterprise entitlement framework a foundation for privilege management systems. The enterprise entitlement framework may include a variety of data structures and objects that may be used to represent and or store one or more components of a privilege. For example a resource type object may identify an application or type of application to which a privilege controls access. Similarly an action object may store one or more actions authorized by a certain privilege. Other data objects may include role objects user objects hierarchy objects and rules objects. These other data objects may represent additional or alternative components of a privilege. Accordingly privileges may be user based or role based depending on management preferences and other factors. In other words a privilege may be defined for one or more specified users or alternatively or additionally may be defined for specified roles.

The data objects in the infrastructure may further include relationships and references to one another. In one example a privilege object may include a reference to a resource type object corresponding to the resource type to which the privilege applies. Privileges may further be associated with one or more rule objects that specify conditions under which the privileges may be granted. For example a rule object may store a time of day condition that may control when an associated privilege may be exercised. Parsing and storing the aspects of a privilege into various component objects and structures allows a privilege management system the flexibility to provide and adapt privilege management capabilities to new resource and privilege types.

In another aspect maintenance objects may further be defined to support functions such as auditing and reporting. Maintenance objects may be categorized into three general groups History Tracking Error Logging and Activity Tracking and Resource Import. An Action history tracking object for example may be used to track a history of modifications made to a particular action object. Error Logging and Activity Tracking objects on the other hand may be used to log all actions and or resulting errors corresponding to an associated object. For example if a user performed an action on a particular resource type resulting in an error an error logging object associated with the particular resource type may generate an entry in a log recording the error as well as the action that produced the error. One or more triggers may be used to define when data is logged or tracked. Resource import objects may further store tables of information relating to hierarchies products and actions managed by the infrastructure and management system to be included in a privilege. The data saved in each of the maintenance objects may be retrieved by a user to determine a variety of information including the cause of a malfunction and or privilege changes made since a specified time.

In yet another aspect privilege rules and privilege cascades may be used to automatically redefine a privilege scope. Privilege rules for example may be used to qualify a privilege. For example a privilege such as ordering business cards may be qualified by the rule if the ordering party is in the procurement department. As such even if the privilege is assigned to a particular role a party associated with that particular might not be authorized to order business cards if the party is not in the procurement department. If the user changes departments to the procurement department the validity of the privilege for the user may automatically change based on an evaluation of the privilege rule. Privilege cascades on the other hand allow a user to add a privilege and apply it to a set of nodes or items based on a specified relationship to a selected node or item. For example a privilege cascade option called All Children may assign a privilege to all children nodes of a selected hierarchy node. In one or more embodiments if a new hierarchy node is added as a child of the selected hierarchy node the privilege scope may be redefined to include the new child.

These as well as other advantages and aspects of the invention are apparent and understood from the following detailed description of the invention the attached claims and the accompanying drawings.

In the following description of the various embodiments reference is made to the accompanying drawings which form a part hereof and in which is shown by way of illustration various embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural and functional modifications may be made without departing from the scope of the present invention.

Computer may output data through a variety of components and devices. As mentioned above one such output device may be display . Another output device may include an audio output device such as speaker . Each output device and may be associated with an output adapter such as display adapter and audio adapter which translates processor instructions into corresponding audio and video signals. In addition to output systems computer may receive and or accept input from a variety of input devices such as keyboard storage media drive and or microphone not shown . As with output devices and each of the input devices and may be associated with an adapter for converting the input into computer readable recognizable data. In one example voice input received through microphone not shown may be converted into a digital format and stored in a data file. In one or more instances a device such as media drive may act as both an input and output device allowing users to both write and read data to and from the storage media e.g. DVD R CD RW etc. .

Computer may further include one or more communication components for receiving and transmitting data over a network. Various types of networks include cellular networks digital broadcast networks Internet Protocol IP networks and the like. Computer may include adapters suited to communicate through one or more of these networks. In particular computer may include network adapter for communication with one or more other computer or computing devices over an IP network. In one example adapter may facilitate transmission of data such as electronic mail messages and or financial data over a company or organization s network. In another example adapter may facilitate transmission or receipt of information from a world wide network such as the Internet. Adapter may include one or more sets of instructions relating to one or more networking protocols. For example adapter may include a first set of instructions for processing IP network packets as well as a second set of instruction associated with processing cellular network packets. In one or more arrangements network adapter may provide wireless network access for computer .

One of skill in the art will appreciate that computing devices such as computer may include a variety of other components and is not limited to the devices and systems described in .

In one or more arrangements gateway may further facilitate communication between system and other security and identity management applications such as applications services to allow the other applications to integrate the features and functionalities of system . In one example a service like SUN IDENTITY MANAGER may integrate the services and features of system through web service gateway . Gateway may be implemented as part of system or alternatively may be an independent process application and or device separate from system . Alternatively according to one or more aspects communication between applications or a user and system may be established directly. In other words gateway might not be used to facilitate communications. For example batch exports prepared by system may be directly transmitted to applications without the help or use of web services gateway .

Presentation and application tier may implement one or more web and application interfaces that may include web menus and control panels such as management console . Management console may be implemented as an applet or program allowing a managing user to access and modify various privilege information stored in data layer . In particular management console may provide a graphical or non graphical user interface through which a user may add remove manage privileges. Thus when a user logs in to or otherwise accesses system the user may be presented with various options and controls through management console . For example a user may be provided options to assign a privilege to one or more users roles hierarchy nodes or list items. A user may further be given options for adding and deleting objects such as users roles actions resource attributes and the like. Management console may display additional information related to privilege status number of privileges defined privileges associated with a user history of changes to privileges for a user applications managed and the like.

In addition to management console presentation application tier may further provide additional application programming interfaces APIs and . In one or more embodiments APIs may be implemented using an ASP.NET framework. Each API may be dedicated to different processes in system including authorization API administration API audit API and reporting API . For example Authorization API may facilitate tasks ranging from determining whether a user is authorized to perform one or more actions against a particular resource. Administration processes on the other hand may provide applications with functions calls for adding and removing privileges from system . Further the Administration Audit and Reporting APIs may provide information and one or more abilities that are provided by management console . Thus rather than requiring a user to manually modify retrieve privilege information from system via management console an application may automatically do so using administration API . One of skill in the art will appreciate that various other APIs may be similarly included in system depending on the functional needs of a user or organization.

Additionally presentation and application tier may include one or more service components for executing and or performing the services published through APIs and . Service components may relate to various categories of procedures or tasks including authorization administration audit reporting caching data access and or error handling. Data access component for example may be dedicated to interfacing with data layer and retrieving information from or saving information to data layer . Thus to determine whether a user is authorized to perform a particular action in association with a specific item data access component may be called upon to provide access to data layer and to retrieve privilege information related to the specified user the action and or the resource. Components may also be interlinked allowing one component to invoke the methods and services of another service component. In one example reporting component may request data from data access component to formulate a requested report.

Data layer may further include data processing portion . Data processing potion may define one or more procedures for storing processing and or retrieving data from data layer and in particular privilege information database . For example stored procedures may define how a resource type user role and or privilege are to be stored in database . For example procedures may be defined to allow a user to retrieve certain types of data from the system e.g. GetListUserRoleMap . In another example a procedure may be defined to insert a privilege e.g. InsertPrivilege . Data processing portion may further include an Extract Transform Load ETL system that may perform extraction transformation and loading operations in accordance with various procedures including those stored in procedures component . In one or more instances ETL system may be used to convert information received in a first format into a second format compatible with database . In one particular example ETL system may be used to load hierarchy information. Alternatively or additionally ETL system may load data into database based on the rules and procedures of component .

Privilege information database may store two types of repositories and that each has an independent function. For example repository may be responsible for storing privilege rules and information while repository may be dedicated to audit and or error storage. Each repository and may have specific storage procedures that are stored in and enforced by component . Rules repository provides central storage of privilege and permission data relating to different users roles resource types actions and privileges. Data may be extracted from repository to check whether a user is authorized to perform one or more actions. The storage and enforcement of privileges and rules in the management infrastructure are discussed in further detail below. Audit error repository on the other hand may store data relating to audits and or diagnostics performed on repository or another database. The stored audits and or errors may be used to debug or verify the integrity of system and or databases used therein. The various elements described with respect to may be combined and or otherwise modified in numerous of ways. For example in one alternate embodiment repositories and may be combined into a single repository.

Additionally or alternatively for each resource type privileges or privilege objects may be defined according to an associated hierarchy corresponding to e.g. hierarchy object . Hierarchy object may be generally used as a basis for defining the structure of a resource type for which privileges can be granted. That is hierarchy object may define a hierarchy based on a structure associated with application data that is used to define a privilege for the resource type. For example telephone information and data associated with a telephone service management application may be organized and or structured according to location and region. Thus a hierarchy may be defined according to the location and region definitions and classifications specified by the telephone service management application. Alternatively or additionally the hierarchy may represent an organizational structure that is used to define a privilege for the resource type. For example hierarchy object may define security levels or positions within an organization or company as well as the relationships between each level or position. In another example hierarchy object may define a geographic hierarchy including city state region and country levels or nodes for a transportation application resource type. The country node may represent the broadest level of the hierarchy followed by region state and city. Privileges defined by privilege object may then be applied and or associated to various levels of a hierarchy. Thus transportation privileges that relate to activities on a national level may be associated with a country level or node in the hierarchy while one or more privileges relating to transportation intrastate highways may be associated with a state level in the hierarchy.

According to one or more aspects a list of target items to which a privilege may be applied may be represented by list object . For example a privilege stating that James as a supervisor is allowed to modify time entries may be decomposed to an action modify on a target item time entries. In another example a privilege may be created specifying that James as a supervisor is allowed to modify expense entries. This privilege may be decomposed into an action modify on a target item expense entries. According to one or more embodiments a resource type may be associated with a predefined set of target items for which privileges may be defined. The set of target items may be represented by list object while each target item in the set may be stored as an item object such as list item object . In one example a financial application may include multiple target items such as quarterly earnings data financial forecast information expenditures data and or investment records for which one or more privileges may be defined. As such a user in adding a privilege to the financial application may select one or more items from the set of target items associated with the application or application type i.e. resource type . Target list items and lists as a whole may be added deleted and or otherwise modified. Alternatively or additionally list target items may further be associated with one or more specific levels in a hierarchy. That is privileges for certain list target items may be restricted to one or more specified hierarchy levels.

Associations and relationships between a privilege and one or more other objects may be defined using resource attributes represented by resource attribute object . For example a hierarchy resource attribute may be defined such that it identifies a particular node or level in a hierarchy to which a privilege applies. Similarly a list resource attribute may specify a particular list item to which a privilege corresponds. In other words a resource attribute may define the scope of a privilege i.e. the hierarchy nodes and or list items to which the privilege applies . A privilege may be associated with multiple resource attributes including hierarchy and list resource attributes the multiple attributes may be stored or defined as a resource attribute set. A resource attribute set may be defined and or created based on resource attribute set object . Resource attribute sets generally refer to a group of resource attributes that may be associated with a single privilege or resource type. As such a privilege may be associated with multiple list items or hierarchy nodes using multiple list resource attributes or a resource attribute set. In one or more configurations a resource attribute set may enhance the data retrieval of resource attributes.

A privilege may include components such as users user roles and actions to which the privilege relates. As such actions may be stored and or represented by an action object . Role objects on the other hand may be used to define user roles in an organizational structure while user objects may be used to represent particular users or employees in the corresponding organization. In one or more instances each user represented by a user object may be associated with a role represented by role object . Each object in model e.g. objects and may further include one or more data fields and or links that refer to other objects. For example privilege object may include fields that reference information associated with or stored in user object resource type object role object and rules object . Data fields may be used to specify a variety of characteristics including identification information for each object.

The arrows illustrated in and in various figures that follow represent links from one data object to another data object. Links may represent and store relationship information between data objects that may share and or reference similar privilege information. The direction of the arrow may define which object is the reference object and which is the referencing object. For example a link is shown linking resource type object to privilege object . The link is directed towards privilege object . As such the link may indicate that privilege object includes one or more references to data stored and or maintained by resource type object . Similarly user role map object may reference and or include data stored by both user object and role object . Such links allow the enterprise entitlement framework i.e. privilege management system to define the associations between a variety of data and or components corresponding to a particular privilege. More generally the links between data objects provide meaning to individual objects associated with a privilege.

By parsing and storing privileges as individual components and characteristics the logical data model infrastructure may provide a management system with the flexibility and extensibility to implement new and or modified privileges resource types and roles as new applications are added and or as old applications are modified. Further the use of resource attributes to define relationships between various components of a privilege automatic evolution and self adjustment redefinition of privileges. For example a privilege defined by a privilege object may be applied to additional target items by adding the new target items to a list identified in a resource attribute associated with the privilege. Thus manual redefinition or reprogramming of the privilege or privilege object may be rendered unnecessary.

Scenario of describes Alice as a sub Ordering Authority OA for the DoJ having the privilege to view order data. Parsing the privilege in accordance with one or more arrangements of the entitlement framework and model the user may be defined as Alice sub Ordering Authority for the DoJ as the role viewing as the action and order data as the list item. A rule such as if the user is a subordinate of the requestor may further be determined from the privilege. The model illustrated by is but one example of an entitlement framework and is not meant to limit the features and aspects described herein. For example a variety of other components and or aspects of a privilege may be added to the framework illustrated in .

Referring again to each of objects and may store one or more attributes of a privilege such as those described with respect to . Other objects such as a user role map object and privilege action map object may also be implemented to provide information for tracking and managing associations between objects. As an example user role map object provides a table of associations between users and roles. Thus if an application using the privilege management system requested a list of all users associated with a certain role one or more user role map objects may be accessed to retrieve such information. Similarly if the application requested all privileges corresponding to a certain action the information may be extracted using privilege action map object .

To describe the data model in additional detail group the objects and structures illustrated in into functional categories such as Entitlements Hierarchy Privileges Resource Type Users and Roles and Rules. For example is a diagram illustrating multiple objects and structures relating to entitlement functionality in a privilege management system. The Entitlement category includes multiple objects that drive a user experience by showing users the privileges they have at a high level i.e. at the application level . In other words objects and data structures and upon which the Entitlement category is built provides a high level representation of privilege information stored for a user in the data model by resource type. This high level representation of the privilege information may further be stored in a coarse grain privilege object such as object . Entitlement functionality may be driven by objects such as application object resource type application map object privilege status object coarse grain privilege object and portal object . Portal object defines a web front end through which a user may access the applications to which one or more privileges for the user are associated and or stored. Different portals may be defined for different applications. In one or more embodiments different portals or web front ends may be defined for different instances of the same application depending on one or more application parameters. Application parameters may determine what resource types and or privileges are available and provided to the user. Application parameters may include for example target items for which privileges may be defined and available actions that may be performed by a user. Each application may further be associated with a different portal based on differences in application needs and characteristics.

Additionally application object may identify a specific application to which a resource type or resource type object corresponds. Resource type application map object on the other hand may be used to map relationships between resource types and corresponding applications. In one or more instances an application may be associated with multiple resource types. For example a particular transportation management application may correspond to a subway transportation resource type an airline resource type and a ground transportation resource type. Alternatively an application may be associated with multiple instances of the same resource type. The identification of resource types corresponding to an application may be facilitated by resource type application map object . Map object may store associations between resource types and one or more applications for fast look up.

Coarse grain privilege object defines categories or generalizations of privileges associated with an application or resource type. For example a financial transaction application may be associated with fine grain privileges such as deleting ID fields of financial records adding financial records and adjusting forecasts. Presenting a user interface or GUI with buttons or links that represent all of the fine grain privileges may in some instances overload the user with information. As such coarse grain privilege object defines one or more privileges categories or types of fine grain privileges that may be associated with links or buttons in a user interface. In the above example the fine grain privileges may be associated with a coarse grain privilege that may be used to determine whether or not an option called modifying financial records is shown on the user interface or otherwise available. Thus rather than processing three different privileges a single coarse grain privilege may be used to determine the options to be presented to the user. Privilege status object may specify whether a coarse grain privilege is available active or not available inactive for a particular user.

In one or more arrangements resource attribute object may be used to define one or more attributes of a particular resource type associated with a privilege. The resource attribute may further define a relationship between a privilege and another object such as a hierarchy node. In such an instance the relationship defined by the resource attribute may represent the inclusion of the hierarchy node in the privilege s scope. Resource attributes may further define relationships between list or target items and a privilege. In particular a resource attribute may determine which list or target items are subject to the privilege. Accordingly the scope of a privilege may be automatically redefined or adjusted based on one or more changes to objects with which the privilege has a relationship e.g. a resource attribute a hierarchy node and or a list item . That is no manual reconfiguration or redefinitions of the privilege or privilege object may be needed. Other resource attributes may also be defined and associated with privileges.

Further privilege cascades defined by privilege cascade object may be used to define or modify the scope of a privilege by adding hierarchy nodes and or list items that have a specified characteristic. In one instance the characteristic may include a relationship. In other words additional hierarchy nodes or list items whose relationship with a selected node or item matches the relationship identified by the privilege cascade may be added to the scope of the privilege. For example privilege cascades may be used to assign a privilege to a hierarchy node and all nodes subordinate to that node. In particular a user may be given an option such as All Children. In another example a privilege cascade may provide a user the option e.g. All List to apply a privilege to not only a particular list item but all other items in the same list as well. The privilege cascade option or shortcut may eliminate the need for an administrator to select and or apply a privilege to each child node in a hierarchy. Thus the data model may use privilege cascade object to define and or create the association between the explicitly granted privilege and the one or more privileges identified by the shortcut. Other types of characteristics may also be used in the privilege cascade including hierarchy type and node type.

According to one or more aspects privilege cascading further allows automatic self adjustment of a privilege in the event a new hierarchy node or list item is added. For example a privilege cascade such as All Children may automatically associate newly added children node to a privilege in response to the addition. Similarly a new target item added to a list to which a privilege is related may be automatically associated with the privilege based on the All List privilege cascade option. As such manual redefinitions of the privilege or other components of the privilege might not be needed to adapt to newly added parameters using such a privilege cascade system.

In one or more configurations the resource attribute template may include a nullability flag that defines whether an attribute has to be defined. A resource attribute template may also include a grantable flag that specifies whether a privilege may be granted to the resource attribute. For example in a public works system privileges might not be grantable to an attribute corresponding to a state hierarchy node but may be grantable to an attribute corresponding to a city hierarchy node. Such a configuration may be useful to prevent overbroad privilege definitions. The template may further provide specifications as to data format and storage format. In particular template object may specify one or more required fields maximum data sizes for each of the fields data types and or combinations thereof. Relationships between resource attributes such as parent and child may also be defined by the resource attribute template.

Data objects and structures for implementing hierarchies and lists are illustrated in . Lists generally relate to a collection of objects target items and or other information. Hierarchies on the other hand generally refer to collections of objects data and or other information wherein the information is ranked or ordered according to one or more characteristics. Hierarchies and lists may be used independent of one another or alternatively may be employed in combination. For example different levels of a hierarchy may be associated with different lists of actionable items. Thus a privilege of a first hierarchy level may be permitted to act on a certain list of items while a privilege of a second hierarchy level may be permitted to act on a different list of items. Further node class object may be used to differentiate between hierarchy nodes and list nodes. In addition nodes within a hierarchy and or list may be further defined by a node type corresponding to a node type object . For example nodes in a geographic hierarchy e.g. country state city may have a node type of geography. Similarly hierarchies may also be characterized by a type variable e.g. Hierarchy Type ID corresponding to hierarchy type object . Hierarchy types may be defined by a user and may include geographic hierarchies security hierarchies position hierarchies and the like. Hierarchies may further be identified by a hierarchy identifier variable e.g. Hierarchy ID .

As discussed users and roles may further be linked by a user role map as defined by user role map object . User role map object stores a correspondence or association between a user and a particular role. Thus if user Liz were to act as the Human Resources Manager in an organization a privilege management system may associate user Liz with the role of Human Resources Manager using user role map object . Role objects like role object may include fields that store information such as a role name a role description and an expiration date. Like user impersonations and roles user role associations may also include an expiration date and or an effective date to ensure that associations are not outdated.

Further according to one or more aspects a privilege may be validated for a user or role based on an evaluation of a privilege rule. For example a privilege rule may condition the validity of a user s privilege on whether the user is assigned to a first department role. This privilege may for ordering books or some other item. As such if the user s role changes the user s privilege for ordering books would be invalidated. In other words the user s privileges changes. The user s privileges are dynamic and self adjusting based on the privilege rule.

Hierarchy nodes may further contain fields such as a node name a parent hierarchy node id and a root hierarchy node id. A parent hierarchy node id may be used to define relationships between nodes in the hierarchy. Accordingly hierarchy node in one or more instances may be defined as the parent hierarchy node of hierarchy node . Each node and may further specify a hierarchy root node in a root hierarchy node ID. A node may be identified as a list node or a hierarchy node by specifying a node class id or value defined by node class object . In one or more arrangements a node type may be associated with a list of list items for which the privilege applies defined by list object and list item object . In one example the list may contain list items such as electric grid water grid and road grid.

In a privilege may be defined based on a role. That is the privilege is assigned to a role e.g. the public works system role defined by role object that may be assigned to one or more users. The privilege may be stored in privilege object and correspond to an action a privilege type and or a set of resource attributes. Actions such as modify and view may be defined and stored by action object while privilege types including user and role may be defined and stored by privilege type object . Associations between an action and a privilege may be defined and or stored by privilege action map object . A user associated with the role specified in privilege object i.e. role identified by role id may be permitted to perform the defined action. Use of a privilege action map further allows for the automatic redefinition and or reconfiguration of actions associated with a privilege without manually or specifically modifying the parameters of the privilege. Further resource attribute object may be used to characterize a privilege or a resource type. For example resource attribute object may store attributes that designate a hierarchy node assignment. In particular a privilege may be associated with a hierarchy node or level by associating the privilege with the corresponding resource attribute. Additionally privilege denormalization object may be used to define a correspondence between a fine grain privilege defined by privilege object and a coarse grain privilege. Coarse grain privileges may be defined for each individual user associated with the specified role using coarse grain privilege object . As such coarse grain privilege object may store two coarse grain privileges one for each user users and associated with the specified role. As discussed coarse grain privileges may represent a broad characterization or categorization of fine grain privileges. In particular privileges may be abstracted out or categorized into an action and a generic list item. For example a coarse grain privilege such as view orders may be defined for a user having multiple privileges such as view orders for music department view orders for audio department and view orders for computer department. Thus the coarse grain privilege view orders may link the user to the individual view order privileges corresponding to different departments. In another example privileges relating to adding deleting and revising list items may be grouped into a modify coarse grain privilege. In another example fine grain privileges such as review print and save may be categorized into a view coarse grain privilege.

The data objects structures and methods discussed herein may further be supported and or managed using one or more maintenance objects including history table objects error logging and tracking objects and resource import objects. illustrates a variety of history table objects that may be used to track and log certain events that occur with respect to one or more other objects. For example role history may be used to track actions and or status information relating to a particular role or role object. Similarly resource type history object may store historical data relating to modifications made to a particular resource type or resource type object. Other history objects may include privilege history object user history object and action history object among others. Events and information may be logged in response to a trigger or predefined rule. For example a resource type history object may add an entry in response to detecting a change to a resource type. Each of table and history objects and may further be retrieved by a user to audit or otherwise analyze the changes that have been made to the privilege system.

Each of the aforementioned maintenance objects may be used for a variety of purposes including auditing and error checking. The objects may also be used for loading data into one or more other objects such as those illustrated in . Further one or more of the above maintenance objects may further store before and after values so that a user may perform debugging functions. For example a tracking object such as those illustrated in may be used to log changes made to one or more privileges based on newly imported data. These changes may be saved to a privilege delta export files e.g. a file storing privileges that have changed in the previous 4 hours . The files may then be transmitted to one or more relevant applications.

In step a new privilege object may be created to store the new privilege and to establish associations between the various attributes and data objects corresponding to the privilege. In step for example objects such as action objects and role objects may be associated with the privilege object. Linkages between objects may be built based on dependencies and relationships between the objects and or the data stored therein. In one or more embodiments relationships and linkages may be defined as resource attributes stored in a resource attribute object.

In step the system may determine where in a hierarchy the privilege is to be associated. This determination may be made by user input or based on a default hierarchy level. In step the system may determine whether a user wishes to define a privilege cascade. A user may specify a relationship or characteristic used to identify one or more additional or other hierarchy nodes or list items to which the privilege is to be associated. For example if a user selected an All Children privilege cascade option the system may identify one or more nodes that are children of the level or node determined in step . If a privilege cascade is selected the privilege cascade may be associated with the privilege in step . Further in step one or more nodes or items matching the characteristic or relationship specified by the privilege cascade may be identified.

In step a corresponding resource attribute may be determined for each of the hierarchy nodes to which the privilege applies. The nodes may include an explicitly user selected node and or nodes implicitly selected through a privilege cascade. In step corresponding resource attributes may be determines for list items to which to which the privilege applies. For example a privilege may allow a user to view different types of data. As such each of those types of data may be represented by a resource attribute and associated with the privilege. Again list items may be explicitly selected by a user or implicitly selected via a privilege cascade. In step the resource attributes corresponding to the privilege may be linked stored or otherwise associated in a resource attribute set. In step the system may determine whether one or more privilege rules have been defined or created. If so the privilege may be associated with the privilege in step . In one or more configurations the privilege rules may be assigned to one or more nodes associated with the privilege. Privilege rules may qualify a privilege by defining certain conditions under which the privilege applies to or may be exercised by a user. In one or more instances whether a privilege is valid for a user may depend on user characteristics e.g. role as applied to the privilege rule s . For example a privilege rule may specify that electronics orders may be performed during the hours of 6 A.M. to 6 P.M. In another example a privilege for ordering financial reports may be conditioned on whether the user has a management role. As such if a user s role changes the privilege for ordering financial reports might no longer be valid for that user. In step the attributes or attribute set may further be associated to the privilege to characterize one or more parameters e.g. hierarchy level and or target list item of the privilege.

According to one or more aspects data from history table objects error logging and tracking objects and or resource import objects may be retrieved for a manager or user to review and or analyze. Logs may also be extracted from one or more error logging and tracking objects for a debugging interface and or functions. A variety of interfaces and functions may be created that use the information and data stored by history table objects error logging and tracking objects and resource import objects.

Using the features and aspects described herein applications may obtain privilege information from a central privilege management system. According to one or more configurations the central privilege management system may produce a batch export that stores information relating to one or more privileges into a single file or data structure. Various tools may be used to produce such a batch export including XML based solutions. An application may then parse the export file to identify relevant privileges and information.

Further using the aspects and features described herein provides enhanced flexibility and extensibility in a privilege management system. In particular various components or objects of a privilege model may be automatically redefined based on modifications or changes to other components or object of the privilege model. For example a privilege cascade such All Children allows for the automatic redefinition of the scope of the corresponding privilege in response to a modification to the hierarchy structure e.g. the addition of a child . In another example a resource attribute in a resource attribute set associated with a privilege may identify a particular list of items to which the privilege applies. Accordingly the privilege may automatically be applied to a new item by adding the new item to the list. Again no manual reconfiguration or modification of components other than the list may be needed.

Additionally in one or more configurations new objects such as hierarchies resource types applications and the like may be added to the privilege management system without the need to add or modify programming in the system. That is new resource types and new applications may be added without new programming. Thus objects may be created by generating a new object instance and defining one or more parameters of the new object instance. These parameters may include a name an identification number or code and or identification information corresponding to one or more objects to which the new object is associated.

The present invention has been described in terms of preferred and exemplary embodiments thereof. Numerous other embodiments modifications and variations within the scope and spirit of the appended claims will occur to persons of ordinary skill in the art from a review of this disclosure.

