---

title: Locating, viewing and interacting with information sources
abstract: A user interface is provided for allowing a user to quickly and easily connect to data and other informational sources. A user can use a user interface to interact with a collection of connection files to quickly and easily connect to various data sources and other informational sources. The user interface is configured to make data sources available at a glance, providing a user with a convenient and comprehensive display of the data sources. The user interface is designed to be a simplified experience for data import that is helpful to both novice and more experienced users in that the data is presented simply without a lot of extraneous information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07788259&OS=07788259&RS=07788259
owner: Microsoft Corporation
number: 07788259
owner_city: Redmond
owner_country: US
publication_date: 20060721
---
In today s computer driven world it is not uncommon for a user to rely upon multiple data sources in day to day activities. For example a user may access and use many different data sources over a period of time. It becomes unmanageable for a user to track all of the different data sources especially for users who rely on expediency and efficiency when using various data sources. To further complicate things the data sources may be located on and or associated with many different systems. For example it is not uncommon for data to be stored remotely on different servers as a well as locally on one or more user workstations servers handhelds etc.

Correspondingly it can be difficult in productivity applications to successfully find and connect to data for analysis. This includes applications such as MICROSOFT EXCEL MICROSOFT WORD MICROSOFT VISIO and other applications. For example setting up a connection to a database in EXCEL is a task that many users struggle with. If a user wants to connect to an open database connectivity ODBC data source or structured query language SQL Server Analysis Services cube the user must know server names cube names table names what type of connection to create user credentials e.g. username password etc. This can typically require multiple clicks and navigation through multiple menus which requires knowledge of the procedure s and data source s . Thus in current applications users are required to know a lot about various data sources in order to locate an existing data connection and or create a new data connection which can be a frustrating time consuming and in many instances an unsuccessful process.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended as an aid in determining the scope of the claimed subject matter.

Embodiments provide a user interface allowing a user to quickly and easily connect to data and other informational sources. In an embodiment a user interface allows a user to interact with a collection of connection files to quickly and easily connect to server and other data sources. The user interface is configured to make data sources available at a glance providing a user with a convenient and comprehensive display of various data sources. The user interface is designed to be a simplified experience for data import that is helpful to both novice and more experienced users in that the data is presented simply without a lot of extraneous information.

In various embodiments a user can simultaneously see local connections server connections and or other data sources by way of a source locator application that is configured to locate and collect various data sources. The various data sources can then be presented in an interface with contextual information about each source for easy selection and manipulation. According to an embodiment an administrator can use a programming interface to push or share data sources with various users. For example various local connections and a list of server and data sources can be set up by an administrator and presented to a user according to the user s historical use of various data sources. The user interface can be configured according to preference.

These and other features and advantages will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are explanatory only and are not restrictive of the invention as claimed.

Embodiments provide a user interface for interaction with one or more data sources. In an embodiment a user interface allows a user to quickly and easily connect to server and other data sources. The user interface is configured to make data sources available at a glance providing a user with an at a glance display of the data sources. The user interface is designed to be a simplified experience for data import that is helpful to both novice and more experienced users in that the data is presented simply without a lot of extraneous information. In various embodiments a user can simultaneously see local connections a list of server connections and other data sources by merging different data sources into an interface with contextual information about each source for easy selection and manipulation. According to an embodiment an administrator can push data sources to users according to a user s preference or history. The user interface can be configured according to preference.

Various embodiments are configured to simplify the process of importing and exposing external data into an application such as a spreadsheet application database application word processing application drawing application etc. An embodiment is configured to provide relevant server and local external data sources including a user interface which exposes and highlights server and other data collections and sources. The user interface presents various data sources using familiar names and descriptions to simplify the location and or use of the data sources without requiring excessive browsing.

The source locator application can be used to share a connection to a data source so that subsequent users can readily connect to the data source without having to go through many different paths or informational layers to locate the data source. Once a user has successfully located and or connected to a data source the source locator application can be used to share the successful connection with others so that subsequent users can readily connect to the data source. Therefore subsequent users do not have to remember all of the details and or find instructions that are necessary to locate and connect to a data source.

As described below a subsequent user can use a user interface see to interact with one or more connection files that are associated with one or more data sources. The one or more connection files are conveniently presented in one location via the user interface. In an embodiment once a user has successfully connected to a data source the connection file associated with the data source can be stored to storage such as RAM or some other accessible medium of storage. The connection file associated with a data source also may be communicated to or shared with other users in various ways including but not limited to e mail removable disk file transfer or some other method wherein the data source is then provided in the display or user interface.

As described below the source locator application can be called when another application such as a spreadsheet application OFFICE application etc. is attempting to locate and or connect to a data source. As shown in the source locator application includes a locator component a collecting aggregating component an organizing component and a presenting component . The locator component is configured to locate one or more connection files associated with one or more data sources. The collecting aggregating component is configured to collect aggregate the one or more connection files. The organizing component is configured to organize the one or more collected connection files by a given criteria such as by type for example. The presenting component is configured to present the organized collection of connection files in a user friendly display.

In an embodiment the locator component is configured to locate and access one or more library files such as a data connection library DCL file for example to locate and access one or more connection files such as one or more office data connection ODC files for example. A DCL is a folder or group of files with special properties including associations for storing connections in that folder. The locator component is also configured to locate and access one or more registry files to locate and access one or more registry keys associated with one or more data sources. The locator component is further configured to locate and access one or more connection files associated with one or more data sources e.g. external etc. of a spreadsheet application such as a workbook connection for example.

In an embodiment the locator component is configured to poll one or more servers e.g. OFFICE servers SHAREPOINT servers etc. to determine whether any connections are to be shared. The pointer or path to any shared connections is returned and stored in a registry or other location for that individual user. As known to those skilled in the art a registry may contain a list of file paths including connection files paths to a SHAREPOINT library that also contain connection files and or other paths. An example registry is configured to store configuration information including but not limited to file associations and object linking and embedding OLE information user preferences all current user information for each user of a system hardware operating system and installed application settings external device settings and or performance data.

Once the locator component has located relevant registries and or other informational stores associated with one or more data sources the collecting aggregating component is configured to collect or aggregate the located connection files and or other files. Once the collecting aggregating component has collected the various files the organizing component is configured to organize the collected files. Once organized the presenting component is configured to present the collection of organized files to a user using a user interface see . Thereafter a user can interact with the user interface to select modify and or add a connection file and or other file that is associated with a data source.

In an embodiment a programming interface can be used to interact with the source locator application . The programming interface is a tool that a user such as a programmer can use to make requests of the source locator application . For example an administrator can use the programming interface to create and or modify connection files that include server names cube names table names connection type user credentials e.g. username password and other information associated with the connection files. Once connection files have been created and or modified the administrator can use the programming interface to push the connection files to one or more users. Thereafter a user can view and interact with the connection files using a user interface such as the user interface described below.

As an example an administrator can bind a data access page to a different data source or to a previously used data source that has been moved to a new location. The administrator can bind the data source by assigning a property associated with the data source to an ODC file. As described above ODC files contain the information and parameters that are required to form a data connection. The information can include but is not limited to a server name OLAP cube table name query and other information and parameter associations. The DCL is a library having a number of features such as workflow support file approval library level item level security and sorting filtering based on metadata.

As described above the source locator application is configured to locate and access one or more connection files associated with one or more data sources. At the source locator application locates one or more connection files associated with one or more data sources. In an embodiment the source locator application locates local and remote connection files located on a user s computing device local network distributed computing network etc.

For example the source locator application can locate one or more connection files by analyzing one or more folders or locations on a hard drive or other storage device. This may include but is not limited to accessing various paths stored in one or more registries described above information associated with My Documents My Data Sources folder ODC and DCL information uniform resource locators URL e.g. URL associated with a SHAREPOINT server ODBC information and other relevant information for locating data sources. In an embodiment the source locator application may use an application programming interface API to query various libraries and other sources returning a list of URLs which are sent to a registry accessed and used in displaying one or more connection files associated with one or more data sources.

With continuing reference to at if there are remaining data sources to locate the flow returns to . If there are no remaining data sources to locate at the flow proceeds to . At the located connection files are collected and stored. At the collected connection files are organized by type or some other criteria. At the organized collection of connection files can be displayed on a display device in a user friendly interface. As described below distinctive textual iconic and or other identifying information can be used to provide information to a user of the user interface once the source locator application has located one or more connection files associated with one or more data sources.

Additionally a user can view and interact with the user interface using an input device such as a mouse for example and an output device such as a display for example. As described below a user can interact with the connection files by selecting one or more connection files using the user interface which passes the information associated with data source back to the application that the user is currently using such as a spreadsheet application for example. The application can then use the data source associated with the connection file.

An illustrative example follows in which a database is moved from a test server to a production server. For organizations that have many authors it may be difficult to communicate these changes to all the right people. Moreover there may be hundreds of existing workbooks that need to have their data connections updated. The DCL helps solve these problems because users only need to update a single connection file in the DCL with new information. Thereafter workbook authors will get the right connection information the next time they use that connection file and any existing workbooks that were created using the connection file will now have their connections updated automatically the next time that workbook s data is refreshed.

With continuing reference to the user interface also includes a filter in the form of a drop down menu for example . The filter is configured to filter connections according to preference. For example a user can use the filter to view workbook connections server connections local connections etc. using the filter to select an appropriate display. In a user has used the filter to view all connections. A button is provided to allow a user to browse and or locate other connections and or data sources that may not have been located by the source locator application. A user can select a folder to view and select connection files associated with the folder . A user can select a connection file to use a data source associated with the connection file .

The user interface also includes an Open button not shown . This button is disabled on launch of the user interface. If a user highlights a file the Open button becomes active. When a user double clicks or highlights a file and clicks the Open button the name of the file is returned to the calling application to open the file natively. If a local file cannot be opened an error value can be returned to the calling application. For example an alert such as Cannot open file The file may is in use or not accessible may be used. If a network path is not accessible an error value such as Network location not available Please contact your administrator may be used. Additionally an alert may be displayed if a user attempts to access a DCL that they do not have permissions for. For example an alert such as Access Denied You might not have permission to use this network resource. Contact the Administrator of this server to find out if you have access permissions may be used.

The user interface also includes a filter in the form of a drop down menu for example . The filter is configured to filter connections according to preference. For example a user can use the filter to view workbook connections server connections local connections etc. using the filter to select an appropriate display. In a user has used the filter to view all connections. A button is provided to allow a user to browse and or locate other connections and or data sources that may not have been located by the source locator application. depicts the user interface of wherein a user has clicked on June Sales Promotion which has expanded the description of the associated connection file.

As described above various connections or connection files can be provided to a user using the user interface. For example connections can include database connections e.g. OLADB ODBC etc. workbook connection s connection files on a server connections via a distributed computing network and or connection files on a local computer. The connections are collected and presented in a compact and user friendly manner to a user using the user interface. An icon textual information and or other description and identifying indicia can be used in conjunction with the connections to indicate a type of connection making it easy for a user to determine a connection type at a glance. For example as shown in the Table below an icon in the form of a key can be used to identify a connection to a database such as an ACCESS database. An icon in the form of an orange cube can be used to identify an Analysis Services cube. Thus the user interface can be configured to indicate a type of connection for easy recognition by a user.

As an example consider a scenario where a user has received an e mailed spreadsheet. The prior user of the spreadsheet had connected to external data and created a pivot table that is connected to the user s sales database. Using the user interface described above the workbook connection is displayed identifying the server that includes the data. For workbook connections the connection information is stored within the connection stream. In an embodiment the workbook connection information resembles an XML architecture and includes but is not limited to connection type username password and or server name. As described above the source locator application is configured to extract the workbook connection information for display in the user interface.

As another example Patty a Product Manager wants to look at some data her IT analyst administrator Wayne has made available. She starts EXCEL spreadsheet application and clicks on the Get Data button. The user interface described above opens and she sees connections in use in the worksheet as well as other local and server data sources set up by Wayne. She easily identifies the appropriate data source from the helpful data source Title and Description. She clicks to highlight the data source and then clicks Open . The connection is supplied to a select data view dialog where Patty chooses to display a List Chart or PivotTable to display her data which is then shown.

Patty also needs to take over generating a report from a co worker. The report relies on a data source which she has not previously used and is not in a policy specified server location. In the EXCEL spreadsheet application she selects the launch point for importing data but it doesn t appear in the user interface. She clicks on the button to Browse for other sources. An open data dialog launches and she types in the path of the server to navigate to the appropriate server location.

In various embodiments there may be many different entry points for using the user interface described above. For example the user interface can be used when creating a new connection viewing and or selecting existing connections. If a user selects a connection the result can be relayed to a calling application. Other embodiments are contemplated.

Referring now to the following discussion is intended to provide a brief general description of a suitable computing environment in which embodiments of the invention may be implemented. While the invention will be described in the general context of program modules that execute in conjunction with program modules that run on an operating system on a personal computer those skilled in the art will recognize that the invention may also be implemented in combination with other types of computer systems and program modules.

Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

Referring now to an illustrative operating environment for embodiments of the invention will be described. As shown in computer comprises a general purpose desktop laptop handheld or other type of computer capable of executing one or more application programs. In particular according to the various embodiments of the invention the computer is operative to execute a source locator application as described in detail above. The computer includes at least one central processing unit CPU a system memory including a random access memory RAM and a read only memory ROM and a system bus that couples the memory to the CPU . A basic input output system containing the basic routines that help to transfer information between elements within the computer such as during startup is stored in the ROM . The computer further includes a mass storage device for storing an operating system application programs and other program modules.

The mass storage device is connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer readable media provide non volatile storage for the computer . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer readable media can be any available media that can be accessed or utilized by the computer .

By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer .

According to various embodiments of the invention the computer may operate in a networked environment using logical connections to remote computers through a network such as a local network the Internet etc. for example. The computer may connect to the network through a network interface unit connected to the bus . It should be appreciated that the network interface unit may also be utilized to connect to other types of networks and remote computing systems. The computer may also include an input output controller for receiving and processing input from a number of other devices including a keyboard mouse etc. not shown . Similarly an input output controller may provide output to a display screen a printer or other type of output device.

As mentioned briefly above a number of program modules and data files may be stored in the mass storage device and RAM of the computer including an operating system suitable for controlling the operation of a networked personal computer such as the WINDOWS XP operating system from MICROSOFT CORPORATION of Redmond Wash. The mass storage device and RAM may also store one or more program modules. In particular the mass storage device and the RAM may store a source locator application as described above and other application programs such as a word processing application a spreadsheet application e mail application drawing application etc.

It should be appreciated that various embodiments of the present invention can be implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance requirements of the computing system implementing the invention. Accordingly logical operations including related algorithms can be referred to variously as operations structural devices acts or modules. It will be recognized by one skilled in the art that these operations structural devices acts and modules may be implemented in software firmware special purpose digital logic and any combination thereof without deviating from the spirit and scope of the present invention as recited within the claims set forth herein.

Although the invention has been described in connection with various exemplary embodiments those of ordinary skill in the art will understand that many modifications can be made thereto within the scope of the claims that follow. Accordingly it is not intended that the scope of the invention in any way be limited by the above description but instead be determined entirely by reference to the claims that follow.

