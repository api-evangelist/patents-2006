---

title: System and method for obtaining and executing instructions from a private network
abstract: Systems and methods for website and application monitoring and testing inside from a private network are presented. An agent module resident on an agent device inside the secured network periodically sends an HTTP message to a controller server and receives an HTTP response. The agent module parses out a set of instructions from the content of the HTTP response and executes the instructions. The agent module collects and compiles responsive information resulting from the instructions being executed and sends the compiled information to the controller server for storage and reporting.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08005890&OS=08005890&RS=08005890
owner: NeuStar, Inc.
number: 08005890
owner_city: Sterling
owner_country: US
publication_date: 20061002
---
The present invention generally relates to the field of website and application performance monitoring and testing and more particularly relates to the field of website and application monitoring and testing from a private network.

Conventional website or application performance monitoring and testing solutions address the need for web enabled businesses to measure the speed and reliability of their websites and applications as seen by a global audience accessing them over the internet. There are two types of conventional solutions namely conventional external and conventional internal solutions. Conventional external solutions lack the ability to access websites or applications which are resident on a customer s internal private network due to the fact that these internal private networks are protected by a firewall or other security system. In addition conventional external solutions can not monitor and test from the point of view of the private network to websites or applications which are hosted outside the internal private network for example via the Internet.

Conventional internal solutions suffer from the same limitations as traditional delivered solutions and are additionally problematic because they require a large complex software installation with trained and dedicated staff to maintain them. One cumbersome solution that has been suggested to address these significant drawbacks of the conventional solutions is to provide a server inside the protected network. This requires a considerable amount of time to set up configure and maintain. This additionally requires the customer to spend a lot of time learning how to operate the server including its software and hardware components. This type of solution also requires direct access to the private network. There are no existing solutions that can externally monitor a website or application that is located beyond a firewall or security system in a private network. Therefore the industry has defined a need for a system and method that overcomes these significant problems found in the conventional systems as described above.

Accordingly systems and methods for executing instructions behind a firewall are described herein that allow for monitoring and testing of websites or applications resident on private networks and further do not require complex proprietary solutions. A system for internal execution of instructions on a protected network is configured to install and execute an agent module on one or more agent devices that are placed within the protected network. The agent module is deployed in a native environment emulator that allows the agent module to operate on a variety of agent devices running a variety of different operating systems. This allows different agent modules that are running on different agent devices with different operating systems to execute the same agent instructions in the same compiled or interpreted language.

When the agent is initially deployed it generates a unique identifier that it sends to a controller server located outside the private network. The controller server maintains a set of instructions to be executed by the agent module. Periodically the agent sends a message to the controller server requesting instructions for execution. In response the agent receives instructions from the controller server. The instructions are downloaded as part of an Hyper Text Transfer Protocol HTTP response in an inbound direction so that they may pass through the firewall or other protections of the private network where otherwise agents in a secure network can not otherwise be typically contacted. The instructions received by the agent can be interpreted code compiled code pseudo code script operating system OS commands including shell commands or application programming interface API commands.

Execution of the instructions cause the agent to monitor a website inside or outside the private network monitor an application inside or outside the private network perform testing on a website or application inside or outside the private network carry out administrative functions on the agent device execute arbitrary instructions etc. For example upgrades and improvements to the agent module itself may also be made by sending the appropriate instructions and updates to the agent module. The results of the executed instructions by are recorded by the agent module and sent back to the controller server for storage and reporting.

Certain embodiments as disclosed herein provide for systems and methods to monitor and test websites and applications located in a private network but controlled by processes programs running outside the private network. For example one method as disclosed herein allows for a controller server to cause monitoring or testing agents on various agent devices deployed in private networks to execute a set of monitoring or testing instructions. The agents send an HTTP request to the controller server. In response the controller server sends instructions embedded in the responsive content. The agent parses the responsive content to obtain the instructions and then executes the instructions and collects the results which are then provided to the controller server.

After reading this description it will become apparent to one skilled in the art how to implement the invention in various alternative embodiments and alternative applications. However although various embodiments of the present invention will be described herein it is understood that these embodiments are presented by way of example only and not limitation. As such this detailed description of various alternative embodiments should not be construed to limit the scope or breadth of the present invention as set forth in the appended claims.

Furthermore as used herein the terms monitoring and testing may comprise any sort of communications with a target device and also include active or passive gathering of information from a target device. Some examples of monitoring and testing include gathering status information load testing functionality testing application testing regression testing or the like. Additionally the term interrogating may also be used to mean all types of monitoring or testing that may be used.

In one embodiment there can be multiple agent modules in each agent device . There can further be multiple agent devices in each private network . Each agent device is provided with a data storage area such as the illustrated data storage area . Each of the various agent devices can be any sort of computing device that is capable of carrying out instructions and communicating over a network.

The controller server maintains a set of instructions for each agent module . For example one agent module may be tasked with monitoring an internal website while a second agent module in the same private network may be tasked with monitoring an internal application. Accordingly one or more agent modules may be employed to carry out monitoring of websites and applications inside or outside private network . The instructions can include scripts OS commands compiled instructions or references to executable scripts or programs already stored on the agent device .

In one embodiment the controller server responds to the request by the agent module by sending the instructions as Extensible Markup Language XML content through the Internet through the firewall and into the private network where the agent device is located. The instructions are able to pass through the firewall or other protective barrier because they are communicated over the HTTP protocol in a inbound direction. In alternative embodiments the instructions can be delivered in formats other than XML.

The agent module parses XML content to obtain the instructions from the server and executes the instructions to carry out monitoring or testing of the website or application . In one embodiment the application can be part of a website and resident on the same server . Alternatively there can be multiple applications and websites on one server . The separate applications and websites can also be on separate servers. In one embodiment the instructions provided from the server can be interpreted instructions OS commands or compiled instructions. Advantageously the instructions can be executed inside the private network to monitor or test websites or applications that are resident inside or outside the native environment provided by the agent module . In one embodiment testing of websites can include load testing functionality testing regression testing or the like.

The private network may be any of a variety of private or public networks. The private network may be a packet switched network or a circuit switched network. The private network may be a personal area network PAN local area network LAN or a wide area network WAN and may be implemented over a wired or wireless physical network medium it may also be any combination of networks. The private network may also be a voice network or a data network or a combination o the two.

The agent module sends a request to the controller server . In one embodiment the request is advantageously sent as an HTTP POST which provides a free form structure to the request and is unlikely to be quarantined or otherwise restricted by the security efforts implemented to protect private network . This is the request made by the agent module to the controller server asking what to do i.e. what instructions to execute . An example post is as follows 

In response to its request the agent module receives a series of instructions from the controller server and executes those instructions. The results of the execution of those instructions are then collected by the agent module and provided to the controller server. In one embodiment the agent module provides the results of the execution via an HTTP post. For example the HTTP post may use a multipart form data content type. This type of post can have a variety of formatting types and can advantageously include binary data for more than one key value form data elements.

In one embodiment an agent module is wrapped in a native environment emulator. This emulator allows the agent module to execute instructions on any type of agent device running on any type of operating system. In one embodiment the operating system of the agent device may be Windows Linux or DOS. The agent module is installed in the agent device and the emulator runs in the native operating system of the agent device . Accordingly the instructions sent by the server can be for example executable instructions under Linux and the emulator is advantageously configured to execute instructions under Linux regardless of the native operating system of the agent device . For example the instructions from the server can be Linux Perl script instructions and the native operating system of the agent device is a Windows operating system. The emulator allows the Linux Perl instructions to execute on the agent device .

In one embodiment multiple agent modules can be deployed on the private network . Once an agent module is deployed it self generates an identifier. The agent module sends its identifier to the controller server . Each agent module in the system has its own unique identifier which is tracked by the controller server and used to facilitate operations.

The customer may view certain reports regarding the monitoring or other tasks performed by the various agent modules . The customer accesses this information at the controller server as the controller server has compiled all the results received from an agent module over time. For example the results of instructions executed by an agent module are sent to the controller server where they are stored and compiled in to reports. A customer may connect to the controller server or some related server with access to the reporting data and view the reports of the monitoring and testing performed by the agent modules . The agent module may also be used to monitor one or more externally hosted websites or applications that are hosted on a network that is accessible via the Internet .

In one embodiment a service provider who operates network and provides an application or website to its customer via the Internet may have the customer deploy the agent module on the private network in order to monitor the quality of service level provided by the operator of network and its respective applications or websites . Advantageously this provides the operator of network with a customer centric view to the quality of service being provided and also facilitates an understanding of the location of any problems associated with the use of the applications or websites experienced within the private network .

In one embodiment an example implementation includes a large company with 1000 sales representatives 800 of which are located in the corporate headquarters office and 200 who are remote sales representatives and located in major cities around the globe. In the company is represented by customer . The company uses a remotely hosted software as a service SaaS customer relationship management CRM solution such as the popular SalesForce.com service. This type of hosted SaaS CRM service is not installed on computers at the company headquarters but is instead installed on service provider e.g. SalesForce.com computers and is accessed by the company via the Internet . In the service provider is the operator of the network .

In our example the company spends roughly one million dollars per year on the hosted SaaS CRM service and therefore the company is keenly interested in how the CRM service performs at the company headquarters i.e. for its 800 sales representatives in the corporate office . The company is also very interested in how the CRM service performs from remote locations around the globe via the Internet i.e. for its 200 sales representatives outside the corporate office .

Advantageously the company can install the agent module in the corporate office location and configure the agent module to periodically monitor and test the quality of the connection to the SaaS CRM service and certain metrics of the user experience with the SaaS CRM service which is accessed via the Internet . If the quality of the connection is determined to be low or the user experience determined to be unsatisfactory the agent module is configured to send an alert to the controller server . The controller server advantageously correlates the alert from agent module with all other alerts and data that has been gathered from around the globe not just the location of the company corporate office to determine if the low quality connection or unsatisfactory user experience with the network is an isolated issue at the company headquarters or a more widespread issue with the SaaS CRM service. Advantageously data from all aspects of the SaaS CRM service provided by the operator of network can be correlated with all other data about any of the services provided by the operator of network . Thus the correlation and determination is not just based on information related to the SaaS CRM service used by the company.

The administrator module generates a unique identifier upon initial execution and sends the identifier to the controller server. The administration module receives either compiled instructions scripts OS commands or the like from the controller server. In one embodiment the scripts can be OS scripts or interpreted scripts. The administration module executes the scripts or compiled instructions.

At step the request from the agent module is parsed to obtain the unique identifier of the agent module. Once the unique identifier for the agent module is known the controller server uses the identifier to look up the appropriate instructions for that agent module. For example one agent module may receive instructions for monitoring a website while another agent module may receive instructions for testing an application while a third agent module may receive instructions to update the application monitor module.

The instructions obtained by the controller server for the agent module can be compiled instructions e.g. an executable program or script commands to be interpreted and thereby executed at the agent module. At step the set of instructions is sent to the agent module. Advantageously the instructions are sent as part of an response to the request from the agent module.

At step responsive information is received from the agent module. For example the instructions sent to the agent module may cause the agent module to perform monitoring of a website and the results generated by that monitoring are collected by the agent module and returned to the controller server. This collected information that is compiled by the agent module as a result of executing the instructions sent at step are what is received by the controller server in step . Advantageously this information can be maintained and stored at the controller server so that it may be compiled with similar information and presented to a customer by way of an interactive report delivered via a browser interface for example.

The controller server receives the request and obtains a set of instructions for the particular agent module associated with the unique identifier and provides those instructions in response to the request. Next at step the agent module receives the instructions from the controller server. In one embodiment the instructions are interpreted script commands that are provided as content in the response from the controller server.

At step the agent module parses out the instructions from the content and then executes the instructions. In response to the execution of the instructions the agent module may receive certain data and other information related to the execution of the instructions. This data and other information is compiled by the agent module in step and then sent to the controller server in step . Advantageously the controller server may maintain this responsive information in a data storage area and compile reports and other presentations based on the responsive information in combination with other responsive information from the same agent module or from multiple agent modules.

If an error response is received from the agent module as determined in step the process proceeds to step where a strike count is incremented. The strike count is maintained to keep track of how many error responses have been received from a particular agent module for a specific target. Advantageously the number of strikes that will elicit a failure to respond error message can be a configurable parameter that is set by the customer. At step the strike count is compared to the strike value which is the configurable parameter set by an administrator. If the strike count is equal to the strike value then the predetermined number of error responses has been met. If the predetermined number of error responses has been met a failure to respond error message is sent as shown in step . If the strike count is less than the strike value as determined in step then the threshold number of error responses has not been reached and the process proceeds back to step where the set of instructions are resent by the controller server to an agent module. The process continues until a successful response is received or a failure to respond error message is sent.

Advantageously in one embodiment this process allows the overall system to operate under a software as a service model and provide the majority of the functionality in the system at a centralized server while the various agent modules that are deployed in the field can be utilitarian and executable on a variety of device platforms.

The computer system preferably includes one or more processors such as processor . Additional processors may be provided such as an auxiliary processor to manage input output an auxiliary processor to perform floating point mathematical operations a special purpose microprocessor having an architecture suitable for fast execution of signal processing algorithms e.g. digital signal processor a slave processor subordinate to the main processing system e.g. back end processor an additional microprocessor or controller for dual or multiple processor systems or a coprocessor. Such auxiliary processors may be discrete processors or may be integrated with the processor .

The processor is preferably connected to a communication bus . The communication bus may include a data channel for facilitating information transfer between storage and other peripheral components of the computer system . The communication bus further may provide a set of signals used for communication with the processor including a data bus address bus and control bus not shown . The communication bus may comprise any standard or non standard bus architecture such as for example bus architectures compliant with industry standard architecture ISA extended industry standard architecture EISA Micro Channel Architecture MCA peripheral component interconnect PCI local bus or standards promulgated by the Institute of Electrical and Electronics Engineers IEEE including IEEE 488 general purpose interface bus GPIB IEEE 696 S 100 and the like.

Computer system preferably includes a main memory and may also include a secondary memory . The main memory provides storage of instructions and data for programs executing on the processor . The main memory is typically semiconductor based memory such as dynamic random access memory DRAM and or static random access memory SRAM . Other semiconductor based memory types include for example synchronous dynamic random access memory SDRAM Rambus dynamic random access memory RDRAM ferroelectric random access memory FRAM and the like including read only memory ROM .

The secondary memory may optionally include a hard disk drive and or a removable storage drive for example a floppy disk drive a magnetic tape drive a compact disc CD drive a digital versatile disc DVD drive etc. The removable storage drive reads from and or writes to a removable storage medium in a well known manner. Removable storage medium may be for example a floppy disk magnetic tape CD DVD etc.

The removable storage medium is preferably a computer readable medium having stored thereon computer executable code i.e. software and or data. The computer software or data stored on the removable storage medium is read into the computer system as electrical communication signals .

In alternative embodiments secondary memory may include other similar means for allowing computer programs or other data or instructions to be loaded into the computer system . Such means may include for example an external storage medium and an interface . Examples of external storage medium may include an external hard disk drive or an external optical drive or and external magneto optical drive.

Other examples of secondary memory may include semiconductor based memory such as programmable read only memory PROM erasable programmable read only memory EPROM electrically erasable read only memory EEPROM or flash memory block oriented memory similar to EEPROM . Also included are any other removable storage units and interfaces which allow software and data to be transferred from the removable storage unit to the computer system .

Computer system may also include a communication interface . The communication interface allows software and data to be transferred between computer system and external devices e.g. printers networks or information sources. For example computer software or executable code may be transferred to computer system from a network server via communication interface . Examples of communication interface include a modem a network interface card NIC a communications port a PCMCIA slot and card an infrared interface and an IEEE 1394 fire wire just to name a few.

Communication interface preferably implements industry promulgated protocol standards such as Ethernet IEEE 802 standards Fiber Channel digital subscriber line DSL asynchronous digital subscriber line ADSL frame relay asynchronous transfer mode ATM integrated digital services network ISDN personal communications services PCS transmission control protocol Internet protocol TCP IP serial line Internet protocol point to point protocol SLIP PPP and so on but may also implement customized or non standard interface protocols as well.

Software and data transferred via communication interface are generally in the form of electrical communication signals . These signals are preferably provided to communication interface via a communication channel . Communication channel carries signals and can be implemented using a variety of wired or wireless communication means including wire or cable fiber optics conventional phone line cellular phone link wireless data communication link radio frequency RF link or infrared link just to name a few.

Computer executable code i.e. computer programs or software is stored in the main memory and or the secondary memory . Computer programs can also be received via communication interface and stored in the main memory and or the secondary memory . Such computer programs when executed enable the computer system to perform the various functions of the present invention as previously described.

In this description the term computer readable medium is used to refer to any media used to provide computer executable code e.g. software and computer programs to the computer system . Examples of these media include main memory secondary memory including hard disk drive removable storage medium and external storage medium and any peripheral device communicatively coupled with communication interface including a network information server or other network device . These computer readable mediums are means for providing executable code programming instructions and software to the computer system .

In an embodiment that is implemented using software the software may be stored on a computer readable medium and loaded into computer system by way of removable storage drive interface or communication interface . In such an embodiment the software is loaded into the computer system in the form of electrical communication signals . The software when executed by the processor preferably causes the processor to perform the inventive features and functions previously described herein.

Various embodiments may also be implemented primarily in hardware using for example components such as application specific integrated circuits ASICs or field programmable gate arrays FPGAs . Implementation of a hardware state machine capable of performing the functions described herein will also be apparent to those skilled in the relevant art. Various embodiments may also be implemented using a combination of both hardware and software.

Furthermore those of skill in the art will appreciate that the various illustrative logical blocks modules circuits and method steps described in connection with the above described figures and the embodiments disclosed herein can often be implemented as electronic hardware computer software or combinations of both. To clearly illustrate this interchangeability of hardware and software various illustrative components blocks modules circuits and steps have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled persons can implement the described functionality in varying ways for each particular application but such implementation decisions should not be interpreted as causing a departure from the scope of the invention. In addition the grouping of functions within a module block circuit or step is for ease of description. Specific functions or steps can be moved from one module block or circuit to another without departing from the invention.

Moreover the various illustrative logical blocks modules and methods described in connection with the embodiments disclosed herein can be implemented or performed with a general purpose processor a digital signal processor DSP an ASIC FPGA or other programmable logic device discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor can be a microprocessor but in the alternative the processor can be any processor controller microcontroller or state machine. A processor can also be implemented as a combination of computing devices for example a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration.

Additionally the steps of a method or algorithm described in connection with the embodiments disclosed herein can be embodied directly in hardware in a software module executed by a processor or in a combination of the two. A software module can reside in RAM memory flash memory ROM memory EPROM memory EEPROM memory registers hard disk a removable disk a CD ROM or any other form of storage medium including a network storage medium. An exemplary storage medium can be coupled to the processor such the processor can read information from and write information to the storage medium. In the alternative the storage medium can be integral to the processor. The processor and the storage medium can also reside in an ASIC.

The above description of the disclosed embodiments is provided to enable any person skilled in the art to make or use the invention. Various modifications to these embodiments will be readily apparent to those skilled in the art and the generic principles described herein can be applied to other embodiments without departing from the spirit or scope of the invention. Thus it is to be understood that the description and drawings presented herein represent a presently preferred embodiment of the invention and are therefore representative of the subject matter which is broadly contemplated by the present invention. It is further understood that the scope of the present invention fully encompasses other embodiments that may become obvious to those skilled in the art and that the scope of the present invention is accordingly limited by nothing other than the appended claims.

