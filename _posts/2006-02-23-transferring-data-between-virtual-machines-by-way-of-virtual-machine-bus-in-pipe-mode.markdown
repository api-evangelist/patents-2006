---

title: Transferring data between virtual machines by way of virtual machine bus in pipe mode
abstract: A computing device has a virtual machine bus (VM bus) operable in a pipe mode where all incoming data written to the VM bus from a source is passed through to be read from the VM bus by a sink, and a plurality of instantiated virtual machines (VMs). Each VM hosts an instance of an operating system upon an application may be instantiated. Each VM includes a computing object for issuing a call to a component object of another VM, and a VM bus system object for receiving the call and communicating same to a VM bus system object of the another VM by way of the VM bus. The VM bus system object is also for receiving the call from the VM bus system object of the another VM by way of the VM bus and for communicating the received call to the computing object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07941800&OS=07941800&RS=07941800
owner: Microsoft Corporation
number: 07941800
owner_city: Redmond
owner_country: US
publication_date: 20060223
---
The present invention relates to a method and mechanism employed by a virtual machine or the like operating on a computing device or the like to transfer date or the like to another virtual machine by way of a virtual machine bus but without the need for a general purpose bus stack. In particular a need exists for such a method and mechanism that is not specific to any particular virtual machine that is relatively simple and that limits the nature of the data that can be transmitted such that security is achieved.

As should be appreciated a virtual machine is a software construct or the like operating on a computing device or the like for the purpose of emulating a hardware system. Typically although not necessarily the virtual machine is an application or the like and is employed on the computing device to host a user application or the like while at the same time isolating such user application from such computing device or from other applications on such computing device. A different variation of a virtual machine may for example be written for each of a plurality of different computing devices so that any user application written for the virtual machine can be operated on any of the different computing devices. Thus a different variation of the user application for each different computing device is not needed.

New architectures for computing devices and new software now allow a single computing device to instantiate and run a plurality of partitions each of which can be employed to instantiate a virtual machine to in turn host an instance of an operating system upon which one or more applications may be instantiated. Typically although not necessarily the computing device includes a virtualization layer with a virtual machine monitor or the like that acts as an overseer application or hypervisor where the virtualization layer oversees and or otherwise manages supervisory aspects of each virtual machine and acts as a possible link between each virtual machine and the world outside of such virtual machine.

Among other things a particular virtual machine on a computing device may require access to a resource associated with the computing device. As may be appreciated such resource may be any sort of resource that can be associated with a computing device. For example the resource may be a storage device to store and retrieve data and generally for any purpose that a storage device would be employed. Likewise the resource may be any other asset such as a network a printer a scanner a network drive a virtual drive a server a software application and the like. Accordingly whatever the resource may be the virtual machine may in fact be provided with access to services provided by such resource.

In a computing device with multiple partitions instantiated any particular resource of the computing device may be dynamically assigned to a particular partition virtual machine hereinafter virtual machine or VM so that the particular VM can directly control such resource and service requests for the resource from other VMs on the computing device. Such particular VM then is in effect a host that provides resource capabilities as a resource host VM VM H that owns the particular resource. Similarly such VM H provides resource services to another VM which is in effect a client that consumes such capabilities as a resource client VM VM C . Thus the VM C and the VM H in combination accomplish operations that require use of the particular resource.

A particular VM C operating on a computing device typically is constructed to operate as if a real machine. That is the particular VM C in accessing a particular resource typically acts as if such particular resource is accessible by way of direct requests thereto. Accordingly it may be the case that the VM C has constructed a path or stack hereinafter stack of drivers to which such requests are directed with the expectation being that the particular resource is at the end of the stack. As has been established however the VM C is not in fact a real machine and the particular resource is not in fact at the end of the stack.

Accordingly it may be the case that the resource is emulated by the virtualization layer virtual machine monitor as being at the end of the stack. In reality the virtualization layer forwards a request for the resource to the VM H that owns or has access to such resource. Alternatively the VM C may be endowed with enlightened capabilities in which such VM C is aware of the virtual existence thereof and sends requests to the particular resource by way of an enlightened stack at the end of which is a VM virtual machine bus or other communications path that connects the VM C with the VM H that owns or has access to the resource where the VM bus bypasses the virtualization layer. Thus the VM C in the enlightened mode is aware that the particular resource can be accessed by way of the VM H and accordingly establishes a connection with the VM H by way of the aforementioned enlightened stack and VM bus. In such a manner each request sent by the VM C to the particular resource follows a direct channel to the particular resource by way of the corresponding VM H.

As may be generally appreciated the VM bus is a partition bus accessible by each VM. Each VM may have many channels in operation on the VM bus each channel being operated in one of a number of different modes. Each channel may be defined by the endpoints thereof each of which is most likely a service running within a VM. Inasmuch as each channel mode has a corresponding protocol the VM may have many protocols in operation simultaneously. As known each service within a VM that is associated with a channel of the VM bus is a client of the VM bus and can employ its own protocol for moving data between partitions by way of such VM bus. However it should be clear that each service having its own VM bus protocol is cumbersome and largely unnecessary. Thus a need exists for a relatively simple protocol that can be employed by many services within a VM.

As may also be generally appreciated at least some services of VMs are not performance sensitive and not likely to take advantage of specialized modes which VM bus can be configured to use when the VM employs a particular custom protocol. In particular services of VMs such as those that are written with user mode code for the purpose of user interface integration are usually structured around very high level programming constructs such as but not limited to Component Object Model COM objects. Such constructs already support execution across multiple machine images using Remote Procedure Calls RPCs . Thus a need exists for a VM bus protocol that supports constructs such as RPCs on top of the VM bus. With such a VM bus protocol such COM objects can be constructed with the same methods that are currently used to develop other code that involves cross machine operation.

The aforementioned needs are satisfied at least in part by the present invention in which a computing device has a virtual machine bus VM bus operable in a pipe mode where all incoming data written to the VM bus from a source is passed through to be read from the VM bus by a sink and a plurality of virtual machines VMs instantiated on the computing device where each VM hosts an instance of an operating system upon which one or more applications may be instantiated. Each VM includes a distributed computing object for issuing a call to a distributed component object of another VM or for issuing a return of a response to a call from a distributed component object of the another VM.

Each VM also includes a VM bus system object for receiving the call or the return from the distributed computing object and for communicating the received call or return to a VM bus system object of the another VM by way of the VM bus. The VM bus system object is also for receiving the call or the return from the VM bus system object of the another VM by way of the VM bus and for communicating the received call or return to the distributed computing object.

The virtual machines include a host virtual machine VM H for providing a service and a client virtual machine VM C that can access the VM H by way of the VM bus and consume the service provided by the VM H. The distributed computing object of the VM C issues a call to the distributed computing object of the VM H to request the service and the distributed computing object of the VM H issues a return as a response to the call of the distributed computing object of the VM C.

Although not required the invention can be implemented via an application programming interface API for use by a developer and or included within the network browsing software which will be described in the general context of computer executable instructions such as program modules being executed by one or more computers such as client workstations servers or other devices. Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations. Other well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers PCs automated teller machines server computers hand held or laptop devices multi processor systems microprocessor based systems programmable consumer electronics network PCs minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network or other data transmission medium. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus Peripheral Component Interconnect PCI bus also known as Mezzanine bus and PCI Express.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection or fiber optic connection and wireless media such as acoustic RF infrared optical phased array antenna operating at any wavelength directional and non directional electromagnetic emitters and receivers operating at any wavelength and other wireless media. Combinations of any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers here to illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB .

A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . A graphics interface such as Northbridge may also be connected to the system bus . Northbridge is a chipset that communicates with the CPU or host processing unit and assumes responsibility for accelerated graphics port AGP communications. One or more graphics processing units GPUs may communicate with graphics interface . In this regard GPUs generally include on chip memory storage such as register storage and GPUs communicate with a video memory . GPUs however are but one example of a coprocessor and thus a variety of co processing devices may be included in computer . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface which may in turn communicate with video memory . In addition to monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

One of ordinary skill in the art can appreciate that a computer or other client device can be deployed as part of a computer network. In this regard the present invention pertains to any computer system having any number of memory or storage units and any number of applications and processes occurring across any number of storage units or volumes. The present invention may apply to an environment with server computers and client computers deployed in a network environment having remote or local storage. The present invention may also apply to a standalone computing device having programming language functionality interpretation and execution capabilities.

Distributed computing facilitates sharing of computer resources and services by direct exchange between computing devices and systems. These resources and services include the exchange of information cache storage and disk storage for files. Distributed computing takes advantage of network connectivity allowing clients to leverage their collective power to benefit the entire enterprise. In this regard a variety of devices may have applications objects or resources that may interact to implicate authentication techniques of the present invention for trusted graphics pipeline s .

It can also be appreciated that an object such as may be hosted on another computing device or . Thus although the physical environment depicted may show the connected devices as computers such illustration is merely exemplary and the physical environment may alternatively be depicted or described comprising various digital devices such as PDAs televisions MP3 players etc. software objects such as interfaces COM objects and the like.

There are a variety of systems components and network configurations that support distributed computing environments. For example computing systems may be connected together by wire line or wireless systems by local networks or widely distributed networks. Currently many of the networks are coupled to the Internet which provides the infrastructure for widely distributed computing and encompasses many different networks.

In home networking environments there are at least four disparate network transport media that may each support a unique protocol such as Power line data both wireless and wired voice e.g. telephone and entertainment media. Most home control devices such as light switches and appliances may use power line for connectivity. Data Services may enter the home as broadband e.g. either DSL or Cable modem and are accessible within the home using either wireless e.g. HomeRF or 802.11b or wired e.g. Home PNA Cat 5 even power line connectivity. Voice traffic may enter the home either as wired e.g. Cat 3 or wireless e.g. cell phones and may be distributed within the home using Cat 3 wiring. Entertainment media may enter the home either through satellite or cable and is typically distributed in the home using coaxial cable. IEEE 1394 and DVI are also emerging as digital interconnects for clusters of media devices. All of these network environments and others that may emerge as protocol standards may be interconnected to form an intranet that may be connected to the outside world by way of the Internet. In short a variety of disparate sources exist for the storage and transmission of data and consequently moving forward computing devices will require ways of protecting content at all portions of the data processing pipeline.

The Internet commonly refers to the collection of networks and gateways that utilize the TCP IP suite of protocols which are well known in the art of computer networking. TCP IP is an acronym for Transmission Control Protocol Internet Protocol. The Internet can be described as a system of geographically distributed remote computer networks interconnected by computers processing networking protocols that allow users to interact and share information over the networks. Because of such wide spread information sharing remote networks such as the Internet have thus far generally evolved into an open system for which developers can design software applications for performing specialized operations or services essentially without restriction.

Thus the network infrastructure enables a host of network topologies such as client server peer to peer or hybrid architectures. The client is a member of a class or group that uses the services of another class or group to which it is not related. Thus in computing a client is a process i.e. roughly a set of instructions or tasks that requests a service provided by another program. The client process utilizes the requested service without having to know any working details about the other program or the service itself. In a client server architecture particularly a networked system a client is usually a computer that accesses shared network resources provided by another computer e.g. a server. In the example of computers etc. can be thought of as clients and computer etc. can be thought of as the server where server etc. maintains the data that is then replicated in the client computers etc.

A server is typically a remote computer system accessible over a remote network such as the Internet. The client process may be active in a first computer system and the server process may be active in a second computer system communicating with one another over a communications medium thus providing distributed functionality and allowing multiple clients to take advantage of the information gathering capabilities of the server.

Client and server communicate with one another utilizing the functionality provided by a protocol layer. For example Hypertext Transfer Protocol HTTP is a common protocol that is used in conjunction with the World Wide Web WWW . Typically a computer network address such as a Universal Resource Locator URL or an Internet Protocol IP address is used to identify the server or client computers to each other. The network address can be referred to as a Universal Resource Locator address. For example communication can be provided over a communications medium. In particular the client and server may be coupled to one another via TCP IP connections for high capacity communication.

Thus illustrates an exemplary networked or distributed environment with a server in communication with client computers via a network bus in which the present invention may be employed. In more detail a number of servers etc. are interconnected via a communications network bus which may be a LAN WAN intranet the Internet etc. with a number of client or remote computing devices etc. such as a portable computer handheld computer thin client networked appliance or other device such as a VCR TV oven light heater and the like in accordance with the present invention. It is thus contemplated that the present invention may apply to any computing device in connection with which it is desirable to process store or render secure content from a trusted source and to any computing device with which it is desirable to render high performance graphics generated by a virtual machine.

In a network environment in which the communications network bus is the Internet for example the servers can be Web servers with which the clients etc. communicate via any of a number of known protocols such as HTTP. Servers may also serve as clients as may be characteristic of a distributed computing environment. Communications may be wired or wireless where appropriate. Client devices may or may not communicate via communications network bus and may have independent communications associated therewith. For example in the case of a TV or VCR there may or may not be a networked aspect to the control thereof. Each client computer and server computer may be equipped with various application program modules or objects and with connections or access to various types of storage elements or objects across which files may be stored or to which portion s of files may be downloaded or migrated. Thus the present invention can be utilized in a computer network environment having client computers etc. that can access and interact with a computer network bus and server computers etc. that may interact with client computers etc. and other devices and databases .

Turning now to a computing device includes a particular resource that is employed to provide a resource service to the computing device . Such computing device resource and resource service may be any appropriate computing device resource and resource service without departing from the spirit and scope of the present invention. For example the computing device may be a personal computer such as a desktop or laptop computer or the like with a hard disk drive as the resource providing data storage services. Likewise the computing device may be a portable playback machine such as a portable audio or video player with a display screen as the resource providing display services. Similarly the computing device may be a server machine with a data communications network as the resource providing communications services. In a similar manner the server machine may itself be the resource . Note that the resource may be a particular piece of hardware or even software an adapter for accessing a particular piece of hardware or software a remote service a local service a combination thereof and the like.

Significantly the computing device has been configured to run a plurality of partitions where each partition can be employed to instantiate a virtual machine to in turn host an instance of an operating system upon which one or more applications may be instantiated. As seen in such computing device the particular resource of the computing device is assigned to a particular partition or virtual machine hereinafter VM so that the particular VM can directly control such particular resource . Such particular VM then is a host that provides resource capabilities VM H . Similarly such VM H provides resource services to one or more other VMs each of which is in effect a client that consumes such services VM C . Typically each VM C and the VM H communicate by way of a pipe or channel such as a virtual machine VM bus or the like to accomplish resource related operations as will be set forth in more detail below.

As shown in the computing device of and each VM thereof are functionally operated to include both a user mode and a kernel mode although such modes are not perceived to be absolutely necessary for purposes of the present invention. At any rate and as may be appreciated the user mode is a generally non privileged state where executing code is forbidden by the hardware from performing certain operations such as for example writing to memory not assigned to such code. Generally such forbidden operations are those which could destabilize the operating system of the VM or constitute a security risk. In terms of the operating system the user mode is an analogous non privileged execution mode where the running code is forbidden by the kernel from performing potentially dangerous operations such as writing to system configuration files killing other processes rebooting the system and the like.

As may also be appreciated the kernel mode or privileged mode is the mode in which the operating system and related core components run. Code running in the kernel mode has unlimited access to the system memory and resources that are assigned to the VMs partitions . Generally the amount of code running in kernel mode is minimized both for purposes of security and elegance. Roughly speaking a user of a computing device interfaces therewith most directly through the user mode and applications operating therein while the computing device interfaces with resources including the particular resource most directly through the kernel mode.

Note that with the user and kernel modes as set forth above the VM H and VM C may each have a VM bus stack not shown for accessing the VM bus so as to exchange data therebetween in the course of the VM C accessing the resource by way of the VM H . Such a VM bus stack is generally known and may for example include among other things a class driver and a port driver. However it is to be appreciated that the VM bus stack represents somewhat of a security risk in that such VM bus stack allows practically any entity access to the VM bus . Also the VM bus stack is somewhat complex and provides a relatively large amount of functionality for accessing and employing the VM bus and therefore may in some circumstances be excessive especially when only relatively simple tasks need be performed.

Instead for matters such as relatively simple matters what is needed is a mode of employing the VM bus that provides a programming interface particularly but not necessarily for user mode programs that is conceptually similar to existing transport mechanisms using file handles and existing read write interface commands. With such an interface existing communications protocols such as DCOM and RPC may employ the VM bus . Moreover such existing protocols already contain built in features that in effect police the types of information that may be sent over the VM bus .

The VM bus may be established as an object in and of itself on the computing device or may instead be establishes as a conceptual object that does not in and of itself exist without departing from the spirit and scope of the present invention. In the latter case and as should be appreciated such conceptual VM bus is manifested as a communications conduit between VMs when such VMs choose to establish communications therebetween. In particular the manifestation of such VM bus may be considered to arise when in the course of the VMs choosing to communicate therebetween such VMs each establish the necessary services for such communication and in fact employ such services to so communicate. In such instance the communications may occur over any appropriate communications medium within the computing device without departing from the spirit and scope of the present invention.

It should be appreciated that at least some VMs operating as clients of the VM bus are most naturally structured around the concept of a stream. That is such VMs require only the ability to read and write data to and from the VM bus perhaps as bytes or packets. For example and in one scenario and turning specifically to now a VM C may have a distributed component object model DCOM object that makes a remote procedure call RPC and a corresponding VM H may have a corresponding DCOM object that receives the RPC from the VM C acts on same and returns a result based thereon to the calling VM C . As may be appreciated both the DCOM object of the calling VM C and the returning VM H need only send data therebetween as a stream of packets or bytes or the like.

As may be appreciated both DCOM and RPC are known or should be apparent to the relevant public and therefore need not be set forth herein in any detail. Further most any other stream based system of sending and receiving data other than DCOM and RPC may also be employed without departing from the spirit and scope of the present invention. Notably DCOM and RPC in particular is a good example of a stream based system such as may be employed in connection with the present invention especially inasmuch as many higher level services are now performed in computer devices and systems such as for example Drag and Drop by way of DCOM and RPC.

At any rate for stream based VMs that only require reading and writing streams of data the VM bus already includes a pipe mode whereby all incoming data written to the VM bus from a source such as the VM C or VM H and is passed through to be read from the VM bus by a sink as the corresponding VM H or VM C . As may be appreciated pipe mode is established at each of the source and sink by way of an appropriate driver or other object that provides protocol definition functions including a function which copies all write data from a write request into the VM bus perhaps by way of an intermediate buffer and also a function which copies all read data into a read request from the VM bus also perhaps by way of an intermediate buffer.

Such VM bus and specifically such VM bus operating in pipe mode is known or should be apparent to the relevant public and therefore need not be set forth herein in any detail. Notably although the present invention is set forth in terms of a VM bus operating in pipe mode the present invention should be understood to encompass most any data bus system operated in a functionally similar mode.

Still referring to it is seen that in one embodiment of the present invention the VM bus is employed in pipe mode to exchange data between a VM C and a VM H with the aid of the following objects in each of such VM H and VM C . Preliminarily each VM has a DCOM object or the like. As may be appreciated the DCOM object in the VM C calls to the DCOM object in the VM H to perform a service for the VM C where such service may be any particular service without departing from the spirit and scope of the present invention and the DCOM object in the VM H upon performing the service responds to the DCOM object in the VM C with appropriate return information.

As may be appreciated in order to accomplish each of the call and the return the DCOM object in each of the VMs must appropriately command the VM bus to read or write data as the case may be. That is for a call the DCOM object in the VM C must command a write of data to the VM bus and the DCOM object in the VM H must likewise command a read of the written data from the VM bus . Similarly for a return the DCOM object in the VM H must command a write of data to the VM bus and the DCOM object in the VM C must likewise command a read of the written data from the VM bus . Note here that each read in particular may indeed be issued before the corresponding write in which case the read is satisfied once written data is in fact received.

As seen in each such command is ultimately received at a VM bus system object in the kernel of the VM of the issuer of such command. As may be appreciated each such VM bus system object implements communication with the VM bus for the corresponding VM and also performs whatever commands may be necessary to place the VM bus into pipe mode with respect to the VM H and VM C . Thus among other things the VM bus system object may implement the aforementioned intermediate buffers.

Upon the DCOM object in either the VM H or VM C issuing any particular command and as seen in such command is forwarded to a corresponding RPC object for appropriate packaging and further forwarding. In particular the DCOM object may issue the command directly to the corresponding RPC object or may issue the command by way of a handle if necessary or desired and the RPC object packages the command in an appropriate format that is understood by the RPC object of the opposite VM so as to include the command itself all associated data and any other necessary command related information. Note here that the RPC object also can upon receiving a packaged command in an appropriate format un package same to reveal the original command contained therein.

Such packaging as performed by each RPC object is known or should be apparent to the relevant public and therefore need not be set forth herein in any detail. Notably any particular type of packaging may be performed by each RPC object without departing from the spirit and scope of the present invention. In fact if the DCOM object can appropriately package each command thereof the RPC object may be dispensed with. Note though that the RPC object performs a significant security function in that such RPC object only packages commands understood thereby. Accordingly the RPC object may be matched to the DCOM object and only allow commands from such DCOM object to be packaged and forwarded. Put another way any commands to the RPC object from sources other than the DCOM object likely will be prevented from being packaged and forwarded.

Each package as produced by an RPC object is in fact forwarded on to the VM bus by being sent from the RPC object to a corresponding RPC VM bus access object . Similar to before the RPC object may issue the package directly to the corresponding RPC VM bus access object or may issue the package by way of a handle if necessary or desired and the RPC VM bus access object passes the package to the aforementioned VM bus system object for processing thereby.

Notably each RPC VM bus access object acts to expose the VM bus in pipe mode to the corresponding RPC object . That is the RPC object can transmit a package by way of the VM bus in pipe mode only when the RPC VM bus access object is present and correspondingly cannot transmit such a package by way of the VM bus in pipe mode when the RPC VM bus access object is absent. Conceivably the RPC object can transmit the package directly to the VM bus system object without departing from the spirit and scope of the present invention if the necessary functionality is included within such RPC object . However for purposes of modularity it is likely that such necessary functionality should be separate from the RPC object .

Typically although not necessarily each RPC VM bus access object communicates with the corresponding VM bus system object by way of a file handle to such VM bus system object . Accordingly each VM may include a VM bus pipe mode object that administratively opens a channel to the VM bus system object and commands same to instantiate the pipe mode that obtains a file handle for accessing such VM bus system object and that therefore may provide such file handle to the corresponding RPC VM bus access object to in fact allow such RPC VM bus access object to communicate with the corresponding VM bus system object . Note here that the VM bus pipe mode object is a collection of functions that is intended to simplify discovery of the VM bus and the VM bus system object and also to simplify connection with same. Accordingly each package as received at a RPC VM bus access object is forwarded thereby to the corresponding VM bus system object by way of the handle thereof as provided by the corresponding VM bus pipe mode object .

Note too that in at least some instances the VM bus access object may itself be such a file handle. As such it is to be appreciated that such a file handle is not merely a pointer or reference to an object but represents an agreement between the sender that is to send data by way of the file handle and the receiver that is to receive such data including a well defined set of semantics surrounding the agreement. The agreement of the file handle of the present invention in particular specifies an ordered set of bytes or stream and optionally a file pointer or counter that defines the current offset within the stream. By employing such a file handle the existing body of software that deals with streams may be employed to read and write data to the VM bus in pipe mode.

Turning now to it is seen that in one embodiment of the present invention the system shown in is employed to write a call from a VM C to a VM H and read a return from the VM H to the VM C in the following manner. Preliminarily and as should now be appreciated all of the relevant objects are instantiated at both VMs in an appropriate manner and in the course of doing so each VM bus pipe mode object administratively opens a channel to the corresponding VM bus system object commands same to instantiate the pipe mode obtains a handle for accessing such VM bus system object and provides such handle to the corresponding RPC VM bus access object step .

Thereafter at some point the DCOM object at the VM C in fact issues the call for the VM H to the corresponding RPC object step such corresponding RPC object packages the call into an appropriately formatted package and forwards same to the corresponding RPC VM bus access object step the RPC VM bus access object thereafter forwards the package to the corresponding VM bus system object by way of the handle as received from the corresponding VM bus pipe mode object step and the VM bus system object forwards the package to the VM bus system object of the VM H by way of a write of the data of the package to the VM bus in pipe mode step . Note here that in doing so the VM bus system object of the VM C may include with the forwarded package a packet describing such package to the VM bus system object of the VM H .

Notably for the DCOM object at the VM H to receive the call from the DCOM object of the VM C such DCOM object of the VM H must issue a command to the corresponding VM bus system object to read the call from the VM bus step . Note that such command may be in the form of a call similar to that issued by the DCOM object of the VM C or may be of a different format. If a call in particular and similar to that which was set forth immediately above at some point the DCOM object at the VM H in fact issues to the corresponding RPC object the call to read the data of the package from the VM C such corresponding RPC object packages the call into an appropriately formatted package and forwards same to the corresponding RPC VM bus access object and the RPC VM bus access object thereafter forwards the package to the corresponding VM bus system object by way of the handle as received from the corresponding VM bus pipe mode object .

Here though the VM bus system object of the VM H responds to such package by waiting for the package on the VM bus in pipe mode as sent from the VM C and upon receipt reading same step . As may now be appreciated the VM bus system object forwards the received package to the DCOM object of the VM H by a similar path but in the opposite direction. In particular the VM bus system object forwards the received package to the corresponding RPC VM bus access object step which in turn forwards the package to the corresponding RPC object step . As should be understood such RPC object at the VM H upon receiving the package unpacks the call therein from same and forwards such unpacked call to the corresponding DCOM object of the VM H step and such DCOM object may thereafter act upon the unpacked call in whatever manner is deemed appropriate be it with regard to a resource owned by the VM H or otherwise step .

As was set forth above upon acting on the unpacked call the DCOM object of the VM H issues a return to the DCOM object of the VM C . As should be appreciated such return may simply be an acknowledgment that the call has been received may include data as requested by the call or the like and such return is effectuated by following essentially the same steps of . Here though it should be understood that the call of from the VM C to the VM H and corresponding actions is replaced by the corresponding return from the VM H to the VM C and corresponding actions.

The programming necessary to effectuate the processes performed in connection with the present invention is relatively straight forward and should be apparent to the relevant programming public. In particular the programming necessary to construct each of the objects should be apparent based on the functionality necessary for each such object. Accordingly such programming is not attached hereto. Any particular programming then may be employed to effectuate the present invention without departing from the spirit and scope thereof.

In the present invention a method and mechanism is provided with regard to a VM bus of a computing device to allow each VM on the computing device to access the VM bus by way of a single relatively simple protocol. The protocol supports constructs such as RPC object on top of the VM bus . Thus a DCOM object or the like can be constructed with the same methods that are currently used to develop other code that involves cross machine operation.

It should be appreciated that changes could be made to the embodiments described above without departing from the inventive concepts thereof. It should be understood therefore that this invention is not limited to the particular embodiments disclosed but it is intended to cover modifications within the spirit and scope of the present invention as defined by the appended claims.

