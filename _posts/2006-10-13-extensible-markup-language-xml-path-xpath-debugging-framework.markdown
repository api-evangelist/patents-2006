---

title: Extensible markup language (XML) path (XPATH) debugging framework
abstract: Embodiments of the present invention address deficiencies of the art in respect to XPATH expression debugging and provide a novel and non-obvious method, system and apparatus for an XPATH expression debugging framework. In an embodiment of the invention, an XPATH expression debugging method can include receiving an XPATH input expression, parsing the XPATH input expression to produce a group of sub-expressions, and ordering the sub-expressions in a model for the XPATH input expression. Thereafter, in response to a selection of one of the sub-expressions in the model, a result set can be produced for the sub-expression.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08321845&OS=08321845&RS=08321845
owner: International Business Machines Corporation
number: 08321845
owner_city: Armonk
owner_country: US
publication_date: 20061013
---
The present invention relates to the field of markup language processing and more particularly to extensible markup language XML path XPATH expression traversal of an XML document.

XML is a markup language specification widely credited with improving the functionality of the World Wide Web by allowing the identification of information in a more accurate flexible and adaptable way. XML is referred to as extensible because XML is not a fixed format like the hypertext markup language HTML which is a single predefined markup language. Rather XML is a meta language that describes other languages. As such XML allows for the design of other markup languages for virtually limitless different types of documents. XML can act as a meta language because XML is written according to the standardized general markup language SGML the international standard meta language for text document markup.

There are several methods for processing an XML document. In one method every clause in the XML document is accounted for and a hierarchical model can be constructed reflecting the interrelationships between the clauses of the XML document. Referred to as a document object model DOM the DOM tree once in memory can be traversed at will in order to manipulate the XML document. Another method provides for the event driven serial parsing of clauses in an XML document. Referred to as SAX parsing an acronym for simple application programming interface API for XML consumes a significantly smaller memory footprint than DOM processing as an entire hierarchical model in the form of a DOM tree need not be constructed prior to processing the XML document.

The XPATH language defines expressions for traversing a DOM for an XML document and specifies the set of nodes or the sequence of nodes in an XML document. An XPATH expression when evaluated by XPATH expression processing logic can traverse the DOM for an XML document in steps from node to node until a targeted set of nodes or a sequence of nodes is produced. Once the result is produced the intermediate nodes associated with the requisite XPATH steps are totally forgotten. The intermediate steps however express how an XPATH expression is evaluated for a particular XML document. Thus the intermediate nodes can be important in debugging the effectiveness of an XPATH expression.

Embodiments of the present invention address deficiencies of the art in respect to XPATH expression debugging and provide a novel and non obvious method system and apparatus for an XPATH expression debugging framework. In an embodiment of the invention an XPATH expression debugging method can include receiving an XPATH input expression parsing the XPATH input expression to produce a group of sub expressions and ordering the sub expressions in a model for the XPATH input expression. Thereafter in response to a selection of one of the sub expressions in the model a result set can be produced for the sub expression.

In one aspect of the embodiment parsing the XPATH input expression to produce a group of sub expressions can include parsing the XPATH input expression to identify expression nodes step nodes function nodes and predicates to the step nodes. Once identified the nodes can be arranged in an XPATH traversal tree XTT model. Additionally parsing the XPATH input expression to identify expression nodes step nodes function nodes and predicates to the step nodes further can include identifying parenthesis nodes for the XPATH input expression. In any event ordering the sub expressions in a model for the XPATH input expression can include associating each sub expression with a node in the model and rendering a visual representation of the model in a user interface for an IDE.

In yet another aspect of the embodiment producing a result set for the sub expression can include computing a result set for a sub expression associated with a selected node in the model in the user interface and rendering the result set in a result set view for the user interface. The user interface can include for example a navigator view an XPATH input view a model view and a result set view. The navigator view can provide an interface for selecting a target XML document while the XPATH input view can provide an interface for submitting an XPATH input expression and optionally a context for evaluating the XPATH input expression. The model view can provide a user interface supporting an interactive visual rendering of the nodes of the model while the result set view can provide a visual rendering of a result set for a selected node on the model view.

In another embodiment of the invention an IDE data processing system configured for XPATH expression debugging can be provided. The system can include an IDE user interface an XPATH expression model generator including program code enabled to produce an XPATH traversal tree XTT model for an XPATH input expression and an XPATH expression debugger. The XPATH expression debugger can include program code enabled to apply a sub expression to a selected XML document corresponding to a selected node in the XTT model in the IDE user interface. As an example the IDE user interface can include a user interface to an Eclipse framework implementation.

Additional aspects of the invention will be set forth in part in the description which follows and in part will be obvious from the description or may be learned by practice of the invention. The aspects of the invention will be realized and attained by means of the elements and combinations particularly pointed out in the appended claims. It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention as claimed.

Embodiments of the present invention provide a method system and computer program product for an XPATH debugger. In accordance with an embodiment of the present invention an input XPATH expression for application to an XML document can seed an XPATH expression model of sub expressions. Each of the sub expressions can resolve to an intermediate step in resolving the input XPATH expression. Thereafter a graphical representation of the seeded XPATH expression model can be rendered in an integrated development environment user interface. The selection of a node in the XPATH expression model can result in a display of portions of the XML document consistent with an intermediate step for a sub expression associated with the selected node.

In illustration depicts an XPATH expression debugging data processing system. As shown in an XPATH expression debugging data processing system can include a host computing platform supporting an operating system . The host computing platform further can include fixed storage in which one or more XML documents can be disposed. The operating system in turn can host the execution of an integrated development environment IDE such as that provided by the Eclipse framework. Notably only a single computing platform coupled to a single fixed storage instance is shown in though the skilled artisan will recognize multiple variants of the shown configuration including multiple host computing platforms remotely accessed by client end users and multiple fixed storage instances accessible from the host computing platforms.

The IDE can be coupled to an XPATH expression debugger . The XPATH expression debugger can include program code enabled to debug the evaluation of an input XPATH expression by rendering result sets for intermediate steps of the evaluation of the input XPATH expression . To produce the intermediate steps XPATH expression model generation logic can be coupled to the XPATH expression debugger and can include program code enabled to build an XPATH expression model for the input XPATH expression . Different nodes in the XPATH expression model can reflect different sub expressions for the input XPATH expression such that the evaluation of the different sub expressions in respect to a specified one of the XML documents can produce respective result sets for corresponding intermediate steps in the evaluation of the input XPATH expression .

The XPATH expression model can be an extension of a pattern tree model used for computing XPATH containment. The extension to the pattern tree model can include additional node and token types to seamlessly model XPATH expressions based on XPATH 1.0. In this regard the XPATH expression model can include a directed and unranked tree modeling an XPATH expression with XPATH traversal tree XTT nodes and tokens. An XTT node can include a composite tree node in the XTT to model different kinds of XPATH expressions. In further illustration is a class diagram of an XPATH expression model configured to model an XPATH expression model in the system of .

As shown in the XPATH expression model can include a FullXTTExpression at its root. An instance of the FullXTTExpression can include a listing of different instances of an ExpressionXTTNode and one or more XTTToken instances. In each regard an XTTToken is an atomic string token for an XPATH expression and is a smallest meaningful string in an XPATH expression. XTTTokens can include by way of example NAME TEST the name test of an XPATH step FUNCTION NAME the name of an XPATH function AXIS the axis of an XPATH step LITERAL any string within quotes NUMBER any numerical token and OPERATOR the arithmetic and logical operators and operator.

Each instance of an ExpressionXTTNode can encapsulate one or more instances of an XTTToken in the form either of a literal or a number. Exemplary instances of an ExpressionXTTNode can include a literal expression like Hello World a numerical expression like 1 or 1.23 a path expression like XYZ and a function expression like name XY . However as shown in in the case of a literal or numerical expression the related XTTToken instances can be stored directly in the instance of the ExpressionXTTNode . By comparison for path expressions the child node can be an instance of an StepXTTNode or an instance of a ParenthesisXTTNode . Likewise for a function expression the child node can be an instance of a FunctionDXPathNode .

Each instance of an ExpressionXTTNode further can encapsulate a reference to a child XTTNode. The child XTTNode can include an instance of a StepXTTNode or an instance of a FunctionDXPathNode . The StepXTTNode models a step in the XPATH expression which contains Axis and NameTest tokens as well as a list of instances of an PredicateXTTNode and a self reference to a ChildStepNode instance of the instance of the StepXTTNode . The Axis and NameTest tokens can store the axis and name test of the given step node. The list of instances of the PredicateXTTNode can include a list of predicate expressions of the instance of the StepXTTNode . The size of the predicate list can range from zero to unlimited wherein the ChildStepXTT node instances reflect the next step of the given step node.

The ParenthesisXTTNode models a parenthesis step in an XPATH expression. The parenthesis step node is a special case of a step node the difference being that the ParenthesisXTTNode contains an instance of a FullXTTExpression instead of Axis and NameTest tokens in an instance of a StepXTTNode . The PredicateXTTNode in turn models a predicate expression in an XPATH expression. An instance of the PredicateXTTNode can encapsulate an instance to a FullXTTExpression as the predicate expression. In this regard since the predicate expression is a full XPATH expression the predicate expression is modeled by an instance of the FullXTTExpression . Finally the FunctionDXPathNode models a function XPATH expression. An instance of a FunctionDXPathNode can encapsulate a functionName as an instance of an XTTToken. Additionally an instance of a FunctionDXPathNode can encapsulate a list of FullXTTExpression instances each instance representing an argument of the function XPATH expression.

Utilizing the XTT model of the intermediate steps of an XPATH expression can be revealed to facilitate XPATH expression debugging. In further illustration is a flow chart illustrating a process for debugging an XPATH expression in the system of . Beginning in block an XPATH input expression can be received for debugging and in block the XPATH input expression can be parsed into sub expressions corresponding to intermediate steps of evaluation for the XPATH input expression. In block an XTT model can be constructed with the sub expressions at different nodes of the XTT model.

In block a subject XML document can be loaded as the target of the XPATH input expression. In block a visual rendering of the XTT model can be provided in hierarchical tree format wherein the nodes of the XTT model can be associated with selectable branches and leaves of the hierarchical tree. Thereafter in block a node in the XTT model can be selected for evaluation. In response to the selection of a node in the XTT model a sub expression corresponding to the selected node can be retrieved in block and in block the sub expression can be evaluated as against the XML document. Finally in block the result set for the sub expression can be rendered for viewing. The repeated selection of different nodes in the XTT model and the resulting rendering of a result set permit the debugger to isolate a point of failure in the XPATH input expression.

In yet further illustration is a screen shot of an exemplary user interface for the XPATH expression debugging data processing system of . The exemplary user interface can include an XPATH debugger view in an IDE. The XPATH debugger view can include a navigator window an XPATH input view a model view and a result set view . The navigator view provides a visual interface for selecting a subject XML document whereas the input view provides a visual interface for providing an XPATH expression and a starting context in an XML document for evaluating the XPATH expression. The model view shows a hierarchical tree view of the XTT model for the XPATH input expression. Finally the result set view provides a hierarchical view of a result set produced for a selected node in the model view .

Embodiments of the invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode and the like. Furthermore the invention can take the form of a computer program product accessible from at least one computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system.

For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution. Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

