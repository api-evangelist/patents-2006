---

title: Using a hypervisor to provide computer security
abstract: A computer includes a virtual machine controlled by a hypervisor. The virtual machine runs a virtualized operating system with running processes. A security initialization module sets the state in the virtual machine to pass execution from the virtual machine to the hypervisor responsive to a process making a system call in the virtualized operating system. Responsive to execution being passed from the virtual machine to the hypervisor, a security module analyzes the process making the system call to determine whether it poses a security threat. If a security threat is found, the security module takes remedial action to address the threat.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07996836&OS=07996836&RS=07996836
owner: Symantec Corporation
number: 07996836
owner_city: Mountain View
owner_country: US
publication_date: 20061229
---
This invention pertains in general to protecting a computer from malicious software and in particular to techniques for intercepting system calls.

Typically a process running in an operating system has limited access to system resources to prevent the process from maliciously or accidentally interfering with the functioning of the operating system and other processes. System calls are provided to processes by the operating system as a way for the process to access system resources when necessary. For example a process may not be allowed direct access to a hard disk but read and write system calls may be provided to give the process controlled access to the disk. Typically when a process makes a system call control is transferred to the operating system kernel which carries out the system call and then returns control to the process.

Malicious software can use system calls to cause undesirable effects on the system. Malicious software running in a process at a user privilege level may make improper system calls in an attempt to switch to the supervisor privilege level and have unrestricted access to the system. Also malicious software running at any privilege level may make system calls to perform unwanted functions such as erasing important files on a disk or propagating a virus over the Internet. The malicious software may take advantage of security flaws present in the system calls such as the inability of the system call to properly handle unexpected parameters. Alternatively the malicious software may use the calls as intended by the operating system but for malicious purposes.

Security software can monitor system calls for evidence of malicious activity and take remedial action if necessary. Kernel patching is a technique for allowing security software to monitor system calls. Kernel patching modifies code and data structures in the operating system kernel to call security software before performing the requested operating system function. For example the write system call which is implemented in the kernel may be patched so that it initially performs various security checks to ensure that it is not being called maliciously. The patching may insert new code at the start of the system call to examine the calling process and the parameters passed to the system call. If there is no security risk the system call is allowed to continue execution normally but if a security risk is detected some action is taken such as stopping the process and notifying the user.

Kernel patching is performed by legitimate security software but it is also a technique employed by malicious software such as rootkits and Trojan horses in order to prevent detection and ensure survival. Though there are different ways of dealing with this security threat some operating systems attempt to prohibit all kernel patching. Though this technique may prevent malicious software from patching the kernel it also unfortunately prevents legitimate security software from doing so. Often kernel patching is the best way to effectively and efficiently guard against certain types of attacks on the system.

One way that operating systems may prevent kernel patching is by having an operating system protection module that periodically scans the kernel code and data structures to make sure they have not been modified. If the operating system detects that the kernel has been modified it may take some action such has halting the system and displaying an error message. An example of such an operating system protection module is PATCHGUARD on 64 bit versions of MICROSOFT WINDOWS operating systems. Although the operating system may provide application programming interface API functions as hooks for executing security code as an alternative to kernel patching the API may not provide all necessary functionality and it may be used by malicious code even if undocumented. Therefore there is a need in the art for a way to provide enhanced security in a computer having an operating system that ostensibly prevents kernel patching.

The above need is met by a system method and computer program product for providing security in a computer having a virtual machine controlled by a hypervisor. In an embodiment of the system and computer program product a security initialization module sets a state in the virtual machine to pass execution from the virtual machine to the hypervisor responsive to a system call issued by a process executing within the virtual machine. A security module is activated responsive to execution being passed to the hypervisor due to the state set by the security initialization module. The security module analyzes the process to determine whether it is malicious.

In an embodiment of the method a computer implemented method of providing security in a computer having a virtual machine controlled by a hypervisor comprises setting a state in the virtual machine to pass execution from the virtual machine to the hypervisor responsive to a system call issued by a process executing within the virtual machine. Responsive to execution being passed to the hypervisor the method analyzes the process to determine whether it is a security threat.

The figures depict an embodiment for purposes of illustration only. One skilled in the art will readily recognize from the following description that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles described herein.

Computers acting in different roles may have different and or additional elements than the ones shown in . For example a computer acting as a server may have greater processing power and a larger storage device than a computer acting as a client. Likewise a computer acting as a server may lack devices such as a display and or keyboard that are not necessarily required to operate it.

The computer executes one or more operating systems such as a variant of MICROSOFT WINDOWS or LINUX. In one embodiment the computer runs a 64 bit version of WINDOWS VISTA. In general the operating system executes one or more application programs.

The operating system and application programs executed by the computer are formed of one or more processes. This description utilizes the term module to refer to computer program logic for providing a specified functionality. A module can be implemented in hardware firmware and or software. A module is typically stored on the storage device loaded into the memory and executed by the processor . A module can include one or more processes and or be provided by only part of a process.

The hypervisor is a hardware assisted virtual machine emulator. The hypervisor runs at a higher privilege level than the virtual machines and is generally capable of creating virtual machines interrupting the execution of virtual machines and switching execution from one virtual machine to another or to the hypervisor itself. As mentioned above the hypervisor is supported by virtualization technology in the processor . In one embodiment the hypervisor may run software modules such as a security initialization module and a security module that affect the operation of the virtual machines in this case to provide additional security.

A virtual machine is a self contained environment for running software under a hypervisor . As a hardware assisted emulated environment the virtual machine provides software running on it with a complete address space and a complete set of processor registers. The software contains machine instructions executed by the processor . When the hypervisor suspends execution in a virtual machine it preserves the state of the virtual machine including its memory and registers. Software running in a virtual machine A generally cannot access data within or even detect the presence of another virtual machine B or the hypervisor . Although three virtual machines are shown as an example in there may generally be one or more virtual machines in a computing environment .

Each virtual machine is associated with an exception bitmap that allows the hypervisor to gain control and suspend the virtual machine at desired points. Software running on the virtual machine and software generally may occasionally cause an interrupt for example by executing an INT machine instruction on some processor architectures. There are a number of possible interrupts such as INT E or INT that result in various interrupt handling code being run. The exception bitmap has a bit corresponding to each possible interrupt. When the bit corresponding to an interrupt is set to 1 and software on the virtual machine calls the interrupt the virtual machine suspends stops executing and control passes to the hypervisor . Thus the hypervisor can set appropriate bits on the exception bitmap to cause control to pass to the hypervisor when the software on the virtual machine calls certain interrupts.

In some cases it is desirable to pass control to the hypervisor at times when the software is not calling any interrupt. In one embodiment the hypervisor can do so by setting breakpoints on certain machine instructions in the software running on the virtual machine that cause a specific interrupt when those instructions are fetched. For example a breakpoint can be set at an instruction at the start of a certain function causing an INT to be triggered when that function is called by the software. The processor may support a limited number of these breakpoints. The exception bitmap can then be set to catch the interrupts created by these breakpoints and allow control to be transferred to the hypervisor upon execution of the machine instruction of interest.

One type of software that can be run on a virtual machine is a virtualized operating system . For clarity the following description considers the case of a single virtualized operating system A but the same description can be applied to the case of multiple virtualized operating systems . The virtualized operating system may be an operating system such as WINDOWS VISTA 64 bit edition capable of being run directly on processor . In one embodiment the virtualized operating system runs processes at a lower privilege level than itself. In one embodiment parts of the virtualized operating system run on different virtual machines or on the hypervisor .

The virtualized operating system A contains state information that describes the running state of the virtualized operating system at a given time. The state information includes the operating system kernel other operating system code and data such as device drivers and a network protocol stack and processor registers. When execution of the virtual machine A is suspended and control is transferred to the hypervisor the hypervisor can read and modify the operating system state information . This ability of the hypervisor may be used for example to analyze and address security threats that may arise in the virtualized operating system .

The kernel is the core code and data of the operating system used to run operating system services and manage processes. System calls made by the running processes are implemented in the kernel .

A running process may occasionally make a system call to access a system resource. For example the write system call may allow a running process to write to the storage device using the operating system . The system call is run by the operating system kernel at a higher privilege level than the running process . In one embodiment when a running process makes a system call an interrupt such as INT E is triggered. The kernel contains the interrupt handling code which then executes the system call. In another embodiment a fast call type system call may be supported by the processor to avoid triggering an interrupt. Examples include the SYSCALL Intel and SYSENTER AMD instructions. When a SYSCALL SYSENTER instruction is executed control passes to the kernel which runs the appropriate system call. When the system call is completed the kernel returns control to the calling process .

In one embodiment a fast call type system call is made through the use of one or more Model Specific Registers MSR in the processor . Some Intel processor architectures with IVT use Model Specific Registers and for this purpose. When a SYSCALL SYSENTER instruction is run execution switches to kernel mode and begins at a location specified by the MSR . The WRMSR and RDMSR instructions are used to write to and read from the MSR respectively. The virtualized operating system can use WRMSR to set the contents of the MSR to be the location of the system call handling code in the kernel . As a result the SYSCALL SYSENTER instruction will run the desired system call handling code. Some processors that support virtualization such as ones with Intel IVT return control to the hypervisor whenever the WRMSR or RDMSR instructions are called. This is an alternative to using interrupts and the exception bitmap for returning control to the hypervisor .

In one embodiment the system service dispatch table SSDT is a kernel data structure used for handling system calls. The SSDT is used in the MICROSOFT WINDOWS VISTA 64 bit operating system for example. The SSDT contains entries that point to code for carrying out various system calls. In one embodiment when control is passed to the kernel to run a system call as a result of an interrupt or the fast call mechanism described above the kernel calls an indexing function such as KiFastCallEntry with a parameter corresponding to the type of system call. This indexing function determines the entry in the SSDT corresponding to the system call and the code referenced by that entry is executed to carry out the system call. The SSDT is created by the operating system kernel soon after startup and is generally not further modified by the operating system .

The operating system protection module preserves operating system integrity by detecting changes to the kernel made by malicious software that might disrupt operation of the operating system and pose security threats. The operating system protection module periodically scans the kernel code and data structures including the SSDT to make sure they have not been modified. An example of such an operating system protection module is PATCHGUARD on 64 bit versions of MICROSOFT WINDOWS operating systems. The operating system protection module may perform a checksum a cyclic redundancy check CRC or some other verification on the SSDT entries to check if they have been modified. To access the SSDT entries the operating system protection module must read the MSR using the RDMSR instruction and call the indexing function at the location specified by the contents of the MSR. If the operating system protection module detects that the SSDT has been modified it may take some remedial action such as halting the system and displaying an error message. By preventing all changes to the kernel the operating system protection module can also disable legitimate security software that modifies the kernel to carry out various security checks.

The security initialization module and security module provide security to the computer by intercepting operating system calls and analyzing the calls in the context of the calling process and operating system state for evidence of malicious intent. In one embodiment the security initialization module and security module are run from the hypervisor . The security initialization module sets up the virtual machine A to transfer control to the hypervisor when certain system calls are made in the virtualized operating system . The security module then addresses any possible security threat from the system call. As a result system calls can be intercepted without kernel patching and detection by the operating system protection module .

The security initialization module sets up the virtual machine A to transfer control to the hypervisor and security module when certain system calls are made in the virtualized operating system . If the operating system normally triggers an interrupt when a system call is made then the security initialization module can set the bit in the exception bitmap corresponding to that interrupt. If system calls are made through the fast call SYSCALL SYSENTER mechanism the security initialization module can set breakpoints in the kernel code. In one embodiment a breakpoint can be set at the location of the indexing function KiFastCallEntry which results in the breakpoint being triggered prior to every system call. In another embodiment breakpoints can instead be set at the start of the individual kernel routines pointed to by the entries of the SSDT . This way only system calls of interest trigger breakpoints resulting in better performance of the virtualized operating system . The security initialization module also sets the bits in the exception bitmap corresponding to the interrupts produced by the breakpoints.

The security module provides security to the computer by assessing and addressing security threats posed by processes making system calls. In one embodiment the security module is run by the hypervisor when control is transferred to the hypervisor at the start of a system call to the virtualized operating system . In one embodiment this transfer of control results from initialization of breakpoints and the exception bitmap performed by the security initialization module . The security module analyzes the system call of interest by examining the operating system state information and determines if it poses a security threat. If it does the security module addresses the security threat. When finished the security module returns control to the virtual machine allowing the virtualized operating system to continue execution.

Although the above description assumes that the security initialization module and the security module are code modules run from the hypervisor other embodiments are possible. First the modules may be run from within the virtualized operating system of interest. Techniques can be used for communication between the hypervisor and the operating system . For example the hypervisor can inject events such as interrupts into the operating system which can be used to transfer control to the security module within the operating system. The hypervisor can also manipulate the operating system state information as necessary to cause the security module to run when control is transferred back to the operating system . Additionally the security module in the virtualized operating system can use a VMCALL or similar instruction to get information from the hypervisor when control is transferred to it.

The modules may also be located in another virtual machine which may B or may not C contain an operating system . In this case the hypervisor would run the modules on that virtual machine and provide that virtual machine with the necessary operating system state information from the virtualized operating system of interest to allow the modules to perform their functions. The modules as above can use the VMCALL or similar instruction to request further information from the hypervisor . The modules may have different locations from each other and may be combined or further broken up into smaller modules as necessary.

In one embodiment the disabling module can disable or circumvent the operating system protection module . The disabling module allows security to be provided using standard kernel patching techniques including modifying the SSDT within the virtualized operating system to intercept system calls. In one embodiment the disabling module is run from the hypervisor .

As described above the operating system protection module periodically checks to make sure that the SSDT and its entries have not been modified. In order to do this it determines the location of the SSDT entries by executing a RDMSR instruction. When executed the RDMSR instruction suspends control of the virtual machine and passes control to the hypervisor . In one embodiment the hypervisor runs the disabling module which examines the operating system state information to determine that the operating system protection module called an RDMSR instruction in order to access the SSDT . The disabling module may use certain heuristics to make this determination such as noting the calling instruction pointer and the frequency of calls since the operating system module runs with a certain frequency .

In one embodiment the disabling module can disable the operating system protection module by modifying the registers and or stack in the operating system state causing the operating system protection module to simply exit without performing the check upon resumption of the virtualized operating system . In another embodiment the disabling module can modify the process table in the operating system state to cause the operating system protection module process to sleep forever. One skilled in the art will recognize that there are many specific possibilities for disabling or circumventing the operating system protection module using the basic architecture described here.

If the security module determines that the system call is not a security threat then the security module returns control to the virtualized operating system allowing it to resume execution. If the security module determines that the system call poses a security threat to the computer the module addresses the security threat. There are many options for addressing the security threat. For example the security module may kill the process and notify the user that the process was found to be a security threat. The security module may instead modify the system call so that it is no longer dangerous and allow the process to continue execution possibly also notifying the user or logging the action taken. The security module may also simply act as a monitor logging the various system calls made by certain processes without taking other actions. Once the security threat has been addressed the security module returns control to the virtualized operating system and allows it to continue execution unless the security module decides the threat is so severe that it must halt the entire operating system .

The above description is included to illustrate the operation of the preferred embodiments and is not meant to limit the scope of the invention. The scope of the invention is to be limited only by the following claims. From the above discussion many variations will be apparent to one skilled in the relevant art that would yet be encompassed by the spirit and scope of the invention.

