---

title: Method for controlling security function execution with a flexible, extendable, and non-forgable block
abstract: A method, article, and system for providing an effective implementation of data structures, and application programming interface (API) functions that allow secure execution of functions behind a secure boundary. The controlling mechanism is a flexible, extendable, and non-forgeable block that details how values and parameters behind the secure boundary can be changed. The invention allows for one entity to execute a security function that will normally require extensive authorizations or dual or multiple control. The method and system comprise instructions that are cryptographically protected against alteration or misuse, wherein the instructions further comprise a trusted block that defines security policies that are permitted when an application program employs the trusted block in APIs. The trusted block has a number of fields containing rules that provide an ability to limit how the trusted block is used, thereby reducing the risk of the trusted block being employed in unintended ways.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07779258&OS=07779258&RS=07779258
owner: International Business Machines Corporation
number: 07779258
owner_city: Armonk
owner_country: US
publication_date: 20060922
---
This application is related to commonly assigned U.S. patent application Ser. No. 11 534 232 entitled METHOD FOR IMPROVED KEY MANAGEMENT FOR ATMS AND OTHER REMOTE DEVICES filed on Sep. 22 2006. This application is incorporated by reference herein in its entirety.

IBM is a registered trademark of International Business Machines Corporation Armonk N.Y. U.S.A. Other names used herein may be registered trademarks trademarks or product names of International Business Machines Corporation or other companies.

This invention relates to securely controlling critical values or parameters behind a secure boundary. The controlling mechanism is a flexible extendable and non forgeable block that details how values and parameters behind the secure boundary can be changed. The invention allows for one entity to execute a security function that will normally require extensive authorizations or dual or multiple control. In particular the invention provides a method article and system for the effective implementation for securely transferring symmetric encryption keys to remote devices such as Automated Teller Machines ATMs PIN entry devices and point of sale terminals. It may also be used to exchange symmetric keys with another cryptographic system of any type such as a Host Security Module HSM in a computer server.

Role based access control systems are used in computer operating systems and in numerous computer software products. The role based access control system is favored in many applications because of its efficiency in daily administration of user authorizations. In such a system an administrative role is required in order to maintain all other roles. The number of users that can hold the administrative role is usually reduced to a smaller group of people in an organization. This works well in daily operations but in certain situations such as emergencies a user will require additional authorizations. Since administrators cannot be expected to be available at all times this is usually handled by granting these authorizations permanently or by special user accounts with very broad authorizations that can be used in these situations. Neither of these approaches is attractive from a security perspective.

Automated Teller Machines ATMs PIN entry devices and point of sale terminals have become a central feature of modern life and have become quite prevalent in and out of the work environment. For example during the course of the day a user may utilize an ATM to conduct financial transactions purchase gas for an automobile from a point of sale terminal in the form of a fuel pump via a credit or debit card and purchase food at the grocery store in a checkout line with a point of sale terminal also with a credit or debit card. In all these instances security is a prime concern and an individual s data card number passwords account numbers etc. must be kept secure and out of reach from unintended parties. In addition access to controls and machine settings must be secured. The securing of sensitive data is normally accomplished through the use of encryption or encoding of the data. Encrypted data is only supposed to be accessible to an intended party with use of an encryption key to decipher the encoded information. The widespread use of electronic transaction processing applications has increased the demands for improved features ease of use and improved security.

Remote Key Loading refers to the process of exchanging symmetric encryption keys with a remotely located device such as an ATM from a central administrative site. The process encompasses two phases of key distribution 

A new ATM when it is delivered from the manufacturer and being put into operation has none of the affiliated bank s or service provider s security keys pre installed. The process of getting the first key securely loaded in the ATM is a difficult one. Loading the first KEK into each ATM manually in multiple cleartext key parts has typically been the security key loading process. In this process two separate people must carry key part values to the ATM and load them manually. Once inside the ATM they are combined to form the actual KEK. In this manner neither of the two people has the entire key protecting the key value from disclosure or misuse. This method is labor intensive and error prone making it expensive for the banks or service providers.

When an ATM is in operation the bank or service provider can install new keys as needed by sending them enciphered under a KEK it installed at an earlier time. This is straightforward in concept but the cryptographic architecture in the ATMs is often different from that of the host system sending the keys and it is difficult to export the keys in a form understood by the ATM. For example cryptographic architectures often enforce key usage restrictions in which a key is bound to data describing limitations on how it can be used. The encoding of these restrictions and the method used to bind them to the key itself differs among cryptographic architectures and it is often necessary to translate the format to that understood by the target device before a key can be transmitted. It is difficult to do this without reducing security in the system by making it possible to arbitrarily change key usage restrictions. The reduction in the level of security could potentially introduce holes that could permit misuse of the key management functions to attack the system.

The present invention is directed to addressing or at least reducing the effects of one or more of the problems set forth above through the introduction of a new secure data structure called a trusted block. This disclosure describes a new and novel method for providing the necessary cryptographic functions to create and manage the special key forms needed for remote key distribution of this type. The invention described here also provides a mechanism through which the system owner can securely control these translations preventing the majority of attacks that could be mounted by modifying usage restrictions.

Embodiments of the present invention include a data structure comprising instructions that are cryptographically protected against alteration or misuse. The instructions further comprise a trusted block that defines specific key management policies that are permitted when an application employs the trusted block to generate import or export symmetric cryptographic keys. The applications comprise application programming interfaces API embedded firmware operating system code and hardware configured operations. The applications further comprise a Trusted Block Create TBC function and a Remote Key Export RKX function. The TBC function creates the trusted block and the RKX function uses the trusted block to generate import or export symmetric keys according to a set of parameters in the trusted block. The RKX function creates a RKX token and the RKX token encases the keys.

The trusted block has zero or more fields containing rules that provide an ability to limit how the trusted block is used thereby reducing the risk of the trusted block being employed in unintended ways or with unintended keys. The rules are created and approved by a cryptographic module under the control of at least two separate individuals. The rules are protected and bound to the trusted block. A rule comprises at least one of the following an indictor of whether said rule is to be used to generate import or export the symmetric cryptographic keys and an indicator of whether the generated imported or exported symmetric cryptographic keys should be in the form of a key that is immediately usable or in the form of a RKX token that can only be used as a subsequent input to another RKX function call or an indicator of whether the generated or said exported symmetric cryptographic key should be encrypted under a public key contained in a vendor supplied certificate. The rules may also comprise a rule ID which is a value that identifies the rule and where the rule should be used and wherein the rules can reference other rules by referring to the rule ID. A rule may comprise at least one of the following a transport key rule reference to identify what rule must have been used previously to produce a key used as a transport key input to the RKX function and a source key rule reference to identify what rule must have been used previously to produce a key used as a source key input to the RKX function or an importer key rule reference to identify what rule must have been used previously to produce a key used an importer key input to the RKX function.

In addition the rules may comprise at least one of the following information that controls the length of the keys that can be generated with a rule and information controlling the length of keys that can be exported with a rule or information controlling the length of keys that can be exported with a rule.

Rules may also comprise a plurality of variants and wherein a first variant can be exclusive or ed XORed with the cleartext value of an output key exported by the trusted block prior to an output key being enciphered by a transport key and wherein a second variant can be XORed with a transport key prior to a transport key being employed to encrypt the output key that is exported or generated by the trusted block.

A rule may also comprise a plurality of key label templates. The templates specify acceptable key label values for either keys that are to be exported by the trusted block or importer keys that are to be used for decrypting keys that are to be imported by the trusted block. Host applied labels are compared to the template and the key will not be exported if the host applied label does not correspond to the key label values specified by the template.

The keys of the present invention have structure. The key structure further comprises a token. The token is a data structure used to encase the keys. The token further comprises control vectors while the rules comprise information to control which of the keys can be exported based on the control vectors associated with the keys. In addition the control vectors have values wherein the rule information allows the acceptable control vectors to be specified so that sets of related control vector values are acceptable while values outside of the set are rejected.

The data structure of the present invention further comprises activation and expiration date information and the RKX function enforces said activation and expiration date information before carrying out instructions in the trusted block.

The rules of the present invention may also comprise a plurality of masks of control vector bits where the rules comprise the required values of the control vector bits. The masks of the control vector bits and their required values are enforced by the RKX function when exporting a key or using an importer key. The rule may also comprise a control vector that is applied to a cryptographic module s master key before the master key is being employed to encrypt an output key that is imported by the trusted block.

The trusted block of the present invention may optionally have a cryptographic public key. The TBC function creates and approves said cryptographic public key with the cryptographic module under the control of at least two separate individuals.

The RKX token of the present invention further comprises a confounder used to initialize an encryption block chaining value during the encryption of an encased key. The confounder and the encased key within the RKX token are encrypted using the same MAC key that was used to protect the trusted block.

The RKX token further comprises a rule identification field that specifies a particular rule section that was used to create the RKX token. The RKX token further comprises a MAC value and the MAC value is computed over the RKX token. The RKX token further comprises an encrypted confounder a key value and a rule identification field that has a value. The rule identification field value can be compared with instructions within the rule sections of the trusted block to determine whether the key within the RKX token may be used as either an importer key key encrypting key a source key or exporter key encrypting key.

Embodiments of the present invention also include a method for securely transferring symmetric cryptographic keys to remote devices. The method utilizes a data structure comprising instructions that are cryptographically protected against alteration or misuse. The instructions further comprise a trusted block that defines specific key management policies that are permitted when an application program employs the trusted block in application programming interface API functions to generate import or export symmetric cryptographic keys.

A system for implementing the method of the present invention as well as an article comprising one or more non transitory machine readable storage media containing instructions that when executed enable a processor to carry out the method are also provided.

Additional features and advantages are realized through the techniques of the present invention. Other embodiments and aspects of the invention are described in detail herein and are considered a part of the claimed invention. For a better understanding of the invention with advantages and features refer to the description and to the drawings.

The detailed description explains the preferred embodiments of the invention together with advantages and features by way of example with reference to the drawings.

The trusted block concept provides a great deal of flexibility and power but at the same time it gives the security administrators the ability to tightly control what can be done with the cryptographic keys used by their applications. The new methods define new procedures for distributing and loading these keys using public key cryptographic techniques which allow banks or other service providers to load the initial KEKs without sending anyone to the ATMs or to exchange keys with other types of cryptographic systems. These methods will make the process quicker more reliable and much less expensive for the banks or other service providers. This disclosure describes a new and novel method for providing the necessary cryptographic functions to create and manage the special key forms needed for remote key distribution of this type. The invention described also provide a mechanism through which the system owner can securely control these translations preventing the majority of attacks that could be mounted by modifying usage restrictions. An example of a cryptographic coprocessor used with server systems that would implement the present invention is the IBM 4764 which is also known as the PCIXCC or the Crypto Express2 CEX2 .

The trusted block is the central data structure to support all remote key loading functions. The trusted block provides great power and flexibility but this means that it must be designed and used with care in order to have a secure system. The required security is provided through several features of the design.

The Trust in the Trusted Block is established by creating the block under dual control. Once that trust has been established it is ensured using cryptographic techniques. The trusted block does not contain any data that has to be kept secret but it is essential that its contents be protected against unintended modification. In order to accomplish this the block is protected using a MAC calculated using a symmetric key. The MAC key is randomly generated when the MAC is first calculated on the trusted block.

The MAC key itself is encrypted and embedded in the trusted block. If the trusted block is in internal form the MAC key is encrypted with a variant of the device master key. If the block is in external form it is encrypted using a key encrypting key. In either case the MAC key is prepended with a randomly generated confounder which is equal to the block length of the encryption algorithm For DES or Triple DES the confounder is eight bytes in length before it is encrypted. Encryption is in CBC mode however alternative encryption modes will also work without altering the intent of the invention. ECB mode is not acceptable however encryption must use a mode that chains successive blocks of text so that each encryption depends on the content of the current message block and the preceding blocks. illustrates the MAC key encrypted in the CBC mode. The MAC key has two parts the confounder and the key itself.

For an internal format trusted block the string shown in is encrypted in CBC mode using a variant of the master key with a zero IV initialization vector . The variant is a fixed randomly generated string of bytes with length equal to the master key. If the master key is a DES or Triple DES key each byte of the variant must have even parity so that the parity of the resulting key is not altered Keys used with DES algorithms have odd parity in each byte of the key so the variant must be constructed so that the resulting key after applying the variant still has odd parity in each byte. The KVP for the device master key is stored in the KVP field of the trusted block so that availability of the correct master key can be verified when the block is used. For an external format trusted block the string is encrypted in CBC mode using a provided key encrypting key. Before it is used to encrypt the MAC key the KEK is XORed with a variant in order to ensure the key cannot be misused in other CCA services. The variant value is a fixed randomly generated value equal in length to the KEK. Like the variant for the master key described above each byte of this variant must have even parity if it is used with a DES or Triple DES key so that it does not affect the parity of the key.

The Trusted Block can have one or more rules which define how symmetric keys will be generated imported or exported under control of the block. These are generally the keys that will be shared with the remote device such as an ATM. As a part of the Trusted Block the rules are created and approved by the cryptographic device owner under dual control and protected from modification.

The IBM CCA cryptographic architecture uses control vectors exclusive ORed with its symmetric keys but most non CCA cryptographic devices use variants or use no modifying value at all. An important feature of the rules is the ability to specify arbitrary values to be XORed with the key being generated or exported. For additional flexibility a second value can be specified to be XORed with the KEK used to wrap the key being generated or exported. For yet more flexibility a third value can be specified to be XORed with the key being imported by the importer KEK. These values can be CCA control vectors variants or zero. This gives complete flexibility in sending keys to different types of cryptographic systems.

The Trusted Block rules can contain the following values to control key generation import and export.

Table 2 provides information on the content of the Trusted Block structure including the rules it can contain.

The trusted public key section Table 2 contains the public key modulus exponent and key usage flags to control how the key can be used. Table 3 summarizes the features and example applications of the public key. It should be noted that the public key is not a required part of a trusted block. In some applications trusted blocks are used only in relation to symmetric key based key management and in those cases the Trusted Block may not contain a public key section.

The Trusted Block information section Table 2 contains control and security related to the trusted block. It is required in all Trusted Blocks as indicated by its non optional status. Table 4 summarizes the Trusted Block information section.

The following objects Table 4 contain optional parts of the trusted block information section. If used the objects are included in the structure shown above.

The protection information object Table 5 is required and contains the data used to secure the trusted block. By making this a separate object the opportunity to replace the protection mechanism in the future for example with a different MAC or HMAC algorithm is preserved.

The activation and expiration dates object Table 6 is optional and contains activation and expiration dates for the trusted block. It also contains a flag to indicate whether the cryptographic device should check the dates before using the block.

The Trusted Block label section Tables 2 and 7 is optional and contains a label to identify the Trusted Block.

The application defined data section Tables 2 and 8 is optional and contains arbitrary data defined by the application program that creates the trusted block. It is not examined or used in any way by the device but is bound to the trusted block by the MAC and can be used by the application program. An example is the use of this section to hold a public key certificate for the trusted public key. The data is variable length but it must not cause the entire trusted block to exceed its maximum allowable size.

The rule section tables 2 and 9 of the Trusted Block is used to define a rule for key generation or export. The trusted block can have zero or more rules sections where each section defines a different rule. Each rule has an embedded name that is used to identify it so that a selected rule can be used when the trusted block is passed to the RKX function. The rules section consists of a set of fixed fields followed by a variable number of optional objects. The optional objects are concatenated at the end of the fixed portion of the section structure and only those objects that are needed are included in the structure. Table 9 summarizes the key features of the rule section.

The following objects contain optional parts of the trusted block rule section. If used the objects are concatenated to the end of the base rule section structure defined above. The objects can appear in any order.

The transport key variant object is optional. It is used to hold a variant which is XORed into the cleartext value of the transport key before that key is used to encrypt the key RKX is generating or exporting. The length must be greater than or equal to the length of the transport key that is supplied to RKX when this rule is used. If the variant is longer than the transport key it is truncated on the right to the length of the key before it is used. Please note that if the transport key is in an RKX token the variant is XORed with only the key itself and not with the confounder that precedes the key in the token.

The transport key rule reference object is optional. If present it contains the rule ID of the rule that must have been used to create the transport key being used to encrypt the key being generated or exported. This reference can only be used if the transport key is provided in an RKX token which contains the rule ID for the rule used to create that key.

The common export key parameter object is required when exporting a key and is optional when generating or importing a key. It holds the parameters that are used to process the key being exported. This includes 

The source key rule reference object is optional and is used to hold a rule reference for a source key that is provided to the RKX function in the form of an RKX token. That token contains the name of the rule that was used to create the token and the source key rule reference if present is compared with that value in the RKX token. If the two do not match execution of RKX aborts and an error is returned. The export key CCA token parameters object is optional and is only used if the export key parameter is in the form of a CCA token. It is ignored if present when the export key is provided as an RKX token. The object contains fields that are compared with values in the CCA token or associated with that token. Table 11A summarizes characteristics that the source key must match.

The Source key label template is a template that can be matched against the key label for the source key when that key is specified using a key label. If the actual label for the key does not match the template which can contain wildcards the request is rejected. The CV limit mask and CV limit template have the same length which is the length defined in the field Export key maximum length.

The import key CCA token parameters object is optional and is only used if the import key parameter is in the form of a CCA token. It is ignored if present when the import key is provided as an RKX token. The object contains fields that are compared with values in the CCA token or associated with that token. Table 11B summarizes characteristics that the import key must match.

The Import key label template is a template that can be matched against the key label for the import key when that key is specified using a key label. If the actual label for the key does not match the template which can contain wildcards the request is rejected. The CV limit mask and CV limit template have the same length which is the length defined in the field Import key maximum length.

The common import key parameter object is required when importing a key but it is not used when generating or exporting a key. It holds the parameters that are used to process the key being imported the supplied key in the source key parameter . This includes 

The following API functions support the creation of Trusted Blocks and generation and export of keys using those blocks. In the presentation of the API functions below the following terminology is used to describe option values passed to the functions.

The Trusted Block create TBC function is used to create a Trusted Block under dual control. The block will be in external form encrypted under a transport key KEK . The format of the TBC function is shown in table 12.

Either INACTIVE or ACTIVATE must be supplied to indicate the action. The two options are authorized separately so that they can be assigned to different people. The same person should not be authorized to execute both the INACTIVE and ACTIVATE operations.

For keyword INACTIVE the trusted block is constructed and protected with the MAC. The following steps summarize the INACTIVE operation.

For keyword ACTIVATE the trusted block is validated and the Active flag is set so that the block can be used in other cryptographic services. The following steps summarize the operation.

The remote key export RKX function uses the trusted block to generate import or export symmetric keys for local use and for distribution to and from an ATM or other remote device. The application program indicates what rule in the trusted block is to be used. The function can either generate a new key import an existing key or export an existing key. The specified rule is examined to determine whether a generate import or export operation is to be performed.

The RKX function uses a special structure to hold encrypted symmetric keys in a way that binds them to the trusted block and allows sequences of RKX calls to be bound together as if they were an atomic operation. Incorporating the following three features into the RKX key structure does this.

It should be noted that the RKX rule could contain a source key label template which is matched against the key label for the source key parameter if that key is specified using a label. Since the host CCA software replaces a label with the actual key token read from the key storage file the label must be passed to the cryptographic module in another way. The host CCA API software for the RKX function accomplishes this. If the application program passes the source key parameter as a key label the RKX API code includes that label in the request parameter block that is sent to the cryptographic module. In this way the device receives both the key token itself and the key label that can be matched against the template in the rule. Using an identical technique an import key label template can be matched against the key label for the importer key parameter if that key is specified using a label.

Additional API functions must be provided in order to have a workable system. Many cryptographic systems will already have functions that could be enhanced to provide the specific operations described below.

The Trusted Block Import function is used to import trusted blocks which are created in external form but must be in internal form when used.

A digital signature verification function DSV must be able to verify digital signatures using public keys that are contained in trusted blocks. The DSV could do this with any trusted block regardless of whether the block also contains rules to govern its use when generating or exporting keys with the RKX function.

The reencipher Trusted Block function is used when the Trusted blocks are in internal form and use the device master key to encrypt the embedded MAC key. When the master key is changed the Reencipher Trusted Block function must be able to reencipher this under the new master key so that the trusted blocks are still usable.

In a first preferred embodiment of the Remote Key Loading design the Trusted Block create function will be described further with the creation of the Trusted Block under dual control. The Trusted Block is a data structure that typically contains an RSA public key and optional information rules to control export of other keys associated with the devices that use the public key. This structure is protected by an ISO 16609 CBC mode TDES Message Authentication Code MAC . The trusted block will contain the rules that will be used to generate or export DES keys. The trusted block could also serve as a trusted public key container and in this case the public key in the trusted block can be used in digital signature verification services. The first step in preparing a trusted block is to call the trusted block create routine.

The trusted block create TBC routine or service has three primary inputs the input block transport key and a keyword. The input block contains all the fields of a trusted block token but will be updated by this service to contain a valid MAC and MAC key. The transport key is the key encrypting key that is used to wrap or protect the trusted block. There are two valid keywords INACTIVE and ACTIVATE. The keywords are options which will direct the specific processing of the routine.

The first step in the Trusted Block creation is to call the TBC service specifying the INACTIVE keyword. This service call will produce an inactive external trusted block token. The trusted block is fully formed and protected with a MAC at this point but it is not usable by any other service. A second person with different authorization can then perform the second step. The result of step one is input to the second call to the trusted block create service along with the transport key and the ACTIVATE rule keyword. This call produces an external active trusted block token. The trusted block is now usable in other services. After activation another service is called to put the trusted block into internal format. The public key import PKI service performs this operation. Note that the PKI service is used to implement the Trusted Block Import service. The next two tables will describe the application programmer s interfaces API for the trusted block create TBC and public key import PKI services. The charts that follow will describe the processing flow of each service.

The API outlined in Table 15 for the TBC service highlights the major input and output fields used by the preferred embodiment for this verb. The first column contains the API parameter name. The second column indicates whether the parameter is an input to or an output from the service. The third column indicates whether the item is an integer or a string.

rule array count The rule array count parameter is a pointer to a string variable containing the number of elements in the rule array variable. The value must be one.

The API outlined in table 17 for the Trusted Block Import function highlights the major input and output fields used by the preferred embodiment. The first column contains the API parameter name. The second column indicates whether the parameter is an input to or an output from the service. The third column indicates whether the item is an integer or a string.

The flowcharts B A B A and B outline the key steps required to create a trusted block under dual control and transform it into an operational entity.

Step 1 of the creation of the Trusted Block is as follows Creation of the Inactive External Trusted Block starting at in 

Step 2 of the creation of the Trusted Block is as follows Creation of the Active External Trusted Block starting at in and center on authorization validation and initialization 

Step 3 of the creation of the Trusted Block is as follows Convert the Active External Trusted Block to Internal Trusted Block Format starting at in FIG. A The public key import service PKI implements the Trusted Block Import function and is used to convert the trusted block form external format to internal format. When the trusted block is in internal format it is considered operational and can be used on the local system 

A preferred embodiment of the present invention utilizes functions that use the trusted block to perform cryptographic operations. These functions include 

The Remote Key Loading method of a preferred embodiment of the present invention involves encipherment of a newly generated or preexisting key under a key encrypting key and optionally under a public key. A group of services in the preferred embodiment accomplish the Remote Key Loading. The service directly responsible for the remote key loading methodology is known as the Remote Key Export RKX service. The Trusted Block Create TBC service creates a trusted block containing not only the rules governing how the Remote Key Export service is to operate but also containing a trusted root public key used to verify the digital signature in a certificate which in turn contains a public key that is used ultimately for the encipherment of the newly generated or preexisting key.

Additional contents of the trusted block of a preferred embodiment of the present invention include a Message Authentication Code MAC key and MAC value. A MAC value is computed over the entire content of the trusted block except for the encrypted MAC key field MAC value field and master key verification pattern field of the trusted block. The trusted block is created in external form meaning that the MAC key used to create the trusted block s MAC value is enciphered under a key encrypting key. Prior to use by the Remote Key Export service the trusted block must be converted to internal form meaning that the MAC key contained in the trusted block must be changed from being enciphered under a key encrypting key to being enciphered under a variant of the PKA or asymmetric master key. This trusted block conversion from external form to internal form is accomplished via the Public Key Import PKI service. In the preferred embodiment the PKI service is used to implement the Trusted Block Import Function.

Using the Remote Key Loading methodology of a preferred embodiment of the present invention a key can be enciphered under one of three possible schemes by the RKX service resulting in asymmetric encrypted output symmetric encrypted output or both. 1 Using the RKX service a key may be enciphered under a public key located in an input parameter certificate. The certificate will contain a digital signature which must be verified with a root public key located in the trusted block input parameter. The output will be placed into the asymmetric encrypted key output parameter. 2 Using the RKX service a key may be enciphered under a DES key located in the transport key input parameter. The output will be placed into the symmetric encrypted key output parameter. 3 Using the RKX service an external CCA token containing a variant and no control vector may be decrypted under the importer key located in the importer key input parameter then encrypted under the master key to produce an internal CCA token as output. The internal CCA token will contain a CV that is located within the trusted block s Common Import Key Parameters subsection of the rule section selected by the RKX service s rule ID input parameter.

The key that is output by the RKX service may be randomly generated within the adapter. When this is the case the output will include a symmetric encrypted key and an optional asymmetric encrypted key. Symmetric encrypted output key format for this randomly generated key is always the RKX token format encrypted under a variant of the MAC key. Asymmetric encrypted output key format may be either RSA OAEP or PKCS 1.2 format according to the rule section in the trusted block whose rule ID matches the rule ID input parameter. The public key contained in the input certificate parameter is used to encrypt the generated key.

The RKX service will generate a random number key whose length is defined by the rule section in the trusted block that was selected by the rule ID input parameter. The output produced will consist of a symmetric encrypted external RKX token and optionally an asymmetric encrypted key enciphered under the public key contained in the certificate input parameter. In the preferred embodiment the output of this generate routine will never be an external CCA token. In order to create an output external CCA token from random number key generation the RKX service may be invoked twice once to generate the RKX token and subsequently to use the newly generated RKX token as an input parameter source key identifier in a call to the RKX service. In this subsequent call a rule ID may be provided to the RKX service that selects a rule different from the first rule ID used to generate the RKX token and which defines the export of the source key e.g. an RKX token to an external CCA token.

The key that is to be exported by the RKX service is not limited to being a source key in the form of an RKX token. Additionally the key to be exported may be an encrypted form of a preexisting key that is supplied to the RKX service as a source key parameter in the form of an internal CCA DES token or an external CCA DES token. Four basic steps are involved in exporting a preexisting key by the RKX service.

In step one the encrypted source key input parameter is converted into cleartext form. If the source key is an RKX key token the key must be decrypted under a fixed variant of the MAC key that is located within the trusted block input parameter provided that the rule ID in the RKX token matches the rule ID contained in the Rule Section of the trusted block. The MAC key in the trusted block must be decrypted under a fixed variant of the PKA master key before being used to decrypt the key in the RKX token. If the source key is an external CCA key token the key must be decrypted under the importer key encrypting key input parameter which first must be decrypted by the DES master key. If the source key is an internal CCA key token the key must be decrypted under the DES master key.

In step two the source key now in cleartext form is optionally checked and modified. If the source key input parameter was either an internal CCA key token or external CCA key token the source key s control vector CV is checked for acceptability for key exportation. The trusted block s CV Mask determines which source key CV bits should be checked. The trusted block s CV Limit Template contains the required values for those source key CV bits that are to be checked. The CV mask and template are located in the trusted block s rule section that is selectable by the rule ID input parameter to the RKX service. If the source key input parameter is a key label for an internal CCA key token that is contained in key storage verify that the label is valid by comparing it to the Source Key Label Template in the trusted block s rule section that is selectable by the rule ID input parameter to the RKX service. For the modification phase of step two optionally apply the output key variant to the cleartext source key using an exclusive or technique if specified to do so in the trusted block s rule section that is selected by the rule ID input parameter.

Step three is performed when the symmetric encrypted output key is determined to be in a CCA token format. In step three the transport key is prepared for use on the modified source key from the previous step. The transport key may be either an RKX key token or an internal DES key token. Preparation of the transport key involves the optional application of a transport key variant and the optional application of a control vector. Both the transport key variant and control vector are found in the trusted block s rule section that is selected by the rule ID input parameter. If the transport key is contained in an RKX key token the key must be decrypted under a fixed variant of the MAC key located within the trusted block input parameter provided that the rule ID in the RKX token matches the rule ID contained in the rule section of the trusted block. The MAC key in the trusted block must be decrypted by the fixed variant of the PKA master key before being used to decrypt the transport key in the RKX token. If the transport key is an internal CCA token the key must be decrypted under the DES master key.

A variant may be applied to cleartext transport key using an exclusive or technique if there is a transport key variant specified in the trusted block s rule section that is selected by the rule ID input parameter. Next if there is a CV specified in the trusted block s rule section that is selected by the rule ID input parameter the CV is applied to the transport key. If both the variant and the CV are applied to the cleartext transport key then the variant is applied first then the CV.

In step four the rule section within the trusted block may indicate that the symmetric encrypted output should be either an RKX key token encrypted under a variant of the MAC key or a CCA key token. If the former is true the transport key is ignored. If the latter is true optionally encipher the modified or unmodified source key from step two with the modified or unmodified transport key from step three according to the rule section in the trusted block whose rule ID matches the rule ID input parameter. If a CV was applied to the transport key in step three then the output symmetric encrypted CCA token will also contain this same CV. Likewise if no CV was applied to the transport key then the output encrypted CCA token will contain a zero CV.

The key that is to be imported by the RKX service is limited to being a source key in the form of an external CCA token encrypted under a variant of a transport key and containing no CV. Three basic steps are involved in importing a preexisting key by the RKX service.

In step one the encrypted source key input parameter is converted into cleartext form. The key must be decrypted under the importer key encrypting key input parameter which first must be decrypted.

If the importer key is contained in an RKX key token the key must be decrypted under a fixed variant of the MAC key located within the trusted block s Protected Information subsection provided that the rule ID in the RKX token matches the rule ID contained in the Import Key Rule Reference subsection of the selected rule in the trusted block. The MAC key in the trusted block must be decrypted by a fixed variant of the PKA master key before being used to decrypt the importer key in the RKX token. The importer key s length is checked against the minimum and maximum allowable sizes found in the trusted block s Common Import Key Parameters subsection.

If the importer key is an internal CCA token the key must be decrypted under the DES master key. The importer key s length is checked against the minimum and maximum allowable sizes found in the trusted block s Common Import Key Parameters subsection. The importer key s control vector CV is checked for acceptability for use in the key importation phase. The trusted block s Import Key CCA Token Parameters Import Key CV Mask determines which importer key CV bits should be checked whereas the Import Key CV Limit Template contains the required values for those importer key CV bits that are to be checked. If the importer key input parameter is a key label for an internal CCA key token that is contained in key storage verify that the label is valid by comparing it to the Import Key Label Template in the trusted block s Import Key CCA Token Parameters subsection.

In step two once the source key is in cleartext form it is optionally modified. For the modification phase of step two apply the output key variant if present found in the Common Import Key Parameters subsection to the cleartext source key using an exclusive or technique if the output key variant length is nonzero.

In step three the rule section within the trusted block may indicate that the symmetric encrypted output should be an internal CCA key token. This will be the only encrypted output form allowed for an import operation. The key from step two is encrypted under the DES master key using the transport key CV specified in the trusted block s Common Import Key Parameters subsection and the output symmetric encrypted internal CCA token will also contain this same CV. If no CV was specified in the Common Import Key Parameters subsection then the output encrypted CCA token will contain a zero CV.

For asymmetric encrypted output encipher the key under the public key contained in the certificate input parameter to the RKX service. This encipherment will follow the format option according to the rule section in the trusted block whose rule ID matches the rule ID input parameter. The output option may be either RSA OAEP or PKCS1.2 format.

The trusted block is a data structure that contains several sections. In a preferred embodiment there are 5 types of sections Please note that those skilled in the art of data structure design may find a multitude of ways to design a trusted block the Trusted Public Key section the Trusted Block Information section the Trusted Block Label section the Application Defined Data section and the Rule section. Some of these sections have subsections that will be defined in the paragraphs that follow. Preceding these main sections is a Trusted Block Key Token Header that contains a token identifier a header structure version number and length of the entire trusted block structure.

The Trusted Public Key section is optional and if present only one such section is allowed in the trusted block. This section includes the public key itself including a set of flags to indicate how the public key is to be used. The section includes a section identifier to indicate Trusted RSA Public Key a structure version number length of the section RSA public key exponent length in bytes RSA public key modulus length in bits RSA public key modulus length is bytes RSA public key exponent RSA public key modulus and the flags. The flags field will indicate whether the public key contained in this section can be used in digital signature operations only key management operations only or both digital signature and key management operations.

The Trusted Block Information section is required and only one such section is allowed in the trusted block. The section includes a section identifier to indicate Trusted Block Information a structure version number length of the section a flags field one required subsection and one optional subsection. The flags indicate whether the trusted block is in an inactive state or active state. The trusted block is created in the inactive state and placed into the active state under dual control by the TBC service. A required subsection named the Protection Information subsection includes the encrypted form of an 8 byte confounder and 24 byte MAC key an 8 byte ISO 16609 CBC mode TDES MAC value and a 16 byte PKA master key verification pattern computed using MDC4. The PKA master key verification pattern is set to zero if the trusted block is external meaning that the confounder and MAC key are encrypted under a key encrypting key. The PKA master key verification pattern is nonzero when the trusted block is internal meaning that the confounder and MAC key are encrypted under a fixed variant of the PKA or asymmetric master key. An optional subsection named the Activation and Expiration Date subsection includes flags indicating whether or not the activation and expiration dates should be checked by the 4764 cryptographic adapter activation date in year month day of month format and expiration date in year month day of month format.

The Trusted Block Label section is optional and if present only one such section is allowed in the trusted block. The section includes a section identifier to indicate Trusted Block Label a structure version number length of the section and a label. In the preferred embodiment the length of the label is 64 bytes. Host software can use this label to perform access control checking on the trusted block.

The Application Defined Data section is optional and if present only one such section is allowed in the trusted block. The section includes a section identifier to indicate Application Defined Data a structure version number length of the section length of the application data and the application defined data. In a preferred embodiment the length of the application data may be between 0 and 400 bytes inclusive. The application defined data may be used to hold a public key certificate for the trusted public key contained in the Trusted Public Key section.

The Rule section is optional. Zero one or more than one rule sections may be present in the trusted block. When a trusted block has zero rule sections typically the Trusted Public Key section is present and the trusted block is used for digital signature verification purposes only. At least one rule section is required when generating a new random key or exporting a preexisting key with the RKX service. Multiple rule sections are typically used whenever the RKX service is used to create a key hierarchy. The basic concept is that RKX tokens generated by the RKX service may be used as a source key and or transport key in subsequent RKX service invocations using the same trusted block.

Each Rule section contains a section identifier a structure version number length of the section rule ID export generate flag generated key length key check algorithm identifier symmetric encrypted output key format flag asymmetric encrypted output key format flag and up to eight possible subsections. The subsections include an optional Transport Key Variant subsection an optional Transport Key Rule Reference subsection a Common Export Key Parameters subsection that is required only if the RKX service is to export a preexisting key to an output format that is either an RKX token format or CCA token format a Source Key Rule Reference subsection that is required only if the RKX service is exporting a source key that is in RKX token format an Importer Key Rule Reference subsection that is required if the importer key is an RKX token a Common Import Key Parameters subsection that is required when importing a key an optional Import Key CCA Token Parameters subsection used when the import key parameter is in the form of a CCA token and an optional Export Key CCA Token Parameters subsection. The latter subsection is used when the source key input parameter is a CCA token. The key type of the CCA token can be filtered by using the CV limit mask and template contained in the subsection.

The rule ID field of the Rule section is a value identifying the rule. The rule ID for one rule section must differ in value from rule IDs used in other rule sections within the trusted block. A particular Rule section is chosen for use by the RKX service according to the value of the Rule ID input parameter of the RKX service.

The export import generate flag in the Rule section indicates whether a new key should be generated or whether a preexisting key located in the source key input parameter should be exported or imported. If a key is to be generated the generated key length field will indicate the length in bytes of the generated key.

The key check algorithm identifier field may indicate either no action in which case no key check value is computed encrypt an 8 byte block of binary zeroes with the key or compute the MDC2 hash of the key and return the 16 byte value. For the case when the key check algorithm specifies an encryption of an 8 byte block of binary zeroes and if the key to be generated or exported is single length then the key encodes the 8 bytes of zeroes. If the key to be generated or exported is double length the key triple encodes the 8 byte value as follows the left half key encodes the 8 byte zero value this result is decoded by the right key half and that result is encoded by the left key half. If the key is single length return the leftmost 3 or 4 bytes of the result of the encryption according to the value of the key check length input parameter as follows 1 if the key is single length and if the key check length input parameter is set to 3 then 3 bytes will be returned. 2 If the key is single length and if the key check length input parameter is set to a value between 4 and 8 bytes inclusive 4 bytes will be returned. 3 If the key is longer than single length return the entire 8 byte encryption result. Under no circumstances will there be 1 2 5 6 or 7 byte encryption result returned.

The symmetric encrypted output key format flag indicates the output symmetric key formats allowed by the rule section. The output may be either an RKX token encrypted under a variant of the MAC key or a CCA token encrypted under a transport key or a CCA token encrypted under the DES master key. Note that the latter is only permitted for the import operation. The transport key input parameter to the RKX service may be an RKX token a CCA token or a label of a CCA token. A transport key variant contained in the Transport Key Variant subsection and or a control vector contained in the Common Export Key Parameters subsection may be applied to the transport key. If both are applied the variant is applied first and then the control vector.

The asymmetric encrypted output key format flag indicates the output asymmetric key formats allowed by the rule section. Either no asymmetric key should be output asymmetric output should be in PKCS 1.2 format or asymmetric output should be in RSA OAEP format. This latter format can make use of the Extra Data input parameter to the RKX service.

The Rule section s Transport Key Variant subsection is optional. If present the subsection includes a tag identifier to indicate Transport Key Variant length of the subsection a structure version number length of the variant and the variant. The variant is to be exclusive OR ed XOR into the cleartext transport key. The length of the variant must be greater than or equal to the length of the transport key that is supplied to the RKX service when this rule is used. If the variant is longer than the transport key it is truncated on the right to the length of the key before it is used. This variant is used if two conditions are satisfied the length of the variant must be nonzero and the output symmetric encrypted key format is set to indicate CCA token format. Transport keys are not used for output symmetric encrypted keys that are RKX tokens.

The Rule section s Transport Key Rule Reference subsection is optional but should be present if the transport key input parameter to the RKX service is an RKX token otherwise the RKX token transport key will not be accepted for use. If present the subsection includes a tag identifier to indicate Transport Key Rule Reference length of the subsection a structure version number and the rule ID. The rule ID identifies the rule section that must have been used to create the RKX token transport key.

The Rule section s Import Key Rule Reference subsection is optional but should be present if the importer key input parameter to the RKX service is an RKX token otherwise the RKX token import key will not be accepted for use. If present the subsection includes a tag identifier to indicate Importer Key Rule Reference length of the subsection a structure version number and the rule ID. The rule ID identifies the rule section that must have been used to create the RKX token importer key.

The Rule section s Common Export Key Parameters subsection is required for a key export request to the RKX service. The subsection includes a tag identifier to indicate Common Export Key Parameters length of the subsection a structure version number the exported key s minimum length in bytes which also applies to the source key input parameter the exported key s maximum length in bytes which also applies to the source key input parameter the output key variant length in bytes the output key variant the length of the CV in bytes and the CV. If the output key variant length is zero then the output key variant is not used. Otherwise the output key variant will be exclusive OR ed with the cleartext value of the key being exported or generated . This variant must be at least as long as the longest key that will be exported using the rule or as long as the key being generated using the rule. If the variant is longer than the key the leftmost bytes of the variant are used up to the key length. e.g. if the variant is 24 bytes and the key is 16 bytes the first 16 bytes of the variant are exclusive OR ed with the key and the remaining 8 bytes of the variant are not used. The CV within this subsection if used will be exclusive OR ed with the transport key.

The Rule section s Common Import Key Parameters subsection is required for a key import request to the RKX service. The subsection includes a tag identifier to indicate Common Import Key Parameters length of the subsection a structure version number the importer key s minimum length in bytes the importer key s maximum length in bytes the output key variant length in bytes the output key variant which is applied to the cleartext value of the key being imported the length of the CV in bytes and the CV for the key being imported. If the output key variant length is zero then the output key variant is not used. Otherwise the output key variant will be exclusive OR ed with the cleartext value of the key being imported. This variant must be at least as long as the longest key that will be imported using the rule. If the variant is longer than the key the leftmost bytes of the variant are used up to the key length. e.g. if the variant is 24 bytes and the key is 16 bytes the first 16 bytes of the variant are exclusive OR ed with the key and the remaining 8 bytes of the variant are not used. The CV within this subsection if used will be exclusive OR ed with the master key prior to encryption under the master key per CCA practice.

The rules governing the usage of the control vector CV in the Common Export Key Parameters subsection that are defined whenever the symmetric encrypted output key is to be a CCA token format are as follows 

 1 If the length of the CV in this subsection is zero and if the source key input parameter is a CCA token then the source key s CV will be used when encrypting the source key under the transport key. The source key s CV will be preserved in the symmetric encrypted output if the output is to be in the form of a CCA token. If the length of the CV in this subsection is zero and if the source key input parameter is an RKX token then no CV will be used.

 2 If the length of the CV in this subsection is nonzero then it must be greater than or equal to the length of the source key input parameter. The CV length in this subsection may be either single or double length. If the source key is single length and if the CV length in this subsection is double length and if the left half of the double length CV in this subsection is nonzero with key form bits set to single length key then the right half of this double length CV will be ignored. Note CCA service CVG Control Vector Generate will generate a CV for a single length key by building a CV of double length with the right half of the CV set to binary zeroes. This CV may be placed into this subsection when building the trusted block.

 3 If the CV length in this subsection is double length and the CV is equal to 16 bytes of binary zeroes then all CV bit definitions are ignored. Furthermore if the symmetric encrypted output key is in CCA token format the token will have a flag set to indicate that a CV is present but the CV value in the output CCA token will contain 16 bytes of binary zeroes. Furthermore if the source key input parameter is a single length key the key will not be replicated to a double length key.

 4 If the access control point for Replicate Key Allowed is active and if the source key input parameter contains a single length key in either RKX token or CCA token format and if the CV in this subsection is double length with both halves nonzero and if the CV s key form bits do not specify single length key and do not specify guaranteed unique halves then the key in the source key input parameter is replicated meaning that both halves of the double length key are identical in value.

 5 If the symmetric encrypted output key format flag is set to indicate that an RKX token will be output by the RKX service then the CV in this subsection will be ignored since a transport key is not used for output symmetric RKX tokens.

The Rule section s Source Key Rule Reference subsection is optional but must be present if the source key input parameter to the RKX service is an RKX token otherwise the RKX token source key will not be accepted for use. If present the subsection includes a tag identifier to indicate Source Key Rule Reference length of the subsection a structure version number and the rule ID. The rule ID identifies the rule section that must have been used to create the RKX token source key.

The Rule section s Export Key CCA Token Parameters subsection is optional for key export of CCA tokens. If using a CCA token as a source key input parameter its key type can be filtered by using the CV limit mask and template in this subsection. If present the subsection includes a tag identifier to indicate Export Key CCA Token Parameters length of the subsection in bytes a structure version number the export key CV limit mask length in bytes the export key CV limit mask the export key CV limit template the source key label template length in bytes and the source key label template.

If the export key CV limit mask length is zero then the export key CV limit mask and the export key CV limit template are both nonexistent. The export key CV limit mask and the export key CV limit template work together to restrict the acceptable control vectors for CCA keys to be exported. The CV limit mask indicates which CV bits should be checked. The CV limit template contains the required values for those CV bits that are to be checked. The CV for the key to be exported is first AND ed with the CV Limit Mask and then the result is compared with the CV Limit Template. If the two do not match the request is rejected with an error. The export key CV limit mask length must not be less than the Export Key Minimum Length set in the Common Export Key Parameters subsection. The export key CV limit mask length must be equal in length to the actual length of the source key input parameter to the RKX service otherwise the RKX service request will be rejected with an error.

The source key label template length in bytes must be set to either 0 or 64. No other values are allowed. If this length is zero and a source key label is present then the label will not be checked. If this length is 64 and a source key label is not present an error will be returned by the RKX service. A single asterisk wildcard in the source key label template field will not be interpreted to accept the absence of a source key label. In the preferred embodiment if the source key label template length is nonzero the label template is left justified in the source key label template field. The label template must conform to the following rules in the preferred embodiment note that other methodologies may be employed The first character cannot be between 0x00 0x1F nor can it be 0xFF the first character cannot be numeric 0x30 0x39 a label is terminated by a space on the right the only special characters permitted are 0x23 0x24 0x40 0x2E . and wildcard 0x2A the wildcard 0x2A is permitted as the first character the last character or only character once a space is encountered every character to the right up to the 64 byte length must be spaces only alphanumeric characters are allowed a z A Z 0 9 the aforementioned four special characters the wildcard and the space 0x20 .

The Rule section s Import Key CCA Token Parameters subsection is optional for key import of CCA tokens. If using a CCA token as a importer key input parameter its key type can be filtered by using the CV limit mask and template in this subsection. If present the subsection includes a tag identifier to indicate Import Key CCA Token Parameters length of the subsection in bytes a structure version number the import key CV limit mask length in bytes the import key CV limit mask the import key CV limit template the import key label template length in bytes and the import key label template.

If the import key CV limit mask length is zero then the import key CV limit mask and the import key CV limit template are both nonexistent. The import key CV limit mask and the import key CV limit template work together to restrict the acceptable control vectors for CCA importer key to be used in the importation operation. The CV limit mask indicates which CV bits should be checked. The CV limit template contains the required values for those CV bits that are to be checked. The CV for the importer is first AND ed with the CV Limit Mask and then the result is compared with the CV Limit Template. If the two do not match the request is rejected with an error. The import key CV limit mask length must not be less than the Import Key Minimum Length set in the Common Import Key Parameters subsection. The import key CV limit mask length must be equal in length to the actual length of the importer key input parameter to the RKX service otherwise the RKX service request will be rejected with an error.

The import key label template length in bytes must be set to either 0 or 64. No other values are allowed. If this length is zero and an import key label is present then the label will not be checked. If this length is 64 and an import key label is not present an error will be returned by the RKX service. A single asterisk wildcard in the import key label template field will not be interpreted to accept the absence of an import key label. In the preferred embodiment if the import key label template length is nonzero the label template is left justified in the import key label template field. The label template must conform to the following rules in the preferred embodiment note that other methodologies may be employed The first character cannot be between 0x00 0x1F nor can it be 0xFF the first character cannot be numeric 0x30 0x39 a label is terminated by a space on the right the only special characters permitted are 0x23 0x24 0x40 0x2E . and wildcard 0x2A the wildcard 0x2A is permitted as the first character the last character or only character once a space is encountered every character to the right up to the 64 byte length must be spaces only alphanumeric characters are allowed a z A Z 0 9 the aforementioned four special characters the wildcard and the space 0x20 .

First a trusted block is created under dual control in two parts. An external trusted block is created with all its sections and subsections by one individual having a role and or profile differing from a second individual s role and or profile by using the TBC service with keyword set to INACTIVE. The confounder and MAC key contained in the trusted block s Protection Information subsection under the Information section is encrypted under a variant of the IMP PKA key encrypting key located in the transport key identifier input parameter. The trusted block is termed inactive because its flag in the trusted block Information section is set to inactive . The second individual having a role and or profile differing from the first individual uses the TBC service with keyword set to ACTIVATE. The flag in the trusted block information section is set to activated making the resulting trusted block active .

Second the active trusted block is provided as an input parameter to the PKI service which in turn converts the trusted block to internal format by virtue of the fact that the MAC key contained within the trusted block will be encrypted under a fixed variant of the PKA or asymmetric master key.

Finally the internal format of the trusted block is now ready to be used as an input parameter to the RKX service.

The RKX uses a special structure to hold encrypted symmetric keys in a way that binds them to the trusted block and allows sequences of RKX calls to be bound together as if they were an atomic operation. Table 18 shows a conceptual view of the RKX key structure which is also known as an RKX key Token.

The confounder begins at offset and the key begins at offset . The key field uses 8 16 or 24 bytes to hold its value. Unused bytes in this field must be set to 0x00. The key is left justified starting at offset in the event that the key is less than 24 bytes in length. The layout of the confounder and key is as follows confounder 8 bytes key left 8 bytes key middle 8 bytes and key right 8 bytes .

A fixed randomly derived variant is exclusive OR ed with the MAC key located within the trusted block in the Trusted Block Information section before it is used to encipher or decipher the generated or exported confounder and key at offset of the RKX key token above. The random variant has the following hex value 

The MAC key within the trusted block when in internal format can be recovered by decipherment under the PKA master key. The trusted block is originally created in external form by the TBC service and then converted to internal form by the PKI service Note that this PKI service implements the Trusted Block Import Function prior to the RKX call. A fixed randomly derived variant is exclusive OR ed with the PKA master key before it is used to encipher or decipher the MAC key within the trusted block when the trusted block is in internal format. The random variant has the following hex value C9 2E BB 35 D2 AA56 D8 9C 66 E4 12 2B E7 A0 A3 B4 55 FF E4 D7 E7 F6 41

A call to the RKX service can use an RKX token and a trusted block whose rule section references the rule ID that must have been used to create the RKX token. The trusted block rule section s Rule ID can be compared with the RKX token s Rule ID for verification purposes.

In the preferred embodiment the Rule ID is an 8 byte ASCII character string with no null terminator. The acceptable characters for the Rule ID are A Z a z 0 9 hyphen and   underscore . If the Rule ID is less than eight characters long it must be left justified and padded on the right with space characters. Other implementations besides the preferred embodiment may use other characters.

The MAC value at offset guarantees that the key and the rule ID cannot be modified without detection providing integrity and binding the rule ID to the key itself. In addition the MAC will only verify with the same trusted block that created the key thus binding the key structure to that specific trusted block.

The following example of RKX usage takes the previously defined functions and illustrates how the function might be combined in an application to distribute a key to a remote device such as an ATM and keep a copy for local use. Some of the terminology used reflects typical terms used in ATM networks. The example illustrates a fairly complex real world key distribution scenario in which the following values are produced.

It takes seven steps to produce these keys using the RKX service. These steps use a combination of four rules that would be contained in a single trusted block. The rules are referred to as GENERATE1 GENERATE2 EXPORT1 EXPORT2 and EXPORT3.

The Digital Signature Verify service DSV is used to verify a digital signature by providing the digital signature the public key the hash formatting method and the hash of the data to be validated. Digital signatures may be verified using public keys that are contained in trusted blocks regardless of whether the trusted block also contains rules to govern its use when generating or exporting keys with the RKX verb API .

A keyword named TPK ONLY when provided as an input parameter to the DSV service blocks the use of regular CCA RSA key tokens and only permit the use of public keys contained in trusted blocks to execute the digital signature verification. If the keyword TPK ONLY Trusted Public Key only is present the DSV service will abort with an error if the public key supplied in the PKA public key identifier parameter is not a trusted block containing a trusted public key. This allows an application to have assurance that a sensitive signature verification operation can be limited to operation with trusted public keys.

Table 29 summarizes application programming interface used to carry out digital signature verification.

The flow charts diagrams depicted herein are just examples. There may be many variations to these charts diagrams or the steps or operations described therein without departing from the spirit of the invention. For instance the steps may be performed in a differing order or steps may be added deleted or modified. All of these variations are considered a part of the claimed invention.

As described above the embodiments of the invention may be embodied in the form of computer implemented processes and apparatuses for practicing those processes. Embodiments of the invention may also be embodied in the form of computer program code containing instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other non transitory computer readable storage medium wherein when the computer program code is loaded into and executed by a computer the computer becomes an apparatus for practicing the invention. The present invention can also be embodied in the form of computer program code for example whether stored in a non transitory storage medium loaded into and or executed by a computer or transmitted over some transmission medium such as over electrical wiring or cabling through fiber optics or via electromagnetic radiation wherein when the computer program code is loaded into and executed by a computer the computer becomes an apparatus for practicing the invention. When implemented on a general purpose microprocessor the computer program code segments configure the microprocessor to create specific logic circuits.

While the preferred embodiment to the invention has been described it will be understood that those skilled in the art both now and in the future may make various improvements and enhancements which fall within the scope of the claims which follow. These claims should be construed to maintain the proper protection for the invention first described.

