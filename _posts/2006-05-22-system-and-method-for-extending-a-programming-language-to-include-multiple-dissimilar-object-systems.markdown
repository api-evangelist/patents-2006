---

title: System and method for extending a programming language to include multiple dissimilar object systems
abstract: The illustrative embodiment of the present invention provides a method for extending a programming language to interact with foreign object systems. Through the use of an opaque interface, a requesting unit may interact with multiple foreign object systems. A single set of procedures written into the opaque interface and accessible by the requesting unit enable the requesting unit to interact with the foreign object systems. The foreign object systems register with the opaque interface. The registration process for the object systems includes the creation and registration of a defined set of functions, the format for which is provided by the opaque interface. The defined set of functions are called by the procedures in the opaque interface and execute in the object system. The results of the function execution are returned to the requesting unit thereby extending the foreign object system capabilities to the requesting unit.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07849470&OS=07849470&RS=07849470
owner: The MathWorks, Inc.
number: 07849470
owner_city: Natick
owner_country: US
publication_date: 20060522
---
This patent application is a continuation application of and claims the benefit to U.S. patent application Ser. No. 09 912 937 filed Jul. 24 2001 now U.S. Pat No. 7 051 333 entitled A System And Method For Extending A Programming Language To Include Multiple Dissimilar Object Systems .

The illustrative embodiment of the present invention relates generally to programming languages and more particularly to the extension of a programming language to accommodate multiple dissimilar object systems.

Object systems are software systems that provide the capability to define classes and to construct and utilize objects that are specific to that object system. Object systems are also known as object oriented systems and include such well known programming languages as Java from Sun Microsystems Inc. of Palo Alto Calif. C from Microsoft Corporation of Redmond Wash. and MATLAB from The Mathworks of Natick Mass. An object is a software artifact that has attributes and behaviors. Behaviors are also referred to as functions. The functions of a particular object are utilized or called via the methods contained in a class definition for the object.

Applications and other executable code utilize objects written in their own programming language. For example a MATLAB application is able to utilize MATLAB objects. Different object systems have different capabilities. It is often desirable for an application written using one programming language to be able to interact with and use objects written in a different object system. Typically an object system may include support and interoperability for objects of another object system in one of two ways. The programming language of the application may be extended so that the implementation and syntax of the programming language are revised to provide access to the other object system. Unfortunately this complicates the syntax and the implementation of the programming language. Alternatively the software application may be written to use Application Programming Interfaces APIs which create an interface through which the application may interact with objects of another object system. Unfortunately the use of an API complicates the writing of the application and binds the application to the object system at those points where the API is utilized. Both methods of extending a programming language to include support for multiple object systems result in complicated applications. Applications using the API method are bound to the foreign object system at those points where the object system is utilized.

The illustrative embodiment of the present invention provides a method of extending a programming language to include support for multiple object systems. Object systems register a defined set of functions with an opaque interface that is provided between a requesting unit and the object system. The requesting unit is an executable piece of code such as a script applet or application or source code such as an M file or P file. The defined set of functions is accessed via a set of procedures contained in the opaque interface. A procedure in the opaque interface calls the appropriate function of the object system provided during registration of the object system. The one set of procedures in the opaque interface supports multiple object systems. The requesting unit is thus able to utilize the programming language capabilities of multiple foreign object systems without knowing the implementation details of the foreign object systems.

In one embodiment of the present invention an opaque interface is created between a requesting unit and a plurality of object systems. The opaque interface includes a defined set of procedures which enable the requesting unit to interact with any of the object systems. Object systems register with the opaque interface by providing a defined set of functions to the opaque interface. The opaque interface includes a record of these registered object systems and associated sets of functions. The requesting unit interacts with the object system by calling a procedure in the opaque interface which calls a registered object system function to perform an operation.

In another embodiment of the present invention a requesting unit that is written in an array oriented programming language capable of performing array operations accesses an opaque interface created between the requesting unit and multiple foreign object systems. The opaque interface includes a defined set of procedures which enable the requesting unit to interact with any of the object systems. The requesting unit calls an array creation procedure located in the opaque interface to create an array capable of holding objects of the foreign object system. The opaque interface includes a record of registered object systems and associated sets of functions. The array creation procedure calls one of the registered functions from the object system to create the array. In one aspect of the embodiment the foreign object system is an array capable system and the array creation function creates an array of the foreign object system capable of holding objects of the foreign object system using the foreign object system. The array is returned to the requesting unit. In another aspect of the embodiment which applies when the foreign object system is not array capable the array creation function utilizes the capabilities of the programming language of the requesting unit to create an array capable of holding objects of the foreign object system. The array is returned to the requesting unit.

The illustrative embodiment of the present invention provides a method for extending a programming language to interact with foreign object systems. Through the use of an opaque interface the method of the present invention allows a requesting unit such as an application written in one programming language to interact with multiple foreign object systems. The method of the present invention does not require the altering of the syntax of the requesting unit s programming language specifically for a particular object system or the use of API s specific to particular object system. A single set of procedures written into the opaque interface enable a requesting unit to interact with multiple foreign object systems. The foreign object systems register with the opaque interface. The registration process for the object systems includes the creation and registration of a defined set of functions. The defined set of functions are called by the procedures in the opaque interface and execute in the object system. The results of the function execution are returned to the requesting unit thereby extending the foreign object system capabilities to the requesting unit.

The illustrative embodiment of the present invention creates an opaque interface between a requesting unit and foreign object systems and . All communication between the requesting unit and the foreign object systems and takes place via the opaque interface . The opaque interface includes a set of procedures which are utilized by the requesting unit to communicate with the foreign object systems and . The set of procedures has a one to one correspondence with each defined set of functions associated with an object system. Each set of functions and by extension each object system and has an identifying handle assigned during the registration process. The identifying handle assigned to an object system is returned to that object system by the opaque registration process. The requesting unit calls a procedure and the procedure calls the corresponding function for the registered object systems and . The opaque interface maintains a list of registered foreign object systems and .

The foreign object system may not necessarily be located on the same computer system as the application. depicts an alternate environment for the illustrative embodiment of the present invention. A foreign object system is located remotely from a computer system . The computer system and the foreign object system are both interfaced with a network . The computer system includes a requesting unit . The requesting unit communicates with the foreign object system over the network . The requesting unit communicates via an opaque interface also located on the computer system . The opaque interface includes a set of procedures . Also included in the opaque interface is a pointer table holding pointers to a storage location for object system handles and pointers to associated sets of registered functions. The requesting unit utilizes the set of procedures to communicate with the object systems . The registered functions for object systems not located on the same computer system as the requesting unit communicate with the object system over the network and return to the requesting unit the results of utilizing the object system on another computer system.

In another embodiment of the present invention a class name from an unidentified object class is used to identify the object system which defines that class. The class name is given as an input variable to a lookup procedure in the opaque interface . The lookup procedure calls the corresponding lookup function for registered object systems and in order to identify the object system that defines the class with that name. If any of the functions recognize the class name the class and the object system that defines it are identified.

In one embodiment of the present invention a class name from an identified object class is used to create an object of that class. The class name and the desired properties of the object to be created are given as input variables to an object creation procedure in the opaque interface . The object creation procedure calls the corresponding object creation function for the object system that defines the class with that name. If the properties specified for the desired object are valid for objects of classes with that name the object system creates the object and returns it to the object creation function. The object creation function creates an object of the requesting unit programming language and inserts the object system handle and object system object into the requesting unit programming language object as elements The requesting unit programming language object is then returned to the requesting unit .

In another embodiment of the present invention a requesting unit operates on an unidentified object by using the opaque interface . A procedure in the opaque interface that provides the desired object operation is called by the requesting unit which provides the unidentified object as an input variable. The procedure retrieves from the object the stored object system handle and uses this handle to locate the function registered with the opaque interface by the object system that created the unidentified object. The procedure then calls the appropriate registered function for the object system that created the object which in turn communicates with the object system to operate on that object.

In a different embodiment of the present invention the requesting unit that is attempting to communicate with the foreign object system is written in an array oriented programming language such as MATLAB. Requesting units written in array oriented programming languages that is programming languages which have the ability to manipulate data in array structures often need to interact with objects from foreign object systems which may or may not have array capabilities. The method of the present invention enables a requesting unit written in an array oriented programming language to take advantage of the native array capabilities of foreign object systems while also using the array capabilities of the requesting unit s programming language to manipulate foreign objects created from foreign object systems which lack array capabilities.

The process of manipulating arrays created using the illustrative embodiments of the present invention involves identifying the foreign object system and the type of indexing used in the creation of the array. depicts the sequence of steps utilized by an illustrative embodiment of the present invention in manipulating an array. The sequence begins when a requesting unit written in an array oriented programming language calls an array manipulation procedure located in the opaque interface step . The array manipulation procedure retrieves from an array the stored object system handle and indexing type step . The array manipulation procedure determines whether or not opaque indexing has been used in the creation of the array step . The presence of opaque indexing indicates that the foreign object system has array capabilities. If the array manipulation procedure indicates that opaque indexing has been used in the creation of the array the corresponding array manipulation function for the foreign object system is called. The array manipulation function uses the array manipulation capabilities of the foreign object system to perform the array manipulation instruction step . The results of the array manipulation instruction are returned to the requesting unit step . Alternatively if the array manipulation procedure determines that opaque indexing has not been used in the creation of the array step the array manipulation procedure uses the array manipulation capabilities of the requesting unit s programming language to manipulate the array step .

Those skilled in the art will recognize that requesting units may access the opaque interface in a number of different ways and still remain within the scope of the present invention. For example a requesting unit may be written in a programming language which includes syntax for accessing the opaque interface. Alternatively the requesting unit may be written in a programming language which lacks internal syntax for accessing an opaque interface and instead accesses the opaque interface through publicly defined procedure calls.

It will thus be seen that the invention attains the objects made apparent from the preceding description. Since certain changes may be made without departing from the scope of the present invention it is intended that all matter contained in the above description or shown in the accompanying drawings be interpreted as illustrative and not in a literal sense. Practitioners of the art will realize that the system configurations depicted and described herein are examples of multiple possible system configurations that fall within the scope of the current invention. Likewise the sequence of steps utilized in the illustrative flowcharts are examples and not the exclusive sequence of steps possible within the scope of the present invention.

