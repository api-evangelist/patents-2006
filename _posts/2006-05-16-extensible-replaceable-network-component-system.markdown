---

title: Extensible, replaceable network component system
abstract: An extensible and replaceable network-oriented component system provides a platform for developing network navigation components that operate on a variety of hardware and software computer systems. These navigation components include key integrating components along with components configured to deliver conventional services directed to computer networks, such as Gopher-specific and Web-specific components. Communication among these components is achieved through novel application programming interfaces (APIs) to facilitate integration with an underlying software component architecture. Such a highly-modular cooperating layered-arrangement between the network component system and the component architecture allows any existing component to be replaced, and allows new components to be added, without affecting operation of the network component system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=RE043438&OS=RE043438&RS=RE043438
owner: Apple Inc.
number: RE043438
owner_city: Cupertino
owner_country: US
publication_date: 20060516
---
U.S. patent application Ser. No. 08 435 374 titled REPLACEABLE AND EXTENSIBLE NOTEBOOK COMPONENT OF A NETWORK COMPONENT SYSTEM 

U.S. patent application Ser. No. 08 435 862 titled REPLACEABLE AND EXTENSIBLE LOG COMPONENT OF A NETWORK COMPONENT SYSTEM 

U.S. patent application Ser. No. 08 435 213 titled REPLACEABLE AND EXTENSIBLE CONNECTION DIALOG COMPONENT OF A NETWORK COMPONENT SYSTEM 

U.S. patent application Ser. No. 08 435 671 titled EMBEDDING INTERNET BROWSER BUTTONS WITHIN COMPONENTS OF A NETWORK COMPONENT SYSTEM and

U. S. patent application Ser. No. 08 435 880 titled ENCAPSULATED NETWORK ENTITY REFERENCE OF A NETWORK COMPONENT SYSTEM each of which was filed on May 5 1995 and assigned to the assignee of the present invention.

This invention relates generally to computer networks and more particularly to an architecture for building Internet specific services.

The Internet is a system of geographically distributed computer networks interconnected by computers executing networking protocols that allow users to interact and share information over the networks. Because of such wide spread information sharing the Internet has generally evolved into an open system for which developers can design software for performing specialized operations or services essentially without restriction. These services are typically implemented in accordance with a client server architecture wherein the clients e.g. personal computers or workstations are responsible for interacting with the users and the servers are computers configured to perform the services as directed by the clients.

Not surprisingly each of the services available over the Internet is generally defined by its own networking protocol. A protocol is a set of rules governing the format and meaning of messages or packets exchanged over the networks. By implementing services in accordance with the protocols computers cooperate to perform various operations or similar operations in various ways for users wishing to interact with the networks. The services typically range from browsing or searching for information having a particular data format using a particular protocol to actually acquiring information of a different format in accordance with a different protocol.

For example the file transfer protocol FTP service facilitates the transfer and sharing of files across the Internet. The Telnet service allows users to log onto computers coupled to the networks while the netnews protocol provides a bulletin board service to its subscribers. Furthermore the various data formats of the information available on the Internet include JPEG images MPEG movies and law sound files.

Coincident with the design of these services has been the development of applications for implementing the services on the client server architecture. Accordingly applications are available for users to obtain files from computers connected to the Internet using the FTP protocol. Similarly individual applications allow users to log into remote computers as though they were logging in from terminals attached to those computers using the Telnet protocol and further to view JPEG images and MPEG movies. As a result there exists a proliferation of applications directed to user activity on the Internet.

A problem with this vast collection of application specific protocols is that these applications are generally unorganized thus requiring users to plod through them in order to satisfyingly and profitably utilize the Internet. Such lack of uniformity is time consuming and disorienting to users that want to access particular types of information but are forced to use unfamiliar applications. Because of the enormous amount of different types of information available on the Internet and the variety of applications needed to access those information types the experience of using the Internet may be burdensome to these users.

An alternative to the assortment of open applications for accessing information on the Internet is a closed application system such as Prodigy CompuServe or America Online. Each of these systems provide a fill range of well organized services to their subscribers however they also impose restrictions on the services developers can offer for their systems. Such constraint of new service development may be an unreasonable alternative for many users.

Two fashionable services for accessing information over the Internet are Gopher and the World Wide Web Web . Gopher consists of a series of Internet servers that provide a list oriented interface to information available on the networks the information is displayed as menu items in a hierarchical manner. Included in the hierarchy of menus are documents which can be displayed or saved and searchable indexes which allow users to type keywords and perform searches.

Some of the menu items displayed by Gopher are links to information available on other servers located on the networks. In this case the user is presented with a list of available information documents that can be opened. The opened documents may display additional lists or they may contain various data types such as pictures or text occasionally the opened documents may transport the user to another computer on the Internet.

The other popular information service on the Internet is the Web. Instead of providing a user with a hierarchical list oriented view of information the Web provides the user with a linked hypertext view. Metaphorically the Web perceives the Internet as a vast book of pages each of which may contain pictures text sound movies or various other types of data in the form of documents. Web documents are written in HyperText Markup Language HTML and Web servers transfer HTML documents to each other through the HyperText Transfer Protocol HTTP .

The Web service is essentially a means for naming sources of information on the Internet. Armed with such a general naming convention that spans the entire network system developers are able to build information servers that potentially any user can access. Accordingly Gopher servers HTTP servers FTP servers and E mail servers have been developed for the Web. Moreover the naming convention enables users to identify resources such as directories and documents on any of these servers connected to the Internet and allow access to those resources.

As an example a user traverses the Web by following hot items of a page displayed on a graphical Web browser. These hot items are hypertext links whose presence are indicated on the page by visual cues e.g. underlined words icons or buttons. When a user follows a link usually by clicking on the cue with a mouse the browser displays the target pointed to by the link which in some cases may be another HTML document.

The Gopher and Web information services represent entirely different approaches to interacting with information on the Internet. One follows a list approach to information that looks like a telephone directory service while the other assumes a page approach analogous to a tabloid newspaper. However both of these approaches include applications for enabling users to browse information available on Internet servers. Additionally each of these applications has a unique way of viewing and accessing the information on the servers.

Netscape Navigator Netscape is an example of a monolithic Web browser application that is configured to interact with many of the previously described protocols including HTFF Gopher and FTP. When instructed to invoke an application that uses one of these protocols Netscape translates the protocol to hypertext. This translation places the user farther away from the protocol designed to run the application and in some cases actually thwarts the user s Internet experience. For example a discussion system requiring an interactive exchange between participants may be bogged down by hypertext translations.

The Gopher and Web services may further require additional applications to perform specific functions such as playing sound or viewing movies with respect to the data types contained in the documents. For example Netscape employs helper applications for executing applications having data formats it does not understand . Execution of these functions on a computer requires interruption of processing and context switching i.e. saving of state prior to invoking the appropriate application. Thus if a user operating within the Netscape application opens an MPEG movie that browsing application must be saved e.g. to disk prior to opening an appropriate MPEG application e.g. Sparkle to view the image. Such an arrangement is inefficient and rather disruptive to processing operations of the computer.

Typically a computer includes an operating system and application software which collectively control the operations of the computer. The applications are preferably task specific and independent e.g. a word processor application edits text a drawing application edits drawings and a database application interacts with information stored on a database storage unit. Although a user can move data from one application to the other such as by copying a drawing into a word processing file the independent applications must be invoked to thereafter manipulate that data.

Generally the application program presents information to a user through a window of a graphical user interface by drawing images graphics or text within the window region. The user in turn communicates with the application by pointing at graphical objects in the window with a pointer that is controlled by a hand operated pointing device such as a mouse or by pressing keys of a keyboard.

The graphical objects typically included with each window region are sizing boxes buttons and scroll bars. These objects represent user interface elements that the user can point at with the pointer or a cursor to select or manipulate. For example the user may manipulate these elements to move the windows around on the display screen and change their sizes and appearances so as to arrange the window in a convenient manner. When the elements are selected or manipulated the underlying application program is informed via the window environment that control has been appropriated by the user.

A menu bar is a further example of a user interface element that provides a list of menus available to a user. Each menu in turn provides a list of command options that can be selected merely by pointing to them with the mouse controlled pointer. That is the commands may be issued by actuating the mouse to move the pointer onto or near the command selection and pressing and quickly releasing i.e. clicking a button on the mouse.

In contrast to this typical application based computing environment a software component architecture provides a modular document based computing arrangement using tools such as viewing editors. The key to document based computing is the compound document i.e. a document composed of many different types of data sharing the same file. The types of data contained in a compound document may range from text tables and graphics to video and sound. Several editors each designed to handle a particular data type or format can work on the contents of the document at the same time unlike the application based computing environment.

Since many editors may work together on the same document the compound document is apportioned into individual modules of content for manipulation by the editors. The compound nature of the document is realized by embedding these modules within each other to create a document having a mixture of data types. The software component architecture provides the foundation for assembling documents of differing contents and the present invention is directed to a system for extending this capability to network oriented services.

Therefore it is among the objects of the present invention to simplify a user s experience on computer networks without sacrificing the flexibility afforded the user by employing existing protocols and data types available on those networks.

Another object of the invention is to provide a system for users to search and access information on the Internet without extensive understanding or knowledge of the underlying protocols and data formats needed to access that information.

Still another object of the invention is to provide a document based computing system that enables users to develop modules for services directed to information available on computer networks.

Still yet another object of the invention is to provide a platform that allows third party developers to extend a layered network component system by building new components that seamlessly interact with the system components.

Briefly the invention comprises an extensible and replaceable network oriented component system that provides a platform for developing network navigation components that operate on a variety of hardware and software computer systems. These navigation components include key integrating components along with components such as Gopher specific and Web specific components configured to deliver conventional services directed to computer networks. Communication among these components is achieved through novel application programming interfaces APIs to facilitate integration with an underlying software component architecture. Such a highly modular cooperating layered arrangement between the network component system and the component architecture allows any existing component to be replaced and allows new components to be added without affecting operation of the novel network component system.

According to one aspect of the present invention the novel system provides a network navigating service for browsing and accessing information available on the computer networks. The information may include various data types available from a variety of sources coupled to the computer networks. Upon accessing the desired information component viewing editors are provided to modify or display either visually or acoustically the contents of the data types regardless of the source of the underlying data. Additional components and component viewing editors may be created in connection with the underlying software component architecture to allow integration of different data types and protocols needed to interact with information on the Internet.

In accordance with another aspect of the invention the component system is preferably embodied as a customized framework having a set of interconnected abstract classes for defining network oriented objects. These abstract classes include CyberItem CyberStream and CyberExtension and the objects they define are used to build the novel navigation components. Interactions among these latter components and existing components of the underlying software architecture provide the basis for the extensibility and replaceability features of the network component system.

Specifically CyberItem is an object abstraction which represents a resource on a computer network but which may be further expanded to include resources available at any accessible location. CyberStream is an object abstraction representing a method for downloading information from a remote location on the computer network while CyberExtension represents additional behaviors provided to the existing components for integration with the network component system.

The novel network system captures the essence of a component based approach to browsing and retrieving network oriented information as opposed to the monolithic application based approach of prior browsing systems. Such a component based system has a number of advantages. First if a user does not like the way a particular component operates that component can be replaced with a different component provided by another developer. In contrast if a user does not like the way a monolithic application handles certain protocols the only recourse is to use another service because the user cannot modify the application to perform the protocol functions in a different manner. Clearly the replaceability feature of the novel network component system provides a flexible alternative to the user.

Second the use of components is substantially less disruptive than using helper applications in situations where a monolithic application confronts differing data types and formats. Instead of switching application layers the novel network system merely invokes the appropriate component and component viewing editor configured to operate with the data type and format. Such seamless integration among components is a significant feature of the modular cooperating architecture described herein.

A third advantage of the novel network system is directed to the cooperating relationship between the system and the underlying software component architecture. Specifically the novel network components are based on the component architecture technology to therefore ensure cooperation between all components in an integrated manner. The software component architecture is configured to operate on a plurality of computers and is preferably implemented as a software layer adjoining the operating system.

Several types of computer networks including local area networks LANs and wide area networks WANs may be employed in the system . A LAN is a limited area network that typically consists of a transmission medium such as coaxial cable or twisted pair while a WAN may be a public or private telecommunications facility that interconnects computers widely dispersed. In the illustrative embodiment the network system is the Internet system of geographically distributed computer networks.

Computers coupled to the Internet typically communicate by exchanging discrete packets of information according to predefined networking protocols. Execution of these networking protocols allow users to interact and share information across the networks. As an illustration in response to a user s request for a particular service the client sends an appropriate information packet to the server which performs the service and returns a result back to the client .

The I O circuitry in turn connects the computer to computer networks such as the Internet computer networks via a bidirectional bus and to cursor pointer control devices such as a keyboard via cable and a mouse via cable . The mouse typically contains at least one button operated by a user of the computer. A conventional display monitor having a display screen is also connected to I O circuitry via cable . A pointer cursor is displayed on windows of the screen and its position is controllable via the mouse or the keyboard as is well known. Typically the I O circuitry receives information such as control and data signals from the mouse and keyboard and provides that information to the CPU for display on the screen or as described further herein for transfer over the Internet .

It is to be understood that the I O circuits within the computers and contain the necessary hardware e.g. buffers and adapters needed to interface with the control devices the display monitor the mass storage unit and the networks. Moreover the operating system includes the necessary software drivers to control e.g. network adapters within the I O circuits when performing I O operations such as the transfer of data packets between the client and server .

The computers are preferably personal computers of the Macintosh series of computers sold by Apple Computer Inc. although the invention may also be practiced in the context of other types of computers including the IBM G series of computers sold by International Business Machines Corp. These computers have resident thereon and are controlled and coordinated by operating system software such as the Apple System 7 IBM OS2 or the Microsoft Windows operating systems.

As noted the present invention is based on a modular document computing arrangement as provided by an underlying software component architecture rather than the typical application based environment of prior computing systems. is a highly schematized diagram of the hardware and software elements of a layered component computing arrangement that includes the novel network oriented component system of the invention. At the lowest level there is the computer hardware shown as layer . Interfacing with the hardware is a conventional operating system layer that includes a window manager a graphic system a file system and network specific interfacing such as a TCP IP protocol stack and an Apple talk protocol stack.

The software component architecture is preferably implemented as a component architecture layer . Although it is shown as overlaying the operating system the component architecture layer is actually independent of the operating system and more precisely resides side by side with the operating system. This relationship allows the component architecture to exist on multiple platforms that employ different operating systems.

In accordance with the present invention a novel network oriented component layer contains the underlying technology for implementing the extensible and replaceable network component system that delivers services and facilitates development of navigation components directed to computer networks such as the Internet. As described further herein this technology includes novel application programming interfaces APIs that facilitate communication among components to ensure integration with the underlying component architecture layer . These novel APIs are preferably delivered in the form of objects in a class hierarchy.

It should be noted that the network component layer may operate with any existing system wide component architecture such as the Object Linking and Embedding OLE architecture developed by the Microsoft Corporation however in the illustrative embodiment the component architecture is preferably OpenDoc the vendor neutral open standard for compound documents developed by among others Apple Computer Inc.

Using tools such as viewing editors the component architecture layer creates a compound document composed of data having different types and formats. Each differing data type and format is contained in a fundamental unit called a computing part or more generally a component comprised of a viewing editor along with the data content. An example of the computing component may include a MacDraw component. The editor on the other hand is analogous to an application program in a conventional computer. That is the editor is a software component which provides the necessary functionality to display a component s contents and where appropriate present a user interface for modifying those contents. Additionally the editor may include menus controls and other user interface elements.

According to the invention the network component layer extends the functionality of the underlying component architecture layer by defining network oriented components . Included among these components are key integrating components such as notebook log and connection dialog components along with components configured to deliver conventional services directed to computer networks such as Gopher specific and Web specific components. Moreover the components may include FTP specific components for transfering files across the networks Telnet specific components for remotely logging onto other computers and JPEG specific and MPEG specific components for viewing image and movie data types and formats.

A feature of the invention is the ability to easily extend or replace any of the components of the layered computing arrangement with a different component to provide a user with customized network related services. As described herein this feature is made possible by the cooperating relationship between the network component layer and its underlying component architecture layer . The integrating components communicate and interact with these various components of the system in a seamlessly integrated manner to provide basic tools for navigating the Internet computer networks.

Specifically the invention features the provision of the extensible and replaceable network oriented component system which when invoked causes actions to take place that enhance the ability of a user to interact with the computer to search for and obtain information available over computer networks such as the Internet. The information is manifested to a user via a window environment such as the graphical user interface provided by System 7 or Windows that is preferably displayed on the screen as a graphical display to facilitate interactions between the user and the computer such as the client . This behavior of the system is brought about by the interaction of the network components with a series of system software routines associated with the operating system . These system routines in turn interact with the component architecture layer to create the windows and graphical user interface elements as described further herein.

The window environment is generally part of the operating system software that includes a collection of utility programs for controlling the operation of the computer . The operating system in turn interacts with the components to provide higher level functionality including a direct interface with the user. A component makes use of operating system functions by issuing a series of task commands to the operating system via the network component layer or as is typically the case through the component architecture layer . The operating system then performs the requested task. For example the component may request that a software driver of the operating system initiate transfer of a data packet over the networks or that the operating system display certain information on a window for presentation to the user.

The component component layer and operating system interact to control and coordinate the operations of the computer and their interaction is illustrated schematically by arrows and . In order to display information on a screen display the component and component layer cooperate to generate and send display commands to a window manager of the operating system . The window manager stores information directly via arrow into a screen buffer .

The window manager is a system software routine that is generally responsible for managing windows that the user views during operation of the network component system. That is it is generally the task of the window manager to keep track of the location and size of the window and window areas which must be drawn and redrawn in connection with the network component system of the present invention.

Under control of various hardware and software in the system the contents of the screen buffer are read out of the buffer and provided as indicated schematically by arrow to a display adapter . The display adapter contains hardware and software sometimes in the form of firmware which converts the information in the screen buffer to a form which can be used to drive a display screen of a monitor . The monitor is connected to display adapter by cable .

Similarly in order to transfer information as a packet over the computer networks the component and component layer cooperate to generate and send network commands such as remote procedure calls to a network specific interface of the operating system . The network interface comprises system software routines such as stub procedure software and protocol stacks that are generally responsible for formating the information into a predetermined packet format according to the specific network protocol used e.g. TCP IP or Apple talk protocol.

Specifically the network interface stores the packet directly via arrow into a network buffer . Under control of the hardware and software in the system the contents of the network buffer are provided as indicated schematically by arrow to a network adapter . The network adapter incorporates the software and hardware i.e. electrical and mechanical interchange circuits and characteristics needed to interface with the particular computer networks . The adapter is connected to the computer networks by cable .

In a preferred embodiment the invention described herein is implemented in an object oriented programming OOP language such as C using System Object Model SOM technology and OOP techniques. The C and SOM languages are well known and many articles and texts are available which describe the languages in detail. In addition C and SOM compilers are commercially available from several vendors. Accordingly for reasons of brevity the details of the C and SOM languages and the operations of their compilers will not be discussed further in detail herein.

As will be understood by those skilled in the art OOP techniques involve the definition creation use and destruction of objects . These objects are software entities comprising data elements and routines or functions which manipulate the data elements. The data and related functions are treated by the software as an entity that can be created used and deleted as if it were a single item. Together the data and functions enable objects to model virtually any real world entity in terms of its characteristics which can be represented by the data elements and its behavior which can be represented by its data manipulation functions. In this way objects can model concrete things like computers while also modeling abstract concepts like numbers or geometrical designs.

Objects are defined by creating classes which are not objects themselves but which act as templates that instruct the compiler how to construct an actual object. A class may for example specify the number and type of data variables and the steps involved in the functions which manipulate the data. An object is actually created in the program by means of a special function called a constructor which uses the corresponding class definition and additional information such as arguments provided during object creation to construct the object. Likewise objects are destroyed by a special function called a destructor . Objects may be used by manipulating their data and invoking their functions.

The principle benefits of OOP techniques arise out of three basic principles encapsulation polymorphism and inheritance. Specifically objects can be designed to hide or encapsulate all or a portion of its internal data structure and internal functions. More specifically during program design a program developer can define objects in which all or some of the data variables and all or some of the related functions are considered private or for use only by the object itself. Other data or functions can be declared public or available for use by other programs. Access to the private variables by other programs can be controlled by defining public functions for an object which access the object s private data. The public functions form a controlled and consistent interface between the private data and the outside world. Any attempt to write program code which directly accesses the private variables causes the compiler to generate an error during program compilation which error stops the compilation process and prevents the program from being run.

Polymorphism is a concept which allows objects and functions that have the same overall format but that work with different data to function differently in order to produce consistent results. Inheritance on the other hand allows program developers to easily reuse pre existing programs and to avoid creating software from scratch. The principle of inheritance allows a software developer to declare classes and the objects which are later created from them as related. Specifically classes may be designated as subclasses of other base classes. A subclass inherits and has access to all of the public functions of its base classes just as if these functions appeared in the subclass. Alternatively a subclass can override some or all of its inherited functions or may modify some or all of its inherited functions merely by defining a new function with the same form overriding or modification does not alter the function in the base class but merely modifies the use of the function in the subclass . The creation of a new subclass which has some of the functionality with selective modification of another class allows software developers to easily customize existing code to meet their particular needs.

In accordance with the present invention the component and windows are objects created by the component layer and the window manager respectively the latter of which may be an object oriented program. Interaction between a component component layer and a window manager is illustrated in greater detail in .

In general the component layer interfaces with the window manager by creating and manipulating objects. The window manager itself may be an object which is created when the operating system is started. Specifically the component layer creates window objects that cause the window manager to create associated windows on the display screen. This is shown schematically by an arrow . In addition the component layer creates individual graphic interface objects that are stored in each window object as shown schematically by arrows and . Since many graphic interface objects may be created in order to display many interface elements on the display screen the window object communicates with the window manager by means of a sequence of drawing commands issued from the window object to the window manager as illustrated by arrow .

As noted the component layer functions to embed components within one another to form a compound document having mixed data types and formats. Many different viewing editors may work together to display or modify the data contents of the document. In order to direct keystrokes and mouse events initiated by a user to the proper components and editors the component layer includes an arbitrator and a dispatcher .

The dispatcher is an object that communicates with the operating system to identify the correct viewing editor while the arbitrator is an object that informs the dispatcher as to which editor owns the stream of keystrokes or mouse events. Specifically the dispatcher receives these human interface events from the operating system as shown schematically by arrow and delivers them to the correct viewing editor via arrow . The viewing editor then modifies or displays either visually or acoustically the contents of the data types.

Although OOP offers significant improvements over other programming concepts software development still requires significant outlays of time and effort especially if no pre existing software is available for modification. Consequently a prior art approach has been to provide a developer with a set of predefined interconnected classes which create a set of objects and additional miscellaneous routines that are all directed to performing commonly encountered tasks in a particular environment. Such pre defined classes and libraries are typically called frameworks and essentially provide a pre fabricated structure for a working document.

For example a framework for a user interface might provide a set of predefined graphic interface objects which create windows scroll bars menus etc. and provide the support and default behavior for these interface objects. Since frameworks are based on object oriented techniques the predefined classes can be used as base classes and the built in default behavior can be inherited by developer defined subclasses and either modified or overridden to allow developers to extend the framework and create customized solutions in a particular area of expertise. This object oriented approach provides a major advantage over traditional programming since the programmer is not changing the original program but rather extending the capabilities of that original program. In addition developers are not blindly working through layers of code because the framework provides architectural guidance and modeling and at the same time frees the developers to supply specific actions unique to the problem domain.

There are many kinds of frameworks available depending on the level of the system involved and the kind of problem to be solved. The types of frameworks range from high level frameworks that assist in developing a user interface to lower level frameworks that provide basic system software services such as communications printing file systems support graphics etc. Commercial examples of application type frameworks include MacApp Apple Bedrock Symantec OWL Borland NeXT Step App Kit NeXT and Smalltalk 80 MVC ParcPlace .

While the framework approach utilizes all the principles of encapsulation polymorphism and inheritance in the object layer and is a substantial improvement over other programming techniques there are difficulties which arise. These difficulties are caused by the fact that it is easy for developers to reuse their own objects but it is difficult for the developers to use objects generated by other programs. Further frameworks generally consist of one or more object layers on top of a monolithic operating system and even with the flexibility of the object layer it is still often necessary to directly interact with the underlying system by means of awkward procedure calls.

In the same way that a framework provides the developer with prefab functionality for a document a system framework such as that included in the preferred embodiment can provide a prefab functionality for system level services which developers can modify or override to create customized solutions thereby avoiding the awkward procedural calls necessary with the prior art frameworks. For example consider a customizable network interface framework which can provide the foundation for browsing and accessing information over a computer network. A software developer who needed these capabilities would ordinarily have to write specific routines to provide them. To do this with a framework the developer only needs to supply the characteristic and behavior of the finished output while the framework provides the actual routines which perform the tasks.

A preferred embodiment takes the concept of frameworks and applies it throughout the entire system including the document component component layer and the operating system. For the commercial or corporate developer systems integrator or OEM this means all of the advantages that have been illustrated for a framework such as MacApp can be leveraged not only at the application level for things such as text and graphical user interfaces but also at the system level for such services as printing graphics multi media file systems and as described herein network specific operations.

Referring again to the window object and the graphic interface object are elements of a graphical user interface of a network component system having a customizable framework for greatly enhancing the ability of a user to navigate or browse through information stored on servers coupled to the network. Moreover the novel network system provides a platform for developing network navigation components for operation on a variety of hardware and software computer systems.

As noted the network components are preferably implemented as objects and communication among the network component objects is effected through novel application programming interfaces APIs . These APIs are preferably delivered in the form of objects in a class hierarchy that is extensible so that developers can create new components and editors. From an implementation viewpoint the objects can be subclassed and can inherit from base classes to build customized components allow users to see different kinds of data using different kinds of protocols or to create components that function differently from existing components.

In accordance with the invention the customized framework has a set of interconnected abstract classes for defining network oriented objects used to build these customized network components. These abstract classes include CyberItem CyberStream and CyberExtension and the objects they define are used to build the novel network components. Interactions among these latter components and existing components of the underlying software architecture provide the basis for the extensibility and replaceability features of the network component system.

In order to further understand the operations of these network component objects it may be useful to examine their construction together with the major function routines that comprise the behavior of the objects. In examining the objects it is also useful to examine the classes that are used to construct the objects as previously mentioned the classes serve as templates for the construction of objects . Thus the relation of the classes and the functions inherent in each class can be used to predict the behavior of an object once it is constructed.

For example the class GopherItem may be used to construct a network component object representing a thing in Gopher space such as a Gopher directory while the subclass WebItem is derived from CyberItem and encapsulates a network component object representing a thing in Web space e.g. a Web page. Similarly the subclass NewsGroupItem may be used to construct a network object representing a newsgroup and the class Article is configured to encapsulate a network component object representing an article resource on an Internet server.

Since each of the classes used to construct these network component objects are subclasses of the CyberItem base class each class inherits the functional operators and methods that are available from that base class. For example methods associated with the CyberItem base class for returning an icon family and a name are assumed by the subclasses to allow the network components to display CyberItem objects in a consistent manner. The methods associated with the CyberItem base class include the arguments have been omitted for simplicity 

In some instances a CyberItem object may need to spawn a CyberStream object in order to obtain the actual data for the object it represents. illustrates a simplified class hierarchy diagram of the base class CyberStream . As noted CyberStream is an abstraction that serves as an API between a component configured to display a particular data format and the method for obtaining the actual data. This allows developers to design viewing editors that can display the content of data regardless of the protocol required to obtain that data.

For example a developer may design a picture viewing editor that uses the CyberStream API to obtain data bytes describing a picture. The actual data bytes are obtained by a subclass of CyberStream configured to construct a component object that implements a particular protocol such as Gopher and HTTP. That is the CyberStream object contains the software commands necessary to create a data stream for transfering information from one object to another. According to the invention a GopherStream subclass is derived from the CyberStream base class and encapsulates a network object that implements the Gopher protocol while the class WebStream may be used to construct a network component configured to operate in accordance with the HTTP protocol.

The methods associated with the CyberStream class and which are contained in the objects constructed from the subclasses include the arguments have been omitted for simplicity 

The CyberExtension base class provides an API for accessing other network specific components such as notebooks and logs and for supporting graphical user interface elements such as menus. CyberExtension objects are used by components that display the contents of CyberItem objects. This includes browser like components such as a Gopher browser or Web browser as well as JPEG specific components which display particular types of data such as pictures. The CyberExtension objects also keep track of the CyberItem objects which these components are responsible for displaying.

In accordance with the invention the class Gopher Browser may be used to construct a Gopher like network browsing component and the class WebBrowser may be used to construct a Web like network browsing component. Likewise a TextViewer subclass may encapsulate a network component configured to display text and a Picture Viewer subclass may construct a component for displaying pictures. The methods associated with the CyberExtension class include the arguments have been omitted for simplicity 

In summary the novel network system described herein captures the essence of a component based approach to browsing and retrieving network oriented information as opposed to the monolithic application based approach of prior browsing systems. Advantages of such a component based system include the ability to easily replace and extend components because of the cooperating relationship between the novel network oriented component system and the underlying component architecture. This relationship also facilitates seamless integration and cooperation between components and component viewing editors when confronted with differing data types and formats.

While there has been shown and described an illustrative embodiment for implementing an extensible and replaceable network component system it is to be understood that various other adaptations and modifications may be made within the spirit and scope of the invention. For example additional system software routines may be used when implementing the invention in various applications. These additional system routines include dynamic link libraries DLL which are program files containing collections of window environment and networking functions designed to perform specific classes of operations. These functions are invoked as needed by the software component layer to perform the desired operations. Specifically DLLs which are generally well known may be used to interact with the component layer and window manager to provide network specific components and functions.

The foregoing description has been directed to specific embodiments of this invention. It will be apparent however that other variations and modifications may be made to the described embodiments with the attainment of some or all of their advantages. Therefore it is the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the invention.

