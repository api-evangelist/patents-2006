---

title: Network configuration backup and restore operations using continuous data protection
abstract: Systems and methods for performing replication operations on a continuous data protection system. Exemplary systems include a continuous data protection system configured to save a series of transactions of a production application, the continuous data protection system configured to allow a point in time view of the series of transactions, a replication application communicating with the continuous data protection system, the replication application configured to initiate generation of at least one pseudosnapshot of the series of transactions saved on the continuous data protection system and initiate surfacing of a copy of at least a portion of the series of transactions that were saved before the generation of the at least one pseudosnapshot, and a remote server communicating with the replication application, the remote server configured to send replication instructions to the replication application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07971091&OS=07971091&RS=07971091
owner: EMC Corporation
number: 07971091
owner_city: Hopkinton
owner_country: US
publication_date: 20060502
---
This application is related to co pending U.S. patent application Ser. No. 11 381 336 filed May 2 2006 co pending U.S. patent application Ser. No. 11 381 339 filed May 2 2006 co pending U.S. patent application Ser. No. 11 381 347 filed May 2 2006 and co pending U.S. patent application Ser. No. 11 381 345 filed May 2 2006. All of these applications are incorporated by reference herein in their entireties.

The present invention relates to systems and methods for backing up and restoring data. More particularly embodiments of the invention relate to systems and methods for performing replication operations on a continuous data protection system.

In this society where many personal and business interactions are data driven data can become easily lost or corrupted due to events such as system failures viruses power outages etc. Backing up data has become an important feature of computer networks because of this increasing dependence upon computers and networks to perform vital business and personal functions. The ability to easily accurately and reliably access data is expected by anyone accessing a computer and or network.

Backup and recovery of data is typically accomplished through the use of software that creates a backup copy of data and that recovers the data from the backup copy. As the amount of data continues to increase and as the applications for creating data become more complex backing up and recovering the data becomes more challenging. It would be advantageous to be able to restore the data at optimal points in time so that full recovery of all of the desired data is achieved without corrupting other data or processes on a computer.

In the following detailed description of the various embodiments reference is made to the accompanying drawings which form a part hereof and in which are shown by way of illustration specific embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and structural changes may be made without departing from the scope of the present invention.

The principles of the present invention relate to a system configured for creating pseudosnapshots using continuous data protection CDP techniques and then surfacing at least a portion of the CDP data as a copy to perform various replication operations. Data from a surfaced copy can be used for mirroring functions backup recovery operations e.g. disaster recovery data mining data consistency as well as other analysis.

Exemplary systems include a production application residing on a computer and a CDP engine configured for continually storing changes that occur in the production application. Each time data is written by the production application that is being protected the CDP engine is triggered and a copy of the data involved in the write operation is created and stored on the CDP engine. The CDP engine basically performs a continuous series of write operations. The CDP engine is able to retain information about every change to a selected application directory volume or the like over a long period of time and a user can later utilize the CDP engine to access stored data as it appeared at a given point in time in the past.

The present invention provides for pseudosnapshots to be created of the data stored in the CDP engine at various points in time. If the production application becomes corrupted a previous version of the application data may be recovered using one or more of the pseudosnapshots by surfacing a copy from the CDP engine and reading the data from the surfaced copy to recreate the data up until the time the pseudosnapshot was created.

As used herein the term data may include but is not limited to directories e.g. volumes file systems and the like user data system data applications services operating systems and the like that can be stored on one or more storage devices of a computer. Backing up or recovering the operating system may include backing up or recovering any of the data herein defined or understood by those of skill in the art. Data may be organized in logical directories that do not necessarily correspond to a particular storage device. The term directory can be used interchangeably with the term volume or file system to refer to any means of logically organizing data on a computer.

Even though data may exist on many different storage devices data can be organized into logical directories and subdirectories so that a user can easily locate information. In one example in Windows operating system the main directories are referred to as volumes. Volumes include for example the C drive and D drive which are typical volumes of storage that are located on a computer even though the C or D drive itself may comprise a collection of hard disks. It is not necessary for a user to know from which particular disk to obtain information. Thus directories exist to help a user navigate through data on the computer. Other directories may exist to which the computer has access through a network.

For purposes of simplicity the term production application will often be used herein to describe the source of data that is being backed up. As will be described below complex software applications benefit from the backup and restore technology disclosed herein because the data related to applications are typically subject to constant alteration. The technology disclosed herein facilitates the backup and recovery of all types of data and or data structures and can be particularly beneficial to applications whose data is continually changing. Although certain embodiments described herein will often refer to the backup of production applications the technology described herein applies equally to the backup and recovery of all types of data including directories volumes file systems servers user data system data services operating systems and the like.

Certain embodiments described herein will involve electronic communication between a client computer system hereinafter referred to as a client requesting access to a network service at a server computer system hereinafter referred to as a server . Accordingly the client sends a request to the server for particular access to its system resources wherein if the client is authorized and validated the server responds with a response message providing the desired information. Of course other messaging patterns between client and server are available as are well known in the art.

As used herein the term user may refer to a person operating the server e.g. administrator . Alternatively the term user may refer to a person at a client or management console. Users are able to initiate a request for mirroring backup and or restore although it will be appreciated that the server may have additional functionalities not available to the client or management console.

To facilitate the various replication functions contemplated by the present invention pseudosnapshots can be generated in the CDP engine by creating event markers at points in time when the data is in for example a quiescent state. Pseudosnapshots are thus earmarked datasets within the CDP engine that can later be reliably surfaced as a copy. Pseudosnapshots provide the user with greater control over how data is stored to and recovered from the CDP engine. These pseudosnapshots can be recovered at a later time by reading the data that had been stored in the CDP engine at the time of the corresponding event marker. Furthermore because pseudosnapshots consist of event markers the number of pseudosnapshots that can be earmarked in the CDP data can be numerous because the data is surfaced to copy only when needed. Thus numerous pseudosnapshots can be saved reducing the amount or resources and storage.

In contrast a conventional snapshot is a read only point in time replica or representation of the original data or contents of one or more volumes. A conventional snapshot can be used to make an actual copy on another local or remote storage device. While it would be beneficial to be able to make read only replicas of data on a CDP engine at specific points in time as is done with conventional snapshots such use can consume storage space and resources. In order to store the same number of conventional snapshots as pseudosnapshots a larger amount of storage would be required. Thus the present invention allows for a reduced amount of resources and storage to be used to store numerous pseudosnapshots if so desired. The present invention thus obviates the conflict that arises where a user would like to take advantage of the point in time nature of CDP while maintaining the stability of being able to use a snapshot that was created while crucial applications on the volume were in a consistent state. The present invention provides systems and methods for integrating the benefits of CDP with snapshot technology.

Pseudosnapshots can be beneficial for example to facilitate data recovery after the occurrence of a disaster. A disaster may include any event in which data is lost or corrupted in any way or when an operating system or other application is corrupted or damaged in any way that may require the operating system or application to be repaired or reinstalled. Data may be lost damaged or corrupted in any number of ways including a system crash burglary virus human error damage to the system and the like. A pseudosnapshot can be used to surface a copy which can then be used to create a backup copy of data on the CDP engine. The backup copy of data can be transferred to a backup storage medium such as an optical disk hard disk floppy disk tape or any other storage medium that can be physically stored in a location separate from the CDP engine.

Computer further includes at least one production application which contains and generates data that can be stored mirrored backed up recovered data mined and the like. As noted above the term production application is merely used by way of example to further illustrate the present invention because complex applications whose data is continually being altered can benefit from the technology disclosed herein. However other data on computer that may also undergo storing mirroring backing up data mining and the like which data may also include directories volumes file systems servers and other types of data described previously.

Furthermore production application may be comprised of multiple applications located on multiple computers volumes directories disks or the like. By way of example only production application may include Oracle SAP Microsoft Exchange and Microsoft SQL PeopleSoft Seibel among other flexible enterprise resource planning ERP software applications and may operate on any of various different operating systems including by way of example Windows Linux NetWare and UNIX platforms.

Computer includes at least one replication application that performs various replication functions. In one embodiment replication application can be responsible for managing mirroring operations of computer . In another embodiment replication application may be configured to perform automated backup and recover operations of computer . Replication application may further be configured for delivering data protection and management for direct attached storage DAS network attached storage NAS storage area network SAN continuous data protection CDP and other storage environments.

Although replication application may consist of backup restore software features from any number of manufacturers replication application may include various features including but not limited to advanced indexing high speed parallelism automated media management LAN free backup cluster awareness and dynamic tape drive sharing. Further replication application can also coordinate creation of pseudosnapshots to perform other functions besides mirroring and backup recovery such as but not limited to data mining data consistency analysis and the like.

System may further include a primary storage . Primary storage may be one of many storage mediums that are commonly employed in the art to store data.

Examples include but are not limited to disk storage e.g. optical disks hard disks RAIDs floppy disks zip disks and the like tape storage e.g. magnetic tape paper tape solid state memory devices e.g. flash memory EEPROM and the like as well as any other storage medium currently known in the art or developed in the future.

System also includes a continuous data protection CDP engine for recording a copy of all changes made to the data of production application . Computer further includes a data tap that serves as an interface between computer and CDP engine . Data tap consists of a software component configured to intercept all of the inputs and or outputs that are sent to and from production application . Data tap sends each of the changes occurring in production application to CDP engine . In one embodiment data tap includes a CDP application programming interface API to allow applications or services to contact CDP engine .

As production application receives or transmits input output operations which is only one example of generating data the input output data is intercepted by data tap . In one embodiment the input output data is sent from production application to CDP engine . In an alternative embodiment data can first be sent to replication application which relays the input output data to data tap . CDP engine records each input output data transaction.

CDP engine may include a write journal as well as one or more volumes . The data stored in CDP engine is initially written to write journal . As copies of the write journal are mirrored to primary storage the mirrored data is stored in volumes on CDP engine and the write journal maintains new I O transactions from the time of the last mirroring operation.

CDP engine includes an index for recording metadata containing information about the contents of the CDP engine including volumes and write journal and the location of corresponding volumes at primary storage . The CDP engine can be accessed to provide a point in time recovery of the production application or of any other data being protected by the CDP engine where the data is located in the write journal . In other words the CDP engine can be used to restore a protected application to the same state the application was at any point in time in the past using the write journal . In contrast many other replication or mirroring technologies may only allow a user to recover data at certain points in the past or the most recent copy. In one embodiment CDP engine is a Linux host which acts as an array to provide continuous data protection.

The foregoing configuration allows for the mirroring of data in primary storage and CDP engine . The replication application controls the timing and movement of data from the CDP engine to the primary storage . At certain predefined intervals the data in the write journal can be copied over to the primary storage by first creating volumes in CDP engine and then copying over the volumes to primary storage represented by volumes . For example the volumes may represent various protection sets of production application data that are saved. Thereafter the data represented by write journal is written over i.e. replaced by new data written to CDP engine from inputs outputs of production application . The new data represented by write journal is periodically copied over to primary storage at predefined intervals and hence the volumes in CDP engine will be updated with the new data as well. In one embodiment an event marker can be placed in volumes to indicate that a mirroring event has occurred.

The foregoing configuration provides both the ability to mirror data from the CDP engine to the primary storage and the ability to access point in time data at the CDP engine . This configuration provides multiple layers of redundancy to ensure that a reliable copy of data may be recovered in the case of disaster where data is lost or corrupted. If the primary storage fails the CDP engine is able to restore the data saved in volumes and write journal to primary storage at a particular point in time. Likewise if the CDP engine fails the primary storage is able to restore the data stored in volumes back to the CDP engine .

Computer includes a graphical user interface that can be configured to display the contents of CDP engine and or primary storage in an organized manner such as by displaying volumes with a hierarchical structure. Graphical user interface may also allow the user to configure CDP engine to ensure that the CDP engine has sufficient storage allocated to protect a particular volume directory or application. The graphical user interface can also be used to create pseudosnapshots and to select copies to be surfaced. Because the CDP engine may store data on disk rather than on tape storage the present invention allows files or entire volumes to be easily copied and saved back to the primary storage or to another location for performing other functions on the data such as backup recovery data mining or data consistency analysis.

In addition illustrates that data from the CDP engine can be saved and recovered on a remote storage. Computer can communicate with a server to perform data backup recovery functions. Thus in one embodiment the request for creating a pseudosnapshot or surfacing a copy can be generated by server instead of client computer . It will be appreciated that the server may have additional functionalities not available to the client computer . The server may further be configured for controlling other backup operations. For example the server may control and direct all server initiated backup operations or processes while the computer may control ad hoc backup and recover operations.

In the server has access to backup storage where one or more copies of the client s data can be stored. The backup storage can be located at the server or may be distinct and separate from the server . The data represents the data that has been backed up by the server on the backup storage . The data may include data recovered from the CDP engine in the form of a surfaced copy or may also include other data such as the data stored on computer data from primary storage or data from other sources.

The backup and recovery operations performed by the server on the data of computer are typically performed automatically in accordance with a schedule established by a user. However as described above users of the computer may initiate backup operations directly from the computer . When the server performs a backup of data in the CDP engine in one embodiment computer can ensure that the appropriate protection sets associated with the backup operation are backed up while in an application consistent state. This may be performed by quiescing the applications included in the relevant protection sets prior to performing the backup operation as previously described.

The server may also store and manage a client file index and a media volume both on the server itself and or on the backup storage . The client file index is an index of the backed up data items. The media volume is an index of the backup volumes. The client file index and the media volume are collectively referred to herein as the online indexes . The online indexes are typically stored on the backup storage after the backup operation is complete. However it will be appreciated that other operating systems may use similar data structures for maintaining the directories and backed up items in order to restore the directories and items during recovery.

As previously mentioned computer can perform both the creation of a pseudosnapshot and the surfacing of a copy. Once computer has surfaced a copy the data on the surfaced copy can be utilized similar to a traditional snapshot. For example the data on the surfaced copy can be used to perform mirroring operations. The data on the surfaced copy can be used to perform a remote backup copy of the data. The remotely backed up data can then be used to recover data that has been lost during a disaster. Further the data on the surfaced copy can be used for data analysis such as data mining data consistency checking and the like. As also shown in analysis computer and server may also communicate directly with SAN or CDP engine to obtain the surfaced copies.

As discussed below while the present invention allows data to be backed up at various points in time certain points in time can be earmarked as application consistent points in time where it is desirable that critical components of the operating system state be backed up and recovered as a consistent unit.

Exemplary Software Architecture For Performing Replication Operations on Continuous Data Protection Systems

With reference to another embodiment of a system or software architecture is illustrated in detail wherein like elements with regard to will be referred to with the same reference numeral. System illustrates an exemplary software architecture that can operate on computer and or other hardware components in further detail. Replication application may further include a snapshot manager which is a software component which may be configured to manage the creation of pseudosnapshots control the scheduling of pseudosnapshot creation and manage pseudosnapshot recoveries. The snapshot manager may also include functions for converting the high level task of generating a pseudosnapshot to application specific tasks. Replication application receives instructions to perform a replication function sends a request to snapshot manager to initiate generation of a pseudosnapshot and manages all aspects of backup and recovery for computer .

Replication application further includes one or more snapshot control managers SCM A B C that serve to facilitate communication between the snapshot manager and various storage services that may operate on different platforms with which replication application communicates. Various storage services A B are illustrated that can operate in parallel with CDP engine . That is CDP engine is one example of a storage service . By way of example and not limitation storage services A B can be but are not limited to CLARiiON Symmetrix LSI IBM and other systems. The snapshot manager will invoke the CDP engine through the CDP SCM C. SCM C provides snapshot manager with a common interface for performing replication operations while abstracting away storage architecture details similar to the other SCM A B. The snapshot manager determines which storage service A B is needed and makes calls to the appropriate SCM A B C.

Snapshot manager may include various translation modules that have knowledge of specific applications such as Exchange SQL Oracle and SAP. The translation modules can communicate with the various production applications to find out where the applications are storing data so the snapshot manager will know which SCM A B C to communicate with in which drive or directory a file may be located and the like.

Replication application communicates with a replication manager that is able to coordinate replication of data tasks and does so across a number of technologies and client environments. Exemplarily replication manager includes various modules such as a session manager that coordinates and schedules various replication sessions and other modules responsible for but not limited to discovering arrays and storage initializing of a replica creation of a replica validation of a replica restoration of a replica and deletion of a replica. Scheduling includes a series of policies and preconfigured parameters that define the frequency at which pseudosnapshots are to be created among other details.

Replication manager can further manage indexing of pseudosnapshots in case the user needs to access them again but does not have a tie in to online or offline media e.g. storage tapes. In one embodiment the index of pseudosnapshots can be maintained at the replication application . Replication application can communicate with offline media through a remote server see . Thus replication application can operate through replication manager to perform replication functions. In addition to coordinating the scheduling of the tasks from the replication application replication manager can also act as a facilitator for a number of other tasks that require any sort of duplication of data.

Further replication manager coordinates various replication tasks that may occur on one or more of the storage services simultaneously. For example if storage services A and B are CLARiiON and Symmetrix storage systems respectively and production application is a SQL and Exchange database replication manager assists in making copies of disks by communicating specifically to the storage services A B. All of the replication tasks can be done using features that come with the storage service but each storage service has its own command set syntax and idiosyncrasies. Replication manager communicates with each storage service A B so that the work of communicating with each storage service is hidden from the user.

In one embodiment replication manager functions as a detached process from replication application and snapshot manager . For example replication manager can operate as a daemon on Unix platforms or as a service on Windows operating environments. Replication manager includes a replication manager API to provide an interface for other utilities e.g. CDP SCM C among others to access the replication manager .

System also includes a data tap which intercepts all of the changes to production application and records the changes in the CDP engine as described above. By continually recording each change to production application the CDP engine always has a current version of the production application that may be accessed in the case of a disaster. The CDP engine may also be configured to retain data in a manner that the production application may be restored to any prior point in time status. Data tap can include a CDP API that the other utilities e.g. replication manager can use to communicate with the data tap .

As also shown in computer includes a configuration utility that is initiated anytime CDP engine is involved with any configuration function. The configuration utility allows a user to create modify and delete protection sets and control which volumes drives subdirectories files and the like will be included in a protection set to be protected by the CDP engine . In further detail configuration utility can be used to inform the CDP engine which volumes are to be protected and how to perform such protection operation. The configuration utility will gather information from the user with regard to the CDP engine to be used will create protection sets on the CDP engines and will persist the resulting information in configuration database to allow access by the CDP SCM C. Ultimately the CDP SCM C uses the persisted protection set data saved during configuration when interacting with the replication manager to create pseudosnapshots using the CDP technology. The CDP SCM C uses this configuration information to logon to the CDP engines via the replication manager .

The configuration utility includes a CDP configuration API and a configuration database . The CDP configuration API allows access to the configuration database . The configuration data for accessing CDP engine can be stored at a configuration database . Configuration database may also store authentication credentials for communicating with the CDP engine identification information for attached CDP engines details regarding protection sets that have been stored on the CDP engine and the like.

The CDP initialization performed by configuration utility is usually performed the first time a user desires to store data from computer or primary storage to CDP engine . Thereafter anytime replication application wants to interact with CDP engine e.g. replication application wants to work off of a copy of data held at CDP engine replication application will use configuration utility to communicate with the CDP SCM C. The configuration utility will confirm that the requested data is held at or capable of being held at CDP engine and any other information needed to access or store data at the CDP engine .

In order to prevent unauthorized access to the CDP engine the CDP configuration utility maintains the authentication credentials required to communicate with the CDP engine such as but not limited to a username and password. Essentially the configuration utility allows an administrator to initiate communication between the computer and the CDP engine . A user or utility must provide the appropriate authentication credentials prior to writing to or reading from the CDP engine . Although includes a single CDP engine the system may include two or more CDP engines each of which can be protected by unique authentication credentials. After configuring the CDP configuration utility the configuration data for accessing CDP engine can be stored at configuration database .

Finally computer may be configured such that the above benefits may be implemented in an existing system having a replication application that is preconfigured for the creation and recovery of traditional snapshots. For example as shown in replication manager API may communicate with a VSS shadow copy service via a VSS API . VSS shadow copy service is one conventional method for creating snapshots on the Windows operating systems.

In one embodiment replication application replication manager configuration utility and data tap can be configured as a single software application. In another embodiment replication application and replication manager can be obtained from existing products with an SCM C added to allow communication with CDP engine while configuration utility and data tap can be configured as a separate marketed piece as indicated by the dashed line . This embodiment may be preferable where a computer already has a replication application that is pre configured for snapshot backup and recovery but it would be desirable for the computer to have the additional benefits of CDP but without the expense of overhauling their entire snapshot replication application.

In yet another embodiment the functions of replication application and replication manager may also be combined into a single software utility if desired. In one embodiment the configuration utility illustrated in is separate from replication application . However in other embodiments the configuration utility could be part of or integrated with replication application . Finally components shown external of computer could be formed as an integral unit with computer as indicated by dashed line .

Exemplary processes using the above exemplary architecture will now be described. Initially CDP engine must be first populated with data. An exemplary method for storing an initial protection set on CDP engine is illustrated in . A protection set is a set of one or more data volumes to be protected using CDP technology. It will be appreciated that some of the stages of method can be modified performed in a different order eliminated and that additional stages may be added. Exemplarily the stages of method can be performed using the systems and depicted in realizing that other systems may be used to perform the stages thereof.

At the configuration utility is initiated and as an initial matter needs to establish communication with the replication manager . This can include the configuration utility obtaining the replication manager service port and sending the service port to the configuration database . The replication manager service port can be obtained from different storage areas depending on the operating system. For example in Windows operating systems the replication manager service port can be persisted on the registry. For UNIX systems the replication manager service port may be persisted in a persistent store identifiable by the configuration utility . Once the configuration database has the service port for the replication manager it does not need to obtain it again.

At replication manager initiates a session. In general the replication manager may be responsible for managing various operations such as but not limited to performing a protection operation on a protection set generating a pseudosnapshot and the like. For each operation a session manager module on replication manager tracks the session. A session is initiated by for example the configuration utility making an API call e.g. using replication manager API to the replication manager to start a session which initiates a session manager at the replication manager . Replication manager returns a session handle to the initiating utility such as configuration utility .

At the user selects the protection sets to save. In one embodiment protection sets can be part of or an entire volume. Configuration utility discovers volumes from for example the operating system volume enumeration service. For example the configuration utility can make API calls to the operating system. Alternatively replication manager may have an API to discover volumes attached to the computer . For example one or more volumes may be from the primary storage connected to the computer . This may be the case where primary storage has been the primary repository for storage for a production application and it is desired to add a CDP engine in order to provide mirroring capabilities. The available volumes are displayed on the graphical user interface and the user can select which volumes or files to include in a protection set to be used to populate CDP engine .

At the user selects one or more CDP engines on which to store the protection set. This can include the configuration utility making an API call using replication manager API to the replication manager which initiates a module for discovering storage. The discover storage sends a query through the data tap by making an API call using CDP API . The data tap then sends the query to any CDP engines to which the data tap is connected. The data tap returns the identification of any CDP engines to which it is connected to the replication manager . The configuration utility can then request the results from the replication manager which returns the identified CDP engine s . The identified CDP engines are then displayed on the graphical user interface and can be selected by the user for storing protection sets desired to be protected.

Note that communication between configuration utility replication manager data tap and CDP engine can follow a similar path of and using replication manager API and CDP API . In a session generally API calls include a session handle or session identifier along with the requested information.

At authentication credentials are obtained and encrypted. The user enters authentication credentials through graphical user interface using authentication methods such as but not limited to a username and password. The configuration utility sends the authentication credentials to the replication manager which encrypts the authentication credentials and sends the encrypted credentials to the configuration utility to be stored in configuration database .

At with the encrypted authentication credentials the configuration utility then proceeds to establish communication with the selected CDP engine . Configuration utility makes a logon request to the replication manager which then establishes a connection with the CDP engine .

At the configuration utility discovers the storage capabilities of the CDP engine . This can include configuration utility sending a discover target storage command to the replication manager which initiates a discover target storage module. The discover target storage module sends a request to the CDP engine to discover its storage capabilities. Once the authentication credentials are encrypted at all necessary communication with the CDP engine is securely encrypted and does not have to be done again until a session is completed. Querying the CDP engine for its storage capacity can include the CDP engine sending back the identity and state of available storage medium e.g. volume storage . Details relating to the storage capabilities or protection resources that are available on the CDP engine can be displayed on the graphical user interface .

At the user is able to select through the graphical user interface the amount of protection resources to use which can be measured against the amount of protection resources available. Such protection resources can include but are not limited to the number of days of storage available the estimated change rate and the amount of available storage. For example a user can select particular storage mediums on CDP engine the user wishes to use for protection storage.

At computer creates a protection set for specified production volumes. This can include initiating an initialize replication module in the replication manager . The initialize replication module can compare the protection set items with the identified storage medium at CDP engine to compare the amount of storage needed versus storage available to ensure that they are consistent. After checking consistency the CDP engine can return a device map that can be persisted in the configuration database that can exemplarily show where in the CDP engine the protection set is stored.

At configuration utility dismounts production application objects prior to starting protection of the selected protection set items. Dismounting the production application objects makes them unavailable to the user or to other applications to prevent data in the protection set from being changed while the protection set is being copied to the CDP engine . Prior to or during the dismounting of the production application object the configuration utility or replication application places the production application in a quiescent state.

At the configuration utility signals the initialize replica module in the replication manager to instruct the CDP engine to start the protection operation. During the protection operation the CDP engine makes a full copy of the protection set items onto CDP engine . The CDP engine may provide protection progress updates to configuration utility . When the CDP engine completes the protection operation it sends an operation complete signal to the configuration utility .

At the configuration utility may relocate production application objects. Relocating the production application objects essentially renames the application volume. The new name should be used thereafter in order for the application object to be protected using CDP technology. At configuration utility persists a protection set on the configuration database .

At the replication application receives a request to create a pseudosnapshot. The request can be made as part of a regularly scheduled creation of pseudosnapshots. Alternatively a request to create a pseudosnapshot can be made on an ad hoc basis. Replication application recognizes the request to access the CDP engine and initializes the snapshot manager and SCM C.

At SCM C makes an API call using replication manager API to replication manager to establish a session using the session manager module. When the session is established the SCM C loads and validates the format of the configuration database .

At the snapshot manager determines whether the CDP engine is capable of creating a snapshot i.e. whether the CDP engine contains the data required to generate a snapshot. To ascertain this the SCM C can simply query configuration database to determine if the appropriate data is present the appropriate data may have previously been stored as a structured text file readable by the user but also known by the configuration utility in configuration database during a protection set storage operation described in method .

At the SCM C logs onto the CDP engine . This can include the SCM C obtaining the CDP engine credentials from the configuration database to log onto the CDP engine .

At the CDP engine reports of available data on which to create a pseudosnapshot. This can include SCM C requesting replication manager to query the protection set at the CDP engine . Replication manager may use a storage discovery module to query the CDP engine for a protection set. The CDP engine returns the CDP group object to the replication manager .

At in one embodiment replication application sends an instruction to production application requesting the application to temporarily quiesce i.e. temporary enter an inactive state . By way of example upon receiving the instruction to quiesce the production application may complete any operations that must be completed to achieve consistency and or may flush its buffers and memory to a temporary storage location. In one embodiment production application will send a notification to replication application or snapshot manager upon entering a quiescent state.

At CDP engine creates a pseudosnapshot. This can include snapshot manager sending an instruction to replication manager which initiates a create replica module. The instructions may include a data structure that describes the protection set against which an event market should be created. This data structure can also be persisted in the configuration database . The event marker is a data structure that may exemplarily contain information regarding the time at which the pseudosnapshot was created i.e. the time at which the last change was made to the CDP engine prior to the placement of the event marker . Replication manager sends the instruction to CDP engine to create an event marker at the appropriate point in time. The event marker may also be generated by the replication manager CDP engine snapshot generator or the SCM C. The event marker may be stored at computer CDP engine or primary storage as well as at a remote location such as server .

The CDP engine returns the results i.e. operation successfully completed or operation failed to the replication manager which is forwarded to the snapshot manager . The snapshot is pseudo because while the pseudosnapshot data may appear to have the properties of conventional read only snapshot from the perspective of the snapshot manager when a pseudosnapshot is created no snapshot is actually created on any storage disk. Instead an event marker is created at the time the pseudosnapshot is created to allow a copy of the data to be surfaced from the CDP engine up until the point in time at which the event marker was created. If desired the surfaced copy can be formatted to have the properties of a conventional read only snapshot. CDP engine may also send a pseudosnapshot handle to replication manager including an identifier of the CDP engine on which the relevant data is stored an identifier for the protection set that is being protected and an event marker.

At the replication application may catalogue the created pseudosnapshot in an index in the same manner as would be done for creation of a conventional snapshot so that replication application has record of the pseudosnapshots that can be accessed at a later point in time. For example the index of the pseudosnapshots may be stored at the backup recovery server .

At after the event marker has been created replication manager may send a command to configuration utility and or the replication application to close the pseudosnapshot session so that the computer may resume its normal operation.

As snapshot manager requests more pseudosnapshots CDP engine generates more event markers thus resulting in an entire collection of pseudosnapshots. The event marker provides the system and user with information regarding the time at which the pseudosnapshot was created. Therefore a user viewing the data on graphical user interface may perceive a large number of potential copies that can be surfaced. However in reality the CDP engine is simply storing a series of event markers but is able to surface the data to reflect a copy of data for each pseudosnapshot. As will be described further below the data in CDP engine can thus be viewed at points in time by selecting one of these event markers and requesting a surfacing of a copy up until the point in time of the event marker which surfaced copy can be displayed and selected using graphical user interface .

Graphical user interface allows the user to manage all the event markers. Because the collection of event markers may grow quite large graphical user interface allows the user to view the event markers in an organized manner and select them quickly and efficiently. As discussed above when the graphical user interface displays the event markers i.e. pseudosnapshots to the user the data may be organized into volumes directories and files in order to correspond to the organization contained in CDP engine . In one embodiment a catalogue of event markers can also be stored on server in a media database and used for recovery purposes. Further the graphical user interface also allows the user to establish a schedule for defining the times at which the pseudosnapshots of selected protection sets will be created. However users on the clients can also initiate ad hoc creation of pseudosnapshots. Scheduling may include establishing a series of policies and preconfigured parameters that define the frequency at which pseudosnapshots are to be created among other details. The graphical user interface may communicate the information received from the user to replication application the configuration utility or replication manager as necessary.

The frequency at which a user may schedule the creation of pseudosnapshots may vary widely depending on the needs of a system and application being protected. For example an application that undergoes few changes may only require the creation of a pseudosnapshot every fifteen minutes to an hour. Conversely a user may schedule the creation of a pseudosnapshot every minute or less where the application being protected is constantly changing critical data. Furthermore because pseudosnapshots require only a minimal amount of memory in addition to the memory already required by the CDP engine the number of pseudosnapshots that can be indexed is only limited by the size of the CDP engine. Therefore millions of pseudosnapshot can potentially be stored as opposed to a traditional snapshot system which normally could only hold a few snapshots.

Where pseudosnapshots correspond to quiesced states the only limitation on how often a pseudosnapshot is created is the quiesce time of the application being protected. Because pseudosnapshots can be created in the time it takes the application to quiesce pseudosnapshots can be created much more often than actual snapshots can typically be created in a traditional snapshot system. As quiescing time becomes shorter and shorter pseudosnapshots can potentially have the same fine level of granularity that is provided by CDP systems.

After certain transactions have been recorded in the write journal an event marker may be created. depicts the creation of five pseudosnapshots i.e. after transactions A B C D and E during the time write journal is generated. Each time a command is received that a snapshot be created an event marker is generated as described above. The arrows labeled A B C D and E represent event markers which are placed at the point in time when the pseudosnapshot is created. Although the term placed is used in order to assist in the visualization of event markers the actual event markers do not have to be stored with the data in the write journal . Instead the event markers may merely include the time and date at which the pseudosnapshot is created thus identifying the last entry within the write journal before the snapshot was created. Therefore event marker A identifies the transaction A event marker B identifies the transaction B event marker C identifies the transaction C event marker D identifies the transaction D and event marker E identifies the transaction E. Alternatively the first entry immediately after an event marker is created could also be used to identify the existence of a pseudosnapshot. In this manner a large number of pseudosnapshots may be generated and stored while minimizing the amount of storage necessary to accommodate the pseudosnapshots.

Once the pseudosnapshots have been created using the techniques described above a user has the option of surfacing a copy which contains an image of any of the data actually corresponding to a pseudosnapshot. The process of surfacing a copy includes the selection of a pseudosnapshot. For example in one embodiment a user may enter a time in the past up until which the user wishes to surface a copy.

After the user selects a pseudosnapshot SCM C then surfaces a copy by reading the data stored in the CDP engine up until the point in time that the event marker corresponding to the selected pseudosnapshot was created. SCM C formats this data into a data structure that has the appearance of a traditional snapshot from the perspective of snapshot manager and replication application .

Periodically the replication application inventories the available pseudosnapshots. This can occur for example when replication application requests a recovery operation. An index containing a list of available pseudosnapshots can be located on computer the backup recovery server or other location. Alternatively replication application may query CDP engine or a remote server that may contain an index of pseudosnapshots for CDP engine .

At a user selects a protection set that should be recovered from CDP engine . The protection set may include any data from production application and data from any other application volume disk or the like that has been backed up on CDP engine . The protection set may be manually selected by the user or automatically selected in light of properties that correspond to a pseudosnapshot selected for recovery by the user.

At replication application initializes a session. As discussed above this can include the SCM C initiation a session manager module on replication manager . Afterwhich the SCM C loads and validates the format of the configuration database . At snapshot manager generates a snapshot handle including but not limited to the CDP engine name the protection set name and an event marker name. As discussed above the snapshot handle can be stored at configuration database .

At the snapshot manager identifies which CDP engine contains the protection set to be recovered. At snapshot manager obtains authentication credentials from configuration database . At SCM C logs onto the CDP engine using authentication credential obtained through the configuration database . The logon instruction is sent through the replication manager to CDP engine .

At SCM C sends a request to CDP engine to surface a copy. This can initiate a surface replica module on replication manager . The surface replica module sends an instruction to CDP engine to mount a surfaced copy of the data corresponding to the pseudosnapshot being recovered. At the CDP engine surfaces a copy by reading the data stored on CDP engine up until the event marker representing the pseudosnapshot.

After the copy is surfaced computer can use the surfaced copy to perform various replication operations. In one embodiment at SCM C sends a request to import the surfaced copy from the CDP engine . This can include initiating a storage discovery module in replication module . At the user makes a selection as to the host onto which the surfaced copy will be imported. For example a surfaced copy may be imported into primary storage hardware A and B computer or other onsite or offsite locations. Alternatively the surfaced copy may be copied into another host. At assuming that the user has selected the primary storage on which to import or copy the surfaced copy replication application performs a restoration operation on the primary storage . That is the surfaced copy is imported from CDP engine to primary storage .

At SCM C sends a request to CDP engine to submerge the surfaced copy. This can include initiating a submerge replica module on replication manager . The submerge replica module sends an instruction to CDP engine to dismount the surfaced copy. At snapshot manager closes the session between replication manager and configuration utility .

The management of the copy surfacing or recovery process may be accomplished via graphical user interface . The graphical user interface may provide the user with a visual depiction of all available pseudosnapshots that may be recovered via surfacing a copy. The interface between the CDP engine replication application and graphical user interface may create the appearance on the graphical user interface of a plurality of traditional snapshots that may be selected for recovery by the user. In other words the mechanics of creating a pseudosnapshot can be transparent to the user and the user may view the pseudosnapshots the same as other traditional snapshots. As described above when a user selects a pseudosnapshot to be recovered the replication application translates this request into a surfaced copy containing the appropriate data from the CDP engine .

A copy may be surfaced for a variety of reasons. For instance if the data for production application has recently been corrupted on primary storage the user can select a pseudosnapshot that was created prior to the time at which production application was corrupted. A copy can be surfaced up until that point and recopied to the primary storage to replace the lost data. In another example a user may want to create an additional copy of the surfaced copy for data security purposes. The copy of the surfaced copy may be saved to a separate disk tape or the like including storage at repositories primary storage and backup storage as will be further described below. The additional copy may be sent to an offsite location in preparation for an onsite disaster such as a flood fire theft etc. Another common reason to surface a copy is to recover a prior version of production application following a disaster causing corruption or loss of data on the production application . In this case the surfaced copy may be loaded onto computer to serve as a recovery for the corrupted application.

Turning back to when surfacing the copy related to a particular pseudosnapshot the surfaced copy can include the data included within the write journal from Tup to a particular event marker. Therefore surfaced copy consists of all data included in the write journal as indicated by the arrow A surfaced copy consists of all data included in the write journal as indicated by the arrow B surfaced copy consists of all data included in the write journal as indicated by the arrow C surfaced copy consists of all data included in the write journal as indicated by the arrow D and surfaced copy consists of all data included in the write journal as indicated by the arrow E.

In an alternative embodiment instead of surfacing for example all of write journal CDP engine may be able to surface only incremental changes. In this embodiment the replication application may request a browse tree from CDP engine that displays the various event markers. A user can select from the browse tree a range of time in which incremental changes are desired. Thus the process of surfacing a copy of incremental changes can be similar to surfacing an entire copy from T except instead of surfacing a copy from Tto an event marker the data that is surface is from Tto Tas selected by a user. For example as shown in an incremental backup can be formed using data up to event marker D at Tless that data up to event marker T the surfaced changes constituting pseudosnapshot F. In other embodiments a user can select Tto Tto be any other point in time that is not indicated with an event marker.

As mentioned previously many of the advantages that have traditionally been unique to either CDP technology or snapshot technology are combined into a single system in accordance with the present invention. For example the present invention benefits from CDP s very fine level of granularity because pseudosnapshots can potentially be created at the same frequency that data tap sends changes in production application to CDP engine .

Another advantage of the present CDP snapshot combination allows for recovery of data in an application consistent state. When an application is backed up at a point in time when the entire application is in a consistent state the backup is said to be in an application consistent state. One technique used to obtain an application consistent state is to quiesce the application prior to a backup operation as described previously.

On the other hand when a backup is created without quiescing the application it is likely that the backup occurred when the entire application was not in a consistent state. When an application is backed up at a point in time when the application is not in a consistent state the backup is said to be in a crash consistent state i.e. in the same state it would have been had the system crashed and recovered e.g. a loss of power at the time of the backup operation.

Because of the continuous nature of CDP backup operations data that had been saved to the CDP engine are often saved only in a crash consistent state. In a typical CDP environment the CDP makes continuous backups of an application s reads and writes but is not cognizant of the needs of the actual application. For example perhaps a disaster occurred while an application was in the process of performing a complex operation. By recovering the most recent data stored in the CDP engine the result will be the recovery of that same application as last saved midway through the complex operation. Thus the recovered application is merely in a crash consistent state. As systems grow more complex the problems associated with crash consistent backups on the CDP engine escalate. By combining CDP with snapshot technology a user can easily select data from the CDP engine that was saved while the application was in an application consistent state.

Embodiments included dedicated devices or systems that include both hardware and or software components. Embodiments within the scope of the present invention also include computer readable media having executable instructions or data fields stored thereon. Such computer readable media can be any available media which can be accessed by a general purpose or special purpose computer. By way of example and not limitation such computer readable media can comprise RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired executable instructions or data fields and which can be accessed by a general purpose or special purpose computer. Combinations of the above should also be included within the scope of computer readable media. Executable instructions comprise for example instructions and data which cause a general purpose computer special purpose computer or special purpose processing device to perform a certain function or group of functions.

Those skilled in the art will appreciate that the invention may be practiced with other computer system configurations including hand held devices multi processor systems microprocessor based or programmable customer electronics network PCs minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is therefore indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

