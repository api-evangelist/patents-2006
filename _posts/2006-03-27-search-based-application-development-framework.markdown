---

title: Search based application development framework
abstract: Methods and apparatus for creating a search framework that provides a semantic interface for searching transactional applications are disclosed. According to one aspect of the present invention, a method for enabling at least one transactional application to be searched includes creating a canonical object associated with the transactional application and indexing data associated with the transaction application. The method also includes creating an index store using information associated with the canonical object. The index store is associated with the indexed data. Finally, a semantic engine is interfaced with the index store.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07689580&OS=07689580&RS=07689580
owner: Oracle International Corporation
number: 07689580
owner_city: Redwood Shores
owner_country: US
publication_date: 20060327
---
The present invention relates generally to allowing applications to be searched. More particularly the present invention related to a framework which allows a user to search enterprise applications and to perform actions using the results of a search.

As the use of networks expands the use of enterprise applications is becoming more prevalent. An enterprise application is generally a software application hosted on a server which has the capability of simultaneously providing services to a large number of users on a network. Often an enterprise application is suitable for performing business related functions. Business related functions may include but are not limited to tracking customer information accounting and production scheduling.

Often it is desirable to search for information such as information that may be stored in or otherwise associated with enterprise applications. By way of example an enterprise application may contain within it information pertaining to the name of an account manager for a particular bank such as Bank XYZ in Australia. To answer a question or query such as Who is the account manager for Bank XYZ in Australia there are generally three ways in which answers may potentially be obtained. is a diagrammatic representation of queries that may be made for information associated with an enterprise application. When a client or a requester desires an answer to a query regarding information that may be included in an enterprise application client may formulate a natural language query . Natural language query may be made to an entity that potentially has access to information such as a human being. Entity may have access to information within enterprise application or entity may have access to information via other avenues. While natural language query may be relatively easy to formulate entity may not necessarily have access to information . Hence an answer to natural language query may not necessarily be readily obtained from entity . Client may need to query more than one entity before an answer is obtained. Therefore querying via an entity with access such as a human being is often inefficient and costly.

As enterprise application stores data such as information client may formulate a SQL or form based query that accesses information in enterprise application . In general information within enterprise application may only be accessed if a developer of enterprise application makes information available to client or other user. The formulation of SQL or form based query to access available information is difficult as information may be stored at a low level within enterprise application . The internal structure of enterprise application may be complicated and often proprietary. In many cases client may need to take training courses pertaining to enterprise application before client is able to successfully formulate SQL or form based query . Formulating SQL or form based query may require significant development efforts. Hence although information is likely to be successfully obtained based on SQL or form based query the steps associated with creating SQL or form based query may be complicated and time consuming.

A keyword based query may be entered by client into a search engine to locate information . If information is the name of an account manager for Bank XYZ in Australia keyword based query may include the words account manager XYZ and Australia. The use of search engine may be relatively fast and efficient if information is accessible. However if information turns out not to be available to search engine i.e. if information is not included in a document file or application that is accessible to search engine then client will not get satisfactory results to keyword based query . Information may also not be available if it is stored in tables that are transactional i.e. that contain descriptive fields for viewing but are not indexed for searching. Search engine is substantially only capable of presenting search results that may be read by client . In other words when results to keyword based query are presented to client the results are presented such that client may read the results but generally may not act upon the results without a significant developmental effort.

Though a natural language query and a keyword based query may be effective in enabling client to obtain information natural language query may be inefficient and natural language query and keyword based query may not always provide client with information e.g. when information is unavailable to entity and to search engine . Further as information may not be accurate if it is not obtained substantially directly from enterprise application which uses information . In general client may successfully gain access to information which is accurate via enterprise application . Such information is at least as accurate as enterprise application . However as mentioned above forming a SQL or form based query is typically complicated.

Therefore what is needed is a method and an apparatus which enables information stored in enterprise application to be readily searched. That is what is desired is a system which allows a user to search enterprise applications in a structured manner for accurate information.

The present invention relates to a searching framework that provides a semantic interface for searching transactional applications. According to one aspect of the present invention a method for enabling at least one transactional application to be searched includes

creating a canonical object associated with the transactional application and indexing data associated with the transaction application. The method also includes creating an index store using information associated with the canonical object. The index store is associated with the indexed data. Finally a semantic engine is interfaced with the index store.

In one embodiment a query is provided to the semantic engine in a first format. In such an embodiment the semantic engine translates the query from the first format into a second format associated with a search engine before the index store is accessed using the search engine.

A development framework for search based applications that enables semantic or other information to be used to search applications allows data associated with the applications to be obtained relatively efficiently. As such a development framework may utilize substantially any search engine the performance of a search engine may be leveraged. In general the development framework includes an interface which enables a search engine to access information stored within an application and provides the information to an end user who may then perform actions directly on the information. By providing a toolkit that includes the interface and a semantic engine for translating queries from natural language based string into strings that may be used to search an application a developer may create an overall system that allows applications to be searched with relatively little developmental effort.

According to another aspect of the present invention a framework for enabling at least one application to be searched includes an interface a pluggable search engine and a runtime manager. The interface translates a query from a first format to a second format and is associated with a canonical business object related to the application. The search engine searches the application in response to the query and the runtime manager interfaces the search engine with the application and causes a result of the query to be displayed. In one embodiment the application is an enterprise application a transactional application or a transactional enterprise application.

In another embodiment a designer may be used by a developer to create meta data which includes canonical objects their categories and semantic definitions for the objects. The interface may include user interface renderers an action controller and a semantic engine. In such an embodiment the runtime manager may interact with the search engine to perform crawling indexing and monitoring.

In accordance with still another aspect of the present invention a method for processing a query that requests information associated with an application involves selecting a canonical business object associated with the application and performing a search using information associated with the query. The search is associated with the canonical business object. Performing the search includes utilizing an index store containing information associated with the application. The method also includes obtaining a result of the search from the index store. In one embodiment the result is a web link that allows direct access to the application.

These and other features and advantages of the invention will become readily available apparent upon review of the following description in association with the accompanying drawings where the same or similar structures are designated with the same reference numerals.

In the description that follows the present invention will be described in reference to embodiments that test subsystems on a platform for a software application such as a database application. However embodiments of the invention are not limited to any particular architecture environment application or implementation. For example although embodiments will be described in reference to network database applications the invention may be advantageously applied to any software application. Therefore the description of the embodiments that follows is for purposes of illustration and not limitation.

Searches for unstructured or demoralized data associated with enterprise applications are generally not readily available to end users. Although some search applications are available those search applications generally require significant developmental efforts on the part of the end user before specific enterprise applications may be searched.

Augmenting existing search engines and creating a framework that incorporates existing search engines such that transactional applications may be searched by end users who provide natural language queries would allow end users to relatively efficiently search enterprise applications. In one embodiment a developer may be provided with a toolkit that may be used to develop software modules needed to interface a particular enterprise application with a framework that incorporates existing search engines. The toolkit may be used to develop a search based application that may be used to search enterprise applications or transactional applications. The use of such a toolkit allows the functionality of high performance search engines to be leveraged to search any number of enterprise or transactional applications substantially without requiring significant development efforts on the part of a developer.

Creating a junction point between search engines and enterprise applications allows information that an end user can act on to be obtained. Further searches for many different types of information may be implemented. By way of example searches for transactional records work items programming bugs and other business related elements may be performed with accuracy.

Interface is arranged to enable a query that is made via search engine to search applications for results that effectively match the query. That is interface effectively serves as a junction between search engine and applications such that search engine may search information associated with e.g. contained in applications . By way of example applications may include an application in which customer information is stored in an associated database. Interface may enable that application to be searched for the customer information using search engine and a query such as Who is the account manager for John Doe s account at Bank XYZ in California 

In general an overall framework which includes a search engine and an interface that cooperate to allow applications to be searched may be arranged to accept a query and to provide a response to the query. is a block diagram representation of a framework that allows a client to search a plurality of applications in accordance with an embodiment of the present invention. A framework generally include functionality needed to enable applications to be searched once a client enters a query into framework . Applications may be transactional applications while the query entered into framework may be implemented into a semantic application not shown associated with framework . Framework may generally translate the query e.g. from natural language into a query that is understood by a search engine not shown included in framework and then search applications based on the translated query. Any results from the translated query may be presented to client using framework .

When results of a query a presented the results may be displayed on a display screen of a computing system associated with client . In one embodiment a display screen may include a search area into which a query is entered and displayed as well as a results area in which results are displayed after a search is performed based on the query. With reference to one display window that provides a user interface for entering a query and a user interface associated with displayed results will be described in accordance with an embodiment of the present invention. A display window which may be a browser window for a web based application includes a query area and a results area . Query area includes a field into which a search string may be entered e.g. by a user using a keyboard input. It should be appreciated that field though shown as suitable for accepting text input may also be populated using other methods. Other methods include but are not limited to providing input using pull down or pop up menus.

Once a search string is entered into field an enter button may be pressed or clicked to commence a search. Pressing enter button generally begins a process of effectively invoking a framework such as framework of to search at least one application for an answer associated with the search string. When a search is completed results may be displayed in results area . Although three results are shown it should be appreciated that the number of results to a query may vary widely.

Results may come from any applications which are searched. As shown result and result are associated with an application A while results is associated with an application B. In the described embodiments results are links which may be selected and which upon selection may open a display window for the application with which a link is associated. By way of example if result is selected a display window may open that is associated with application A and displays the result of the query as located in application A. 

Results may have associated action buttons respectively. It should be appreciated however that not all results may generally have an associated action button . By selecting an action buttons an action may be taken with respect to a corresponding result . In one embodiment selecting action buttons may cause a user to be redirected to a transactional application form a semantic application with which display window is associated. For instance if a search string entered into field is for a search pertaining to a job description then results may include job openings that match the job description. In such a case action buttons may be buttons which when selected cause a user to apply for the job openings using an associated transactional application e.g. clicking on action button may cause a user to apply for a job opening associated with result

Field may accept search strings associated with different search categories. In one embodiment search categories may include a people search category a worklist search category and an integration repository search category. A people search category may allow a client or a user to search for a person such as a customer or an account manager in a business application in which customer or account manager information is stored in a database of a trading community model. For a people search results may include names of account managers. A worklist search category may allow a client or a user to search for personal action items that are assigned within an organization as a result of a business process. For a worklist search results may include a list of work or action items for the user. An integration repository search category may allow a client or a user to locate an application programming interface API that may be used to integrate various third party programs or applications. For an integration repository search results may be a list of APIs that are available to third party integrators.

To provide a framework such as framework of substantially standard search engines may be incorporated. A toolkit may be provided for use by developers to integrate applications with a framework. Within the toolkit a user interface for managing search categories may be provided along with APIs for developers to use to develop custom modules. Such a toolkit may also provide a runtime manager that allows for a search engine to be interfaced with the framework. Developers may generally use the toolkit to define search categories. is a block diagram representation of components that are associated with a search based application architecture in accordance with an embodiment of the present invention. An architecture which may be considered to be an overall search toolkit utilizes a search engine . Architecture is arranged to enable category searches to be performed. Search engine is pluggable and may be substantially any search engine with an API. In general search engine is pluggable in that search engine allows components such as crawlers an index engine a query engine and a scorer to be interfaced therein.

Crawlers are arranged to crawl a source as will be understood by those skilled in the art. Crawlers in one embodiment provide functionality to crawl substantially all applications as for example enterprise applications and or transactional applications which are to be searched. The construction of searchable documents for a canonical business object definition as well as the construction of runtime application data occurs using crawlers. A Java Database Connectivity JDBC API is a standard SQL database access interface on which crawlers may be based.

Index engine generally indexes a searchable document constructed by crawlers and is arranged to expose index stores to query engine . Index stores are locations at which indexes are stored. Settings such as security settings associated with index stores may be managed by a runtime manager . Runtime manager us also arranged to allow a search to be managed at runtime as for example such that crawling may be scheduled and index stores may be set up.

Query engine which may be considered to be a query builder is a software module that is used within architecture to perform searches in pre crawled index stores . Query engine uses metadata obtained from a metadata repository via a metadata manager to effectively convert a user entered query from a query understood by search engine into a query that is understood by index stores . Metadata repository stores substantially all meta data and also stores object categories and semantic definitions. Metadata manager manages meta data and provides a user interface for creating modifying and deleting search categories. In one embodiment business objects may be stored in metadata repository while search categories are stored by metadata manager .

Scorers provide rating functionality. While search engine generally has scoring functionality scorers may be used to augment or to alter the scoring functionality included in search engine . In general each scorer may be associated with a particular search category and may provide information relating to how much of a match a particular result is to a query.

An interface component that is in communication with search engine includes a semantic engine user interface renderers and action controllers . Semantic engine is a query builder that is arranged to translate a user query into a query that is understood by search engine . That is semantic engine may convert queries based on metadata stored in meta data repository . In one embodiment semantic engine translates a natural language based query into a search engine specific query. By way of example a user query of Who reports to Jane Doe may be translated into a search engine specific query such as mgrFirstname Jane mgrLastname Doe based on semantic information assigned to the appropriate fields.

User interface renderers are arranged to enable results of a query or a search to be displayed. That is user interface renderers allow user interface representations of a given search category to be produced and rendered to a user. One user interface renderer may be arranged to display results in a table. In general user interface renderers may be assigned to a given type of canonical business object.

Action controllers are arranged to translate user interface events displayed on a results page into a business actions defined in a service interface which in one embodiment may be service beans . That is action controllers are event managers that execute search related business logic by calling service beans . Service interface is a component or components in which business logic is effectively stored. Service interface may be registered against a search category. In one embodiment service interface include three types of services namely list services entity services and action services. Such services may be considered to be a toolkit. List services may be performed on a list of entities defined by a search category and may be identified by a list of primary keys. Entity services may be performed on a particular entity of a business object. For example results of a query may be presented to a user as a list of results that are each identified by a primary key. Business actions or action services that may be performed on these results may include but are not limited to saving a result applying for a particular job if the results are job opportunities and sorting the results based on a particular attribute. Action services are in one embodiment services that may be linked to user interface actions.

User interface templates are snippets e.g. hypertext markup language HTML snippets that enable service beans to be called by action controllers . By way of example templates may be used to customize a user interface substantially without altering code associated with user interface renderer . As will be described below with respect to user interface templates may be utilized to render a dynamic HTML DHTML user interface for search results or action forms.

Architecture may also be associated with an applications security module and an internationalization module . Applications security module interacts with toolkits e.g. service interface or service beans to effectively enforce security requirements associated with architecture . Applications security module may define security policy based on search categories and may be used by components of architecture that include but are not limited to index engine and query engine . Internationalization module may be used to allow searches to be available in a plurality of languages.

Various external components may be interfaced with architecture . As shown in an overall architecture may include a monitor or administrator that uses runtime manager to manage a search at runtime. A designer or developer may define search categories that are stored in metadata repository . Search categories encapsulate artifacts that search engine may use to perform a search and may include but are not limited to categories such as customers and tasks. A DHTML user interface provides user input to user interface renderers . A tool such as JDeveloper which is available from Oracle Corporation of Redwood Shores Calif. provides an integrated development environment for building service oriented applications. That is tool allows user interface templates and service interface to be created and modified.

As previously mentioned the ability to allow an end user to enter a natural language search string to search applications increases the usability of a search based application framework. The use of a semantic engine and semantic applications as a part of an overall interface that allows search engines to be incorporated for use with enterprise applications provides functionality to an overall architecture. Referring next to interfaces between search based applications and enterprise applications will be described in accordance with an embodiment of the present invention. A framework includes enterprise applications which in one embodiment may be transactional applications. Applications are associated with databases that store information used by applications . A service interface such as service beans contain business logic and enable applications to be accessed by a search based application that includes semantic applications and a search engine .

Semantic applications use a rendering engine a meta data store and a semantic engine which were described above with respect to to effectively invoke a search engine to search applications . Canonical objects e.g. purchase orders are generally business objects associated with a canonical business object categories that are not bound to a specific implementation. Often certain types of taxonomies may be applied to canonical objects to form canonical business object categories . Semantic applications which are indexed for searching and contain structured data may be considered to act substantially in parallel with applications . In one embodiment semantic applications effectively wrap and describe applications .

A user interface which may be a rich web user interface allows inputs such as search strings to be made to the search based application. Rich web user interface allows business actions to be readily associated with results of a query. Applications are associated with a form or HTML based user interface that allows results of a query to be displayed and acted upon.

Middleware which may be Fusion Middleware available from Oracle Corporation of Redwood Shores Calif. effectively aggregates management capabilities and deployment platforms into a technology platform. In general middleware enables substantially any development tools not shown any enterprise applications and any search engines to be integrated into framework . That is middleware allows for components of framework to be readily replaced. It should be appreciated that while Middleware may substantially any middleware which allows for different tools applications or search engines to be incorporated into framework may be used. In other words any middleware which provides a platform for designing and running enterprise software may be used in lieu of Fusion Middleware.

Applications foundation is arranged to enable applications to be built. That is applications foundation provides a foundation upon which applications such as transactional applications may be built and provides an applications context within which the applications may be run. In one embodiment applications foundation provides common services that may include but are not limited to applications security logging and error handling. Generally semantic applications may be deployed on top of applications foundation and may share the applications context provided in applications foundation .

Upon creating an appropriate service interface or bean a canonical business object is created in step . The canonical business object is arranged to define data and may be stored in a database or a repository such as a metadata repository. In step object attributes stored in the database or in a Java class are mapped to the canonical business object created in step . Actions to be taken on the canonical business object are assigned in step . Assigning actions may include assigning a search engine to the canonical business object.

From step process flow moves to step in which the canonical business object is semantically described. Then a crawler of a search engine may be used to index the canonical business object in step . Indexing the canonical business object may include taking data from the enterprise application. After the canonical business object is indexed index stores may be searched using a search engine in step . The semantic description of the canonical business object is used by the search engine to build a query. Once the index stores are searched the process of integrating an enterprise application with a framework is completed.

With reference to the processing of a search string provided by a user will be described. is a process flow diagram which illustrates one method of processing a user provided query in accordance with an embodiment of the present invention. A process of processing a user provided query begins at step in which a search category is identified. In other words a canonical business object that is stored in a metadata repository is selected for use in a search. After the canonical business object is selected a search string is entered in step . In one embodiment a semantic engine may determine based on a semantic definition that a search string is related to a given category. Hence a semantic engine may relate a particular search string to a particular canonical object. By way of example a search string that contains the string who employs John Doe may be related to canonical objects that are an employees by a semantic engine.

The search string that is entered in step is typically entered by a user. Once the search string is entered a search is performed using the search string in step . Performing a search includes effectively translating the search string into a format that is understood by a search engine then translating that format into another format that is understood by an index store from which results are to be obtained.

Results of the search are obtained from an index store in step . It should be appreciated that the results in the index store are typically obtained from an application being searched. A result is then clicked on or otherwise selected in step to provide the user with access to the application that the result is associated with. After the application is entered by the user the process of processing a user provided query is completed.

Referring next to a process of setting up and using a search based application framework that allows transactional applications to be searched will be described in accordance with an embodiment of the present invention. A process of implementing a search based application framework begins when a designer or developer inspects applications e.g. transactional applications. Applications may be inspected to determine what information in applications are to be available for searching. Designer after inspecting applications creates or annotates canonical business object categories that are to be available for searching. Creating canonical business object categories generally entails creating canonical business objects.

Once canonical business objects are created crawlers which may be part of a pluggable search engine indexes applications to enable applications to be searched. This crawling process enables crawlers to use search artifacts of canonical business objects to create indexes for given canonical business object categories . These indexes are then stored by crawlers in index store .

When a user wishes to search applications the user may use a user interface of framework to enter a query e.g. a natural language query. A semantic engine searches index store using canonical business object categories . In one embodiment semantic engine may effectively indirectly search index store through a search engine not shown . Semantic engine may redirect the query to applications when appropriate indexes are found using index store . It should be appreciated that before the query is redirected to applications the query is typically converted first to a format that is understood by a search engine and then to a format that is understood by applications .

A search based application development framework may generally be implemented with respect to a database management system. One suitable database management system architecture is the three tiered architecture that is shown in . At the core of a database management system is a central storage that stores a database or a repository. Database is typically stored on one or more hard drives and is typically part of a larger computer system. The information may be stored on database in a variety of formats with relational database management systems relying heavily on tables to store the information. Database servers are instances of a program that interacts with database . Each instance of a database server may among other features independently query database and store information therein.

In some instances database servers may not include user friendly interfaces such as graphical user interfaces. Accordingly at least one application server may provide the user interfaces to database servers . By way of example application server may be a web application server on the Internet or any other network. Application server may provide user friendly mechanisms for accessing database through database servers . A web browser may be utilized to access application server .

A fixed storage may store computer programs and data. Fixed storage is typically persistent and provides more storage when compared to memory . A common fixed storage for databases is multiple hard drives although it should be understood that fixed storage maybe be any suitable component. A removable storage provides mobility to computer programs and or data that are stored thereon. Removable storage may include but is not limited to floppy disks tape CD ROM DVD flash memory devices and the like.

Memory fixed and removable storage provide examples of computer readable storage media that can be utilized to store and retrieve computer programs incorporating computer codes or code devices that implement the invention data for use with the invention and the like. An input device allows a user to interface with computer system . Input device may be a keyboard a mouse buttons dials or any other suitable input mechanism. An output device generally allows system to provide output to the user. Output device may include but is not limited to devices such as monitors display screens LEDs printers or substantially any other output mechanism.

A network interface typically allows system to interface with a network to which it is connected. The system bus architecture of computer system is represented by arrows . The components shown in may be found in many computer systems. However components may be added deleted and combined without departing from the spirit or the scope of the present invention. For example fixed storage may be a file server that is accessed through a network connection. Thus is for illustration purposes and not limitation.

Although only a few embodiments of the present invention have been described it should be understood that the present invention may be embodied in many other specific forms without departing from the spirit or the scope of the present invention. By way of example a search engine has been described as being pluggable with respect to an architecture of the present invention. However a search engine may instead be a fixed or integrated part of the architecture.

While enterprise applications that are transactional applications have generally been described as suitable for being searched using a search based application framework applications that are searched are not limited to being transactional enterprise applications. For example an enterprise application that is not transactional application or a transactional application that is not an enterprise application may be searched.

Filters may be included in a framework to enable more results obtained in response to a search or a query to be further searched. For instance if an initial query searched for open job positions in the field of database development a filter may be applied to remove all job positions that are associated with a particular company or to specify a particular base salary.

Components of a framework have generally been described as being software modules or modules created using computer code devices. In one embodiment components of a framework may be implemented as a combination of hardware modules and software modules or even as substantially only hardware modules without departing from the spirit or the scope of the present invention.

A service interface such as a service bean has generally been described as being included in an architecture that supports a search based application framework. As described above service beans represent actions that are to be applied on an object. Other mechanisms which define and provide services may be implemented in lieu of service beans. Alternatively it should be appreciated that for an embodiment in which actions using an application from which a search result is obtained are not desired service beans may not necessarily be included in a search based application framework.

Searches may be saved such that once a user performs a search using a search based application the text entered to perform the search is saved for future access. Similarly the results of a search may be saved to enable the user to easily access the search results without performing another search.

In general the steps associated with methods of the present invention may vary widely. Steps may be added removed altered combined and reordered without departing from the spirit or the scope of the present invention. By way of example though clicking on a result to enter an application that was searched has been described as an action that may occur when responses to a query are obtained actions that are taken on a set of responses may vary widely. In one embodiment custom actions assigned to a corresponding canonical business object. Custom actions may include but are not limited to actions for a semantic application or a transition to transactional applications upon which a semantic application is bound. Therefore the present examples are to be considered as illustrative and not restrictive and the invention is not to be limited to the details given herein but may be modified within the scope of the appended claims.

