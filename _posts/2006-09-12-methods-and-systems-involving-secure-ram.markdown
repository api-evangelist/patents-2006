---

title: Methods and systems involving secure RAM
abstract: A system is provided that includes a processor and a random access memory (RAM) coupled to the processor. The RAM is divided into public RAM and secure RAM. The system also includes a system memory coupled to the processor, wherein the system memory stores RAM resize instructions that, when executed, enable the public RAM and the secure RAM to be dynamically resized. The system memory may also store save/restore secure RAM instructions that, when executed, perform a save operation that saves the secure RAM to non-volatile memory and a restore operation that restores the secure RAM from the non-volatile memory. The system memory may also store arbitration instructions that, when executed, enable a cryptographic hardware accelerator (HWA) to be shared by a secure application and a public application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08959311&OS=08959311&RS=08959311
owner: Texas Instruments Incorporated
number: 08959311
owner_city: Dallas
owner_country: US
publication_date: 20060912
---
This application claims priority to EP Patent Application No. 06291368.6 entitled Methods and Systems Involving Secure RAM filed Aug. 25 2006. The above referenced application is incorporated herein by reference.

Mobile electronic devices such as personal digital assistants PDAs and digital cellular telephones are increasingly used for electronic commerce e commerce and mobile commerce m commerce . Programs that execute on the mobile devices to implement e commerce and or m commerce functionality may need to operate in a secure mode to reduce the likelihood of attacks by malicious programs e.g. virus programs and to protect sensitive data.

For security reasons at least some processors provide two levels of operating privilege a first level of privilege for user programs and a higher level of privilege for use by the operating system. However the higher level of privilege may or may not provide adequate security for m commerce and e commerce given that this higher level relies on proper operation of operating systems with highly publicized vulnerabilities. In order to address security concerns some mobile equipment manufacturers implement yet another third level of privilege or secure mode that places less reliance on corruptible operating system programs and more reliance on hardware based monitoring and control of the secure mode. An example of one such system may be found in U.S. Patent Publication No. 2003 0140245 entitled Secure Mode for Processors Supporting MMU and Interrupts. 

In addition to this secure mode various hardware implemented security firewalls and other security monitoring components have been added to the processing systems used in mobile electronic devices to further reduce the vulnerability to attacks. Examples of these security improvements may be found in U.S. patent application Ser. No. 10 961 756 entitled System and Method for Secure Mode for Processors and Memories on Multiple Semiconductor Dies Within a Single Semiconductor Package Ser. No. 10 961 755 entitled Method and System of Ensuring Integrity of a Secure Mode Entry Sequence Ser. No. 10 961 344 entitled System and Method of Identifying and Preventing Security Violations Within a Computing System Ser. No. 10 961 748 entitled Method and System of Verifying Proper Execution of a Secure Mode Entry Sequence and European Patent Application EP 04292405.0 entitled Method and System for Detecting a Security Violation Using an Error Correction Code all of which are hereby incorporated by reference

In at least some embodiments a system comprises a processor and a random access memory RAM coupled to the processor. The RAM is divided into public RAM and secure RAM. The system further comprises a non volatile memory coupled to the processor wherein the non volatile memory stores RAM resize instructions that when executed enable the public RAM and the secure RAM to be dynamically resized.

In at least some embodiments a system comprises a processor and a random access memory RAM coupled to the processor the RAM having a secure RAM portion. The system further comprises a system memory coupled to the processor. The system memory stores save restore secure RAM instructions that when executed perform a save operation that saves the secure RAM portion to non volatile memory and a restore operation that restores the secure RAM from the non volatile memory.

In at least some embodiments a system comprises a processor and a cryptographic hardware accelerator HWA coupled to the processor. The system further comprises a system memory coupled to the processor. The system memory stores HWA arbitration instructions that when executed enable the cryptographic HWA to be shared by a secure application and a public application.

Certain terms are used throughout the following description and claims to refer to particular system components. As one skilled in the art will appreciate companies may refer to a component by different names. This document does not intend to distinguish between components that differ in name but not function. In the following discussion and in the claims the terms including and comprising are used in an open ended fashion and thus should be interpreted to mean including but not limited to . . . . Also the term couple or couples is intended to mean either an indirect direct optical or wireless electrical connection. Thus if a first device couples to a second device that connection may be through a direct electrical connection through an indirect electrical connection via other devices and connections through an optical electrical connection or through a wireless electrical connection.

The following discussion is directed to various embodiments of the invention. Although one or more of these embodiments may be preferred the embodiments disclosed should not be interpreted or otherwise used as limiting the scope of the disclosure including the claims. In addition one skilled in the art will understand that the following description has broad application and the discussion of any embodiment is meant only to be exemplary of that embodiment and not intended to intimate that the scope of the disclosure including the claims is limited to that embodiment.

Embodiments of the inventions are operable in a secure mode and in a mode outside the secure mode referred to herein as a public mode . To support the public mode and the secure mode memory such as Random Access Memory RAM is configured to store data and instructions associated with each mode. If the amount of RAM needed to support the public mode and the secure mode changes over time embodiments are able to dynamically re configure a static amount of RAM. For example during a boot process a public mode portion of the RAM can be maximized and a secure mode portion of the RAM can be minimized. Later during run time the public mode portion of the RAM can be minimized and the secure mode portion of the RAM can be maximized. Other configurations are also possible.

In at least some embodiments a device can be powered off while operating in the secure mode. Before powering off the device selectively performs a save operation that saves the content of the secure mode portion of the RAM without changing any of the content. Upon powering up the device selectively performs a restore operation that restores the content of the secure mode portion of the RAM without changing any of the content. In this manner the device can be returned to the same state as before being powered off. In some embodiments the save operation and the restore operation involve cryptography to protect the integrity and or the privacy of the content of the secure mode portion of the RAM.

In at least some embodiments at least one cryptographic hardware accelerator HWA is available to public mode applications and secure mode applications. If the cryptographic HWA is shared between a public mode application and a secure mode application security operations are performed upon entering and exiting the secure mode to protect the integrity and or the privacy of secure mode data. For example upon exiting the secure mode the content of HWA registers can be saved in the secure mode portion of the RAM. The HWA registers are then cleaned to avoid sensitive data leakage and are made available to public mode applications. Upon entering the secure mode the HWA registers are made private to secure mode applications i.e. the HWA registers are not accessible to public mode applications . The HWA register content is then restored for the secure mode by loading HWA register content from the secure mode portion of the RAM. The HWA accelerator could also be shared between two secure applications by storing and restoring HWA register content in the secure mode portion of the RAM.

In at least some embodiments the system also comprises a Direct Memory Access DMA engine coupled to the processor and the interconnect . The DMA engine enables components of the system to communicate with each other directly via DMA channels. For example DMA channels can be established between any of the memory the HWA and the RAM .

In the memory comprises public secure RAM resize instructions save restore secure RAM instructions and HWA arbitration instructions . When executed the public secure RAM resize instructions enable the public mode portion and the secure mode portion of the RAM to be resized. For example if the RAM has a size of 64 KB the initial configuration may be 48 KB for the public mode portion and 16 KB for the secure mode portion . As needed the configuration of the RAM can be changed to 32 KB for the public mode portion and 32 KB for the secure mode portion or other configurations as well. In at least some embodiments public secure RAM resize instructions are called by an operating system OS or other application through a dedicated Application Programming Interface API .

To re configure the RAM several resize functions such as a firewall adjustment function a memory cleaning function and an organize memory function are performed. In at least some embodiments the firewall adjustment function configures a firewall or other hardware to change the separation between the public mode portion and the secure mode portion of the RAM . The memory cleaning function cleans memory transferred from the secure mode portion to the public mode portion to ensure that no sensitive confidential data previously stored in the transferred portion is accessible. The organize memory function enables heaps memory variables or other memory objects to be re organized when the RAM is re configured. The organize memory function also organizes memory objects such as stacks and global variables such that dynamic reconfiguration of the RAM is possible.

In at least some embodiments the public secure RAM resize instructions determine if resizing the portions of RAM is feasible before performing the resize functions. For example the public secure RAM resize instructions may determine the amount of the public mode portion and or the amount of the secure mode portion which is currently in use and determine the feasibility of resizing the RAM. Thus if a request to increase the secure mode portion is received but more than a threshold amount of the public mode portion is in use then the request to increase the secure mode portion can be refused or the resize can be adjusted to an acceptable amount. Alternatively if a request to increase the secure mode portion is received and less than a threshold amount of the public mode portion is in use then the request to increase the secure mode portion can be accepted or the resize can be adjusted to an acceptable amount. In similar manner determining an amount of the secure mode portion which is in use and responding accordingly to requests to increase the public mode portion is possible.

In at least some embodiments the desired amounts of public mode RAM versus secure mode RAM vary inversely over time i.e. the need for public mode RAM is high when the need for secure mode RAM is low or vice versa . For example during a boot process of the system it may be desirable to maximize the public mode portion to complete the boot process faster and to minimize the secure mode portion no secure applications are running on the system yet . Later during run time the public mode portion can be minimized and the secure mode portion can be maximized. As an example if the RAM has a size of 64 KB the RAM configuration during a boot process may be set as 48 KB for the public mode portion and 16 KB for the secure mode portion . Later during run time the RAM configuration may be set as 16 KB for the public mode portion and 48 KB for the secure mode portion . Without dynamically resizing the 64 KB of RAM as described above 96 KB 48 KB 48 KB of static RAM would be needed to provide an equivalent amount of public mode RAM and secure mode RAM over time. The extra 32 KB of RAM 96 KB compared to 64 KB undesirably increases expense space requirements and power consumption.

In at least some embodiments the save restore secure RAM instructions enable the secure mode portion of the RAM to be saved and restored without changing the content of the secure mode portion . The save restore secure RAM instructions may be executed for example before or after the system enters an Off Mode . In either case the save operation occurs before the system is powered off. During the save operation the content of the secure mode portion is stored in a non volatile memory such as the memory . Thus the content of the secure mode portion of the RAM is maintained while the system is powered off. Preferably the save and restore operations are performed without affecting the content of the secure made portion . For example even dynamic content such as variables and stacks can be saved by the save operation. The save and restore operations should at least enable the secure mode state of the system prior to powering off to be restored.

After the save operation has been performed the system is able to perform the restore operation once the system enters a Wake Up Mode . In other words when the system wakes up again or is powered on again the restore operation restores the state of the secure mode that existed before the system was powered off. During the restore operation the content of the secure mode portion is transferred from a non volatile memory e.g. the memory to the secure mode portion of the RAM . In at least some embodiments the save restore secure RAM instructions are called by an operating system OS or other application through a dedicated Application Programming Interface API . Additionally or alternatively the save restore secure RAM instructions are called in response to user input. For example before the system is powered off a user may choose whether to save restore the same secure mode state or to power off the system such that a system reboot is performed. In some embodiments performing the save operation automatically causes the restore operation to be performed when the system is powered on again. Alternatively even if the save operation is performed the system could enable a user to choose whether to restore the saved secure mode state or to reboot the system when the system is powered on again. However if the save operation is not performed the restore operation cannot be performed upon powering on the system .

If desired cryptography e.g. hashing enciphering or other cryptographic functions can be implemented to protect the integrity and or the privacy of the data stored in the secure mode portion . Also in at least some embodiments the save and restore operations are accelerated using the DMA engine . For example a first DMA channel can be established between the RAM and the HWA . Also a second DMA channel can be established between the HWA and the memory . Once the first and second DMA channels have been established data can be securely transferred between the RAM and the memory via the HWA during the save and restore operations. By appropriately using the HWA cryptographic functions and data verification e.g. byte checks are accelerated during the save and restore operations.

The HWA arbitration instructions enable the HWA to be shared by secure applications i.e. applications that operate in the device s secure mode and public applications i.e. applications that operate in the device s public mode . If the HWA is shared between a public mode application and a secure mode application security operations are performed upon entering and exiting the secure mode to protect the integrity and or the privacy of secure mode data. For example upon exiting the secure mode the content of HWA registers can be saved in the secure mode portion of the RAM . The HWA registers are then cleaned to avoid sensitive data leakage and are made available to the public mode application. Upon entering the secure mode the HWA registers are made private to the secure mode application i.e. the HWA registers are not accessible to the public mode application . The HWA register content is then restored for operations in the secure mode by loading HWA register content from the secure mode portion of the RAM . The HWA accelerator could also be shared between two secure applications by storing and restoring HWA register content for each of the secure applications in the secure mode portion of the RAM .

If another secure application referred to herein as SECURE APP2 requests access to the HWA this other secure application is able to run in the secure mode block . In this manner two or more secure applications are able to share the HWA where the HWA register data corresponding to the different secure application can be stored and restored as needed. If a public application requests access to the HWA an interruption or exit causes the HWA register content to be saved in the secure mode portion of the RAM and the HWA register content is cleaned block . The HWA registers are than enabled to operate in the public mode block . Finally the HWA arbitration process switches from secure mode block to the public mode block . The HWA arbitration process enables public applications and secure applications to share the HWA as needed. In some embodiments secure applications have higher priority than public applications to utilize the HWA . In other words a public application would be unable to utilize the HWA unless no secure applications are utilizing the HWA . Other techniques for HWA arbitration are also possible.

As shown in the system includes a multiprocessing unit MPU subsystem having a MPU coupled to an interrupt handler . The MPU includes a processor core that executes programs and a core security controller CSC which aids the MPU in entering a secure mode for execution of secure applications on the core . The core may be any processor suitable for integration into a system on a chip SoC such as the ARM 1136 series of processors. In other embodiments the core may be a processor that includes some or all of the functionality of the core security controller as described herein such as the ARM 1176 series of processors. The ARM 1136 and 1176 technology may be obtained from ARM Holdings plc of Cambridge United Kingdom and or ARM Inc. of Austin Tex. USA.

As shown the MPU subsystem couples to a DMA subsystem that enables memory accesses between DMA compatible components targets of the system . The DMA subsystem has a DMA engine with programmable DMA channels . The DMA subsystem also has internal registers such as DMA channel configuration registers and DMA channel rights registers . The DMA channel configuration registers are implemented to configure the DMA channels as read channels or as read write channels during DMA requests. The DMA channel rights registers control the access rights of each DMA channel . These access rights could be based for example on the security rules and or hardware constraints of the system s hardware security architecture e.g. as determined by interconnect qualifiers . As used herein the term interconnect qualifier or qualifier is intended to mean a signal embedded in an access e.g. an Open Core Protocol OCP access . The qualifier reflects the state of the component that initiated the access at the time the access was initiated.

The DMA subsystem also may comprise DMA status registers source address registers destination address registers DMA length registers DMA control registers or other registers not shown for convenience . In some embodiments the DMA subsystem is interconnected to DMA compatible components i.e. source locations or destination locations via a hardware security architecture such as an L3 interconnect having firewalls and and an L4 interconnection having a firewall . The DMA subsystem also comprises a configuration firewall that allows and restricts the usage of DMA channel qualifiers as will later be described. Although the L3 interconnect and the L4 interconnect described herein are implemented in some embodiments alternative embodiments may implement other existing or future interconnect architectures.

In at least some embodiments the DMA compatible components mentioned previously comprise a SDRAM Memory Scheduler SMS component having a firewall a General Purpose Memory Controller GPMC component an on chip read only memory ROM an on chip random access memory RAM and an Image Video Accelerator IVA2 component . In alternative embodiments additional components fewer components or different DMA compatible components may be included. In at least some embodiments the on chip ROM corresponds to the memory of and the on chip RAM corresponds to the RAM of .

The system further comprises an L4 interconnect core component having logic that supports functions such as the Advanced Encryption Standard AES the Data Encryption Standard DES the Secure Hash Algorithm 1 SHA1 Public Key Authentication PKA Random Number Generators RNG Universal Asynchronous Receiver Transmitters UARTs and General Purpose Input Outputs GPIOs . In alternative embodiments the L4 interconnect core component may support additional functions fewer functions or different functions. In at least some embodiments the HWA shown in can be part of the interconnect core component . The system further comprises a control module that interfaces the L4 interconnect to the DMA subsystem . As shown the firewall of the DMA subsystem is configured to assert a security violation signal to the control module if a security violation occurs.

To comply with the system s hardware security architecture the DMA channels support usage of interconnect qualifiers that determine access rights to different protected memory spaces of the DMA compatible components. Enforcement of the access rights associated with the interconnect qualifiers is based on firewalls such as the firewalls and . In at least some embodiments interconnect qualifiers such as MReqType MReqPrivilege MReqDebug and MReqSecure are used. Table 1 shows a definition and description of these qualifiers.

If present the MReqType qualifier shown in Table 1 comprises a logic 0 or 1 . If the MReqType qualifier 0 an access request channel configuration request associated with the MReqType qualifier is part of a data access mode that transfers data to a non executable memory space. If the MReqType qualifier 1 an access request associated with the MReqType qualifier is part of an instruction Opcode access mode that transfers data to an executable memory space.

If present the MReqPrivilege qualifier comprises a logic 0 or 1 . If the MReqPrivilege qualifier 0 an access request channel configuration request associated with the MreqPrivilege qualifier is a user mode access. If the MReqPrivilege qualifier 1 an access request associated with the MReqPrivilege qualifier is a privilege mode access. For example in embodiments that implement ARM components a plurality of privilege mode accesses are possible such as a supervisor mode access a system access an interrupt request IRQ access a fast interrupt request FIQ access an abort access an undefined access or a monitor access A privilege mode access enables operations that are not available to user mode accesses.

If present the MReqDebug qualifier comprises a logic 0 or 1 . If the MReqDebug qualifier 0 the access request channel configuration request associated with the MReqDebug qualifier is a functional mode access. If the MReqDebug qualifier 1 the access request associated with the MReqDebug qualifier is a debug mode access. In at least some embodiments the functional mode involves executing instructions using a processor and the debug mode involves executing instructions using an emulator.

If present the MReqSecure qualifier comprises a logic 0 or 1 . If the MReqSecure qualifier 0 an access request channel configuration request associated with the MReqSecure qualifier is a normal transaction mode access. If the MReqSecure qualifier 1 an access request associated with the MReqSecure qualifier is a secure transaction mode access. Qualifiers may be used together or separately to enable a variety of access rights. For more information regarding the use and enforcement of interconnect qualifiers reference may be made to European Pat. App. No. EU 05 291 479 3 filed on Jul. 7 2005 and entitled Method and System For a Multi Sharing Security Firewall which is herein incorporated by reference.

While one or more of the previously described qualifiers are implemented in some embodiments other embodiments may implement different qualifiers. The qualifiers MReqType MReqPrivilege MReqDebug and MReqSecure are simply used for convenience in describing embodiments that implement ARM components. However these qualifiers should also be understood as being applicable to any system with different modes and different security levels. To support the different security levels the DMA channels are configured based on the different interconnect qualifiers. The DMA channel configuration process may occur once periodically or randomly as needed .

In the embodiment of the configuration firewall is implemented to allow or restrict certain qualifiers on the DMA channels . The firewall is accessible and the DMA channels are configurable or re configurable via the L4 interconnect . In some embodiments the MPU accesses the firewall via the L4 interconnect to configure the DMA channels . If the MPU attempts to perform a DMA channel configuration that is not allowed e.g. some channel configurations may be locked in band errors are sent back to the initiator that accessed the firewall e.g. the MPU and out band errors e.g. the security violation signal are generated to the control module and later converted into an MPU interrupt . As used herein in band errors refer to errors that are embedded in a response transaction to the initiator. For example a response transaction may include status information such as an OK indicator or a FAIL indicator that is returned to the initiator. As used herein out band errors refer to errors that are out of the initiator execution flow. For example the firewalls may generate error signals that are outside the initiator execution flow. The out band errors can be used to update status registers and or to cause an interrupt such as the MPU interrupt previously mentioned. The MPU interrupt can be used to notify a user of the system to disable one or more functions of the system or to perform some other action in response to a security violation. For more information regarding detecting and responding to security violations reference may be made to U.S. patent application Ser. No. 10 961 344 filed on Oct. 8 2004 and entitled System and Method of Identifying and Preventing Security Violations Within a Computing System which is herein incorporated by reference.

In the system of the public secure RAM resize instructions the save restore secure RAM instructions and the HWA arbitration instructions perform the same or similar functions as the public secure RAM resize instructions the save restore secure RAM instructions and the HWA arbitration instructions described for . simply illustrates how some embodiments implement the public mode and the secure mode previously described. Also illustrates how some embodiments support secure DMA channel configurations that could be used with the save and restore operations previously described. If a security violation is detected e.g. a public application attempts to operate in the secure mode or to access secure data the system is able to detect the violation and respond accordingly.

If a Wake Up event does not occur determination block the method waits at determination block . The Wake Up event may be for example a user pressing an input button or some other event. If a Wake Up event does occur determination block the contents of the secure RAM are restored block . For example a DMA operation may be used to transfer the contents from a non volatile memory to the secure RAM. If desired cryptography can be implemented to protect the integrity and or the privacy of the secure RAM contents during the save and restore operations.

The above discussion is meant to be illustrative of the principles and various embodiments of the present invention. Numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications

