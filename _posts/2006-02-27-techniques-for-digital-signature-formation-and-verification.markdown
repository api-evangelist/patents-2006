---

title: Techniques for digital signature formation and verification
abstract: Techniques are provided for forming a digital signature for a portion of a document. A registered module is invoked to process the document in accordance with a structured format associated with the document. The registered module is able to process a plurality of different structured formats. The registered module obtains the portion. A digital signature is formed for the portion. The digital signature is included in the document in accordance with the structured format.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08190902&OS=08190902&RS=08190902
owner: Microsoft Corporation
number: 08190902
owner_city: Redmond
owner_country: US
publication_date: 20060227
---
Applications such as word processing or spreadsheet programs operate on documents. Such software applications may allow users to perform data operations using customized code such as for example macros. The code may be embedded so that the application stores the code within the document. The code embedded in the document may be executed in connection with performing operations on the document when accessed by the application. Use of such code by the application presents a security risk including an opportunity for malicious code or a code modification to be introduced into the code portion of the document. Malicious code may be unknowingly executed by the application when accessing the document.

One approach used to ensure that there have been no modifications to the embedded code such as through the introduction of malicious code into the document is attaching a digital signature to the code portion. Existing applications which allow users to develop such code portions may also allow the users to digitally sign their code. While the document is opened and accessed by the application the user may manually select one or more menu options in connection with forming the digital signature.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Described herein are techniques for forming a digital signature for code portions of a document. In accordance with one aspect of the techniques described herein a registered module is invoked to process the document in accordance with a structured format associated with the document. The registered module is able to process a plurality of different structured formats. The registered module obtains the code portion. A digital signature is formed for the code portion. The digital signature is included in the document in accordance with the structured format.

Referring now to illustrated is an example of a suitable computing environment in which embodiments utilizing the techniques described herein may be implemented. The computing environment illustrated in is only one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the techniques described herein. Those skilled in the art will appreciate that the techniques described herein may be suitable for use with other general purpose and specialized purpose computing environments and configurations. Examples of well known computing systems environments and or configurations include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The techniques set forth herein may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.

Included in are a user computer a network and a server computer . The user computer may include a standard commercially available computer or a special purpose computer that may be used to execute one or more program modules. Described in more detail elsewhere herein are program modules that may be executed by the user computer in connection with digital signature and verification techniques providing a signature for embedded code within an application document in an automated fashion for a variety of different structured document formats. The user computer may operate in a networked environment and communicate with a server computer to perform requests made by the user computer .

It will be appreciated by those skilled in the art that although the user computer is shown in the example as communicating in a networked environment the user computer may communicate with other components utilizing different communication mediums. For example the user computer may communicate with one or more components utilizing a network connection such as the Internet or intranet and or other type of link known in the art including but not limited to the dial up connection satellite connection or other wireless and or hardwired connection s .

Referring now to shown is an example of components that may be included in a user computer as may be used in connection with performing the various embodiments of the techniques described herein. The user computer may include one or more processing units memory a network interface unit storage one or more other communication connections and a system bus used to facilitate communications between the components of the computer .

Depending on the configuration and type of user computer memory may be volatile such as RAM non volatile such as ROM flash memory etc. or some combination of the two. Additionally the user computer may also have additional features functionality. For example the user computer may also include additional storage removable and or non removable including but not limited to USB devices magnetic or optical disks or tape. Such additional storage is illustrated in by storage . The storage of may include one or more removable and non removable storage devices having associated computer readable media that may be utilized by the user computer . The storage in one embodiment may be a mass storage device with associated computer readable media providing non volatile storage for the user computer . Although the description of computer readable media as illustrated in this example may refer to a mass storage device such as a hard disk or CD ROM drive it will be appreciated by those skilled in the art that the computer readable media can be any available media that can be accessed by the user computer .

By way of example and not limitation computer readable media may comprise computer storage media and communication media. Memory as well as storage are examples of computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by user computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.

The user computer may also contain communications connection s that allow the user computer to communicate with other devices and components such as by way of example input devices and output devices. Input devices may include for example a keyboard mouse pen voice input device touch input device etc. Output device s may include for example a display speakers printer and the like. These and other devices are well known in the art and need not be discussed at length here. The one or more communications connection s are an example of communication media.

In one embodiment the user computer may operate in a networked environment as illustrated in using logical connections to remote computers through a network. The user computer may connect to the network of through a network interface unit connected to bus . The network interface unit may also be utilized in connection with other types of networks and or remote systems and components.

One or more program modules and or data files may be included in storage . During operation of the user computer one or more of these elements included in the storage may also reside in a portion of memory such as for example RAM for controlling the operation of the user computer . The example of illustrates various components including an operating system a digital signature API an application code signature and verification tool a hash generator a signature generator one or more application programs one or more application documents a bulk signing tool and other components . The operating system may be any one of a variety of commercially available or proprietary operating system. The operating system for example may be loaded into memory in connection with controlling operation of the user computer. One or more application programs may execute in the user computer in connection with performing user tasks and operations.

It should be noted that although the program modules and or data files included in storage are illustrated in this example as being included on user computer an embodiment may also include some or all of these elements in the storage of another computer such as the server computer which may perform the techniques described herein.

Application documents may be used with particular application programs . In one example an application program may be for example a word processing application such as Microsoft Word or other Microsoft Office application program. The application program may access an application document. The application document may be stored in an application specific file format that may vary with the particular application program. Included within the application document may be a code portion which can executed at any point in time when the document is open for processing by the application program. The code portion included in the document may be for example code included in a Visual Basic for Applications VBA project area. The code may be characterized as embedded within the application document for use in connection with performing processing operations on the document by the application program. Depending on the application code may be generated by the application program as the result of for example macro processing operations. A user may also provide code which may be included in the VBA project area.

An embodiment may perform processing using the techniques described herein in connection with digitally signing the foregoing code portion that may be included in each application document. Techniques such as formation of a digital signature for the code portion of an application document may be used to ensure that the code included in the code portion has not been modified. Such modification may occur for example if malicious code is unknowingly included in the VBA project area of a document.

It should be noted that there are publicly available tools such as for example signcode.exe and signtool.exe that may be used in connection with signing particular file types. Signtool.exe is a commercially available tool by Microsoft Corporation for digitally signing files verifying signatures in files and time stamping files. Signcode.exe is a .NET framework tool by Microsoft Corporation for signing a portable executable file. These tools may invoke other code such as existing libraries in connection with parsing particular file formats. Such existing libraries may not have the ability to parse Microsoft Office documents and other application documents having specific file formats which may be unknown to the tools and existing libraries. The techniques described in following paragraphs may be used in connection with locating the particular code portion such as for example the VBA project area of a document forming a digital signature for the code portion storing the digital signature in the document in accordance with the structure of a particular application s document file format and then optionally verifying the digital signature. It should be noted that although the techniques described herein store the signature as part of the application document or in a particular location of the application document the signature may be stored elsewhere. Additionally although specific reference for illustration purposes herein refer to code portions the techniques described herein may also be used in connection with one or more portions of a structured document format in which each portion may include source code executable code scripts including instructions in a human readable form and the like which may be used in connection with the application program associated with the particular structured document format. The examples herein may also refer to Microsoft Office documents but as will be appreciated by those skilled in the art may also be used in connection with other documents for digitally signing code portions associated therewith.

One way in which an application program may provide for digitally signing a code portion included within an application document includes a user executing the application program and having the application document accessed by the application program. For example a user may be executing Microsoft Word and have an application document open for use within the word processing application. The user may then select one or more menu options from within the word processing application to form and store a digital signature within the application document currently being accessed by the application.

The techniques described herein provide for automated formation and or verification of a digital signature for such code portions without utilizing the application program as described above. In other words the digital signature may be formed and or verified without requiring the particular application to be installed on the user computer or other computer such as the server computer which may be servicing a request for digital signature formation and or verification.

The digital signature API Application Programming Interface may include a select set of APIs used in connection with digital signature and encryption functionality. In one embodiment the digital signature API may include an API which in turn results in making one or more underlying calls utilizing functionality included in the operating system . For example a digital signature API may result in one or more Win 32 APIs being invoked in an embodiment utilizing a Microsoft Windows operating system.

The application code signature and verification tool may be registered with the operating system as the particular tool used to parse and process particular file formats such as for example Microsoft Office file formats. As will be described in more detail in following paragraphs one embodiment of the tool is capable of processing a variety of different application document formats associated with Microsoft Office applications. The tool searches for a single VBA project in each of the file formats and generates and or verifies a single digital signature for all of the code included in a single VBA project for an application document. Each of the different application document formats may store the VBA project and or signature at different locations in accordance with each of the different formats.

The hash generator may be used in connection with generating a hash value for a particular code portion included in an application document. It should be noted that in connection with the techniques described herein any one of a variety of different publicly available or proprietary hash generation techniques may be used in connection with the processing described herein. For example in one embodiment the hash generator may form a hash for the VBA project area of a Microsoft Office document using the technique described in U.S. patent application Ser. No. 11 225 706 filed Sep. 12 2005 entitled DIGITAL SIGNATURES FOR EMBEDDED CODE pending Attorney Docket No. 310269.01 which is incorporated by reference herein.

The signature generator may be used in connection with generating a digital signature using a hash e.g. such as produced by the hash generator a private key and a digital certificate. Any one of a variety of different techniques may be used in connection with generating a digital signature in accordance with a particular hash private key and digital certificate. In one embodiment the SHA 1 technique may be used to generate a digital signature used in connection with the techniques described herein. For example the SHA 1 technique may be used to generate the hash which is then encrypted using a digital certificate and private key resulting in the digital signature.

The bulk signing tool may be used in connection with forming a digital signature and or performing verification of the digital signature for one or more application documents in one or more different document formats for various application programs. In other words the bulk signing tool may be used in connection with forming digital signatures for multiple documents in which each of the documents is in a different structured format. In one embodiment that will be described in more detail in the following paragraphs the bulk signing tool may invoke the application code signature and verification tool in connection with digital signature formation and verification for an application document. One embodiment of the bulk signing tool is described in more detail in pending U.S. patent application Ser. No. 11 363 585 filed on even date herewith entitled CODE SIGNING TOOL FOR MICROSOFT OFFICE which is incorporated by reference herein.

Referring now to shown is a block diagram illustrating how components in one embodiment communicate with each other in connection with performing the techniques described herein. In particular the example illustrates how components previously described in connection with may interact in connection with performing the techniques described herein for signature generation and verification. In one embodiment the bulk signing tool may utilize one or more APIs included in the digital signature API to form and or verify a digital signature in connection with one or more application documents. It should be noted that although only the tool is shown as accessing the application document one or more other components of the example may also access application documents. However such detail has been omitted for sake of simplicity of illustrating the techniques described herein.

In one embodiment invocation of a digital signature API may result in invocation of one or more operating system calls such as one or more calls using the Win32 API to routines included in the operating system . The digital signature API may be characterized as a software layer including one or more APIs in which each of the APIs incorporates one or more processing steps to perform a particular operation in connection with digital signature processing. Use of a software layer such as the digital signature API facilitates performing a particular task for a calling program such as the bulk signing tool since the tool may make a single API call resulting in performance of one or more underlying operating system calls. It should be noted that an embodiment may also include some or all of the functionality of the digital signature API described herein in hardware as well as software.

Subsequently the operating system queries one or more registered modules each having a predefined interface to determine which of the registered modules can process a particular file type associated with an application document. In one embodiment the application code signature and verification tool is registered as capable of processing Microsoft Office documents. For example in one embodiment each of the Microsoft Office applications utilizes one or more file types as set forth below 

When the bulk signing tool is processing the Microsoft Office document the operating system interacts with the tool for formation and verification of the digital signature associated with the document. The tool makes calls to application specific or file format specific libraries such as libraries and in connection with parsing and performing processing for the different file formats. In other words the tool invokes a specific application library for processing application documents in a particular format as may be used by an application program. An embodiment may also include and use libraries as described herein based on file types or file formats rather than application association. For example the tool may utilize application library when processing Microsoft Word application documents. The tool may also utilize application library when processing Microsoft PowerPoint application documents. Similarly there may be a distinct and separate application library for processing application documents utilized by each different application program included in Microsoft Office . The foregoing use of application specific libraries provides for modularized coding techniques. It should be noted that in one embodiment the tool may be implemented as a DLL and the application specific libraries may be included as static libraries therewith. The application specific libraries may include a predefined interface utilized by the tool in connection with parsing the document in accordance with a particular structured format to perform operations on certain portions of the document as well as store information into the document in accordance with the structured format. As described herein the tool may invoke an application specific library to locate a code portion of a document and for storing a digital signature to the document in accordance with the document s defined structure.

The tool may also interact with the hash generator when determining the hash for a particular code portion such as a VBA project included in a document. The tool may communicate the hash value for a particular code portion to the operating system which may in turn use the generated hash value private key and a digital certificate for generating a digital signature by invoking the signature generator . Once the digital signature has been formed the operating system may interact with the tool to store the digital signature in the document. The tool may then utilize the particular application library to store the digital signature in the appropriate location in the particular file format.

Referring now to shown is a flowchart of processing steps that may be performed by the bulk signing tool for digitally signing and or verifying a digital signature for an application document. The bulk signing tool may perform the processing of flowchart for multiple documents such as for example multiple Microsoft Office documents of varying structured formats.

At step a determination is made as to whether a digital certificate has been provided. If not control proceeds to step . Otherwise if step evaluates to yes control proceeds to step to sign the application document. As described in more detail elsewhere herein the processing of step may be performed by the bulk signing tool invoking the application code signature and verification tool . Subsequently control returns from the tool where a determination is made at step as to whether the document was successfully signed. If step evaluates to no control proceeds to step where failure status is returned. If step evaluates to yes control proceeds to step where a determination is made as to whether the verify option has been specified. If the verify option has not been specified control proceeds to step to return a successful status. If step evaluates to yes control proceeds to step where verification of the digital signature formed at step is performed. In one embodiment as described herein the processing of step may be performed by invoking the application code signature and verification tool . Once the tool performs verification processing of the digital signature control returns to step where a determination is made as to whether the verification was a success. If so control proceeds to step . Otherwise if step evaluates to no control proceeds to step where failure status is returned.

Referring now to shown is a flowchart of processing steps that may be performed in an embodiment by the operating system and the application code signature and verification tool when signing a document. The flowchart may be characterized as outlining the dialogue between components and in one particular embodiment. The processing of flowchart summarizes processing steps previously described in connection with and step of . At step the operating system determines the particular tool or module which is registered to handle the particular file type. For example if the tool has requested storing a digital signature in a Microsoft PowerPoint document the operating system determines which of the registered modules is designated as processing Microsoft PowerPoint documents and accordingly invokes that particular module which in this example is the application code signature and verification tool . At step the operating system makes a determination as to whether a registered module has been found to handle the designated file type of the application document. If not control proceeds to step where a failure status is returned. Otherwise control proceeds to step where the operating system issues a request to the selected registered module which is the tool in this example to determine the hash value for the document. Control proceeds to step where the tool parses the particular application document to determine the location of the embedded portion of code using the application specific library routines for the particular format of the document being processed. At step the tool returns the hash value to the operating system. As part of processing at step the tool may utilize the hash generator . At step the operating system constructs a digital signature using the hash value digital certificate and private key. As part of processing at step the operating system may utilize the signature generator . At step the operating system requests the tool to store the signature in the document in accordance with the particular structure format of that document. At step the tool parses the document and stores the signature in accordance with the document s structured format using the appropriate application specific library.

In one embodiment a single application library such as may be utilized in connection with processing all the file types of a particular application program associated with the library .

Referring now to shown is a flowchart of processing steps that may be performed in an embodiment in connection with verification of a digital signature. The steps of flowchart set forth more detailed processing of one embodiment of step from . The processing of flowchart regenerates the hash value for a code portion and compares that regenerated hash value to the hash value retrieved in accordance with an existing digital signature. Verification processing may be performed to ensure that processing problems or errors have not occurred in the formation of the digital signature. At step a first hash value is determined from the digital signature formed as part of step processing. Step may be performed by the operating system . In one embodiment the digital signature is requested by the operating system from the tool . The tool parses the document for the digital signature. The operating system extracts the hash value from this digital signature using the complementary operation performed by the signature generator . For example the component when signing may use a private key to encode the data to create the digital signature. To undo this operation as performed at this step a complementary public key is used in decoding to retrieve the corresponding hash value. At step the operating system calls the tool to form the second hash value. At step the tool parses the document and determines the location of the portion in accordance with the structured storage of the document. The tool may perform this processing of step by making calls to routines in the appropriate application specific library which determines the location of the code portion for the format of the document being processed. At step the tool forms a second hash value for the code portion. Step may be performed utilizing the hash generator as described elsewhere herein. At step the tool returns the second hash value to the operating system. At step the first hash value determined at step is compared to the second hash value formed at step . Step may be performed by the operating system calling the tool to perform the comparison. At step the tool may make a determination as to whether the first and second hash values match. If so control proceeds to step where it is determined that verification processing was successful. Otherwise control proceeds to step where it is determined that verification processing has failed. The tool may then return a status in accordance with whether step resulted in a determination of success step or failure step .

As described herein the tool may be used for digital signature generation and or validation. As also described herein the tool may be used to validate a newly formed digital signature for an application document. It should also be noted that although the particular example illustrated herein includes the bulk signing tool other tools such as signtool.exe may also invoke the APIs resulting in invocation of the tool for digital signature formation and or validation processing.

The techniques described herein may be applied in connection with any one of a variety of different file formats and structured storage arrangements. In one embodiment the techniques described herein may be applied to a binary file format as used in connection with for example Microsoft Office PowerPoint 97 and later versions. The binary file format for one embodiment of a Microsoft Office PowerPoint file may be characterized as a structured file referred to as a docfile or a compound file known to those of ordinary skill in the art as OLE DocObject files. A docfile may include a hierarchical system of storages and streams. Binary data from Microsoft PowerPoint is written into streams within the docfile using the Windows Structured Storage APIs. These streams are stored in the file as linked lists of file blocks. Information in the foregoing binary format may be accessed using the Windows Structured Storage APIs documented at http msdn.microsoft.com library default.asp url library en us stg stg structured storage start page.asp.

It should be noted that in one embodiment as described herein the Pictures Stream and the Summary Information Stream are optional. Additional detail will now be described regarding the Current User Stream and the PowerPoint Document Stream.

Referring now to shown is an example graphically illustrating a current User Stream and the PowerPoint Document Stream. The example shows the Current User Stream as including a pointer to the latest saved edit in the PowerPoint Document Stream. The various edits made to the file are represented in this illustration by the User edit atoms. Atoms and other elements used in connection with the binary file format are described elsewhere herein in more detail. The example shows the PowerPoint Document Stream as including three user edit atoms which are all linked in reverse time order with the most recent edit represented at the tail of the list.

The PowerPoint Document Stream may be characterized as the schema for all the information about a Microsoft PowerPoint presentation. One embodiment of a Microsoft PowerPoint file stores its data in records. There are two different kinds of records in the file atoms and containers. Atoms may be defined as records that contain information about a PowerPoint object and are included within containers. Containers are records which may include atoms and other containers in accordance with a defined architecture or schema. A more detailed example of a PowerPoint Document Stream is presented in following paragraphs in connection with other figures to illustrate the techniques described herein with the VBA project area.

Referring now to shown is an example of a physical representation of a record format as may be used in connection with records corresponding to containers and atoms for the Microsoft PowerPoint document representation described herein. Each record includes a record header portion and a data portion . The record header portion in this example includes a record version a record instance a record type and a record length . The record version indicates the version of the associated record if this particular record is identified as an atom by the record type field . In one embodiment if the record type field indicates that the record is a container field may have a predefined default value. The record instance field may be used to differentiate atoms. The instance of a record is useful for differentiating atoms when there is more than one atom of the same type in a particular container. For example a container may include a list of fonts in which each font is represented by an atom. Each instance of an atom may vary accordingly with the font as well as the particular list being described. As described above the record type may be used to indicate a signature or type of the particular record. The record length may identify the length of the record in bytes. If the record is an atom length may refer to the length of the atom excluding the header. If the record is a container length may refer to the sum of the lengths of the atoms included in the container plus the length of the record headers. The actual data fields of the atom or container represented by a particular record may be included in data portion .

Referring now to shown is an example illustrating in more detail an exemplary embodiment of a PowerPoint Document Stream. The example may include a document container one or more slide containers one or more user edit atoms and other containers and or atoms. The example illustrates some of the different record types that may be included in an embodiment as well as a particular instance of a file. It should be noted that other embodiments may include other types than as described herein.

In this example the document container marks the beginning of the PowerPoint Document Stream. Each of the slide containers such as slide container may include all of the necessary atoms and containers to describe a single Microsoft PowerPoint slide. The user edit atom such as atom is described elsewhere herein in more detail regarding saved edits in the PowerPoint Document Stream.

Referring now to shown is an example illustrating in more detail an exemplary embodiment of a document container. The example provides further detail of one embodiment of the document container as illustrated in . Other containers and or atoms may include fields which point to or otherwise reference a document container. For example in one embodiment each user edit atom of a PowerPoint Document Stream may include a pointer identifying the corresponding document container also included in the PowerPoint Document Stream.

In the example the data container may include document atom environment container sound collection container doc info list container and VBA info container . As illustrated in the example the doc info list container may include multiple containers. One of those multiple containers in this example is the container . The document atom may be characterized as a record that stores miscellaneous information about the Microsoft PowerPoint presentation. The environment container may include information about the particular environment of the Microsoft PowerPoint presentation such as for example identifying the collection of particular fonts identifying default ruler information and the like. The sound collection container may include information regarding sound elements for the particular presentation. The doc info list container may be characterized as a generic container holding a variable number of containers and or atoms. In this example the container includes the VBA info container . The container includes information about VBA as used in connection with this presentation. In this particular example for this file format VBA may be used for example in connection with macros. The container may include information about the particular VBA code segments i.e. the VBA project area that may be optionally included with a particular presentation. In one example the container may include flag information indicating whether or not this particular presentation has defined macros. If macros are defined container may indicate that there is associated VBA code for this particular presentation. Otherwise container may indicate that there is no VBA code associated with this particular presentation.

It should be noted that the container may identify the location of the associated VBA code using any one of a variety of different techniques in accordance with where the VBA code is stored. For example an embodiment may include the VBA code within the container as part of the actual Microsoft PowerPoint document data. An embodiment may also include the VBA code within the document associated with the Microsoft PowerPoint presentation at a location other than within the container . The embodiment may also include an identifier within the container identifying an external location for the VBA code. For example the location may be external with respect to the document container PowerPoint Document Stream or with respect to the docfile including all the multiple streams.

The techniques described herein may be used in connection with signing and verifying the VBA code utilized with the foregoing file format. It should be noted that the techniques described herein may be used in connection with other file formats including for example other binary and non binary file formats. The techniques described herein may also be used in connection with other code portions besides VBA code portions.

The foregoing may also be used in connection with signing and or verifying a portion of a file format which is encrypted compressed and or processed using one or more other techniques resulting in conversion of the original data from a first form to a second form. In one embodiment the portion to be signed may be included in a file which is compressed. The entire file or selected portions thereof may be stored in a compressed format. Similarly the entire file or selected portions thereof may be stored in an encrypted form. If portions of a file are stored in a compressed encrypted or other form an indicator such as a bit flag may be used to indicate which portions are conditionally stored in this compressed or encrypted form. An embodiment may also have selected portions which are designated as always compressed encrypted and the like rather than allowing a portion to be conditionally designated with an indicator.

Referring now to shown are examples of embodiments of the various file formats that may be used in connection with the techniques described herein. The first file format may include portion and portion . A digital signature may be formed for each of these portions and stored in a file in accordance with the format of . In this example of each signature may be stored within proximity of a corresponding portion. Additionally each of these portions has an associated flag field. The signature and flags associated with portionl are indicated by element . Similarly the signature and flags associated with portion are indicated by element . The flag field may indicate for each corresponding portion whether or not the corresponding portion has been processed in accordance with certain operations. For example flags of element may include a first indicator indicating whether portionl is stored in a compressed form. Flagsl may also include a second indicator indicating whether portionl is stored in an encrypted form. Similar indicators may be included in other flag fields associated with other portions. It should be noted that the particular flags associated with each portion may vary within a single file format.

A second file format is indicated in accordance with element . In the example each portion has a corresponding signature as indicated by element in . Each portion may be stored in a processed form in accordance with flags indicated by flag field. Flags . In this particular example a single flag field is used to indicate the form of the data stored in accordance with the file format for multiple portions e.g. portion and portion within .

In connection with formats in accordance with elements and it should be noted that portions of the file other than portion and portion may or may not be compressed encrypted and the like.

Another file format is indicated in accordance with element in which no flag fields are illustrated. In the example a designated portion of the file such as portion may have a corresponding digital signature stored in the signature field. Portion may also be stored in a compressed and or encrypted form. Portion may not have a corresponding digital signature and may not have any further processing such as for example may not be compressed or encrypted and stored in such form.

Elements and are examples of file formats in which designated portions of a file may be conditionally subjected to further processing such as compression encryption and the like and then stored in the file in the resultant form. Element is an example of a file format in which one or more designated portions e.g. portion of a file may always be subject to predetermined processing such as for example encryption and or compression.

The examples in are similar in that the portions having an associated digital signature are embedded within each file. One skilled in the art will appreciate that the techniques described herein may be used in connection with code portions for example which are stored in a location external to the document. In such embodiments the document format may include an identifier such as to an external file or other location rather than the code portion itself embedded within the document.

It should also be noted that the examples illustrated herein such as in connection with include the digital signature adjacent to the corresponding portion. An embodiment may alternatively store the digital signature and corresponding portion in other arrangements in which the digital signature is separated from its corresponding portion.

The techniques described herein may be utilized in connection with any one or more different file formats. An example of other file formats that may include code portions and utilize the techniques described herein is described in pending U.S. patent application Ser. No. 11 142 061 filed May 31 2005 Macro Enabled Macro Free Files MS Reference No. 310270.01 which is incorporated by reference herein.

Referring now to shown is a flowchart of processing steps that may be performed an embodiment using the techniques described herein in connection with a structured storage document stored in a compressed form. In this example the entire document may be stored in a compressed form. As will be appreciated by those skilled in the art these processing steps may be easily adapted for use in connection with other document formats described herein. The processing steps of flowchart illustrate processing steps that may be used in connection with formation of the digital signature. At step data for the entire document may be read and decompressed storing the results in memory. At step the location of the portion for which a digital signature is to be formed is determined in accordance with a structured storage format of the document. As described herein the portion may be embedded within the document. At step the digital signature for the portion is formed. At step the digital signature is stored at a location in accordance with the structured storage for the particular file format. At step compression is performed for the entire document and the resulting data is then stored in a compressed form.

In one embodiment a first partition of the document may be compressed and include an identifier used in connection with obtaining code from the code portion. The code portion may be included in second partition of the document which is also compressed as a separate entity from the first partition. In such an instance the first partition is retrieved and decompressed into memory. The identifier for the code portion such as the VBA project area is obtained by parsing the first partition in accordance with the structured storage format of the first partition. Using the identifier the code portion may be retrieved and decompressed into memory. The digital signature may be formed for the decompressed code portion using the techniques described herein. One skilled in the art will appreciate that the signature validate techniques described herein may also be used in connection with the digital signature formed for the decompressed code portion.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

