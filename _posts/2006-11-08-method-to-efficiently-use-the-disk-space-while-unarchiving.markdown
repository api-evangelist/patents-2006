---

title: Method to efficiently use the disk space while unarchiving
abstract: A computer implemented method, data processing system, and computer program product for efficiently using disk space when unarchiving files in the same file system. An archive file is read to identify a total number of data files in the archive file. The number of headers in the archive file is determined based on the total number of data files. A location in a first disk space of a largest data file in the archive file is determined from an offset in a header corresponding to the largest data file. The largest data file is then copied from the first disk space to a second disk space. The first disk space occupied by the largest data file is then released by truncating the archive file. The obtaining, copying, and releasing steps are repeated for each data file in the archive file until all of the data files are unarchived.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08275750&OS=08275750&RS=08275750
owner: International Business Machines Corporation
number: 08275750
owner_city: Armonk
owner_country: US
publication_date: 20061108
---
The present invention relates generally to an improved data processing system and in particular to a computer implemented method data processing system and computer program product for efficiently using the disk space when unarchiving files in the same file system.

In UNIX servers tar command is generally used for archiving and unarchiving files. Archiving comprises the process of combining a number of files into a single file also known as an archive file. Unarchiving comprises the process of reconstructing the original files from the archive. To archive a number of specified data files within UNIX tar for Tape Archive command may be used to create an archive file from the set of data files. To unarchive an archive file tar command is used which extracts the individual files from the archive file. As tar has no built in data compression abilities tar is often used in tandem with an external compression utility such as gzip or bzip2 to compress the single file to maximize archive space.

The process of unarchiving files currently requires that an amount of disk space equaling the size of the tar file be available. If both the tar file and the extracted files are required to be on the same file system the tar file would extract the files one by one to the file system. However the extraction would stop if there is not enough space on the file system for all of the extracted files. The tar file remains unchanged during the process of extraction because the file system is required to have free space equal to the tar file for successful extraction. This disk space size requirement can be problematic since in many cases a tar file may occupy a large amount of disk space and the amount of space needed to perform the unarchiving is not always available. In these disk space situations the system administrator must either increase the size of the file system to accommodate the unarchive process or clear out unwanted files in the file system to make the needed space available.

The illustrative embodiments provide a computer implemented method data processing system and computer program product for efficiently using disk space when unarchiving files in the same file system. An archive file is read to identify a total number of data files in the archive file. The number of headers in the archive file is determined based on the total number of data files. A location in a first disk space of a largest data file in the archive file is determined from an offset in a header corresponding to the largest data file. The largest data file is then copied from the first disk space to a second disk space. The first disk space occupied by the largest data file is then released by truncating the archive file. The obtaining copying and releasing steps are repeated for each data file in the archive file until all of the data files are unarchived.

With reference now to the figures and in particular with reference to exemplary diagrams of data processing environments are provided in which illustrative embodiments may be implemented. It should be appreciated that are only exemplary and are not intended to assert or imply any limitation with regard to the environments in which different embodiments may be implemented. Many modifications to the depicted environments may be made.

With reference now to the figures depicts a pictorial representation of a network of data processing systems in which illustrative embodiments may be implemented. Network data processing system is a network of computers in which embodiments may be implemented. Network data processing system contains network which is the medium used to provide communications links between various devices and computers connected together within network data processing system . Network may include connections such as wire wireless communication links or fiber optic cables.

In the depicted example server and server connect to network along with storage unit . In addition clients and connect to network . These clients and may be for example personal computers or network computers. In the depicted example server provides data such as boot files operating system images and applications to clients and . Clients and are clients to server in this example. Network data processing system may include additional servers clients and other devices not shown.

In the depicted example network data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages. Of course network data processing system also may be implemented as a number of different types of networks such as for example an intranet a local area network LAN or a wide area network WAN . is intended as an example and not as an architectural limitation for different embodiments.

With reference now to a block diagram of a data processing system is shown in which illustrative embodiments may be implemented. Data processing system is an example of a computer such as server or client in in which computer usable code or instructions implementing the processes may be located for the illustrative embodiments.

In the depicted example data processing system employs a hub architecture including a north bridge and memory controller hub MCH and a south bridge and input output I O controller hub ICH . Processor main memory and graphics processor are coupled to north bridge and memory controller hub . Graphics processor may be coupled to the MCH through an accelerated graphics port AGP for example.

In the depicted example local area network LAN adapter is coupled to south bridge and I O controller hub and audio adapter keyboard and mouse adapter modem read only memory ROM universal serial bus USB ports and other communications ports and PCI PCIe devices are coupled to south bridge and I O controller hub through bus and hard disk drive HDD and CD ROM drive are coupled to south bridge and I O controller hub through bus . PCI PCIe devices may include for example Ethernet adapters add in cards and PC cards for notebook computers. PCI uses a card bus controller while PCIe does not. ROM may be for example a flash binary input output system BIOS . Hard disk drive and CD ROM drive may use for example an integrated drive electronics IDE or serial advanced technology attachment SATA interface. A super I O SIO device may be coupled to south bridge and I O controller hub .

An operating system runs on processor and coordinates and provides control of various components within data processing system in . The operating system may be a commercially available operating system such as Microsoft Windows XP Microsoft and Windows are trademarks of Microsoft Corporation in the United States other countries or both . An object oriented programming system such as the Java programming system may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system Java and all Java based trademarks are trademarks of Sun Microsystems Inc. in the United States other countries or both .

Instructions for the operating system the object oriented programming system and applications or programs are located on storage devices such as hard disk drive and may be loaded into main memory for execution by processor . The processes of the illustrative embodiments may be performed by processor using computer implemented instructions which may be located in a memory such as for example main memory read only memory or in one or more peripheral devices.

The hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the illustrative embodiments may be applied to a multiprocessor data processing system.

In some illustrative examples data processing system may be a personal digital assistant PDA which is generally configured with flash memory to provide non volatile memory for storing operating system files and or user generated data. A bus system may be comprised of one or more buses such as a system bus an I O bus and a PCI bus. Of course the bus system may be implemented using any type of communications fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture. A communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. A memory may be for example main memory or a cache such as found in north bridge and memory controller hub . A processing unit may include one or more processors or CPUs. The depicted examples in and above described examples are not meant to imply architectural limitations. For example data processing system also may be a tablet computer laptop computer or telephone device in addition to taking the form of a PDA.

.Tar file is shown to comprise several data files. The known format of .tar file comprises a header header followed by a data file data file which is followed by an end of file marker EOF . Each header such as header comprises metadata about its corresponding data file. This metadata may include the name version size date of last modification access rights of the data file checksum etc. Headers are typically a fixed size of 512 bytes with the extra space zero filled.

A data file such as data file comprises an actual file which is written to the archive uncompressed. The length of a data file is typically rounded up to a multiple of 512 bytes and the extra space is zero filled. Although other sizes may be used 512 bytes is commonly used as the header and data file size since .tar was originally designed for tape devices which can be accessed only a block at a time and 512 bytes was the standard size of a single block.

As previously mentioned the process of unarchiving an archive file such as .tar file in and similarly structured archive files currently requires that an amount of disk space equaling the size of the .tar file be available. This disk space size requirement can be problematic since the amount of space needed to perform the unarchiving may not be available. The illustrative embodiments provide a solution to this problem by allowing files to be unarchived in an efficient manner. In particular the illustrative embodiments provide an improved archiving format which when a group of data files is being archived first stores a number at the beginning of the archive file which indicates the number of data files being archived. A header comprising metadata for the group of data files is also stored in the archive file following the number and the actual data files to be archived are stored following the header. The data files are ordered in the archive file based on file size in ascending order. The header is also modified to include the offset of each data file location.

When unarchiving an archive file stored using the improved archiving format the largest data file the last file in the archive file based on ascending file size is located using the offset in the header and copied to the local disk space. Once the largest data file has been copied the .tar file may be truncated since the archive disk space formerly occupied by the copied data file has now been freed. This freed space in the archive may now be used to copy the remaining data files in the .tar file. The unarchiving process is repeated until all of the data files archived in the .tar file have been copied to the local disk space.

The unarchiving technique in the illustrative embodiments provides an advantage over existing unarchiving methods that require that archive disk space in the amount of the entire .tar file be available for the unarchive process. In contrast the unarchiving technique in the illustrative embodiments requires less archive disk space to be available for the unarchive process since only an amount of archive disk space equal to the largest data file in the .tar file is needed to be available. In addition with the improved archiving format additional disk space is available for archiving for the end of file marker used to indicate the end of each data file is no longer necessary in the improved archive format. As the header now includes the offset of each data file location the size of the data file also in the header may be used with the offset information to calculate the end of file. As a result the amount of archive disk space traditionally occupied by the end of file markers typically 512 byte blocks in the archive files may now be available for use when archiving.

Although the archive files used in the illustrative embodiments are .tar files it should be noted that the improved archive format and the unarchiving process may be used with any other archive files which employ the POSIX header format. POSIX is the collective name of a family of IEEE standards that defines a standard application programming interface API and environment based on the Unix operating system to support application portability at the source level. The POSIX header format is further described in below.

With reference now to a block diagram illustrating exemplary archiving components that may be used to implement the illustrative embodiments. Content manager manages content in content storage . Content files may be added deleted updated or modified using content manager . Content storage may be persistent storage such as hard disk or magnetic tape storage. In a preferred embodiment content storage comprises one or more hard disk drives.

Archive module identifies candidate files in content storage and moves these files to archive storage which may be a set of secondary disk drives or magnetic tape drives. Preferably files are archived into an archive file such as a .tar file. When a request is received for an archived data file archive module may retrieve the archive file and extract the data files from the archive file. Content manager may then return the requested files to the user.

Content manager may be embodied within a Web server such as server in or other device that provides a large amount of content. For example content manager may be integrated within an electronic mail program User Network USENET news client message board server or the like. Content manager may also be integrated within an operating system or file manager. Content manager may then archive files to a portion of the hard drive such as an archive partition or to a secondary drive. Other modifications may be made to content manager within the scope of the present invention. For example content manager and archive module may be implemented on the same computer or on different computers working in cooperation with one another. is intended as an example and not as an architectural limitation for the present invention.

Turning now to an exemplary .tar file format in accordance with the illustrative embodiments is shown. The .tar command stores the archive file in a storage device such as for example archive storage in .

In this illustrative example .tar file comprises archived data files a header and a total number of the data files . Total number of data files is placed at the beginning of .tar file . This number is used in the unarchiving process to determine the number of headers in the archive file thereby allowing one to delimit header and archived data files .

Header contains all of the headers for archived data files . In one embodiment each header in header adheres to the POSIX header format. Within header the headers are ordered from n to 1 wherein header n refers to the header that references data file n which is the data file occupying the largest amount of archive disk space and header refers to the header that references data file which is the data file occupying the least amount of archive disk space. Each header n to 1 within header comprises metadata about its corresponding data file. This metadata may include the name version size date of last modification access rights of the data file etc. as per the current POSIX header format for a data file. In addition the metadata also contains the offset location for the header s corresponding data file in the archive. Each header within header may be a fixed size of 512 bytes with the extra space zero filled.

Archived data files may be written to the archive uncompressed with the lengths of the data files typically rounded up to a multiple of 512 bytes and the extra space zero filled. The data files are sorted in the archive file based on file size in ascending order. As a result the smallest data file data file is stored first with the remaining data files following from smallest to largest. Consequently while the data files are sorted in the archive file from smallest to largest 1 to n the headers sorted in the reverse order of their corresponding data files n to 1 . This format is desirable in order to easily obtain the location of the largest data file for the unarchiving process since the header corresponding to the largest data file is located at the top of the archive file. In addition storing the largest data file at the end of the archive file allows for easily truncating the archive file when the largest data file has been unarchived and copied locally.

With the format of .tar file the unarchiving process is only required to use an amount of archive disk space equal to the amount of space occupied by the largest data file in the archive. When unarchiving data file n is copied to the local disk space such as within content storage in . The .tar file may then be truncated since the archive disk space formerly occupied by data file n such as within archive storage in has now been freed. This freed space may now be used to copy other data files data file n 1 to 1 in the .tar file until all of the data files have been copied to the disk space. In addition the last data file in the archive is the largest data file or data file n . End of file markers are not necessary in the improved archive format since the offset of the each data file location may be obtained from the header itself. Based on the data file size and the offset the end of file may be easily calculated. Since the traditional archiving format typically uses 512 byte blocks as the end of file markers for each data file the improved archive format also frees up this disk space for archiving.

The archive module sorts the data files that should be archived based on size of the data files in ascending order step . The header such as header in is filled with metadata about the corresponding data files in the order of n to 1 step . As shown in header n is the header referring to the largest data file in the archive group or data file n. Header is the header referring to the smallest data file in the group or data file .

Once the header is filled in the archive module copies the data file occupying the least amount of disk space such as data file step . The remaining data files are then copied into the archive file in ascending order with respect to file size step such that the data files are copied in the order of 1 to n with the process terminating thereafter. The archive file format is structured to have the header ordered from n to 1 referring to the largest data file data file n first and the data files ordered from 1 to n so that the largest data file in the archive may be easily located since it is the first entry in the header. The largest data file is the first data file to be unarchived since it will free the largest amount of disk space with which to unarchive the other data files.

The process begins with an archive module in a content manager reading the value at the beginning of the archive file to determine the number of data files in the archive file step . From the number of data files number of headers may be determined step . Determining the number of headers allows the archive module to delimit the headers and the data.

Once the number of headers in the archive file is known the archive module may read the header in the archive file corresponding to the largest data file header n to obtain the location of the largest data file data file n from the offset in the header step . The archive module then accesses that location and begins copying data file n to the local disk space such as to content storage in step .

When the nth data file has been copied a truncate command such as ftruncate may be called by the archive module to truncate the archive file and release the archive disk space occupied by the data file step . The disk space once occupied by the archived data file is freed and now available to be used for extracting and copying the next data file in the archive file. The next header in the archive file may then be read and the process steps in steps to may be repeated until all of the data files are unarchived and copied to the local disk space step with the process terminating thereafter.

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any tangible apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

