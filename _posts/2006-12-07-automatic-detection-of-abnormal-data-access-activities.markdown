---

title: Automatic detection of abnormal data access activities
abstract: Methods and systems are provided for evaluating atypical user data access activities within the scope of an automatically generated file security policy in organizations with multiple diverse access control models and multiple diverse file server protocols. The system monitors access to storage elements within the network. The recorded data traffic is analyzed to assess simultaneous data access groupings and user groupings, which reflect the actual organizational structure. The learned structure is then transformed into a dynamic file security policy, which is constantly adapted to organizational changes over time. The system provides a decision assistance interface for tracking abnormal user behavior.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07555482&OS=07555482&RS=07555482
owner: Varonis Systems, Inc.
number: 07555482
owner_city: New York
owner_country: US
publication_date: 20061207
---
This application is a continuation in part of application Ser. No. 11 258 256 filed 25 Oct. 2005 entitled Automatic Management of Storage Access Control which claims the benefit of Provisional Application No. 60 688 486 filed Jun. 7 2005 both of which are herein incorporated by reference.

This invention relates to computer security. More particularly this invention relates to the automatic detection of atypical data access behavior in organizations having a diversity of file access control models.

Data security policies typically determine who has access to an organization s stored data on various computer systems. These policies cannot be static. Users from within the organization e.g. employees partners contractors can pose a threat as severe as threats from outside the organization. Thus as the structure and personnel makeup of the organization change the security policy should be adjusted from time to time. Yet information technology IT departments lack effective tools to manage user access rights and to ensure that needed information is conveniently available while still protecting the organization s sensitive data.

Current techniques available to IT personnel include review and maintenance of access control lists in conjunction with administration of user names passwords and the extension of such techniques to include biometrics encryption and limitation of access to a single sign on. Such techniques are inefficient often inaccurate and become impractical in the context of large complex organizations whose structure and personnel are constantly changing.

Aids to security are available for enterprises using particular operating systems or environments. These are often based on role based access control a technique that has been the subject of considerable interest for the last several years by governmental organizations and has more recently been adopted in commercial enterprises. A typical proposal for role based access controls in a multi user SQL database is found in the document Sahadeb De et al. available on the Internet at the URL http www10.giscafe.com .

Nevertheless access control technologies have not been optimally implemented in enterprises that utilize diverse access control models. The state of the art today is such that there is no easy way for system administrators to know who is accessing what in such environments. As a result in many organizations an unacceptably high proportion of users have incorrect access privileges. The related problems of redundant access rights and orphan accounts of personnel who have left the organization have also not been fully solved. Hence there is a need for an automatic method for controlling user file permissions in order to improve data security prevent fraud and improve company productivity. Furthermore misuse of data access even by authorized users is a concern of those charge with maintaining system security.

According to disclosed embodiments of the invention methods and systems are provided for evaluating user data access activities within the scope of an automatically developed data security model in networked organizations having diverse access control models and file server protocols. Access to storage elements within the organizational network is continually monitored and analyzed in order to identify deviant access behavior by users who have been pre classified into groups having defined data access privileges. As the organizational structure changes these groups are adaptively changed both in composition and in data access rights.

An embodiment of the invention provides a method for controlling data storage access in an organization has users of a file system the file system has storage elements which is carried out by recording accesses of the users to the storage elements and deriving respective access profiles from the recorded accesses and biclustering the users and the storage elements to define corresponding user clusters and data clusters. The access profiles of the users in the user clusters are mutually similar and define a respective normal access behavior for each of the user clusters. The method is further carried out by detecting a suspicious access to the storage elements of one of the data clusters by one user in one of the user clusters that is inconsistent with the normal access behavior to the one data cluster by other users in the one user cluster. Responsively to detection of the suspicious access an alert is issued indicating that the one user has exhibited atypical access behavior.

In an aspect of the method a suspicious access is detected by determining that the other users of the one user cluster have not accessed any of the storage elements of the one data cluster.

According to a further aspect of the method detection of a suspicious access comprises determining from the recorded accesses whether a predetermined number of members of the one of the user clusters performed the suspicious access.

According to one aspect of the method the step of biclustering is performed iteratively. The access profiles and the respective normal access behavior for each of the user clusters are redetermined at each iteration.

Other embodiments of the invention provide computer software product and apparatus for carrying out the method.

In the following description numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent to one skilled in the art however that the present invention may be practiced without these specific details. In other instances well known circuits control logic and the details of computer program instructions for conventional algorithms and processes have not been shown in detail in order not to obscure the present invention unnecessarily.

Software programming code which embodies aspects of the present invention is typically maintained in permanent storage such as a computer readable medium. In a client server environment such software programming code may be stored on a client or a server. The software programming code may be embodied on any of a variety of known media for use with a data processing system such as a diskette or hard drive or CD ROM. The code may be distributed on such media or may be distributed to users from the memory or storage of one computer system over a network of some type to other computer systems for use by users of such other systems.

Turning now to the drawings reference is initially made to which is a block diagram of a data processing system wherein data access control policies are managed in accordance with a disclosed embodiment of the invention. The system may be implemented as a general purpose computer or a plurality of computers linked together in a network for example the Internet. Using the facilities of the system data access control policies can be automatically established using the methods disclosed in commonly assigned application Ser. No. 11 258 256 entitled Automatic Management of Storage Access Control which is herein incorporated by reference.

Organization wide data storage accessible by the system is represented by an organizational file system . The organizational file system may comprise one or more co located storage units or may be a geographically distributed data storage system as is known in the art. There is no requirement that individual storage units of the organizational file system have the same capabilities.

The organizational file system may be accessed by any number of users using a graphical user interface application GUI which relates to other elements of the system via an application programming interface API . The users are typically members of the organization but may also include outsiders such as customers. The graphical user interface application is the interface of the management system through which the users can receive the results of their actual usage analysis as determined an analysis engine . In some embodiments sufficiently qualified users e.g. administrative personnel can view their current status and can view changes recommended by the system. Such users may be authorized to accept or reject recommended changes. Prior to selecting any recommended changes qualified users have the ability to view the effect of recommended changes on the system. System administrators can then select or confirm the permission set that proves most suitable.

A probe engine is designed to collect access information from the organizational file system in an ongoing manner filter out duplicate or redundant information units and store the resulting information stream in a database . The probe engine is also utilized to collect the organization s current file security policy the current structure of the organizational file system and information about the users . The probe engine can be implemented in various environments and architectures.

The analysis engine is a specialized module that is at the heart of the system s ability to control storage access. For purposes of defining normal activity profiles and detecting atypical or exceptional data access activity by the users the front end for the analysis engine is a data collector which efficiently records the storage access activities in the database . The output of the analysis engine can be further manipulated using an interactive administrative interface that enables system administrators to perform queries on the collected data. Using the administrative interface the administrators may modify and activate a new or revised policy. In some embodiments the analysis engine may automatically propose and revise the organization s security policy.

Related to the analysis engine is a commit module which verifies a proposed security policy using data collected prior to its implementation. The commit module references an access control list ACL . Activities of the commit module are described in further details hereinbelow.

Probe engines are tailored to particular operating systems and environments. The following are described by way of example and not of limitation.

Reference is now made to which is a block diagram illustrating one embodiment of the probe engine in accordance with a disclosed embodiment of the invention. This embodiment termed herein the Win Probe module acts as a probe for the Microsoft Windows platform. It is responsible for operating system level monitoring on local file systems which are components of the organizational file system . Typically there is one Win Probe module that services all Windows computers in the organization. The Win Probe module operates in parallel with probe engines adapted to other operating systems. Alternatively a complex organization may require more than one Win Probe module in order to assure efficient operation. The Win Probe module has a file system filter SIDFILE that employs a kernel mode filter driver for intercepting activity of a local file system and for logging it alongside security information regarding the activity intercepted. A service SIDFILE SERVICE interacts with the filter driver and polls for new log entries. The log entries are filtered by the service The service is responsible for compiling statistics from the filtered log entries and forwarding both the raw log entries and their statistics to the database for further processing. The filter is transparent to the operating system and its overhead is limited to extraction of associated security attributes per input output I O operation and logging. Communication between the filter driver and the service is accomplished using operating system mechanisms such as device I O Control and predefined control codes e.g. collect statistics .

Reference is now made to which is a block diagram illustrating another embodiment of the probe engine which is adapted to networked devices in accordance with a disclosed embodiment of the invention. A network attached storage NAS probe is responsible for collecting access data from a NAS storage device . In some embodiments one NAS probe may serve an entire organization. Alternatively a plurality of NAS probes may be provided. The probe interacts with the NAS device using a dedicated typically vendor specific protocol. The protocol causes the NAS device to send a notification on a requested file access operation originating from a user to the probe . The probe either enables the requests to be satisfied by the NAS device or denies access to the NAS device according to a current governing policy. A log entry is made by the probe documenting an enabled request and the request is passed to the NAS device for conventional processing in accordance with its own operating system. Denied requests are logged in order to assist in tracking abnormal user behavior as described in further detail below. The user receives a reply to its request either in the form of a denial of access or an indication of the result of the requested file operation by the NAS device . In either case there is minimal performance impact. Since the NAS device has its own proprietary operating system all driver related issues e.g. extraction of system identifiers SID s user identifiers UID s and the type of file access requested are handled on the NAS device and simply logged by the probe .

As noted above the analysis engine is at the heart of the system . The statistics on actual accesses of the users including every member of an organization to each of the data storage elements in the organizational file system reported by the probe engine are used to perform a simultaneous automatic bi clustering of the users and the data storage elements. The bi clustering is done in such a manner that users who are members of the same user cluster share a similar data access profile and data storage elements files or directories that are members of the same data cluster are accessed mostly by users having similar access profiles. The clusters provide a global picture of the organizational structure. The analysis engine can also develop from the clustering results a local measure of similarity among users and a local measure of similarity among the data elements that belong to the same cluster. Moreover the clustering process reliably predicts future data storage access by organization members. It can be assumed with a high level of confidence that if one of the users has not accessed a certain file or storage element and similar users have not accessed similar files then that one user will not need access rights to the corresponding storage element in the near future. The analysis engine thus provides IT administrators a clear global picture of information usage patterns and can offer detailed recommendations for security policy optimization. At the same time administrators are alerted to anomalous user behavior. Typically the alert is generated as part of an exception report by the analysis engine via the administrative interface either immediately or on a predetermined schedule. In some configurations the alert could take the form of a system message directed to the terminal of the system administrator or designated security personnel. The analysis engine can also automatically build a complete forensic trail of any suspicious activities. The result is a dramatically greater ability to ensure compliance with access and privacy policies and to assure appropriate information usage without imposing additional administrative burdens on IT personnel.

The following clustering algorithms are used in the current embodiment. However the invention is not limited to the particular algorithms described hereinbelow. It will be apparent to those skilled in the art that other clustering algorithms can be applied to the data obtained by the probe engine in order to obtain comparable results.

Assume we have a joint distribution of two discrete random variables X and Y denoted by p x y p X x Y y . In our case X stands for the set of users in the organization and Y is the set of file directories accessed by the members of the organization. The value p x y is the normalized number of times that user x approached the data storage element y during an enrollment phase. Based on the collected data organized in a contiguity table of the p x y we want to discover the essential underlying structure of the two sets and the mutual relations between them. More precisely we want to cluster the random variables X and Y into disjoint sets of similar elements. A clustering of the random variable X is a partitioning of the elements of X into disjoint clusters denoted by X and in a similar manner denoting a partition of Y by Y .

Assuming that the number of clusters is predefined as part of the system configuration parameters we want to find clusterings X and Y such that the mutual information I X Y between the user clusters and the data clusters is maximized. In other words the system utilizes the mutual information criterion as a cost function to assess the quality of various clustering structures.

The mutual information encapsulates the amount of uncertainty in one of the random variables that is revealed when the other random variable is observed. We also define two related concepts that are used below. Let P P 1 . . . P n and Q Q 1 . . . Q n be two discrete probability distributions. The relative entropy Kullback Leibler divergence between the distributions P Q is 

The Jensen Shannon divergence between the distributions P Q according to a mixture coefficient c is 1 1 1 3 .

The next step is to utilize the mutual information criterion to find the optimal biclustering. Different strategies are used for the user set X and the data set Y. In the case of user set X there is no current structure that it is necessary to maintain. However in some embodiments it may be desirable to retain an organizational user structure. In contrast the data file system is based on a tree structure which we do want to maintain as it is likely to reflect an operational similarity between nearby directories in the tree. Therefore storage element clustering is accomplished by essentially pruning the tree. The process is described in further detail hereinbelow.

Reference is now made to which is a flow chart describing a method of user clustering in accordance with a disclosed embodiment of the invention. The method begins with a random solution and then sequentially improves the result in a monotonic manner.

At initial step a random partitioning of the user list into a predetermined number of clusters is chosen as a starting point. This partitioning will be used in a current set of cycles as described below. For each user x the probability distribution p y x stands for the normalized data access activity of the user x i.e. p y x is the number of times the user x accessed data element y normalized by the entire number of data activities performed by x in the enrollment period. For each randomly constructed cluster C we define p y C to be the average of the conditional probability distributions p y x related with the users that are members of the cluster C.

Next at step one of the users is selected. Step is performed iteratively and the users are evaluated cyclically. However the order of evaluation in a cycle is not critical.

Next at step the current user x is tentatively moved from its current cluster to the cluster selected in step to form a tentative new clustering of the users.

Control now proceeds to decision step where it is determined whether the global mutual information I X Y of the new clustering is larger than that of the current clustering. We define a distance between a user x and a cluster C that is composed from c users in the following way 

Each user x is merged into the cluster C which minimizes the distance d x C . The conditional access probability p y C is modified according to the statistics of the new member x. It can be verified that minimizing the distance d x C is equivalent to maximizing the mutual information between the clusters and the data activities.

If the determination at decision step is affirmative then control proceeds to step . The current user x remains in the cluster that was selected in step and the tentative new clustering established in step is confirmed.

If the determination at decision step is negative then control proceeds to step . The current user x is returned to the cluster from which it was selected and the tentative new clustering established in step is rejected.

In either case control now proceeds to decision step where it is determined whether more users remain to be evaluated in the current cycle. If the determination at decision step is affirmative then control returns to step .

If the determination at decision step is negative then control proceeds to decision step where it is determined whether the last cycle yielded any improvement in mutual information.

If the determination at decision step is affirmative then an optimum clustering may not yet have been achieved. At step the user list is reset to begin another cycle in the current set of cycles. Control returns to step and the new cycle begins by choosing a new cluster using the same random partitioning established in initial step .

If the determination at decision step is negative then control proceeds to step . The best clustering achieved in the current set of cycles is memorized.

Control now proceeds to decision step where it is determined whether a termination criterion has been met. The termination criterion may be completion of a predetermined number of iterations of initial step . Alternatively a performance indicator can be used as a termination criterion.

If the determination at decision step is negative then control returns to initial step and the method is repeated choosing a new starting point.

If the determination at decision step is affirmative then control proceeds to final step . The best result obtained in the clusterings memorized in iterations of step is reported as a final clustering that maximizes the mutual information between the user clusters and the data clusters.

Reference is now made to which is a flow chart describing a method for storage element clustering in accordance with a disclosed embodiment of the invention. This is an agglomerative method based on merging clusters that are represented by sibling elements in the data file tree. It is assumed that user clustering as described above with reference to has been performed. In an initial phase there is merger between sibling directories or parent offspring directories that cannot be distinguished in terms of user access events. This stage results in a directory tree that has been pruned into a tractable number of elements. In the next phase all leaves of the current pruned tree are visited and there is further merger between two sibling or parents offspring directories such that a minimal reduction in the mutual information between the user clusters and the data clusters results. The process iterates until a termination criterion is satisfied e.g. when a predetermined number of clusters is obtained or when the current mutual information is decreased below a predetermined threshold. The method is now presented in greater detail.

Initial step begins a traversal of the directories of the file tree. In selecting candidates for clustering parent offspring directories and sibling directories and clusters thereof are considered and are referred to collectively as neighbors . The traversal order is not critical so long as all data elements are visited and all mutual neighbors are evaluated. Many known algorithms for tree traversal may be employed. Two neighbors are selected.

Control now proceeds to decision step where it is determined whether the current candidates are indistinguishable or nearly indistinguishable according to predetermined criteria of similarity in terms of user access events.

If the determination at decision step is affirmative then control proceeds to step . The candidates are merged together to form a new data cluster. This data cluster is treated as a single storage element or neighbor in subsequent iterations of initial step .

After performing step or if the determination at decision step is negative control proceeds to decision step where it is determined whether traversal of the data file tree is complete. If the determination at decision step is affirmative then control returns to initial step to begin another iteration.

If the determination at decision step is negative then one phase of the method is complete resulting in a pruned directory tree. In general the directories and clusters of directories in the pruned tree constitute a tractable number of elements.

Control now proceeds to step which begins another phase of the method wherein the pruned tree is traversed again with additional merging of candidates in a manner that leads to a minimal reduction in the mutual information I X Y . The mutual information I X Y between the user clusters resulting from the method described with reference to and the data clusters of the current pruned tree is memorized.

Next at step two candidates are selected. As noted above these candidates can be clusters directories or combinations thereof so long as the candidates have a sibling or parent child relationship.

Next at step the current candidates are tentatively merged to form a new clustering of the users and data elements. The mutual information I X Y of the tentative arrangement is determined.

Control now proceeds to decision step where it is determined if the reduction in mutual information I X Y I X Y caused by the tentative clustering is less than the reduction of mutual information caused by the best previous tentative clustering. This determination will always be affirmative on the first iteration of decision step .

If the determination at decision step is affirmative then control proceeds to step . The current tentative clustering is memorized and set as a high water mark. It is the best new clustering thus far available.

After performing step or if the determination at decision step is negative control proceeds to decision step where it is determined if more candidates remain to be evaluated in the tree. If the determination at decision step is affirmative then control returns to step .

If the determination at decision step is negative then control proceeds to decision step where it is determined if a termination criterion has been met. This criterion can be the establishment of a predetermined number of new clusters. Alternatively the method may terminate when the current best reduction in mutual information is less than a predetermined threshold.

If the determination at decision step is negative then the method is repeated using the mutual information of the current best clustering as a starting point. Control returns to step where a new value of the mutual information I X Y is set.

If the determination at decision step is affirmative then control proceeds to final step . The clustering last stored at step is reported as an optimum data element clustering.

At the end of the clustering algorithm both the users and the data storage elements are arranged in disjoint clusters. A hierarchical tree structure is maintained among the data storage elements while the users are distributed among a user space without having a hierarchical arrangement. A robust similarity measure between users in the organization can then be extracted. It is said that users behave similarly if they belong to the same user cluster which indicates that the two users are accessing similar portions of the data storage systems. Two directories or other storage elements are considered similar if they belong to the same data cluster.

The clustering obtained using the method described above with reference to can be used to automatically eliminate unnecessary access permissions and to identify atypical data access activity by particular users. For example permission for a user x to access a storage element y is eliminated if the user x has not accessed the element y nor elements similar to y during an enrollment period. It is predicted that the user x will not need to access the element y in the near future. The prediction is based on the access profile of similar members of the organization. It can be assumed that if no users with a similar access profile to the element y who are thus in the same cluster as the user x have accessed the element y nor accessed storage elements similar to the element y then the user x will not access the element y in the near future. Therefore in order to increase the level of organizational data security access permission can be canceled for the user x with respect to the element y. Review of the users is conducted iteratively at predetermined time intervals and the access policy updated accordingly.

In the previous section a description was provided of how the user data clustering approach can be utilized to define an access control policy that reflects the actual structure of the organization. Recorded data activities are only one of the sources of information that can be extracted to define the optimal data access control policy. In order to propose a new or updated data access policy the current user data group structure and the current data security policy should also be taken into consideration. Another major source of knowledge about the organization is the current manually set access control list . The ACL can be viewed as a set of pairs where each pair consists of a group of users and a group of data elements that can be accessed by the user group. Even though the current ACL may contain many errors it is reasonable to assume that it is still highly correlated with the desired control policy. The procedure presented below can use the unsupervised clustering procedure discussed above to modify the current ACL and thereby obtain an improved policy. The organizational structure learned from the recorded user access data is then used to eliminate unnecessary data access permissions. The algorithm is based on the current ACL and operates separately for each user data group in the following manner for each user we check whether access to one of the data elements defined in the pair was recorded. If not we check whether a similar user accessed the data element during the enrollment period. Here similarity has the same meaning as given above. If no such user was found it can be concluded that the particular user will not need to access the data element in the near future. If this is also the case for the data elements appearing in the data group we eliminate the user from the access control pair. A second phase of the process is applied to eliminate data elements from the access control pair as explained below.

Reference is now made to which is a flow. chart illustrating a method of partially supervised file access control in accordance with a disclosed embodiment of the invention. The steps of the method are shown in an exemplary sequence in for clarity of presentation. However it will be evident to those skilled in the art that many of them can be performed in parallel asynchronously or in different orders.

The method begins at initial step . The bi clustering methods described above with reference to and are performed and applied.

Next at step an access control unit is selected from the ACL. This unit is a pair composed of a group of users and a group of directories.

Control now proceeds to decision step where it is determined if the current user has accessed the current data element.

If the determination at decision step is affirmative then no modification of the ACL need be made with respect to the current user. Control proceeds to step which is described below.

If the determination at decision step is negative then users determined in the clustering procedure performed in initial step to be similar to the current user are evaluated. Control proceeds to step . A similar user is selected.

Control now proceeds to decision step where it is determined if the current similar user has accessed the current data element.

If the determination at decision step is affirmative then based on similarity of access needs between the current user and the current similar user no modification of the ACL need be made with respect to the current user. Control proceeds to step .

If the determination at decision step is negative then at decision step it is determined if there are more similar users to be considered.

If the determination at decision step is negative then at step the current user is removed from the current access control unit.

Next at decision step it is determined if more users in the current access control unit remain to be evaluated. If the determination at decision step is affirmative then control returns to step

If the determination at decision step is negative then at decision step it is determined if more access control units remain to be evaluated. If the determination at decision step is affirmative then control returns to step to begin a new iteration.

If the determination at decision step is negative then control proceeds to final step . The storage access control can now incorporate the ACL list as modified.

Step referenced above begins a phase of the algorithm which concerns the status of the current data element in the current access control unit. This phase is performed only if neither the current user nor any similar user has accessed the current data element. The purpose of the following steps is to investigate whether data elements that are considered to be similar to the current data element according to the clustering procedure performed in initial step have been accessed by any of the users in the current access control unit. If not then the current data element is removed from the current access control unit. Once this action is accomplished no member of the current user group can thereafter access the current data element. A similar data element is selected from the clustering performed in initial step .

Next at step a user is again selected from the current access control unit. It is intended that all users in the current access control unit be subject to evaluation in iterations of step .

Control now proceeds to decision step where it is determined if the current user has accessed the current similar data element. If the determination at decision step is affirmative then there is no need to remove the current data element from its access control unit. Control proceeds to decision step which has been described above.

If the determination at decision step is negative then at decision step it is determined if there are more users in the current access control unit. If the determination at step is affirmative then control returns to step .

If the determination at step is negative then at decision step it is determined if there are more similar data elements to be tested against the users in the current access control unit.

If the determination at decision step is negative then all users of the current access control unit have been tested for access against all data elements that are similar to the current data element chosen in the last iteration of step . No access has been found. At step the current data element is now eliminated from the current access control unit.

Control now proceeds to decision step where it is determined if there are more data elements in the current access control unit. If the determination at decision step is affirmative then control returns to step to begin a new iteration using a different data element from the current access control unit.

If the determination at decision step is negative then control proceeds to decision step which has been described above.

Referring again to the clustering procedures described above are applied to the storage access activities collected during an enrollment or training period for the system. These procedures may be repeated from time to time for example following mergers and acquisitions in the underlying organization. It is desirable to assure that a proposed or tentative new or updated access control policy is valid in terms of user activity occurring following the enrollment period. Data collected after the enrollment period are used to verify the validity of the tentative policy prior to its institution. This function is carried out by the commit module which records user access activities and detects violations of the tentative policy. If the user activities would not violate the tentative policy then it is approved as a definitive storage access control policy. Otherwise it is rejected or returned for further evaluation or revision. The commit module thus provides a cross validation mechanism to check the quality of a proposed storage access control policy before its actual implementation.

Another major aspect of the data analysis performed on the recorded data is detection and tracking of atypical behavior. The commit module is adapted to perform this function following the implementation of a storage access control. Abnormal behavior may be identified if a user acts inconsistently with other users belonging to the same user cluster.

Reference is now made to which is a fragmentary representation of an exemplary user group data matrix which is constructed in accordance with a disclosed embodiment of the invention. The matrix is developed by performing the unsupervised biclustering procedure described above. Representative user groups are shown. Although in this example each user group has three users such groups do not necessarily have the same number of users. Assume that the user groups are members of different but somewhat related research projects related to the organization s business activities. Three data groups are shown. The data groups contain data primarily relating to the activities of the user groups respectively. The data group contains personnel files. Each matrix cell represents the intersection of a respective user group and data group. In a matrix cell each user is assigned a string of binary digits whose length corresponds to the number of data elements in the respective data group. For example the data group has four data elements. In a cell users UA UB and UC of user group are associated with respective strings each string comprising four binary digits and each binary digit corresponding to one of the four data elements of the data group . In the strings 1 and 0 indicate that the user did and did not access the corresponding data element respectively. Many of the cells in the matrix have been left blank for clarity of presentation.

It is assumed that as a result of the activities during the enrollment phase described above the user groups have each been granted access rights to each of the data groups .

In the cell all three binary strings are populated exclusively by 0 entries meaning that no data elements of the data group were accessed by any member of the user group during a current monitoring interval. Based on the foregoing discussion this would generally result in consideration of withdrawal of privileges of the user group to access the data group .

A cell displays accesses of the user group to the data group which has four data elements. As the data group corresponds to the operational activities of the user group as would be expected there is a preponderance of 1 entries in its three strings.

The data group containing personnel files has five data elements. Thus each of the strings in the right column of the matrix headed by D has five binary digits although only entries for a cell are shown.

The cell corresponds to activities of the user group with respect to the personnel information in the data group . A string and a string correspond respectively to the activities of users UA and UC. Both are populated with 0 entries indicating that neither user has accessed file elements in data group . A string represents the activities of user UB who has accessed 3 of the 5 data elements in data group . As explained in the discussion below this is considered as atypical data access behavior. It should be noted that were it not for the accesses of the user UB illustrated by the string it would have been proposed to withdraw the privileges of the user group to the data group in accordance with the foregoing discussion.

Reference is now made to which is a flow chart illustrating a method for identifying atypical user data access activity in accordance with a disclosed embodiment of the invention. At initial step the unsupervised biclustering procedure described above is performed. Then in a current monitoring interval which need not be the same as the interval in the enrollment phase data accesses are arranged in a matrix of user groups and data elements e.g. the matrix . While the arrangement of the matrix is convenient for conceptual clarity of presentation it is only necessary to record data accesses and link them to particular users and user groups. Many other data structures known in the art can be used to this end. The steps disclosed below can also be optimized or changed in their order to best suit a particular implementation. Indeed many of them can be performed concurrently.

Control now proceeds to decision step where it is determined if any element of the current data group has been accessed by any member of the current user group. As noted above in the discussion of this step can be performed by evaluation of a binary sequence stored in a matrix.

If the determination at decision step is negative then control proceeds to step . As explained above access privileges may be withdrawn from user groups who no longer require them. The current data group is now marked for consideration of removal of access privileges by the current user group. Control then proceeds to decision step which is described below.

If the determination at decision step is affirmative then control proceeds to decision step where it is determined if more than a predetermined number N of members of the current user group accessed the current data element. If the current data element were frequently accessed by more than N members of the current user group then it would not be inferred that access by any particular user is atypical behavior. Normally the predetermined number N is set at one. However if collaborative malicious behavior is suspected the predetermined number could be set at two three or even higher recognizing that as the number N increases more false positive reports of suspicious behavior are likely to be generated.

If the determination at decision step is negative then control proceeds to step . It is concluded that the access to the current data element is atypical.

After performing step or if the determination at decision step is affirmative then control proceeds to decision step where it is determined if more data groups need to be evaluated for the current user group.

If the determination at decision step is affirmative then control returns to step to begin another iteration using a new data group.

If the determination at decision step is negative then control proceeds to decision step where it is determined if there are more user groups to evaluate.

If the determination at decision step is affirmative then control returns to step to begin another iteration with a new user group.

If the determination at decision step is affirmative then control proceeds to final step . The matrix has been fully evaluated and the procedure ends.

The method may be repeated by continually monitoring data access by users and performing the steps beginning at step either at preset intervals or following a predetermined numbers of data accesses using the results of the last automatic biclustering procedure. Alternatively the procedure can be repeated beginning at initial step . As explained above it is desirable to repeat the automatic biclustering in order to adapt user privilege control to the changing needs and structure of the organization.

It will be appreciated by persons skilled in the art that the present invention is not limited to what has been particularly shown and described hereinabove. Rather the scope of the present invention includes both combinations and sub combinations of the various features described hereinabove as well as variations and modifications thereof that are not in the prior art which would occur to persons skilled in the art upon reading the foregoing description.

