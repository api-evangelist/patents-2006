---

title: Declarative data binding and data type propagation in a remote workflow schedule authoring system
abstract: Methods, systems, apparatus, and computer-readable media are provided herein for declarative data binding and data type propagation in a remote workflow schedule authoring system. According to one method, a user interface is provided for binding a parameter in a workflow action rule to a data value provided by a data source. The user interface may include a control for specifying a data source and a data field to which the parameter should be bound. The parameter is bound to the data source and data field selected using the user interface. If the data type of the selected data source is identical to the data type of the parameter, an internal lookup may be performed to retrieve the data value. Otherwise, the data type of the parameter may be propagated to the data source during lookup of the data value.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08146017&OS=08146017&RS=08146017
owner: Microsoft Corporation
number: 08146017
owner_city: Redmond
owner_country: US
publication_date: 20061130
---
This application is a continuation of U.S. patent application Ser. No. 11 598 573 filed on Nov. 13 2006 and entitled Remote Workflow Schedule Authoring .

A workflow defines a series of tasks within an organization to produce a final outcome. Workflows allow for business process formalization and management. A collaborative workgroup computing application allows different workflows to be defined for different types of jobs. For example in a publishing setting a document may be automatically routed from writer to editor to proofreader to production. At each stage in the workflow one individual or group is responsible for a specific task. Once the task is complete the workflow application ensures that the individuals responsible for the next task are notified and receive the data needed to execute the next stage of the process.

A workflow schedule authoring tool enables a user to author a workflow by arranging building blocks in a particular order. Building blocks may correspond to events conditions or actions. Each building block is associated with source code that defines an action to be taken when the building block is executed. The order of the building blocks determines the workflow schedule process that will be performed when the workflow schedule is executed by a workflow execution engine on a server computer. Some building blocks may be predefined for commonly used actions. Other building blocks may be customized to execute a specific function or to provide a solution to a unique problem. The building blocks simplify workflow schedule authoring because the user does not need to write any code.

Previous workflow schedule authoring tools require all of the building blocks utilized in a workflow schedule to be stored on both the server and the remote computer that is utilized to author the workflow. This requirement however may be a barrier to deploying new building blocks on the server computer. Additionally in remote workflow authoring systems where multiple users are permitted to concurrently edit the same workflow conflicts can arise as a result of different versions of the same workflow being stored on the server computer. Moreover in such systems no safeguards are provided for ensuring that the workflow engine cannot execute unauthorized building blocks.

Methods and computer readable media are provided herein for remotely authoring a workflow schedule. Through the embodiments presented herein the building blocks utilized in creating a workflow schedule do not need to be stored at the remote computer that is utilized to author the workflow. Safeguards are also provided at various stages in the authoring process to ensure that each building block has been authorized for use and execution by a workflow schedule and to eliminate conflicts between different versions of workflow schedules.

According to one aspect presented herein a method is provided for remotely authoring a workflow schedule. According to one method a workflow schedule authoring tool referred to herein as the authoring tool is provided that includes a user interface and associated functionality for creating workflow schedules by arranging building blocks called workflow actions in a particular order. Workflow actions may correspond to events conditions or actions. The authoring tool is executed at a client computer and workflow schedules created at the client computer are transmitted to a server computer for execution.

According to one aspect the authoring tool is operative to receive a list of available workflow actions from the server computer. In response to receiving the list the authoring tool then determines whether the workflow actions are present on the client computer. If the workflow actions are not present on the client computer the authoring tool transmits a request to the server computer for data from which workflow action proxies for the missing workflow actions may be created. A workflow action proxy is an object that includes the properties of the associated workflow action but does not include an implementation for its methods. As described in detail herein the workflow action proxies are utilized at the client computer during authoring to simulate the interfaces and properties of the corresponding workflow action. At execution time however the server computer utilizes the actual workflow actions to perform the associated workflow processing. In this manner workflow schedules can be remotely authored without transferring all of the required executable workflow actions from the server computer to the client computer. Only the data for constructing the workflow action proxies is transferred.

In response to receiving the request for data from which workflow action proxies may be created the server computer determines whether the identified workflow actions are authorized for use in a workflow schedule. This may be accomplished for instance by examining a safe workflow actions list that includes data identifying workflow actions as either being safe or unsafe for execution. If the identified workflow actions are safe for execution the server computer returns the data for creating the workflow action proxies in response to the request. If the identified workflow actions are not safe for execution however the server computer will not return the data.

Using the data received from the server computer the authoring tool constructs the workflow action proxies. The proxies may then be utilized during the workflow schedule authoring process in place of the actual workflow actions. Workflow actions stored at the client computer may also be utilized during creation of the workflow schedule. Once the workflow schedule has been completed the client computer transmits the workflow schedule to the server computer for storage. The authoring tool may also transmit a request to the server computer to verify the contents of the workflow schedule.

In response to receiving a request to verify the workflow schedule the server computer performs processing operations to verify the contents of the workflow schedule. In particular in one implementation the server computer identifies the workflow actions identified in the workflow schedule. The server computer then determines whether the workflow actions in the workflow schedule are authorized for use in a workflow schedule. As described above the server computer may examine a safe workflow actions list to make this determination. If the workflow actions in the workflow schedule are authorized for use the server computer returns a success indication to the client computer in response to the request. If the workflow actions in the workflow schedule are not authorized for use however the server computer will return a failure response to the client computer.

Once the workflow schedule has been verified the workflow schedule may be instantiated and executed. This may occur for instance in response to the occurrence of an event or in response to a manual request to execute the workflow schedule. Prior to executing the workflow schedule however the server computer again determines whether the workflow actions in the workflow schedule to be executed are authorized for use. If the workflow actions in the workflow schedule to be executed are authorized for use the workflow schedule is instantiated. If the workflow actions in the workflow schedule to be executed are not authorized for use the server computer will not instantiate the unsafe workflow actions.

According to other aspects provided herein the server computer stores workflow schedules in a versioned document library. Through facilities provided by the document library each version of a workflow schedule is assigned a version number. Newly created instances of workflow schedules utilize the most recent version of the workflow schedule. Previously instantiated instances however continue to utilize the version of the workflow schedule that was utilized when the workflow schedule was first instantiated. In this manner each instance of a workflow schedule utilizes the same version of the workflow schedule during its entire lifespan thereby eliminating conflicts between different versions of workflow schedules.

According to other aspects the authoring tool includes a user interface for declaratively binding parameters in a workflow action rule to data values. In particular a user interface is provided by the authoring tool through which a user can specify a data source and a data field within the data source to which the parameter should be bound. The user interface may include user interface controls displaying the available data sources and data fields. The controls may be filtered to display only data sources and data fields having data types compatible with the data type of the parameter.

Using the user interface a user can declaratively bind parameters in a workflow action rule to a data source. According to aspects the data type of the parameter may be propagated to the data type of the data source if necessary. In particular if the data type of the selected data source is identical to the data type of the parameter an internal lookup may be performed to retrieve the data value. Otherwise the data type of the parameter is propagated to the data source during lookup of the data value.

The above described subject matter may also be implemented as a computer controlled apparatus a computer process a computing system or as an article of manufacture such as a computer readable medium. These and various other features will be apparent from a reading of the following Detailed Description and a review of the associated drawings.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

The following detailed description is directed to systems methods apparatus and computer readable media for remotely authoring a workflow schedule. As will be described in greater detail herein a workflow schedule authoring tool is provided that can utilize workflow action proxies instead of the workflow actions themselves during authoring. This eliminates the need to transfer executable workflow actions from a server computer to the client computer executing the authoring tool. Moreover functionality is described herein for performing authorization checks at the server computer during the authoring process to ensure that only authorized workflow actions are utilized and executed. The server computer is also operative to provide versioning functionality for the workflow schedules to thereby eliminate the possibility of conflicts occurring between different versions of a workflow schedule. Additional details regarding each of these subject areas will be provided below with respect to the FIGURES.

While the subject matter described herein is presented in the general context of program modules that execute in conjunction with the execution of an operating system and application programs on a computer system those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the subject matter described herein may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

The subject matter presented herein is also described as being practiced in a distributed computing environment where tasks are performed by remote processing devices that are linked through a communications network and wherein program modules may be located in both local and remote memory storage devices. It should be appreciated however that the implementations described herein may also be utilized in conjunction with stand alone computer systems and other types of computing devices. It should also be appreciated that although reference is made herein to the Internet the embodiments presented herein may be utilized with any type of local area network LAN or wide area network WAN .

In the following detailed description references are made to the accompanying drawings that form a part hereof and which are shown by way of illustration specific embodiments or examples. Referring now to the drawings in which like numerals represent like elements through the several figures aspects of a computing system and methodology for remote authoring of a workflow schedule will be described. In particular is a network diagram illustrating aspects of an illustrative operative environment for the subject matter described herein that includes a client computer a network and a server computer .

As shown in the client computer and the server computer are communicatively coupled to one another through respective connections to the network . According to one implementation the network comprises the Internet. However it should be appreciated that the network may comprise a LAN WAN or other type of network suitable for connecting the client computer and the server computer .

According to one implementation the client computer also includes a Web browser program referred to herein as a browser . The browser is operative to request receive and display information pages such as Web pages from the server computer . In particular the browser is operative to establish a connection to a collaborative application executing on the server computer . Through the connection the browser may request information pages provided by the collaborative application . The collaborative application is a computer software program that enables multiple users to collaborate on documents projects tasks and other matters.

The collaborative application also supports workflow processes. In general a workflow is an abstraction of how work flows through a business process. This abstract notion of workflow has been modeled in computer programs and computer software for supporting workflow through a business process has become known as workflow. Hereinafter the term workflow refers to such a software model i.e. a software program that supports the modeling of how work flows through a business process . In one implementation the collaborative application is the MICROSOFT OFFICE SHAREPOINT SERVER from MICROSOFT CORPORATION of Redmond Wash. It should be appreciated however that the implementations described herein may be utilized with any type of computer system that supports workflow processes.

In order to support the provision of workflow in one implementation the server computer includes the .NET FRAMEWORK 3.0 from MICROSOFT CORPORATION. The .NET FRAMEWORK 3.0 is a framework for building deploying and running Web services and other applications. The .NET FRAMEWORK 3.0 includes the WINDOWS WORKFLOW FOUNDATION WF . The WF is a programming model engine and tools for building and executing workflow enabled applications. The WF allows a developer to more easily model and support business processes. Details regarding the .NET FRAMEWORK 3.0 and the WF are publicly available from the MICROSOFT DEVELOPERS NETWORK MSDN and from other sources.

The WF includes a workflow engine for instantiating and executing instances of workflows created using authoring tools such as the workflow authoring tool . The workflow engine runs a workflow by advancing the workflow through a workflow schedule . The workflow schedule is a data structure containing data that identifies the workflow actions that should be executed as a part of the workflow workflow logic and various metadata. As will be described in greater detail below the workflow authoring tool may be utilized to author the workflow schedule . The workflow schedule may then be transmitted to the server computer for execution as a part of the collaborative services provided by the collaboration application . Additional details regarding this process are provided below.

As shown in the client computer also includes the .NET FRAMEWORK 3.0 and WF for use during the workflow authoring process described herein. It should be appreciated that although the implementations presented herein are described in the context of the .NET FRAMEWORK 3.0 and the WF other similar programming frameworks and workflow modeling tools available from other manufacturers may be utilized on the client computer and server computer to implement the embodiments presented herein. Additional details regarding the provision of and use of workflow in a collaborative application can be found in U.S. patent application Ser. No. 11 117 808 filed on Apr. 29 2005 and entitled Workflow Hosting Computing System Using a Collaborative Application U.S. patent application Ser. No. 11 212 207 filed on Aug. 25 2005 and entitled Workflow Tasks in a Collaboration Application and U.S. patent application Ser. No. 11 087 123 filed on Mar. 22 2005 and entitled Workflow Association in a Collaborative Application each of which is assigned to the assignee of the instant application and expressly incorporated herein by reference in its entirety.

As discussed briefly above the client computer is operative to execute a workflow authoring tool . The authoring tool is an application program that provides facilities for visually creating workflows that can be executed by the collaborative application . In particular through the facilities provided by the authoring tool a user can graphically create a workflow schedule . Additional details regarding the operation of the workflow authoring tool can be found in U.S. patent application Ser. No. 10 955 659 filed on Sep. 30 2004 and entitled Workflow Schedule Authoring Tool which is assigned to the assignee of the instant application and expressly incorporated herein by reference in its entirety.

The workflow schedule references various workflow actions that are the building blocks that perform the actual processing for the various steps of the workflow. The workflow actions are executable components that may correspond to events conditions or actions within a workflow process. As shown in the workflow actions are stored on the server computer for use when the workflow schedule is executed. Some of the workflow actions may also be stored on the client computer for use during the authoring of a workflow schedule .

In certain scenarios it is impracticable or undesirable for all of the workflow actions available at the server computer to be stored on the client computer . For instance new workflow actions may be added to the server computer after deployment. In many cases it is impracticable or undesirable to transmit these workflow actions to the client computer . In previous workflow authoring systems this would result in the client computer being unable to use any workflow actions that were not stored directly thereon. In order to address this problem the authoring tool is operative to determine which workflow actions are not stored thereon and to request data from which workflow action proxies may be constructed for the missing workflow actions .

The workflow action proxies are software objects that include the properties of the associated workflow action but that do not include an implementation for its methods. The workflow action proxies are utilized at the client computer during authoring to simulate the interfaces and properties of the corresponding workflow action . At execution time however the server computer utilizes the actual workflow actions to perform the associated workflow processing. In this manner workflow schedules can be remotely authored without transferring all of the required executable workflow actions from the server computer to the client computer . Only the metadata needed by the client computer to construct the workflow action proxies is transferred.

Using the metadata received from the server computer the authoring tool constructs the workflow action proxies . The proxies may then be utilized during the workflow schedule authoring process in place of the actual workflow actions . Any workflow actions that are stored at the client computer may also be utilized during creation of the workflow schedule . Once the workflow schedule has been completed the client computer transmits the workflow schedule to the server computer for storage.

In one implementation the server computer stores workflow schedules in a versioned document library provided by the collaborative application . Through the use of versioning facilities provided by the document library each version of a workflow schedule is assigned a version number. Newly created instances of workflow schedules utilize the most recent version of the workflow schedule . Previously instantiated instances however continue to utilize the version of the workflow schedule that was utilized when the workflow schedule was first instantiated. In this manner each instance of a workflow schedule utilizes the same version of the workflow schedule during its entire lifespan. Additional details regarding this process will be provided below with reference to .

Once the workflow schedule has been stored in the document library the workflow schedule may be instantiated and executed. This may occur for instance in response to the occurrence of an event or in response to a manual request to execute the workflow schedule . When the workflow schedule is instantiated the workflow actions are utilized to perform the actual processing for the workflow. If a workflow action proxy was utilized during authoring the corresponding workflow action is utilized at run time to perform the workflow processing.

As will be described in greater detail below according to implementations the server computer is operative to verify that each of the workflow actions referenced by a workflow schedule have been authorized for execution. This may occur for instance at the time the authoring client requests data for creating the workflow action proxies at the time a workflow schedule is verified by the server computer and at run time. Additional details regarding these security mechanisms will be provided below with reference to .

Referring now to additional details will be provided regarding the embodiments presented herein for remotely authoring a workflow schedule . In particular are flow diagrams illustrating the operation of the client computer and the server computer according to one implementation. The routine illustrates processing operations performed by the client computer while the routine illustrates processing operations performed by the server computer . The routines and will be described in conjunction with one another.

It should be appreciated that the logical operations described herein are implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance requirements of the computing system. Accordingly the logical operations described herein are referred to variously as operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination.

The routine begins at operation where the workflow authoring tool is launched on the client computer . Once the workflow authoring tool has been launched the routine continues to operation where the workflow designer portion of the workflow authoring tool is launched. The workflow designer is a portion of the workflow authoring tool that provides functionality for visually defining a business workflow without programming. Several aspects of a user interface provided by the workflow designer are described below with reference to and .

From operation the routine continues to operation where the workflow authoring tool retrieves a list of available workflow actions from the server computer . The server computer transmits the list of available workflow actions to the client computer at operation of the routine . In response to receiving the list of available workflow actions the authoring tool compares the actions identified in the received list to the workflow actions already stored at the client computer . In this manner the authoring tool can determine the assemblies already present and loaded on the client computer and the workflow actions that are available from the server computer that are not present on the client computer .

At operation the workflow authoring tool determines whether any workflow actions are needed from the server computer . If no workflow actions are needed the routine branches from operation to operation described below. If workflow actions are needed the routine continues from operation to operation to . At operation to the workflow authoring tool transmits a request for the data necessary to build the workflow action proxies to the server computer . As discussed briefly above rather than downloading all of the needed workflow actions the workflow authoring tool builds proxies for each of the needed workflow actions .

The workflow action proxies are objects that model a corresponding workflow action . The proxies include the properties of the corresponding workflow action and the appropriate interfaces. However the workflow action proxies do not provide any implementation for the methods contained in the corresponding workflow action . In this manner the workflow action proxies appear to the authoring tool to be valid workflow actions that can be utilized in a workflow schedule . The workflow action proxies can therefore be utilized when creating a workflow schedule . As will be described in greater detail below the actual workflow actions are utilized by the server computer when the workflow schedule is instantiated.

The server computer receives the request for the workflow action proxy data at the operation of the routine . In response thereto the routine continues to operation where the server computer identifies the actions that are authorized for use in a workflow schedule . This may be accomplished for instance by examining the contents of the safe workflow actions list . The safe workflow actions list comprises a list of all of the workflow actions that are authorized for use in a workflow schedule . A workflow action that is identified in the safe workflow actions list as being authorized for use in a workflow schedule is referred to herein as being safe for use. Once the server computer has identified the safe workflow actions the server computer then determines whether each of the workflow actions for which proxy data has been requested are safe. The server computer will not return proxy data for any workflow action that is not safe.

From operation the routine continues to operation where the server computer serializes the properties methods and other information necessary to generate the workflow action proxies for each of the safe workflow actions into an extensible markup language XML document. The routine then continues to operation where the XML document is transmitted to the workflow authoring tool .

At operation of the routine the authoring tool receives the XML document containing the metadata necessary to build the workflow action proxies for each of the needed workflow actions . Once the XML document has been received the routine continues to operation where the authoring tool builds the workflow action proxies for each of the needed workflow actions . Once the proxies have been created the authoring tool loads the proxies into memory for use.

From operation the routine continues to operation to where the workflow designer may be utilized by a user to create the workflow schedule . As described above the workflow designer provides a user interface through which workflow actions can be visually arranged to create the workflow schedule . During this process the workflow action proxies are used in place of the workflow actions to which they correspond.

When the user has finished building the workflow schedule using the workflow designer the routine continues from operation to operation . At operation the authoring tool validates the workflow schedule . The routine then continues to operation where the authoring tool transmits the workflow schedule to the server computer . The server computer receives the workflow schedule at operation of the routine and saves the workflow schedule to the document library . As will be discussed in greater detail below in one implementation the document library comprises a versioned document storage library provided by the collaborative application . When a workflow schedule is stored in the document library it is assigned a version number. The version number of each workflow schedule is utilized to ensure that an instance of a particular version of a workflow schedule is executed until it completes. This ensures that newer versions of a workflow schedule will not conflict with the execution of a previous version of the same workflow schedule . Additional details regarding this process will be described below with reference to .

From operation the routine continues to operation where the authoring tool transmits a request to the server computer to validate the workflow schedule . The server computer may expose a remote application programming interface API for this purpose. In response to receiving the validation request the server computer validates the workflow schedule and verifies that all of the workflow actions identified in the workflow schedule are safe. The routine then continues to operation where the server computer returns a success message to the authoring tool if the workflow schedule is valid. If the workflow schedule is not valid the server computer returns a failure response to the authoring tool .

At operation of the routine the authoring tool receives the response to the validation request from the server computer . At operation the authoring tool determines if the response indicated that the workflow schedule included errors. If the workflow schedule has errors the routine branches from operation to operation where the errors are displayed. The routine then continues from operation to operation . At operation described above the workflow designer may be utilized to correct any errors in the workflow schedule .

If the response from the server computer indicates that the workflow schedule is valid the routine continues from operation to operation . At operation the authoring tool calls a remote API on the server computer for associating the workflow schedule with a list on the server computer . In the context of the collaborative application workflow schedules are executed against items and documents identified within various lists. Multiple workflow schedules may be executed against a given document or item in a list. By associating the workflow schedule with a list an indication is being provided regarding the types of documents or items with which the workflow schedule should be utilized. The server computer performs the association request at operation . Once the association request has been completed the routines and continue to operations and respectively where they end.

Referring now to an illustrative routine will be described illustrating aspects provided herein for executing workflow schedules with reference to the version numbers assigned to the schedules when they are stored in the document library . In particular the routine begins at operation where a decision is made as to whether a workflow schedule should be executed. As described above a workflow may be executed in response to an item in a list changing an item being added to a list or in response to a manual request. Additionally instantiated workflows may be paused during execution. The occurrence of events or other conditions identified in the workflow may cause the previously instantiated workflow to continue execution. Accordingly the determination made at operation is whether to execute a new instance of a workflow schedule or to continue the execution of a previously instantiated version of a workflow schedule . If a workflow schedule is to be executed the routine continues from operation to operation .

At operation a determination is made as to whether the workflow schedule to be executed is a new instance of the workflow or a previously instantiated instance of the workflow. If the workflow schedule to be executed is a new instance of the workflow the routine branches from operation to operation . At operation the latest version of the workflow schedule to be executed is retrieved from the document library . The routine then continues to operation where the workflow actions in the workflow schedule to be executed are again validated against the safe workflow actions list . If the workflow schedule contains any workflow actions not identified in the safe workflow actions list the unsafe actions will not be executed.

Once the workflow schedule has been validated the routine continues from operation to operation . At operation the workflow schedule is compiled into an executable assembly. The routine then continues to operation where the compiled workflow assembly is passed to the workflow execution engine in the WF for execution. At operation the instance of the workflow schedule is executed. From operation the routine continues to operation where it ends.

If at operation the server computer determines that the workflow to be executed is a previously instantiated workflow the routine branches from operation to operation . At operation the previously instantiated version of the workflow is executed using the version of the workflow schedule stored in the document library . By executing previously instantiated workflows using their originally assigned version number each instance of a workflow continues executing using the appropriate version of the workflow schedule until the instance has completed its execution. In this manner the workflow schedule can be edited and modified while instances of the workflow schedule are executing without causing a conflict. From operation the routine continues to operation where it ends.

Referring now to an illustrative user interface provided by the workflow authoring tool for declaratively binding data sources to parameters in workflow actions will be described. In particular show several illustrative user interfaces and that can be utilized by a workflow designer to graphically bind data sources to the various parameters utilized by a workflow action .

As discussed above workflow schedules can include decision logic that allows actions to be performed when certain conditions are met. For instance a rule may be created within a workflow schedule that assigns an expense report to a manager for approval when the total amount of the expense report is less than a certain amount. The user interfaces and shown in allow the workflow designer to specify the properties of such a rule in a graphical manner. Through these user interfaces the user has the option of specifying a static value for each property or choosing to make the parameter data driven so that at runtime the value loaded into the parameter is looked up dynamically. Parameters may be assigned to data fields within any list maintained by the collaborative application .

The user interface shown in is displayed when a user is graphically creating the conditions and actions for two rules A and B that define one step of a workflow. In the example shown in the user is defining a process for the approval of a business expense. When a parameter of the condition or action may be specified by a user an icon is displayed adjacent to the parameter thereby indicating that the parameter can be specified or bound to a data value. In response to the selection of the icon the user interface described below with respect to is presented.

Once the user has bound a parameter to a data value in the manner described below with reference to the parameters are illustrated in the user interface with underlining to indicate that they are a hyperlink that can be selected and modified. For instance in the example shown in the parameters A E have been underlined thereby indicating that they are selectable parameters that have been bound to a data source or manually specified. The parameters A E can be selected to modify the specified value or source of the data bound value.

If a user has requests that a parameter be bound to an external list the query must be narrowed down so that a single item may be returned. In order to accomplish this the user interface includes two additional drop down menus C and D. When selected the drop down menu C lists the set of fields in the external list chosen in the manner described above. The drop down menu D identifies the set of workflow parameters and the set of fields in the associated list when selected. The drop down menu D is also editable so that the user can type in a value.

According to one implementation the user interface also includes a button that allows a user to data bind multiple levels of the user interface . In particular selection of the button allows a user to input an expression that defines the item in the lookup list that should be bound to. The user interface may also include a button for clearing the contents of the fields of the user interface . It should be appreciated that although drop down menus and buttons have been utilized in the illustrative user interface shown in other types of suitable user interface controls may be utilized that allow a user to select from a list of data sources and fields.

Turning now to an illustrative routine will be described for declaratively binding a workflow action parameter to a data source and for propagating the data type for data returned from a data source to the data type of the parameter. In particular the routine begins at operation where the authoring tool displays the user interface shown in for specifying the actions and conditions of the workflow. The routine then continues to operation where a determination is made as to whether a user has requested that a parameter be bound to a data source. This may occur for instance in response to a user selecting one of the parameters A E displayed in the user interface . If a user does request that a workflow action parameter be bound to a data source the routine continues from operation to operation .

At operation the workflow authoring tool displays the user interface for declaratively binding a data source to a workflow parameter shown in . The user is then permitted to select the drop down menus A and B to select the data source to which the selected workflow parameter will be bound. According to one implementation the drop down menus A and B will only include sources and fields having data types that are compatible with the data type of the selected workflow parameter. This occurs at operation of the routine .

At decision operation a determination is made as to whether the data type for the selected workflow parameter the target is the same as the same as the data type for the selected data source the source . If the data types are the same then an internal lookup of the data may be performed to provide the highest fidelity data lookup. This occurs at operation . If however the data types are not the same the data contained in the source must be converted to the data type of the target. In order to perform this procedure the routine branches from operation to operation where a friendly data lookup is utilized.

A friendly data lookup allows data of one data type to be converted to data of another data type. For instance if the source is a number type while the target is a string type the number type may be converted to a string upon lookup. Other data transformations may also be provided by the friendly lookup procedure. In this manner the data type of the target is propagated to data retrieved from the source.

Once the user has selected the desired data source using the user interface the routine continues from operations and to operation where the workflow property is bound to the selected data source. Using either the direct lookup or the friendly lookup described above data from the data source is retrieved and utilized in the workflow parameter at runtime. From operation the routine continues to operation where it ends.

Referring now to an illustrative computer architecture for a computer utilized in the various embodiments presented herein will be discussed. The computer architecture shown in illustrates a conventional desktop laptop computer or server computer. The computer architecture shown in includes a central processing unit CPU a system memory including a random access memory RAM and a read only memory ROM and a system bus that couples the memory to the CPU . A basic input output system containing the basic routines that help to transfer information between elements within the computer such as during startup is stored in the ROM . The computer further includes a mass storage device for storing an operating system application programs and other program modules which are described in detail above with reference to .

The mass storage device is connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer readable media provide non volatile storage for the computer . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer readable media can be any available media that can be accessed by the computer .

By way of example and not limitation computer readable media may include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer readable media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer .

According to various embodiments the computer may operate in a networked environment using logical connections to remote computers through a network such as the Internet. The computer may connect to the network through a network interface unit connected to the bus . It should be appreciated that the network interface unit may also be utilized to connect to other types of networks and remote computer systems. The computer may also include an input output controller for receiving and processing input from a number of other devices including a keyboard mouse or electronic stylus not shown in . Similarly an input output controller may provide output to a display screen a printer or other type of output device also not shown in .

As mentioned briefly above a number of program modules and data files may be stored in the mass storage device and RAM of the computer including an operating system suitable for controlling the operation of a networked desktop or server computer such as the WINDOWS XP operating system from MICROSOFT CORPORATION of Redmond Wash. or the WINDOWS VISTA operating system also from MICROSOFT CORPORATION. The mass storage device and RAM may also store one or more program modules. In particular the mass storage device and the RAM may store a Web browser program a collaborative application and the other program modules described above with respect to . Other program modules may also be stored in the mass storage device and utilized by the computer .

Based on the foregoing it should be appreciated that systems methods and computer readable media for remotely authoring a workflow schedule are provided herein. Although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

