---

title: Mapping web services description language documents to XQuery functions
abstract: Using a WSDL document to exchange an interface definition for back-end business logic includes automatically mapping various elements of the WSDL document to corresponding XQuery elements to generate an XQuery interface definition “skeleton”. From such an XQuery interface skeleton, an XQuery statement can be generated by filling in the body of the function that implements the logic. The XQuery statement serves as an interface definition for an interface to the function. Furthermore, at runtime a Web Service request that is based on the WSDL document can be translated into an XQuery call into an XQuery function that implements the logic defined in the WSDL document. From there, results are obtained from the XQuery function, translated into the appropriate return format defined in the WSDL, and returned.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07945893&OS=07945893&RS=07945893
owner: Oracle International Corporation
number: 07945893
owner_city: Redwood Shores
owner_country: US
publication_date: 20061010
---
The present invention relates generally to data management and more specifically to techniques for mapping Web Services Description Language WSDL document content to XQuery functions.

The Web Services Description Language WSDL which is sometimes referred to as Web Services Definition Language is an XML format for describing network services as a set of endpoints operating on messages containing either document oriented or procedure oriented information. WSDL is described in Web Services Description Language WSDL 1.1 W3C Note 15 Mar. 2001 available from the World Wide Web Consortium W3C the entire content of which is incorporated by reference in its entirety for all purposes as if fully disclosed herein. WSDL provides a well defined standard for distribution and use of information contained within a WSDL document.

The XQuery language is described in XQuery 1.0 An XML Query Language W3C Working Draft 4 Apr. 2005 available from the W3C organization the entire contents of which are incorporated by reference for all purposes as if fully disclosed herein. XQuery is a popular programming language for querying XML data sources. In addition to providing for extraction of data from an XML data source XQuery may also be used to facilitate XML data manipulations and transactional operations via for example XQuery functions. XQuery is designed to be a language in which statements are concise and easily understood. XQuery is also flexible enough to use with a broad spectrum of XML information sources including both databases and documents. XQuery operates on the abstract logical structure i.e. the data model of an XML document rather than its surface syntax. Thus the XQuery language provides an option in which programmers can develop business logic for applications and services.

The approaches described in this section are approaches that could be pursued but not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

Techniques are described herein for using WSDL documents as a means for exchanging interface definitions or descriptions for interfacing with back end business logic. For example a WSDL document can be used to exchange an interface definition for an XQuery module instead of using XQuery itself to exchange such an interface definition. Various elements of the WSDL document are automatically mapped to corresponding XQuery elements to generate an XQuery interface skeleton . From such an XQuery interface skeleton an XQuery statement can be generated by filling in the body of the function that implements the logic. Hence the XQuery statement serves as an interface definition or description for an interface to the function.

Furthermore a WSDL document can be used similarly to a functional specification for one or more operations whereby the WSDL document is effectively used to define XQuery functions corresponding to the one or more operations. For example a WSDL document defines a call to a particular operation and exposes the business logic of the particular operation. Thus if one wanted to implement the particular operation in XQuery then the WSDL document can be used to generate an XQuery interface to an XQuery implementation of a function corresponding to the operation. Hence at runtime a Web Service request that is based on the WSDL document can be translated into an XQuery call into the XQuery implementation of the operation. From there results are obtained from the XQuery function translated into the appropriate return format defined in the WSDL and returned.

As mentioned WSDL is an XML format for describing network services and provides a well defined standard for distribution and use of information contained within a WSDL document such as WSDL document . The content of WSDL document includes WSDL content . The example depicted as WSDL content is an interface definition for an operation referred to as getSalary where the operation parameter is named emp id i.e. referring to employee identifiers and whose data type is defined as an integer i.e. int . Furthermore WSDL content defines that the data returned by execution of operation getSalary is of type float . Hence WSDL content defines an interface to some logic that is or can be implemented as operation getSalary.

Note that upon creation of WSDL document there may or may not be an actual implementation existing yet for operation getSalary. In a context in which there is no actual implementation of getSalary yet developed WSDL document therefore functions as an interface definition for the logic embodied in operation getSalary by specifying an interface comprising an operation name getSalary a corresponding parameter name emp id and data type integer and a return data type float . Furthermore WSDL document can contain or otherwise reference e.g. via a schema a description of the functionality of operation getSalary such that one could develop an implementation of the functionality of operation getSalary in a programming language of choice.

According to one embodiment mapping module operates to automatically map WSDL content to a corresponding XQuery statement where XQuery statement is an XQuery implementation of the interface definition of WSDL content . Hence XQuery statement which is generated by mapping module based on WSDL content is an XQuery interface definition for an interface to a function get Salary which corresponds to the WSDL defined operation getSalary. Thus XQuery statement defines an interface to a function referred to as getSalary where the function argument is named emp id and whose data type is defined as an integer. Furthermore XQuery statement defines that the data returned by execution of function getSalary is of type float . Hence XQuery statement defines an interface to some logic that is or can be implemented as function getSalary. The manner in which mapping module maps WSDL content to XQuery statements is described in greater detail herein.

Filling in the body of the skeleton XQuery statement with arguments or other runtime data would then provide a method for invoking the logic of getSalary and returning the results thereof regardless of in what language the logic is coded. Depending on what language is used to implement the logic of getSalary calling into such logic may require runtime translation of received requests as described in greater detail in reference to .

At block a WSDL document is received which defines describes or specifies an interface to a certain operation. In this context the WSDL document is being used as a universal interface definition document which can be registered with a Universal Description Discovery and Integration UDDI registry a platform independent XML based registry for businesses worldwide to list themselves on the Internet or otherwise made available to interested parties. Thus the interested parties can access the WSDL document and interpret its contents in order to understand the specified interface to the certain operation and perhaps to develop some logic to implement the certain operation in a language of choice.

At block based on the WSDL document a set of one or more XQuery statements is automatically generated which function as the interface definition for the certain operation. For example WSDL content is mapped to a corresponding XQuery statement via mapping module . Hence the corresponding XQuery statement generated at block can function as an interface definition for an exposed function that corresponds to the certain operation described in the WSDL document received at block .

The manner in which elements of a WSDL document map to corresponding elements of an XQuery statement according to one embodiment is presented in Table 1. However WSDL XQuery element mappings may vary from implementation to implementation and need not be precisely as depicted in Table 1.

Suppose a party is in possession of a WSDL definition and an empty XQuery engine. The party could run the WSDL definition through the automated WSDL XQuery mapping operation described herein and would now have an XQuery skeleton that defines an interface to the operation defined in the WSDL definition. If the operation is in fact implemented as an XQuery function then the WSDL definition further serves as an interface definition for the XQuery function which can be called using XQuery based on the WSDL interface definition.

Generally such a WSDL XQuery mapping operation primarily involves mapping the WSDL operations and data types to corresponding XQuery functions with functionally equivalent data types. In most cases simple data types in WSDL e.g. scalar types like integer number float etc. directly map to the same simple data types in XQuery because both XQuery and WSDL use the same data types. However in some scenarios WSDL data types may have to map to XQuery supertypes. In most cases complex data types in WSDL map to similar complex types in XQuery whereby complex type elements are mapped to nodes in the XQuery function. Furthermore if the WSDL references a schema for the complex type either inline or out of line the schema is registered with the managing system and tied to the WSDL parameter that maps to a corresponding XQuery argument. According to one embodiment WSDL supports annotations that allow for the distinction between scalar parameters and attribute parameters. Likewise the complex types in the WSDL are handled in the same manner.

If mapping a WSDL definition that defines multiple operations to a corresponding XQuery module that collectively defines or implements the functionality of the multiple operations the entire bundle of functions embodied in the XQuery module can be imported in one operation because all XQuery modules typically reside in a target namespace. For XQuery modules there are multiple input output elements messages and optionally multiple port bindings. However the mapping process for each function in the module is the same as described herein for a single function.

An example of a WSDL definition and how it maps to a corresponding XQuery statement according to an embodiment of the invention is as follows. Consider the following WSDL definition for an operation FOO shown with line numbers for reference .purposes 

The foregoing WSDL definition for the operation FOO includes input and output definitions SNUMBER FOOInput line and FOOOutput line respectively. For FOOInput corresponding parameter names and types are defined element A as type double and element B as type string lines . For FOOOutput corresponding parameter names and types are defined RETURN of type double line . The WSDL definition also defines how to invoke the service implementation of operation FOO by describing the content port type and bindings for input and output messages FOOInputMessage and FOOOutputMessge respectively at lines . The WSDL definition for the operation FOO also includes a schema target namespace line which is discussed in greater detail hereafter.

According to one embodiment a corresponding XQuery statement is generated by mapping elements from the WSDL definition to corresponding elements of the XQuery statement. Based on the foregoing WSDL definition for operation FOO a corresponding XQuery statement in simplified form is as follows 

The foregoing mapping of a WSDL operation and invocation definition to a corresponding XQuery function and invocation definition provides a general example of how a WSDL definition can be used as an application programming interface definition for a function that can be implemented in the XQuery language using the well defined standard of WSDL for ease of distribution and use.

A non limiting example of one use case is for a system architect to define an application A based on a WSDL document W where there is not yet a back end implementation of application A developed. The architect could pass the WSDL document to application developers to function as an interface definition for application A. Thus the developers could decide that the functionality that the architect wants exposed by an implementation of application A will be developed in XQuery and can use the automated WSDL XQuery mapping technique described herein to convert the WSDL document to a corresponding XQuery statement.

Another non limiting example of one use case is in the context of a party wanting to call into some common functionality on multiple different databases. The party should not have to change the calling code for calling into the common functionality on each of the multiple databases. Thus the party can generate a WSDL document that defines the common functionality into which they want to call and tell the application developers to base their application embodying the common functionality on the WSDL document. Consequently the party is ensured that common calling code can be used to access the functionality across the multiple databases.

Another non limiting example of a use of the described WSDL XQuery mapping technique involves an XQuery implementation of a function corresponding to an operation defined in a WSDL definition. is a block diagram that illustrates a functional environment in which an embodiment of the invention may be implemented. depicts a Web Service request the WSDL XQuery interface definition mapping module an XQuery call to an XQuery implementation an XQuery return and a Web Service return .

Request depicts a request for a Web Service getSalary which takes as input a value for emp id. Request is formulated based on a WSDL definition document such as WSDL document . According to one embodiment request is routed to mapping module for translation into an XQuery call into an XQuery implementation of function getSalary. Execution of the XQuery implementation outputs XQuery return . XQuery return is routed to mapping module for translation into Web Service return in the appropriate return format defined in the WSDL and then returned to the requestor.

Hence mapping module can be 1 configured to convert a WSDL based application interface definition into an XQuery based application interface definition as described in reference to and and 2 configured to convert a Web Service request in a form as defined in a WSDL document to an XQuery based direct call into an XQuery implementation of the Web Service defined in the WSDL document as described in reference to . On one hand Web Services and Service Oriented Architecture SOA generally are becoming industry standards for business solution design and deployment. On the other hand XQuery can be run in a mid tier as well as in a database. Thus the techniques described herein tie together these two powerful entities and enables users to move seamlessly between the two.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

The invention is related to the use of computer system for implementing the techniques described herein. According to one embodiment of the invention those techniques are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another machine readable medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus embodiments of the invention are not limited to any specific combination of hardware circuitry and software.

The term machine readable medium as used herein refers to any medium that participates in providing data that causes a machine to operation in a specific fashion. In an embodiment implemented using computer system various machine readable media are involved for example in providing instructions to processor for execution. Such a medium may take many forms including but not limited to non volatile media volatile media and transmission media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications. All such media must be tangible to enable the instructions carried by the media to be detected by a physical mechanism that reads the instructions into a machine.

Common forms of machine readable media include for example a floppy disk a flexible disk hard disk magnetic tape or any other magnetic medium a CD ROM any other optical medium punchcards papertape any other physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM any other memory chip or cartridge a carrier wave as described hereinafter or any other medium from which a computer can read.

Various forms of machine readable media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are exemplary forms of carrier waves transporting the information.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution. In this manner computer system may obtain application code in the form of a carrier wave.

In the foregoing specification embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. Thus the sole and exclusive indicator of what is the invention and is intended by the applicants to be the invention is the set of claims that issue from this application in the specific form in which such claims issue including any subsequent correction. Any definitions expressly set forth herein for terms contained in such claims shall govern the meaning of such terms as used in the claims. Hence no limitation element property feature advantage or attribute that is not expressly recited in a claim should limit the scope of such claim in any way. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

