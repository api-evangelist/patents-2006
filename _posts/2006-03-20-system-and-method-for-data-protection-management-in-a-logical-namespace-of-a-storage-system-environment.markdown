---

title: System and method for data protection management in a logical namespace of a storage system environment
abstract: A system and method for data protection in a logical namespace of a storage system environment is provided. An integrated management framework implements a data protection technique that monitors failures in the logical namespace at a managed data object granularity, e.g., a share. In the event of a failure to the data object, e.g., a primary share, the data protection technique enables automatic failover for a link point to the object (primary share) that is protected by a backup copy of the data object, e.g., a secondary share. That is, the data protection technique enables failover from the primary share to a secondary share and corresponding linking of the secondary share to the link point in the logical namespace.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07734951&OS=07734951&RS=07734951
owner: NetApp, Inc.
number: 07734951
owner_city: Sunnyvale
owner_country: US
publication_date: 20060320
---
The present invention is related to the following commonly assigned U.S. patent application Ser. No. 11 384 711 titled System and Method for Integrating Namespace Management and Storage Management in a Storage System Environment filed herewith which application is hereby incorporated by reference.

The present invention relates to storage systems and more specifically to data protection in a logical namespace of a storage system environment.

A storage system typically comprises one or more storage devices into which information may be entered and from which information may be obtained as desired. The storage system includes an operating system that functionally organizes the system by inter alia invoking storage operations in support of a storage service implemented by the system. The storage system generally provides its storage services through the execution of software modules such as processes. The storage system may be implemented in accordance with a variety of storage architectures including but not limited to a network attached storage environment a storage area network and a disk assembly directly attached to a client or host computer. The storage devices are typically disk drives organized as a disk array wherein the term disk commonly describes a self contained rotating magnetic media storage device. The term disk in this context is synonymous with hard disk drive HDD or direct access storage device DASD .

The storage system may be further configured to operate according to a client server model of information delivery to thereby allow many clients to access information stored on the system. In this model the storage system may be embodied as file server executing an operating system such as the Microsoft Windows operating system hereinafter Windows operating system . Furthermore the client may comprise an application executing on an operating system of a computer that connects to the server over a computer network such as a point to point link shared local area network wide area network or virtual private network implemented over a public network such as the Internet. Each client may request the services of the server by issuing storage access protocol messages in the form of packets to the server over the network. By supporting a plurality of storage e.g. file based access protocols such as the conventional Common Internet File System CIFS and the Network File System NFS protocols the utility of the server is enhanced.

To facilitate client access to the information stored on the server the Windows is operating system typically exports units of storage e.g. CIFS shares. As used herein a share is equivalent to a mount point or shared storage resource such as a folder or directory that stores information about files or other directories served by the file server. A Windows client may access information in the directory by mounting the share and issuing a CIFS protocol access request that specifies a uniform naming convention UNC path to the share. The UNC path or pathname is an aspect of a Windows networking environment that defines a way for a client to refer to a unit of storage on a server. The UNC pathname is prefixed with the string to indicate resource names on a network. For example a UNC pathname may comprise a server name a share directory name and a path descriptor that collectively reference a unit of storage or share. Thus in order to access the share the client typically requires knowledge of the specific physical location i.e. the identity of the server exporting the share.

Instead of requiring the client to provide the specific identity of the file server exporting the share it is desirable to only require a logical pathname to the share. That is it is desirable to provide the client with a globally unique pathname to the share without reference to the file server. The conventional Distributed File System DFS namespace service provides such a solution in a Windows environment through the creation of a namespace that removes the specificity of server identity. DFS is well known and described in 1.2.2 1997 which is hereby incorporated by reference. As used herein a namespace is a view of shared storage resources such as shares from the perspective of a client. The DFS namespace service is generally implemented using one or more DFS servers and distributed components in a network.

Using the DFS service it is possible to create a unique pathname in the form of a UNC pathname for a storage resource that a DFS server translates to an actual location of the resource share in the network. However in addition to the DFS namespace provided by the Windows operating system there are many other namespace services provided by various operating system platforms including the NFS namespace provided by the conventional Unix operating system. Each service constructs a namespace to facilitate management of information using a layer of indirection between a file server and client accessing a shared storage resource share on the server. For example a share may be connected or linked to a link point link in DFS terminology or a mount point in NFS terminology to hide the machine specific reference to the share. By referencing the link point the client can automatically access information on the storage resource of the specific machine. This allows an administrator user to store the information on any server in the network by merely providing a reference to the information or share . However these namespaces are typically services created on heterogeneous server platforms which leads to incompatibility and non interoperability with respect to management of the namespaces by the user. For example the DFS namespace service is generally limited to Windows based operating system platforms whereas the NFS namespace service is generally limited to Unix based operating system platforms.

The Virtual File Manager VFM developed by NuView Inc. and available from Network Appliance Inc. NetApp provides a namespace service that supports various protocols operating on various file server platforms such as NetApp filers and DFS servers. The VFM namespace service is well known and described in 4.0 2001 2003 and 4.0 2001 2003.

A difficult and time consuming issue involved with managing a server such as a file server or filer is copying data e.g. a data set from an original server primary server to another server backup server to protect against data loss corruption due to primary server failure. As used herein a data set is defined as one or more storage units such as volumes and or qtrees that when combined represent data being protected against disaster. A qtree is a special directory that has the properties of a logical sub volume within a physical volume.

One way to copy or duplicate a data set onto a backup server to ensure against total primary server failure is to replicate a primary server data set at the backup server using conventional data replication facilities such as remote asynchronous mirroring. In this sense the duplicated data set could include all or part of a file system. An example of an asynchronous data replication facility is the SnapMirror facility available from Network Appliance Inc. Examples of techniques for duplicating all or part of a file system that may be advantageously used with the invention are described in U.S. patent application Ser. Nos. 09 127 497 titled File System Image Transfer by Kleiman et al filed Jul. 31 1998 and issued on Aug. 5 2003 as U.S. Pat. Nos. 6 604 118 and 09 426 409 titled File System Image Transfer Between Dissimilar File Systems by Kleiman et al. filed Oct. 25 1999 and issued on Jun. 3 2003 as U.S. Pat. No. 6 574 591 which applications are hereby incorporated by reference as though fully set forth herein.

Broadly stated the SnapMirror facility periodically replicates a data set stored on a primary server source filer to a backup server destination filer at a user definable time interval with the range being from one minute to one month. At the end of each data replication event the backup data set becomes an exact block for block mirror copy of the primary data set. At that point the two data sets share identical data content and characteristics. The mirror is initialized by effectively copying the entire primary data set to the backup data set. Once this initial copy is complete replication events thereafter copy only changed blocks from the primary data set to the backup data set to thereby provide an efficient data replication mechanism.

It is also possible to protect a unit of storage such as share on a primary data set that is exported by a namespace which is used to access the share using the data replication facility. Often there is more than one location link within the namespace where the share may reside. Once the share is protected and in response to a source filer failure another mechanism is needed to specify actions to be taken to failover the link to the backup data set on the destination filer. Such a mechanism may include a management application that detects a failure on the source filer and invokes the mirror on the destination filer.

Previous namespace services such as the VFM namespace service have the capability to monitor a source share on a source volume and or qtree of a source filer and upon a failure insert a destination share on the mirror of the destination filer into a namespace. However such services monitor failures at the filer level. A noted disadvantage of this approach is that if the original volume is taken offline or otherwise fails on the source filer the services do not detect that a failure to the source share has occurred and the management application cannot invoke the mirror to access the destination share. Accordingly applications requiring access to the destination share fail. In addition it is possible for the source filer and source volume to be operational but the source share to be inaccessible. For example the source share may be deleted or its properties changed so that it is no longer accessible. Since the previous services cannot detect such a source share failure the insertion of the destination share into the namespace does not occur.

The disadvantages of the prior art are overcome by providing a system and method for data protection in a logical namespace of a storage system environment. An integrated management framework implements a data protection technique that monitors failures in the logical namespace at a managed data object granularity e.g. a share. In the event of a failure to the data object e.g. a primary share the data protection technique enables automatic failover for a link point to the object primary share that is protected by a backup copy of the data object e.g. a secondary share. That is the data protection technique enables failover from the primary share to a secondary share and corresponding linking of the secondary share to the link point in the logical namespace.

According to the technique an administrator user creates a data protection policy that specifies failover characteristics when the managed data object i.e. the primary share is inaccessible. A namespace and storage management NSM server of the integrated management framework cooperates with a NSM console and a remote agent to monitor the primary share e.g. a source share on a source volume of a data replication event for failure. Upon detecting such a failure the integrated management framework creates a secondary backup copy of the share e.g. a destination share on a destination volume of the replication event . The NSM server then automatically switches a namespace reference in the logical namespace from the source share to the destination share to thereby make the destination share available through the namespace.

Advantageously the present invention monitors failure at a managed data object level e.g. at the share level as opposed to a host machine level e.g. at the filer level to thereby provide enhanced robust data failure protection. That is if the source volume of a source filer fails the integrated management framework detects the failure of the source share on the source volume and invokes a namespace switch operation to replace a namespace link point to the source share with a link point to the destination share on the destination volume. Moreover the invention provides a data protection policy that once created can be applied to one or more data protected link points to specify the failover action to be taken on each link point. The data protection policy also provides a reusable way to specify failover characteristics of multiple data protected link points at multiple locations simultaneously.

Each client may comprise an application executing on an operating system of a general purpose computer that interacts with the file servers in accordance with a client server model of information delivery. That is the client may request the services of a server and the server may return the results of the services requested by the client by exchanging packets over the network . The client may issue packets including storage e.g. file based access protocols such as the Common Internet File System CIFS protocol or Network File System NFS protocol over the Transmission Control Protocol Internet Protocol TCP IP when accessing information in the form of e.g. files and directories.

To facilitate client access to the information stored on the server a file server executing e.g. the Windows operating system typically exports units of storage e.g. CIFS shares. A client may access information of the share by mounting the share and issuing a CIFS protocol access request that specifies a uniform naming convention UNC path to the share. Although the illustrative embodiment is directed to a Windows file server that is accessed using the CIFS protocol the invention described herein is not so limited and may also apply to other servers such as Unix file servers and NetApp filers that are accessible using other file access protocols such as the NFS protocol. The client connects to file server when accessing the share typically by specifying the IP address or identity of the file server.

However instead of requiring that the client know the specific identity of the server in order to access the share a namespace server such as the conventional Distributed File System DFS server provides a namespace service that removes the specificity of server identity. Using the DFS service a unique pathname in the form of a UNC pathname is created for the share that the DFS server translates to an actual location of the share in the network. Moreover in a typical Windows environment wherein a group of machines is organized as a domain a domain controller such as a primary domain controller PDC provides security e.g. rights privileges and authentication services for the machines. Note that the PDC and DFS server may reside on separate machines or as in the illustrative embodiment described herein may reside on the same machine as separate services.

For example assume a client application issues a CIFS request to access information of a share stored on a file server in the environment . The request is passed through various layers of the client s operating system including e.g. a CIFS redirector. Before issuing a CIFS packet directed to a UNC pathname specified by the client application the redirector contacts a DFS server to determine whether there is a different actual pathname needed to access the information. At that time the DFS server performs a PDC lookup operation to determine whether the client has the appropriate privileges to access the data. If so the actual pathname is provided to the redirector which then uses that pathname to create the CIFS packet for transmission over the network to the appropriate file server. The DFS namespace service thus provides a level of indirection to a share that resides on a file server in the environment . Upon receiving the packet the file server verifies that the client has the appropriate privileges to access the information.

Although the illustrative embodiment is directed to a DFS namespace service provided by the Windows operating system executing on a DFS server the invention described herein is not limited and may also apply to other namespace services such as the NFS namespace provided by the Unix operating system executing on a conventional Name Information Service NIS server. Each service constructs a namespace to facilitate management of information using a layer of indirection between a file server and client accessing a shared storage resource share on the server. However these namespace services are created on heterogeneous server platforms which lead to incompatibility and non interoperability with respect to management of different namespaces by e.g. an administrator user .

In the illustrative embodiment a namespace and storage management NSM server is provided that integrates namespace management and storage management in storage system environment . The NSM server includes an integrated management framework that provides an underlying infrastructure that supports various heterogeneous storage access protocols within a single logical namespace service. To that end the NSM server cooperates with a NSM console and a remote agent to create the integrated management framework. The integrated management framework in turn allows the NSM server to interact with any namespace server such as a DFS server configured to handle CIFS protocol requests or a NIS server configured to handle NFS protocol requests directed to namespace services.

An operating system portions of which is typically resident in memory and executed by the processing elements functionally organizes the server by inter alia invoking operations in support of storage services implemented by the server. In the illustrative embodiment the operating system is preferably the Windows operating system although it is expressly contemplated that any appropriate operating system such as the Unix operating system may be enhanced for use in accordance with the inventive principles described herein. The operations invoked by the operating system are illustratively namespace and storage operations in support of an integrated management framework provided by the server. It will be apparent to those skilled in the art that other processor and memory means including various computer readable media may be used for storing and executing program instructions pertaining to the invention described herein.

The NSM server generally provides its storage services through the execution of software modules such as processes. These services are illustratively implemented as separately scheduled processes and or daemons that execute in user space of operating system to provide the integrated management framework . As used herein a process refers to an instance of a program being executed by e.g. the processor and a thread is an instance of a sequence of the process s program code. is a schematic block diagram of the integrated management framework in accordance with the present invention. The integrated management framework provides a logical namespace service that is based on extensions to underlying storage management technology and other technological components. Notably these extensions are embodied as library functionality.

In the illustrative embodiment the underlying storage management technology is embodied as DataFabric Manager DFM technology available from Network Appliance Inc. Sunnyvale Calif. and described in 3.2 1994 2004 which is hereby incorporated by reference. Broadly stated the DFM technology comprises a set of coordinating processes including an application programming interface API server a scheduler an Event daemon a Monitor including a Discovery daemon and a database interface DBI configured to interact with an embedded database . The present invention extends the capabilities of these processes to create the integrated namespace and storage management framework through the addition of NSM library functionality . As described herein the NSM library is illustratively implemented as various library modules each of which provides namespace and storage management actions embodied as APIs.

The integrated management framework exposes a set of interfaces e.g. an API interface that is used by the NSM console and a command line interface CLI used by a communication protocol. Illustratively the communication protocol is embodied as an XML over HTTP mechanism for APIs primarily because of its ability to describe data conveyed over the network as well as the transport without describing the actual storage access protocol. An example of a communication protocol that may be advantageously used with the present invention is the ZAPI protocol available from Network Appliance Inc. Such a protocol is also easily extensible and flexibly agnostic to binary formats of specific servers and clients to thereby operate efficiently in a heterogeneous environment.

In the illustrative embodiment the integrated management framework facilitates configuration and management of pathnames in the logical namespace. That is the underlying infrastructure of the framework allows a user to manage various pathnames exported by heterogeneous namespace service and protocol implementations within the logical namespace. This aspect of the framework involves creation of a layer of abstraction that presents to a client a notion of the logical namespace that is accessible via a particular storage access protocol. As noted the various heterogeneous namespace services are not interoperable with respect to user management the integrated framework as described further herein extracts logical views e.g. pathnames from the namespaces exported by the heterogeneous services stores those pathnames in database and then configures the pathnames so that they are accessible in the logical namespace via the storage access protocol.

In storage and networking environments some operations can only be executed if a user such as a system administrator is logged into a server on which the operations are to be performed e.g. the NSM server. In other words a remote operation that is to be invoked on the server can only be performed if the user is logged into the server. The NSM console and remote agent of the integrated management framework address this problem. Illustratively the NSM console is a component of the framework that includes a JAVA based interface and the remote agent is a software module installed on a host machine such as a server . Using the communication protocol the NSM console issues APIs to the NSM server which in turn issues APIs that are invoked on the remote agent to perform actions requested by the user.

Essentially the remote agent is a thin web server that includes programmatic glue to enable installation of plug in modules plug ins that provide certain functionality of the remote agent. Notably the remote agent and plug in module are preinstalled on the host machine i.e. installed during configuration of the machine by e.g. an administrator in a manner that is non obtrusive to operation of the host machine. In the illustrative embodiment plug in modules include a namespace plug in that allows remote access and management of data e.g. pathnames by the NSM server and a migration plug in that provides a migration capability of the remote agent .

The remote agent and plug ins are illustratively constructed without the use of operating system specific code and are integrally adapted to operate on various operating system platforms through the use of operating system calls and APIs specific to each platform. For example a remote agent and plug in that reside on a Windows host machine use Windows operating systems calls and APIs e.g. Win32 APIs to communicate with the host machine. To that end the remote agent may further comprise an API server that cooperates with an API service on Windows platforms or a daemon process on Unix platforms to receive API requests from the NSM server and translate them into host machine calls such as Win32 APIs or Unix system calls.

It should be noted that the underlying directory data structures used in the logical namespace described herein reside on the namespace server providing the particular namespace service such as a DFS server. That is the namespace server implements the basic namespace the NSM server provides a service for configuring that namespace. To that end the NSM server cooperates with the remote agent to acquire a copy of the namespace directory structures from the namespace server and stores the copy on the embedded database . The NSM server then cooperates with the NSM console to allow a user to manipulate configure the copy. Once configuration is complete the server cooperates with the remote agent to push store the manipulated copy of directory structures back to the namespace server .

The Monitor is illustratively embodied as a multi threaded process having a collection of individual monitor threads each of which is scheduled by the scheduler . The Monitor cooperates with the remote agent to communicate with one or more machines devices in the storage system environment using SNMP RSH etc to collect any type of storage or data namespace object information e.g. volume and or qtree information as well as information about namespace servers available in the environment and to that end functions as a data collector. Illustratively each monitor thread is configured to collect information about a particular object in the environment. Extensions to the Monitor are directed to namespace and agent management each of which is illustratively embodied as an individual monitor thread.

As data is collected the Monitor determines whether it needs to notify any processes of some resulting condition. For example an individual monitor thread may detect a threshold and the occurrence of some type of event. As used herein an event is a synchronous notification with a severity attribute. By configuring thresholds the NSM server can determine when an event occurs. An example of a threshold is if volume capacity is greater than 50 generate an event out of space . If a threshold is exceeded the Monitor communicates with the Event daemon to notify it of that event. Thus the Monitor is configured to detect certain events and in response generate event notifications to the Event daemon . The Event daemon then determines what if any further action is needed e.g. send an SMTP alert an email an SNMP trap and records the event in the embedded database .

The embedded database is illustratively implemented as a Sybase relational database that exports a set of Simple Query Language SQL function calls that enable storage retrieval of data such as namespace objects to from the database. A schema of the database is configured to efficiently capture characteristics of a namespace independent of the storage access protocol such as NFS or CIFS. The database is illustratively organized as a plurality of tables each of which can be accessed by processes within the NSM server. The DBI is illustratively embodied as a SQL interface to the database and its associated tables although it will be understood to those skilled in the art that the DBI may be embodied as any other type of database protocol interface depending on the actual implementation of the database e.g. an Oracle database.

The API server is illustratively embodied as a multi threaded process that is configured to implement the APIs used by the NSM console to access the database and manipulate information stored thereon. The API server also implements the communication protocol APIs used to interact with the remote agent . Accordingly extensions to the API server are primarily directed to those APIs required to manipulate the database and the remote agent. For example APIs are invoked by a user via the NSM console to manipulate modify update the embedded database . The API server updates the database with respect to user configuration requests and the Monitor periodically queries polls the database for any state information change. Depending upon the change the API server may cooperate with the Monitor to instruct data collection from the remote agent . After receiving the collected information from the remote agent the Monitor updates the database and the Event daemon .

The present invention is directed to a system and method for data protection in a logical namespace of a storage system environment. The integrated management framework implements a data protection technique that monitors failures in the logical namespace at a managed data object granularity e.g. a share. In the event of a failure to the data object e.g. a primary share the data protection technique enables automatic failover for a link point to the object primary share that is protected i.e. data protected DP by a backup copy of the data object e.g. a secondary share. That is the data protection technique enables failover from the primary share to a secondary share and corresponding linking of the secondary share to the link point in the logical namespace.

In the illustrative embodiment the data protection technique operates in connection with a conventional data replication facility such as a remote asynchronous mirroring facility to copy or duplicate a data set from a primary machine such as a server or filer source filer to a backup machine destination filer to protect against data loss corruption due to source filer failure. As used herein a data set is defined as one or more storage units such as volumes and or qtrees that when combined represent data being protected against disaster. An example of an asynchronous data replication facility is the SnapMirror facility available from Network Appliance Inc.

Broadly stated the SnapMirror facility periodically replicates a data set e.g. a source volume stored on the source filer to the destination filer at a user definable time interval with the range being from one minute to one month. At the end of each replication event the destination volume becomes an exact block for block mirror copy of the source volume. At that point the two volumes share identical data content and characteristics. The mirror is initialized by effectively copying the entire source volume to the destination volume. Once this initial copy is complete replication events thereafter copy only changed blocks from the source volume to the destination volume to thereby provide an efficient data replication mechanism.

According to the technique an administrator user creates a data protection policy that specifies failover characteristics when the managed data object e.g. a source share is inaccessible. Note that a data protection job is an executable entity of the data protection policy that is created in accordance with a policy architecture of the integrated management framework . An example of a policy architecture that may be advantageously used with the present invention is disclosed in previously incorporated U.S. patent application Ser. No. 11 384 711 titled System and Method for Integrating Namespace Management and Storage Management in a Storage System Environment.

Specifically the policy architecture can be employed to create a data protection policy that enables one or more link points for data protection. The user interacts with the NSM console to associate the data protected link points with the policy and the console interacts with the NSM server to persistently save the policy in the embedded database . The data protection policy enables the integrated management framework to monitor a particular data object at any managed data object level e.g. a qtree a volume etc. In the illustrative embodiment however the managed data object level is preferably a CIFS share because that level is a target of a DFS link.

The data protection policy is illustratively created using a policy creation wizard of the NSM console that allows a user to specify a number of parameters for data protection. For example once the user enables data protection DP for one or more link points to one or more primary target source shares the data protection policy may specify failover characteristics in the event the source share link point is inaccessible. Table 1 lists some user selectable parameters of the data protection policy 

The first parameter e.g. automatic failover specifies whether automatic failover of each link point to a source share is enabled by the NSM server upon detecting a failure in the source share i.e. is the link point data protected. If so each source share link is point associated with the policy automatically fails over to a destination share link point. If the automatic failover parameter is not enabled the user manually failovers each source share link point. The second parameter break on failover specifies whether the mirroring relationship between the source and destination backup copy volumes shares should be broken once a failover occurs. The third parameter retry count specifies the number of times the link point is probed before rendering the underlying data of the share inaccessible. The last parameter userdefined script is a user specified script that runs on the NSM server before and after performing a failover.

Upon specifying these parameters the user may persistently save the parameters as a policy under a policy name. To associate a policy with a link point the following parameters shown in Table 2 may be specified by the user 

The first parameter path name is the name or identifier ID of the link point for the source share and the second parameter policy name is the name or ID of the policy. The third parameter destination share name is the name of the secondary target share that is used as a CIFS mount point on the destination share. The last parameter mirror ID is a handle of the mirror used to monitor the status of the mirroring relationship between the source and destination volumes shares.

is Assume a source share resides on a source volume of a source filer and a user employs a data replication facility such as the SnapMirror facility to create a mirror on a destination volume of a destination filer. Assume further that a link point for the source share is inserted exists within the logical namespace. is a flowchart illustrating a procedure for creating a data protection policy in accordance with an embodiment of the present invention. The procedure starts at Step and proceeds to Step where the user interacts with the NSM console to assign a name to the policy. In Step the user interacts with the console to specify that failover should be performed automatically when a failure is detected with the source share and in Step to specify whether the mirroring relationship between the source and destination volumes should be broken in response to the failover. In Step the user interacts with the NSM console to specify the number of times the source share link point is probed before rendering the share and its underlying data inaccessible failed. The procedure then ends at Step .

According to the data protection technique the NSM server of the integrated management framework cooperates with the NSM console and a remote agent to monitor a primary share e.g. a source share on a source volume of a data replication event for failure. In addition these components of the framework may monitor a secondary backup copy of the share i.e. a destination share on a destination volume of the replication event if it exists to ensure that it is accessible. Such monitoring may occur via e.g. a heartbeat signal utilized among the components. If the destination share is not accessible the user is informed through an event e.g. an event message that the source link point is no longer data protected and the state of the source link point is updated to reflect that data protection is disabled.

It should be noted that data protection as described herein is an extension of the monitoring capability of the namespace plug in functionality as a result in an exemplary embodiment the remote agent uses the namespace plug in for data protection in accordance with the invention. Moreover a data protection module of the NSM library may cooperate with the Monitor and the namespace plug in of the remote agent to monitor the source share. Upon detecting a failure to the source share and assuming that the destination share does not exist the components of the integrated management framework cooperate to create the destination share on the destination volume. The NSM server then automatically switches a namespace reference in the logical namespace from the source share to the destination share to thereby make the destination share available through the namespace.

In Step a determination is made as to whether the path to the share is valid and notably whether the share is accessible. If the share file is accessible and can be e.g. opened the remote agent reports that accessible status to the NSM server in Step and the procedure ends at Step . However if the share is not accessible after repeated attempts as specified by e.g. the retry count parameter or a time out timer the remote agent reports that inaccessible status to the NSM server in Step . In Step the NSM server cooperates with the remote agent to create a destination share on the destination volume and in Step makes that destination share available for client access in the logical namespace by e.g. replacing the source share with the destination share and linking the destination share into the namespace. The procedure then ends at Step .

In the illustrative embodiment the NSM server replaces the inaccessible source CIFS share with the destination share in the logical namespace by e.g. exporting a folder on the destination mirror as the destination share. That is the NSM server communicates with the remote agent using APIs to create the destination CIFS share on the destination mirror and then inserts that share into the logical namespace by e.g. issuing a DFS system call to the remote agent to create a new entry in the namespace. Similarly the NSM server inserts a share or link point to the share such as the source share into the logical namespace by issuing a DFS system call to the remote agent to create an entry for that share in the namespace. In response the namespace plug in of the remote agent cooperates with a DFS server to access the namespace and insert the new entry according to a conventional DFS procedure.

Notably the source CIFS share e.g. a primary DFS target can be data protected so that if the primary target fails is inaccessible the NSM server automatically switches over to the mirrored DFS link. That is in response to a failure and corresponding failover operation the primary DFS target is removed from the logical namespace and the destination CIFS share on a destination filer is installed as the secondary target for the DFS link. The NSM server performs the failover operation and instructs the remote agent to provide the pathname for the destination CIFS share to the DFS server which links that secondary DFS target to the DFS link.

Advantageously the present invention provides an easy and efficient way to create a reusable failover policy that may be associated with link points in the logical namespace. Specifically the invention automatically detects a failure of a managed data object e.g. a primary share and causes its link point to failover to a backup copy of data e.g. a secondary share . The invention further allows a user to specify a policy that can be associated with several link points thereby reducing repetition of tasks and rendering administration substantially easier.

The foregoing description has been directed to specific embodiments of this invention. It will be apparent however that other variations and modifications may be made to the described embodiments with the attainment of some or all of their advantages. For instance it is expressly contemplated that the procedures processes and or modules described herein may be implemented in hardware software embodied as a computer readable medium having program instructions firmware or a combination thereof. Accordingly this description is to be taken only by way of example and not to otherwise limit the scope of the invention. Therefore it is the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the invention.

