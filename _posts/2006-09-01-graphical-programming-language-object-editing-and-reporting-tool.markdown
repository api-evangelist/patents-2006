---

title: Graphical programming language object editing and reporting tool
abstract: A method and system of editing a graphical programming language object for designing a process control entity within an off-line database. The method and system enables a user to select one or more programming language object fragments from a library of programming language object fragments, and displays the selected programming language object fragments within a graphical programming language object interface display. The programming language object fragments are programming logic routines for a process control entity, such as steps, transitions and actions. Using the selected programming language object fragments, the user is enabled to configure a graphical programming language object for a process control entity within a graphical programming language object interface display. The graphical programming language object is stored as a configuration file in a format used by the off-line database, and is mapped to a format different from that used by the off-line database for generating reporting documentation and sharing the configuration file with a configuration database.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07668608&OS=07668608&RS=07668608
owner: Fisher-Rosemount Systems, Inc.
number: 07668608
owner_city: Austin
owner_country: US
publication_date: 20060901
---
The present disclosure relates generally to process control systems within process plants and more particularly to an editing and reporting tool for designing a process control entity associated with the process plant.

Process control systems are widely used in factories and or plants in which products are manufactured or processes are controlled e.g. chemical manufacturing power plant control etc. . Process control systems are also used in the harvesting of natural resources such as for example oil and gas drilling and handling processes etc. In fact virtually any manufacturing process resource harvesting process etc. can be automated through the application of one or more process control systems. It is believed the process control systems will eventually be used more extensively in agriculture as well.

Process control systems like those used in chemical petroleum or other processes typically include one or more centralized or decentralized process controllers communicatively coupled to at least one host or operator workstation and to one or more process control and instrumentation devices such as field devices via analog digital or combined analog digital buses. Field devices which may be for example valves valve positioners switches transmitters and sensors e.g. temperature pressure and flow rate sensors perform functions within the process such as opening or closing valves and measuring process parameters. The process controller receives signals indicative of process measurements or process variables made by or associated with the field devices and or other information pertaining to the field devices uses this information to implement a control routine and then generates control signals which are sent over one or more of the buses to the field devices to control the operation of the process. Information from the field devices and the controller is typically made available to one or more applications executed by an operator workstation to enable an operator to perform desired functions with respect to the process such as viewing the current state of the process modifying the operation of the process etc.

The various devices within the process plant may be interconnected in physical and or logical groups to create a logical process such as a control loop. Likewise a control loop may be interconnected with other control loops and or devices to create sub units. A sub unit may be interconnected with other sub units to create a unit which in turn may be interconnected with other units to create an area. Process plants generally include interconnected areas and business entities generally include process plants which may be interconnected. As a result a process plant includes numerous levels of hierarchy having interconnected assets and a business enterprise may include interconnected process plants. In other words assets related to a process plant or process plants themselves may be grouped together to form assets at higher levels.

Engineering a project for a process plant or a process control system is a complex process which starts at a conceptual phase and progresses through to the startup and operations of a process plant or process control system. During the engineering and design of a project engineering details are pulled together covering the process and plant design selection of instrumentation and control devices selection of a control system engineering of the control system installation commissioning and startup. These engineering details are captured in a variety of databases and are pulled together into a common configuration system. The configuration system is used to generate reports for communication with end users such as customers generating project and process control strategy configuration. The reporting documents are often generated using standardized documentation tools such as hypertext markup language HTML portable document format PDF Microsoft Word Microsoft Visio etc.

There are many aspects to configuring a distributed process control system including but not limited to I O control strategy batch object linking and embedding OLE for process control OPC integration history displays etc. The configuration system and underlying database provides tools and infrastructure for configuring a integrated solution to a process control system project. Configuration systems such as DeltaV sold by Fisher Rosemount Systems Inc. of Austin Tex. and configuration system applications such as Explorer Control Studio Recipe Studio Graphics Studio and User Manager each sold by Fisher Rosemount Systems Inc. of Austin Tex. are used to configure the entire process control strategy displays I O alarm strategies history and events users and their roles and every other part of the process control system. Such an arrangement works well if the configuration system is in the central database but this is not always the case.

The overall configuration process often extends beyond what the configuration system is designed to support. For example I O definitions device specifications unit requirements and other information may be specified and configured using tools and databases that are separate from the configuration system. While using this information to configure the configuration system is very straightforward it is often the case that the configuration databases use formats that are not understood by other design tools. These databases are also not understood by applications that project teams often work with as tools of choice across the entire project lifecycle such as Microsoft Excel Microsoft Word SQL Microsoft Visio etc. Furthermore not all members of a project team have the configuration system software installed and often a project team wants to perform their work off line using commonly available tools. Using such tools makes it much easier to exchange data with other contributors to the project and to exchange data with the end user. Once the off line data is ready the data needs to be imported to the configuration system. If the data is modified within the configuration system or by another off line database then the modified data needs to be updated with the off line database.

Further project personnel add considerable value in consulting and writing specifications to make sure that the hardware and software design will meet the needs of the end user. Implementation testing and documenting are done once the design has been approved. However techniques to transfer such configuration details should be transferred into the configuration system which may require interfaces and tools to translate the configuration details from one form to another and to transfer configuration details between off line databases. Standardized objects simplify the development of project tools because they provide known data models to communicate with other teams on the project so that there is a clear definition of what data is required and when. They also help the project team quickly rejected bad or incomplete data. The standardized objects have been provided for the continuous control layer e.g. loops motors valves equipment modules etc. but the batch layer e.g. phases operations procedures has been standardized too a much lesser degree.

An editing and reporting tool is provided to edit graphical programming language objects for designing a process control entity within an off line database. A user is enabled to select data relating to programming language object fragments from a library of programming language object fragments. The programming language object fragments are provided as templates of programming logic routines for the process control entity such as steps transitions actions or other portions of programming code. Using the programming language object fragments a user may configure a graphical programming language object such as a sequential function chart SFC object from the programming language object fragments. The editing and reporting tool may be provided as a graphical user interface GUI which enables a user to select representations of the programming language object fragments and present the selected programming language object fragments within a graphical programming language object interface display. Parameters of the programming language object fragments may be modified and interconnections between programming language object fragments may be established in configuring the graphical programming language object. The configured graphical programming language object may be stored as a configuration file in a format used by the off line database. A reporting tool maps the format used by the off line database to a format used by the configuration database and populates a reporting document with the data of the configuration file where the reporting document is in a format different from that used by the off line database. The editing and reporting tool further enables a user to concurrently edit multiple programming language object fragments.

The editing and reporting tool provides an engineering and design productivity tool which works with a variety of formats and provides a user interface and shared library of programming language object fragments that allows a user to create standardized programming language object fragments which may be reused and further allows the user to create composite programming language object fragments from other programming language object fragments. The user is further allowed to store programming language object fragments such as actions steps and transitions as a local library of programming language object fragments to be reused during the editing of a phase class SFC composite or other graphical programming language object. The library of programming language object fragments may be stored in a code library master which distributes copies of the library to other off line databases having the editing and reporting tool. The user may use the local off line database such as an SQL database for storage and use XML as a transportation mechanism when communicating project data with the configuration system.

The editing and reporting tool further enables different project groups to share the same SQL databases and allows a user to construct free formatted documents and storage templates. The documents and templates may be automatically populated with the editing and reporting tool to generate reporting documentation from the off line database as a representation of the algorithm for the graphical programming language object. Conversion between the off line database format and the configuration database format allows a user to work on any configuration system object type using one object type within the off line database.

As such engineering productivity is improved by use of configuration tools throughout the project lifecycle. For example the editing and reporting tool may assist the user to edit a phase class or SFC composite without connecting to a node having the configuration system software and the edited data is stored in the local off line database. Upon completion of an SFC composite phase class or other graphical programming language objects a user can choose to use the editing and reporting tool to synchronize local graphical programming language data with the configuration database by exporting the data from the local off line database into a file format understood by the configuration database such as FHX and importing the data to the configuration database.

Referring now to a process plant includes a number of business and other computer systems interconnected with a number of control and maintenance systems by one or more communication networks. The process plant includes one or more process control systems and . The process control system may be a traditional process control system such as a PROVOX or RS3 system or any other DCS which includes an operator interface A coupled to a controller B and to input output I O cards C which in turn are coupled to various field devices such as analog and Highway Addressable Remote Transmitter HART field devices . The process control system which may be a distributed process control system includes one or more operator interfaces A coupled to one or more distributed controllers B via a bus such as an Ethernet bus. The controllers B may be for example DeltaV controllers sold by Fisher Rosemount Systems Inc. of Austin Tex. or any other desired type of controllers. The controllers B are connected via I O devices to one or more field devices such as for example HART or Fieldbus field devices or any other smart or non smart field devices including for example those that use any of the PROFIBUS WORLDFIP Device Net AS Interface and CAN protocols. As is known the field devices may provide analog or digital information to the controllers B related to process variables as well as to other device information. The operator interfaces A may store and execute tools available to the process control operator for controlling the operation of the process including for example control optimizers diagnostic experts neural networks tuners etc.

Still further maintenance systems such as computers executing the AMS application such as AMS Device Manager sold by Fisher Rosemount Systems Inc. or any other device monitoring and communication applications may be connected to the process control systems and or to the individual devices therein to perform maintenance and monitoring activities. For example a maintenance computer may be connected to the controller B and or to the devices via any desired communication lines or networks including wireless or handheld device networks to communicate with and in some instances reconfigure or perform other maintenance activities on the devices . Similarly maintenance applications such as the AMS application may be installed in and executed by one or more of the user interfaces A associated with the distributed process control system to perform maintenance and monitoring functions including data collection related to the operating status of the devices .

The process plant also includes various rotating equipment such as turbines motors etc. which are connected to a maintenance computer via some permanent or temporary communication link such as a bus a wireless communication system or hand held devices which are connected to the equipment to take readings and are then removed . The maintenance computer may store and execute known monitoring and diagnostic applications for example RBMware sold by CSi Systems of Knoxville Tenn. AMS Machinery Manager sold by Fisher Rosemount Systems Inc. or other any other known applications used to diagnose monitor and optimize the operating state of the rotating equipment . Maintenance personnel usually use the applications to maintain and oversee the performance of rotating equipment in the plant to determine problems with the rotating equipment and to determine when and if the rotating equipment must be repaired or replaced.

Similarly a power generation and distribution system having power generating and distribution equipment associated with the plant is connected via for example a bus to another computer which runs and oversees the operation of the power generating and distribution equipment within the plant . The computer may execute known power control and diagnostics applications such as those provided by for example Liebert and ASCO or other companies to control and maintain the power generation and distribution equipment .

A computer system is communicatively connected to the computers or interfaces associated with the various functional systems within the plant including the process control functions and the maintenance functions such as those implemented in the computers A and and the business functions. In particular the computer system is communicatively connected to the traditional process control system and to the maintenance interface associated with that control system is connected to the process control and or maintenance interfaces A of the distributed process control system is connected to the rotating equipment maintenance computer and to the power generation and distribution computer all via a bus . The bus may use any desired or appropriate local area network LAN or wide area network WAN protocol to provide communications. As illustrated in the computer is also connected via the same or a different network bus to business system computers and maintenance planning computers and . The computer may also be connected via for example the bus to a plantwide LAN a corporate WAN as well as to a computer system that enables remote monitoring of or communication with the plant from remote locations. Alternatively or in addition the computer system process control system distributed process control system maintenance interface process control and or maintenance interfaces A rotating equipment maintenance computer and or the power generation and distribution computer may be interconnected via an internet and communicate via an internet compatible protocol. Accordingly the plant may be provided with viewing and control functions via one or more remote facilities which to view and control the various systems computers and routines within the plant .

In addition remote monitoring facilities may be communicatively coupled to the plant via the internet to provide access to additional analysis and diagnostics resources. In one example the plant may be coupled to a failure defense planning system which includes an analysis of the various plant assets and prioritizes the assets according to their importance to the plant or to systems within the plant to provide criticality data.

Referring to an example of the architecture for an editing and reporting tool for designing a process control entity within a process plant is shown. In particular the editing and reporting tool may be used to create process control and plant designs select instrumentation and control devices select a process control system engineer the process control entity establish installation of the process control entity commission the process control entity and start up the process control entity for example. As mentioned above process control entity may relate to any entity within a process control system or process control plant including but not limited to devices loops sub units units areas or the process plant itself. As will be understood the editing and reporting tool may be used for engineering virtually any project relating to a process control system. Further the editing and reporting tool may be used to generate reports for communication with customers or other end users documentation according to standard tools utilized by end users control strategy configuration and virtually any other aspect associated with designing and engineering a process control system including but not limited to I O control strategy batch OPC integration history displays etc.

In particular the results from the editing and reporting tool may be provided to a configuration system such as DeltaV sold by Fisher Rosemount Systems Inc. of Austin Tex. or any other configuration system and underlying database that provides tools and infrastructure for configuring integrated solutions for process control system design and engineering. For example various tools and applications of the configuration system such as Explorer Control Studio Recipe Studio Graphics Studio and User Manager associated with DeltaV and sold by Fisher Rosemount systems Inc. of Austin Tex. may be used to configure the entire control strategy displays I O alarms strategies history events users user roles and every other part of the system. Many of the tools and applications of the configuration system may be distributed among databases that are separate and off line from the configuration system itself. Further many engineering and design groups involved in the process control project may use tools and applications that are not readily understood by each other or the configuration system and are also distributed among databases separate and off line from the configuration system which may not even include the software of the configuration system. The editing and reporting tool allows such users to work in databases off line from the configuration system to engineer design process control entities using a graphical programming language such as sequential chart function SFC which is used for programmable logic controllers PLC . As is known SFC may be a language defined by the IEC 61131 3 standard and specifically defined in IEC 848. Generally SFC utilizes program processes defined according to steps with associated actions and transitions with associated conditions where various blocks represent steps and actions and lines interconnecting the blocks represent transitions and conditions. However it should be understood that other graphical programming languages may be used.

Referring to the editing and reporting tool includes an editing tool and a reporting tool each of which may provided as an application which may be stored on a computer readable medium and executed on a processor to perform the various functions associated therewith. The editing tool and the reporting tool are each operatively coupled to an off line database utilized by engineers designers and other users of the editing and reporting tool. In one example the editing tool and the reporting tool may be provided within and executed from the off line database . The off line database may be for example a relational database such as structured query language SQL database which maintains data within database tables. The use of an SQL database provides the ability to search and replace information across multiple off line databases which may be particularly useful during early stages of the project. During later stages particularly during acceptance commissioning and startup changes may be made directly to the control system configuration.

The off line database includes a plurality of programming language object fragments each of which may be a programming logic routine for a process control entity. The programming language object fragments are provided as templates of the programming logic routines without any parameter values or with default parameter values. In other words the programming language object fragments provide the basic structure of the programming logic routine. In particular each of the programming language object fragments may be snippets of programming code that represent chunks or snippets of a configuration for a process control entity such as individual steps transitions and actions associated with process control. Further the programming language object fragments may include or relate to parameters function blocks phases operations procedures or other process control objects. In an example described further below a programming language object fragment may be a composite of other programming language object fragments. As will be discussed further the programming language object fragments may be provided within a code library file maintained by a master code library database and imported to the off line database .

Still further the off line database may include graphical programming language objects which may be configured by a user from the programming language object fragments . As will be discussed further below graphical programming language objects such as SFC objects may be imported to the off line database from other data sources such as other off line databases utilizing the editing and reporting tool or from the configuration system. Graphical programming language objects may include but are not limited to composite function blocks such as an SFC composite and phase classes. Once a graphical programming language object has been configured using the editing tool the reporting tool converts the format of the graphical programming language object to a format understood by the configuration system and generate reporting documentation for the graphical programming language object in a standardized format understood by the configuration system and by end users. The configured graphical programming language object is provided from the off line database to the configuration system.

Referring to an example of an editing and reporting system is shown. In particular the system includes a code library master which maintains a master library copy of the programming language object fragments and a workstation which implements the editing and reporting tool. In one example the code library master is maintained within the configuration system to provide a central repository and distribution center for the code library files. Although only one workstation is shown it should be understood that multiple workstations each operatively coupled with an off line database may be provided in the system.

The code library master includes a code library database which maintains or operates with a code library tool and a code library file of the programming language object fragments. The code library file contains a list of actions steps and transitions or other programming language object fragments to be used by the editing tool to configure the graphical programming language object . The code library file may be provided as the result of an import from a node of the configuration system. In one instance the code library file is imported to the code library database in a format associated with the configuration system. For example DeltaV uses an FHX file format and maintains files using an FHX extension. The FHX code library file may be created from a configuration system process control strategy application such as DeltaV Control Studio. In particular a user creates a template of a programming language object fragment which is the basis for the code library file. The templates are modified by the editing tool by providing or modifying parameters of the programming language object fragment. As a result the programming language object fragments may be reused and configured by each user at different workstations when configuring a graphical programming language object using the editing tool .

A user may create a new composite block in the configuration system process control strategy software and create multiple actions for a process control strategy. For example a step for a process control valve may include actions such as open valve close valve start motor stop motor disable interlocks or any other action that may be taken by a process control valve. Once the actions have been created the block may be saved. The resulting code library file contains programming language object fragments that provide templates for steps actions transitions or other graphical programming language object items for a process control entity. The code library file is provided in the configuration system format e.g. FHX . Using a configuration system navigation application such as DeltaV Explorer the user may export the block under a composite template node in the configuration system library and the configuration system saves the code library file configuration system format for example as an FHX file.

The code library master stores the code library file in the code library database and exports the code library file to the off line database in a format understood by the off line database . For example the code library file may be provided in an extensible markup language schema such as XML. In particular the code library master may convert the code library file from the configuration database format to the off line database format by mapping the programming language object fragment data between the two format schemas. For example the formats of the FHX file may be read and the formatting parameters may be mapped to formatting parameters of the XML format and the XML data file may be generated by populating data fields of the XML file with the programming language object fragment data according to the map.

In particular a format converter an example of which is shown in enables a user to map an off line database format schema to a configuration database format schema and vice versa. In mapping the off line database format schema to the configuration database format schema one or more of the data elements or attributes of the off line database format schema may be mapped to one or more data elements or attributes of the configuration database format schema. Because there may not be a one to one correspondence between the data elements of format schemas the data mapping may involve intermediate data manipulations. These intermediate data manipulations enable one or more off line database formats schema data elements to be processed or combined using data manipulation functions such as for example string concatenations mathematical operations number generations etc.

When mapping between formats schemas each required data element of a configuration database format schema is mapped to at least one corresponding data element of the off line database format schema. Of course some or all of the data elements of the particular off line database format schema may not be used during the mapping and not all of the data elements of the configuration database format schema i.e. those data elements that may not be required may be mapped to data elements of the off line database format schema. Furthermore multiple data elements of the off line database format schema may be combined or otherwise manipulated and mapped to a single data element of the configuration database format schema using the data manipulation functions as noted above.

The workstation receives the code library file from the code library master and stores the code library file in the off line database that corresponds with the workstation and which may be referred to as a local or off line configuration database . The workstation maintains a local version of the code library file in a code library database . When a user executes the editing tool the workstation creates an instance of the editing tool and establishes communication with the code library master . More particularly the workstation establishes communication with the code library database and synchronizes the local code library database with the master code library database . The programming language object fragments are received from the code library master and provided within the GUI of the editing tool as graphical representations of the programming language object fragments. An example of the GUI is discussed further below. While the editing tool is being executed the workstation may periodically communicate with the code library master to provide changes or updates to the code library file .

In addition to loading the code library file into the editing tool a user may load a composite block configuration file into the editing tool . The composite block configuration file may relate to a composite block for a graphical programming language object that was created or modified at the configuration system or at another workstation. The composite block configuration file may also relate to a composite block of a group of programming language object fragments stored as a composite programming language object fragment. In other words the composite block is a composite of previously defined steps actions transitions etc. for a process control entity such as an SFC composite which may be subsequently modified by the editing tool . To load the composite block file into the editing tool the editing tool may prompt the user for the appropriate graphical programming language configuration file . The configuration file may be provided in the configuration system format and exported from the configuration database. The editing tool reads the configuration file and converts the format of the configuration file from the configuration system format to the format used by the off line database such as XML or an SQL database format. If the off line database is an SQL database the editing tool creates appropriate tables for the following types composite parameter step action transition connector text graphic rectangle graphic line graphic. The editing tool fills the table with data records coming from the configuration file and displays the composite block within the GUI of the editing tool including corresponding linked or embedded composites a diagram of the composite block parameters of the composite block and steps transitions of the composite block.

Alternatively a user may load a phase class configuration file in a manner similar to the composite block file above. As above the configuration file may be provided in the configuration system format and exported from the configuration database. The editing tool reads the configuration file and converts the format of the configuration file from the configuration system format to the format used by the off line database . If the off line database is an SQL database the editing tool creates appropriate tables for the following types phase phase parameter phase logic block block parameter step action transition composite linked or embedded connector and text graphic. The editing tool fills the table with data records coming from the configuration file and displays the phase class within the GUI of the editing tool including corresponding phase logic blocks and corresponding link or embedded blocks the phase logic module PLM and parameters of the phase class.

The workstation communicates with the configuration database by sending and receiving graphical programming language configuration files . The workstation also includes local versions of the editing tool and the reporting tool . The editing and reporting tools communicate with the off line configuration database and the local code library database of the workstation to configure a graphical programming language object using the programming language object fragments from the code library file . The configured graphical programming language object is stored within the configuration file and exported to the configuration database. In addition because other users may modify the graphical programming language object either at the configuration database or at other workstations the workstation may receive modified graphical programming language objects from the configuration database which may be the composite blocks or phase classes disclosed above which in turn may be configured using the editing tool . Still further reporting documents may be generated by the reporting tool which corresponds with the configured graphical programming language object.

Examples of configuring a graphical programming language object include creating a new composite block and creating a new phase class. To create a new composite block using the editing tool a user may create a new file for the new composite block and the editing tool creates an object of a new composite block within the workstation s memory from a default configuration for the composite block which may be provided as a programming language object fragment such as a composite programming language object fragment. The default configuration is presented within the GUI of the editing tool . For example the GUI may display the new composite block a step being configured for the composite block and parameters of the composite block. To create a new phase class using the editing tool a user may create a new file for the new phase class and the editing tool creates an object of a new phase class within the workstations memory from a known default configuration. The default configuration for the new phase class is presented within the GUI of the editing tool . For example the GUI may display the new phase class along with default phase logic blocks such as ABORT LOGIC FAIL MONITOR HOLD LOGIC RESTART LOGIC RUN LOGIC STOP LOGIC. The GUI may further display the phase logic module PLM and parameters of the phase class.

The graphical programming language objects such as composite blocks or phase classes either created by the editing tool or modified as a result of an import from the configuration database may be saved by the user and the editing tool updates the off line database of the recently created graphical programming language object or modifications thereto. For modified graphical programming language objects the editing tool copies the changes to the graphical programming language object from the off line database to the configuration file converts the configuration file from the off line database format e.g. XML to the configuration database format e.g. FHX and overrides the previously loaded configuration file in the configuration database format e.g. the FHX configuration file . For newly created graphical programming language objects the editing tool updates the off line database of any recently performed changes and copies the changes from the off line database to the configuration file and creates a new configuration file in the configuration database format e.g. FHX .

In addition to configuring a graphical programming language object the editing tool may create new programming language object fragments either by modifying a programming language object fragment from the code library file and or by creating a composite programming language object fragment from multiple programming language object fragments from the code library file . Such new programming language object fragments may be added to the code library file and exported back to the code library master which maintains the master copy of the code library file. In turn the code library master may distribute the updated code library file among other workstations so that each workstation and each corresponding engineering or design group has an updated copy of the code library file that includes contributions from other engineering or design groups.

Referring to a more detailed diagram of the system of is shown. The code library master which may be maintained within a separate workstation is shown to include the code library database for the programming language object fragments which may be an SQL database. The code library master further includes a code library tool and a code library engine . As shown in the code library engine is used by the code library tool to conduct the formatting mapping and conversion referenced above for example converting between FHX and XML formats. The code library engine further includes a database generator and XML generator for generating and maintaining the code library files for the code library database . The code library tool also facilitates distribution of the code library file and updates thereof among the various workstations .

As described above the workstation receives updates of the code library file and stores the code library file in the local code library database . As also described above the editing tool may create new programming language object fragments which are stored within the local code library database as an updated code library file. A code library update monitor may monitor the local code library database for such new programming language object fragments or other updates to the code library file and provide the updated code library file to the code library master .

The workstation also includes a local copy of the code library tool and of the code library engine . The code library tool may communicate with the code library database of the code library master such as periodic communication for updates to the code library file . Like the code library tool of the code library master the local code library tool uses the local code library engine to conduct the formatting conversion including converting the formats of the configuration file between a format used by the workstation and other formats such as the format used by the configuration system. The local code library tool also uses the local code library engine to generate and maintain the code library file of the local code library database .

As referenced above each programming language object fragment is stored within the local code library database which may be an SQL database. As such each programming language object fragment may be stored within an SQL table examples of which are shown in . In particular each table for a programming language object fragment includes a name one or more field names one or more field types associated with each field name and a description. The specifics of SQL databases and database tables are well known and need not be discussed further herein.

Preferably but not necessarily the GUI may be implemented using a familiar graphical windows based structure and appearance in which a plurality of interlinked graphical views or pages include one or more pull down menus that enable a user to navigate through the pages in a desired manner to view and or retrieve a particular type of information. The features and or capabilities of the editing and reporting tool described herein may be represented accessed invoked etc. through one or more corresponding pages views or displays of the GUI. Furthermore the various displays making up the GUI may be interlinked in a logical manner to facilitate a user s quick and intuitive navigation through the displays to retrieve a particular type of information or to access and or invoke a particular capability of the editing and reporting tool.

Referring to the GUI includes a display of various views used for configuring a graphical programming language object from one or more programming language object fragments. The GUI of the editing and reporting tool is provided as a stencil for creating and modifying a graphical programming language object for a process control entity. In particular the GUI may enable a user to configure various data objects of the configuration system including composite blocks phase classes equipment module classes and other objects. Generally the editing and reporting tool and the off line database utilize only one object type such as a graphical programming language object and more particularly an SFC object or SFC module which are used to control a process control entity. In one example the only database object that the editing and reporting tool is aware of are the programming language object fragments such as templates of programming logic routines associated with a phase class or composite but it should be understood that is the functionality of the editing and reporting tool may be expanded to include other library objects. By utilizing one object type the various versions of the editing and reporting tool distributed among the various off line databases may provide a standardized format for the configuration system and each editing and reporting tool may share at the code library files distributed by the code library master .

The various views within the GUI include but are not limited to a stencil view a graphical programming language object view a hierarchy view a summary view and a parameter view . The stencil view provides a graphical interface of graphical programming language object items and more particularly representations of the programming language object fragments which may be used to configure a graphical programming language object. As seen in the programming language object fragments may be arranged according to various process control entities such as valves motors loop control etc. where each process control entity has associated programming language object fragments for steps actions transitions or any other item for configuring the graphical programming language object for the process control entity. In one example the stencil view is provided as a drop down menu or set of menus each of which may be expanded or retracted as indicated by the user. The stencil view may enable the user to switch between one stencil to another where each stencil may correspond to a different code library file or category of programming language object fragments. For example a user may select the stencil drop down which contains all loaded or defined stencils from the stencil view and select motor . The editing tool displays the contents of the motor stencil in the stencil view having a motor category with associated programming language object fragments namely the actions of start and stop and disable interlocks . To switch to another stencil the user may select a different stencil from the drop down menu such as valves and the editing tool displays the programming language object fragments associated with valves.

A user configures a graphical programming language object in the graphical programming language object view from the programming language object fragments displayed within the stencil view . In particular a user may select a programming language object fragment such as a step action or transition item by clicking on the associated programming language object fragment representation and dragging the representation from the stencil view into the graphical programming language object view . Alternatively the user may drag the programming language object fragment representation from the stencil view into the summary view further disclosure of which is provided below. The editing tool displays a properties dialog box not shown prompting the user for values for the available properties of the selected programming language object fragment. The user provides values for the available properties of the programming language object fragment and the editing tool displays the programming language object fragments in the graphical programming language object view . It is noted however that to configure a graphical programming language object using an action the graphical programming language object already includes a step.

As disclosed above a user may create new programming language object fragments using the editing tool and which may be distributed to all workstations. The programming language object fragment may be stored as a stencil within the code library master . In particular the stencil view may include an add option which the user selects. The editing tool creates a blank stencil in the stencil view and when the stencil drop down is expanded a new stencil item e.g. a new programming language object fragment is added having a default name. The user provides the new stencil with the name specifies properties for the programming language object fragments s of the new stencil and the editing tool saves a new stencil to the code library master . Multiple programming language object fragments may be added as above and stored together as a composite programming language object fragment. Parameter values either default or specific may be added as above for each programming language object fragment within the composite programming language object fragment. Alternatively multiple programming language object fragments may be concurrently selected as disclosed further below from the graphical programming language object view and stored as a composite programming language object fragment again with or without default or specific properties.

In one example a user may create a new action within the stencil view for a given stencil. For example a new and empty stencil may exist named motor and valve having two stencil categories namely motor and valve and a composite block configuration file in the configuration database format includes a composite block with the step and actions such as open valve close valve start motor stop motor and disable interlocks . The user may load the composite block configuration file in the configuration database format as provided above and drag the open valve and close valve action representations from the summary view to the valve category in the stencil view . The editing tool copies the actions and displays them underneath the valve category in the stencil view . Likewise the user may drag the start motor stop motor and disable interlocks action representations from the summary view to the motor category in the stencil view and the editing tool copies the actions and displays them underneath the motor category in the stencil view .

In addition to creating new programming language object fragments a user may delete existing programming language object fragments. In particular the stencil view may include a delete option and the user may select a representation of the desired programming language object fragment and select the delete option. The editing tool removes the programming language object fragment from the local code library database and may further remove the programming language object fragment from the code library master .

Additional user actions which may be enabled by the stencil view include renaming programming language object fragments by providing a rename option creating a new categories of programming language object fragments within a particular stencil by providing a new category option and saving new or modified stencils by providing a save option which saves all stencil changes to the code library master . Certain actions may be limited to particular users having authority for deleting or modifying code library files from the code library master .

The graphical programming language object view provides a graphical view of the graphical programming language object being configured. In particular the graphical programming language object view may provide a graphical representation of programming code such as control logic being developed for the process control entity and provides the main window for the user to configure the graphical programming language object for a process control entity. As seen in the graphical programming language object view provides the graphical programming language object as a block or series of blocks which may represent the composite blocks and or phase classes of the graphical programming language object where each block includes various steps transitions actions or other programming language object fragments of the overall graphical programming language object for the process control entity. When a user selects a block from the graphical programming language object view the editing tool displays all available properties for the block in the parameter view displays all steps and transitions associated with the block in the summary view and highlights the primary block in the hierarchy view .

The graphical programming language object view enables the user to modify properties of the graphical programming language object. For example a user may modify composite block or phase properties by selecting a properties option. The editing tool may then display a properties dialog box which enables the user to set new values for the property. The editing tool saves the new value and closes the dialog box.

The user may also add programming language object fragments to the graphical programming language object by selecting programming language object fragment representations from the stencil view and dragging them to the graphical programming language object view . The editing tool then displays the added programming language object fragment representation in the graphical programming language object view . For example to add a step item to the graphical programming language object the user selects a step item representation from the stencil view and drags the representation into the graphical programming language object view . The editing tool displays a properties dialog box for the selected step item and the user provides new values for the available properties of the step item. The step item which may be represented by a block is displayed in the graphical programming language object view in the location where the representation of the step item was dragged by the user. Likewise to add a transition item to the graphical programming language object the user selects a transition item representation from the stencil view and drags the representation into the graphical programming language object view . The editing tool displays a properties dialog box for the selected transition item and the user provides new values for the available properties of the transition item. The transition item which may be represented by a cross figure is displayed in the graphical programming language object view in the location where the representation of the transition item was dragged by the user.

The editing tool further enables the user to establish logical connections between the programming language object fragments of the graphical programming language object. In particular representations of the programming language object fragments in the graphical programming language object view may include representations indicating various inputs and outputs of each item. A user may select an I O point of a programming language object fragment and drag a GUI cursor to an I O point of another programming language object fragment. The editing tool may then display a line connecting the two programming language object fragments in the graphical programming language object view . If the user creates an invalid connection between programming language object fragments the editing tool may display an error message describing the invalid action by the user. Invalid connections include but are not limited to connections between two input points connections between two output points connections between two step items and connections between two transition items.

Programming language object fragments may also be added to the graphical programming language object by copying existing programming language object fragments within the graphical programming language object and pasting the copied programming language object fragments in a different location in the graphical programming language object. In particular a representation of a programming language object fragment may be selected and the user may select a copy option which copies the selected programming language object fragments. The user may then select a paste option which causes the editing tool to display a representation of the copied programming language object in the graphical programming language object view .

Properties of each programming language object fragment displayed within the graphical programming language object view may be modified. In particular a user may select a representation of a programming language object fragment in the graphical programming language object view and select a properties option associated therewith. The editing tool displays a properties dialog box prompting the user for new parameter values for the selected programming language object fragment.

The graphical programming language object view further enables the user to select particular graphical programming language object items such as the steps transitions actions or other programming language object fragments that make up the graphical programming language object. When a representation of a programming language object fragment is selected within the graphical programming language object view the editing tool highlights the selected programming language object fragment and updates the available actions associated therewith in the summary view and updates the parameter view with the available properties for the selected programming language object fragment.

In addition to individually selecting a programming language object fragments the GUI enables the user to concurrently select multiple programming language object fragments in the graphical programming language object view . For example a user may drag a GUI cursor across multiple graphical programming language object item representations to create a selection box over the items or individually add the programming language object fragment representations to a group of selected programming language object fragments. The editing tool highlights the selected items in the graphical programming language object view highlights the selected programming language object fragments and updates the available actions of the selected programming language object fragments in the summary view and updates the parameter view with the combined properties of the selected programming language object fragments.

When individually or concurrently selecting programming language object fragments the editing tool enables the user to delete copy paste or modify the selected programming language object fragment s . A concurrent copy paste operation for multiple programming language object fragments is similar to the copy paste operation described above. To delete a programming language object fragment s from the graphical programming language object the user selects the programming language object fragment representation s from the graphical programming language object view as provided above and indicates a delete option for example by clicking on a delete option provided by the GUI or using a keyboard. In response the editing tool removes the selected programming language object fragment representation s from the graphical programming language object view and removes the corresponding items s and applicable actions from the summary view .

To modify a programming language object fragment s from the graphical programming language object the user selects the programming language object fragment representation s from graphical programming language object view as provided above. If multiple programming language object fragments are selected the editing tool enables the user to concurrently modify properties that are common among the selected programming language object fragments. However the editing tool may prevent the user from concurrently modifying properties that are not common among the selected programming language object fragments such as the names of the programming language object fragments. The common properties may be displayed in the summary view and the user it may enter or modify parameter values in the summary view . Alternatively or in addition the common properties may be displayed in the parameter view and the user may enter or modify the values therein. The editing tool updates the configuration file with the new values for each of the selected programming language object fragments.

The hierarchy view provides a tree diagram of the graphical programming language object and subordinate logic blocks such as running holding and embedded composite for example. The graphical programming language object may be represented as a series of blocks in the hierarchy view which represent composite blocks or phase classes. The editing tool may enable a user to select a block within the hierarchy view and the editing tool displays all available properties for the block in the parameter view and displays all steps and transitions associated with the block in the summary view . Embedded composite blocks may be added from the hierarchy view . For example a user may select a block such as a phase logic block or composite block in the hierarchy view and the editing tool displays a context menu is a list of available options including an add option which may be selected by the user. The editing tool may display a custom block dialogue box and the user may select an embedded composite option and enter a new name for the block. The editing tool closes the dialog box and adds the new embedded block under the selected composite or phase logic block.

The summary view provides different summary views including a step transition summary view an action summary view and a failure condition summary view each of which may be associated with a tab indicating each view. The step transition summary view provides a list of all the steps and transitions configured for the graphical programming language object displayed in the graphical programming language object view . The editing tool may enable a user to select a step or transition listed in the step transition summary view . When a step transition or other programming language object fragment is selected individually or concurrently with other programming language object fragments within the GUI including selected from the step transition summary view or the graphical programming language object view the editing tool clears the action summary view provides the associated properties in the parameter view and displays no items in the failure condition view .

New steps transitions or other programming language object fragments may be added in the step transition summary view by enabling the user to drag a programming language object fragment representation from the stencil view into the step transition summary view or by selecting an add step transition or similar option. The editing tool displays a properties dialog box for the selected programming language object fragment and the user may enter new values for the properties of the programming language object fragment. The editing tool then adds the new programming language object fragment to the list of the step transition summary view and displays a representation of the new programming language object fragment such as a rectangle for a step or a cross for a transition in the graphical programming language object view . Steps transitions and other programming language object fragments may be copied and pasted individually or concurrently by selecting the items from the step transition summary view selecting a copy option via the GUI or via a keyboard which copies the selected programming language object fragment s and selecting a paste option via the GUT or via a keyboard which pastes the copied programming language object fragment s and causes the editing tool to display the pasted programming language object fragment s in a new line of the step transition summary view and in the graphical programming language object view .

Properties of programming language object fragments listed within the step transition summary view may be modified by enabling the user to select the item from the list and selecting a properties option which causes the editing tool to display the properties dialog box for the selected programming language object fragment. The user may then modify or enter parameter values for the available properties and the editing tool updates the entered parameter values. As disclosed above multiple programming language object fragments may be selected and properties common among the selected programming language object fragments may be modified concurrently.

In addition programming language object fragments listed within the step transition summary view may be deleted by enabling the user to select the item from the list and select a delete option via the GUT or via a keyboard which causes the editing tool to delete the selected programming language object fragment from the step transition summary view and from the graphical programming language object view . As with modifying properties multiple programming language object fragments may be selected from the step transition summary view and deleted concurrently as disclosed above.

The action summary view provides a list of all actions configured for a selected step. The editing tool may enable a user to select an action representation listed in the action summary view . When an action is selected individually or concurrently with other actions from the action summary view the editing tool gives focus to the selected action retains the contents of the parameter view which contain the properties of the selected step retains the selection in the hierarchy view which highlights the composite block or phase displays no items in the failure condition view retains the focus of the selected step in the graphical programming language object view and retains the focus of the selected step in the step transition summary view .

Actions may be added by enabling the user to select a step item representation in the graphical programming language object view and selecting the action summary view which causes the editing tool to display a context menu all the available options including an add option. The user selects the add option and the editing tool displays a properties dialog box for the action item. The user enters parameter values for the available fields in the dialog box and the editing tool adds the new action to the action summary view . Alternatively a user may drag an action item from the stencil view and drop the selected action item into a specific step item in the graphical programming language object view . Actions may be copied and pasted individually or concurrently by selecting the action items representations from the action summary view selecting a copy option via the GUI or via a keyboard which copies the selected action s and selecting a paste option via the GUI or via a keyboard which pastes the copied action s and causes the editing tool to display a representation of the pasted action s in a new line of the action summary view .

Properties of the actions listed in the action summary view may be modified by enabling the user to select a step item from the graphical programming language object view or from the step transition summary view selecting a specific action item representation from the action summary view and selecting a properties option which causes the editing tool to display the properties dialog box for the selected action item. The user may then modify or enter parameter values for the available properties and the editing tool updates the entered values. As disclosed above multiple actions may be selected and properties common among the selected actions may be modified concurrently.

Likewise actions listed within the action summary view may be deleted by enabling the user to select the action item from the list and select a delete option via the GUI or via a keyboard which causes the editing tool to delete the selected action item from the action summary view . As with modifying properties multiple actions may be selected from the action summary view and deleted concurrently as disclosed above.

The failure condition summary view provides a list of all failure conditions configured for a graphical programming language object. The user may be enabled to select a failure condition individually or concurrently with other failure conditions by selecting a condition s from the failure condition summary view . The editing tool gives focus to the selected condition displays no contents in the parameter view retains the selection in the hierarchy view which highlights the failure monitor block displays no items in the graphical programming language object view and displays no items in the step transition summary view .

Failure conditions may be added by providing the user with a context menu of available options including an add option. The user may select the add option and the editing tool displays the properties dialog box for the condition. The user enters parameter values in the available fields of the dialog box and the editing tool adds the new condition to the failure condition summary view . Conditions may also be copied pasted or deleted individually or concurrently in a manner similar to the step transition items as disclosed above but with respect to the failure condition summary view . Likewise properties of a condition may be modified individually or concurrently with other conditions in a manner similar to the step transition items disclosed above.

The parameter view provides a list of all properties configured for the graphical programming language object or programming language object fragment thereof and the editing tool displays the properties of the graphical programming language object or programming language object fragment that is selected or otherwise in focus. The editing tool may enable the user to select properties in the parameter view individually or concurrently and modify the selected properties by entering new parameter values in the parameter view or in a properties dialog box generated by the editing tool . The editing tool updates the parameter view with the new values. New properties may also be added by enabling the user to select an empty row in a parameter column of the parameter view providing the new property with a name selecting the type of property and entering a parameter value for the property. Properties may also be deleted by enabling the user to select one or more properties in the parameter view and selecting a delete option provided by the GUI or via a keyboard and the editing tool removes the property from the parameter view . The editing tool may further enable the user to copy and paste properties by selecting one or more properties from the parameter view selecting a copy option provided by the GUI or via a keyboard which copies the selected property and selecting a paste option provided by the GUI or via a keyboard which adds the copied property to the parameter view with a new property name which may be defined by the user. The editing tool may place restrictions on the particular parameter values that the user is permitted to modify by marking the property as non editable or by marking a property field as read only.

Using the editing tool and the GUI as disclosed above a user may easily create and configure a new graphical programming language object or modify an existing graphical programming language object imported from the configuration database. Editing of programming language object fragments may include overriding default values with the data specific to a particular project as disclosed above. For example when a user is configuring a graphical programming language object for a process control entity in the physical layer of a process control system such as nodes I O cards devices etc. the user may prepare a table of project specific data in the off line database for the process control entity. Because the programming language object fragments are provided as templates which may include default values the editing tool creates instances of the programming language object fragments based on database definitions and overrides the default values with the project specific data for the process control entity.

By providing the programming language object fragments as templates the programming language object fragments may be used multiple times within the same or different graphical programming language objects and updated with different parameter values according to the project specifications. Further by providing the programming language object fragments as templates multiple users including users among different engineering and design teams may use the same programming language object fragments and modify them according to their specific project standards.

In another example when a user is configuring a graphical programming language object for a process control entity in the logical layer of a process control system the editing tool may use generic templates classes of programming language object fragments that already exist and overlay the default values with project data. However sometimes it is necessary to create templates classes of programming language object fragments specific to an end user. The logic from the programming language object fragments remains the same but the programming language object fragments are provided with a different default values specific to the project. Such end user specific copies are created in the code library master and imported to the off line databases . The end user specific programming language object fragments are then used as a starting point for configuring a graphical programming language object for a process control entity for the end user. As such the editing tool involves not just configuring graphical programming language objects using programming language object fragments but also setting up the code libraries with end user specific default values.

In addition to using programming language object fragments from the code library individual users may add to the library by creating new programming language object fragments. In particular programming language object fragments modified with new parameter values or other property changes may be used within graphical programming language objects for other process control entities. Still further groups of programming language object fragments may be selected from the graphical programming language object view including the graphical programming language object itself and grouped together to create a composite programming language object fragment which may be stored within the code library master and distributed among the workstations for use in configuring graphical programming language objects for other process control entities. The composite programming language object fragments may be saved as a template with or without default values or with values specific to the process control entity for which it was originally created.

The editing tool further allows concurrent editing of programming language object fragments including modification deletion etc. Although many of the examples above include modifying properties common among multiple programming language object fragments it should be understood that modifications may extend beyond parameters values to any property among the selected programming language object fragments.

The configured or modified graphical programming language object may be saved within a configuration file stored within the off line database . In one example each change made to the graphical programming language object including changes to properties addition or deletion all of programming language object fragments or any other editing feature may result in an update to the configuration file . The configuration file may be created whenever a new graphical programming language object is created or the configuration file may be imported from the configuration database and converted into a format used by the off line database .

Because documentation is an important part of any process control project and because process control end users prefer documents in standardized formats such as Microsoft Word and Microsoft Visio it is important to create reporting documentation based on project standards of the end user. As such the off line database stores project data including the configuration file in a format that is easily read by standardized tools such as the applications provided in the suite of applications of Microsoft Office. An example of such formats are SQL and XML which allows for many different documentation formats such as Word PDF HTML Visio etc. to read and import the data.

The reporting tool may take the data for a graphical programming language object as stored within the configuration file from the off line database . Because the off line database may be provided as an SQL database the data is stored in a format easily read and understood by standard tools such as Microsoft Word and Microsoft Visio the reporting tool may map the data fields of the format used by the off line database e.g. XML fields SQL table columns to data fields of a reporting document template. The reporting tool may then populate the data fields of the reporting document according to the map between the two formats. The reporting document is customizable and may be provided in any format defined by the end user. Such common documents and data management tools may be used to easily track and manage the project progress among several off line databases and associated engineering and design teams while allowing each engineering and design team to work with data in their preferred format without having to conform to the configuration database rules and formats.

Of course it should be understood that a reversal of the above mapping feature may be performed when importing data from the configuration database to the off line database . For example new properties may be added or modified in the reporting document at another off line database or at the configuration database. The new properties or other data may be read and the data fields may be mapped from the reporting document format to the off line database format and the off line database may be populated with the new properties or other data. The new data may be used to update or create programming language object fragments which may be particularly useful in updating properties for a graphical programming language object. As such configuration and modification of a graphical programming language object may be accomplished among and between various different engineering and design teams each of which may work independently and between the engineering and design teams and the configuration database. At the same time each off line database need only use one graphical programming language object type such as an SFC object.

Users may also generate project data using other tools for engineering and designing a process control project such as computer aided design CAD applications which is in a format different from that of the offline database but which is useful for engineering productivity. As such the offline database may be used as a centralized project database or data repository and data other than graphical programming language object data may also be integrated into the offline database . In particular using the conversion and mapping techniques described above data fields of the other tools such as data fields from data files of the tools may be mapped to the data fields of the offline database such as the data fields of SQL tables and the data fields may be populated accordingly. Tables may be added to the offline database for the additional project data and the data may be used in configuring graphical programming language objects or integrated into the configuration file for exportation to the configuration database. Accordingly a user is able to utilize other tools and applications beyond the editing and reporting tool while allowing for full data integration.

Still further users are able to edit the graphical programming language objects or programming language object fragments from the reporting tool . For example because the reporting documentation is generated from the data of the graphical programming language object and because the data is mapped between data fields of the format used by the off line database and data fields of the reporting document template a user may edit the objects from the reporting tool by editing the data e.g. parameter values and push the edited data back to the offline database by populating the data fields of the off line database format e.g. SQL tables with the edited data.

Although the forgoing text sets forth a detailed description of numerous different embodiments of the invention it should be understood that the scope of the invention is defined by the words of the claims set forth at the end of this patent. The detailed description is to be construed as exemplary only and does not describe every possibly embodiment of the invention because describing every possible embodiment would be impractical if not impossible. Numerous alternative embodiments could be implemented using either current technology or technology developed after the filing date of this patent which would still fall within the scope of the claims defining the invention.

While the editing and reporting system and method and other elements have been described as preferably being implemented in software they may be implemented in hardware firmware etc. and may be implemented by any other processor. Thus the elements described herein may be implemented in a standard multi purpose CPU or on specifically designed hardware or firmware such as an application specific integrated circuit ASIC or other hard wired device as desired. When implemented in software the software routine may be stored in any computer readable memory such as on a magnetic disk a laser disk or other storage medium in a RAM or ROM of a computer or processor in any database etc. Likewise this software may be delivered to a user or a process plant via any known or desired delivery method including for example on a computer readable disk or other transportable computer storage mechanism or over a communication channel such as a telephone line the internet wireless communication etc. which are viewed as being the same as or interchangeable with providing such software via a transportable storage medium .

Thus many modifications and variations may be made in the techniques and structures described and illustrated herein without departing from the spirit and scope of the present invention. Accordingly it should be understood that the methods and apparatus described herein are illustrative only and are not limiting upon the scope of the invention.

