---

title: Efficiently polling to determine completion of a DMA copy operation
abstract: Efficiently polling a DMA module to determine if the DMA copying of a packet payload to an application buffer is complete. For communication packets received from a network, a processing module may be configured to poll the DMA module at times when it is likely that the DMA copying of packet payloads is complete. Packets may be received and processed in batches. The polling of the DMA module for a packet belonging to a first batch may be deferred until the processing of a next batch. An exception may occur if a predefined amount of time elapses following the completion of the processing of the first batch before the next batch is received. In response to the predefined amount of time elapsing before the receipt of the next batch, the DMA module may be polled, i.e., prior to the next batch being processed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08190698&OS=08190698&RS=08190698
owner: Microsoft Corporation
number: 08190698
owner_city: Redmond
owner_country: US
publication_date: 20060630
---
In recent years as a result of the introduction of faster e.g. multi gigabit network adapters there has been a tremendous increase in available network bandwidth. Unfortunately there has not been a comparable increase in the processing power of central processing unites CPUs to take advantage of the available bandwidth. In particular the processing of received packets is still a CPU intensive task and a common bottleneck in network input output I O . Many technologies have been developed to alleviate this problem including checksum task offload which delegates the calculating and verifying of Internet Protocol IP and Transmission Control Protocol TCP checksum to the Network Interface Card NIC hardware TCP Chimney offload which offloads the handling of the entire TCP connection to the hardware Remote DMA RDMA which makes it possible for a NIC to employ direct memory access DMA techniques to send incoming packets directly to the application buffer without CPU assistance and Receive Side Scaling RSS which distributes the processing of receive packets across multiple processors.

One of the most CPU intensive tasks during receive processing i.e. the processing of packets received from a network is copying an incoming packet from a NIC receive buffer to an application buffer. This copy results from the following process. At the time of receiving a network packet NIC hardware does not know the final destination of the packet payload. Therefore the hardware copies the packet to a temporary buffer i.e. a NIC receive buffer . After TCP IP processing of the packet identifies the application buffer I O request buffer to which the packet payload should be copied the CPU is utilized to copy the payload to the application buffer. A DMA engine can be used to perform this copy without CPU intervention which frees up CPU processing power to perform other tasks such as processing other incoming packets. Using the freed up CPU processing time to process other incoming packets allows incoming packets to be processed at a faster rate overall thereby improving the throughput of the network from which the packets are received.

DMA engines that can perform memory to memory DMA are now available on chips made by Intel Corp. and it is expected that DMA engines having this capability will become available from other vendors as well. Because the purpose of using a DMA engine is to free a CPU for other purposes an interface with the DMA engine i.e. a DMA interface must support submitting a DMA copy request to the DMA engine on behalf of a processing entity e.g. a TCP IP stack and returning control to the processing entity immediately without waiting for the copy operation to finish. This requirement implies that the copy operation performed by the DMA engine must be asynchronous. That is the copy happens concurrently to the CPU performing other tasks. For such asynchronous copying a mechanism must be in place to discover when the copy operation is completed.

There are two common methods for handling completion of an asynchronous operation polling and interrupt. In the polling method the component that is performing the asynchronous operation e.g. a DMA engine updates a register e.g. completion status register when the operation is completed. In this scheme to positively confirm the completion of the asynchronous operation the requesting entity or requester e.g. the entity processing a packet continuously polls the value of the completion register e.g. by reading it until the state of the register indicates that the operation is complete.

In the interrupt method the component that performs the asynchronous operation e.g. a DMA engine interrupts the CPU when the operation e.g. a DMA copy is complete. A DMA engine driver typically handles the interrupt for an asynchronous DMA copy operation. Typically when a DMA copy is complete the DMA engine driver calls a pre registered function in the requesting entity to notify the entity that the requested copy operation is complete.

There are advantages and disadvantages to both the polling method and the interrupt method. The polling method can be very inefficient if the polling is performed too early but very cheap if the requester polls only when the operation is most likely completed. The interrupt method is generally expensive as it needs a lot of processing by a host CPU but it can be useful in situations where checking for completion happens infrequently. Both completion models can be used with a DMA engine.

As mentioned above the cost of a polling method depends heavily on the timing of the poll operation. For an entity e.g. a layer of a TCP IP stack that employs TCP processing to use a DMA engine efficiently the entity must overlap the TCP processing that it performs e.g. analyzing the received packet finding the active connection to which the packet belongs acknowledging the received packet to the sender etc. with the performance of the DMA copy by the DMA engine and poll for completion at an appropriate time.

This Summary provides an illustrative context for aspects of the invention in a simplified form. It is not intended to be used to determine the scope of the claimed subject matter. Aspects of the invention are described more fully below in the Detailed Description.

Described herein are systems methods and software for efficiently polling a DMA module to determine if the DMA copying of a packet payload to an application buffer is complete. For communication packets received from a network a processing module may be configured to poll the DMA module at times when it is likely that the DMA copying of packet payloads is complete. Packets may be received and processed in batches. The polling of the DMA module for a packet belonging to a first batch may be deferred until the processing of a next batch. An exception may occur if a predefined amount of time elapses following the completion of the processing of the first batch before the next batch is received. The DMA module may be polled in response to the predefined amount of time elapsing before the receipt of the next batch i.e. prior to the next batch being processed.

For example communication packets may be received at a network interface module e.g. a NIC and communicated in batches to a network communications processing module e.g. a TCP IP stack of a host. The processing module may process each packet in the batch including determining the connection and application corresponding to each packet and determining the application buffer to which the payload of the packet should be copied. For each packet in the batch the processing module may send a DMA request to a DMA module e.g. through a DMA interface to a DMA engine requesting that the packet be DMA copied from a buffer of the network interface module to the application buffer.

At the completion of the processing of the batch the processing module may set a timer. If the timer expires before a next batch is received in response the processing module may poll the DMA module for each packet to ascertain whether the DMA copying of the payload of the packet is complete. If a next batch is received before the timer expires the processing module may poll the DMA module during the processing of the next batch.

The processing of a packet corresponding to an application may be part of processing an I O request for the application as a result of receiving the packet from another network device i.e. the sender . The processing module may not complete the I O request until the DMA copying of the packet payload is complete. Accordingly if the response to the polling indicates that the DMA copying is complete the processing module may complete the I O request by indicating completion to the corresponding application and my send an acknowledgment of such completion to the sender of the packet. If the response indicates that the DMA copying is not complete the processing module may poll again in accordance with with a preconfigured timing and frequency.

Other advantages novel features and objects of the invention and aspects and embodiments thereof will become apparent from the following detailed description of the invention including aspects and embodiments thereof when considered in conjunction with the accompanying drawings which are schematic and which are not intended to be drawn to scale. In the figures each identical or nearly identical component that is illustrated in various figures is represented by a single numeral. For purposes of clarity not every component is labeled in every figure nor is every component of each embodiment or aspect of the invention shown where illustration is not necessary to allow those of ordinary skill in the art to understand the invention.

Although embodiments of the invention are described below primarily in relation to DMA copying for a network receive operation from a NIM buffer to an application buffer the invention is not so limited. Aspects of the invention may be implemented for other DMA operations that do not involve network receive operations NIM buffers and or application buffers.

The function and advantage of the above embodiments and other embodiments of the present invention will be more fully understood from the examples described below. The following examples are intended to facilitate a better understanding and illustrate the benefits of the present invention but do not exemplify the full scope of the invention.

As used herein whether in the written description or the claims the terms comprising including carrying having containing involving and the like are to be understood to be open ended i.e. to mean including but not limited to. Only the transitional phrases consisting of and consisting essentially of respectively shall be closed or semi closed transitional phrases as set forth with respect to claims in the United States Patent Office Manual of Patent Examining Procedures Eighth Edition Revision 2 May 2004 Section 2111.03.

As used herein a DMA module is a module configured to perform DMA copy operations. A DMA copy is the copying of information from one storage location e.g. memory disk or other location to another location on a computer e.g. a network device without the use of a CPU. A CPU may be or comprise any of a variety of types of CPU such as for example a processor microprocessor an embedded processor a controller a microcontroller other types of CPUs or any suitable combination of the foregoing. Although only a single CPU is illustrated in it should be appreciated that the invention is not so limited as system may include multiple CPUs for example configured for parallel processing. For example system may be configured to employ any of a variety of technologies designed for use of multiple CPUs such as for example Receive Side Scaling RSS .

System may include any of network communications processing module CPU timer application buffer DMA module network interface module NIM NIM interface network other components and any suitable combination of the foregoing. As illustrated in components and may be implemented as part of a host which along with NIM may be part of a network device connected to and or part of network . For example NIM may be a network interface card NIC which along with one or more NIMs e.g. NICs may be interfaced to host . Further any of elements and or components thereof may be implemented as part of an operating system of host which may be of any of a variety of types such as for example any of the operating systems available from Microsoft Corporation listed below.

As used herein a network is a group of two or more components interconnected by one or more segments of transmission media over which communications may be exchanged between the components. Each segment may be any of a plurality of types of transmission media including one or more electrical or optical wires or cables made of metal and or optical fiber air e.g. using wireless transmission over carrier waves or any combination of these transmission media. As used herein plurality means two or more. It should be appreciated that a network may be as simple as two components connected by a single wire bus wireless connection or other type of segment. Further it should be appreciated that when a network e.g. network is illustrated in a drawing of this application as being connected to an element in the drawing e.g. network device the connected element itself may be considered part of the network.

As used herein a network device is a device operative to communicate on a network including but not limited to workstations personal computers terminals laptop computers end stations user devices servers gateways registers switches routers hubs bridges directories transmitters receivers transceivers wireless access points APs repeaters and any combinations thereof. As used herein a user device is a network device from to which a user may send receive communications and which may serve as an endpoint to communications on a communications network. User devices include but are not limited to workstations personal computers e.g. PCs laptop computers notebook computers telephones e.g. landline or mobile pagers Blackberry brand devices PCS devices personal digital assistants PDAs Smartphones two way radios e.g. walkie talkies other types of user devices and any suitable combination of the foregoing.

A network e.g. network may be or include any of a variety of types of networks including but not limited to a local area network LAN a metropolitan area network MAN a wide area network WAN a wireless network a Public Land Mobile Network PLMN a Global System for Mobile Communications GSM network a General Packet Radio Service GPRS network a Universal Mobile Telecommunications System UMTS network a Code Division Multiple Access CDMA network an optical network a data network an enterprise wide network a wireless personal area network PAN a home network a telecommunications network a public switched telephone network PSTN a broadband network another type of network or any suitable combination of the foregoing.

Packets may be received at NIM from network for example from another network device in accordance with one or more network communications protocols. NIM may be any of a variety of types of known NIMs e.g. NICs available from a variety of manufacturers . NIM may include a receive module specifically configured to handle packets received from network . Receive module may include receive logic for handling packets and one or more network interface buffers e.g. NIC buffers for storing packet information of packets such as for example entire packets and or packet payloads. As used herein the payload of a packet is the contents of a packet to be sent to an application buffer. These contents typically comprise the information in the packet configured for consumption by an application and typically do not include header information configured for consumption by lower network protocol layers such as for example data link layers including Media Access Control MAC layers and logical link layers network e.g. IP layers and transport e.g. TCP layers.

In response to receiving packets receive logic may send an initial interrupt to host to indicate the packets have been received which may be referred to herein as a receive interrupt . While it waits to receive a response to the receive interrupt e.g. a DPC as described below in relation to receive logic may be configured to analyze header information and or other information within packets and some cases may be configured to perform one or more operations commonly associated with a network communications stack e.g. a TCP IP stack as described in more detail below. Receive logic may be configured to coordinate the transfer of packets from NIM to host based on the analyzed header information and or other information and may be configured to send packet information to host for example after receiving a response to the receive interrupt from the host. The packet information for each packet may include the entire packet or pieces of information corresponding to each packet such as for example header information corresponding to one or more layers of a network communications protocol.

NIM interface may be configured to receive packet information sent from network interface module and to serve as an interface between NIM and network communications processing module . For example NIM module may be any of a plurality of types of NIM and interface may be configured to hide the details of the type of NIM from module so that module does not have to be configured to implement the details of each individual type of NIM. Although not illustrated a plurality of NIMs e.g. NICs may be resident on network device and coupled to host . The NIM interface may include one or more subcomponents e.g. logical ports each subcomponent corresponding to a particular one of the plurality of NIMs. For example NIM interface may be a Network Driver Interface Specification NDIS module configured in accordance with NDIS and it may include an NDIS interface and a plurality of NDIS mini ports each mini port associated with a particular NIM connected to host .

The packet information provided to NIM interface may be provided in packet batches. As used herein a packet batch or batch is a set of one or more packets grouped together by the network interface module. For each batch that it receives the NIM interface may be configured to provide the packets within the batch to the network communications processing module individually i.e. one at a time. The number of packets included in one batch and indicated as such to interface may be based on any of a variety of factors including the interrupt moderation scheme used by NIM i.e. how often NIM interrupts the CPU with receive interrupts for incoming packets the speed of the NIM and the latency between the sending of the receive interrupt and the response from the host. In some embodiments NIM is configured to disable the sending of receive interrupts while the processing of a batch of received packets is in progress and to re enable the sending of the receive interrupts after all packets of the batch have been processed. As NIM receives more packets from the network it may generate another interrupt. After a response is received the NIM e.g. receive logic may package as a batch any packets it has received since the last time it created and indicated a batch to host and indicate the new batch of received packets to NIM interface . This cycle may continue as long as the NIM receives more packets from network . The processing of each batch of received packets by the host is often referred to herein as a receive cycle .

Network communications processing module processes each packet received by the host. This processing may include a number of operations including validating the packet identifying a connection to which the packet belongs finding an application buffer to which the packet payload should be copied copying the packet through the application buffer completing the I O request by making an appropriate system call acknowledging the received packet to the sender other operations or any suitable combination of the foregoing. In some embodiments for example when TCP IP processing is employed processing module is configured to complete a network I O request for a packet only after the entire packet payload of the packet has been copied into the application buffer. Further for efficiency purposes some of these operations such as completing I O requests and sending acknowledgement ACK packets to the sender may be deferred until the end of each receive cycle instead of performing as the individual packets are being processed.

In some embodiments network communications processing module may be configured to employ a CPU to copy the data payload of a packet from a network interface buffer to an application buffer . In such embodiments the copy is performed in essence immediately and the copying of the payload to the application buffer is complete by the time that the module receives notification from the CPU e.g. a return of the call made to the CPU . Obviously while the CPU is doing the copying it cannot be used for anything else. Accordingly in some embodiments it may be desirable to do a DMA copy rather than using the CPU for example by using DMA module so the CPU is free to be used to perform other operations for example processing a next received packet.

Accordingly in the some embodiments to copy the payload of a packet to an application buffer network communications processing module sends a DMA request to a DMA module . In some embodiments module includes a DMA interface that receives the DMA request and handles all communications between the module and a DMA engine included within DMA module . The DMA engine may be configured as the component that actually performs the copying of packet payloads from network interface buffers to application buffers e.g. as packet payloads . For example in some embodiments in which an operating system available from Microsoft Corporation is employed e.g. one of those operating systems listed below DMA interface may be a NetDMA application programming interface API and DMA engine may be a DMA engine produced by Microsoft Corporation or another third party vendor. By including a DMA interface the details of the DMA engine e.g. if the DMA engine is provided by a third party vendor are hidden from network communications processing module . That is module does not have to be configured for all potential configurations of DMA engine as these details are handled by DMA interface .

As used herein an application programming interface or API is a set of one or more computer readable instructions that provide access to one or more other sets of computer readable instructions that define functions and or data types so that such functions and or data types can be configured to be executed on a computer in conjunction with an application program. An API may be considered the glue between application programs and a particular computer environment or platform e.g. any of those discussed herein and may enable a programmer to program applications to run on one or more particular computer platforms or in one or more particular computer environments.

In response to a request DMA engine copies a packet payload to application buffer for a packet while the CPU is free to perform other operations such as processing other packets. As opposed to when a payload is copied using the CPU in which case the copy is completed relatively immediately the copy will be completed sometime in the future when the DMA module is used to copy the payload. Further the processing of the packet including notifying an application corresponding to the packet that the processing of the packet is complete e.g. that the I O request is complete cannot be achieved until the copy is complete.

In some embodiments to determine whether the copying of a packet payload is complete the DMA module may send an interrupt to CPU when completed. However as noted above such interrupts are an expensive use of CPU time. In other embodiments a polling method may be employed in which the network communications processing module sends a completion poll to DMA module . As used herein a poll is an inquiry sent from one component to another and polling is the sending of an inquiry from one component to another. Further a complete poll is an inquiry regarding whether the DMA copy of a packet payload has been completed.

In some embodiments the DMA module includes a completion status register in which the status of all DMA copies are stored. It should be appreciated that register could be located elsewhere on host outside of module . DMA engine may be configured to update the status of a DMA copy for a packet in register to complete in response to completing the copy of the packet payload. In response to receiving a completion poll the DMA interface or the DMA engine may access the completion status register entry corresponding to the packet for which the poll was submitted and determine whether the status is complete. The DMA interface may send a poll response in reply to the completion poll to the network communications processing module . If the poll response indicates that the processing is complete module may complete the I O processing for the packet. As noted above in some embodiments the completion of I O requests including sending acknowledgements to the sender of the packet are deferred until the end of a receive cycle.

While the DMA module is being polled the CPU cannot be used for anything else. Accordingly it may be desirable to schedule the polling of the DMA module to occur when it is likely that the DMA copy is complete so that the polling does not have to be repeated more than once. Further because the CPU itself is not performing the copy it cannot rely on determining the status of the copy by checking its internal cache. Accordingly the CPU would have to incur a cache miss to determine the status which makes polling for the completion of a DMA copy even more expensive which in turn makes the timing of the polling more critical.

Accordingly in some embodiments of the invention a network communications processing module polls the DMA module during a next receive cycle i.e. during the processing of a next batch from the cycle in which the packet is processed. By delaying the polling of the DMA module until a next cycle and thus delaying the completion of an I O request for an application the likelihood is increased in some cases significantly increased that by the time the polling takes place the copy operation is complete. As a result the DMA module may only be polled once thereby using a minimal amount of CPU time in polling the DMA module.

As noted above in some embodiments an I O request for a given packet cannot be completed until it has been positively verified that the DMA copy operation of the packet payload of the packet into an associated application buffer is complete. Thus by deferring polling for the completion of the DMA copy until a next receive cycle i.e. until a processing of a next batch the completion of the I O request for the packet is also deferred. It may be desirable to avoid delaying completion of an I O request for too long.

Accordingly in some embodiments system is configured to protect against cases in which a batch is not received by the host for too long a period of time. For example system may include a timer . Network communications processing module may be configured to set a timeout value in timer at the end of the each receive cycle. If the timeout value expires before module receives a next batch from NIM module may send completion poll . That is module may send completion poll before receipt and processing of a next batch. Processing module may be configured to cancel timer if a next batch is received before the timer elapses and reset the timer once again at the completion of the processing of the next batch.

The timeout value stored in timer may be selected to balance the competing interests of allowing a reasonable amount of time for a next receive cycle to begin i.e. for a next batch to be received and preventing too long a lapse of time which would result in excessive delay for completion of an I O request. For example in some embodiments the timeout value selected for the timer is selected such that on a relatively busy host in most cases the host for example network communications processing module e.g. a TCP IP stack of the host receives one or more packets for processing before the timer expires. As a result the expiration i.e. firing or executing of the timer is typically avoided for each receive cycle avoiding the relatively expensive costs of executing the timer. Rather the timer is typically canceled and reset once per receive cycle in response to a batch being received and then processed respectively during the receive cycle.

System and components thereof may be implemented using any of a variety of technologies including software e.g. C C C Java or a combination thereof hardware e.g. one or more application specific integrated circuits firmware e.g. electrically programmed memory or any combination thereof. One or more of the components of system may reside on a single device e.g. a computer or one or more components may reside on separate discrete devices. Further each component may be distributed across multiple devices and one or more of the devices may be interconnected.

Further on each of the one or more devices that include one or more components of system each of the components may reside in one or more locations on the system. For example different portions of the components of these systems may reside in different areas of memory e.g. RAM ROM disk etc. on the device. Each of such one or more devices may include among other components a plurality of known components such as one or more processors a memory system a disk storage system one or more network interfaces and one or more busses or other internal communication links interconnecting the various components. System and components thereof may be implemented using a computer system such as that described below in relation to .

In Act it may be determined whether a batch timer has expired i.e. executed or fired . As noted above at the completion of the processing of a batch a batch timer is set for example in Act below. If the timer has not expired then method proceeds to Act . It should be appreciated that Act although illustrated as an act performed as part of a series of acts of method is not limited to being an affirmative act performed in series as part of method . Rather the expiration of a timer is asynchronous event that may occur at any time prior to Act or may not occur at all.

In Act a next batch is received i.e. a next receive cycle is started as described above. In response to receipt of the batch the timer may be reset. In Act processing of the batch begins. The processing of a batch may include any of the operations described above including determining an application buffer to which to copy the payload of the packet in Act .

In Act a request may be made e.g. from network communications processing module to a DMA module to perform a DMA copy of a payload of the packet from a network interface module buffer e.g. buffer to a determined application buffer e.g. buffer for example as described above in relation to .

In Act it may be determined whether there is a next packet in the batch for example as the DMA copy of the previous packet is being performed. For example network communications processing module may determine whether there are any packets remaining in the packets of the batch indicating to it by network interface module . If there are more packets then method proceeds to and Acts are performed for the packet. If there is not a next packet in the batch then in Act for each packet of a previous batch e.g. an immediately preceding batch for which a DMA request was made the DMA module may be polled to determine whether the DMA copy for the packet is complete. For example as described above in relation to a completion poll may be sent to DMA module by module . DMA module in particular DMA interface may check the status of the DMA copy of the packet payload in completion status register . It should be appreciated that during the performance of Acts for a previous batch the DMA copying of the packet payloads of the present batch may be performed.

In Act for each packet for which a poll was made to the DMA module a poll response may be received and the packet processing may proceed accordingly. For example DMA interface may send a poll response to network communications processing module . For each packet if the poll response indicates that the DMA copying is complete then module. may indicate to the application corresponding to the packet that the I O request for the packet is complete and also may initiate sending an acknowledgement to the sender. If the poll response indicates that the DMA copy for a packet is not complete network communications processing module sends at least one more completion poll to DMA module . The number timing and frequency of the one or more additional completion polls i.e. in addition to the original completion poll sent for a packet may vary.

In Act a batch timer may be set. For example referring to timer may be reset at the completion of the processing of each batch. Method then may proceed to Act in which where it is determined whether the batch timer has expired before the reception of the next batch in Act . The performance of Acts may be considered the duration of the processing of a batch and or the receive cycle of a batch.

Although many of the acts of the method described above in relation to and functions described in relation to are described in relation to being performed by a host e.g. host for example a network communications processing module e.g. module and DMA module e.g. module running on of the host the invention is not so limited. One of more of these functions and or acts may be performed by a NIM e.g. NIM for example a NIC. For example system and method may be configured to implement any of a variety of technologies in which one or more aspects of performing network communications processing e.g. TCP IP processing is delegated to a NIM such as for example checksum task offload TCP Chimney offload Remote DMA RDMA other technologies and any suitable combination of the foregoing.

Method may include additional acts. Further the order of the acts performed as part of method is not limited to the order illustrated in as the acts may be performed in other orders and or one or more of the acts may be performed in series or in parallel at least partially. For example Acts and may be performed at any time after the performance of Act during performance of method . Further batch timer may be set at another time during the processing of a batch.

NDIS interface may send a deferred procedure call DPC to mini port driver . DCP may be sent in response to a receipt interrupt being sent from a network interface module e.g. NIM which may be a NIC. As noted above in response to receiving one or more packets from network NIM may send a receipt interrupt to host . The interrupt may cause a Interrupt Service Routine ISR call from the host to NDIS interface and then from NDIS interface to the mini port driver corresponding to NIM . Mini port driver after determining that the interrupt corresponds to NIM may request a DPC from NDIS interface . This eventually results in DPC being issued from NDIS interface to mini port driver . In essence NDIS interface may serve as middleman for all ISR and DPC calls between the host including TCP IP stack and mini port driver for NIM .

In response to receiving DPC mini port driver may indicate a batch of packets P Pk to NDIS interface . This indication may commence the receiving cycle e.g. the processing of a batch for example as part of Act described above.

Although mini port driver may indicate the packets in the form of batches to NDIS interface NDIS interface may indicate individual packets P P . . . Pk to TCP IP stack and as illustrated TCP IP stack may process the packets individually. For each packet after the application buffer for each packet has been determined e.g. as part of Act a DMA copy request may be sent to NetDMA interface . These requests are received in sequence by NetDMA interface . NetDMA interface then may convey these DMA requests to DMA engine . As illustrated in NetDMA interface may package two or more of the requests into a single DMA request communicated to DMA engine as part of requests . DMA engine then performs the DMA copying of the packet payloads .

As illustrated in NDIS interface sends a notification to TCP IP stack notifying it that the input of the current batch by NDIS interface to TCP IP stack is complete. However as illustrated in the DMA copying of the packets of the batch continue after the indication is made. Further it should be noted that TCP IP stack does not poll DMA interface at this time to determine whether any of the DMA copying is complete.

The process illustrated by elements for processing packets P Pk is repeated by elements for processing packets Pk Pm. However after indication TCP IP stack polls NetDMA interface for completion of the DMA copying of packets Pk Pm. If NetDMA interface indicates to TCP IP that the DMA copy of a packet payload is complete not shown then TCP IP stack may complete the I O request corresponding to the packet . TCP IP stack then may communicate to NIM that it is through processing the packets of the batch so the NIM can now use network interface buffers for other packets. This communication is illustrated in diagram by the return packets communication transmitted from TCP IP stack to NDIS interface and return packets communication sent from NDIS interface to mini port driver . In response to return packets communication mini port driver may send a communication to NIM so that NIM can free up buffers .

Method and the method illustrated by timing diagram and acts thereof and various embodiments and variations of these methods and these acts individually or in combination may be defined by computer readable instructions tangibly embodied on one or more computer readable media for example non volatile recording media integrated circuit memory elements or a combination thereof. Computer readable media can be any available media that can be accessed by a computer. By way of example and not limitation computer readable media may comprise computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices other types of volatile and non volatile memory any other medium which can be used to store the desired information and which can accessed by a computer and any suitable combination of the foregoing.

Computer readable instructions embodied on one or more computer readable media may define instructions for example as part of one or more programs that as a result of being executed by a computer instruct the computer to perform one or more of the functions described herein e.g. method and the method illustrate in timing diagram or any acts thereof and or various embodiments variations and combinations thereof. Such instructions may be written in any of a plurality of programming languages for example Java J Visual Basic C C or C Fortran Pascal Eiffel Basic COBOL etc. or any of a variety of combinations thereof. The computer readable media on which such instructions are embodied may reside on one or more of the components of any of systems and described herein may be distributed across one or more of such components and may be in transition therebetween.

The computer readable media may be transportable such that the instructions stored thereon can be loaded onto any computer system resource to implement the aspects of the present invention discussed herein. In addition it should be appreciated that the instructions stored on the computer readable medium described above are not limited to instructions embodied as part of an application program running on a host computer. Rather the instructions may be embodied as any type of computer code e.g. software or microcode that can be employed to program a processor to implement the above discussed aspects of the present invention.

It should be appreciated that any single component or collection of multiple components of a computer system for example any of the computer systems described in relation to and that perform the functions described herein can be generically considered as one or more controllers that control such functions. The one or more controllers can be implemented in numerous ways such as with dedicated hardware and or firmware using a processor that is programmed using microcode or software to perform the functions recited above or any suitable combination of the foregoing.

Various embodiments according to the invention may be implemented on one or more computer systems. These computer systems may be for example general purpose computers such as those based on Intel PENTIUM type processor Motorola PowerPC Sun UltraSPARC Hewlett Packard PA RISC processors any of a variety of processors available from Advanced Micro Devices AMD or any other type of processor. It should be appreciated that one or more of any type of computer system may be used to implement various embodiments of the invention.

A general purpose computer system according to one embodiment of the invention is configured to perform one or more of the functions described above. It should be appreciated that the system may perform other functions and the invention is not limited to having any particular function or set of functions.

For example various aspects of the invention may be implemented as specialized software executing in a general purpose computer system such as that shown in . The computer system may include a processor connected to one or more memory devices such as a disk drive memory or other device for storing data. Memory is typically used for storing programs and data during operation of the computer system . Components of computer system may be coupled by an interconnection mechanism which may include one or more busses e.g. between components that are integrated within a same machine and or a network e.g. between components that reside on separate discrete machines . The interconnection mechanism enables communications e.g. data instructions to be exchanged between system components of system . Computer system also includes one or more input devices for example a keyboard mouse trackball microphone touch screen and one or more output devices for example a printing device display screen speaker. In addition computer system may contain one or more interfaces not shown that connect computer system to a communication network in addition or as an alternative to the interconnection mechanism .

The storage system shown in greater detail in typically includes a computer readable and writeable nonvolatile recording medium in which signals are stored that define a program to be executed by the processor or information stored on or in the medium to be processed by the program. The medium may for example be a disk or flash memory. Typically in operation the processor causes data to be read from the nonvolatile recording medium into another memory that allows for faster access to the information by the processor than does the medium . This memory is typically a volatile random access memory such as a dynamic random access memory DRAM or static memory SRAM . It may be located in storage system as shown or in memory system not shown. The processor generally manipulates the data within the integrated circuit memory and then copies the data to the medium after processing is completed. A variety of mechanisms are known for managing data movement between the medium and the integrated circuit memory element and the invention is not limited thereto. The invention is not limited to a particular memory system or storage system .

The computer system may include specially programmed special purpose hardware for example an application specific integrated circuit ASIC . Aspects of the invention may be implemented in software hardware or firmware or any combination thereof. Further such methods acts systems system elements and components thereof may be implemented as part of the computer system described above or as an independent component.

Although computer system is shown by way of example as one type of computer system upon which various aspects of the invention may be practiced it should be appreciated that aspects of the invention are not limited to being implemented on the computer system shown in . Various aspects of the invention may be practiced on one or more computers having a different architecture or components that that shown in .

Computer system may be a general purpose computer system that is programmable using a high level computer programming language. Computer system also may be implemented using specially programmed special purpose hardware. In computer system processor is typically a commercially available processor such as the well known Pentium class processor available from the Intel Corporation. Many other processors are available. Such a processor usually executes an operating system which may be for example the Windows 95 Windows 98 Windows NT Windows 2000 Windows ME or Windows XP operating systems available from the Microsoft Corporation MAC OS System X available from Apple Computer the Solaris Operating System available from Sun Microsystems Linux available from various sources or UNIX available from various sources. Any of a variety of other operating systems may be used.

The processor and operating system together define a computer platform for which application programs in high level programming languages are written. It should be understood that the invention is not limited to a particular computer system platform processor operating system or network. Also it should be apparent to those skilled in the art that the present invention is not limited to a specific programming language or computer system and that other appropriate programming languages and other appropriate computer systems could also be used.

One or more portions of the computer system may be distributed across one or more computer systems not shown coupled to a communications network. These computer systems also may be general purpose computer systems. For example various aspects of the invention may be distributed among one or more computer systems configured to provide a service e.g. servers to one or more client computers or to perform an overall task as part of a distributed system. For example various aspects of the invention may be performed on a client server system that includes components distributed among one or more server systems that perform various functions according to various embodiments of the invention. These components may be executable intermediate e.g. IL or interpreted e.g. Java code which communicate over a communication network e.g. the Internet using a communication protocol e.g. TCP IP .

It should be appreciated that the invention is not limited to executing on any particular system or group of systems and that the invention is not limited to any particular distributed architecture network or communication protocol.

Various embodiments of the present invention may be programmed using an object oriented programming language such as SmallTalk Java J J Sharp C Ada or C C Sharp . Other object oriented programming languages may also be used. Alternatively functional scripting and or logical programming languages may be used. Various aspects of the invention may be implemented in a non programmed environment e.g. documents created in HTML XML or other format that when viewed in a window of a browser program render aspects of a graphical user interface GUI or perform other functions . Various aspects of the invention may be implemented as programmed or non programmed elements or any combination thereof. Further various embodiments of the invention may be implemented using Microsoft .NET technology available from Microsoft Corporation.

Having now described some illustrative embodiments of the invention it should be apparent to those skilled in the art that the foregoing is merely illustrative and not limiting having been presented by way of example only. Numerous modifications and other illustrative embodiments are within the scope of one of ordinary skill in the art and are contemplated as falling within the scope of the invention. In particular although many of the examples presented herein involve specific combinations of method acts or system elements it should be understood that those acts and those elements may be combined in other ways to accomplish the same objectives. Acts elements and features discussed only in connection with one embodiment are not intended to be excluded from a similar role in other embodiments. Further for the one or more means plus function limitations recited in the following claims the means are not intended to be limited to the means disclosed herein for performing the recited function but are intended to cover in scope any equivalent means known now or later developed for performing the recited function.

Use of ordinal terms such as first second third etc. in the claims to modify a claim element does not by itself connote any priority precedence or order of one claim element over another or the temporal order in which acts of a method are performed but are used merely as labels to distinguish one claim element having a certain name from another element having a same name but for use of the ordinal term to distinguish the claim elements.

