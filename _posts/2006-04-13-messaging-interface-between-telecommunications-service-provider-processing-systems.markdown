---

title: Messaging interface between telecommunications service provider processing systems
abstract: A messaging interface provides the flexibility to allow interchangeability of underlying telecommunications service provider processing systems, such as billing systems. At the same time, the messaging interface extends the underlying functionality of the telecommunications service provider processing system to a series of business events defined as part of a common data model shared across multiple telecommunication service provider processing systems. The messaging may implement a mechanism for tracking the implementation of the business event in the underlying telecommunication service provider processing systems.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07894584&OS=07894584&RS=07894584
owner: Accenture Global Services Limited
number: 07894584
owner_city: Dublin
owner_country: IE
publication_date: 20060413
---
This application claims the benefit of EPO Application No. 06425191.1 filed Mar. 22 2006 and Italian Application No. BS2006A000065 filed Mar. 22 2006 both of which are incorporated herein by reference in their entirety.

This invention relates to telecommunications processing systems. In particular this invention relates to a flexible and independent messaging interface between telecommunications service provider processing systems.

Rapid advances in data processing and telecommunications technology have lead to a vast array of communication services available to the consumer. Such telecommunication services include traditional telephone service Internet service cable television service cellular phone service paging service combined voice and data delivery service and many other services.

The advances in technology though rapid did occur over time. As a result many telecommunications services providers began with telecommunications system architectures directly supporting a small subset of the services now available today. The early architectures were specific to individual services such as wireline telephone services. Furthermore the architectures commonly employed service specific billing systems such as billing systems tailored for wireline telephone billing. While these service specific billing systems were well suited for implementing billing related functions these systems may not be optimized for other tasks such as managing billing data and the like.

Beyond billing systems each architecture also included other dedicated supporting systems such as customer care systems. The customer care systems were responsible for communicating and receiving messages to and from the billing systems such as messages which established new customers. In other words as they began to offer more products and services telecommunications service providers were faced with the time consuming expensive and difficult task of installing maintaining and upgrading multiple independent systems in multiple independent architectures.

As these systems were integrated into a unified architecture developers took advantage of the built in functionality of pre existing billing systems and developed tightly coupled systems. As a result enhancing legacy architectures poses significant technical challenges. One technical challenge lies in extending functionality to process new products and services because the tightly coupled nature of current integrations has left the architectures limited to performing only those functionalities offered by the legacy billing systems. Thus previous architectures could only support limited function sets supported by the legacy systems and associated integration components. In other words these systems could be integrated only to the degree that the underlying support system offered functions for performing given tasks. Another technical challenge is tracking message processing. In the past message tracking was limited by the functionalities of the legacy systems. Typically legacy billing systems do not provide any capability to enable the tracking of an entity s identifier exchanged between messages from for example a CRM system to the billing system. As a result telecommunication service providers are left exposed to the risk of duplicated data due to the multiple processing of the same message. Moreover these limitations make the analysis of any rejected messages such as invalid messages extremely complex. These limitations hamper the telecommunications industry which is one that continually needs to improve and evolve its existing products and services and which frequently introduces new products and services.

Accordingly a need has long existed for an improved rating system for a telecommunications service provider.

A messaging interface implements several technical solutions to the technical problems associated with efficiently flexibly and reliably extending the functionality of a telecommunications service provider processing architecture in order to facilitate communications between telecommunication service provider processing systems. As a result the messaging interface reduces the difficulty cost and time expenditures typically associated with integrating a new component into the architecture. The messaging interface also eliminates duplicative processing of events as well as the duplicative storage of information and duplicative communications among the various telecommunication service provider processing systems which flow as a result of the additional processing.

One technical solution is layering the functionalities of the messaging interface to make the messaging interface highly reusable and extendible. Specifically functionalities of the messaging interface that depend on the underlying support system may be logically separated from those functionalities that are independent of the underlying support system. As a result only certain layers of the messaging interface may need to be adapted to integrate a new support system into the architecture. The remaining layers need not change.

Another technical solution lies in removing core message processing from the underlying support system and relocating the processing to the messaging interface. In the past system architects were at the mercy of the processing performance and functionalities of the underlying support system. By moving message processing to the messaging interface the system architect can define a common set of message or events that may be used across multiple different support systems. Again this alleviates the dependency of the architect on the capabilities of the support system and allows the architect to choose from a wider variety of underlying support systems. This also allows for more efficient processing of messages by freeing the underlying support system to only perform processing related to its underlying function such as billing related processing for example while allowing message processing routing and tracking to be performed outside of the underlying support system.

Another technical solution is provided in maintaining hierarchical relationships between support systems. In particular the hierarchies of data elements in one system may be maintained as data is transferred through the architecture such as hierarchical relationships between products services and the like. This ensures the integrity of product offerings and the like for example such that child products or services may not be inadvertently processed without an underlying parent product. As a result duplicative and or erroneous processing of events is eliminated.

Yet another technical solution is provided by maintaining a correlation between support system specific product identifiers. For example a table may be used to store identifiers of products services and the like. Identifiers used in specific support systems may be associated such that the table provides a mapping from the identifier used in one system to a corresponding identifier used in a second system. This mapping allows the interface to track processing of orders and verify that account modifications are intended for valid products that already exist in each system eliminating duplicative and or erroneous processing by the systems.

In one aspect a messaging interface for communication between telecommunications service provider processing systems is provided. The messaging interface may include a product instance table that includes multiple records which establish interrelationships between a first product instance identifier associated with a first telecommunications service provider processing system and a second product instance identifier associated with a second telecommunications service provider processing system.

The messaging interface may also include a memory. The memory may include message parameters which report an event. The event may be part of a common data model used across multiple telecommunication service provider systems. For example the events may include a Create Customer business event a Modify Customer General Data event a Modify Customer Fiscal Address Data event a Create Billing Account Data event a Modify Billing Account General Data event a Modify Billing Account Billing Profile Data event a Modify Billing Account Bill to Person Data event a Modify Billing Account Bill to Address Data event a Modify Billing Account Payment Data event or an Service Order event.

The messaging interface may also include an interface program operable to implement the event in the second telecommunications service provider processing system. The interface program may include instructions which determine the first product instance identifier using at least one of the message parameters perform an action on the second telecommunications service provider processing system associated with the second product instance identifier and update the product instance table using the first product instance identifier and the second product instance identifier. Finally a processor may be coupled to the memory and the product instance table which executes the interface program.

Other systems methods features and advantages of the invention will be or will become apparent to one with skill in the art upon examination of the following figures and detailed description. It is intended that all such additional systems methods features and advantages be included within this description be within the scope of the invention and be protected by the following claims.

The elements illustrated in the Figures interoperate as explained in more detail below. Before setting forth the detailed explanation however it is noted that all of the discussion below regardless of the particular implementation being described is exemplary in nature rather than limiting. For example although selected aspects features or components of the implementations are depicted as being stored in memories all or part of systems and methods consistent with the messaging interface may be stored on distributed across or read from other machine readable media for example secondary storage devices such as hard disks floppy disks and CD ROMs a signal received from a network or other forms of ROM or RAM either currently known or later developed.

Furthermore although specific components of the communications architecture will be described methods systems and articles of manufacture consistent with the messaging interface may include additional or different components. For example a processor may be implemented as a microprocessor microcontroller application specific integrated circuit ASIC discrete logic or a combination of other type of circuits or logic. Similarly memories may be DRAM SRAM Flash or any other type of memory. Flags data databases tables and other data structures may be separately stored and managed may be incorporated into a single memory or database may be distributed or may be logically and physically organized in many different ways. Programs may be parts of a single program separate programs or distributed across several memories and processors. Systems may be implemented in hardware software or a combination of hardware and software in one processing system or distributed across multiple processing systems.

The customer care management system includes a processor a memory and a customer database . The customer care management system also includes a communication interface . A customer care management program in the memory prepares messages .

In one implementation the processor in the customer care management system executes Siebel 7.8 CME and Siebel Server under the Windows operating system the UNIX operating system the SUN Solaris operating system or any other operating system. Additionally an Oracle or Microsoft SQL server platform may implement the customer database . However additional or different customer care management programs may be implemented in the customer care management system .

The customer care management system communicates the messages through the communication interface to the messaging interface . A message may define an event such as a request for the creation of a customer account in the billing system. Alternatively multiple messages may be used to define a single event or a single message may define multiple events. Exemplary messages or events are described in more detail below. The messaging interface may also include a processor and a memory .

As shown in the messaging interface is implemented as an independent processing system. However the messaging interface may be implemented in other manners. For example the messaging interface may be implemented as hardware and or software integrated with the customer care management system the billing system or other systems in the communications architecture . As another example the messaging interface may be implemented as an extension to a messaging protocol processing layer e.g. a message adaptation layer or message transport layer within or external to the customer care management system or billing system .

The messaging interface may include layers that separate certain functionalities of the interface . As illustrated the interface may include an integration layer an event layer an logic layer and an API layer . The integration layer may convert a message to a representation that conforms to a standard or common data model that is enforced across two or more of the systems and of the architecture .

The event layer may include functions for transforming the standard or common data model representation into data types for use in a specific system of the architecture . The logic layer may include logic for managing calls to system specific functions available through an API layer offered by a specific system of the architecture . The logic layer may invoke these functions to implement a message in the underlying support system of the architecture . Finally the messaging interface may be coupled with a product instance table for maintaining relationships between identifiers used to track products services and the like in the various support systems of the architecture . Herein the phrase coupled with is defined to mean directly connected to or indirectly connected through one or more intermediate components. Such intermediate components may include both hardware and software based components. The layers and their respective functionalities as well as the product instance table are described in more detail below.

The support systems include the billing system . shows that the billing system includes a processor a memory and a communication interface . The memory may store a billing program as well as a database in which the billing system stores various billing related information. Typically the information is stored in the billing system database according a data model associated with the billing system . In other words the billing system includes hardware and software support logic which processes billing action requests. The support logic in the billing system may be implemented with commercially available billing software packages such as Portal s Infranet billing package Convergys Geneva billing package Intec Singl.eView Comverse FX billing package as well as with custom billing software.

Communication between the customer care management system the messaging interface and the support systems may be accomplished in many ways. In some implementations the communication interfaces and may be network sockets defined by IP addresses port numbers and communication protocols. The messages may travel between the systems and according to a wide range of protocols including Tibco Rendezvous Messaging protocol IBM MQseries protocol Java Message Service protocol or HTTP. In other implementations the systems and communicate via interprocess communication messaging or signaling.

The architecture may incorporate message passing and application integration technologies such as TIBCO Business Work messaging BizTalk messaging BEA WLI and Vitria telecommunications solutions. Adapters may be provided between the customer care management system and the message routing system as well as between the messaging interface and the support systems . The adapters may support transformation of the messages and or message content from a format defined by one schema e.g. a schema for messages to adhere to in the customer care management system to another format defined by another schema e.g. a schema for messages to adhere to in the messaging interface and or support systems .

In one implementation the messages may contain data described by extensible Markup Language XML tags and the adapters perform transformation according to extensible Stylesheet Language for Transformations XSLT stylesheets. The transformations may transform data between schemas for any of XML Web Service Definition Language WSDL extensible Scheme Diagram XSD as examples. The messages may move between systems using any kind of transportation or data access protocol including HTTP Simple Object Access Protocol SOAP or other protocols in place at the customer care management system messaging interface and or support systems . As described above the messages may represent the occurrence of or a request for an event to be processed by the support systems such as the billing system .

As shown in the messaging interface may support various types of messages . For example the interface may support messages that define Customer related events for handling Customer level data messages that define Billing Account related events for handling Billing Account level data and messages that define Service Order related events for handling the processing of orders for products and services. The messaging interface may support other types of events.

In one implementation the Customer related events include a CreateCustomer business event a ModifyCustomerGeneralData business event and a ModifyCustomerFiscalAddress business event . The CreateCustomer event may occur when an order for a new customer is submitted. When the first order for a new customer is submitted a CreateCustomer message may be sent including the information used to create the account hierarchy in the billing system . The CreateCustomer event may be mapped to a specific entity such as any data field in the billing system database so as to support the same customer and billing account hierarchy in the customer care system and the billing system . In the implementation supported by the data model described below with regard to successful processing of the CreateCustomer event by the billing system may occur before the creation of a Billing Account because a customer can have one or more Billing Accounts. Optionally the CreateCustomer event may include a flag or other parameter which differentiates between the creation of a residential customer or a business customer. An exemplary XML message defining a CreateCustomer event is shown in Table 1.

The ModifyCustomerGeneralData event may be used to update any of the customer general data attributes. Customer general data may refer to any customer account data. For example customer general data may include data about the address of the customer and other customer specific information like name personal ID or customer type. In one implementation the customer type may include an individual or residential type or business type. Optionally specific business events may modify data associated with a customer. For example the ModifyCustomerFiscalAddress event may update the fiscal address of a customer. Exemplary XML messages defining a ModifyCustomerGeneralData event and a ModifyCustomerFiscalAddress event are shown in Tables 2 and 3 respectively.

The Billing Account related events may include events for handling data related to billing accounts. In one implementation the Billing Account related events may include a CreateAccount event a ModifyAccountGeneralData event a ModifyAccountBillingProfile event a ModifyAccountBillToPerson event a ModifyAccountBillToAddress event and a ModifyAccountPaymentData event . The CreateAccount event may occur when an order for a new account is submitted. The CreateAccount event may include information for recreating the account hierarchy in the billing system . The information may include a billing account code a customer code bill account code a bill start date a billing account object a billing profile object a payment data object an address object a contact object and the like. The billing account objection may include a reason for a bill status change field a bill status code field a currency code field a language field an organizational code field a tax type field an account type field and the like. The billing profile object may include a bill frequency field a bill type field a media type field a payment method field and the like. The payment data object may include a bank account number field bank account type field a bank branch field a bank name field a payer first name field a payer last name field a payer personal ID field a credit card expiration date field a credit card number field a credit card type field and the like. Finally the address object may include a street type field an address number field a city field a ZIP code field a state field a country field a contact field a contact first name field a contact last name field a contact title field a contact phone field a contact email field an greetings field and the like. The greetings field may be used to address the contact on the bill and may include for example the concatenation of the Contact title first name and last name fields. Other information may also be used. An exemplary XML message defining a CreateAccount event is shown in Table 4.

A ModifyAccountGeneralData event may occur when general information about a billing account needs to be updated. For example general data for a billing account may include a reason for the status change a status code a currency code a language identifier an organizational code a tax type and an account type. Other data items may also be included. An exemplary XML message defining a ModifyAccountGeneralData event is shown in Table 5.

The ModifyAccountBillingProfile event may occur when information about the invoice for a billing account changes. Information related to a billing invoice may include the bill period bill format media type payment method and the like. The ModifyAccountBillToPerson event may occur when information about a registered person of the billing account changes. This event may include information such as first name last name phone number and the like. The ModifyAccountBillToAddress event may occur when information about the shipment address of a billing account changes. Information related to the shipment address may include a street name address number city state zip code and the like. The ModifyAccountPaymentData event may occur when information about the bank account and or credit card data used to make payments on the billing account change. Information related to a bank account and or credit card may include a bank account number bank account type bank branch bank name payer first name payer last name payer personal ID credit card expiration date credit card number credit card type and the like. Exemplary XML messages defining a ModifyAccountBillingProfile event a ModifyAccountBillToPerson event a ModifyAccountBillToAddress event and a ModifyAccountPaymentData event are shown in Tables 6 7 8 and 9 respectively.

Service order related events may be used for handling the processing of orders for products and services. For example service order events may be indicative of a transaction originating in a CRM system. As a consequence of the transaction the service order event may be generated and passed to the billing system. In one implementation an AssetComponent event may be used to indicate a CRM transaction and may include information related to products and or services and the account that should be updated. For example an AssetComponent event may occur when a service order needs processing or when information about discounts and provisioning need updating. An AssetComponent event may include a root instance ID a parent instance ID a product instance ID an action code a product catalogue ID a service ID a tariff ID a start date for the product or service a modify date for the product or service an end date for the product or service a list of attributes for the product or service and the like. The list of attributes may include a plurality of attribute objects that define an attribute action code attribute name attribute value and the like. An exemplary XML message defining an AssetComponent event is shown in table 10. An exemplary attribute object defined in XML is shown in Table 11.

The action code may define the set of actions associated with a product or service that may be performed by the billing system . For example the billing system may be able to add a product or service delete a product or service suspend a product or service resume a product or service or update a product or service. These actions may have corresponding actions codes such as add delete suspend resume and update respectively. Other actions and corresponding codes may also be used. Specific implementations for performing these various actions are described in more detail below with reference to .

As noted above telecommunication service providers offer interrelated products and services. As described in more detail below these products and services may be represented hierarchically as a single entity. Accordingly AssetComponent events may be serviced in various manners. For example a bundle processing integration model may be implemented in which the entire hierarchical product structure is included in the event . For example a customer may order a cell phone as a parent product as well as a voicemail service for use on the phone. Under a bundle processing methodology a single AssetComponent event may be used to represent the ordering of the phone and voicemail. Alternatively a per partes processing integration model may be implemented in which each base or child product or service is processed individually. Referring to the example above two AssetComponent events may be used under a per partes processing system one to activate the phone and a second for activating the voicemail. Other processing methods may also be used. The processing of AssetComponent events are discussed in further detail below in reference to .

The customer entities represent customer data and may include an organizational entity . For example a customer entity may represent the legal entity representing the customer data such as the entity contractually related to the telecommunication service provider and that may be responsible for any dunning action resulting from a failure to promptly pay for products and or services. The organizational entity may have a one to many relationship with customer entities . As shown in the customer entity represents an individual or corporation as the physical or juridical person that has bought or is going to buy a product or service. Each customer entity may be associated with one or more billing account entities which represent the accounting entity to which products and services belong for which charges are accrued and to which payments and adjustments may be accounted. For example a billing account may comprise a telephone number for a wireline service. As a result the customer entity acts a grouping entity for the billing accounts . Additionally the customer entities may include address entities service account entities contact entities billing profile entities and payment data entities that may be interrelated as shown in . Other relationships between the customer data may also be used.

The order and subscription entities represent orders and subscription data. In the implementation shown in the order and subscription entities may include product service instance entities that define a particular instance of a product or service. The product service instance entities may be related to the billing account entities such that each billing account entity may be related to one or more product service instance entities . In turn each product service entity may be associated with one or more additional product service entities an event source entity that may define the entity that is used by the billing system to guide the usage to the appropriate billing account as well one or more attribute instance that each defines an attribute of the product or service defined by the product service entities . Using the product service entities and their associated event source and attribute instance entities the logical data model may be used to define a hierarchical relationship between a parent product and its associated services and or child products. For example a customer may order a phone that comes with voicemail and a carrying case. Maintaining the relationship among the phone voicemail and carrying case ensures that an order for the voicemail and or carrying case will not be processed without the parent product also. Additionally the order and subscription entities may include order entities that define an order and order item entities that define the items of an order .

The logical data model may also include product and service catalogue entities . The product and service catalogue entities may define a catalogue of products and services offered by the telecommunications services provider and may include product and service entities that define archetypical products and services offered by the telecommunications services provider attribute entities that define attributes of the products and services and price list entities that define pricing structures for the product and service.

In order to ensure consistency among the various systems of the telecommunications network it may be important to maintain the hierarchical relationships of the logical data model across systems. For example it may important to avoid processing child products and services if the parent product with which they are associated does not exist. Similarly maintaining the hierarchical relationship between products and services may also avoid duplicative billing and inaccurately processing bundled packages. Alternatively or additionally it may be advantageous to maintain the hierarchical relationship between the customer entities and billing account entities for similar reasons. For example discounted products and or services may be offered for preferred customers that maintain multiple billing accounts. By maintaining the hierarchical relationship between customers and billing accounts the interface may ensure that business events may be processed correctly.

Similarly relationships among products may also be maintained. For example main product entities may include one or more component services and child products in accordance with the data model . The interface may map these entities to corresponding fields in the support system such as fields and as illustrated. Additionally other data items may also be mapped from the common data model to support system equivalents. For example parent product attributes and event source information component service attributes and event source information child product attributes and discounts and discount attributes may be associated with specific fields of the support system database such as fields and respectively as illustrated.

As illustrated in one product represented in the data model may be represented by multiple different support system entities . For example a single product of the data model may map to a product child product and possibly several services entities . In order to overcome the technical problems associated with effectively managing and maintaining these relationships a product instance table may be used to drive these possible combinations in accordance with the catalogue entities of the data model .

The event layer may perform further processing of the shared object . For example the event layer may convert the shared objects into normalized objects . The normalized objects may represent an abstraction of the shared object that maintains the relationships defined in the shared object but is structured in terms of billing system entities. In other words the normalized object may be representation of the shared object that is compliant with the underlying billing system. The event layer may also convert a normalized object into primitive data types such as integers and the like for use with the billing system . The primitive data types may not maintain the relationships of the logical model and may be based on Application Programming Interfaces APIs developed for use with the billing system . For example the API may expose specific entities associated with the billing system such as fields in a billing system database by including functions for accessing and manipulating these entities. In order to perform this processing the event layer may invoke various functionalities of a common shared object library normalized object library and functions from the billing system API such as hashes conversion functions to convert the normalized object to more primitive data types .

The logic layer may manage the set of calls to the billing system in order to implement the business events . For example the logic layer calls functions associated with an API of the billing system which reside at the API layer to process a message or event. For example one or more API calls may implement a specific event such as creating a new customer account in the billing system and populating that account with customer account data. Depending on the message or event to be processed the interface may call various functions. The logic layer may utilize the primitive data types in order to implement these function calls.

The example shown in shows a logic layer which includes a service order function that handles the processing of an AssetComponent event . For example the function may invoke a ProductInstanceInsert function to insert a new product instance a ProductInstanceSvcInsert function to insert a new product dependent service a ServiceInsert function to insert a new product independent service and a ProductInstanceComplete function to finalize the addition of a new product or service. Additionally the service order function may also call a ProductInstanceUpdate function to update information associated with existing products and a ServiceInstanceUpdate function to update information associated with existing services. Other functions of the billing system API may be invoked to perform the processing of an AssetComponent event or any other event that may be supported by the interface .

By segmenting the functionality of the interface into layers the interface may be more readily reusable. For example the functionalities of the interface layer do not depend on the underlying support system . Accordingly the same integration layer may be used to support a multitude of underlying support systems . In order to configure the interface for a specific support system a system architect may modify the event layer to create normalized objects for the new support system and modify the logic layer to call those functions offered by the new support systems API . As a result message or event processing may be standardized within the interface and the architecture may readily take advantage of a wide variety of support systems without worrying about the event handling limitations of those underlying support systems .

Next the integration layer of the messaging interface converts the message into a shared object act that represents a common data model representation of the event . Once the shared object is formed the interface proceeds to convert the shared object to a normalized object. A two step process may be used perform this conversion. First the interface may identity product configuration data associated with the product or service act . Product configuration data may include data needed by the underlying billing system and that may be used during the conversion of a shared object to a normalized object . Next the interface may extract product data from the shared object representation act . This data may include actual product attributes supported by the data model as well as derived attributes for use in the underlying support system .

As noted above represents a per partes processing of an AssetComponent event . Accordingly the interface next identifies an entity type for the specified product or service act . Depending on the identified type additional processing of may be performed to ensure the proper handling of the event . For example if a child product is identified the interface may identify a parent product instance associated with the child product act and extract the associated based product information act . On the other hand if the interface determines that a parent product or service is being processed no additional processing may be required.

Next the product and or service data may be aggregated and transformed into a normalized object using entities of the billing system act . As noted above the normalized object represents a hierarchical view of the AssetComponent defined in terms of support system entities such as entities used by the billing system . The normalized object may then be converted into more primitive data forms for use by the billing system such as integers strings and the like act .

Once the data is suitable for processing by the billing system the interface may call a series of functions supported by the billing system to process the request act . As illustrated the interface may invoke functions for example by a remote procedure call or the like to create delete and or update a parent product instance in the billing system act create delete and or update a base service instance in the billing system act create delete and or update a child product instance in the billing system act create delete and or update a child service instance in the billing system act populate any additional derived attribute data in the billing system act and to complete processing of a product or service instance in the billing system act . Finally the interface may process and encode the result of the call act and send this reply back to the architectural component that initiated the event act . This may include a valid or successful result an error code and the like.

The interface may also insert child products into the billing system . Depending on the integration model employed the acts of the interface may vary. As illustrated the interface may insert the child product directly into the billing system database act and product instance table act when implementing bundle processing. However when per partes processing is employed the interface may determine if an entry exists for the child product. If there is no corresponding entry a new instance is inserted into the billing system database act and the product instance table act . If an entry does exist however only a new product instance entry may need to be inserted act .

Alternatively the action code may include a resume request. If a matching entry does not exist for a child product associated with a resume request an error may be thrown act . If a match is present a check may be performed to verify that the current status of the child product or service is suspend If not no action may be necessary. If the child product or service is currently suspended the product instance table act may be updated to reflect the change in status. Similarly a suspend or cancel request may throw an error if no the child product or service does not already have a corresponding entry in the product instance table act . If all services associated with the child product or service are suspended or canceled depending on the type of request the product instance table may be updated act .

The messaging interface employs several technical solutions to the technical problems of efficiently flexibly and reliably extending the functionality of a telecommunications service provider processing architecture in order to facilitate communications between telecommunication service provider processing systems. As a result a system architect is not limited by the time consuming complexities typically associated with integrating a new component into the architecture.

One technical solution is the use of layering the functionalities of the interface to make the interface as reusable as possible. Functionalities that depend on the underlying support system to be integrated may be separated from those dependent functionalities so that only a small portion of the interface may need to be adapted for integrating a new support system .

Another technical solution lies in removing core message or event processing from the underlying support system to the interface . In the past system architects were at the mercy of the processing performance and functionalities of the underlying support system . By moving this aspect to the interface the system architect can define a common set of message or events that may be used across multiple different support systems . Again this alleviates the dependency of the architect on the capabilities of the support system and allows the architect to choose from a wider variety of underlying support systems .

Another technical solution is provided in maintaining various hierarchical relationships between support systems . In particular the hierarchies of data elements in one system may be maintained as data is transferred through the architecture such as hierarchical relationships between products services and the like. This ensures the integrity of product offerings and the like for example such that child products or services may not be inadvertently processed without an underlying parent product.

Yet another technical solution is provided by maintaining a correlation between support system specific product identifiers. For example a table may be used to store identifiers of products services and the like. Identifiers used in specific support systems may be associated such that the table provides a mapping from the identifier used in one system to a corresponding identifier used in a second system. This mapping allows the interface to track processing of orders and verify that account modifications are intended for valid products that already exist in each system.

While various embodiments of the invention have been described it will be apparent to those of ordinary skill in the art that many more embodiments and implementations are possible within the scope of the invention. Accordingly the invention is not to be restricted except in light of the attached claims and their equivalents.

