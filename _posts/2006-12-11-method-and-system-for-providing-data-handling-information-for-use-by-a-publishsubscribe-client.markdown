---

title: Method and system for providing data handling information for use by a publish/subscribe client
abstract: A method for providing data handling information for use by a client of a pub/sub service to handle data published by the pub/sub service includes receiving a subscription request to a data tuple that includes source data from a client of the pub/sub service. When the request is received, a first subscription is provided for the client to the data tuple and a second subscription, distinct from the first subscription, is automatically provided for the client to a data handling tuple that is associated with the data tuple and that includes data handling information defining how the source data of the data tuple is to be handled by the client. A first notification message including the source data is generated and a second notification message, distinct from the first notification message, is generated that includes the data handling information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09330190&OS=09330190&RS=09330190
owner: Swift Creek Systems, LLC
number: 09330190
owner_city: Portsmouth
owner_country: US
publication_date: 20061211
---
A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

More and more users of electronic devices are exchanging digital information asynchronously in substantially real time over the Internet using asynchronous communication protocols. Unlike traditional communication protocols such as HyperText Transport Protocol HTTP the commands of an asynchronous protocol such as publish subscribe pub sub communication protocols are structured such that there need not be a one to one correspondence between requests and responses exchanged between the devices. In some cases a sender of information via the protocol need not wait nor expect a response from a receiver. Moreover a receiver need not have sent a request corresponding to each received response. That is a receiver may receive multiple responses to a single request and or may receive an unsolicited message from a device. Thus unlike HTTP where the reply is sent directly synchronously and only in response to the entity s request the information can instead be sent in response to the sender s posting of the information i.e. asynchronous to the request of information .

According to pub sub communication protocols an entity referred to as a subscriber or subscriber client is allowed to subscribe to information provided by another entity referred to as a publisher via a pub sub service. Publishers publish to a distinct ID typically a uniform resource identifier URI or uniform resource locator URL URL and subscribers subscribe by providing the ID. The publisher posts i.e. publishes the information to the pub sub service identifying the tuple to be created or updated the service then transmits the published tuple information to all interested parties i.e. subscribers via notification messages. The published information can be read simultaneously by any number of subscribers. So long as the subscriber remains subscribed to the information the subscriber will continue to receive notification messages corresponding to the publisher s postings.

Notably as is used herein the term publish subscribe refers to the class of services and associated protocols where a subscriber receives only the most recently published information in a notification message resulting from a subscription. That is the pub sub service transmits to the subscriber only the most current state of the published information and does not queue or store previously published data for retrieval when the subscriber is offline or otherwise unsubscribed such as with email and traditional message queues. Thus unlike typical message queuing services when a subscriber logs on or subscribes to the pub sub service the subscriber receives only the current state of the information as well as subsequent updates to the information while the subscriber is subscribed. The subscriber does not receive previous updates that may have occurred while the subscriber was offline or unsubscribed. In addition the pub sub services as described herein are not topic based subscription services where typically any number of publishers may contribute to a single subscription. In topic based subscription services whether a published entity is sent to a subscriber is based on its topic or categorization. Such topic based subscription services are also sometimes referred to as pub sub services.

Typically when the subscriber receives a notification message that includes the published information from the pub sub service the information is displayed to the subscriber in a certain manner or otherwise handled by a software client on the subscriber s device. Thus while the information to be handled is dynamic the manner in which the information is displayed or handled is generally pre defined and static.

To address this shortcoming one approach suggests creating a template in response to receiving a subscription request. Nevertheless this approach merely creates a static template at the pub sub service. This template cannot be updated dynamically and therefore suffers the same disadvantages. In another approach processing policies for rendering and for making other data handling decisions are stored at the pub sub service and implemented at the pub sub service. Nevertheless as before the policies are static and cannot be dynamically fine tuned by a publisher or by a subscriber.

In another approach rules and attributes associated with user defined status levels are provided and stored in a single data tuple so that the notification message to the subscriber includes the rules and attributes as well as the user defined status level. This approach can be extended to placing data handling information in the data tuple along with the published information so that the subscriber can receive both the data handling information and the published information. Nevertheless this introduces many disadvantages. For instance because the data handling information can be voluminous compared to just the updated data the notification messages can be bulky and therefore consume resources. This can be especially problematic for handheld client devices that have limited bandwidth. Moreover the one to one relationship between the data handling information and the data tuple is inefficient when the same data handling information can be used for many data tuples or when many different data handling information sets can be combined and used for one data tuple. In short each of the approaches above fails to describe a flexible and dynamic way to provide data handling information for use by a pub sub client to handle data published by the pub sub service.

Accordingly a system and method for providing data handling information for use by a client of a pub sub service to handle data published by the pub sub service are described. According to an exemplary embodiment a method includes receiving a subscription request to a data tuple that includes source data from a client of the pub sub service. When the request is received a first subscription is provided for the client to the data tuple and a second subscription distinct from the first subscription is automatically provided for the client to a data handling tuple that is associated with the data tuple and that includes data handling information defining how the source data of the data tuple is to be handled by the client. A first notification message including the source data is generated and a second notification message distinct from the first notification message is generated that includes the data handling information.

According to another exemplary embodiment a system is described for providing data handling information for use by a client of a pub sub service to handle data published by the pub sub service. The system includes a data store for storing a plurality of data tuples each of which include source data and a plurality of data handling tuples each of which include data handling information defining how source data of an associated data tuple is to be handled by a client of the publish subscribe service. The system also includes a tuple association handler component configured for managing an association between a data tuple of the plurality of data tuples and at least one of the plurality of data handling tuples and a subscription handler component for receiving from a client of the pub sub service a subscription request to a data tuple and configured for providing in response to the request a first subscription for the client to the data tuple and for automatically providing a second subscription for the client to a data handling tuple that is associated with the data tuple where the first subscription is distinct from the second subscription. The system also includes a notification handler component configured for generating pursuant to the first subscription a first notification message including the source data and for generating pursuant to the second subscription a second notification message including the data handling information where the first and second notification messages are distinct from one another.

In another exemplary embodiment a method for handling data from a pub sub service by a client of the pub sub service includes sending a subscription request to a pub sub service to subscribe to a data tuple that includes source data and that is managed by the pub sub service. In response to the request a first notification message that includes the source data is received from the pub sub service pursuant to the subscription to the data tuple. Moreover a second notification message that includes data handling information defining how the source data of the data tuple is to be handled is received pursuant to a subscription to a data handling tuple that is associated with the data tuple and that includes the data handling information. The data handling information is then used to process the source data.

According to another exemplary embodiment a system is described for handling data from a pub sub service by a client of the pub sub service and includes a watcher component configured for sending a subscription request to a pub sub service to subscribe to a data tuple including source data managed by the pub sub service. The system also includes a source data manager component configured for receiving pursuant to the subscription to the data tuple and for processing a first notification message including the source data from the publish subscribe service a data handling information manager component configured for receiving and processing a second notification message including data handling information defining how the source data of the data tuple is to be handled where the second notification message is received pursuant to a subscription to a data handling tuple that includes the data handling information and a data handler component configured for using the data handling information to process the source data.

Various aspects will now be described in connection with exemplary embodiments including certain aspects described in terms of sequences of actions that can be performed by elements of a computing device or system. For example it will be recognized that in each of the embodiments at least some of the various actions can be performed by specialized circuits or circuitry e.g. discrete and or integrated logic gates interconnected to perform a specialized function by program instructions being executed by one or more processors or by a combination of both. Thus the various aspects can be embodied in many different forms and all such forms are contemplated to be within the scope of what is described.

According to an exemplary embodiment a method and system for providing data handling information for use by a client of a pub sub service to handle data published by the pub sub service is described. A pub sub communication architecture and its underlying messaging protocol allow published information to be sent to a subscriber as it is received in many instances substantially in real time in relation to the publication of the information. Information is published within the pub sub communication architecture using a publish command. The published information can then be communicated to a subscriber using a notify command. The notify command can either include the published information or can provide a reference to the published information.

Well known pub sub communication protocols include presence protocols such as Extensible Messaging and Presence Protocol Instant Messaging XMPP IM Session Initiation Protocol SIP for Instant Messaging and Presence Leveraging SIMPLE and rendezvous protocol RVP which are used by presence services and Jabber Software Foundation s pub sub protocol as specified in Jabber Enhancement Proposal JEP JEP0060 Publish Subscribe. The architecture models and protocols associated with presence services in general are described in Request for Comments or RFC documents RFC 2778 to Day et al. titled A Model for Presence and Instant Messaging February 2000 RFC 2779 to Day et al. titled Instant Messaging Presence Protocol February 2000 and RFC 3921 to Saint Andre et. al titled Extensible Messaging and Presence Protocol XMPP Instant Messaging and Presence each of which are published and owned by the Internet Society and incorporated here in their entirety by reference.

Generally speaking one or more pub sub servers are used to provide pub sub services. The function of a pub sub server however can be incorporated either in whole or in part into other entities. For example according to the presence service model described in RFC 2778 two distinct agents of a pub sub e.g. presence service client are defined. The first of these agents called a presentity combining the terms presence and entity provides information to be stored and distributed throughout the pub sub service on behalf of a pub sub client. The second type of presence agent is referred to as a watcher . Watchers receive published information from a pub sub presence service on behalf of a pub sub presence client.

The presence model of RFC 2778 describes two types of watchers referred to as subscribers and fetchers . A subscriber requests notification from the presence service of a change in some presentity client s presence information. The presence service establishes a subscription on behalf of the subscriber to a presentity client s presence information such that future changes in the presentity client s presence information are pushed to the subscriber. In contrast the fetcher class of watchers requests or fetches the current value of some presentity client s presence information from the presence service. As such the presence information can be said to be pulled from the presence service to the watcher.

Users of the presence service are referred to in the presence model described in RFC 2778 as principals. Typically a principal is a person or group that exists outside of the presence model but can also represent software or other services capable of interacting with the presence service. A principal can interact with the presence system through a presence user agent PUA or a watcher user agent WUA . As in the case of the presentity and watcher clients with which these service clients interact the presence and watcher user agents can be combined functionally as a single user agent having both the characteristics of the presence and watcher user agents. User agents can be implemented such that their functionality exists within a presence service external to a presence service or a combination of both. Similar statements can be made about presentities and watchers.

By way of example aspects of an exemplary embodiment described here can employ a presence protocol as the pub sub communication protocol. It should be understood however the relevant techniques described here can be performed using any pub sub communications protocol as defined herein. Additionally the exemplary embodiment described herein is not limited to the use of a pub sub protocol for all communications described. Other known protocols e.g. Hypertext Transfer Protocol HTTP can also be used.

According to pub sub communication protocols the pub sub service stores and organizes information provided by the publisher and by the subscriber in data entities referred to as tuples. A tuple in its broadest sense is a data object containing one or more elements. For example a presence service manages presence tuples each of which contain a status element that stores presence information relating to the principal associated with the presence tuple. Tuples can include other elements that can store other published information associated with the principal. The published information may include general contact information of the publisher such as name telephone number email address postal address an IP address or URLs associated with the publisher and the like as well as other data or content. As used here the tuple can also be a representation that maps field names to certain values to indicate that an entity or object e.g. the principal includes certain components information and or perhaps has certain properties.

As stated above a client of a pub sub service can subscribe to a tuple and receive information published to that tuple pursuant to the subscription. The client typically handles the information received from the pub sub service in a fixed manner according to the client s data handling instructions. Thus while the information received can be dynamic and from more than one source the data handling instructions are static.

According to an exemplary embodiment data handling information can be stored in a data handling tuple and managed by a pub sub service. The data handling tuple can be associated with one or more data tuples each of which includes source data. In one embodiment the data handling tuple includes information defining how the source data of the associated data tuple is to be handled by a client that receives the source data. In one embodiment when a client subscribes to a data tuple a subscription to the associated data handling tuple can also be provided automatically such that the client receives both the source data of the data tuple and the data handling information of the data handling tuple. In an exemplary embodiment the client is configured to use the data handling information to process the source data.

By storing data handling information in data handling tuples flexible relationships can be established between data tuples and data handling tuples. For example one data tuple can be associated with several data handling tuples several data tuples can be associated with one data handling tuple or several data tuples can be associated with several data handling tuples. In addition the data handling information in a data handling tuple can easily be updated by a client and the updated handling information can be distributed to all current subscribers via the pub sub service. Thus the handling instructions can be dynamic and easily distributed.

In one embodiment the client devices are configured to communicate with each other and with at least one the pub sub server via a network such as the Internet. As is shown a proxy service hosted by a server serves as a proxy among the devices in the network . The proxy service permits the devices and the pub sub service s to communicate with one another through a firewall in a known manner. In one embodiment the proxy service can be associated with the pub sub service and or associated with at least one of the client devices . While shown residing in a separate server the proxy service can also reside in the pub sub server . In addition while only one proxy service is shown in a plurality of proxies can be implemented to handle network access to and from client devices that are protected by one or more firewalls .

As is shown the pub sub server e.g. hosts the pub sub service . The pub sub service is configured to process subscriptions by pub sub clients to information published by other pub sub clients . In an exemplary embodiment tuple data and subscription information can be stored in a tuple data store and a subscription data store respectively. The data stores can include files in memory caches and databases for example. In one embodiment all data can be treated as tuple data meaning that it can be formatted for transfer using a data format compatible with the pub sub communication protocol supported by the pub sub service . While the tuple data store is shown separate from the subscription data store the tuple data and the subscription information can also be stored in a single data store. Moreover although the data stores are depicted as having a particular location remote from the devices nothing prevents them from being stored in another location. For example all or a portion of the information may be stored in a memory structure not shown on the devices or on another memory structure not shown .

The pub sub service includes a command router configured to receive and process pub sub commands from the pub sub protocol stack component . In one embodiment the command router directs subscribe commands to a subscription handler that is configured to handle subscribe commands directs publish commands to a publication handler that is configured to handle publish commands and sends notify commands on behalf of a notification handler . The command router can also be configured to process other pub sub commands such as PROBE and FETCH POLL.

The subscription handler processes subscribe commands and other tasks associated with subscriptions. In one embodiment the subscription handler processes a subscribe command by placing a subscribing client on a subscription list associated with the tuple. In addition the subscription handler authenticates and authorizes the client manages rosters and subscription lists and uses the notification handler to construct notification response messages informing clients when new information is available. The publication handler processes publish commands and coordinates with the subscription handler the publication of tuple data to ensure that subscribing clients if any are notified via the notification handler .

In one embodiment the pub sub service is configured to host one or more service applications via a service application programming interface API . Such a configuration is described in co pending U.S. patent application Ser. No. 11 323 762 entitled METHOD AND APPARATUS FOR PROVIDING CUSTOMIZED SUBSCRIPTION DATA filed on Dec. 30 2005 and commonly owned with the present application and herein incorporated by reference. In one embodiment the service API enables the pub sub service to pass subscription notification messages to any one of the service applications . Because the service API is independent of both the transport and pub sub protocol messages can be exchanged freely and securely between the pub sub service and any of the service applications .

The pub sub service also includes a tuple manager for managing data tuples data handling tuples and published information in the tuples . In one embodiment the tuple manager can be configured also to manage rosters for security purposes and to store and to retrieve tuple data from the tuple store . If the pub sub service archives published information the tuple manager can also be configured to archive and to retrieve the archived published information.

In an exemplary embodiment the pub sub service includes means for providing a data handling tuple that includes data handling information that defines how source data of a data tuple is to be handled by a client that receives the source data. For example the publication handler described above can be configured to perform this task. illustrates an exemplary data model of a data handling tuple according to one embodiment. The data handling tuple can include a data handling information element and a correlation value element . According to an exemplary embodiment a client can publish data handling information to the data handling information element using a pub sub communication protocol.

In one embodiment the data handling information can include display actions which can be simple or complex and can vary according to the client device associated with the client . For example display actions can instruct the receiving client to 

Other examples of data handling information can relate to the storage of the source data on the client device accessing additional information or services to complete the processing suppressing an action on the data rules for processing the data or any other action that is triggered by the receipt of an updated data tuple .

According to an exemplary embodiment the data handling information element can include a program module element that can store at least one of an executable program block a script and an identifier of a program module executable. In one embodiment the identifier can be a uniform resource identifier URI or locator URL that can be used to retrieve the program module executable. In another embodiment the data handling information element can also include at least one of a template element for storing a template a parameters element for storing customization parameters and a rule element for storing a rule.

According to one exemplary embodiment the client can be a generic pub sub client that is configured to support any type of data so that new data types can be provided without necessarily modifying the client . In this embodiment the data handling information element can include a user interface element that stores instructions defining a user interface or a reference to such instructions. In this embodiment a user interface for a generic pub sub client can be defined using user interface markup languages which are often based on Extensible Markup Language XML . Examples of XML based user interface markup languages include XUL the XML User Interface Language and XAML Extensible Application Markup Language . The pub sub client can replace variables in the user interface definition with the updated or current source data values of the data tuple .

For example parsed general XML entities could be used in the user interface markup that reference parsed general entities using an ampersand and semicolon as delimiters. Thus if the user interface markup requires the current temperature in Fahrenheit it could refer to the temperature as tempFahrenheit and the corresponding source data value received in the most recent data tuple can replace the referenced entity. In one embodiment the data tuple can be formatted so that a file Document Type Definition DTD can easily be created and the data substitution can take place automatically using an XML processor but other techniques are equally acceptable. For example if the user interface markup uses a script then properties files created from the received data tuple can be used in addition to or instead of parsed entities.

According to an exemplary embodiment the correlation value element can store a correlation value. In one embodiment the correlation value can be used to associate the data handling tuple with one or more data tuples that share the same correlation value.

The data handling tuple shown in and described above is an exemplary data model. Those skilled in the art would readily recognize that the data handling tuple can and most likely would include additional elements and or sub tuples. For example the data handling tuple can include a status element and contact information as well as other information. Accordingly the description above should not be interpreted as limiting the structure of the data handling tuple .

Referring again to according to an exemplary embodiment the pub sub service includes means for managing associations between data tuples and data handing tuples . For example the pub sub service can include a tuple association handler component to perform this function. In one embodiment the tuple association handler component is configured to update and manage association information between a given data tuple and at least one data handling tuple . The association information can be stored in an association store which is accessible by the tuple association handler component . In an exemplary embodiment associations between data tuples and data handling tuples can be flexible in that a plurality of data tuples can be associated with a single data handling tuple a single data tuple can be associated with a plurality of data handling tuples or a single data tuple can be associated with a single data handling tuple .

In one embodiment the tuple association handler component can determine which if any data handling tuples are associated with a given data tuple when the subscription handler receives a new subscription to the data tuple . If a data handling tuple is determined the tuple association handler component can retrieve and provide information relating to the data handling tuple so that a subscription to the data handling tuple can be provided.

In one embodiment the pub sub service includes means for receiving a subscription request from a pub sub client to a data tuple that includes source data means for providing in response to the request a first subscription for the client to the data tuple and means for automatically providing a second subscription for the client to a data handling tuple that is associated with the data tuple . In one embodiment the subscription handler described above can be configured to perform these functions.

In addition the pub sub service includes means for generating a first notification message including source data pursuant to a subscription to a data tuple and means for generating a second notification message that includes the data handling information pursuant to a subscription to a data handling tuple. For example the notification handler described above can be configured to generate the first and second notification messages. Moreover the notification handler can be configured to send via the command router the first and second notification messages to a pub sub client that subscribes to the data tuple and which is automatically subscribed to the data handling tuple .

The client device includes a watcher component and a watcher user agent WUA associated with the pub sub client . In one embodiment the watcher component translates requests between the pub sub server and the WUA that is it translates between the pub sub communication protocol of the server and the data format used by the WUA typically proprietary . The watcher component serves watching subscribing clients by sending for example subscribe commands on behalf of the WUA and by routing notification messages to the WUA .

The WUA can be integrated into the client as shown or external to the client . In one embodiment the WUA is configured to translate between a data format known to the watcher component and WUA and a data format known to the client . The WUA also is configured to route messages between the client and the watcher component . For example the WUA can send subscribe requests to the watcher component on behalf of the client and can pass notification messages received from the watcher component to the client for processing.

According to one embodiment the pub sub client includes means for sending a subscription request to the pub sub service to subscribe to a data tuple that includes source data and means for receiving and processing a notification message that includes the source data from the pub sub service . For example in one embodiment the pub sub client can include a source data manager component to perform these functions. The source data manager component can store update and retrieve the source data received pursuant to subscriptions to data tuples in a source data store .

In an exemplary embodiment the pub sub client also includes means for receiving and processing a notification message that includes data handling information such as a data handling information manager component . In one embodiment the data handling information manager component can process the data handling information by downloading an executable program module or changing a font used to display text. The data handling information can be stored and retrieved in a handling information store .

In one embodiment the pub sub client also includes means for using the data handling information to process source data corresponding to a data tuple associated with the data handling information. For example the pub sub client can include a data handler component to perform this task. According to one embodiment when updated source data is received the data handler component can handle e.g. display on a user interface the source data in accordance with the current data handling information. In another embodiment when updated or new data handling information is received and processed the data handler component can update i.e. refresh how the current source data is being displayed. For example when the client is currently displaying weather data and a new skin is provided via new data handling information the data handler component can apply the new skin immediately to the current source data displayed. When however the source data has already been handled for example by storing or forwarding then the updated client data handling information can be applied to the next update to the source data.

The pub sub service receives the subscription request to the data tuple block and proceeds to process the request. For example when the subscription request is received at the pub sub service it is routed by the command router to the subscription handler . In response to the request the subscription handler provides a first subscription for the client to the data tuple identified in the request block .

According to an exemplary embodiment the subscription handler also automatically provides a second subscription for the client to a data handling tuple that is associated with the data tuple block . As stated above the data handling tuple includes data handling information that defines how the source data of the data tuple is to be handled by the client . In one embodiment the first subscription to the data tuple is distinct from the second subscription to the data handling tuple .

In one embodiment the subscription handler automatically provides the second subscription by invoking the tuple association handler component and passing it the identifier associated with the data tuple . The tuple association handler component can use the data tuple identifier to access the association store and determine which if any data handling tuples are associated with the data tuple . As stated above the association store includes association information between data tuples and data handling tuples . In one embodiment the data tuples can include correlation values that indicate with which data handling tuples each data tuple is associated. Thus the association between the data tuple and the data handling tuple can be based on shared correlation values.

In another embodiment the subscription handler can also pass to the tuple association handler component information relating to the device capabilities of the subscribing client a user identifier of the subscribing client and or preferences of the subscribing client in addition to the data tuple identifier. In this embodiment the subscription request from the subscribing client can include such device specific user specific and client specific information. Thus when the data tuple is associated with a plurality of data handling tuples the tuple association handler component can be configured to use this additional information as a filtering mechanism to select at least one of the plurality of associated data handling tuples . For example when a user subscribes to weather data tuple from a particular handheld device the tuple association handler component can select an associated data handling tuple that includes handling instructions optimized for that handheld device . When another user subscribes to the same weather data tuple from a desktop computer the tuple association handler component can select a different data handling tuple that includes handling instructions better suited to the desktop computer .

When the tuple association handler component determines one or more data handling tuples associated with the data tuple it can pass this information back to the subscription handler . In another embodiment the tuple association handler component can be bypassed when the data tuple itself includes an element that contains a reference to one or more data handling tuples or when the association is provided through a naming convention. In this case the subscription handler can determine the association without invoking the tuple association handler component and then automatically subscribe the pub sub client to the associated data handling tuple s .

In one embodiment the associated data handling tuple and the data tuple can be managed by the same pub sub service . In another embodiment the associated data handling tuple can be managed by a different pub sub service than that managing the data tuple . In this embodiment the subscription handler can be configured to send on behalf of the subscribing client a subscription request for the data handling tuple to the other pub sub service . The other pub sub service can then process the subscription request according to standard and known methods.

As stated above the first subscription to the data tuple is distinct from the second subscription to the data handling tuple . Thus each subscription operates independently from the other. When either tuple or is updated the pub sub service will send a notification message informing the subscribing client of the newly published information. In one embodiment the exception to this independence is when the subscribing client cancels its subscription to the data tuple . Here the subscription to the associated data handling tuple can also be cancelled.

According to an exemplary embodiment once the client is subscribed to the data tuple and to at least one data handling tuple the notification handler generates pursuant to the first subscription to the data tuple a first notification message that includes the source data block and generates pursuant to the second subscription to the data handling tuple a second notification message that includes the data handling information block . In one embodiment the first notification message can include the data tuple and the second notification message can include the data handling tuple . Both notification messages are sent independently of one another and in no particular order to the subscribing client by the command router via the pub sub protocol stack and network stack using the pub sub protocol.

In one embodiment an on the wire format for the data handling tuple and the data tuple can be based on the general purpose Jabber pub sub protocol defined in XEP 0060 Publish Subscribe http www.xmpp.org extensions xep 0060.html . For instance in Example 1 below a notification message includes a data handling tuple that provides parameters for displaying weather source data.

The dataHandler element provides an example schema for the data handling tuple where the namespace is weatherHandlerParms informing the subscribing client that this data handling tuple defines handling for weather source data. A correlation element is used by the subscribing client to correlate the notification message including the source data with the associated notification message including the data handling information. Both messages can carry the same correlation value e.g. weather. The content of the minimize element is tempFahrenheit indicating to the subscribing client that when the application is minimized the temperature source data should be displayed in the application icon. The content of the pop element is severeWeatherAlert indicating to the subscribing client that if severe weather alert data is received then a popup window should be created. The content of the skin element is default indicating to the subscribing client that it should use the default skin for the application window.

In Example 2 below a notification message includes a weather data tuple to which the data handling tuple in Example 1 would be applied.

The usesDataHandler element is used to inform the subscribing client whether this data tuple is associated with a data handling tuple . In this example the value of yes indicates that it is and that this source data should be processed by the subscribing client in accordance with the data handling instructions contained in the associated data handling tuple . Note that the correlation element includes the value weather which matches the correlation value in the notification message in Example 1.

In an exemplary embodiment the data tuple and data handling tuple are compatible with the subscribing client . The client can be configured in multiple ways e.g. it can be a specialized client that handles a fixed set of data types e.g. weather and news or it can be a generic client that handles any type of data. In one embodiment a specialized client can be written to handle a specific type of data such as weather. The data tuple to which the client subscribes would contain weather information such as temperature and wind speed as shown in Example 2 above.

The behavior of the client can be parameterized and the parameters can be provided in the data handling tuple as shown in Example 1 above. Thus for example the client would understand the weatherArea parameter in the data tuple and display it in the correct place on the user interface using the correct font size and color which could all be specified in the data handling information if desired by the application developer. In the above examples the client understands certain parameters that are provided in the data handling information.

Other techniques for providing the data handling information to the client such as templates or executables could also be used instead of or in conjunction with the use of parameters. For example the data handling tuple can include an executable program module or a reference to such a module that is to be downloaded and or installed by the client . In another embodiment the data handling tuple can include multipart data of different formats. This can be accomplished by using Multipurpose Internet Mail Extension MIME formatting. Extensions to Jabber XML to support MIME are described in the document to Robinson et al. titled Multipurpose Internet Mail Extensions within Jabber XML A recommended practice specification for encoding MIME into the Jabber XML protocol Core Jabber Group 1999 accessible via the Internet at URL http www.jabber.org old core MIME.html on Dec. 8 2006.

In Example 3 below a notification message includes a data handling tuple that has a reference to data handling information which the client can then use to retrieve the data handling information. The data handling information for example can be an executable file that when retrieved and installed would update the data handling function of the client .

Referring again to once the first and second notification messages are sent to the subscribing client blocks the client receives and processes the first notification message block and receives and process the second notification message block . The order in which the first and second messages are received is arbitrary i.e. the client can receive the second notification message before the first notification message or vice versa.

In one embodiment the client receives the first or second notification message via the pub sub protocol layer and watcher component . The watcher component routes the first or second notification message to the WUA which determines whether the message includes the data tuple first notification message or the data handling tuple second notification message . In one embodiment when the WUA detects that the message includes the data tuple e.g. the message includes a data element as opposed to a dataHandler element the message is passed to the source data manager component for processing. Otherwise when the WUA detects that the message includes the data handling tuple e.g. it includes a dataHandler element the message is passed to the data handling information manager component for processing.

In one embodiment when the data handling information manager component receives the second notification message it processes the data handling tuple in accordance with the data handling techniques used by the data handling subscription and the correlation value. For example in one embodiment when the data handling tuple includes data handling parameters for weather the weather parameters in the client are updated with the new values. Alternatively or in addition when the data handling tuple includes a reference to an executable then the data handling information manager component can retrieve and install that executable. In another embodiment the data handling information manager component can also modify the data handling information to conform with the client s preferences. When processing of the data handling tuple is completed the data handling information manager component can record that the data handling information has been processed and store the correlation value and the data handling information in the handling information store . Then the correlation value and a completion indication are provided to the data handler component for further processing.

In an exemplary embodiment when the source data manager component receives the first notification message it determines whether the data tuple is associated with a data handling tuple . For example the source data manager component can check for the presence of a userDataHandler element and if there is one whether its value is yes. When such an element is not present or when the value is not yes then the notification message is treated in the standard manner. In one embodiment the source data in the data tuple can be handled using default handling instructions. Otherwise when the value of the userDataHandler element is yes the notification message including the data tuple is passed to the data handler component for further processing.

When the data handler component receives the data tuple from the source data manager component the data handler component can determine whether the associated data handling tuple has been received and processed based for example on the correlation value. When such is not the case the data handler component can store the source data in the source data store until the associated data handling tuple is processed. Alternatively when the client is so configured the data handler component can use default data handling information to handle the source data.

When the associated data handling tuple has been received and processed the data handler component can use the data handling information in the associated data handling tuple to process the source data block . In one embodiment when the source data is currently being handled pursuant to old data handling information the data handler component can refresh the handling e.g. display of the source data using the newly processed data handling information. For example when the application is currently minimized and the newly processed data handling information indicates that the temperature in Fahrenheit is to be displayed when the application is minimized then the data handler component will display the temperature in Fahrenheit from the current data tuple in an icon representing the minimized view of the application. In another embodiment when the source data is not currently being handled the data handler component can retrieve the source data from the source data store and use the data handling information to process the source data.

According to an exemplary embodiment the subscribing client can receive notification messages including updated source data and notification messages including updated data handling information independently from the pub sub service pursuant to the first and second subscriptions. In an exemplary embodiment the notification messages can be processed in the manner described above. For example when updated source data is received pursuant to the subscription to the data tuple the client can identify the data handing information associated with the source data using for example the correlation value and use the identified data handling information to process the updated source data. Alternatively when updated data handling information is received pursuant to the subscription to the data handling tuple the client can store the updated data handling information and then use it to process the associated source data.

In the embodiments described above the data handling tuples are provided by clients other than the subscribing client . In another embodiment the subscribing client can be configured to create and maintain personalized data handling tuples and to publish data handling information to the personalized data handling tuples at the pub sub service . In this embodiment the subscribing client can specify in a subscription request to a data tuple an association between the data tuple and the personalized data handling tuple . In this embodiment the subscription handler component at the pub sub service can automatically subscribe the client to the data tuple and to the personalized data handing tuple so that the second notification message includes the published data handling information.

Variations to the embodiments described above are also available. For example in the described embodiments the subscription handler automatically provides the subscription to the data handling tuple associated with the data tuple without input from the client . In other words the subscription to the data handling tuple is transparent to the subscribing client . In another embodiment the subscribing client can participate in the process of subscribing to the data handling tuple . For example in one embodiment the subscription handler can instruct the notification handler to include in the first notification message the data tuple as well as information relating to the associated data handling tuple . The source data manager component can use the information relating to the data handling tuple to subscribe to the data handling tuple at a pub sub service .

In another embodiment the client can use a naming convention to subscribe to the data tuple and to the data handling tuple . For example the subscription request for the data tuple can include an identifier that is related to both the data tuple and to the associated data handling tuple .

In yet another embodiment the client can be configured to invoke the tuple association handler component directly for example via an out of band remote procedure call and to retrieve the association information relating to the data tuple . In this embodiment the client can send information relating to the data tuple to the tuple association handler component and the tuple association handler component can return information relating to the data handling tuple associated with the data tuple . In another embodiment the client can establish a one time subscription to perform this task. A discussion of one time subscriptions may be found in the document to Chen et al. titled Context Aggregation and Dissemination in Ubiquitous Computing Systems Dartmouth Computer Science Technical Report TR2002 420 2002 available via the Internet at the URL http www.cs.dartmouth.edu reports TR2002 420.pdf on Dec. 8 2006. In this embodiment the pub sub service can respond with a notification including the association information and then automatically cancel the subscription. The client can then use this information to subscribe to the data handling tuple .

Through aspects of the various embodiments data handling information can be provided more efficiently and easily. Because the information is stored in separate and distinct data handling tuples the associations between data tuples and data handling tuples can be complex and flexible. Subscriptions to the data tuples and data handling tuples are also separate and distinct. Accordingly updates to the data handling information can be easily implemented and distributed to subscribing clients .

The executable instructions of a computer program for carrying out the methods illustrated in can be embodied in any machine or computer readable medium for use by or in connection with an instruction execution machine system apparatus or device such as a computer based or processor containing machine system apparatus or device that can read or fetch the instructions from the machine or computer readable medium and execute the instructions.

As used here a computer readable medium can be any means that can contain store communicate propagate or transport the computer program for use by or in connection with the instruction execution machine system apparatus or device. The computer readable medium can be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor machine system apparatus device or propagation medium.

More specific examples a non exhaustive list of the computer readable medium can include the following a wired network connection and associated transmission medium such as an ETHERNET transmission system a wireless network connection and associated transmission medium such as an IEEE 802.11 a b or g or a BLUETOOTH transmission system a wide area network WAN a local area network LAN the Internet an intranet a portable computer diskette a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc CD a portable digital video disc DVD and the like.

It will be appreciated by those of ordinary skill in the art that the concepts and techniques described here can be embodied in various specific forms without departing from the essential characteristics thereof. The presently disclosed embodiments are considered in all respects to be illustrative and not restrictive. The scope of the invention is indicated by the appended claims rather than the foregoing description and all changes that come within the meaning and range of equivalence thereof are intended to be embraced.

