---

title: Technique for integrating a distributed object system component with a service oriented architecture application
abstract: A method for receiving user event at a distributed object system component, passing the received user events to a service oriented architecture (SOA) application for processing and receiving the result of the processed user events at the distributed object system component from the SOA application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08612996&OS=08612996&RS=08612996
owner: SAP AG
number: 08612996
owner_city: Walldorf
owner_country: DE
publication_date: 20061229
---
The invention relates to a service oriented architecture SOA application and the use of a distributed object system within the SOA application.

The Microsoft ActiveX control is typically a programmable software component that may be used in software application development tools and software applications. Examples of the Microsoft ActiveX control include graph components that display data visually in the form of graphs a component that imports an image file into a word processing document for example Microsoft Office Word a stock ticker in a web page a user interface component that displays time in a software application audio player video player or textbox. Microsoft ActiveX controls are typically reusable components that may be integrated with various software applications. Nevertheless Microsoft ActiveX control typically operates only with Microsoft operating systems such as Microsoft Windows XP. It may not be possible to integrate them with applications that run on operating systems other than Microsoft operating systems.

Service oriented architecture SOA supports the design development identification and consumption of standardized software services across an enterprise thereby improving reusability and flexibility of software components. A SOA application typically runs on various operating systems. Hence integrating Microsoft ActiveX control with the SOA application may not be a viable option.

A method for receiving user event at a distributed object system component passing the received user events to a service oriented architecture SOA application for processing and receiving the result of the processed user event at the distributed object system component from the SOA application.

Integrating a distributed object system component with the SOA application involves enabling the distributed object system component to communicate with an enterprise server via an enterprise service infrastructure ESI interface. Integrating the distributed object system component with an integrated development environment IDE used to model the SOA application involves providing programmable interfaces that enable the distributed object system component to communicate with the IDE. Integrating the distributed object system component with the IDE may result in easier faster and more efficient development of SOA applications.

A distributed object system component is typically a programmable software component that may be used in software application development tools and software applications. The distributed object system component is typically a reusable component that may be integrated with various software applications that typically run on various operating systems. The distributed object system component typically supports a set of customizable application programming interfaces API s that allows the distributed object system component to be integrated with various software applications. Integrating a distributed object system component with a service oriented architecture SOA application involves enabling the distributed object system component to communicate with an enterprise server via an enterprise service infrastructure ESI interface. Integrating the distributed object system component with an integrated development environment IDE used to model the SOA application involves providing programmable interfaces that enable the distributed object system component to communicate with the IDE. Integrating the distributed object system component with the IDE may result in easier faster and more efficient development of SOA applications.

SOA supports the design development identification and consumption of standardized software services across an enterprise thereby improving reusability and flexibility of software components. Enterprise Service Architecture ESA is a blueprint for SOA that more effectively addresses business software needs and is rapidly deployable.

A composition layer allows a model based composition and orchestration of services to enable or enhance business processes. The composition layer typically enables the development deployment and administration of enterprise service . The composition layer typically provides tools for creating and managing enterprise service and also typically supports the design implementation and execution of applications that use enterprise services like composite applications in layer . The composition layer typically includes an Enterprise Service Repository ESR which is a central repository where enterprise services and software objects are modeled and their corresponding metadata stored. The enterprise service is typically a web service that has an enterprise level business meaning. Enterprise services are typically an aggregation of application services or web services of lower or smaller business functionality combined with business logic to support a step of a business process. The enterprise services are typically hosted in an enterprise server. Web services represent a self contained self describing piece of application functionality that can be accessed by other applications. An application service represents services exposed from an application component or component and allows access to a lower or smaller level of functionality of enterprise applications. An application service can either be proprietary or could be implemented in web standard such as extensible markup language XML to become a web service .

Component is typically a modular re usable piece of application software. SOA applications are constructed from the component and composite application according to the ESA. The components are made up of various entities that include engines utilities and software objects . The software objects typically provide a set of functionalities or services. For example a customer or business partner software object may provide services such as obtaining the name address and contact details of a customer.

In a distributed object system component is typically a programmable software component that may be used in software application development tools and software applications. The distributed object system component operates in a way similar to that of Microsoft ActiveX control. The distributed object system component may be implemented in languages such as C C Java and .NET. The distributed object system component also typically enables network based component interaction with software applications over a communication network.

Consider an example scenario in the SOA application wherein the first application displays the sales revenue of a company for a period of five years in a graphical format. A graphical component that displays the sales revenue data in the graphical format is needed if the graphical component is not offered by the SOA application development tool. Such a graphical component further typically needs to be developed and integrated with the SOA application by a first team. The development and integration of the graphical component can be a time consuming process. A second team working on a second application may want to display data in a similar graphical format. The second team has at least two options first to reuse the already developed graphical component by the first team or second develop the graphical component again if the already developed graphical component by the first team is not compatible with second application. The first option reusing the already developed graphical component by the first team may be a time consuming process as the second team may need to spend time on customizing the already developed graphical component by the first team according to the needs of second application. Also it may not be possible to customize the already developed graphical component by the first team according to the needs of the second application since the graphical component developed by the first team may not be in a reusable form. The second option developing the graphical component again duplicates effort already made to develop the graphical component by the first team. Hence the graphical component may be developed as the distributed object system component and integrated with the SOA application. Developing the graphical component as the distributed object system component makes it reusable in various SOA applications. Integrating the distributed object system component with the SOA application development tools such as Netweaver Visual Composer provided by SAP AG typically enables faster and more efficient development of SOA applications.

Core component also facilitates communication between the distributed object system component and the IDE . The system further includes the pattern plug in interface that enables the distributed object system component to communicate with an integrated development environment IDE . The IDE such as Netweaver and Visual Composer both provided by SAP AG is a development tool to model the SOA application.

The controller includes a component controller and a view controller . The component controller typically controls the flow of the SOA application which is the sequence of user interface UI . The component controller is also typically responsible for loading data of the SOA application. The view controller typically holds a reference of the distributed object system component and hence captures the user events on the distributed object system component . The view controller passes the user events to the application processor for further processing.

The application processor typically includes an application model and an event controller interface . The application model includes UI specific business logic that typically is required to create the XML data to be sent to the distributed object system component . The event controller interface typically is an interface between the controller and the application processor that receives the captured user events from the controller . The event controller interface may be typically implemented by the application model for processing the captured user events.

The service layer includes an XML generator a base service provider and an application service provider . The XML generator is typically used to create the generic XML tags according to a schema of the distributed object system component . The base service provider typically provides basic services to create the XML that include methods create node delete node. The application service provider includes application specific functions like create task create sales order and show sales revenue that are typically used to create the SOA application specific data in the XML.

The distributed object system component communicates with the core component via active component framework ACF . The ACF is a generic framework provided by SAP AG to enable distributed object system components in web based environments. ACF helps the distributed object system components to process mass data display modify and send the modified data back to the enterprise server and offer an API which typically is called from the enterprise server .

Integrating the distributed object system component with the IDE enables the developers to use the distributed object system component offered by the IDE instead of customizing the existing distributed object system component or developing new distributed object system component . The distributed object system component is integrated with the IDE by using the pattern plug in interface for example provided by SAP AG. The pattern plug in interface typically has a set of APIs that enable the distributed object system component to communicate with the IDE and enables the distributed object system component to be visible in for example the tool bar of the IDE. The pattern plug in interface also typically enables configuring the properties of the distributed object system component such as height font and title of the distributed object system component . The pattern plug in interface provides programmable interfaces for distributed object system component .

Embodiments of the invention may include various steps as set forth above. The steps may be embodied in machine executable program code which causes a general purpose or special purpose processor to perform certain steps. Alternatively these steps may be performed by specific hardware components that contain hardwired logic for performing the steps or by any combination of programmed computer components and custom hardware components.

Embodiments of the present invention may also be provided as a machine readable medium for storing the machine executable instructions. The machine readable medium may include but is not limited to flash memory optical disks CD ROMs DVD ROMs RAMs EPROMs EEPROMs magnetic or optical cards any other type of machine readable media suitable for storing electronic instructions. The present invention may be downloaded as a computer program which may be transferred from a remote computer e.g. a server to a requesting computer e.g. a client by way of a communication link e.g. a modem or network connection .

Throughout the foregoing description for the purposes of explanation numerous specific details were set forth in order to provide a thorough understanding of the invention. It will be apparent however to one skilled in the art that the invention may be practiced without some of these specific details. Accordingly the scope and spirit of the invention should be judged in terms of the claims which follow.

