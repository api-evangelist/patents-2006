---

title: Method and apparatus for maintaining federated name context bindings in a name space
abstract: A method, system and computer program product for maintaining federated name context bindings in a name space is disclosed. A reference within a first name space of a first system is bound with a durable subscription to a second name space on a second system. The binding of the first reference to the second name space is administered with a graphical user interface. A durable subscription is established with the second system for the binding utilizing communication with the second system over a network. Notification of a change affecting the bindings from the second system is received and the reference is rebound in the first name space.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07603359&OS=07603359&RS=07603359
owner: International Business Machines Corporation
number: 07603359
owner_city: Armonk
owner_country: US
publication_date: 20060117
---
The present invention relates in general to network communications and in particular to addressing systems used by a data processing system. Still more particularly the present invention relates to a system method and computer program product for maintaining federated name context bindings in a name space.

The Internet also referred to as an internetwork is a set of computer networks possibly dissimilar joined together by means of gateways that handle data transfer and the conversion of messages from a protocol used by the sending network to a protocol used by the receiving network. When capitalized the term Internet refers to the worldwide collection of networks and gateways that use the TCP IP suite of protocols.

The Internet has become a cultural fixture as a source of both information and entertainment. Many businesses are creating Internet sites as an integral part of their marketing efforts informing consumers of the products or services offered by the business or providing other information seeking to engender brand loyalty. Many federal state and local government agencies are also employing Internet sites for informational purposes particularly agencies which must interact with virtually all segments of society such as the Internal Revenue Service and secretariats of state. Additionally providing informational guides and or searchable databases of online public records may reduce operating costs. Further the Internet is becoming increasingly popular as a medium for commercial transactions.

Currently the most commonly employed method of transferring data over the Internet is to employ the World Wide Web environment also called simply the Web . Other Internet protocols exist for transferring information such as File Transfer Protocol FTP and Gopher but have not achieved the popularity of the Web. In a Web environment servers and clients effect data transaction using the Hypertext Transfer Protocol HTTP a commonly known protocol for handling the transfer of various data files e.g. text still graphic images audio motion video etc. .

Websites are hosted on server data processing systems. Often more than one server data processing system supports transactions or requests directed to a single website. In other words for a particular URL to a given website more than one server data processing system is available to handle requests from users on the Web. These server data processing systems are often organized onto a grouping referred to as a cluster or server cluster. A cluster is a group of server data processing systems that provides fault tolerance and or load balancing. If one server data processing system in the cluster fails one or more additional server data processing systems are still available. Load balancing distributes the workload over multiple data processing system in the cluster.

These server data processing systems run applications used to handle requests. For example the applications for a website may include applications used to provide information about goods and services provide a shopping cart and process orders. In order to facilitate multi server transactions that involve data transfer between systems over a network it is necessary to maintain a database of correct addresses for other systems located on a network. Such a database is called a name space. In the prior art adequate solutions do not exist for the problem of maintaining usable federated naming context references which are naming context references linked to addresses on foreign systems. A federated name space is a name space employing such references. For example if a first name space on a first system has a federated naming context binding which resolves to a naming context in a second name space that reference might become invalid if the name server which hosts the second name space is restarted.

A method system and computer program product for maintaining federated name context bindings in a name space are disclosed. A reference within a first name space of a first system is bound with a durable subscription to a second name space on a second system. The binding of the first reference to the second name space is administered with a graphical user interface. A durable subscription is established with the second system for the binding utilizing communication with the second system over a network. Notification of a change affecting the bindings from the second system is received and the reference is rebound in the first name space.

The present invention provides a method system and computer program product for maintaining federated name context bindings in a name space. This invention is used to maintain federated naming context bindings in a local name space. The local name space is part of a hosting system being administered. Federated naming context bindings are bindings in the name space that resolve to naming contexts in other name spaces.

The present invention solves the problem of maintaining usable naming context references. For example if a first exemplary name space Name Space A has a federated naming context binding which resolves to a naming context in a second exemplary name space Name Space B that reference might become invalid if the name server which hosts Name Space B is restarted. A reference becomes invalid on system restart because of static or dynamic changes to identification of resources their paths addresses and or names. The present invention solves this problem by obtaining a fresh reference to the naming context in Name Space B and rebinding it into Name Space A. The present invention allows the systems hosting Name Space A and Name Space B to cooperate through a common publish subscribe mechanism called a subscription server . Name Space A in the foregoing example is the name space being administered. In order to maintain valid references to Name Space B within Name Space A the system hosting Name Space A subscribes to Name Space B. The present invention provides mechanisms to facilitate that subscription.

As a subscriber the system hosting Name Space A is notified of certain events including when Name Space B is started or restarted. Event notification allows the system hosting Name Space A to rebind all references into Name Space B. If the publishing system hosted on Name Space B is given detailed information about exactly which naming contexts in Name Space B are referenced from Name Space A the publishing system in Name Space B can send notifications if the status of any of those particular naming contexts in Name Space B change. Such a situation could arise if a naming context in Name Space B is rebound or unbound.

Because the system hosting Name Space B might not be available when Name Space A s hosting system is started the present invention provides a means for Name Space A s subscription to be made persistent. Once Name Space A is subscribed it will be notified that Name Space B has been started or restarted until Name Space A unsubscribes. This condition will always occur if Name Space B contains references to Name Space A creating a circular dependency. One of the systems will almost always be available before the other.

With reference now to the figures and in particular with reference to a block diagram of a network environment containing general purpose data processing systems with which the present invention of a method system and computer program product for maintaining federated name context bindings in a name space may be performed is depicted. Data processing systems contain processing storage units e.g. RAM and processors . Data processing systems also include persistent i.e. non volatile storage such as hard disk drives or other direct access storage devices containing import export databases . Input Output I O controllers provide connectivity to a network through network adaptors connected to interface cables . I O controller also connects to user I O devices such as keyboards display devices mice or printers through wired or wireless links such as cables or radio frequency connections. System interconnect connect processors RAM storage and I O controllers .

Within RAM data processing systems store several items of data and instructions while operating in accordance with a preferred embodiment of the present invention. These include network subscription systems for interaction with applications through the facilitation of operating systems . In the embodiment shown in network subscription systems contain subscription servers graphical user interfaces GUIs and name servers . Other applications and network subscription systems interface processors RAM storage and I O controllers through operating system . One skilled in the data processing arts will quickly realize that additional components of data processing systems may be added to or substituted for those shown without departing from the scope of the present invention. Additional servers which are omitted for the sake of simplicity will also exist in many implementations.

Name servers include the local name space s being administered and the remote name spaces which are being imported and or exported. Subscription servers are used notify subscribing network subscription systems of events and are notified as a subscriber to other publishers of events of interest on those systems. Name servers notify subscription servers that a hosting data processing systems has been started or restarted. Where binding level export data is maintained in import export databases name servers also notify subscription servers on the hosting data processing systems of binding changes.

Subscription servers also contain the logic to maintain import export databases and to maintain federated bindings in the administered name spaces. In alternative embodiments subscription servers could exist as multiple components though they are represented as one component in the preferred embodiment for the sake of simplicity. Subscription servers contain application protocol interfaces APIs to allow them to edit import and export data. Subscription servers interact with the other subscription servers . As a subscriber subscription servers are notified by other subscription servers of imported name spaces. As a publisher subscription servers notify other subscription servers of events. Subscription servers also read and write data from and to import export databases . Finally subscription servers perform bind and rebind operations on administered name spaces to keep federated bindings up to date.

In order to maintain federated naming context references as described in the present invention certain data is maintained on some persistent media such as storage . Data maintained to administer a name space consists of import data and export data. Continuing with the example described above assume that Name Space A resides on first data processing system and that Name Space B resides on second data processing system . Import data in import export database on first data processing system includes an entry for Name Space B. That entry for Name Space B in import export database would include the server address for the name server and the address of subscription server on second data processing system . If Name Space B on second data processing system is in turn a subscriber to Name Space A on first data processing system Name Space B s entry in import export database contains export data about Name Space A on first data processing system . Export information includes a server address of subscription server on second data processing system . Details about which references Name Space B has into Name Space A are also included in the export data in import export database on first data processing system such as information required to identify those naming contexts. In a preferred embodiment additional import export data such as last known availability status which is more transient in nature is not maintained in import export database on first data processing system though it can be in alternative embodiments. Second data processing system hosting Name Space B would have similar import and export data in import export database . An example data structure housing data for import export database is provided below 

GUIs are used to view and edit import and export data and to allow a user to browse the local and remote name spaces. GUIs serve as the user s point of access to control activities of network subscription systems . More specifically GUIs pass instructions in the form of APIs to subscription servers for reading and writing of all import and export data The APIs can operate locally or remotely. With local only APIs GUIs will run in the same process as subscription servers . With remote APIs GUIs may run in a separate process generating increased flexibility on data processing systems . Because GUIs also serve as name space browsers GUIs interact with name servers for listed name spaces. Note that bind operations are not issued by GUIs directly but through subscription servers when defining a federated binding.

The various components of the present invention communicate through a series of messages across network or internally within data processing systems . When a user of first data processing system starts GUI GUI requests import data information from subscription server by sending an import data request to subscription server . Subscription server responds by sending an import data read to import export database to which import export database replies by sending import data in an import data return to subscription server . Subscription server then takes the data returned in import data return and transmits the data to GUI as import data delivery .

GUI displays icons which will be discussed with respect to a visual representation in for the initial naming context of each name space involved in federated bindings already reflected in import data received in import data delivery . When the user wants to browse name spaces associated with name servers the user must provide name server address information for a name space if the name space is not already displayed on GUI from existing import data. The user can through GUI invoke name server through an invocation request to either obtain the initial context or issue a list operation on a naming context in the name space of name server . Name server responds to invocation request by sending a list result to GUI . Similarly a user can through GUI invoke a remote name server through a remote invocation request to either obtain the initial context or issue a list operation on a naming context in the name space of name server . Name server responds to remote invocation request by sending a remote list result to GUI . Remote invocation request can be transmitted across an encrypted link using encryption protocols built into GUI and name server . Similar encryption is available for remote list result and remote subscription return message as well as remote subscription invocation message .

GUI also allows a user to initiate creation of a federated context binding in the name space of name server that resolves to a naming context in the name space of remote name server . GUI prompts user for an address of subscription server such an address is not already available from import data already obtained in import data delivery . Federated binding invocation message is sent by GUI to invoke subscription server to create a federated binding to a name space belonging to subscription server . While various embodiments will handle the invocation of subscription server in a variety of ways a preferred embodiment will look up a subscription server reference from name server under a predefined name. Alternative embodiments will employ external bootstrap servers that are used to obtain a reference to subscription server . In remote subscription invocation message subscription server invokes subscription server to subscribe to a naming context reference.

In remote subscription return message subscription server returns subscription ID and naming context reference to subscription server . Subscription server then writes the subscription ID and naming context reference from remote subscription return message to import export database using remote subscription database write and import export database replies to remote subscription database write with a remote subscription database write success report . When subscription server invokes name server through name server invocation to obtain an initial naming context and name server returns initial naming context subscription server executes bind operation on name server passing in the naming context reference returned from subscription server . Subscription server then sends a binding success report to GUI . Subscription server then sends a binding success report to GUI .

Turning now to a graphical user interface for use with the present invention of a method system and computer program product for maintaining federated name context bindings in a name space in accordance with a preferred embodiment of the present invention is depicted. GUI visual representation is composed of visual association regions representing name spaces. First visual association region includes name references available to a user of GUI visual representation in a local name space.

A first local reference identifies network subscription system . Central local reference identifies a partition of name server . Central local reference identifies a second partition of name server . GUI visual representation supports remote references in first visual association region . Central remote reference corresponds to east reference which is shown in second visual association region . A binding indicator graphically indicates the connection between central remote reference in first visual association region and east reference in second visual association region . Similarly central remote reference corresponds to west reference in third visual association region . A binding indicator graphically indicates the association between central remote reference for and west reference . As is shown in second visual association region network subscription system is indicated as JNDI east with references which are partitions of name server . The use of the term JNDI in naming indicates that JNDI east conforms to the standards for the Java Naming and Directory Interface. Third visual association region contains a server identifier for a server not shown in and partition indicator references . In a preferred embodiment GUI visual representation will allow a user to create a reference on second network subscription system to a reference on a third remote system. An example of such a binding is east remote reference in second visual association region which is bound to west reference . The binding between east remote reference and west reference is graphically indicated by binding indicator .

In a preferred embodiment of GUI visual representation administering Name Space A Name Space A on network subscription system would be depicted as the local name space in second visual association region and Name Space B on network subscription system would be depicted as an imported name space in third visual association region . Drag and drop or copy and paste operations from third visual association region to second visual association region are used to create the federated binding indicated by binding indicator . Federated bindings can be imported in a similar manner from some other name space depicted as an imported name space in the first visual association region . The name space could be a second name space hosted on network subscription system or host some other network subscription system not shown.

Referring now to a high level logical flowchart of a process for using a GUI to browse name spaces in cooperating systems and issue a request to create a federating binding in a name space in one system which resolves to a naming context in a name space in another system in accordance with a preferred embodiment of the present invention is illustrated. The process starts at step when a user starts GUI . The process then moves to step which illustrates GUI obtaining a reference to subscription server and invoking the subscription server to retrieve import data. The process next proceeds to step . At step GUI displays in GUI visual representation icons for the initial naming context of each name space involved in the federated bindings already reflected in import data from import export database . The process then moves to step which illustrates a user browsing GUI visual representation . The process next proceeds to step .

At step GUI determines whether the user has initiated creation of a federated context binding in a name space name server for a name server for example by drag and drop use of GUI visual representation . If the user has not initiated creation of a federated context binding in a name space for a name server then the process moves to step which illustrates GUI determining whether the user has closed the GUI visual representation . If GUI determines that the user has not closed GUI visual representation then the process returns to step . If GUI determines that the user has closed GUI visual representation then the process ends at step .

Returning to step if GUI determines that the user has initiated creation of a federated context binding in a name space associated with a name server . Then the process moves to step which illustrates GUI invoking local subscription server to create a federated binding as indicated by the user. Step causes initiation of the process of at step . The process then proceeds to step which illustrates GUI determining whether the process of is complete. If GUI determines that the process of is not complete then the process moves to step and waits. The process then returns to step . If GUI determines that the process of is complete then the process returns to step .

Turning now to a high level logical flowchart of a process for importing a naming context reference from another system in the form of a subscription for the purposes of binding the naming context reference into a name space in the local system in accordance with a preferred embodiment of the present invention is depicted. The process starts at step and then moves to step which depicts subscription server invoking subscription server for the naming context being bound as a federated binding. A subscription server address is supplied as a parameter by GUI . Step causes the initiation of the process shown in which starts at step below. The process of then moves to step which depicts subscription server determining whether the process of is complete. If the process of is not complete then the process of moves to step where subscription server waits. The process then returns to . At step if the process of is complete then the process of moves to step which depicts subscription server writing import data to import export database using data supplied as parameters from GUI and data returned from subscription server upon termination of the process in . The process then moves to step which depicts subscription server invoking the name server identified by GUI as parameter data to bind into its name space the naming context reference returned from subscription server upon termination of the process of . The naming context is bound under the name specified by GUI as parameter data. The process then ends at step .

Referring now to a high level logical flowchart of a process for exporting a naming context reference through a system s handling of a request for a subscription to a naming context from a name space in that system in accordance with a preferred embodiment of the present invention is illustrated. The process starts at step . The process then moves to step which depicts subscription server writing export data to import export database . The process next passes to step . At step import export database returns data to subscription server if needed. The process then moves to step . which depicts subscription server invoking name server to obtain a context reference. The process then moves to step . At step subscription server returns data to the caller subscription server including a subscription ID and naming context reference. The process then ends at step .

Referring now to a high level logical flowchart of a process for sending notifications to naming context subscribers upon startup of the name server hosting a name space in accordance with a preferred embodiment of the present invention is illustrated.

The process starts at step and then moves to step which indicates local subscription server being invoked by name server to signal a name server startup. The process next moves to step . At step subscription server determines whether all subscribers are notified. If subscription server determines that all subscribers are notified then the process ends at step . If subscription server does not determine that all subscribers are notified then the process moves to step which depicts subscription server identifying a next subscriber for notification. The process then proceeds to step .

At step subscription server obtains the subscription server address for subscription server from import data in import export database . The process next proceeds to step . At step subscription server obtains a reference into each naming context subscription server has imported. The process then proceeds to step . At step subscription server obtains a subscription server reference. The process then moves to step which portrays subscription server invoking subscription server notifying it through parameter data that a name server start has occurred. Also included in the parameter data are references to all naming context references hosted by name server that subscription server has imported. Since a start of name server affects all its hosted naming context references exported to subscribers sending out a batched notification to a subscriber is preferable to invoking a subscriber for each exported naming context. The global notification sent to subscription server contains all naming context references from the hosting name server that have been exported to subscription server . The process then returns to step .

Turning now to a high level logical flowchart of a process for rebinding a naming context imported through a subscription in response to a notification from the hosting system that the naming context reference must be refreshed in accordance with a preferred embodiment of the present invention is depicted. The process starts at step . The process then proceeds to step which depicts subscription server determining whether a single or a batched reference change notification was received. If subscription server determines that a single reference change notification has been received then the process moves to step . Step illustrates subscription server using the name space location received in a notification to obtain from the import export data the location of the federated binding in the local name space. The process then moves to step . At step subscription server rebinds the naming context reference received in the notification to the local name space. The process then ends at step .

Returning to step if subscription server determines that a batched reference change notification was received then the process next moves to step to iterate through the list of reference data contained in the notification. Step depicts subscription server determining whether all reference data has been processed. If all reference data is complete then the process ends at step . If all reference data is not complete then the process proceeds to step which illustrates subscription server using a name space location received in a notification to obtain from the import export data the location of the federated binding in the local name space. The process then moves to step . At step subscription server invokes name server to rebind to the local name space the naming context reference corresponding to step received in the notification. The process then returns to step .

While the invention has been particularly shown as described with reference to a preferred embodiment it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention. It is also important to note that although the present invention has been described in the context of a fully functional computer system those skilled in the art will appreciate that the mechanisms of the present invention are capable of being distributed as a program product in a variety of forms and that the present invention applies equally regardless of the particular type of signal bearing media utilized to actually carry out the distribution. Examples of signal bearing media include without limitation recordable type media such as floppy disks or CD ROMs and transmission type media such as analog or digital communication links.

