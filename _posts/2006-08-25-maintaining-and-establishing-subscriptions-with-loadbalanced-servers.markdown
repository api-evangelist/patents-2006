---

title: Maintaining and establishing subscriptions with load-balanced servers
abstract: A notification subscription application allows a subscriber to maintain event notification continuity in a load-balanced work environment. The notification subscription application proactively provides the subscriber notifications indicating an operating status of the subscription. In this manner, subscribers can reduce the number of missed event notifications, by readily reestablishing a subscription when required. The notification service associates markers with events such that event notifications occurring during a period of time when the notification subscription is not operating properly can be identified when the subscription is reestablished.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07606808&OS=07606808&RS=07606808
owner: Microsoft Corporation
number: 07606808
owner_city: Redmond
owner_country: US
publication_date: 20060825
---
Maintaining up to date information in a wide variety of areas is very important to many people. These people often desire to be alerted to time sensitive events and information. Content providers generate content for notifications which are then delivered to one or more subscriber electronically e.g. via electronic mail . For example a news organization may provide notification content relating stock prices breaking news weather conditions traffic conditions etc. A subscriber s expressed interest to receive electronic notifications for a particular class of content is generally called a notification subscription. Such subscriptions often are made between the end subscriber and the content provider that sends the notifications. Event driven notifications of this type are often referred to as alerts or event notifications.

A notification service typically consists of a client tier or front end server that provides a subscriber interface to a subscriber and a middle tier that includes a plurality of load balanced back end servers that can access a data tier to identify relevant events for a particular subscription. Disadvantageously due to the three tiered architecture in conventional notifications networks the client tier requires contiguous notification of events that occur on the data tier but is only able to communicate with the server tier. However because the server tier consists of a plurality of servers in which a balancing component is implemented to distribute the load experienced by each of the plurality of servers the client tier is incapable of maintaining affinity to any single server in the array when the connection is disrupted. As a result when a disruption in service occurs the client tier is not guaranteed reconnection to the same back end server and the client tier has to establish a new subscription. Unfortunately the new subscription will likely be hosted by a different one of the array of servers and thus the subscriber can miss notification of events occurring during the disruption in the notification service.

Aspects of the invention overcome one or more deficiencies in known notification services by proactively providing the status of a notification subscription to the subscriber. For example according to one aspect of the invention the subscriber receives notifications indicating whether a lack of notifications is due simply to a lack of event occurrence or if the subscription should be reestablished because the subscription is not operating properly. In this manner subscribers can reduce the number of missed event notifications by readily reestablishing a subscription when required. Other aspects of the invention involve associating markers or watermarks with events such that event notifications that occur during a period of time when the notification subscription is not operating properly can later be identified when the subscription is reestablished.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Referring first to an exemplary block diagram illustrates one example of a suitable notification service environment in which the invention may be implemented. In this instance diagrammatically shows cross network communication in a notification service environment comprising a client tier a server tier and a data tier . The server tier includes one or more back end servers such as server through server N and is coupled to the client tier and the data tier via a communication network such as the Internet. The data tier maintains an event log that is a chronologically sequenced table of event data that can be queried by the server tier . The client tier is for example a front end server that receives notification of relevant events maintained in the event log from the server tier . The client tier provides notification of relevant events to a particular subscriber via a subscriber device such a cell phone personal data assistant PDA computer or any other communication device. Notably although the client tier is described herein as a front end server it is contemplated that the functions of the client tier can be performed via a general purpose client computer connected to the server tier .

The computer typically has at least some form of computer readable media. Computer readable media which include both volatile and nonvolatile media removable and non removable media may be any available medium that may be accessed by computer . By way of example and not limitation computer readable media comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. For example computer storage media include RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that may be used to store the desired information and that may be accessed by computer . Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. Those skilled in the art are familiar with the modulated data signal which has one or more of its characteristics set or changed in such a manner as to encode information in the signal. Wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media are examples of communication media. Combinations of any of the above are also included within the scope of computer readable media.

Aspects of the present invention provide a hosted notification service for greater versatility and usability. In general a notification system operating in accordance with embodiments of the invention sends a message often referred to as an event notification or alert to a subscribing subscriber via his or her specified subscriber device . The message contains event driven information from a content provider relevant to a topic of interest to which the subscriber has signed up. In other words a subscriber is a subscriber or other entity that expresses an interest in a topic and receives notifications related to the topic from the content provider. In one embodiment the combination of a subscriber and a topic constitutes a subscription. Exemplary topics for alerts include email news weather sports finance traffic hobbies bargains and so forth. The notifications are usually driven by events such as breaking news changes in weather or traffic conditions auction outbid notices arrival of email etc. Notably the notification service environment illustrated in transcends any one particular transport medium for delivery of notifications. That is the invention may use any of a plurality of transport mediums such as electronic mail instant messaging mobile short message service messaging wireless communications etc.

Notification based applications may also be referred to as publisher subscriber services. In this instance a subscriber using a particular subscriber device such as a computer interacts with the client tier via a user interface to request the creation of subscriptions for the topics of interest to them. Thereafter the client tier submits a subscription request as indicated by arrow to the server tier to create a subscription on one of the back end servers e.g. server through server N . A load balancing component associated with the server tier receives the subscription request and designates one of the server server N to host the subscription . As known to those skilled in the art load balance components can be implemented to distribute the load experienced by an array of servers. Thereafter the subscription queries the event log to match events that correspond to the subscription . The server hosting the subscription sends the appropriate event notifications as indicated by arrow to the client tier for matching events. In general a subscription has components for the following subscription store and corresponding application programming interfaces APIs external event feed and corresponding APIs notification generation by matching external events with the corresponding stored subscriptions and delivery routing of notifications subscription management application.

In notification networks having a three tiered architecture such as illustrated in the client tier requires contiguous notification of events that occur on the data tier but is only able to communicate with the server tier . However because the server tier consists of an array of servers e.g. servers to servers N in which a balancing component is implemented the client tier is incapable of maintaining affinity to any single server in the array when the connection is disrupted. As a result when a disruption in service occurs the client tier is not guaranteed reconnection with the same back end server and the client tier will have to establish a new subscription. Unfortunately the new subscription will likely be hosted by a different one of the array of servers and can thus the subscriber can miss notification of events that occur during the disruption in the notification service.

According to one embodiment of the present invention the subscription request includes expiration data that corresponds to a maximum period of time after which to verify that the subscription is operating properly. If no events are detected for the period of time defined by the expiration data the server e.g. server hosting the subscription determines whether the lack of events are due to inactivity or due to a communication connection error and the server then notifies the subscriber of its determination via the client tier . This allows the subscriber to receive notification regarding whether the lack of event notifications is due simply to a lack of event occurrence or if the subscription needs to be reestablished because the subscription is not operating properly e.g. communication link between server tier and data tier is severed . As a result the subscriber can reduce the number of missed event notifications by readily reestablishing the subscription. Moreover as described in more detail in reference to below the subscription creates and associates markers or watermarks with events in the event log . Thereafter the subscription utilizes watermarks to insure that the subscriber receives notification of all events including those that occurred during a period of time when the subscription was interrupted.

Referring now to a block diagram illustrates a system for establishing a subscription in a notification network comprising a front end server e.g. a client tier and an array of load balanced back end servers e.g. server tier according to one embodiment of the invention. A user interface UI linked to a subscriber device e.g. subscriber device allows a subscriber or user e.g. subscriber to interact with an input form not shown provided by the front end server to request the creation of a notification subscription. For example the UI may include a display such as a computer monitor for viewing data and or input forms and an input device such as a keyboard or a pointing device e.g. a mouse trackball pen or touch pad that allows the subscriber to interact with the input form to define events of interest data. Thereafter the subscriber uses the UI to submit the defined events of interest data to the front end server .

A client notification application CNA executed on the front end server is responsive to the input data received from the subscriber device via the input form to generate a subscription request that includes the user defined events of interest. The front end server provides the subscription request to a load balancing component associated with the array of back end server to create a notification subscription based on the defined events of interest included in the subscription request . The load balancing component directs the subscription request to a particular one of the back end servers e.g. back end server to host the notification subscription . The subscription request also includes address data such as a uniform resource locator URL for the front end server from which the subscription request is received. The designated server is responsive to the subscription request to execute a server notification application SNA that creates the notification subscription . The SNA associates the address data and any other data included in the subscription request with the created notification subscription . After creating the notification subscription the SNA defines unique identification data that is stored in a memory of the designated server . The SNA then sends a subscription response to the front end server at the address specified by the address data. The subscription response includes the unique identification data that corresponds to the notification subscription . The front end server is responsive to the subscription response to store the unique identification data in a memory of front end server .

Referring now to a block diagram illustrates a system for providing event notifications to a subscriber e.g. subscriber of a notification subscription via a notification network such as described in . The created notification subscription queries as indicated by reference character a data tier e.g. data tier that maintains an event log comprised of chronological event data related to one or more subscriptions to identify relevant event data. If the event log contains event data that corresponds to the notification subscription i.e. relevant event data the notification subscription sends a notification request to the front end server . The notification request includes the created unique identification data and the relevant event data. The CNA authenticates the notification request by comparing the unique identification data included in the notification request with unique identification data stored in the memory . This allows the CNA to verify that the notification request is associated with a notification subscription created in response to a previous subscription request that initiated from this particular front end server . If the front end server determines the notification request is associated with a valid notification subscription the relevant event data included in the notification request is stored in the memory of the front end server .

According to another aspect of the invention the CNA is responsive to unique identification data included in the received notification request to retrieve corresponding continuity data from the memory of the front end server . The CNA then determines if the subscriber desires to retain the notification subscription or to cancel the notification subscription . Continuity data can be defined by a subscriber to specify date and or time in the future to cancel the subscription or to specify yes and no values indicating whether or not the subscription is cancelled. For example the UI linked to the subscriber device allows the subscriber to interact with an input form not shown that has been downloaded or retrieved from the front end server to define continuity data for a particular notification subscription . Alternatively the continuity data may specify a default period of time after which the subscription should be cancelled. The CNA sends a notification response to the back end server that includes instructions to retain the subscription or to cancel the subscription based on the continuity data .

Notably although the continuity data is described above as being defined by a subscriber the back end server can change continuity data without any subscriber knowledge or intervention. For example according to one aspect of the invention if the front end server does not receive a notification of an event from the back end server over the period of time specified by the expiration parameter and the front end server determines the subscription is non functional e.g. communication link error as described in more detail below in reference to the front end server reestablishes the subscription with another subscription request. Thereafter a notification request may come from the back end server to the front end server for the original subscription . However since the front end server essentially replaces the original subscription with a new subscription e.g. see new notification subscription in the response to the request will be for the original subscription to be cancelled.

According to another aspect the invention the subscription request can include expiration parameter data that corresponds to a maximum period of time after which the subscriber would like to verify that the subscription is functioning properly. Similar to continuity data expiration parameter data can be defined by a subscriber using the UI linked to the subscriber device to interact with an input form to define an expiration parameter value e.g. 2 hours . The SNA stores expiration parameter data included in the subscription request in the memory of the server . In operation the server communicates with the data tier at a predefined non client configurable interval. For example the SNA queries the data tier every two seconds looking for events. Thereafter if the notification subscription fails to identify any events for a period time greater than the maximum period of time specified by the expiration parameter data the SNA determines if the lack of events is due to a break in the communication link established between the server and data tier or simply a lack of events. If the communication link between the server and data tier is still established e.g. can query data tier and no events have been found in the data tier for the configured timeframe as specified by the expiration parameter data a different notification request is sent from the notification subscription to the CNA to notify the subscriber of the inactivity. On the other hand if it is determined that the communication link has been interrupted e.g. cannot query data tier the different notification request sent from the notification subscription to the CNA notifies the subscriber that service has been interrupted.

According to yet another aspect of the invention the notification subscription generates a current watermark for every notification request sent from the back end server to the front end server . Watermarks are for example string values that can be translated to specific points in the event log by the back end server . That is the watermarks themselves do not include relevant event data internally. According to one aspect of the invention watermarks are row numbers in a database e.g. event log that are each specific to a particular event in the event table. As a result the same watermark can be provided to multiple subscriptions that each have interest in the same particular event. For example if a new email message event were in the event table with watermark abc123 that event and watermark might be distributed to two different subscriptions that were looking for new email on that particular users mailbox. In this embodiment if the front end server determines that the notification request is associated with a valid notification subscription the relevant event data and the current watermark included in the notification request are stored in the memory of the front end server .

Moreover every notification request sent from the back end server to the front end server also includes a previous watermark. Thus in addition to unique identification data and relevant event data each notification request includes a current watermark and a previous watermark. The previous watermark corresponds to a last notification request that was successfully sent to the front end server by the notification subscription . The CNA confirms receipt of the last event notification associated with the notification subscription by comparing the previous watermark included in the notification request to watermarks stored in memory to verify that they are matching watermark values.

Referring now to a block diagram illustrates a system for reestablishing an interrupted notification subscription in a notification network such as described in . The notification subscription being hosted on a back end server may for any number of reasons stop functioning properly and or lose the ability to communicate notification requests e.g. notification request to the front end server . In such circumstances the front end server needs to be able to establish a new notification subscription and yet maintain a contiguous set of events of interest. For example when the CNA determines an event notification was lost as shown in phantom because a previous watermark included in a notification request does not match watermark data stored in memory it is important that the front end server have the ability to create the new notification subscription and maintain a contiguous stream of events.

According to an aspect of the invention the CNA is responsive to a determined lost event to generate a new subscription request that includes the previous watermark. The load balancing component receives the new subscription request and may redirect the subscription request to a different one of the back end servers e.g. back end server to host a new notification subscription . The newly designated server is responsive to the subscription request to execute a SNA to create the new notification subscription . The new subscription is established from the watermark forward. In other words because watermarks can be translated into specific points in an event log by the new notification subscription the previous watermark included in the new subscription request is translated to a specific point in the event log to insure that any events in the event log that correspond to events after that specific point are captured by the new notification subscription .

After creating the new notification subscription the SNA defines unique identification data that is stored in a memory of the newly designated server . The SNA sends a subscription response to the front end server at the associated address. The subscription response includes the new unique identification data that corresponds to the new notification subscription . The front end server is responsive to the subscription response to store the new unique identification data in memory of the server . Thereafter the created notification subscription queries the data tier maintaining the event log as described above in connection to to identify relevant event data.

For purposes of illustration programs and other executable program components such as the operating system are illustrated herein as discrete blocks. It is recognized however that such programs and components reside at various times in different storage components of the computer and are executed by the data processor s of the computer.

Although described in connection with an exemplary computing system environment including computer embodiments of the invention are operational with numerous other general purpose or special purpose computing system environments or configurations. The computing system environment is not intended to suggest any limitation as to the scope of use or functionality of any aspect of the invention. Moreover the computing system environment should not be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the exemplary operating environment. Examples of well known computing systems environments and or configurations that may be suitable for use with aspects of the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics mobile telephones network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

Embodiments of the invention may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include but are not limited to routines programs objects components and data structures that perform particular tasks or implement particular abstract data types. Aspects of the invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

An interface in the context of a software architecture includes a software module component code portion or other sequence of computer executable instructions. The interface includes for example a first module accessing a second module to perform computing tasks on behalf of the first module. The first and second modules include in one example application programming interfaces APIs such as provided by operating systems component object model COM interfaces e.g. for peer to peer application communication and extensible markup language metadata interchange format XMI interfaces e.g. for communication between web services .

The interface may be a tightly coupled synchronous implementation such as in Java 2 Platform Enterprise Edition J2EE COM or distributed COM DCOM examples. Alternatively or in addition the interface may be a loosely coupled asynchronous implementation such as in a web service e.g. using the simple object access protocol . In general the interface includes any combination of the following characteristics tightly coupled loosely coupled synchronous and asynchronous. Further the interface may conform to a standard protocol a proprietary protocol or any combination of standard and proprietary protocols.

The interfaces described herein may all be part of a single interface or may be implemented as separate interfaces or any combination therein. The interfaces may execute locally or remotely to provide functionality. Further the interfaces may include additional or less functionality than illustrated or described herein.

The order of execution or performance of the operations in embodiments of the invention illustrated and described herein is not essential unless otherwise specified. That is the operations may be performed in any order unless otherwise specified and embodiments of the invention may include additional or fewer operations than those disclosed herein. For example it is contemplated that executing or performing a particular operation before contemporaneously with or after another operation is within the scope of aspects of the invention.

Embodiments of the invention may be implemented with computer executable instructions. The computer executable instructions may be organized into one or more computer executable components or modules. Aspects of the invention may be implemented with any number and organization of such components or modules. For example aspects of the invention are not limited to the specific computer executable instructions or the specific components or modules illustrated in the figures and described herein. Other embodiments of the invention may include different computer executable instructions or components having more or less functionality than illustrated and described herein.

When introducing elements of aspects of the invention or the embodiments thereof the articles a an the and said are intended to mean that there are one or more of the elements. The terms comrpising including and having are intended to be inclusive and mean that there may be additional elements other than the listed elements.

Having described aspects of the invention in detail it will be apparent that modifications and variations are possible without departing from the scope of aspects of the invention as defined in the appended claims. As various changes could be made in the above constructions products and methods without departing from the scope of aspects of the invention it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.

