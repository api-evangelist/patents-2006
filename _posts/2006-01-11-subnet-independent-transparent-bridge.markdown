---

title: Subnet independent transparent bridge
abstract: A method and apparatus for intelligently bridging a first network and a second network are disclosed. In one embodiment, a protocol independent bridge device driver is bound to a first and a second network interface card device driver in order to access the first and the second network. Then the bridge device driver adaptively derives topology of the first and the second network based on network packets that it receives from the first and the second network. Lastly, the bridge device driver delivers the received network packets based on information contained in the received network packets and the derived topology.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07630398&OS=07630398&RS=07630398
owner: Intel Corporation
number: 07630398
owner_city: Santa Clara
owner_country: US
publication_date: 20060111
---
This application is a divisional of U.S. patent application Ser. No. 09 671 767 entitled Apparatus for Creating a Photoactive Adhesion Promoter filed Sep. 27 2000 now abandoned and assigned to the assignee of the present application.

This invention relates to communication technologies generally and particularly to bridging technologies.

With families bringing second and third personal computers hereinafter PCs into their homes a method for the computer users in these homes to effectively utilize and share all of their computing resources is becoming increasingly desirable. Home networking is one such solution and it avails the family members with the following services but without limitation printer sharing simultaneous Internet Access file sharing multi player gaming etc.

Many home networking technologies exist today and a number of the technologies seek to take advantage of the readily available infrastructure in a home. For instance the new Home Phoneline Networking Alliance hereinafter HomePNA 2.0 specification published in December of 1999 enables 10 Mbps networking using a home s existing phone lines and conventional RJ 11 phone jacks. Additionally open specifications ratified by the HomeRF Radio Frequency Working Groups utilize 2.4 GHz frequency hopping technology to enable a wireless home network.

Despite the advantages and the convenience that the aforementioned home networking technologies bring to a home there lacks a cost effective mechanism for these technologies to interoperate with one another. illustrates one prior art configuration that deploys HomePNA and HomeRF technologies. Specifically primary PC accesses the Internet through its Internet access point . Internet access point can be but not limited to a cable modem a digital subscriber line DSL modem a dial up modem etc. Then primary PC communicates with second PC via HomePNA Network Interface Card hereinafter NIC and HomePNA NIC respectively. Similarly primary PC communicates with third PC via HomeRF NIC and HomeRF respectively.

Assuming the communications among the NICs are based on Transmission Control Protocol Internet Protocol hereinafter TCP IP difficulties arise when the operating system on primary PC does not support sharing one network prefix for HomePNA NIC and HomeRF NIC . As a result in order for primary PC to communicate with second PC and third PC directly HomePNA NIC and HomePNA NIC would be configured to share one network prefix and HomeRF NIC and HomeRF NIC would be configured to share another. With this configuration however second PC cannot communicate with third PC directly. In other words network packets originated from HomePNA NIC would most likely only reach HomeRF NIC through a router that shares the same network prefix as HomeRF NIC .

Furthermore even though bridging technology exists today to allow communication between one type of network with another such technology is often embodied in a standalone apparatus. Not only is modifying a hardware bridge to accommodate new technologies or specifications nontrivial but a hardware bridge is also more costly than a software solution that utilizes available PC resources.

Therefore a method and apparatus is needed to overcome the described operating system limitations and to enable integration between two or more different networking technologies cost effectively.

A method and an apparatus for intelligently bridging a first network and a second network are disclosed. In the following paragraphs numerous specific details are set forth in order to provide a thorough understanding of the present invention. However it will be apparent to one of ordinary skill in the art that the invention may be practiced without these particular details. In other instances well known elements and theories such as Transmission Control Protocol Internet Protocol hereinafter TCP IP NetBios Enhanced User Interface hereinafter Netbeui Protocol Internetwork Packet Exchange hereinafter IPX Protocol Institute of Electrical and Electronics Engineers hereinafter IEEE 802 standards Ethernet IP addressing schemes Peripheral Component Interconnect hereinafter PCI Universal Serial Bus hereinafter USB operating systems kernel mode user mode device driver Open Systems Interconnection hereinafter OSI Reference Model Network Driver Interface Specification hereinafter NDIS etc. have not been discussed in special details in order to avoid obscuring the present invention.

Moreover throughout the following discussions a network interface card hereinafter NIC can be but not limited to a PCI or a USB expansion board a semiconductor device that has been integrated into a computer system s motherboard and provides network connectivity functionality or a credit card size peripheral device etc. The term intermediate driver refers to a driver that interfaces with an upper level driver and a lower level driver. A protocol driver that implements layers of a network protocol stack is one example of an upper level driver. On the other hand a miniport driver that implements device specific operations for a NIC is an example of a lower level driver. Also the terms protocol stack and network stack are used interchangeably to broadly refer to a hierarchy of protocol layers or levels that provide appropriate networking functions. For example the OSI Reference Model describes networking as a series of layers with a specific set of functions allocated to each layer. These layers are from the lowest level layer to the highest level layer physical data link network transport session presentation and application layers. Each lower level layer offers certain services to a higher level layer and shields the higher level layer from the implementation details of the services. In addition the term network topology broadly refers to descriptions of the accessibility of certain machines or NICs on particular networks. Finally a machine readable medium refers to but not limited to a storage device or a memory device etc.

In addition to calling NDIS provided functions i.e. NdisXxx functions protocol driver also provides NDIS with protocol Application Programming Interface hereinafter API . Specifically protocol driver exports a set of ProtocolXxx functions that NDIS can invoke either for its own purpose or on behalf of lower level drivers such as SI bridge and NIC driver . In a similar fashion NIC driver communicates with NIC by invoking NdisXxx functions. In order to allow NDIS to access NIC driver either for its own purpose or on behalf of higher level drivers such as SI bridge and protocol driver NIC driver also provides NDIS with an API miniport API i.e. MiniportXxx functions .

Because of its intermediate position in the hierarchy as shown in SI bridge provides protocol API at its lower edge and miniport API at its higher edge to avoid disrupting the operations of the components in this hierarchy. More particularly SI bridge s protocol API permits NDIS to communicate requests from NIC driver to SI bridge . To NIC driver SI bridge is no different than protocol driver and the inclusion of SI bridge thus does not alter NIC driver s operations. Similarly NDIS either for its own purpose or on behalf of higher level driver such as protocol driver is able to access SI bridge through miniport API . As a result SI bridge appears to be NIC driver from the perspective of protocol driver and protocol driver can therefore continue to operate in a same matter. In other words SI bridge is transparent to both protocol driver and NIC driver .

Moreover illustrates a functional block diagram of one embodiment of a SI bridge. Specifically SI bridge contains API translator packet analyzer and packet delivery engine . API translator is responsible for providing APIs to and interpreting requests from components that are external to SI bridge . Using as an illustration API translator exposes miniport API and protocol API to NDIS protocol driver and NIC driver . In a situation where protocol driver intends to send packets or requests to NIC driver NDIS invokes MiniportXxx functions of miniport API on behalf of protocol driver to send such packets or requests to SI bridge . API translator interprets these function calls and invokes corresponding NDISXxx function calls to propagate these packets and requests to NIC driver .

On the other hand when NIC driver intends to send up its status received packets or responded requests to protocol driver NDIS invokes ProtocolXxx functions of protocol API on behalf of NIC driver to send up the information. API translator maps these ProtocolXxx function calls into appropriate NDISXxx function calls and invokes these mapped NDISXxx functions to relay the information to protocol driver .

Packet analyzer and packet delivery engine are responsible for monitoring and updating network topology information and intelligently delivering network packets to appropriate destinations. In one embodiment packet analyzer parses the network packets that SI bridge receives extracts appropriate information contained in the network packets and based on this extracted information constructs a distribution table that describes how SI bridge should deliver the packets that it receives. For example one implementation of packet analyzer extracts source address X of a network packet that SI bridge receives from network Z. According to the source address and network information SI bridge identifies NIC Y to be the sender of this network packet and NIC Y is reachable on network Z. Then packet analyzer makes an entry in the distribution table indicating that subsequent network packets that are destined for NIC Y should use network Z.

Because network topology may change as components are added removed or powered up and down on networks one embodiment of packet analyzer also records the arrival time of the received network packets in the distribution table. Whenever the source address of the received network packet has already been noted in the distribution table packet analyzer only updates the arrival time. Thus the time recorded in the distribution table indicates the last time that SI bridge receives a network packet from a particular NIC. Then packet analyzer can periodically purge entries in the distribution table that have remained unchanged for more than a predetermined amount of time. Alternatively packet analyzer can compile statistics of the network packets that it analyzes such as the frequently of a particular NIC sends a packet to SI bridge and dynamically modifies its purging mechanism based on such compiled statistics.

In addition to extracting source address information one embodiment of packet analyzer also parses out destination address and packet type information for packet delivery engine . As has been mentioned before packet delivery engine is responsible for forwarding network packets that SI bridge has received to suitable destinations. One embodiment of packet delivery engine determines these suitable destinations based on the parsed information from packet analyzer and also the information contained in the aforementioned distribution table. Subsequent paragraphs will discuss this determination process in more details. Also one embodiment of packet delivery engine interfaces with API translator where API translator invokes the appropriate function calls such as NDISXxx function calls to further facilitate the delivery of network packets to the destined NIC s .

It is important to emphasize that although the preceding paragraphs describe SI bridge specifically in conjunction with a standardized driver interface such as NDIS it should be apparent to one with ordinary skill in the art to design SI bridge to interoperate with other driver interfaces. Moreover it should also be apparent to one ordinarily skilled in the art to combine or further divide up the described functional blocks of SI bridge .

General purpose computer system comprises microprocessor and cache memory coupled to each other through processor bus . Sample computer system also includes high performance system bus and standard I O bus . Coupled to high performance system bus are microprocessor and system controller . Additionally system controller is coupled to memory subsystem through channel is coupled to I O controller hub through link and is coupled to graphics controller through interface . PCI NIC and or USB NIC which provide sample computer system access to a network are also coupled to I O controller hub . Coupled to graphics controller is video display . Coupled to standard I O bus are I O controller hub mass storage and alphanumeric input device or other conventional input device .

These elements perform their conventional functions well known in the art. Moreover it should have been apparent to one ordinarily skilled in the art that computer system could be designed with multiple microprocessors and may have more components than that which is shown. Also mass storage may be used to provide permanent storage for the executable instructions of SI bridge in one embodiment. On the other hand memory subsystem may be used to temporarily store the executable instructions during execution by microprocessor .

Furthermore since only HomePNA NIC is bound to both SI bridge and TCP IP protocol driver HomePNA NIC has its own unique IP address and serves as the primary NIC for general purpose computer system . Consequently the Media Access Control hereinafter MAC address of HomePNA NIC not only becomes the source address for its network packets but also becomes the source address for the network packets that are originated from secondary NICs such as HomeRF NIC . Unlike HomePNA NIC HomeRF NIC is not bound to a protocol driver and does not need to have its own IP address.

It is important to note that SI bridge is protocol independent. In contrast to the network prefix limitation that the prior art configuration as described in the Background section and in faces SI bridge eliminates the limitation by not forwarding network packets based on IP addresses. As a specific example for network packets that conform to IEEE 802.3 standard when SI bridge receives such network packets it looks at information contained in the packets such as their source MAC address and destination MAC address information. Then SI bridge either passes the network packets up to upper layers of a protocol stack such as TCP IP protocol driver or passes the packets laterally from one NIC such as HomePNA NIC to another NIC such as HomeRF NIC . also illustrates six paths for network traffic. They are paths and .

In block packet delivery engine verifies whether the parsed source address belongs to the designated primary NIC or HomePNA NIC in the embodiment illustrated in . If the verification indicates that HomePNA NIC has received its own network packet this packet is dropped in block . Packet delivery engine then waits to process the next network packet. However if the verification returns false packet delivery engine searches the aforementioned distribution table for entries that match the parsed source address in block . If packet delivery engine could not identify any entries that match it proceeds to add the unmatched source address information along with other associated network information to the table in block . Other associated network information here includes but not limited to the associated NIC that generates the network packet the network that the associated NIC attaches to the time the network packet arrives at etc. Either after updating the distribution table in block or locating a matching entry in block packet delivery engine proceeds further to establish delivery paths for the network packet.

If packet delivery engine determines that the network packet is a broadcast packet in block where such type of packet is destined for all entities on a network it then ensures the broadcast packet would travel on either receiving paths and or and in block . For example when HomePNA NIC sends out a broadcast packet this network packet would travel via path to reach the upper layers of general purpose computer system s protocol stack through HomePNA NIC HomePNA NIC driver SI bridge and TCP IP protocol driver . Additionally SI bridge would also transport this broadcast packet laterally to HomeRF NIC through path and through HomeRF NIC driver and HomeRF NIC . Similarly network packets originated from HomeRF NIC can reach upper layers of general purpose computer system s protocol stack via path and can directly reach HomePNA NIC via path .

When the network packet is a multicast packet instead of a broadcast packet in block packet delivery engine also selects receiving paths and or and for the multicast packet as has been discussed above. A multicast packet is somewhat similar to a broadcast packet except that it is limited to certain destination addresses. If the network packet is neither a broadcast packet nor a multicast packet packet delivery engine proceeds to confirm its directed packet type status in block . A directed packet refers to a network packet that is destined to a specific or directed NIC.

For a confirmed directed packet if packet delivery engine further establishes that the directed packet is destined for a primary NIC such as HomePNA NIC in block packet delivery engine chooses receiving path or for the directed packet in block . For instance when HomePNA NIC sends this directed packet for HomePNA NIC path is selected to receive the packet. On the other hand when HomeRF sends out the directed packet path is chosen. If the directed packet is not destined for a primary NIC packet delivery engine instead designates either receiving path or in block .

Although specific examples have been provided to illustrate the operations of a SI bridge one with ordinary skill in the art may implement the illustrated system without all the disclosed details. For example an ordinary artisan may implement SI bridge to interoperate with more than the two NICs as shown in and also with other types of NICs than the ones described such as Ethernet NICs without exceeding the scope of the present invention. Additionally an ordinary artisan may also replace TCP IP protocol driver as shown in with but not limited to an IPX or a Netbeui protocol driver.

Thus a method and apparatus for intelligently bridging a first network and a second network have been disclosed. Although a SI bridge has been described particularly with reference to the figures it may appear in any number of electronic apparatuses and network configurations. It is further contemplated that many changes and modifications may be made by one of ordinary skill in the art without departing from the spirit and scope of the present invention.

