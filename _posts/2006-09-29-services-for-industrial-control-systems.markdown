---

title: Services for industrial control systems
abstract: A message component for an industrial automation system is provided. This includes a service component that is employed to locate functionality of applications associated with a control system message bus. An operations component exchanges messages with the message bus, where the service component and the operations component form an external view to facilitate communications between the applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07676279&OS=07676279&RS=07676279
owner: Rockwell Automation Technologies, Inc.
number: 07676279
owner_city: Mayfield Heights
owner_country: US
publication_date: 20060929
---
The subject invention relates generally to industrial control systems and more particularly to industrial control services that provide an external view of applications at an abstract level in order to facilitate communications between applications.

Industrial controllers historically have operated in factory networks where a plurality of controllers and associated I O modules communicate. These lower level control elements are often in communication with higher level computing systems or servers that aggregate data from the controllers and help to manage day to day activities of an enterprise. As systems have become more complex however communications and functional cooperation between components has become a challenge. For instance when users purchase multiple products from one or more vendors there is often limited interoperability and consistency between such products. Software and control engineers must then learn their unique product and how the components interact with each other. Limited product and component consistency suggest that techniques engineers learn in one product do not necessarily carry over to other implementations. In general control and application systems use different interfaces that make mapping difficult meanwhile qualified personnel that understand both hardware and software environments are in short supply and command high salaries.

Often times integration of products production and automation systems in particular is too complex and difficult to manage. Process and control engineers cannot code and configure their respective components of a solution without concern for other system components. In addition system startup metrics are generally not sufficient to supply clear and measurable information for the user integrator. In one example a user specifies a line production system with both control and software system components. The development customization and integration cost is significant allowing for long ramp up and integration due to the complexity of connecting systems and uncertainty of how the system will perform. This has a significant impact beyond the cost of the control system as line commissioning and ramp up are delayed during control system integration. A more predictable process and less complex system integration capability will reduce these costs.

Another problem with current control solutions is that users currently focus on implementation and glue logic rather than the production solution at hand. The underlying technical details have become a primary worry where engineers from multiple environments do not focus on process information application level concerns and values exchanged rather they more often focus on the how not the what. For instance a user may decide to automate a manual section of their plant. The design may start at a high level but soon becomes a series of discussions regarding nonfunctional requirements e.g. DCOM TCP transaction rates and the like. While these nonfunctional requirements are important the design of functional requirements is where the true value is to the designer or end user. Thus the user would prefer to focus on functional requirements equipment control product flow control and so forth providing direct improvements in value rather than dealing with superfluous technology issues.

In another case system design does not sufficiently enable trade offs between overhead burden memory footprint CPU cycles and so forth and application coupling. For instance processing load should be better distributed across the system in accordance with system capabilities. Thus if one part of the system is shut down alternative processing capability should be in place to allow production to continue. For example a user initially designs and installs a control system suiting their immediate needs. Incremental changes are then applied to controllers and often new interface functions are added to the human machine interface HMI for such controllers. Current solutions however do not facilitate a smooth and uncomplicated transition for the respective changes. Multiple technologies underneath many vendors products complicate configuration and management of systems. This is also aggravated when third party systems are involved. Such complexity hinders the system s capacity to provide higher level information and reduces its ability to easily configure such systems.

The following presents a simplified summary in order to provide a basic understanding of some aspects described herein. This summary is not an extensive overview nor is intended to identify key critical elements or to delineate the scope of the various aspects described herein. Its sole purpose is to present some concepts in a simplified form as a prelude to the more detailed description that is presented later.

Industrial controller services are provided that present an abstraction for an industrial communications infrastructure to enable components to easily locate and connect desired functionality across the infrastructure. Services help locate and connect application interfaces between applications or modules to and from a control system message bus. Such services differ from web services since they are not restricted to standard http SOAP implementations yet have the capability to interface with the control system message bus which is in contrast to web services. Although the services are compatible with web services they include operations that exchange messages with the message bus that include industrial protocols employed on the bus. Generally services associate higher level behaviors to sources and destinations of control system messages such as how the message will be processed which output messages will be associated with input messages and vice versa and how security and encoding rules are to be reconciled by sender and receiver applications. By employing the services to determine locate available functionality applications can be efficiently integrated across system components.

To the accomplishment of the foregoing and related ends certain illustrative aspects are described herein in connection with the following description and the annexed drawings. These aspects are indicative of various ways which can be practiced all of which are intended to be covered herein. Other advantages and novel features may become apparent from the following detailed description when considered in conjunction with the drawings.

Systems and methods are provided to facilitate communications for applications associated with industrial controller environments. In one aspect a message component for an industrial automation system is provided. This includes a service component that is employed to locate functionality of applications associated with a control system message bus. An operations component is provided to exchange messages with the message bus where the service component and the operations component form an external view for developers to facilitate communications between the applications.

It is noted that as used in this application terms such as component module service and the like are intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution as applied to an automation system for industrial control. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and a computer. By way of illustration both an application running on a server and the server can be components. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers industrial controllers and or modules communicating therewith.

Referring initially to a system illustrates services for an industrial automation system. A message bus is employed to communicate to various components across an enterprise. In this system substantially any type of protocol can be employed across the message bus including Ethernet protocols Internet protocols and or factory protocols such as Control and Information Protocol CIP for example. As shown one or more source applications having interfaces communicate across the message bus to one or more destination applications which provide interfaces . One or more services are provided that utilize operations components to communicate with the message bus where the services and the operations form an external clients view at . Such external view is provided as a higher level abstraction above the interfaces and where the view shows relationships between applications and that can be employed to locate functionality in one application and supply such functionality to another application. At a platform directory may be provided to facilitate application of the services where information such as application addresses and functionality can be indexed in a centralized location for use by the services .

In general the services present an abstraction for an industrial communications infrastructure including the message bus to enable components such as the source and destination applications and to easily locate and connect desired functionality across the infrastructure. The services help locate and connect application interfaces and between applications and or modules described below to from the control system message bus . Such services differ from web services since they are not restricted to standard http SOAP implementations yet the services have the capability to interface with the control system message bus which is in contrast to web services. Although the services are compatible with web services they include operations that exchange messages with the message bus that include industrial protocols employed on the bus. Generally the services associate higher level behaviors to source applications and destination applications of control system messages such as how the message will be processed which output messages will be associated with input messages and vice versa and how security and encoding rules are to be reconciled by sender and receiver applications. By employing the services to determine locate available functionality applications can be efficiently integrated across system components.

In one example two services can send and receive the same messages. A Controller service supports the operations below which exchange messages ItemInfo and Value 

Typically an interface presents the developer with a boundary to connect modules together from the module designer s context e.g. C ladder etc. . The service provides an external module clients view at associating additional information such as security requirements access rights and transport protocols required to connect the applications and where the context is common across the system e.g. language neutral . This information can be provided by engineers system integrators or system administrators depending on requirements and capabilities.

A client to the application s interface locates services that support the interface they are searching for. The service advises the client of the policies security format and so forth ports in memory CIP http and so forth and diagnostics that are to be satisfied to connect the applications or modules together. This information can be grouped into the format suitable to the user s view at . Such information can be filtered by port show memory only or by a combination show all ports to interface status . In another aspect the system can be employed as a messaging system for an industrial control environment. This includes means for interfacing to a control system bus such as via the interfaces and . This also includes means for locating application functionality e.g. services for the control systems bus . The messaging system can also include means for publishing data relating to the application functionality such as via the platform directory .

The system provides a model that allows module developers to annotate applications or modules with requirements for access to externally visible components which provide the client view at to enable client modules to browse. The application or module identifies its public actions Commands Events Data Alarms and so forth in the interface where these actions are mapped to operations that enable additional information to be added to fully describe connection requirements for clients. Services publish these operations on Ports e.g. CIP Live Data JMS Web Service and so forth . Clients are then able to discover functionality by browsing these associations in the platform directory for example. These relationships allow searches on the automation platform such as where is this interface deployed which ports are the module s interface available on what access roles are required to connect to server what messages are exchanged during a connection to this module and what controller chassis or PC server functionality is required to run the service for example.

Before proceeding it is noted that the source applications or the destination applications can be provided as a module shown below in which is capable of communicating across the message bus . As will be described in more detail below the module can be employed to define interface and execute functionality of one or more industrial control system components. Modules can be accessed across a network from the control components where the network in accordance with the message bus allows online access to the modules and their respective control components and also enables creating the modules in an offline manner such as in a computer database not shown .

In general the module is an association of logic with one or more resources. The logic includes program code that can alter the state of a resource for example ladder code function chart script JAVA C code and so forth. The resources are those components or elements that perform an activity in a system including equipment and personnel that perform work in a system. Other examples of types of resources include Equipment Material Personnel Segments and Storage. Personnel and equipment machines can perform activities in a system. Resources that can perform work can be classified as active resources e.g. CNC machine Injection molding machine whereas other equipment resources can be considered passive resources e.g. sensor material . The modules hide the user from internal interfaces messages and logic specific to the resources yet provide standard or generic interfaces to external systems or between components. Modules may include other modules including nested modules described in more detail below where standard module behaviors and attribute patterns can be represented using common data model representations for module classes module templates and module inheritance. Module classes and templates can be maintained in libraries which facilitate access to desired system functionality and further promote system integration.

It is further noted that the components illustrated in the system can include various computer or network components such as servers clients programmable logic controllers PLCs communications modules mobile computers wireless components control components and so forth which are capable of interacting across the message bus . Similarly the term PLC as used herein can include functionality that can be shared across multiple components systems and or networks. For example one or more PLCs can communicate and cooperate with various network devices across the message bus . This can include substantially any type of control communications module computer I O device sensor Human Machine Interface HMI that communicate via the message bus which includes control automation and or public networks. The PLC can also communicate to and control various other devices such as Input Output modules including Analog Digital Programmed Intelligent I O modules other programmable controllers communications modules sensors output devices and the like.

The message bus can include public networks such as the Internet Intranets and automation networks such as Control and Information Protocol CIP networks including DeviceNet and ControlNet. Other networks include Ethernet DH DH Remote I O Fieldbus Modbus Profibus wireless networks serial protocols and so forth. In addition network devices can include various possibilities hardware and or software components . These include components such as switches with virtual local area network VLAN capability LANs WANs proxies gateways routers firewalls virtual private network VPN devices servers clients computers configuration tools monitoring tools and or other devices.

Referring now to a system illustrates relationships between services modules or applications and interfaces associated with such modules. As shown the services can include one or more operations and interfaces can include one or more actions where the service can derive default information from the interface and the operations can derive default information from the actions .

The configuration of services and operations can be automated however users may elect to view or update the configuration information. Typically operations designed to work together are supported on the same service . Thus message bus products can automatically generate default service and operation configurations based on existing module interface definitions. Similarly meta data provided by the service and operations can be created based on system policies associated with user interface selection child module local access rather than manual entry by user. Users may also customize the default service and operations. For example the name of the operation provided to clients may be different than an internal name.

Examples in which the user may elect to override default settings include A control engineer integrates three machines from different vendors that publish part count information in interfaces that have common functionality but different names. The internal HMI and data collection systems expect a common service interface a company has a set of validated control modules that are mapped into the system as services and operations . The names and publication rates of actions on the modules are to be changed where the operations can be changed without touching the validated module logic. In another example a customer upgrades their controller to support controller based Live Data and desires to convert some control modules from another Data format. The change can be accomplished by overriding the operation parameters without affecting the underlying module code. In yet another example a customer has a module supporting actions on his Control Module interface which spans HMI data collection and control data. The volume and mix of information requires highly trained personnel and is prone to errors when the client s access information is not published for them. The customer updates access permissions on the operations to partition the operations between the three clients.

A client to the module s interface locates services that support the interface they are looking for. The service advises the client of the policies security format etc. ports in memory CIP http etc. and diagnostics needed to connect the modules . This information can be grouped into the format appropriate to the user s view.

Turning to a system illustrates relationships between interfaces services and service operations . The system illustrates how service information is associated with interface information and the hosts that support the services. The service includes the context required for deployment of the module that exposed the interface . This information is employed for standardizing connections to interfaces and when multiple transports are available. Services allow these transport options to be available in a consistent manner minimizing complexity.

Interfaces provide an internal application logic view of exposed functionality. This includes an application specific view along with actions and arguments that are in application specific format. Interfaces are aligned with services where the interface is the application developer s view and the service is the operational implemented view. Typically clients browse services to locate functionality. Services allow clients systems view of exposed functionality. System views include identifying the what where and how. Service operations allow the association of communications and deployment data with the actions on the interface . Messages are common format of the arguments data supported on the interface and in communication. The operations may also specify mappings. Operations can be supported on multiple ports where observing the port from a client can discover the operations supported. Similarly by observing the service the client can identify what ports are supported.

At the service publication data can include access policy data. This can include security requirements such as role credentials encryption levels required and so forth. The data can also include scope information that outlines applications hosts domains allowed access to the interface. At frequency data may be published which can include how often the data producer provides updates to the data consumer for example. At protocol encoding requirement data may be published by the service. At data types and message types required to interact with the service operation can be published. At data relating to deployed instances that currently support the interface can also be identified via linkages to hosts established during previous deployment steps. As can be appreciated other data can be published at from the examples shown at .

The system level of operation delivers runtime functionality which manages the communications with a production facility for example. It generally has stringent demands in terms of high availability and predictability. It should be in a known state within the facility. The system level as a result is automated and running with exposed services for configuration and reporting it executes as part of the automation platform.

The application level includes UI tools API s and drivers that collaborate to provide transparent support for system design and configuration across different environments. In the runtime system drivers and Message Engines compliment each other to transparently connect modules together. In the simplest case drivers may facilitate direct connection of modules or applications on the same machine such as two control modules within a controller. More advanced message processing activities are handled by message engines . In these cases the driver provides the on ramp for a message onto the message bus where message engines manage the delivery to configured recipients of the message. To enable this message engines support a service interfaces to transport channels.

Typically the messaging infrastructure matches the different operating environments underlying the logical message bus where the messaging infrastructure components match the respective target environment. For example drivers implemented in controller modules can be coded as real time code as proposed for CIP data whereas drivers for MES systems can be coded as Java modules.

Proceeding to of interfaces are defined for one or more modules. As noted above modules are similar to applications where the interfaces define points of communication to interact with the module. For example the interfaces can be associated with a controller messaging infrastructure where the interfaces define entry points and exit points to a control system message bus. At one or more services are defined to provide a higher level abstraction of the respective interfaces defined at . Such abstraction allows developers to locate functionality across a message bus and to see details relating to how to couple functionality to form an overall application. For example the services may be employed to locate two or more modules that may communicate to form a control application. At service operations are defined. As noted above such operations can be employed to allow the services defined at to communicate with a message bus.

At data relating to the service defined at is published to allow developers to locate information pertinent to communicating with a module. Such data can include policy data for accessing the respective module frequency data indicating how often data is presented in a system protocol or encoding data for communicating with a module data or message type information and or information relating to other deployed instances using such interfaces defined at . At a client view is generated enabling developers to view information related to how to couple modules or applications where such information is presented in a more abstract form than the interfaces themselves to facilitate efficient integration of components or applications across a message bus.

Referring now to module attributes are illustrated where such attributes can be employed with the services described above. The attributes depicted in include a common or exemplary representation that can be modules from modules. Generally a set of standard attributes can be determined that are common to all modules. Similarly for other types of modules described below additional standard attributes can be defined. An example of a property available on modules includes attributes such as Fault and Status at . Active resource modules e.g. equipment and personnel can support additional properties such as available unavailable.

Attributes presented below are represented associations from the module to objects which may be internal in a common data model See. or elsewhere e.g. CAD Files . At standard public interfaces can be provided. These interfaces publish verbs that are available to external systems and are documented activities that hide the complexity of the underlying code used to implement the interface. Interfaces can be considered into at least two common usage scenarios. For example interfaces can be used as access points that can be used to hook in real time diagnostics security and so forth.

Public verbs initiate an action within the module. The activity is described to clients of the interface . The implementation is considered private and is not presented to clients for example Open Stop Abort Shut and so forth. A data value property provides public access to information that is used by the module during its operation and can be provided by request values and or internal values or an equivalent . The association of logic to transfer request values to internal values and vice versa are referred to as get and set logic for the value. It is noted that in a controller if there is not a set routine to transfer request values to internal values the internal value can overwrite the request value on the next scan providing read only capability.

In general the properties can be considered in at least two classifications. States have special significance for production systems and can have a specific set of values that can be represented by range or enumeration. A state can represent the current status of the primary resource being encapsulated by the module e.g. Percent open Mode Service in out and so forth. Information that is used by the module during its operation includes access to data that is provided by interfaces . e.g. Conversion Map Name Description expiry date personnel contact information. Some properties can be common to all instances of resource modules e.g. scanned copy of resource specification documents whereas other properties are specific to each module instance e.g. Status percent open .

At internal resource interfaces include interfaces from logic in the module to the resource being managed at where the logic includes code and or configuration that processes a command and or updates state and data properties. In some cases this can be hardware such as I O interfaces or in other cases it is to subordinate resource control modules that have direct interfaces. Some examples include I O mapping material management logic routines and so forth. These interfaces are internal to the module enabling the module s public interfaces and properties to be the boundary to other system components. Modules that wrap different resources but support the same public properties interfaces can be exchanged without disrupting interfaces to other components. Generally I O mapping and system messaging interfaces are exposed during deployment bind processes. When bound external interfaces to runtime systems may then consider these interfaces as internal.

At alarm and event messages can be provided which include messages that exposed as runtime messages visible to external systems during the execution of the module. This includes alarms and events explicitly coded by the developer and system messages promoted to be visible by external systems. At one or more artifacts include information that document the operation and structure of the resource such as for example wiring diagrams warranties payroll parts supplier information and so forth. Visualization aspects include associated graphics that present the resource state and properties to applications interacting with the resource. For example faceplates icons state overlays edit dialogs help files. At system messages allow modules to listen for and publish data model messages to external components. Inbound messages are typically used to manage modules configure initialize propagate properties and so forth and publish messages on module activity resource state data model messages and so forth .

A second hierarchy can be utilized that represents each of the aforementioned hierarchical representations. The hierarchy can include representations of an enterprise a site an area a work center a work unit an equipment module and a control module. Thus a common representation can be generated that adequately represents the hierarchy . For purposes of consistent terminology data objects can be associated with metadata indicating which type of process they are associated with. Therefore data objects can be provided to an operator in a form that is consistent with normal usage within such process. For example batch operators can utilize different terminology than a continuous process operator as shown by the hierarchy . Metadata can be employed to enable display of such data in accordance with known conventional usage of such data. Thus implementation of a schema in accordance with the hierarchy will be seamless to operators. Furthermore in another example only a portion of such representation can be utilized in a schema that is utilized by a controller. For instance it may be desirable to house equipment modules and control modules within a controller. In another example it may be desirable to include data objects representative of work centers and work units within a controller but not equipment modules or control modules . The claimed subject matter is intended to encompass all such deviations of utilizing the hierarchy or similar hierarchy within a controller.

Referring to example hierarchies that can be utilized to represent procedures and equipment are illustrated. In particular a hierarchy represents procedures that can exist within a batch process. For instance a procedure can relate to a high level procedure such as creation of a pharmaceutical drug. A unit procedure can be more specific such as adding particular chemicals to a mix by way of a particular unit. A unit operation can be still more specific and a phase can be yet more specific relating to operation of low level machines . For instance a phase can relate to various states which can exist with respect to low level equipment such as stopping starting pausing a motor opening and closing a valve and the like. A hierarchy relating to a representation of equipment in for example a batch process is displayed adjacent to the hierarchy .

Turning to a hierarchy that represents one possible integration of the example hierarchies and . A unit such as a work unit described in can be associated with an equipment procedure an equipment unit procedure an equipment operation and an equipment phase . Thus the procedures operation and phase can be associated with a particular work unit. An equipment module can be associated with one or more equipment phases and can be above a control module in the hierarchy. Referring Briefly to a hierarchy that can be utilized in connection with equipment control is illustrated. The hierarchy is substantially similar to that described within the unit portion of the equipment unit. As stated above the hierarchies illustrated in can be based upon a standard such as ISA ISA or other standard. Any suitable representation that can be utilized to model an entirety of a plant however is contemplated. Further the representations shown in these figures can be directly implemented into a controller. For instance data objects in accordance with any portion of the hierarchies described in can be existent within a controller together with state machines that enable creation of such objects.

It is noted that the above modules can be processed on various types of computing devices and resources where some of these devices may be associated with an industrial control component and other devices associated with standalone or networked computing devices. Thus computers can be provided to execute the above modules or associated data that include a processing unit a system memory and a system bus for example. The system bus couples system components including but not limited to the system memory to the processing unit that can be any of various available processors. Dual microprocessors and other multiprocessor architectures also can be employed as the processing unit.

It is to be appreciated that software components can be provided that act as an intermediary between users and the basic computer resources described in suitable operating environment. Such software includes an operating system which can be stored on disk storage acts to control and allocate resources of the computer system. System applications take advantage of the management of resources by operating system through program modules and program data stored either in system memory or on disk storage. It is to be appreciated that the claimed subject matter can be implemented with various operating systems or combinations of operating systems or shared with control systems.

Computers or controllers can operate in a networked environment using logical connections to one or more remote computers. The remote computer s can be a personal computer a server a router a network PC a workstation a microprocessor based appliance a peer device or other common network node and the like and typically includes many or all of the elements described relative to computer. Remote computers can be logically connected through a network interface and then physically connected via communication connection. Network interfaces encompass communication networks such as local area networks LAN and wide area networks WAN . LAN technologies include Fiber Distributed Data Interface FDDI Copper Distributed Data Interface CDDI Ethernet IEEE 1102.3 Token Ring IEEE 1102.5 and the like. WAN technologies include but are not limited to point to point links circuit switching networks like Integrated Services Digital Networks ISDN and variations thereon packet switching networks and Digital Subscriber Lines DSL and wireless networks.

The systems described above employing the authentication protocols can include one or more client s . The client s can be hardware and or software e.g. threads processes computing control devices . The systems can also include one or more server s . The server s can also be hardware and or software e.g. threads processes computing control devices . The servers can house threads to perform transformations by employing the authentication protocol for example. One possible communication between a client and a server may be in the form of a data packet adapted to be transmitted between two or more computer processes.

What has been described above includes various exemplary aspects. It is of course not possible to describe every conceivable combination of components or methodologies for purposes of describing these aspects but one of ordinary skill in the art may recognize that many further combinations and permutations are possible. Accordingly the aspects described herein are intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims. Furthermore to the extent that the term includes is used in either the detailed description or the claims such term is intended to be inclusive in a manner similar to the term comprising as comprising is interpreted when employed as a transitional word in a claim.

