---

title: Dynamic updating of firewall parameters
abstract: The dynamic updating of firewall parameters is described. One exemplary embodiment includes receiving a policy rule that includes a reference to a predefined container that specifies a permissible value range of at least one firewall parameter allowable under the policy rule, receiving a firewall parameter value, and populating the predefined container with the firewall parameter value if the firewall parameter value is within the permissible value range, thereby updating the policy rule.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08099774&OS=08099774&RS=08099774
owner: Microsoft Corporation
number: 08099774
owner_city: Redmond
owner_country: US
publication_date: 20061030
---
A firewall may be generally defined as a hardware or software filter that prevents data packets from either entering or leaving a network unless specifically authorized. To control the flow of network traffic data packets sent from or received at numbered ports in the firewall are either permitted or denied depending upon policy rules that are applied by the firewall. Such rules are generally set by an administrative entity such as a system administrator and are used to implement a firewall policy. These rules specify when traffic may pass through the firewall based upon various firewall filtering parameters firewall parameters such as allowed port numbers network addresses and the like.

However the attack surface of a firewall or the exposure of the firewall to attack by malicious code increases with the number of ports allowed to pass network traffic. Therefore it may be beneficial to reduce a number of ports open at any time to reduce the attack surface of the firewall.

Ports may be opened either statically or dynamically. The static opening of ports is generally performed by an administrative entity prior to runtime and may result in the port remaining open for all traffic until the port is closed manually. This may increase the number of openings in the firewall and therefore may increase the attack surface of the firewall.

On the other hand the dynamic opening of ports may be performed at runtime by an application or service. Thus an inbound port is not opened until requested by the application or service. However such an application or service may utilize administrative level firewall policy rights to allow it to create policy exceptions to open ports for traffic. For example an application or service with dynamic port definition capabilities may create firewall exceptions for every port on which it will pass incoming or outgoing traffic or may create a blanket exception allowing the application or service to pass traffic through any transmission control protocol TCP or user datagram protocol UDP port. Therefore large numbers of firewall exceptions may be created by various applications and services with little visibility to an administrative entity. As a result many more firewall ports may be open at any given time than allowed under the entity s firewall policy.

Accordingly the dynamic updating of firewall parameters in various manners that may offer an administrative entity a high degree of control and visibility of the firewall attack surface is described below in the Detailed Description. For example in one embodiment a dynamically updateable security policy at a firewall may be implemented by utilizing a policy rule that includes a reference to a predefined container. The predefined container specifies a permissible value range of at least one firewall parameter that is allowed to populate the container. The permissible value range may contain one or more permissible values. A program may then populate the predefined container with a permissible firewall parameter value thereby dynamically updating the policy rule. The value with which the container is populated may then be enforced with the policy rule. This may permit an application or service to dynamically update a policy rule without altering firewall policy.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure.

Prior to proceeding with a description of the various disclosed embodiments a description of an exemplary computing device networking environment in which the disclosed embodiments may be implemented or practiced is provided in . It will be appreciated that the embodiments described in detail below may be implemented for example via computer executable instructions or code such as programs stored on a computer readable storage medium and executed by a computing device. Generally programs include routines objects components data structures and the like that perform particular tasks or implement particular abstract data types. The term program as used herein may connote a single program or multiple programs acting in concert and may be used to denote applications services or any other type or class of program. Likewise the terms computer and computing device as used herein include any device that electronically executes one or more programs including but not limited to personal computers servers laptop computers hand held devices cellular phones micro processor based programmable consumer electronics and or appliances routers gateways hubs and other computer networking devices.

Computing devices and other components of first network are protected by a common firewall from remote computing devices located on a second network . One example of a second network is a public network such as the Internet. Alternatively second network may be or include any other suitable network such as a wide area network and or a local area network.

Continuing with each computing device also may include a firewall to control traffic between each computing device and first network . Firewalls on computing devices may be referred to as host firewalls while firewall positioned at the boundary between first network and second network may be referred to as an edge firewall. It will be understood that the various embodiments described below may be implemented on any suitable device including a host firewall or an edge firewall.

As described above some applications and services may be configured to utilize dynamic port allocation to open firewall ports at runtime to avoid the potentially larger attack surface created by static port allocation. However the opening or closing of a port is an operation that is generally performed only with administrative level or policy level rights on some firewalls. Therefore a program that dynamically opens or closes ports may utilize administrative rights to do so. This may result in the program overriding or modifying an administrative entity s firewall policy possibly with little visibility to the administrative entity. As a result many more firewall ports may be open at any given time than allowed under the administrative entity s firewall policy. This may result in the exposure of unwanted attack surface the scope of which may be difficult for an administrative entity to assess. Furthermore providing a program with administrative level rights to open and close ports may pose a risk of malicious code taking over the program and disabling firewall security.

Firewall service also includes a non policy level interface at which an entity such as an application or service denoted generically as program may contact firewall service with requests to dynamically update policy rules as shown in . Such requests may include requests to open or close ports requests to update network resource addresses with which communication is allowed or any other suitable firewall parameter modification. As described in more detail below such requests are made at the non policy level and are granted only if the requested values fall within a range of one or more values preapproved by an administrative entity at rule creation. Program may be any suitable program including but not limited to a Teredo service a remote procedure call RPC service and or a network location awareness NLA service.

Continuing with firewall service further may include from 1 to n keywords . Each keyword is a unique identifier that is associated with a container or collection of one or more data fields that may be populated with one or more firewall parameter values by a program at runtime. Container defines a range of permissible parameter values that may be used to populate the data fields within container . It will be understood that the term range as used herein may signify any suitable list or designation of allowed values. For example a range of allowed values may be limited to only a single value or may include more than one value. Furthermore the values in the range may be sequential non sequential or a mixture of both sequential and non sequential values.

Referring specifically now to the keyword may be referenced by incorporated into or otherwise made part of policy rule . Incorporation of keyword into policy rule results in the contents of container being forwarded to firewall engine for enforcement as part of rule . The association of keyword incorporated into rule and the contents of container is indicated in by the line drawn between rule and keyword .

Policy rule is prepared by administrative entity and received by the firewall service at policy level interface . In some embodiments container initially contains no firewall parameter values. Therefore in these embodiments when policy rule is received no exceptions to firewall policy are initially forwarded to firewall engine for enforcement. Therefore no additional attack surface is exposed by the creation of policy rule . In other embodiments container may contain one or more firewall parameter values as default values or program may populate container with one or more firewall parameter values before the creation of policy rule . In these embodiments the firewall parameter values in container may be forwarded to firewall engine for enforcement upon the receipt of policy rule .

Referring now specifically to program may dynamically update a firewall parameter by sending a message to non policy level interface that resolves the keyword to one or more specific firewall parameter values . Examples of specific firewall parameter values may include but are not limited to specific port numbers and specific network resource addresses. Upon receipt of message at non policy level interface firewall service confirms that program is authorized to update the firewall parameter at issue. This confirmation may be performed in any suitable manner. For example firewall service may include an access control list ACL that specifically authorizes which programs are allowed to populate container .

If firewall service determines that program is not authorized to populate container with the requested firewall parameter value or the requested firewall parameter value is not within the allowed range of values then the request is rejected. On the other hand if it is determined that program is authorized to populate container with the requested firewall parameter value and that the value is within the allowed range of values then the container is populated with the value or the keyword is updated and the value is forwarded to firewall engine for enforcement.

An example of a specific rule schema that contains a keyword XYZKeyword as a port definition for a service XYZService is as follows 

When service XYZService wishes to communicate with a remote device on the far side of the firewall it can dynamically update the XYZKeyword at non policy level interface to resolve the keyword to a specific port number at which to receive traffic from the remote device. Container is then populated with the specific port number and the port number is forwarded to firewall engine for enforcement.

Likewise an example of a rule schema for XYZService that contains keywords DHCP and WINS for dynamically updated network address locations for DHCP and WINS servers is as follows 

When it is determined that a network resource address has changed a dynamic update of the keywords DHCP and WINS may be received at non policy level interface to update the addresses in the containers associated with these keywords. Container is then populated with the specific addresses and firewall service sends the updated addresses to firewall engine for implementation in the appropriate rules.

Firewall service may include any suitable number of keywords and associated containers . For example in some embodiments each different program that utilizes dynamically updated firewall settings may have its own keyword and associated container. As discussed above firewall service includes n keywords where n is any positive integer. In this manner n different programs may each be configured to update an associated keyword. Likewise each dynamically updateable network resource address may include its own keyword. In alternative embodiments two or more programs or updateable network resource addresses may share a single keyword and container. Furthermore each container may have different limitations than other containers depending upon the functions of the program or programs authorized to populate the container. In this manner an administrative entity or other policy level entity such as a firewall software or hardware developer can control the limits of the abilities of programs to dynamically update firewall parameters.

Program may utilize any suitable mechanism for contacting non policy interface with a keyword update. For example program may utilize a service implementing a protocol such as RPC or hypertext transfer protocol HTTP etc. Alternatively program may query a metabase or utilize a registry notification. It will be appreciated that access control list may be used to verify that program is authorized to update the requested keyword with any of these mechanisms before firewall service performs the keyword update.

Keywords and containers may be implemented in firewall service in any suitable manner. For example in some embodiments keywords containers and the limits defining permissible values for populating containers may be hard coded into firewall service . In other embodiments firewall service may provide for the ability of administrative entities to create new keywords and containers and to define the permissible contents of associated containers. These embodiments may allow firewall to be easily configured for new programs that employ the dynamic updating of firewall parameters.

Using the above described features firewall may permit programs to dynamically update firewall parameters without using policy level rights. Instead a program requesting to populate container with a firewall parameter value interfaces with firewall at non policy level interface . Furthermore the values with which the program can populate the container are limited to those that an administrative level entity has previously approved. Therefore the risk of attack by malicious code on a program that has the ability to dynamically open and close ports is lessened. This is because the program cannot be used to open any ports other than those explicitly permitted by the keyword container used by the rule.

Firewall also provides a two level security system for dynamically requested firewall parameter value updates. First an administrative entity defines the identity and scope of those firewall parameters that a specific program is allowed to update dynamically. This process generally occurs prior to program runtime but may occur at any other suitable time. Next when a program requests to dynamically update a firewall parameter value firewall service verifies that the program is permitted to perform the dynamic update and that the requested value is within the permissible range of values before forwarding the value to firewall engine for enforcement. This process generally occurs at program runtime but may occur at any other suitable time. In this manner firewall acts as two locks opened by two keys at potentially two separate times one operated by the administrative entity at a policy level interface at rule creation and one operated by a program at a non policy level interface at runtime.

Further firewall may offer improved visibility over which ports are open at any given time. First because a firewall parameter cannot be dynamically changed to a value outside of those values that are authorized to populate containers an administrative entity can ensure that the maximum attack surface is no greater than that allowed by containers . Furthermore an administrative user interface may be configured to display the contents of containers . Therefore an administrative entity can verify the status of the ports e.g. which ports are opened or closed etc. at any desired time. Additionally firewall may offer an improved administrative user experience as fewer total exceptions are generally managed during runtime.

In addition to simplifying the dynamic opening of ports firewall also offers a simple mechanism for dynamically closing ports once a program no longer needs to receive data at a port. Upon conclusion of data receipt the program can send another message to non policy level interface that resolves the keyword to a value that signifies a port closure. Upon receipt of this request and verification that the program has the right to update the keyword firewall service may populate the container with the value signifying port closure. The firewall service will then remove the filters from the firewall engine that are associated with the port that was removed from the container thereby closing the port. In this manner the attack surface at runtime may be reduced as only a minimum number of ports needed for communication are open at any time.

Continuing with the figures shows a schematic depiction of an exemplary embodiment of a data structure for container . Data structure includes a first array having n fields for containing port numbers requested to be opened by an authorized program. Data structure also includes a second array also having n fields for maintaining a count of port openings and closings requested for each port number in array . While the depicted container includes first and second arrays and it will be understood that a container may have any suitable data structure and may be configured to contain any suitable data.

Next shows the receipt of requests to close port Y and open port X. Upon receipt of requests and verification that the requesting program has the authority to perform the requested actions the count in array of the number of openings requested is increased by one for port X and decreased by one for port Y. Further because this decreased the count of the openings of port Y to zero the entry in array for port Y is removed from array signifying that port Y is no longer open. Likewise the entry for port X in array is increased to 2. Thus two requests to close port X will be received before port X is closed unless an administrative entity closes the port manually.

Various methods may be used to implement the various features of the embodiments described above. shows a flow diagram of one exemplary embodiment of a method of dynamically updating a security rule in firewall . Method includes at receiving from an administrative entity a policy rule containing a keyword that references a predefined container. As described above in the context of the keyword and container define a range of firewall parameter values that can be used to populate the container and also may define those applications that are authorized to populate the container. The range of values may be limited to a single value or may include more than one value.

The keyword and container may be defined at any suitable time prior to receiving the policy rule from the administrative entity. In some embodiments the keyword and container may be hard coded into a firewall service program and therefore defined during software hardware development. In other embodiments the keyword and container may be created by an administrative entity at a later time but prior to creation of the policy rule. In yet other embodiments the keyword and container may be defined during the creation of a policy rule utilizing the keyword and container. It will be appreciated that in any of these embodiments the keyword and container are defined prior to the receipt of the policy rule at the policy level interface and therefore that the keyword and container may be considered to be predefined relative to the receipt of the policy rule.

Continuing with method next includes at receiving at a non policy level interface a message resolving the keyword to a firewall parameter value. The non policy level interface may include an application programming interface API configured to receive messages from other programs such as applications or services and or may include a user interface program configured to allow an authorized user of a lower or arbitrary privilege level to populate the container with a firewall parameter value. The message received at the non policy level interface may be received at program runtime or at any other suitable time. Examples of other suitable times may include during program setup or installation or after program setup but before runtime. Additionally the message received at the non policy level interface may be received either before or after the policy rule is received at the policy interface.

Further the message received at may resolve the keyword to any suitable firewall parameter. For example the keyword may be resolved to a port number requesting that the port be opened or closed or may be resolved to an empty set thereby requesting that the contents of the container be cleared. Furthermore in some embodiments the keyword may be resolved to a network address as described below in more detail with reference to .

Continuing with upon receipt of the message resolving the keyword to a firewall parameter value method next includes determining whether to populate the container with the firewall parameter value. This process includes determining at the identify of a program user or other entity that sent the message resolving the keyword to a firewall parameter value and then confirming at whether the program that sent the message resolving the keyword to the firewall parameter value is authorized to update the keyword. This process may include comparing the identification of the entity to an ACL defining which entities are permitted to update a specific keyword.

If it is determined that the program is not authorized to update the keyword then the container is not populated with the value as shown at . On the other hand if the program is authorized to update the keyword then it is determined at whether the firewall parameter value is within the range of firewall parameter values allowed for populating the container. If it is determined that the firewall parameter value is not within the permissible firewall parameter value range then the container is not populated with the firewall parameter value as shown at . On the other hand if it is determined that the firewall parameter value is within the permissible range then the container is populated with the firewall parameter value as shown at . Finally the updated policy rule is enforced at .

Method allows a policy rule to be dynamically updated by an entity with non administrative or arbitrary rights without changing any rules or violating policies created and implemented by an administrative entity. Furthermore an administrative user interface may be configured to display the current contents of each container as well as information such as an identity of the program or programs that populated the containers. This may provide an administrative entity with a high degree of visibility of the filters in use by the firewall at any time.

As mentioned above various firewall parameters other than port numbers may be updated dynamically in a similar manner. For example addresses of various network resources may change over time. Examples of such network resources include domain name servers DHCP dynamic host configuration protocol servers default gateways local subnet WINS WINDOWS internet naming service servers etc.

In many firewalls static rules are used to implement such addresses in filters. As a result if a network resource address changes a rule utilizing the prior address as a filter may be invalid until an administrative entity modifies the rule to include the new address. To overcome such problems a keyword may be defined for a network resource address updating program and an associated container may be configured to contain one or more network resource addresses. This allows an administrative entity to create a policy rule that contains the keyword and thereby implements the firewall parameter values populating the container.

In this manner a network resource address updating program may be configured to update the network address by sending a message resolving the keyword to an updated network address. shows an exemplary embodiment of a method for dynamically updating a network address. Method first includes at receiving a policy rule with a keyword that references a predefined container configured to be populated with one or more network resource addresses. The policy rule may be received from an administrative user an administrative level management console or any other suitable administrative entity.

Next method includes sending at a request to resolve the keyword to one or more network resource addresses. This may be performed at firewall service startup or at any other suitable time. Likewise this request may be sent to a NLA service or to any other suitable service that can return an address of a network resource. Furthermore this request may also include a request to register with the NLA service for notifications of changes in the address of one or more network resources.

After sending the request to resolve the keyword to the network resource address a message resolving the keyword to the network resource address is received from the NLA service at a non policy level interface at . Then the container is populated with the network resource address at and the policy rule with the firewall parameter value in the container is enforced at .

In some embodiments before populating the container with the network resource address the identification of the service sending the message may be confirmed to ensure that the message is received from an authorized program. In alternative embodiments because this message is received in response to a specific request such a confirmation may be omitted.

Continuing with when the NLA service detects a change in a network resource address a notification of the address change is sent by the NLA service and received at at the non policy level interface. Upon receipt of the notification a request is sent at to the NLA service to again resolve the keyword to one or more network resource addresses that populate the container. The request may request only the changed network address to be resolved to the keyword or may request that the keyword be resolved to all network resource addresses stored in the container where the container is populated by more than one network address.

Next at a message resolving the keyword to the updated network resource address is received at the non policy level interface. The updated network resource address is then used to populate the container and the policy rule with an exception defined by the updated network resource address stored in the container is enforced at . In this manner network resource addresses may be updated dynamically with no input from an administrative entity after rule creation. Furthermore the updating of a network resource address via method may expose no additional attack surface to malicious code as the update may be performed without the utilization of administrative rights and without changing firewall policy.

The dynamic updating of network resource address rules according to method may allow an administrative entity that authors a rule to specify a restrictive intent for common resources without having to manually look up the resource address when creating the rule. Likewise application developers may create firewall rules for common resources without knowing the resource addresses Additionally method provides for the authoring of rules when the addresses of resources may change dynamically without having to specify looser restrictions and thereby exposing additional attack surface.

As long as the program that sent the message at to the firewall is authorized to update the requested keyword with the requested firewall parameter value the value is implemented as an updated rule by the firewall and the program or another program on the same computing device may then communicate with a remote device on the far side of the firewall according to the updated policy rule. Such communication may involve sending at a request to the remote network device for a return of data at a port specified by the updated policy rule. As another example such a request may involve sending a request to a domain name server at an updated address or sending other such messages to network resources at updated addresses. The requested return from the remote network device may then be received at by the requesting program due to the exception created by the implementation of the firewall parameter value in the updated policy rule. In this manner the program is able to dynamically configure the firewall to meet the current communication needs of the program without modifying firewall policy and without invoking administrative rights to perform the dynamic configuration.

It will be appreciated that the configurations and or approaches described herein are exemplary in nature and that these specific embodiments or examples are not to be considered in a limiting sense because numerous variations are possible. For example while the above embodiments are described in the context of dynamically updating port definitions and network resource addresses it will be appreciated that the concepts may be applied in a similar manner to any other suitable firewall filtering parameter. Furthermore the specific routines or methods described herein may represent one or more of any number of processing strategies such as event driven interrupt driven multi tasking multi threading and the like. As such various acts illustrated may be performed in the sequence illustrated in parallel or in some cases omitted. Likewise the order of any of the above described processes is not necessarily required to achieve the features and or results of the exemplary embodiments described herein but is provided for ease of illustration and description.

The subject matter of the present disclosure includes all novel and nonobvious combinations and subcombinations of the various processes systems and configurations and other features functions acts and or properties disclosed herein as well as any and all equivalents thereof.

