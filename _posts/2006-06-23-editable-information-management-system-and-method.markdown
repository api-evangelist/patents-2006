---

title: Editable information management system and method
abstract: An editable information management method for managing editable information. The method comprises storing a document as a plurality of segment objects, each segment object being editable independently of other segment objects. The method comprises combining said segment objects to create said document, displaying said document for editing, editing part of the displayed document corresponding to a predetermined segment object, and updating said predetermined segment object in response to said editing.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07818663&OS=07818663&RS=07818663
owner: Onedoc Limited
number: 07818663
owner_city: Surrey
owner_country: GB
publication_date: 20060623
---
The present application is a continuation in part patent application of co pending International Application No. PCT GB2004 004444 filed on Oct. 20 2004 which claims priority to British Patent Application No. 0329824.7 filed on Dec. 23 2003 the entire contents of which are both herein incorporated by reference.

The use of personal computers has revolutionised the manner in which documents are created and managed. It is now relatively easy for an individual having a PC to create and print documents which look professional and are well presented. Typically such documents are created in a word processor such as Microsoft Word and then printed using for example a laser printer. Using such a word processor a user can input text using a keyboard and format inputted text by using different fonts type sizes and type styles. Images and other suitable data can also typically be inserted into documents created in this way.

Some documents require calculations to be performed on inputted data and in such cases it may be easier to use a spreadsheet such as Microsoft Excel for input of data and execution of the necessary calculations. Again using such spreadsheets documents can be printed in a professional manner using for example a laser printer.

Currently available software provides stand alone users with powerful document creation applications such as those described above. However such software is limited where there is a requirement for a plurality of users to collaborate in creating a single document. In such circumstances it is common for a first user to create and edit a document and email the document to a second user who adds further data. Such a solution is clearly disadvantageous given that the first and second users can not concurrently work on the document.

If a document is to be worked on by a plurality of users connected to a computer network known software products allow a first user to access the requested file and inform any subsequent user attempting to access the file of the first user s access. The subsequent user is then typically given an option to open a read only copy of the file given that the first user has a read write copy of the file or alternatively to wait until the first user has finished editing the document. Again such functionality does not allow a plurality of users to access a single document concurrently.

U.S. Pat. No. 5 181 162 Eastman Kodak Company discloses an object oriented document management system in which a document such as newspaper is created as a plurality of logical objects which can be edited independently of one another and a plurality of layout objects which can be edited independently of one another. When the document is to be produced the logical objects and layout objects are combined to produce a finished document. Such a system is convenient for the creation of newspapers as individual stories can be created by individual journalists as individual logical objects which can then be combined to create the finished document. However the system proposed by U.S. Pat. No. 5 181 162 does not allow a plurality of users to view a single complete document concurrently and can not be used with commonly used software packages such as those described above.

It is an object of the present invention to obviate or mitigate one or more of the problems outlined above.

According to a first aspect of the present invention there is provided a method and system for managing editable information. Such editable information may take many forms including for example text based documents editable by a word processor such as Microsoft Word spreadsheets editable using for example Microsoft Excel presentations editable using software such as Microsoft PowerPoint drawings editable using drawing packages such as Microsoft Visio and any other editable information. The term document is used herein to refer to any such editable information in any form.

The invention provides a document management method comprising storing a document as a plurality of segment objects each segment object being editable independently of other segment objects combining said segment objects to create said document displaying said document for editing receiving edit instructions to edit part of the displayed document corresponding to a predetermined segment object and updating said predetermined segment object in response to said editing.

The present invention therefore allows a plurality of users to view a document concurrently with different users being allowed to edit different segment objects.

In some embodiments a plurality of users access a single document each user editing different segment objects. An update made by a first user to a first segment object may be communicated to a second user by means of an audio or visual alert at predetermined time intervals thereby ensuring that both first and second users both have access to reasonably up to date information. In some embodiments of the invention only a single user can have a read write copy of a segment object at a particular time. Other users can however access a read only copy of that segment object and be alerted of updates in the manner outlined above. However in some embodiments of the invention a first user can be granted read write access to a segment object while a second user is provided with a copy of that segment object also with read write access. Changes made to the copy of the segment object by the second user can later be merged with the changes made by the first user.

The method preferably comprises displaying markers identifying boundaries between segment objects within said displayed document. For example where the document is a word document these markers may take the form of Microsoft Word comments including data pertinent to each segment object. At least one segment object within said displayed document may be locked to prevent editing. The or each locked segment object is preferably marked in said displayed document.

The document may be stored as a master object and a plurality of segment objects and said combining may combine the master object and the plurality of segment objects in a manner specified by said master object to create said displayed document. The master object comprises document data such as for example text or image data. Said master object may comprises data indicating positional information relating to said plurality of segment objects and said method may parse said master object to insert said segment objects into said master object to create said displayed document. Said master object may comprise a plurality of pointers each pointer indicating a sub document file.

Data relating to said master object and said plurality of segment objects may be stored in a database. The database may take any suitable form such as a relational database an XML data store or file system storage. A plurality of different versions of the master object may be stored in a master object versions database table. The database may additionally comprise an objects database table having a single record for said master object identifying a latest version of said master object. The method may comprise storing data relating to a plurality of different versions of each segment object in a segments database table. The database may comprise a links table storing relationships between said master object and said plurality of segment objects. Said links table may comprise a record for each segment object related to said master object.

The method may further comprise selecting at least one further segment object for inclusion in said displayed document and including said further segment object in said displayed document. A record may be added to said links table representing said further segment object. The method allows multiple occurrences of a segment object to be included within the same master document. This is useful if a particular image occurs a plurality of times within a document and allows only a single copy of that image to be stored with updates to the image being reflected in all inclusions of the image within the document. 

Said database may comprise a plurality of master objects each relating to a respective document. At least one of said segment objects may be associated with a plurality of master objects.

Said displayed file is displayed using an application program such as a word processor e.g. Microsoft Word or a spreadsheet e.g. Microsoft Excel .Said application program may comprise an add in configured to combine said segment objects. Said add in may communicate with a broker application configured to retrieve document data from a database. Said application program and said broker application may be run on a workstation said database may be run on a server remote from said workstation and communication between said broker application and said database is carried out over a computer network. The computer network may be the Internet or alternatively the computer network may be a Local Area Network LAN or another Wide Area Network WAN .

Said broker application and said application program may be run under an operating system comprising a registry and when data is to be transmitted from the broker application and the application program the broker application may place data in the registry and the application program may retrieve said data from the registry. Similarly when data is to be transmitted from the application program to the broker application the application program may place data in the registry and the broker application may retrieve said data from the registry. Alternatively the broker and add in may communicate via for example a shared file stored in a predetermined location.

The broker application may communicate with said add in using the Transmission Control Protocol TCP .

The application program may be run on a workstation the broker application and the database may be run on a server remote from said workstation and communication between said add in and said broker application may carried out over a computer network e.g. a LAN or a WAN such as the Internet . Said broker application and said add in may suitably communicate using the TCP protocol. A plurality of workstations may be configured to communicate with said database thereby allowing a plurality of users to access common document data.

A further aspect of the invention provides a method for transmitting data from a first application process to a second application process said first and second application processes running under an operating system comprising a registry wherein 

Use of the registry in this way offers a number of benefits for example the registry can store data which can be used for application recovery in case of a crash. Use of the registry also provides a convenient synchronisation mechanism preventing possible dead lock situations.

The method may comprise establishing within said registry a plurality of registry keys for communication of data. Said plurality of registry keys may include a user input registry key for storing details of user input to the first application. Said user input may comprise a selection from a menu.

Said registry keys may include a plurality of transaction registry keys each configured to store data related to predetermined transaction and the method may comprise storing data in a transaction registry key determined by user input to the first application. Said second application may interrogate said user input registry key to determine a transaction registry key in which said data can be found.

Said first application may be configured to edit at least one document. Said registry keys may include a document registry key configured to store details of one or more documents currently being edited by said first application. Said document registry key may stores details of a file name where a document is stored. Said second application may retrieve said filename from said document registry key to obtain said document.

In some aspects the invention provides a document management method comprising processing an input file representing a document to create a plurality of segment objects each segment object being editable independently of other segment objects editing at least one segment object to create an edited segment object and combining said segment objects to create an amended document including said edited segment object.

Said processing may create a master object each segment object may be associated with the master object and said combining may combine the master object and the plurality of segment objects in a manner specified by said master object to create said output file. Said master object may comprise data indicating positional information relating to said plurality of segment objects and said method may parse said master object to insert said segment objects into said master object to create said displayed document. Said master object may comprise a plurality of pointers each pointer indicating a where a segment object should be inserted. It will be appreciated that in some embodiments of the invention content included in the master document may be overwritten by content taken from a segment object.

A plurality of input files may be processed a master object may be created for each input file and each segment object may be associated with at least one master object. At last one segment object may be associated with a plurality of master objects. The master objects and the segment objects may be stored in a database.

The method may comprise creating an output file representing said amended document. Said input file and said output file are preferably in a common file format for example both files may be Microsoft Word files or Microsoft Excel files or alternatively files created using any other suitable application such as for example Star Office. Segment objects may be represented using Microsoft Word Sub documents

The invention also provides a method for controlling document creation in an application providing a macro language comprising analysing data indicative of user input to the application creating a macro in response to said analysis and predefined criteria and providing said macro to said application to affect document creation.

Said application may comprise an add in configured to monitor user input to the application. Data indicative of user input may be transmitted to a remote server by the add in said remote server being configured to create said macro. The computer network may be a WAN such as the Internet or alternatively a LAN. Data may be transmitted using the TCP protocol. Said macro may impose predetermined style constraints on a document to be created and or may lock part of said document to prevent user editing.

The methods defined above may be carried out using a suitably programmed computer. The invention further provides a data carrier carrying computer program code means to cause a computer to carry out a method as defined above.

Referring to there is illustrated a network of computers. Three workstations are connected to a server via the Internet . The server is connected to a non volatile storage device such as a hard disk drive which stores document data in a database . The workstations are able to access the database stored on the hard disk drive by appropriate communication with the server via the Internet . Although the embodiment of shows connection via the Internet it will be appreciated that communication via other computer networks such as a local area network or an Intranet is also possible.

In use program code is read from the program memory by the processor for execution. It should be noted that during execution both the spreadsheet and the word processor will access data stored in the data memory . Furthermore both applications will also access data stored on the hard disk drive which includes a cache for storing cache data the purpose of which is described in further detail below.

In accordance with the present invention document data is stored in the database connected to the server . In use a user uses an application such as the word processor and requests an appropriate document. This request is passed to the add in which communicates the request to the broker . Communication between the add in and the broker can conveniently be achieved using the registry as described in further detail below. The broker requests appropriate document data from the database this data is supplied to the broker and copied to the cache on the hard disk drive . The add in is then able to access appropriate document data from the cache in the manner described below.

In accordance with the present invention the document is represented as a single master object a first segment object a second segment object and a third segment object . The first segment object represents the first paragraph of text the second segment object represents the fourth paragraph of text and the third segment object represents the second image . Other components of the document are all represented by the master object . That is the heading the second paragraph of text the first image and the third paragraph of text are all represented by the master object . A set of links is maintained which indicates how the master object and the segment objects are combined to create the document . For example the set of links will provide details of where within the master object the segment objects should be positioned.

Each segment object may be edited independently of other segment objects and independently of the master object such that different segment objects may be edited by different users concurrently thereby allowing a plurality of users to edit different parts of the document concurrently each user being able to view the complete document. For example a first user may edit the first paragraph of text while a second user may edit the fourth paragraph of text concurrently.

As described above document data is stored in the database . This database is a relational database which uses the structured query language SQL and data is stored in tables illustrated in . The stored data is now described.

A master object is represented by a record in a MandorlaObject table which is illustrated in . The MandorlaObject table comprises an ObjectID field which stores a unique identifier for each object. The ObjectID field is the table s primary key. There will be one entry in this table for each master object represented by data in the database. The MandorlaObject table also comprises an ObjectName field which stores a textual description of each master object and an ObjectNotes field which contains notes related to each master object. Both these fields are populated by data input by a user. The MandorlaObject table also comprises an ObjectOwnerID field which contains an identifier for the owner of each master object by reference to a table containing user details which is described below . A plurality of different versions of a single master object can be stored with data in the ObjectVersionID field indicating the current version of each object by reference to an appropriate table described below.

Referring to a MandorlaObjectVersion table is illustrated. It can be seen that this table comprises an ObjectID field and an ObjectVersionID field which together form the primary key of the MandorlaObjectVersion table . There will be one entry in the MandorlaObjectVersion table for each version of each master object represented by data in the database . A VersionChangeNotes field contains textual data input by a user for each master object version. A DateTimeStamp field contains time and date data indicating the date on which each master object version was created. A UserLockedToID field is used to store data for each object indicating a user if any by whom each master object version is currently locked. A LastUpdate field stores time and date data indicating the time and date on which each master object version was last updated. An ObjectOwnerID field identifies the owner of each master object version by reference to entries in the table containing user details described below. A CheckInNotes field contains textual information input by a user when each master object version was added to the database and a CheckOutNotes field contains textual information input by a user when each master object version is removed from the database for editing. A LockStatus field indicates whether or not each master object version is currently locked. A UserIDAssignedTo field comprises a list of UserIDs for each master object version indicating which user s can access each master object version. Again entries in this field link to entries in the table containing user details described below. A SequenceCount field for each object version is incremented each time each master object version is saved and this field is used for audit purposes. An ObjectVersionNo field indicates a version number for each master object version e.g. a textual version identifier . An ObjectStatus field indicates the status of each object version. Possible statuses include locked published and suspended. These are described in further detail below.

The MandorlaObject table and the MandorlaObjectVersion table contain administrative data relating to master objects and different versions of master objects. The data of each master object e.g. the text or image data is stored as an entry in a MandorlaObjectBlob table which is illustrated in .

The MandorlaObjectBlob table has a primary key made up of an ObjectIDField and an ObjectVersionID field that is the MandorlaObjectBlob table has the same primary key as the MandorlaObjectVersion table . The MandorlaObjectBlob table also comprises an ObjectImage field which is used to store data which makes up each master object version and a LastUpdate field which stores time and data indicating when the blob data was last updated.

In some embodiments of the invention instead of storing data in the ObjectImage field described above the MandorlaObjectBlob table contains pointers to files containing the appropriate data. Such pointers can be stored in ObjectLocalFileName and ObjectContainerFileName fields in the MandorlaObjectBlob table .

It has been explained above that the ObjectOwnerID field of the MandorlaObject table and the UserIDLockedTo ObjectOwnerID and UserIDAssignedTo fields of the MandorlaObjectVersion table reference a table containing user details. A MandorlaUser table containing such details is now described. This table has a UserLoginID field as its primary key. The table also comprises a UserID field which stores a unique identifier for each user of the system. It is this field which is referenced by fields of the MandorlaObject and MandorlaObjectVersion tables described above. The MandorlaUser table additionally includes UserName and Password fields which contain log on information for each user an email field containing an email address for each user and a UserPrivilegeLevel field which contains data indicating each user s access privileges.

From the preceding description it can be seen that the MandorlaObjectTable the MandorlaObjectVersion table and the MandoralObjectBlob table together contain all data necessary to represent master objects stored within the database . Segment objects are referred to as shared objects within the database and are represented by a MandorlaSharedObject table and the MandorlaSharedObjectBlob table . Details of these tables are now described.

Referring first to the MandorlaSharedObject table is illustrated. This table comprises a SharedObjectID field which provides a unique identifier for each segment object stored in the database and a SharedObjectVersionID field which provides a version identifier for each record. These two fields together make up the MandorlaSharedObject table s primary key. It can be seen that using these two fields a plurality of different versions of a segment object can be stored in the MandorlaSharedObject table. Each version of a particular segment object will have a common SharedObjectID value but a different SharedObjectVersionID value.

The MandorlaSharedObject table additionally includes a SharedObjectDesc field which is used to store a textual description of the shared object input by a user and a SharedObjectName filed which includes a textual name for each segment object as input by a user. The data stored in these fields is common to all versions of a particular segment object. The MandorlaSharedObject table additionally comprises LastUpdate UserIDAssignedTo CheckOutNotes and CheckInNotes fields all of which contain data relating to segment object versions corresponding to the data relating to master object versions stored in similarly named fields of the MandorlaObjectVersion table . The MandorlaSharedObject table also comprises a SharedObjectOwnerID field which contains a UserID for the owner of each segment object version which can be used to obtain user details from the MandorlaUser table described above. VersionName and VersionNotes fields again contain textual information input by a user relating to each segment object version. A UserIDLocked to contains a UserID if any for a user by whom each segment object is currently locked and this field again references the MandorlaUser table . A SharedObjectVersionNo field indicates the version number of each record in the table. A LockStatus field indicates whether or not each segment object version is currently locked.

In some circumstances it will be necessary to store multiple copies of a single segment object version. A SharedObjectType field contains data indicating whether or not each record relates to an original segment object version or a copy of a shared object version for. If a segment object has a plurality of copies each record shows details of users having copies in a CopySharedObjectUserID field which contains a list of UserIDs for each segment object version indicating which users have copies of that segment object version. A SharedObjectStatus field indicates the status of each segment object version and this field can be used to indicate whether or not each object version has a plurality of copies which need to be merged.

The MandorlaSharedObjectBlob table has a SharedObjectID field and a SharedObjectVersionID field as its primary key. That is the MandorlaSharedObjectBlob table and the MandorlaSharedObject table have a common primary key providing a one to one mapping between records in these tables. The MandorlaSharedObjectBlob table contains the data e.g. text or image data of each segment object version. This data is stored in a SharedObjectImage field. In alternative embodiments of the present invention the data may be stored in files instead of within the MandorlaSharedObjectBlob table and in such embodiments a SharedObjectLocalFileName field provides pointers to appropriate files.

As described above with reference to means are required to associate each segment object version represented by a record in the MandorlaSharedObject table with one or more master object versions represented by records in the MandorlaObjectVersion table . This is achieved using a MandorlaLinkedObjects table which is illustrated in .

The MandorlaLinkedObjects table contains one entry for each link between a segment object and a master object and has an ObjectLinkID field as its primary key. The table includes ObjectID and ObjectVersionID fields which can together be used to reference a unique record in the MandorlaObjectVersion table . The table also includes SharedObjectID and SharedObjectVersionID fields which can together be used to reference a unique record in the MandorlaSharedObject table . Thus these four fields establish a link between a particular master object version and a particular segment object version. ObjectVersionNo and SharedObjectVersionNo fields contain data corresponding to the correspondingly named fields of the MandorlaObjectVersion and the MandorlaSharedObject tables respectively thus providing some redundancy. BookMark StartPos and EndPos fields are collectively used to indicate how the identified segment object version should be combined with the master object version and this data is described in further detail below. A LastUpdate field contains time and date data indicating the last update of each segment object version contained in the table and a SequenceCount field is used in the same way as the corresponding field of the MandorlaObjectVersion table . A HasCopySharedObject field contains a Boolean value indicating whether or not the shared object version has a corresponding copy and a CopySharedObjectOwnerID field contains details of all users having a copy of the shared object version.

Referring to a MandorlaCopySharedObject table is illustrated which stores one record for each copy of a segment object version. This table includes a CopyObjectID field which is the table s primary key. MasterSharedObjectID and MasterSharedObjectVersionID fields together identify a record in the MandorlaSharedObject table which represents the master copy of a segment object version. CopySharedObjectID and CopySharedObjectVersionID fields together identify a record in the MandorlaSharedObject table which represents the copy of the segment object version identified by the MasterShaedObjectID and MasterSharedObjectVersionID fields. A MasterSharedObjectOwnerID field identifies the user who created the master copy of the segment object version by reference to the MandorlaUser table and a CopySharedObjectOwnernID field identifies the user who created the copy of the segment object version.

The database can in some embodiments store template data which can be used to format documents created using application software. Such templates can include a Normal.dot template for use with the Microsoft Word word processor. Such data is stored in a MandorlaGlobalTemplate table and a MandorlaWordTemplate table .

The MandorlaGlobalTemplate table contains a GlobalTemplateID field which is the table s primary key. A name for each template is stored in a GlobalTemplateName field and data representing each template is stored in a GlobalTemplatelmage field. A DateTimeStamp field can be used to stored data indicating when each template was last updated. In use the MandorlaGlobalTemplate table contains a single record which in the case of the Microsoft Word word processor represents a Normal.dot template.

The MandorlaWordTemplate table stores specific template data for use with the Microsoft Word application. A TemplateID field acts as the table s primary key. A TemplateName field contains text data representing a template s name and a TemplateNotes field which contains notes for each template. A TemplateImage field is used to store data which represents each template. In use the MandorlaWordTemplate table is used to provide templates for particular document types which can be used instead of the normal dot template provided by the MandorlaGlobalTemplate table .

It has been mentioned above that communication between the add ins and the booker can conveniently be achieved via a registry file which is at run time stored in the data memory . Such a registry file is a core component of Microsoft Windows operating systems. In order to communicate data in this way a number of keys must be established within the registry into which data may be placed by a sender and removed from by a receiver. A suitable registry structure is illustrated in . Communication between the broker and the add in is described below although it will be appreciated that communication between the broker and the add in will be very similar.

A Registry R is arranged hierarchically and includes registry keys relating to the system described herein within a OneDoc folder R together with various other data relating to other applications not shown . The OneDoc folder R comprises a DBParams registry key R. This contains a single ConnectionString field which specifies a full path name for the database . The OneDoc folder R additionally comprises a MenuAction registry key R which has a single MenuAction field which is used to store details of a last menu action selected by a user from a menu provided the add in . A SessionParams registry key R comprises an isServerBusy field indicating whether the broker is currently busy an isClientBusy field indicating whether the add in is busy an isServerLoaded field indicating whether the broker is loaded and an isClientLoaded field indicating whether the add in is loaded.

A LoadedDocs registry key R is used to store details of documents loaded onto the workstation . This comprises a document folder R containing data relating to Document and the document folder R in turn contains two segment folders R R which contain data relating to Segment and Segment which are included within Document. The data relating to Document and all other documents for which details are included in the LoadedDocs registry key will include an ObjectID ObjectName and ObjectVersionID for the master object together with a file name where document data from the MandorlaBlob table relating to Document is stored within the cache . The Document folder R is identified using a combination of the ObjectID and the ObjectVersionID taken from the database . Each segment folder R R is identified using a combination of a SharedObjectID and a SharedObjectVersionID and each segment folder comprises an ObjectLinkID identifying a record in the MandorlaLinkedObjects table which links the segment object to the master object a SharedObjectID a SharedObjectVersionID and a SharedObjectName. Again a file name is also stored indicating where within the cache data relating to the segment object can be found.

The SessionParams registry key R additionally comprises a TransactionParams folder R which contains data relating to transactions between the broker and the add in . An AmendDocument registry key R is illustrated in and this key includes an ObjectID field R and an ObjectVersionID field R. Use of registry data is described in further detail below.

Having described data stored within the tables of the database and data stored within the registry R installation and configuration of the system is now described with reference to . At step S the broker is installed onto a hard disk drive connected to the workstation. This installation process will typically involve copying one or more files from a data carrier such as a CDROM onto the hard disk drive. Similarly at Step S each of the add ins is installed onto the hard disk drive in a similar manner. It will be appreciated that the broker must be provided with a path for the database and this is set at step S. Similarly a path name for local cache data is set at step S. At step S parameters are set indicating how often the broker should monitor the database for updated data and at step S user management configuration e.g. creation of user names passwords is carried out.

Much of the configuration described above with reference to is achieved using a dialog box provided by the broker which is illustrated in .

Referring to a dialog box used for configuration of the broker is illustrated. It can be seen that this dialog box comprises four tabs and each tab allows different configuration data to be specified. A Database parameters tab is illustrated in . This allows a database connection string to be entered in a text input area . An Internet button can be used to browse the Internet for the database. When the text input area contains the correct connection string a Save DB Params button is used to save the entered connection string and the appropriate data is then set in the DBParams registry key R .

It can be seen from that the dialog box also includes a User Management button which performs the same function as the User Management button described above a check subdocs button and a close button .

Having installed and configured the software as described above and assuming an architecture as illustrated in a user using the workstation may use the system relatively seamlessly in combination with application software such as the Microsoft Word word processor. On loading Word the user is presented with a conventional Microsoft Word window including an area for text entry and a plurality of toolbars at the top of the window. Part of such a window is illustrated in .

Referring to it can be seen that the Microsoft Word window comprises toolbars and a menu bar . In addition to menus conventionally provided by Microsoft Word the menu bar additionally comprises a OneDoc menu . The OneDoc menu is used to access and manipulate master and segment objects stored in the database . The OneDoc menu is provided by the add in which operates alongside the word processor. The add in is written in the VisualBasic programming language in a manner such that seamless integration with the Microsoft Word word processor is achieved.

Initially the user selects a OneDocLogin option from the OneDoc menu to log in to the system. Selecting this option presents the user with a dialog box into which user name and password details are entered. These details are communicated to the broker via the registry and verified against data in the MandorlaUser table in the database .

When a user has successfully logged on a new document can be created which is stored in the database as a master object and one or more segment objects. Such a document is herein referred to as a OneDoc document. Creation of a new OneDoc document is now described with reference to .

A new document is created by selecting a New OneDoc Document option from the OneDoc menu at step S. The add in then sets the isClientBusy field within the SessionParams registry key R to TRUE at step S and sets the isServerBusy field within the SessionParams registry key R to FALSE at step S. Additionally the add in sets the MenuAction registry key R to NewDoc at step S. Having set the registry variables described above the add in executes a sleep command specifying a time parameter of one second at step S and then loops until the isServerBusy field within the SessionParams registry key becomes FALSE described below . The value of the isServerBusy field is checked at step S and if the value is not yet set to FALSE execution passes to step S where it is ensured that the total time spent executing the loop does not exceed a predetermined timeout limit. Assuming that the timeout limit has not been reached execution returns to step S and the loop continues. When either the isServerBusy variable is set to FALSE detected at step S or the timeout limit is reached detected at step S processing within the add in in response to the menu selection ends at step S.

When not processing requests the broker routinely polls the isClientBusy variable in a loop at step S which continues until MenuAction is set to a non NULL value. When MenuAction is found not to be NULL processing begins within the broker . Thus in the scenario of shortly after the Menu Action parameter is set by the add in step S the broker begins processing. This is schematically illustrated by an arrow in .

At step S the MenuAction registry key is interrogated to obtain the last menu action performed. Assuming that this MenuAction is a new document menu action the isServerBusy registry field is set to TRUE at step S and the broker displays a create new document dialog box at step S which is illustrated in . It can be seen that the create new document dialog box comprises a plurality of fields into which text can be entered by a user. A document name field allows a name to be specified for the document to be created and appropriate notes can be entered into a document notes field . A document owner ID field indicates a UserID for the owner of the document to be created and a user locked to field contains a UserID for a user to whom the created document is initially locked. A Version name field is used to specify a name for the document version to be created. All the fields described above are initially populated with default values although these can be edited by a user as necessary.

Additionally the create new document dialog box includes a pair of radio buttons. If a first radio button is selected the new document is created from the document currently loaded into the Word application. If a second radio button is selected the new document is created from a file specified in a file name field . A browse button can be used to locate the file for specification in the file name field . As shown in until the second radio button is selected the file name field and the browse button are greyed out and inaccessible to the user.

Having entered appropriate data into the fields described above a create button can be used to create the document. A cancel button is also provided to cancel the new document operation. A browse button allows a user to browse details of users specified within the MandorlaUser table and allocate access rights to the created document to various of these users.

Referring again to at step the data input to the dialog box is received by the broker. At step S the broker checks whether the user used the create button or the cancel button . If the cancel button was used the operation terminates and execution passes to step S where the isClientBusy parameter is set to FALSE and then step S where isServerBusy parameter is set to FALSE. Execution then returns to step S. If step S determines that the create button of the dialog box was used the data input by the user is validated as step S. If validation is not successful an error message is displayed to the user at step S and execution again passes to step S.

If validation is successful execution passes to step S where the broker issues a command to the database located using the DBParams registry key R to create a new record in the MandorlaObject table . The ObjectID field is automatically generated by the database and this ObjectID is provided to the broker by the database . The ObjectName ObjectOwnerID and ObjectNotes fields are populated with data entered into corresponding fields of the dialog box .

At step S the broker issues a command to the database to create a record in the MandorlaObjectVersion table in which the ObjectID value is the same as that of the record created in the MandorlaObject table . The ObjectVersionID value is automatically set by the database and this value is returned to the broker and is also entered into the ObjectVersionID field of the appropriate record in the MandorlaObject table . The DateTimeStamp and LastUpdated fields of the record created in the MandorlaObjectVersion is populated with the time and date of creation The UserIDLockedTo and ObjectOwnerID fields are set to values specified in the dialog box . The SequenceCount and ObjectVersion fields are set to an initial value e.g. 0 or 1 .

Having created an appropriate record in the MandorlaObjectVersion table S the broker issues a command to create a record in the MandorlaObjectBlob table at step S. The created record has its ObjectID and ObjectVersionID fields set to the same values as the corresponding fields of the MandorlaObjectVersion table . Having created a record in the MandorlaObjectBlob table the data specified in the dialog box is streamed into the ObjectImage field of the MandorlaObjectBlob table at step S. Streaming data can either involve reading data from a file specified in the text field of the dialog if the second radio button is selected or alternatively can involve streaming data from the main Microsoft Word application. Given that the created document is loaded into the Microsoft Word application registry data is updated for use by the addin at step S. The LoadedDocs registry key R is populated with ObjectID ObjectName and ObjectVersionID values all stored within a document folder within the LoadedDocs registry key R which is named using a combination of ObjectID and ObjectVersionID. Given that initially the document contains no segment objects the document folder contains no segment folders of the type described above.

Execution then passes to step S where isClientBusy is set to FALSE then to step S where isServerBusy is set to false and control then returns to step S where the next client activity is awaited.

It should be noted that by setting isServerBusy to FALSE at step S the condition of step S will evaluate to true allowing processing within the add in to terminate at step S. This is schematically illustrated by an arrow in .

Referring back to the OneDoc menu also includes an open document option and when this is selected a sequence of events illustrated in the flowchart of takes place. The flowchart of begins at step S with selection of the Open Document option from the OneDoc menu . Following this selection the isClientBusy registry field is set to TRUE at step S and the isServerBusy registry field is set to FALSE at step S. At step S the MenuAction registry key is set to an appropriate value. The add in then executes a sleep command at step S and processing within the add in then enters a loop step S until the isServerBusy field is set back to FALSE. Step S provides a timeout check as described with reference to step S of .

Again setting the MenuAction parameter at step S allows the broker to leave a loop established by step S denoted by an arrow . The broker obtains details of the menu action from the appropriate registry key at step S and then updates the isServerBusy field to TRUE at step S.

At step S the broker interrogates the database and obtains details of all documents represented by a record in the MandorlaObject table and the ObjectVersionID field of each record is used to identify the current version of each document. The ObjectIDs and ObjectVersionIDs obtained in this way are used to perform a lookup in the MandorlaObjectVersion table and data relevant to each object e.g. document name and document notes is passed to the broker .

The ObjectIDs and ObjectVersionIDs are also used to perform a look up in the MandorlaLinkedObjects table which may return one or more pairs of SharedObjectID and SharedObjectVersionID. Each pair of values returned in this way is then used to perform a lookup in the MandorlaSharedObjects table and data relating to the segments objects contained within the documents within the database is passed to the broker . All data received from the database is written to the hard disk drive at step S.

Having obtained details relating to available documents in the manner described above the broker displays a open document dialog box to the user at step S which dialog box is illustrated in . A first area of the open document dialog box provides a list of documents which are stored in the database each document being represented by a single entry in the MandorlaObject table . The user can select one of the documents identified in the first area whereupon details relevant to that document are displayed on a details tab within the open document dialog box. The details tab includes a document name field a document description field a document owner field a document status field a locked to field a version number field and a users assigned to field . Each of these fields is populated with relevant data from the MandorlaObjectVersion table . The dialog box also includes a segments tab which is illustrated in . The segments tab takes the form of a table comprising a segment name column and a segment description column . Each row of the table relates to a segment object represented in the MandorlaSharedObject table which is related to the MasterObjectVersion record selected in the first area the relationship being represented by an entry in the MandorlaLinkedObjects table .

The dialog box additionally comprises an open button which can be used to open a document selected in the first area a close button which can be used to close the dialog box a save link button which can be used to create a shortcut to a document. Pressing this button will present a further dialog box to the user into which a file path can be entered where a shortcut is to be created. A shortcut is then created at that file path and when selected this shortcut will trigger the add in to fetch the appropriate data from the database to the application . Thus the shortcut provides a convenient mechanism for users to access documents without needing to use the open OneDoc document dialog box.

A delete doc button which can be used to delete a document from the database and a document management button which can be used to edit document details described below .

Data input to the dialog box by a user is obtained at step S . If the close button was used by the user this is detected at a decision block at step S and as no further action is required control passes to step S where isClientBusy is set to FALSE and then to step S where isServerBusy is set to FALSE. Processing then returns to step S.

If the user chose a document and used the open button it is first necessary at step Sto ensure that the user is authorised to access the master object identified using the known ObjectID and ObjectVersionID relating to the document i.e. the user s UserID appears in the UserIDAssignedTo field of the appropriate record of the MandorlaObjectVersion table and that the MandorlaUserAccess table provides the necessary access rights . Similar checks are performed in connection with any segment objects identified by means of SharedObjectIDs and SharedObjectVersionIDs . If the necessary rights are not provided a message is displayed to the user at step S and processing moves to step S.

If the user has the necessary access rights it is then necessary to ensure that no user has the master object locked for writing to the exclusion of all other users. Execution therefore continues at step S. The broker checks the lock status of the appropriate record in the MandorlaObjectVersion table to ensure that the appropriate record is not locked. If the master object is locked again a message is displayed to the user at step S and processing returns to step S. It should be noted that because any segment objects associated with the master object are initially opened for read only access assuming that the user has appropriate access permissions the segment objects can be opened but not edited regardless of whether another user is currently editing those segment objects. No check is therefore required in this regard.

If the user has the necessary access permissions step S and the required master object is not locked step S it is then necessary to copy document data from the database to the cache so that the document can be displayed to the user. The ObjectID ObjectVersionID and all SharedObjectIDs and SharedObjectVersionIDs are known to the broker as described above. The ObjectID and ObjectVersionID can therefore be used to perform a lookup in the MandorlaObjectBlob table to obtain data representing the master object and this data is copied to the cache at step S. Similarly the or each SharedObjectID and SharedObjectVersionID can be used to obtain data for the or each segment object at step S and this data is copied to the cache at step S. Thus the cache contains all relevant master object and segment object data. Appropriate registry parameters are then set step S to allow the add in to retrieve this data and assemble the document for display to the user. Specifically an appropriate document folder is created within the LoadedDocs registry key R and data relating to the master object of the type described above is stored within the created folder. Additionally a segment folder is created within the LoadedDocs registry key for each segment object and each segment folder is again populated with appropriate data.

The isClientBusy registry field is set to FALSE at step S and the isServerBusy field is set to FALSE at S. Processing within the broker then returns to step S. Given that the isServerBusy field is set to FALSE processing within the add in can recommence illustrated by an arrow in and assembly of the document can take place as described below with reference to .

When step S determines that isServerBusy is set to FALSE in the registry execution passes to step S . The add in interrogates an OpenDocument registry key which is stored within the TransactionParams registry key R . This interrogation will provide an ObjectID for the master object which represents the document. This ObjectID can be used to located the master object within the LoadedDocs registry key R at step S and when the object has been located its local file name within the cache can be determined from registry data. The add in will therefore then be able to access the file representing the master object. It will be appreciated that additionally a reverse lookup can be carried out using data stored in the registry. That is given a particular file name an ObjectID can be retrieved and used to access the database. Such a reverse lookup is useful in that an application such as Microsoft Word can simply provide a file name from which an ObjectID can be determined using the registry.

As described above the master object may include a plurality of segment objects. The position of such segment objects is identified within the master object using Microsoft Word bookmarks. Having obtained the file representing the master object the file is parsed step S and any bookmarks are located. Bookmarks can conveniently be identified by SharedObjectIDs and therefore. SharedObjectIDs obtained from bookmarks in this way can be used to locate each segment within the folder representing the document within the LoadedDocs registry key R. Each registry key will specify a file name in which data relating to the appropriate segment object is stored and the add in can therefore locate the necessary files stored within the cache storing segment object data step S . Having obtained the necessary files content is extracted from the segment object files specified by the appropriate data from the cache step S . Content extracted in this way is then inserted into the master document at the appropriate bookmarks step S .

Having inserted the content from the segment object files into the master document it is desirable to additionally add Word comments indicating where the various segment objects start and end. Such comments can be populated with a name for each segment and appropriate notes which can be taken from the MandorlaSharedObjects table and which is copied to the appropriate registry key together with shared object blob data.

Referring back to and if the user used the delete button in the dialog box execution passes from step S to step S where the records relating to the master object in the MandorlaObject table the MandorlaObjectVersion table and the MandorlaObjectBlob table are identified. All records located in this way are then deleted at step S. The ObjectID is then used to perform a lookup in the MandorlaLinkedObjects table at step S and segment objects linked to the master object are identified. For each identified segment object it is determined whether that segment object is linked to another master object is the MandorlaLinkedObjects table. At step S all records in the MandorlaLinkedObjects table which refer to the master object are deleted. Similarly all records located in the MandorlaSharedObjects table which are linked to no other master object are deleted from the MandorlaSharedObjects table. Having completed the deletion operations control passes to S and processing continues as described above.

Referring back to it can be seen that the OneDoc menu provides an amend document details option which allows details of the currently loaded document to be amended. Selection of this option results in processing by the add in and the broker as illustrated in . Referring to at step S a user makes the appropriate menu selection. In the same way as described with reference to the isClientBusy registry value is set to TRUE at step S isServerBusy is set to FALSE at step S and the MenuAction registry key R is set to indicate the selection made at step S. Processing within the add in is then suspended by the action of a sleep command at step S and a loop at step S which continues until broker processing is complete. Again a timeout is specified at step S.

When the MenuAction parameter is set at step S this allows the loop denoted by step S to exit and broker processing begins. Again the broker first obtains details of the menu option selected at step S and sets the isServerBusy registry value to TRUE at step S. The Broker then obtains details of the ObjectID and ObjectVersionID relating to the master object from an appropriate folder within the TransactionParams registry key R at step S. This data is used to perform a lookup in the MandorlaObjectVersion table of the database at step S and document details are then provided to the broker at step S. At step S the broker displays to the user an amend document dialog box which is illustrated in .

Referring to it can be seen that dialog box comprises details of the current document version which cannot be changed by a user. Additionally the dialog box comprises a plurality of editable text boxes which can be used to amend document details. A document name field allows details of the document name to be edited A document notes field allows document notes to be edited a document owner ID field allows the document s owner ID to be edited a users assigned to field allows the users who can access a document to be changed a user locked to field allows the use to whom a document is locked to be changed a version name field allows a version to be named or a previously allocated name to be changed and a document status field allows the status of a document to be changed.

The dialog box additionally comprises a snapshot history area which is used to show snapshot information. It may be desirable to store versions of a document at various times during the editing process so that it is possible to later review these versions to track changes between documents. Such stored versions are referred to as snapshots and the creation of snapshots is described in further detail below. The snapshot history area is a table comprising a version number column a lock status column and a version change notes column . Information required to populate this table is obtained from the MandorlaObjectVersion table .

Having amended document details a user can finish using the amend document details dialog box using either a save button or a cancel button . Referring back to it can be seen that user button selection occurs at step S and the broker determines which button was selected at step S. If the cancel button was used no further action is required and the isClientBusy variable is therefore set to FALSE at step S the isServerBusy variable is set to FALSE at step S and processing within the broker passes to step S. Setting isServerBusy to FALSE at step S allows the add in to exit the loop of step S.

If the decision block of step S determines that the user selected the save button at step S the details input by the user are validated by the broker at step S. If validation fails execution passes to step S where an error message is displayed and then to step S and then step S where isClientBusy and isServerBusy are appropriately set before execution returns to step S. However if validation at step S is successful then the user s permissions are checked at step S to ensure that the user s permissions are appropriate for the changes made assuming that this is so at step S the broker updates the appropriate record of the MandorlaObjectVersion table with the data input by the user isClientBusy and isServer busy are reset at steps S and S respectively and execution passes to step S. If the condition of step S is not satisfied execution passes to step S where an error message is displayed and then on to step S as described above.

Referring back to the amend document details dialog box of it can be seen that further buttons are also included within the dialog box. A work on document button allows a user to edit the document for which details are displayed. A create snapshot version button creates a snapshot version of a document as mentioned above. If step S detects that the create snapshot version button has been selected execution passes to step S where a new record is created in the MandorlaObjectVersion table . This involves generating a new ObjectVersionID and creating a record having a common ObjectID but new ObjectVersionID. The ObjectID and ObjectVersionID within the registry are used to look up relevant data in the MandorlaObjectVersion table and this data is copied across to the new record where appropriate however the ObjectVersionNo field of the previous record will be incremented to provide an appropriate value for the corresponding field of the new record and DateTimeStamp will be set appropriately.

At step S a new record is created in the MandorlaObjectBlob table . This new record has the same ObjectID and ObjectVersion ID as the new record in the MandorlaObjectVersion table and the ObjectImage field which contains the blob data is copied from the record in the MandorlaObjectBlob table for the currently open document.

At step S new records for each segment object are created in the MandorlaSharedObject table in a process similar to that for creation of the new MandorlaObjectVersion record. Similarly at step new records in the MandolaSharedObjectBlob table are created. Having created the new records described above the ObjectVersionID field in the record of the MandorlaObject table having the specified ObjectID is updated to show the newly created ObjectVersionID at step S.

Having made all necessary amendments to the database to reflect creation of the snapshot the registry data is updated to show that the currently open document is now that which is stored as the newly created records. This is achieved by removing a folder from the LoadedDocs registry key R and adding a new folder which has the same ObjectID but the new ObjectVersionID and also has segment folders bearing the new SharedObjectVersionIDs. Thus it is the new version of the document that is then worked upon. The amend document details dialog box will reflect creation of the new snapshot version in the snapshot history area .

Referring back to it can be seen that the dialog box additionally comprises a suspend document button and a publish document button . The suspend document button sets the ObjectStatus field of the appropriate record in the MandoralaObjectVersion table to SUSPEND and sets the SharedObjectStatus field of the appropriate record s in the MandorlaSharedObject table to SUSPEND. When the status of segment or master objects is set in this way no further changes can be made to the document.

The publish document button creates a new version of the document in a similar manner to that described for the create snap shot version button and the published version has the status of its master and segment objects set to PUBLISH preventing any further amendements being made.

Referring back to further options presented by the OneDoc menu are now described. It can be seen that the menu includes a create document snapshot option and this performs an identical function to the create document snapshot button in the amend document details dialog box . A save and refresh segments option saves all current segment updates in the appropriate database tables and reads segment object data from the database so as to obtain any updates which may have been made by other users. A save and close document option saves amendments made to the master object and any segment objects to which the user has write access and closes the documents. Saving such changes involves saving data to propriate locations within the cache at which time the broker can initiate processing to copy the changes from the cache to the appropriate database tables.

Document creation has been described above. However such document creation creates a single master object and no segment objects. Creation of a segment object is now described with reference to . At step S a user selects a document element which is to form the basis of the new segment. This may be a portion of text such as a paragraph or plurality of paragraphs or alternatively an image. Having made such a selection a user can either select a create one doc segment option on the OneDoc menu at step Sor alternatiely can click a menu button configured to display a menu typically a right hand mouse button on a two button mouse operating under a Microsoft Windows operating system and make a selection from such a menu at step S. Execution then passes to step S where isClientBusy is set to TRUE within the SessionParams registry key R and at step S isServerBusy is set to FALSE. The MenuAction registry key R is appropriately set at step S. At step S the add in loads data into a CreateSegment folder within the TransactionParams registry key R. This data include an ObjectID and ObjectVersionID for the currently active master object and a name for the newly created segment which can suitably be created using a first predetermined number of characters within the selected text for text segments. Additionally the add in creates a Microsoft Word subdocument containing the selected text deletes the selected text from the document representing the master object document inserts a bookmark within the master object document indicating where the subdocument should be inserted and proceeds to insert the subdocument at the bookmark. It should be noted that in order to create the sub document the first line of the segment must be set to a style of Heading given restrictions imposed upon Microsoft Word sub documents. The file containing the segment at a location within the cache which is provided within the CreateSegment folder within the TransactionParams registry key.

Having appropriately set the registry data described above the add in executes a sleep command at step S and then waits until broker processing is complete through the action of a decision block at step S which allows execution to continue only when isServerBusy is set back to FALSE. Step S provides a time out as described above.

The broker is initially within a loop at step S waiting until MenuAction is set to a non NULL value. When MenuAction is set at step S broker processing can begin. At step S the broker interrogates the MenuAction registry key R to determine the menu action and isServerBusy is then set to TRUE at step S. At step the broker interrogates the CreateSegment folder to obtain the data placed in that folder by the addin . Having obtained this data the broker creates new record in the MandorlaSharedObject table at step S. At step S an appropriate record in created in the MandorlaSharedObjectBlob table and data is streamed from the file within the cache containing data from the segment to the SharedObjectlmage field of that record.

At step a new record is created in the MandorlaLinkedObjects table relating the ObjectID and VersionID of the master object specified within the registry with the newly created MandorSharedObject entry created by the broker . An identifier for the bookmark inserted by the addin into the document is stored to identify the position of the segment in the document. Other fields of the newly created record are appropriately populated.

At step the broker sets fields within the CreateSegment folder in the registry identifying the created segment object e.g. SharedObjectID and SharedObjectVersion such that this data is accessible to the add in . Additionally a segment folder is added within the appropriate document folder in the LoadedDocs registry key R as described above. Having appropriately updated the registry data described above isClientBusy in the SessionParams registry key R is set to FALSE at step S and isServerBusy is set to FALSE at step S. After isServerBusy is set to FALSE the loop of step within the add in can exit the add in can then open the appropriate newly created segment object using registry data and both the add in and the broker have therefore completed processing for the create segment operation.

The OneDoc menu also includes a work with segments option which is now described with reference to . At step S the work with segments menu option is selected. isClientBusy is set to TRUE at step S isServerBusy is set to false at step S and MenuAction is set appropriate at step S. The add in then executes a sleep command at step S and enters a loop which terminates only when broker processing is complete step S subject to a timeout step S as described above.

The broker waits within a loop at step S until MenuAction is set which happens at step S . The broker then obtains details of the menu action performed at step S and sets isServer busy to TRUE at step S. The broker then gets details of all segment objects stored in the database at step S. The broker interrogates the MandorlaSharedObject table and obtains one record for each SharedObjectID that record being the record having the highest SharedVersionNo i.e. the latest version . Having obtained details for each segment a work with segments dialog box illustrated in is displayed at step S.

Referring to it can be seen that the work with segments dialog box comprises a table which comprises a segment name column a segment version number column a status column a locked to column and an assigned to column . The table comprises one row for each segment object which is populated with data obtained from the MandorlaSharedObject table as described above.

If a user wishes to open and edit a segment its row within the table is selected and a work on segment button is selected. If step S of determines that the work on segment button has been pressed details of the selected segment are obtained and checks are performed to ensure that the user has the necessary access permissions to access the selected segment and also that the segment is not locked step S . If the user does not have the necessary permissions an error message is displayed at step S isClientBusy is set to FALSE at step S isServerBusy is set to FALSE at step S and processing returns to step S. If the permissions check of step S is successful the appropriate record in the MandorlaSharedObject table is updated to show that the segment is locked to the user making the selection at step S and the appropriate segment data is copied from the MandorlaSharedObject table to the registry at step S. Segment data is then streamed from the SharedObjectBlob table to the cache . Processing within the broker then returns to step S via steps S and S and given that isServerBusy has been set to FALSE the add in loop of step S exits and appropriate segment data is loaded at step SA.

Referring back to use of other buttons within the work with segments dialog box is now described. A Reassign owner button presents a dialog which allows a user to amend the owner of a segment selected within the table . Assuming that the user has the necessary permissions to make the change the broker makes an appropriate amendment to the SharedObjectOwnerID field of the record of the MandorlaSharedObject table . An override lock button allows an owner of a selected segment to override a lock which may have been placed upon the selected segment by another user. A make segment available button allows an owner of a selected segment to make that segment available to one or more other users specified within a dialog box displayed in response to selection of the make segment available button.

A take copy segment button creates a copy of a selected segment object. The process of creating such a copy segment is now described with reference to . At step S the take copy segment button is pressed and at step S a check is made to ensure that the user has the necessary permissions to make such a copy. If the user does not have the necessary permissions an error is displayed at step S isClientBusy is set to FALSE at step S isServerBusy is set to FALSE at step S and processing ends. If the user does have the necessary permissions the broker creates a new record in the MandorlaSharedObjects table at step SI . This new record will have the same SharedObject ID as the segment selected in the table but the SharedObjectVersionID will differ and will be automatically generated by the database . The SharedObjectOwnerID field of the newly created record is set to the UserID of the user selecting the button . Other fields of the new record are appropriately set. At step S a new record is created in the MandorlaSharedObjectBlob table which has the same SharedObjectID and SharedObjectVersionID as the new record in the MandorlaSharedObject table and the same SharedObjectlmage field data as the record of the MandorlaSharedObjectBlob table representing the original segment object. At step S a new record is created in the MandorlaCopySharedObjects table . This record has SharedObjectIDs and SharedObjectVersionIDs for both the original and copied shared object records and additionally comprises details identifying the owner of each of the two shared objects. Having created the necessary records the broker sets up appropriate registry data at step S so that the add in can access the copy segment object for presentation to the user. At step S the copy segment object is streamed to the cache at a location specified within the registry. The isClientBusy field is set to FALSE at step S and isServerBusy is set to FALSE at step . Processing within the broker then returns to step S . The add in can then process the copy segment in the same way as a master segment as described with reference to .

Referring again to the dialog box further comprises an assign segment to button which adds a specified user to the UserIDAssignedTo field of the appropriate record of the MandorlaSharedObject table by adding an appropriate UserID. The dialog box also comprises a select all button which selects all rows in the table and a clear all button which clears any selection which may have been made in the table . A close button is provided to close the dialog box .

Referring back to it can be seen that the OneDoc menu also includes an include segment option. Selection of this option displays details of all segment objects stored within the database and adds one such segment object to the currently open document at the current cursor position. A bookmark is created within the document to indicate where the segment object is to be positioned and a sub document containing the segment data is created and associated with the created bookmark. This operation will create a new record in the MandorlaLinkedObjects table It should be noted that if a document uses two occurrences of a particular segment object two copies of the segment data will appear within the cache as working in this way has been found to provide increased reliability.

A save segments option on the OneDoc menu saves any updates which have been made to any open segments and processing performed in response to selection of this option is now described with reference to . At step S the user selects the save segments menu option. The add in then appropriately sets isClientBusy and isServerBusy at steps S and

S. MenuAction is appropriately set at step S. The add in then sets ObjectID and ObjectVersion ID parameters for the current master object within a SaveSegments folder of the TransactionParams registry key R at step S. At step S the add in ensures the up to date data for each segment object is stored within the cache at the filename specified within the appropriate segment folder within the LoadedDocs registry key R. The add in then enters a loop steps S to S as described above until broker processing is complete.

Setting the MenuAction parameter at step S allows the loop of step S within the broker to exit. The Broker then obtains details of the selected menu item at step S and sets isServerBusy to TRUE at step S. Having identified the menu action the broker interrogates the SaveSegments folder of the TransactionParams registry key R at step S to obtain the ObjectID and ObjectVersionID of the currently open master object. At Step S the obtained ObjectID and ObjectVersionID are used to locate the appropriate document folder within the LoadedDocs registry key R which contains a segment folder for each segment object. The broker can therefore identify the segments to be saved and also how many segments are to be saved. A loop is then established processing each segment in turn steps S S S . For each segment object the broker updates an appropriate record of the MandorlaSharedObject table at step S by updating the LastUpdate field. At step S the broker updates the appropriate record of the MandorlaSharedObjectBlob table by streaming data from the specified file within the cache to the SharedObjectlmage field of the MandorlaSharedObjectBlob record. At step S the appropriate record of the MandorlaLinkedObjects table is updated to reflect the latest update time. Having carried out this processing for each segment object the loop exits at step S isServerBusy is set to FALSE at step S and isClientBusy is set to FALSE at step S. Processing within the broker therefore returns to step S to await further add in activity. The loop within the add in step S terminates in response to isServerBusy being set to FALSE.

Selecting a refresh segments option provided by the OneDoc menu results in the broker fetching data for each segment object within the document identified using the LoadedDocs registry key R described above from the database into the cache . When this data has been fetched the addin can then update all sub documents with the updated segment data.

An export document option results in the creation of a single file representing the document that is a single file containing the current master object and all current versions of segment options. Such a file is created by the add in and saved to a user specified location on an appropriate storage medium. The file can be saved in any suitable supported file format such as for example a Microsoft Word document or a Portable Document Format PDF format document.

The OneDoc menu provides OneDoc options and user manager options which result in the display of suitable dialog boxes such as those of to allow management functions to be carried out.

A copy document option results in a complete copy of an entire document i.e. master object and all segment objects being created and stored in the database . A copy document from snapshot option similarly results in a complete copy being created but the copy is based upon a document snapshot which is selected from a suitable dialog box.

It has been described above that embodiments of the invention may support versioning such that different versions of a single document exist. Implementation of versioning is now described.

First it should be noted that creation of a new version can effectively be forced by creating a snapshot version as described above. However the system also automatically creates a new version of a segment or master object as is now described with reference to . illustrates a document which is represented by a first version of a master object a first version of a first segment object and a first version of second segment object . When a user opens the master object and each segment object for editing it is preferred that a new version of each object is created by creating appropriate records within the appropriate database tables. That is the document is represented by a second version of the master object a second version of the first segment object and a second version of the second segment object . By creating new versions in this manner changes made by the user editing the document can easily be tracked and undone if necessary.

Additionally a plurality of copies of a master object or segment object may exist for the use different users and means are provided to compare and merge changes made.

It has been described above that segment objects are preferably combined with their associated master object as subdocuments which conveniently provide a suitable locking mechanism to lock segments which cannot be edited. However in alternative embodiments of the presnt invention segment objects are combined with master objects using different mechanisms. For example segment objects can simply be pasted into the document with locking being managed by other means such a dynamic macro creation described below .

Furthermore in some embodiments of the invention instead of using bookmarks to indicate where within the master object segment objects should be positioned a first pointer can be provided which indicates a number of characters from the start of the file where a segment object begins and a second pointer can be provided to indicate a number of characters from the start of the file where a segment object ends.

It has been described above that a whole document comprising a master object and one or more segment objects may be displayed to a user for editing although some parts of the document may be locked for editing by other users. In such circumstances it is possible to communicate a user s updates to all other users viewing the file substantially in real time. However working in this way can be disconcerting. Therefore in preferred embodiments of the invention locked segments are updated at predetermined intervals set within the dialog box see . Furthermore the dialog box can be used to specify whether or not alerts should be generated to inform users of other users changes.

In the embodiments of the present invention described above communication between the add in and the broker is achieved via the registry. illustrates an alternative means of communication between the add in and the broker. Referring to it can be seen that a workstation is connected to a hard disk drive which stores cache data in a cache . The workstation runs a first application program and a second application program . It can be seen that the first application program includes an add in and additionally includes a transmission control protocol TCP interface . Similarly the second application program includes an add in and a TCP interface . A broker program is also run on the workstation and manages communication with a remote database not shown . The broker again includes a TCP interface .

In the embodiment illustrated in communication between the add ins and the broker is accomplished by communication using the TCP protocol between the TCP interfaces and the TCP interface . There is therefore no longer a need to use the registry as described above and communications is instead implemented using a widely used communications protocol.

In the embodiments of the invention described above each workstation operates its own broker application which manages communication with the remote database. However in alternative embodiments of the present invention a central broker is used. Referring to FIG. it can be seen that three workstations communicate with a server via the Internet . The server has a database of the form described above. Additionally the server runs a broker application which has a TCP interface . Each workstation runs an application program which includes an add in and each add in includes a TCP interface . Thus each add in can communicate with the broker application operating on the remote server using the TCP protocol. The broker application will perform similar functions to those of the broker although it will maintain a session for each application program .

The architecture of may be employed to remotely monitor and affect document creation using the application programs . In particular if the application programs each provide a macro language in which macros can be created and applied to affect document creation macros can be dynamically created in response to user input and subsequently be applied to the document being created. This can be achieved using processing as illustrated in the flowchart of . At step S input to one of the applications is monitored by its respective add in and this input is transmitted to the broker at step S. At step S the broker receives the input which is analysed at step S. At S the received input is compared with predefined rules to determine whether or not document creation should be affected. If it is determined that document creation should be affected a macro is generated at step S and this is transmitted back to the add in at step S and processing within the broker terminates at step S. At step S the add in receives a response from the broker and the response is processed at step S. The macro received within the response is then applied to the document being created. Processing then returns to step S.

The processing of can be used to affect document creation in a variety of ways including imposing locking of segments where sub documents are not used and also in applying uniform style constraints to all documents created by applications connected to the broker .

In some embodiments of the invention users may connect to a computer network to obtain document data from a remote server in the manner described above and then disconnect from the network. A user working in this way can continue to edit downloaded data and when editing is complete the user can reconnect to the computer network to allow updated segment data to be returned to the server and also to allow the server to inform the user s computer of any changes to read only segments which are being used.

Although preferred embodiments of the present invention have been described above it will be readily apparent to those skilled in the art that various modifications can readily be made without departing from the spirit and scope of the present invention.

For example although preferred embodiments of the present invention have been described with reference to word processor and spreadsheet applications it will be apparent that the invention is not limited to such software but is instead widely applicable to a range of different document creation software including presentation packages and drawing packages. Furthermore although some parts of the invention have been described with reference to Microsoft Windows based operating systems it will be appreciated that the invention is in no way limited to such operating systems but can instead by implemented under any appropriate platform including UNIX platforms such as LINUX SUN OS or Solaris Furthermore in some embodiments of the invention a plurality of segment objects may be stored in a variety of different file formats and means may be provided to enable real time file conversion between these different file formats to enable creation of a single document for editing.

References have been made above to representing segment objects using sub document files within the Microsoft Word application. It will be appreciated that the invention is not limited to using Microsoft Word sub documents but is instead able to use any suitable file format. Such suitable file formats include XML files such as Microsoft Word XML files WCORG XML files and Microsoft PowerPoint XML files. Other Microsoft Office XML file formats can also be used in some embodiments. It has been indicated above that in some case segments may represent images and in such cases image files will typically be used. Of course such image files can take any suitable form. Thus while images such as photographs may be represented using JPEG or TIFF files other image files may be represented using other file formats. Such file formats include for example Visio files.

It has been indicated above that segments that represent images can be represented using image files. Image files do however have additional applicability in some embodiments of the present invention. Specifically it has been explained that in some embodiments when document files are stored as a master object and a plurality of segment objects the master object and the segment objects being combined to display the document both the master object and the segment objects can be stored in native file format e.g. the Microsoft Word format . In order for this to be possible it is necessary to ensure that the native application e.g. Microsoft Word is able to provide suitable locking for segment objects which a user desires to see but which can not be edited given that they are being edited by other users. Thus as described above when the master object and the segment objects are combined it is necessary to provide some range locking mechanism such that parts of the document relating to particular segments are locked to prevent editing. If such range locking is not available segments which are provided to a user on a read only basis can be provided using image files. That is alongside a native file format version of a particular segment object an image file for that segment object can be stored. In the case where the segment object represents textual information it will be appreciated that it is not practicable to edit the text by editing the image file. Indeed such editing will be outside the capabilities of many word processors. However using the image file in this way does allow read only segment objects to be provided to a user for read only access.

Additionally providing textual information in the form of image files may have other benefits. Specifically meta data associated with particular segments need not be provided to a user thereby enhancing security. It will be appreciated that when image files are used in this way versioning of the type described above can still be employed and it will also be appreciated that such image files can be linked to a master object in a manner similar to that described above.

Various references have been made to referencing segment objects from a master object using pointers. It will be appreciated that these pointers can take any convenient form such as the use of Word bookmarks in the manner described above.

Various aspects of the invention have been described with reference to methods systems and computer programs. It will be appreciated that all aspects of the invention are equally applicable to methods systems appropriately programmed computers and computer programs. Such computer programs can of course be embodied on suitable carrier media such as both tangible carrier media and communication lines.

