---

title: Method and data structure for reconfiguring a software package
abstract: The present invention provides a method of configuring a package that enables the reduction of load on a network without a temporary need for a large recording area on the client side when reconfiguring a software package from given components. A second computer receives, from a first computer, combination information on a combination of one or more components and position information indicating storage locations of components recorded in the first computer, receives a selection of given components from a user, determines the combination of the components selected based on the combination information, receives the selected components based on the determination of the combination and the position information corresponding to the selected components, and configures the secondary software package using the received components.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07685594&OS=07685594&RS=07685594
owner: International Business Machines Corporation
number: 07685594
owner_city: Armonk
owner_country: US
publication_date: 20060718
---
The present invention relates to a method of reconfiguring a software package and a data structure of the software package and more particularly to a method of reconfiguring a software package by using a program operating on a computer and a data structure of the software package.

With the diversification of software products in recent years there is a tendency of a software package to be composed of a large number of components. A software user however rarely uses all of the components and a vendor providing a software product is required to distribute a software package hereinafter appropriately referred to as package including only components highly needed by customers.

Normally when configuring an optimal package for a customer a vendor as a primary provider selects software programs hereinafter referred to as components meeting the needs of the customer for the package configuration.

For example when a vendor provides an operating system as a package required components depend upon languages provided by the operating system. Therefore in most cases components for one language appropriate for the customer are selected out of English Japanese or French components and the entire combination of the selected components is provided as an individual package.

The creation of the individual package by the package provider on a case by case basis however leads to an increase in human and time costs for management check and distribution of a large number of packages and for media creation. Therefore there has been used a method in which a vendor provides a primary software package hereinafter referred to as single package including all components that can be selected and a user selects components to be introduced at installation. This structure is often used at the time of distributing office applications.

Under the present situation however with the enhancement of the functions of software programs there is a tendency of an increase in file size of the components constituting a single package and it leads to a large increase in size of the single package. In recent years a software package is frequently distributed over a network such as the Internet. In distributing this type of single package over a network there has been a tendency of an increase in load on a server performance or load on the network and in volume of the software package in the storage device of a server or a user.

Therefore there has been suggested a method of distributing a single package over a network with a reduction of a load on a server or a network even if the single package size increases for example as disclosed in Japanese Laid Open Patent Publication No. Hei 8 1996 83245 and Japanese Laid Open Patent Publication No. 2000 285048

Although the methods described in the above referenced patent documents are useful to reduce load on a server and a network for distributing a gigantic package eventually there is a need to download the entire package to a client. Specifically the entire software package is downloaded independently of whether or not the components are needed for the client to which they are downloaded.

Accordingly if the package size is large time of occupying a network becomes longer in downloading a software package thereof thereby resulting in less relief of load on the network. Furthermore a recording apparatus of the client to which the entire software package is downloaded has to be provided with a sufficient recording area so as to temporarily record the entire package. Nowadays a current cellular phone and a personal digital assistant are connected to the Internet but in general they are small in size and low in function compared with a personal computer. Therefore a sufficient memory area cannot be secured. Diversified software in these days is composed of a large number of components. In a distribution and packaging of the software however from a viewpoint of easiness of a file control easiness of controlling a position at which a file is kept or the like it is strongly required to use a single package in which a plurality of components are put together. In a conventional packaging method however the software has not been able to be provided in a single package for an apparatus such as a cellular phone and a personal digital assistant due to the problems described above.

Therefore it is an object of the present invention to provide in reconfiguring a software package using predetermined components a method of enabling configuration of a software package that reduces a network load and does not temporarily require a large recording area at a client side and a data structure of data in the software package to be provided.

Therefore the present invention provides a method of configuring a software package as described below.

According to the present invention there is provided a package configuration method of configuring a secondary software package in a second computer by receiving one or more components of a primary software package recorded in a first computer the method comprising and allowing the second computer to perform the steps of receiving from the first computer combination information on a combination of the one or more components and position information for indicating storage locations of the components recorded in the first computer receiving a selection of a part or all of the one or more components from a user determining the combination of the components selected based on the combination information requesting the selected components from the first computer based on the determination of the combination and the position information corresponding to the selected components receiving the selected components and configuring the secondary software package using the received components.

Therefore according to the method of the present invention a client determines the combination of the components based on the combination information stored in a server and configures a package based on the determination result. Accordingly the client only needs to download required components without a need to download and record all components stored in the server.

Specifically according to the present invention individual components are sent in configuring the package whereby the load on the network between the server and the client can be reduced. In addition the structure of the single package is divided into blocks and a new package completes by connecting required blocks at downloading to the client. Therefore it is possible to configure a package not requiring a recording area for working on the client side.

More specifically in addition to the above structure a digital signature is appended to the combination information in the package so that the client verifies the legitimacy of the combination information in the package by way of the digital signature. In this structure the verification with the digital signature is performed when the combination information is read out. Therefore it is possible to configure the package under reliable certification of the provider for the combination information.

According to the present invention when a client configures a package the combination of components is determined and only the selected components are received based on the determination result thereby reducing load on the network between the server and the client. Moreover the entire single package is not recorded whereby the package can be configured without a need for a temporary recording area for working on the client side.

Embodiments of the present invention will now be described in detail hereinafter with reference to the accompanying drawings.

As shown in a package configuration system includes a package server a client and a communication line network for connecting the package server and client with each other. The package configuration system is connected to a plurality of clients and each client may configure a package from the package server .

The package server first computer stores a software package provided by a primary provider hereinafter referred to as single package and records components information and data to be elements of the package configured by the client . In this regard the package server can transmit an arbitrary position from the beginning of the package and size information to the client . Moreover the package server may be an ordinary file server capable of appending a digital signature.

The package server may include a control section for controlling information of the package server a recording section for recording a header data information components and a single package and a communication section connected to the communication line network to perform communication.

It should be noted here that the package is a set of software created by combining the above one or more components. Specifically the package is configured by a mediator who uses the client through selecting given components from the provided single package. In this specification a package reconfigured by a user from the single package is assumed to be a private package.

The component may be a software program data or the like. For example one component may be an application program such as text generation software or may be data such as a library or a device driver or a software program. Furthermore it may be a software program including a program for enabling a computer to boot from an error condition at the occurrence of the error or a program for error recovery. The individual components may be continuously recorded recorded in blocks into a recording medium or they may be continuously read from or written into the recording medium at the readout or writing operation though they are discrete from a physical viewpoint.

The control section is a central processor for computing and controlling information which operates in the package server and it may be a central processing unit CPU . It may include a signature execution section for encrypting digital signatures for the information data and components constituting the package. The provider who provides the single package appends digital signatures to given information data components and package by using the signature execution section in order to give provider s certification in response to a request related to the package configuration issued from the client .

It should be noted here that the digital signature is a method enabling only specific users to receive data without any alteration of the content of data provided by the provider with a combination of public key and hashing. Specifically in the digital signature data to be transferred is converted to a digest by hashing and the digest is encrypted to create a signature. The signature is provided to the user with data. Then the user converts the provided data to a digest by hashing and compares the digest with a digest decrypted using a public key from the received signature. Thereby only when the digests coincide with each other the data is considered to be the same as the original and the user is allowed to use the data in the method.

Concretely the encryption technologies may be an RSA encryption technology or a DSA encryption technology used for a large number of encryption products for supporting electronic commerce or the like or may be an encryption technology based on a specification conforming to X.509 which is one of the standard specifications for electronic keys. Moreover a hash algorithm used for authentication or for a digital signature may be Secure Hash Algorithm 1 SHA 1 .

Therefore the primary provider appends a digital signature to a single package or the like and provides it to the user whereby the user can provide a single package that can be verified not to have been altered by a third party.

The communication section may include a request receiving section for receiving the requests a header request a data request an information request and a component request for the package configuration issued from the client and a transmission section for transmitting the header data information and components for the request. The recording section of the package server includes a package recording section for recording the single package.

The client second computer configures a package from the single package upon receiving an input from the user. The client may include a control section for controlling information on the client a recording section for recording a header data information components and a package a communication section connected to the communication line network to perform communication and an input section for receiving an input from the user. The client is an information processor and may be a computer a personal digital assistant a cellular phone or the like.

The control section includes a package configuration section for configuring a package at the client a verification section for verifying a digital signature and a combination determination section for determining the combination of components selected at the client .

The package configuration section configures a private package from a header data information and components received from the package server . The verification section verifies digital signatures of the header components data and information received from the package server . The combination determination section determines the combination of the components based on the combination information received from the package server .

A request transmission section transmits requests header request data request information request and component request for the package configuration to the package server upon receiving the input from the user. The input section is a user interface that receives an input from the user. For example it may be a keyboard a pointing device or the like.

It should be noted here that the client configures a secondary software package hereinafter referred to as private package based on the components information and data transmitted from the package server . Specifically the client downloads only the beginning portion based on the position information of the file received from the package server having a file transfer function from the ordered position information. The client acquires information which is necessary for configuring the package from the downloaded components in the beginning portion from the package server . Specifically the client acquires arrangement information in the package of information such as a component list in the package name or other information associated with components and combination information on component combinations. Moreover the client configures a package based on the acquired arrangement information.

Furthermore the client may display a display screen or the like for prompting a user s selection of the components based on the package configuration information acquired from the package server . In the component selection here a program preset in the client may be used for the selection.

Note here that the user who configures the package from one or more components by operating the client may be an intermediate provider mediator who handles the transaction of the package between the provider who provides the single package and a customer. Specifically in a preferred embodiment of the present invention packages may be configured like a chain reaction among providers in such a way that a secondary provider who configured a private package from a single package allows a child client third computer to configure a package tertiarily tertiary package .

Subsequently the single package provided by the primary provider will be described with reference to . The single package is recorded into the package server . If the package is configured in the child client here a private package configured in the client corresponds to the single package described here.

The single package is provided before the user configures a package. Therefore a person who provides the single package may be the primary provider or the secondary provider. In the description of the preferred embodiment of the present invention the single package is described as a package provided by the primary provider and the private package is described as a package configured by the secondary provider to clarify the description. As described above however the client that configured a package from components received from the package server can function as a package server to allow the child client to configure a package in this preferred embodiment of the present invention. Therefore in the preferred embodiment of the present invention it is possible to configure packages among providers like a chain reaction.

The single package includes a header logical data which is information on components combination information position information and components. More specifically the single package has the header including header information of the single package the logical data including meta information on the respective components the combination information including information on combinations of the components and the position information including information on the storage locations of the packages and includes a component A to a component X provided to be selected by a user.

As shown in the header is composed of a header signature and header information . More specifically the verification section of the client verifies the header with the header signature and thereafter the client can handle the header information . In this embodiment the client can read out the header and the header signature after receiving the single package and can read out the content of the header information after the digital signature with the header signature is authenticated.

The header information includes information on the positions and sizes of the logical data the combination information and the position information a public key to each digital signature logical data signature combination information signature and position information signature . More specifically the header includes the signatures of the logical data the combination information and the position information thereby enabling verification with the digital signatures when receiving the data and information.

For example a digest of the combination information is created with the combination information signature and the public key included in the header and the digest is compared with a digest created from the combination information in the single package whereby the combination information is verified with the digital signature.

The logical data is provided with meta information of components information on the components themselves in other words the signature size name and the like of each component by the number of components. For example in the logical data includes the meta information of the component A the meta information of the component B and so on up to the meta information of the component X for the respective components in such a way as to be collectively recorded instead of being discretely recorded in the single package .

The combination information relates to combinations assured by the primary provider among the combinations of the components. The combination information includes combination definitions each defining one combination by the number of the combinations. The combination information includes combination definitions each including information on one combination by the number of combinations assured by the primary provider. The combination definitions may include data made of collected signatures of the components under the combination hereinafter referred to as combination data . Moreover the combination information may include a signature created from the combination data hereinafter referred to as combination signature in order to assure the combination data. In this instance the verification section verifies the combination data and the combination determination section compares the combination data with the above list to determine the combination. In this regard the combination signature may be used to assure the legitimacy of the combination data. More specifically the verification section may verify the legitimacy of the combination data by using the combination signature. If this is the case the verification section verifies both of the combination information and the combination data in the combination information.

The position information includes information on physical positions offset numbers or the like where the components are stored. The position information varies according to a package and therefore the content is altered and recorded after the package configuration.

Subsequently concrete operations executed by the package configuration system will be described by using the flowcharts shown in and .

First the request transmission section of the client requests the header from the package server step S . The request receiving section of the package server receives the request and transmits the header of the single package to the client step S . A receiving section of the client receives the header step S . Thereafter the verification section verifies the received header step S .

The header includes the header the header signature and the public key. Therefore the verification section converts the received header itself to a digest by hashing and compares the digest with a digest created by decrypting the header signature using the public key. Thereby only when these digests coincide with each other the user is allowed to use the header.

Then the request transmission section of the client requests the logical data step S . Upon receiving the request the request receiving section of the package server transmits the logical data of the single package to the client step S . The receiving section of the client receives the logical data step S . Thereafter the verification section of the client verifies the received logical data . The package configuration section records the verified logical data step S .

The verification section verifies the received logical data by using the signature of the logical data and the public key included in the header received earlier. More specifically the verification section converts the received logical data to a digest using the hashing algorithm and compares the digest with a digest created by decrypting the signature of the logical data recorded in the header using the public key. Thereby only when these digests coincide with each other the user is allowed to use the logical data .

Subsequently the request transmission section of the client requests the combination information step S . Upon receiving the request the request receiving section of the package server transmits the combination information of the single package to the client step S . The receiving section of the client receives the combination information step S . Thereafter the verification section of the client verifies the received combination information . The package configuration section records the verified combination information step S .

The verification section verifies the received combination information by using the signature of the combination information and the public key included in the header received earlier in the same manner as for the logical data in the above. More specifically the verification section converts the received combination information to a digest by hashing and compares the digest with a digest created by decrypting the signature of the combination information recorded in the header using the public key. Thereby only when these digests math with each other the user is allowed to use the combination information .

Subsequently the request transmission section of the client requests the position information step S . Upon receiving the request the request receiving section of the package server transmits the position information of the single package to the client step S . The receiving section of the client receives the position information step S . Thereafter the verification section of the client verifies the received position information step S .

The verification section verifies the received position information by using the signature of the position information and the public key included in the header received earlier in the same manner as for the logical data in the above. More specifically the verification section converts the received position information to a digest by hashing and compares the digest with a digest created by decrypting the signature of the position information recorded in the header using the public key. Thereby only when these digests math with each other the user is allowed to use the position information .

Subsequently the client receives a selection of components from the user step S . More specifically the client lists the types of components to be downloaded from the header or the logical data to show them to the user. The user selects components via the input section of the client . In this regard the components may be automatically selected by means of a program preset in the client instead of the user s selection of the components.

The combination determination section of the client determines the combination of the components selected by the user or the program operating at the client on the basis of the recorded combination information step S . For example the combination determination section determines the combination by comparing the list of the components selected by the user with the combination list of the components recorded in the combination information .

If the combination determination section determines that the combination is allowed by the primary provider step S the request transmission section requests downloading the components step S . On the other hand if the combination determination section determines that the combination is not allowed by the primary provider step S the package configuration with this combination is not allowed and therefore the component selection is performed again step S .

More specifically the request transmission section of the client requests downloading one component step S . Upon receiving the request the request receiving section of the package server transmits one component of the single package to the client step S . The receiving section of the client receives the component step S .

In this regard when performing the communication between the package server and the client the communication may be made by using a protocol in which offset of data to be transmitted or received can be specified the Hypertext Transfer Protocol HTTP or the File Transfer Protocol FTP . More specifically when the download is requested the component is received based on the offset number by reading the offset number of the component to be downloaded from the position information transmitted by the package server . In this instance the client can download the component by specifying the location of the component to be downloaded. Therefore efficient downloading is achieved.

In the HTTP the request transmission section of the client may issue the request of downloading the specified component by specifying an offset using a GET command. In the FTP the request transmission section of the client may issue the request of downloading the specified component by specifying an offset using a REST command. In this regard the communication may be performed between the package server and the client by using a remote file system such as the Network File System NFS or the Common Internet File system CIFS .

Subsequently the verification section of the client verifies the received component. The package configuration section records the verified component step S .

The verification section verifies the received component by using the component signature and the public key included in the logical data received earlier step S . More specifically the verification section converts the received component to a digest by hashing and compares the digest with a digest created by decrypting the component signature using the public key. Thereby only when these digests coincide with each other the user is allowed to use the component.

The components for the private package may be continuously recorded from the downloaded components. More specifically the order of downloading may be the same as the order of recording the components into the private package .

If all components of the combination selected by the user complete to be downloaded the position information is updated and recorded lastly step S See . The position information differs from the position information which is the storage location of the single package . Therefore the position information received in step S is temporarily recorded and the package configuration section calculates the position information based on the information on the physical storage location where the components of the configured package are recorded and then records it into the private package .

Subsequently the header is created and recorded step S . Similarly to the header the header includes a header signature a logical data signature a combination information signature and a position information signature. Note here that the logical data signature and the combination information signature are the same as the logical data signature and the combination information signature of the single package . The position information signature however differs from the position information signature of the single package . Therefore the package configuration section creates the position information signature based on the position information and adds it to the header information.

Thereafter the package configuration section creates the header signature from the header information creates the header from the header information and the header signature and records the header into the private package step S . In this regard the header signature is for use in verifying the header at the client . The header is the first information as an element of the package. Therefore the verification of the header with the signature is the same as the verification of the entire package.

By configuring the package in this manner general data logical data and combination information carried over to the client like a chain reaction is downloaded thereto first and required information and data are recorded. Then the components necessary for the package to be configured are determined and thereafter the components can be downloaded by specifying the position information of the file to which the components are downloaded so to speak with pinpoint accuracy . Moreover the downloaded components may be recorded only continuously in the order of downloading. As a result it is possible to download the information data and components for efficiently configuring the package.

The example in shows a private package in a case where the user selects components A B K and P as components and the combination of the components are assured by the primary provider.

While the embodiment has been described with reference to the flowcharts in and in which the logical data the combination information and the position information are downloaded in this order from the package server to the client the order of the data and information may be arbitrary.

While the digital signature has been verified every time the verification section receives the information data and component in the above description the digital signature may be verified appropriately after the information or the like is recorded into the client instead of verifying the digital signature immediately after the information or the like is received.

As described hereinabove according to the present invention the private package can be configured without receiving all components recorded in the single package. Moreover only the combination of components assured by the primary provider is allowed based on the combination information at the configuration of the private package whereby the package can be configured under the certification of the primary provider. In addition the content can be assured by the digital signature for the configured private package whereby the configured private package can be provided to a second mediator without any unauthorized alteration made by a third party.

Moreover in this specification it has been described that the single package is provided by the primary provider at the beginning and the private package is configured by the mediator in order to discriminate between the single package and the private package . It will be apparent to those skilled in the art however that the single package in this specification corresponds to a primary private package when a secondary private package tertiary software package is configured based on the primarily configured private package .

More specifically regarding the configuration of the tertiary software package the child client configures the secondary software package in the client by receiving one or more components of the primary software package recorded in the package server and configures the tertiary software package by receiving one or more components of the secondary software package recorded in the second computer. In this instance the child client receives the combination information on the combination of one or more components and the position information indicating the storage locations of the components recorded in the client receives the selection of a part or all of the one or more components from the user determines the combination of the components selected based on the combination information requests the selected components from the client based on the determination of the combination and the position information corresponding to the selected components receives the selected components and configures the tertiary software package using the received components. Therefore the software package can be configured for the tertiary software in addition to the primary software and the secondary software. Moreover it will be apparent to those skilled in the art that software packages can be configured like a chain reaction also regarding the higher order software packages such as the quaternary and quintic software packages.

The present invention is feasible by means of a computer program for each computer operating in the package configuration system as one embodiment. A storage medium for storing the above program may be electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or propagation medium. As examples of a computer readable medium there are a semiconductor or solid state storage device and magnetic tape. As examples of a removable and computer readable medium there are a semiconductor or solid state storage device magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. As examples of the optical disk at this time there are a compact disk read only memory CD ROM a compact disk read write CD R W and a DVD.

While the preferred embodiments of the present invention have been described hereinabove it is to be understood that the illustrative embodiments have been provided merely for the purpose of explanation with examples and it is not intended to particularly limit the present invention. Moreover the effects described in the embodiments of the present invention have been enumerated merely as the most preferable effects achieved by the present invention but the effects of the present invention are not limited to those described in the embodiments of the present invention.

