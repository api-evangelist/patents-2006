---

title: Dynamic write cache size adjustment in raid controller with capacitor backup energy source
abstract: A high data availability write-caching storage controller has a volatile memory with a write cache for caching write cache data, a non-volatile memory, a capacitor pack for supplying power for backing up the write cache to the non-volatile memory in response to a loss of main power, and a CPU that determines whether reducing an operating voltage of the capacitor pack to a new value would cause the capacitor pack to be storing less energy than required for backing up the current size write cache to the non-volatile memory. If so, the CPU reduces the size of the write cache prior to reducing the operating voltage. The CPU estimates the capacity of the capacitor pack to store the required energy based on a history of operational temperature and voltage readings of the capacitor pack, such as on an accumulated normalized running time and warranted lifetime of the capacitor pack.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07451348&OS=07451348&RS=07451348
owner: Dot Hill Systems Corporation
number: 07451348
owner_city: Carlsbad
owner_country: US
publication_date: 20060602
---
This application claims priority to U.S. Provisional Application No. 60 705 997 filed Aug. 4 2005 which is hereby incorporated by reference. This application is related to the following U.S. non provisional applications.

The present invention relates in general to the field of using a capacitor pack as a re chargeable backup energy supply in a storage controller and particularly to increasing data availability as the capacitor pack ages.

Redundant Array of Inexpensive Disk RAID systems have become the predominant form of mass storage systems in most computer systems today that are used in applications that require high performance large amounts of storage and or high data availability such as transaction processing banking medical applications database servers internet servers mail servers scientific computing and a host of other applications. A RAID controller controls a group of multiple physical disk drives in such a manner as to present a single logical disk drive or multiple logical disk drives to a computer operating system. RAID controllers employ the techniques of data striping and data redundancy to increase performance and data availability.

An important characteristic of RAID controllers particularly in certain applications such as transaction processing or real time data capture of large data streams is to provide fast write performance. In particular the overall performance of the computer system may be greatly improved if the write latency of the RAID controller is relatively small. The write latency is the time the RAID controller takes to complete a write request from the computer system.

Many RAID controllers include a relatively large cache memory for caching user data from the disk drives. Caching the data enables the RAID controller to quickly return data to the computer system if the requested data is in the cache memory since the RAID controller does not have to perform the lengthy operation of reading the data from the disk drives. The cache memory may also be employed to reduce write request latency by enabling what is commonly referred to as posted write operations. In a posted write operation the RAID controller reads the data specified by the computer system from the computer system into the RAID controller s cache memory and then immediately notifies the computer system that the write request is complete even though the RAID controller has not yet written the data to the disk drives. Posted writes are particularly useful in RAID controllers since in some redundant RAID levels a read modify write operation to the disk drives must be performed in order to accomplish the system write request. That is not only must the specified system data be written to the disk drives but some of the disk drives may also have to be read before the user data and redundant data can be written to the disks which without the benefit of posted writes may make the write latency of a RAID controller even longer than a non RAID controller.

However posted write operations make the system vulnerable to data loss in the event of a power failure. This is because the cache memory is a volatile memory that loses the user data when power is lost and the data has not yet been written to the disk drives.

To solve this problem some RAID controllers include a battery to continue to provide power to the cache memory in the event of a loss of main power. Although the battery greatly reduces the likelihood that user data will be lost because the energy stored in the battery is finite the possibility still exists that the battery energy will run out before main power can be restored in which case the user data will be lost. The minimum length of time the battery must supply power to the cache memory varies among users of RAID systems however many consumers require at least 72 hours in the event a power failure occurs on a weekend.

However there are some well known limitations associated with the use of batteries in this application. First batteries are a relatively expensive component of the RAID controller. Second for many of the relevant battery technologies the ability of the battery to hold a charge begins to degrade within two or three years which is typically less than the expected lifetime of the RAID controller. Consequently the RAID controller must be designed with the battery as a field replaceable unit and in many cases as a hot pluggable field replaceable unit. This adds further cost to the RAID controller. Third the operating temperature range of batteries outside of which their lifetime and performance degrade significantly is relatively small. Fourth after the battery has been drained due to a main power outage the RAID controller must operate in lower performance write through cache mode until the battery is re charged and the re charge time of batteries is relatively long. Fifth as the size of cache memories increases so does the amount of energy the battery must provide during the main power outage given contemporary battery energy densities the size of the battery required to provide the required amount of energy may exceed the available space within the RAID controller.

To solve this problem U.S. patent application Ser. No. 11 226 825 filed Sep. 14 2005 describes a storage controller that includes a capacitor pack or battery and a non volatile memory such as a FLASH memory. When main power is lost the capacitor pack or battery supplies power from its stored energy for the controller to backup or flush the write cache data to the non volatile memory. Thus advantageously even if the capacitor pack or battery is drained and no longer able to supply power before main power is restored the write cache data is retained in the non volatile memory so that when main power is restored and the controller is rebooted the write cache data is restored to the write cache and subsequently flushed to the disk drives.

Whether using a battery or a capacitor pack as the rechargeable energy source to supply backup power it is important to monitor the energy source to insure that the energy source continues to have the capacity to store enough energy to perform the backup operation otherwise write cache data may be lost. When the energy source no longer has the capacity to store enough energy to perform its intended function such as to supply power to perform a backup operation it is said to have reached its end of life or its lifetime has expired. If the energy source is a battery monitoring the lifetime of the battery is relatively simple since the typical lifetime of a battery is relatively constant for a given battery technology. For example the lifetime of a Lithium ion battery commonly used for applications such as a write caching storage controller is approximately 3 years. Consequently the remaining lifetime of a battery can be monitored simply by keeping the actual real time or calendar time the battery is in existence such as via a real time clock circuit.

In contrast to a battery the lifetime of a capacitor is largely a non linear function of its temperature operating voltage polarity changes and excessive current draw and the lifetime may vary widely based on these factors. For example in a given application at a given operating voltage a capacitor may have a lifetime as large as one million hours at an operating temperature of 10 degrees Celsius whereas the same capacitor may have a lifetime as small as one thousand hours at an operating temperature of 80 degrees Celsius. Similarly at a given temperature a capacitor may have a lifetime at an operating voltage of 1.8 Volts that is almost three times its lifetime at an operating voltage of 2.5 Volts. Therefore the simple real time clock technique used to monitor battery lifetime is inadequate for capacitors in many applications because the variability in capacitor lifetime may pose an unacceptable risk of data loss for write caching storage controllers.

The recommended method by capacitor manufacturers for measuring the capacitance of a capacitor which is effectively a measure of its lifetime because its capacitance determines the amount of energy it can store is to discharge and then recharge the capacitor measure the current draw and time required to recharge and calculate the capacitance from the measured values. However this method is undesirable for write caching storage controller applications since it would require the write cache to be placed into write through mode during the discharging recharging process in order to avoid the potential loss of write cache data due to the inability to perform the backup operation in the event of a main power loss.

Therefore what is needed is an alternate method for determining the lifetime of a capacitor pack other than monitoring the capacitor pack s real time existence or measuring its capacitance by discharging and recharging it.

Furthermore unlike a battery the capacitor pack may not be field replaceable and the storage controller manufacturer may warrant a lifetime of the capacitor pack to the consumer or user of the storage controller. Therefore given the large variability of a capacitor pack lifetime what is needed is a way to increase the likelihood that the capacitor pack reaches the lifetime that the storage controller manufacturer warranted to the user.

The present invention dynamically adjusts the size of a write cache of a storage controller if reducing the operating voltage of the capacitor pack to extend its lifetime would cause the capacitor pack to no longer be capable of storing sufficient energy to backup the current size write cache to a non volatile memory of the storage controller in the event of a main power loss. The write cache size is adjusted if necessary before the reduction of the operating voltage.

In one aspect the present invention provides a method for improving the data availability of a write caching storage controller having a capacitor pack used to supply power for backing up a volatile write cache to a non volatile memory in response to a loss of main power. The method includes determining whether reducing an operating voltage of the capacitor pack to a new value would cause the capacitor pack to be storing less energy than required for backing up the volatile write cache to the non volatile memory. The method also includes reducing a size of the volatile write cache prior to the reducing the operating voltage if the reducing the operating voltage to the new value would cause the capacitor pack to be storing less energy than required for backing up the volatile write cache to the non volatile memory.

In another aspect the present invention provides a high data availability write caching storage controller. The controller includes a volatile memory with a write cache for caching write cache data. The controller also includes a non volatile memory coupled to the volatile memory. The controller also includes a capacitor pack coupled to the volatile and non volatile memory for supplying power for backing up the write cache to the non volatile memory in response to a loss of main power. The controller also includes a CPU coupled to the volatile and non volatile memory for dynamically determining a size of the write cache. The CPU determines whether reducing an operating voltage of the capacitor pack to a new value would cause the capacitor pack to be storing less energy than required for backing up the write cache having a current the size to the non volatile memory. The CPU reduces the size of the volatile write cache prior to reducing the operating voltage if reducing the operating voltage to the new value would cause the capacitor pack to be storing less energy than required for backing up the write cache having the current the size to the non volatile memory.

In another aspect the present invention provides a method for improving the data availability of a write caching storage controller having a capacitor pack used to supply power for backing up a volatile write cache to a non volatile memory in response to a loss of main power. The method includes determining a size of the volatile write cache for which the capacitor pack would have a capacity to store enough energy to backup the size volatile write cache to the non volatile memory if an operating voltage of the capacitor pack was reduced to a new value. The method also includes reducing the volatile write cache to the size prior to reducing the operating voltage to the new value if the size is less than a current size of the write cache.

In another aspect the present invention provides a high data availability write caching storage controller. The controller includes a volatile memory having a write cache for caching write cache data. The controller also includes a non volatile memory coupled to the volatile memory. The controller also includes a capacitor pack coupled to the volatile and non volatile memory for supplying power for backing up the write cache to the non volatile memory in response to a loss of main power. The controller also includes a CPU coupled to the volatile and non volatile memory. The CPU determines a size of the volatile write cache for which the capacitor pack would have a capacity to store enough energy to backup the size volatile write cache to the non volatile memory if an operating voltage of the capacitor pack was reduced to a new value. The CPU also reduces the volatile write cache to the size prior to reducing the operating voltage to the new value if the size is less than a current size of the write cache.

Referring now to a block diagram illustrating a RAID controller according to the present invention is shown. In one embodiment the RAID controller may be one of a pair of active active redundant fault tolerant RAID controllers for providing high data availability. In the event of a failure of one RAID controller such as the failure to flush posted write data from volatile memory to non volatile memory as described herein the system may failover to the other RAID controller . The RAID controller includes one or more capacitors for supplying power to selected portions of the RAID controller circuits during the loss of main power for enabling a memory controller thereof to quickly and efficiently flush the posted write data from a cache memory to a non volatile memory. Advantageously the RAID controller periodically samples the temperature and voltage of the capacitors and adaptively calculates an effective age of the capacitors using lifetime characteristic information to normalize operating intervals of the capacitors based on empirically gathered lifetime information for each sampled temperature and voltage value combination. Furthermore the RAID controller dynamically adjusts the operating voltage of the capacitors such as in response to an increase in temperature based on the capacitor s effective age in order to insure the capacitors reach the lifetime warranted to users. Finally if the controller determines that the capacitance of the capacitors has dropped such that they would not be capable of storing enough energy to perform the backup operation at the newly adjusted voltage the controller dynamically reduces the size of the write cache to a size for which the capacitors have the capacity to store enough energy to perform the backup operation.

The RAID controller includes a host interface for interfacing with host computers. In one embodiment the RAID controller is a local bus based controller such as a controller that plugs into or is integrated into a local I O bus of the host computer system such as a PCI PCI X CompactPCI PCI Express PCI X2 EISA VESA VME RapidIO AGP ISA 3GIO HyperTransport Futurebus MultiBus or any other local bus. In this type of embodiment the host interface comprises a local bus interface of the local bus type. In another embodiment the RAID controller is a standalone controller in a separate enclosure from the host computers that issue I O requests to the RAID controller . For example the RAID controller may be part of a storage area network SAN . In this type of embodiment the host interface may comprise various interfaces such as Fibre Channel Ethernet InfiniBand SCSI HIPPI Token Ring Arcnet FDDI LocalTalk ESCON FICON ATM SAS SATA iSCSI and the like.

The RAID controller also includes a disk interface for interfacing to disk drives or other mass storage devices including but not limited to tape drives solid state disks SSD and optical storage devices such as CDROM or DVD drives. The disk drives store user data. The disk interface may include but is not limited to the following interfaces Fibre Channel Small Computer Systems Interface SCSI Advanced Technology Attachment ATA Serial Attached SCSI SAS Serial Advanced Technology Attachment SATA Ethernet Infiniband HIPPI ESCON iSCSI or FICON. The RAID controller reads and writes data from or to the disk drives in response to I O requests received from host computers.

The RAID controller also includes a volatile cache memory or cache memory or volatile memory . The volatile cache memory includes a write cache and a read cache . The volatile cache memory is volatile because it ceases to store its data when it is not powered. In one embodiment the volatile cache memory comprises double data rate synchronous dynamic random access memory DDR SDRAM which includes a self refresh mode. When the SDRAM is placed into self refresh mode the SDRAM consumes less power than when not operating in self refresh mode. In other embodiments the volatile cache memory may include other types of volatile memory including but not limited to static random access memory SRAM . The amount of volatile cache memory may be significant. Embodiments in which the volatile cache memory comprises 512 MB 1 GB and 2 GB are contemplated however other embodiments are contemplated in which more or less volatile cache memory is included on the RAID controller .

The volatile cache memory is employed by the RAID controller to buffer data transferred between the hosts and disks. When a host requests data to be written to the disks the RAID controller transfers the data from the host via the host interface into the write cache of the volatile cache memory and subsequently transfers the data from the write cache via the disk interface to the disks. Conversely when a host requests data to be read from the disks the RAID controller transfers the data from the disks via the disk interface to the read cache of the volatile cache memory and subsequently transfers the data from the read cache via the host interface to the host.

As mentioned above when a host requests data be written to the disks the RAID controller transfers the data from the host via the host interface into the volatile cache memory and subsequently transfers the data from the volatile cache memory via the disk interface to the disks. Normally the RAID controller does not indicate to the host that the write request is complete until the data is actually written to disk. However if configured to do so the RAID controller may cache the data in the volatile cache memory and indicate to the host that the write request is complete before the data is actually written to the disk and then subsequently write or flush the data to disk. This operation is referred to as write caching or may also be referred to as a posted write operation. The data associated with a posted write operation is referred to as posted write data or write cache data. That is posted write data is data stored in the volatile cache memory that has not yet been written to disk but concerning which the RAID controller has told the host that the write operation has completed. Additionally the posted write data as referred to herein may comprise metadata which is used to refer to control information required to write the data to disk including but not limited to the logical block addresses and disk drive unit numbers to which the data must be written and information specifying whether the data is part of a RAID array with a RAID level requiring redundant data to be generated based on the posted write data that also must be written to disk.

The volatile cache memory may also be used by the RAID controller to perform read caching of data i.e. to provide requested data to the hosts from the volatile cache memory rather than from the disks if the requested data is already present in the volatile cache memory because of a previous read request of the same data. Finally the RAID controller may use the volatile cache memory for buffering redundant RAID data generated for writing to the disks.

The RAID controller also includes a CPU subsystem for fetching and executing program instructions to control the transfer of data between the disk drives and the hosts such as described above. The CPU subsystem may include any processor capable of executing stored programs including but not limited to for example a processor and chipset such as an x86 architecture processor and what are commonly referred to as a North Bridge or Memory Control Hub MCH and a South Bridge or I O Control Hub ICH which includes I O bus interfaces such as an interface to an ISA bus or a PCI family bus. In one embodiment the CPU subsystem comprises a Transmeta TM8800 processor that includes an integrated North Bridge and an ALi M1563S South Bridge. In another embodiment the CPU subsystem comprises an Intel Celeron M processor and an MCH and ICH. In another embodiment the CPU subsystem comprises an AMD Mobile Sempron processor with an integrated North Bridge and an Ali M1563S South Bridge. In one embodiment the CPU subsystem also includes RAM for storing program instructions that are fetched and executed by the microprocessor and a FLASH memory coupled to the CPU subsystem for storing the program instructions in a non volatile manner and which is decompressed and written to the program RAM for execution by the microprocessor. In one embodiment the FLASH memory also stores information such as a signature for comparing with a signature written to a non volatile memory described below to indicate a successful flush of the cache memory to the non volatile memory as described below.

The CPU subsystem receives host computer I O requests from the host interface and processes the requests. Processing the requests may include various functions. For example the host I O request specifies a logical block number and number of blocks of data to be transferred to or from the redundant array however these logical blocks and number of blocks do not typically correspond to the appropriate physical block numbers and number of blocks on the physical disks comprising the redundant array. Therefore the logical block number specified in the host I O request must be translated into the appropriate physical block number number of blocks and disk to be used in performing one or more data transfers between the RAID controller and the disks comprising the redundant array. This translation function is performed by the CPU subsystem . In one embodiment the CPU subsystem performs the translation according to well known RAID techniques. After performing the translation the CPU subsystem programs the disk interface to perform the data transfers between the disks and the volatile cache memory . Additionally the CPU subsystem programs the host interface to perform data transfers between the host computers and the volatile cache memory . Thus when processing a host I O request to write data from a host computer to a redundant array the CPU subsystem programs the host interface to transfer data from the host computer to the volatile cache memory after the data is received into the volatile cache memory the CPU subsystem programs the disk interface to transfer the data from the volatile cache memory to the translated appropriate physical block numbers of the disks comprising the redundant array. Conversely when processing a host I O request to read data from a redundant array to a host computer the CPU subsystem programs the disk interface to transfer the data to the volatile cache memory from the translated appropriate physical block numbers of the disks comprising the redundant array after the data is received into the volatile cache memory the CPU subsystem programs the host interface to transfer the data to the host computer from the volatile cache memory . The CPU subsystem also performs the function of managing allocation of portions of the volatile cache memory for performing the data transfers and in particular of cache management i.e. managing the volatile cache memory as a cache memory for caching portions of the data buffered in volatile cache memory in order to improve I O performance between the redundant arrays and the host computers according to well known caching techniques. In one embodiment the CPU subsystem performs exclusive OR operations of the data required in certain RAID levels that employ parity data as the redundant data such as RAID level 5 for example. In one embodiment the CPU subsystem programs a dedicated exclusive OR circuit comprised within the memory controller to perform the exclusive OR operation on the user data to generate the redundant parity data.

The RAID controller also includes a non volatile memory . The non volatile memory is non volatile because it continues to store its data when it is not powered. In one embodiment the non volatile memory comprises a Compact FLASH memory device comprising NAND Flash devices and a controller that presents an ATA interface to a memory controller which is described below . Embodiments in which the non volatile memory comprises 256 MB 512 MB and 1 GB contemplated however other embodiments are contemplated in which more or less non volatile memory is included on the RAID controller . In one embodiment the non volatile memory comprises a micro disk drive. The non volatile memory is used by the RAID controller to backup or flush the contents of the volatile cache memory particularly the posted write data in response to a loss of main power so that when main power returns the posted write data may be restored from the non volatile memory to the volatile cache memory . In one embodiment the non volatile memory comprises a NAND Flash memory array to which the memory controller writes directly. Preferably each NAND Flash memory device in the array comprises an 8 bit wide data device and the devices are arranged such that the memory controller performs 16 bit or 32 bit wide write accesses to the non volatile memory to increase the write rate thereby further decreasing the flush operation time. Software executing on the CPU stores an accumulated normalized running time and an accumulated calendar running time in the non volatile memory . In an alternative embodiment the software executing on the CPU stores the accumulated normalized running time and an accumulated calendar running time in the code FLASH memory . The use of the accumulated normalized running time and accumulated calendar running time are described in detail below.

The RAID controller also includes a memory controller coupled to the disk interface host interface cache memory and non volatile memory . The memory controller controls accesses by the disk interface host interface and CPU subsystem to the cache memory and non volatile memory . In one embodiment the memory controller also functions as a bus bridge for bridging communications between the volatile cache memory bus the non volatile memory bus the CPU subsystem bus and the host interface and disk interface buses. In one embodiment the memory controller is a custom large scale integrated circuit. In one embodiment the memory controller comprises a custom programmable logic device. The memory controller is described in more detail below with respect to .

During normal operation the RAID controller receives power from a main power source external to the RAID controller including but not limited to a common commercially supplied A C power source as is well known in the art of power supplying. However the RAID controller also includes one or more capacitors or capacitor pack for supplying power to the RAID controller in the event of a loss of main power as described in more detail below. If some or all of the charge or energy store on the capacitors is depleted because of a main power outage the capacitors are re charged from the main power source once main power is restored. In one embodiment the capacitors employ Aerogel carbon technology as an active material and are configured as an array of parallel capacitors in a single package. In one embodiment the capacitors comprise four model B1860 2RS107 PowerStor B Series Aerogel Supercapacitors manufactured by Cooper Bussman of Boynton Beach Fla. a division of Cooper Industries. However other embodiments are contemplated and the present invention is not limited to a particular capacitor model or capacitor technology.

The RAID controller also includes a power regulator coupled to receive power from both the capacitors and the main power source. The power regulator senses whether the main power source is supplying power and if so regulates the main power source to provide power to the various RAID controller circuits. If the main power source is not supplying adequate power the power regulator regulates the capacitors to provide power to a subset of the RAID controller circuits as described in more detail below.

The RAID controller also includes a power manager coupled to the power regulator and to the memory controller . The power manager also senses whether the main power source is supplying power. If the power manager senses a loss of main power the power manager selectively instructs the memory controller to flush the posted write data from the cache memory to the non volatile memory as described in detail below. In one embodiment the power manager comprises a micro complex programmable logic device CPLD that consumes very low power. Additionally other circuits may be employed to perform the functions described herein that are performed by the power manager such as custom integrated circuits or discrete components.

In the embodiment of when main power is lost the capacitors supply power only to the cache memory the non volatile memory the memory controller and power manager and other circuits required to keep those circuits operational such as bus terminators of the high speed memory bus coupling the memory controller to the cache memory . That is the capacitors supply power only to the circuits required to perform the flush operation of the posted write data from the cache memory to the non volatile memory . Advantageously the capacitors do not supply power to the circuits not required to perform the flush namely the CPU subsystem disk interface host interface and unneeded portions of the memory controller such as the portions for interfacing with the CPU subsystem disk interface and host interface .

In the present disclosure a flush operation refers to a copying of data from the cache memory to the non volatile memory in response to a loss of main power whereas a restore operation refers to a copying of data from the non volatile memory to the cache memory after main power is restored. The RAID controller selectively performs a restore operation when main power is restored as described below.

The RAID controller also includes temperature sensors that sense the ambient temperature of the capacitor pack and provide the sampled temperature to the CPU . Additionally the RAID controller also includes voltage sensors that sense the voltage of the capacitor pack and provide the sampled voltage to the CPU . Furthermore the RAID controller also includes current sensors that sense the current drawn by the capacitor pack when charging and provide the sampled current to the CPU . In one embodiment the CPU reads the sampled temperature voltage and current values via the memory controller and or power manager . In one embodiment the temperature sensors voltage sensors and current sensors comprise an IC slave device that includes an analog to digital converter. The CPU uses the sampled temperature voltage and current values to monitor and maintain the lifetime of the capacitor pack as described below in detail.

Referring now to a block diagram illustrating in more detail the memory controller of according to the present invention is shown. The memory controller includes control logic for controlling various portions of the memory controller . In one embodiment the control logic includes a direct memory access controller DMAC that copies the data from the volatile cache memory to the non volatile memory during the flush operation.

The control logic receives a reset signal from the power manager of . When the power manager asserts the reset signal the memory controller is reset. The power manager is configured to selectively reset the cache memory in such a manner that when the RAID controller is reset or when main power is restored if the contents of the cache memory are still valid the memory controller does not invalidate the contents of the cache memory . For example if the cache memory is in the process of performing a flush operation the power manager does not reset the memory controller thereby enabling the CPU subsystem to gracefully abort the flush operation as described below.

The control logic also receives a pwr state signal from the power manager . The power manager instructs the memory controller to perform actions via the pwr state signal as described in Table 1 below. In particular the power manager instructs the memory controller to flush the cache memory contents to the non volatile memory with one value of the pwr state signal and instructs the memory controller to place the cache memory into self refresh mode with another value of the pwr state signal in response to different events such as a loss of main power or completion of a flush operation as discussed below.

The control logic also provides a flush status signal to the power manager . The memory controller provides the power manager with the current cache memory to non volatile memory flush state via the flush status signal as described in Table 2 below. In particular the memory controller indicates to the power manager via the flush status signal whether or not a flush operation is in progress and whether or not a flush operation has completed with or without errors.

The memory controller also includes a local bus interface such as a PCI X interface for interfacing the memory controller to the disk interface another local bus interface such as a PCI X interface for interfacing the memory controller to the host interface a memory bus interface such as a DDR SDRAM interface for interfacing the memory controller to the cache memory and an ATA interface for interfacing the memory controller to the non volatile memory . The local bus interfaces and memory bus interface and ATA interface are all coupled to the control logic and are also coupled to buffers such as first in first out FIFO buffers that buffer data transfers between the various interfaces and provide parallel high speed data paths therebetween. In one embodiment the ATA interface supports ATA PIO Mode 4 and a data transfer rate of up to 16.7 MB second.

The memory controller also includes a local bus interface such as a PCI interface coupled to the control logic for interfacing the memory controller to the CPU subsystem . The CPU subsystem accesses the cache memory non volatile memory disk interface and host interface via the PCI interface .

The memory controller also includes control and status registers CSRs coupled to the local bus interface and to the control logic . The CSRs are programmable by the CPU subsystem of to control the memory controller and are readable by the CPU subsystem for the memory controller to provide status to the CPU subsystem . Among the CSRs are control registers that enable the CPU subsystem to specify the location and size of one or more regions of data such as posted write data in the cache memory which the memory controller is to flush to the non volatile memory when main power is lost. The CSRs are described in detail below with respect to .

Referring now to a block diagram illustrating the CSRs of according to the present invention is shown. The various CSRs and their contents are described in the text and Tables below.

The NVB FLUSH CTRL Register provides the CPU subsystem the ability to initiate a flush operation similar to the ability of the power manager to initiate a flush operation via the pwr state signal and provides the CPU subsystem the ability to read the status of a flush operation similar to the ability of the power manager to read the flush operation status via the flush status signal . When main power is restored and the CPU subsystem software boots a flush operation may still be in progress and the cache memory contents may still be valid. Consequently in one embodiment the CPU subsystem may command the memory controller to abort an in progress flush operation since the cache memory contents may still be valid by writing a 0 to the FLUSH START bit in the NVB FLUSH CTRL Register as described in Table 3.

The NVB RESTORE CTRL Register provides the CPU subsystem the ability to initiate a restore operation from non volatile memory to cache memory and provides the CPU subsystem the ability to read the status of a restore operation.

The NVB RAM START ADDR Register specifies the starting address in the cache memory of a first region of data that is the source or sink of a flush or restore operation respectively.

The NVB ATA START ADDR Register specifies the starting address in the non volatile memory of the first region of data that is the sink or source of a flush or restore operation respectively. In one embodiment the memory controller converts the non volatile memory address specified in the NVB ATA START ADDR Register to a sector number if the non volatile memory is a sectored ATA device.

The NVB SIZE Register specifies the total size or length of the first region of data that is to be copied by a flush or restore operation.

The NVB RAM START ADDR Register specifies the starting address in the cache memory of a second region of data that is the source or sink of a flush or restore operation respectively.

The NVB ATA START ADDR Register specifies the starting address in the non volatile memory of the second region of data that is the sink or source of a flush or restore operation respectively. In one embodiment the memory controller converts the non volatile memory address specified in the NVB ATA START ADDR Register to a sector number if the non volatile memory is a sectored ATA device.

The NVB SIZE Register specifies the total size or length of the second region of data that is to be copied by a flush or restore operation.

The NVB SECTOR COUNT Register specifies the number of sectors to use for each write read command issued by the memory controller to the non volatile memory ATA device. The NVB SECTOR COUNT Register may be used to optimize the speed of the flush and restore operations to and from the non volatile memory ATA device. The NVB SECTOR COUNT Register is used in conjunction with the NVB SIZE Register . For example the CPU subsystem may program the NVB SIZE Register with a value of 256 KB and the NVB SECTOR COUNT Register with a value of 32 resulting in the 256 KB of data being written as 16 write commands of 32 sectors 16 KB each. The NVB SIZE Register must be programmed with a value that is a multiple of the NVB SECTOR COUNT Register value.

The NVB PROGRESS Register specifies the current address in the cache memory being read from or written to during a flush operation or restore operation respectively. The NVB PROGRESS Register is valid only when a flush or restore operation is in progress. The NVB PROGRESS Register enables the CPU subsystem to assess the progress of a flush or restore operation. If the flush or restore operation generates an error the NVB PROGRESS Register value specifies the approximate address where the error occurred. If a flush or restore operation is aborted the NVB PROGRESS Register will have incremented to the next sector after the abort occurs.

The ATA INT STATUS Register may be read by the CPU subsystem to determine whether the non volatile memory ATA device has generated an interrupt such as upon the successful read or write of one or more sectors of data during a flush or restore operation and to determine whether a flush or restore operation has completed. The ATA INT STATUS Register also enables the CPU subsystem to clear the interrupt source.

The ATA INT ENABLE Register enables the CPU subsystem to enable or disable interrupt sources specified by the ATA INT STATUS Register .

The NVB ERROR CODE Register specifies the error type when a flush or restore operation completes if the NVB FLUSH CTRL Register or NVB RESTORE CTRL Register indicates a failure. When an ECC error is detected the operation terminates at the next sector boundary. Consequently up to 512 bytes may be transferred after the error occurs. In one embodiment the CPU subsystem has the ability to cause ECC errors to be ignored. Hardware detection of ATA device errors is performed by checking the contents of the ATA Device Status register which is a Task File register in the ATA Direct Access Registers discussed below. The memory controller reads the ATA Device Status register after issuing the ATA command and after the transfer of each sector completes. Consequently ATA device errors are detected and reported at the sector boundary where the error occurs i.e. up to 512 bytes may transfer after the ATA error actually occurs. Likewise ATA operations terminate only at a sector boundary.

The NVB CONFIG Register enables the CPU subsystem to configure aspects of a flush operation. In particular the CPU subsystem may enable the memory controller to automatically perform a flush operation or may disable the memory controller from automatically performing a flush operation. Additionally the CPU subsystem may selectively instruct the memory controller via the NVB CONFIG Register to write to the non volatile memory information specifying the results of a flush operation when the flush operation ends whether the flush was successful or was aborted or an error occurred as described below. The memory controller writes the flush results information to a predetermined flush results sector of the non volatile memory ATA device. In one embodiment the flush results sector is the first sector of the non volatile memory .

The ATA CRC Register contains the 32 bit CRC for the data when a flush or restore operation is completed. The CRC data is automatically written to the write results sector if the option is enabled. In one embodiment a flush operation writes the CRC value to the write results sector and when a restore operation is performed the CRC value is compared to the ATA CRC Register value to determine if any data corruption occurred during the flush or restore operation indicated by a mismatch.

The format of the flush results information written to the non volatile memory ATA device flush results sector is described in Table 19 below.

The Completion Signature value is also stored in the code FLASH so that the CPU subsystem can compare it with the Completion Signature in the non volatile memory flush results sector to determine whether a flush operation was successful. Additionally in one embodiment the memory controller computes a running cyclic redundancy code CRC of the data as it flushes the data to the non volatile memory and writes the final CRC value to the flush results sector at the offset shown in Table 19. This enables the CPU subsystem to generate a CRC when reading the data during a restore operation to verify that the data is valid i.e. that the data was accurately written to the non volatile memory by the flush operation by comparing with the ATA CRC Register value.

The ATA Direct Access Registers comprise control and status registers used by the CPU subsystem to communicate with the non volatile memory ATA device. In one embodiment the ATA Direct Access Registers comprise a standard ATA register file commonly known as a Task File which is well known in the art of disk drives. The memory controller reads and writes the ATA Direct Access Registers to perform ATA commands with the non volatile memory ATA device such as writes of posted write data during a flush operation and reads of the data during a restore operation. The CPU subsystem may also directly access the ATA Direct Access Registers .

Referring now to a flowchart illustrating operation of the RAID controller of to perform a flush operation according to the present invention is shown. Flow begins at block .

At block the CPU subsystem programs the memory controller CSRs of with the information needed by the memory controller to perform an automatic flush operation. Preferably the CPU subsystem software performs this function as part of its initialization sequence during boot up. However in conjunction with the dynamic write cache size embodiments described herein the CPU may also program the memory controller CSRs after boot time during normal operation of the RAID controller with updated information in response to a write cache size adjustment. In particular the CPU subsystem programs the NVB FLUSH CTRL Register the NVB RAM START ADDR Register the NVB ATA START ADDR Register the NVB SIZE Register the NVB RAM START ADDR Register the NVB ATA START ADDR Register the NVB SIZE Register the NVB SECTOR COUNT Register the ATA INT ENABLE Register and the NVB CONFIG Register with the desired values to provide the memory controller with the necessary information to perform a flush operation. In one embodiment the CPU subsystem programs the memory controller to flush all cached data i.e. posted write data and read cached data however in another embodiment the CPU subsystem programs the memory controller to include only posted write data thereby reducing the amount of energy and time required to perform the flush operation. In addition the CPU subsystem may initialize the flush results sector to a predetermined value in order to enable the CPU subsystem to determine whether the memory controller successfully wrote the flush operation results information to the flush results sector at the end of a flush operation. For example in one embodiment the CPU subsystem writes or erases the flush results sector with a value of 0xFF for each byte in the sector. The CPU subsystem subsequently begins normal operation while the main power source supplies power to the RAID controller . Normal operation includes performing posted write operations causing posted write data to be stored into the volatile cache memory . Flow proceeds to block .

At block the main power source fails to supply power to the RAID controller . In response the capacitors begin supplying power to the predetermined portions of the RAID controller namely to the cache memory the non volatile memory the memory controller the power manager and power regulator and related circuitry. In particular the capacitors do not supply power to the CPU subsystem disk interface or host interface . Additionally the PCI X interfaces and and FIFOs that are not needed because they are used only to interface with the disk interface and host interface are not powered by the capacitors . Consequently advantageously the CPU subsystem disk interface host interface and unneeded portions of the memory controller do not consume energy during the flush operation thereby enabling the RAID controller to employ capacitors capable of storing less energy which typically implies capacitors that are less expensive and or require less space. Additionally the fact that the CPU subsystem disk interface and host interface do not consume energy stored in the capacitors leaves more energy stored in the capacitors once the flush operation is complete which increases the likelihood that the capacitors will continue to supply power to the cache memory after the flush is complete thereby keeping the posted write data intact which may alleviate the need for a restore operation when the main power is restored as described below. Flow proceeds to block .

At block the power manager detects the loss of main power and commands the memory controller via the pwr state signal to begin a flush operation of data from the cache memory to the non volatile memory . Flow proceeds to block .

At block if the AUTO FLUSH EN bit in the NVB CONFIG Register is set then the memory controller performs a flush operation based on the information previously programmed into the CSRs at block . In particular the memory controller copies the data in the two regions specified by the NVB RAM START ADDR Register NVB SIZE Register and NVB RAM START ADDR Register NVB SIZE Register to the two locations in the non volatile memory specified by the NVB ATA START ADDR Register and NVB ATA START ADDR Register respectively in a manner specified by the NVB SECTOR COUNT Register and the ATA INT ENABLE Register . In one embodiment the first region includes the portion of the posted write data that includes the actual user data and the second region includes the portion of the posted write data that is metadata. In another embodiment the first region includes the posted write user data and associated metadata and the second region includes read cached user data and associated metadata. However the use of the two regions is not limited to these embodiments. Furthermore embodiments are contemplated in which the CSRs include registers for specifying more or less than two data regions. Flow proceeds to block .

At block if the WR FLUSH RESULTS EN bit in the NVB CONFIG Register is set then the memory controller writes the flush results information specified in Table 19 above to the flush results sector of the non volatile memory at the end of the flush operation whether the flush operation was successful was aborted or was terminated due to an error. If the CPU subsystem aborts a flush or restore operation or if the memory controller detects an ECC or ATA error during the flush or restore operation then the memory controller will terminate the flush or restore operation at the next sector boundary. If the WR FLUSH RESULTS EN bit in the NVB CONFIG Register is set the memory controller will write the flush results sector and post a Boolean on the flush status signal and in the FLUSH STATUS bits of the NVB FLUSH CTRL Register . If while the memory controller is writing the flush operation results to the flush results sector itself the CPU subsystem commands an abort or the memory controller detects an error the flush operation results may or may not be written successfully to the flush results sector and if they are written the flush results information may be unreliable. Flow proceeds to block .

At block after the power manager commands the memory controller to initiate the flush operation the power manager monitors the progress of the flush operation via the flush status signal . When the flush operation completes the power manager commands the memory controller via the pwr state signal to place the cache memory into self refresh mode in order to reduce the amount of energy stored in the capacitors that is consumed by the cache memory . Flow proceeds to block .

At block the memory controller places the cache memory into self refresh mode in response to the command performed by the power manager at block . Flow proceeds to block .

At block the power manager causes the capacitors to supply power to the cache memory only. That is the power manager causes the capacitors to no longer supply power to the non volatile memory and the memory controller in order to reduce the amount of energy stored in the capacitors that is consumed while waiting until main power is restored. Flow ends at block .

Referring now to a flowchart illustrating operation of the RAID controller of in response to main power being restored after a failure of main power according to the present invention is shown. Flow begins at block .

At block the main power source resumes supplying power to the RAID controller . Consequently the CPU subsystem software boots up and begins its initialization sequence. Flow proceeds to decision block .

At decision block the CPU subsystem determines whether the cache memory contents is still valid. In one embodiment the CPU subsystem determines whether the cache memory contents is still valid by examining a data good indicator in the power manager that may be written by the memory controller . The power manager is configured such that when it is powered up the data good indicator resets to a predetermined value such as a Boolean value of zero. Furthermore the power off threshold of the power manager is at least as high as the power threshold at which the cache memory begins to lose its data. When main power is lost the memory controller writes a value into the data good indicator different from the power up reset value. Thus if the capacitors fail to supply power to the cache memory and therefore also fail to supply power to the data good indicator when main power is restored the CPU subsystem will read the power up reset value from the data good indicator rather than the value written by the memory controller . Consequently the CPU subsystem will determine that the cache memory must be restored from the non volatile memory if the flush operation was successful. However if the CPU subsystem reads from the data good indicator the value written by the memory controller then the CPU subsystem will determine that it can forego restoring the cache memory thereby making the user data available to the host computers sooner. If the cache memory contents is still valid flow proceeds to decision block otherwise flow proceeds to decision block .

At decision block the CPU subsystem determines whether a flush operation performed according to was successfully completed by examining the FLUSH STATUS bits of the NVB FLUSH CTRL Register . In one embodiment the CPU subsystem additionally determines whether the flush operation completed successfully by examining the Completion Status in the flush results sector. In one embodiment the CPU subsystem additionally determines whether the flush operation completed successfully by comparing the Completion Signature in the flush results sector with the Completion Signature in the code FLASH . In one embodiment the CPU subsystem additionally determines whether the flush operation completed successfully by comparing the CRC in the flush results sector with the CRC computed by reading the data from the non volatile memory . If the flush operation completed successfully flow proceeds to block otherwise flow proceeds to block .

At block since the posted write data has been lost the RAID controller fails over to the partner i.e. redundant RAID controller in the system. In one embodiment during normal operation when a host issues a write I O request to the RAID controller the posted write data is also written to the partner RAID controller . Consequently if one of the RAID controllers fails in particular if a flush operation fails on one RAID controller there is a high probability that the flush operation succeeded on the partner RAID controller . If so the partner RAID controller can perform a restore of the posted write data from its non volatile memory to the cache memory and subsequently flush the posted write data to disk. Flow ends at block .

At block the CPU subsystem commands the memory controller to perform a restore operation to restore the data flushed from the cache memory to the non volatile memory during the flush operation described in back to the cache memory . Prior to commanding the memory controller to perform the restore operation the CPU subsystem programs the appropriate values into the various CSRs of the memory controller needed to perform the restore operation. In one embodiment the CPU subsystem performs the restore operation rather than commanding the memory controller to perform the restore operation by simply reading data from the non volatile memory and writing the data to the cache memory . Because the restore operation is performed while the main power source is supplying power it is not as crucial that the memory controller perform the restore operation at a lower power consumption level. However this embodiment has the disadvantage that the CPU subsystem may take longer than the memory controller to complete the restore operation. Flow proceeds to block .

At block the CPU subsystem flushes the posted write data from the cache memory to disk. Flow ends at block .

At decision block the CPU subsystem determines whether a flush operation is in progress by reading the FLUSH STATUS bits of the NVB FLUSH CTRL Register . If a flush operation is in progress flow proceeds to decision block otherwise flow proceeds to block .

At decision block the CPU subsystem examines the capacitors voltage level to determine whether the voltage level is above a minimum threshold. In one embodiment the minimum voltage threshold value is programmed into the CPU subsystem software. In another embodiment the minimum voltage threshold value is user programmable via a user configuration program. If the capacitors 136 voltage level is above the minimum threshold flow returns to decision block to wait until either the flush operation completes or the capacitors 136 voltage reaches the minimum threshold otherwise flow proceeds to block .

At block the CPU subsystem aborts the flush operation by writing a Boolean to the FLUSH START bit in the NVB FLUSH CTRL Register . Flow proceeds to block .

The process of waiting to boot the RAID controller and resume normal operations if the cache memory is still good and a flush operation is in progress until either the flush completes or the capacitors 136 voltage level reaches the minimum threshold solves the problem which might exist without the benefit of the additional test at decision block as exemplified by the following sequence of events. Assume the power manager senses the loss of main power and commands the memory controller to perform a flush operation. A significant amount of the capacitors stored energy is consumed by the flush operation. Before the flush operation completes main power is restored consequently the CPU subsystem aborts the flush operation. The CPU subsystem boots up and enables another flush operation in the event of another main power loss. Shortly thereafter and significantly while the capacitors are less than fully re charged the power manager senses another loss of main power and commands the memory controller to perform another flush operation. The second flush operation consumes again a significant amount of the capacitors stored energy which began with less than a full charge. If this sequence continues eventually the capacitors will not have enough energy to complete a successful flush operation resulting in potential loss of user data. The scenario described above may be induced by periodic brown outs of the main power supply or possibly by a noisy power supply that cause the power manager to sense that main power is being lost in a relatively periodic fashion in which the period is on the order of the flush operation time. However advantageously the additional test at decision block potentially avoids this problem. In an alternate embodiment the write cache is placed in write through mode since the capacitor pack is not fully charged thereby avoiding the undesirable scenario. In another alternate embodiment at block the CPU determines whether the flush operation is complete and if so flow proceeds to block otherwise flow returns to block .

Although embodiments have been described in which the memory controller is employed to perform the posted write data flush from volatile memory to non volatile memory embodiments are contemplated in which the CPU performs the flush from volatile memory to non volatile memory as illustrated in . The embodiment of which use the CPU subsystem to perform the flush operation may be a viable embodiment if one or more of the following in combination is true the energy density of the capacitors is sufficiently high to store the energy needed by the RAID controller including the CPU subsystem to perform the flush operation the available space allocated for the capacitors on the RAID controller is sufficiently great to use enough capacitors to store the energy needed by the RAID controller including the CPU subsystem to perform the flush operation the CPU subsystem consumes a small enough amount of power such that the capacitors can store the energy needed by the RAID controller including the CPU subsystem to perform the flush operation. Although this embodiment may consume more energy than the embodiments described in if the capacitors are able to supply the required energy then the RAID controller would enjoy the benefits of capacitor technology over battery technology described herein such as lower cost higher reliability less maintenance and shorter re charge time.

Referring now to a block diagram illustrating a RAID controller according to an alternate embodiment of the present invention is shown. The RAID controller of is similar to the RAID controller of however the power manager is coupled to communicate with the CPU subsystem with respect to flush operations rather than to the memory controller as shown and as described with respect to .

Referring now to a flowchart illustrating operation of the RAID controller of to perform a flush operation according to an alternate embodiment of the present invention is shown. Flow begins at block .

At block the main power source fails to supply power to the RAID controller . In response the capacitors begin supplying power to the predetermined portions of the RAID controller namely to the cache memory the non volatile memory the memory controller the power manager power regulator CPU subsystem and related circuitry. In particular the capacitors do not supply power to the disk interface or host interface . Additionally the PCI X interfaces and and FIFOs that are not needed because they are used only to interface with the disk interface and host interface are not powered by the capacitors . Consequently advantageously the disk interface host interface and unneeded portions of the memory controller do not consume energy during the flush operation thereby enabling the RAID controller to employ capacitors capable of storing less energy which typically implies capacitors that are less expensive and or require less space. Additionally the fact that the disk interface and host interface do not consume energy stored in the capacitors leaves more energy stored in the capacitors once the flush operation is complete which increases the likelihood that the capacitors will continue to supply power to the cache memory after the flush is complete thereby keeping the posted write data intact which may alleviate the need for a restore operation when the main power is restored as described below. Flow proceeds to block .

At block the power manager detects the loss of main power and notifies the CPU subsystem that a flush operation of data from the cache memory to the non volatile memory is needed. Flow proceeds to block .

At block the CPU subsystem performs a flush operation by copying the data from the cache memory to the non volatile memory . Flow proceeds to block .

At block the CPU subsystem writes the flush results information specified in Table 19 above to the flush results sector of the non volatile memory upon completion of the flush operation whether the flush operation was successful was aborted or was terminated due to an error. Flow proceeds to block .

At block the CPU subsystem commands the power manager to cause the capacitors to supply power to the cache memory only. That is the power manager causes the capacitors to no longer supply power to the CPU subsystem non volatile memory and the memory controller in order to reduce the amount of energy stored in the capacitors that is consumed while waiting until main power is restored. Flow ends at block .

Referring now to a block diagram illustrating a table or database for storing lifetimes of the capacitor pack of for various temperature and voltage combinations according to the present invention is shown. The values indicated in are hypothetical values provided for illustration purposes and do not represent actual known values of a particular capacitor product which may be obtained from the capacitor manufacturer. Furthermore the range of temperatures shown is a hypothetical range selected for illustration purposes.

As explained above the purpose of the capacitor pack is to store energy to supply power for backing up or flushing the write cache data from the write cache to the non volatile memory in response to a main power loss. When the capacitor pack no longer has the capacity to store sufficient energy to backup the write cache to the non volatile memory the capacitor pack has reached its end of life i.e. its lifetime has expired. The capacitance of the capacitor pack drops over time as the capacitor pack is used in operation of the RAID controller . Various factors affect the capacitance drop of the capacitor pack including the temperature the operating voltage excessive current draws and changes in polarity of the capacitor pack . In one embodiment the current draw of the capacitor pack is monitored also and if the current draw exceeds a predetermined amount charging of the capacitor pack is temporarily disabled to avoid prematurely reducing the lifetime of the capacitor pack as discussed below. The polarity of the capacitor pack is kept the same during operation of the RAID controller to avoid prematurely reducing the lifetime of the capacitor pack . Thus the primary factors affecting the capacitor pack capacitance and thus lifetime are the temperature and operating voltage.

In one embodiment of the RAID controller the warranted lifetime of the capacitor pack is 5 years. That is the RAID controller manufacturer warrants that the capacitor pack will have sufficient capacitance for at least 5 years to store sufficient energy to backup the write cache to the non volatile memory . The amount of energy each capacitor in the capacitor pack is capable of storing is given by equation 1 where E is the energy stored by the capacitor C is the capacitance of the capacitor Vis the operating voltage of the capacitor and Vis the cut off voltage of the capacitor 1 In one embodiment the capacitor pack is arranged as four capacitors in series each capacitor being of the same type. Thus the total energy stored by the capacitor pack is the sum of the energy stored by each of the four capacitors in the capacitor pack or approximately four times the energy stored by a single capacitor in the pack. Furthermore the operating voltage of the capacitor pack is the sum of the operating voltage of the four capacitors in the capacitor pack or approximately four times the operating voltage of a single capacitor in the pack. The RAID controller includes an active balance equalizer circuit that employs a quad operational amplifier circuit to balance the voltage across each capacitor of the capacitor pack to be approximately one fourth of the total capacitor pack voltage. In one embodiment it is assumed that the ambient temperature and operating voltage of each of the individual capacitors in the capacitor pack is approximately the same consequently the lifetime of each of the individual capacitors is approximately the same. Another embodiment is contemplated in which the lifetime of each individual capacitor in the capacitor pack is calculated based on the temperature and individual voltage readings and the lifetime of the capacitor with the lowest computed lifetime limits the lifetime of the capacitor pack as a whole.

In one embodiment the end of life for the capacitor pack is chosen to be the condition when the individual capacitors of the capacitor pack have suffered a 30 capacitance drop from their original capacitance value. In one embodiment once the 30 capacitance drop is reached the capacitor pack is no longer capable of storing sufficient energy to perform the backup at the normal operating voltage. In another embodiment the 30 capacitance drop end of life value is chosen to provide some margin for error that is the capacitors in the capacitor pack may actually have to suffer more than the 30 capacitance drop in order to no longer be capable of storing sufficient energy to perform the backup at the normal operating voltage. The 30 capacitance drop value is used herein to illustrate the invention. However it should be understood that the invention is not limited to a particular capacitance drop value rather the invention may be practiced with other capacitance drop values depending upon the amount of energy required to perform the backup and the characteristics of the particular capacitors employed. The lifetime values specified in the table of indicate the number of hours that an individual capacitor of the capacitor pack may operate at the specified temperature and voltage before reaching its end of life percentage capacitance drop from its original capacitance value. Thus each lifetime value stored in the table may be understood as specifying a lifetime over which the capacitor pack would have a capacity to store at least a predetermined amount of energy if the capacitor pack were operated at the indexed temperature and voltage during the lifetime specified. In one embodiment the predetermined amount of energy is the calculated amount of energy required to supply sufficient energy to backup the full size write cache to the non volatile memory .

In one embodiment the table of is stored as a two dimensional array in the code FLASH and copied to the program RAM of the CPU subsystem when the RAID controller is booted so that the CPU can lookup lifetimes in the table using sampled temperature and voltage values. In the embodiment of the RAID controller supports operating the capacitor pack at two different voltages 8.2V and 7.2V as shown in the table . In the table the 8.2V operating voltage occupies index 0 of the array and the 7.2V operating voltage occupies index 1 of the array. Advantageously described herein is a method for dynamically reducing or throttling the operating voltage of the capacitor pack to the lower voltage level if necessary in order to increase the lifetime of the capacitor pack . Although the embodiment of illustrates only two possible operating voltages the invention is not limited to two operating voltages rather embodiments with a larger number of operating voltages are contemplated. Furthermore embodiments with operating voltage values other than those illustrated are contemplated. In the exemplary embodiment four capacitors are arranged in series and each capacitor operates at approximately 2.05V or 1.8V depending upon the capacitor pack operating voltage controlled by the CPU . The array comprises two columns corresponding to the two voltages. The rows of the array are indexed by the temperature value. Each row corresponds to a different integer degree Celsius value. The table of the embodiment of includes ambient temperature values from 10 degrees Celsius to 40 degrees Celsius. For example the lifetime at 40 degrees Celsius and 8.2V or 2.05V per capacitor is 800 hours and at 7.2V or 1.8V per capacitor is 820 hours as shown in . In one embodiment assuming a fixed operating voltage value the characteristics of the capacitors in the capacitor pack are such that the lifetime values approximate a logarithmic function of the temperature. The CPU uses the sampled temperature and voltage values to index the table to obtain the specified lifetime in order to calculate the accumulated normalized running time and related values as described below with respect to the remaining Figures.

As discussed above in one embodiment the warranted lifetime is 5 years. However for the sake of discussion with respect to the hypothetical values of table assume a warranted lifetime of 1000 hours. As may be observed from table if the capacitor pack were continuously operated at 8.2V and 25 degrees Celsius it would have a lifetime of the warranted 1000 hours i.e. it would reach its end of life percentage capacitance drop e.g. 30 after 1000 hours. In contrast if the capacitor pack was continuously operated at 7.2V and 28 degrees Celsius it would have a lifetime of the warranted 1000 hours i.e. it would reach its end of life capacitance drop after 1000 hours. Thus the normal temperature when operating the capacitor pack at 8.2V is 25 degrees and the normal temperature when operating at 7.2V is 28 degrees. That is the normal temperature for a given operating voltage is the temperature at which the capacitor pack lifetime meets the warranted lifetime or exceeds the warranted lifetime where margin is desired. However whereas the values of the table may be derived experimentally in laboratory conditions in which the temperature and voltage of the capacitors are maintained at constant values when the capacitor pack is operating within the RAID controller within a computer system the temperature will vary from the normal temperature. Similarly advantageously the operating voltage of the capacitor pack may be purposely dynamically adjusted when necessary in order to increase the lifetime of the capacitor pack to attempt to provide the warranted lifetime as described below. Thus advantageously the present invention describes how the RAID controller normalizes the lifetime values obtained from the table relative to the normal temperature for the particular operating voltage level as described below with respect to .

In one embodiment the capacitor pack includes four 50 Farad capacitors in series storing approximately 356 Joules of usable energy when fully charged and at full capacitance assuming a 2.05V operating voltage of each capacitor and a 0.8V cut off voltage which defines the minimum working voltage for reliable FET gate thresholds and low drop out regulation in contrast at a 30 capacitance drop the capacitor pack is capable of storing only 250 Joules. The capacitor pack is capable of storing 260 Joules of usable energy assuming a 1.8V operating voltage of each capacitor in contrast at a 30 capacitance drop the capacitor pack is capable of storing only 182 Joules. In one embodiment the power consumption of the cache memory non volatile memory memory controller power manager DDR SDRAM bus interface termination circuitry a clocking circuit and other miscellaneous circuitry requiring power during the flush operation is approximately 4 Watts. The non volatile memory is capable of being written to at a sustained rate of approximately 10 MB second. In one embodiment the size of the cache memory is 1 GB which comprises approximately 512 MB for a full size write cache and the size of the non volatile memory is 512 MB. Consequently the flush operation takes approximately 50 seconds to complete and consumes approximately 200 Joules of energy. Thus as may be observed when the capacitor pack is operating at the lower 7.2V level even before capacitor pack reaches the 30 capacitance drop end of life the capacitor pack may not be able to store sufficient energy to backup the entire write cache . Advantageously described herein is a method for dynamically reducing the write cache to a size for which the capacitor pack can supply enough energy to perform the backup.

Although embodiments are described herein in which the warranted lifetime is based on a predetermined amount of energy required to perform the write cache to non volatile memory backup the capacitor pack lifetime monitoring and dynamic voltage throttling methods described herein are not limited to such an application. Rather other embodiments are contemplated in which the warranted lifetime is based on a predetermined amount of energy required to perform other functions. For example embodiments are contemplated in which the RAID controller does not include a non volatile memory for backing up the write cache and the predetermined amount of energy is an amount of energy required to supply power to the volatile memory for a predetermined amount of time e.g. 3 days during loss of main power in order to retain the integrity of the data in the write cache until main power can be restored.

Referring now to a flowchart illustrating operation of the RAID controller of according to the present invention is shown. In particular illustrates how the RAID controller calculates the accumulated normalized running time of the capacitor pack . Flow begins at block .

At block the CPU initializes the accumulated normalized running time and accumulated calendar running time . In one embodiment the accumulated normalized running time and accumulated calendar running time are initialized when the RAID controller is manufactured. In one embodiment the accumulated normalized running time and accumulated calendar running time are initialized to zero. In another embodiment the accumulated normalized running time and accumulated calendar running time are initialized to an amount of time based on the tolerance factor of the capacitance value of the capacitor pack such as specified by the manufacturer of the capacitor pack. For example if the capacitor manufacturer specifies a 10 tolerance then the accumulated normalized running time and accumulated calendar running time are initialized to 10 of the end of life value e.g. 10 of 5 years. In another embodiment the accumulated normalized running time and accumulated calendar running time are initialized to a calendar age such as the amount of time since the manufacture of the capacitor pack . Other embodiments are contemplated in which the accumulated normalized running time and accumulated calendar running time are initialized to a value based on a combination of tolerance value and calendar age. Other embodiments are contemplated in which the accumulated normalized running time and accumulated calendar running time are initialized to a value based on a desired margin of error. Flow proceeds to block .

At block the CPU periodically samples the temperature and voltage of the capacitor pack via the temperature sensors and voltage sensors respectively of over a larger time interval and averages the sampled temperature and voltage. In one embodiment the sample period is 15 seconds and the averaging interval is one hour. Advantages of averaging the sampled values over a larger interval and writing the accumulated normalized running time and accumulated calendar running time to the non volatile memory once per the larger interval time rather than each time the values are sampled are that it reduces the amount of CPU bandwidth consumed and potentially avoids exceeding the maximum number of write cycles to the non volatile memory . Flow proceeds to block .

At block the CPU looks up the lifetime at the averaged temperature and voltage of block by indexing the table of to obtain the lifetime for the averaged temperature and voltage. In one embodiment the averaged temperature and voltage values are rounded up to the next highest value if necessary. For example if the average temperature is 30.8 degrees then the value is rounded up to 31 degrees for use as an index into the table of . Similarly if the average sampled voltage is 7.8V then the value is rounded up to 8.2V and the voltage index into the table is 0. It is noted that in an alternate embodiment if the lifetime values are susceptible to being expressed by a function of temperature and voltage the lifetime values may be calculated from the function rather than looked up in the table . A potential disadvantage of this embodiment is that it may require of the CPU more computation bandwidth in particular to perform floating point computations than the table lookup method. However a potential advantage of this embodiment is that it may enable a finer granularity of temperature and voltage values than the lookup table method. Flow proceeds to block .

At block the CPU normalizes the interval by multiplying the interval by the ratio of the warranted lifetime to the lifetime value obtained at block . For example assume the interval is one hour the warranted lifetime is 1000 hours and the lifetime obtained at block is 2000 hours because the measured temperature and or voltage are below the normal temperature and voltage then the normalized interval would be 1 hour 1000 2000 0.5 hours thus the normalized interval is less than the calendar time of the interval thereby indicating that effectively less than one hour of the capacitor pack lifetime was reduced during the one hour calendar operating interval. In contrast assume the lifetime obtained at block is only 500 hours because the measured temperature and or voltage are above the normal temperature and voltage then the normalized interval would be 1 hour 1000 500 2 hours thus the normalized interval is more than the calendar time of the interval thereby indicating that effectively more than one hour of the capacitor pack lifetime was reduced during the one hour calendar operating interval. Flow proceeds to block .

At block the CPU adds the normalized interval calculated at block to the accumulated normalized running time to produce an updated accumulated normalized running time value reflecting the effect of operating the capacitor pack at the average temperature and voltage obtained at block over the interval of block . Additionally the CPU adds the averaging interval i.e. the non normalized interval e.g. one hour to the accumulated calendar running time to produce an updated accumulated calendar running time value. Flow proceeds to block .

At block the CPU writes the updated accumulated normalized running time and accumulated calendar running time calculated at block to the non volatile memory so that their values may be maintained through a loss of main power and subsequently used again after the RAID controller is rebooted. Flow proceeds to block .

At block the CPU calculates the percent of normalized warranted lifetime used as the ratio of the accumulated normalized running time to the warranted lifetime. For example if the accumulated normalized running time is 200 hours and the warranted lifetime is 1000 hours then the percent of normalized warranted lifetime used of the capacitor pack is 20 i.e. effectively 20 of the warranted lifetime has been used up and effectively 800 hours of lifetime remain. Flow proceeds to block .

At block the CPU calculates the percentage capacitance drop of the capacitor pack as the product of the percent of normalized warranted lifetime used calculated at block and the end of life capacitance drop percentage. For example if the end of life capacitance drop percentage is 30 and the percent of normalized warranted lifetime used calculated at block is 20 then the percentage capacitance drop of the capacitor pack is 6 . Flow proceeds to block .

At block the CPU reports the percentage capacitance drop of the capacitor pack calculated at block to the user. Furthermore the user is informed whether the percentage capacitance drop is in a good warning or failed range. In one embodiment once the percentage capacitance drop is within 1 of the end of life percentage capacitance drop the user is warned that the end of life is approaching. In one embodiment the user may input the range in which to be notified that the end of life is approaching. In one embodiment the user is also informed of the end of life capacitance drop percentage for comparing against the percentage capacitance drop. In one embodiment the CPU also reports to the user the remaining number of normalized lifetime hours calculated as the warranted lifetime minus the accumulated normalized running time . In one embodiment the temperature and voltage of the capacitor pack as well as the voltage of each capacitor in the capacitor pack is reported to the user. In one embodiment the information is provided to the user via a serial interface. In one embodiment the information is provided to the user via a web browser interface such as via a TCP IP connection over an Ethernet interface. Flow returns to block to monitor the capacitor pack lifetime for another interval.

As may be observed from the RAID controller advantageously calculates the accumulated normalized running time which is effectively a measure of the age or life of the capacitor pack relative to its warranted lifetime. In contrast to the accumulated calendar running time which is a sum of the calendar time intervals over which the capacitor pack is operated the accumulated normalized running time is a sum of normalized running times corresponding to the calendar time intervals that constitute the accumulated calendar running time . The normalized running times are calculated by normalizing the lifetime reading of table for the average sampled temperature during the interval relative to the normal temperature at the average sampled operating voltage during the interval. Thus the accumulated normalized running time provides a more meaningful and accurate measure of the effective age of the capacitor pack than the calendar age of the capacitor pack and does so without suffering the detrimental performance impact associated with the discharging recharging method of measuring the capacitance of the capacitor pack .

It is noted that in the embodiment described in the accumulated normalized running time and accumulated calendar running time are only updated during operation of the RAID controller and in particular during operation of the CPU . In particular these values are not updated when the entire RAID controller is powered off and when the CPU is powered off during a write cache backup to non volatile memory which would be true in the embodiment of although not in the embodiment of . However it is noted that when the RAID controller is powered off the charge on the capacitor pack will typically drain relatively quickly thereby reducing the voltage and at lower voltages the capacitor pack ages very slowly. Thus the powered off time is likely not significant relative to embodiments with a warranted lifetime on the order of 5 years however in an embodiment in which the warranted lifetime is significantly less the powered off time may be taken into account. This is in contrast to batteries whose ability to store energy degrades significantly during non use. Furthermore the amount of time required to perform the backup is on the order of minutes. Thus the backup time even if normalized at a higher temperature is likely not significant relative to embodiments with a warranted lifetime on the order of 5 years however in an embodiment in which the warranted lifetime is significantly less the backup time may be taken into account.

Referring now to a flowchart illustrating operation of the RAID controller of according to the present invention is shown. In particular illustrates how the RAID controller throttles the operating voltage of the capacitor pack to extend the accumulated normalized running time of the capacitor pack when necessary. also illustrates how the RAID controller dynamically reduces the write cache size when necessary. Flow begins at block .

At block the CPU detects that the temperature of the capacitor pack has exceeded a first predetermined threshold. In one embodiment the first predetermined threshold is 51 degrees Celsius. Although discloses an embodiment in which the operating voltage of the capacitor pack is throttled and the write cache size is adjusted in response to detecting that the capacitor pack temperature has exceeded a threshold the voltage throttling and write cache size adjustment methods described herein are not limited to this embodiment rather other embodiments are contemplated in which the RAID controller throttles the operating voltage and adjusts the write cache size for other reasons. For example in one embodiment at the end of each interval of when the CPU calculates the accumulated normalized running time and accumulated calendar running time the CPU proceeds to block to determine whether voltage throttling and or write cache size adjustment is necessary. For another example although the temperature of the capacitor pack may not have risen above the first threshold the RAID controller may determine that the capacitor pack is reaching the end of its life and give the user the option of continuing to operate instead replacing the RAID controller albeit at a smaller write cache size. Flow proceeds to block .

At block the CPU calculates the projected lifetime of the capacitor pack based on the accumulated normalized running time and the accumulated calendar running time . In particular the projected lifetime is calculated as the product of the warranted lifetime and the ratio of the accumulated calendar running time to the accumulated normalized running time . For example if the warranted lifetime is 1000 hours the accumulated calendar running time is 300 hours and the accumulated normalized running time is 200 hours then the projected lifetime is 1000 hours 300 200 1500 hours. Flow proceeds to decision block .

At decision block the CPU compares the projected lifetime of the capacitor pack calculated at block with the warranted lifetime to determine whether the projected lifetime is less than the warranted lifetime. If so flow proceeds to decision block otherwise flow proceeds to decision block .

At decision block the CPU determines whether the capacitor pack is already currently operating at the lowest voltage level. In the example in which only two voltage levels are provided e.g. 8.2V and 7.2V then the lowest voltage level is 7.2V. However other embodiments are contemplated in which more than two voltage levels are provided. An advantage of providing more voltage levels is that the finer granularity may enable finer granularity adjustments of the write cache however a disadvantage is that it potentially requires more complex voltage adjustment circuitry and software for making the voltage adjustments and write cache size adjustments. If the capacitor pack is already currently operating at the lowest voltage level then flow proceeds to block otherwise flow proceeds to block .

At block the CPU has determined that the capacitor pack operating voltage must be reduced so the CPU calculates the size of the write cache that could be backed up by the amount of energy the capacitor pack could store at the next lower operating voltage based on its accumulated normalized running time . For example assume a write cache whose full size is 512 MB and two voltage levels of 8.2V 2.05V per capacitor and 7.2V or 1.8V per capacitor . Although the number of individual capacitors in the capacitor pack may vary the percentage capacitance drop calculation for a single capacitor is equivalent to the percentage capacitance drop of the entire capacitor pack . If Cis the original capacitance of a capacitor the energy stored in the capacitor at the normal 2.05V operating voltage after the 30 end of life percentage capacitance drop is E 0.7C 2.05 0.8 C 2.494. The energy stored in a capacitor at the lower 1.8V operating voltage with zero percentage capacitance drop is E C 1.8 0.8 C 2.6. Since 2.6 is larger than 2.494 the capacitor pack is capable of storing enough energy to back up the full size 512 MB write cache therefore no write cache size adjustment is needed as would be determined at block below. However if there is already a 10 capacitance drop the energy stored is E capacitance drop C 2.34. Since 2.34 is less than 2.494 the capacitor pack is storing enough energy to backup only a 2.34 2.494 512 MB 480 MB write cache . Similarly if there is already a 20 capacitance drop the energy stored is E C 2.08. Thus the capacitor pack is storing enough energy to backup only a 2.08 2.494 512 MB 427 MB write cache . In one embodiment the software executing on the CPU maintains a table of write cache size values for each percentage capacitance drop between zero and the end of life percentage capacitance drop for each possible operating voltage level. The table is indexed by the percentage capacitance drop such as is calculated at block of . In one embodiment the percentage capacitance drop is also written to non volatile memory after being calculated at block . Flow proceeds to decision block .

At decision block the CPU determines whether the write cache size calculated at block is less than the current write cache size. If so flow proceeds to block otherwise flow proceeds to block .

At block the CPU reduces the write cache size to the size calculated at block . In one embodiment the CPU reduces the write cache size by pausing processing of host I O requests flushing the write cache reducing the write cache to the desired size and optionally increasing the read cache size accordingly and resuming host I O processing. In one embodiment in order to reduce the amount of time that the host I O request processing is paused the CPU flushes only the section of the write cache that is to be removed from the write cache and optionally added to the read cache which will typically be the section adjacent to the read cache. In one embodiment the CPU also writes the new write cache and read cache sizes to the non volatile memory so that after a reboot of the RAID controller the CPU can configure the write cache and read cache sizes to the new values. Flow proceeds to block .

At block the CPU reduces the operating voltage of the capacitor pack to the next voltage level in order to increase the lifetime of the capacitor pack . In one embodiment the RAID controller also notifies the user that the operating voltage has been reduced. In one embodiment the CPU also writes the new operating voltage to the non volatile memory so that after a reboot of the RAID controller the CPU can set the operating voltage to the new value. In one embodiment the power manager includes a control register that the CPU writes to adjust the operating voltage of the capacitor pack . Flow proceeds to decision block .

At block the CPU has determined that although the capacitor pack 136 voltage needs to be reduced in order to increase the lifetime of the capacitor pack the capacitor pack is already operating at the lowest voltage level and therefore cannot be reduced. Consequently the CPU issues to the user a warning message of this condition. Flow proceeds to decision block .

At decision block the CPU determines whether the capacitor pack temperature has exceeded a second predetermined threshold. In one embodiment the second predetermined threshold is 55 degrees Celsius. If the temperature has exceeded the second predetermined threshold then flow proceeds to decision block in order to reduce the operating voltage of the capacitor pack and reduce the write cache size if necessary regardless of the fact that the projected lifetime of the capacitor pack calculated at block is at least as great as the warranted lifetime. If the temperature has not exceeded the second predetermined threshold then flow ends.

At decision block the CPU determines whether the capacitor pack temperature has exceeded a third predetermined threshold. In one embodiment the third predetermined threshold is 59 degrees Celsius. If the temperature has exceeded the third predetermined threshold then flow proceeds to block otherwise flow ends.

At block the CPU disables charging of the capacitor pack to avoid prematurely reducing the lifetime of the capacitor pack beyond its warranted lifetime. The most likely causes of the acute temperature rise are the capacitor pack charging excessively and a cooling fan failure in the system. Additionally the CPU places the write cache in write through mode if the capacitor pack is not fully charged and will therefore likely not be storing sufficient energy to power the backup of the write cache to the non volatile memory . Flow ends at block . In one embodiment the CPU delays a predetermined amount of time and then attempts to resume charging the capacitor pack .

As may be observed from the RAID controller advantageously reduces the operating voltage of the capacitor pack to increase its lifetime if based on the accumulated normalized running time the warranted lifetime of the capacitor pack will not be met. Furthermore if the RAID controller determines that the capacitance of the capacitor pack has dropped an amount that prevents the capacitor pack from being capable of storing enough energy at the new operating voltage to support the write cache backup then the RAID controller advantageously reduces the write cache size to an amount for which the capacitor pack can support the backup.

Referring now to a flowchart illustrating operation of the RAID controller of according to the present invention is shown. In particular the flowchart illustrates the RAID controller increasing the operating voltage and write cache size when appropriate. Flow begins at block .

At block the CPU detects that the RAID controller is currently operating with a write cache size that is less than the normal or full write cache size and that a significant amount of time has elapsed since the write cache size was reduced. In one embodiment the amount of time is approximately 2 hours to avoid frequently adjusting the write cache size which may lead to inefficiency. Flow proceeds to block .

At block the CPU calculates the projected lifetime of the capacitor pack based on the accumulated normalized running time and the accumulated calendar running time similarly to the step performed at block of . Flow proceeds to decision block .

At decision block the CPU compares the projected lifetime of the capacitor pack calculated at block with the warranted lifetime to determine whether the projected lifetime is less than the warranted lifetime. If not flow ends otherwise flow proceeds to decision block . In one embodiment the CPU determines whether the projected lifetime is less than the warranted lifetime by a predetermined percentage rather than strictly less than the warranted lifetime in order to avoid causing thrashing with respect to the adjusting of the write cache size.

At decision block the CPU determines whether the capacitor pack is already currently operating at the highest voltage level. If so flow ends otherwise flow proceeds to block .

At block the CPU increases the operating voltage of the capacitor pack to the next voltage level. Flow proceeds to block .

At block the CPU calculates the size of the write cache that can be backed up by the energy the capacitor pack can store at the new operating voltage set at block based on the accumulated normalized running time of the capacitor pack . Flow proceeds to block .

At block the CPU increases the write cache size to the value calculated at block . In one embodiment the CPU increases the write cache size by pausing processing of host I O requests increasing the write cache to the desired size and resuming host I O processing. In conjunction with the embodiment described with respect to block of in which the read cache size is increased coordinately with a write cache size decrease at block the CPU also completes all currently outstanding read requests after pausing host I O request processing and then decreases the read cache size accordingly before increasing the write cache size. Flow ends at block .

As may be observed from the RAID controller advantageously increases the operating voltage and write cache size after it determines based on the accumulated normalized running time that it is safe to do so.

Referring now to a flowchart illustrating operation of the RAID controller of according to the present invention is shown. In particular the flowchart of illustrates operation of the RAID controller to avoid prematurely aging the capacitor pack during booting of the RAID controller . Flow begins at block .

At block main power is applied to the RAID controller . This implies that the capacitor pack has at least partially if not fully discharged. Flow proceeds to block .

At block the CPU places the write cache into write through mode since the capacitor pack is not fully charged and therefore may not be capable of supplying sufficient energy to perform the write cache to non volatile memory backup operation. Flow proceeds to block .

At block the CPU periodically samples the temperature voltage and current draw of the capacitor pack via the temperature sensors voltage sensors and current sensors respectively of . In one embodiment the sample period is 3 seconds during all times while the capacitor pack is being charged which is shorter than the non charging sample period in order to more quickly detect temperature or current increases that might otherwise prematurely age the capacitor pack beyond its warranted lifetime. Flow proceeds to decision block .

At decision block the CPU determines whether the current draw of the capacitor pack has exceeded a predetermined threshold. In one embodiment the predetermined threshold is 2 Amps. If so flow proceeds to block otherwise flow proceeds to decision block .

At block the CPU causes the capacitor pack to stop charging in order to avoid prematurely aging the capacitor pack beyond its warranted lifetime. Flow ends at block . In one embodiment the CPU delays a predetermined amount of time and then attempts to resume charging the capacitor pack and returns to block .

At decision block the CPU determines whether the temperature has exceed the third predetermined threshold similarly to the step performed at decision block of . If the temperature has exceeded the third predetermined threshold flow proceeds to block otherwise flow proceeds to decision block .

At decision block the CPU determines whether the voltage of the capacitor pack has reached its designated operating voltage level. In one embodiment the current operating voltage level is stored in non volatile memory so that in the event of a loss of main power and subsequent reboot the CPU may determine the operating voltage prior to the loss of main power and restore it thereto. If the voltage of the capacitor pack has reached its designated operating voltage level flow proceeds to block otherwise flow returns to block .

At block the CPU places the write cache in write back mode since the capacitor pack is fully charged. Flow ends at block .

Referring now to a flowchart illustrating operation of the RAID controller according to an alternate embodiment of the present invention is shown. The flowchart of illustrates how the RAID controller throttles the operating voltage of the capacitor pack to extend the accumulated normalized running time of the capacitor pack when necessary and how the RAID controller dynamically reduces the write cache size when necessary similarly to however the embodiment of employs a different comparison for determining whether the operating voltage needs throttling. Consequently the flowchart of is similar to the flowchart of however flow proceeds from block to block rather than to block .

At block the CPU calculates the calendar time percentage capacitance drop of the capacitor pack as the product of the end of life percentage capacitance drop and the ratio of the accumulated calendar running time to the warranted lifetime. Thus for example if the end of life percentage capacitance drop is 30 the accumulated calendar running time is 400 hours and the warranted lifetime is 1000 hours then the calendar time percentage capacitance drop is 12 . Flow proceeds to decision block .

At decision block the CPU compares the percentage capacitance drop calculated at block of with the calendar time percentage capacitance drop calculated at block to determine whether the percentage capacitance drop is greater than the calendar time percentage capacitance drop. If so flow proceeds to decision block otherwise flow proceeds to decision block as in .

Referring now to a flowchart illustrating operation of the RAID controller according to an alternate embodiment of the present invention is shown. The flowchart of illustrates how the RAID controller throttles the operating voltage of the capacitor pack to extend the accumulated normalized running time of the capacitor pack when necessary and how the RAID controller dynamically reduces the write cache size when necessary similarly to however the embodiment of employs a different comparison for determining whether the operating voltage needs throttling. Consequently the flowchart of is similar to the flowchart of however flow proceeds from block to decision block rather than to block .

At decision block the CPU compares the accumulated normalized running time calculated at block of with the accumulated calendar running time calculated at block of to determine whether the accumulated normalized running time is greater than the accumulated calendar running time . If so flow proceeds to decision block otherwise flow proceeds to decision block as in .

Referring now to a flowchart illustrating operation of the RAID controller according to an alternate embodiment of the present invention is shown. The flowchart of illustrates how the RAID controller throttles the operating voltage of the capacitor pack to extend the accumulated normalized running time of the capacitor pack when necessary and how the RAID controller dynamically reduces the write cache size when necessary similarly to however the embodiment of employs a different comparison for determining whether the write cache size needs reducing. Consequently the flowchart of is similar to the flowchart of however if the capacitor pack is not currently operating at the lowest voltage level flow proceeds from decision block to block rather than to block .

At block the CPU calculates the energy the capacitor pack could store at the next lower operating voltage based on its accumulated normalized running time . In particular the CPU calculates the energy according to equation 1 above. The capacitance value used for each capacitor in the capacitor pack is the product of the original capacitance of capacitor and the quantity one minus the percentage capacitance drop calculated at block of . Flow proceeds to decision block .

At decision block the CPU determines whether the energy calculated at block is sufficient to power backing up the write cache to the non volatile memory . If so flow proceeds to block otherwise flow proceeds to block .

At block the CPU calculates the write cache size supportable at the next lower operating voltage similarly to the step performed at block of . The CPU then reduces the write cache size to the calculated size. Flow proceeds to block .

Although the present invention and its objects features and advantages have been described in detail other embodiments are encompassed by the invention. For example although embodiments have been described with respect to a RAID controller the methods of monitoring the capacitor pack lifetime dynamically adjusting the capacitor pack operating voltage to provide a warranted lifetime and dynamically adjusting the write cache size may be beneficially employed in any type of storage controller. Additionally although embodiments have been described in which the capacitor pack is primarily used to supply power while the storage controller backs up a volatile write cache to a non volatile memory the methods described herein may be beneficially employed for any use in which a capacitor pack is used as a rechargeable energy source. An example of another use for the capacitor pack includes keeping the volatile write cache powered until main power is restored such as in a storage controller that does not include a non volatile memory to which the volatile write cache may be backed up.

Although embodiments have been described in which the capacitance of the capacitor pack is monitored as a whole embodiments are contemplated in which the lifetime of each individual capacitor in the pack is monitored based on the individual operating voltage and temperature of each individual capacitor and the lifetime of the capacitor pack as a whole is determined as the smallest lifetime of the individual capacitors.

Although the physical laws governing the invention are discussed such as the various energy and capacitance calculations it should be understood that these values need not necessarily be directly or fully calculated in order to practice the invention. In other words various embodiments employing the governing physical laws are contemplated. For example embodiments are contemplated in which the energy capacitance capacitance drop percentage capacitance drop write cache size and so forth values are pre calculated for common voltage and temperature values and stored in a table which is accessed based on the measured voltage and temperature readings. Other embodiments are contemplated in which the values are fully calculated according to the equations rather than looked up in a table. Other embodiments are contemplated in which directly calculated and pre calculated values are used in combination.

Although embodiments have been described in which the CPU performs the various calculations described such as the calculation of the accumulated normalized running time other embodiments are contemplated in which dedicated circuitry performs the calculations such as circuitry within the power manager . Finally although embodiments have been described in which various threshold values are specified it should be understood that the present invention may be employed with other threshold values.

Finally those skilled in the art should appreciate that they can readily use the disclosed conception and specific embodiments as a basis for designing or modifying other structures for carrying out the same purposes of the present invention without departing from the scope of the invention as defined by the appended claims.

