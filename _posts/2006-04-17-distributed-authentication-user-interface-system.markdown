---

title: Distributed authentication user interface system
abstract: A system for authenticating a request to access a protected network resource behind two security layers is disclosed. The system includes a client which contains a web browser, a first server tier, and second server tier. The first server tier is protected behind a first security layer and hosts a first software object and second software object. The first server tier is operatively coupled to the client system via a first connection wherein the first software object and second software object are configured to be in communications with the web browser. The second server tier is protected behind the first security layer and second security layer and hosts an authentication service. The second server tier is operatively coupled to the first server tier via a second connection wherein the authentication service is configured to be in communications with the second software object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08181010&OS=08181010&RS=08181010
owner: Oracle America, Inc.
number: 08181010
owner_city: Redwood City
owner_country: US
publication_date: 20060417
---
The advent of the Internet i.e. World Wide Web has opened up an entirely new paradigm for companies and individuals to conduct business and share information. A to key concern that arises during these transactions is security. Whenever a computer system i.e. client or server establishes network access to the Internet the computer system itself becomes vulnerable to unauthorized or malicious Internet users gaining access to sensitive information or permission to perform malicious actions on the computer system.

Authentication is the process by which a computer system ensures that users who access information or perform a function on the computer system are in fact who they say they are and are authorized to do so. Currently user authentication services for client server systems can follow either completely centralized model or completely decentralized model.

A centralized user authentication system typically includes an application server hosting a web agent application installed in a demilitarized zone DMZ established between a first and second firewall layer and an authentication server hosting an authentication service installed behind both the first and second firewall layers. In this model a client i.e. Internet web browser seeking to access a resource protected by the authentication server would initially contact the web agent application on the application server and then send authentication information e.g. personal identification number password biometrics data etc. directly to the authentication server across two layers of firewalls. This practice is disapproved by many network security administrators because it compromises the security of the authentication service itself by exposing it to manipulation by malicious clients.

In a decentralized user authentication system an application server hosting a web agent application would typically be installed behind a firewall. The web agent application itself would perform all the authentication functions of the authentication service without the need for a separate authentication server. Using this model a client trying to access a resource protected by the web agent application would communicate directly with the web agent application. The limitation with this model is that it is difficult to standardize the display presentations across all web agent application platforms and therefore can be cumbersome and expensive to maintain and support.

In view of the forgoing a user authentication module is needed which can arbitrate authentication transactions between a client and an authentication service across multiple firewall layers enabling the authentication service to be maintained on a centralized server.

Broadly speaking the present invention fills these needs by providing methods and systems for arbitrating authentication transactions between a client and an authentication service across multiple firewall layers enabling the authentication service to be maintained on a centralized server. It should be appreciated that the present invention can be implemented in numerous ways including as a system a method and a computer program. Several inventive embodiments of the present invention are described below.

In one embodiment a method for authenticating a request to access a protected network resource is disclosed. A first software object receives a request from a web browser. The request is re directed to a distributed software object that is protected behind a first security layer. The distributed software object then communicates the request across a second security layer to an authentication service. The request asks for input from the authentication service specifying a required authentication solution. The authentication service sends the required authentication solution to the distributed software object which arbitrates an authentication transaction sequence between the web browser and the authentication service.

In another embodiment a system for authenticating a request to access a protected network resource behind two security layers is disclosed. The system includes an authentication server that hosts a first software object and second software object. The first software object and second software object being protected behind a first security layer. The first software object includes a web agent that resides within a first web container and is configured to communicate with the second software object. The second software object includes a distributed authentication module residing within a second web container and configured to arbitrate authentication transactions between a web browser and an authentication service. The authentication service resides behind a second security layer and the web browser resides outside both the first and second security layers.

In still another embodiment a system for authenticating a request to access a protected network resource behind two security layers is disclosed. The system includes a client which contains a web browser a first server tier and second server tier. The first server tier is protected behind a first security layer and hosts a first software object and second software object. The first server tier is operatively coupled to the client system via a first connection wherein the first software object and second software object are configured to be in communications with the web browser. The second server tier is protected behind the first security layer and second security layer and hosts an authentication service. The second server tier is operatively coupled to the first server tier via a second connection wherein the authentication service is configured to be in communications with the second software object.

An invention is described for methods and systems for methods and systems for arbitrating authentication transactions between a client and an authentication service across multiple firewall layers enabling the authentication service to be maintained on a centralized server. It will be obvious however to one skilled in the art that the present invention may be practiced without some or all of these specific details. In other instances well known process operations have not been described in detail in order not to unnecessarily obscure the present invention.

The fundamental focus of network security systems is to address the problem of access control. Mainly ensuring that a protected network resource e.g. server database personal computer system application etc. is not accessed by individuals or entities that are not authorized to do so. The range of applications for network security systems spans far and wide from controlling access to account information on Internet banking sites authorizing specified users to withdraw cash from individual bank accounts using automatic teller machines ATM at a grocery checkout stand to managing user rights to access sensitive information on a database server. In the most basic configuration a network security system includes an authentication service that resides on a computer system i.e. authentication server etc. that is configured to intercept all requests to access a protected network resource. The requests can originate from clients either dispersed within a protected local area network LAN or on a wide area network WAN such as the Internet. Usually the computer system is placed behind one or more security layers i.e. firewalls that prevent unauthorized users from maliciously compromising the security of the system.

As used herein a firewall is any software package or hardware device that protects networked computers from intentional hostile intrusion that could compromise confidentiality or result in data corruption or denial of service. A network firewall typically sits at the junction point or gateway between the two networks usually a private network i.e. company Intranet local LAN etc. and a public network such as the Internet. Depending on the configuration firewalls can be hosted on the same computer system as a protected resource or on a separate system.

A demilitarized zone DMZ is a computer or sub network that sits between a trusted internal network such as a private LAN and an untrusted external network such as the Internet. Typically the DMZ contains devices i.e. computers servers etc. that are accessible to external network Internet traffic such as Web application servers file transfer protocol FTP servers simple mail transfer protocol SMTP servers and domain name system DNS servers. Devices inside the DMZ zone may be configured to access certain servers within an internal network such as database or authentication servers.

Authentication of a client attempting to access a protected network resource can be achieved using a variety of methods including matching information about some distinguishing characteristics of the client e.g. biometric information device configuration etc. confirming something that only the client possesses e.g. Smartcard ID card security token software token etc. verifying something that only the client knows e.g. a password a pass phrase personal identification number keystroke sequence etc. or some combination of the three.

What is disclosed by the embodiments described herein is essentially a distributed authentication user interface system to arbitrate authentication transactions between a client and an authentication service across multiple firewall layers.

In one embodiment the distributed authentication object is configured to operate in conjunction with the web agent during authentication transactions involving the client authentication service and protected network resource . The web agent is configured to be in communications with the client distributed authentication object and the protected network resource . In one embodiment the web agent intercepts all requests from the client to access the protected network resource . The web agent allows authorized clients i.e. clients submitting requests containing the proper authentication token to access the protected network resource immediately without further authentication and re directs unauthorized clients i.e. clients submitting requests not containing the proper authentication token to the distributed authentication object which arbitrates further authentication transactions between the client and authentication service . In one embodiment the client is a web browser application that can be utilized by a user to access a protected network resource via the Internet . However it should be understood that the client can be any application or hardware device so as long as it can operatively interface with the authentication server . In one embodiment the protected network resource is hosted on a separate storage device e.g. database server application server web server etc. from the web agent .

In one embodiment the distributed authentication object is a software application that is included as part of an overall integrated web application framework software package such as JAVA 2 Platform Enterprise Edition J2EE WEBOBJECTS or APACHE COCOON . It should be understood that the distributed authentication object can be packaged with essentially any web application framework software package so long as the package can be configured to manage authentication transactions for client server systems. In another embodiment the distributed authentication object is a standalone software application that is configured to be used as a functionality upgrade to existing web application framework software packages.

Still with in one embodiment the distributed authentication object and the web agent are written in JAVA . It should be appreciated that the distributed authentication object and web agent can be created using any number of programming languages including hypertext preprocessor PHP Practical Extraction and Report Language PERL JAVASCRIPT Extensible Markup Language XML PYTHON or RUBY . However one skilled in the art will know that essentially any programming language can be used to create a distributed authentication object or web agent so long as the language can effectuate the required authentication functions of those software objects. In one embodiment the distributed authentication object and web agent are both deployed in web containers that are servlet compliant. The web containers are configured to facilitate the interactions between the software objects i.e. distributed authentication object and web agent and a client web browser interacting with the objects through the Internet .

In one embodiment both the first security layer and the second security layer are software based firewalls i.e. firewall created using a software package that are configured to examine and restrict certain classes of communications traffic between devices i.e. authentication server and identity server that are protect behind them. In another embodiment both the first security layer and second security layer are device based firewalls i.e. firewall created using a hardware device such as a TCP IP router configured to do the same. It should be understood that the two security layers i.e. the first security layer and the second security layer can be made up of any combination of software based or device based firewalls so long as the resulting security layers can operatively function to allow authorized communications with the devices e.g. authentication server identity server external protected network resource etc. that they protect.

Continuing with in one embodiment the gap between the first security layer and the second security layer is referred to as a demilitarized zone for the system. . In another embodiment the demilitarized zone is behind two or more security layers. It should be understood that the demilitarized zone can be established behind any security layer so long as it does not reside in the same space i.e. server layer as the identity server . In one embodiment the authentication server resides within the demilitarized zone of the system and is configured to transact communications with both the clients connected through the Internet and the identity server residing behind one or more security layers. It should be appreciated that the authentication server can reside behind any security layer so long as it does not reside in the same space as the identity server .

In one embodiment the authentication server communicates with the identity server via a communications backchannel. In one embodiment the backchannel is configured to allow only communication transactions between the authentication server and the identity server and not direct communications with devices or entities external to the authentication server . For example the backchannel will not allow a client on the Internet to directly communicate with the identity server using the authentication server as a communications channeling device. Rather the backchannel will only allow communications traffic originating from the authentication server .

Further describing in one embodiment the authentication service is created using JAVA programming language. However it should be appreciated that the authentication service can be created using any programming language e.g. C C Visual Basic etc. so long as the language can impart the necessary authentication functionalities to the authentication service .

Continuing with in one embodiment the protected network resource resides in an external network storage device that is separate from the identity server . The external protected network storage device is configured to communicate with the web agent via a communications link with the identity server .

The authentication service resides within a secure server layer that is protected by a second security layer which is behind the first security layer . The client resides outside both the first security layer and the second security layer . The web agent is deployed within a web container B while the distributed authentication object includes a distributed authentication module which is also deployed within a web container A. The distributed authentication object is configured to be coupled to the client web agent and authentication service via a series of internal i.e. internal software logic and external i.e. LAN Internet etc. communications links.

Still with in one embodiment the authentication service includes an access policy that defines client access permissions to a protected network resource when the client makes a request to access the protected network resource . The access policy provides the basis for the authentication operations by delineating the authentication conditions e.g. Unix Certificate etc. that must be satisfied in order for a subject i.e. USER client etc. to be authenticated and given access to the protected network resource . The authentication conditions are set in modular form i.e. authentication modules that can be added or subtracted from the access policy as needed by an administrator of the authentication service .

Typically the authentication modules authenticate based on client credentials i.e. information provided by the client relating to a distinguishing characteristic of the authorized client e.g. biometric information device configuration etc. something that only the authorized client possesses e.g. Smartcard security token software token etc. something that only the authorized client knows e.g. a password a pass phrase personal identification number keystroke sequence etc. or some combination of the three. It should be understood that the examples of client credentials depicted herein are used for illustration purposes only and are not meant to limit the types of information that the client credentials may be based on.

Continuing with in one embodiment the authentication conditions calls for the USER i.e. subject to be successfully authenticated by both a Lightweight Directory Access Protocol LDAP authentication module and a Unix authentication module. The USER will not be given access to the protected network resource unless the USER is successfully authenticated by both authentication modules i.e. LDAP and Unix . It should be appreciated that the authentication module types depicted in this embodiment are used for illustration purposes only and are not meant to limit the makes or types of authentication modules that can be used by this invention. Examples of other types of authentication modules include HTTP Basic Radius SAFEWORD SecureID Certificate based Microsoft NT and Anonymous. One skilled in the art will understand that the authentication conditions can essentially include any type or make of authentication module so long as the module can be configured to operatively function within the framework of the access policy .

In one embodiment the client is operatively coupled to the distributed authentication object via an Internet connection. In another embodiment the client is operatively coupled to the distributed authentication object via a LAN connection. The coupling allows both a credential extraction operation and a credential requirements presentation operation to be transacted between the distributed authentication object and the client . In one embodiment the client is operatively coupled i.e. via a LAN or WAN connection to the web agent enabling requests for access to a protected network resource to be made by the client . In another embodiment the distributed authentication object is operatively coupled to the authentication service via a communications backchannel . As previously described in one embodiment the communications backchannel is designed to allow only communications originating from certain designated objects i.e. distributed authentication object or devices i.e. distributed authentication server in the system to communicate with the authentication service .

Still with clients request access to the protected network resource by sending a request to a web agent designated to protect the protected network resource . The web agent is configured to parse the request to determine whether the request includes a required authentication token e.g. SSO token etc. signifying that the client is authorized to access the protected network resource . If the web agent determines that the request contains the required authentication token the client will immediately be allowed to access to the protected network resource without further authentication steps taken. If the web agent determines that the request does not include the required authentication token the web agent will re direct the request to the distributed authentication object to arbitrate further authentication transactions between the client and the authentication service .

In one embodiment the distributed authentication object is configured to translate the access request re directed from the web agent into a client credentials requirement i.e. authentication solution input call that is communicated via a backchannel to the authentication service . The input call essentially asks the authentication service to provide guidance i.e. input specifying what client credentials are required from the client before the client will be allowed to access the protected network resource . As discussed above within the authentication service the access policy delineates the authentication conditions e.g. LDAP Unix Certificates etc. that must be satisfied in order for a subject i.e. user client etc. to be authenticated and given access to the protected network resource . The authentication service utilizes the access policy to provide input as to what the client credentials requirement is and communicates the input to the distributed authentication object which then uses the information to generate a credential requirements presentation page that is sent to the client . In one embodiment the input includes information relating to the presentation framework and callbacks for the distributed authentication object to use in the credential requirements presentation page . In one embodiment the presentation framework is based on J2EE Assisted Take Off JATO .

After viewing the credential requirements presentation page the client can then reply with the client credentials requirement i.e. authentication solution in a credentials extraction operation to the distributed authentication object which in turn relays the reply to the authentication service . The authentication service is configured to examine the reply to determine if the client credentials requirement has been provided by the client . If the client credentials requirement has been provided by the client the authentication service passes back an authentication token to the distributed authentication object . The distributed authentication object then re directs the authentication token and the client to the protected network resource enabling the client to access the protected network resource . In one embodiment if the client credentials requirement has not been provided by the client the authentication service passes back an appropriate error message indicating why the client credentials requirement provided by the client failed. In another embodiment if the client credentials requirement has not been provided by the client the authentication service passes back a message indicating that there was an error during authentication without specifying the reasons for the error.

Remaining with it should be appreciated that the credential requirements presentation page can be created using any programming language so long as the resulting page can be viewed by the client using a web browser or other equivalent viewing tool. Examples of programming languages that can be used alone or in combination to create the credential requirements presentation page include XML JAVA C C Visual Basic JAVASCRIPT Practical Extraction and Reporting Language PERL XML User Interface Language XUL HTML Extensible Hypertext Markup Language XHTML and Extensible Bindings Language XBL . In one embodiment the credentials requirements presentation page is a client login that is rendered as a graphical user interface GUI by the client web browser. The GUI is configured to accept the required client credentials entered by the client . In one embodiment the client login is based on a JAVA Authentication and Authorization JAAS application programming interface and service provider interface.

The method then goes to operation where the distributed software object communicates the client request across a second security layer to an authentication service. Referencing the descriptions provided previously the authentication service can reside on either the same server or a different server than the distributed software object depending on the system design. Additionally the second security layer can be either a software based or device based firewall.

Continuing with the method goes to operation whereby the client request solicits input from the authentication service regarding the client credentials requirement i.e. authentication solution needed from the client in order for the client to be given access to the protected network resource. As discussed above the client credentials requirement typically relates to a distinguishing characteristic of the authorized client e.g. biometric information device configuration etc. something that only the authorized client possesses e.g. Smartcard security token software token etc. something that only the client knows e.g. a password a pass phrase personal identification number keystroke sequence etc. or some combination of the three.

After the authentication service receives the solicitation for input the method moves on to operation where the authentication service sends input specifying the client credentials requirement to the distributed software object. As discussed previously in one embodiment the input includes the client credentials requirement and information relating to the presentation framework and callbacks for the distributed software object to use during the credentials extraction operation with the client.

Next the method moves to operation where the distributed software object arbitrates an authentication transaction sequence between the client web browser and the authentication service using the distributed software object. In one embodiment the authentication transaction sequence involves the distributed software object translating the input into a credentials requirements presentation page and relaying the page to the client web browser. After the client sends a response with the client credentials requirement i.e. authentication solution to the distributed software object the response is relayed to the authentication service for authentication. As described above if the authentication is successful an authentication token e.g. SSO token etc. is issued by the authentication service to allow the client to access the protected network resource. If not an error message is generated by the authentication service and sent to the distributed software object for relay to the client web browser.

Using the example depicted for this embodiment the client response is first examined to determine whom or what the subject is and which protected resource the subject is requesting to access. In this example the subject is a USER and the protected resource is the x.html web page. Next the authentication service looks to the required condition s that must be satisfied in order for the USER to gain access to the x.html page. In this example the condition is that the USER must be authenticated against a LDAP directory resource that is linked to the authentication service . If the client response successfully traverses the authentication service examination the authentication service issues an authentication token i.e. SSO token . In one embodiment if the client response does not successfully traverse the authentication service examination an error message is generated indicating which part of the authentication examination the client response failed. In another embodiment if the client response does not successfully traverse the authentication service examination an error message is generated without specifying the reasons for the failure.

With the above embodiments in mind it should be understood that the invention may employ various computer implemented operations involving data stored in computer systems. These operations are those requiring physical manipulation of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. Further the manipulations performed are often referred to in terms such as producing identifying determining or comparing.

Any of the operations described herein that form part of the invention are useful machine operations. The invention also relates to a device or an apparatus for performing these operations. The apparatus may be specially constructed for the required purposes such as the carrier network discussed above or it may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular various general purpose machines may be used with computer programs written in accordance with the teachings herein or it may be more convenient to construct a more specialized apparatus to perform the required operations.

The invention can also be embodied as computer readable code on a computer readable medium. The computer readable medium is any data storage device that can store data which can thereafter be read by a computer system. Examples of the computer readable medium include hard drives electromagnetic wave carrier network attached storage NAS read only memory random access memory CD ROMs CD Rs CD RWs magnetic tapes and other optical and non optical data storage devices. The computer readable medium can also be distributed over a network coupled computer systems so that the computer readable code is stored and executed in a distributed fashion.

Although a few embodiments of the present invention have been described in detail herein it should be understood by those of ordinary skill that the present invention may be embodied in many other specific forms without departing from the spirit or scope of the invention. Therefore the present examples and embodiments are to be considered as illustrative and not restrictive and the invention is not to be limited to the details provided therein but may be modified and practiced within the scope of the appended claims.

