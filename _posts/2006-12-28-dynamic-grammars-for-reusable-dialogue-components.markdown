---

title: Dynamic grammars for reusable dialogue components
abstract: A system and method for authoring a voice application is provided. The voice recognition process uses a dynamic grammar which obtains data from a backend data source based upon an input in order to create expected results that a speech engine can recognize. The process can retrieve data from at least one of a plurality of back-end data sources and can build a grammar based on the data using at least in part a dynamic grammar builder. The grammar is loaded into the voice recognition application using at least in part the reusable dialog component. A data access service, XSLT processor, or other data accessing framework can be used to facilitate access and manipulation of data in heterogeneous environments.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08417511&OS=08417511&RS=08417511
owner: Nuance Communications
number: 08417511
owner_city: Burlington
owner_country: US
publication_date: 20061228
---
This invention relates to voice recognition and particularly to generating dynamic grammars for reusable dialogue components of voice applications.

The development of voice applications can be extremely complex. The complexity is typically exacerbated by the lack of availability of a dedicated standard or well known development architecture. Although more recent voice application development has adopted portions of the Web programming model there are still significant differences between voice and Web applications.

To create robust voice applications it generally has been necessary for voice application developers to be familiar with many programming languages techniques architectures and processes. Compounding this problem voice applications are often built using proprietary markup languages. The emergence of the standard for VoiceXML has eliminated some of this complexity allowing voice developers to better focus their skills. VoiceXML allows adoption of Web programming models for voice applications and implementation through use of a server side framework similar to implementation to Web applications.

However speech recognition still tends to be more error prone than collecting data in a Web application since background noise and other factors can interfere with the recognition. Unlike Web applications voice applications require dialogs between the computer and user such as to confirm an input or re prompt a user when there has been no input. Voice applications rely on grammars to know what words or phrases are to be recognized.

Reusable Dialog Components RDC s such as those that can be implemented as JSP 2.0 tags are known. RDC s can assist in developing voice applications in the same manner as in Web applications. RDC s include the voice specific elements such as the dialog grammars and call flow needed to obtain units of information. The developer using the RDC does not need to know the grammar included but rather only needs to understand the attributes that the RDC tag requires. Use of RDC s to handle the interactions for common dialogs can free a developer to deal with more complicated areas of the voice application.

However the contemporary RDC framework has a limited ability to accept static grammars. In order to have voice applications that include dynamic grammars a developer implements a solution specific to their environment and the data source being used. Custom code is necessary which would defeat the purpose of having reusable components. This is especially cumbersome when options and data given to a caller needs to be gathered dynamically from a backend source.

A need therefore exists for a technique implemented in voice recognition systems wherein the above mentioned disadvantages can be mitigated or alleviated. A further need exists for a system or process that provides for dynamic grammars for reusable dialogue components.

A voice recognition system is provided in the exemplary embodiments that uses a dynamic grammar which obtains data from a backend data source based upon an input in order to create expected results that a speech engine can recognize.

In one exemplary embodiment of the present invention there is provided a method for authoring a voice application. The method can include retrieving data from at least one of a plurality of back end data sources based at least in part on an input building a grammar based on the data using at least in part a dynamic grammar builder and loading the grammar into the voice application using at least in part a reusable dialog component.

Another embodiment is a voice recognition system for generating a dynamic grammar for a reusable dialog component. The system can include a processor capable of retrieving data from at least one of a plurality of back end data sources based at least in part on an input to the processor. The processor can be configured to build the dynamic grammar based on the data and to load the dynamic grammar into a voice application using at least in part the reusable dialog component.

Yet another embodiment is a computer readable program embodied in an article of manufacture comprising computer readable program instructions for authoring a voice application. The program can include program instructions for causing the computer to retrieve data from at least one of a plurality of back end data sources based at least in part on an input program instructions for causing the computer to build a grammar based on the data using at least in part a dynamic grammar builder and program instructions for causing the computer to load the grammar into the voice application using at least in part a reusable dialog component.

Exemplary embodiments described herein address the shortcomings of prior voice recognition systems by providing a process for generating dynamic grammars which can obtain data from one or more backend data sources based upon an input in order to create expected results that a speech engine can recognize. Exemplary embodiments will be explained in connection with various possible voice recognition systems and processes. The detailed description is intended only to be exemplary. Exemplary embodiments are shown in but the present disclosure is not limited to the illustrated structure or application.

In an exemplary embodiment according to aspects of the invention an addition to the Reusable Dialog Component RDC framework is provided that utilizes the Service Data Object SDO framework to allow the use of dynamic grammars with RDC s. The SDO framework can simplify and unify the handling of data by an application and in particular a voice application. Using the SDO framework uniform access and manipulation of data from multiple data sources including heterogeneous data sources can be achieved for voice applications. Such access and manipulation can be achieved with various data sources including relational databases XML data sources Web services and enterprise information systems. While this exemplary embodiment utilizes the SDO framework for accessing and manipulating data to generate dynamic grammars for the RDC the present disclosure contemplates the use of other data handling frameworks that allow for access and manipulation of data from data sources in a heterogeneous environment.

In this exemplary embodiment a Dynamic Grammar RDC DGRDC tag is added to the RDC framework which allows for the creation of RDC s that interact with one or more backend data sources through use of the SDO framework. This simplifies the development of complex voice applications that need to communicate with backend data sources to generate dynamic grammars. This allows for the reuse of the components and obviates the need to write custom code for voice applications accessing such data. RDC s are available in atomic or uncombined i.e. single information input from the user and composite i.e. multiple information input from the user formats. The present disclosure contemplates the use of either or both atomic and composite RDC s.

Referring to an exemplary embodiment of a voice recognition process is shown and generally represented by reference numeral . Process uses a RDC that interacts with a Data Access Service DAS and a dynamic grammar builder . The DAS is in communication with one or more data sources and has the capability of creating or producing a data graph based upon data from the data source s .

The DAS is part of the SDO framework which provides for a unified framework for data application development. Through use of DAS process removes the requirement of a developer being familiar with various technology specific Application Programming Interfaces API s in order to access and utilize the voice recognition data. DAS can access data sources including relational databases entity Enterprise JavaBeans components XML pages Web services the Java Connector Architecture JavaServer pages and more. The SDO framework provides for the contribution of voice applications and these applications will all be consistent with the SDO model. The SDO framework also incorporates J2EE patterns and practices thus facilitating incorporation of proven architecture and designs into voice applications.

Process includes a voice application with the capability to obtain data from the data graph via the DAS that is specific to some back end data source . Preferably the voice application can examine and or update the data contained in the data graph . The present disclosure also contemplates the voice application employing the DAS to propagate an entire set of updates back to the original data source .

In process the RDC communicates input data which is related to the information the RDC requires to the DAS . The DAS queries the data source to obtain the particular data sought. The DAS then produces or creates the data graph .

The data graph provides a nonpersistent copy of data which allows a voice application to work with the data even when there is no connection to the original data source. The data in data graph can be organized as a group of data objects and can be linked together as a graphical structure. The data graph may also contain a schema that describes the structure of the data object type s contained in the data graph. The data graph can also maintain a Change History or other tracking structure to track all modifications made to the data graph for monitoring of updates. The voice application can preferably define the schema at runtime allowing dynamic access of data objects.

Data graph is populated from data source by DAS . Preferably DAS can propagate back to the originating data source any changes made to the in memory data graph . For example DAS can access a single type of data source for example Java Database Connectivity resources or entity Enterprise Java Beans . DAS can be provided with a description of the data to be accessed. This data description can be a schema and or a query over the associated data source. The process can make a request to the DAS to return the data graph . The DAS reads the requested data from the data source constructs the data graph of related data objects and returns the data graph to the application. The process makes changes to the data graph in memory and then sends the modified data graph back to the DAS . The DAS examines a change summary contained in the data graph and propagates the changes back to the original data source .

Use of the data graph can be advantageous for applying multiple updates in one function or method call to reduce the number of connections and or database operations. By storing data from multiple database rows and tables in the data graph applications can make changes to the data without making additional round trips to the database.

Since the data graph is disconnected from the data source potential updating conflicts may occur. For example it is possible that another application may update the data in the data source that was used to populate the data graph before process requests the DAS to propagate the application s changes back to the data source. To handle such potential update conflicts the DAS can use an optimistic concurrency control and throw an exception to the application when a data collision occurs. The application can then re read the data and re start the transaction. The present disclosure contemplates recovering from a data collision by other methods as well.

The dynamic grammar builder can retrieve data objects from the data graph and build the dynamic grammar therefrom. The RDC then loads the dynamic grammar. The RDC can continue to interact with the user and collect more data using the dynamic grammar to match the new input.

The use of the dynamic grammar builder coupled with the RDC creates the dynamic grammar RDC . The DGRDC provides a mechanism to create a configurable RDC where the configuration is specific to creating dynamic grammars. In addition to the default attributes of RDC s the DGRDC of the exemplary embodiment can have attributes to specify the DAS along with the input type to be expected. The DAS will interact with a plurality of back end data sources as described above to produce data graphs representing the data. The DGRDC can also have a grammar attribute to set the dynamic grammar if the default dynamic grammar class is extended.

The dynamic grammar builder can be added to the RDC framework to interact with the RDC . The optional grammar attribute of the DGRDC should be of this type in the SDO framework. The grammar builder class can use the SDO framework to access the data objects from the data graph provided by the DAS . By default the dynamic grammar builder can build a grammar containing the list of expected results based on the data objects received from the data graph provided by the DAS.

The developer implementing the DGRDC can provide the DAS that communicates to the back end data source and creates the data graph . Various tools can be utilized for providing the DAS such as for example Rational Application Developer RAD . The developer will also have the option of extending the default grammar builder class and setting an optional grammar attribute with their own.

An example of generating a SDO based service pattern can include defining one or more SDO s for a container managed persistent entity bean and generating a session facade bean that includes methods for operating on one or more data object graphs. A client of the service pattern may define the session facade bean definitions SDO definitions and query definitions for service data objects.

Process can also be used for updating of the back end data source via input to the RDC . Any changes made to the data graph could be input into the RDC and passed to the DAS for updating of the data source . An additional attribute and class could be used to hold the logic such as for example business logic for any updates made to the data source s .

Referring to a process is shown for the DGRDC interacting with a caller and the DAS . The RDC prompts the caller for a zip code in step . In step the RDC collects the zip code and passes it to the DAS which then gets the street name information from the data source and produces the data graph . The particular data structure of the zip code data in data source is accessible via the SDO framework and in particular the use of DAS . Step eliminates the need for a developer to customize code based upon the particular data structure zip code data being accessed.

In step the dynamic grammar builder then creates a dynamic grammar with the street address and the RDC loads the newly created dynamic grammar. The RDC then prompts the caller for the street name or number in step . The caller speaks his street name or number and the RDC passes the street name or number to the recognition engine which will use the dynamic grammar to match the caller s input.

Once the match is made the recognition engine confirms the street name or number in step and continues to the next dialog in step . If the caller does not confirm the street name or number the caller can be re prompted for the address.

In another exemplary embodiment shown in a voice recognition process is shown and generally represented by reference numeral . Process uses a RDC that interacts with a XSL transformer XSLT processor and a dynamic grammar builder . The XSLT processor is in communication with one or more data sources and has the capability of producing or creating a data graph . The XSLT processor accepts data structures such as a tree structure as its input from the data source and generates another data structure such as a tree structure as an output.

In process the RDC passes input data which is related to the information the RDC requires to the XSLT processor . The XSLT processor then retrieves data from the data source and generates data graph based upon the stylesheet . The stylesheet comprises templates or functions that can define a fragment of the output data structure or tree as a function of the input data structure or tree.

The dynamic grammar builder then builds the dynamic grammar based on data graph . The RDC then loads the dynamic grammar. The RDC can continue to interact with the user and collect more data using the dynamic grammar to match the new input. The XSLT processor can be particularly effective in working with XML data sources.

In another exemplary embodiment shown in a voice recognition process is shown and generally represented by reference numeral . Process uses a RDC that interacts with a DAS a XSLT processor and a dynamic grammar builder .

In process the RDC passes input data which is related to the information the RDC requires to the DAS . The DAS queries the data source to obtain the data sought. The DAS then produces or creates the data graph . The data graph can be serialized to an XML format.

The XSLT processor can transform the serialized XML data from data graph to a Speech Recognition Grammar Specification SRGS XML grammar based upon the stylesheet . The dynamic grammar builder then retrieves the SRGS XML grammar and the dynamic grammar is loaded. The RDC can continue to interact with the user and collect more data using the dynamic grammar to match the new input.

The exemplary embodiments provide a process for the creation and use of dynamic grammars. This allows for configuration of RDC s specific to voice applications. Existing Service Data Objects can be mapped to a grammar for this dynamic process to provide for consumption by the reusable dialog. The exemplary embodiments obviate the need for development of custom code specific to a system by using the SDO XSLT or other data access frameworks that can universally access heterogeneous back end data sources and collect the data therefrom to dynamically generate the grammars.

The present invention may be realized in hardware software or a combination of hardware and software. The present invention may be realized in a centralized fashion in one computer system or in a distributed fashion where different elements are spread across several interconnected computer systems. Any kind of computer system or other apparatus adapted for carrying out the methods described herein is suited. A typical combination of hardware and software may be a general purpose computer system with a computer program that when being loaded and executed controls the computer system such that it carries out the methods described herein.

The present invention also may be embedded in a computer program product which comprises all the features enabling the implementation of the methods described herein and which when loaded in a computer system is able to carry out these methods. Computer program in the present context means any expression in any language code or notation of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following a conversion to another language code or notation b reproduction in a different material form.

This invention may be embodied in other forms without departing from the spirit or essential attributes thereof. Accordingly reference should be made to the following claims rather than to the foregoing specification as indicating the scope of the invention.

