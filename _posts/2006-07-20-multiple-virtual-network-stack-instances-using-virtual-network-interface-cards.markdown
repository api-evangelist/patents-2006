---

title: Multiple virtual network stack instances using virtual network interface cards
abstract: A method for processing packets that includes receiving a first packet for a first target by a network interface card (NIC), classifying the first packet, sending the first packet to a first receive ring in the NIC based on the classification of the first packet, sending the first packet to a Network Layer from the first receive ring, sending a first virtual network stack (VNS) Instance ID associated with the first receive ring to the Network Layer, obtaining a first VNS Instance parameter using the first VNS Instance ID, and processing the first packet in the Network Layer using the first VNS Instance parameter to obtain a first network processed packet.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07885257&OS=07885257&RS=07885257
owner: Oracle America, Inc.
number: 07885257
owner_city: Redwood City
owner_country: US
publication_date: 20060720
---
The present application contains subject matter that may be related to the subject matter in the following U.S. applications filed on Apr. 22 2005 and assigned to the assignee of the present application Method and Apparatus for Managing and Accounting for Bandwidth Utilization Within A Computing System with U.S. application Ser. No. 11 112 367 Method and Apparatus for Consolidating Available Computing Resources on Different Computing Devices with U.S. application Ser. No. 11 112 368 Assigning Higher Priority to Transactions Based on Subscription Level with U.S. application Ser. No. 11 112 947 Method and Apparatus for Dynamically Isolating Affected Services Under Denial of Service Attack with U.S. application Ser. No. 11 112 158 Method and Apparatus for Improving User Experience for Legitimate Traffic of a Service Impacted by Denial of Service Attack with U.S. application Ser. No. 11 112 629 Method and Apparatus for Limiting Denial of Service Attack by Limiting Traffic for Hosts with U.S. application Ser. No. 11 112 328 Hardware Based Network Interface Per Ring Resource Accounting with U.S. application Ser. No. 11 112 222 Dynamic Hardware Classification Engine Updating for a Network Interface with U.S. application Ser. No. 11 112 934 Network Interface Card Resource Mapping to Virtual Network Interface Cards with U.S. application Ser. No. 11 112 063 Network Interface Decryption and Classification Technique with U.S. application Ser. No. 11 112 436 Method and Apparatus for Enforcing Resource Utilization of a Container with U.S. application Ser. No. 11 112 910 Method and Apparatus for Enforcing Packet Destination Specific Priority Using Threads with U.S. application Ser. No. 11 112 584 Method and Apparatus for Processing Network Traffic Associated with Specific Protocols with U.S. application Ser. No. 11 112 228.

The present application contains subject matter that may be related to the subject matter in the following U.S. applications filed on Oct. 21 2005 and assigned to the assignee of the present application Method and Apparatus for Defending Against Denial of Service Attacks with U.S. application Ser. No. 11 255 366 Router Based Defense Against Denial of Service Attacks Using Dynamic Feedback from Attacked Host with U.S. application Ser. No. 11 256 254 and Method and Apparatus for Monitoring Packets at High Data Rates with U.S. application Ser. No. 11 226 790.

The present application contains subject matter that may be related to the subject matter in the following U.S. applications filed on Jun. 30 2006 and assigned to the assignee of the present application Network Interface Card Virtualization Based On Hardware Resources and Software Rings with U.S. application Ser. No. 11 479 046 Method and System for Controlling Virtual Machine Bandwidth with U.S. application Ser. No. 11 480 000 Virtual Switch with U.S. application Ser. No. 11 480 261 System and Method for Virtual Network Interface Cards Based on Internet Protocol Addresses with U.S. application Ser. No. 11 479 997 Virtual Network Interface Card Loopback Fastpath with U.S. application Ser. No. 11 479 946 Bridging Network Components with U.S. application Ser. No. 11 479 948 Reflecting the Bandwidth Assigned to a Virtual Network Interface Card Through Its Link Speed with U.S. application Ser. No. 11 479 161 Method and Apparatus for Containing a Denial of Service Attack Using Hardware Resources on a Virtual Network Interface Card with U.S. application Ser. No. 11 480 100 Virtual Network Interface Cards with VLAN Functionality with U.S. application Ser. No. 11 479 998 Method and Apparatus for Dynamic Assignment of Network Interface Card Resources with U.S. application Ser. No. 11 479 817 Generalized Serialization Queue Framework for Protocol Processing with U.S. application Ser. No. 11 479 947 Serialization Queue Framework for Transmitting Packets with U.S. application Ser. No. 11 479 143.

The present application contains subject matter that may be related to the subject matter in the following U.S. applications filed on Jul. 20 2006 and assigned to the assignee of the present application Low Impact Network Debugging with U.S. application Ser. No. 11 489 926 Reflecting Bandwidth and Priority in Network Attached Storage I O with U.S. application Ser. No. 11 489 936 Priority and Bandwidth Specification at Mount Time of NAS Device Volume with U.S. application Ser. No. 11 489 934 Notifying Network Applications of Receive Overflow Conditions with U.S. application Ser. No. 11 490 821 Host Operating System Bypass for Packets Destined for a Virtual Machine with U.S. application Ser. No. 11 489 943 Multi Level Packet Classification with U.S. application Ser. No. 11 490 745 Method and System for Automatically Reflecting Hardware Resource Allocation Modifications with U.S. application Ser. No. 11 490 582 Method and System for Network Configuration for Containers with U.S. application Ser. No. 11 490 479 Network Memory Pools for Packet Destinations and Virtual Machines with U.S. application Ser. No. 11 490 486 Method and System for Network Configuration for Virtual Machines with U.S. application Ser. No. 11 489 923 Multiple Virtual Network Stack Instances with U.S. application Ser. No. 11 489 929 and Shared and Separate Network Stack Instances with U.S. application Ser. No. 11 489 933.

Network traffic is transmitted over a network such as the Internet from a sending system e.g. a computer system to a receiving system e.g. a computer system via a physical network interface card NIC . The NIC is a piece of hardware found in a typical computer system that includes functionality to send and receive network traffic. Typically network traffic is transmitted in the form of packets where each packet includes a header and a payload. The header contains information regarding the source address destination address size transport protocol used to transmit the packet and various other identification information associated with the packet. The payload contains the actual data to be transmitted from the network to the receiving system.

Each of the packets sent between the sending system and receiving system is typically associated with a connection. The connection ensures that packets from a given process on the sending system reach the appropriate process on the receiving system. Packets received by the receiving system via a NIC associated with the receiving system are analyzed by a classifier to determine the connection associated with the packet.

Typically the classifier includes a connection data structure that includes information about active connections on the receiving system. The connection data structure may include the following information about each active connection i the queue associated with the connection and ii information necessary to process the packets on the queue associated with the connection. Depending on the implementation the connection data structure may include additional information about each active connection. Such queues are typically implemented as first in first out FIFO queues and are bound to a specific central processing unit CPU on the receiving computer system. Thus all packets for a given connection are placed in the same queue and are processed by the same CPU. In addition each queue is typically configured to support multiple connections.

Once the classifier determines the connection associated with the packets the packets are sent to a temporary data structure e.g. a receive ring on the NIC and an interrupt is issued to the CPU associated with the queue. In response to the interrupt a thread associated with the CPU to which the serialization queue is bound retrieves the packets from the temporary data structure and places them in the appropriate queue. Once packets are placed in the queue those packets are processed in due course. In some implementations the queues are implemented such that only one thread is allowed to access a given queue at any given time.

In general in one aspect the invention relates to a method for processing packets. The method comprises receiving a first packet for a first target by a network interface card NIC classifying the first packet sending the first packet to a first receive ring in the NIC based on the classification of the first packet sending the first packet to a Network Layer from the first receive ring sending a first virtual network stack VNS Instance ID associated with the first receive ring to the Network Layer obtaining a first VNS Instance parameter using the first VNS Instance ID and processing the first packet in the Network Layer using the first VNS Instance parameter to obtain a first network processed packet.

In general in one aspect the invention relates to a system. The system comprises a network interface card NIC comprising a hardware classifier and a first receive ring and a second receive ring wherein the NIC is configured to receive a first packet for a first target on a host classify the first packet using the hardware classifier send the packet to the first receive ring in the NIC based on the classification of the first packet obtain a first target ID associated with the target based on the classification of the first packet and send the first packet and the first target ID to the host from the first receive ring and the host operatively connected to the NIC comprising a Network Layer a Transport Layer and the first target wherein the host is configured to receive the first packet and the first target ID obtain a first virtual network stack VNS ID using the first target ID obtain a first VNS Instance parameter using the first VNS ID and process the first packet in the Network Layer using the first VNS Instance parameter to obtain a first network processed packet.

In general in one aspect the invention relates to a method for send packets. The method comprises issuing a packet by a source executing on a host determining a source ID corresponding to the source determining a virtual network stack VNS instance ID using the source ID obtaining a first VNS Instance parameter using the VNS Instance ID and processing the first packet in a Transport Layer using the first VNS Instance parameter to obtain a first transport processed packet.

Other aspects of the invention will be apparent from the following description and the appended claims.

Specific embodiments of the invention will now be described in detail with reference to the accompanying figures. Like elements in the various figures are denoted by like reference numerals for consistency.

In the following detailed description of embodiments of the invention numerous specific details are set forth in order to provide a more thorough understanding of the invention. However it will be apparent to one of ordinary skill in the art that the invention may be practiced without these specific details. In other instances well known features have not been described in detail to avoid unnecessarily complicating the description.

In general embodiments of the invention relate to a method and system for providing multiple virtual network stack VNS instances in a single host where the host includes virtual network interface cards VNICs . More specifically embodiments of the invention enable each packet destination or non global container in a host to be associated with a separate VNS Instance where each VNS Instance includes its own set of VNS Instance parameters. The use of VNS Instances allows a single host with a single Network layer and a single Transport layer to support multiple configurations at the Network layer and the Transport layer. Accordingly one packet destination may use a first routing protocol e.g. Routing Information Protocol RIP and Transmission Control Protocol TCP while a second packet destination may use a second routing protocol e.g. Open Shortest Path First OSPF and User Datagram Protocol UDP .

The hardware classifier classifies a packet based on information in the header of packet. Accordingly the hardware classifier may classify the packet based on one or a combination of the following the source internet protocol IP address the destination IP address a source Media Access Control MAC address a destination MAC address a source port a destination port a protocol type e.g. Transmission Control Protocol TCP User Datagram Protocol UDP etc. The hardware classifier is not limited to classifying a packet based on one of the aforementioned parameters.

Continuing with the discussion of once a packet has been classified the packet is forwarded to the appropriate RR . Typically each RR is configured to receive packets for a specific non global container or a particular packet destination in the global container . In one embodiment of the invention each RR corresponds to a buffer in the NIC which is configured to store a finite number of packets.

In one embodiment of the invention each RR is associated with a non global container or a packet destination in a global container . Further once the RR has been associated with a non global container or a packet destination in a global container the container ID discussed below corresponding to the a non global container or the packet destination ID discussed below corresponding to a packet destination in a global container is associated with the RR . For example if RR is associated with non global container then the container ID corresponding to non global container is associated with RR .

Associating the RR with the non global container or the packet destination in a global container may include but is not limited to i storing the container ID or packet destination ID in the RR ii associating each packet stored in the RR with the container ID or packet destination ID or iii maintaining a RR Container mapping in the NIC where the RR Container mapping specifies the container ID or packet destination ID for the non global container or the packet destination in a global container associated with each RR in the NIC .

In one embodiment of the invention in addition to associating the RR with a container ID or packet destination ID each RR is associated with one or both of the following cookies i a VNIC cookie and a ii Network Layer cookie. The VNIC cookie specifies a function entry point into a specific VNIC in the host and the Network Layer cookie specifies a function entry point into the Network Layer.

In addition each RR is associated with an acceptor function. The acceptor function takes as input i one of the aforementioned cookies VNIC cookie or Network Layer cookie ii a packet in the RR and iii the container ID or packet destination ID. If the VNIC cookie is used as input to the acceptor function then the packet and container ID are sent to the VNIC specified in the VNIC cookie. Alternatively if the Network Layer cookie is used as input to the acceptor function then the packet and container ID are sent to the Network Layer.

For example a packet in RR may be sent to VNIC using a VNIC cookie that specifies VNIC or the packet may be sent directly to the Network Layer using the Network Layer cookie. In one embodiment of the invention the Network Layer cookie allows the packet to bypass the MAC layer i.e. the layer in which the VNIC resides thereby reducing the amount of processing required to send the packet from the RR to the non global container or packet destination.

In one embodiment of the invention the container ID or packet destination ID is not stored in the RR rather the container ID or packet destination ID is stored in the VNIC associated with the RR. For example VNIC stores the container ID for non global container instead of RR . In such cases the aforementioned acceptor function does not require the container ID or packet destination ID as input.

In one embodiment of the invention the RR or VNIC may include the VNS Instance ID wherein the VNS Instance ID corresponds to the VNS Instance associated with the non global container or packet destination in the global container. In such cases the RR or the VNIC may not include the container ID or the packet destination ID. Further the acceptor function takes the VNS Instance ID as input instead of or in addition to the container ID or the packet destination ID . In addition storing the VNS Instance ID corresponds to associating the RR with the non global container or packet destination in the global container.

In one embodiment of the invention the VNS Instance ID is not stored in the RR rather the VNS Instance ID is stored in the VNIC associated with the RR. For example VNIC stores the VNS Instance ID corresponding to the VNS Instance associated with non global container instead of RR . In such cases the aforementioned acceptor function does not require the container ID or packet destination ID as input.

Continuing with the discussion of the host includes a device driver not shown a number of virtual network interface cards VNICs a Network Layer Transport Layer one or more packet destinations in the global container one or more non global containers a container management component a VNS database and a Container VNS Instance Mapping. Each of the aforementioned components is described below.

Though not shown in the device driver is configured to expose the NIC to the host . Further the device driver is configured to expose the individual RRs to the host . Exposing the aforementioned components to the host includes providing application programming interfaces APIs to allow the host or components executing therein to interact with the NIC and the RRs on the NIC . Interacting with the NIC typically includes obtaining packets from the NIC and sending packets to the NIC .

Each VNIC in the host includes the same functionality as the NIC . However unlike the NIC the VNICs are implemented in the host typically in a MAC layer of the host . To all components above the VNICs e.g. the VNSs the packet destination in the global container and the non global containers the VNICs appear as physical NICs.

Each VNIC is associated with a MAC address and an IP address. Further each VNIC may be optionally associated with a TCP port or UDP port. Further each VNIC is associated with a RR such that the VNICs obtain packets from the RR with which it is associated. For example VNIC obtains packets from RR . In addition each VNIC is configured to send packets received from an associated RR to the Network layer .

In one embodiment of the invention the Network layer is configured to perform Network layer processing. Network layer processing corresponds to functionality to manage packet addressing and delivery on a network e.g. functionality to support Internet Protocol including but not limited to IPv4 and IPv6 Address Resolution Protocol ARP Internet Control Message Protocol ICMP etc. .

The Network layer shown in is used by all packet destinations in the global container e.g. as well as all non global containers . However the specific portions of the Network layer implemented for a packet destination or non global container depend on the VNS Instance parameters associated with the packet destination or non global container .

Said another way the Network layer corresponds to a common set of methods used to perform Network layer processing. However one or more of the methods in the Network layer requires one or more VNS Instance parameters as input for example one method may require the IP address associated with a non global container as well as the IP routing algorithm e.g. RIP OSPF etc. . Thus depending on the VNS Instance parameters input into the one or more of the aforementioned methods the manner in which packets for a first non global container are processed may be different then the manner in which packets for a second non global container are processed.

In one embodiment of the invention the Transport layer is configured to perform Transport layer processing. Transport layer processing corresponds to functionality to manage the transfer of packets on the network e.g. functionality to support Transmission Control Protocol User Datagram Protocol Stream Control Transmission Protocol SCTP etc. .

The Transport layer shown in is used by all packet destinations in the global container e.g. as well as all non global containers . However the specific portions of the Transport layer implemented for a packet destination or non global container depends on the VNS Instance parameters associated with the packet destination or non global container .

Said another way the Transport layer corresponds to a common set of methods used to perform Transport layer processing. However one or more of the methods in the Transport layer requires one or more VNS Instance parameters as input for example one method may require a protocol to implement e.g. TCP or UDP . Thus depending on the VNS Instance parameters input into the one or more of the aforementioned methods the manner in which packets for a first non global container are processed may be different then the manner in which packets for a second non global container are processed.

In one embodiment of the invention the Network layer and the Transport layer are configured to support multithreading. Thus multiple non global containers and or packet destinations in the global container may be simultaneously processing packets in the Network layer and the Transport layer .

As shown in the host includes a global container and a number of non global containers . The global container corresponds to an isolated execution environment within the host . Further each non global container corresponds to an isolated execution environment within the global container . All of the containers global and non global share a common kernel and accordingly are executing the same operating system. While all of the aforementioned containers share a common kernel the non global containers are configured such that processes executing in a given non global container are restricted to execute in the non global container and have no access to resources not assigned to the non global container. The isolated execution environments of each non global container as well as the global container are managed by a container management component executing on the host . The container management component typically executes outside of the global container . An example of a container is a Solaris Container. Solaris is a trademark of Sun Microsystems Inc. of California USA .

Each of the non global containers is configured to send and receive packets from the NIC using the Network layer and the Transport layer . In one embodiment of the invention the packet destination in the global container corresponds to a process executing in the global container where the process is configured to send and receive packets but does not include its own internal networking stack. Rather the packet destination uses the Network layer and the Transport layer executing in the global container .

In one embodiment of the invention each non global container and the global container are identified by a container ID. The container ID uniquely identifies the container in the host . Further each packet destination in the global container is also associated with an ID i.e. a packet destination ID . The packet destination ID uniquely identifies the packet destination in the global container .

As shown in the host includes a VNS database and a Container VNS Instance Mapping . The VNS database includes VNS Instance parameters for each VNS Instance in the host . Typically there is one VNS Instance for each non global container and at least one VNS Instance for the packet destinations in the global container or there may be multiple VNS Instances in the global container where each packet destination is associated with one of the multiple VNS instances . In one embodiment of the invention a VNS Instance corresponds to grouping of VNS Instance parameters and is identified by a VNS Instance ID. The VNS Instance ID uniquely identifies the VNS Instance in the host .

In one embodiment of the invention a VNS Instance parameter corresponds to any parameter that is associated with networking. Examples of VNS Instance parameters may include but are not limited to Media Access Control MAC address Internet Protocol IP address IP routing algorithm e.g. Routing Information Protocol RIP Open Shortest Path First OSPF etc. Transport layer protocol e.g. Transmission Control Protocol TCP User Datagram Protocol UDP an IP routing table default route i.e. the route set in the IP routing table used when no other entry in the IP routing table matches the destination IP address of the packet TCP parameters i.e. parameters in the TCP that may be changed for example bandwidth delay product buffer size etc. IP parameters i.e. parameters in the IP that may be changed TCP port number and UDP port number.

In one embodiment of the invention each VNS Instance includes a value for all VNS Instance parameters for the particular VNS Instance. The value for a particular VNS instance parameter may be specified or a default value for the VNS Instance parameter may be used. For example assume that each VNS instance must specify an IP address an IP routing algorithm a default route and a Transport Layer protocol. Further assume that only values for the IP address and IP routing algorithm are provided. Accordingly default values are obtained for the default route and Transport Layer Protocol.

The VNS Instance parameters are typically specified by a packet destination in the global container or a non global container. The specific of values for VNS Instance parameters is typically dictated by the requirements of the packet destination in the global container or the non global container with which the VNS Instance is associated. An embodiment of a VNS database is shown in below.

In one embodiment of the invention the Container VNS Instance Mapping maps each container global and non global to a VNS Instance. The container is typically identified by a container ID and the VNS Instance is typically identified by the VNS Instance ID. In one embodiment of the invention if the global container includes multiple packet destinations then each of the packet destinations may be identified by a packet destination ID. Further if the packet destination IDs are included in the Container VNS Instance Mapping then the global container may not be listed in an entry in the Container VNS Instance Mapping . Further the Container VNS Instance Mapping may additionally include mappings between packet destinations in the global container and VNS instances. Both the VNS database and a Container VNS Instance Mapping are typically located in the global container . An embodiment of a Container VNS Instance mapping is shown in below.

In one embodiment of the invention the VNS database also includes logic to determine which of the VNS Instance parameters to return at any given time. For example if a process in the Network layer sends the VNS Instance ID to the VNS database then the VNS database may only return VNS Instance parameters associated with the Network layer i.e. which may be used by the Network layer . In such cases all other VNS Instance parameters are not sent to the Network layer.

Though not shown in the VNS database may include default values for VNS instance parameters. As discussed above the default values correspond to values used for any VNS instance parameter not specified for the VNS Instance.

In one embodiment of the invention the VNS Instance parameters for a particular VNS Instance may include both the VNS Instance parameters specified for the VNS Instance as well as the default values for VNS Instance parameters not specified for the VNS Instance. Alternatively the VNS Instance parameters for a particular VNS Instance only include the VNS Instance parameters specified for the VNS Instance and the default values for the VNS Instance parameters not specified for the VNS Instance are located in a separate location in the VNS database or in another location in the host.

In one embodiment of the invention the static parameters correspond to parameters used by all VNS instances in the host . The static parameters typically correspond to parameters that must be the same for all VNS instances executing on the host . As discussed above the static parameters are optionally located in the VNS database . As an alternative the static parameters may be located in a separate location in the global container or may be hard coded into the appropriate locations in the Network layer and the Transport layer .

As discussed above each packet destination in the global container may be identified with a packet destination ID and associated with a VNS Instance. In such cases though not shown in the Container VNS Instance Mapping also includes a packet destination VNS Instance mapping.

A dynamic entry is then created in the VNS database ST . The dynamic entry includes the VNS Instance ID as well as the VNS Instance parameters including if present default values for one or more VNS Instance parameters . In one embodiment of the invention the VNS database assigns the VNS Instance ID to the VNS Instance. An entry in the Container VNS Instance Mapping is subsequently created where the entry associates the container using the container ID with the VNS Instance using the VNS Instance ID ST .

A receive ring is subsequently associated with the container ST . Associating the receive ring with the container includes i programming the hardware classifier on the NIC to send packets for the container to the receive ring ii optionally associating the receive ring with the container ID discussed above and iii optionally storing a VNS Instance ID in the receive ring wherein the VNS Instance ID corresponds to the VNS Instance specified in the dynamic entry created in ST. A VNIC is also associated with the container ST . Associating the VNIC with the container includes placing a VNIC cookie corresponding to the VNIC in the receive ring specified in ST. Further as discussed above the VNIC may also optionally store the container ID and or the VNS Instance ID wherein the VNS Instance ID corresponds to the VNS Instance specified in the dynamic entry created in ST. The process in may also be used for packet destinations in a global container.

Initially a packet is received by a NIC ST . The packet is then classified using the hardware classifier in the NIC ST . In one embodiment of the invention the header of the packet is used in the classification of the packet. In one embodiment of the invention the destination IP address the destination MAC address the destination port TCP or UDP or a combination thereof may be used to classify the packet. The packet is then sent to the receive ring based on the classification ST .

At this stage the packet is optionally sent to the VNIC associated with the receive ring ST . The target ID and or the VNS Instance ID may be sent with the packet depending on whether the target ID and or the VNS Instance ID is associated with the receive ring. In one embodiment of the invention the target of the packet is a non global container or a packet destination in the global container. The VNIC subsequently sends the packet to the Network Layer ST . The target ID and or the VNS Instance ID may be sent with the packet depending on the implementation see ST . As discussed above the target ID and or the VNS Instance ID may be obtained from the VNIC.

The host or a process executing thereon obtains the VNS Instance parameters using the VNS Instance ID or the target ID ST . If the VNS Instance ID is provided then the VNS Instance parameters may be obtained directly from the VNS database. If the target ID is available then the target ID is used to obtain the VNS Instance ID corresponding to the VNS Instance associated with the target using the Container VNS mapping. The VNS Instance ID is then used to obtain the VNS Instance parameters from the VNS database.

Regardless of how they are obtained the VNS Instance parameters are then used by the Network layer and the Transport layer to process the packet ST . The processed packet is then sent to the target ST .

In one embodiment of the invention the packet may be forwarded directly from the receive ring to the network layer as denoted by the dotted line in . Further a method similar to the one described in may be used when transmitting packets from a packet destination or a non global container to the network via the NIC.

In one embodiment of the invention when a packet is issued from a non global container or a packet destination in the global container the packet is issued with a Target ID. The target ID is then used to obtain the corresponding VNS Instance ID from the Container VNS mapping. The VNS Instance ID is then used to obtain the corresponding VNS Instance parameters from the VNS database. The issued packet is then processed by the Transport layer and the network layer in accordance with the VNS Instance parameters. Once the aforementioned processing is complete the packet is sent to the NIC. Upon receipt the NIC sends to the packet to the network.

The following is an example in accordance with one embodiment of the invention. The example is not intended to limit the scope of the invention. Referring to assume that packet destination is associated with the following VNS Instance parameters i use the RIP routing algorithm for network level processing ii the packet destination is associated with IP address 10.2.5.1 iii use TCP for transport level processing and iv use default values for the remaining VNS Instance parameters. Non global container is associated with the following VNS Instance parameters i non global container is associated with IP address 10.2.5.5 ii use UDP for transport level processing and iii use default values for the remaining VNS Instance parameters. Non global zone is associated with the following VNS Instance parameters i non global container is associated with IP address 10.3.1.2 ii use UDP for transport level processing iii use the OSPF routing algorithm network level processing iv set the default route to 10.12.5.4 and iv use default values for the remaining VNS Instance parameters. Further assume the target of packet is packet destination the target of packet is non global container and that packet is issued by non global container .

When packet is received by the NIC the NIC classifies the packet i.e. identifies that the target of the packet as packet destination and sends to the packet to RR . Assume that RR includes the packet destination ID of packet destination and a VNIC cookie corresponding to VNIC .

An acceptor function is subsequently executed where the acceptor function takes the following inputs i packet ii the VNIC cookie and iii the packet destination ID. The result of executing the aforementioned acceptor function is that packet is sent to VNIC . VNIC subsequently sends packet to the Network layer . Prior to sending packet to the network layer or once packet is received by the network layer the VNS Instance ID is obtained using the packet destination ID. The VNS Instance ID is then used to obtain the VNS parameters.

The VNS Instance parameters are subsequently used by the Network layer and the Transport layer to process packet . More specifically the Network layer implements the RIP routing algorithm and uses IP address 10.2.5.1 as the IP address of the packet destination. Further the Transport layer implements TCP. In one embodiment of the invention the Network layer only obtains the VNS Instance parameters associated with the Network layer . Similarly the Transport layer only obtains the VNS Instance parameters associated with the Transport layer .

When packet is received by the NIC the NIC classifies the packet i.e. identifies that the target of the packet as non global container and sends to the packet to RR . Assume that RR includes the VNS Instance ID and a Network Layer. An acceptor function is subsequently executed where the acceptor function takes the following inputs i packet ii the Network Layer cookie and iii the packet destination ID. The result of executing the aforementioned acceptor function is that packet is sent to directly to the Network layer . Once packet is received by the Network layer the VNS Instance ID is used to obtain the VNS parameters.

The VNS Instance parameters are then used by the Network layer and the Transport layer to process packet . More specifically the Network layer uses IP address 10.2.5.5 as the IP address of non global container . Further the Transport layer implements UDP. In one embodiment of the invention the Network layer only obtains the VNS Instance parameters associated with the Network layer . Similarly the Transport layer only obtains the VNS Instance parameters associated with the Transport layer .

When packet is issued by non global container the host identifies non global container as the issuing container. The host then obtains the corresponding container ID i.e. the container ID associated with non global container . The host then proceeds to obtain the VNS Instance ID and in due course the VNS Instance parameters associated with the VNS Instance as identified by the VNS Instance ID using the container ID.

The VNS Instance parameters are then used by the Network layer and the Transport layer to process packet . More specifically the Network layer implements the OSPF routing algorithm uses 10. 12. 5. 4 as the default route in the IP routing table and uses IP address 10.3.1.2 as the IP address of non global container . Further the Transport layer implements UDP. In one embodiment of the invention the Network layer only obtains the VNS Instance parameters associated with the Network layer . Similarly the Transport layer only obtains the VNS Instance parameters associated with the Transport layer .

An embodiment of the invention may be implemented on virtually any type of computer regardless of the platform being used. For example as shown in a networked computer system includes a processor associated memory a storage device and numerous other elements and functionalities typical of today s computers not shown . The networked computer may also include input means such as a keyboard and a mouse and output means such as a monitor . The networked computer system is connected to a local area network LAN or a wide area network via a network interface connection not shown . Those skilled in the art will appreciate that these input and output means may take other forms. Further those skilled in the art will appreciate that one or more elements of the aforementioned computer may be remotely located and connected to the other elements over a network. Further software instructions to perform embodiments of the invention may be stored on a computer readable medium such as a compact disc CD a diskette a tape or any other physical computer readable storage device.

While the invention has been described with respect to a limited number of embodiments those skilled in the art having benefit of this disclosure will appreciate that other embodiments can be devised which do not depart from the scope of the invention as disclosed herein. Accordingly the scope of the invention should be limited only by the attached claims.

