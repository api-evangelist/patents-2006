---

title: Transcoding for a distributed file system
abstract: A method for transcoding a file on a distributed file system is described. The distributed file system stores portions of the file across a plurality of distinct physical storage locations. A request to transcode the file is received. The file is transcoded from a first format to a second format using a processing unit of at least one of the physical storage locations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08266182&OS=08266182&RS=08266182
owner: Harmonic Inc.
number: 08266182
owner_city: San Jose
owner_country: US
publication_date: 20060630
---
An embodiment of the invention is generally directed to electronic data storage systems and more particularly to scalable data storage systems.

In today s information intensive environment there are many businesses and other institutions that need to store huge amounts of digital data. These include entities such as large corporations that store internal company information to be shared by thousands of networked employees online merchants that store information on millions of products and libraries and educational institutions with extensive literature collections. A more recent need for the use of large scale data storage systems is in the broadcast television programming market. Such businesses are undergoing a transition from the older analog techniques for creating editing and transmitting television programs to an all digital approach. Not only is the content such as a commercial itself stored in the form of a digital video file but editing and sequencing of programs and commercials in preparation for transmission are also digitally processed using powerful computer systems. Other types of digital content that can be stored in a data storage system include seismic data for earthquake prediction and satellite imaging data for mapping.

To help reduce the overall cost of the storage system a distributed architecture is used. Hundreds of smaller relatively low cost high volume manufactured disk drives currently each disk drive unit has a capacity of one hundred or more Gbytes may be networked together to reach the much larger total storage capacity. However this distribution of storage capacity also increases the chances of a failure occurring in the system that will prevent a successful access. Such failures can happen in a variety of different places including not just in the system hardware e.g. a cable a connector a fan a power supply or a disk drive unit but also in software such as a bug in a particular client application program. Storage systems have implemented redundancy in the form of a redundant array of inexpensive disks RAID so as to service a given access e.g. make the requested data available despite a disk failure that would have otherwise thwarted that access. The systems also allow for rebuilding the content of a failed disk drive into a replacement drive.

With respect to stored audio video content a transcoding hardware separate from the storage hardware is used to transcode the audio video content. Such external transcoding hardware creates a bottleneck when moving audio video data between a storage system and the transcoding system resulting in poor performance.

The following description sets forth numerous specific details such as examples of specific systems components methods and so forth in order to provide a good understanding of several embodiments of the present invention. It will be apparent to one skilled in the art however that at least some embodiments of the present invention may be practiced without these specific details. In other instances well known components or methods are not described in detail or are presented in simple block diagram format in order to avoid unnecessarily obscuring the present invention. Thus the specific details set forth are merely exemplary. Particular implementations may vary from these exemplary details and still be contemplated to be within the spirit and scope of the present invention.

Embodiments of the present invention include various operations which will be described below. These operations may be performed by hardware components software firmware or a combination thereof. As used herein the term coupled to may mean coupled directly or indirectly through one or more intervening components. Any of the signals provided over various buses described herein may be time multiplexed with other signals and provided over one or more common buses. Additionally the interconnection between circuit components or blocks may be shown as buses or as single signal lines. Each of the buses may alternatively be one or more single signal lines and each of the single signal lines may alternatively be buses.

Certain embodiments may be implemented as a computer program product that may include instructions stored on a machine readable medium. These instructions may be used to program a general purpose or special purpose processor to perform the described operations. A machine readable medium includes any mechanism for storing or transmitting information in a form e.g. software processing application readable by a machine e.g. a computer . The machine readable medium may include but is not limited to magnetic storage medium e.g. floppy diskette optical storage medium e.g. CD ROM magneto optical storage medium read only memory ROM random access memory RAM erasable programmable memory e.g. EPROM and EEPROM flash memory electrical optical acoustical or other form of propagated signal e.g. carrier waves infrared signals digital signals etc. or another type of medium suitable for storing electronic instructions.

In an embodiment a program storage device readable by a machine tangibly embodies a program of instructions executable by the machine to perform a method for transcoding a file of a distributed file system. The method may comprise receiving a request to transcode the file the distributed file system storing portions of the file across a plurality of distinct physical storage locations and transcoding the file from a first format to a second format using a processing unit of at least one of the physical storage locations. The method may further comprise storing the file with the second format in the distributed file system receiving the request from a client and sending the transcoded file to the client.

Additionally some embodiments may be practiced in distributed computing environments where the machine readable medium is stored on and or executed by more than one computer system. In addition the information transferred between computer systems may either be pulled or pushed across the communication medium connecting the computer systems.

Embodiments of a method and apparatus are described to notify one or more applications coupled to a data storage system of a change to a file or an addition of a new file. In one embodiment the notification system of the distributed file system communicates with one or more applications.

The data storage system includes media servers and a content library . Media servers may be composed of a number of software components that are running on a network of server machines. The server machines communicate with the content library including mass storage devices such as rotating magnetic disk drives that store the data. The server machines accept requests to create write or read a file and manages the process of transferring data into one or more disk drives in the content library or delivering requested read data from them. The server machines keep track of which file is stored in which drive. Requests to access a file i.e. create write or read are typically received from what is referred to as a client application program that may be running on a client machine connected to the server network. For example the application program may be a video editing application running on a workstation of a television studio that needs a particular video clip stored as a digital video file in the system .

Video data is voluminous even with compression in the form of for example Motion Picture Experts Group MPEG formats. Accordingly data storage systems for such environments are designed to provide a storage capacity of at least tens of terabytes or greater. Also high speed data communication links are used to connect the server machines of the network and in some cases to connect with certain client machines as well to provide a shared total bandwidth of one hundred Gb second and greater for accessing the data storage system . The storage system is also able to service accesses by multiple clients simultaneously.

The data storage system can be accessed using client machines that can take a variety of different forms. For example content files in this example various types of digital media files including MPEG and high definition HD can be requested by media server which as shown in can interface with standard digital video cameras tape recorders and a satellite feed during an ingest phase of the media processing. As an alternative the client machine may be on a remote network such as the Internet. In a production phase stored files can be streamed to client machines for browsing editing and archiving . Modified files may then be sent to media servers or directly through a remote network for distribution during a playout phase .

The data storage system provides a relatively high performance high availability storage subsystem with an architecture that may prove to be particularly easy to scale as the number of simultaneous client accesses increase or as the total storage capacity requirement increases. The addition of media servers as in and a content gateway not shown enables data from different sources to be consolidated into a single high performance high availability system thereby reducing the total number of storage units that a business must manage. In addition to being able to handle different types of workloads including different sizes of files as well as different client loads an embodiment of the system may have features including automatic load balancing a high speed network switching interconnect data caching and data replication. According to an embodiment the data storage system scales in performance as needed from 20 Gb second on a relatively small or less than 66 terabyte system to over several hundred Gb second for larger systems that is over 1 petabyte. For a directly connected client this translates into currently a minimum effective 60 megabyte per second transfer rate and for content gateway attached clients a minimum 40 megabytes per second. Such numbers are of course only examples of the current capability of the data storage system and are not intended to limit the full scope of the invention being claimed.

In accordance with an embodiment the data storage system may be designed for non stop operation as well as allowing the expansion of storage clients and networking bandwidth between its components without having to shutdown or impact the accesses that are in process. The data storage system preferably has sufficient redundancy that there is no single point of failure. Data stored in the content library has multiple replications thus allowing for a loss of mass storage units e.g. disk drive units or even an entire server without compromising the data. In the different embodiments of the invention data replication for example in the event of a disk drive failure is considered to be relatively rapid and without causing any noticeable performance degradation on the data storage system as a whole. In contrast to a typical RAID system a replaced drive unit of the data storage system may not contain the same data as the prior failed drive. That is because by the time a drive replacement actually occurs the re replication process will already have started re replicating the data from the failed drive onto other drives of the system .

In addition to mass storage unit failures the data storage system may provide protection against failure of any larger component part or even a complete component e.g. a metadata server a content server and a networking switch . In larger systems such as those that have three or more groups of servers arranged in respective enclosures or racks as described below the data storage system should continue to operate even in the event of the failure of a complete enclosure or rack.

Referring now to a system architecture for a data storage system connected to multiple clients is shown in accordance with an embodiment of the invention. The system has a number of metadata server machines each to store metadata for a number of files that are stored in the system . Software running in such a machine is referred to as a metadata server or a content director . The metadata server is responsible for managing operation of the system and is the primary point of contact for clients and . Note that there are two types of clients illustrated a smart client and a legacy client .

The smart client has knowledge of the proprietary network protocol of the system and can communicate directly with the content servers behind the networking fabric here a Gb Ethernet switch of the system . The switch acts as a selective bridge between content servers and metadata server as illustrated in .

The other type of client is a legacy client that does not have a current file system driver FSD installed or that does not use a software development kit SDK that is currently provided for the system . The legacy client indirectly communicates with content servers behind the Ethernet switch through a proxy or a content gateway as shown via an open networking protocol that is not specific to the system . The content gateway may also be referred to as a content library bridge .

The file system driver or FSD is a software that is installed on a client machine to present a standard file system interface for accessing the system . On the other hand the software development kit or SDK allows a software developer to access the system directly from an application program. This option also allows system specific functions such as the replication factor setting to be described below to be available to the user of the client machine.

In the system files are typically divided into slices when stored. In other words the parts of a file are spread across different disk drives located within content servers. In a current embodiment the slices are preferably of a fixed size and are much larger than a traditional disk block thereby permitting better performance for large data files e.g. currently 8 Mbytes suitable for large video and audio media files . Also files are replicated in the system across different drives within different content servers to protect against hardware failures. This means that the failure of any one drive at a point in time will not preclude a stored file from being reconstituted by the system because any missing slice of the file can still be found in other drives. The replication also helps improve read performance by making a file accessible from more servers. To keep track of what file is stored where or where are the slices of a file stored the system has a metadata server program that has knowledge of metadata information about files which includes the mapping between a file name and its slices of the files that have been created and written to.

The metadata server determines which of the content servers are available to receive the actual content or data for storage. The metadata server also performs load balancing that is determining which of the content servers should be used to store a new piece of data and which ones should not due to either a bandwidth limitation or a particular content server filling up. To assist with data availability and data protection the file system metadata may be replicated multiple times. For example at least two copies may be stored on each metadata server and for example one on each hard disk drive unit . Several checkpoints of the metadata should be taken at regular time intervals. It is expected that on most embodiments of the system only a few minutes of time may be needed for a checkpoint to occur such that there should be minimal impact on overall system operation.

In normal operation all file accesses initiate or terminate through a metadata server . The metadata server responds for example to a file open request by returning a list of content servers that are available for the read or write operations. From that point forward client communication for that file e.g. read write is directed to the content servers and not the metadata servers . The SDK and FSD of course shield the client from the details of these operations. As mentioned above the metadata servers control the placement of files and slices providing a balanced utilization of the content servers.

In accordance with another embodiment a system manager not shown may also be provided for instance on a separate rack mount server machine for configuring and monitoring the system .

The connections between the different components of the system that is the content servers and the metadata servers should provide the necessary redundancy in the case of a network interconnect failure.

A networking switch automatically divides a network into multiple segments acts as a high speed selective bridge between the segments and supports simultaneous connections of multiple pairs of computers which may not compete with other pairs of computers for network bandwidth. It accomplishes this by maintaining a table of each destination address and its port. When the switch receives a packet it reads the destination address from the header information in the packet establishes a temporary connection between the source and destination ports sends the packet on its way and may then terminate the connection.

The switch can be viewed as making multiple temporary crossover cable connections between pairs of computers. High speed electronics in the switch automatically connect the end of one cable source port from a sending computer to the end of another cable destination port going to the receiving computer on a per packet basis. Multiple connections like this can occur simultaneously.

In the example topology of multi Gb Ethernet switches are used to provide connections between the different components of the system . illustrate 1 Gb Ethernet and 10 Gb Ethernet switches allowing a bandwidth of 40 Gb second available to the client. However these are not intended to limit the scope of the invention as even faster switches may be used in the future. The example topology of has two subnets subnet A and subnet B in which the content servers are arranged. Each content server has a pair of network interfaces one to subnet A and another to subnet B making each content server accessible over either subnet or . Subnet cables connect the content servers to a pair of switches where each switch has ports that connect to a respective subnet. The subnet cables may include for example Category 6 cables. Each of these 1 Gb Ethernet switches has a dual 10 Gb Ethernet connection to the 10 Gb Ethernet switch which in turn connects to a network of client machines .

In accordance with one embodiment a legacy client communicates with a gateway server through the 10 Gb Ethernet switch and the 1 Gb Ethernet switch . The gateway server acts as a proxy for the legacy client and communicates with content servers via the 1 GbE switch .

In this example there are three content directors each being connected to the 1 Gb Ethernet switches over separate interfaces. In other words each 1 Gb Ethernet switch has at least one connection to each of the three content directors . In addition the networking arrangement is such that there are two private networks referred to as private ring and private ring where each private network has the three content directors as its nodes. Those of ordinary skills in the art will recognize that the above private networks refer to dedicated subnet and are not limited to private ring networks. The content directors are connected to each other with a ring network topology with the two ring networks providing redundancy. The content directors and content servers are preferably connected in a mesh network topology see U.S. patent application entitled Logical and Physical Network Topology as Part of Scalable Switching Redundancy and Scalable Internal and Client Bandwidth Strategy by Donald Craig et al. P020 . An example physical implementation of the embodiment of would be to implement to each content server as a separate server blade all inside the same enclosure or rack. The Ethernet switches as well as the three content directors could also be placed in the same rack. The invention is of course not limited to a single rack embodiment. Additional racks filled with content servers content directors and switches may be added to scale the system .

Turning now to an example software architecture for the system is depicted. The system has a distributed file system program that is to be executed in the metadata server machines the content server machines and the client machines to hide complexity of the system from a number of client machine users. In other words users can request the storage and retrieval of in this case audio and or video information though a client program where the file system makes the system appear as a single simple storage repository to the user. A request to create write or read a file is received from a network connected client by a metadata server . The file system software or in this case the metadata server portion of that software translates the full file name that has been received into corresponding slice handles which point to locations in the content servers where the constituent slices of the particular file have been stored or are to be created. The actual content or data to be stored is presented to the content servers by the clients directly. Similarly a read operation is requested by a client directly from the content servers .

Each content server machine may have one or more local mass storage units e.g. rotating magnetic disk drive units and manages the mapping of a particular slice onto its one or more drives. In addition in the preferred embodiment replication operations are controlled at the slice level. The content servers communicate with one another to achieve slice replication and obtaining validation of slice writes from each other without involving the client.

In addition since the file system is distributed amongst multiple servers the file system may use the processing power of each server be it a content server a client or a metadata server on which it resides. As described below in connection with the embodiment of adding a content server to increase the storage capacity automatically increases the total number of network interfaces in the system meaning that the bandwidth available to access the data in the system also automatically increases. In addition the processing power of the system as a whole also increases due to the presence of a central processing unit and associated main memory in each content server. Such scaling factors suggest that the system s processing power and bandwidth may grow proportionally as more storage and more clients are added ensuring that the system does not bog down as it grows larger.

The metadata servers may be considered to be active members of the system as opposed to being an inactive backup unit. This allows the system to scale to handling more clients as the client load is distributed amongst the metadata servers . As a client load increases even further additional metadata servers can be added.

According to an embodiment of the invention the amount of replication also referred to as replication factor is associated individually with each file. All of the slices in a file preferably share the same replication factor. This replication factor can be varied dynamically by the user. For example the system s application programming interface API function for opening a file may include an argument that specifies the replication factor. This fine grain control of redundancy and performance versus cost of storage allows the user to make decisions separately for each file and to change those decisions over time reflecting the changing value of the data stored in a file. For example when the system is being used to create a sequence of commercials and live program segments to be broadcast the very first commercial following a halftime break of a sports match can be a particularly expensive commercial. Accordingly the user may wish to increase the replication factor for such a commercial file temporarily until after the commercial has been played out and then reduce the replication factor back down to a suitable level once the commercial has aired.

According to another embodiment of the invention the content servers in the system are arranged in groups. The groups are used to make decisions on the locations of slice replicas. For example all of the content servers that are physically in the same equipment rack or enclosure may be placed in a single group. The user can thus indicate to the system the physical relationship between content servers depending on the wiring of the server machines within the enclosures. Slice replicas are then spread out so that no two replicas are in the same group of content servers. This allows the system to be resistant against hardware failures that may encompass an entire rack.

Replication of slices is preferably handled internally between content servers . Clients are thus not required to expend extra bandwidth writing the multiple copies of their files. In accordance with an embodiment of the invention the system provides an acknowledgment scheme where a client can request acknowledgement of a number of replica writes that is less than the actual replication factor for the file being written. For example the replication factor may be several hundred such that waiting for an acknowledgment on hundreds of replications would present a significant delay to the client s processing. This allows the client to tradeoff speed of writing verses certainty of knowledge of the protection level of the file data. Clients that are speed sensitive can request acknowledgement after only a small number of replicas have been created. In contrast clients that are writing sensitive or high value data can request that the acknowledgement be provided by the content servers only after all specified number of replicas have been created.

According to an embodiment of the invention files are divided into slices when stored in the system . In a preferred case a slice can be deemed to be an intelligent object as opposed to a conventional disk block or stripe that is used in a typical RAID or storage area network SAN system. The intelligence derives from at least two features. First each slice may contain information about the file for which it holds data. This makes the slice self locating. Second each slice may carry checksum information making it self validating. When conventional file systems lose metadata that indicates the locations of file data due to a hardware or other failure the file data can only be retrieved through a laborious manual process of trying to piece together file fragments. In accordance with an embodiment of the invention the system can use the file information that are stored in the slices themselves to automatically piece together the files. This provides extra protection over and above the replication mechanism in the system . Unlike conventional blocks or stripes slices cannot be lost due to corruption in the centralized data structures.

In addition to the file content information a slice also carries checksum information that may be created at the moment of slice creation. This checksum information is said to reside with the slice and is carried throughout the system with the slice as the slice is replicated. The checksum information provides validation that the data in the slice has not been corrupted due to random hardware errors that typically exist in all complex electronic systems. The content servers preferably read and perform checksum calculations continuously on all slices that are stored within them. This is also referred to as actively checking for data corruption. This is a type of background checking activity which provides advance warning before the slice data is requested by a client thus reducing the likelihood that an error will occur during a file read and reducing the amount of time during which a replica of the slice may otherwise remain corrupted.

In accordance with another embodiment content server may access content server to transcode a portion of the file residing on content server . Content server may thus act as a transcoding client on behalf of client .

The processing unit of each content server may be used to perform transcoding as long as the transcoding process does not interfere with the primary role of the content server which is to provide storage. In order to ensure that the processing unit is not abused by the transcoding process each content server may be partitioned into separate logic portions. For example a first separate logic portion of a content server may be used exclusively for processing storage functions. A second separate logic portion of the content server may be used for processing transcoding functions. Other logic portions may be used for processing more functions such as security. Those of ordinary skills in the art will recognize that the content servers may be partitioned in many ways.

At the file is transcoded from a first format to a second format using a processing unit of at least one of the physical storage locations. In accordance with another embodiment one content server may access another second content server of the distributed file system to transcode a portion of the file. One content server may act as a transcoding client transcoding the file on its own processing unit or on other processing units from the other content servers. The transcoded file may be stored in the file distributed system. In accordance with one embodiment a first separate logic portion of the content server may be partitioned for processing security functions. A second separate logic portion of the content server may be partitioned for processing transcoding functions.

In the foregoing specification the invention has been described with reference to specific exemplary embodiments thereof. It will however be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

