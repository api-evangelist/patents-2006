---

title: Robotic guarded motion system and method
abstract: A robot platform includes perceptors, locomotors, and a system controller. The system controller executes instructions for repeating, on each iteration through an event timing loop, the acts of defining an event horizon, detecting a range to obstacles around the robot, and testing for an event horizon intrusion. Defining the event horizon includes determining a distance from the robot that is proportional to a current velocity of the robot and testing for the event horizon intrusion includes determining if any range to the obstacles is within the event horizon. Finally, on each iteration through the event timing loop, the method includes reducing the current velocity of the robot in proportion to a loop period of the event timing loop if the event horizon intrusion occurs.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07668621&OS=07668621&RS=07668621
owner: The United States of America as represented by the United States Department of Energy
number: 07668621
owner_city: Washington
owner_country: US
publication_date: 20060705
---
The United States Government has rights in the following invention pursuant to Contract No. DE AC07 05 ID14517 between the U.S. Department of Energy and Battelle Energy Alliance LLC.

The present invention relates generally to robotics and more specifically to software architectures for realizing an intelligence kernel for robots.

Historically robot behaviors have been created for specific tasks and applications. These behaviors have generally been reinvented time and again for different robots and different applications. There has been no sustained attempt to provide a kernel of basic robot competence and decision making that can be used to bootstrap development across many different applications.

Some architectures have been proposed that provide a generic application programming interface API for querying various sensors and commanding various actuators however many of these architectures have been limited to raw inputs and outputs rather than provide the intelligence and behavior to a robot. As a result the behavior functionality created for one robot may not be easily ported to new robots. Other architectures have been proposed to allow limited behaviors to port across different robot platforms but these have generally been limited to specific low level control systems.

The problem with robots today is that they are not very bright. Current robot intelligence is really just a grab bag of programmed behaviors to keep mobile robots from doing stupid things like getting stuck in corners or running into obstacles. The promise of wireless robots is that they can be sent into remote situations that are too difficult or dangerous for humans. The reality is that today s robots generally lack the ability to make any decisions on their own and rely on continuous guidance by human operators watching live video from on board cameras.

Most commercial robots operate on a master slave principle. A human operator completely controls the movement of the robot from a remote location using robot based sensors such as video and Global Positioning System GPS . This setup often requires more than one operator per robot to navigate around obstacles and achieve a goal. As a result very skilled operators may be necessary to reliably direct the robot. Furthermore the intense concentration needed for controlling the robot can detract from achieving mission goals.

Although it has been recognized that there is a need for adjustable autonomy robot architectures currently do not exist that provide a foundation of autonomy levels upon which to build intelligent robotic capabilities. Furthermore robot architectures do not currently exist that provide a foundation of generic robot attributes for porting to a variety of robot platforms.

Therefore there is a need for a generic scalable robot architecture that provides a framework that is easily portable to a variety of robot platforms and is configured to not only provide hardware abstractions but also provide abstractions for generic robot attributes and robot behaviors.

In addition there is a need for a robot intelligence kernel that provides a framework of dynamic autonomy that is easily portable to a variety of robot platforms and is configured to control a robot at a variety of interaction levels and across a diverse range of robot behaviors.

The present invention provides methods and apparatuses for a robot intelligence kernel that provides a framework of dynamic autonomy that is easily portable to a variety of robot platforms and is configured to control a robot at a variety of interaction levels and across a diverse range of robot behaviors including controlling motion behaviors of the robot.

An embodiment of the present invention comprises a method for controlling motion of a robot by repeating on each iteration through an event timing loop the acts of defining an event horizon detecting a range to obstacles around the robot and testing for an event horizon intrusion. Defining the event horizon includes determining a distance from the robot that is proportional to a current velocity of the robot and testing for the event horizon intrusion includes determining if any range to the obstacles is within the event horizon. Finally on each iteration through the event timing loop the method includes reducing the current velocity of the robot in proportion to a loop period of the event timing loop if the event horizon intrusion occurs.

Another embodiment of the present invention comprises a computer readable medium having computer instructions thereon which when executed on a processor provide a method for controlling motion of a robot. The computer instructions include instructions for repeating on each iteration through an event timing loop the acts of defining an event horizon detecting a range to obstacles around the robot and testing for an event horizon intrusion. Defining the event horizon includes determining a distance from the robot that is proportional to a current velocity of the robot and testing for the event horizon intrusion includes determining if any range to the obstacles is within the event horizon. Finally on each iteration through the event timing loop the method includes reducing the current velocity of the robot in proportion to a loop period of the event timing loop if the event horizon intrusion occurs.

Another embodiment of the present invention comprises a robot platform that includes at least one perceptor at least one locomotor and a system controller. The at least one perceptor is configured for perceiving environmental variables of interest. The at least one locomotor is configured for providing mobility to the robot platform. The system controller is configured for executing computer instructions configured for controlling motion of a robot. The computer instructions include instructions for repeating on each iteration through an event timing loop the acts of defining an event horizon detecting a range to obstacles around the robot and testing for an event horizon intrusion. Defining the event horizon includes determining a distance from the robot that is proportional to a current velocity of the robot and testing for the event horizon intrusion includes determining if any range to the obstacles is within the event horizon. Finally on each iteration through the event timing loop the method includes reducing the current velocity of the robot in proportion to a loop period of the event timing loop if the event horizon intrusion occurs.

The present invention provides methods and apparatuses for a robot intelligence kernel that provides a framework of dynamic autonomy that is easily portable to a variety of robot platforms and is configured to control a robot at a variety of interaction levels and across a diverse range of robot behaviors.

In the following description circuits and functions may be shown in block diagram form in order not to obscure the present invention in unnecessary detail. Conversely specific circuit implementations shown and described are exemplary only and should not be construed as the only way to implement the present invention unless specified otherwise herein. Additionally block definitions and partitioning of logic between various blocks is exemplary of a specific implementation. It will be readily apparent to one of ordinary skill in the art that the present invention may be practiced by numerous other partitioning solutions. For the most part details concerning timing considerations and the like have been omitted where such details are not necessary to obtain a complete understanding of the present invention and are within the abilities of persons of ordinary skill in the relevant art.

In this description some drawings may illustrate signals as a single signal for clarity of presentation and description. It will be understood by a person of ordinary skill in the art that the signal may represent a bus of signals wherein the bus may have a variety of bit widths and the present invention may be implemented on any number of data signals including a single data signal.

Furthermore in this description of the invention reference is made to the accompanying drawings which form a part hereof and in which is shown by way of illustration specific embodiments in which the invention may be practiced. The embodiments are intended to describe aspects of the invention in sufficient detail to enable those skilled in the art to practice the invention. Other embodiments may be utilized and changes may be made without departing from the scope of the present invention. The following detailed description is not to be taken in a limiting sense and the scope of the present invention is defined only by the appended claims.

Headings are included herein to aid in locating certain sections of detailed description. These headings should not be considered to limit the scope of the concepts described under any specific heading. Furthermore concepts described in any specific heading are generally applicable in other sections throughout the entire specification.

The system controller may include a processor operably coupled to other system devices by internal buses . By way of example and not limitation the processor may be coupled to a memory through a memory bus . The system controller may also include an internal bus for coupling the processor to various other devices such as storage devices local input devices local output devices and local displays .

Local output devices may be devices such as speakers status lights and the like. Local input devices may be devices such as keyboards mice joysticks switches and the like.

Local displays may be as simple as light emitting diodes indicating status of functions of interest on the robot platform or may be as complex as a high resolution display terminal.

The communication channels may be adaptable to both wired and wireless communication as well as supporting various communication protocols. By way of example and not limitation the communication channels may be configured as a serial or parallel communication channel such as for example USB IEEE 1394 802.11a b g cellular telephone and other wired and wireless communication protocols.

The perceptors may include inertial sensors thermal sensors tactile sensors compasses range sensors sonar Global Positioning System GPS Ground Penetrating Radar GPR lasers for object detection and range sensing imaging devices and the like. Furthermore those of ordinary skill in the art will understand that many of these sensors may include a generator and a sensor to combine sensor inputs into meaningful actionable perceptions. For example sonar perceptors and GPR may generate sound waves or sub sonic waves and sense reflected waves. Similarly perceptors including lasers may include sensors configured for detecting reflected waves from the lasers for determining interruptions or phase shifts in the laser beam.

Imaging devices may be any suitable device for capturing images such as for example an infrared imager a video camera a still camera a digital camera a Complementary Metal Oxide Semiconductor CMOS imaging device a charge coupled device CCD imager and the like. In addition the imaging device may include optical devices for modifying the image to be captured such as for example lenses collimators filters and mirrors. For adjusting the direction at which the imaging device is oriented a robot platform may also include pan and tilt mechanisms coupled to the imaging device. Furthermore a robot platform may include a single imaging device or multiple imaging devices.

The manipulators may include vacuum devices magnetic pickup devices arm manipulators scoops grippers camera pan and tilt manipulators and the like.

The locomotors may include one or more wheels tracks legs rollers propellers and the like. For providing the locomotive power and steering capabilities the locomotors may be driven by motors actuators levers relays and the like. Furthermore perceptors may be configured in conjunction with the locomotors such as for example odometers and pedometers.

Software processes illustrated herein are intended to illustrate representative processes that may be performed by the robot platform or robot controller . Unless specified otherwise the order in which the processes are described is not intended to be construed as a limitation. Furthermore the processes may be implemented in any suitable hardware software firmware or combinations thereof. By way of example software processes may be stored on the storage device transferred to the memory for execution and executed by the processor .

When executed as firmware or software the instructions for performing the processes may be stored on a computer readable medium i.e. storage device . A computer readable medium includes but is not limited to magnetic and optical storage devices such as disk drives magnetic tape CDs compact disks DVDs digital versatile discs or digital video discs and semiconductor devices such as RAM DRAM ROM EPROM and Flash memory.

Conventionally robot architectures have been defined for individual robots and generally must be rewritten or modified to work with different sensor suites and robot platforms. This means that adapting the behavior functionality created for one robot platform to a different robot platform is problematic. Furthermore even architectures that propose a hardware abstraction layer to create a framework for accepting various hardware components still may not create a robot abstraction layer wherein the abstractions presented for high level behavioral programming are in terms of actionable components or generic robot attributes rather than the hardware present on the robot.

A notable aspect of the present invention is that it collates the sensor data issued from hardware or other robotic architectures into actionable information in the form of generic precepts. Embodiments of the present invention may include a generic robot architecture GRA which comprises an extensible low level framework which can be applied across a variety of different robot hardware platforms perceptor suites and low level proprietary control application programming interfaces APIs . By way of example some of these APIs may be Mobility Aria Aware Player etc. .

At the lower level the GRA includes a hardware abstraction level which provides for portable object oriented access to low level hardware perception and control modules that may be present on a robot. The hardware abstraction level is reserved for hardware specific classes and includes for example implementations for the actual robot geometry and sensor placement on each robot type.

Above the hardware abstraction level the GRA includes a robot abstraction level which provides atomic elements i.e. building blocks of generic robot attributes and develops a membrane between the low level hardware abstractions and controls. This membrane is based on generic robot attributes or actionable components which include robot functions robot perceptions and robot status. Each generic robot attribute may utilize a variety of hardware abstractions and possibly other robot attributes to accomplish its individual function.

The robot abstraction level may include implementations that are generic to given proprietary low level APIs. Examples of functions in this class level include the interface calls for a variety of atomic level robot behaviors such as for example controlling motion and reading sonar data.

The GRA enables substantially seamless porting of behavioral intelligence to new hardware platforms and control APIs by defining generic robot attributes and actionable components to provide the membrane and translation between behavioral intelligence and the hardware. Once a definition for a robot in terms of platform geometries sensors and API calls has been specified behavior and intelligence may be ported in a substantially seamless manner for future development. In addition the object oriented structure enables straightforward extension of the architecture for defining new robot platforms as well as defining low level abstractions for new perceptors motivators communications channels and manipulators.

The GRA includes an interpreter such that existing and new robot behaviors port in a manner that is transparent to both the operator and the behavior developer. This interpreter may be used to translate commands and queries back and forth between the operator and robot with a common interface which can then be used to create perceptual abstractions and behaviors. When the common language supported by the GRA is used by robot developers it enables developed behaviors and functionality to be interchangeable across multiple robots. In addition to creating a framework for developing new robot capabilities the GRA interpreter may be used to translate existing robot capabilities into the common language so that the behavior can then be used on other robots. The GRA is portable across a variety of platforms and proprietary low level APIs. This is done by creating a standard method for commanding and querying robot functionality that exists on top of any particular robot manufacturer s control API. Moreover unlike systems where behavior stems from sensor data the GRA facilitates a consistent or predictable behavior output regardless of robot size or type by categorizing robot and sensor data into perceptual abstractions from which behaviors can be built.

The Generic Robot Architecture also includes a scripting structure for orchestrating the launch of the different servers and executables that may be used for running the GRA on a particular robot platform. Note that since these servers and executables e.g. laser server camera server and base platform application will differ from robot to robot the scripting structure includes the ability to easily specify and coordinate the launch of the files that may be needed for specific applications. In addition the scripting structure enables automatic launching of the system at boot time so that the robot is able to exhibit functionality without any operator involvement i.e. no need for a remote shell login .

The Generic Robot Architecture may access configuration files created for each defined robot type. For example the configuration files may specify what sensors actuators and API are being used on a particular robot. Use of the scripting structure together with the configuration enables easy reconfiguration of the behaviors and functionality of the robot without having to modify source code i.e. for example recompile the C C code .

The GRA keeps track of which capabilities are available e.g. sensors actuators mapping systems communications on the specific embodiment and uses virtual and stub functions within the class hierarchy to ensure that commands and queries pertaining to capabilities that an individual robot does not have do not cause data access errors. For example in a case where a specific capability such as a manipulator does not exist the GRA returns special values indicating to the high level behavioral control code that the command cannot be completed or that the capability does not exist. This makes it much easier to port seamlessly between different robot types by allowing the behavior code to adapt automatically to different robot configurations.

The above discussion of GRA capabilities has focused on the robot oriented aspects of the GRA. However the robot oriented class structure is only one of many class structures included in the GRA. For example the GRA also includes multi tiered class structures for communication range sensing cameras and mapping. Each one of these class structures is set up to provide a level of functional modularity and allow different sensors and algorithms to be used interchangeably. By way of example and not limitation without changing the behavioral code built on the GRA at the robot behavior level it may be possible to swap various mapping and localization systems or cameras and yet achieve the same functionality simply by including the proper class modules at the hardware abstraction level and possibly at the robot abstraction level. Additional capabilities and features of each of the levels of the GRA are discussed below.

Action device abstractions may include for example vacuum devices magnetic pickup devices arm manipulators scoops grippers camera pan and tilt manipulators and the like.

The communication abstractions present substantially common communications interfaces to a variety of communication protocols and physical interfaces. The communication channels may be adaptable to both wired and wireless communication as well as supporting various communication protocols. By way of example and not limitation the communication abstractions may be configured to support serial and parallel communication channels such as for example USB IEEE 1394 802.11 a b g cellular telephone and other wired and wireless communication protocols.

Locomotion abstractions may be based on robot motion not necessarily on specific hardware components. For example and not limitation motion control abstractions may include drive steering power speed force odometry and the like. Thus the motion abstractions can be tailored to individual third party drive controls at the hardware abstraction level and effectively abstracted away from other architectural components. In this manner support for motion control of a new robot platform may comprise simply supplying the APIs which control the actual motors actuators and the like into the locomotion abstraction framework.

The perception abstractions may include abstractions for a variety of perceptive hardware useful for robots such as for example inertial measurements imaging devices sonar measurements camera pan tilt abstractions GPS and iGPS abstractions thermal sensors infrared sensors tactile sensors laser control and perception abstractions GPR compass measurements EMI measurements and range abstractions.

While the hardware abstraction level focuses on a software model for a wide variety of hardware that may be useful on robots the robot abstraction level as illustrated in focuses on generic robot attributes. The generic robot attributes enable building blocks for defining robot behaviors at the robot behavior level and provide a membrane for separating the definition of robot behaviors from the low level hardware abstractions. Thus each robot attribute may utilize one or more hardware abstractions to define its attribute. These robot attributes may be thought of as actionable abstractions. In other words a given actionable abstraction may fuse multiple hardware abstractions that provide similar information into a data set for a specific robot attribute. For example and not limitation the generic robot attribute of range may fuse range data from hardware abstractions of an IR sensor and a laser sensor to present a single coherent structure for the range attribute. In this way the GRA presents robot attributes as building blocks of interest for creating robot behaviors such that the robot behavior can use the attribute to develop a resulting behavior e.g. stop slow down turn right turn left etc .

Furthermore a robot attribute may combine information from dissimilar hardware abstractions. By way of example and not limitation the position attributes may fuse information from a wide array of hardware abstractions such as perception modules like video compass GPS laser and sonar along with control modules like drive speed and odometry. Similarly a motion attribute may include information from position inertial range and obstruction abstractions.

This abstraction of robot attributes frees the developer from dealing with individual hardware elements. In addition each robot attribute can adapt to the amount and type of information it incorporates into the abstraction based on what hardware abstractions may be available on the robot platform.

The robot attributes as illustrated in are defined at a relatively low level of atomic elements that include attributes of interest for a robot s perception status and control. Some of these robot attributes include robot health robot position robot motion robot bounding shape environmental occupancy grid and range . It will be readily apparent to those of ordinary skill in the art that the modules shown in are a representative rather than comprehensive example of robot attributes. Note that the term robot attributes is used somewhat loosely given that robot attributes may include physical attributes such as health and bounding shape as well as how the robot perceives its environment such as the environmental occupancy grid and range attributes .

The robot health abstractions may include for example general object models for determining the status and presence of various sensors and hardware modules determining the status and presence of various communication modules and determining the status of on board computer components.

The robot bounding shape abstractions may include for example definitions of the physical size and boundaries of the robot and definitions of various thresholds for movement that define a safety zone or event horizon as is explained more fully below.

The robot motion abstractions may include abstractions for defining robot motion and orientation attributes such as for example obstructed motion velocity linear and angular accelerations forces and bump into obstacle and orientation attributes such as roll yaw and pitch.

The range abstractions may include for example determination of range to obstacles from lasers sonar infrared and fused combinations thereof.

In more detail illustrates a representative embodiment of how a range abstraction may be organized. A variety of coordinate systems may be in use by the robot and an operator. By way of example a local coordinate system may be defined by an operator relative to a space of interest e.g. a building or a world coordinate system defined by sensors such as a GPS unit an iGPS unit a compass an altimeter and the like. A robot coordinate system may be defined in Cartesian coordinates relative to the robot s orientation such that for example the X axis is to the right the Y axis is straight ahead and the Z axis is up. Another robot coordinate system may be cylindrical coordinates with a range angle and height relative to the robot s current orientation.

The range measurements for the representative embodiment illustrated in are organized in a cylindrical coordinate system relative to the robot. The angles may be partitioned into regions covering the front left right and back of the robot and given names such as for example those used in .

While not shown those of ordinary skill in the art will recognize that with the exception of the Left Side and Right Side regions embodiments may include regions in the back which are a mirror image of those in the front wherein the Front portion of the name is replaced with Rear. 

Furthermore the range attributes define a range to the closest object within that range. However the abstraction of regions relative to the robot as used in the range abstraction may also be useful for many other robot attributes and robot behaviors that may require directional readings such as for example defining robot position robot motion camera positioning an occupancy grid map and the like.

In practice the range attributes may be combined to define a more specific direction. For example directly forward motion may be defined as a geometrically adjusted combination of Right In Front L Front R Front Front Left Side and Front Right Side .

Returning to the robot abstractions may include position attributes . Mobile robots may operate effectively only if they or their operators know where they are. Conventional robots may rely on real time video and global positioning systems GPS as well as existing maps and floor plans to determine their location. However GPS may not be reliable indoors and video images may be obscured by smoke or dust or break up because of poor communications. Maps and floor plans may not be current and often are not readily available particularly in the chaotic aftermath of natural accidental or terrorist events. Consequently real world conditions on the ground often make conventional robots that rely on a priori maps ineffective.

Accurate positioning knowledge enables the creation of high resolution maps and accurate path following which may be needed for high level deliberative behavior such as systematically searching or patrolling an area.

Embodiments of the present invention may utilize various mapping or localization techniques including positioning systems such as indoor GPS outdoor GPS differential GPS theodolite systems wheel encoder information and the like. To make robots more autonomous embodiments of the present invention may fuse the mapping and localization information to build 3D maps on the fly that let robots understand their current position and an estimate of their surroundings. Using existing information map details may be enhanced as the robot moves through the environment. Ultimately a complete map containing rooms hallways doorways obstacles and targets may be available for use by the robot and its human operator. These maps also may be shared with other robots or human first responders.

With the on board mapping and positioning algorithm that accepts input from a variety of range sensors the robot may make substantially seamless transitions between indoor and outdoor operations without regard for GPS and video drop outs that occur during these transitions. Furthermore embodiments of the present invention provide enhanced fault tolerance because they do not require off board computing or reliance on potentially inaccurate or non existent a priori maps.

Embodiments of the present invention may use localization methods by sampling range readings from scanning lasers and ultrasonic sensors and by reasoning probabilistically about where the robot is within its internal model of the world. The robot localization problem may be divided into two sub tasks global position estimation and local position tracking. Global position estimation is the ability to determine the robot s position in an a priori or previously learned map given no information other than that the robot is somewhere in the region represented by the map. Once a robot s position has been found in the map local tracking is the problem of keeping track of the robot s position over time and movement.

The robot s state space may be enhanced by localizaton methods such as Monte Carlo techniques and Markovian probability grid approaches for position estimation as are well known by those of ordinary skill in the art. Many of these techniques provide efficient and substantially accurate mobile robot localization.

With a substantially accurate position for the robot determined local tracking can maintain the robot s position over time and movement using dead reckoning additional global positioning estimation or combinations thereof. Dead reckoning is a method of navigation by keeping track of how far you have gone in any particular direction. For example dead reckoning would determine that a robot has moved a distance of about five meters at an angle from the current pose of about 37 degrees if the robot moves four meters forward turns 90 degrees to the right and moves forward three meters. Dead reckoning can lead to navigation errors if the distance traveled in a given direction or the angle through which a robot turns is interpreted incorrectly. This can happen for example if one or more of the wheels on the robot spin in place when the robot encounters an obstacle.

Therefore dead reckoning accuracy may be bolstered by sensor information from the environment new global positioning estimates or combinations thereof. With some form of a map the robot can use range measurements to map features to enhance the accuracy of a pose estimate. Furthermore the accuracy of a pose estimate may be enhanced by new range measurements e.g. laser scans into a map that may be growing in size and accuracy. In Simultaneous Localization and Mapping SLAM information from the robot s encoders and laser sensors may be represented as a network of probabilistic constraints linking the successive positions poses of the robot. The encoders may relate one robot pose to the next via dead reckoning. To give further constraints between robot poses the laser scans may be matched with dead reckoning including constraints for when a robot returns to a previously visited area.

The robot abstractions may include environmental occupancy grid attributes . One form of map that may be useful from both the robot s perspective and an operator s perspective is an occupancy grid. An environmental occupancy grid formed by an occupancy grid abstraction is illustrated in . In forming an occupancy grid a robot coordinate system may be defined in Cartesian coordinates relative to the robot s orientation such that for example the X axis is to the right the Y axis is straight ahead and the Z axis is up. Another robot coordinate system may be cylindrical coordinates with a range angle and height relative to the robot s current orientation. Furthermore occupancy grids may be translated to other coordinate systems for use by an operator.

An occupancy grid map may be developed by dividing the environment into a discrete grid of occupancy cells and assigning a probability to each grid indicating whether the grid is occupied by an object. Initially the occupancy grid may be set so that every occupancy cell is set to an initial probability. As the robot scans the environment range data developed from the scans may be used to update the occupancy grid. For example based on range data the robot may detect an object at a specific orientation and range away from the robot. This range data may be converted to a different coordinate system e.g. local or world Cartesian coordinates . As a result of this detection the robot may increase the probability that the particular occupancy cell is occupied and decrease the probability that occupancy cells between the robot and the detected object are occupied. As the robot moves through its environment new horizons may be exposed to the robot s sensors which enable the occupancy grid to be expanded and enhanced. To enhance map building and localization even further multiple robots may explore an environment and cooperatively communicate their map information to each other or a robot controller to cooperatively build a map of the area.

The example occupancy grid map as it might be presented to an operator is illustrated in . The grid cells can be seen as small squares on this occupancy grid . A robot path is shown to illustrate how the robot may have moved through the environment in constructing the occupancy grid . Of course those of ordinary skill in the art will recognize that depending on the application and expected environment the occupancy grid may be defined in any suitable coordinate system and may vary in resolution i.e. size of each occupancy cell . In addition the occupancy grid may include a dynamic resolution such that the resolution may start out quite coarse while the robot discovers the environment then evolve to a finer resolution as the robot becomes more familiar with its surroundings.

A robot platform may include a robot intelligence kernel may also be referred to herein as intelligence kernel which coalesces hardware components for sensing motion manipulation and actions with software components for perception communication behavior and world modeling into a single cognitive behavior kernel that provides intrinsic intelligence for a wide variety of unmanned robot platforms. The intelligence kernel architecture may be configured to support multiple levels of robot autonomy that may be dynamically modified depending on operating conditions and operator wishes.

The robot intelligence kernel RIK may be used for developing a variety of intelligent robotic capabilities. By way of example and not limitation some of these capabilities including visual pursuit intruder detection and neutralization security applications urban reconnaissance search and rescue remote contamination survey and countermine operations.

Referring back to the software architecture diagram of the RIK comprises a multi level abstraction including a robot behavior level and a cognitive level . The RIK may also include the robot abstraction level and the hardware abstraction level discussed above.

Above the robot abstraction level the RIK includes the robot behavior level which defines specific complex behaviors that a robot or a robot operator may want to accomplish. Each complex robot behavior may utilize a variety of robot attributes and in some cases a variety of hardware abstractions to perform the specific robot behavior.

Above the robot behavior level the RIK includes the cognitive level which provides cognitive conduct modules to blend and orchestrate the asynchronous events from the complex robot behaviors and generic robot behaviors into combinations of functions exhibiting cognitive behaviors wherein high level decision making may be performed by the robot the operator or combinations of the robot and the operator.

Some embodiments of the RIK may include at the lowest level the hardware abstraction level which provides for portable object oriented access to low level hardware perception and control modules that may be present on a robot. These hardware abstractions have been discussed above in the discussion of the GRA.

Some embodiments of the RIK may include above the hardware abstraction level the robot abstraction level including generic robot abstractions which provide atomic elements i.e. building blocks of generic robot attributes and develop a membrane between the low level hardware abstractions and control based on generic robot functions. Each generic robot abstraction may utilize a variety of hardware abstractions to accomplish its individual function. These generic robot abstractions have been discussed above in the discussion of the GRA.

While the robot abstraction level focuses on generic robot attributes higher levels of the RIK may focus on relatively complex robot behaviors at the robot behavior level or on robot intelligence and operator collaboration at the cognitive level .

The robot behavior level includes generic robot classes comprising functionality common to supporting behavior across most robot types. For example the robot behavior level includes utility functions e.g. Calculate angle to goal and data structures that apply across substantially all robot types e.g. waypoint lists . At the same time the robot behavior level defines the abstractions to be free from implementation specifics such that the robot behaviors are substantially generic to all robots.

The robot behavior level as illustrated in may be loosely separated into reactive behaviors and deliberative behaviors . Of course it will be readily apparent to those of ordinary skill in the art that the modules shown in are a representative rather than comprehensive example of robot behaviors.

The reactive behaviors may be characterized as behaviors wherein the robot reacts to its perception of the environment based on robot attributes hardware abstractions or combinations thereof. Some of these reactive behaviors may include autonomous navigation obstacle avoidance guarded motion visual tracking laser tracking get unstuck behavior and reactive planning. As examples and not limitations details regarding some of these behaviors are discussed in the section below regarding application specific behaviors.

In contrast deliberative behaviors may be characterized as behaviors wherein the robot may need to make decisions on how to proceed based on the results of the reactive behaviors information from the robot attributes and hardware abstractions or combinations thereof. Some of these deliberative behaviors may include waypoint navigation with automatic speed adjustment global path planning and occupancy change detection. As examples and not limitations details regarding some of these behaviors are discussed in the section below regarding application specific behaviors.

The cognitive conduct level as illustrated in represents the highest level of abstraction wherein significant robot intelligence may be built in to cognitive conduct modules as well as significant operator robot collaboration to perform complex tasks requiring enhanced robot initiative . Cognitive conduct modules blend and orchestrate asynchronous firings from the reactive behaviors deliberative behaviors and robot attributes into intelligent robot conduct. Cognitive conduct modules may include conduct such as GoTo wherein the operator may simply give a coordinate for the robot to go to and the robot takes the initiative to plan a path and get to the specified location. This GoTo conduct may include a combination of robot behaviors robot attributes and hardware abstractions such as for example obstacle avoidance get unstuck reactive path planning deliberative path planning and waypoint navigation.

Another representative cognitive conduct module is human detection and pursuit wherein the robot may react to changes in the environment and pursue those changes. This detection and pursuit conduct may also include pursuit of other objects such as for example another robot. The detection and pursuit conduct may include a combination of robot behaviors robot attributes and hardware abstractions such as for example occupancy change detection laser tracking visual tracking deliberative path planning reactive path planning and obstacle avoidance.

Other representative cognitive conduct modules include conduct such as exploration and reconnaissance conduct combined with map building leader follower conduct and search and identify conduct .

Of course it will be readily apparent to those of ordinary skill in the art that the cognitive conduct modules shown in are a representative rather than comprehensive example of robot conduct that may be implemented using embodiments of the present invention.

A notable aspect of the RIK is that the cognitive conduct modules and robot behaviors generally operate from a perception of speed of motion in relationship to objects and obstacles. In other words rather than being concerned with spatial horizons and the distance away from an object the cognitive conduct and robot behaviors are largely concerned with temporal horizons and how soon the robot may encounter an object. This enables defining the cognitive conduct and robot behaviors in a relativistic sense wherein for example the modules interpret motion as an event horizon wherein the robot may only be concerned with obstacles inside the event horizon. For example a robot behavior is not necessarily concerned with an object that is 10 meters away. Rather the robot behavior may be concerned that it may reach the object in two seconds. Thus the object may be within the event horizon when the object is 10 meters away and the robot is moving toward it at 5 meters sec whereas if the object is 10 meters away and the robot is moving at 2 meters second the object may not be within the event horizon.

This relativistic perception enables an adaptation to processing power and current task load. If the robot is very busy for example processing video it may need to reduce its frequency of processing each task. In other words the amount of time to loop through all the cognitive conduct and robot behaviors may increase. However with the RIK the cognitive conduct and robot behaviors can adapt to this difference in frequency by modifying its behaviors. For example if the time through a loop reduces from 200 Hz to 100 Hz the behaviors and conducts will know about this change in loop frequency and may modify the way it makes a speed adjustment to avoid an object. For example the robot may need a larger change in its speed of motion to account for the fact that the next opportunity to adjust the speed is twice more distant in the future at 100 Hz than it would be at 200 Hz. This becomes more apparent in the discussion below regarding the guarded motion behavior.

To enable and control this temporal awareness the RIK includes a global timing loop in which cognitive conduct and robot behaviors may operate. Using this global timing loop each module can be made aware of information such as for example average time through a loop minimum and maximum time through a loop and expected delay for next timing tick.

With this temporal awareness the robot tends to modify its behavior by adjusting its motion and motion of its manipulators relative to its surroundings rather than adjusting its position relative to a distance to an object. Of course with the wide array of perceptors the robot is still very much aware of its pose and position relative to its environment and can modify its behavior based on this positional awareness. However with the RIK the temporal awareness is generally more influential on the cognitive conduct modules and robot behaviors than the positional awareness.

To enhance the operator robot tradeoff of control the intelligence kernel provides a dynamic autonomy structure which is a decomposition of autonomy levels allowing methods for shared control to permeate all levels of the multi level abstraction. Furthermore the intelligence kernel creates an object oriented software architecture which may require little or no source code changes when ported to other platforms and low level proprietary controllers.

The dynamic autonomy structure of the RIK provides a multi level harmonization between human intervention and robot initiative across robot behaviors. As capabilities and limitations change for both the human and the robot due to workload operator expertise communication dropout and other factors the RIK architecture enables shifts from one level of autonomy to another. Consequently the ability of the robot to protect itself make decisions and accomplish tasks without human assistance may enable increased operator efficiency.

At the lowest level referred to as teleoperation mode the robot may operate completely under remote control and take no initiative to perform operations on its own. At the second level referred to as safe mode robot movement is dependent on manual control from a remote operator. However in safe mode the robot may be equipped with a level of initiative that prevents the operator from causing the robot to collide with obstacles. At the third level referred to as shared mode the robot can relieve the operator from the burden of direct control. For example the robot may use reactive navigation to find a path based on the robot s perception of the environment. Shared mode provides for a balanced allocation of roles and responsibilities. The robot accepts varying levels of operator intervention and may support dialogue through the use of scripted suggestions e.g. Path blocked Continue left or right and other text messages that may appear within a graphical interface. At the fourth level referred to as collaborative tasking mode a high level of collaborative tasking may be developed between the operator and the robot using a series of high level tasks such as patrol search region or follow path. In collaborative tasking mode operator intervention occurs on the tasking level while the robot manages most decision making and navigation. At the highest level referred to as autonomous mode a robot may behave in a substantially autonomous manner needing nothing more than being enabled by an operator and perhaps given a very high level command such as for example survey the area or search for humans.

The autonomy levels are structured in the intelligence kernel such that each new level of autonomy is built on and encompasses the subsequent level. For example a guarded motion mode processing explained more fully below may include the behavior and representational framework utilized by the teleoperation mode processing but also include additional levels of robot initiative based on the various robot attributes e.g. related to directional motion created in response to the teleoperation mode . Shared mode may include all of the functionality and direct control of safe mode but also allows robot initiative in response to the abstractions produced through the guarded motion mode processing e.g. fused range abstractions created in response to the direction motion abstractions . In addition the collaborative tasking mode may initiate robot responses to the abstractions created in shared mode processing such as recognition that a box canyon has been entered or that a communication link has been lost.

For a robotic system to gracefully accept a full spectrum of intervention possibilities interaction issues cannot be handled merely as augmentations to a control system. Therefore opportunities for operator intervention and robot initiative are incorporated as an integral part of the robot s intrinsic intelligence. Moreover for autonomous capabilities to evolve the RIK is configured such that a robot is able to recognize when help is needed from an operator other robot or combinations thereof and learn from these interactions.

As an example in one representative embodiment the robot includes a Sony CCD camera that can pan tilt and zoom to provide visual feedback to the operator in the teleoperation mode . The robot may also use this camera with increased robot initiative to characterize the environment and even conduct object tracking.

In this embodiment the RIK provides a graduated process for the robot to protect itself and the environment. To do so the RIK may fuse a variety of range sensor information. A laser range finder may be mounted on the front and sonar perceptors may be located around the mid section of the robot. The robot also may include highly sensitive bump strips around its perimeter that register whether anything has been touched. To protect the top of the robot especially the cameras and mission specific sensors placed on top of the robot infrared proximity sensors may be included to indicate when an object is less than a few inches from the robot. Additional infrared proximity sensors may be placed on the bottom of the robot and point ahead of the robot toward the ground in order to prevent the robot from traveling into open space e.g. traveling off of a landing down a stairway . Together these sensors provide a substantial field of protection around the robot and allow the operator to command the robot with increased confidence that the robot can take initiative to protect itself or its environment.

However avoiding obstacles may be insufficient. Many adverse environments may include forms of uneven terrain such as rubble. The robot should be able to recognize and respond to these obstacles. Inertial sensors may be used to provide acceleration data in three dimensions. This inertial information may be fused with information from the wheel encoders giving velocity and acceleration of the wheels and electrical current draw from the batteries to produce a measure of unexpected resistance that may be encountered by the robot. As part of the dynamic autonomy the operator may be able to choose to set a resistance limit that will automatically stop the robot once the specified threshold has been exceeded. The resistance limit may be useful not only for rough terrain but also in situations when the operator needs to override the safe motion capabilities based on the obstacle avoidance sensors to do things like push chairs and boxes out of the way and push doors open.

In addition the RIK enables operators to collaborate with mobile robots by defining an appropriate level of discourse including a shared vocabulary and a shared cognitive work space collaboratively constructed and updated on the fly through interaction with the real world. This cognitive work space could consist of terrain overlaid with semantic abstractions generated through autonomous recognition of environmental features with point and click operator validation and iconographic insertion of map entities. Real time semantic maps constructed collaboratively by humans ground robots and air vehicles could serve as the basis for a spectrum of mutual human robot interactions including tasking situation awareness human assisted perception and collaborative environmental understanding. Thus the RIK enables human robot communication within the context of a mission based on shared semantic maps between the robotic system and the operator.

With reference to additional details of the dynamic autonomy structure and corresponding operation modes can be discussed.

In teleoperation mode the operator has full continuous control of the robot at a low level. The robot takes little or no initiative except for example to stop after a specified time if it recognizes that communications have failed. Because the robot takes little or no initiative in this mode the dynamic autonomy implementation provides appropriate situation awareness to the operator using perceptual data fused from many different sensors. For example a tilt sensor may provide data on whether the robot is in danger of overturning. Inertial effects and abnormal torque on the wheels i.e. forces not associated with acceleration are fused to produce a measure of resistance as when for example the robot is climbing over or pushing against an obstacle. Even in teleoperation mode the operator may be able to choose to activate a resistance limit that permits the robot to respond to high resistance and bump sensors. Also a specialized interface may provide the operator with abstracted auditory graphical and textual representations of the environment and task.

Some representative behaviors and attributes that may be defined for teleoperation mode include joystick operation perceptor status power assessment and system status.

In safe mode the operator directs movements of the robot but the robot takes initiative to protect itself. In doing so this mode frees the operator to issue motion commands with less regard to protecting the robot greatly accelerating the speed and confidence with which the operator can accomplish remote tasks. The robot may assess its own status and surrounding environment to decide whether commands are safe. For example the robot possesses a substantial self awareness of its position and will attempt to stop its motion before a collision placing minimal limits on the operator. In addition the robot may be configured to notify the operator of environmental features e.g. box canyon corner and hallway immediate obstacles tilt resistance etc. and also continuously assesses the validity of its diverse sensor readings and communication capabilities. In safe mode the robot may be configured to refuse to undertake a task if it does not have the ability i.e. sufficient power or perceptual resources to safely accomplish it.

Some representative behaviors and attributes that may be defined for safe mode include guarded motion resistance limits and bump sensing.

In shared mode the robot may take the initiative to choose its own path responds autonomously to the environment and work to accomplish local objectives. This initiative is primarily reactive rather than deliberative. In terms of navigation shared mode may be configured such that the robot responds only to its local e.g. a two second event horizon or a six meter radius sensed environment. Although the robot may handle the low level navigation and obstacle avoidance the operator may supply intermittent input often at the robot s request to guide the robot in general directions. For example a Get Unstuck behavior enables the robot to autonomously extricate itself from highly cluttered areas that may be difficult for a remote operator to handle.

Some representative behaviors and attributes that may be defined for shared mode include reactive planning get unstuck behavior and obstacle avoidance.

In collaborative tasking mode the robot may perform tasks such as for example global path planning to select its own route requiring no operator input except high level tasking such as follow that target or search this area perhaps specified by drawing a circle around a given area on the map created by the robot . For all these levels the intelligence resides on the robot itself such that off board processing is unnecessary. To permit deployment within shielded structures a customized communication protocol enables very low bandwidth communications to pass over a serial radio link only when needed. The system may use multiple and separate communications channels with the ability to reroute data when one or more connection is lost.

Some representative cognitive conduct and robot behaviors and robot attributes that may be defined for collaborative tasking mode include waypoint navigation global path planning go to behavior retro traverse behavior area search behavior and environment patrol.

In autonomous mode the robot may perform with minimal to no operator intervention . For behaviors in autonomous mode the operator may simply give a command for the robot to perform. Other than reporting status to the operator the robot may be free to plan paths prioritize tasks and carry out the command using deliberative behaviors defined by the robot s initiative.

Some representative behaviors and attributes that may be defined for autonomous mode include pursuit behaviors perimeter surveillance urban reconnaissance human presence detection geological surveys radiation surveys virtual rail behavior countermine operations and seeking improvised explosive devices.

Conventionally robots have been designed as extensions of human mobility and senses. Most seek to keep the human in substantially complete control allowing the operator through input from video cameras and other on board sensors to guide the robot and view remote locations. In this conventional master slave relationship the operator provides the intelligence and the robot is a mere mobile platform to extend the operator s senses. The object is for the operator perched as it were on the robot s back to complete some desired tasks. As a result conventional robot architectures may be limited by the need to maintain continuous high bandwidth communications links with their operators to supply clear real time video images and receive instructions. Operators may find it difficult to visually navigate when conditions are smoky dusty poorly lit completely dark or full of obstacles and when communications are lost because of distance or obstructions.

The Robot Intelligence Kernel enables a modification to the way humans and robots interact from master slave to a collaborative relationship in which the robot can assume varying degrees of autonomy. As the robot initiative increases the operator can turn his or her attention to the crucial tasks at hand e.g. locating victims hazards dangerous materials following suspects measuring radiation and or contaminant levels without worrying about moment to moment navigation decisions or communications gaps.

The RIK places the intelligence required for high levels of autonomy within the robot. Unlike conventional designs off board processing is not necessary. Furthermore the RIK includes low bandwidth communication protocols and can adapt to changing connectivity and bandwidth capabilities. By reducing or eliminating the need for high bandwidth video feeds the robot s real world sensor information can be sent as compact data packets over low bandwidth 

Kalman filters are efficient recursive filters that can estimate the state of a dynamic system from a series of incomplete and noisy measurements. By way of example and not limitation many of the perceptors used in the RIK include an emitter sensor combination such as for example an acoustic emitter and a microphone array as a sensor. These perceptors may exhibit different measurement characteristics depending on the relative pose of the emitter and target and how they interact with the environment. In addition to one degree or another the sensors may include noise characteristics relative to the measured values. In robotic applications Kalman filters may be used in many applications for improving the information available from perceptors. As one example of many applications when tracking a target information about the location speed and acceleration of the target may include significant corruption due to noise at any given instant of time. However in dynamic systems that include movement a Kalman filter may exploit the dynamics of the target which govern its time progression to remove the effects of the noise and get a substantially accurate estimate of the target s dynamics. Thus a Kalman filter can use filtering to assist in estimating the target s location at the present time as well as prediction to estimate a target s location at a future time.

As a result of the Kalman filtering or after being processed by the Kalman filter information from the hardware abstractions and robot attributes may be combined to develop other robot attributes. As examples the robot attributes illustrated in include position movement obstruction occupancy and other abstractions .

With the robot attributes developed information from these robot attributes may be available for other modules within the RIK at the cognitive level the robot behavior level and the robot abstraction level .

In addition information from these robot attributes may be processed by the RIK and communicated to the robot controller or other robots as illustrated by the lower portion of FIG. . Processing information from the robot conduct behavior and attributes as well as information from hardware abstractions serves to reduce the required bandwidth and latency such that the proper information may be communicated quickly and concisely. Processing steps performed by the RIK may include a significance filter a timing module prioritization and bandwidth control .

The significance filter may be used as a temporal filter to compare a time varying data stream from a given RIK module. By comparing current data to previous data the current data may not need to be sent at all or may be compressed using conventional data compression techniques such as for example run length encoding and Huffman encoding. Another example would be imaging data which may use data compression algorithms such as Joint Photographic Experts Group JPEG compression and Moving Picture Experts Group MPEG compression to significantly reduce the needed bandwidth to communicate the information.

The timing module may be used to monitor information from each RIK module to optimize the periodicity at which it may be needed. Some information may require periodic updates at a faster rate than others. In other words timing modulation may be used to customize the periodicity of transmissions of different types of information based on how important it may be to receive high frequency updates for that information. For example it may be more important to notify an operator or other robot of the robot s position more often than it would be to update the occupancy grid map.

The prioritization operation may be used to determine which information to send ahead of other information based on how important it may be to minimize latency from when data is available to when it is received by an operator or another robot. For example it may be more important to reduce latency on control commands and control queries relative to map data. As another example in some cognitive conduct modules where there may be significant collaboration between the robot and an operator or in teleoperation mode where the operator is in control it may be important to minimize the latency of video information so that the operator does not perceive a significant time delay between what the robot is perceiving and when it is presented to the operator.

These examples illustrate that for prioritization as well as the significance filter the timing modulation and the bandwidth control communication may be task dependent and autonomy mode dependent. As a result information that may be a high priority in one autonomy mode may receive a lower priority in another autonomy mode.

The bandwidth control operation may be used to limit bandwidth based on the communication channel s bandwidth and how much of that bandwidth may be allocated to the robot. An example here might include progressive JPEG wherein a less detailed i.e. coarser version of an image may be transmitted if limited bandwidth is available. For video an example may be to transmit at a lower frame rate.

After the communication processing is complete the resultant information may be communicated to or from the robot controller or another robot. For example the information may be sent from the robot s communication device across the communication link to a communication device on a robot controller which includes a multi robot interface .

Some robot attributes such as the mapping and localization attribute may use information from a variety of hardware abstractions as well as other robot attributes . The mapping and localization attribute may use sonar and laser information from hardware abstractions together with position information and local position information to assist in defining maps of the environment and the position of the robot on those maps. Line is bold to indicate that the mapping and localization attribute may be used by any or all of the environment abstractions . For example the occupancy grid abstraction uses information from the mapping and localization attribute to build an occupancy grid as is explained among other places above with respect to . Additionally the robot map position attribute may use the mapping and localization attribute and the occupancy grid attribute to determine the robot s current position within the occupancy grid.

Bold line indicates that any or all of the robot abstractions and environment abstractions may be used at higher levels of the RIK such as the communications layer explained above with respect to and the behavior modulation explained below with respect to .

As an example the event horizon attribute may utilize and fuse information from robot abstraction level such as range and movement. Information from the event horizon attribute may be used by behaviors such as for example the guarded motion behavior and the obstacle avoidance behavior . Bold line illustrates that the guarded motion behavior and the obstacle avoidance behavior may be used by a variety of other robot behaviors and cognitive conduct such as for example follow pursuit conduct virtual rail conduct countermine conduct area search behavior and remote survey conduct.

The descriptions in this section illustrate representative embodiments of robot behaviors and cognitive conduct that may be included in embodiments of the present invention. Of course those of ordinary skill in the art will recognize these robot behaviors and cognitive conduct are illustrative embodiments and are not intended to be a complete list or complete description of the robot behaviors and cognitive conduct that may be implemented in embodiments of the present invention.

In general in the flow diagrams illustrated herein T indicates an angular velocity of either the robot or a manipulator and V indicates a linear velocity. Also generally T and V are indicated as a percentage of a predetermined maximum. Thus V 20 indicates 20 of the presently specified maximum velocity which may be modified depending on the situation of the robot or manipulator. Similarly T 20 indicates 20 of the presently specified maximum angular velocity of the robot or manipulator. It will be understood that the presently specified maximums may be modified over time depending on the situations encountered. In addition those of ordinary skill in the art will recognize that the values of linear and angular velocities used for the robot behaviors and cognitive conduct described herein are representative of a specific embodiment. While this specific embodiment may be useful in a wide variety of robot platform configurations other linear and angular velocities are contemplated within the scope of the present invention.

Furthermore those of ordinary skill in the art will recognize that the use of velocities rather than absolute directions is enabled largely by the temporal awareness of the robot behaviors and cognitive conduct in combination with the global timing loop. This gives the robot behaviors and cognitive conduct an opportunity to adjust velocities on each timing loop enabling smoother accelerations and decelerations. Furthermore the temporal awareness creates a behavior of constantly moving toward a target in a relative sense rather than attempting to move toward an absolute spatial point.

Autonomous navigation may be a significant component for many mobile autonomous robot applications. Using autonomous navigation a robot may effectively handle the task of traversing varied terrain while responding to positive and negative obstacles uneven terrain and other hazards. Embodiments of the present invention enable the basic intelligence necessary to allow a broad range of robotic vehicles to navigate effectively both indoors and outdoors.

Many proposed autonomous navigation systems simply provide GPS waypoint navigation. However GPS can be jammed and may be unavailable indoors or under forest canopy. A more autonomous navigation system includes the intrinsic intelligence to handle navigation even when external assistance including GPS and communications has been lost. Embodiments of the present invention include a portable domain general autonomous navigation system which blends the responsiveness of reactive sensor based control with the cognitive approach found through waypoint following and path planning. Through its use of the perceptual abstractions within the robot attributes of the GRA the autonomous navigation system can be used with a diverse range of available sensors e.g. range inertial attitude bump and available positioning systems e.g. GPS laser RF etc. .

The autonomous navigation capability may scale automatically to different operational speeds may be configured easily for different perceptor suites and may be easily parameterized to be portable across different robot geometries and locomotion devices. Two notable aspects of autonomous navigation are a guarded motion behavior wherein the robot may gracefully adjust its speed and direction near obstacles without needing to come to a full stop and an obstacle avoidance behavior wherein the robot may successfully navigate around known obstacles in its environment. Guarded motion and obstacle avoidance may work in synergy to create an autonomous navigation capability that adapts to the robot s currently perceived environment. Moreover the behavior structure that governs autonomous navigation allows the entire assembly of behaviors to be used not only for obstacles but for other aspects of the environment which require careful maneuvering such as Landmine detection.

The robot s obstacle avoidance and navigation behaviors are derived from a number of robot attributes that enable the robot to avoid collisions and find paths through dense obstacles. The reactive behaviors may be configured as nested decision trees comprising rules which fire based on combinations of these perceptual abstractions.

The first level of behaviors which may be referred to as action primitives provide the basic capabilities important to most robot activity. The behavior framework enables these primitives to be coupled and orchestrated to produce more complex navigational behaviors. In other words combining action primitives may involve switching from one behavior to another subsuming the outputs of another behavior or layering multiple behaviors. For example when encountering a dense field of obstacles that constrain motion in several directions the standard confluence of obstacle avoidance behaviors may give way to the high level navigational behavior Get Unstuck as is explained more fully below. This behavior involves rules which when activated in response to combinations of perceptual abstractions switch between several lower level behaviors including Turn till head is clear and Backout. 

The need for guarded motion has been well documented in the literature regarding unmanned ground vehicles. A goal of guarded motion is for the robot to be able to drive at high speeds either in response to the operator or software directed control through one of the other robot behaviors or cognitive conduct modules while maintaining a safe distance between the vehicle and obstacles in its path. The conventional approach usually involves calculating this safe distance as a product of the robot s speed. However this means that the deceleration and the distance from the obstacle at which the robot will actually stop may vary based on the low level controller responsiveness of the low level locomotor controls and the physical attributes of the robot itself e.g. wheels weight etc. . This variation in stopping speed and distance may contribute to confusion on the part of the operator who may perceive inconsistency in the behavior of the robot.

The guarded motion behavior according to embodiments of the present invention enables the robot to come to a stop at a substantially precise specified distance from an obstacle regardless of the robot s initial speed its physical characteristics and the responsiveness of the low level locomotor control schema. As a result the robot can take initiative to avoid collisions in a safe and consistent manner.

In general the guarded motion behavior uses range sensing e.g. from laser sonar infrared or combinations thereof of nearby obstacles to scale down its speed using an event horizon calculation. The event horizon determines the maximum speed the robot can safely travel and still come to a stop if needed at a specified distance from the obstacle. By scaling down the speed by many small increments perhaps hundreds of times per second it is possible to ensure that regardless of the commanded translational or rotational velocity guarded motion will stop the robot at substantially the same distance from an obstacle. As an example if the robot is being driven near an obstacle rather than directly towards it guarded motion will not stop the robot but may slow its speed according to the event horizon calculation. This improves the operator s ability to traverse cluttered areas and limits the potential for operators to be frustrated by robot initiative.

The guarded motion algorithm is generally described for one direction however in actuality it is executed for each direction. In addition it should be emphasized that the process shown in operates within the RIK framework of the global timing loop. Therefore the guarded motion behavior is re entered and executes again for each timing loop.

To begin decision block determines if guarded motion is enabled. If not control transitions to the end of the guarded motion behavior.

If guarded motion is enabled control transfers to decision block to test whether sensors indicate that the robot may have bumped into an obstacle. The robot may include tactile type sensors that detect contact with obstacles. If these sensors are present their hardware abstractions may be queried to determine if they sense any contact. If a bump is sensed it is too late to perform guarded motion. As a result operation block causes the robot to move in a direction opposite to the bump at a reduced speed that is 20 of a predefined maximum speed without turning and then exits. This motion is indicated in operation block as no turn i.e. T 0 and a speed in the opposite direction i.e. V 20 .

If no bump is detected control transfers to decision block where a resistance limit determination is performed. This resistance limit measures impedance to motion that may be incongruous with normal unimpeded motion. In this representative embodiment the resistance limit evaluates true if the wheel acceleration equals zero the force on the wheels is greater than zero the robot has an inertial acceleration that is less than 0.15 and the resulting impedance to motion is greater than a predefined resistance limit. If this resistance limit evaluation is true operation block halts motion in the impeded direction then exits. Of course those of ordinary skill in the art will recognize that this is a specific implementation for an embodiment with wheels and a specific inertial acceleration threshold. Other embodiments within the scope of the present invention may include different sensors and thresholds to determine if motion is being impeded in any given direction based on that embodiment s physical configuration and method of locomotion.

If motion is not being impeded control transfers to decision block to determine if any obstacles are within an event horizon. An event horizon is calculated as a predetermined temporal threshold plus a speed adjustment. In other words obstacles inside of the event horizon are obstacles that the robot may collide with at the present speed and direction. Once again this calculation is performed in all directions around the robot. As a result even if an obstacle is not directly in the robot s current path which may include translational and rotational movement it may be close enough to create a potential for a collision. As a result the event horizon calculation may be used to decide whether the robot s current rotational and translational velocity will allow the robot time to stop before encroaching the predetermined threshold distance. If there are no objects sensed within the event horizon there is no need to modify the robot s current motion and the algorithm exits.

If an obstacle is sensed within the event horizon operation block begins a safety glide as part of the overall timing loop to reduce the robot s speed. As the robot s speed is reduced the event horizon proportional to that of the speed is reduced. If the reduction is sufficient the next time through the timing loop the obstacle may no longer be within the event horizon even though it may be closer to the robot. This combination of the event horizon and timing loop enables smooth deceleration because each loop iteration where the event horizon calculation exceeds the safety threshold the speed of the robot either translational rotational or both may be curtailed by a small percentage. This enables a smooth slow down and also enables the robot to proceed at the fastest speed that is safe. The new speed may be determined as a combination of the current speed and a loop speed adjustment. For example and not limitation New speed current speed 0.75 loop speed adjust . The loop speed adjust variable may be modified to compensate for how often the timing loop is executed and the desired maximum rate of deceleration. Of course those of ordinary skill in the art will recognize that this is a specific implementation. While this implementation may encompass a large array of robot configurations other embodiments within the scope of the present invention may include different scale factors for determining the new speed based on a robot s tasks locomotion methods physical attributes and the like.

Next decision block determines whether an obstacle is within a danger zone. This may include a spatial measurement wherein the range to the obstacle in a given direction is less than a predetermined threshold. If not there are likely no obstacles in the danger zone and the process exits.

If an obstacle is detected in the danger zone operation block stops motion in the current direction and sets a flag indicating a motion obstruction which may be used by other attributes behaviors or conduct.

As mentioned earlier the guarded motion behavior operates on a global timing loop. Consequently the guarded motion behavior will be re entered and the process repeated on the next time tick of the global timing loop.

In general the obstacle avoidance behavior uses range sensing e.g. from laser sonar infrared or combinations thereof of nearby obstacles to adapt its translational velocity and rotation velocity using the event horizon determinations explained earlier with respect to the guarded motion behavior. As stated earlier the obstacle avoidance behavior works with the guarded motion behavior as building blocks for full autonomous navigation. In addition it should be emphasized that the processes shown in operate within the RIK framework of the global timing loop. Therefore the obstacle avoidance behavior is re entered and executes again for each timing loop.

To begin the translational velocity portion of decision block determines if waypoint following is enabled. If so control transfers out of the obstacle avoidance behavior to a waypoint following behavior which is explained more fully below.

If waypoint following is not enabled control transfers to decision block to first test to see if the robot is blocked directly in front. If so control transfers to operation block to set the robot s translational speed to zero. Then control transfers out of the translational velocity behavior and into the rotational velocity behavior so the robot can attempt to turn around the object. This test at decision block checks for objects directly in front of the robot. To reiterate the obstacle avoidance behavior like most behaviors and conducts in the RIK is temporally based. In other words the robot is most aware of its velocity and whether objects are within an event horizon related to time until it may encounter an object. In the case of being blocked in front the robot may not be able to gracefully slow down through the guarded motion behavior. Perhaps because the object simply appeared in front of the robot without an opportunity to follow typical slow down procedures that may be used if an object is within an event horizon. For example the object may be another robot or a human that has quickly moved in front of the robot so that the guarded motion behavior has not had an opportunity to be effective.

If nothing is blocking the robot in front decision block tests to see if a detection behavior is in progress. A detection behavior may be a behavior where the robot is using a sensor in an attempt to find something. For example the countermine conduct is a detection behavior that is searching for landmines. In these types of detection behaviors obstacle avoidance may want to approach much closer to objects or may want to approach objects with a much slower speed to allow time for the detection function to operate. Thus if a detection behavior is active operation block sets a desired speed variable based on detection parameters that may be important. By way of example and not limitation in the case of the countermine conduct this desired speed may be set as Desired Speed Max passover rate Scan amplitude Scan Speed . In this countermine conduct example the Max passover rate may indicate a maximum desired speed for passing over the landmine. This speed may be reduced by other factors. For example the Scan amplitude Scan Speed term reduces the desired speed based on a factor of how fast the mine sensor sweeps an area. Thus the Scan amplitude term defines a term of the extent of the scan sweep and the Scan Speed defines the rate at which the scan happens. For example with a large Scan amplitude and a small Scan Speed the Desired Speed will be reduced significantly relative to the Max passover rate to generate a slow speed for performing the scan. While countermine conduct is used as an example of a detection behavior those of ordinary skill in the art will recognize that embodiments of the present invention may include a wide variety of detection behaviors such as for example radiation detection chemical detection and the like.

If a detection behavior is not in progress decision block tests to see if a velocity limit is set. In some embodiments of the invention it may be possible for the operator to set a velocity limit that the robot should not exceed even if the robot believes it may be able to safely go faster. For example if the operator is performing a detailed visual search the robot may be performing autonomous navigation while the operator is controlling a camera. The operator may wish to keep the robot going slow to have time to perform the visual search.

If a velocity limit is set operation block sets the desired speed variable relative to the velocity limit. The equation illustrated in operation block is a representative equation that may be used. The 0.1 term is a term used to ensure that the robot continues to make very slow progress which may be useful to many of the robot attributes behaviors and conduct. In this equation the Speed Factor term is a number from one to ten which may be set by other software modules for example the guarded motion behavior to indicate a relative speed at which the robot should proceed. Thus the desired speed is set as a fractional amount between zero and one in 0.1 increments of the Max Limit Speed.

If a velocity limit is not set operation block sets the desired speed variable relative to the maximum speed set for the robot i.e. Max Speed with an equation similar to that for operation block except Max Speed is used rather than Max Limit Speed.

After the desired speed variable is set by block or decision block tests to see if anything is within the event horizon. This test may be based on the robot s physical dimensions including protrusions from the robot such as an arm relative to the robot s current speed. As an example using an arm extension something inside the event horizon may be determined by the equation Min Front Range

Where the Min Front Range indicates a range to an obstacle in front 1.0 is a safety factor Arm Extension indicates the distance beyond the robot that the arm currently extends and Current Velocity indicates the robot s current translational velocity.

If there is something detected within the event horizon operation block sets the current speed based on the distance to the obstacle. Thus the example equation in block sets the speed based on the range to the object less a Forward Threshold set as a safety factor. With this speed guarded motion has an opportunity to be effective and the speed may be reduced further on the next iteration of the timing loop if the object is still within the event horizon. After setting the speed control transfers out of the translational velocity behavior and into the rotational velocity behavior.

If there is nothing detected within the event horizon operation block sets the robot s current speed to the desired speed variable that was set previously by operation block or . After setting the speed control transfers out of the translational velocity behavior and into the rotational velocity .

At decision block the process checks to see if the robot is blocked in front. If so the process performs a series of checks to see where other obstacles may be to determine a desired rotational velocity and direction. This obstacle checking process begins with decision block testing to see if the robot is blocked on the left side. If the robot is blocked on the left side and also in front operation block sets a new value for a turn velocity to the right. In the representative embodiment illustrated in a positive rotational velocity is defined as a turn to the left and a negative rotational velocity is defined as a turn to the right. Thus generally Turn left is a positive value indicating a rotational velocity to the left and Turn right is a negative value indicating a rotational velocity to the right. Thus operation block reduces the rotational velocity in the current direction by about one half plus a small offset used to ensure that the rotational velocity does not reach zero. After setting the new rotation velocity the process exits.

If the robot is not blocked on the left decision block tests to see if the robot is blocked on the right. If so operation block sets a new value for a turn velocity to the right similar to that velocity setting in operation block . In other words set the rotational velocity to the left to about one half plus a small offset used to ensure that the rotational velocity does not reach zero. After setting the new rotation velocity the process exits.

If the robot is blocked in the front but not on the left or right the process then decides which way to turn to get around the blockage by checking to see whether the nearest obstacle in a measurable range is to the right or left and adjusting the rotational velocity to be away from the obstacle. Operation block checks to see if the nearest obstacle is to the left. If so operation block sets the rotational velocity to the right i.e. away from the obstacle at a velocity of 30 of a maximum defined rotational velocity. If the nearest obstacle is not to the left operation block sets the rotational velocity to the left at a velocity of 30 of a maximum defined rotational velocity. After setting the new rotation velocity by either operation block or the process exits.

If the robot was not blocked in front based on decision block then decision block performs a threading the needle process. This starts with decision block determining a range to obstacles that may still be in front of the robot but not directly blocking the robot. To do this decision block tests to see if Min Front Range is greater than two times a predefined threshold for the front direction and to see if Min Narrow Front is greater than two times the robot s length. If both these tests are true it may be relatively clear in front and the process decides to reduce the rotational velocity in the current direction to make the direction more straight ahead until the next global timing loop. Therefore decision block tests to see if the current rotational direction is left. If so decision block tests to see if the magnitude of the left rotational velocity is greater than twice a turn threshold. If so operation block reduces the rotational velocity in the left direction by one half and the process exits. If the current rotational direction is not left decision block tests to see if the magnitude of the right rotational velocity is greater than twice a turn threshold. If so operation block reduces the rotational velocity in the right direction by one half and the process exits.

If decision block or evaluates false decision block tests to see if anything is currently within the event horizon.

This test may be based on the robot s physical dimensions including protrusions from the robot such as an arm relative to the robot s current speed. In addition this test is likely the same as the event horizon described above for the translational velocity when discussing decision block on . In other words is the Minimum Front Range less that an Event Range Wherein the Event Range 1.0 Arm Extension 1.75 Abs Current Velocity .

If there is nothing within the event horizon i.e. decision block evaluates false there is likely no need to change the current rotational velocity so the process exits. If there is something within the event horizon but not within the threading the needle process or blocking the robot in front the rotational velocity may be adjusted at a more gradual rate. Thus if decision block evaluates true decision block tests to see if the closest object is on the left side. If so operation block sets a new rotation velocity to the right. If the closest object is not on the left operation block sets a new rotation velocity to the left. The rotational velocity that is set in operation blocks and are similar except for direction. In this representative embodiment the rotational velocity may be set as a function of the Event Range from the event horizon test of decision block . Thus the rotational velocity may be set as Event Range Min Front Range 4.

As mentioned earlier the obstacle avoidance behavior operates on the global timing loop. Consequently both the translational velocity and rotational velocity may be adjusted again on the next time tick of the global timing loop allowing for relatively quick periodic adjustments to the velocities.

A get unstuck behavior as illustrated in includes significant robot initiative to extricate itself from the stuck position with little or no help from the operator. Sometimes when a robot is operating under its own initiative or even under operator control the robot may get stuck and have difficulty getting free from that position. Often times the operator may have limited understanding of the robot s position relative to the robot s understanding with its wide variety of perceptors. In general the get unstuck behavior may use range sensing e.g. from laser sonar infrared or combinations thereof to determine nearby obstacles and their position relative to the robot.

The get unstuck behavior begins at decision block by determining if the current path is blocked. This blocked situation may be defined as an obstacle present in front on the front right side and on the front left side. If the path is blocked control transfers to operation block which is explained below. For an example and using the range definitions defined above under the description of the range attribute a blocked path may be defined by the Boolean equation 

Wherein robot forward thresh is a predetermined threshold parameter that may be robot specific to define a safety distance or maneuverability distance away from the robot.

If the path is not blocked decision block determines if forward motion and turning motion is obstructed. If motion is obstructed control transfers to operation block which is explained below. For an example this motion obstruction may be determined by the Boolean equation 

If motion is not obstructed decision block determines if the robot is in a box canyon. If the robot is not in a box canyon the get unstuck behavior exits because it appears the robot is not in a stuck situation. If the robot is in a box canyon control transfers to operation block . For an example this box canyon situation may be defined by the Boolean equation 

Wherein robot turn thresh is a predetermined threshold parameter which may be robot specific to define a maneuverability distance that enables the robot to turn around.

Once the determination has been made that the robot may be stuck operation block begins the process of attempting to get unstuck. Operation block performs a back out behavior. This back out behavior causes the robot to backup from its present position while following the contours of obstacles near the rear sides of the robot. In general the back out behavior uses range sensing e.g. from laser sonar infrared or combinations thereof of nearby obstacles near the rear sides to determine distance to the obstacles and provide assistance in following the contours of the obstacles. However the back out behavior may also include many robot attributes including perception position bounding shape and motion to enable the robot to turn and back up while continuously responding to nearby obstacles. Using this fusion of attributes the back out behavior doesn t merely back the robot up but rather allows the robot to closely follow the contours of whatever obstacles are around the robot.

For example movements the robot may attempt to equalize the distance between obstacles on both sides keep a substantially fixed distance from obstacles on the right side or keep a substantially fixed distance between obstacles on the right side. As the back out behavior progresses decision block determines if there is sufficient space on a side to perform a maneuver other than backing out. If there is not sufficient space control transfers back to operation block to continue the back out behavior. If there is sufficient space on a side control transfers to operation block . As an example the sufficient space on a side decision may be defined by the Boolean equation 

Once sufficient space has been perceived on the right or left operation block performs a turn until head is clear behavior. This behavior causes the robot to rotate in the sufficient space direction while avoiding obstacles on the front side. As the turn until head is clear behavior progresses decision block determines if and when the head is actually clear. If the head is not clear control transfers back to the operation block to continue the turn until head is clear behavior. If the head is clear control transfers to operation block .

Once the head is clear decision block determines whether an acceptable egress route has been found. This egress route may be defined as an acceptable window of open space that exists for the robot to move forward. To avoid potential cyclical behavior the acceptable window may be adjusted such that the robot does not head back toward the blocked path or box canyon. If an acceptable egress route has not been found control transfers back to operation block to attempt the back out behavior again. If an acceptable egress route is found the unstuck behavior exits. As a specific example the window may be defined by the equation window 1.25 meters seconds in behavior 10.0 and the egress route may be defined as true if the windowforward thresh 2.5 .

As with the guarded motion behavior the get unstuck behavior operates on a global timing loop. Consequently the get unstuck behavior will be re entered and the process repeated on the next time tick.

The Real Time Occupancy Change Analyzer ROCA algorithm compares the state of the environment to its understanding of the world and reports to an operator or supporting robotic sensor the position of and the vector to any change in the environment. The ROCA robot behavior includes laser based tracking and positioning capability which enables the robot to precisely locate and track static and mobile features of the environment using a change detection algorithm that continuously compares current laser scans to an occupancy grid map. Depending on the laser s range the ROCA system may be used to detect changes up to 80 meters from the current position of the laser range finder. The occupancy grid may be given a priori by an operator built on the fly by the robot as it moves through its environment or built by a combination of robot and operator collaboration. Changes in the occupancy grid may be reported in near real time to support a number of tracking capabilities such as camera tracking or a robotic follow capability wherein one or more robots are sent to the map location of the most recent change. Yet another possible use for the ROCA behavior is for target acquisition.

A notable aspect of the ROCA behavior is that rather than only providing a vector to the detected change it provides the actual X Y position of the change. Furthermore the ROCA behavior can operate on the move meaning that unlike most human presence detection systems which must be stationary to work properly it can detect changes in the features of the environment around it apart from of its own motion. This position identification and on the move capability enable tracking systems to predict future movement of the target and effectively search for a target even if it becomes occluded.

In general once the robot has identified a change the change may be processed by several algorithms to filter the change data to remove noise and cluster the possible changes. Of the clustered changes identified the largest continuous cluster of detected changes i.e. hits may be defined as locations of a change e.g. possible intruder within either the global coordinate space as a vector from the current pose of the robot other useful coordinate systems or combinations thereof. This information then may be communicated to other robot attributes robot behaviors and cognitive conduct within the RIK as well as to other robots or an operator on a remote system.

As discussed earlier when discussing the range attribute a variety of coordinate systems may be in use by the robot and an operator. By way of example a local coordinate system may be defined by an operator relative to a space of interest e.g. a building or a world coordinate system defined by sensors such as a GPS unit an iGPS unit a compass an altimeter and the like. A robot coordinate system may be defined in Cartesian coordinates relative to the robot s orientation such that for example the X axis is to the right the Y axis is straight ahead and the Z axis is up. Another robot coordinate system may be cylindrical coordinates with a range angle and height relative to the robot current orientation.

The software flow diagram shown in includes representative components of an algorithm for performing the ROCA behavior . As stated earlier the ROCA process assumes that at least some form of occupancy grid has been established. However due to the global timing loop execution model details probabilities and new frontiers of the occupancy grid may be bOperation block uilt in parallel with the ROCA process . The ROCA process begins at decision block by testing to determine if the robot includes lasers the laser data is valid an occupancy grid is available and the ROCA process is enabled. If not the ROCA process ends.

If decision block evaluates true process block performs a new laser scan which includes obtaining a raw laser scan calculating world coordinates for data included in the raw laser scan and converting the world coordinates to the current occupancy grid. The raw laser scan includes an array of data points from one or more laser sweeps with range data to objects encountered by the laser scan at various points along the laser sweep. Using the present occupancy grid and present robot pose the array of range data may be converted to an occupancy grid referred to as laser return occupancy grid similar to the present occupancy grid map.

Next decision block tests to see if the current element of the array of range data shows an occupancy element that is the same as the occupancy element for the occupancy grid map. If so control passes to decision block at the bottom of the range data processing loop which is discussed later.

If there is a difference between the laser return occupancy cell and the corresponding cell for the occupancy grid map decision block tests the laser return occupancy cell to see if it is part of an existing change occurrence. In other words if this cell is adjacent to another cell that was flagged as containing a change it may be part of the same change. This may occur for example for an intruder that is large enough to be present in more than one occupancy grid. Of course this test may vary depending on for example the granularity of the occupancy grid accuracy of the laser scans and size of the objects of concern. If decision block evaluates true operation block clusters this presently evaluated change with other change occurrences that may be adjacent to this change. Then control will transfer to operation block .

If decision block evaluates false the presently evaluated change is likely due to a new change from a different object. As a result operation block increments a change occurrence counter to indicate that there may be an additional change in the occupancy grid.

Operation block records the current change occurrences and change clusters whether from an existing cluster or a new cluster then control transfers to decision block .

Decision block tests to see if the change occurrence counter is still below a predetermined threshold. If there are a large number of changes the changes may be due to inaccuracies in the robot s current pose estimate. For example if the pose estimate indicates that the robot has turned two degrees to the left but in reality the robot has turned five degrees to the left there may be a large number of differences between the laser return occupancy grid and the occupancy grid map. These large differences may be caused by the inaccuracies in the pose estimate which would cause inaccuracies in the conversion of the laser scans to the laser return occupancy grid. In other words skew in the alignment of the laser scan onto the occupancy grid map due to errors in the robot s pose estimation from rotation or translation may cause a large number of differences. If this is the case control transfers to operation block to update the position abstraction in an attempt to get a more accurate pose estimate. After receiving a new pose estimate from the position abstraction the ROCA process begins again at decision block .

If decision block evaluates true or decision block was entered from decision block decision block tests to see if there are more data points in the laser scan to process. If so control transfers back to decision block to process the next element in the laser scan array.

If decision block evaluates false all the data in the laser scan array has been processed and decision block again tests to see if the change occurrence counter is still below a predetermined threshold. As discussed earlier if the change occurrence counter is not below the predetermined threshold operation block updates the position abstraction in an attempt to get a more accurate pose estimate the ROCA process begins again at decision block .

If decision block evaluates true then processing for this laser scan is complete and operation block updates a change vector and information regarding change occurrences and change clusters is made available to other robot attributes robot behaviors and cognitive conduct modules.

By way of example and not limitation the ROCA results may be sent to the user interface used by a tracking behavior and combinations thereof. For example ROCA results may be used with additional geometric calculations to pan a visual camera a thermal camera or combination thereof to fixate on one or more of the identified changes. Similarly a manipulator such as for example a weapon may be panned to acquire a target identified as one of the changes. If the detected change is moving tracking position updates may arrive in near real time the actual rate may depend on the speed and latency of the communication channel allowing various sensors to continuously track the target. If desired the robot may also continuously move to the new location identified by the change detection system to provide a mobile tracking capability.

When coupled with an operator interface the tracked entity s movements may be indicated to an operator in near real time and visual data from a camera can be used by the operator to identify the tracked entity.

As with other behaviors the ROCA behavior operates on the global timing loop. Consequently the ROCA behavior will be re entered and the process repeated on the next time tick.

One representative cognitive conduct module enabled by the RIK and GRA is a virtual rail system for robots. Many industrial and research applications involve moving a vehicle or target at varying speeds along a designated path. There is a need to follow physical paths repeatably either for purposes of transport security applications or in order to accurately record and analyze information such as component wear and tear e.g. automotive testing sensor responsiveness e.g. sensor characterization or environmental data e.g. monitoring . Such applications require both accuracy and repeatability.

Conventional practice methods have required the building of physical or actual tracks along which a vehicle can be moved. Drawbacks of such an approach include the significant limitations of the configuration of paths that may be created and the feasibility of building permanent tracks. Also for characterization and other readily modifiable tasks reconfiguration of physical track networks quickly becomes cost and time prohibitive.

Although it has long been known that physical tracks or rails are problematic mobile robots have not had a means by which to maintain accurate positioning apart from such fixed track methods. For some tasks absolute positioning can be achieved by various instrumented solutions such as visual laser based tracking systems or radio frequency positioning systems that triangulate distance based on beacons placed in the environment. Each of these systems is costly to implement in fact the cost for purchasing and installing such a positioning system is often more than the total cost of the robot itself.

Moreover the utility of visual or laser tracking systems is limited by occlusions within the environment. For example RF beacons are only appropriate for environments where the beacons can be fixed in a static known location. The physical properties of a remote sensing environment are constantly changing. In fact walls are often shifted within the building to model different operational environments. Accordingly absolute positioning is sometimes less feasible impractical and frequently impossible to implement. Therefore there is a need to provide a method and system for configuring a virtual track or rail system for use by a robot.

The present invention includes various embodiments including a robot system configured to follow pre planned routes forming a virtual rail or virtual track and may include defined speeds for traversing various segments of the pre planned routes. One application of a virtual rail system includes the repeated testing of a sensor or system to characterize the device. Due to the accuracy and repeatability of the virtual rail system sensors and systems may be tested with data collected that conforms to a sufficient comparable data standard. Such a data collection standard requires acceptance of data only when consistent and comparable data is generated in response to repeatable tests carried out under the same conditions. For example the virtual rail system may be used in a laboratory research facility or manufacturing environment to characterize a vast number of sensors. Accordingly characterization tests that may previously have required a significant amount of time for execution may now be characterized in a fraction of the time.

Sensor characterization is only one example of a specific application. Other applications include automated mail carts and other delivery systems security and surveillance systems manufacturing and monitoring systems. In particular the technology is useful for parts handling as well as replacement of current railed robotic systems especially within the manufacturing and defense industries.

The user interface provides an environment for the generation of a desired path comprised of at least one segment representative of the virtual track for the robot. The user interface may take the form of a Computer Aided Design CAD program for the formation of the desired path. The desired path comprised of one or more segments representative of the virtual track for the robot may take the form of lines arcs or any of a number of design shapes known by those of ordinary skill in the art and are collectively referred to herein as segments. By way of example a desired path includes a plurality of line segments with line segment illustrated as being selected. Line segments may be generated using any of a number of commercially available CAD systems that may generate file formats that are readily convertible and parsable. By way of example and not limitation the CAD file format may be directly saved or converted into a file format such as Drawing Exchange Format .dxf .

A path plan process receives the CAD generated drawing file and processes the one or more segments of the desired path into a waypoint file that includes instructions that are capable of being executed by robot . The processing of drawing file includes the assignment process of input velocities to the segments or vertices of the desired path segments or elements. A verification process analyzes the desired input velocities by comparing the velocities with the mobility capabilities of robot . Discrepancies or incompatibilities between the desired path and input velocities as compared with the execution capabilities of robot are reported and or resolved.

Path plan process further includes a waypoint generation process for generating waypoint file which precipitates from the original drawing file undergoing assignment process followed by verification process for determining the compatibilities of the desired path and the robot capabilities. Waypoint file includes a listing of waypoints as well as any modified velocities which may be different than the originally specified input velocities .

As stated the one or more line segments with the assigned motion qualities is compared or verified through verification process with the performance capabilities of a specific robot which compares the requested desired path with mobility limitations and capabilities of robot . In one embodiment of the present invention an algorithm analyzes the path including traversal of the segments at various speeds including velocity transitions between line and arc segments and determines the turn gain to insure minimal oscillations during traversal of the line segments. Furthermore the algorithm is capable of carving smooth arcs by adjusting the turn gain based on an analysis of the arc shape and the commanded forward velocity. This algorithm provides the ability to arbitrate between waypoint following and motor schema control as speed and point types change.

After resolution of any inconsistencies or incompatibilities a waypoint file is generated by path plan process with waypoint file being transferred over communication interface to robot for execution. Robot executing the various waypoints and specified velocities associated therewith traces out or follows a virtual track or virtual rail as specified and or modified by a user through the control generation system .

The user interface for controlling path plan process enables a user to generate commands in the form of waypoint file for execution by robot which results in the formation of a virtual rail or track that is followed or traced by robot . The virtual track or rail may be created from an abstraction or may be generated with reference to an available map or other boundary designations of the operating environment. Furthermore accurate positioning of the robot may be maintained by application of Markov localization techniques that may combat problems such as odometry drift. Generation of waypoint file allows a robot given accurate position data to traverse a trace of arcs and lines at various speeds. The various embodiments of the present invention may utilize various mapping or localization techniques including positioning systems such as indoor GPS outdoor GPS and DGPS a theodolite system as well as others which may be devised in the future.

As stated in desired path includes a plurality of line segments . Through the use of the user interface start point and end point may be selected with each individual line segment being individually selected thereby allowing the association of a velocity therewith. By way of example line segment is illustrated as being selected with a representative speed of 0.5 meters per second being associated therewith. The path plan process through user interface uses the properties of each segment within drawing file to spatially locate each segment e.g. line or arc and then creates a default path based on the initial order of segments found in the drawing file .

Path plan process through user interface can be used to manipulate various properties of the initial desired path . For example when segment is selected the segment is highlighted in the user interface . Once a segment is highlighted its properties are displayed and can be edited if desired. The order of segments can be changed for example either by using the Move Up and Move Down buttons or by selecting and dragging a segment to its new position. Each segment can be included or excluded for example from the path by appropriately marking the Include this entity in the path checkbox. This allows additional features that are not part of the path to be included in the drawing file without the requirement that they be a part of the virtual track or rail. Additional input boxes may be provided to set the initial speed the final speed or constant acceleration and provide for comments for each segment.

Once motion characteristics such as velocity have been associated with each of the line segments other processing may be performed such as an estimation of run time as well as verification of velocity transitions . Once velocities have been associated therewith and verification of compatibility with the capabilities of the target robot have been performed a waypoint file may be generated by activating generate waypoint process within the user interface .

By way of example and not limitation waypoint file assumes one or more formats an example of which is illustrated with respect to . Waypoint file may include an estimated traversal time identifying a summation of the traversal times of each segment of the virtual track. By way of example waypoint file includes a listing of ordered vertices identifying the waypoints for traversal by the robot . Each waypoint includes a waypoint number indexed according to order as previously described X and Y coordinate values a velocity value and an arc continuation flag for associating a set of waypoints for short line segments that comprise an arc traversal.

The localization process of the robot allows the robot to accurately and repeatedly trace the waypoints forming the virtual rail or track. The navigation process responds to the localization process and sensor data from sensor process to generate controls to the robot motion process . Additionally the robot uses sensor data from sensor process to determine surrounding features. The robot control process does not need to necessarily identify the composition or identity of the features but only the fact that they are part of the environment which forms boundaries for the robot. Robot may utilize one or more sensors for providing feedback to the localization process. Sensors may include wheel measuring devices laser sensors ultrasonic sensors and the like.

Waypoint navigation process generates commands or control signals to a robot motion process . Robot motion process generates controls to actuators for generating motion rotation etc. as well as velocities associated therewith. Waypoint navigation process further receives from sensor process sensor information in the form of feedback for determining when traversal of one or more segments of the virtual rail has been accomplished. Sensor process may also provide information to waypoint navigation process in the form of changes to environmental parameters which enables waypoint navigation process to protect or guard against unforeseen changes to the environment. Additional details with respect to waypoint navigation are described below with respect to .

As stated a drawing file or other illustration of a desired path is generated and includes at least one segment representative of the virtual track to be configured for the virtual track which the robot will traverse. Generation of a desired path results in the creation of a specific file format representing the illustrated segments of the desired path. The file format in one embodiment of the present invention is converted into a standardized file format an example of which is the .dxf format. Generation and converting steps may be accomplished through the use of one or more applications which are made usable through a user interface such as user interface .

Through path plan process and as further illustrated with respect to a user interface the drawing file is imported and start points end points and segment ordering may be assigned to the various segments of the desired path . Through verification process continuity may be checked or verified and input velocities may be assigned to the various segments of the desired path . Further checking and reporting of inconsistencies or incompatibilities may also be performed.

Once the desired path has been illustrated and start and end points as well as velocities have been associated therewith as well as a successful completion of verification processes a waypoint list is generated and stored in a waypoint file. Upon completion of the generation of waypoint file by control generation system the waypoint file is sent 2590 via a communication interface to a robot . Thereafter robot may execute a first waypoint from waypoint file and subsequently execute a second and subsequent waypoint using waypoint navigation process .

The waypoint handler illustrated in starts with decision block to test whether path planning is active and the time since the achieving the last waypoint is greater than a threshold. In the representative embodiment of the threshold is set at three seconds. If sufficient progress has not been made toward a waypoint within the threshold there may be a barrier blocking the robot s progress toward the waypoint. For example perhaps a door was closed that the waypoint planning had assumed was open or perhaps a new obstacle was placed in the environment such that the robot cannot find a way around the obstacle to achieve the next waypoint. In these types of circumstances it may be appropriate to plan a new path with a new waypoint list. Thus if path planning is active and the threshold is exceeded operation block performs a routine to delete the current waypoint list and plan a new waypoint list then control transfers to decision block .

If decision block evaluates false or operation block completes decision block tests to see if the current waypoint is defined as part of an arc. If the current waypoint is part of an arc operation block sets a variable named Waypoint Radius as the current speed times one half of the robot s length. This Waypoint Radius variable is used later as a test threshold when determining how close the robot is to the waypoint. If the current waypoint is not part of an arc operation block sets Waypoint Radius to one half the robot s length plus one half the length of the arm extension. Thus the waypoint radius is defined as the physical extent of the robot from the Robot s center.

With the Waypoint Radius variable set decision block tests to see if the angle to the target waypoint is currently less than 90 degrees to the left or right. If so operation block sets the range to the target as the closest range within plus or minus 15 degrees of the current angle to the target. If the waypoint is not less than 90 degrees away operation block sets the range to target Min Front Distance which as explained earlier is the range to the nearest object within plus or minus 90 degrees of the robot s forward direction. The current angle to the target defines the angle towards the target relative to straight ahead. However Range To Target defines a range i.e. distance from the robot to an obstacle in the direction of the waypoint.

After setting the Range To Target variable decision block tests to see if the distance to the current waypoint is less than the waypoint radius defined previously. If so the waypoint is considered to be achieved so operation block iterates to the next waypoint in the waypoint list and the process exits.

If decision block evaluates false a more specific test is performed to see if the waypoint has been achieved. In some instances it may not be possible to actually place the center of the robot over the waypoint. For example the waypoint may have been placed too close to a wall or perhaps even behind the wall. However if the robot can get close enough it may be sufficient to say the waypoint has been achieved. Thus if decision block evaluates true operation block iterates to the next waypoint in the waypoint list and the process exits. However if decision block evaluates false the process exits and continues on with the current waypoint.

A representative evaluation of a test for close enough to a waypoint is illustrated in block . Of course those of ordinary skill in the art will recognize that other parameters distances and decisions may be made within the scope of the present invention to define whether a waypoint has been achieved. In block the first test checks to see if the Range to Target variable is less than the arm extension plus the larger of a forward threshold or a side threshold. If not there may still be room to move forward or rotate toward the waypoint so the process may exit and continue on with the current waypoint. Otherwise the second test checks to see if the distance to the waypoint is less than the sum of the arm extension and the robot length. If not there may still be room to move forward or rotate toward the waypoint so the process may exit and continue on with the current waypoint. Otherwise the third test checks to see if the distance to the closest object on the front side of the robot i.e. Min Front Distance is less than the arm extension plus twice the forward threshold. If not there may still be room to move forward or rotate toward the waypoint so the process may exit and continue on with the current waypoint. Otherwise the final check tests to see if the angle to the target is less than 45 degrees or the range to the nearest obstacle is less than the turn threshold. If not there may still be room to move or rotate toward the waypoint so the process may exit and continue on with the current waypoint. Otherwise operation block iterates to the next waypoint in the waypoint list and the process exits.

If operation block evaluates false or after the pose is updated decision block tests to see if the range to the closest object in front is less than twice a predefined threshold. If not control transfers to decision block . However if the range to the closest object in front is less than twice a predefined threshold the robot may be approaching close to an obstacle so decision block tests to see if the robot is blocked in the direction of the target. If so operation block performs a backup procedure and the process exits. If the robot is not blocked in the target direction decision block tests to see if the angle to the target is greater than 60 degrees. If so the robot may not be able to achieve the target without backing up so operation block performs a backup procedure and the process exits. If the angle to the target is not greater than 60 degrees a backup procedure may not be needed and control transfers to decision block .

Decision block tests to see if the angle to the target is greater than 45 degrees. If so operation block sets the translational speed to zero enabling the robot to stop making forward progress while it rotates to face more directly toward the target. After setting the speed to zero the process exits.

If the angle to the target is not greater than 45 degrees new translational velocity determination continues by decision block testing to see if a detection behavior is in progress. As stated earlier when describing the obstacle avoidance behavior a detection behavior may be a behavior where the robot is using a sensor in an attempt to find something. For example the countermine conduct is a detection behavior that is searching for landmines. In these types of detection behaviors it may be desirable to approach much closer to objects or to approach objects with a much slower speed to allow time for the detection function to operate. Thus if a detection behavior is active operation block sets a desired speed variable based on detection parameters that may be important. By way of example and not limitation in the case of the countermine conduct this desired speed may be set as Desired Speed Max passover rate Scan amplitude Scan Speed . In this countermine conduct example the Max passover rate may indicate a maximum desired speed for passing over the landmine. This speed may be reduced by other factors. For example the Scan amplitude Scan Speed term reduces the desired speed based on a factor of how fast the mine sensor sweeps an area. Thus the Scan amplitude term defines a term of the extent of the scan sweep and the Scan Speed defines the rate at which the scan happens. For example with a large Scan amplitude and a small Scan Speed the Desired Speed will be reduced significantly relative to the Max passover rate to generate a slow speed for performing the scan. While countermine conduct is used as an example of a detection behavior those of ordinary skill in the art will recognize that embodiments of the present invention may include a wide variety of detection behaviors such as for example radiation detection chemical detection and the like.

If a detection behavior is not in progress decision block tests to see if a velocity limit is set. In some embodiments of the invention it may be possible for the operator to set a velocity limit that the robot should not exceed even if the robot believes it may be able to safely go faster. For example if the operator is performing a detailed visual search the robot may be performing autonomous navigation while the operator is controlling a camera. The operator may wish to keep the robot going slow to have time to perform the visual search.

If a velocity limit is set operation block sets the desired speed variable relative to the velocity limit. The equation illustrated in operation block is a representative equation that may be used. The 0.1 term is a term used to ensure that the robot continues to make very slow progress which may be useful to many of the robot attributes behaviors and conduct. In this equation the Speed Factor term is a number from one to ten which may be set by other software modules for example the guarded motion behavior to indicate a relative speed at which the robot should proceed. Thus the desired speed is set as a fractional amount of the Max Limit Speed.

If a velocity limit is not set operation block sets the desired speed variable relative to the maximum speed set for the robot i.e. Max Speed with an equation similar to that for operation block except Max Speed is used rather than Max Limit Speed.

After the Desired Speed variable is set by block or decision block determines if the distance to the current waypoint is less than the current velocity plus a small safety factor. If not operation block sets the new translational speed for the robot to the Desired Speed variable and the process exits. However if the current waypoint is getting close as determined by decision block evaluating true decision block determines if the current waypoint is part of an arc. If so operation block sets the translational speed such that the robot can smoothly traverse the arc. Thus operation block is a representative equation that sets the new translational speed as a function of the larger of either the angle to the target or the turn angle to the next waypoint. In other words the translation velocity will be reduced by setting the new speed to the current speed multiplied by a fractional change factor. This fractional change factor may be defined as the cosine of the larger of either the angle to the target or the turn angle to the next waypoint.

If the current waypoint is not part of an arc it may still be desirable to slow the robot s translational speed down in preparation for turning toward the next waypoint. Thus operation block is a representative equation for setting the new translational speed for the robot by multiplying the current speed by a different fractional change factor. This fractional change factor may be set as about 0.7 0.3 COS Next Turn Angle . In other words the new speed will be set somewhere between 70 and 100 of the current speed based on the angle towards the next waypoint. If the angle is small for example zero degrees there may be no need to slow down and the new speed can be set at 100 of the current speed. Conversely if the angle is large for example 90 degrees it may be desirable to slow down significantly in preparation for a turn to the new waypoint. Thus the new translational velocity is set at 70 of the current speed. Of course the next time through the global timing loop presents another chance to adjust the translational speed if the angle to the next waypoint is still large.

This sets the translational speed based on the severity of the turn that will be negotiated to achieve the next waypoint.

If waypoint following is enabled decision block tests to see if the robot is blocked in front. If not rotational velocity determination can continue at decision block . However if the robot is blocked in front decision block determines whether the current waypoint is to the left of the robot. If so decision block tests the area to the left of the robot where the robot may want to turn toward and find the range to the nearest object in that area. If the range is larger than a turning threshold as tested by decision block there is room to turn so operation block sets the rotational velocity to the left at 30 of a predefined maximum rotational velocity. After setting the rotational velocity the process exits.

If the waypoint is not on the left decision block tests the area to the right of the robot where the robot may want to turn toward and find the range to the nearest object in that area. If the range is larger than a turning threshold as tested by decision block there is room to turn so operation block sets the rotational velocity to the right at 30 of a predefined maximum rotational velocity. After setting the rotational velocity the process exits.

If the robot is blocked in front and there is not room to turn i.e. either decision block or evaluates false then the process exits to a get unstuck behavior in an effort to find a way to get around the obstacle in front so that the robot can continue to pursue the current waypoint.

If the robot is not blocked in front decision block tests to see if the angle to the waypoint target is less than ten degrees. If so the robot is close to pointed in the correct direction and only minor corrections may be useful. Thus in a representative method for determining an appropriate change to the rotational velocity operation block sets a Waypoint Turn Gain as the angle to the target divided by 100. Conversely if the waypoint target is equal to or greater than ten degrees a larger correction to the rotational velocity may be appropriate to get the robot pointed toward the current waypoint. Thus in a representative method for determining an appropriate change to the rotational velocity operation block sets a Waypoint Turn Gain as the base logarithm of the angle to the target minus one. As a result the larger the angle to the waypoint target the larger the value will be for the Waypoint Turn Gain.

With the Waypoint Turn Gain set decision block tests to see if the waypoint is on the left. If so operation block sets the turn velocity to the left by multiplying the current turn velocity by the Waypoint Turn Gain and the process exits. If the waypoint is not on the left operation block sets the turn velocity to the right by multiplying the current turn velocity by the Waypoint Turn Gain and the process exits.

As with other behaviors the waypoint algorithms and in and respectively operate on the global timing loop. Consequently the decision of whether a waypoint has been achieved to move on to the next waypoint adjustments to the translational velocity and adjustments to the rotational velocity may be repeated on each time tick of the global timing loop.

One representative cognitive conduct module enabled by the RIK is a robotic follow capability wherein one or more robots are sent to a map location of the most recent change in the environment or directed to follow a specific moving object. is a software flow diagram illustrating components of an algorithm for performing the follow conduct .

This relatively autonomous conduct may be useful for a fast moving robot with perceptors that may be used by robot attributes and robot behaviors to detect and track changes in the environment. It would be difficult for conventional robots under direct operator control to avoid obstacles track where the robot is going and track the object of pursuit at the same time. However with the relatively autonomous conduct and collaborative tasking enabled by the RIK a high speed chase may be possible.

The RIK may include a tracking behavior that allows the robot to track and follow an object specified by the operator with the camera or other tracking sensors such as thermal infrared sonar and laser. Consequently the tracking behavior is not limited to visual tracking but can be used with any tracking system including a thermal imaging system for tracking human heat signatures.

In visual tracking for example the operator may specify an object to be tracked within the operator s video display by selecting a pursuit button on the interface and then manipulating the camera view so that the object to be tracked is within a bounding box. The camera can then track the object based on a combination of for example edge detection motion tracking and color blob tracking. Furthermore the camera can track the motion of the target independently from the motion of the robot which allows the robot to follow the optimal path around obstacles even if this path at first may take the robot in a direction different from the direction of the target.

Thus the robotic follow conduct effectively blends robot behaviors such as for example tracking obstacle avoidance reactive path planning and pursuit behaviors. To begin the follow conduct operation block illustrates that the conduct queries or receives information regarding the present bearing to a target. This present bearing may be generated by a tracking behavior such as for example the ROCA behavior discussed above or from an updated map location from the operator or other robot. In addition the bearing may be converted to a robot relative coordinate system if needed. Both the tracking behavior and follow conduct operate on the global timing loop. As a result the follow conduct will be re entered each timing tick and be able to receive an updated bearing to the target from the tracking behavior or other defined location each timing tick.

Decision block tests to see if the robot has reached the target. If so the follow conduct exits. If not the follow conduct transitions to decision block . In this representative embodiment reaching the target is defined as 1 the closest obstacle in a 30 region in which the tracked object lies is closer than the closest obstacle in a 30 region on the opposite side 2 both L front and R front are obstructed 3 the angle to the object lies in the front region and 4 the distance to the object in front is less than the distance on the right and left.

Decision block tests to see if the front is blocked. If so control transfers to operation block to attempt to get around the obstacle. If not control transfers to decision block . The front blocked decision may be based for example on a flag from the guarded motion behavior discussed previously.

Decision block begins a process of attempting to get around a perceived obstacle. To begin this process decision block checks the current speed. If the speed is not greater than zero control transfers to decision block . If the speed is greater than zero operation block sets the speed to zero before continuing with decision block .

Decision block tests to see if the robot is blocked on the left or right. If not control transfers to decision block . If the robot is blocked on the left or right the robot may not have an area sufficient to make a turn so operation block sets the robot to begin backing up with an angular velocity of zero and a linear velocity that is 20 of the presently specified maximum then the follow conduct exits.

Decision block tests to see if the robot is blocked in the direction of the target. If so control transfers to decision block . If the robot is not blocked in the direction of the target operation block sets the robot to turn toward the target with a linear velocity of zero and an angular velocity that is 60 of the presently specified maximum then the follow conduct exits.

Decision block tests to see if the target is positioned substantially in front of the target. If so the target is in front of the robot but the robot is also blocked by an obstacle. Thus operation block attempts to move forward slowly but also turn around the obstacle by setting the linear velocity to 10 of the presently specified maximum and the angular velocity to 60 of the presently specified maximum and away from the obstacle. Then the follow conduct exits.

If decision block evaluates false then the direction directly in front of the robot is blocked and the direction toward the target is blocked. Thus operation block attempts to find a clear path to the target by setting the linear velocity to 20 of the presently specified maximum i.e. backing up and the angular velocity to 30 of the presently specified maximum and in the direction of the target. Then the follow conduct exits.

Returning to decision block if decision block evaluates false then decision block begins a process of attempting to progress toward the target since the front is not blocked. Thus decision block tests to see if the robot is blocked in the direction of the target. If so operation block attempts to move forward while gradually turning away from the target in an effort to try to find a clear path to the target by setting the linear velocity to 20 of the presently specified maximum and the angular velocity to 20 of the presently specified maximum. Then the follow conduct exits.

If decision block evaluates false then the target is not in front of the robot and the robot is free to move forward. Thus operation block attempts to move forward and turn toward the target. In this representative embodiment the robot is set with an angular velocity toward the target that is determined by the current bearing toward the target divided by a predetermined turn factor. Consequently the speed at which the robot attempts to turn directly toward the target may be adjusted by the turn factor. In addition the robot is set to move forward at a safe speed which may be set as 10 of the maximum to ensure the robot keeps moving plus a safe speed adjustment. The safe speed adjustment may be defined as Front forward threshold 2. Wherein Front defines the distance to the nearest object in the vicinity of directly in front as defined by the range attribute discussed earlier and forward threshold defines a distance to which the robot may be relatively certain that objects are outside of its time horizon. Thus the robot makes fast but safe forward progress while turning toward the target and the speed may be adjusted on the next time tick based on new event horizon information.

As with other robot behaviors and cognitive conduct the follow conduct operates on the global timing loop. Consequently the ROCA behavior will be re entered and the process repeated on the next time tick.

One representative cognitive conduct module enabled by the RIK is a countermine process. are software flow diagrams illustrating components of a countermine conduct module. Landmines are a constant danger to soldiers during conflict and to civilians long after conflicts cease causing thousands of deaths and tens of thousands of injuries every year. Human minesweeping to find and remove mines is a dangerous and tedious job. Mine detecting robots may be better equipped and expendable if things go wrong. The countermine conduct in illustrates a relatively autonomous conduct that may be useful for finding and marking landmines based on a predetermined path. The predetermined path may be defined as a series of waypoints or may be simply defined as a straight path between the robot s present position and an end point. For example the series of waypoints may be defined on a map to follow a road or to create broad coverage of a large area. Those of ordinary skill in the art will recognize that illustrate a high level decision and action process. Details of many of the behaviors such as some movements of manipulators and details of what comprises the sensing of a mine may not be described in detail. Furthermore and the description herein may express details of geometry and function related to a specific robot implementation for explanation purposes. Embodiments of the present invention are not intended to be limited to these specific implementation details.

To begin the countermine conduct an initiate task is performed. Generally this initiate task may be performed at the beginning of a countermine sweep and would thus be performed once outside of the global timing loop.

The initiate task may include operation block to fully raise a sensing device which may be configured for sensing landmines and may be positioned on a manipulator for placement near the ground and for generating a sweeping motion of the mine sensor in a region around the robot. Operation block calibrates the sensing device and for example corrects for background noise if needed. Operation block then positions the sensing device for operation and defines sensing parameters. As an example the representative embodiment of illustrates setting a sweep amplitude and a sweep speed for the mine sensor.

After the initiate task the countermine conduct begins a fast advance process by setting a relatively fast speed toward the first waypoint in operation block . The fast advance speed may depend on many factors such as for example the motion capabilities of the robot the sweeping characteristics of the manipulator and the sensing characteristics of the mine sensor. Generally the robot s fast advance speed may be set relative to the sweep coverage of the manipulator to ensure sufficient coverage of the area being swept. For example in this specific embodiment operation block sets the robot s speed to about 0.35 m sec SweepWidth 10 . Thus operation block actually determines the maximum advance rate based on scan width and scan speed to ensure 100 coverage. After setting the maximum advance rate operation block enables the guarded motion and obstacle avoidance. One result of the fast advance process is that the maximum advance rate serves as an upper bounds of allowable velocities for the guarded motion and obstacle avoidance behaviors as explained above.

Once in the fast advance mode the countermine conduct begins a process of sensing for mines . Decision block tests to see if a signal processing threshold has been exceeded. This signal processing threshold may be set at a predetermined level indicating a potential that a mine has been sensed in the vicinity of the mine sensor. Obviously this predetermined threshold may be a function of factors such as for example expected mine types mine sensor characteristics robot speed and manipulator speed. If the signal processing threshold is not exceeded control returns to operation block to continue the fast advance process .

If the signal processing threshold is exceeded the process tests to see if there is enough room at the present location to conduct a detailed search for the mine. Thus decision block tests to see if the front range parameter is larger than a predetermined threshold. By way of example and not limitation the threshold may be set at about one meter. If decision block evaluates false indicating that there may not be enough room for a detailed search control transfers to operation block to continue the fast advance process . In this case the process depends on the guarded motion and obstacle avoidance behaviors to navigate a path around the potential mine.

If the front range parameter is larger than a predetermined threshold there may be room for a detailed search and the process continues. Decision block tests to see if the back of the robot is blocked. If so operation block sets the robot to back up a predetermined distance for example 0.2 meters at a speed of for example 20 of a predetermined maximum. This movement enables the robot to perform a more accurate sweep by including in the scan the subsurface area that triggered the processing threshold. If the area behind the robot is not clear the process continues without backing up.

Operation block performs a coverage algorithm in an attempt to substantially pinpoint the centroid of the possible mine location. In a representative embodiment this coverage algorithm may include advancing a predetermined distance for example 0.5 meters at a relatively slow speed and sweeping the manipulator bearing the mine sensor with a wider sweep angle and a relatively slow speed. Thus the coverage algorithm generates a detailed scan map of the subsurface encompassing the area that would have triggered the processing threshold. The results of this detailed scan map may be used to define a centroid for a mine if found.

After the detailed scan from the coverage algorithm of operation block decision block in begins a process to marking the mine location which may have been found by the coverage algorithm. Decision block tests to see if the centroid of a mine has been found. If not control transfers to the end of the mine marking process . A centroid of a mine may not be found because the original coarse test at decision block indicated the possibility of a mine but the coverage algorithm at operation block could not find a mine. As a result there is nothing to mark.

If a centroid was found decision block tests to see if physical marking such as for example painting the location on the ground is enabled. If not operation block saves the current location of the sensed mine then continues to the end of the mine marking process .

If marking is engaged operation block saves the current location of the mine for example as a waypoint at the current location. Next operation block corrects the robot position in preparation for marking the location. For example and not limitation the robot may need to backup such that the distance between the centroid of the mine and the robot s current position is substantially near the arm length of the manipulator bearing the marking device.

With the robot properly positioned operation block moves the manipulator bearing the marking device in proper position for making a mark. For example of a specific robot configuration and not limitation the manipulator may be positioned based on the equation arm position robot pose arctan robotx centroidx roboty centroidy 

With the manipulator in position operation block marks the mine location such as for example by making a spray paint mark.

After completion of the mine marking process decision block tests to see if the robot has reached the furthest waypoint in the predefined path. If so the countermine conduct has completed its task and exits. If the further waypoint has not been reached control returns to the fast advance process in .

Conventional robots lack significant inherent intelligence allowing them to operate at even the most elementary levels of autonomy. Accordingly conventional robot intelligence results from a collection of programmed behaviors preventing the robot from performing damaging and hurtful actions such as refraining from getting stuck in corners or encountering obstacles.

While robots have great potential for engaging in situations without putting humans at risk conventional robots still lack the ability to make autonomous decisions and therefore continue to rely on continuous guidance by human operators who generally react to live video from the robot s on board cameras. An operator s user interface with a robot has generally been limited to a real time video link that requires a high bandwidth communication channel and extensive human interaction and interpretation of the video information.

Most commercial robots operate on a master slave principle where a human operator controls the movement of the robot from a remote location in response to information from robot based sensors such as video and GPS. Such an interface often requires more than one operator per robot to navigate around obstacles and achieve a goal and such an approach generally requires highly practiced and skilled operators to reliably direct the robot. Additionally the requisite concentration needed for controlling the robot may also detract an operator from achieving the overall mission goals. Accordingly even an elementary search and rescue task using a robot has typically required more than one operator to monitor and control the robot. As robots become more commonplace requiring an abundance of human interaction becomes inefficient and costly as well as error prone. Therefore there is a need to provide a usable and extendable user interface between a user or operator and a plurality of robots.

Embodiments of the present invention provide methods and apparatuses for monitoring and tasking multiple robots. In the following description processes circuits and functions may be shown in block diagram form in order not to obscure the present invention in unnecessary detail. Additionally block definitions and partitioning of logic between various blocks is exemplary of a specific implementation. It will be readily apparent to one of ordinary skill in the art that the present invention may be practiced by numerous other partitioning solutions. For the most part details concerning timing considerations and the like have been omitted where such details are not necessary to obtain a complete understanding of the present invention and are within the abilities of persons of ordinary skill in the relevant art.

The various embodiments of the present invention are drawn to an interface that supports multiple levels of robot initiative and human intervention which may also provide an increased deployment ratio of robots to operators. Additionally exchange of information between a robot and an operator may be at least partially advantageously processed prior to presentation to the operator thereby allowing the operator to interact at a higher task level. Further improvements are also provided through tasking multiple robots and decomposing high level user tasking into specific operational behaviors for one or more robots.

By way of example and not limitation the user interface system including input devices such as a mouse or joystick enables effective monitoring and tasking of the team of robots . Interaction between robots and user interface system is in accordance with a communication methodology that allows information from the robots to be efficiently decomposed into essential abstractions which are sent over communication interfaces on a need to know basis. The user interface system parses the received messages from robots and reconstitutes the information into a display that is meaningful to the user.

In one embodiment of the present invention user interface system further includes a user interface as illustrated with respect to . User interface is configured as a cognitive collaborative workspace which is configured as a semantic map overlaid with iconographic representations which can be added and annotated by human operators as well as by robots . The cognitive collaborative nature of user interface includes a three dimensional 3 D representation that supports a shared understanding of the task and environment. User interface provides an efficient means for monitoring and tasking the robots and provides a means for shared understanding between the operator and the team of robots . Furthermore user interface may reduce human navigational error reduce human workload increase performance and decrease communication bandwidth when compared to a baseline teleoperation using a conventional robot user interface.

In contrast to the static interfaces generally employed for control of mobile robots user interface system adapts automatically to support different modes of operator involvement. The environment representation displayed by the user interface is able to scale to different perspectives. Likewise the user support and tasking tools automatically configure to meet the cognitive information needs of the operator as autonomy levels change.

A functional aspect of the user interface is the cognitive collaborative workspace which is a real time semantic map constructed collaboratively by humans and machines that serves as the basis for a spectrum of mutual human robot interactions including tasking situation awareness human assisted perception and collaborative environmental understanding. The workspace represents a fusion of a wide variety of sensing from disparate modalities and from multiple robots.

Another functional aspect of the user interface is the ability to decompose high level user tasking into specific robot behaviors. User interface system may include capabilities for several autonomous behaviors including area search path planning route following and patrol. For each of these waypoint based behaviors the user interface system may include algorithms which decide how to break up the specified path or region into a list of waypoints that can be sent to each robot.

The collaborative workspace provided by the user interface provides a scalable representation that fuses information from many sensors robots and operators into a single coherent picture. Collaborative construction of an emerging map enhances each individual team robot s understanding of the environment and provides a shared semantic lexicon for communication.

User interface may support a variety of hardware configurations for both information display and control inputs. The user interface may be adapted to the needs of a single operator single robot team as well as to multi operator multiple robot teams with applications varying from repetitive tasks in known environments to multi agent investigations of unknown environments.

With reference to control inputs to the robot can come from the keyboard mouse actions touch screen or joysticks. Controls based on for example the joystick are dynamically configurable. Any joystick device that the computer system will recognize can be configured to work in the user interface .

By way of example and not limitation an illustrative embodiment of user interface is illustrated with respect to . Display of information from the robot can be made on one or more monitors attached to the user interface system . The user interface contains several windows for each robot on the team. These windows may include a video window a sensor status window an autonomy control window a robot window and a dashboard window . Each of these windows is maintained but not necessarily displayed for each robot currently communicating with the system. As new robots announce themselves to the user interface system then a set of windows for that specific robot is added. In addition a multi robot common window also referred to herein as an emerging map window is displayed which contains the emerging position map and is common to all robots on the team. The illustrative embodiment of the user interface includes a single display containing for example five windows and a common emerging map window as illustrated with respect to .

Additionally in autonomy control window the user can select between different levels of robot autonomy. Multiple levels of autonomy provide the user with an ability to coordinate a variety of reactive and deliberative robot behaviors. Examples of varying levels of autonomy include telemode safe mode shared mode collaborative tasking mode and autonomous mode as described above with reference to .

User interface permits the operator or user to switch between all four modes of autonomy as the task constraints human needs and robot capabilities change. For instance the telemode can be useful to push open a door or shift a chair out of the way whereas the autonomous mode is especially useful if human workload intensifies or in an area where communications to and from the robot are sporadic. As the robot assumes a more active role by moving up to higher levels of autonomy the operator can essentially ride shotgun and turn his or her attention to the crucial tasks at hand locating victims hazards dangerous materials following suspects measuring radiation and or contaminant levels without worrying about moment to moment navigation decisions or communications gaps.

The emerging map is displayed in user interface and illustrates not only walls and obstacles but also other things that are significant to the operator. The operator can insert items people hazardous objects etc. from a pull down menu or still images captured from the robot video to establish what was seen and where. In this way the representation is a collaborative workspace that supports virtual and real elements supplied by both the robot and the operator. The emerging map also maintains the size relationships of the actual environment helping the operator to understand the relative position of the robot in the real world. The operator may change the zoom pitch and yaw of the emerging map to get other perspectives including a top down view of the entire environment showing walls obstacles hallways and other topographical features.

The multi robot user interface system is configured to recognize when communications are received from a new robot and instantiates a new set of robot centric control windows to allow individual tasking of that robot. Likewise the user interface automatically displays and disseminates whatever information is relevant to the collaborative workspace i.e. information to be shared such as various map entities and environmental features it may have discovered .

For the human team members the current cognitive collaborative workspace as illustrated with respect to user interface provides point and click user validation and iconographic insertion of map entities. An operator can verify or remove entities which have been autonomously added and can add new entities. The user interface also allows the workspace perspective to be focused on a single robot in which case it will track a selected robot and transform the data in various interface windows to be relevant to that robot. By choosing to free the perspective the user gains the ability to traverse the environment with a third person perspective and monitor the task and environment as a whole. The multi robot user interface may decide which windows to show hide based on the level of autonomy and the choice of focus.

Robot processes N illustrate a distillation of the process of taking low level data and converting it to perceptual abstractions that are more easily grasped by an operator. These abstractions are packaged in data packets according to a message protocol and then filtered for transmission to user interface system . This protocol is composed of message packets that contain information on the type of data being passed the robot that generated the message the data itself and control characters for the packet. Each robot in the field has a unique identifier that is contained in each data packet it generates. All robots use the same communication interface N to the user interface system . This abstraction and transmission method allows long distance radio communications at a low bandwidth over a single channel for multiple robots rather than requiring several channels of high bandwidth and close proximity as would be required for passing raw data for analysis as in most other robot control systems.

Regarding the user interface system data packets from the robots in the field enter the user interface system and are deblocked and extracted to information usable by the user interface . This data can go directly to the various windows or the data can go through an interface intelligence package which can provide further enhancement or abstractions of the data that are meaningful to the operator. The various embodiments of the present invention contemplate at least two types of windows for each individual robot display windows and control windows. Display windows show data in logical layouts and allow the operator to monitor the robot. The presentation of data in windows may be partitioned into four types of windows individual robot display windows e.g. sensor status window dashboard window individual robot control windows e.g. video window robot window autonomy control window and map and tasking control windows e.g. emerging map window .

The map and tasking control windows show a more global representation and contain all the robots together. They provide both display of data and the control of robot function. The mapping and tasking control windows can also provide higher level control to perform specific tasks such as area search intruder detection mine detection and waypoint and path generation. In order to provide the higher level tasking the map and tasking control windows rely on the interface intelligence package .

Control messages from the user interface system follow a similar path to the robots as the data abstractions follow from the robots to the user interface system . Command messages from the control windows e.g. video window robot window autonomy control window are assembled in data packets which may include the same structure e.g. message type robot to whom the packet is directed the data itself and the packet control characters as the packets from the robots. The packets to the robots may be generated from the various control windows or the interface intelligence package . The messages are packaged and sent through the robot interface server and sent to the robots over the communication interface N and then deblocked in the robot communication layer and acted on by the appropriate robot.

The user interface system does not make assumptions on the robots states but utilizes acknowledgement of sent commands. For example if the operator requests the robot to go to a specific point e.g. setting a waypoint the user interface system waits for the robot to send back the waypoint before displaying the waypoint in the various windows on user interface . By enforcing an acknowledgement the actual robot state is always presented rather than an assumed state of the robot. However the robot does not require the detection or interaction with a user interface system in order to preserve safety and complete a requested task while also protecting itself from erroneous operator maneuvers or directives. The robots may also constantly broadcast their states over the communication interface thereby allowing the user interface system to obtain current robot status. Since each robot is constantly broadcasting its data and all data packets have unique robot identifiers the appearance of new robots in the message stream automatically generates the appearance of the robot in the user interface system .

Although this invention has been described with reference to particular embodiments the invention is not limited to these described embodiments. Rather the invention is limited only by the appended claims which include within their scope all equivalent devices or methods that operate according to the principles of the invention as described.

