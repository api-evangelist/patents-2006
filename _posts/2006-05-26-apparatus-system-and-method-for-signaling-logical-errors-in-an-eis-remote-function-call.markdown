---

title: Apparatus, system, and method for signaling logical errors in an EIS remote function call
abstract: An apparatus, system, and method are disclosed to signal a logical error in a function call made by an integration adapter. The apparatus includes an communication module, a code extraction module, a comparison module, and an error report module. The communication module receives a business object having an error dictionary in response to a function call. The code extraction module extracts an error code value from the business object based on an error code location identifier. The comparison module compares the error code value to an associated error code in the error code dictionary. The error report module signals a logical error in the function call.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07594141&OS=07594141&RS=07594141
owner: International Business Machines Corporation
number: 07594141
owner_city: Armonk
owner_country: US
publication_date: 20060526
---
This invention relates to logical error handling in an enterprise information system and more particularly relates to logical error handling in an SAP remote function call.

Systeme Anwendungen Produkte in der Datenverarbeitung or Systems Applications and Products in Data Processing SAP is an enterprise information and management package that is used worldwide. The SAP system tracks and manages data relevant to an enterprise including sales production finance accounting and human resources. Other enterprise information systems EIS s include Ariba Clarify CRM eMatrix i2 JD Edwards OneWorld MetaSolv Applications Oracle Applications PeopleSoft Enterprise Portal Infranet Siebel Business Applications and SunGuard FRONT ARENA.

SAP software is highly customizable to fit a customer s needs and contains many tools for the integration and linking of third party systems and software. It also runs on multiple hardware platforms. SAP data typically resides in a central database that is shared by SAP components. A variety of databases may be used for the central database including Oracle Informix Online Adabas DB2 DB 400 and Microsoft SQL Server 6.

Remote function Modules RFMs allow access to SAP data from either within SAP or from other development platforms external to SAP that support the Remote Function Call RFC protocol. Other enterprise systems have similar interfaces. In general an RFM refers to any module configured to allow access to EIS data. Business application programming interfaces BAPIs are RFMs that are provided by SAP. Third parties also contribute RFMs that typically conform to the conventions employed by the BAPIs in data formats and error handling. One objective of the RFMs is to provide a higher level of integration between SAP and external applications and systems. The SAP Java Connector JCo is an API that provides Java applications access to RFM s.

The error handling convention set by the BAPIs and used by other RFMs is to throw an exception when syntax errors occur like missing misspelled or incorrect settings or data in the remote function call. However when a logical error occurs the convention is that no exception is thrown.

Because the RFCs return a business object when a logical error occurs and because no JCo exception is thrown the integration adapter that passed the RFC to access SAP will return the table or structure business object to the integration broker and on to the calling entity without any signal that a logical error has occurred. Logical error discovery and handling therefore is left to the calling entity the module adapter third party application client or user that originally made the call. Each BAPI and other RFM may use different types of business objects with different schemas and having different error codes. Because of these individually defined schemas and codes every calling entity must track both the error codes and the business object schemas of every RFC that the calling entity uses.

From the foregoing discussion it should be apparent that a need exists for an apparatus system and method for signaling logical errors in SAP. Beneficially such an apparatus system and method would also offer faster central signaling of logical errors with loose coupling flexibility.

The present invention has been developed in response to the present state of the art and in particular in response to the problems and needs in the art that have not yet been fully solved by currently available logical error handling methods. Accordingly the present invention has been developed to provide an apparatus system and method for the signaling of logical errors in an EIS remote function call that overcome many or all of the above discussed shortcomings in the art.

The apparatus to signal a logical error in an EIS remote function call is provided with a plurality of modules configured to functionally execute the necessary steps of receiving a table or structure business object BO extracting an error code value comparing the error code value to an error code from an error dictionary and signaling a logical error. These modules in the described embodiments include a communication module a code extraction module a comparison module an error report module a warning module a logical error exception module a detail extraction module an error dictionary definition module a user interface module an error parameter discovery module and an error dictionary validation module.

In one embodiment the communication module receives a business object having an error dictionary in response to a remote function call. In another embodiment the error dictionary has one or more logical error definitions each logical error definition having an error code an error code path and an error description path.

In one embodiment the code extraction module extracts an error code value from the business object based on an error code location identifier. In another embodiment the error code location identifier is in the error dictionary.

In one embodiment the comparison module compares the error code value to an associated error code in the error dictionary based on a comparison condition. In another embodiment the associated error code has one or more error code values.

In one embodiment the error report module signals a logical error in the remote function call in response to the error code value and the error code satisfying the comparison condition. In another embodiment the warning module signals the logical error by recording the logical error in an error log. In a further embodiment the logical error exception module signals the logical error by throwing an exception having the error code value in response to the logical error.

In one embodiment the detail extraction module extracts an error description from the business object. In another embodiment the detail extraction module extracts an error description from the business object based on an error description location identifier in the error dictionary.

In one embodiment the error dictionary definition module defines an error dictionary with one or more error parameters the error parameters associated with a logical error in a remote function call. In another embodiment the user interface module sets one or more error parameters in the error dictionary based on input from a user. In a further embodiment the error parameter discovery module discovers one or more error parameter definitions from a remote function call.

In one embodiment the error dictionary validation module validates the format of entries within the error dictionary. In another embodiment the error dictionary validation module validates the syntax of the error dictionary.

Reference throughout this specification to features advantages or similar language does not imply that all of the features and advantages that may be realized with the present invention should be or are in any single embodiment of the invention. Rather language referring to the features and advantages is understood to mean that a specific feature advantage or characteristic described in connection with an embodiment is included in at least one embodiment of the present invention. Thus discussion of the features and advantages and similar language throughout this specification may but do not necessarily refer to the same embodiment.

Furthermore the described features advantages and characteristics of the invention may be combined in any suitable manner in one or more embodiments. One skilled in the relevant art will recognize that the invention may be practiced without one or more of the specific features or advantages of a particular embodiment. In other instances additional features and advantages may be recognized in certain embodiments that may not be present in all embodiments of the invention.

These features and advantages of the present invention will become more fully apparent from the following description and appended claims or may be learned by the practice of the invention as set forth hereinafter.

Many of the functional units described in this specification have been labeled as modules in order to more particularly emphasize their implementation independence. For example a module may be implemented as a hardware circuit comprising custom VLSI circuits or gate arrays off the shelf semiconductors such as logic chips transistors or other discrete components. A module may also be implemented in programmable hardware devices such as field programmable gate arrays programmable array logic programmable logic devices or the like.

Modules may also be implemented in software for execution by various types of processors. An identified module of executable code may for instance comprise one or more physical or logical blocks of computer instructions which may for instance be organized as an object procedure or function. Nevertheless the executables of an identified module need not be physically located together but may comprise disparate instructions stored in different locations which when joined logically together comprise the module and achieve the stated purpose for the module.

Indeed a module of executable code may be a single instruction or many instructions and may even be distributed over several different code segments among different programs and across several memory devices. Similarly operational data may be identified and illustrated herein within modules and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set or may be distributed over different locations including over different storage devices and may exist at least partially merely as electronic signals on a system or network.

Reference throughout this specification to one embodiment an embodiment or similar language means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus appearances of the phrases in one embodiment in an embodiment and similar language throughout this specification may but do not necessarily all refer to the same embodiment.

Reference to a computer readable medium may take any form capable of causing execution of a program of machine readable instructions on a digital processing apparatus. A computer readable medium may be embodied by a compact disk digital video disk a magnetic tape a Bernoulli drive a magnetic disk a punch card flash memory integrated circuits or other digital processing apparatus memory device.

Furthermore the described features structures or characteristics of the invention may be combined in any suitable manner in one or more embodiments. In the following description numerous specific details are provided such as examples of programming software modules user selections network transactions database queries database structures hardware modules hardware circuits hardware chips etc. to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that the invention may be practiced without one or more of the specific details or with other methods components materials and so forth. In other instances well known structures materials or operations are not shown or described in detail to avoid obscuring aspects of the invention.

In one embodiment the integration broker is coupled to both the client and the integration adapter facilitating communication between them. The integration broker may also be coupled to other integration adapters.

The client is an entity in communication with the integration broker . The client may be an EIS an integration adapter a development environment a business application or another type of module. In one embodiment the client defines an error dictionary with one or more error parameters associated with a logical error in an EIS remote function module. In another embodiment the EIS remote function module is an SAP RFC call. The client may define the error dictionary using input from other sources.

One example of an error dictionary embedded in a business object is provided and described in more detail with reference to . In general an error dictionary is a data structure defining one or more logical errors that could occur in a predefined remote function call. The error dictionary may be stored in many formats including extensible markup language XML as an XML schema definition XSD or in another data format. The error dictionary may also be stored as application specific information ASI in a business object. A business object is an object which represents an item event or entity associated with a remote function call. A business object includes the attributes parameters and information associated with the item event or entity that the business object represents.

Storing the error dictionary as ASI in a business object provides the system with loose coupling flexibility. Passing the error dictionary between modules instead of storing the error dictionary in a data repository reduces the interdependencies between the modules. Passing the error dictionary also reduces the risk that changes in one module will create unwanted changes in another module and increases the ability to add replace or change individual modules.

In one embodiment the integration adapter provides access to the EIS . The integration adapter provides a common interface for other adapters applications or modules to make remote function calls to the EIS . In one embodiment the integration adapter is an SAP adapter and provides an interface for other adapters applications or modules to call BAPIs and other RFMs.

The EIS may comprise an EIS that supports third party access. In one embodiment the EIS tracks and manages data relevant to an enterprise including sales production finance accounting and human resources. The EIS could be SAP Ariba Clarify CRM eMatrix i2 JD Edwards OneWorld MetaSolv Applications Oracle Applications PeopleSoft Enterprise Portal Infranet Siebel Business Applications SunGuard FRONT ARENA or another EIS.

In one embodiment data storage is coupled to the integration adapter . The data storage may be a type of electronic data repository. The integration adapter may store or manipulate data in the data storage such as business object definitions remote function call responses or error dictionaries.

In one embodiment the user interface is coupled to the client . The user interface communicates with the user . In one embodiment the user interface receives error parameters from the user which are then included in an error dictionary by the client . The integration adapter may also define an error dictionary using input provided by the user through the user interface .

In one embodiment the logical error handler is coupled to the integration adapter . One example of the logical error handler is provided and described in more detail with regard to . In general the logical error handler discovers and signals logical errors in remote function calls passed on by the integration adapter . This may include receiving a business object having an error dictionary in response to a remote function call extracting an error code value from the business object based on an error code location identifier comparing the error code value to an associated error code in the error dictionary based on a comparison condition and reporting a logical error in the remote function call in response to the error code value and the error code satisfying the comparison condition. In one embodiment the logical error handler is an SAP logical error signaling tool that may be installed on an SAP adapter.

In one embodiment the error dictionary is embedded in the business object and passed with business object . The error dictionary is a data structure defining one or more logical errors that could occur in response to the remote function call. In one embodiment the error dictionary has an error code location indicator a first error code a second error code and an error description location indicator . These parameters make up a logical error definition. The error dictionary may have multiple logical error definitions and each logical error definition may have one or more error codes .

In one embodiment the error code location identifier is an XPath expression identifying the location of an error code value in the business object . The error code location identifier Child Child indicates that the error code value is an attribute located at Child in Child .

In one embodiment the first error code and the second error code are two possible error code values. Each of the error codes the first error code and the second error code represent a logical error that can occur as a result of the remote function call. The error codes may represent the same logical error or different logical errors. A logical error definition may have one or more error codes .

In one embodiment the error description location identifier is an XPath expression identifying the location of a logical error description associated with the error code identified by the error code location identifier . In one embodiment the error description identified by the error description location identifier is a human readable string.

In one embodiment the return error data is embedded in the business object . If the remote function call encountered no logical errors the return error data does not hold an error code value signaling a logical error. If the remote function call resulted in a logical error the return error data will hold error information. The return data structure has three children . The first child is identified by the error code location identifier and holds an error code value of E as defined by the first error code . The second child holds a null or empty value. Because the remote function call resulted in a logical error much of the data in the return data structure may be empty or invalid. The third child is the error description identified by the error description location identifier and the third parameter identifies the error as a Customer Error. There may be more parameters in the return data structure which are not relevant to the logical error and may or may not hold valid data.

In one embodiment the communication module is the interface between the logical error handler and the EIS. The communication module receives a return business object from the EIS in response to an EIS remote function call. In one embodiment the EIS remote function call is an SAP RFC. The return business object has an error dictionary allowing the logical error handler to identify any logical errors that occurred as a result of the remote function call.

In one embodiment the code extraction module extracts an error code value from the return business object based on an error code location identifier from the error dictionary. The error dictionary is discussed in more detail with reference to . In one embodiment the error dictionary has an error code location identifier. The error code location identifier may be a pointer path index or XPath expression that denotes the location of an error code value in a return business object for the specific function that the business object represents. The code extraction module retrieves the error code value from a return structure or the return business object by evaluating and following the error code location identifier.

In one embodiment the comparison module compares the error code value to an associated error code in the error dictionary based on a comparison condition. The comparison condition may be one of a variety of mathematical conditions include equals less than greater than or a combination of these. The comparison condition may be hard coded into the logic of the comparison module . Alternatively the comparison condition may be user configurable. The associated error code may be part of the same logical error definition as the error code location identifier from the error dictionary. In one embodiment the associated error code in the error dictionary is one or more possible error code values. Each possible error code value may be associated with a logical error that can occur in an EIS remote function call. The possible error codes may represent the same logical errors or different logical errors. If a logical error did occur an error code value satisfying the comparison condition will be in the field denoted by the error code location identifier. The comparison module compares the error code value that was retrieved by the code extraction module to the list of possible error code values in the error dictionary based on the comparison condition. If the retrieved error code value matches any of the possible error code values based on the comparison condition then a logical error has occurred. If another value was retrieved from the business object that does not match one of the possible error code values from the error dictionary based on the comparison condition then no logical error has occurred.

In one embodiment if the comparison module found an error code that matches the error code value extracted from the business object based on the comparison condition the error report module signals a logical error for the remote function call. The error signal can take different forms. In one embodiment the error report module uses the warning module to record the logical error in an error log that is accessible to the calling entity. The error log may be a file a business object or another data structure that the calling entity can receive or access for information about the logical error. In another embodiment the error report module uses the logical error exception module to throw an exception having the error code value and or a description of the logical error that occurred. The error report module may use the warning module for certain errors and the logical error exception module for other errors. Other signals may also be employed. In one embodiment the error report module uses the logical error exception module for more serious errors and the warning module for less serious errors as defined by either the calling entity or the remote function call. Less serious errors may be identifiable by an error code value above or below a certain threshold value. In one embodiment the error dictionary includes a severity flag that the client may set to false in order receive warnings rather than having exceptions thrown.

In one embodiment the detail extraction module extracts an error description from the business object based on an error description location identifier in the error dictionary. In one embodiment the error description location identifier is similar to the error description identifier of . The error description location is a pointer path or XPath expression to a parameter in the business object with a description of the error. In one embodiment the error description is a human readable string describing the logical error. The error description may also be a more detailed error code number an index in an error description table or other error description data.

In one embodiment the error dictionary definition module defines an error dictionary with one or more error parameters associated with a logical error in a remote function call. The one or more error parameters may be the error code location identifier error code and error description location identifier described above. In one embodiment the error dictionary definition module defines the error dictionary for another module application or adapter like the client of . In another embodiment the error dictionary definition module adds a generated error dictionary to a business object representing a remote function call. The error dictionary and the business object may be defined at some time before the time when the error dictionary and the business object are used. The error dictionary and the business object may be stored in persistent storage until needed by the calling entity which may be the client of .

In one embodiment the user interface module sets one or more error parameters in the error dictionary based on input from a user. The user interface module may be in communication with a user through an integration broker similar to the integration broker of . The one or more error parameters in the error dictionary that the user interface module sets may be the error code location identifier the error code and the error description location identifier described above. The error dictionary definition module may use input from the user interface to define an error dictionary.

In one embodiment the error parameter discovery module discovers one or more error parameter definitions from a remote function call. The error parameter discovery module may discover the one or more error parameter definitions by calling a remote function call that will return the error parameter definitions. The error parameter discovery module may also retrieve the error parameter definitions from a file or business object provided by the remote function call. In another embodiment the error parameter discovery module may use a series of one or more remote function calls having known logical errors and extract the error parameter definitions from the return structures returned by the remote function calls. In one embodiment the remote function call is an SAP BAPI or other RFM.

In one embodiment the error dictionary validation module validates the format and syntax of an error dictionary. The error dictionary validation module may check the error dictionary for all necessary error parameters for example that both an error code location identifier and an error code exist in the error dictionary. The error dictionary validation module may also check for proper data structure formatting in the error dictionary according to the data structure used.

The schematic flow chart diagrams that follow are generally set forth as logical flow chart diagrams. As such the depicted order and labeled steps are indicative of one embodiment of the presented method. Other steps and methods may be conceived that are equivalent in function logic or effect to one or more steps or portions thereof of the illustrated method. Additionally the format and symbols employed are provided to explain the logical steps of the method and are understood not to limit the scope of the method. Although various arrow types and line types may be employed in the flow chart diagrams they are understood not to limit the scope of the corresponding method. Indeed some arrows or other connectors may be used to indicate only the logical flow of the method. For instance an arrow may indicate a waiting or monitoring period of unspecified duration between enumerated steps of the depicted method. Additionally the order in which a particular method occurs may or may not strictly adhere to the order of the corresponding steps shown.

The integration adapter executes the remote function call associated with the error dictionary . The integration adapter may execute the remote function call at some time after the error dictionary module defines the error dictionary .

In response to the remote function call the communication module receives a return business object that includes the error dictionary defined by the error dictionary module . The code extraction module extracts an error code value from the business object using the error code location identifier from the error dictionary .

The comparison module compares the error code value to one or more associated error codes from the error dictionary based on a comparison condition. If the values match a logical error occurred and the error report module signals the logical error to the calling entity which may be the client or another module in communication with the integration broker . If no value matching the error code value is found in the error dictionary the integration adapter returns the business object to the calling entity.

If the SAP RFM throws an exception the integration adapter will also throw a similar exception to alert the calling entity. If the SAP RFM does not throw an exception the communication module receives a return business object with the error dictionary .

The code extraction module extracts an error code location identifier from the error dictionary . The code extraction module extracts an error code value from the return business object using the error code location identifier that the error code extraction module previously extracted from the error dictionary.

The comparison module compares the error code value to one or more error codes listed in the error dictionary based on a comparison condition. If the values match then the detail extraction module extracts an error description location identifier from the error dictionary . The detail extraction module extracts an error description from the return business object . The logical error exception module throws an exception with the error description to signal the logical error to the calling entity. If the error code value and the error codes from the error dictionary do not match then the integration adapter continues to process the return business object .

Advantageously certain embodiments of the apparatus system and method presented above may be implemented to signal a logical error in an EIS remote function call. Beneficially such an apparatus system and method would also offer faster logical error signaling loose error coupling and simpler logical error discovery by handling logical errors centrally in an integration adapter.

The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is therefore indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

