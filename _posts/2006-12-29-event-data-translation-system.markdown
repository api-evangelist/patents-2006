---

title: Event data translation system
abstract: An event translator system for receiving input information, parsing event data on the input information to produce a result event data set and generating an event list based on an analysis of the event the result data set, performing an event listing and displaying event list to a user interface module. The event translation system translating event data also include receiving user feedback on the event listing and using the user feedback to improve subsequent operations of at least one harvesting algorithm. Translating event data also includes at least two harvesting algorithms for performing the input information to generate a plurality of result event data sets and creating an event listing for display to a user interface module based on an analysis of the plurality of result event data sets.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07577963&OS=07577963&RS=07577963
owner: Public Display, Inc.
number: 07577963
owner_city: Providence
owner_country: US
publication_date: 20061229
---
This application claims priority to U.S. Provisional App. No. 60 755 437 filed Dec. 30 2005 and entitled Community Calendaring which is incorporated herein by reference.

This application is related to the field of information translation and more particularly to a system for translating and organizing calendar and other event data among various data formats.

Many computer users rely on personal information management PIM software to keep track of contact and event information and learn about event information through digitally publicized calendars and lists of events which may be for example posted on websites distributed in emails or exist as file attachments. Known systems for extraction and management of calendar data and other information include U.S. Pat. No. 6 732 102 to Khandekar U.S. Pat. No. 6 675 356 to Alder et al. U.S. Pat. No. 6 516 308 to Cohen and U.S. Pat. No. 6 388 772 to Williams all of which are incorporated herein by reference. However digital calendars and event lists may have a variety of visual formats that are perfectly understandable to human readers but which may be generally incomprehensible to PIM software. As a result viewers and recipients of event information from a digital calendar or list may be forced to manually enter information from multiple events into their PIM software. Similarly if a user desires to move such event data to another digital calendar or list for example on a different website the user may also have to manually enter the event data.

Accordingly it would be desirable to provide for a system that facilitates the translation of event data from digital calendars having multiple display formats publicized for example in webpages emails and stand alone files to PIM software web pages or other data format type.

According to the system described herein an event data translation system includes an interface that receives input information. At least one harvesting algorithm parses the event data from the input information to generate a result event data set. An analyzer analyzes the result event data set output from the at least one harvester and selects at least a portion of the result event data set as a selected result event data set. A processing component then processes the selected result event data set to generate an event listing. The system may further include at least two harvesting algorithms that each parses event data from the input information to each generate a result event data set wherein the analyzer analyzes the plurality of result event data sets and selects at least a portion of the plurality of result event data sets as the selected result event data set.

According further to the system described herein an event data translation system includes an interface that receives input information at least one harvester that parses event data from the input information to generate at least one result event data set an analyzer that analyzes the result event data set output from the at least one harvester and selects at least a portion of the result event data set as a selected result event data set and a processing component that processes the selected result event data set to generate an event listing. The event translation system may also include a controller coupled to at least one of the at least one harvesters the analyzer and the processing component. The event translation system may also include a pre selector that selects the at least one harvester as a subset from a larger set of harvesters. The event translation system may also include a statistical analyzer that analyzes use of the event listing. At least one harvester may include a harvester of a type that is at least one of a table grammar harvester a tree grammar inference harvester and a two tiered probabilistic harvester. The interface may display the event listing. The interface may be a user interface. The input information may be at least one of an e mail a webpage a text file and a pdf file. The event translation system may also include at least one of an HTML receiver and an HTML converter where the input information is either received in an HTML format by the HTML receiver or converted into an HMTL format by the HTML converter. The event translation system may also include a monitor that monitors changes in a source of the input information. The event translation system may also include at least two harvesters that each parses event data from the input information to each generate a result event data set as a plurality of result event data sets where the analyzer analyzes the plurality of result event data sets and selects at least a portion of the plurality of result event data sets as the selected result event data set. The at least two harvesters may include a harvester of a first type having a first setting and a harvester of the first type having a second setting the first setting being different from the second setting.

According further to the system described herein translating event data includes receiving input information performing at least one harvesting algorithm on the input information to generate a result event data set selecting at least a portion of the result event data set based on an analysis of the result event data set as a selected result event data set and generating an event listing from the selected result event data set. Translating event data may also include pre selecting the at least one harvester algorithm as a subset from a larger set of harvesting algorithms. Translating event data may also include analyzing use of the event listing. The at least one harvesting algorithm may include a harvesting algorithm of a type that is at least one of a table grammar harvesting algorithm a tree grammar inference harvesting algorithm and a two tiered probabilistic harvesting algorithm. Translating event data may also include displaying the event listing. Translating event data may also include receiving user feedback on the event listing and using the user feedback to improve the at least one harvesting algorithm. The input information may be at least one of an e mail a webpage a text file and a pdf file. Translating event data may also include at least one of receiving the input information in an HTML format and converting the input information into an HTML format. Translating event data may also include monitoring changes in a source of the input information. Translating event data may also include performing at least two harvesting algorithms on the input information to generate a plurality of result event data sets and selecting at least a portion of the plurality of result event data sets based on an analysis of the plurality of result event data sets as the selected result event data set.

According further to the system described herein extracting event information includes receiving source information processing the source information to generate processed source information harvesting the processed source information to generate result event information and outputting the result event information. Processing the source information may include breaking the source information into data chunks and harvesting the processed source information may include includes tokenizing the data chunks parsing the tokenized data chunks into a data structure and extracting the result event information from the tokenized and parsed data chunks. Processing the source information may include creating a tree structure and harvesting the processed source information may include includes traversing the tree structure to identify event information portions marking locations of identified event information portions with tokens on the tree structure identifying a tree grammar using at least some of the tokens as selected tokens and associating text with the selected tokens according to the identified tree grammar to generate the result event information. Processing the source information may include classifying text from the source information according to pre selected features to generate classified text assigning weights to the classified text based on use of a training data set to identify event information portions and harvesting the processed source information may includes associating identified event information portions according to pre selected association features to generate the result event information.

Referring now to the figures of the drawings the figures comprise a part of this specification and illustrate exemplary embodiments of the described system. It is to be understood that in some instances various aspects of the system may be shown schematically or may be shown exaggerated or altered to facilitate an understanding of the system.

Harvesting may be relatively computationally complex. Humans have a number of normative ways to express sets of events including event lists date planner matrices month views and week views among others all of which may need to be recognized and interpreted by the event translator system. In addition the way in which those formats are codified into documents may make visual sense to a reader but cause interpretation problems for a software program. For example two adjacent tables in a webpage may visually provide nearly identical information as that of one larger table but to a software heuristic attempting to extract a set of events those two representations may need to be handled differently. In addition each document format may also present its own unique set of challenges. For example webpages encoded using hypertext markup language HTML may contain malformed HTML code that does not conform to the standards set by the World Wide Web Consortium and which may require different translation techniques.

The event translator system may include a set of features that enable users to compare the harvested set of events to the original source calendar then edit manage and monitor that set. The event translator system s user interface may be designed to present those features in an intuitive and elegant fashion. The event translator system may also be designed to operate correctly through virtually all modem web browsers. In addition the event translator system may be able to modify and adjust its internal representation of the event data to conform to the different event representations used by different PIM applications and or web software. These differences include variations in date time and time zone representations discrepancies in whether or not all day events or events with no end time are acceptable and diversity in the names and intent of data fields like description summary and location.

In the course of performing the tasks described above the event translator system may also gather usage data and may generate statistics from that data to help the harvesting algorithm improve its performance and to provide a concrete overview of user behavior. For example the event translator system may generate statistics on the popularity of various harvested pages by date or time and by geographic region. The system may also track which harvested documents are typically harvested by the same user and which PIM formats APIs and or other data format are the most popular amongst certain types of users. The system may track which events users have edited and use that information to automatically improve harvesting performance.

The harvester subsystem may include the pre processor pre selector a series of harvesters identified as separate harvester components as detailed elsewhere herein the ecologist and the semantic post processor . The harvester subsystem may also include a controller that manages the harvesting process by controlling the other components of the harvester subsystem . As further described herein although the harvester subsystem may operate with only one harvester in some cases in other cases the use of multiple harvesters using different approaches may provide a more accurate and robust result than a single harvester attempting a monolithic approach. Each raw HTML page or other data format as described herein including excel files pdf files word processor files and or text files among others may be evaluated by several harvesters that produce a series of result data sets . Each harvester produces a result data set that may include a result event list with event data and may include HTML data with token locations. As further described elsewhere herein one of the result data sets may be selected by the ecologist as likely to be the most accurate and which may then be further processed by the semantic post processor to yield a processed result data set that includes a selected result events list and ancillary information.

The ancillary information that accompanies the processed result data set in may include a list of exceptions encountered by the Harvester Subsystem. These exceptions indicate that the result data set maybe considered to be erroneous or anomalous in some way. For example an exception may indicate the erroneous condition that the source document is unreachable because the Web server hosting that document is not responding to requests for that document. As another example an exception may indicate the anomalous condition that the source document did not contain information sufficient to determine the year of the events described therein. The event translator application may act upon any exceptions that accompany the result data set in . For example the event translator application may discard any results that are accompanied by an exception that indicates a severe failure or the event translator application may initiate additional user interaction in response to an exception that indicates an anomalous condition.

The processed result data set may be returned to the user through the user interface subsystem and or analyzed by the data subsystem see . The user interface subsystem and or statistical analyzer subsystem may provide feedback data that may be transmitted to the ecologist to provide further information that may facilitate improved selection and processing of harvester result event data in subsequent operations.

The harvesting process may begin after the user has identified a source document or series of source documents to be harvested through the user interface of the user interface subsystem . As further discussed elsewhere herein the source document may be transmitted as or converted into raw HTML data. As an initial harvesting step the pre selector may perform an analysis to determine a suitable set of harvesters for extracting the event data from a web page email input file or other calendar style data type. A set of harvesters may include one or more harvesters selected as a subset of all available harvesters for example a harvester subset comprising the harvester and or a harvester subset comprising the harvesters and and or a harvester subset comprising multiple variations of the harvester each of the illustrated harvesters being further described elsewhere herein . As further described elsewhere herein the pre selector may analyze the raw HTML page and determine which harvesters to use and or which sets of parameters to use with each harvester. Parameters may include the assumed table depth of an event where zero may mean that the event is not in a table how many line breaks constitute a new event which data formats to look for the visual format of the presented calendar document length quantity and format of dates and times natural language of document text and or original document data type if converted among other parameters.

In an embodiment the pre selector may include a pre processor component the provides pre processing functionality as described herein. Alternatively the pre processor may be a stand alone component. The pre processor may perform a series of functions on the source URI. The pre processor may download the source create a copy of the HTML for display in the application and extract a set of features from the source according to an extensible list of feature functions. Such features may include the top level domain of the URI the dimensions of the tables the number of frames on the page the depth of the DOM etc. These features are returned and passed forward on and or within the pre selector and on to the harvesters. In an embodiment the pre processor may include the HTML converter and or the HTML retriever see .

In another embodiment as part of an initial test the pre selector may determine which specific program produced a particular calendar event list and or a similar unique set of characteristics and select one or more harvesters that are specifically directed to translation of event data from that particular calendar program event list program and or other program. If the pre selector does identify the specific program or unique set of characteristics that produced certain calendar and or event information then it may be that only one custom harvester is used. To determine a specific program the pre selector may search metadata headers in a web page for a program name text on the page that may identify the program and or comments on the web page among other text search techniques. The pre selector may also search the URL address of the domain where the page is from which may yield company information that may indicate the particular program used to produce the calendar information.

Alternatively other tests may be performed by the pre selector in an attempt to characterize the format of the calendar data and determine an appropriate set of harvesters based on the characterization of the data. For example the pre selector may determine structural information of the data such as number of tables numbers of cells in tables and numbers of columns and rows among other data structure information. In this way the pre selector may determine the type of calendar data such as for example that of a monthly calendar or a daily calendar. Further in another possible test the pre selector may determine the number of or type of dates that are listed in the data and use this information to select an appropriate harvester. For example if a multiple year spanning date is recognized such as 2006 2007 the pre selector may determine that the calendar information is for a sport or academic calendar and select an appropriately custom harvester for sport or academic calendars. A sport or academic calendar custom harvester may be configured to recognize that for example the appearance of the month January or February in relation to an event would indicate that the event always occurs after an event identified as occurring in November or December .

After the pre selector has selected an appropriate set of harvesters control passes to the subset of harvesters selected from the series of harvesters . Harvesters may include algorithms that identify events from the raw HTML data and output the identified events in a result event list. As further described elsewhere herein a harvester may analyze the raw byte stream of a source document such as a web page or digital document for event information. Then the harvester parses the source document to convert the data of the source document from the concrete syntax of the raw HTML or other digital representation to a clearly defined abstract syntax. The parsing process may discard non important data for example nonevent data and identify the events in the source document as harvests or harvested data .

Subsequently the harvester may then output a list of the harvested data to the ecologist and the semantic post processor as further described elsewhere herein. As discussed above the event translator system architecture accommodates application of one or multiple harvesters and may include harvesters that are both general designed to cover broad representations of event information and specialized designed to cover particular or idiosyncratic representations of event information . Various embodiments of harvesters are described below.

In an embodiment one type of harvester may be known as the Table Grammar harvester TG harvester . The TG harvester uses a deductive method which incorporates prior knowledge about the grammar of an event list into the parser. The TG harvester parses the source document into a stream of tokens where each region of the source document is classified as representing a type of data e.g. Date Text Break etc. The parsing process includes specialized interpretation of tables such that text in a table cell is associated with the date indicated by that cell. The parser iterates through the token stream accumulating each event sequentially.

Control then passes to a step in which each tokenized and parsed data chunk structure is analyzed for the type of data that it may contain. The analysis may be a heuristic analysis in which each chunk tree is identified by data type such as whether the data is column data row data matrix data or month data as will now be further described. Note that other data types besides those identified below may identified as part of the heuristic analysis.

Column data is characterized by the appearance of an event in a column of a table in which there may be one date per column. For example a date may appear in a column header of the table and associated with multiple events.

Row data is characterized by the appearance of one event per row of a table. This is the typical format for identification of events as a list and consequently may be used as a default analysis type. For example non table data chunks may be treated as a row data type.

Matrix data is characterized by a table where column headers and row headers contribute to the interpretation of an event described in a table cell. For example row headers contain actual text of an event column headers contain year of the event and interior cells contain day in year of the event described in the column header. The matrix data type may be identified if dates appear in interior cells of a table and date fragments appears in the table headers.

Month data is characterized by a typical calendar view in which the overall shape of the table determines interpretation of the date that is day numbers appearing in the text of table cells are associated with the month and year identified elsewhere. The month data type may be identified by a table having five rows and seven columns 35 boxes .

After the step processing proceeds to a step in which event information is extracted from the tokenized and parsed data chunks. The algorithm used to extract the data may involve an iteration through the tree chunk structure and depend on the table type identified from the heuristic analysis of the step column data row data matrix data month data etc. After each iteration of the step a test step assess whether there are any further tokenized and parsed data chunks from which data is to be extracted. The result of the iterative processing of step is a compilation of event list information. If there are no further tokenized and parsed data chunks for extraction then after test step control proceeds to a step in which the event list information is processed cleaned up according to desired post processing techniques and according to established rules to generate a result event set. For example events listed in the source document an event recurring on multiple days may be listed in the result event set as separate events. Events identified in the source document as occurring at times that span multiple days for example 10 PM 1 AM may be correctly identified as an event occurring over multiple days. Further for example if an event in the result event set is identified as occurring at a time for which AM or PM is not specified assumption rules may apply depending on the times identified such as a listing of 1 3 may be assumed as a PM entry. After the step control proceeds to a step at which the result event set may be output for evaluation by the ecologist as described elsewhere herein. After the step processing is complete. The steps described above may be implemented via executable code stored on a computer readable medium and or as a system with at least one processor to perform the above noted steps.

Another type of harvester may be known as the Tree Grammar Inference harvester TGI harvester . The TGI harvester uses an inductive method in which an algorithm infers the tree grammar used in a particular source document based on prior knowledge about how an event list usually appears. The TGI harvester may operate on the Document Object Model DOM tree created by an industry standard HTML parser. The TGI harvester accomplishes the harvesting task by repeatedly traversing the DOM tree adding annotations changing information and or manipulating tree structure as further described below.

After the step control passes to a step wherein the entire DOM tree is again traversed. In this traversal the TGI harvester examines the attributes each of the tokens created in the step and groups them into clusters based on similarity of attributes. Control then passes to a step at which the TGI harvester determines or otherwise infers that a particular group or groups of tokens constitute the date and or time information for a set of events. This inference is based on the properties of the group and on the attributes computed in step of the tokens that comprise each group. Two main assumptions that may guide the inference that a particular group of temporal tokens are definitive for a set of events are 

1 the principle of regularity that in the expression of a particular set of events the definitive dates and times for all events in the set will have some characteristics in common. These common characteristics may be typographic e.g. color font family font size contextual e.g. proximate words or symbols or structural e.g. column or row position table depth .

2 the principle of emphasis that in the expression of a particular set of events the definitive dates and times will be visually emphasized relative to non definitive dates and times. For example a date with a larger font size or heavier font weight is more likely to be definitive for an event than a less emphasized date or time.

After the step control then passes to a step at which based on the location of the selected tokens in the tree and on the intervening tree nodes the TGI harvester determines or otherwise infers the tree grammar used in the source document by identifying the units of repetition among the selected temporal tokens. The maximum size of the repeating units may be determined from the amount of text between subsequent selected temporal tokens. The beginning and ending boundaries for the repeating units may be inferred from 

1 the assumption that the principle of regularity also applies to the textual descriptions of events and

2 the expectation that event boundaries are likely to correspond to certain document features e.g. the beginning or end of a new row in a table the beginning of text emphasized as a title or summary. 

After the step control then passes to a step at which the TGI harvester associates text with the selected tokens according to the determined tree grammar. After the step control then passes to a step at which the TGI harvester extracts events from the selected tokens and associated text. After the step control then passes to a step at which the TGI harvester performs post processing on extracted events to generate a result event set. After the step control then passes to a step at which the TGI harvester outputs the result event set. After the step processing is complete. The steps described above may be implemented via executable code stored on a computer readable medium and or as a system with at least one processor to perform the above noted steps.

Another type of harvester may be known as the Two Tiered Probabilistic harvester TTP harvester . The TTP harvester may operate based on two tiers of processing a first tier that classifies text information according to pre selected features as potentially being desired portions of event information and applies a probabilistic weighting model to the classified text information and a second tier that associates identified event information portions with one another to generate result event list information that may include for example a start date for an event an end date for the event and a description of the event as further described herein.

After the step control passes to a step in which the probability that the classified text is desired event information is determined using weights assigned to the classified text based on the use of a generated training data set . The training data set may be generated prior to or as part of the processing of the TTP harvesting algorithm described herein. The training data set contains sample event information having features as detailed above that are labeled or otherwise identified by a user as indicating event information. Accordingly use of the training data set enables the TTP harvester to assign weights to the classified text based on recognizable features. It should be noted that different training data sets may be generated and or selected for use according to an expected data layout. The assigning of weights in the step may be based on the use of a hidden markov model such as a Maximum Entropy Markov Model that is a probabilistic tool that may be used for information extraction and text segmentation. See for example A. McCallum D. Freitag F. Pereira Maximum Entropy Markov Models for Information Extraction and Segmentation 17San Francisco Calif. 2000 pp. 591 598 which is incorporated herein by reference. A result of the step is a probabilistic identification of portions of event information from the classified text.

As part of the second tier processing section after the step processing proceeds to a step at which portions of event information identified according to the above noted steps are associated with one another. The association of event information portions may be based on the application of another set of pre selected features. For example association features may include associating together all event information portions that appear on a single line of text. Within the single line a first occurrence of event information portion classified as a date may be identified as a starting date a second occurrence of a date event information portion may be identified as an ending portion and a text event information portion may be identified as a description of an event. Other association features may be used. The weight applied to each association feature may be determined based on the use of a generated training data set . Training data set may be generated prior to or as part of the processing of the TTP harvesting algorithm described herein. A result of the step is an identification of one or more event listings in a result event set. After the step control passes to a step at which the result event set is output. After the step processing is complete. The steps described above may be implemented via executable code stored on a computer readable medium and or as a system with at least one processor to perform the above noted steps.

In multiple embodiments various combinations of the above described harvesters may be used in the system described herein. Additionally various custom harvesters may be used including different configurations of the above described harvesters that may be made according to manipulation and alteration of parameters and settings of the harvesters. For example one type of custom harvester may use the TG harvester but force it to interpret the calendar as a column based calendar with a specific year. Another type of custom harvester may be based on specific production rules for a parsing analysis of a generally known data layout or format. A custom harvester based on production rules would essentially assume that the calendar expressed events in a context free grammar and could therefore be parsed as such. It would use traditional context free grammar parsing techniques such as constructing a token stream by recognizing tokens through regular expressions then constructing an abstract syntax tree through production rules then transforming that tree through various syntax and semantic analysis heuristics. For example if it is known that a particular URL contains event information in a 35 box month style calendar display with a single HTML table for the entire month and a single HTML table cell for each day then a production rule harvester that operates based on production rules particular to that style may be used.

Additionally other harvesters may used with the system described herein that incorporate other known parsing and text recognition techniques.

Once the subset of harvesters has each produced a result event list and a representation of token locations for the harvested data the result events list and token location information from each of the contributing harvesters is transmitted to the ecologist . The ecologist receives the information from each of the harvesters and selects at least one of the result event lists received from the harvesters and or generates a selected result event list from the multiple result event lists received from the harvesters termed for example the EcoHarvest . The ecologist may generally use a heuristic rule based approach to selection. For example if a specialized harvester or a particular customized harvester has been identified or generated for a particular source document then the ecologist may simply select the result event list from a custom harvester. Otherwise the ecologist may use a parameter based selection algorithm as further described herein. Alternatively the ecologist may use a probabilistic selection approach of one or more result event lists and or selection of specific events from multiple result event lists as further described herein.

In an embodiment the ecologist may build a result event list based on the most commonly recognized events from among result event lists of the contributing harvesters. In order for the ecologist to determine whether a result event list from a harvester contains a given event the ecologist may determine equality of events from different result event lists. Event equality may be determined by parameterized equality comparison assessments.

The ecologist may take a hash of result event lists from the harvesters . Each result event list may be indexed by the use of an ID of the harvester that created the result event list. For example events in a result event list may include fields for the starting datetime of the event an ending datetime of the the event a description of the event a unique identified for the event uid and a unique identifier for the equality assessment equid . The uid may be used for bookkeeping within the algorithm and the database as a way to differentiate between different events. This is desirable because the data within two different events may be identical for example if an event was listed on a calendar twice . The equid refers to the equivalence class that contains this event as further described elsewhere herein.

Entire fields and or portions of fields may be compared. For example to compare the starting date information of an event only months may be compared within the date field. Alternatively entire dates may be compared that may include any desired level of specification including month day year hour minute and or second.

Thresholds may be used to assess matches between comparison fields that require string comparisons. The threshold may be a maximum threshold. For example a comparison of description fields may be performed according to a particular match threshold for example an equality score of 3 . Matching of the fields may be performed according to the match threshold and based on known matching algorithms including string edit distance word level distance temporal distance of start end dates and times and or other algorithms.

In a given ecologist operation parameters may be set so as to be sensitive enough to maximize differences between events in a single harvester result event list while minimizing differences between events across result event lists of multiple harvesters. For example a harvester may look for certain text characters that commonly delimit fields of data e.g. tabs commas hyphens etc . Such a harvester may accept as a parameter a list of suitable delimiter characters. It may be desirable to select the delimiter characters according to the nature of the calendar to be harvested.

It may be preferable for the equality test to include as few features as possible to facilitate fast operation. After determining parameters events may be broken into equivalence classes that are represented by the most average event within that class. An equivalence class is a set of items for which each item is equal to each other item in that class according to a pre defined definition of equal. This equality test may be called an equivalence relation. A set of items may be partitioned into equivalence classes with a given equivalence relation. Multiple harvesters may return events that differ only slightly such that for purposes of the system described herein the events may be considered equal. In this case events may be grouped into equivalence classes where the equivalence relation is a determination of similarity rather than strict equality. Representative events from the largest equivalence classes may be used in the selected result event list.

It should be noted that before computing event equality a junk event algorithm may be performed that causes junk events to be ignored. If a result event list from a harvester contains a high enough percentage of junk events the result event list of that harvester may be ignored. For example the junk event algorithm may search the text of the event for nonsense words long strings of non word characters excessive white space and other meaningless text. If the algorithm finds enough of this junk text it may mark the event as junk.

In another embodiment the ecologist may select an appropriate harvester generated result events list based on a simple conditional probability that is the ecologist may select a preferred or best event set s from among all event sets S returned by harvesters by means of a Maximum Likelihood Estimate MLE to generate inferences about parameters of the underlying probability distribution from the given data set argmax where C i is the hypothesis that event set i is the correct event set and F i is a set of features extracted from the event set i and H i is all ancillary information provided by the harvester that produced event set i and where the model of conditional probability is estimated from prior observations of .

In another embodiment the ecologist may select a preferred or best parsed data p harvested data from a harvester out of the total subset of parsed data P from the subset of harvesters based on a scoring algorithm or other selection technique. In an embodiment a scoring algorithm may be as follows. score score where score and 

After the ecologist has selected an appropriate result events list from the harvested data based on the scoring algorithm or other selection method the selected harvested data termed for example the EcoHarvest and ancillary information is transmitted to the semantic post processor which traverses the parse tree of the selected result data set and creates events objects event objects in a memory such as database . The event objects may correspond to each of the specific events in the harvested data and may include the following event fields summary for example the first 80 characters of the description location venue additional information such as price notes details for example. The semantic post processor may output the processed result event data set .

In an embodiment the semantic post processor may operate based on the use of Conditional Random Fields CRFs . CRFs are a probabilistic framework for labeling and parsing structured data such as sequences trees graphs and or other data structures. See for example J. Lafferty A. McCallum F. Pereira Conditional random fields Probabilistic models for segmenting and labeling sequence data 18San Francisco Calif. 2001 pp. 282 289 which is incorporated herein by reference . It is noted that in other embodiments the semantic post processor may use other probabilistic parsing models. For example the semantic post processor may use hidden markov models as further described elsewhere herein.

The harvester subsystem may further include a controller that controls and or manages the harvesting process termed for example the HarvestManager . The controller may control the following tasks receiving and processing the downloaded source file information the pre selection process the harvesting algorithms the ecologist selection process and the semantic post processing as further discussed elsewhere herein. The controller may monitor the progress of data from a particular harvester using ID information of the harvester as further described elsewhere herein. The ID information may also be used to help the controller distinguish between the result event data from each of the harvesters and the result event data that is finally selected by the ecologist . The controller may include an application programming interface API that allows for external input and control of the harvesting process. The controller may call harvesting process functions described herein and pass the returned values of those functions on to subsequent functions. As the controller does this it may keep track of the progress of the harvesting process in a record which may be accessed through the API. In another embodiment the controller may be a stand alone component outside of the harvester subsystem .

After the harvester subsystem has selected a result events list the result events list may be transmitted to the user interface. The user interface may enable users to edit the event objects in a result events list. The editing may include correcting any incorrectly harvested event objects changing event objects and adding event objects. The user interface may also enable the user to specify software systems to which the event objects may be exported such as on line calendars and PIM systems . In addition the user interface may allow for the batch editing of certain event attributes such as time zone location or event notes. The user interface also provides a system in which the user may specify that the harvested data be monitored for changes additions or deletions on the source document called the live harvest module .

The live harvest module may periodically poll a webpage to see if the webpage has been changed. If so the harvest process described herein is applied again to the webpage in order to generate a new set of events. The results of that harvest process are then compared with the results of previous harvests from that webpage based on metrics designed to gauge human acceptability. The comparison algorithm may be a greedy pairwise matching algorithm the algorithm finds the most closely matching pair of events between the two sets then iteratively finds the next most closely matching pair of events until the most closely matching pair is deemed too dissimilar. In comparing each event with each other event the algorithm may weigh certain differences like a change in the year more heavily than others like the addition of a few words to the description or a change in duration. The results of the comparison may then be summarized for the user in an email and presented to the user for verification. The user may then have the option of accepting the changes suggested by the comparison algorithm adding modifications or rejecting the changes through the user interface .

In another embodiment the processed result event data set may be transmitted directly and or automatically to the destination PIM software web page or other data format destination without being transmitted to the user interface for user review. In such an embodiment events transmitted automatically may be filtered by certain event attributes such as date or keyword.

The processed result event data set from the harvester subsystem and or information from the user interface subsystem may be transmitted to the data subsystem . The statistical analyzer of the data subsystem may be used for multiple purposes including to help retrain the ecologist and to provide data and reports on aggregate user behavior. In order to retrain the ecologist the statistical analyzer may look at direct feedback on the correctness of the set of events generated by a given harvester or indirect feedback such as the rate at which those events were exported to one of the output data formats . The results of these analyses may be communicated to the ecologist in the form of feedback data. In addition the statistical analyzer may generate data either for other software applications or for interested persons regarding the popularity of harvests by time unit day month etc. the popularity of harvests by geographic region the popularity of harvests containing specific keywords calendar software application market shares correlations between user demographic data and various user behaviors and correlations between user behaviors and other user behaviors.

The steps of any of the algorithms described above may be implemented via executable code stored on a computer readable medium and or as a system with at least one processor to perform the above noted steps.

Other embodiments of the invention will be apparent to those skilled in the art from a consideration of the specification or practice of the invention disclosed herein. It is intended that the specification and examples be considered as exemplary only with the true scope and spirit of the invention being indicated by the following claims.

