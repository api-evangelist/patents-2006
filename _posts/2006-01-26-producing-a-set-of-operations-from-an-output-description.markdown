---

title: Producing a set of operations from an output description
abstract: Producing a set of operations from an output description is disclosed. Producing includes receiving a description of a desired result, where the description is associated with a metalanguage, determining a set of operations such that executing the set of operations would produce the desired result, and providing the set of operations as input to one or more applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08082496&OS=08082496&RS=08082496
owner: Adobe Systems Incorporated
number: 08082496
owner_city: San Jose
owner_country: US
publication_date: 20060126
---
Computer systems such as desktop applications web based applications or batch oriented server applications operate by performing a set of operations on a set of input data to produce the desired result s . People whether users or system designers typically determine which operations the computer system s will perform and in which order on the input data in order to obtain the desired result.

People who use computer systems such as artists or publishing professionals may not be aware of how to program them. The user may know what the desired result is but may not know how to determine the operations and order of operations needed to obtain the desired result. Even if the user does know which operations to use the user may not know the optimal operations to use or it may take work on the user s part to determine this. Today s computer systems force users to become cognizant of these aspects if they are to achieve the desired results in an efficient manner. Improved techniques for obtaining a desired result would be useful.

Producing a set of operations from an output description is disclosed. In some embodiments producing includes receiving a description of a desired result where the description is associated with a metalanguage determining a set of operations such that executing the set of operations would produce the desired result and providing the set of operations as input to one or more applications.

The invention can be implemented in numerous ways including as a process an apparatus a system a composition of matter a computer readable medium such as a computer readable storage medium or a computer network wherein program instructions are sent over optical or electronic communication links. In this specification these implementations or any other form that the invention may take may be referred to as techniques. A component such as a processor or a memory described as being configured to perform a task includes both a general component that is temporarily configured to perform the task at a given time or a specific component that is manufactured to perform the task. In general the order of the steps of disclosed processes may be altered within the scope of the invention.

A detailed description of one or more embodiments of the invention is provided below along with accompanying figures that illustrate the principles of the invention. The invention is described in connection with such embodiments but the invention is not limited to any embodiment. The scope of the invention is limited only by the claims and the invention encompasses numerous alternatives modifications and equivalents. Numerous specific details are set forth in the following description in order to provide a thorough understanding of the invention. These details are provided for the purpose of example and the invention may be practiced according to the claims without some or all of these specific details. For the purpose of clarity technical material that is known in the technical fields related to the invention has not been described in detail so that the invention is not unnecessarily obscured.

Description includes a description of a desired result. Description does not necessarily include any commands and or intermediate content used to produce the desired result rather description specifies content included in the desired result. For example a desired result is a Portable Document Format PDF document assembled from multiple chapters and description specifies contents of the document. The description in some embodiments at least in part specifies layout of the contents included in the desired result. Description may be associated with a metalanguage. Examples of metalanguages include XML Hypertext Markup Language HTML Cascading Style Sheets CSS eXtensible Stylesheet Language XSL XSL Formatting Objects XSLFO and any markup language. In some embodiments description is specified in a language based on Extensible Markup Language XML . In some embodiments description is specified in natural language and processing module may use natural language processing techniques to process description . Description may be generated programmatically or manually. For example description is generated based on input from a graphical user interface GUI . In another example a user may use a template to create description . XML generation tools may be used. In various embodiments description may be specified in a format associated with one or more of the following XML HTML CSS XSL XSL and XSLFO.

Source data may include any data used to generate a desired result. For example a desired result may include a PDF document that includes multiple chapters. In this case source data may include the chapters. In another example a desired result may include an image of a face. In this case source data may include a source image that includes the face and possibly other objects. Source data may include multiple source data. Description may reference source data in various ways in various embodiments. For example description may reference source data via an indirection mechanism such as aliasing.

Processing module processes description to produce a set of operations. Based on description processing module determines a set of operations that when executed produce the desired result. The set of operations may be command sequence . For example description includes the description document with table of contents and chapters. Command sequence of the example includes operations associated with determining total number of chapters inserting chapters up to the total number of chapters calculating page numbers inserting table of contents and inserting page numbers . An order of operations may be associated with command sequence . In some embodiments description is specified in a description based language e.g. metalanguage and command sequence is specified in a programming language e.g. function based language such as C and C .

Command sequence is provided as input to application s . Source data may be passed as input to application s and or may be passed as part of command sequence . Operations may be associated with an application. For example the application may provide an application programming interface API . Command sequence may include a call to the API in order to cause an application to execute an operation associated with that application. In some embodiments an output of application s is fed back to processing module . In this case there may be intermediate results that are used by processing module to determine command sequence . For example a table of contents may be generated as an intermediate result.

Application s may include one or more applications that are used to produce a desired result. Examples of the applications include one or more of the following a word processing application a spread sheet application a presentation application a visual graphics applications a multimedia content application a publishing application a document editor a circuit design application Adobe Acrobat Adobe Photoshop . Result is the desired result as specified by description . For example result may be a document with multiple chapters or an image of a face.

In some embodiments the description is generated based on GUI input s . For example a GUI may be provided for a user to specify a desired result for a document assembly. The user may select icons representing source documents and drag and drop them into an icon representing the result. The user could order the source icons to represent the order of documents in the result and can select one or more of the sources to which to apply elements such as headers or footers or to be used for a generated table of contents.

At the set of operations is provided as input to one or more applications. For example command sequence is provided as input to application s . More than one application may be used. For example a composite document may include a document and an image as source data. In this case a document editing application and a photo editing application may be used. In another example a desired result may include an assembled document that is signed and encrypted. In this case a document assembler application a certifying application and an encryption application may be used. The set of operations may be associated with an order of operations. For example processing module may determine that encrypting occurs before signing.

A description of a desired result may be written in XML. For example a Document Description XML DDX may be defined. DDX may be used to describe result documents to be built from one or more source documents. In DDX a PDF document may be broken down into the following building blocks.

The element specifies a document which may have come from or be saved in a PDF or XML Data Package XDP format. Pages in documents being produced may come from pages in source documents. Specific source pages in a document can be identified via that element s pages attribute. There are two elements which will create pages without a source page to work from and .

Document Components are parts of a PDF which can be imported and exported but are not necessarily pages or page content. The document component elements in DDX include and .

Document properties are attributes associated with a document such as metadata security settings and the initial view. The document property elements in DDX include 

Page content is the text and graphics which appear on a page when printed or viewed. Page content elements in DDX include and which specify new content to be added to pages. In addition the element alters existing content on pages.

Page properties are attributes associated with a page which do not necessarily alter the page content but may alter how the page is viewed or printed and affect the content added to pages through the Page Content elements. The page properties elements in DDX include and .

Other elements include and . The element groups together PDF sources. It may be used to enable properties and content to be specified once yet applied to multiple sources.

In this example the desired result is a document built from component pieces. The resulting document is to contain a cover letter a table of contents two chapters and an appendix. The element provides an alternative name that another document might use to refer to this document the parent of . If the link alias is provided links may be resolved to an internal link in the result PDF document.

As shown in Example 1 description may describe the desired resulting document in the order in which elements appear in the document. For example the table of contents chapter 1 chapter 2 and the appendix are specified in that order.

The description may be generated in various ways in various embodiments. For example a financial services company may want to assemble a cover letter two chapters and an appendix for each client. The cover letter and the two chapters may change depending on the client while the appendix may contain standard legal disclosures. A generating application could iterate over the financial services company s database and identify the appropriate sources to populate a document description template. The document description would then be provided to a processing module so that the result document could be generated.

In the example shown the process begins at in which a description is received. In this case Example 1 is received. At the description is parsed. At an in memory representation is built. For example an object tree is built as more fully described below. Although an in memory representation is described any appropriate representation may be used in various embodiments. For example for larger result descriptions the object representation may be built in a permanent store e.g. on disk and the object may be processed directly from that storage.

At sources are prepared. For example a list of operations to be performed on the source data before assembly is generated. At a list of segments is built. A list of segments may be referred to as a blueprint because it provides an outline of the document to be assembled. A segment includes one or more pages of a result document that may share similar properties such as context. In some embodiments each segment is associated with a source document a page range in the result and a context. When the segment is created the context is uninitialized in some embodiments.

As used herein context refers to properties or attributes that may apply to more than one element in a result. For example in the case of an assembled document a context may include properties and attributes that may apply to more than one page in the document. If the description is in XML the properties for a particular page range may be specified explicitly for a node or may be inherited from the node s parent s . For example a context may apply to blank pages and to Table of Contents pages either explicitly or by inheriting from a parent node. Operations associated with applying context properties to page ranges in a document may be deferred by processing module until after the document is assembled as more fully described below.

Examples of context properties or attributes include page size page margins art box bleed box trim box page labels no page labels remove existing page orientation page transformation headers as styled text or PDF no headers remove existing and leave blank footers as styled text or PDF no footers remove existing and leave blank watermarks no watermarks remove existing background no background remove existing overlay content underlay content no XML Forms Architecture XFA remove existing XFA and no forms flatten existing forms . For example art box may define the extent of the page s meaningful content as intended by the creator of the page. Bleed box may define the bounds to which the contents of the page should be clipped when output in a production environment. Trim box may define the intended dimensions of the finished page after printing and trimming. The above attributes are examples of various attributes that may be defined for a document result. In various embodiments other context properties or attributes may be defined that may be useful for other types of desired results.

At the context in the segments is populated. In some embodiments the context is filled in based on a recursive algorithm that walks from the top to the bottom of the object tree. In some embodiments properties propagate downward unless they are overridden. For example the top level header My Life as a Chef My Life as a Chef applies to all headers unless overridden by a lower level header. In the appendix the top level header is overridden by the lower appendix level header Appendix Appendix .

In some embodiments a set of operations may correspond to the blueprint obtained at . For example the set of operations may include the appropriate commands to assemble the result document according to the blueprint such as obtaining each of the input sources coverletter.pdf chapter1.pdf etc. and assembling them into a document using a document assembly application as more fully described below.

At operations to be performed may be optimized. For example there may be a certain sequence of operations that optimizes performance. For example optimization may include one or more of a combination of operations a removal of unnecessary operations an addition of operations and a rearrangement of operations. is optional. For example process may already result in a blueprint that specifies an optimal set of operations.

In this blueprint each segment is associated with a source document a page range in the result and a context. The context references point to the page s to which the context applies. Although in this example each segment is associated with the same elements each segment is not necessarily associated with the same elements in some embodiments.

At commands are executed on inputs. For example a command may be executed to obtain coverletter.pdf chapter1.pdf chapter2.pdf and appendix.pdf . For example command may be executed to modify an input if applicable. At inputs are assembled. Sources and modified sources may be assembled by an assembly application based on a blueprint. In some embodiments the inputs are assembled by walking down the blueprint and assembling the source associated with each segment. For example based on the blueprint of coverletter.pdf is placed on page 1 of the result document followed by a blank page a table of contents and so forth. At commands are executed on the assembled result. This may include performing post assembly processing such as executing the context on the appropriate pages. For example all the headers and footers may be applied at this point. At memory is freed. For example the object tree may be freed from memory. Any of and or may be performed by one or more applications.

As shown the description may be a linear description of the desired document in which component pieces are described in the order in which they appear in the result document. Attributes of the pieces may be scoped by an XML containment hierarchy. By contrast the blueprint specifies operations that do not necessarily follow the sequence order or the nesting order of the description. The operations used to produce the result are invoked on components not necessarily in the order of appearance in the document but in a sequence that enables proper application of shared properties like page headers on sub assemblies. For example the user may specify the headers and footers for a document near the beginning of a description whereas the headers and footers may actually be filled in near the end of a command sequence e.g. when all the page numbers are known such as at . A user does not need to be concerned with selection sequencing and optimization of operations. Any selection sequencing and optimizations may be handled by the processing module.

In example of a set of operations were determined based at least in part on a blueprint. In various embodiments other sets of operations may be determined and executed when Example 1 is provided as input.

At chapter1.pdf and chapter2.pdf are assembled into TempA a temporary file. At chapter1.pdf and chapter2.pdf are closed. At Page Labels starting with 1 are added to TempA . At Header My Life as a Chef and Odd Even Footers with PageLabel are added to TempA . At Page Labels starting with 1 are added to appendix.pdf . At Headers Appendix and Odd Even Footers with PageLabel are added to appendix.pdf . At the appendix is assembled onto TempA . At appendix.pdf is closed. At the table of contents TOC is generated on TempA . At the table of contents is assembled onto TempA . At coverletter.pdf is assembled onto TempA . At coverletter.pdf is closed. At TempA is returned as sampledoc.pdf .

In some embodiments the operations associated with may be optimized. For example there may be a certain sequence of operations that optimizes performance. Optimization may include one or more of a combination of operations a removal of unnecessary operations an addition of operations and a rearrangement of operations.

In Example 1 result is a document. However in various embodiments result and or source data may include one or more of documents images CAD data architecture data circuit design data or any other appropriate data.

In the case of an image file the source data may include multiple source images. The description may include composite image of standard sized faces from multiple sources. Given the description a processing module may determine a command sequence. The command sequence may include a for loop that finds faces in each source image using operations provided by a face detector application. The next operations in the command sequence might include image editing operations to scale the face and place the faces in a single image file. These operations may be provided by an image editing application. Other operations that may be provided include rotating adjusting lighting sharpness red eye etc.

In another example a pilot desires travel planning information for a trip. The desired travel planning information may be specified as a desired result in a description and may include a weather report a flight plan hotel security customs and agriculture information. The source data may include the dates of travel and the route e.g. the airports visited . A processing module may process the description and source data and produce a set of commands that retrieve information from various applications and or databases and assembles them into the desired result. The commands are provided as input to one or more applications that execute the commands to produce the desired result. The desired result may include an optimized flight plan for example to reduce fuel consumption the number of agricultural inspections etc. and a weather report hotel security customs and agriculture information for that flight plan.

The description may be generated based on GUI input s . For example a GUI may be provided for the user to select the desired travel planning information and or source data information. The GUI may provide a list of travel planning information options such as weather report flight plan hotel restaurant attractions security customs and agriculture information. The user may select from these items or enter an item not on the list. The GUI may provide a place to enter dates of travel and the airports visited.

In the case of architecture data the description may describe the desired characteristics of a building such as the number of offices with windows the number of bathrooms the size of each room etc. Given the description a processing module may determine one or more of the following a blueprint for the building a list of construction materials vendors contractors and at least a portion of steps logistics required for the construction of the building and any other appropriate information.

In a circuit design example at least one of the applications includes a circuit design program. The description may specify the desired outputs given specified inputs. Given the description a processing module may determine a functional circuit that has the described input and output characteristics. Other characteristics may also be specified in the description such as temperature tolerances and other electrical and or physical characteristics.

Although the foregoing embodiments have been described in some detail for purposes of clarity of understanding the invention is not limited to the details provided. There are many alternative ways of implementing the invention. The disclosed embodiments are illustrative and not restrictive.

