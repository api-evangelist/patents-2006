---

title: High-level database management system
abstract: A method and system for allowing end users to create a database and a user interface to interact with database data are provided. The database management system provides a database abstraction layer that hides the complexities of a database and vendor-specific implementation details from the end user, while still allowing the end user to perform powerful database tasks. The database management system allows an end user with little or no knowledge about databases to create, edit, and maintain a database without understanding the details behind the database. The database management system also provides a facility for the easy creation of web pages to access the database to provide features such as searching, data entry, and browsing data stored in the database.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07650335&OS=07650335&RS=07650335
owner: The Board of Trustees of the University of Illinois
number: 07650335
owner_city: Urbana
owner_country: US
publication_date: 20060420
---
The present application claims priority to provisional U.S. Patent Application No. 60 673 422 Apr. 20 2005 entitled ONLINE HIGH LEVEL WEB DATABASE CREATION MANAGEMENT SYSTEM which is hereby incorporated by reference.

Databases are used in a variety of different computer systems today for a vast number of purposes. For example databases can be used to manage contact information such as first names last names and phone numbers. Databases are also used on a variety of scales. For example a database can be used by an individual user to store that user s list of friends and relatives or by a corporation to store employee customer or financial information. Databases are also used for electronic commerce to store item descriptions and the state of transactions with customers and to manage inventory.

Despite the widespread use of databases the creation and maintenance of databases has remained a task for specialized engineers and designers. For instance to create a table in a database a specialized person needs to know the data types provided by the database for database fields any limitations on the length of data that can be stored for each data type the precision available for numeric data types and whether a particular data type is indexable just to name a few examples. Moreover since the features and requirements of databases delivered by different vendors vary substantially a specialized person typically specializes in the database products of only one vendor. Some database products for example have strict requirements for field names such as that field names be limited to 30 characters in length start with a letter and only contain letters and numbers without spaces or other symbols. Some database products support data types that others do not and some allow operations that others do not such as renaming fields or tables after they are created.

The differences in database implementations and the inherent complexities in databases increase the difficulty of working with databases and restrict the number of users qualified to create and maintain databases. This prevents a large number of users from being able to benefit from the power of databases to store and organize their information for a variety of purposes.

Another problem with traditional databases is the difficulty of creating user interfaces to interact with database data. Providing meaningful interaction with a database to end users generally requires the creation of a custom client application using one of several database communication protocols. These protocols vary based on the database vendor and require programming skills to create an application to use them. More recent databases have allowed access from the web using a standard web browser but they still require the skills of a web developer to create web pages that pull information from the database and format it for display in the browser. The creation of a database and a user interface to access it often requires a skilled team of specialized programmers and operations personnel. Since many organizations do not have such a skilled team many opportunities for use of such a database to improve the efficiency of the organization are not realized.

A method and system for allowing end users to create a database and a user interface to interact with database data are provided. The database management system provides a database abstraction layer that hides the complexities of a database and vendor specific implementation details from the end user while still allowing the end user to perform powerful database tasks. The database management system works on many different underlying database architectures and presents similar features to the end user regardless of the underlying system. The database management system allows an end user with little or no knowledge about databases to create edit and maintain a database without understanding the details behind the database. The database management system also provides a facility for the easy creation of web pages to access the database to provide features such as searching data entry and browsing data stored in the database. The database management system delivers these capabilities through a database abstraction layer back end and a web access layer front end. The database abstraction layer operates between the user and an underlying database system. The web access layer allows easy collaboration and sharing of data by making database data easily accessible from a web browser.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

A method and system for allowing end users to create a database and a user interface to interact with database data are provided. The database management system provides a database abstraction layer that hides the complexities of a database and vendor specific implementation details from the end user while still allowing the end user to perform powerful database tasks. For example an end user can specify user friendly data types such as text or number with decimal point without worrying about length limitations or numeric precision requirements of the underlying database. The database management system works on many different underlying database architectures and presents similar features to the end user regardless of the underlying system. The database management system allows an end user with little or no knowledge about databases to create edit and maintain a database without understanding the details behind the database. The database management system also provides a facility for the easy creation of web pages to access the database to provide features such as searching data entry and browsing data stored in the database. The database management system delivers these capabilities through a database abstraction layer back end and a web access layer front end described in further detail below. The database abstraction layer operates between the user and an underlying database system. The web access layer allows easy collaboration and sharing of data by making database data easily accessible from a web browser.

In some embodiments the database management system allows the creation of database fields that do not have limitations of native field types of the underlying database. For example while the underlying database may have a native naming syntax that limits field names to 30 characters the database management system allows fields with names longer than 30 characters. Likewise the database management system supports field names that have spaces regardless of whether the underlying database provides similar support. The database management system does this by creating fields with an actual field name that is generic such as FieldX where X is a number that increments each time a field is created and creating a table that stores a mapping of actual field names to user defined field names. When a user accesses a field the database management system translates between the actual field name and the user defined field name so that the user only interacts with the database using the user defined field name.

In some embodiments the database management system allows renaming fields without rebuilding the database. Some database systems do not support renaming database fields without creating specialized code for example using Structured Query Language SQL that creates a field with the new name and moves data in the field with the old name to the new field before deleting the old field. However the database management system allows renaming fields after they are created because the field names seen by a user are not the actual field names as described above. Rather the user interacts with a user defined name for the field that is allowed to change at any time without impacting the underlying data.

In some embodiments the database management system automatically chooses the native type to use for a user defined field. For example a user may indicate that a field contains a number but may not know the ultimate maximum value that may be placed in the field or the precision needed. The database management system automatically chooses an appropriate native data type to store the data. The database management system may automatically change the native data type used to store the field as data is added if the initially selected data type becomes no longer appropriate for the data. Other factors may also influence the choice of data type such as whether the user intends to perform searches based on a particular field.

In some embodiments the database management system automatically chooses which fields to index. For example if the user creates a database of contacts and intends to search on a field called Last Name that contains each contact s last name the database management system may create an index on the Last Name field. The database management system hides such details from the user and may ask simple questions such as what is the expected number of entries when a new table is created or whether the user expects to perform searches when a new field is created.

In some embodiments the database management system requests information from the user when the underlying database imposes a limitation. For example some databases can only create indexes on fields shorter than a certain length. If the user indicates an intention to put longer data in a field and to perform searches on that field the database management system may inform the user that the field length must be limited to produce faster searches. Alternatively the database management system may partially index the field up to the allowed length if the underlying database supports partial indexing. The database management system may also decide not to index the field and inform the user that searches based on the field will take longer to complete.

In some embodiments the database management system controls which users may access the database. For example one user may be allowed to enter new information while another user is only allowed to view information. As an example a company s list of employees may be visible to the public on the Internet so that customers can send emails to them but those customers cannot add or update information in the employee list. Conversely an employee in the human resources department of the company could be granted access to add update and remove employees from the list. User access may be controlled through a variety of common methods such as by issuing each user a username and password using IP based authentication or issuing a cryptographic certificate to each user.

In some embodiments the database management system supports fields that are specific to a particular user of the system. For example a corporation may have a central database of customers that contains common fields for everyone to use as well as custom fields added by certain users. For example the company customer database may contain fields for all users to browse containing each customer s last name first name and telephone number but a user of the system may want to add some additional information for their own use such as the customer s birthday or spouse s name. The database management system allows each user to add fields to the database that are only visible by that user. The database management system may also allow an administrator of the system to decide which users can add fields to the database based upon the access control information specified.

In some embodiments the database management system creates new databases from templates. A template specifies an example table and field layout for the database and preconfigures database settings in a way defined by the template author. An administrator can require the use of templates for creating databases by specifying appropriate access control information. For example a corporation may allow each employee to maintain their own contacts database but may want each contacts database to contain similar fields. The company can distribute a contacts database template and restrict the database management system to only creating databases based upon the template. This way the company can allow many separate databases but ensure that the format of each database is similar such as for ease of importing the separate databases into a central database.

In some embodiments the database management system allows searches that span multiple tables. Traditional database systems require an in depth understanding of the complex relationships between tables to create queries that search for information in multiple tables. The database management system makes searching multiple tables easy by automatically determining how tables are related. For example if one table contains names and home addresses and another table contains names and work addresses the database management system can determine that the two tables are related and allow a user to search for a particular name and receive both the home and work addresses of the identified person. The database management system may identify related tables by determining which tables have fields with similar names which fields contain similar data or a combination of the two.

In some embodiments the database abstraction layer translates a user s commands into corresponding SQL statements for delivery to the underlying database. For example joins and variable referencing are two SQL concepts often required for SQL queries that search multiple tables. If a user defines a search that spans multiple tables the database management system produces the appropriate SQL statements to perform a join of the table data and introduces variable references needed to carry out the search. In the example given above where one table contains names and home addresses and another table contains names and work addresses a common SQL query to access both would be SELECT x1.Name x1.Address x2.Address FROM hometable x1 worktable x2 WHERE x1.Name LIKE SEARCHINPUT AND x1.Name x2.Name. The temporary table identifiers x1 and x2 are referred to as variable referencing and clarify for the database which table is being referred to at each point in the statement. This is an example of the type of syntax that a typical user would not be able to produce and that the database management system generates automatically.

In some embodiments the database management system supports plug in modules that enhance the system s data storage capabilities. For example typical database systems do not support a field type that contains a bitmap image but do support a generic binary blob field type. The database management system supports plug ins that add support for new data types to the system. In the case of an image data type the plug in handles writing the image data to a field type that the database does support such as the generic binary blob field type as well as reading the image data from the native type and converting it back to image data. The plug in may also store supplemental information needed by the new field type in the native field such as the Multipurpose Internet Mail Extensions MIME type for image data useful for properly displaying the image on a web page.

In some embodiments the database management system supports plug in modules that enhance the system s data processing capabilities. For example a plug in may add a new type of search that allows the database management system to return which words occur most frequently in a given field or to return all sounds having a high pitched voice provided by an audio data storage plug in. As another example a plug in could produce an image of where an address contained in a field is located on a map of the area. The database management system communicates information from the database to the plug in needed to support the enhanced data processing capability and receives output from the plug in for display to the user.

In some embodiments the database management system provides a high level application programming interface API that allows programs written by users to benefit from the easy to use database model provided by the system. Even though the system provides tremendous benefits to end users who are now able to utilize databases for a variety of tasks once limited to those with programming skill the system is also useful for developers who want a high level database paradigm that is independent of the underlying database used and that hides unnecessary database details from the application developer. Therefore the database management system provides an API that developers can use to access the database using user defined names for fields plug ins access control and the other features described above to achieve benefits similar to those achieved by an end user accessing the database through the web access or other interface layer.

In some embodiments the database management system provides a web access layer through which the database can be managed and accessed. The database creator uses the web access layer to add update and delete tables and fields within tables to the database. The database creator can also use the web access layer to create a set of web pages for other users to access the database in a well defined manner. Web pages can be created using a simple wizard like interface that provides a friendly interface without knowledge of underlying database concepts.

In some embodiments the database creator specifies the purpose of each page and the fields to be displayed and the database management system automatically creates an appropriate web page. For example a user can build a contact search page to access a contacts database by specifying the purpose of the page as searching and dragging the fields to search and the fields to display upon completion of the search onto the page. The database management system uses this information to create the web page. The web page may use several methods to carry out the user s request. For example the API provided by the database management system may be used to retrieve the information or the web access layer may create a web page that forms an appropriate SQL query to the underlying database. When the page creation is complete the user may be given a Uniform Resource Locator URL to the new page e.g. http myserver.com cgi bin databasedesignerpage id 100 that can be given to other users or the page may be placed in a hierarchy of pages available from a central web site. The database management system can create pages for many common purposes including browsing editing searching and data entry.

In some embodiments the database management system allows pages to be edited after they are created. For example the web access layer may produce a simple page that can be edited in an HTML editor to add backgrounds and other graphics that enhance the appearance of the page. The user may also want to move fields around on the page or perform other minor modifications supported within the web access layer itself. An administrator of the system may also define which users have access to create and edit web pages based on specified access control information.

The computing device on which the system is implemented may include a central processing unit memory input devices e.g. keyboard and pointing devices output devices e.g. display devices and storage devices e.g. disk drives . The memory and storage devices are computer readable media that may contain instructions that implement the system. In addition the data structures and message structures may be stored or transmitted via a data transmission medium such as a signal on a communication link. Various communication links may be used such as the Internet a local area network a wide area network a point to point dial up connection a cell phone network and so on.

Embodiments of the system may be implemented in various operating environments that include personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems programmable consumer electronics digital cameras network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and so on. The computer systems may be cell phones personal digital assistants smart phones personal computers programmable consumer electronics digital cameras and so on.

The system may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures and so on that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.

The DATATYPEPLUGININFO table contains columns PluginID RealName HumanName WriteFuncPtr ReadFuncPtr and HTMLGUIPtr . The DATATYPEPLUGININFO table is used to store a list of the plug ins available for expanding data types handled by the database management system. The PluginID column contains a unique identifier for the plug in. The RealName column contains the name of the data type used internally by the database management system to represent the type provided by the plug in in the underlying database. The HumanName column contains the name of the type that the plug in provides that is presented to the user. The WriteFuncPtr column contains a pointer to the function in the plug in used to handle a write operation for a field of the custom data type. The ReadFuncPtr column contains a pointer to the function in the plug in used to handle a read operation for a field of the custom data type. The HTMLGUIPtr column contains a pointer to the function in the plug in used to handle a request for Hypertext Markup Language HTML or other rendering information for a field of the custom data type.

The USERINFO table contains columns Username Password FullName EmailAddress and SecurityACLs . The USERINFO table is used to store a list of users authorized to interact with the database. The Username column contains a name used to identify the user. The Password column contains a password provided by the user to prove their identity. The FullName column contains the full name of the user. The EmailAddress column contains an email address to contact the user. The SecurityACLs column specifies access control information for the user such as which databases the user is permitted to access.

From the foregoing it will be appreciated that specific embodiments of the database management system have been described herein for purposes of illustration but that various modifications may be made without deviating from the spirit and scope of the invention. For example although web based access of a database has been described other forms of access may be used such as through a custom client application created using many popular programming packages that provide ease of use benefits similar to the web e.g. Visual Basic Delphi and NET . The system has also been described in terms of a single database server but multiple servers could be used. The database database abstraction layer and web access layer may reside on the same machine or on several separate machines. The database may be a full fledged commercial database such as MySQL or Oracle or could be implemented as a simple flat file or other similar data storage and retrieval mechanism. Accordingly the invention is not limited except as by the appended claims.

