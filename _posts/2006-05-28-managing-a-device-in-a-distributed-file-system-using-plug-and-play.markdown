---

title: Managing a device in a distributed file system, using plug and play
abstract: Systems and methods for managing a device in a distributed file system are provided. In one embodiment, the method comprises instantiating a physical device object, in response to a file system driver detecting a device remotely connected to a computing system via a distributed network. An operating system running on the computing device loads a disk function driver for managing access to the device. A plug and play manager of the operating system enumerates the device. The disk function driver instantiates and registers a functional device object with a mount manager of the operating system. A file system instantiates a volume device object for a logical drive volume mapped to the device and the mount manager mounts the volume device object on the functional device object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07979867&OS=07979867&RS=07979867
owner: International Business Machines Corporation
number: 07979867
owner_city: Armonk
owner_country: US
publication_date: 20060528
---
A portion of the disclosure of this patent document contains material which is subject to copyright protection. The owner has no objection to the facsimile reproduction by any one of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyrights whatsoever.

Certain marks referenced herein may be common law or registered trademarks of third parties affiliated or unaffiliated with the applicant or the assignee. Use of these marks is for providing an enabling disclosure by way of example and shall not be construed to limit the scope of this invention to material associated with such marks.

The present invention relates generally to file system management in a computing environment and more particularly to a system and method for automatically managing a device in a distributed file system using the plug and play PnP feature of an operating system running on a local computing system.

A distributed file system such as a storage area network file system SANFS developed by International Business Machines IBM is utilized for managing access to files and data stored on a storage area network SAN . A distributed file system provides access to file system clusters i.e. distributed storage devices by associating each cluster with a disk device object. The disk device object is created by a disk device driver and logically represents a corresponding cluster to the operating system of a computer. The operating system communicates with the disk device object to manage access to the cluster.

Unfortunately most operating systems e.g. Microsoft Windows that run on a local computer connected to a distributed network do not support access to remote devices in distributed file systems. For example the currently available disk drivers e.g. IFS drivers cannot create a disk device object for a remotely attached storage device e.g. a SANFS cluster such that the disk device object can directly interface with various components of the operating system. More particularly the device drivers cannot create a disk device object so that the remote storage device can interface with the operating system s plug and play PnP manager.

For the above reasons the PnP manager cannot dynamically detect the arrival or removal of the remote device on a distributed network. For example certain components of the Microsoft Windows operating system such as Microsoft Windows Explorer cannot detect changes in status of a remote storage device in a distributed network. Manual methods have been implemented to allow applications executing over the operating system to detect a remote device and its corresponding status. Unfortunately such methods are burdensome and fail to provide a robust interface between the operating system and the remote device.

The present disclosure is directed to a system and corresponding methods that facilitate the automatic detection of a device in a distributed file system.

For purposes of summarizing certain aspects advantages and novel features of the invention have been described herein. It is to be understood that not all such advantages may be achieved in accordance with any one particular embodiment of the invention. Thus the invention may be embodied or carried out in a manner that achieves or optimizes one advantage or group of advantages without achieving all advantages as may be taught or suggested herein.

In accordance with one embodiment a method for managing a device in a distributed file system comprises instantiating a physical device object in response to a file system driver detecting a device e.g. a SANFS cluster connected to a distributed network loading a disk function driver for managing access to the device and notifying a PnP manager of an operating system running on a computing system to enumerate the device.

In certain embodiments the method further comprises instantiating and registering a functional device object with a mount manager of the operating system associating the functional device object with the physical device object instantiating a volume device object for a logical drive volume mapped to the device enabling an interface mechanism of the functional device object and mounting the volume device object on the functional device object.

In accordance with another embodiment a computer program product comprising a computer usable medium having a computer readable program is provided. The computer readable program when executed on a computer causes the computer to perform the above disclosed actions to manage the device in the distributed file system.

One or more of the above disclosed embodiments in addition to certain alternatives are provided in further detail below with reference to the attached figures. The invention is not however limited to any particular embodiment disclosed.

Numeral references do not connote a particular order of performance hierarchy or importance unless otherwise stated herein. Features elements and aspects of the invention that are referenced by the same numerals in different figures represent the same equivalent or similar features elements or aspects in accordance with one or more embodiments.

The present disclosure is directed to systems and corresponding methods that facilitate the automatic detection of a device in a distributed file system using the plug and play PnP feature of an operating system running on a local computing system.

To accomplish this a disk bus driver creates a physical device object in response to a file system driver detecting a device connected to the computing system via a distributed network. The operating system s plug and play manager enumerates the device and causes a disk function driver to register a functional device object with a mount manager of the operating system. A file system creates a volume device object to represent a logical drive volume mapped to the device. The mount manager mounts the volume device object on the functional device object and notifies the operating system of the arrival of the device on the bus.

In the following numerous specific details are set forth to provide a thorough description of various embodiments of the invention. Certain embodiments of the invention may be practiced without these specific details or with some variations in detail. In some instances certain features are described in less detail so as not to obscure other aspects of the invention. The level of detail associated with each of the elements or features should not be construed to qualify the novelty or importance of one feature over the others.

Referring to a distributed file system in accordance with one aspect of the invention comprises a server system a plurality of client systems and a storage area network SAN and preferably a metadata storage . Metadata is information pertaining to location and attributes of files managed by a distributed file system.

Each client system can communicate with server system or a plurality of sever systems not shown over a distributed network . The client and server systems are in communication with SAN to access information stored therein. SAN may comprise a plurality of shared disks and that contain blocks of data for files managed by the distributed file system. SAN for example may comprise at least one of a hard disk drive a tape drive an optical disk drive a floppy drive flash memory another type of data storage medium or a combination thereof.

Server system may be implemented to execute software that manages the metadata stored in metadata storage . Each client system can access an object or multiple objects stored on file data space of SAN . In certain embodiments client systems may not have direct access to metadata storage and thus communicate with server to obtain the related information.

To access the contents of a file on SAN client system contacts server system to obtain object metadata and locks. As noted earlier the metadata provides information about a file such as file attributes and storage location. Locks provide information about privileges needed to open a file and read or write data. Server system performs a look up of metadata information for the requested file within metadata storage .

In one embodiment server system communicates granted lock information and file metadata to requesting client system including the addresses of all data blocks making up the file. Once client system holds a lock and knows the data block address or addresses client system can access the data for the file directly from shared storage devices or attached to SAN .

It is noteworthy that the elements in distributed file system as illustrated in are exemplary in nature. Distributed file system in addition to server system client machines and storage media may include additional or fewer elements without detracting from the scope of the invention or the principals disclosed herein.

Referring to an exemplary client system and its corresponding software environment are illustrated. As provided earlier client communicates with server system to access one or more devices such as a distributed storage device . Hereafter we refer to distributed storage device as the exemplary device connected to client system via distributed network . It is noteworthy that the present invention can be implemented in accordance with other embodiments to provide access to any device in a distributed file system.

Furthermore for the purpose of example certain embodiments of the invention are disclosed herein with reference to the components of Microsoft Windows operating system e.g. Windows 2003 Windows XP and installable file system IFS . Since as noted the embodiments disclosed herein are by way of example the disclosed principals features aspects and advantages of the invention can be equally applied to any operating system file system or device without limitation.

As shown in operating system controls the operation of client system . Operating system comprises an input output I O manager a PnP manager and a mount manager . I O manager controls data input and output to and from the system PnP manager controls connection and removal of devices to and from the system and mount manager associates the devices connect to client system with a file system as provided in further detail below.

In accordance with one aspect of the invention I O manager is part of the operating system s kernel. I O manager manages I O operations for client system . In one embodiment I O manager is responsible for detecting new devices e.g. SAN clusters connected to the system via distributed network and for providing access to the detected devices.

As shown in in one embodiment PnP Manager is part of operating system and functions to manage one or more device drivers for devices connected to client system . Device drivers are executable logic code that provide an interface between operating system and the connected devices. As such operating system controls a device to perform one or more device functions by way of the device drivers.

PnP manager is used to automatically detect a device connected to the system bus not shown and to load the needed device drivers. A bus can be thought of as a hypothetical media on which a certain type e.g. class of objects can be plugged in and out. Hence PnP manager is responsible for detecting devices on the bus sending proper event notifications for the detected devices and identifying the device drivers loaded for each device.

PnP manager preferably manages disk bus drivers and disk function drivers for operating system s file system that comprises local file systems and . Local file system is a portion of a file system application programming interface API that enables operating system to recognize and load the requisite drivers. Local file system is a portion of the file system API that provides an interface between local file system and PnP manager . The disk bus driver is responsible for the detection and enumeration of physical disk devices that connect to client system or distributed network for example. The disk function driver provides the functionality for a physical disk device detected by the disk bus driver.

During enumeration pseudo disk bus driver creates and initializes device objects for distributed storage device detected on the I O bus hereafter the bus of client system . In an exemplary embodiment a pseudo disk function driver is also loaded and installed preferably during the boot operation in association with pseudo disk bus driver . Pseudo disk function driver is logically associated with pseudo disk bus driver to control the operation of the distributed storage device .

The association between pseudo disk bus driver and pseudo disk function driver is registered with PnP manager so that objects instantiated by pseudo disk bus driver are automatically linked to and managed by pseudo disk function driver . Pseudo disk function driver in an exemplary embodiment provides the operational interface for distributed storage device and controls the respective I O and power management policies.

In one embodiment pseudo disk bus driver and pseudo disk function driver support windows device model WDM . WDM provides a framework for developing device drivers that support plug and play functionality such that PnP manager can direct device drivers to control their respective devices. PnP manager communicates with pseudo disk bus driver preferably by way of I O request packets IRPs . IRPs direct distributed storage device to start stop or be prepared for removal from the bus for example.

Referring back to the operating system is configured to load and initialize a file system driver for client system S . Local file system is preferably a portion of the file system driver logic code that executes in the context of the application to which an I O request is dispatched. In certain embodiments local file system is either a portion of the file system driver logic code or a separate module which is preferably loaded by operating system during boot operation. Local file system is implemented to interface between local file system and pseudo disk bus driver .

During initialization local file system communicates with known nodes in distributed network . Local file system scans distributed network to discover distributed storage device S . In response to detection of distributed storage device by local file system local file system notifies pseudo disk bus driver of the arrival of distributed storage device on the bus S . Local file system may continue to periodically scan the network for additional distributed storage devices S .

Upon receiving an arrival notification from local file system pseudo disk bus driver instantiates a physical device object PDO initializes the physical device object and adds the physical device object to a device list S . The device list comprises the list of devices that pseudo disk bus driver manages. Pseudo disk bus driver then notifies PnP to enumerate distributed storage device on the bus S . In this manner distributed storage device is identified and pseudo disk function driver is assigned to control distributed storage device s functionality.

In an exemplary embodiment a Microsoft API IoInvalidateDeviceRelations is used to notify PnP manager of arrival of distributed storage device . This API preferably comprises logic code that upon execution notifies PnP manager of changes in the status of distributed file system device e.g. arrival removal so that PnP manager can start sending the relevant IRPs and load the proper function drivers to address the change in status.

Referring again to in one or more embodiments PnP manager loads and invokes add device routine of pseudo disk function driver S . The add device routine causes pseudo disk function driver to instantiate a functional device object FDO for distributed storage device and register the functional device object with mount manager S . The functional device object is a logical object that represents a distributed storage device to pseudo disk function driver . In an exemplary embodiment the functional device object is instantiated using IoCreateDevice API routine to create an unnamed functional device object for use by pseudo disk function driver .

In an exemplary embodiment the following represents a declaration for the IoCreateDevice API routine for example 

Mount manager is responsible for making distributed storage device available to client system as if distributed storage device is a locally attached storage device. In one embodiment PnP manager invokes the start device routine of pseudo disk function driver S . By way of the start device routine pseudo disk function driver enables the device interface registered with the mount manager S and informs mount manager that distributed storage device is now available for access.

As part of enabling the device interface mount manager queries pseudo disk function driver for data needed to create a drive letter hereafter drive volume 200 and mounts the detected distributed storage device on the drive volume S . The drive volume represents a point of attachment on which operating system and applications running on top of operating system can mount distributed storage device . The mounting process is performed based on a logical association between functional device object and drive volume as provided in further detail below.

In accordance with one aspect of the invention the following mount process is disclosed with reference to an exemplary embodiment implemented in the Microsoft Windows operating system environment. It is noteworthy that the invention should not be construed as limited to the following exemplary embodiment however. The teachings and principals disclosed herein may be equally applied in other operating environments.

Referring back to local file system creates a file system volume device object VDO to represent drive volume . In an exemplary embodiment I O manager defines a volume parameter block VPB that includes information to identify whether the functional device object is mounted on drive volume . More particularly volume parameter block is a data structure that can be utilized by I O manager to map the functional device object to the volume device object for example.

In one embodiment when operating system or other application requests a read or write access to drive volume I O manager examines volume parameter block to determine whether the corresponding functional device object is mounted on or claimed by local file system . If I O manager based on information included in volume parameter block determines that the functional device object is not mounted on drive volume I O manager invokes file system to recognize and claim the functional device object.

Once local file system claims the functional device object local file system creates a volume device object so that the functional device object is mounted on the volume device object by way of I O manager . I O manager mounts the functional device object on the volume device object by causing local file system to initialize volume parameter block with the proper parameters. These parameters provide an association between the functional device object and driver volume s volume device object. Thus the association between the functional device object and drive volume is established as a part of the mount process.

After mounting of the functional device object on device volume I O manager reroutes requests for accessing distributed file system to drive volume . In an exemplary embodiment volume parameter block provides an association between the functional device object and the volume device object. Once the association between the functional device object and the volume device object is established I O Manager can redirect the I O calls to the volume device object on behalf of the functional device object.

Accordingly distributed storage device is added to the bus when pseudo disk function driver registers the functional device object as for example a disk class type via a globally unique identifier GUID to the system. The PnP hierarchy makes the functional device object visible to all upper layer drivers such as the partition manager e.g. partmgr volume manager e.g. DMIO ftdisk etc. and mount manager . PnP manager notifies all registered applications of the arrival of the functional device object.

In accordance with another aspect of the invention distributed storage device is removed from the bus upon detecting an event such as server or client system shutting down loss of connection to the distributed network or removal of distributed storage device from distributed network . When local file system detects the loss of distributed storage device local file system notifies pseudo disk bus driver about the removal event. Pseudo disk bus driver then removes the physical device object from its device list and informs PnP manager of the removal.

In one embodiment to complete the removal process PnP manager calls the remove device routine not shown of pseudo disk function driver . In response pseudo disk function driver disables one or more active interfaces associated with the functional device object and notifies mount manager to delete the corresponding drive volume . Pseudo disk function driver preferably also deletes the functional device object associated with distributed storage device . In an exemplary embodiment IoInvalidateDeviceRelations API for bus relations is used to notify the PnP manager of the removal process so that PnP manger can send the relevant IRPs to the system drivers and unload pseudo disk function driver .

It is noteworthy that the above procedures and their respective subprocesses can be performed in any order or in parallel regardless of numeral references associated therewith. In different embodiments the invention can be implemented either entirely in the form of hardware or entirely in the form of software or a combination of both hardware and software elements. For example server system or client system may comprise a controlled computing system environment that can be presented largely in terms of hardware components and software code executed to perform processes that achieve the results contemplated by the system of the present invention.

Referring to a computing system environment in accordance with an exemplary embodiment is comprises a hardware environment and a software environment . The hardware environment comprises the machinery and equipment that provide an execution environment for the software and the software provides the execution instructions for the hardware.

The software elements that are executed on the illustrated hardware elements are described in terms of specific logical functional relationships. It should be noted however that the respective methods implemented in software may be also implemented in hardware by way of configured and programmed processors ASICs application specific integrated circuits FPGAs Field Programmable Gate Arrays and DSPs digital signal processors for example.

Software environment is divided into two classes comprising system software and application software . System software comprises control programs such as the operating system OS and information management systems that instruct the hardware how to function and process information.

In an exemplary embodiment operating system is implemented as system software executed on client system or one or more hardware environments to automatically detect distributed storage device connected to distributed network . System software may comprise but is not limited to program code data structures firmware resident software microcode or any other form of information or routine that may be read analyzed or executed by a controller or processor.

In an alternative embodiment the invention may be implemented as computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with an instruction execution system apparatus or device e.g. computer .

The computer readable medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and digital video disk DVD .

Referring to an embodiment of system software can be implemented as computer software in the form of computer readable code executed on a data processing system such as hardware environment that comprises a processor coupled to one or more memory elements by way of a system bus . The memory elements for example can comprise local memory storage media and cache memory . Processor loads executable code from storage media to local memory . Cache memory provides temporary storage to reduce the number of times code is loaded from storage media for execution.

A user interface device e.g. keyboard pointing device etc. and a display screen can be coupled to the computing system either directly or through an intervening I O controller for example. A communication interface unit such as a network adapter may be also coupled to the computing system to enable the data processing system to communicate with other data processing systems or remote printers or storage devices through intervening private or public networks. Wired or wireless modems and Ethernet cards are a few of the exemplary types of network adapters.

In one or more embodiments hardware environment may not include all the above components or may comprise other components for additional functionality or utility. For example hardware environment can be a laptop computer or other portable computing device embodied in an embedded system such as a set top box a personal data assistant PDA a mobile communication unit e.g. a wireless phone or other similar hardware platforms that have information processing data storage or communication capabilities.

In some embodiments communication interface communicates with other systems by sending and receiving electrical electromagnetic or optical signals that carry digital data streams representing various types of information including program code. The communication may be established by way of a remote network e.g. the Internet or alternatively by way of transmission over a carrier wave.

Referring to system software can comprise one or more computer programs that are executed after being loaded from storage media into local memory . In a client server architecture system software may comprise client software and server software. For example in one embodiment of the invention client software is executed on client system and server software is executed on server system .

Software environment may also comprise browser software for accessing data available over local or remote computing networks. Further software environment may comprise a user interface e.g. a graphical user interface GUI for receiving user commands and data. Please note that the hardware and software architectures and environments described above are for purpose of example and one or more embodiments of the invention may be implemented over any type of system architecture or processing environment.

It should also be understood that the logic code programs modules processes methods and the order in which the respective steps of each method are performed are purely exemplary. As noted earlier depending on implementation the steps can be performed in any order or in parallel unless indicated otherwise in the present disclosure. Further the logic code is not related or limited to any particular programming language and may comprise of one or more modules that execute on one or more processors in a distributed non distributed or multiprocessing environment.

The present invention has been described above with reference to exemplary features and embodiments. Those skilled in the art will recognize however that changes and modifications may be made in these exemplary embodiments without departing from the scope of the present invention. These and various other adaptations and combinations of the embodiments disclosed are within the scope of the invention and are further defined by the claims and their full scope of equivalents.

