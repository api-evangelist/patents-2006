---

title: Resource management in virtual machines using dynamic table for performing resource queries
abstract: Systems and methods are provided for intelligent resource management for a virtual machine. A method for operating a virtual environment can comprise receiving a request for a resource from an application, processing the request to identify the resource, determining whether the resource is for the virtual environment, and modifying a part of a data structure for the request based on a reference to the resource in the virtual environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08505006&OS=08505006&RS=08505006
owner: Ringcube Technologies, Inc.
number: 08505006
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20060922
---
This U.S. nonprovisional patent application claims the benefit of U.S. Provisional Patent Application Ser. No. 60 811 582 filed on Jun. 6 2006 entitled Systems and Methods for a Hot Pluggable Virtual Machine U.S. Provisional Patent Application No. 60 811 591 filed on Jun. 6 2006 entitled Intelligent Resource Management for a Virtual Machine U.S. Provisional Patent Application No. 60 811 572 filed on Jun. 6 2006 entitled Intelligent Resource Management using a Dynamic Table for a Virtual Machine U.S. Provisional Patent Application No. 60 771 998 filed on Feb. 10 2006 entitled Dynamic Table System U.S. Provisional Patent Application No. 60 772 000 filed on Feb. 10 2006 entitled System and Method For Virtualizing An Operating System U.S. Provisional Patent Application No. 60 772 001 filed on Feb. 10 2006 entitled Hot Pluggable Transportable Virtual Environment and U.S. Provisional Patent Application No. 60 772 002 filed on Feb. 10 2006 entitled Intelligent Resource Management for a Virtual Machine which are all incorporated herein.

The present application is related to U.S. Nonprovisional patent application Ser. No. 11 525 726 filed on Sep. 22 2006 entitled Hot Pluggable Virtual Machine and U.S. Nonprovisional patent application Ser. No. 11 525 727 filed on Sep. 22 2006 entitled Dynamic Table Configuration in a Virtual Machine which are also incorporated herein.

The present invention relates generally to virtual machines and more particularly to intelligent resource management for a virtual machine.

Virtual machines VMs allow a computer to simultaneously support and execute two or more computing environments. A computer environment comprises the operating system as well as user applications and data. A VM is configured to borrow computing resources such as CPU disk and memory from a host computer and co exist alongside the host computer as a guest computer.

Due to a large software footprint current VMs can not be easily transported from one host computer to another host computer. To be portable the VM requires the capability to adapt to any given host environment and reconfigure its resources based on the presence or absence of hardware or operating system resources on the host system. Additionally the resources on the guest computer must remain isolated from the resources on the host computer and vice versa.

When a VM accesses operating system resources on the host computer the host computer isolates certain operating system resources such as the file system registry kernel objects and services from the guest computer. As such there exists a need to determine whether to access operating system resources within the host computer or operating system resources within the guest computer to maintain isolation between the host computer and the guest computer.

One technique to accomplish this goal to is maintain two separate operating systems with two sets of system files thereby allowing the virtual machine to operate independently. Unfortunately the additional files grow as new applications are installed on the virtual machine. Further duplicate and redundant files may ultimately be stored and maintained on both the virtual machine and host computer. As a result the supporting files and related hardware requirements may be burdensome to the host computer and performance may slow. Further the size of the files and necessity for hardware storage may become a burden in porting the virtual machine from one host computer to another.

Systems and methods are provided for intelligent resource management for a virtual machine. A method for operating a virtual environment can comprise receiving a request for a resource from an application processing the request to identify the resource determining whether the resource is for the virtual environment and modifying a part of a data structure for the request based on a reference to the resource in the virtual environment.

The request for a resource may comprise an invocation to an application programming interface API . Determining whether the resource is for the virtual environment can comprise identifying the resource and the virtual environment with a table. The method may further comprise updating the table with the reference to the resource.

Determining whether the resource is for the virtual environment can also comprise identifying the resource and the virtual environment using a rule. Modifying the part of the data structure for the request based on the reference to the resource in the virtual environment can comprise modifying an object name of the resource. The method may further comprise allowing the request to proceed to an operating system.

A software product for operating a virtual environment can comprise software operational when executed by a processor to direct the processor to receive a request for a resource from an application process the request to identify the resource determine whether the resource is for the virtual environment and modify a part of a data structure for the request based on a reference to the resource in the virtual environment and a storage medium configured to store the software.

A system for operating a virtual environment can comprise a memory and a processor. The memory may be configured to store data. The processor may be configured to receive a request for a resource from an application process the request to identify the resource determine whether the resource is for the virtual environment and modify a part of a data structure for the request based on a reference to the resource in the virtual environment.

The embodiments discussed herein are illustrative of one example of the present invention. As these embodiments of the present invention are described with reference to illustrations various modifications or adaptations of the methods and or specific structures described may become apparent to those skilled in the art. All such modifications adaptations or variations that rely upon the teachings of the present invention and through which these teachings have advanced the art are considered to be within the scope of the present invention. Hence these descriptions and drawings should not be considered in a limiting sense as it is understood that the present invention is in no way limited to only the embodiments illustrated.

A system for managing resources in a virtual machine includes a guest memory a host memory and a processor. The guest memory is a memory associated with a guest computer or guest virtual environment comprising guest resources. The guest resources include files such as applications data files registry entries and kernel objects that are stored within the guest memory. The host memory is a memory associated with a host computer for storing host resources including for example applications registry entries and kernel objects.

The virtual machine can execute a guest environment that is a separate virtual environment from the host environment. In one example the guest environment appears to be a separate operating system from the operating system of the host environment. In exemplary embodiments the host environment and the guest environment may be run concurrently with no appreciable change in performance. The applications within the guest environment may be completely isolated from the applications with in the host environment.

Requests regarding resources i.e. resource requests between the operating system of the host computer and the host or guest environments may be intercepted. If the resource request is determined to be for or concerning the guest environment the data structure of the resource request may be modified before allowing the resource request to continue to the original destination.

In one example a resource request e.g. invocation to an application programming interface is sent from an application running in the guest environment to the host computer s operating system. The resource request is intercepted and it is determined that the desired request is not in the host memory but rather in the guest memory. The resource request is modified e.g. the name of the resource altered to identify the location of the desired resource as within the guest memory and then the modified request is allowed to pass to the operating system. By processing and modifying the resource query as needed the system can advantageously operate a virtual machine in a host computer using operating system resources installed in the host computer.

One advantage that may be afforded by this approach to virtualization is that host applications and data are kept isolated from guest applications and data so that a software crash virus or data corruption in one guest environment cannot propagate to the host environment nor to another guest environment.

The host environment comprises for example user applications and data files stored within a host memory. The host environment may further access for example library files configuration files registries and or or kernel objects. The operating system comprises for example Windows or Linux . The hardware includes hardware resources such as ports processors memory and input output devices including for example a display speakers printers a keyboard and or a mouse. In operation a user may operate the host system as if the host system is a personal computer without a virtual machine. The host environment may be substantially unaffected by the presence of a virtual machine.

The guest environment comprises files specific to the virtual machine. Files i.e. resources within the guest environment may comprise application files data files registry files library files configuration files kernel objects and or cookies.

The virtual machine manager mediates requests for resources from applications determining whether the requests are to be passed through to the host environment or maintained within the guest environment . Other configurations also within the scope of the invention for example include multiple virtual machine managers .

In some embodiments if the requested resource is for a guest environment the virtual machine manager performs namespace virtualization to modify the data structure to indicate that the resource is part of the guest environment . Namespace virtualization is the technique of renaming resources in order to direct the operating system to the desired resource or lead to the desired effect. Namespace virtualization may comprise converting the value of an object name from its value in a host environment into a new value specific to a guest environment .

In an exemplary embodiment the virtual machine manager intercepts resource requests such as invocations to application program interfaces and identifies the resources from within a data structure of the resource request.

The resource request comprises the data structure which indicates the information associated with the resource request including but not limited to an object name an object type a resource action request and an output location. The object name may identify the name of the resource as well as the location of the resource. The object type identifies the type of resource identified by the object name. The resource action request is the action to be performed e.g. read write. The output location is the location where the output from the resource action request.

The virtual machine manager may determine if the resource is for the guest environment . If the resource is for the guest environment the virtual machine manager may perform namespace virtualization on the data structure.

In one example a data structure for a request for a write to a sound card port may include the following associations object name SoundPort object type port resource action request write and output location n a. The virtual machine manager may determine that this request should be handled by a guest operating system in a virtual environment. Then the virtual machine manager would perform namespace virtualization by modifying the object name from SoundPort to Virtualized SoundPort . This change to the object attributes data structure may indicates that the requested resource is now part of the guest environment . Subsequent requests for the resource named Soundport may be automatically redirected to the guest environment .

Operating systems or the virtual machine manager may use many different ways of naming various resources. Namespace virtualization is not limited to any particular operating system or naming technique. Those skilled in the art will appreciate that many types of naming techniques are within the scope of various embodiments. Once namespace virtualization has been performed for a particular request the virtual machine manager pass the modified request to the operating system .

In various embodiments the virtual machine manager described can dynamically track and catalog operating system resource usage allowing some resource requests to pass through to the host environment while modifying the data structures of other resource requests so that the operating system maintains them in a guest environment. This tracking and cataloguing of resources can be used to enforce policy based guest environments. Because the virtual machine manager may operate at the level of the host operating system it may have a small software footprint on the host computer.

In an exemplary embodiment the virtual machine manager maintains a list of operating system resources and upon each resource request adds the requested resource to a catalogue. Over time a consolidated list of resources required by a guest environment or client operating system may be compiled. The consolidated list may comprise the input to a dynamic table system which can be used by the virtual machine manager to determine whether a specific resource request should be allowed or refused.

The virtual machine manager can access dynamic tables for determining whether to read files associated with the host environment or the guest environment . The dynamic tables can comprise tables for storing names of operating system resources where the names are categorized into a suitable taxonomy for the operating system in use. The processor of the host computer can process a resource query such as a resource request or a directory query according to the dynamic tables.

The dynamic tables may contain one or more lists of resources associated with the operating system . In some embodiments the list of resources corresponds to files stored on the host memory or the guest memory further described in . In some embodiments the dynamic tables comprise a File Exception Table FET and a File Inclusion Table FIT . The FET may indicate that a resource should be read for the host environment from host memory further discussed in and the FIT may indicate that a resource should be read for the guest environment from guest memory further discussed in .

The port interface allows for connections and data exchange with peripheral components e.g. guest memory . Examples of peripheral components that may be connected to the host computer using the port interface include memory devices such as flash memory storage devices USB drives hard drives CD drives and DVD drives. The port interface may comprise for example a Universal Serial Bus USB port. In exemplary embodiments the guest memory is portable and may be used within many host computers .

In various embodiments of the present invention the guest memory includes all the required data for setting up one or more guest environments including various guest resources and or a virtual machine manager . Once connected to the host computer using the port interface software present in the guest memory may be activated to install and execute the guest environment . Some embodiments install the virtual machine manager in host memory . In some embodiments the virtual machine manager remains in guest memory .

The guest memory may additionally comprise dynamic tables for determining whether to read files associated with the guest memory or the host memory . The dynamic tables may contain a list of resources associated with the operating system . In some embodiments the list of resources corresponds to files stored on the memory of the host computer or the guest memory . In some embodiments the dynamic tables comprise the FET and FIT tables. The FET may indicate that a resource should be read from the host memory and the FIT may indicate that a resource should be read from the guest memory .

The dynamic table entries indicate a file name having a standard hierarchical file structure in a table. For example the file name WINDOWS TEMP may appear in the FIT and the file name WINDOWS may appear in the FET. In this example a file in WINDOWS TEMP will be read from the guest memory but a file in WINDOWS SYSTEM will be read from the host memory . The process of matching old operating system resources to new operating system resources is further discussed in U.S. patent application Ser. No. 11 525 727 entitled Dynamic Table Configuration in a Virtual Machine filed Sep. 22 2006 which is hereby incorporated by reference. 

In step the virtual machine manager processes the request to identify the requested resource. In exemplary embodiments the virtual machine manager intercepts the application program interface call i.e. the request generated by an application from either the host environment or the guest environment . The virtual machine manager then identifies the resource within the application program interface call.

In step the virtual machine manager determines whether the requested resource is for the guest environment . In exemplary embodiments the virtual machine manager comprises a dynamic table. In some embodiments the dynamic tables comprises tables of files stored in the host memory e.g. the FET table and in the guest memory e.g. the FIT table. 

The virtual machine manager may determine a FET weight and a FIT weight with respect to a resource name to determine whether the requested resource is for the guest environment . In one example the FIT weight is less than the FET weight and as result the virtual machine manager may determine that the requested resource is for or from the guest environment . As a result the resource may be read from the guest memory and namespace virtualization will be necessary in step . The dynamic table is further discussed in U.S. nonprovisional patent application Ser. No. 11 525 727 entitled Dynamic Table Configuration in a Virtual Machine filed Sep. 22 2006.

In exemplary embodiments the virtual machine manager identifies the environment e.g. guest environment or the host environment application that sent the request and then determines that the requested resource is for the identified environment. The virtual machine manager may identify the environment of the running application or check a registry e.g. operating system registry and or guest memory registry to determine the environment for the requested resource. If the requested resource is for the host environment then the process ends.

If the requested resource is for the guest environment then the virtual machine manager modifies a part of a data structure for the request based on the guest environment in step . In one example the file to be read is determined to be for the guest environment . Although the original request may identify the location of the file to be read as being located on the c drive at the windows directory the data structure may be modified such that the request identifies the location of the file as the p drive at the same directory i.e. windows . The p drive may identify the guest memory or a mounted volume contained within the guest memory .

In exemplary embodiments the dynamic table comprises virtualization data to assist the virtual machine manager to modify the request. Virtualization data is data that comprises locations and modifications to be used if the virtual machine manager determines namespace virtualization is necessary. In one example the dynamic table comprises virtualization data that identifies all files to be pulled from the guest memory as pulling from the p drive.

In other embodiments the virtual machine manager scans a registry to determine the appropriate modification. The registry may be an operating system registry or a guest memory registry. In one example the guest memory is operationally coupled with the host computer . Upon activation the guest memory may configure and load a registry into the host computer . The registry is further discussed in U.S. nonprovisional patent application Ser. No. 11 525 726 entitled Hot Pluggable Virtual Machine filed Sep. 22 2006.

The operating system itself needs no modification to process resource requests from the host environment and the guest environment . In exemplary embodiments the operating system receives and processes the unmodified resource requests from the host environment as well as modified resource requests from the guest environment without interruption. The unmodified resource requests are those that do not undergo namespace virtualization. Modified resource requests from the guest environment or for the guest environment are namespace virtualized. The locations of the resources or the output of function calls are simply redirected as a result of the namespace virtualization. By modifying the data structure of requests virtual machines may run on a host computer without the complexity of duplicating functions of the operating system or creating new application programming interfaces.

Although examples of namespace virtualization may discuss location of resources such as files or the output of functions those skilled in the art will appreciate that the resource requests may be modified in many ways such that the operating system can process requests from the host environment and the guest environment . In one example the guest environment comprises an application configured to operate on a different operating system than the operating system . The virtual machine manager may alter resource requests configured to work with one application programming interface of the virtualized environment e.g. Linux to translate the resource requests such that a Windows application programming interface will recognize the request.

A resource request in its original form in column is found by the virtual machine manager to be for the guest environment . Accordingly the virtual machine manager performs the following translations to forms identified in column . In this example the names i.e. locations of files identifying the C drive are translated so that the names of the files identify the P drive. Configuration related requests are translated to include the prefix name VM to reroute the operation of the request. After this namespace virtualization process the operating system sees the resource request in the virtualized form and executes the requests accordingly.

In some embodiments hardware resources remain unchanged. In other embodiments hardware resource requests by the guest environment may be for emulated hardware. As a result the hardware resource request may be modified to identify the emulated hardware and or the appropriate driver.

The translations made by the virtual machine manager performing namespace virtualization shown in are simple examples. Namespace virtualization may comprise any virtualization rules including these examples and much more complex translations. Namespace virtualization may be performed on the following nonexhaustive list of examples names of registry values used by a operating system to store system and application configuration information kernel objects used by an operating system to represent or manage a resource such as events semaphores names pipes mutexes or mutants mailslots ports sections of shared memory segments timers jobs symbolic link objects and so forth application program interfaces for file management and names that include wildcards.

The virtual machine manager may perform namespace virtualization in various ways. In some embodiments the virtual machine manager performs rule based namespace virtualization using a set of rule tables in combination or within the dynamic table. In some embodiments separate rule tables are changed by the operating system during execution thereby allowing adaptation to the changing needs of the guest environment . In one example the virtual machine manager creates a separate rule and populates a rule table for each called resource from the guest environment . Upon a resource request the virtual machine manager may check a rules table. If the resource is identified within the rules table the virtual machine manager may perform namespace virtualization. In other embodiments rules are formed by the dynamic tables.

In various embodiments rules can be formed to apply to namespace virtualization. In one example a rule may be formed that whenever a resource is called by an application within the guest environment the name of the resource must be modified to identify a resource within guest memory e.g. from c windows to p windows. These rules could function to limit processing time to determine the proper modification during namespace virtualization. Other rules may automatically direct hardware calls from the guest environment to virtualized or emulated counterparts. Those skilled in the art will appreciate that there may be many ways to create rules for namespace virtualization.

In step the virtual machine manager uses a dynamic table to analyze the request to identify the object name of the resource to determine whether the resource is for the guest environment . The dynamic table may be within the guest memory or the host memory . In other embodiments the virtual machine manager may use a registry to identify the object name of the resource.

In step the virtual machine manager determines if the namespace virtualization is to be performed. If the resource is not for the guest environment then the virtual machine manager allows the invocation of the application programming interface to pass to the operating system in step without modification. If the virtual machine manager determines that namespace virtualization should be performed the virtual machine manager changes the object name of the resource in the data structure of the request to reflect the proper location of the resource input and or output for the guest environment in step .

In step the virtual machine manager adds the object name to the dynamic table. In some embodiments the virtual machine manager determines if the dynamic table identifies the resource the object name and or any modifications if the object name is to be modified. If the resource object name and or any modifications is missing or incorrect the virtual machine manager may add the information into the dynamic table. The virtual machine manager may then allow the modified invocation of the application processing interface to pass to the operating system .

In exemplary embodiments the virtual machine manager intercepts the resource request sent from an application to the operating system . The virtual machine manager processes the resource request to determine the object name of the resource. The virtual machine manager may then access the dynamic table and determine the whether the resource is for the guest environment based on a process involving weighing on a FIT and FET table further discussed in . If the resource is for the guest environment the virtual machine manager may scan the dynamic table for appropriate modifications. If modifications are present within the table the virtual machine manager may make alterations to the object name of the resource based on the modifications identified within the dynamic table or confirm the modifications prior to making the changes to the object name e.g. comparing the modifications within the dynamic table to a registry. 

If the resource is for the guest environment then at step the virtual machine manager determines that it must perform namespace virtualization of the object name and proceeds to step . At step the virtual machine manager changes the object name of the resource in the data structure of the application program interface for the resource to reflect the proper association of the resource with the guest environment . In some embodiments the virtual machine manager changes the location of the output of the resource request. At step the virtual machine manager adds the object name to the dynamic table system.

At step the virtual machine manager allows the invocation of an application program interface to pass to the operating system . Thus if the application program interface pertained to a request for a resource for the guest environment at step the operating system sees a request that is different from the original request made by the application. If the resource is not for the guest environment then at step the virtual machine manager proceeds directly to step .

The embodiments and examples discussed herein of virtualization may allow for the portability of one or more guest environments from one host computer to another. For example the virtual machine can reside within a guest memory e.g. USB storage device that may be coupled with different host computers. The virtual machine can provide guest environment capabilities to a variety of host computers reconfiguring resources based on the presence or absence of software and peripherals on a particular host computer . As a result little or no modifications to the host computer may need to be made. Further rebooting may not be required.

In exemplary embodiments virtual management software or files do not need to be installed on the host computer. In one example files are not needed to be copied from the guest memory to the host computer since each command for the files resources within guest memory may be modified so that the operating system addresses the correct file resource within the guest memory . As a result the boot time for the virtualization software on the guest memory may be very short.

While various embodiments have been described above it should be understood that they have been presented by way of example only and not limitation. For example any of the elements associated with the intelligent resource management for a virtual machine may employ any of the desired functionality set forth hereinabove. Thus the breadth and scope of a preferred embodiment should not be limited by any of the above described exemplary embodiments.

