---

title: Transformation of modular finite state transducers
abstract: A Q Framework, or QFX for short, is provided for performing efficient tree transformation in a generalized manner that achieves preservation of action semantics for FSTs that support action information in their representations across a diverse set of types of representations for FSTs. Among other features, the QFX also enables the preservation of ordered and unordered nest information while performing tree transformation, supports the transformation of non-deterministic data structures to a deterministic data structure and enables intersection operations on machines having action semantics.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07627541&OS=07627541&RS=07627541
owner: Microsoft Corporation
number: 07627541
owner_city: Redmond
owner_country: US
publication_date: 20060915
---
This application is related to co pending U.S. patent application Ser. No. 11 532 349 filed Sep. 15 2006 entitled TRANSFORMATION OF MODULAR FINITE STATE TRANSDUCERS the entirety of which is incorporated herein by reference.

A portion of the disclosure of this patent document may contain material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent files or records but otherwise reserves all copyright rights whatsoever. The following notice shall apply to this document Copyright 2005 2006 Microsoft Corp.

The invention is directed generally to finite state automata such as finite state transducers and more specifically to the transformation thereof.

By way of general background finite state machines FSMs also known as finite state automata FSA are models of behavior for systems composed of states transitions and actions. FSMs or FSA can be represented in a variety of conceptual ways using state diagrams state transition diagrams state tables labeled directed graphs trees etc which preserve the relationships of states transitions and actions that comprise the machines or automata. There are different kinds of FSMs or FSA equivalencies among them and various known conversions among some of them as well.

Presently some graph transducers and tree transducers exist that accomplish some aspects of transforming a set of systems modeled by FSTs e.g. for some types of directed graph data structure s to form a new FST or set of FSTs e.g. new directed graph data structure s however such systems are limited for various reasons. The Extensible Stylesheet Language Transformation XSLT for instance is an XML based language used for the transformation of XML documents. When used to transform other XML documents the document is not changed rather a new document is created based on the content of the existing XML document. The new document may be serialized output by the processor in standard XML syntax or in another format such as HTML or plain text. XSLT is often used to convert data between different XML schemas or to convert XML data into web pages or PDF documents.

In essence XSLT allows the creation of an XML document that describes the transformation of other XML documents which may in turn be translated to different formats. However XSLT fails to take into account action semantics that can be represented in FSTs. In this respect an action might be when in a pre defined state once certain information is recognized e.g. a name perform some action. However to the extent that such arbitrary actions can be defined for an FST XSLT is unable to handle calls to such arbitrary actions as part of its transformative capabilities. In addition XSLT is unable to perform all of the complement intersect and union operations on machines.

Still further existing transforms such as XSLT are also unable to match and compose FSMs having both ordered and unordered hierarchical information such as ordered and unordered nests e.g. as represented as a tree structure . While in certain circumstances there are some systems that can handle preservation of only ordered information when transforming trees and there are some systems that can handle preservation of only unordered information when transformation neither XSLT nor any other known system includes transformative capabilities that can preserve both ordered and unordered nests across directed graphs or tree structures. These and other deficiencies in the state of the art of transformation of finite state transducers will become apparent upon description of the various exemplary non limiting embodiments of the invention set forth in more detail below.

In consideration of the above described deficiencies of the state of the art the invention provides a general framework for performing efficient tree transformation for FSTs e.g. intersections unions complements etc. that preserves action semantics across transformative operations for FSTs that support action information in their representations across a diverse set of types of representations. The framework for performing efficient tree transformation for FSTs is also able to preserve ordered and unordered nest information while performing tree transformation and is capable of supporting the transformation of non deterministic data structures to a deterministic data structure.

In one embodiment the invention provides a method for transforming data structure s specifying tree structure s in a computing system to modular finite state transducer s MFSTs . The method includes receiving data structure s specifying tree structure s representing finite state transducer s FSTs including semantics for defining ordered and unordered information and for any type of finite state machine FSM model represented by the data structure s the method transforms the data structure s to MFSTs while preserving the ordered and unordered information of the data structure s in the MFSTs. The transforming includes performing any of an intersection union and complement operation or any operations that are reducible to any of intersection union and complement operations on the data structure s . In another aspect of the invention it can be decided from the result FSM whether the resulting FSM accepts a non empty input.

A simplified summary is provided herein to help enable a basic or general understanding of various aspects of exemplary non limiting embodiments that follow in the more detailed description and the accompanying drawings. This summary is not intended however as an extensive or exhaustive overview. The sole purpose of this summary is to present some high level concepts related to the various exemplary non limiting embodiments of the invention in a simplified form as a prelude to the more detailed description that follows.

As mentioned in the background current frameworks for transforming FSTs and tree data structures e.g. labeled directed graphs as they tend to be represented in computing memory are not versatile enough to preserve some types of information when transforming across all types of FSTs. For instance current frameworks are unable to preserve action semantics of some FSTs or both ordered and unordered nest information represented by FSTs across a host of types of FSTs.

Accordingly the invention provides a general framework termed the Q Framework or QFX herein for performing efficient tree transformation that achieves preservation of action semantics for FSTs that support action information in their representations. The Q framework for performing efficient tree transformation of the invention is also able to preserve ordered and unordered nest information while performing its efficient tree transformation. As will be appreciated from the following description the QFX also enables a host of other novel aspects relating to transformative capabilities for a defined tree grammar and corresponding translations transducer diagrams a transformation engine and operations performed by the transformation engine translation cases and determinization including variable renaming as described in more detail below. In one embodiment of the invention the invention enables at least intersection union complement and emptiness test transforms on tree representations or sets of tree representations.

By way of further introduction modular finite state transducers MFSTs are state machines that implement transformations. In particular MFSTs are MFAs augmented with program fragments called actions . Common actions include construction of objects from other objects stored in an environment binding of variables within an environment and execution of predicates during pattern matching.

In this regard at a high level the Q Framework QFX of the invention enables programmers to define regular tree grammars with actions and to translate these grammars to MFSTs. QFX supports use of any Domain Specific Language DSL to define actions. In addition QFX provides special support for variable binding actions yielding a kind of tree grammar called an attributed tree grammar. The following exemplary non limiting implementation s of the invention describe how QFX is able to compile and execute attributed tree grammars.

In this regard the compilation approach of the present invention is advantageous for a number of reasons. The compilation approach provides support for high performance transformation via optimizations and other high performance approaches. The compilation technique also enables simplification of run time components so that the production of simple transformation machines can be easily achieved. As will be described in exemplary non limiting detail below the compilation techniques described herein also provide a set of clear semantics. In this respect the compilation approach of the invention makes it easy for programmers to reason about the semantics of a tree grammar including composition and side effects.

In general as shown by the flow diagram of the present invention enables a general framework for receiving diverse types of finite state transducers FSTs data structures having action semantic information in a computing system at and then applying a transformation engine of the framework at to the FSTs. Then at analysis and transformation of the FSTs occurs in accordance with a pre defined tree grammar for any type FST representation as described in more detail below. As a result the FSTs are transformed to generate an MFST at that inter alia preserves action information of the FSTs e.g. while performing any of intersection complement and union operations on two or more FSTs preserves ordered and unordered nest information and enables transformation of non deterministic FSTs into a deterministic result.

Thus in various non limiting embodiments the invention enables the transformation of tree data structures in a computing system to a modular finite state transducer MFST . The tree data structures representing FSMs e.g. FSTs include action semantics defining action information pertaining to the FSMs that is preserved through the transformation process. In one embodiment for any type of FSM model represented by the tree data structures e.g. directed graph data structures XML documents etc. the invention transforms the tree data structures to an MFST while preserving the action information. An extensible pre defined translation grammar is implemented by a transformation engine that preserves the action information irrespective of the type of FSM model represented by the tree data structures preserves both ordered and unordered nest information of the tree data structures and transforms non deterministic data structures to a deterministic MFST. Advantageously the invention can handle complements intersection and union of type of FSM as part of the transformation process.

In further embodiments the invention includes a Q framework QFX including components and software for performing transduction of directed graphs to a modular finite state transducer MFST including the ability to analyze directed graph data structures of any type in a computing system and transducer the directed graph data structures to a MFST based on the analysis while preserving action semantics of the directed graph data structures. The QFX performs control flow analysis algorithm s on the finite state machines FSMs represented by the directed graph data structures in a way that preserves the action semantics information of the directed graph data structures across any type of directed graph representation.

In addition the QFX includes a transformation engine that performs specialized binding handling in connection with transducing the directed graph data structures. The specialized binding handling includes performing binding for the action semantics information during pattern matching. Furthermore the transducing includes the ability to in line at least one transducer definition as defined by a directed graph data structure of the directed graph data structures. Also the transducing includes compiling variable bindings of the directed graph data structures to slots in the existing activation record and also includes register analysis of the finite state machines FSMs represented by the directed graph data structures. A grammar defined by the invention that achieves the above effects and advantages of the invention may be implemented via a software interface such as a C interface that describes directed graph data structures including action semantics information.

In addition in various embodiments the invention implements lexical analysis with variable binding. Still further QFX is extensible providing efficient interoperability with different transformation providers. Additionally the invention implements control over the trade off between compilation and execution performance i.e. implementations can interpret patterns without expensive compilation and compile particular patterns for repeated use. Lastly runtime components can participate in the QFX scheduling discipline by supplying variable granularity continuation points enabling use of the same mechanism to supply either single or multiple results.

The following simplified tree grammar syntax of Table I below is an exemplary non limiting model that may be utilized in connection with compilation processes in accordance with the invention.

In the above grammar an exemplary operator precedence that may be applied is REPEAT BIND SEQUENCE AND OR. In the description that follows x is used to represent a variable b is used to represent a base symbol a type or a value of a base type T is used to represent an MFST a is used to represent an action and T Ref is used to represent a reference to T.

With respect to the state of the art of translation of regular expressions to NFAs and with respect to the determinization of NFAs a general review of such translation techniques can be found for instance in Aho et al. Compilers Principles Techniques and Tools Addison Wesley 1986 or in Hopcroft et al. s Introduction to Automata Theory Language and Computation Addison Wesley 2000 . As an improvement on such state of the art techniques in accordance with the QFX regular tree grammars defined via the techniques of the invention can be expanded with actions to MFSTs.

Also the translations discussed in Aho et al. purport to cover the following cases from the above grammar OR AND BASE SEQUENCE REPEAT and REF however to handle 1 actions 2 nesting and 3 variable binding according to the invention translations are desired for the following additional cases notated as shown in Table II below 

The ACTION REGEX and REGEX ACTION cases handle compilation of tree grammars with general actions. The BIND REF BIND GROUP BIND NEST BIND REF REPEAT BIND GROUP REPEAT and BIND NEST REPEAT cases handle compilation of variable bindings. The BIND NEST cases also extend regular expressions to nested regular expressions.

Though not shown in the simplified tree grammar syntax of Table I non terminal definitions in accordance with the invention may have both regular parameters and type parameters. In one embodiment the compiler handles regular parameters as inherited attributes and handles type parameters using the BIND REF and BIND REF REPEAT translations.

The transformations to MFSTs in accordance with the invention may be described in exemplary fashion using state machine diagrams that define the MFSTs. In the diagrams transitions are labeled as follows b a where b is the input symbol consumed and a is the action performed. a represents a transition that consumes no input but performs some action. This class of transition is referred to as an action transition. In executing transducers in one embodiment of the invention a maximal progress policy is implemented which assigns a lower priority to the action transitions from a state than all of the input consuming transitions from that state. In the diagrams the special symbols and represent the beginning and ending respectively of input collections. Variable bindings are written as x expr and apply to the current environment of the transducer.

For the repetition operators i.e. and collections of results are accumulated using lists but the mechanism can be generalized to cover accumulation of results into any collection type e.g. by using the corresponding join operator.

In accordance with various embodiments of the invention the BIND REF and BIND REF REPEAT cases are expanded in two ways inline and call. The inline expansion trades space for time and thus in one non limiting implementation of the invention the inline expansion is preferred when determinizing an MFST. Generally the call expansion is used in three cases. The first case is when compiling for interpretation. In this case the compiler does not determinize the MFST and expands all references as calls. The second case is recursion. For instance if T Ref refers to the start symbol the compiler expands the reference as a call. The third case is extension. If T Ref refers to an opaque MFST the compiler expands the reference as a call.

The compiler of the invention translates tree grammars to instructions for a virtual machine called a transformation engine XE . The XE supports the following 1 Definition and operation of transducers 2 Transfer of control to other transformation engine instances and 3 Management of and access to environments.

With respect to the first category techniques for persisting and interpreting state machine definitions are known. Accordingly described below are exemplary non limiting methods for achieving the second and third instruction categories Transfer and Management. In accordance with the invention these instructions are defined as methods in a pair of interfaces. The compiler does not generate calls to these interfaces directly rather the compiler generates XE instructions that are interpreted by an XE implementation.

An XEControlInstructions interface provided in accordance with the invention is illustrated in the exemplary pseudo code of . The XEControlInstructions interface has the current XE instance as an implicit operand i.e. the this pointer of the XEControlInstructions interface .

A Mark method provided in exemplary embodiments of QFX records the current location in the input term on the mark stack. A Yield method pops a mark M off the mark stack and returns the portion of the input term between M and the current location. In one embodiment QFX implements these methods by indirection through a traversal provider interface. Such an approach advantageously separates term representation and traversal from term transformation. Traversal providers can thus implement traversal by applying the QFX transformation framework to any particular data representation.

A Call method provided in accordance with the invention creates a new environment E and saves continuation and callingEnvironment in E see e.g. XEControlInstructions interface of . The Call method then returns a continuation that transfers control to target. The Call method also calls the Mark method to save the current input location. A Return method inverts this operation and operates to save the matched term in the current environment E using the Yield method E.term Yield . Then the Return method stores E in the variable callingEnvironment.result finally the Return method returns continuation. When called continuation sets the current environment to callingEnvironment and continues from the calling state.

A NewEnvironment method creates a new environment in accordance with the invention. In addition the exemplary non limiting pseudo code and pseudo code of outline the operation of PushEnvironment and PopEnvironment methods respectively.

The PushEnvironment method saves the current environment on an internal environment stack and creates a new environment e.g. named tempEnv. PushEnvironment then binds tempEnv to variableName sets the current environment to tempEnv and calls Mark to record the current input location.

The PopEnvironment method records in the variable term the sub term matched since the preceding Mark call. PopEnvironment then restores the current environment from the environment stack. PopEnvironment does not save the popped environment because the corresponding call to PushEnvironment has already bound the popped environment.

Additionally an Exec method executes an action in accordance with the invention. In an exemplary implementation of QFX an ActionReference is a table index corresponding to a separately persisted and loaded table of method pointers.

An XEEnvironmentInstructions interface provided in accordance with the invention is illustrated in the exemplary pseudocode of . The XEEnvironmentInstructions interface has an environment instance as an explicit operand i.e. the this pointer of the XEEnvironmentInstructions interface .

A ChildEnv method creates a new nested environment whose parent is this of the this pointer. A Bind method binds a variable to a value returning true if the binding succeeds. In an exemplary non limiting embodiment if variableName has a current binding the Lookup method sets value to that binding and returns true. Otherwise it returns false.

Operation of the transformation engine XE of the invention supports assignment of priorities to state transitions. The compiler addresses ambiguity arising from choices among patterns by ordering the transitions possible on each state. In one non limiting embodiment all transitions on normal input take precedence over wildcard transitions which take precedence over action transitions. Also within these precedence groups the programmer may optionally assign priorities to particular transitions.

XE instances may address generation of multiple results by supporting a mode in which they use all applicable transitions to continue from a state queuing continuations in priority order.

In this regard first the transducer creates an empty list and binds it to x. Next the transducer appends the result of executing a T to x. The execution and append steps are rendered optional by the forward transition marked Use this arc for and . The execution and append steps may be optionally repeated by traversal of the backward transition marked Use this arc for and .

The CurrentContinuation at the point of the call is the intermediate state IS at the end of the transition arrow. The called transducer returns its environment in the variable result. Finally the calling transducer binds the result to x.

The translation cases not described so far in are BIND GROUP REPEAT and the inline version of the BIND REF cases. BIND GROUP REPEAT combines the repetition container of with the transducer for BIND GROUP shown in . Additionally the inline versions of the BIND REF and BIND REFREPEAT cases are identical to the BIND GROUP and BIND GROUP REPEAT cases respectively.

Determinization describes how subset construction techniques can be formulated to account for transitions that may have actions in accordance with the invention. In accordance with the invention association of actions with both transitions and states is enabled. While deterministic transducers may be constructed with actions only on transitions that choice makes the algorithms more complex whereas it is straightforward to efficiently to store actions for both states and transitions.

Simplifying some details lists an exemplary non limiting closure algorithm as implemented in QFX i.e. StateTEClosure . The method is augmented to accumulate actions on E transitions. The lines marked A and A in the exemplary pseudo code of save in the list actions all actions on epsilon transitions traversed during the closure construction. The overall determinization algorithm transfers these saved actions to the deterministic finite state transducer DFST state constructed from the closure.

Overall advantageously this method for determinization in accordance with the invention achieves the following guarantees 

1. If a pair of actions a and a are elements of same production actions a and a are invoked in lexical order 

2. If action a is part of production p and action a is part of production p with p p then the transducer will invoke either a or a. The transducer may only invoke both actions in the case that p and p share a prefix pre and that pre contains a in p and pre contains a in p and

3. Within the starting definition for a grammar the final action of each production may have side effects. In one embodiment the transducer does not run this action until all other actions have completed.

In this respect attributed tree grammars enable programmers to take advantage of the above guarantees. Using attribute grammars a programmer can express all actions as variable bindings within the current environment. Such actions can take one of two forms either x T or x expression where expression may read values from the current environment or invoke code to compute a value. As long as the code executed by an expression does not introduce ordering dependencies the result of executing a tree grammar is deterministic.

Programmers can use attribute grammars to defer side effects until it is unambiguous that the side effect should be invoked. For example to traverse a tree printing text a programmer could gather the text into a string using attributes and then print the string from the final action associated with the tree grammar s start symbol. The programmer could also choose to print sub trees on the fly by deferring print actions to unambiguous non terminal definitions.

With respect to variable renaming in accordance with exemplary non limiting embodiments of the invention to ensure the independence of variable binding actions the compiler renames variables so that each variable bound in an MFST is unique. If the compiler is also generating code for a given action the compiler renames variables in a as well. If a code block B is opaque to the compiler the compiler arranges to pass to B an environment that looks up the original variable names indirectly through their updated names.

Optionally the variable renaming can be optimized by performing live range analysis and having several original variables share the same updated name. Also transducer performance may be improved by implementing variable reference as array access using a compiler determined offset.

Accordingly in one aspect the invention provides a general framework for performing efficient tree transformation that achieves preservation of action semantics for FSTs that support action information in their representations across a diverse set of representations of FSTs. Any of the intersection union and complement transformation operations and other Boolean operators with composition can be performed on FSTs while preserving action semantics.

In addition as mentioned in the background under limited circumstances there are some systems that can preserve ordered nest information across tree transforms and some systems that can preserve unordered nest information across tree transforms but there are no systems yet that can preserve both ordered and unordered tree information across tree transforms e.g. intersection union complement etc. Accordingly in various non limiting embodiments the framework for performing efficient tree transformation also preserves ordered and unordered nest information while performing tree transformations for FSTs.

The distinction between ordered and unordered information is conceptually illustrated in . shows an ordered pattern also known as a list pattern which requires the sequence of red then green then blue then red again in order to match the pattern. In a pattern matching sense therefore the order in which the elements of the pattern appear is taken into account. shows an unordered pattern which is also known as a set pattern. The set pattern of shows the same elements as the list pattern of but this time without any order. The set pattern of thus represents a set of two reds one green and one blue in any order whatsoever. It is the occurrence of the elements in the set that is taken into account when pattern matching i.e. whether the elements appear in both trees not in what order the elements appear.

An example of a list pattern matching scenario in a computing system might be the entry of a password wherein the password is a sequential set of numerals. Since each character entered for the password must be entered in a specific order in order to match against the correct password stored in the system for the user the password matching scenario will match patterns based on a tree structure having ordered information.

An example of a set pattern matching scenario in a computing system might be searching for a set of specified files e.g. Pic Amy Pic Greg Pic Neyda in a file system. When searching for the folder in which these pictures appear what is being matched is their occurrence not in what order they appear in the folder. In other words the user in the search scenario only cares to find a folder having each of these files and the order in which the pictures were stored in the system is unimportant to the user. Another example of a set pattern matching scenario is finding a certain first middle and last name together in a database where the result does not depend on whether the data was stored as last name first name middle name first name middle name last name or first name last name middle name. Any occurrence of all three in any order satisfies the database query.

In accordance with the framework of the invention transformations can be performed on MFSTs while preserving both ordered and unordered information represented by the tree data structures including any of intersect union and complement transformations. Transformations can thus be performed on patterns that combine set and list assumptions about children of the tree. Thus either ordered or unordered information that is nested in the nodes of the tree structures is preserved across transformations.

As shown by the flow diagram of the present invention enables a general framework for receiving diverse types of finite state transducers FSTs data structures including ordered and or unordered information in a computing system at and then applying a transformation engine of the framework of the invention at to the FSTs. At analysis and transformation of the FSTs occurs in accordance with the above described tree grammar for any type FST representation. As a result the FSTs are transformed to generate an MFST at that preserves action information of the FSTs e.g. while performing any of intersection complement and union operations on two or more FSTs preserves ordered and unordered nest information and enables transformation of non deterministic FSTs into a deterministic result.

In accordance with the block diagram of in an exemplary non limiting aspect the invention accepts home state machine labeled accept states in a resultant transform machine . In various non limiting embodiments the invention introduces the handling of a labeled union Uduring transformation which is a variant of union that labels the accept states of the union machine with the name of the machine from which the accept state originates.

As illustrated by the example of when performing MUM then there are three possibilities for accept state labels M M M and M . These indicate that the accept state in the labeled union machine represents an input that would be accepted by M both M and M and M respectively. As shown in greater detail in in an exemplary non limiting implementation these labels can be viewed as bits one bit per original machine. For example Mcould be assigned the low bit and Mcould be assigned the high bit. Then the possible labels can be represented as 01 i.e. Mbut not Mwould accept the input 11 i.e. both Mand Mwould accept the input and 10 i.e. Mbut not Mwould accept the input . The other possibility is 00. All non accept states of the union machine can be viewed as having this label because neither Mnor Mwould accept the input .

In this regard as shown in the block diagram of in addition to generating a resultant accept state node that represents the combination MM the invention also generates accept state nodes and representing an accept state Mand an accept state M. As shown in any of these accept states and or may be part of the resulting Accept State when the union operator M Mis encountered whereas as shown in the intersect operator M Mimplicates just the MMnode . For instance where Mis assigned the low bit and Mis assigned the high bit in one non limiting embodiment the union machine is converted into an intersection machine by finding the accept states labeled 11. If there are none the intersection machine is empty. Given a set of states A that are labeled 11 the intersection machine is generated by removing from the union machine any states from which no state in A can be reached.

Subtyping can also be captured during transformation in accordance with the invention as shown illustrated by the block diagram of . There are three results that may be determined when determinizing with component with respect to typing. M Mis one result if no Accept State is labeled M as shown at the top. M Mis another result if only Accept State MM is generated in the middle. M Mis another result if no Accept State is labeled M as shown at the bottom. Given the above transformation processes subtyping can be determined. For instance where Mis assigned the low bit and Mis assigned the high bit if all accept states are labeled 11 then Mis equal to M. If there are accept states labeled 10 and 11 then Mcontains M i.e. Mis a subtype of M .

Accordingly as shown by to perform a labeled union Ufor unordered patterns e.g. given unordered patterns Pand P in accordance with exemplary non limiting implementations of the invention the following expressions are computed P P P and P where x is the union pattern for x and x is the set of accepting runs for x. Then based on these expressions the following two results are obtained 1 2 wherein the operator LUCP of and in equation 2 above represents a labeled union cross product operation.

Next P P is re labeled so that run labeling is consistent. For instance re labeling is achieved by re writing every l in a group of redundant labels R. From R an arbitrary member z e.g. the lowest numbered label or the lowest ordered bit in the above described bit per label implementation is selected and l is re written to z for each l in R. For instance as shown in where P P has exemplary accept state labels ASL including L L L L L L and L L then Lcan be replaced by Land Lcan be replaced by Lto form condensed accept state labels ASL i.e. L L L and L .

As mentioned the operator LUCP of and in equation 2 above represents a labeled union cross product operation. Having re labeled the accepting runs of Pand Pas described in the previous paragraph the labeled union cross product operation can be defined according to the following non limiting process. First the operator Uis defined for a pair of runs Rand R. To do so Label R is defined as the label of run R. R is then defined as a set of pairs l x y where l is some label from the re labeled P P x is the minimum of occurrences of l y is the maximum of occurrences of l and x y 0 . R Ris computed by considering each pair of elements in R R i.e. the cross product of Rand R as follows. For each pair l x y l x y if l l then l x y l x y becomes l x y U l x y using an interval union operation. Otherwise l x y l x y is the empty set.

Thus for a member z in R R i.e. the cross product of Rand R Uis computed as either l x y U l x y or the empty set. RURis then computed by taking the union over those results to form a resulting set S. If S has the same cardinality as Rand R then RURis S with labels e.g. Label R and Label R . Otherwise RURis R R in which case Rand Rare disjoint and they are kept with separate labels.

To summarize RUR the definition of Ufor runs Rand Rin accordance with the invention is first computed according to the above described procedure. Then the result is refined by taking the intersection of Rwith RUR and the intersection of Rwith RUR i.e. R RUR and R RUR . R RUR and R RUR are performed using a similar methodology as for the union operator U but with interval intersection instead of interval union operations.

To achieve this in exemplary non limiting embodiments of the invention the union run is divided into pieces R R and R R. These pieces R R and R Rare then labeled with Label R Label R and Label R Label R respectively.

Accordingly where Pand Pare unordered patterns the determination of PUPcan be performed. In this regard the invention enables PUPto be calculated as an unordered pattern with a union pattern portion and a set of accepting runs of the union pattern with each run labeled with labels from P Por both. PUPcan then be unions with some other unordered pattern P which also has a union pattern and a set of labeled runs and so on for another unordered pattern P.

For supplemental understanding a variety of usage scenarios of the present invention illustrate the broad variety of applications to which pattern matching using the Q framework of the invention may be applied in computing systems. The ability to match while preserving action semantics or ordered and unordered information embedded in the trees being transformed thus enables a broad set of pattern matching systems in a computing systems. The actual scenarios chosen however are merely exemplary and thus are not to be taken as limiting on the universe of pattern matching to which the invention applies. Indeed the capabilities of transforming MFSTs in accordance with the invention are by definition quite broad since one need not be concerned with losing information pertaining to action constraints or ordered and unordered information embedded in the tree representations being transformed.

In this regard as mentioned above the Q framework enables preservation of such action or ordered and unordered information when transforming MFSTs according to at least the intersection union and complement transforms. With these three transform operations a property on tree data structures can be performed known to those of skill in the art as structural compatibility or sub typing. Oftentimes a computing application will want to know whether a given tree is a subset of another given tree or set of trees or some transform operation of those trees defined by union complement or intersection .

Another important class of scenarios to which the invention may be applied is the host of applications that perform static type checking wherein a compiler looks at a program and asks for procedural compatibility. Procedural compatibility checks involve pattern matching for a set of trees and is helpful for finding bugs in computer programs.

Generally the classes of tests that a user or computing system may wish to implement against a set of tree data or subset of tree data is limitless. However some recurring tests generally occur. For instance often a test will wish to know whether a first tree or set of trees intersects with a second tree or set of trees. Or one will wish to know whether there is summing for a set of trees and whether there is coverage of all of the paths of tree traversal. Or a user may wish to know what trees result in a default case. One may also wish to test the empty test which asks the question of whether any trees are accepted as a pattern match at all. As mentioned in one embodiment of the invention the invention enables the following four transform tests intersection union complement and emptiness testing.

The advantageous use of the invention with compilers was mentioned above. The invention can also be used for a host of other scenarios as well such as schema validation. For instance a message comes in with a purchase order and the question is whether the purchase order is compatible against some schema. The pattern matching of the invention can be used to validate the message against the schema regardless of action semantics or ordered unordered information while preserving the same in the outcome.

Contract checking is another exemplary use of the invention. For instance a company might have a policy concerning a human resources computing system for the company that states that it must adhere to a set of computer requirements representing a physical system e.g. X amount of Storage Y amount of security Z amount of processing power etc. . In this regard each configuration can be represented as a set of requirements in tree representations and according to the tree transform capabilities of the framework of the invention a systems analyst can transform a computer configuration according to a pre defined transform and see whether the new computer configuration matches the contract required for the HR computing system.

The invention could further be applied to finding security hole patterns in a set of log data recorded by a computing system or to determine possible configurations for a computing system. The invention could be applied to a firewall where the messages coming in and out of the firewall can be viewed as trees and wherein pattern matching can be employed to observe whether any given message should not be left through the firewall. Since the transformation boolean operations mentioned herein and supported by the Q framework can be utilized to form any logic statement any system of rules in a computing system can be reduced to a tree and pattern matching can be applied to determine adherence to those rules. Thus it should be clear that the applications of the invention are limitless.

For additional context a finite state machine FSM or finite state automaton FSA is a model of behavior composed of states transitions and actions. A state of an FSM stores information about the past i.e. a state reflects the input changes from the start of a system to a present moment. A transition indicates a state change and is described by a condition that requires fulfillment to enable the transition. An action is a description of an activity that is to be performed at a given moment. There are several action types Entry Exit Input and Transition Actions. Entry actions execute the action when entering the state. Exit actions execute the action when exiting the state. Input actions execute the action dependent on present state and input conditions. Transition actions execute the action when performing a certain transition.

Finite state transducers FSTs are a type of FSM that generate output s based on given input s and or state s using action s and can be used for control applications construction of computer programs and the like. illustrates a simple finite state transducer . Transducer generates output s based on given input s as translated or transformed by FSM . Two types of transducer FSMs that exist are Moore models and Mealy models which are described in more detail infra. Mixed models are often used as well.

Thus one can appreciate that many different kinds of computer systems and processes can be modeled as FSMs and FSTs. For instance any extensible markup language XML document can be represented as an FSM using directed graphs. Relational data in a relational database may also be represented in this fashion e.g. whereby input e.g. queries is translated by the FST which represents the underlying relational store to outputs e.g. query results . In general when used to model computer processes FSTs are typically represented as edge labeled directed graphs where each vertex represents one of n states and each edge a transition from one state to the other on receipt of the alphabet symbol that labels the edge.

When many complex subsystems and processes in a computer system are communicatively coupled as part of an overall system to design software for the overall system a designer might first represent each of the subsystems and processes as FSTs e.g. as directed graphs or other equivalent representations. Then to create a complex computer program for a single system that connects different subsystems the FSTs e.g. directed graphs may be combined or otherwise transformed according to various operations in order to form new directed graph s that represent the behavior of the overall system.

For instance suppose a user Jane makes a request from a client computer to an Internet server via the Internet for a friend John s vacation photographs stored in a database and served by an application on the Internet server. As can be appreciated the end to end communications that take place according to such a request are numerous beginning with authentication of Jane and ensuring that Jane is authorized to view John s photos in addition to performing the request itself. As a simple example the making and handling of the request itself can be modeled as a first FST. At the server a second FST may model the behavior of checking if Jane is a friend of John s with reference to various rules such as may be found in a set of access control lists ACLs and corresponding policy which might be represented as a chain of XML fragments trees or directed graphs. Additionally a third FST may model the relational database itself. By transforming combining matching translating etc. the first second and third sets of FSTs a new directed graph can be formed that represents the system and returns a yes authorized or unauthorized answer for the specific input request and that handles delivery of the photos.

In general an FSM can be represented using a state diagram or state transition diagram as in the simple state transition diagram of . In two states S and S are represented having entry actions EntryA and EntryA respectively meaning that entry action EntryA is performed when state S is entered and entry action EntryA is performed when state S is entered. In turn a transition T from state S to S occurs when transition condition TC happens and a transition T from state S to S occurs when transition condition TC happens. State S might be the door is open and state S might be the door is closed. To go from state S to state S therefore transition T must occur which occurs only when transition condition TC occurs which might be a force is causing the door to move in the closed direction. The entry action EntryA that executes when entering state S thus might be close the door. A similar transition chain can be followed in opening the door i.e. going from state S to state S.

Besides diagrams different types of state transition tables can also be used to represent FSA. A common representation of such a state transition table STT is shown in wherein the combination of a column of the table STT such as current state B and a row of the table STT such as condition Y indicates the next state that occurs when condition Y happens while in state B namely state C. However with a table such as state transition table STT the complete actions information can be added only using footnotes.

There are however FSM definitions including the full actions information using state tables. For instance an FSM defined in a virtual environment is called a virtual finite state machine VFSM which relates to a software specification method used to describe the behavior of a control system using assigned names of input control properties and of output actions.

The virtual environment characterizes the environment in which a VFSM operates and is defined by three sets of names input names output names and state names. Input names are represented by the control properties of all available variables. Output names are represented by all the available actions on the variables and state names are defined for each of the states of the FSM. The input names are used to build virtual conditions to perform state transitions or input actions. The virtual conditions are built using positive logic algebra. The output names are used to trigger actions entry actions exit actions input actions or transition actions .

A state table defines the details of the behavior of a state of a VFSM as shown by the exemplary state table ST of . State transition table ST includes three columns in the first column state names SN are used in the second column the virtual conditions CO built out of input names using positive logic algebra are placed and in the third column the output names used to trigger actions AC appear.

In addition to their use in modeling reactive systems presented here FSA are significant in many different areas including linguistics computer science philosophy biology mathematics and logic. Finite state machines are one type of the automata studied in automata theory and the theory of computation. In computer science finite state machines are widely used in modeling of application behavior design of hardware digital systems software engineering compilers and the study of computation and languages. A complete survey of the applications of FSAs is virtually impossible sufficed to say there are virtually limitless applications of FSAs to systems everywhere.

In general a transducer computes a relation between two formal languages. In the context of FSMs and FSAs transducers generate output based on a given input and or a state using actions and can be used for control applications. Two types of transducer FSMs are generally distinguished Moore models and Mealy models. In practice mixed models are often used.

For illustrative purposes shows a transducer FSM showing a Moore model example having four states S S S and S with outputs O O O and O respectively. With a Moore machine the FSM uses only entry actions i.e. output depends only on the state. The advantage of the Moore model is as a simplification of the behavior. The example in shows a Moore FSM of an elevator door. The state machine recognizes two commands command open C and command close C which trigger state changes. For instance the entry action EA in Opening state S starts a motor opening the door and the entry action EA in Closing state S starts a motor in the other direction closing the door. Opened state S and Closed state S do not perform any actions in this example rather they signal to the outside systems e.g. to other state machines that door is open or door is closed respectively.

Yet another distinction for finite automata is between deterministic finite automata DFA and non deterministic NDFA or generalized non deterministic finite automata GNFA . In deterministic automata for each state there is exactly one transition for each possible input. In non deterministic automata there can be none or more than one transition from a given state for a given possible input. This distinction is relevant in practice but not in theory as there exists an algorithm which can transform any NDFA into an equivalent DFA although this transformation typically significantly increases the complexity of the automaton.

An FSM with only one state is called a combinatorial FSM and uses only input actions. This concept is useful in cases where a number of FSM are required to work together and where it is convenient to consider a purely combinatorial part as a form of FSM to suit the design tools.

In general a transducer computes a relation between two formal languages. The class of relations computed by finite state transducers FSTs is known as the class of rational relations. FSTs are typically useful in natural language processing research.

An FST is a finite state machine with two tapes which is contrasted with an ordinary finite state automaton which has a single tape. As a matter of nomenclature an automaton is said to recognize a string if the content of its tape is viewed as input. In other words the automaton computes a function that maps strings into the set 0 1. Alternatively it is said that an automaton generates strings which means its tape is viewed as an output tape. On this view the automaton generates a formal language which is a set of strings. The two views of automata are equivalent the function that the automaton computes is precisely the indicator function of the set of strings it recognized. The class of languages generated by finite automata is known as the class of regular languages.

The two tapes of a transducer are typically viewed as an input tape and an output tape. In this regard a transducer is said to transduce i.e. translate the contents of its input tape to its output tape by accepting a string on its input tape and generating another string on its output tape. It may do so nondeterministically and it may produce more than one output for each input string. A transducer may also produce no output for a given input string in which case it is said to reject the input.

 Q can be viewed as a labeled directed graph known as the transition graph of T the set of vertices is Q and q a b r means that there is a labeled edge going from vertex q to vertex r. In this respect a is the input label and b the output label of that edge.

The extended transition relation is essentially the reflexive transitive closure of the transition graph that has been augmented to take edge labels into account. The elements of are known as paths. The edge labels of a path are obtained by concatenating the edge labels of its constituent transitions in order.

The behavior of the transducer T is the rational relation T defined as follows x T y if and only if there exists i I and f F such that i x y f . This is to say that T transduces a string x into a string y if there exists a path from an initial state to a final state whose input label is x and whose output label is y.

The following operations defined on finite automata also apply to finite transducers Union concatenation Kleene closure composition projection of the input tape and projection of the output tape.

With respect to the union operation given transducers T and S there exists a transducer T S such that X T S y if and only if x T y or x S y.

With respect to the concatenation operation given transducers T and S there exists a transducer T S such that wx T S yz if and only if w T y and x S z.

With respect to the Kleene closure operation given a transducer T there exists a transducer T with the following properties 1 T 2 if w T y and x T z then wx T yz and x T y does not hold unless mandated by 1 or 2 .

Note that there is no notion of intersection of transducers. Instead there is an operation of composition which is specific to transducers and whose construction is similar to that of intersection of automata. Composition is defined as follows 

Given a transducer T on alphabets and and a transducer S on alphabets and there exists a transducer T S on and such that x T S z if and only if there exists a string y such that x T y and y S z.

One can also project out either tape of a transducer to obtain an automaton. There are two projection functions preserves the input tape and preserves the output tape. The first projection is defined as follows 

Given a transducer T there exists a finite automaton T such that T accepts x if and only if there exists a stringy for which x T y. The second projection is defined similarly.

In addition finite state machines can be used to represent a partial order which formalizes the intuitive concept of an ordering sequencing or arrangement of a set s elements. A partial order need not necessarily be a total order which guarantees the mutual comparability of all objects in the set. In this regard a total order is a kind of partial order defined for all pairs of items of a set.

Thus a partial order is defined for some but not necessarily all pairs of items. For instance the sets a b and a c d are subsets of a b c d but neither is a subset of the other. So subset of is a partial order on sets. For another example less than or equal to is a total order on integers since for any two integers one of the integers is always less than or equal to the other.

As shown in an ordered nest represents that the information that a implies b but not the other way around i.e. b does not necessarily imply a according to the ordered hierarchy. Thus the tree of is an example of a representation of an ordered nest. The tree of in contrast represents an example of an unordered nest. In this regard whether the factual information represented by the tree of is read from left to right or right to left the same factual information is gleaned namely block equals is red or red equals is block both indicate logically that the block is red. Accordingly such information is unordered and the order in which the tree is traversed is not critical to gaining the unordered information.

One of ordinary skill in the art can appreciate that the invention can be implemented in connection with any computer or other client or server device which can be deployed as part of a computer network or in a distributed computing environment connected to any kind of data store. In this regard the present invention pertains to any computer system or environment having any number of memory or storage units and any number of applications and processes occurring across any number of storage units or volumes which may be used in connection with embodiments of the QFX of the present invention. The present invention may apply to an environment with server computers and client computers deployed in a network environment or a distributed computing environment having remote or local storage. The present invention may also be applied to standalone computing devices having programming language functionality interpretation and execution capabilities for generating receiving and transmitting information in connection with remote or local services and processes. As described earlier MFSTs have ubiquitous applicability to software processes across multiple machines and computing devices and thus the techniques for translating grammars to MFSTs in accordance with the present invention can be applied with great efficacy in a variety of computing environments.

Distributed computing provides sharing of computer resources and services by exchange between computing devices and systems. These resources and services include the exchange of information cache storage and disk storage for objects such as files. Distributed computing takes advantage of network connectivity allowing clients to leverage their collective power to benefit the entire enterprise. In this regard a variety of devices may have applications objects or resources that may implicate the QFX of the invention.

It can also be appreciated that an object such as may be hosted on another computing device etc. or etc. Thus although the physical environment depicted may show the connected devices as computers such illustration is merely exemplary and the physical environment may alternatively be depicted or described comprising various digital devices such as PDAs televisions MP3 players etc. any of which may employ a variety of wired and wireless services software objects such as interfaces COM objects and the like.

There are a variety of systems components and network configurations that support distributed computing environments. For example computing systems may be connected together by wired or wireless systems by local networks or widely distributed networks. Currently many of the networks are coupled to the Internet which provides an infrastructure for widely distributed computing and encompasses many different networks. Any of the infrastructures may be used for exemplary communications made incident to embodiments of the QFX of the invention.

In home networking environments there are at least four disparate network transport media that may each support a unique protocol such as Power line data both wireless and wired voice e.g. telephone and entertainment media. Most home control devices such as light switches and appliances may use power lines for connectivity. Data Services may enter the home as broadband e.g. DSL Cable modem etc. and are accessible within the home using either wireless e.g. HomeRF or 802.11B or wired e.g. Home PNA Cat 5 Ethernet even power line connectivity. Voice traffic may enter the home either as wired e.g. Cat 3 or wireless e.g. cell phones and may be distributed within the home using Cat 3 wiring. Entertainment media or other graphical data may enter the home either through satellite or cable and is typically distributed in the home using coaxial cable. IEEE 1394 and DVI are also digital interconnects for clusters of media devices. All of these network environments and others that may emerge or already have emerged as protocol standards may be interconnected to form a network such as an intranet that may be connected to the outside world by way of a wide area network such as the Internet. In short a variety of disparate sources exist for the storage and transmission of data and consequently any of the computing devices of the present invention may share and communicate data in any existing manner and no one way described in the embodiments herein is intended to be limiting.

The Internet commonly refers to the collection of networks and gateways that utilize the Transmission Control Protocol Internet Protocol TCP IP suite of protocols which are well known in the art of computer networking. The Internet can be described as a system of geographically distributed remote computer networks interconnected by computers executing networking protocols that allow users to interact and share information over network s . Because of such wide spread information sharing remote networks such as the Internet have thus far generally evolved into an open system with which developers can design software applications for performing specialized operations or services essentially without restriction.

Thus the network infrastructure enables a host of network topologies such as client server peer to peer or hybrid architectures. The client is a member of a class or group that uses the services of another class or group to which it is not related. Thus in computing a client is a process i.e. roughly a set of instructions or tasks that requests a service provided by another program. The client process utilizes the requested service without having to know any working details about the other program or the service itself. In a client server architecture particularly a networked system a client is usually a computer that accesses shared network resources provided by another computer e.g. a server. In the illustration of as an example computers etc. can be thought of as clients and computers etc. can be thought of as servers where servers etc. maintain the data that is then replicated to client computers etc. although any computer can be considered a client a server or both depending on the circumstances. Any of these computing devices may be processing data or requesting services or tasks that may implicate the tree grammars and translation techniques of the various embodiments of the QFX of the invention.

A server is typically a remote computer system accessible over a remote or local network such as the Internet or wireless network infrastructures. The client process may be active in a first computer system and the server process may be active in a second computer system communicating with one another over a communications medium thus providing distributed functionality and allowing multiple clients to take advantage of the information gathering capabilities of the server. Any software objects utilized pursuant to the QFX of the invention may be distributed across multiple computing devices or objects.

Client s and server s communicate with one another utilizing the functionality provided by protocol layer s . For example HyperText Transfer Protocol HTTP is a common protocol that is used in conjunction with the World Wide Web WWW or the Web. Typically a computer network address such as an Internet Protocol IP address or other reference such as a Universal Resource Locator URL can be used to identify the server or client computers to each other. The network address can be referred to as a URL address. Communication can be provided over a communications medium e.g. client s and server s may be coupled to one another via TCP IP connection s for high capacity communication.

Thus illustrates an exemplary networked or distributed environment with server s in communication with client computer s via a network bus in which the present invention may be employed. In more detail a number of servers etc. are interconnected via a communications network bus which may be a LAN WAN intranet GSM network the Internet etc. with a number of client or remote computing devices etc. such as a portable computer handheld computer thin client networked appliance or other device such as a VCR TV oven light heater and the like in accordance with the present invention. It is thus contemplated that the present invention may apply to any computing device in connection with which it is desirable to compile and execute attributed tree grammars and translate to MFSTs in accordance with the Q framework defined by the invention.

In a network environment in which the communications network bus is the Internet for example the servers etc. can be Web servers with which the clients etc. communicate via any of a number of known protocols such as HTTP. Servers etc. may also serve as clients etc. as may be characteristic of a distributed computing environment.

As mentioned communications may be wired or wireless or a combination where appropriate. Client devices etc. may or may not communicate via communications network bus and may have independent communications associated therewith. For example in the case of a TV or VCR there may or may not be a networked aspect to the control thereof. Each client computer etc. and server computer etc. may be equipped with various application program modules or objects etc. and with connections or access to various types of storage elements or objects across which files or data streams may be stored or to which portion s of files or data streams may be downloaded transmitted or migrated. Any one or more of computers etc. may be responsible for the maintenance and updating of a database or other storage element such as a database or memory for storing data processed or saved according to the invention. Thus the present invention can be utilized in a computer network environment having client computers etc. that can access and interact with a computer network bus and server computers etc. that may interact with client computers etc. and other like devices and databases .

As mentioned the invention applies to any device wherein it may be desirable to apply techniques of the QFX defined in accordance with the invention. It should be understood therefore that handheld portable and other computing devices and computing objects of all kinds are contemplated for use in connection with the present invention i.e. anywhere that a device may implement software processes representing state machines or otherwise receive process or store data. Accordingly the below general purpose remote computer described below in is but one example and the present invention may be implemented with any client having network bus interoperability and interaction. Thus the present invention may be implemented in an environment of networked hosted services in which very little or minimal client resources are implicated e.g. a networked environment in which the client device serves merely as an interface to the network bus such as an object placed in an appliance.

Although not required the invention can partly be implemented via an operating system for use by a developer of services for a device or object and or included within application software that operates in connection with the component s of the invention. Software may be described in the general context of computer executable instructions such as program modules being executed by one or more computers such as client workstations servers or other devices. Those skilled in the art will appreciate that the invention may be practiced with other computer system configurations and protocols.

With reference to an exemplary remote device for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer . By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CDROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media.

The system memory may include computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and or random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up may be stored in memory . Memory typically also contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation memory may also include an operating system application programs other program modules and program data.

The computer may also include other removable non removable volatile nonvolatile computer storage media. For example computer could include a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and or an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. A hard disk drive is typically connected to the system bus through a non removable memory interface such as an interface and a magnetic disk drive or optical disk drive is typically connected to the system bus by a removable memory interface such as an interface.

A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through user input and associated interface s that are coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A graphics subsystem may also be connected to the system bus . A monitor or other type of display device is also connected to the system bus via an interface such as output interface which may in turn communicate with video memory. In addition to a monitor computers may also include other peripheral output devices such as speakers and a printer which may be connected through output interface

The computer may operate in a networked or distributed environment using logical connections to one or more other remote computers such as remote computer which may in turn have media capabilities different from device . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node or any other remote media consumption or transmission device and may include any or all of the elements described above relative to the computer . The logical connections depicted in include a network such local area network LAN or a wide area network WAN but may also include other networks buses. Such networking environments are commonplace in homes offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the computer is connected to the LAN through a network interface or adapter. When used in a WAN networking environment the computer typically includes a communications component such as a modem or other means for establishing communications over the WAN such as the Internet. A communications component such as a modem which may be internal or external may be connected to the system bus via the user input interface of input or other appropriate mechanism. In a networked environment program modules depicted relative to the computer or portions thereof may be stored in a remote memory storage device. It will be appreciated that the network connections shown and described are exemplary and other means of establishing a communications link between the computers may be used.

Various distributed computing frameworks have been and are being developed in light of the convergence of personal computing and the Internet. Individuals and business users alike are provided with a seamlessly interoperable and Web enabled interface for applications and computing devices making computing activities increasingly Web browser or network oriented.

For example MICROSOFT s managed code platform i.e. .NET includes servers building block services such as Web based data storage and downloadable device software. Generally speaking the .NET platform provides 1 the ability to make the entire range of computing devices work together and to have user information automatically updated and synchronized on all of them 2 increased interactive capability for Web pages enabled by greater use of XML rather than HTML 3 online services that feature customized access and delivery of products and services to the user from a central starting point for the management of various applications such as e mail for example or software such as Office .NET 4 centralized data storage which increases efficiency and ease of access to information as well as synchronization of information among users and devices 5 the ability to integrate various communications media such as e mail faxes and telephones 6 for developers the ability to create reusable modules thereby increasing productivity and reducing the number of programming errors and 7 many other cross platform and language integration features as well.

While some exemplary embodiments herein are described in connection with software such as an application programming interface API residing on a computing device one or more portions of the invention may also be implemented via an operating system or a middle man object a control object hardware firmware intermediate language instructions or objects etc. such that the embodiments of the QFX in accordance with the invention may be included in supported in or accessed via all of the languages and services enabled by managed code such as .NET code and in other distributed computing frameworks as well.

There are multiple ways of implementing the present invention e.g. an appropriate API tool kit driver code operating system control standalone or downloadable software object etc. which enables to use the QFX of the invention. The invention contemplates the use of the invention from the standpoint of APIs or other software object as well as from the viewpoint of data structures software or hardware object that may implement at least part of the QFX in accordance with the invention. Thus various implementations of the invention described herein may have aspects that are wholly in hardware partly in hardware and partly in software as well as in software.

The word exemplary is used herein to mean serving as an example instance or illustration. For the avoidance of doubt the subject matter disclosed herein is not limited by such examples. In addition any aspect or design described herein as exemplary is not necessarily to be construed as preferred or advantageous over other aspects or designs nor is it meant to preclude equivalent exemplary structures and techniques known to those of ordinary skill in the art. Furthermore to the extent that the terms includes has contains and other similar words are used in either the detailed description or the claims for the avoidance of doubt such terms are intended to be inclusive in a manner similar to the term comprising as an open transition word without precluding any additional or other elements.

As mentioned above while exemplary embodiments of the present invention have been described in connection with various computing devices and network architectures the underlying concepts may be applied to any computing device or system in which it is desirable to include MFSTs implementing transformations. For instance the QFX of the invention may be applied to the operating system of a computing device provided as a separate object on the device as part of another object as a reusable control as a downloadable object from a server as a middle man between a device or object and the network as a distributed object as hardware in memory a combination of any of the foregoing etc. While exemplary programming languages names and examples are chosen herein as representative of various choices these languages names and examples are not intended to be limiting. One of ordinary skill in the art will appreciate that there are numerous ways of providing object code and nomenclature that achieves the same similar or equivalent functionality achieved by the various embodiments of the invention.

As mentioned the various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. As used herein the terms component system and the like are likewise intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on computer and the computer can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

Thus the methods and apparatus of the present invention or certain aspects or portions thereof may take the form of program code i.e. instructions embodied in tangible media such as floppy diskettes CD ROMs hard drives or any other machine readable storage medium wherein when the program code is loaded into and executed by a machine such as a computer the machine becomes an apparatus for practicing the invention. In the case of program code execution on programmable computers the computing device generally includes a processor a storage medium readable by the processor including volatile and non volatile memory and or storage elements at least one input device and at least one output device. One or more programs that may implement or utilize the QFX of the present invention e.g. through the use of a data processing API software object or the like are preferably implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the program s can be implemented in assembly or machine language if desired. In any case the language may be a compiled or interpreted language and combined with hardware implementations.

The methods and apparatus of the present invention may also be practiced via communications embodied in the form of program code that is transmitted over some transmission medium such as over electrical wiring or cabling through fiber optics or via any other form of transmission wherein when the program code is received and loaded into and executed by a machine such as an EPROM a gate array a programmable logic device PLD a client computer etc. the machine becomes an apparatus for practicing the invention. When implemented on a general purpose processor the program code combines with the processor to provide a unique apparatus that operates to invoke the functionality of the present invention. Additionally any storage techniques used in connection with the present invention may invariably be a combination of hardware and software.

Furthermore the disclosed subject matter may be implemented as a system method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer or processor based device to implement aspects detailed herein. The term article of manufacture or alternatively computer program product where used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. For example computer readable media can include but are not limited to magnetic storage devices e.g. hard disk floppy disk magnetic strips . . . optical disks e.g. compact disk CD digital versatile disk DVD . . . smart cards and flash memory devices e.g. card stick . Additionally it is known that a carrier wave can be employed to carry computer readable electronic data such as those used in transmitting and receiving electronic mail or in accessing a network such as the Internet or a local area network LAN .

The aforementioned systems have been described with respect to interaction between several components. It can be appreciated that such systems and components can include those components or specified sub components some of the specified components or sub components and or additional components and according to various permutations and combinations of the foregoing. Sub components can also be implemented as components communicatively coupled to other components rather than included within parent components hierarchical . Additionally it should be noted that one or more components may be combined into a single component providing aggregate functionality or divided into several separate sub components and any one or more middle layers such as a management layer may be provided to communicatively couple to such sub components in order to provide integrated functionality. Any components described herein may also interact with one or more other components not specifically described herein but generally known by those of skill in the art.

In view of the exemplary systems described supra methodologies that may be implemented in accordance with the disclosed subject matter are better appreciated with reference to the flowchart of . While for purposes of simplicity of explanation the methodologies are shown and described as a series of blocks it is to be understood and appreciated that the claimed subject matter is not limited by the order of the blocks as some blocks may occur in different orders and or concurrently with other blocks or otherwise provide equivalent functionality from what is depicted and described herein. Where non sequential or branched flow is illustrated via flowchart it can be appreciated that various other branches flow paths and orders of the blocks may be implemented which achieve the same or a similar result. Moreover not all illustrated blocks may be required to implement the methodologies described hereinafter.

Furthermore as will be appreciated various portions of the disclosed systems above and methods below may include or consist of artificial intelligence or knowledge or rule based components sub components processes means methodologies or mechanisms e.g. support vector machines neural networks expert systems Bayesian belief networks fuzzy logic data fusion engines classifiers . . . . Such components inter alia can automate certain mechanisms or processes performed thereby to make portions of the QFX more adaptive as well as efficient and intelligent.

While the present invention has been described in connection with the preferred embodiments of the various Figs. it is to be understood that other similar embodiments may be used or modifications and additions may be made to the described embodiment for performing the same function of the present invention without deviating therefrom. For example while exemplary network environments of the invention are described in the context of a networked environment such as a peer to peer networked environment one skilled in the art will recognize that the present invention is not limited thereto and that the methods as described in the present application may apply to any computing device or environment such as a gaming console handheld computer portable computer etc. whether wired or wireless and may be applied to any number of such computing devices connected via a communications network and interacting across the network. Furthermore it should be emphasized that a variety of computer platforms including handheld device operating systems and other application specific operating systems are contemplated especially as the number of wireless networked devices continues to proliferate.

While exemplary embodiments refer to utilizing the present invention in the context of particular programming language constructs the invention is not so limited but rather may be implemented in any language and applies to translating any grammars that include actions. Still further the present invention may be implemented in or across a plurality of processing chips or devices and storage may similarly be effected across a plurality of devices. Therefore the present invention should not be limited to any single embodiment but rather should be construed in breadth and scope in accordance with the appended claims.

