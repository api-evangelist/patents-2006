---

title: Automation of keyboard accessibility testing
abstract: A computer program product and method for testing software applications for keyboard accessibility call for generating a first test script from a first input stream; identifying key signals associated with keys of a test keyboard; associating the key signals to the first input-stream to generate a second test script; and running the second test script to test the keyboard accessibility.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07840948&OS=07840948&RS=07840948
owner: International Business Machines Corporation
number: 07840948
owner_city: Armonk
owner_country: US
publication_date: 20061121
---
IBM is a registered trademark of International Business Machines Corporation Armonk N.Y. U.S.A. Other names used herein may be registered trademarks trademarks or product names of International Business Machines Corporation or other companies.

Section 508 of the Rehabilitation Act Amendments of 1998 mandates that United States government agencies provide people with disabilities access to electronic and information technology. The electronic and information technology includes any product used to acquire store manipulate or transmit information. Software applications are considered electronic and information technology. Similarly computer input devices such as keyboards also fall under the umbrella of electronic and information technology.

Many people with disabilities have problems using a computer pointing device such as a mouse. These people need to be able to operate software using only a keyboard. Different types of keyboards are available to people with disabilities. For example some keyboards have various curvatures and key configurations to enable people with wrist disabilities to enter keystrokes. Keyboard accessibility requires that computer functions be accessible using only keyboard strokes.

Companies that wish to sell electronic and information technology such as software to the government have to prove that the technology is keyboard accessible. Currently the standard approach for testing for keyboard accessibility is through manual execution of the application. Specifically multiple tests of the same software application function are run with alternate keyboards and sticky key mappings. The sticky key mappings are accessibility features that enable a person to only use one keystroke at a time when normally two or more are simultaneously required.

Many graphical user interface GUI testing applications such as IBM s Rational Robot and XDE Tester have record and playback functions. Keyboard entries and mouse clicks along with a resulting application response are recorded. From the recorded keyboard entries and mouse clicks the testing applications generate program code referred to as test scripts. The test scripts may be run to simulate the previously recorded keyboard entries and mouse clicks. The resulting application responses may be played back and compared to previously recorded application responses.

Testing of alternate keyboards using the GUI testing applications still requires a specific test script for each of the alternate keyboards. This results in a significant amount of duplication within the test scripts and creates a maintenance problem for the tester.

Many computer software developers will recognize that the great variety of software applications operating systems and input devices can pose challenges. One challenge is the malfunction of the software applications due to unforeseen input devices. Accordingly testing during the development process is required.

What are needed are software and hardware that automate certain aspects of testing software for keyboard accessibility.

The shortcomings of the prior art are overcome and additional advantages are provided through the provision of a computer program product stored on machine readable media including machine readable instructions for testing software applications for keyboard accessibility the instructions include instructions for generating a first test script from a first input stream identifying key signals associated with keys of a test keyboard associating the key signals to the first input stream to generate a second test script and running the second test script to test keyboard accessibility.

Also disclosed is a computer system including a computer program product having instructions for testing software applications for keyboard accessibility the product includes instructions for generating a first test script from a first input stream identifying key signals associated with the keys of a test keyboard via an operating system architecture receiving information for the key signals creating a library of information for the key signals associating the key signals to the first input stream to generate a second test script receiving user input to modify the second test script receiving user input generating at least one of function keys and sticky keys automatically modifying the second test script automatically generating at least one of function keys and sticky keys running the second test script and comparing results from running the second test script to the results from running the first test script to test keyboard accessibility.

System and computer program products corresponding to the above summarized methods are also described and claimed herein.

Additional features and advantages are realized through the techniques of the present invention. Other embodiments and aspects of the invention are described in detail herein and are considered a part of the claimed invention. For a better understanding of the invention with advantages and features refer to the description and to the drawings.

As a result of the summarized invention technically we have achieved a solution in which a computer program product stored on machine readable media includes machine readable instructions for testing software for keyboard accessibility the instructions include instructions for generating an initial test script from a first input stream identifying key signals associated with keys of a test keyboard associating the key signals to the first input stream to generate a second test script and running the second test script to test keyboard accessibility.

The detailed description explains the preferred embodiments of the invention together with advantages and features by way of example with reference to the drawings.

The teachings herein provide techniques for automating certain aspects of testing software applications for keyboard accessibility. In general to provide for testing software applications for keyboard accessibility a computer processing system is used. The computer processing system is configured with testing software. The testing software provides for the testing to ensure keyboard accessibility. Coupled to the computer processing system are various components. The computer processing system typically includes a keyboard and mouse for an operator. The computer processing system also includes a plurality of test components for testing. As discussed herein the test components include a plurality of test keyboards.

Each of the test keyboards contains a set of keys. When each key is depressed the depressing will generate a distinctive signal. The distinctive signal is referred to as a key signal. The key signal communicates to the computer which key has been depressed. The testing software identifies the key signals associated with each of the keys for each test keyboard in the plurality of test keyboards.

Typically the operator tests the software application by inputting at least one of a keystroke and mouse click. The computer processing system processes the input for use by the software application. The operator observes a response of the software application to verify a correct response. The testing software records inputs and responses and generates an initial test script. The initial test script may be played back to simulate the inputs. In general the test script may be played in a shorter period of time than would be required if the keystrokes and mouse clicks were input manually.

The testing software associates the key signals from the keys of the test keyboard with the inputs used to generate the initial test script. The associating provides for generating an individual test script. The individual test script is used to simulate keystrokes from the test keyboard. Running the individual test script will test the software application for accessibility with the test keyboard. In general the software application output resulting from running the initial test script is compared to the output resulting from running the individual test script. If the results are the same then the software application is accessible to the test keyboard.

In one embodiment the computer processing system may include infrastructure for only one keyboard. In this embodiment keyboards are tested one at a time.

The term keys relates to the physical keys of the keyboard. The term keystrokes relates to physically depressing a respective key. The test scripts provide keystroke inputs to the software application without anyone having to actually depress any keys. The term kernel mode relates to running code in a privileged mode. The privileged mode provides access to memory and computer processing unit CPU instructions. In general low level code operates in the kernel mode. The term user mode relates to running code in a mode less privileged than the kernel mode. Typically software applications run in the user mode. The term NTDLL.DLL relates to a function library. The function library provides for making code transitions from the kernel mode to the user mode. The term environmental functions relates to an interface between software applications and code running in the kernel mode. The term Win32 API relates to an application programming interface. The application programming interface provides functions at the request of the software applications. The term function keys relates to keys that can be programmed to perform certain actions. Although some of this terminology is with reference to a specific operating system it should be understood that the teachings may be applied to a variety of operating systems or various platforms.

Referring now to an embodiment of a computer processing system for implementing the teachings herein is depicted. System has one or more central processing units processors etc. collectively or generically referred to as processor s . In one embodiment each processor may include a reduced instruction set computer RISC microprocessor. Processors are coupled to system memory and various other components via a system bus . Read only memory ROM is coupled to the system bus and may include a basic input output system BIOS which controls certain basic functions of system .

As disclosed herein the system includes machine readable instructions stored on machine readable media for example the hard disk for automating certain aspects of testing a software application for accessibility to test keyboards . As disclosed herein the instructions are referred to as keyboard accessibility testing software . The keyboard accessibility testing software may be produced using software development tools as are known in the art. The keyboard accessibility testing software may be provided as an add in to an application where add in is taken to mean supplemental program code as is known in the art . In such embodiments the keyboard accessibility testing software replaces or supplements structures of the application for testing software.

Thus as configured the system includes processing means in the form of processors storage means including system memory and mass storage input means such as the operator keyboard and mouse and output means including speaker and display . In one embodiment a portion of system memory and mass storage collectively store an operating system such as the AIX operating system from IBM Corporation to coordinate the functions of the various components shown in .

It will be appreciated that the system can be any suitable computer Windows based terminal wireless device information appliance RISC Power PC X device workstation mini computer mainframe computer cell phone personal digital assistant PDA or other computing device.

Examples of other operating systems supported by the system include versions of Windows Macintosh Java LINUX and UNIX or other suitable operating systems.

Users of the system can connect to the network through any suitable connection such as standard telephone lines digital subscriber line LAN or WAN links e.g. T1 T3 broadband connections Frame Relay ATM and wireless connections e.g. 802.11 a 802.11 b 802.11 g .

The keyboard accessibility testing software automates certain aspects of identifying the keys associated with the test keyboards . There are several techniques for identifying the keys. The techniques may be used individually or in combination. With one technique the keyboard accessibility testing software identifies the keys via an operating system architecture.

The hardware device drivers receive the key signal from the test keyboard associated with the keystroke. The hardware device drivers process the key signal for use by at least one of the software application and the NTDLL.DLL . The processed signal used by the NTDLL.DLL undergoes more processing in the user mode before it is sent to the software application .

If the processed signal is used by the NTDLL.DLL the NTDLL.DLL provides output for use by the Win32 API . The Win32 API also receives input from the environmental functions . The environmental functions include definitions of keys such as sticky keys set by the user. The Win32 API provides an output to the software application based upon the inputs from the NTDLL.DLL and the environmental functions . The output is related to the keystroke from the test keyboard . Typically the keyboard accessibility testing software uses the operating system architecture to poll at least one of the software application the hardware device drivers the NTDLL.DLL the environment functions and the Win32 API to gather information related to the keys associated with the test keyboard .

Another technique for identifying the keys provides for creating a library of information for the test keyboards . The library includes the key signals for the keys associated with the test keyboards . For situations where the library does not include the information for a particular test keyboard the teachings provide for receiving the information for example via the network . With the library of information the keyboard accessibility testing software identifies the keys associated with the test keyboards .

On a simplistic level one illustrative example is presented to demonstrate the teachings herein. Table 1 presents an input device an input stream and an application response. The operator creates an input stream using the operator keyboard and mouse . The keyboard accessibility testing software records the input stream . The recording generates a first test script. It is presumed that the first test script successfully tested the functions of the software application . Table 1 provides an embodiment of a basis for the first test script.

The operator may decide to test the functions of the software application using only keystrokes from the operator keyboard . The keyboard accessibility testing software identifies all the key signals of the keys associated with the operator keyboard . The keyboard accessibility testing software associates the key signals with the input stream . The associating generates a second test script. Table 2 presents an input stream . The input stream results from the second test script. Referring to Table 2 running the second test script demonstrates that the simulated keystrokes from the operator keyboard results in the same software application responses as running the first test script.

The keyboard accessibility testing software may be used to test the software application for accessibility with the test keyboard . The keyboard accessibility testing software identifies the key signals of the keys associated with the test keyboard . The keyboard accessibility testing software associates the key signals of the keys of the test keyboard with the input stream . The associating generates a third test script. Table 3 presents an input stream . The input stream results from the third test script. Referring to Table 3 running the third test script demonstrates that the simulated keystrokes from the test keyboard results in the same software application responses as running the first test script.

Situations may arise where keys from the test keyboard may not map to a successful input stream. The teachings call for several ways to resolve these situations. One way is for the user to manually modify the test script resulting from the test keyboard . For example the user may manually create at least one of function keys and sticky keys to successfully test the functions of the software application . The manually created keys are included in a modified test script. Alternatively the keyboard accessibility testing software may automatically modify the test script. For example the keyboard accessibility testing software may automatically create at least one of the function keys and the sticky keys to successfully test the functions of the software application .

In one embodiment the test keyboards do not have to be coupled to the computer processing system . The keyboard accessibility testing software generates the second test script based upon the library of information for the test keyboards .

The capabilities of the present invention can be implemented in software firmware hardware or some combination thereof.

As one example one or more aspects of the present invention can be included in an article of manufacture e.g. one or more computer program products having for instance computer usable media. The media has embodied therein for instance computer readable program code means for providing and facilitating the capabilities of the present invention. The article of manufacture can be included as a part of a computer system or sold separately.

Additionally at least one program storage device readable by a machine tangibly embodying at least one program of instructions executable by the machine to perform the capabilities of the present invention can be provided.

The flow diagrams depicted herein are just examples. There may be many variations to these diagrams or the steps or operations described therein without departing from the spirit of the invention. For instance the steps may be performed in a differing order or steps may be added deleted or modified. All of these variations are considered a part of the claimed invention.

While the preferred embodiment to the invention has been described it will be understood that those skilled in the art both now and in the future may make various improvements and enhancements which fall within the scope of the claims which follow. These claims should be construed to maintain the proper protection for the invention first described.

