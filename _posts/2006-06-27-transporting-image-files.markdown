---

title: Transporting image files
abstract: A method for transporting an image file over a network is provided. The network may include two or more computers, and the image file may include a control stream, a data stream, and a cluster map stream. The method may include parsing the image file into two or more segments. A first segment may include the control stream, the cluster map stream and a first portion of the data stream. A second segment includes a second portion of the data stream. The method may also include sending the first segment from a first computer to a second computer, and sending the second segment from the first computer to the second computer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07877567&OS=07877567&RS=07877567
owner: Microsoft Corporation
number: 07877567
owner_city: Redmond
owner_country: US
publication_date: 20060627
---
This application is a divisional application of U.S. application Ser. No. 10 184 257 filed on 28 Jun. 2002 now U.S. Pat. No. 7 334 099 entitled Method and System for Managing Image Files the Parent Application which is hereby expressly incorporated by reference. The benefit of the filing date of the Parent Application is hereby claimed to the fullest extent permitted by 35 U.S.C. 120. This divisional application also claims the full benefit of 35 U.S.C. 121.

Computer systems interface to one or more storage media. The storage media stores a variety of data such as operating system files application programs and data files used with application programs. Known storage media types include hard disks CD ROMs Digital Versatile Disk DVD and the like. The storage media is logically subdivided into one or more volumes or partitions. The storage media is further physically subdivided into a plurality of sectors. Each sector is capable of storing a plurality of bytes of data. A cluster is a group of sectors and represents the smallest unit that an operating system executing in the computer uses to identify locations on the storage media. Thus the operating system typically stores or reads data on the storage media on a cluster by cluster basis.

The data on the storage media is organized as a set of files and other control information used to manage the files on the disk. For example each operating system file application program or data file represents a different file on the storage media. The control information identifies the clusters on the storage media that include data for each file. The control information also identifies the clusters on the storage media that are allocated i.e. include data for a file and the clusters that remain unallocated i.e. are available to store new data. The control information itself is stored as part of one or more files. The precise manner that the files and control information are organized on the storage media depends upon a file system. Various known file systems exist such as File Allocation Table 16 FAT16 File Allocation Table 32 FAT32 and New Technology File System NTFS .

An image file is a copy of the data stored on a source storage media volume. Typically the image file is a single stream of data that is a sector by sector copy of the data contained on the source storage media volume. The image file is in turn stored on a destination storage media volume. The destination storage media volume is a different volume or partition on the same storage media or alternatively a separate storage media. For example an image file that represents a sector by sector copy of a hard disk volume is stored on a CD ROM.

The image file is used for at least two functions. First the image file is used to restore the source storage media volume to its state at the time the image file was created. Thus the image file can be used to restore the storage media volume if it becomes damaged or corrupted. Second the image file is used to provide a plurality of computer systems with the same basic configuration.

Because the image file is created as a sector by sector copy of the source storage media and is stored as single data stream it is difficult to manipulate the image file. The operating system cannot readily read the control information or individual file data from the data stream. As a result files in the data stream cannot be replaced with new files or edited. In order to update an image file it is necessary to restore the image file to a storage media volume perform updates to the storage media volume and then create a new image file. Also if a user or system administrator wants to maintain different versions of an image file separate image files must be created for each different version. Thus known methods of maintaining image files are resource intensive and costly.

A method for transporting an image file over a network is provided. The network may include two or more computers and the image file may include a control stream a data stream and a cluster map stream. The method may include parsing the image file into two or more segments. A first segment may include the control stream the cluster map stream and a first portion of the data stream. A second segment includes a second portion of the data stream. The method may also include sending the first segment from a first computer to a second computer and sending the second segment from the first computer to the second computer.

Additional features and advantages of the description herein will be made apparent from the following detailed description of illustrative embodiments that proceeds with reference to the accompanying figures.

The disclosure is directed to a method and system for managing image files. An image file includes a copy of data stored on a source storage media volume. The types of data stored on the source storage media volume typically includes operating system files application programs data files and other control information used to manage the data stored on the volume. In the description herein the image file comprises a plurality of streams including a control stream a data stream a bitmap stream a fix up stream and a cluster map stream. Optional streams such as a property stream and audit trail may be included in the image file.

The data stream of the image file includes the data copied from the source storage media volume. The control stream bitmap stream and cluster map stream include information needed to manage data in the data stream. The image file is accessed by a mount process that provides the image file with a virtual storage media reference. After the image file is mounted the operating system accesses data within the data stream by referencing virtual clusters. The cluster map stream is used to convert the virtual clusters into locations within the data stream. The description herein allows the operating system to access the image file as if it were a storage media volume such as a disk drive. For example files stored in the data stream can be viewed edited created or deleted.

In an embodiment of the description herein multiple versions of a source storage media volume are stored in one or more image files. A first image file referred to as the parent image file is created of the source storage media volume at a first period of time. A second image file referred to as the child image file is created of the source storage media volume at a second period of time. The child image file only includes data from the source storage media volume that has changed since the first period of time. The first and second image files are stored as separate files. Alternatively the first and second image file are stored as part of single image file. The first and second image files allow a destination storage media volume to be provided with the data from the source storage media volume at either the first or second period of time.

Turning to the drawings wherein like reference numerals refer to like elements the description herein is illustrated as being implemented in a suitable computing environment. Although not required the description herein will be described in the general context of computer executable instructions such as program modules being executed by a personal computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. The description herein may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

The subject matter described herein is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the subject matter described herein include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The subject matter described herein may be discussed in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. The subject matter described herein may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the description herein includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Associate VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers hereto illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through a output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be another personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the personal computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the personal computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the personal computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

In the description that follows the subject matter described herein will be discussed with reference to acts and symbolic representations of operations that are performed by one or more computer unless indicated otherwise. As such it will be understood that such acts and operations which are at times referred to as being computer executed include the manipulation by the processing unit of the computer of electrical signals representing data in a structured form. This manipulation transforms the data or maintains it at locations in the memory system of the computer which reconfigures or otherwise alters the operation of the computer in a manner well understood by those skilled in the art. The data structures where data is maintained are physical locations of the memory that have particular properties defined by the format of the data. However while the description herein is discussed in the foregoing context it is not meant to be limiting as those of skill in the art will appreciate that various of the acts and operation described hereinafter may also be implemented in hardware.

Each storage media is logically divided into one or more volumes. Storage media is divided into a first volume and a second volume . Storage media is divided into a single volume. Each storage media volume is accessible by the operating system .

The storage media and each include a geometry. The geometry of the storage media includes a number of cylinders tracks per cylinder and sectors per track. A sector is a physical unit on the storage media. Each sector is capable of storing a certain amount of information for example 512 bytes. The geometry of each storage media and need not be the same.

A cluster is a group of one or more sectors. The operating system and more particularly the file system driver sends read and write requests to the device driver by identifying cluster numbers. A file system determines the number of sectors that comprise a cluster. Various known file systems exist such as File Allocation Table 16 FAT16 File Allocation Table 32 FAT32 Compact Disk File System CDFS and New Technology File System NTFS .

As shown the first volume of the source storage media includes source data . The source data includes a plurality of files such as operating system files executable programs such as application programs and data files used with the application programs. The source data also includes control information . The control information includes file allocation data that identifies the clusters on the storage media volume that include data for each file. The control information also includes a bitmask . The bitmask comprises a plurality of bits and each bit corresponds to one cluster on the storage media volume. Each bit in the bitmask has a value that identifies whether the corresponding cluster includes stored data for at least one file or whether the cluster remains unallocated.

The manner used to organize and store the control information and files and depends on the file system used. By way of example the NTFS file system stores a Master File Table MFT on the storage media. The MET includes an extent list for each file stored on the storage media. The extent list includes a series of entries that identify a starting block and length. The starting block and length define a series of contiguous clusters that include data for the file.

Other information included as part of the source data includes paged memory and a BIOS Parameter Block BPB . The paged memory is a portion of the computer s memory that is written to the storage media. The BPB includes data about the storage media volume such as the size of media and the location of certain files on the storage media.

The destination storage media includes an image file . The image file is a logical capture of information that includes source data . In the description herein the image file is used to restore the source data to a storage media volume. For example the image file is used to create restored data onto storage media volume . The restored data includes the operating system files executable programs data files and control information of the original source data . As described in more detail below the cluster location of data in restored data need not directly correspond to the cluster location of data from source data . For example the source data may be defragmented when the image file is created. The restored data can also be placed on the source volume from which the image file was made thereby restoring the source storage media volume to a previous state.

The image file is also used to place source data onto storage media interfaced to a separate computer. The image file can be restored onto the storage media of a remote computer via a computer network such as a LAN WAN or the Internet. The image file can also be restored to a separate computer if the image file is placed on removable media such as a CD ROM or DVD disk. The removable media is interfaced to the separate computer and restored to another storage media volume interfaced to the separate computer.

The destination storage media also includes image files labeled and . The description herein allows editing of image file . After the image file is edited it can be stored as a separate file such as image file . Thus multiple versions of an image file are created. In an alternative embodiment image file is a parent image file including source data at a first period of time. Image files are child image files made at subsequent periods of time. Each child image file only includes changes made to source data subsequent to the creation of the parent image file . Alternatively the child image files are stored as part of the image file thereby creating a single image file with multiple versions of source data .

The image file includes a plurality of image streams. As shown the image file includes a control stream a data stream a bitmap stream a cluster map stream an audit trail stream and a property stream . The image streams are stored on the destination storage media as part of the image file . The image file also includes a fix up stream . The fix up stream is a temporary stream used to adjust data in the other image streams before they are written to the image file . Once the data in the other streams is adjusted the fix up stream is removed from the image file. In an embodiment of the description herein the audit trail stream and properties stream are optional. Image files and include the same image streams as image file .

In the embodiment shown the destination storage media and the source storage media interface to the computer via a common device driver and file system driver thereby assuming that both storage media employ a common file system and same storage media type. As those skilled in the art will recognize different storage media types may be used and each storage media volume may utilize different file systems. For example storage media volume is a CD ROM using the CDFS file system while storage media volume is a hard disk using FAT16 or FAT32. In that case a plurality of file system drivers and device drivers are typically required.

The operating arrangement includes a mount tool a capture tool a restore tool and applications . Applications include for example word processing application programs data base programs and other system resources such as those used to manage storage media. Known resources used to manage storage media allow users to view the files on a storage media copy files delete files move files and the like. The capture tool creates the image file from the source data . The restore tool creates restored data from the image file on a storage media volume such as the original source storage media volume or separate storage media volume such as volume .

In an embodiment of the description herein the mount tool the capture tool and the restore tool are implemented as stand alone applications. The tools can then be executed through a user interface application program other program modules or command line request. In another embodiment of the description herein the mount tool the capture tool and the restore tool are implemented as part of the user interface application program or other program module.

Tools and send requests to operating system . Alternatively requests from tools are routed through an interface . The interface provides access to information in the individual streams in the image file . Thus an extensible set of tools is provided i.e. new tools can be created to manipulate image file .

The mount tool is used to initiate a sequence that permits the operating system to interact with the image file as if the image file is a storage media volume. The mount tool cooperates with operating system components such as image driver and file system driver to provide an addressable drive letter mount point for the image file thereby creating a virtual storage media. After the mount tool executes the operating system can read data from and write data to the image file . The mount tool is initiated by any application user interface system resource or command line request. For example the mount tool is initiated during a boot sequence thereby permitting the computer to boot from the image file .

The control stream is a data structure that functions as a header describing attributes of the image file needed to open and interpret other data included in the image file . Data in the control stream includes an image identification volume information storage media geometry file system information operating system information and compression information .

The image identification is data that uniquely identifies the image and also data that identifies a size in bytes of the control stream . The volume information includes data that defines the source storage media volume . Data in the volume information includes a volume offset from the beginning of the storage media a length of the volume number of hidden sectors on the volume a volume number and the type of file system used by the volume.

The storage media geometry includes data that describes physical attributes of the source storage media including the number of cylinders the number of tracks per cylinder and the number of sectors per track. The file system information includes data that identifies the total number of clusters bytes per cluster and number of clusters per record.

The operating system information includes data that identifies an operating system version that is stored as part of source data . The operating system information also includes data that identifies any updates made to the operating system such as service pack identification. A service pack is an update to a software program that fixes known problems with the software program or that provides enhancements to the software program. The service pack identification identifies any service packs stored on the source storage media volume for the operating system files . The compression encryption information includes data that identifies whether the image file is compressed and whether the image file is encrypted.

The data stream includes the source data from the source storage media volume . As previously described the source data includes the data for stored files on the source storage media volume . The data for each file is optionally compressed or encrypted using known methods. The decision to compress or encrypt data is made on a file by file basis. Thus some data in the data stream may be compressed while other data is not. Similarly some data in the data stream may be encrypted while other data is not. The control information that forms part of the source data also comprises a file and is stored as part of the data stream .

In an embodiment of the description herein the data stream does not include multiple copies of identical data. For example if multiple copies of the same data file are stored on the source storage media volume only one copy of the data file is stored in the data stream . Paged memory also need not be included in the data stream . When the image file is restored on a storage media volume the operating system creates paged memory on the storage media volume as needed. Eliminating multiple copies of data and paged memory files reduces the size of image file .

The cluster map stream includes a plurality of records and each record identifies a virtual cluster location and a data stream location. The virtual cluster location in each record includes a starting cluster and an ending cluster . The starting cluster and the ending cluster identify a set of contiguous clusters where a set of the source data belongs when restored to a storage media volume. The data stream location includes the offset the length and the compressed size and identifies where the set of data exists within the data stream . The offset identifies a starting location of the data in the data stream as measured from the beginning of the data stream. For compressed files length of the set of data in the image file is equal to the compressed size . For uncompressed data the length of the set of data in the image file is the product of the length and the number of bytes per cluster as identified in the control stream . The flag field identifies whether the data in the image file is compressed or uncompressed. The records in the cluster map stream allow the image file to be viewed as a virtual storage media volume and data within the data stream to be read edited or otherwise manipulated.

The starting cluster field of the cluster map record includes a starting cluster and the ending cluster field includes ending cluster . The starting and ending cluster define a set of contiguous blocks were a set of data will be placed when the image file is restored on a storage media i.e. the virtual cluster location The offset field has a value of 1000. Accordingly the data starts at an offset of 1000 bytes from the beginning of the data stream . Field indicates that the data is not compressed. Thus the length of the data in the data stream is the product of length which is identified as 50 in the length field and the number of bytes per cluster 512 50 clusters 512 bytes per cluster 25 600 bytes . As shown the corresponding data in the image file is located at bytes 1000 through 26599 as referenced from the beginning of the data stream .

As previously described source data may be defragmented when the image file is created. In that case the starting cluster and ending cluster may not correspond to the original location on the source storage media volume . Instead the starting and ending cluster number identify the clusters where the data is stored when the image file is restored to a storage media volume as represented by virtual storage media .

If multiple copies of the same data are stored on the source storage media volume the data is only placed in the data stream one time. Where this occurs multiple records in the cluster stream are created one record for each occurrence of the data on the source storage media volume . Each record includes the same length offset compressed size and compression fields and thereby point to the same data in the data stream . The starting cluster and ending cluster fields are different thereby identifying multiple locations where the data will be stored when the image file is restored to a storage media volume.

Returning to the bitmap stream is used to identify virtual allocated and unallocated clusters. The virtual allocated clusters are clusters that will include data when the image file is restored to a storage media volume. Virtual unallocated clusters represent clusters that will be available to store new data when the image file is restored to a storage media volume. In the example shown the bitmap stream is implemented as a bitmap. Each bit in the bitmap corresponds to a cluster. A bit with a value of 1 represents a virtual allocated cluster while a bit with a value of 0 represents a virtual unallocated cluster. The bitmap stream performs the same function as the bitmask . However because the bitmap stream is outside the data stream it is readily accessible within the image file .

The audit trail stream includes data that identifies any changes made to the image file the user that initiated the change the files if any that were modified and the date and time that the changes were implemented. The property stream includes data that identifies attributes of the image file such as operating system version. The property stream is queried to identify image files with desired attributes. For example the property stream is queried to locate images files that include a particular version of the operating system. The audit trail stream and property stream are implemented in any suitable manner.

The fix up stream is used to modify the image streams after the source data is read by the operating system and before the plurality of streams are written to the image file . For example in the case of the NTFS file system the fix up stream modifies the MFT if the files are defragmented when the image file is created.

Typically the image file is created via a user request from system tools . As previously described the system tools are executed through or implemented as part of user interfaces applications or other program modules. System tools are also executed from a command line request. After the request is received from system tools the operating system opens the source storage media volume as shown in step . To open the source storage media volume the image driver obtains a reference to the source storage media volume via file system driver . Once the reference to the storage media volume is obtained the operating system communicates with the storage media via image driver and device driver .

In step the process creates the plurality of image streams of the image file including the control stream the data stream the bitmap stream the cluster map stream the audit trail stream the properties stream and the fix up stream . At this point the plurality of streams comprising the image file may be implemented as in memory structures or alternatively may be implemented directly on the destination storage media volume .

In step the process reads the control information on the source storage media volume . The control information identifies the plurality of files on the source storage media volume and the clusters allocated to each of the files. For example if the source storage media volume uses the NTFS file system the process reads the MFT on the storage media volume .

In step the process reads the data for a first file identified by the control information . In step the process places the data for the file in the data stream . As previously described if multiple copies of the file data exist the data is only placed in the data stream one time. Additionally if the file data is part of paged memory it need not be placed in the data stream . The data for the file is optionally defragmented when placed into the data stream .

In step the cluster stream is updated by adding a record that correlates the virtual cluster location to its data stream location. In step the process determines whether the source storage media volume includes more file data. If more file data exists the process returns to step and reads the data for the next file.

If no more file data exists the process proceeds to step and applies fix ups to the image file streams. The fix ups are applied to account for data movement. For example as previously described the process may defragment the data for the plurality of files on the source storage media . Thus the process modifies the control information located in the data stream so that control information identifies the clusters now allocated to each file. In the case of an NTFS volume the process corrects the extent list for each file in the MFT. Because the data for each file is defragmented the extent list for each file includes a single extent. The bitmask is also modified to properly reflect allocated and unallocated clusters in view of changes to data location. Fix ups are also applied to the BPB . Because the location of files referenced in the BPB is changed the BPB is modified so that the proper location of files is referenced.

Once the process is complete the control stream data stream bitmap stream cluster map stream audit trail stream and properties stream are written to the destination storage media thereby forming image file as shown in step .

In step the process reads one of the pluralities of the cluster map records included in the cluster map stream . The cluster map record identifies the location in the data stream for data and also identifies the intended location of the data on the source storage media volume i.e. the virtual cluster location. After reading the cluster map record the data is read from the data stream as shown in step . The data is then written to the storage media on the clusters as identified by the starting and ending clusters in the cluster map .

In step the process determines if more records exist in the cluster map stream . If more records exist the process returns to step where the next cluster map record is examined. If no more records exist the process proceeds to step where fix ups are applied. The fix ups are required if the geometry between the source storage media volume used to create the image file and the storage media volume where the source data is restored are different. For example if the location of files identified in the BPB is changed the BPB is updated to reflect the new location of the files. Also the BPB includes geometry information of the storage media. The geometry information in the BPB needs to be updated to reflect the actual geometry of the storage media that includes the restored source data .

After the image driver receives the mount request the image driver sends a request to the file system driver to open the image file as shown in step . Opening a file is a standard process employed by the operating system to permit access to a file on storage media. Because the image file is stored as a file on the storage media it must be opened before being accessed.

Once the image file is open the image driver bypasses the file system driver and directly reads the image file . The image driver reads the control stream and the cluster map stream as shown in steps and . As previously described the control stream includes data that identifies the type of file system used to organize the source data and also the geometry of the source storage media . The data in the control stream is necessary to interpret the information in the other streams such as data stream . The cluster map stream includes the information necessary to correlate virtual cluster locations to the data stream locations.

In step the image driver requests a drive letter mount point assignment for the image file . The assignment is carried out by a portion of the operating system responsible for assigning driver letter mount points.

By way of example when the file system driver issues a data request to read data from the image file it identifies a group of clusters. The clusters correspond to the location where the desired data would reside in restored data . Thus the operating system actually provides a group of virtual clusters. The image driver intercepts the data request . The image driver then examines the cluster map stream and locates the record with a starting cluster and ending cluster that correspond to the virtual clusters provided by the file system driver . The image driver then locates the desired data within the data stream based on the cluster map record reads the data from the data stream and forwards the desired data to the file system driver .

The above arrangement permits the operating system to request data from the image file as if it were a storage media volume. Thus the operating system can read the control information data files executable programs and other data stored in the data stream . As a result the operating system views the image file as a virtual storage media generally labeled . Application can for example read data files from the image file via the operating system . The application can then edit the data file . As another example storage media resources such as those used to read and display the contents of storage media are used with the image file. The storage media resources display the contents of the image file as if the image file was restored data .

Because access of the image file is permitted the set of available tools are extensible. For example the interface can form an application programming interface that permits access to the data streams in the image file . Thus the architecture permits new tools to be created to create restore view edit or otherwise manipulate image file .

The operating arrangement also permits the image file to be edited. The file system driver sends a data request to write data to a group of clusters. The group of clusters corresponds to a set of virtual unallocated clusters The image driver intercepts the request and writes the data labeled to the end of the data stream . If the data represents a new file the image file driver creates a new cluster map record that identifies the virtual cluster location. The cluster map record further includes the data stream location.

If the data represents an edited file the image driver writes the data to the end of the data stream generally labeled . However a new cluster map record is not created. Instead the image driver locates the record that identified the previous location of the file data and modifies the record to include the new virtual cluster and data stream locations.

The parent image file and child image files are stored as separate files. Alternatively the parent file and child image files are stored as part of a larger file . The advantage of using parent and child image files is that multiple versions of the image are maintained without the need to recreate entire image files. Thus the overall sizes of the multiple versions of the image file are reduced.

Each segment is separately transportable over the network. Thus if a first computer sends the image file to a second computer on the network and during the process the network connection is lost the first computer only needs to resend those segments not fully received by the second computer.

In view of the many possible embodiments to which the principles of the subject matter described herein may be applied it should be recognized that the embodiment described herein with respect to the drawing figures is meant to be illustrative only and should not be taken as limiting the scope of the description herein. For example those of skill in the art will recognize that the elements of the illustrated embodiment shown in software may be implemented in hardware and vice versa or that the illustrated embodiment can be modified in arrangement and detail without departing from the spirit of the description herein. Therefore the subject matter as described herein contemplates all such embodiments as may come within the scope of the following claims and equivalents thereof.

