---

title: Connectivity-based authorization
abstract: Techniques which allow definition and enforcement of connectivity-based action and execution authorization policies. On a computer, an action or execution attempt is intercepted in real-time. The connectivity state of the computer, the subject process, the program file of the subject process, the attempted action and the object of the attempted action are determined. An authorization policy considering the connectivity state indicates whether the attempted action is authorized or not. In a tracking mode, the attempted action and its authorization are logged and the attempted action is allowed to proceed. In an enforcement mode, unauthorized attempts are blocked and logged, thereby enforcing the authorization policy.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08555404&OS=08555404&RS=08555404
owner: McAfee, Inc.
number: 08555404
owner_city: Santa Clara
owner_country: US
publication_date: 20060518
---
This application is related to the following all of which are incorporated herein by reference in their entirety 

co pending U.S. patent application Ser. No. 10 651 591 entitled Method and System for Containment of Networked Application Client Software by Explicit Human Input and filed on Aug. 29 2003 

U.S. Pat. No. 7 464 408 issued on Dec. 9 2008 from U.S. patent application Ser. No. 10 651 588 entitled Damage Containment by Translation and filed on Aug. 29 2003 

U.S. Pat. No. 7 783 735 issued on Aug. 24 2010 from U.S. patent application Ser. No. 10 806 578 entitled Containment of Network Communication and filed on Mar. 22 2004 

U.S. Pat. No. 7 840 968 issued on Nov. 23 2010 from U.S. patent application Ser. No. 10 739 230 entitled Method and System for Containment of Usage of Language Interfaces and filed on Dec. 17 2003 

U.S. Pat. No. 7 873 955 issued on Jan. 18 2011 from U.S. patent application Ser. No. 10 935 772 entitled Solidifying the Executable Software Set of a Computer and filed on Sep. 7 2004 

U.S. patent application Ser. No. 11 060 683 entitled Distribution and Installation of Solidified Software on a Computer and filed on Feb. 16 2005 

U.S. Pat. No. 7 603 552 issued on Oct. 13 2009 from U.S. patent application Ser. No. 11 122 872 entitled Piracy Prevention Using Unique Module Translation and filed on May 4 2005 

U.S. Pat. No. 7 856 661 issued on Dec. 21 2010 from U.S. patent application Ser. No. 11 182 320 entitled Classification of Software on Networked Systems and filed on Jul. 14 2005 

U.S. Pat. No. 7 757 269 issued on Jul. 13 2010 from U.S. patent application Ser. No. 11 346 741 entitled Enforcing Alignment of Approved Changes and Deployed Changes in the Software Change Life Cycle by Rahul Roy Chowdhury E. John Sebes and Jay Vaishnav filed on Feb. 2 2006 

U.S. Pat. No. 7 895 573 issued on Feb. 22 2011 from U.S. patent application Ser. No. 11 277 596 entitled Execution Environment File Inventory by Rishi Bhargava and E. John Sebes filed on Mar. 27 2006 and

U.S. Pat. No. 7 870 387 issued on Jan. 11 2011 from U.S. patent application Ser. No. 11 400 085 entitled Program Based Authorization by Rishi Bhargava and E. John Sebes filed on Apr. 7 2006.

Invention relates generally to authorization of actions on computer systems and in particular to authorization based on connectivity states.

Access control is a useful and practical concept in the field of information technology. The definition monitoring and enforcement of access control policies contribute to the predictable and manageable operation and maintenance of business assets and processes.

An abstraction central to access control is that of subjects performing actions on objects. Actions including those attempted by human subjects are ultimately performed by one or more processes running on the computer. While traditional access control techniques use authorization policies that are generally defined for human subjects and additional techniques that allow program based authorization are disclosed in above referenced U.S. Pat. No. 7 870 387 there is also a need for authorizations that take into account the connectivity state of a computer.

We disclose techniques which allow definition and enforcement of connectivity based action and execution authorization policies. On a computer an action or execution attempt is intercepted in real time. The connectivity state of the computer the subject process the program file of the subject process the attempted action and the object of the attempted action are determined. An authorization policy considering the connectivity state indicates whether the attempted action is authorized or not. In a tracking mode the attempted action and its authorization are logged and the attempted action is allowed to proceed. In an enforcement mode unauthorized attempts are blocked and logged thereby enforcing the authorization policy.

In the connectivity based authorization techniques described herein a process attempt to perform an action on an object is intercepted. The state of connectivity along with other things such as the subject program the object and the attempted action are then determined. By way of example the interception and subsequent determinations can be performed by a software agent running on the computer. Referring to an authorization policy which considers the connectivity and other determined attributes a decision is made to either allow or block the attempted action. In both cases it may be desirable to generate a log or alert indicative of the decision.

During the operation of computer processes are launched to perform various actions in accordance with the operation of computer . Specifically when a process hereinafter also referred to as subject process is launched it executes within memory component . A program file hereinafter also referred to as subject program file represents the code or sequence of instructions which subject process starts executing upon its launch. The subject program file is typically some type of an executable file such as a binary executable file script batch file interpreted code byte code etc. Program file is stored on storage component or is otherwise accessible to computer . Note that subject process during its life may execute other code or instructions such as dynamic libraries scripts accepted input or any other container of code but the program file refers to the code that subject process starts out executing upon process launch. Furthermore as described in more detail below when subject process is launched to execute a script the program file refers to the script and not to any interpreter of the script.

At some point during its execution subject process may attempt to perform an action on an object . For example object may be a file and the action attempt may comprise an attempt to write to the file. Other examples of objects and actions are described below.

Using techniques described herein the action attempt of subject process is intercepted and an authorization policy is consulted. The authorization policy takes into account the state of the connectivity state of computer and preferably also considers one or more other parameters such as the subject process the subject program file the object and the action being attempted by subject process . The authorization policy indicates whether the attempted action is authorized or not.

There are two broad modes of operation for the connectivity based authorizations of the present invention a tracking mode and an enforcement mode . Both modes allow authorized attempts to proceed but the modes differ in how they handle unauthorized attempts. In an enforcement mode unauthorized attempts are blocked. In a tracking mode unauthorized attempts are allowed to proceed but they are logged. Tracking mode is useful for examining what effects an authorization policy would have on a system were the policy to be enforced. Tracking mode allows experimentation with and fine tuning of authorization policies on a live computer as well as real time feedback based thereon without disturbing the operation or behavior of the computer . Once an authorization policy is deemed acceptable it can be enforced by switching from tracking mode to enforcement mode.

A typical example of an object is a file managed by a file system of computer . In that case the action attempt is a file system action attempt such as a read write or delete operation on the file or it may be an attempt to execute the file. Another example of an object is a registry entry such as one managed by a Windows operating system. In that case the action attempt may be a retrieve create or delete a registry entry. Other examples of objects include containers or resources managed by a service oriented architecture SOA data structures or other objects stored in memory or any other objects that are accessible to subject process . In general the actions that can be attempted by the subject process depend on the object and how the object is being managed. While the following description is illustrated mainly with reference to file system action attempts this is by way of example and is not intended to limit the scope of the disclosed techniques. It should be obvious to one of ordinary skill in the art that the disclosed techniques can be applied to connectivity based authorization of any action attempted by a subject process on a computer. Further example actions for files and registry entries are enumerated below.

Before consulting a connectivity based authorization policy step preferably also determines one or more other parameters relevant to an authorization of the attempted action such as the target file object of the file system action attempt the subject process and the subject program file and the action that is being attempted by subject process on object . Step optionally also determines one or more other attributes of the above parameters examples of which are enumerated below.

Step consults an authorization policy in order to determine whether the attempted action is authorized or not. The authorization policy takes into account the connectivity determined in step and preferably also takes into account one or more other parameters or attributes determined in step . Optionally the authorization policy may disregard some of the determined information. For example the authorization policy may disregard some or all of the file object attributes and consider only the connectivity of computer and the attempted action. Authorization policies may be stored using any appropriate data structure for example in a computer readable medium comprising a table with a plurality of entries with an entry associating a connectivity state with one or more allowed actions and subject programs and objects on the computer.

Next if the action is authorized step allows the action to proceed and optional step generates one or more log entries and or alerts indicating that the authorized action was allowed to proceed. If the action is not authorized step blocks the action from proceeding and optional step generates one or more log entries and or alerts indicating that the unauthorized action was blocked. A log entry or alert may include information about the connectivity the subject process the subject program the action the object relevant authorization policy date and time and or any other information relevant to the authorization decision and available at the time of logging. Steps and are for an enforcement mode embodiment of the present invention. In a tracking mode embodiment as described above step is skipped allowing the unauthorized action to proceed and recording logs and or alerts at step .

Example attributes of the subject process action and object are described in the above referenced U.S. Pat. No. 7 870 387. Example attributes of the connectivity include the following 

We now turn to describing the steps of in more detail. For the interception step OS provisions can be used to intercept file system action requests and registry action requests as well as to determine whether a file system action request is a an attempt to read a file write to a file delete a file rename a file move a file append to a file truncate a file get or set permissions on a file or get or set any other attribute of a file. For example in a Microsoft Windows OS environment a filter driver can be used to intercept file system requests and determine their type.

In other operating systems such as Linux or other Unix derived operating systems a shim module or wrapper mechanism can be used for that purpose. A wrapper mechanism would redirect action attempts e.g. system calls to a wrapper library that represents an entry point for the interception code and which may eventually call into the original library or code that implements the intended action attempt. One way of indicating redirection to the wrapper library comprises setting one or more environment variables indicating library load paths and sequences.

A shim module redirects system calls to custom interception code within the kernel and the interception code decides whether or not to redirect execution to the kernel code that implements the system call. For example in a Unix derived OS one or more virtual file system VFS methods may be patched to facilitate redirection to interception code. These and other techniques for the interception of file system requests should be obvious to one of ordinary skill in the art and are also briefly described in the above referenced U.S. Pat. No. 7 757 269. Similarly OS provisions can be used to intercept registry action requests and determine whether the request is an attempt to read or retrieve an entry delete an entry write to an entry create an entry or perform any other actions on the entry. We continue to illustrate the steps with exemplary references to file system requests.

Once a file system request is intercepted the request indicates the file object as well as the action that the subject process is attempting to perform on the file object . In an embodiment where step further determines the subject process and its subject program file one technique is to start with a unique identifier for the process context of the currently executing subject process . This identifier need not necessarily comprise the traditional process identification number PID assigned to processes by many operating systems though it may. For example in a Microsoft Windows OS an EPROCESS block or a process handle can be used to uniquely identify the subject process .

Once an identifier for the subject process is determined the subject program file and optionally one or more other attributes of the subject process can be determined as well. For some operating systems such as a Microsoft Windows OS this information may not be available via a published application programming interface API . In such cases one technique for inferring the subject program file associated with the subject process is to explicitly keep track of the process program associations so that they can be referred to when needed. One way to do this is by implementing a Process Tracking Framework abstraction which upon receiving an identifier of a subject process context indicates the subject program file associated with the subject process . The Process Tracking Framework is described in the above referenced U.S. Pat. No. 7 870 387.

The authorization rules can be arbitrarily complex and may represent any function or Boolean predicate which effectively takes as input a connectivity state a subject program file of a subject process and optionally one or more further attributes of the subject process a requested action and an object or one or more file object attributes and outputs an authorization decision. We will now present some specific use cases enabled by the connectivity based authorization techniques and authorization policies described herein.

One particular example of using connectivity based action authorization is to implement file read restrictions on a computer. As one example of a read restriction policy a set of authorization rules can be defined to block file transfer programs resident on computer from accessing a specified set of files R whenever computer has connectivity to any network other than a specific network N. For example R may represent a set of sensitive files related to a business operations which should be safeguarded against leaking outside of N. Consequently as a result of enforcing the connectivity based authorization with such a read restriction policy whenever a file transfer program attempts to access a file in R while computer is connected to any network other than N the attempt will fail.

Another example of using connectivity based action authorization is to implement file write restrictions on a computer. As one example of a write restriction policy a set of authorization rules can be defined to restrict a specific program file P s ability to write to the computer s storage depending on the computer s connectivity. For example P may be specified as a specific hypertext markup language HTML browser such as Microsoft Internet Explorer and an authorization policy can be defined which restricts P to writing only a restricted set of files whenever computer is suspected to be connected to a potentially unsafe network. For example Microsoft Internet Explorer may be allowed to write any type of file to computer s storage except executable files scripts batch files and dynamic libraries unless computer is connected to a specific firewalled network N and to no other potentially unsafe network . Furthermore Microsoft Internet Explorer may be also restricted from modifying existing content on storage unless a connection to N and no connection to any other network can be detected. This means that whenever a connection to the firewalled network cannot be detected Microsoft Internet Explorer will be blocked from writing such restricted files to the computer s storage or modifying existing content thereby reducing the risk of browser written malware and malicious changes to computer .

Other examples of using connectivity based action authorization comprise extending the concepts disclosed in above referenced U.S. Patents and co pending U.S. Patent Applications with the connectivity based authorization techniques disclosed herein. In particular U.S. Pat. Nos. 7 757 269 and 7 895 573 describe techniques involving authorization of updates changes and executions of objects resident on a computer system such as software configuration files registry entries executables etc. . The present connectivity based authorization techniques extend the authorization of updates changes and executions described in said patents to also take into account the connectivity of the computer .

The process for execution authorization is similar to that for action authorization except that in some operating systems execution requests may follow a different code path than other file system action requests and therefore the interception of execution requests may differ in implementation from the interception of other file system action requests.

Before consulting a connectivity based authorization policy and analogously to step above step preferably also determines one or more other parameters relevant to an authorization of the attempted execution such as the target executable file object of the execution attempt the subject process that is attempting to execute the executable file object and the subject program file that represents the code being executed by the subject process . Optionally step also determines one or more other attributes of the above parameters as was enumerated above. For example attributes of the executable file refer to the above described object attributes.

Step consults an authorization policy to determine whether the attempted execution is authorized or not. The authorization takes into account the connectivity determined in step and preferably also takes into account any other parameters and attributes as determined in step . Optionally the authorization policy may disregard some of the determined information. For example the authorization policy may disregard some or all of the executable file object attributes and consider only the connectivity and the subject program file . For example specific programs may be prohibited from executing unless computer is connected only to a trusted network. As a concrete example for a specific business organization browsers such as Microsoft Internet Explorer and tools which process proprietary or sensitive data such as computer aided design CAD tools may be prohibited from running unless computer is connected to the organization s one or more trusted network. As described above authorization policies may be stored using any appropriate data structure for example in a computer readable medium comprising a table with a plurality of entries with an entry associating a connectivity state with one or more allowed executions and subject programs and objects on the computer.

If the execution is authorized step allows the execution to proceed and optional step generates one or more log entries and or alerts indicating that the authorized execution was allowed to proceed. If the execution is not authorized step blocks the action from proceeding and optional step generates one or more log entries and or alerts indicating that an unauthorized execution was blocked. Analogous to the above description steps and are for an enforcement mode embodiment of the present invention. In a tracking mode embodiment step is skipped allowing the unauthorized execution to proceed and recoding logs and or alerts at step .

We now turn to describing the steps of in more detail. One technique for implementing the interception step comprises placing hooks within the process creation and process termination code paths of the OS. This is also described in the above referenced U.S. Pat. No. 7 870 387. For step the determination of connectivity proceeds as described for step above. For step since an execution request submitted to the OS generally includes an indication of the executable file object as an argument e.g. name or handle of a binary file script file batch file interpreted program file byte code file etc. the executable file can be determined by examining the execution request intercepted in step . Any other parameters and attributes for step can be determined as described above for step . Determination of the subject process step can be done as described above for example by starting with a unique identifier for the process context of the currently executing subject process . Determination of subject process attributes step such as the actual program file comprising the code for the subject process can be done by using the Process Tracking Framework described in the above referenced U.S. Pat. No. 7 870 387.

The disclosed connectivity based authorization techniques generalize to any other objects and actions which are accessible to running processes. Examples of such other objects include synchronization objects such as semaphores and locks inter process communication IPC objects such as shared memory segments communication objects such as network sockets local communication abstractions such as pipes file access objects such as symbolic links on a Unix flavored OS and shortcuts on a Windows OS running processes etc. Actions applicable to such objects depend on the specific abstractions implementations and semantics of the systems managing the objects with examples including killing suspending unsuspending or sending signals to processes acquiring or releasing locks reading from or writing to shared memory segments opening reading from writing to or closing network sockets or pipes etc. The adaptation of the program based authorization steps disclosed herein to such objects and actions such as interception of action attempts determination of object attributes etc. should be obvious to one of ordinary skill in the art.

Foregoing described embodiments of the invention are provided as illustrations and descriptions. They are not intended to limit the invention to precise form described. In particular it is contemplated that functional implementation of invention described herein may be implemented equivalently in hardware software firmware and or other available functional components or building blocks and that networks may be wired wireless or a combination of wired and wireless. Other variations and embodiments are possible in light of above teachings and it is thus intended that the scope of invention not be limited by this Detailed Description but rather by Claims following.

