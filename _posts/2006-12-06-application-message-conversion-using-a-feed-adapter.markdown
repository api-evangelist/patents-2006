---

title: Application message conversion using a feed adapter
abstract: An indication of a configuration policy of a plurality of configuration policies is received at a feed adapter. The configuration policy of the plurality of configuration policies is selected based, at least in part, on the received indication of the configuration policy. The configuration policy of the plurality of configuration policies specifies a conversion rule from an input message format to an output message format using at least one conversion function of a plurality of conversion functions. The conversion rule specifies types of arguments that the at least one conversion function receives and returns. An application message having the input message format is received in the feed adapter. The feed adapter converts the application message having the input message format to an application message having the output message format according to the conversion rule specified by the configuration policy of the plurality of configuration policies.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08695015&OS=08695015&RS=08695015
owner: International Business Machines Corporation
number: 08695015
owner_city: Armonk
owner_country: US
publication_date: 20061206
---
The field of the invention is data processing or more specifically methods apparatus and products for application message conversion using a feed adapter.

Messaging environments are generally available to provide data communication between message sending devices and message receiving devices using application messages. An application message is a quantity of data organized into one or more data fields and is passed from a message producer installed on a message sending device to a message consumer installed on a message receiving device. An application message is a form of message recognized by application software operating in the application layer of a data communication protocol stack as contrasted for example with a transport message or network message which are forms of messages recognized in the transport layer and the network layer respectively. An application message may represent for example numeric or textual information images encrypted information and computer program instructions. In a financial market data environment an application message is commonly referred to as a tick and includes financial market data such as for example financial quotes or financial news. Financial quotes include bid and ask prices for any given financial security. A bid refers to the highest price a buyer is willing to pay for a security. An ask refers to the lowest price a seller is willing to accept for a security.

Often in messaging environments message formats recognized by message sending devices are not recognized by message receiving devices. Such messaging environments typically include feed adapters that are capable of application message conversion. The basic task of the feed adapter is to receive an application message having an input message format from a message sending device convert the application message having the input format to an application message having an output format and transmit the application message having the output format to a message receiving device. In addition feed adapters typically process information requests regarding data contained in the converted application messages from message receiving devices.

In current messaging environments software architects typically configure feed adapters to perform application message conversion between only a fixed set of application message formats. This fixed set of application message formats is often hard coded into a conversion module on the feed adapter. Any changes made to the application message formats or the configuration of a feed adapter typically require extensive recoding of the conversion module and subsequence recompilation of the new computer code. In fact even slight modifications to current feed adapters often involve substantial financial and human resources. Readers will therefore appreciate that room for improvement exists for application message conversion using feed adapters.

Embodiments of the inventive subject matter generally include a method. The method includes receiving at a feed adapter an indication of a configuration policy of a plurality of configuration policies. The configuration policy of the plurality of configuration policies is selected based at least in part on said receiving the indication of the configuration policy of the plurality of configuration policies. The configuration policy of the plurality of configuration policies specifies a conversion rule from an input message format to an output message format using at least one conversion function of a plurality of conversion functions. The conversion rule specifies types of arguments that the at least one conversion function receives and returns. An application message having the input message format is received in the feed adapter. The application message having the input message format is converted by the feed adapter to an application message having the output message format according to the conversion rule specified by the configuration policy of the plurality of configuration policies.

Exemplary methods apparatus and products for application message conversion using a feed adapter according to embodiments of the present invention are described with reference to the accompanying drawings beginning with . sets forth a network and block diagram illustrating an exemplary computer data processing system for application message conversion using a feed adapter according to embodiments of the present invention. The system of operates generally for application message conversion using a feed adapter according to embodiments of the present invention as follows A feed adapter capable of application message conversion is provided. The feed adapter includes a plurality of conversion functions. Each conversion function is capable of converting data from one format to another format. A configuration policy is established on the feed adapter . The configuration policy specifies a conversion rule from an input message format to an output message format using at least one of the conversion functions. The feed adapter receives an application message having the input message format. The feed adapter converts the application message having the input message format to an application message having the output message format according to the conversion rule of the configuration policy . The feed adapter may also transmit the application message having the output message format to a message receiving device on a message stream . In the example of the message receiving device is implemented as a subscribing client device.

The high speed low latency data communications environment illustrated in includes a high speed low latency data communications network . The network includes a feed adapter a stream administration server and a subscribing client device as well as the infrastructure for connecting such devices together for data communications. The network of is termed high speed low latency because the application messages sent between devices connected to the network on message streams administered by the stream administration server bypass the stream administration server . For example the application messages on the message stream from the feed adapter to the subscribing client device bypass the stream administration server . Although such messages are not delayed for processing in the stream administration server the stream administration server retains administration of the stream between devices connected to the high speed low latency data communications network .

Further contributing to the high speed low latency nature of network readers will note that the network does not include a router that is a computer networking device whose primary function is to forward data packets across a network toward their destinations. Rather each device provides its own routing functionality for data communication through a direct connection with the other devices connected to the network . Because the network does not include a computer networking device dedicated to routing data packets the network of may be referred to as a minimally routed network. Although the exemplary network illustrated in does not include a router such a minimally routed network is for explanation only. In fact some high speed low latency networks useful in application message conversion using a feed adapter according to embodiments of the present invention may include a router.

The high speed low latency data communications environment depicted in includes a message stream . A message stream is a data communication channel between a communications endpoint of a sending device and a communications endpoint of at least one receiving device. A communications endpoint is composed of a network address and a port for a sending device such as a feed adapter or a receiving device such as a subscribing client device. A message stream may be implemented as a multicast data communication channel. In a multicast data communication channel a one to many relationship exists between a destination address for a message and the communication endpoints of receiving devices. That is each destination address identifies a set of communication endpoints for receiving devices to which each message of the stream is replicated. A multicast data communication channel may be implemented using for example the User Datagram Protocol UDP and the Internet Protocol IP . In addition to a multicast data communication channel the message stream may be implemented as a unicast data communication channel. In a unicast data communication channel a one to one relationship exists between a destination address for a message and a communication endpoint of a receiving device. That is each destination address uniquely identifies a single communication endpoint of single receiving device. A unicast data communication channel may be implemented using for example the Transmission Control Protocol TCP and IP.

The exemplary system of includes a stream administration server connected to the high speed low latency data communications network through a wireline connection . The stream administration server of is a computer device having installed upon it a stream administration module an authentication module an authorization module and an authorization policy . A stream administration module is a software component that includes a set of computer program instructions configured for application message conversion using a feed adapter according to embodiments of the present invention. The stream administration module operates generally for application message conversion using a feed adapter according to embodiments of the present invention by brokering establishment of a message stream from the feed adapter to the message receiving device . In addition the stream administration module administers the message stream by providing security services such as authenticating the subscribing client device and authorizing the subscribing client device to receive application messages from the feed adapter on the message stream .

The authentication module of is a set of computer program instructions capable of providing authentication security services to the stream administration module through an exposed authentication application programming interface API . Authentication is a process of verifying the identity of an entity. In the exemplary system of the authentication module verifies the identity of the subscribing client device . The authentication module may provide authentication security services using a variety of security infrastructures such as for example shared secret key infrastructure or a public key infrastructure.

The authorization module of is a set of computer program instructions capable of providing authorization security services to the stream administration module through an exposed authorization API . Authorization is a process of only allowing resources to be used by resource consumers that have been granted authority to use the resources. In the example of the authorization module identifies the application messages that the subscribing client device is authorized to receive on the message stream . The authorization module of provides authorization security services using an authorization policy . The authorization policy is a set of rules governing the privileges of authenticated entities to send or receive application messages on a message stream. In a financial market data environment for example an authenticated entity may be authorized to receive application messages that include financial quotes for some financial securities but not other securities. The authorization policy may grant privileges on the basis of an individual entity or an entity s membership in a group.

In the exemplary system of feed adapter is connected to the high speed low latency data communications network through a wireline connection . The feed adapter is a computer device having the capabilities of converting application messages on a feed adapter input stream having an input message format to application messages on a feed adapter output stream having an output message format and transmitting the application messages on the feed adapter output stream to subscribing client devices. The feed adapter input stream is a message stream from a feed source to the feed adapter . The feed adapter output stream is a message stream administered by the stream administration server from the feed adapter to the subscribing client device .

In the example of the feed adapter receives application messages having an input message format on the feed adapter input stream from a feed source . The feed source is a computer device capable of aggregating data into application messages and transmitting the messages to a feed adapter. In a financial market data environment for example a feed source may be implemented as a feed source controlled by the Options Price Reporting Authority OPRA . OPRA is the securities information processor for financial market information generated by the trading of securities options in the United States. The core information that OPRA disseminates is last sale reports and quotations. Other examples of feed sources in financial market data environment may include feed sources controlled by the Consolidated Tape Association CTA or The Nasdaq Stock Market Inc. The CTA oversees the dissemination of real time trade and quote information in New York Stock Exchange and American Stock Exchange listed securities. The Nasdaq Stock Market Inc. operates the NASDAQ Market Center which is an electronic screen based equity securities market in the United States. In a financial market data environment a feed adapter input stream is referred to as a financial market data feed. 

The feed adapter of has installed upon it a conversion module a custom conversion library a configuration policy conversion function libraries a message library a message model messaging middleware and a transport engine . The conversion module is a software component that includes a set of computer program instructions for providing basic feed adapter operation. The conversion module of initializes the feed adapter loads common conversion function libraries and loads the custom conversion library . The common conversion function libraries contain conversion functions that the feed adapter typically utilizes regardless of the feed sources providing application messages.

The custom conversion library of is a software component that includes computer program instructions for extending feed adapter functionality to utilize a particular feed source such as for example the feed source . The conversion module utilizes the custom conversion library through API exposed by the custom conversion library . The custom conversion library provides access the feed source administers the feed adapter input stream from the feed source and performs application message conversion according to embodiments of the present invention. The custom conversion library operates generally for application message conversion according to embodiments of the present invention by converting an application message having the input message format to an application message having the output message format according to the conversion rule of the configuration policy . To perform application message conversion the custom conversion library typically loads conversion functions libraries specified in the configuration policy and utilizes the conversion functions contained in those loaded libraries.

In the example of the custom conversion library may be implemented as a dynamically linked library available to the conversion module at runtime dynamically loaded Java classes or any other implementation as will occur to those of skill in the art. Although the description above indicates that the functionality provided by the custom conversion library is contained in a software module distinct from the conversion model readers will note that features of both the conversion module and the custom conversion library may overlap or be combined into a single software module.

The configuration policy of is a data structure that specifies a conversion rule from an input message format to an output message format using at least one of the conversion functions of the conversion function libraries . A conversion rule is a data structure that contains a set of instructions for converting an application message from one format to another format. The custom conversion library may perform the set of instructions contain in a conversion rule when conditions specified in the conversion rule are satisfied. Utilizing multiple conversion rules in a configuration policy the custom conversion library may convert messages from a variety of input formats to a variety of output formats. In the example of the configuration policy specifies a conversion rule for converting the application message received from the feed adapter input stream having an input format to application messages having an output format for transmission to subscribing client devices on the feed adapter output stream .

In the example of the configuration policy is typically established on the feed adapter by a system administrator. The configuration policy may however be established on the feed adapter by the stream administration server when the message stream is brokered or be established on the feed adapter by any other entity as will occur to those of skill in the art. The configuration policy of may be implemented using a structured document such as for example an eXtensible Markup Language XML document. However the custom conversion library typically converts a configuration policy to a binary table for optimal runtime performance.

The conversion function libraries of are loadable software modules that each contain one or more conversion functions capable of converting data in an application message from one format to another format or converting values of data fields from one value to another value. The conversion functions contained in the conversion function libraries may for example convert a 16 bit integer to a 32 bit integer convert a number stored in a string field to a 64 bit double floating point value increase the value of one data field by one or any other conversion as will occur to those of skill in the art. The custom conversion library accesses the conversion functions through a set of conversion function APIs exposed by the conversion functions of the conversion function libraries . In the example of the conversion function libraries may be implemented as dynamically linked libraries available to the custom conversion library at runtime dynamically loaded Java classes or any other implementation as will occur to those of skill in the art.

In the exemplary system of each conversion function in each of the conversion function libraries has an argument signature. An argument signature specifies the order number and type of arguments that a particular conversion functions receives and returns. The argument signature of each function is stored in a table in the conversion function library that contains the function.

The argument signatures are used by the custom conversion library to determine whether the types of the arguments specified by a conversion rule for a particular conversion function match the argument signature of the particular conversion function. If the types of the arguments specified by a conversion rule for a particular conversion function do not match the argument signature of the particular conversion function the custom conversion library converts the types of the arguments specified by the conversion rule for the conversion function to match the argument signature of the conversion function.

In the example of the application messages have a format specified in the message model . The message model is metadata that defines the structure and the format used to create access and manipulate the application messages converted from the application messages received from the feed source . Typically the same message model is established on the feed adapter and the subscribing client device by the stream administration server when the stream administration server brokers the message stream to the subscribing client device . A message model may be implemented using a structured document such as for example an XML document a Java object C object or any other implementation as will occur to those of skill in the art.

In the example of the conversion module the custom conversion library and the conversion functions of the conversion function libraries process the data contained in the application messages using the message library . The message library is a software module that includes a set of functions for creating accessing and manipulating messages according to the message model . The message library is accessible to the conversion module the custom conversion library and the conversion functions of the conversion function libraries through a message API exposed by the message library .

Before the custom conversion library of performs data processing on the application messages the custom conversion library receives application messages having an input message format from the feed source . The custom conversion library of may receive the source stream messages through a receiving transport engine not shown of the feed adapter . The receiving transport engine is a software module that operates in the transport layer of the network stack and may be implemented according to the TCP IP protocols UDP IP protocols or any other data communication protocol as will occur to those of skill in the art. The receiving transport engine may provide the received application messages directly to the custom conversion library or to the messaging middleware which in turn provides the source stream messages to the custom conversion library .

The messaging middleware of is a software component that provides high availability services between the feed adapter any backup feed adapter that may exist the subscribing client device and the feed source . After the custom conversion library of performs data processing on the application messages received from the feed source the messaging middleware receives the application messages having an output message format from the custom conversion library . The messaging middleware then provides the received application messages having the output message format to the transport engine for transmission to a subscribing client device on the message stream . The custom conversion library interacts with the messaging middleware through a messaging middleware API exposed by the messaging middleware .

The transport engine of is a software component operating in the transport and network layers of the OSI protocol stack promulgated by the International Organization for Standardization. The transport engine provides data communications services between network connected devices. The transport engine may be implemented according to the UDP IP protocols TCP IP protocols or any other data communications protocols as will occur to those of skill in the art. The transport engine is a software module that includes a set of computer program instructions for application message conversion according to embodiments of the present invention. The transport engine operates generally for application message conversion according to embodiments of the present invention by transmitting application messages having an output message format to a message receiving device on the message stream . The messaging middleware operates the transport engine through a transport API exposed by the transport engine . The transport engine transmits the application messages by encapsulating the application messages provided by the messaging middleware into packets and transmitting the packets through the message stream to the subscribing client device .

The subscribing client device in exemplary system of connects to the high speed low latency data communications network through a wireline connection . The subscribing client device of is a computer device capable of subscribing to the message streams transmitted by various feed adapters. In a financial market data environment for example a subscribing client device may subscribe to a tick to receive the bid and ask prices for a particular security on a message stream provided by a feed adapter controlled by a financial securities broker.

In the example of the subscribing client device has installed upon it an application a message library a message model messaging middleware a stream administration library and a transport engine . The application is a software component that processes data contained in the application messages received from the feed adapter . The application may process the data for utilization by the subscribing client device itself for contributing the data to another feed adapter or for contributing the data to some other device. In a financial market data environment the application installed on the subscribing client device may be a program trading application that buys or sells financial securities based on the quoted prices contained in ticks. The application may also be a value adding application that contributes information to a tick such as for example the best bid and ask prices for a particular security that is not typically included in the ticks provided by the feed source . The subscribing client device may then transmit the ticks to a feed adapter for resale to other subscribing client devices.

The application processes the data contained in the application messages using the message library . The message library is software module that includes a set of functions for creating accessing and manipulating messages according to a message model . The message library is accessible to the application through a message API exposed by the message library . Similar to the message library installed on the feed adapter the message library of interprets the received application messages using the message model . As mentioned above the message model is metadata that specifies the structure and the format for interpreting the application messages received on the message stream .

The communications between the subscribing client device and the stream administration server may be implemented using a stream administration library . The stream administration library is a set of functions contained in dynamically linked libraries statically linked libraries or dynamically loaded Java classes available to the application through a stream administration library API . Through the stream administration library the application of the subscribing client device may request to subscribe to messages from a feed adapter modify an existing message subscription or cancel a subscription. Functions of the stream administration library used by the application may communicate with the stream administration server through network by calling member methods of a CORBA object calling member methods of remote objects using the Java Remote Method Invocation RMI API using web services or any other communication implementation as will occur to those of skill in the art.

 CORBA refers to the Common Object Request Broker Architecture a computer industry specifications for interoperable enterprise applications produced by the Object Management Group OMG . CORBA is a standard for remote procedure invocation first published by the OMG in 1991. CORBA can be considered a kind of object oriented way of making remote procedure calls although CORBA supports features that do not exist in conventional RPC. CORBA uses a declarative language the Interface Definition Language IDL to describe an object s interface.

Interface descriptions in IDL are compiled to generate stubs for the client side and skeletons on the server side. Using this generated code remote method invocations effected in object oriented programming languages such as C or Java look like invocations of local member methods in local objects.

The Java Remote Method Invocation API is a Java application programming interface for performing remote procedural calls published by Sun Microsystems . The Java RMI API is an object oriented way of making remote procedure calls between Java objects existing in separate Java Virtual Machines that typically run on separate computers. The Java RMI API uses a remote procedure object interface to describe remote objects that reside on the server. Remote procedure object interfaces are published in an RMI registry where Java clients can obtain a reference to the remote interface of a remote Java object. Using compiled stubs for the client side and skeletons on the server side to provide the network connection operations the Java RMI allows a Java client to access a remote Java object just like any other local Java object.

Before the application processes the data contained in the messages the application receives the messages from the messaging middleware which in turn receives the application messages from the feed adapter through the transport engine . The messaging middleware is a software component that provides high availability services between the subscribing client device the feed adapter any backup feed adapters and the stream administration module . In addition the messaging middleware provides message administration services for the stream administration server . Such message administration services may include restricting the ability of the application to send and receive messages on a message stream to messages that satisfy certain constraints. The application and the stream administration library interact with the messaging middleware through a messaging middleware API .

The transport engine of is a software component operating in the transport and network layers of the OSI protocol stack promulgated by the International Organization for Standardization. The transport engine provides data communications services between network connected devices. The transport engine may be implemented according to the UDP IP protocols TCP IP protocols or any other data communications protocols as will occur to those of skill in the art. The transport engine is a software component that receives application message from the feed adapter . The transport engine receives the application messages by receiving packets through the message stream from the feed adapter unencapsulating the application messages from the received packets and providing the application messages to the messaging middleware . The messaging middleware operates the transport engine through a transport API exposed by the transport engine .

The servers and other devices illustrated in the exemplary system of are for explanation not for limitation. Devices useful in application message conversion using feed adapters according to embodiments of the present invention may be implemented using general purpose computers such as for example computer servers or workstations hand held computer devices such as for example Personal Digital Assistants PDAs or mobile phones or any other automated computing machinery configured for data processing according to embodiments of the present invention as will occur to those of skill in the art.

The arrangement of servers and other devices making up the exemplary system illustrated in are for explanation not for limitation. Although the connections to the network of are depicted and described in terms of wireline connections readers will note that wireless connections may also be useful according to various embodiments of the present invention. Furthermore data processing systems useful according to various embodiments of the present invention may include additional servers routers other devices and peer to peer architectures not shown in as will occur to those of skill in the art. Networks in such data processing systems may support many data communications protocols including for example Transmission Control Protocol TCP Internet Protocol IP HyperText Transfer Protocol HTTP Wireless Access Protocol WAP Handheld Device Transport Protocol HDTP and others as will occur to those of skill in the art. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

Application message conversion using a feed adapter in accordance with the present invention in some embodiments may be implemented with one or more feed adapters message receiving devices and stream administration servers. These devices and servers are in turn implemented to some extent at least as computers that is automated computing machinery. For further explanation therefore sets forth a block diagram of automated computing machinery comprising an exemplary feed adapter useful in application message conversion using a feed adapter according to embodiments of the present invention. The feed adapter of includes at least one computer processor or CPU as well as random access memory RAM which is connected through a high speed memory bus and bus adapter to processor and to other components of the feed adapter.

Stored in RAM are a conversion module custom conversion library a configuration policy conversion function libraries application messages application messages a message model message library messaging middleware and transport engine . Each application message is a quantity of data that includes one or more data fields and is transmitted from one device to another on a message stream. Application messages are typically created and processed by applications operating in application layers above the network and transport layers of a network protocol stack. As mentioned above an application message may represent numeric or textual information images encrypted information computer program instructions and so on. In a financial market data environment for example a message is commonly referred to as a tick and includes financial market data such as for example financial quotes or financial news. Each application message may be implemented using a structured document such as for example an XML document a Java object C object or any other implementation as will occur to those of skill in the art. The message model is metadata that defines the structure and format for creating and interpreting the application messages having an output message format. The message model may be implemented using a structured document such as for example an XML document a Java object C object or any other implementation as will occur to those of skill in the art. The conversion module the custom conversion library the configuration policy the conversion function libraries the message library the messaging middleware and the transport engine illustrated in are software components that is computer program instructions that operate as described above with reference to regarding the feed adapter.

Also stored in RAM is an operating system . Operating systems useful in feed adapters according to embodiments of the present invention include UNIX Linux Microsoft NT IBM s AIX IBM s i5 OS and others as will occur to those of skill in the art. The operating system the conversion module the custom conversion library the configuration policy the conversion function libraries the application messages the application messages the message model the message library the messaging middleware and the transport engine in the example of are shown in RAM but many components of such software typically are stored in non volatile memory also for example on a disk drive .

The exemplary feed adapter of includes bus adapter a computer hardware component that contains drive electronics for high speed buses the front side bus the video bus and the memory bus as well as drive electronics for the slower expansion bus . Examples of bus adapters useful in feed adapters useful according to embodiments of the present invention include the Intel Northbridge the Intel Memory Controller Hub the Intel Southbridge and the Intel I O Controller Hub. Examples of expansion buses useful in feed adapters useful according to embodiments of the present invention may include Peripheral Component Interconnect PCI buses and PCI Express PCIe buses.

The exemplary feed adapter of also includes disk drive adapter coupled through expansion bus and bus adapter to processor and other components of the exemplary feed adapter . Disk drive adapter connects non volatile data storage to the exemplary feed adapter in the form of disk drive . Disk drive adapters useful in feed adapters include Integrated Drive Electronics IDE adapters Small Computer System Interface SCSI adapters and others as will occur to those of skill in the art. In addition non volatile computer memory may be implemented in a feed adapter as an optical disk drive electrically erasable programmable read only memory so called EEPROM or Flash memory RAM drives and so on as will occur to those of skill in the art.

The exemplary feed adapter of includes one or more input output I O adapters . I O adapters in feed adapters implement user oriented input output through for example software drivers and computer hardware for controlling output to display devices such as computer display screens as well as user input from user input devices such as keyboards and mice. The exemplary feed adapter of includes a video adapter which is an example of an I O adapter specially designed for graphic output to a display device such as a display screen or computer monitor. Video adapter is connected to processor through a high speed video bus bus adapter and the front side bus which is also a high speed bus.

The exemplary feed adapter of includes a communications adapter for data communications with other computers and for data communications with a high speed low latency data communications network . Such data communications may be carried out serially through RS 232 connections through external buses such as a Universal Serial Bus USB through data communications networks such as IP data communications networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a data communications network. Examples of communications adapters useful for application message conversion using a feed adapter according to embodiments of the present invention include modems for wired dial up communications IEEE 802.3 Ethernet adapters for wired data communications network communications and IEEE 802.11b adapters for wireless data communications network communications.

Although is discussed with reference to exemplary feed adapters readers will note that automated computing machinery comprising exemplary message receiving devices such as for example subscribing client devices and exemplary stream administration servers useful in application message conversion using a feed adapter according to embodiments of the present invention are similar to the exemplary feed adapter of . That is such exemplary stream administration servers and feed adapters include one or more processors bus adapters buses RAM video adapters communications adapters I O adapters disk drive adapters and other components similar to the exemplary feed adapter of as will occur to those of skill in the art.

For further explanation sets forth a flowchart illustrating an exemplary method for application message conversion using a feed adapter according to embodiments of the present invention. The method of includes providing a feed adapter capable of application message conversion. The feed adapter of includes a plurality of conversion functions . Each conversion function is capable of converting data from one format to another format. As mentioned above the conversion functions may be contained in conversion function libraries that are loaded during the initialization of the feed adapter .

For additional explanation of the conversion functions consider a set of exemplary conversion functions in a financial market data environment. Such exemplary conversion functions useful in application message conversion using a feed adapter according to embodiments of the present invention may include the following functions 

The exemplary conversion functions above may be used by a feed adapter to convert application messages having an OPRA format to application messages having a proprietary financial market data FMD format. The exemplary function opraSymbol receives a reference to an application message having the OPRA format extracts the symbol for a financial security from the application message having the OPRA format converts the symbol from an OPRA format to an FMD format and returns the converted symbol having the FMD format to the calling application. The exemplary function opraStrikePrice receives a reference to an application message having the OPRA format extracts the strike price for a financial security from the application message having the OPRA format converts the strike price from an OPRA format to an FMD format and returns the converted strike price having the FMD format to the calling application. The exemplary function opraExpireDate receives a reference to an application message having the OPRA format extracts the expiration date for a financial security from the application message having the OPRA format converts the expiration date from an OPRA format to an FMD format and returns the converted expiration data having the FMD format to the calling application. The exemplary function opraVolume receives a reference to an application message having the OPRA format extracts the volume for a financial security from the application message having the OPRA format converts the volume from an OPRA format to an FMD format and returns the converted volume having the FMD format to the calling application. The exemplary function stringSecurityType receives a string representing a type of financial security converts the string to a security type having a FMD format and returns the security type having the FMD format to the calling application. Readers will note that the exemplary conversion functions above are for explanation and not for limitation. Other conversion functions as will occur to those of skill in the art may also be useful in application message conversion according to embodiments of the present invention.

The method of also includes establishing on the feed adapter a configuration policy . The configuration policy is a data structure that specifies a conversion rule from an input message format to an output message format using at least one of the conversion functions . The conversion rule is a data structure that contains a set of instructions for converting an application message from one format to another format. Although the configuration policy depicted in includes only one conversion rule readers will note that a configuration policy useful according to the present invention may include any number of conversion rules. In fact a configuration policy according to the present invention often includes multiple conversion rules because the configuration policy may specify a specific conversion rule for each type of application message received from a feed source. In a financial market data environment for example the configuration policy may specify one conversion rule for a message containing quote data for a security and another conversion rule for a message containing sale data for a security. In the example of the configuration policy may be established on the feed adapter by a system administrator by a stream administration server that brokers the establishment of a message stream from the feed adapter to a message receiving device or any other entity as will occur to those of skill in the art.

The configuration policy of may be implemented using a structured document such as for example an eXtensible Markup Language XML document.

For optimal runtime performance however the feed adapter typically converts a configuration policy to a binary table. For further explanation consider an exemplary configuration policy useful in application message conversion using a feed adapter according to embodiments of the present invention in a financial market data environment. Such an exemplary configuration policy may be implemented in XML as follows 

In the example above lines and contain markup tags that denote the beginning and the end respectively of the exemplary configuration policy. Line of the exemplary configuration policy instructs a feed adapter to load the conversion function library identified as OPRAFMD. The OPRAFMD conversion function library contains the function definitions for some of the conversion functions specified in the exemplary configuration policy above. In the example above lines and contain markup tags that denote the beginning and the end respectively of an exemplary conversion rule specified by the exemplary configuration policy. The exemplary conversion rule specifies nine actions to be performed by a feed adapter to convert an application message having an OPRA format to an application message having a FMD format when the feed adapter receives an application message having an OPRA format representing a sale on participating OPRA exchange. Each of the first eight actions specified in the exemplary conversion rule above instruct a feed adapter to execute a conversion function using an application message having an OPRA format and to store the return result in an application message having the FMD format. The last action specified in the conversion rule instructs a feed adapter to route the application message having the FMD format to the appropriate message receiving devices. Readers will note that the exemplary configuration policy above is for explanation and not for limitation. Other configuration policies as will occur to those of skill in the art may also be useful in application message conversion using a feed adapter according to embodiments of the present invention. Readers will also note that the XML implementation the markup tags and structure of the exemplary configuration policy above is also for explanation and not for limitation. Many other implementations markup tags or structures may be used to implement configuration policies useful according to embodiments of the present invention.

The method of includes receiving in the feed adapter an application message having the input message format. The feed adapter may receive the application message having the input message format according to the method of by receiving one or more transport packets from a feed source that includes the application message having the input message format and unencapsulating the application message from the received transport packets.

The method of also includes converting by the feed adapter the application message having the input message format to an application message having the output message format according to the conversion rule of the configuration policy . Converting the application message having the input message format to an application message having the output message format according to method of includes calling each of the conversion functions used to specify the conversion rule in dependence upon the application message having the input message format receiving in return from each of the called conversion functions a value and storing each of the received values in the application message having the output message format. In the method of calling each of the conversion functions receiving in return from each of the called conversion functions a value and storing each of the received values in the application message having the output message format may be carried out in a conversion module or a custom conversion library installed on the feed adapter .

In the example of the input message format of the application message includes one or more input field formats specifying the message fields in the application message . Similarly the output message format of the application message includes one or more output field formats specifying the message fields in the application message . To provide conversions between an input field format and an output field format one of the conversion functions of is capable of converting data from the input field format to the output field format and returning the converted data having the output field format. For example one of the conversion functions may be capable of converting a number stored in an ASCII text field format to a double precision number field format. In addition one of the conversion functions of is capable of calculating a value in dependence upon the application message having the input message format and returning the calculated value for storage in the application message having the output message format. For example consider a financial market data environment. In such an environment one of the conversion functions may be capable of converting pence to pounds or converting pounds to pence.

After a feed adapter converts the application message having the input message format to an application message having the output message format the feed adapter may transmit the application message having the output message format to a message receiving device. For further explanation therefore sets forth a flowchart illustrating a further exemplary method for application message conversion using a feed adapter according to embodiments of the present invention that includes transmitting by the feed adapter to a message receiving device on a message stream the application message having the output message format.

The method of is similar to the method of . That is the method of includes providing a feed adapter capable of application message conversion. The feed adapter of includes a plurality of conversion functions . Each conversion function of is capable of converting data from one format to another format. The method of is also similar to the method of in that the method of includes establishing on the feed adapter a configuration policy that specifies a conversion rule from an input message format to an output message format using at least one of the conversion functions receiving in the feed adapter an application message having the input message format and converting by the feed adapter the application message having the input message format to an application message having the output message format according to the conversion rule of the configuration policy .

The method of also includes brokering by a stream administration server establishment of the message stream from the feed adapter to the message receiving device. The message stream of represents a data communication channel between a communications endpoint of a message receiving device and a communications endpoint of the feed adapter . A message stream may be implemented as a multicast data communication channel using the UDP IP protocols or a unicast data communication channel using TCP IP protocols as discussed above with reference to .

Brokering by a stream administration server establishment of the message stream from the feed adapter to the message receiving device according to the method of may be carried out by receiving a subscription request from a message receiving device to subscribe to messages from the feed adapter . The subscription request may be implemented as an XML document a call to a member method of a RMI object on the message receiving device or any other implementation as will occur to those of skill in the art. The subscription request may include topics of the messages that the message receiving device requests to receive from the feed adapter . A topic represents the characteristics of the messages that the message receiving device requests. Using a topic a message receiving device may specify the group of messages for receipt from the feed adapter . In a financial market data environment for example a message receiving device may use a topic to request ticks from an OPRA feed source that contains quotes of an IBM option traded on the Chicago Board Options Exchange CBOE that includes the best bid and best ask for the IBM option on the CBOE.

In the example of brokering by a stream administration server establishment of the message stream from the feed adapter to the message receiving device may also include providing the message receiving device with a destination address for the feed adapter . The destination address for the feed adapter is a multicast address or a unicast address used by the message receiving device to listen for messages from the feed adapter . Using the destination address provided by the stream administration server the message receiving device may establish the message stream from the feed adapter to the message receiving device.

Before the stream administration server provides the destination address for the feed adapter the stream administration server in the example of may perform several security services to ensure that the message receiving device only receives messages from the feed adapter for which the message receiving device is authorized to receive. In the method of brokering by a stream administration server establishment of the message stream from the feed adapter to the message receiving device may also be carried out by authenticating the message receiving device and authorizing the message receiving device to receive messages from the feed adapter on the message stream . Authenticating the message receiving device may be carried out by verifying client security credentials provided by the message receiving device with the subscription request. The client security credentials may be implemented as a digital signature in a public key infrastructure a security token or any other security data as will occur to those of skill in the art for authenticating the identity of the originator of the subscription request. Authorizing the message receiving device to receive messages from the feed adapter on the message stream may be carried out by identifying the privileges associated with the authenticated message receiving device in dependence upon an authorization policy. An authorization policy is a set of rules governing the privileges of authenticated message receiving devices requesting to receive data from the feed adapter .

The method of also includes transmitting by the feed adapter to a message receiving device on a message stream the application message having the output message format. The feed adapter may transmit the application message having the output message format to a message receiving device on a message stream according to the method of by encapsulating the application message into one or more transport packets and transmitting the transport packets through the message stream to the message receiving device according to the UDP IP protocols TCP IP protocols or any other data communications protocols as will occur to those of skill in the art.

As mentioned above each conversion function may have an argument signature that specifies the order number and type of arguments that the particular conversion function receives and returns. When the types of arguments specified by a conversion rule for a particular conversion function do not match the argument signature of the conversion function the feed adapter may convert the types of the arguments specified by the conversion rule to match the argument signature of the conversion function. For further explanation therefore sets forth a flowchart illustrating a further exemplary method for application message conversion using a feed adapter according to embodiments of the present invention that includes converting types of arguments specified by a conversion rule for a conversion function to match the argument signature of the conversion function.

The method of is similar to the method of . That is the method of includes providing a feed adapter capable of application message conversion. The feed adapter of includes a plurality of conversion functions . Each conversion function of is capable of converting data from one format to another format. The method of is also similar to the method of in that the method of includes establishing on the feed adapter a configuration policy that specifies a conversion rule from an input message format to an output message format using at least one of the conversion functions receiving in the feed adapter an application message having the input message format and converting by the feed adapter the application message having the input message format to an application message having the output message format according to the conversion rule of the configuration policy .

In the example of each of the conversion functions has an argument signature . The argument signature of each function specifies the order number and type of arguments that the conversion function receives and returns. The argument signature of each function of may be stored in a function table in a conversion function library that contains the function.

The argument signature may be stored in such a function table using codes to represent argument types. Examples of codes used to represent argument types in application message conversion using a feed adapter may include the following exemplary codes 

Using combinations of the exemplary codes above a feed adapter may represent the argument signature of each conversion function as entry in a function table of the conversion function library that contains the function. Examples of entries that may be used to represent the argument signatures useful in application message conversion according to embodiments of the present invention may include the following entries 

The exemplary entry S B represents an argument signature for a conversion function that receives a byte array argument and returns a string argument. The exemplary entry L IIII represents an argument signature for a conversion function that receives four integer arguments and returns a 64 bit integer argument. The exemplary entry F D represents an argument signature for a conversion function that receives a 64 bit double floating point number argument and returns a 32 bit floating point number argument. The exemplary entry v represents an argument signature for a conversion function that receives any type of argument and does not provide a return argument.

In the example of the conversion rule specifies one or more arguments for one of the conversion functions . Each argument of has a type . For further explanation consider again the exemplary conversion rule discussed above and reproduced below in part 

The exemplary conversion rule above species that the conversion function stringSecurityType receives one argument and returns one argument. The argument received by the conversion function stringSecurityType has a type that is a string. The string type of the argument received by the conversion function stringSecurityType is specified in the example above using the quotation marks around the character O. The argument returned by the conversion function stringSecurityType has a type that is specified by the FMD.SecurityType field. The field type of the FMD.SecurityType field is the type of the argument returned by the conversion function stringSecurityType. 

In the method of converting by the feed adapter the application message having the input message format to an application message having the output message format according to the conversion rule of the configuration policy includes determining whether the types of the arguments specified by the conversion rule for the conversion function match the argument signature of the conversion function. Determining whether the types of the arguments specified by the conversion rule for the conversion function match the argument signature of the conversion function according to the method of may be carried out by parsing the conversion rule to identify the conversion functions and the type of arguments for each of the identified functions looking up the argument signature for each identified functions in the function libraries containing each identified function and comparing each argument type for each identified function with the corresponding argument type specified in the argument signature for the function. If each argument type for each identified conversion function matches the corresponding argument type specified in the argument signature for the conversion function then the types of the arguments specified by the conversion rule for the conversion function match the argument signature of the conversion function. The types of the arguments specified by the conversion rule for the conversion function however do not match the argument signature of the conversion function if any of the argument types for each identified conversion function do not match the corresponding argument type specified in the argument signature for the conversion function.

Converting by the feed adapter the application message having the input message format to an application message having the output message format according to the conversion rule of the configuration policy according to the method of is carried out by continuing with the application message conversion when if the types of the arguments specified by the conversion rule for the conversion function match the argument signature . In the method of continuing with the application message conversion may be carried out by calling each of the conversion functions used to specify the conversion rule in dependence upon the application message having the input message format receiving in return from each of the called conversion functions a value and storing each of the received values in the application message having the output message format.

In the method of converting by the feed adapter the application message having the input message format to an application message having the output message format according to the conversion rule of the configuration policy is carried out by converting the types of the arguments specified by the conversion rule for the conversion function to match the argument signature of the conversion function if the types of the arguments specified by the conversion rule for the conversion function do not match the argument signature . Converting the types of the arguments specified by the conversion rule for the conversion function to match the argument signature of the conversion function may be carried out using standard type conversion algorithms as will occur to those of skill in the art. After the feed adapter converts the types of the arguments specified by the conversion rule for the conversion function to match the argument signature of the conversion function the method of continues with application message conversion as discussed above.

In view of the explanations set forth above in this document readers will recognize that application message conversion using a feed adapter according to embodiments of the present invention provides the following benefits 

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for application message conversion using a feed adapter. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on signal bearing media for use with any suitable data processing system. Such signal bearing media may be transmission media or recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as for example Ethernets and networks that communicate with the Internet Protocol and the World Wide Web as well as wireless transmission media such as for example networks implemented according to the IEEE 802.11 family of specifications. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

