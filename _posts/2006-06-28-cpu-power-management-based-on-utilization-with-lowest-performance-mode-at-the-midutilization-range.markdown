---

title: CPU power management based on utilization with lowest performance mode at the mid-utilization range
abstract: A demand-based method and system of a processor power management is described. A processor is caused to enter a particular performance mode based on a first and a second utilization threshold. The particular performance mode includes at least a first performance mode, a second performance mode, and a third performance mode. The processor is caused to operate with a clock frequency in the third performance mode that is lower than the clock frequency of the processor in the first and second performance modes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=07596709&OS=07596709&RS=07596709
owner: Intel Corporation
number: 07596709
owner_city: Santa Clara
owner_country: US
publication_date: 20060628
---
This application is a continuation in part application of U.S. application Ser. No. 11 006 872 filed on Dec. 7 2004now abandoned which is a continuation application of U.S. application Ser. No. 09 751 759 filed Dec. 30 2000 now issued as U.S. Pat. No. 6 829 713.

The field of the invention relates generally to central processing units CPUs . More particularly the field invention relates to CPU power management. Still more particularly the field of the invention relates to a demand based method and system of CPU power management.

As battery dependent portable computing devices notebook computers personal digital assistants etc. have become more prevalent the conservation of battery power or power management has become more and more important. In many power management systems some or all system components may be deactivated or powered down to conserve power. This method however requires that the devices powered down be inactive or unused for a sufficiently long period of time to justify the latency associated with their re activation. Therefore a number of methods have been implemented to decrease device power consumption within the active or powered on state. Since the power dissipated by a device is dependent both on its applied voltage and on the frequency with which device transitions or switching occurs conventional power management techniques typically focus on one or both of these factors.

Modem power management systems implement a variety of voltage and frequency reduction or scaling techniques. Although substantial power savings can be realized by reducing a device s voltage special hardware is often required to correctly operate such devices using low and variable voltages. Such voltage reduction techniques also currently limit the maximum frequency at which a device may be operated. Similar power savings may be realized by scaling a device s operating frequency or clock . In conventional power management systems a device s operating frequency may be altered in a variety of ways. In one approach the applied clock signal is periodically stopped and restarted such that the average or effective operating frequency is lowered throttling . In another approach a lower frequency clock signal generated independently or derived from an existing clock is applied to a device. Although these approaches may be used alone or in combination to reduce a device s or system s power consumption this frequency scaling technique reduces the operating frequency of the device and consequently the number of operations or tasks it can perform.

In the past several approaches have been taken to control the activation of the above described power management techniques such as the user selection of a pre defined power mode the occurrence of environmental events such as the application or removal of an A C alternating current power source or the detection of a system or device temperature. More recently power management systems have looked to device utilization or idleness to trigger the application or removal of such techniques in an effort to conserve power in a more user transparent manner. When a utilization based power managed device is idle for a pre determined period of time power reduction techniques such as voltage and frequency scaling are applied to decrease the amount of power consumed. The greatest difficulty traditionally associated with such demand based systems has been in determining a device s current utilization particularly for processing devices such as the central processing unit CPU of a data processing system.

In a conventional operating system OS CPU utilization is determined by accumulating CPU idle time across a sampling interval to determine the percentage of time the processor is inactive. To accomplish this a list of tasks or threads is maintained by the OS which are ready to run i.e. not waiting for some event to resume execution. When this ready to run list is empty no tasks are being executed and the processor is idle. Accordingly a CPU independent timer is read and the processor is placed in a low power state. When a new task is added to the ready to run list the processor is placed in an active state and the timer is read again. The difference between the first and second timer reads multiplied by the timer s period then represents the CPU s idle time. The accumulation of this time across a sampling interval is then used to determine the CPU utilization what percentage of the CPU s time is spent idle . Unfortunately neither this measure of CPU utilization nor the state of the ready to run task list is available outside of the OS through a supported application programming interface API . Consequently this OS generated CPU utilization metric cannot be utilized in a demand or utilization based power management system.

A demand based method and system of CPU power management is disclosed. In the following detailed description numerous specific details are set forth in order to provide a thorough understanding of the present invention. However it will be apparent to one of ordinary skill in the art that these specific details need not be used to practice the present invention. In other circumstances well known structures materials circuits processes and interfaces have not been shown or described in detail in order not to unnecessarily obscure the present invention.

Referring now to a conventional data processing system useable with the present invention is illustrated. Data processing or computer system is comprised of a system unit output devices such as display and printer and input devices such as keyboard and mouse . Data processing system receives data for processing by the manipulation of input devices and or directly from fixed or removable media storage devices such as disk and network connection interfaces not shown . Data processing system then processes data and presents resulting output data via output devices such as display printer fixed or removable media storage devices like disk or network connection interfaces.

Referring now to there is depicted a high level block diagram of the components of a data processing system such as that illustrated by . In a conventional computer system system unit includes a processing device such as central processing unit CPU connected to a level two L cache over a processor system bus PSB . Processor system bus is in turn coupled to an expansion bus such as local bus and a memory via a north bridge circuit . Local bus may include a peripheral component interconnect PCI Video Electronics Standards Association VESA bus or the like tightly coupled to the processor and the processor system bus to permit high speed access to select devices such as display device .

Memory may include read only ROM and or random access RAM memory devices such as a synchronous dynamic random access memory SDRAM module capable of storing data as well as instructions to be executed by CPU . Access to data and instructions stored within memory is provided via a memory controller not shown within north bridge circuit . L cache is similarly used typically in a hierarchical manner to store data and instructions for direct access by CPU . Display device may include a cathode ray tube CRT display such as display liquid crystal display LCD or a similar device for displaying various kinds of data to a computer user. For example image graphical or textual information may be presented to the user on display device . System unit of data processing system also features an expansion or compatibility bus such as the Industry Standard Architecture ISA bus and a south bridge circuit coupling it to local bus to facilitate the attachment of other relatively slower devices to the system . South bridge circuit includes a universal serial bus USB port as well as other direct connections for devices such as a network interface card a data storage device such as a magnetic hard disk drive and an audio device such as a speaker or sound card.

Other devices not directly coupled to south bridge may be connected to the system via the expansion bus as illustrated. A floppy disk drive FDD providing additional data storage capacity on removable media storage devices such as disk and input devices such as a keyboard and a cursor control device are each coupled to expansion bus in this manner to communicate data instructions and or command selections to central processing unit . Cursor control device may comprise a conventional mouse such as mouse of a trackball or any other device capable of conveying desired cursor manipulation. Similarly expansion bus includes an input output I O controller having standard serial and parallel port functionality for connecting other I O devices such as printer to the system.

The system of the present invention includes software information processing hardware and various processing steps which will be described below. The features and process steps of the present invention may be embodied in machine or computer executable instructions embodied within media such as disk . The instructions can be used to cause a general purpose or special purpose processor such as CPU which is programmed with the instructions to perform the described methods of the present invention. Alternatively the features or steps of the present invention may be performed by specific hardware components that contain hard wired logic for performing the steps or by any combination of programmed computer components and custom hardware components.

Referring now to a portion of the architecture depicted in is illustrated in greater detail. Processor is shown in communication with memory over the processor system bus utilizing a memory controller of north bridge circuit . A common system clock BClk is generated by a clock generator and applied to a clock control phase lock loop PLL of CPU and to memory controller . A core voltage is similarly applied to CPU in the illustrated embodiment providing necessary operating power. While the BClk signal is applied accesses to and from memory occur at its frequency of approximately 100 megahertz MHz . The central processing unit however is capable of performing tasks at much greater speeds than this and accordingly a bus ratio or multiplier is selected using a clock control signal GHI and a higher frequency central processing unit clock signal is generated utilizing PLL . So for example if the system or front side clock has a frequency of 100 MHz and a ratio of 5 to 1 is selected using the GHI signal then the generated CPU clock will have a frequency of approximately 500 MHz. Alternatively a higher multiplier or ratio of say 7 to 1 could be selected yielding a CPU clock frequency of approximately 700 MHz.

The generated central processing unit clock signal is then applied to clock throttling logic before being passed to processor core . Throttling is a technique by which the CPU clock is deasserted or gated off from the processor core to prevent functional units within the core from operating. Throttling logic therefore acts as a switch actuated by a stop clock Stp Clk control signal between the PLL and the processor core . A time stamp counter is also included within the CPU and incremented for each cycle sometimes called ticks or pulses of the CPU clock which is gated through or applied to the processor core as shown. Because time stamp counter tracks the number of clock ticks or cycles applied to the functional units of the processor core such as instruction decoders floating point and integer execution units etc. it provides an extremely accurate representation of the actual work performed by CPU . One additional chipset architecture component illustrated in is independent timer . System independent timer runs independently of CPU and its associated system clock unaffected by Stp Clk signal throttling or BClk signal frequency modifications. Using the number of ticks of independent timer elapsed between reads and its fixed frequency an accurate measure of the passage of time may be obtained. In one embodiment a Windows high performance counter exported via the Win32 Application Programming Interface API as the QueryPerformanceCounter function can be used as independent timer . In an alternative Advanced Configuration and Power Interface ACPI compliant embodiment a power management timer may be utilized. Although in the illustrated embodiment independent timer is depicted as being integrated with clock generator circuit in alternative embodiments the timer may be generated in a separate device or integrated circuit.

Referring now to an architectural system diagram depicting the operation of a data processing system according to the present invention is illustrated. In the illustrated embodiment a plurality of application programs such as power management application interact with various platform hardware devices including a CPU via an operating system such as the Windows operating system from Microsoft Corporation one or more device drivers and basic input output system BIOS code . The illustrated system is interrupt driven both with respect to the multitasking of the various applications and communication between applications and platform hardware .

Accordingly in one embodiment of the present invention an application request for a hardware resource from within platform hardware can cause an interrupt such as a System Control Interrupt SCI or a System Management Interrupt SMI to be generated and an interrupt handler routine to be responsively executed. Interaction between operating system and platform hardware is then facilitated by a device driver and BIOS . In the illustrated embodiment BIOS contains information such as physical device addresses of the various devices attached to the data processing system and is useful with respect to the actual transmission of data. By contrast device driver is typically specific to a particular hardware device and is usually concerned with the translation of data between various device formats.

Referring now to a high level logic flowchart of a first embodiment of the method of the present invention is illustrated. In there is depicted a technique by which a demand based transition between two processor performance states is executed. At block the illustrated process is begun and thereafter a CPU utilization status request is received from a power management application block . The described utilization request may be periodic or may occur in response to relevant power management events such as thermal or processor workload events the connection of an alternating current power supply or the like. Once the CPU utilization has been established block a determination is then made whether the calculated utilization exceeds a utilization threshold block . In the illustrated embodiment a relatively high utilization threshold of 95 is selected to identify the execution of demand intensive applications such as DVD movie players personal computer games and performance benchmark tests. It should be readily appreciated however that the various utilization thresholds described herein have been selected for illustrative purposes only and that a wide range of threshold values could be substituted therefore without departing from the spirit and scope of the present invention. If the utilization threshold is exceeded the CPU is transitioned to a maximum performance processor performance mode block and operated at a higher performance level to ensure that the execution performance of such demand intensive application programs is not degraded.

If the utilization of the CPU is not above or equal to the 95 utilization threshold it is then determined whether the CPU s utilization falls at or below a second utilization threshold of in the illustrated embodiment 75 block . The processor performance level may then be matched to its current utilization level by switching the CPU to a battery optimized processor performance mode block to conserve power when the utilization level falls below this figure and a decrease in performance will be less noticeable to the end user. Otherwise the process is terminated block with the processor performance mode of the central processing unit remaining unchanged. Power may be conserved and the maximum performance mode distinguished from the battery optimized mode by the frequency at which the processor is operated. While numerous other power and performance management techniques are known and within the scope of the present invention in one embodiment utilization of the maximum performance processor performance mode entails the operation of the central processing unit at an operating frequency of 600 MHz while the battery optimized mode entails the application of a 500 MHz central processing unit clock signal. Following any transition to either maximum performance or battery optimized mode the process is terminated block . In an alternative embodiment factors other than an instantaneous CPU utilization and a utilization threshold may be used to select an appropriate processor performance mode such as the duration of time that the examined CPU remains at a particular utilization level or within a particular range of utilization levels.

Referring now to a high level logic flowchart of a second embodiment of the method of the present invention is illustrated. After the process is begun block a user specified power management profile is received block in which power conservation and system performance are prioritized generally or a specific preferred processor performance mode may be designated. In the illustrated embodiment a maximum battery or ultra battery optimized profile is received conveying that power conservation is to be favored over execution speed. Then an executing power management software or firmware application generates a system management interrupt SMI block in response to the receipt of the user power management profile which in turn transitions the CPU to battery optimized mode if necessary from whatever prior state the processor was operating in. Subsequently the power management application issues a request for the current CPU utilization status block which is determined either by the generated SMI or directly by the power management application itself block by a method which will be described in greater detail with reference to herein. In alternative embodiment the described system management interrupt is used only to transition the system from one performance or power mode to another with both CPU utilization detection and other related tasks being performed directly by the power management application.

The user specified power management profile is then checked to ensure that maximum battery mode is still currently enabled block . If so the resolved CPU utilization is examined to determine whether it exceeds a utilization threshold of 20 block in this embodiment. If not the process is terminated block . If the current utilization of the CPU exceeds the tuneable threshold the CPU is transitioned from battery optimized mode to a virtual maximum battery performance mode by engaging throttling of the central processing unit clock signal at a particular frequency block . Otherwise the process ends block and the battery optimized performance mode is utilized until another transition precipitating event occurs. Using the illustrated process allows small bursty tasks or code segments which can be completed within the sampling time interval of the CPU utilization determination to be executed at the full battery optimized performance level without enabling CPU clock signal throttling. Such tasks can be completed faster at this non throttled rate allowing the system to transition after their completion to an even lower power state than can be achieved with clock throttling conserving more power overall.

Referring now to a high level logic flowchart of a third embodiment of the method of the present invention is illustrated. The beginning of the process is depicted at block and thereafter a CPU utilization status request is received from a power management application block . Once the CPU utilization has been established block a determination is made whether the calculated utilization exceeds a utilization threshold block . In the illustrated embodiment a relatively high utilization threshold of 95 is selected for this first utilization threshold as illustrated. If the utilization threshold is exceeded any previously applied CPU clock signal throttling is disabled block and the CPU is transitioned to a maximum performance processor performance mode block and operated at a higher performance level to ensure that the execution performance of demand intensive application programs is not degraded.

If the utilization of the CPU is not above or equal to the 95 utilization threshold it is then determined whether the CPU s utilization falls at or below a second utilization threshold of in the illustrated embodiment 20 block . If the current CPU utilization level is not greater than the 20 utilization threshold the CPU is operated in battery optimized mode block and clock throttling is disabled block such that power saving states such as the C and C states defined by the well known Advanced Configuration and Power Interface Specification Revision 2.0 Jul. 27 2000 ACPI can be entered more quickly following completion of the CPU workload. Lastly for CPU utilizations falling in between the two utilization thresholds the CPU is transitioned to and operated in maximum battery mode by entering battery optimized mode block and enabling clock throttling for the applied CPU clock block . Consequently the performance of CPU workloads having a consistent intermediate demand intensity is reduced and the completion time is extended in order to reduce the total amount of power consumed. Following any transition to or retention of any of the above described power management performance modes maximum performance battery optimized mode and maximum battery the process is terminated block .

Referring now to a high level logic flowchart of a method of determining the utilization of a central processing unit according to one embodiment of the present invention is illustrated. depicts a technique by which a the utilization of a CPU may be determined independently of a data processing system s operating system. In one embodiment this method is utilized to determine CPU utilization within the various method embodiments of the present invention such as at blocks and of FIGS. and respectively. The process illustrated by begins at block . Thereafter a system independent timer such as an ACPI chipset compliant power management timer or Windows performance counter is read. block . Next a sampling time interval is defined using the independent timer s clock period as well as currently and previously read system independent timer values block . A value is then read from a time stamp counter block which is incremented for each cycle or clock of a CPU clock signal which is applied to the processor core of central processing unit . Using a previously read time stamp counter value and the currently read value the total number of CPU clock signal ticks or cycles applied to the CPU s processor core during the sampling time interval may be obtained block . Thereafter the total amount or quantum of time within the sampling time interval during which the CPU clock signal was active within the CPU s processor core can be derived using the accumulated number of CPU clock cycles and the CPU clock signal s period block . CPU utilization may then be expressed as a ratio of this active CPU clock signal time to the sampling time interval block . Thereafter the process is terminated block .

Referring now to a high level logic flowchart of a fourth embodiment of the method of the present invention is illustrated. At a CPU utilization is determined in response to a status request from a power management application. Once the CPU utilization has been established a determination is made as to the relationship of the calculated CPU utilization with respect to a first a second and a third utilization threshold.

At if the CPU utilization is determined to be less than or equal to the first utilization threshold the central processing unit is placed in a first performance mode at .

At if the CPU utilization is determined to be greater than a second utilization threshold the first utilization threshold being lower than the second utilization threshold the central processing unit is placed in a second performance mode at .

At if the CPU utilization is determined to be between the first utilization threshold and the second utilization threshold the central processing unit is placed in a third performance mode at . When the central processing unit is placed in the third performance mode the central processing unit operates in the first performance mode and reduces a clock frequency of the CPU.

In accordance with one embodiment the first performance mode includes the battery optimized mode as previously described. The second performance mode includes the maximum performance mode as previously described. The third performance mode includes the maximum battery performance mode as previously described.

Referring now to a high level logic flowchart of a fifth embodiment of the method of the present invention is illustrated. At the value of the each utilization threshold may be configured by a user in a user specified power management profile. At the previously custom configured user specified power management profile is received.

At the CPU utilization is determined in response to a status request from a power management application. Once the CPU utilization has been established a determination is made as to the relationship of the calculated CPU utilization with respect to the previously configured utilization threshold as stored in the user specified power management profile. The CPU is then placed in the corresponding performance mode at .

It should be noted that the processor discussed in the present application is not limited to a Central Processing Unit but may include also other similar components such as a chipset. Further the processor may also be powered by a DC power source. The DC power source may include but is not limited to fuel cells and batteries.

Although the present invention is described herein with reference to a specific preferred embodiment many modifications and variations therein will readily occur to those with ordinary skill in the art. Accordingly all such variations and modifications are included within the intended scope of the present invention as defined by the following claims.

